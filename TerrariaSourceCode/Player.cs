// Decompiled with JetBrains decompiler
// Type: Terraria.Player
// Assembly: Terraria, Version=1.3.5.1, Culture=neutral, PublicKeyToken=null
// MVID: E90A5A2F-CD10-4A2C-9D2A-6B036D4E8877
// Assembly location: E:\Decompile\Terraria\Terraria.exe

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Input;
using ReLogic.Utilities;
using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using Terraria.Audio;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Events;
using Terraria.GameContent.Tile_Entities;
using Terraria.GameContent.UI;
using Terraria.GameInput;
using Terraria.Graphics.Capture;
using Terraria.Graphics.Effects;
using Terraria.Graphics.Shaders;
using Terraria.ID;
using Terraria.IO;
using Terraria.Localization;
using Terraria.ObjectData;
using Terraria.Social;
using Terraria.UI;
using Terraria.UI.Chat;
using Terraria.UI.Gamepad;
using Terraria.Utilities;
using Terraria.World.Generation;

namespace Terraria
{
    public class Player : Entity
    {
        private static byte[] ENCRYPTION_KEY = new UnicodeEncoding().GetBytes("h3y_gUyZ");
        private static float _blizzardSoundVolume = 0.0f;
        private static SlotId _strongBlizzardSound = (SlotId) SlotId.Invalid;
        private static SlotId _weakBlizzardSound = (SlotId) SlotId.Invalid;
        private static SlotId _insideBlizzardSound = (SlotId) SlotId.Invalid;
        public static int taxRate = 3600;
        public static int crystalLeafDamage = 100;
        public static int crystalLeafKB = 10;
        public static int manaSickTime = 300;
        public static int manaSickTimeMax = 600;
        public static float manaSickLessDmg = 0.25f;
        public static int nameLen = 20;
        public static bool deadForGood = false;
        public static int tileRangeX = 5;
        public static int tileRangeY = 4;
        public static float defaultGravity = 0.4f;
        public static int jumpHeight = 15;
        public static float jumpSpeed = 5.01f;
        public static int defaultItemGrabRange = 38;
        private static float itemGrabSpeed = 0.45f;
        private static float itemGrabSpeedMax = 4f;
        public static int StopMoneyTroughFromWorking = 3;
        public static bool lastPound = true;
        public Player.OverheadMessage chatOverhead = new Player.OverheadMessage();

        public Player.SelectionRadial DpadRadial =
            new Player.SelectionRadial(Player.SelectionRadial.SelectionMode.Dpad4);

        public Player.SelectionRadial CircularRadial =
            new Player.SelectionRadial(Player.SelectionRadial.SelectionMode.RadialCircular);

        public Player.SelectionRadial QuicksRadial =
            new Player.SelectionRadial(Player.SelectionRadial.SelectionMode.RadialQuicks);

        public bool[] hideInfo = new bool[13];
        public int[] builderAccStatus = new int[10];
        public string lostCoinString = "";
        public string name = "";
        public bool[] NPCBannerBuff = new bool[267];
        public int extraAccessorySlots = 2;
        public int tankPet = -1;
        public Vector2[] solarShieldPos = new Vector2[3];
        public Vector2[] solarShieldVel = new Vector2[3];
        public float flameRingScale = 1f;
        public Vector2[] beetlePos = new Vector2[3];
        public Vector2[] beetleVel = new Vector2[3];
        public Vector2[] itemFlamePos = new Vector2[7];
        public float lifeSteal = 99999f;
        public int gem = -1;
        public int carpetFrame = -1;
        public int maxMinions = 1;
        public BitsByte zone1 = (BitsByte) (byte) 0;
        public BitsByte zone2 = (BitsByte) (byte) 0;
        public BitsByte zone3 = (BitsByte) (byte) 0;
        public BitsByte zone4 = (BitsByte) (byte) 0;
        public int[] doubleTapCardinalTimer = new int[4];
        public int[] holdDownCardinalTimer = new int[4];
        public float[] speedSlice = new float[60];
        public int sign = -1;
        public int changeItem = -1;
        public Item[] armor = new Item[20];
        public Item[] dye = new Item[10];
        public Item[] miscEquips = new Item[5];
        public Item[] miscDyes = new Item[5];
        public Item trashItem = new Item();
        public float ghostDir = 1f;
        public int[] buffType = new int[22];
        public int[] buffTime = new int[22];
        public bool[] buffImmune = new bool[206];
        public int heldProj = -1;
        public int breathMax = 200;
        public int breath = 200;
        public float stealth = 1f;
        public string setBonus = "";
        public Item[] inventory = new Item[59];
        public bool[] inventoryChestStack = new bool[59];
        public Chest bank = new Chest(true);
        public Chest bank2 = new Chest(true);
        public Chest bank3 = new Chest(true);
        public Vector2 fullRotationOrigin = Vector2.Zero;
        public int nonTorch = -1;
        public float stepSpeed = 1f;
        public int head = -1;
        public int body = -1;
        public int legs = -1;
        public sbyte handon = -1;
        public sbyte handoff = -1;
        public sbyte back = -1;
        public sbyte front = -1;
        public sbyte shoe = -1;
        public sbyte waist = -1;
        public sbyte shield = -1;
        public sbyte neck = -1;
        public sbyte face = -1;
        public sbyte balloon = -1;
        public bool[] hideVisual = new bool[10];
        public BitsByte hideMisc = (BitsByte) (byte) 0;
        public string showItemIconText = "";
        public Vector2[] shadowPos = new Vector2[3];
        public float[] shadowRotation = new float[3];
        public Vector2[] shadowOrigin = new Vector2[3];
        public int[] shadowDirection = new int[3];
        public float manaCost = 1f;
        public int step = -1;
        public int statLifeMax = 100;
        public int statLifeMax2 = 100;
        public int statLife = 100;
        public float gravDir = 1f;
        public Vector2 lastBoost = Vector2.Zero;
        public int meleeCrit = 4;
        public int rangedCrit = 4;
        public int magicCrit = 4;
        public int thrownCrit = 4;
        public float meleeDamage = 1f;
        public float rangedDamage = 1f;
        public float thrownDamage = 1f;
        public float bulletDamage = 1f;
        public float arrowDamage = 1f;
        public float rocketDamage = 1f;
        public float magicDamage = 1f;
        public float minionDamage = 1f;
        public float meleeSpeed = 1f;
        public float thrownVelocity = 1f;
        public float moveSpeed = 1f;
        public float pickSpeed = 1f;
        public float wallSpeed = 1f;
        public float tileSpeed = 1f;
        public int SpawnX = -1;
        public int SpawnY = -1;
        public int[] spX = new int[200];
        public int[] spY = new int[200];
        public string[] spN = new string[200];
        public int[] spI = new int[200];
        public float gravity = Player.defaultGravity;
        public float maxFallSpeed = 10f;
        public float maxRunSpeed = 3f;
        public float runAcceleration = 0.08f;
        public float runSlowdown = 0.2f;
        public bool[] adjTile = new bool[470];
        public bool[] oldAdjTile = new bool[470];
        public Color hairDyeColor = Color.Transparent;
        public Color hairColor = new Color(215, 90, 55);
        public Color skinColor = new Color((int) byte.MaxValue, 125, 90);
        public Color eyeColor = new Color(105, 90, 75);
        public Color shirtColor = new Color(175, 165, 140);
        public Color underShirtColor = new Color(160, 180, 215);
        public Color pantsColor = new Color((int) byte.MaxValue, 230, 175);
        public Color shoeColor = new Color(160, 105, 60);
        public SoundPlaySet hermesStepSound = new SoundPlaySet();
        public int lastCreatureHit = -1;
        public int bestOre = -1;
        public string displayedFishingInfo = "";
        public int[] grappling = new int[20];
        public int rocketTimeMax = 7;
        public int maxTurrets = 1;
        public int maxTurretsOld = 1;
        public int flyingPigChest = -1;
        public int chest = -1;
        public int talkNPC = -1;
        public int potionDelayTime = Item.potionDelay;
        public int restorationDelayTime = Item.restorationDelay;
        public int[] ownedProjectileCounts = new int[714];
        public bool[] npcTypeNoAggro = new bool[580];
        public Vector2 MinionRestTargetPoint = Vector2.Zero;
        public int MinionAttackTargetNPC = -1;
        public List<Point> TouchedTiles = new List<Point>();
        private float _stormShaderObstruction = 1f;
        private float _shaderObstructionInternalValue = 1f;
        public int[] hurtCooldowns = new int[2];
        public const int maxSolarShields = 3;
        public const int nebulaMaxLevel = 3;
        public const int SupportedSlotsArmor = 3;
        public const int SupportedSlotsAccs = 7;
        public const int SupportedSlotSets = 10;
        public const int InitialAccSlotCount = 5;
        public const int miscSlotPet = 0;
        public const int miscSlotLight = 1;
        public const int miscSlotCart = 2;
        public const int miscSlotMount = 3;
        public const int miscSlotHook = 4;
        public const int maxBuffs = 22;
        public const int defaultWidth = 20;
        public const int defaultHeight = 42;
        public const int shadowMax = 3;
        public const int SHIELD_PARRY_DURATION = 20;
        public const int SHIELD_PARRY_DURATION_DRAWING_TWEAKER = 20;
        public const int SHIELD_PARRY_DAMAGE_BUFF_MULTIPLIER = 5;
        public bool alchemyTable;
        public int HotbarOffset;
        public bool GoingDownWithGrapple;
        public byte spelunkerTimer;
        public int lostCoins;
        public int soulDrain;
        public float drainBoost;
        public bool dd2Accessory;
        public int taxMoney;
        public int taxTimer;
        public float basiliskCharge;
        public bool hasBanner;
        public Vector2 lastDeathPostion;
        public DateTime lastDeathTime;
        public bool showLastDeath;
        public bool extraAccessory;
        public bool tankPetReset;
        public int stringColor;
        public int counterWeight;
        public bool yoyoString;
        public bool yoyoGlove;
        public int beetleOrbs;
        public float beetleCounter;
        public int beetleCountdown;
        public bool beetleDefense;
        public bool beetleOffense;
        public bool beetleBuff;
        public int solarShields;
        public int solarCounter;
        public bool solarDashing;
        public bool solarDashConsumedFlare;
        public int nebulaLevelLife;
        public int nebulaLevelMana;
        public int nebulaManaCounter;
        public int nebulaLevelDamage;
        public bool manaMagnet;
        public bool lifeMagnet;
        public bool lifeForce;
        public bool calmed;
        public bool inferno;
        public float flameRingRot;
        public byte flameRingFrame;
        public byte flameRingAlpha;
        public int netManaTime;
        public int netLifeTime;
        public bool netMana;
        public bool netLife;
        public int beetleFrame;
        public int beetleFrameCounter;
        public float manaSickReduction;
        public bool manaSick;
        public bool stairFall;
        public int loadStatus;
        public int itemFlameCount;
        public bool outOfRange;
        public float ghostDmg;
        public bool teleporting;
        public float teleportTime;
        public int teleportStyle;
        public bool sloping;
        public bool chilled;
        public bool dazed;
        public bool frozen;
        public bool stoned;
        public bool lastStoned;
        public bool ichor;
        public bool webbed;
        public bool noBuilding;
        public int ropeCount;
        public int manaRegenBonus;
        public int manaRegenDelayBonus;
        public int dash;
        public int dashTime;
        public int dashDelay;
        public int eocDash;
        public int eocHit;
        public float accRunSpeed;
        public bool cordage;
        public int gemCount;
        public BitsByte ownedLargeGems;
        public byte meleeEnchant;
        public byte pulleyDir;
        public bool pulley;
        public int pulleyFrame;
        public float pulleyFrameCounter;
        public bool blackBelt;
        public bool sliding;
        public int slideDir;
        public int launcherWait;
        public bool iceSkate;
        public bool carpet;
        public int spikedBoots;
        public float carpetFrameCounter;
        public bool canCarpet;
        public int carpetTime;
        public int miscCounter;
        public int infernoCounter;
        public bool sandStorm;
        public bool crimsonRegen;
        public bool ghostHeal;
        public bool ghostHurt;
        public bool sticky;
        public bool slippy;
        public bool slippy2;
        public bool powerrun;
        public bool flapSound;
        public bool iceBarrier;
        public bool dangerSense;
        public float endurance;
        public bool loveStruck;
        public bool stinky;
        public bool resistCold;
        public bool electrified;
        public bool dryadWard;
        public bool panic;
        public bool brainOfConfusion;
        public byte iceBarrierFrame;
        public byte iceBarrierFrameCounter;
        public bool shadowDodge;
        public float shadowDodgeCount;
        public bool palladiumRegen;
        public bool onHitDodge;
        public bool onHitRegen;
        public bool onHitPetal;
        public int petalTimer;
        public int shadowDodgeTimer;
        public int phantomPhoneixCounter;
        public int fishingSkill;
        public bool cratePotion;
        public bool sonarPotion;
        public bool accFishingLine;
        public bool accTackleBox;
        public int numMinions;
        public float slotsMinions;
        public bool pygmy;
        public bool raven;
        public bool slime;
        public bool hornetMinion;
        public bool impMinion;
        public bool twinsMinion;
        public bool spiderMinion;
        public bool pirateMinion;
        public bool sharknadoMinion;
        public bool UFOMinion;
        public bool DeadlySphereMinion;
        public bool stardustMinion;
        public bool stardustGuardian;
        public bool stardustDragon;
        public float wingTime;
        public int wings;
        public int wingsLogic;
        public int wingTimeMax;
        public int wingFrame;
        public int wingFrameCounter;
        public int skinVariant;
        public bool ghost;
        public int ghostFrame;
        public int ghostFrameCounter;
        public int miscTimer;
        public bool pvpDeath;
        public bool boneArmor;
        public bool frostArmor;
        public bool honey;
        public bool crystalLeaf;
        public bool defendedByPaladin;
        public bool hasPaladinShield;
        public float townNPCs;
        public double headFrameCounter;
        public double bodyFrameCounter;
        public double legFrameCounter;
        public int netSkip;
        public int oldSelectItem;
        public bool immune;
        public bool immuneNoBlink;
        public int immuneTime;
        public int immuneAlphaDirection;
        public int immuneAlpha;
        public int team;
        public bool hbLocked;
        public float maxRegenDelay;
        public bool editedChestName;
        public int reuseDelay;
        public int aggro;
        public float activeNPCs;
        public bool mouseInterface;
        public bool lastMouseInterface;
        public int noThrow;
        public int selectedItem;
        public int itemAnimation;
        public int itemAnimationMax;
        public int itemTime;
        public int toolTime;
        public float itemRotation;
        public int itemWidth;
        public int itemHeight;
        public Vector2 itemLocation;
        public bool poundRelease;
        public float ghostFade;
        public int breathCD;
        public int lavaCD;
        public int lavaMax;
        public int lavaTime;
        public bool ignoreWater;
        public bool armorEffectDrawShadow;
        public bool armorEffectDrawShadowSubtle;
        public bool armorEffectDrawOutlines;
        public bool armorEffectDrawShadowLokis;
        public bool armorEffectDrawShadowBasilisk;
        public bool armorEffectDrawOutlinesForbidden;
        public bool armorEffectDrawShadowEOCShield;
        public bool socialShadowRocketBoots;
        public bool socialGhost;
        public bool shroomiteStealth;
        public bool socialIgnoreLight;
        public int stealthTimer;
        public float headRotation;
        public float bodyRotation;
        public float legRotation;
        public Vector2 headPosition;
        public Vector2 bodyPosition;
        public Vector2 legPosition;
        public Vector2 headVelocity;
        public Vector2 bodyVelocity;
        public Vector2 legVelocity;
        public float fullRotation;
        public float gfxOffY;
        public bool dead;
        public int respawnTimer;
        public int attackCD;
        public int potionDelay;
        public byte difficulty;
        public byte wetSlime;
        public HitTile hitTile;
        public int jump;
        public Microsoft.Xna.Framework.Rectangle headFrame;
        public Microsoft.Xna.Framework.Rectangle bodyFrame;
        public Microsoft.Xna.Framework.Rectangle legFrame;
        public Microsoft.Xna.Framework.Rectangle hairFrame;
        public bool controlLeft;
        public bool controlRight;
        public bool controlUp;
        public bool controlDown;
        public bool controlJump;
        public bool controlUseItem;
        public bool controlUseTile;
        public bool controlThrow;
        public bool controlInv;
        public bool controlHook;
        public bool controlTorch;
        public bool controlMap;
        public bool controlSmart;
        public bool controlMount;
        public bool releaseJump;
        public bool releaseUp;
        public bool releaseUseItem;
        public bool releaseUseTile;
        public bool releaseInventory;
        public bool releaseHook;
        public bool releaseThrow;
        public bool releaseQuickMana;
        public bool releaseQuickHeal;
        public bool releaseLeft;
        public bool releaseRight;
        public bool releaseSmart;
        public bool releaseMount;
        public bool releaseDown;
        public bool controlQuickMana;
        public bool controlQuickHeal;
        public bool tileInteractionHappened;
        public bool tileInteractAttempted;
        public int altFunctionUse;
        public bool mapZoomIn;
        public bool mapZoomOut;
        public bool mapAlphaUp;
        public bool mapAlphaDown;
        public bool mapFullScreen;
        public bool mapStyle;
        public bool releaseMapFullscreen;
        public bool releaseMapStyle;
        public int leftTimer;
        public int rightTimer;
        public bool delayUseItem;
        public bool showItemIcon;
        public bool showItemIconR;
        public int showItemIcon2;
        public int runSoundDelay;
        public float shadow;
        public int shadowCount;
        public bool fireWalk;
        public bool channel;
        public int anglerQuestsFinished;
        public int bartenderQuestLog;
        public bool downedDD2EventAnyDifficulty;
        public int armorPenetration;
        public int statDefense;
        public int statMana;
        public int statManaMax;
        public int statManaMax2;
        public int lifeRegen;
        public int lifeRegenCount;
        public int lifeRegenTime;
        public int manaRegen;
        public int manaRegenCount;
        public int manaRegenDelay;
        public bool manaRegenBuff;
        public bool noKnockback;
        public bool spaceGun;
        public bool ammoCost80;
        public bool ammoCost75;
        public int stickyBreak;
        public bool magicQuiver;
        public bool magmaStone;
        public bool lavaRose;
        public int phantasmTime;
        public bool ammoBox;
        public bool ammoPotion;
        public bool chaosState;
        public bool strongBees;
        public bool sporeSac;
        public bool shinyStone;
        public int yoraiz0rEye;
        public bool yoraiz0rDarkness;
        public bool leinforsHair;
        public bool suspiciouslookingTentacle;
        public bool crimsonHeart;
        public bool lightOrb;
        public bool blueFairy;
        public bool redFairy;
        public bool greenFairy;
        public bool bunny;
        public bool turtle;
        public bool eater;
        public bool penguin;
        public bool magicLantern;
        public bool rabid;
        public bool sunflower;
        public bool wellFed;
        public bool puppy;
        public bool grinch;
        public bool miniMinotaur;
        public bool arcticDivingGear;
        public bool wearsRobe;
        public bool minecartLeft;
        public bool onWrongGround;
        public bool onTrack;
        public int cartRampTime;
        public bool cartFlip;
        public float trackBoost;
        public Mount mount;
        public bool blackCat;
        public bool spider;
        public bool squashling;
        public bool petFlagDD2Gato;
        public bool petFlagDD2Ghost;
        public bool petFlagDD2Dragon;
        public bool companionCube;
        public bool babyFaceMonster;
        public bool magicCuffs;
        public bool coldDash;
        public bool sailDash;
        public bool eyeSpring;
        public bool snowman;
        public bool scope;
        public bool dino;
        public bool skeletron;
        public bool hornet;
        public bool zephyrfish;
        public bool tiki;
        public bool parrot;
        public bool truffle;
        public bool sapling;
        public bool cSapling;
        public bool wisp;
        public bool lizard;
        public bool archery;
        public bool poisoned;
        public bool venom;
        public bool blind;
        public bool blackout;
        public bool headcovered;
        public bool frostBurn;
        public bool onFrostBurn;
        public bool burned;
        public bool suffocating;
        public byte suffocateDelay;
        public bool dripping;
        public bool drippingSlime;
        public bool onFire;
        public bool onFire2;
        public bool noItems;
        public bool windPushed;
        public bool wereWolf;
        public bool wolfAcc;
        public bool hideMerman;
        public bool hideWolf;
        public bool forceMerman;
        public bool forceWerewolf;
        public bool rulerGrid;
        public bool rulerLine;
        public bool bleed;
        public bool confused;
        public bool accMerman;
        public bool merman;
        public bool brokenArmor;
        public bool silence;
        public bool slow;
        public bool gross;
        public bool tongued;
        public bool kbGlove;
        public bool kbBuff;
        public bool starCloak;
        public bool longInvince;
        public bool pStone;
        public bool manaFlower;
        public bool moonLeech;
        public bool vortexDebuff;
        public bool trapDebuffSource;
        public bool witheredArmor;
        public bool witheredWeapon;
        public bool slowOgreSpit;
        public bool parryDamageBuff;
        public bool ballistaPanic;
        public float minionKB;
        public bool thrownCost50;
        public bool thrownCost33;
        public bool autoPaint;
        public bool autoActuator;
        public int lastTileRangeX;
        public int lastTileRangeY;
        public static int tileTargetX;
        public static int tileTargetY;
        public bool adjWater;
        public bool adjHoney;
        public bool adjLava;
        public bool oldAdjWater;
        public bool oldAdjHoney;
        public bool oldAdjLava;
        public byte hairDye;
        public float hairDyeVar;
        public int hair;
        public bool hostile;
        public int accCompass;
        public int accWatch;
        public int accDepthMeter;
        public bool accFishFinder;
        public bool accWeatherRadio;
        public bool accJarOfSouls;
        public bool accCalendar;
        public bool accThirdEye;
        public byte accThirdEyeCounter;
        public byte accThirdEyeNumber;
        public bool accStopwatch;
        public bool accOreFinder;
        public bool accCritterGuide;
        public byte accCritterGuideCounter;
        public byte accCritterGuideNumber;
        public bool accDreamCatcher;
        public bool ActuationRodLock;
        public bool ActuationRodLockSetting;
        public bool InfoAccMechShowWires;
        public DateTime dpsStart;
        public DateTime dpsEnd;
        public DateTime dpsLastHit;
        public int dpsDamage;
        public bool dpsStarted;
        public bool discount;
        public bool coins;
        public bool goldRing;
        public bool accDivingHelm;
        public bool accFlipper;
        public bool doubleJumpCloud;
        public bool jumpAgainCloud;
        public bool dJumpEffectCloud;
        public bool doubleJumpSandstorm;
        public bool jumpAgainSandstorm;
        public bool dJumpEffectSandstorm;
        public bool doubleJumpBlizzard;
        public bool jumpAgainBlizzard;
        public bool dJumpEffectBlizzard;
        public bool doubleJumpFart;
        public bool jumpAgainFart;
        public bool dJumpEffectFart;
        public bool doubleJumpSail;
        public bool jumpAgainSail;
        public bool dJumpEffectSail;
        public bool doubleJumpUnicorn;
        public bool jumpAgainUnicorn;
        public bool dJumpEffectUnicorn;
        public bool autoJump;
        public bool justJumped;
        public float jumpSpeedBoost;
        public int extraFall;
        public bool spawnMax;
        public int blockRange;
        public int grapCount;
        public int rocketTime;
        public int rocketDelay;
        public int rocketDelay2;
        public bool rocketRelease;
        public bool rocketFrame;
        public int rocketBoots;
        public bool canRocket;
        public bool jumpBoost;
        public bool noFallDmg;
        public int swimTime;
        public bool killGuide;
        public bool killClothier;
        public bool lavaImmune;
        public bool gills;
        public bool slowFall;
        public bool findTreasure;
        public bool invis;
        public bool detectCreature;
        public bool nightVision;
        public bool enemySpawns;
        public float thorns;
        public bool turtleArmor;
        public bool turtleThorns;
        public bool spiderArmor;
        public bool setSolar;
        public bool setVortex;
        public bool setNebula;
        public int nebulaCD;
        public bool setStardust;
        public bool setForbidden;
        public bool setForbiddenCooldownLocked;
        public bool setSquireT3;
        public bool setHuntressT3;
        public bool setApprenticeT3;
        public bool setMonkT3;
        public bool setSquireT2;
        public bool setHuntressT2;
        public bool setApprenticeT2;
        public bool setMonkT2;
        public bool vortexStealthActive;
        public bool waterWalk;
        public bool waterWalk2;
        public bool gravControl;
        public bool gravControl2;
        public bool bee;
        public int wireOperationsCooldown;
        public int lastChest;
        public int chestX;
        public int chestY;
        public int fallStart;
        public int fallStart2;
        public int cHead;
        public int cBody;
        public int cLegs;
        public int cHandOn;
        public int cHandOff;
        public int cBack;
        public int cFront;
        public int cShoe;
        public int cWaist;
        public int cShield;
        public int cNeck;
        public int cFace;
        public int cBalloon;
        public int cWings;
        public int cCarpet;
        public int cGrapple;
        public int cMount;
        public int cMinecart;
        public int cPet;
        public int cLight;
        public int cYorai;
        public int lastPortalColorIndex;
        public int _portalPhysicsTime;
        public bool portalPhysicsFlag;
        public float MountFishronSpecialCounter;
        private bool makeStrongBee;
        public bool behindBackWall;
        public int _funkytownCheckCD;
        private int _quickGrappleCooldown;
        public bool hasRaisableShield;
        public bool shieldRaised;
        public int shieldParryTimeLeft;
        public int shield_parry_cooldown;

        public Vector2 BlehOldPositionFixer
        {
            get { return -Vector2.UnitY; }
        }

        public Vector2 MountedCenter
        {
            get
            {
                return new Vector2(this.position.X + (float) (this.width / 2),
                    this.position.Y + 21f + (float) this.mount.PlayerOffsetHitbox);
            }
            set
            {
                this.position = new Vector2(value.X - (float) (this.width / 2),
                    value.Y - 21f - (float) this.mount.PlayerOffsetHitbox);
            }
        }

        public void RotateRelativePoint(ref float x, ref float y)
        {
            var vector2 = this.RotatedRelativePoint(new Vector2(x, y), true);
            x = vector2.X;
            y = vector2.Y;
        }

        public Vector2 RotatedRelativePoint(Vector2 pos, bool rotateForward = true)
        {
            var vector2 = this.position + this.fullRotationOrigin;
            var rotationZ = Matrix.CreateRotationZ(this.fullRotation * (float) rotateForward.ToInt());
            pos -= this.position + this.fullRotationOrigin;
            pos = Vector2.Transform(pos, rotationZ);
            return pos + vector2;
        }

        public bool CCed
        {
            get
            {
                if (!this.frozen && !this.webbed)
                    return this.stoned;
                return true;
            }
        }

        public bool ExtraAccessorySlotsShouldShow
        {
            get
            {
                if (this.extraAccessorySlots <= 0 && this.armor[8].type <= 0 && this.armor[18].type <= 0)
                    return this.dye[8].type > 0;
                return true;
            }
        }

        public bool Male
        {
            get { return PlayerVariantID.Sets.Male[this.skinVariant]; }
            set
            {
                if (value)
                {
                    if (this.Male)
                        return;
                    this.skinVariant = PlayerVariantID.Sets.AltGenderReference[this.skinVariant];
                }
                else
                {
                    if (!this.Male)
                        return;
                    this.skinVariant = PlayerVariantID.Sets.AltGenderReference[this.skinVariant];
                }
            }
        }

        public bool ZoneDungeon
        {
            get { return this.zone1[0]; }
            set { this.zone1[0] = value; }
        }

        public bool ZoneCorrupt
        {
            get { return this.zone1[1]; }
            set { this.zone1[1] = value; }
        }

        public bool ZoneHoly
        {
            get { return this.zone1[2]; }
            set { this.zone1[2] = value; }
        }

        public bool ZoneMeteor
        {
            get { return this.zone1[3]; }
            set { this.zone1[3] = value; }
        }

        public bool ZoneJungle
        {
            get { return this.zone1[4]; }
            set { this.zone1[4] = value; }
        }

        public bool ZoneSnow
        {
            get { return this.zone1[5]; }
            set { this.zone1[5] = value; }
        }

        public bool ZoneCrimson
        {
            get { return this.zone1[6]; }
            set { this.zone1[6] = value; }
        }

        public bool ZoneWaterCandle
        {
            get { return this.zone1[7]; }
            set { this.zone1[7] = value; }
        }

        public bool ZonePeaceCandle
        {
            get { return this.zone2[0]; }
            set { this.zone2[0] = value; }
        }

        public bool ZoneTowerSolar
        {
            get { return this.zone2[1]; }
            set { this.zone2[1] = value; }
        }

        public bool ZoneTowerVortex
        {
            get { return this.zone2[2]; }
            set { this.zone2[2] = value; }
        }

        public bool ZoneTowerNebula
        {
            get { return this.zone2[3]; }
            set { this.zone2[3] = value; }
        }

        public bool ZoneTowerStardust
        {
            get { return this.zone2[4]; }
            set { this.zone2[4] = value; }
        }

        public bool ZoneDesert
        {
            get { return this.zone2[5]; }
            set { this.zone2[5] = value; }
        }

        public bool ZoneGlowshroom
        {
            get { return this.zone2[6]; }
            set { this.zone2[6] = value; }
        }

        public bool ZoneUndergroundDesert
        {
            get { return this.zone2[7]; }
            set { this.zone2[7] = value; }
        }

        public bool ZoneSkyHeight
        {
            get { return this.zone3[0]; }
            set { this.zone3[0] = value; }
        }

        public bool ZoneOverworldHeight
        {
            get { return this.zone3[1]; }
            set { this.zone3[1] = value; }
        }

        public bool ZoneDirtLayerHeight
        {
            get { return this.zone3[2]; }
            set { this.zone3[2] = value; }
        }

        public bool ZoneRockLayerHeight
        {
            get { return this.zone3[3]; }
            set { this.zone3[3] = value; }
        }

        public bool ZoneUnderworldHeight
        {
            get { return this.zone3[4]; }
            set { this.zone3[4] = value; }
        }

        public bool ZoneBeach
        {
            get { return this.zone3[5]; }
            set { this.zone3[5] = value; }
        }

        public bool ZoneRain
        {
            get { return this.zone3[6]; }
            set { this.zone3[6] = value; }
        }

        public bool ZoneSandstorm
        {
            get { return this.zone3[7]; }
            set { this.zone3[7] = value; }
        }

        public bool ZoneOldOneArmy
        {
            get { return this.zone4[0]; }
            set { this.zone4[0] = value; }
        }

        public Vector2 Directions
        {
            get { return new Vector2((float) this.direction, this.gravDir); }
        }

        public Item HeldItem
        {
            get { return this.inventory[this.selectedItem]; }
        }

        public Vector2 DefaultSize
        {
            get { return new Vector2(20f, 42f); }
        }

        public bool PortalPhysicsEnabled
        {
            get
            {
                if (this._portalPhysicsTime > 0)
                    return !this.mount.Active;
                return false;
            }
        }

        public bool MountFishronSpecial
        {
            get
            {
                if (this.statLife >= this.statLifeMax2 / 2 && (!this.wet || this.lavaWet || this.honeyWet) &&
                    !this.dripping)
                    return (double) this.MountFishronSpecialCounter > 0.0;
                return true;
            }
        }

        public bool HasMinionRestTarget
        {
            get { return this.MinionRestTargetPoint != Vector2.Zero; }
        }

        public bool HasMinionAttackTargetNPC
        {
            get { return this.MinionAttackTargetNPC != -1; }
        }

        public bool TeamChangeAllowed()
        {
            return true;
        }

        public void HealEffect(int healAmount, bool broadcast = true)
        {
            CombatText.NewText(
                new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width,
                    this.height), CombatText.HealLife, healAmount, false, false);
            if (!broadcast || Main.netMode != 1 || this.whoAmI != Main.myPlayer)
                return;
            NetMessage.SendData(35, -1, -1, (NetworkText) null, this.whoAmI, (float) healAmount, 0.0f, 0.0f, 0, 0, 0);
        }

        public void ManaEffect(int manaAmount)
        {
            CombatText.NewText(
                new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width,
                    this.height), CombatText.HealMana, manaAmount, false, false);
            if (Main.netMode != 1 || this.whoAmI != Main.myPlayer)
                return;
            NetMessage.SendData(43, -1, -1, (NetworkText) null, this.whoAmI, (float) manaAmount, 0.0f, 0.0f, 0, 0, 0);
        }

        public static byte FindClosest(Vector2 Position, int Width, int Height)
        {
            byte num1 = 0;
            for (var index = 0; index < (int) byte.MaxValue; ++index)
            {
                if (Main.player[index].active)
                {
                    num1 = (byte) index;
                    break;
                }
            }

            var num2 = -1f;
            for (var index = 0; index < (int) byte.MaxValue; ++index)
            {
                if (Main.player[index].active && !Main.player[index].dead)
                {
                    var num3 =
                        Math.Abs((float) ((double) Main.player[index].position.X +
                                          (double) (Main.player[index].width / 2) -
                                          ((double) Position.X + (double) (Width / 2)))) +
                        Math.Abs((float) ((double) Main.player[index].position.Y +
                                          (double) (Main.player[index].height / 2) -
                                          ((double) Position.Y + (double) (Height / 2))));
                    if ((double) num2 == -1.0 || (double) num3 < (double) num2)
                    {
                        num2 = num3;
                        num1 = (byte) index;
                    }
                }
            }

            return num1;
        }

        public void ToggleInv()
        {
            var interactAreShared = PlayerInput.GrappleAndInteractAreShared;
            if (Main.mapFullscreen)
            {
                Main.mapFullscreen = false;
                this.releaseInventory = false;
                Main.PlaySound(11, -1, -1, 1, 1f, 0.0f);
            }
            else if (PlayerInput.InBuildingMode)
            {
                PlayerInput.ExitBuildingMode();
                Main.PlaySound(11, -1, -1, 1, 1f, 0.0f);
            }
            else if (Main.ingameOptionsWindow)
            {
                if (PlayerInput.UsingGamepadUI && UILinkPointNavigator.CurrentPage == 1002)
                    UILinkPointNavigator.ChangePage(1001);
                else
                    IngameOptions.Close();
            }
            else if (Main.inFancyUI)
                IngameFancyUI.Close();
            else if (CaptureManager.Instance.Active)
                CaptureManager.Instance.Active = false;
            else if (this.talkNPC >= 0)
            {
                this.talkNPC = -1;
                Main.npcChatCornerItem = 0;
                Main.npcChatText = "";
                Main.PlaySound(11, -1, -1, 1, 1f, 0.0f);
                if (PlayerInput.UsingGamepad)
                    Main.npcChatRelease = false;
            }
            else if (this.sign >= 0)
            {
                this.sign = -1;
                Main.editSign = false;
                Main.npcChatText = "";
                Main.PlaySound(11, -1, -1, 1, 1f, 0.0f);
            }
            else if (Main.clothesWindow)
                Main.CancelClothesWindow(false);
            else if (!Main.playerInventory)
            {
                Recipe.FindRecipes();
                Main.playerInventory = true;
                Main.EquipPageSelected = 0;
                Main.PlaySound(10, -1, -1, 1, 1f, 0.0f);
            }
            else
            {
                Main.playerInventory = false;
                if (!PlayerInput.UsingGamepad)
                {
                    Main.EquipPageSelected = 0;
                }
                else
                {
                    PlayerInput.NavigatorUnCachePosition();
                    Main.GamepadCursorAlpha = 0.0f;
                    Player.StopMoneyTroughFromWorking = 3;
                }

                Main.PlaySound(11, -1, -1, 1, 1f, 0.0f);
                if (ItemSlot.Options.HighlightNewItems)
                {
                    foreach (var obj in this.inventory)
                        obj.newAndShiny = false;
                }
            }

            if (!interactAreShared)
                return;
            this.GamepadEnableGrappleCooldown();
        }

        public void dropItemCheck()
        {
            if (!Main.playerInventory)
                this.noThrow = 0;
            if (this.noThrow > 0)
                --this.noThrow;
            if (!Main.InGuideCraftMenu && Main.guideItem.type > 0)
            {
                Main.guideItem.position = this.Center;
                var obj = this.GetItem(this.whoAmI, Main.guideItem, false, true);
                if (obj.stack > 0)
                {
                    var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        obj.type, obj.stack, false, (int) Main.guideItem.prefix, true, false);
                    Main.item[number].newAndShiny = false;
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }

                Main.guideItem = new Item();
            }

            if (!Main.InReforgeMenu && Main.reforgeItem.type > 0)
            {
                Main.reforgeItem.position = this.Center;
                var obj = this.GetItem(this.whoAmI, Main.reforgeItem, false, true);
                if (obj.stack > 0)
                {
                    var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        obj.type, obj.stack, false, (int) Main.reforgeItem.prefix, true, false);
                    Main.item[number].newAndShiny = false;
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }

                Main.reforgeItem = new Item();
            }

            if (Main.myPlayer == this.whoAmI)
                this.inventory[58] = Main.mouseItem.Clone();
            var flag = true;
            if (Main.mouseItem.type > 0 && Main.mouseItem.stack > 0)
            {
                if (!Main.gamePaused)
                {
                    Player.tileTargetX = (int) (((double) Main.mouseX + (double) Main.screenPosition.X) / 16.0);
                    Player.tileTargetY = (int) (((double) Main.mouseY + (double) Main.screenPosition.Y) / 16.0);
                    if ((double) this.gravDir == -1.0)
                        Player.tileTargetY =
                            (int) (((double) Main.screenPosition.Y + (double) Main.screenHeight -
                                    (double) Main.mouseY) / 16.0);
                }

                if (this.selectedItem != 58)
                    this.oldSelectItem = this.selectedItem;
                this.selectedItem = 58;
                flag = false;
            }

            if (flag && this.selectedItem == 58 && (this.itemTime == 0 && this.itemAnimation == 0))
                this.selectedItem = this.oldSelectItem;
            if (WorldGen.InWorld(Player.tileTargetX, Player.tileTargetY, 0) &&
                Main.tile[Player.tileTargetX, Player.tileTargetY] != null &&
                (Main.tile[Player.tileTargetX, Player.tileTargetY].type == (ushort) 334 &&
                 this.ItemFitsWeaponRack(this.inventory[this.selectedItem])))
                this.noThrow = 2;
            if (WorldGen.InWorld(Player.tileTargetX, Player.tileTargetY, 0) &&
                Main.tile[Player.tileTargetX, Player.tileTargetY] != null &&
                (Main.tile[Player.tileTargetX, Player.tileTargetY].type == (ushort) 395 &&
                 this.ItemFitsItemFrame(this.inventory[this.selectedItem])))
                this.noThrow = 2;
            if (Main.mouseItem.type > 0 && !Main.playerInventory)
            {
                Main.mouseItem.position = this.Center;
                var obj = this.GetItem(this.whoAmI, Main.mouseItem, false, true);
                if (obj.stack > 0)
                {
                    var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        obj.type, obj.stack, false, 0, true, false);
                    Main.item[number].newAndShiny = false;
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }

                Main.mouseItem = new Item();
                this.inventory[58] = new Item();
                Recipe.FindRecipes();
            }

            if ((this.controlThrow && this.releaseThrow &&
                 (!this.inventory[this.selectedItem].favorited && this.inventory[this.selectedItem].type > 0) &&
                 !Main.drawingPlayerChat ||
                 (Main.mouseRight && !this.mouseInterface && Main.mouseRightRelease || !Main.playerInventory) &&
                 (Main.mouseItem.type > 0 && Main.mouseItem.stack > 0)) && this.noThrow <= 0)
                this.DropSelectedItem();
            if (!Main.gamePaused || this.selectedItem != 58)
                return;
            this.selectedItem = this.oldSelectItem;
        }

        public void DropSelectedItem()
        {
            var flag1 = false;
            if (this.inventory[this.selectedItem].favorited)
            {
                this.inventory[this.selectedItem] =
                    this.GetItem(this.whoAmI, this.inventory[this.selectedItem], false, true);
                if (this.selectedItem == 58)
                    Main.mouseItem = this.inventory[this.selectedItem];
                Recipe.FindRecipes();
                if (this.inventory[this.selectedItem].type == 0)
                    flag1 = true;
            }

            if (flag1)
                return;
            var obj = new Item();
            var flag2 = false;
            if ((Main.mouseRight && !this.mouseInterface && Main.mouseRightRelease || !Main.playerInventory) &&
                (Main.mouseItem.type > 0 && Main.mouseItem.stack > 0))
            {
                obj = this.inventory[this.selectedItem];
                this.inventory[this.selectedItem] = Main.mouseItem;
                this.delayUseItem = true;
                this.controlUseItem = false;
                flag2 = true;
            }

            var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                this.inventory[this.selectedItem].type, 1, false, 0, false, false);
            if (!flag2 && this.inventory[this.selectedItem].type == 8 && this.inventory[this.selectedItem].stack > 1)
            {
                --this.inventory[this.selectedItem].stack;
            }
            else
            {
                this.inventory[this.selectedItem].position = Main.item[number].position;
                Main.item[number] = this.inventory[this.selectedItem];
                this.inventory[this.selectedItem] = new Item();
                if (this.selectedItem == 58)
                    Main.mouseItem = new Item();
            }

            if (Main.netMode == 0)
                Main.item[number].noGrabDelay = 100;
            Main.item[number].velocity.Y = -2f;
            Main.item[number].velocity.X = (float) (4 * this.direction) + this.velocity.X;
            Main.item[number].favorited = false;
            Main.item[number].newAndShiny = false;
            if ((Main.mouseRight && !this.mouseInterface || !Main.playerInventory) && Main.mouseItem.type > 0)
            {
                this.inventory[this.selectedItem] = obj;
                Main.mouseItem = new Item();
            }
            else
            {
                this.itemAnimation = 10;
                this.itemAnimationMax = 10;
            }

            Recipe.FindRecipes();
            if (Main.netMode != 1)
                return;
            NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
        }

        public int FindBuffIndex(int type)
        {
            if (this.buffImmune[type])
                return -1;
            for (var index = 0; index < 22; ++index)
            {
                if (this.buffTime[index] >= 1 && this.buffType[index] == type)
                    return index;
            }

            return -1;
        }

        public void AddBuff(int type, int time1, bool quiet = true)
        {
            if (this.buffImmune[type])
                return;
            var num = time1;
            if (Main.expertMode && this.whoAmI == Main.myPlayer && (type == 20 || type == 22 ||
                                                                    (type == 23 || type == 24) ||
                                                                    (type == 30 || type == 31 ||
                                                                     (type == 32 || type == 33)) ||
                                                                    (type == 35 || type == 36 ||
                                                                     (type == 39 || type == 44) ||
                                                                     (type == 46 || type == 47 ||
                                                                      (type == 69 || type == 70))) || type == 80))
                num = (int) ((double) Main.expertDebuffTime * (double) num);
            if (!quiet && Main.netMode == 1)
            {
                var flag = true;
                for (var index = 0; index < 22; ++index)
                {
                    if (this.buffType[index] == type)
                    {
                        flag = false;
                        break;
                    }
                }

                if (flag)
                    NetMessage.SendData(55, -1, -1, (NetworkText) null, this.whoAmI, (float) type, (float) num, 0.0f, 0,
                        0, 0);
            }

            var index1 = -1;
            for (var index2 = 0; index2 < 22; ++index2)
            {
                if (this.buffType[index2] == type)
                {
                    if (type == 94)
                    {
                        this.buffTime[index2] += num;
                        if (this.buffTime[index2] <= Player.manaSickTimeMax)
                            return;
                        this.buffTime[index2] = Player.manaSickTimeMax;
                        return;
                    }

                    if (this.buffTime[index2] >= num)
                        return;
                    this.buffTime[index2] = num;
                    return;
                }
            }

            if (Main.vanityPet[type] || Main.lightPet[type])
            {
                for (var b = 0; b < 22; ++b)
                {
                    if (Main.vanityPet[type] && Main.vanityPet[this.buffType[b]])
                        this.DelBuff(b);
                    if (Main.lightPet[type] && Main.lightPet[this.buffType[b]])
                        this.DelBuff(b);
                }
            }

            while (index1 == -1)
            {
                var b = -1;
                for (var index2 = 0; index2 < 22; ++index2)
                {
                    if (!Main.debuff[this.buffType[index2]])
                    {
                        b = index2;
                        break;
                    }
                }

                if (b == -1)
                    return;
                for (var index2 = b; index2 < 22; ++index2)
                {
                    if (this.buffType[index2] == 0)
                    {
                        index1 = index2;
                        break;
                    }
                }

                if (index1 == -1)
                    this.DelBuff(b);
            }

            this.buffType[index1] = type;
            this.buffTime[index1] = num;
            if (!Main.meleeBuff[type])
                return;
            for (var b = 0; b < 22; ++b)
            {
                if (b != index1 && Main.meleeBuff[this.buffType[b]])
                    this.DelBuff(b);
            }
        }

        public void DelBuff(int b)
        {
            this.buffTime[b] = 0;
            this.buffType[b] = 0;
            for (var index1 = 0; index1 < 21; ++index1)
            {
                if (this.buffTime[index1] == 0 || this.buffType[index1] == 0)
                {
                    for (var index2 = index1 + 1; index2 < 22; ++index2)
                    {
                        this.buffTime[index2 - 1] = this.buffTime[index2];
                        this.buffType[index2 - 1] = this.buffType[index2];
                        this.buffTime[index2] = 0;
                        this.buffType[index2] = 0;
                    }
                }
            }
        }

        public void ClearBuff(int type)
        {
            for (var b = 0; b < 22; ++b)
            {
                if (this.buffType[b] == type)
                    this.DelBuff(b);
            }
        }

        public int CountBuffs()
        {
            var index1 = 0;
            for (var index2 = 0; index2 < 22; ++index2)
            {
                if (this.buffType[index1] > 0)
                    ++index1;
            }

            return index1;
        }

        public void QuickHeal()
        {
            if (this.noItems || this.statLife == this.statLifeMax2 || this.potionDelay > 0)
                return;
            var itemToUse = this.QuickHeal_GetItemToUse();
            if (itemToUse == null)
                return;
            Main.PlaySound(itemToUse.UseSound, this.position);
            if (itemToUse.potion)
            {
                if (itemToUse.type == 227)
                {
                    this.potionDelay = this.restorationDelayTime;
                    this.AddBuff(21, this.potionDelay, true);
                }
                else
                {
                    this.potionDelay = this.potionDelayTime;
                    this.AddBuff(21, this.potionDelay, true);
                }
            }

            this.statLife += itemToUse.healLife;
            this.statMana += itemToUse.healMana;
            if (this.statLife > this.statLifeMax2)
                this.statLife = this.statLifeMax2;
            if (this.statMana > this.statManaMax2)
                this.statMana = this.statManaMax2;
            if (itemToUse.healLife > 0 && Main.myPlayer == this.whoAmI)
                this.HealEffect(itemToUse.healLife, true);
            if (itemToUse.healMana > 0)
            {
                this.AddBuff(94, Player.manaSickTime, true);
                if (Main.myPlayer == this.whoAmI)
                    this.ManaEffect(itemToUse.healMana);
            }

            --itemToUse.stack;
            if (itemToUse.stack <= 0)
                itemToUse.TurnToAir();
            Recipe.FindRecipes();
        }

        public Item QuickHeal_GetItemToUse()
        {
            var num1 = this.statLifeMax2 - this.statLife;
            var obj1 = (Item) null;
            var num2 = -this.statLifeMax2;
            for (var index = 0; index < 58; ++index)
            {
                var obj2 = this.inventory[index];
                if (obj2.stack > 0 && obj2.type > 0 && (obj2.potion && obj2.healLife > 0))
                {
                    var num3 = obj2.healLife - num1;
                    if (num2 < 0)
                    {
                        if (num3 > num2)
                        {
                            obj1 = obj2;
                            num2 = num3;
                        }
                    }
                    else if (num3 < num2 && num3 >= 0)
                    {
                        obj1 = obj2;
                        num2 = num3;
                    }
                }
            }

            return obj1;
        }

        public void QuickMana()
        {
            if (this.noItems || this.statMana == this.statManaMax2)
                return;
            for (var index = 0; index < 58; ++index)
            {
                if (this.inventory[index].stack > 0 && this.inventory[index].type > 0 &&
                    this.inventory[index].healMana > 0 && (this.potionDelay == 0 || !this.inventory[index].potion))
                {
                    Main.PlaySound(this.inventory[index].UseSound, this.position);
                    if (this.inventory[index].potion)
                    {
                        if (this.inventory[index].type == 227)
                        {
                            this.potionDelay = this.restorationDelayTime;
                            this.AddBuff(21, this.potionDelay, true);
                        }
                        else
                        {
                            this.potionDelay = this.potionDelayTime;
                            this.AddBuff(21, this.potionDelay, true);
                        }
                    }

                    this.statLife += this.inventory[index].healLife;
                    this.statMana += this.inventory[index].healMana;
                    if (this.statLife > this.statLifeMax2)
                        this.statLife = this.statLifeMax2;
                    if (this.statMana > this.statManaMax2)
                        this.statMana = this.statManaMax2;
                    if (this.inventory[index].healLife > 0 && Main.myPlayer == this.whoAmI)
                        this.HealEffect(this.inventory[index].healLife, true);
                    if (this.inventory[index].healMana > 0)
                    {
                        this.AddBuff(94, Player.manaSickTime, true);
                        if (Main.myPlayer == this.whoAmI)
                            this.ManaEffect(this.inventory[index].healMana);
                    }

                    --this.inventory[index].stack;
                    if (this.inventory[index].stack <= 0)
                        this.inventory[index].TurnToAir();
                    Recipe.FindRecipes();
                    break;
                }
            }
        }

        public Item QuickMana_GetItemToUse()
        {
            for (var index = 0; index < 58; ++index)
            {
                if (this.inventory[index].stack > 0 && this.inventory[index].type > 0 &&
                    this.inventory[index].healMana > 0 && (this.potionDelay == 0 || !this.inventory[index].potion))
                    return this.inventory[index];
            }

            return (Item) null;
        }

        public void QuickBuff()
        {
            if (this.noItems)
                return;
            var type1 = (LegacySoundStyle) null;
            for (var index1 = 0; index1 < 58; ++index1)
            {
                if (this.CountBuffs() == 22)
                    return;
                if (this.inventory[index1].stack > 0 && this.inventory[index1].type > 0 &&
                    (this.inventory[index1].buffType > 0 && !this.inventory[index1].summon) &&
                    this.inventory[index1].buffType != 90)
                {
                    var type2 = this.inventory[index1].buffType;
                    var flag = true;
                    for (var index2 = 0; index2 < 22; ++index2)
                    {
                        if (type2 == 27 && (this.buffType[index2] == type2 || this.buffType[index2] == 101 ||
                                            this.buffType[index2] == 102))
                        {
                            flag = false;
                            break;
                        }

                        if (this.buffType[index2] == type2)
                        {
                            flag = false;
                            break;
                        }

                        if (Main.meleeBuff[type2] && Main.meleeBuff[this.buffType[index2]])
                        {
                            flag = false;
                            break;
                        }
                    }

                    if (Main.lightPet[this.inventory[index1].buffType] ||
                        Main.vanityPet[this.inventory[index1].buffType])
                    {
                        for (var index2 = 0; index2 < 22; ++index2)
                        {
                            if (Main.lightPet[this.buffType[index2]] && Main.lightPet[this.inventory[index1].buffType])
                                flag = false;
                            if (Main.vanityPet[this.buffType[index2]] &&
                                Main.vanityPet[this.inventory[index1].buffType])
                                flag = false;
                        }
                    }

                    if (this.inventory[index1].mana > 0 && flag)
                    {
                        if (this.statMana >= (int) ((double) this.inventory[index1].mana * (double) this.manaCost))
                        {
                            this.manaRegenDelay = (int) this.maxRegenDelay;
                            this.statMana -= (int) ((double) this.inventory[index1].mana * (double) this.manaCost);
                        }
                        else
                            flag = false;
                    }

                    if (this.whoAmI == Main.myPlayer && this.inventory[index1].type == 603 && !Main.cEd)
                        flag = false;
                    if (type2 == 27)
                    {
                        type2 = Main.rand.Next(3);
                        if (type2 == 0)
                            type2 = 27;
                        if (type2 == 1)
                            type2 = 101;
                        if (type2 == 2)
                            type2 = 102;
                    }

                    if (flag)
                    {
                        type1 = this.inventory[index1].UseSound;
                        var time1 = this.inventory[index1].buffTime;
                        if (time1 == 0)
                            time1 = 3600;
                        this.AddBuff(type2, time1, true);
                        if (this.inventory[index1].consumable)
                        {
                            --this.inventory[index1].stack;
                            if (this.inventory[index1].stack <= 0)
                                this.inventory[index1].TurnToAir();
                        }
                    }
                }
            }

            if (type1 == null)
                return;
            Main.PlaySound(type1, this.position);
            Recipe.FindRecipes();
        }

        public void QuickMount()
        {
            if (this.mount.Active)
            {
                this.mount.Dismount(this);
            }
            else
            {
                if (this.frozen || this.tongued || (this.webbed || this.stoned) ||
                    ((double) this.gravDir == -1.0 || this.noItems))
                    return;
                var itemToUse = this.QuickMount_GetItemToUse();
                if (itemToUse != null && itemToUse.mountType != -1 && this.mount.CanMount(itemToUse.mountType, this))
                {
                    var flag = false;
                    var tilesIn = Collision.GetTilesIn(this.TopLeft - new Vector2(24f),
                        this.BottomRight + new Vector2(24f));
                    if (tilesIn.Count > 0)
                    {
                        var nullable = new Point?();
                        var hitbox = this.Hitbox;
                        for (var index = 0; index < tilesIn.Count; ++index)
                        {
                            var point = tilesIn[index];
                            var tileSafely = Framing.GetTileSafely(point.X, point.Y);
                            if (tileSafely.active() && tileSafely.type == (ushort) 314)
                            {
                                var vector2 = tilesIn[index].ToVector2() * 16f + new Vector2(8f);
                                if (!nullable.HasValue ||
                                    (double) this.Distance(vector2) <
                                    (double) this.Distance(nullable.Value.ToVector2() * 16f + new Vector2(8f)) &&
                                    Collision.CanHitLine(this.Center, 0, 0, vector2, 0, 0))
                                    nullable = new Point?(tilesIn[index]);
                            }
                        }

                        if (nullable.HasValue)
                        {
                            this.LaunchMinecartHook(nullable.Value.X, nullable.Value.Y);
                            flag = true;
                        }
                    }

                    if (flag)
                        return;
                    this.mount.SetMount(itemToUse.mountType, this, false);
                    if (itemToUse.UseSound == null)
                        return;
                    Main.PlaySound(itemToUse.UseSound, this.Center);
                }
                else
                {
                    var num1 = 0;
                    var num2 = (int) ((double) this.position.X / 16.0) - Player.tileRangeX - num1 + 1;
                    var num3 = (int) (((double) this.position.X + (double) this.width) / 16.0) + Player.tileRangeX +
                               num1 - 1;
                    var num4 = (int) ((double) this.position.Y / 16.0) - Player.tileRangeY - num1 + 1;
                    var num5 = (int) (((double) this.position.Y + (double) this.height) / 16.0) + Player.tileRangeY +
                               num1 - 2;
                    var num6 = Utils.Clamp<int>(num2, 10, Main.maxTilesX - 10);
                    var num7 = Utils.Clamp<int>(num3, 10, Main.maxTilesX - 10);
                    var num8 = Utils.Clamp<int>(num4, 10, Main.maxTilesY - 10);
                    var num9 = Utils.Clamp<int>(num5, 10, Main.maxTilesY - 10);
                    var tilesIn = Collision.GetTilesIn(new Vector2((float) num6, (float) num8) * 16f,
                        new Vector2((float) (num7 + 1), (float) (num9 + 1)) * 16f);
                    if (tilesIn.Count <= 0)
                        return;
                    var nullable = new Point?();
                    var hitbox = this.Hitbox;
                    for (var index = 0; index < tilesIn.Count; ++index)
                    {
                        var point = tilesIn[index];
                        var tileSafely = Framing.GetTileSafely(point.X, point.Y);
                        if (tileSafely.active() && tileSafely.type == (ushort) 314)
                        {
                            var vector2 = tilesIn[index].ToVector2() * 16f + new Vector2(8f);
                            if (!nullable.HasValue ||
                                (double) this.Distance(vector2) <
                                (double) this.Distance(nullable.Value.ToVector2() * 16f + new Vector2(8f)) &&
                                Collision.CanHitLine(this.Center, 0, 0, vector2, 0, 0))
                                nullable = new Point?(tilesIn[index]);
                        }
                    }

                    if (!nullable.HasValue)
                        return;
                    this.LaunchMinecartHook(nullable.Value.X, nullable.Value.Y);
                }
            }
        }

        public Item QuickMount_GetItemToUse()
        {
            var obj = (Item) null;
            if (obj == null && this.miscEquips[3].mountType != -1 && !MountID.Sets.Cart[this.miscEquips[3].mountType])
                obj = this.miscEquips[3];
            if (obj == null)
            {
                for (var index = 0; index < 58; ++index)
                {
                    if (this.inventory[index].mountType != -1 && !MountID.Sets.Cart[this.inventory[index].mountType])
                    {
                        obj = this.inventory[index];
                        break;
                    }
                }
            }

            return obj;
        }

        public void QuickGrapple()
        {
            if (this.frozen || this.tongued || (this.webbed || this.stoned))
                return;
            if (PlayerInput.GrappleAndInteractAreShared)
            {
                if (Main.HoveringOverAnNPC || Main.SmartInteractShowingGenuine || Main.SmartInteractShowingFake ||
                    (this._quickGrappleCooldown > 0 && !Main.mapFullscreen || WiresUI.Settings.DrawToolModeUI) ||
                    !this.controlUseTile && !this.releaseUseTile)
                    return;
                var tileSafely = Framing.GetTileSafely(Player.tileTargetX, Player.tileTargetY);
                if (tileSafely.active() && (tileSafely.type == (ushort) 4 || tileSafely.type == (ushort) 33 ||
                                            (tileSafely.type == (ushort) 372 || tileSafely.type == (ushort) 174) ||
                                            tileSafely.type == (ushort) 49) ||
                    this.inventory[this.selectedItem].type == 3384)
                    return;
            }

            if (this.mount.Active)
                this.mount.Dismount(this);
            if (this.noItems)
                return;
            var obj = (Item) null;
            if (obj == null && Main.projHook[this.miscEquips[4].shoot])
                obj = this.miscEquips[4];
            if (obj == null)
            {
                for (var index = 0; index < 58; ++index)
                {
                    if (Main.projHook[this.inventory[index].shoot])
                    {
                        obj = this.inventory[index];
                        break;
                    }
                }
            }

            if (obj == null)
                return;
            if (obj.shoot == 73)
            {
                var num = 0;
                for (var index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer &&
                        (Main.projectile[index].type == 73 || Main.projectile[index].type == 74))
                        ++num;
                }

                if (num > 1)
                    obj = (Item) null;
            }
            else if (obj.shoot == 165)
            {
                var num = 0;
                for (var index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer &&
                        Main.projectile[index].type == 165)
                        ++num;
                }

                if (num > 8)
                    obj = (Item) null;
            }
            else if (obj.shoot == 372)
            {
                var num = 0;
                for (var index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer &&
                        Main.projectile[index].type == 372)
                        ++num;
                }

                if (num > 2)
                    obj = (Item) null;
            }
            else if (obj.shoot == 652)
            {
                var num = 0;
                for (var index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer &&
                        Main.projectile[index].type == 652)
                        ++num;
                }

                if (num > 1)
                    obj = (Item) null;
            }
            else if (obj.type == 3572)
            {
                var num = 0;
                var flag = false;
                for (var index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer &&
                        (Main.projectile[index].type >= 646 && Main.projectile[index].type <= 649))
                    {
                        ++num;
                        if ((double) Main.projectile[index].ai[0] == 2.0)
                            flag = true;
                    }
                }

                if (num > 4 || !flag && num > 3)
                    obj = (Item) null;
            }
            else
            {
                for (var index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer &&
                        (Main.projectile[index].type == obj.shoot && (double) Main.projectile[index].ai[0] != 2.0))
                    {
                        obj = (Item) null;
                        break;
                    }
                }
            }

            if (obj == null)
                return;
            Main.PlaySound(obj.UseSound, this.position);
            if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
                NetMessage.SendData(51, -1, -1, (NetworkText) null, this.whoAmI, 2f, 0.0f, 0.0f, 0, 0, 0);
            var Type = obj.shoot;
            var shootSpeed = obj.shootSpeed;
            var damage = obj.damage;
            var knockBack = obj.knockBack;
            if (Type == 13 || Type == 32 || Type == 315 || (Type >= 230 && Type <= 235 || Type == 331))
            {
                this.grappling[0] = -1;
                this.grapCount = 0;
                for (var index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].owner == this.whoAmI)
                    {
                        if (Main.projectile[index].type == 13)
                            Main.projectile[index].Kill();
                        if (Main.projectile[index].type == 331)
                            Main.projectile[index].Kill();
                        if (Main.projectile[index].type == 315)
                            Main.projectile[index].Kill();
                        if (Main.projectile[index].type >= 230 && Main.projectile[index].type <= 235)
                            Main.projectile[index].Kill();
                    }
                }
            }

            if (Type == 256)
            {
                var num1 = 0;
                var index1 = -1;
                var num2 = 100000;
                for (var index2 = 0; index2 < 1000; ++index2)
                {
                    if (Main.projectile[index2].active && Main.projectile[index2].owner == this.whoAmI &&
                        Main.projectile[index2].type == 256)
                    {
                        ++num1;
                        if (Main.projectile[index2].timeLeft < num2)
                        {
                            index1 = index2;
                            num2 = Main.projectile[index2].timeLeft;
                        }
                    }
                }

                if (num1 > 1)
                    Main.projectile[index1].Kill();
            }

            if (Type == 652)
            {
                var num1 = 0;
                var index1 = -1;
                var num2 = 100000;
                for (var index2 = 0; index2 < 1000; ++index2)
                {
                    if (Main.projectile[index2].active && Main.projectile[index2].owner == this.whoAmI &&
                        Main.projectile[index2].type == 652)
                    {
                        ++num1;
                        if (Main.projectile[index2].timeLeft < num2)
                        {
                            index1 = index2;
                            num2 = Main.projectile[index2].timeLeft;
                        }
                    }
                }

                if (num1 > 1)
                    Main.projectile[index1].Kill();
            }

            if (Type == 73)
            {
                for (var index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].owner == this.whoAmI &&
                        Main.projectile[index].type == 73)
                        Type = 74;
                }
            }

            if (obj.type == 3572)
            {
                var num1 = -1;
                var num2 = -1;
                for (var index = 0; index < 1000; ++index)
                {
                    var projectile = Main.projectile[index];
                    if (projectile.active && projectile.owner == this.whoAmI &&
                        (projectile.type >= 646 && projectile.type <= 649) &&
                        (num2 == -1 || num2 < projectile.timeLeft))
                    {
                        num1 = projectile.type;
                        num2 = projectile.timeLeft;
                    }
                }

                switch (num1)
                {
                    case -1:
                    case 649:
                        Type = 646;
                        break;
                    case 646:
                        Type = 647;
                        break;
                    case 647:
                        Type = 648;
                        break;
                    case 648:
                        Type = 649;
                        break;
                }
            }

            var vector2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                this.position.Y + (float) this.height * 0.5f);
            var f1 = (float) Main.mouseX + Main.screenPosition.X - vector2.X;
            var f2 = (float) Main.mouseY + Main.screenPosition.Y - vector2.Y;
            if ((double) this.gravDir == -1.0)
                f2 = Main.screenPosition.Y + (float) Main.screenHeight - (float) Main.mouseY - vector2.Y;
            var num3 = (float) Math.Sqrt((double) f1 * (double) f1 + (double) f2 * (double) f2);
            float num4;
            if (float.IsNaN(f1) && float.IsNaN(f2) || (double) f1 == 0.0 && (double) f2 == 0.0)
            {
                f1 = (float) this.direction;
                f2 = 0.0f;
                num4 = shootSpeed;
            }
            else
                num4 = shootSpeed / num3;

            var SpeedX = f1 * num4;
            var SpeedY = f2 * num4;
            Projectile.NewProjectile(vector2.X, vector2.Y, SpeedX, SpeedY, Type, damage, knockBack, this.whoAmI, 0.0f,
                0.0f);
        }

        public void StatusNPC(int type, int i)
        {
            if (this.meleeEnchant > (byte) 0)
            {
                if (this.meleeEnchant == (byte) 1)
                    Main.npc[i].AddBuff(70, 60 * Main.rand.Next(5, 10), false);
                if (this.meleeEnchant == (byte) 2)
                    Main.npc[i].AddBuff(39, 60 * Main.rand.Next(3, 7), false);
                if (this.meleeEnchant == (byte) 3)
                    Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 7), false);
                if (this.meleeEnchant == (byte) 5)
                    Main.npc[i].AddBuff(69, 60 * Main.rand.Next(10, 20), false);
                if (this.meleeEnchant == (byte) 6)
                    Main.npc[i].AddBuff(31, 60 * Main.rand.Next(1, 4), false);
                if (this.meleeEnchant == (byte) 8)
                    Main.npc[i].AddBuff(20, 60 * Main.rand.Next(5, 10), false);
                if (this.meleeEnchant == (byte) 4)
                    Main.npc[i].AddBuff(72, 120, false);
            }

            if (this.frostBurn)
                Main.npc[i].AddBuff(44, 60 * Main.rand.Next(5, 15), false);
            if (this.magmaStone)
            {
                if (Main.rand.Next(4) == 0)
                    Main.npc[i].AddBuff(24, 360, false);
                else if (Main.rand.Next(2) == 0)
                    Main.npc[i].AddBuff(24, 240, false);
                else
                    Main.npc[i].AddBuff(24, 120, false);
            }

            if (type == 3211)
                Main.npc[i].AddBuff(69, 60 * Main.rand.Next(5, 10), false);
            if (type == 121)
            {
                if (Main.rand.Next(2) != 0)
                    return;
                Main.npc[i].AddBuff(24, 180, false);
            }
            else if (type == 3823)
            {
                if (Main.rand.Next(4) != 0)
                    return;
                Main.npc[i].AddBuff(24, 300, false);
            }
            else if (type == 122)
            {
                if (Main.rand.Next(10) != 0)
                    return;
                Main.npc[i].AddBuff(24, 180, false);
            }
            else if (type == 190)
            {
                if (Main.rand.Next(4) != 0)
                    return;
                Main.npc[i].AddBuff(20, 420, false);
            }
            else if (type == 217)
            {
                if (Main.rand.Next(5) != 0)
                    return;
                Main.npc[i].AddBuff(24, 180, false);
            }
            else
            {
                if (type != 1123 || Main.rand.Next(10) == 0)
                    return;
                Main.npc[i].AddBuff(31, 120, false);
            }
        }

        public void StatusPvP(int type, int i)
        {
            if (this.meleeEnchant > (byte) 0)
            {
                if (this.meleeEnchant == (byte) 1)
                    Main.player[i].AddBuff(70, 60 * Main.rand.Next(5, 10), true);
                if (this.meleeEnchant == (byte) 2)
                    Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), true);
                if (this.meleeEnchant == (byte) 3)
                    Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7), true);
                if (this.meleeEnchant == (byte) 5)
                    Main.player[i].AddBuff(69, 60 * Main.rand.Next(10, 20), true);
                if (this.meleeEnchant == (byte) 6)
                    Main.player[i].AddBuff(31, 60 * Main.rand.Next(1, 4), true);
                if (this.meleeEnchant == (byte) 8)
                    Main.player[i].AddBuff(20, 60 * Main.rand.Next(5, 10), true);
            }

            if (this.frostBurn)
                Main.player[i].AddBuff(44, 60 * Main.rand.Next(1, 8), true);
            if (this.magmaStone)
            {
                if (Main.rand.Next(7) == 0)
                    Main.player[i].AddBuff(24, 360, true);
                else if (Main.rand.Next(3) == 0)
                    Main.player[i].AddBuff(24, 120, true);
                else
                    Main.player[i].AddBuff(24, 60, true);
            }

            switch (type)
            {
                case 121:
                    if (Main.rand.Next(2) != 0)
                        break;
                    Main.player[i].AddBuff(24, 180, false);
                    break;
                case 122:
                    if (Main.rand.Next(10) != 0)
                        break;
                    Main.player[i].AddBuff(24, 180, false);
                    break;
                case 190:
                    if (Main.rand.Next(4) != 0)
                        break;
                    Main.player[i].AddBuff(20, 420, false);
                    break;
                case 217:
                    if (Main.rand.Next(5) != 0)
                        break;
                    Main.player[i].AddBuff(24, 180, false);
                    break;
                case 1123:
                    if (Main.rand.Next(9) == 0)
                        break;
                    Main.player[i].AddBuff(31, 120, false);
                    break;
                case 3823:
                    if (Main.rand.Next(4) != 0)
                        break;
                    Main.player[i].AddBuff(24, 300, true);
                    break;
            }
        }

        public void Ghost()
        {
            this.immune = false;
            this.immuneAlpha = 0;
            this.controlUp = false;
            this.controlLeft = false;
            this.controlDown = false;
            this.controlRight = false;
            this.controlJump = false;
            if (Main.hasFocus && !Main.drawingPlayerChat && (!Main.editSign && !Main.editChest) && !Main.blockInput)
                PlayerInput.Triggers.Current.CopyInto(this);
            if (this.controlUp || this.controlJump)
            {
                if ((double) this.velocity.Y > 0.0)
                    this.velocity.Y *= 0.9f;
                this.velocity.Y -= 0.1f;
                if ((double) this.velocity.Y < -3.0)
                    this.velocity.Y = -3f;
            }
            else if (this.controlDown)
            {
                if ((double) this.velocity.Y < 0.0)
                    this.velocity.Y *= 0.9f;
                this.velocity.Y += 0.1f;
                if ((double) this.velocity.Y > 3.0)
                    this.velocity.Y = 3f;
            }
            else if ((double) this.velocity.Y < -0.1 || (double) this.velocity.Y > 0.1)
                this.velocity.Y *= 0.9f;
            else
                this.velocity.Y = 0.0f;

            if (this.controlLeft && !this.controlRight)
            {
                if ((double) this.velocity.X > 0.0)
                    this.velocity.X *= 0.9f;
                this.velocity.X -= 0.1f;
                if ((double) this.velocity.X < -3.0)
                    this.velocity.X = -3f;
            }
            else if (this.controlRight && !this.controlLeft)
            {
                if ((double) this.velocity.X < 0.0)
                    this.velocity.X *= 0.9f;
                this.velocity.X += 0.1f;
                if ((double) this.velocity.X > 3.0)
                    this.velocity.X = 3f;
            }
            else if ((double) this.velocity.X < -0.1 || (double) this.velocity.X > 0.1)
                this.velocity.X *= 0.9f;
            else
                this.velocity.X = 0.0f;

            var player = this;
            player.position = player.position + this.velocity;
            ++this.ghostFrameCounter;
            if ((double) this.velocity.X < 0.0)
                this.direction = -1;
            else if ((double) this.velocity.X > 0.0)
                this.direction = 1;
            if (this.ghostFrameCounter >= 8)
            {
                this.ghostFrameCounter = 0;
                ++this.ghostFrame;
                if (this.ghostFrame >= 4)
                    this.ghostFrame = 0;
            }

            if ((double) this.position.X < (double) Main.leftWorld + (double) (Lighting.offScreenTiles * 16) + 16.0)
            {
                this.position.X = (float) ((double) Main.leftWorld + (double) (Lighting.offScreenTiles * 16) + 16.0);
                this.velocity.X = 0.0f;
            }

            if ((double) this.position.X + (double) this.width >
                (double) Main.rightWorld - (double) (Lighting.offScreenTiles * 16) - 32.0)
            {
                this.position.X = (float) ((double) Main.rightWorld - (double) (Lighting.offScreenTiles * 16) - 32.0) -
                                  (float) this.width;
                this.velocity.X = 0.0f;
            }

            if ((double) this.position.Y < (double) Main.topWorld + (double) (Lighting.offScreenTiles * 16) + 16.0)
            {
                this.position.Y = (float) ((double) Main.topWorld + (double) (Lighting.offScreenTiles * 16) + 16.0);
                if ((double) this.velocity.Y < -0.1)
                    this.velocity.Y = -0.1f;
            }

            if ((double) this.position.Y <= (double) Main.bottomWorld - (double) (Lighting.offScreenTiles * 16) - 32.0 -
                (double) this.height)
                return;
            this.position.Y = (float) ((double) Main.bottomWorld - (double) (Lighting.offScreenTiles * 16) - 32.0) -
                              (float) this.height;
            this.velocity.Y = 0.0f;
        }

        private void OldInputGhost()
        {
            var pressedKeys = Main.keyState.GetPressedKeys();
            if (Main.blockKey != Keys.None.ToString())
            {
                var flag = false;
                for (var index = 0; index < pressedKeys.Length; ++index)
                {
                    if (pressedKeys[index].ToString() == Main.blockKey)
                    {
                        pressedKeys[index] = Keys.None;
                        flag = true;
                    }
                }

                if (!flag)
                    Main.blockKey = Keys.None.ToString();
            }

            for (var index = 0; index < pressedKeys.Length; ++index)
            {
                var str = string.Concat((object) pressedKeys[index]);
                if (str == Main.cUp)
                    this.controlUp = true;
                if (str == Main.cLeft)
                    this.controlLeft = true;
                if (str == Main.cDown)
                    this.controlDown = true;
                if (str == Main.cRight)
                    this.controlRight = true;
                if (str == Main.cJump)
                    this.controlJump = true;
            }
        }

        public void OnHit(float x, float y, Entity victim)
        {
            if (Main.myPlayer != this.whoAmI)
                return;
            if (this.onHitDodge && this.shadowDodgeTimer == 0 && Main.rand.Next(4) == 0)
            {
                if (!this.shadowDodge)
                    this.shadowDodgeTimer = 1800;
                this.AddBuff(59, 1800, true);
            }

            if (this.onHitRegen)
                this.AddBuff(58, 300, true);
            if (this.stardustMinion && victim is NPC)
            {
                for (var index = 0; index < 1000; ++index)
                {
                    var projectile = Main.projectile[index];
                    if (projectile.active && projectile.owner == this.whoAmI &&
                        (projectile.type == 613 && (double) projectile.localAI[1] <= 0.0) && Main.rand.Next(2) == 0)
                    {
                        var vector2 = new Vector2(x, y) - projectile.Center;
                        if ((double) vector2.Length() > 0.0)
                            vector2.Normalize();
                        vector2 *= 20f;
                        Projectile.NewProjectile(projectile.Center.X, projectile.Center.Y, vector2.X, vector2.Y, 614,
                            projectile.damage / 3, 0.0f, projectile.owner, 0.0f, (float) victim.whoAmI);
                        projectile.localAI[1] = (float) (30 + Main.rand.Next(4) * 10);
                    }
                }
            }

            if (this.onHitPetal && this.petalTimer == 0)
            {
                this.petalTimer = 20;
                var num1 = 1;
                if ((double) x < (double) this.position.X + (double) (this.width / 2))
                    num1 = -1;
                var direction = this.direction;
                var x1 = Main.screenPosition.X;
                if (direction < 0)
                    x1 += (float) Main.screenWidth;
                var num2 = Main.screenPosition.Y + (float) Main.rand.Next(Main.screenHeight);
                var vector2 = new Vector2(x1, num2);
                var num3 = x - vector2.X;
                var num4 = y - vector2.Y;
                var num5 = num3 + (float) Main.rand.Next(-50, 51) * 0.1f;
                var num6 = num4 + (float) Main.rand.Next(-50, 51) * 0.1f;
                var num7 = 24f / (float) Math.Sqrt((double) num5 * (double) num5 + (double) num6 * (double) num6);
                var SpeedX = num5 * num7;
                var SpeedY = num6 * num7;
                Projectile.NewProjectile(x1, num2, SpeedX, SpeedY, 221, 36, 0.0f, this.whoAmI, 0.0f, 0.0f);
            }

            if (!this.crystalLeaf || this.petalTimer != 0)
                return;
            var type = this.inventory[this.selectedItem].type;
            for (var index = 0; index < 1000; ++index)
            {
                if (Main.projectile[index].owner == this.whoAmI && Main.projectile[index].type == 226)
                {
                    this.petalTimer = 50;
                    var num1 = 12f;
                    var vector2 = new Vector2(Main.projectile[index].position.X + (float) this.width * 0.5f,
                        Main.projectile[index].position.Y + (float) this.height * 0.5f);
                    var num2 = x - vector2.X;
                    var num3 = y - vector2.Y;
                    var num4 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
                    var num5 = num1 / num4;
                    var SpeedX = num2 * num5;
                    var SpeedY = num3 * num5;
                    Projectile.NewProjectile(Main.projectile[index].Center.X - 4f, Main.projectile[index].Center.Y,
                        SpeedX, SpeedY, 227, Player.crystalLeafDamage, (float) Player.crystalLeafKB, this.whoAmI, 0.0f,
                        0.0f);
                    break;
                }
            }
        }

        public void openPresent()
        {
            if (Main.rand.Next(15) == 0 && Main.hardMode)
            {
                var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 602, 1,
                    false, 0, false, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(30) == 0)
            {
                var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1922,
                    1, false, 0, false, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(400) == 0)
            {
                var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1927,
                    1, false, 0, false, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(150) == 0)
            {
                var number1 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1870,
                    1, false, 0, false, false);
                if (Main.netMode == 1)
                    NetMessage.SendData(21, -1, -1, (NetworkText) null, number1, 1f, 0.0f, 0.0f, 0, 0, 0);
                var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 97,
                    Main.rand.Next(30, 61), false, 0, false, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(150) == 0)
            {
                var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1909,
                    1, false, 0, false, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(150) == 0)
            {
                var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1917,
                    1, false, 0, false, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(150) == 0)
            {
                var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1915,
                    1, false, 0, false, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(150) == 0)
            {
                var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1918,
                    1, false, 0, false, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(150) == 0)
            {
                var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1921,
                    1, false, 0, false, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(300) == 0)
            {
                var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1923,
                    1, false, 0, false, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(40) == 0)
            {
                var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1907,
                    1, false, 0, false, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(10) == 0)
            {
                var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1908,
                    1, false, 0, false, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(15) == 0)
            {
                switch (Main.rand.Next(5))
                {
                    case 0:
                        var number3 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1932, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number3, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number4 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1933, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number4, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number5 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1934, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number5, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 1:
                        var number6 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1935, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number6, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number7 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1936, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number7, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number8 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1937, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number8, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 2:
                        var number9 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1940, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number9, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number10 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1941, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number10, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number11 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1942, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number11, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 3:
                        var number12 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1938, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number12, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 4:
                        var number13 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1939, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number13, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                }
            }
            else if (Main.rand.Next(7) == 0)
            {
                var Type = Main.rand.Next(3);
                if (Type == 0)
                    Type = 1911;
                if (Type == 1)
                    Type = 1919;
                if (Type == 2)
                    Type = 1920;
                var number1 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, Type,
                    1, false, 0, false, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, (NetworkText) null, number1, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(8) == 0)
            {
                var number1 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1912,
                    Main.rand.Next(1, 4), false, 0, false, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, (NetworkText) null, number1, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(9) == 0)
            {
                var number1 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1913,
                    Main.rand.Next(20, 41), false, 0, false, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, (NetworkText) null, number1, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else
            {
                switch (Main.rand.Next(3))
                {
                    case 0:
                        var number14 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1872, Main.rand.Next(20, 50), false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number14, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 1:
                        var number15 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 586, Main.rand.Next(20, 50), false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number15, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    default:
                        var number16 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 591, Main.rand.Next(20, 50), false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number16, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                }
            }
        }

        public void QuickSpawnItem(int item, int stack = 1)
        {
            var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, item,
                stack, false, -1, false, false);
            if (Main.netMode != 1)
                return;
            NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
        }

        public void OpenBossBag(int type)
        {
            switch (type)
            {
                case 3318:
                    if (Main.rand.Next(2) == 0)
                        this.QuickSpawnItem(2430, 1);
                    if (Main.rand.Next(7) == 0)
                        this.QuickSpawnItem(2493, 1);
                    var num1 = Main.rand.Next(256, 259);
                    var num2 = Main.rand.Next(256, 259);
                    while (num2 == num1)
                        num2 = Main.rand.Next(256, 259);
                    this.QuickSpawnItem(num1, 1);
                    this.QuickSpawnItem(num2, 1);
                    if (Main.rand.Next(2) == 0)
                        this.QuickSpawnItem(2610, 1);
                    else
                        this.QuickSpawnItem(2585, 1);
                    this.QuickSpawnItem(998, 1);
                    this.QuickSpawnItem(3090, 1);
                    break;
                case 3319:
                    if (this.difficulty == (byte) 2)
                        this.QuickSpawnItem(3763, 1);
                    if (Main.rand.Next(7) == 0)
                        this.QuickSpawnItem(2112, 1);
                    if (Main.rand.Next(30) == 0)
                        this.QuickSpawnItem(1299, 1);
                    if (WorldGen.crimson)
                    {
                        this.QuickSpawnItem(880,
                            Main.rand.Next(20) + 10 + (Main.rand.Next(20) + 10) + (Main.rand.Next(20) + 10));
                        this.QuickSpawnItem(2171, Main.rand.Next(3) + 1);
                    }
                    else
                    {
                        this.QuickSpawnItem(56,
                            Main.rand.Next(20) + 10 + (Main.rand.Next(20) + 10) + (Main.rand.Next(20) + 10));
                        this.QuickSpawnItem(59, Main.rand.Next(3) + 1);
                        this.QuickSpawnItem(47, Main.rand.Next(30) + 20);
                    }

                    this.QuickSpawnItem(3097, 1);
                    break;
                case 3320:
                    this.QuickSpawnItem(56, Main.rand.Next(15, 30) + Main.rand.Next(15, 31));
                    this.QuickSpawnItem(86, Main.rand.Next(10, 20));
                    if (Main.rand.Next(20) == 0)
                        this.QuickSpawnItem(994, 1);
                    if (Main.rand.Next(7) == 0)
                        this.QuickSpawnItem(2111, 1);
                    this.QuickSpawnItem(3224, 1);
                    break;
                case 3321:
                    this.QuickSpawnItem(880, Main.rand.Next(20, 46) + Main.rand.Next(20, 46));
                    this.QuickSpawnItem(1329, Main.rand.Next(10, 20));
                    if (Main.rand.Next(7) == 0)
                        this.QuickSpawnItem(2104, 1);
                    if (Main.rand.Next(20) == 0)
                        this.QuickSpawnItem(3060, 1);
                    this.QuickSpawnItem(3223, 1);
                    break;
                case 3322:
                    if (Main.rand.Next(7) == 0)
                        this.QuickSpawnItem(2108, 1);
                    var num3 = Main.rand.Next(3);
                    switch (num3)
                    {
                        case 0:
                            num3 = 1121;
                            break;
                        case 1:
                            num3 = 1123;
                            break;
                        case 2:
                            num3 = 2888;
                            break;
                    }

                    this.QuickSpawnItem(num3, 1);
                    this.QuickSpawnItem(3333, 1);
                    if (Main.rand.Next(3) == 0)
                        this.QuickSpawnItem(1132, 1);
                    if (Main.rand.Next(9) == 0)
                        this.QuickSpawnItem(1170, 1);
                    if (Main.rand.Next(9) == 0)
                        this.QuickSpawnItem(2502, 1);
                    this.QuickSpawnItem(1129, 1);
                    this.QuickSpawnItem(Main.rand.Next(842, 845), 1);
                    this.QuickSpawnItem(1130, Main.rand.Next(10, 30));
                    this.QuickSpawnItem(2431, Main.rand.Next(17, 30));
                    break;
                case 3323:
                    this.QuickSpawnItem(3245, 1);
                    switch (Main.rand.Next(3))
                    {
                        case 0:
                            this.QuickSpawnItem(1281, 1);
                            break;
                        case 1:
                            this.QuickSpawnItem(1273, 1);
                            break;
                        default:
                            this.QuickSpawnItem(1313, 1);
                            break;
                    }

                    break;
                case 3324:
                    if (Main.rand.Next(7) == 0)
                        this.QuickSpawnItem(2105, 1);
                    this.QuickSpawnItem(367, 1);
                    if (!this.extraAccessory)
                        this.QuickSpawnItem(3335, 1);
                    var num4 = Main.rand.Next(4);
                    this.QuickSpawnItem(num4 != 3 ? 489 + num4 : 2998, 1);
                    switch (Main.rand.Next(3))
                    {
                        case 0:
                            this.QuickSpawnItem(514, 1);
                            break;
                        case 1:
                            this.QuickSpawnItem(426, 1);
                            break;
                        case 2:
                            this.QuickSpawnItem(434, 1);
                            break;
                    }

                    break;
                case 3325:
                    this.TryGettingDevArmor();
                    if (Main.rand.Next(7) == 0)
                        this.QuickSpawnItem(2113, 1);
                    this.QuickSpawnItem(548, Main.rand.Next(25, 41));
                    this.QuickSpawnItem(1225, Main.rand.Next(20, 36));
                    this.QuickSpawnItem(3355, 1);
                    break;
                case 3326:
                    this.TryGettingDevArmor();
                    if (Main.rand.Next(7) == 0)
                        this.QuickSpawnItem(2106, 1);
                    this.QuickSpawnItem(549, Main.rand.Next(25, 41));
                    this.QuickSpawnItem(1225, Main.rand.Next(20, 36));
                    this.QuickSpawnItem(3354, 1);
                    break;
                case 3327:
                    this.TryGettingDevArmor();
                    if (Main.rand.Next(7) == 0)
                        this.QuickSpawnItem(2107, 1);
                    this.QuickSpawnItem(547, Main.rand.Next(25, 41));
                    this.QuickSpawnItem(1225, Main.rand.Next(20, 36));
                    this.QuickSpawnItem(3356, 1);
                    break;
                case 3328:
                    this.TryGettingDevArmor();
                    if (Main.rand.Next(7) == 0)
                        this.QuickSpawnItem(2109, 1);
                    this.QuickSpawnItem(1141, 1);
                    this.QuickSpawnItem(3336, 1);
                    if (Main.rand.Next(15) == 0)
                        this.QuickSpawnItem(1182, 1);
                    if (Main.rand.Next(20) == 0)
                        this.QuickSpawnItem(1305, 1);
                    if (Main.rand.Next(2) == 0)
                        this.QuickSpawnItem(1157, 1);
                    if (Main.rand.Next(10) == 0)
                        this.QuickSpawnItem(3021, 1);
                    switch (Main.rand.Next(7))
                    {
                        case 0:
                            this.QuickSpawnItem(758, 1);
                            this.QuickSpawnItem(771, Main.rand.Next(50, 150));
                            break;
                        case 1:
                            this.QuickSpawnItem(1255, 1);
                            break;
                        case 2:
                            this.QuickSpawnItem(788, 1);
                            break;
                        case 3:
                            this.QuickSpawnItem(1178, 1);
                            break;
                        case 4:
                            this.QuickSpawnItem(1259, 1);
                            break;
                        case 5:
                            this.QuickSpawnItem(1155, 1);
                            break;
                        case 6:
                            this.QuickSpawnItem(3018, 1);
                            break;
                    }

                    break;
                case 3329:
                    this.TryGettingDevArmor();
                    this.QuickSpawnItem(3337, 1);
                    if (Main.rand.Next(7) == 0)
                        this.QuickSpawnItem(2110, 1);
                    switch (Main.rand.Next(8))
                    {
                        case 0:
                            this.QuickSpawnItem(1258, 1);
                            this.QuickSpawnItem(1261, Main.rand.Next(60, 100));
                            break;
                        case 1:
                            this.QuickSpawnItem(1122, 1);
                            break;
                        case 2:
                            this.QuickSpawnItem(899, 1);
                            break;
                        case 3:
                            this.QuickSpawnItem(1248, 1);
                            break;
                        case 4:
                            this.QuickSpawnItem(1294, 1);
                            break;
                        case 5:
                            this.QuickSpawnItem(1295, 1);
                            break;
                        case 6:
                            this.QuickSpawnItem(1296, 1);
                            break;
                        case 7:
                            this.QuickSpawnItem(1297, 1);
                            break;
                    }

                    this.QuickSpawnItem(2218, Main.rand.Next(18, 24));
                    break;
                case 3330:
                    this.TryGettingDevArmor();
                    this.QuickSpawnItem(3367, 1);
                    if (Main.rand.Next(7) == 0)
                        this.QuickSpawnItem(2588, 1);
                    if (Main.rand.Next(10) == 0)
                        this.QuickSpawnItem(2609, 1);
                    switch (Main.rand.Next(5))
                    {
                        case 0:
                            this.QuickSpawnItem(2611, 1);
                            break;
                        case 1:
                            this.QuickSpawnItem(2624, 1);
                            break;
                        case 2:
                            this.QuickSpawnItem(2622, 1);
                            break;
                        case 3:
                            this.QuickSpawnItem(2621, 1);
                            break;
                        case 4:
                            this.QuickSpawnItem(2623, 1);
                            break;
                    }

                    break;
                case 3331:
                    this.TryGettingDevArmor();
                    if (Main.rand.Next(7) == 0)
                    {
                        this.QuickSpawnItem(3372, 1);
                        break;
                    }

                    break;
                case 3332:
                    this.TryGettingDevArmor();
                    if (Main.rand.Next(7) == 0)
                        this.QuickSpawnItem(3373, 1);
                    if (!this.HasItem(3384))
                        this.QuickSpawnItem(3384, 1);
                    this.QuickSpawnItem(3460, Main.rand.Next(90, 111));
                    this.QuickSpawnItem(1131, 1);
                    this.QuickSpawnItem(3577, 1);
                    this.QuickSpawnItem(Utils.SelectRandom<int>(Main.rand, new int[9]
                    {
                        3063,
                        3389,
                        3065,
                        1553,
                        3546,
                        3541,
                        3570,
                        3571,
                        3569
                    }), 1);
                    break;
                case 3860:
                    this.TryGettingDevArmor();
                    if (Main.rand.Next(7) == 0)
                        this.QuickSpawnItem(3863, 1);
                    switch (Main.rand.Next(4))
                    {
                        case 0:
                            this.QuickSpawnItem(3859, 1);
                            break;
                        case 1:
                            this.QuickSpawnItem(3827, 1);
                            break;
                        case 2:
                            this.QuickSpawnItem(3870, 1);
                            break;
                        default:
                            this.QuickSpawnItem(3858, 1);
                            break;
                    }

                    if (Main.rand.Next(4) == 0)
                        this.QuickSpawnItem(3883, 1);
                    this.QuickSpawnItem(3817, Main.rand.Next(30, 50));
                    break;
            }

            var Type = -1;
            if (type == 3318)
                Type = 50;
            if (type == 3319)
                Type = 4;
            if (type == 3320)
                Type = 13;
            if (type == 3321)
                Type = 266;
            if (type == 3322)
                Type = 222;
            if (type == 3323)
                Type = 35;
            if (type == 3324)
                Type = 113;
            if (type == 3325)
                Type = 134;
            if (type == 3326)
                Type = 125;
            if (type == 3327)
                Type = (int) sbyte.MaxValue;
            if (type == 3328)
                Type = 262;
            if (type == 3329)
                Type = 245;
            if (type == 3330)
                Type = 370;
            if (type == 3331)
                Type = 439;
            if (type == 3332)
                Type = 398;
            if (type == 3860)
                Type = 551;
            if (type == 3861)
                Type = 576;
            if (type == 3862)
                Type = 564;
            if (Type <= 0)
                return;
            var npc = new NPC();
            npc.SetDefaults(Type, -1f);
            var num5 = npc.value * (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.00999999977648258);
            if (Main.rand.Next(5) == 0)
                num5 *= (float) (1.0 + (double) Main.rand.Next(5, 11) * 0.00999999977648258);
            if (Main.rand.Next(10) == 0)
                num5 *= (float) (1.0 + (double) Main.rand.Next(10, 21) * 0.00999999977648258);
            if (Main.rand.Next(15) == 0)
                num5 *= (float) (1.0 + (double) Main.rand.Next(15, 31) * 0.00999999977648258);
            if (Main.rand.Next(20) == 0)
                num5 *= (float) (1.0 + (double) Main.rand.Next(20, 41) * 0.00999999977648258);
            while ((int) num5 > 0)
            {
                if ((double) num5 > 1000000.0)
                {
                    var stack = (int) ((double) num5 / 1000000.0);
                    num5 -= (float) (1000000 * stack);
                    this.QuickSpawnItem(74, stack);
                }
                else if ((double) num5 > 10000.0)
                {
                    var stack = (int) ((double) num5 / 10000.0);
                    num5 -= (float) (10000 * stack);
                    this.QuickSpawnItem(73, stack);
                }
                else if ((double) num5 > 100.0)
                {
                    var stack = (int) ((double) num5 / 100.0);
                    num5 -= (float) (100 * stack);
                    this.QuickSpawnItem(72, stack);
                }
                else
                {
                    var stack = (int) num5;
                    if (stack < 1)
                        stack = 1;
                    num5 -= (float) stack;
                    this.QuickSpawnItem(71, stack);
                }
            }
        }

        private void TryGettingDevArmor()
        {
            if (Main.rand.Next(20) != 0)
                return;
            switch (Main.rand.Next(14))
            {
                case 0:
                    this.QuickSpawnItem(666, 1);
                    this.QuickSpawnItem(667, 1);
                    this.QuickSpawnItem(668, 1);
                    this.QuickSpawnItem(665, 1);
                    this.QuickSpawnItem(3287, 1);
                    break;
                case 1:
                    this.QuickSpawnItem(1554, 1);
                    this.QuickSpawnItem(1555, 1);
                    this.QuickSpawnItem(1556, 1);
                    this.QuickSpawnItem(1586, 1);
                    break;
                case 2:
                    this.QuickSpawnItem(1587, 1);
                    this.QuickSpawnItem(1588, 1);
                    this.QuickSpawnItem(1586, 1);
                    break;
                case 3:
                    this.QuickSpawnItem(1557, 1);
                    this.QuickSpawnItem(1558, 1);
                    this.QuickSpawnItem(1559, 1);
                    this.QuickSpawnItem(1585, 1);
                    break;
                case 4:
                    this.QuickSpawnItem(1560, 1);
                    this.QuickSpawnItem(1561, 1);
                    this.QuickSpawnItem(1562, 1);
                    this.QuickSpawnItem(1584, 1);
                    break;
                case 5:
                    this.QuickSpawnItem(1563, 1);
                    this.QuickSpawnItem(1564, 1);
                    this.QuickSpawnItem(1565, 1);
                    this.QuickSpawnItem(3582, 1);
                    break;
                case 6:
                    this.QuickSpawnItem(1566, 1);
                    this.QuickSpawnItem(1567, 1);
                    this.QuickSpawnItem(1568, 1);
                    break;
                case 7:
                    this.QuickSpawnItem(1580, 1);
                    this.QuickSpawnItem(1581, 1);
                    this.QuickSpawnItem(1582, 1);
                    this.QuickSpawnItem(1583, 1);
                    break;
                case 8:
                    this.QuickSpawnItem(3226, 1);
                    this.QuickSpawnItem(3227, 1);
                    this.QuickSpawnItem(3228, 1);
                    this.QuickSpawnItem(3288, 1);
                    break;
                case 9:
                    this.QuickSpawnItem(3583, 1);
                    this.QuickSpawnItem(3581, 1);
                    this.QuickSpawnItem(3578, 1);
                    this.QuickSpawnItem(3579, 1);
                    this.QuickSpawnItem(3580, 1);
                    break;
                case 10:
                    this.QuickSpawnItem(3585, 1);
                    this.QuickSpawnItem(3586, 1);
                    this.QuickSpawnItem(3587, 1);
                    this.QuickSpawnItem(3588, 1);
                    this.QuickSpawnItem(3024, 4);
                    break;
                case 11:
                    this.QuickSpawnItem(3589, 1);
                    this.QuickSpawnItem(3590, 1);
                    this.QuickSpawnItem(3591, 1);
                    this.QuickSpawnItem(3592, 1);
                    this.QuickSpawnItem(3599, 4);
                    break;
                case 12:
                    this.QuickSpawnItem(3921, 1);
                    this.QuickSpawnItem(3922, 1);
                    this.QuickSpawnItem(3923, 1);
                    this.QuickSpawnItem(3924, 1);
                    break;
                case 13:
                    this.QuickSpawnItem(3925, 1);
                    this.QuickSpawnItem(3926, 1);
                    this.QuickSpawnItem(3927, 1);
                    this.QuickSpawnItem(3928, 1);
                    this.QuickSpawnItem(3929, 1);
                    break;
            }
        }

        public void openCrate(int type)
        {
            var num = type - 2334;
            if (type >= 3203)
                num = type - 3203 + 3;
            switch (num)
            {
                case 0:
                    var flag1 = true;
                    while (flag1)
                    {
                        if (Main.hardMode && flag1 && Main.rand.Next(200) == 0)
                        {
                            var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, 3064, 1, false, 0, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag1 = false;
                        }

                        if (flag1 && Main.rand.Next(40) == 0)
                        {
                            var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, 3200, 1, false, -1, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag1 = false;
                        }

                        if (flag1 && Main.rand.Next(40) == 0)
                        {
                            var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, 3201, 1, false, -1, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag1 = false;
                        }

                        if (Main.hardMode && flag1 && Main.rand.Next(25) == 0)
                        {
                            var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, 2424, 1, false, -1, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag1 = false;
                        }

                        if (Main.rand.Next(45) == 0)
                        {
                            var Type = Main.rand.Next(5);
                            switch (Type)
                            {
                                case 0:
                                    Type = 285;
                                    break;
                                case 1:
                                    Type = 953;
                                    break;
                                case 2:
                                    Type = 946;
                                    break;
                                case 3:
                                    Type = 3068;
                                    break;
                                case 4:
                                    Type = 3084;
                                    break;
                            }

                            var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, Type, 1, false, -1, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag1 = false;
                        }

                        if (!Main.hardMode && flag1 && Main.rand.Next(50) == 0)
                        {
                            var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, 997, 1, false, 0, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag1 = false;
                        }

                        if (Main.rand.Next(7) == 0)
                        {
                            int Type;
                            int Stack;
                            if (Main.rand.Next(3) == 0)
                            {
                                Type = 73;
                                Stack = Main.rand.Next(1, 6);
                            }
                            else
                            {
                                Type = 72;
                                Stack = Main.rand.Next(20, 91);
                            }

                            var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, Type, Stack, false, 0, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag1 = false;
                        }

                        if (Main.rand.Next(7) == 0)
                        {
                            var Type = Main.rand.Next(8);
                            switch (Type)
                            {
                                case 0:
                                    Type = 12;
                                    break;
                                case 1:
                                    Type = 11;
                                    break;
                                case 2:
                                    Type = 14;
                                    break;
                                case 3:
                                    Type = 13;
                                    break;
                                case 4:
                                    Type = 699;
                                    break;
                                case 5:
                                    Type = 700;
                                    break;
                                case 6:
                                    Type = 701;
                                    break;
                                case 7:
                                    Type = 702;
                                    break;
                            }

                            if (Main.hardMode && Main.rand.Next(2) == 0)
                            {
                                Type = Main.rand.Next(6);
                                switch (Type)
                                {
                                    case 0:
                                        Type = 364;
                                        break;
                                    case 1:
                                        Type = 365;
                                        break;
                                    case 2:
                                        Type = 366;
                                        break;
                                    case 3:
                                        Type = 1104;
                                        break;
                                    case 4:
                                        Type = 1105;
                                        break;
                                    case 5:
                                        Type = 1106;
                                        break;
                                }
                            }

                            var Stack = Main.rand.Next(8, 21);
                            var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, Type, Stack, false, 0, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag1 = false;
                        }

                        if (Main.rand.Next(8) == 0)
                        {
                            var Type = Main.rand.Next(8);
                            switch (Type)
                            {
                                case 0:
                                    Type = 20;
                                    break;
                                case 1:
                                    Type = 22;
                                    break;
                                case 2:
                                    Type = 21;
                                    break;
                                case 3:
                                    Type = 19;
                                    break;
                                case 4:
                                    Type = 703;
                                    break;
                                case 5:
                                    Type = 704;
                                    break;
                                case 6:
                                    Type = 705;
                                    break;
                                case 7:
                                    Type = 706;
                                    break;
                            }

                            var Stack = Main.rand.Next(2, 8);
                            if (Main.hardMode && Main.rand.Next(2) == 0)
                            {
                                Type = Main.rand.Next(6);
                                switch (Type)
                                {
                                    case 0:
                                        Type = 381;
                                        break;
                                    case 1:
                                        Type = 382;
                                        break;
                                    case 2:
                                        Type = 391;
                                        break;
                                    case 3:
                                        Type = 1184;
                                        break;
                                    case 4:
                                        Type = 1191;
                                        break;
                                    case 5:
                                        Type = 1198;
                                        break;
                                }

                                Stack -= Main.rand.Next(2);
                            }

                            var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, Type, Stack, false, 0, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag1 = false;
                        }

                        if (Main.rand.Next(7) == 0)
                        {
                            var Type = Main.rand.Next(10);
                            switch (Type)
                            {
                                case 0:
                                    Type = 288;
                                    break;
                                case 1:
                                    Type = 290;
                                    break;
                                case 2:
                                    Type = 292;
                                    break;
                                case 3:
                                    Type = 299;
                                    break;
                                case 4:
                                    Type = 298;
                                    break;
                                case 5:
                                    Type = 304;
                                    break;
                                case 6:
                                    Type = 291;
                                    break;
                                case 7:
                                    Type = 2322;
                                    break;
                                case 8:
                                    Type = 2323;
                                    break;
                                case 9:
                                    Type = 2329;
                                    break;
                            }

                            var Stack = Main.rand.Next(1, 4);
                            var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, Type, Stack, false, 0, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag1 = false;
                        }
                    }

                    if (Main.rand.Next(3) == 0)
                    {
                        var Type = Main.rand.Next(2);
                        switch (Type)
                        {
                            case 0:
                                Type = 28;
                                break;
                            case 1:
                                Type = 110;
                                break;
                        }

                        var Stack = Main.rand.Next(5, 16);
                        var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            Type, Stack, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                    }

                    if (Main.rand.Next(3) != 0)
                        break;
                    var number1 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        Main.rand.Next(3) != 0 ? 2674 : 2675, Main.rand.Next(1, 5), false, 0, false, false);
                    if (Main.netMode != 1)
                        break;
                    NetMessage.SendData(21, -1, -1, (NetworkText) null, number1, 1f, 0.0f, 0.0f, 0, 0, 0);
                    break;
                case 1:
                    var flag2 = true;
                    while (flag2)
                    {
                        if (Main.hardMode && flag2 && Main.rand.Next(60) == 0)
                        {
                            var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, 3064, 1, false, 0, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag2 = false;
                        }

                        if (flag2 && Main.rand.Next(25) == 0)
                        {
                            var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, 2501, 1, false, 0, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag2 = false;
                        }

                        if (flag2 && Main.rand.Next(20) == 0)
                        {
                            var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, 2587, 1, false, 0, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag2 = false;
                        }

                        if (flag2 && Main.rand.Next(15) == 0)
                        {
                            var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, 2608, 1, false, -1, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag2 = false;
                        }

                        if (flag2 && Main.rand.Next(20) == 0)
                        {
                            var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, 3200, 1, false, -1, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag2 = false;
                        }

                        if (flag2 && Main.rand.Next(20) == 0)
                        {
                            var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, 3201, 1, false, -1, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag2 = false;
                        }

                        if (Main.rand.Next(4) == 0)
                        {
                            var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, 73, Main.rand.Next(5, 11), false, 0, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag2 = false;
                        }

                        if (Main.rand.Next(4) == 0)
                        {
                            var Type = Main.rand.Next(8);
                            switch (Type)
                            {
                                case 0:
                                    Type = 20;
                                    break;
                                case 1:
                                    Type = 22;
                                    break;
                                case 2:
                                    Type = 21;
                                    break;
                                case 3:
                                    Type = 19;
                                    break;
                                case 4:
                                    Type = 703;
                                    break;
                                case 5:
                                    Type = 704;
                                    break;
                                case 6:
                                    Type = 705;
                                    break;
                                case 7:
                                    Type = 706;
                                    break;
                            }

                            var Stack = Main.rand.Next(6, 15);
                            if (Main.hardMode && Main.rand.Next(3) != 0)
                            {
                                Type = Main.rand.Next(6);
                                switch (Type)
                                {
                                    case 0:
                                        Type = 381;
                                        break;
                                    case 1:
                                        Type = 382;
                                        break;
                                    case 2:
                                        Type = 391;
                                        break;
                                    case 3:
                                        Type = 1184;
                                        break;
                                    case 4:
                                        Type = 1191;
                                        break;
                                    case 5:
                                        Type = 1198;
                                        break;
                                }

                                Stack -= Main.rand.Next(2);
                            }

                            var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, Type, Stack, false, 0, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag2 = false;
                        }

                        if (Main.rand.Next(4) == 0)
                        {
                            var Type = Main.rand.Next(8);
                            switch (Type)
                            {
                                case 0:
                                    Type = 288;
                                    break;
                                case 1:
                                    Type = 296;
                                    break;
                                case 2:
                                    Type = 304;
                                    break;
                                case 3:
                                    Type = 305;
                                    break;
                                case 4:
                                    Type = 2322;
                                    break;
                                case 5:
                                    Type = 2323;
                                    break;
                                case 6:
                                    Type = 2324;
                                    break;
                                case 7:
                                    Type = 2327;
                                    break;
                            }

                            var Stack = Main.rand.Next(2, 5);
                            var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, Type, Stack, false, 0, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag2 = false;
                        }
                    }

                    if (Main.rand.Next(2) == 0)
                    {
                        var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, Main.rand.Next(188, 190), Main.rand.Next(5, 16), false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                    }

                    if (Main.rand.Next(2) != 0)
                        break;
                    var number3 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        Main.rand.Next(3) != 0 ? 2675 : 2676, Main.rand.Next(2, 5), false, 0, false, false);
                    if (Main.netMode != 1)
                        break;
                    NetMessage.SendData(21, -1, -1, (NetworkText) null, number3, 1f, 0.0f, 0.0f, 0, 0, 0);
                    break;
                case 2:
                    var flag3 = true;
                    while (flag3)
                    {
                        if (Main.hardMode && flag3 && Main.rand.Next(20) == 0)
                        {
                            var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, 3064, 1, false, 0, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag3 = false;
                        }

                        if (flag3 && Main.rand.Next(10) == 0)
                        {
                            var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, 2491, 1, false, 0, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag3 = false;
                        }

                        if (Main.rand.Next(3) == 0)
                        {
                            var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, 73, Main.rand.Next(8, 21), false, 0, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag3 = false;
                        }

                        if (Main.rand.Next(3) == 0)
                        {
                            var Type = Main.rand.Next(4);
                            switch (Type)
                            {
                                case 0:
                                    Type = 21;
                                    break;
                                case 1:
                                    Type = 19;
                                    break;
                                case 2:
                                    Type = 705;
                                    break;
                                case 3:
                                    Type = 706;
                                    break;
                            }

                            if (Main.hardMode && Main.rand.Next(3) != 0)
                            {
                                Type = Main.rand.Next(4);
                                switch (Type)
                                {
                                    case 0:
                                        Type = 382;
                                        break;
                                    case 1:
                                        Type = 391;
                                        break;
                                    case 2:
                                        Type = 1191;
                                        break;
                                    case 3:
                                        Type = 1198;
                                        break;
                                }
                            }

                            var Stack = Main.rand.Next(15, 31);
                            var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, Type, Stack, false, 0, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag3 = false;
                        }
                    }

                    if (Main.rand.Next(3) == 0)
                    {
                        var Type = Main.rand.Next(5);
                        switch (Type)
                        {
                            case 0:
                                Type = 288;
                                break;
                            case 1:
                                Type = 296;
                                break;
                            case 2:
                                Type = 305;
                                break;
                            case 3:
                                Type = 2322;
                                break;
                            case 4:
                                Type = 2323;
                                break;
                        }

                        var Stack = Main.rand.Next(2, 6);
                        var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, Type, Stack, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                    }

                    if (Main.rand.Next(2) == 0)
                    {
                        var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, Main.rand.Next(499, 501), Main.rand.Next(5, 21), false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                    }

                    if (Main.rand.Next(3) == 0)
                        break;
                    var number4 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        2676, Main.rand.Next(3, 8), false, 0, false, false);
                    if (Main.netMode != 1)
                        break;
                    NetMessage.SendData(21, -1, -1, (NetworkText) null, number4, 1f, 0.0f, 0.0f, 0, 0, 0);
                    break;
                default:
                    var maxValue = 6;
                    var flag4 = true;
                    while (flag4)
                    {
                        if (num == 3 && flag4 && Main.rand.Next(maxValue) == 0)
                        {
                            int Type;
                            switch (Main.rand.Next(5))
                            {
                                case 0:
                                    Type = 162;
                                    break;
                                case 1:
                                    Type = 111;
                                    break;
                                case 2:
                                    Type = 96;
                                    break;
                                case 3:
                                    Type = 115;
                                    break;
                                default:
                                    Type = 64;
                                    break;
                            }

                            var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, Type, 1, false, -1, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag4 = false;
                        }

                        if (num == 4 && flag4 && Main.rand.Next(maxValue) == 0)
                        {
                            int Type;
                            switch (Main.rand.Next(5))
                            {
                                case 0:
                                    Type = 800;
                                    break;
                                case 1:
                                    Type = 802;
                                    break;
                                case 2:
                                    Type = 1256;
                                    break;
                                case 3:
                                    Type = 1290;
                                    break;
                                default:
                                    Type = 3062;
                                    break;
                            }

                            var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, Type, 1, false, -1, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag4 = false;
                        }

                        if (num == 5 && flag4 && Main.rand.Next(maxValue) == 0)
                        {
                            var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, 3085, 1, false, -1, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag4 = false;
                        }

                        if (num == 6 && flag4 && Main.rand.Next(maxValue) == 0)
                        {
                            int Type;
                            switch (Main.rand.Next(3))
                            {
                                case 0:
                                    Type = 158;
                                    break;
                                case 1:
                                    Type = 65;
                                    break;
                                default:
                                    Type = 159;
                                    break;
                            }

                            var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, Type, 1, false, -1, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag4 = false;
                        }

                        if (num == 8 && flag4 && Main.rand.Next(maxValue) == 0)
                        {
                            int Type;
                            switch (Main.rand.Next(5))
                            {
                                case 0:
                                    Type = 212;
                                    break;
                                case 1:
                                    Type = 964;
                                    break;
                                case 2:
                                    Type = 211;
                                    break;
                                case 3:
                                    Type = 213;
                                    break;
                                default:
                                    Type = 2292;
                                    break;
                            }

                            var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, Type, 1, false, -1, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag4 = false;
                        }

                        if (Main.rand.Next(4) == 0)
                        {
                            var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, 73, Main.rand.Next(5, 13), false, 0, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag4 = false;
                        }

                        if (Main.rand.Next(4) == 0)
                        {
                            var Type = Main.rand.Next(6);
                            switch (Type)
                            {
                                case 0:
                                    Type = 22;
                                    break;
                                case 1:
                                    Type = 21;
                                    break;
                                case 2:
                                    Type = 19;
                                    break;
                                case 3:
                                    Type = 704;
                                    break;
                                case 4:
                                    Type = 705;
                                    break;
                                case 5:
                                    Type = 706;
                                    break;
                            }

                            var Stack = Main.rand.Next(10, 21);
                            if (Main.hardMode && Main.rand.Next(3) != 0)
                            {
                                Type = Main.rand.Next(6);
                                switch (Type)
                                {
                                    case 0:
                                        Type = 381;
                                        break;
                                    case 1:
                                        Type = 382;
                                        break;
                                    case 2:
                                        Type = 391;
                                        break;
                                    case 3:
                                        Type = 1184;
                                        break;
                                    case 4:
                                        Type = 1191;
                                        break;
                                    case 5:
                                        Type = 1198;
                                        break;
                                }

                                Stack -= Main.rand.Next(3);
                            }

                            var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, Type, Stack, false, 0, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                            flag4 = false;
                        }
                    }

                    if (Main.rand.Next(4) == 0)
                    {
                        var Type = Main.rand.Next(6);
                        switch (Type)
                        {
                            case 0:
                                Type = 288;
                                break;
                            case 1:
                                Type = 296;
                                break;
                            case 2:
                                Type = 304;
                                break;
                            case 3:
                                Type = 305;
                                break;
                            case 4:
                                Type = 2322;
                                break;
                            case 5:
                                Type = 2323;
                                break;
                        }

                        var Stack = Main.rand.Next(2, 5);
                        var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, Type, Stack, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                    }

                    if (Main.rand.Next(2) == 0)
                    {
                        var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, Main.rand.Next(188, 190), Main.rand.Next(5, 18), false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                    }

                    if (Main.rand.Next(2) == 0)
                    {
                        var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, Main.rand.Next(2) != 0 ? 2675 : 2676, Main.rand.Next(2, 7), false, 0, false,
                            false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                    }

                    if (num != 3 && num != 4 && num != 7)
                        break;
                    if (Main.hardMode && Main.rand.Next(2) == 0)
                    {
                        var Type = 521;
                        if (num == 7)
                            Type = 520;
                        var Stack = Main.rand.Next(2, 6);
                        var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, Type, Stack, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                    }

                    if (!Main.hardMode || Main.rand.Next(2) != 0)
                        break;
                    var Type1 = 522;
                    var Stack1 = Main.rand.Next(2, 6);
                    switch (num)
                    {
                        case 4:
                            Type1 = 1332;
                            break;
                        case 7:
                            Type1 = 502;
                            Stack1 = Main.rand.Next(4, 11);
                            break;
                    }

                    var number5 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        Type1, Stack1, false, 0, false, false);
                    if (Main.netMode != 1)
                        break;
                    NetMessage.SendData(21, -1, -1, (NetworkText) null, number5, 1f, 0.0f, 0.0f, 0, 0, 0);
                    break;
            }
        }

        public int CountItem(int type, int stopCountingAt = 0)
        {
            var num = 0;
            for (var index = 0; index != 58; ++index)
            {
                if (this.inventory[index].stack > 0 && this.inventory[index].type == type)
                {
                    num += this.inventory[index].stack;
                    if (num >= stopCountingAt)
                        return num;
                }
            }

            return num;
        }

        public bool ConsumeItem(int type, bool reverseOrder = false)
        {
            var num1 = 0;
            var num2 = 58;
            var num3 = 1;
            if (reverseOrder)
            {
                num1 = 57;
                num2 = -1;
                num3 = -1;
            }

            var index = num1;
            while (index != num2)
            {
                if (this.inventory[index].stack > 0 && this.inventory[index].type == type)
                {
                    --this.inventory[index].stack;
                    if (this.inventory[index].stack <= 0)
                        this.inventory[index].SetDefaults(0, false);
                    return true;
                }

                index += num3;
            }

            return false;
        }

        public void openLockBox()
        {
            var flag = true;
            while (flag)
            {
                flag = false;
                int Type1;
                switch (Main.rand.Next(7))
                {
                    case 1:
                        Type1 = 329;
                        break;
                    case 2:
                        Type1 = 155;
                        break;
                    case 3:
                        Type1 = 156;
                        break;
                    case 4:
                        Type1 = 157;
                        break;
                    case 5:
                        Type1 = 163;
                        break;
                    case 6:
                        Type1 = 113;
                        break;
                    default:
                        Type1 = 164;
                        break;
                }

                var number1 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, Type1,
                    1, false, -1, false, false);
                if (Main.netMode == 1)
                    NetMessage.SendData(21, -1, -1, (NetworkText) null, number1, 1f, 0.0f, 0.0f, 0, 0, 0);
                if (Main.rand.Next(3) == 0)
                {
                    flag = false;
                    var Stack = Main.rand.Next(1, 4);
                    if (Main.rand.Next(2) == 0)
                        Stack += Main.rand.Next(2);
                    if (Main.rand.Next(3) == 0)
                        Stack += Main.rand.Next(3);
                    if (Main.rand.Next(4) == 0)
                        Stack += Main.rand.Next(3);
                    if (Main.rand.Next(5) == 0)
                        Stack += Main.rand.Next(1, 3);
                    var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        73, Stack, false, 0, false, false);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                }

                if (Main.rand.Next(2) == 0)
                {
                    flag = false;
                    var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        72, Main.rand.Next(10, 100), false, 0, false, false);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                }

                if (Main.rand.Next(3) == 0)
                {
                    flag = false;
                    var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        188, Main.rand.Next(2, 6), false, 0, false, false);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                }

                if (Main.rand.Next(3) == 0)
                {
                    flag = false;
                    int Type2;
                    switch (Main.rand.Next(9))
                    {
                        case 0:
                            Type2 = 296;
                            break;
                        case 1:
                            Type2 = 2346;
                            break;
                        case 2:
                            Type2 = 305;
                            break;
                        case 3:
                            Type2 = 2323;
                            break;
                        case 4:
                            Type2 = 292;
                            break;
                        case 5:
                            Type2 = 294;
                            break;
                        case 6:
                            Type2 = 288;
                            break;
                        default:
                            Type2 = Main.netMode != 1 ? 2350 : 2997;
                            break;
                    }

                    var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        Type2, Main.rand.Next(1, 4), false, 0, false, false);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
            }
        }

        public void openHerbBag()
        {
            var num = Main.rand.Next(2, 5);
            if (Main.rand.Next(3) == 0)
                ++num;
            for (var index = 0; index < num; ++index)
            {
                var Type = Main.rand.Next(14);
                if (Type == 0)
                    Type = 313;
                if (Type == 1)
                    Type = 314;
                if (Type == 2)
                    Type = 315;
                if (Type == 3)
                    Type = 317;
                if (Type == 4)
                    Type = 316;
                if (Type == 5)
                    Type = 318;
                if (Type == 6)
                    Type = 2358;
                if (Type == 7)
                    Type = 307;
                if (Type == 8)
                    Type = 308;
                if (Type == 9)
                    Type = 309;
                if (Type == 10)
                    Type = 311;
                if (Type == 11)
                    Type = 310;
                if (Type == 12)
                    Type = 312;
                if (Type == 13)
                    Type = 2357;
                var Stack = Main.rand.Next(2, 5);
                if (Main.rand.Next(3) == 0)
                    Stack += Main.rand.Next(1, 5);
                var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, Type,
                    Stack, false, 0, false, false);
                if (Main.netMode == 1)
                    NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
        }

        public void openGoodieBag()
        {
            if (Main.rand.Next(150) == 0)
            {
                var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1810,
                    1, false, 0, false, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(150) == 0)
            {
                var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1800,
                    1, false, 0, false, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(4) == 0)
            {
                var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1809,
                    Main.rand.Next(10, 41), false, 0, false, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(10) == 0)
            {
                var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                    Main.rand.Next(1846, 1851), 1, false, 0, false, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else
            {
                switch (Main.rand.Next(19))
                {
                    case 0:
                        var number1 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1749, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number1, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number2 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1750, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number3 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1751, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number3, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 1:
                        var number4 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1746, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number4, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number5 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1747, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number5, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number6 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1748, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number6, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 2:
                        var number7 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1752, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number7, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number8 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1753, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number8, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 3:
                        var number9 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1767, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number9, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number10 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1768, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number10, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number11 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1769, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number11, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 4:
                        var number12 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1770, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number12, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number13 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1771, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number13, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 5:
                        var number14 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1772, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number14, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number15 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1773, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number15, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 6:
                        var number16 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1754, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number16, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number17 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1755, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number17, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number18 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1756, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number18, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 7:
                        var number19 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1757, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number19, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number20 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1758, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number20, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number21 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1759, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number21, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 8:
                        var number22 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1760, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number22, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number23 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1761, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number23, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number24 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1762, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number24, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 9:
                        var number25 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1763, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number25, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number26 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1764, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number26, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number27 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1765, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number27, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 10:
                        var number28 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1766, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number28, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number29 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1775, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number29, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number30 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1776, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number30, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 11:
                        var number31 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1777, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number31, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number32 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1778, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number32, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 12:
                        var number33 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1779, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number33, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number34 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1780, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number34, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number35 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1781, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number35, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 13:
                        var number36 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1819, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number36, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number37 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1820, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number37, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 14:
                        var number38 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1821, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number38, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number39 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1822, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number39, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number40 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1823, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number40, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 15:
                        var number41 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1824, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number41, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 16:
                        var number42 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1838, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number42, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number43 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1839, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number43, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number44 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1840, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number44, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 17:
                        var number45 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1841, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number45, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number46 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1842, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number46, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number47 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1843, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number47, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 18:
                        var number48 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1851, 1, false, 0, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number48, 1f, 0.0f, 0.0f, 0, 0, 0);
                        var number49 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                            this.height, 1852, 1, false, 0, false, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number49, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                }
            }
        }

        public void UpdateDyes(int plr)
        {
            this.cHead = 0;
            this.cBody = 0;
            this.cLegs = 0;
            this.cHandOn = 0;
            this.cHandOff = 0;
            this.cBack = 0;
            this.cFront = 0;
            this.cShoe = 0;
            this.cWaist = 0;
            this.cShield = 0;
            this.cNeck = 0;
            this.cFace = 0;
            this.cBalloon = 0;
            this.cWings = 0;
            this.cCarpet = 0;
            this.cGrapple = this.cMount = this.cMinecart = this.cPet = this.cLight = this.cYorai = 0;
            if (this.dye[0] != null)
                this.cHead = (int) this.dye[0].dye;
            if (this.dye[1] != null)
                this.cBody = (int) this.dye[1].dye;
            if (this.dye[2] != null)
                this.cLegs = (int) this.dye[2].dye;
            if (this.wearsRobe)
                this.cLegs = this.cBody;
            if (this.miscDyes[0] != null)
                this.cPet = (int) this.miscDyes[0].dye;
            if (this.miscDyes[1] != null)
                this.cLight = (int) this.miscDyes[1].dye;
            if (this.miscDyes[2] != null)
                this.cMinecart = (int) this.miscDyes[2].dye;
            if (this.miscDyes[3] != null)
                this.cMount = (int) this.miscDyes[3].dye;
            if (this.miscDyes[4] != null)
                this.cGrapple = (int) this.miscDyes[4].dye;
            for (var index1 = 0; index1 < 20; ++index1)
            {
                var index2 = index1 % 10;
                if (this.dye[index2] != null && this.armor[index1].type > 0 && this.armor[index1].stack > 0 &&
                    (index1 / 10 >= 1 || !this.hideVisual[index2] ||
                     (this.armor[index1].wingSlot > (sbyte) 0 || this.armor[index1].type == 934)))
                {
                    if (this.armor[index1].handOnSlot > (sbyte) 0 && this.armor[index1].handOnSlot < (sbyte) 20)
                        this.cHandOn = (int) this.dye[index2].dye;
                    if (this.armor[index1].handOffSlot > (sbyte) 0 && this.armor[index1].handOffSlot < (sbyte) 12)
                        this.cHandOff = (int) this.dye[index2].dye;
                    if (this.armor[index1].backSlot > (sbyte) 0 && this.armor[index1].backSlot < (sbyte) 14)
                        this.cBack = (int) this.dye[index2].dye;
                    if (this.armor[index1].frontSlot > (sbyte) 0 && this.armor[index1].frontSlot < (sbyte) 5)
                        this.cFront = (int) this.dye[index2].dye;
                    if (this.armor[index1].shoeSlot > (sbyte) 0 && this.armor[index1].shoeSlot < (sbyte) 18)
                        this.cShoe = (int) this.dye[index2].dye;
                    if (this.armor[index1].waistSlot > (sbyte) 0 && this.armor[index1].waistSlot < (sbyte) 13)
                        this.cWaist = (int) this.dye[index2].dye;
                    if (this.armor[index1].shieldSlot > (sbyte) 0 && this.armor[index1].shieldSlot < (sbyte) 7)
                        this.cShield = (int) this.dye[index2].dye;
                    if (this.armor[index1].neckSlot > (sbyte) 0 && this.armor[index1].neckSlot < (sbyte) 10)
                        this.cNeck = (int) this.dye[index2].dye;
                    if (this.armor[index1].faceSlot > (sbyte) 0 && this.armor[index1].faceSlot < (sbyte) 9)
                        this.cFace = (int) this.dye[index2].dye;
                    if (this.armor[index1].balloonSlot > (sbyte) 0 && this.armor[index1].balloonSlot < (sbyte) 18)
                        this.cBalloon = (int) this.dye[index2].dye;
                    if (this.armor[index1].wingSlot > (sbyte) 0 && this.armor[index1].wingSlot < (sbyte) 40)
                        this.cWings = (int) this.dye[index2].dye;
                    if (this.armor[index1].type == 934)
                        this.cCarpet = (int) this.dye[index2].dye;
                }
            }

            this.cYorai = this.cPet;
        }

        public int ArmorSetDye()
        {
            switch (Main.rand.Next(3))
            {
                case 0:
                    return this.cHead;
                case 1:
                    return this.cBody;
                case 2:
                    return this.cLegs;
                default:
                    return this.cBody;
            }
        }

        public void UpdateBuffs(int i)
        {
            if (this.soulDrain > 0 && this.whoAmI == Main.myPlayer)
                this.AddBuff(151, 2, true);
            for (var index = 0; index < 1000; ++index)
            {
                if (Main.projectile[index].active && Main.projectile[index].owner == i)
                    ++this.ownedProjectileCounts[Main.projectile[index].type];
            }

            for (var index1 = 0; index1 < 22; ++index1)
            {
                if (this.buffType[index1] > 0 && this.buffTime[index1] > 0)
                {
                    if (this.whoAmI == Main.myPlayer && this.buffType[index1] != 28)
                        --this.buffTime[index1];
                    if (this.buffType[index1] == 1)
                    {
                        this.lavaImmune = true;
                        this.fireWalk = true;
                        this.buffImmune[24] = true;
                    }
                    else if (this.buffType[index1] == 158)
                        this.manaRegenBonus += 2;
                    else if (this.buffType[index1] == 159 && this.inventory[this.selectedItem].melee)
                        this.armorPenetration = 4;
                    else if (this.buffType[index1] == 2)
                        this.lifeRegen += 4;
                    else if (this.buffType[index1] == 3)
                        this.moveSpeed += 0.25f;
                    else if (this.buffType[index1] == 4)
                        this.gills = true;
                    else if (this.buffType[index1] == 5)
                        this.statDefense += 8;
                    else if (this.buffType[index1] == 6)
                        this.manaRegenBuff = true;
                    else if (this.buffType[index1] == 7)
                        this.magicDamage += 0.2f;
                    else if (this.buffType[index1] == 8)
                        this.slowFall = true;
                    else if (this.buffType[index1] == 9)
                        this.findTreasure = true;
                    else if (this.buffType[index1] == 10)
                        this.invis = true;
                    else if (this.buffType[index1] == 11)
                        Lighting.AddLight((int) ((double) this.position.X + (double) (this.width / 2)) / 16,
                            (int) ((double) this.position.Y + (double) (this.height / 2)) / 16, 0.8f, 0.95f, 1f);
                    else if (this.buffType[index1] == 12)
                        this.nightVision = true;
                    else if (this.buffType[index1] == 13)
                        this.enemySpawns = true;
                    else if (this.buffType[index1] == 14)
                    {
                        if ((double) this.thorns < 1.0)
                            this.thorns = 0.3333333f;
                    }
                    else if (this.buffType[index1] == 15)
                        this.waterWalk = true;
                    else if (this.buffType[index1] == 16)
                        this.archery = true;
                    else if (this.buffType[index1] == 17)
                        this.detectCreature = true;
                    else if (this.buffType[index1] == 18)
                        this.gravControl = true;
                    else if (this.buffType[index1] == 30)
                        this.bleed = true;
                    else if (this.buffType[index1] == 31)
                        this.confused = true;
                    else if (this.buffType[index1] == 32)
                        this.slow = true;
                    else if (this.buffType[index1] == 35)
                        this.silence = true;
                    else if (this.buffType[index1] == 160)
                        this.dazed = true;
                    else if (this.buffType[index1] == 46)
                        this.chilled = true;
                    else if (this.buffType[index1] == 47)
                        this.frozen = true;
                    else if (this.buffType[index1] == 156)
                        this.stoned = true;
                    else if (this.buffType[index1] == 69)
                    {
                        this.ichor = true;
                        this.statDefense -= 20;
                    }
                    else if (this.buffType[index1] == 36)
                        this.brokenArmor = true;
                    else if (this.buffType[index1] == 48)
                        this.honey = true;
                    else if (this.buffType[index1] == 59)
                        this.shadowDodge = true;
                    else if (this.buffType[index1] == 93)
                        this.ammoBox = true;
                    else if (this.buffType[index1] == 58)
                        this.palladiumRegen = true;
                    else if (this.buffType[index1] == 88)
                        this.chaosState = true;
                    else if (this.buffType[index1] == 63)
                        ++this.moveSpeed;
                    else if (this.buffType[index1] == 104)
                        this.pickSpeed -= 0.25f;
                    else if (this.buffType[index1] == 105)
                        this.lifeMagnet = true;
                    else if (this.buffType[index1] == 106)
                        this.calmed = true;
                    else if (this.buffType[index1] == 121)
                        this.fishingSkill += 15;
                    else if (this.buffType[index1] == 122)
                        this.sonarPotion = true;
                    else if (this.buffType[index1] == 123)
                        this.cratePotion = true;
                    else if (this.buffType[index1] == 107)
                    {
                        this.tileSpeed += 0.25f;
                        this.wallSpeed += 0.25f;
                        ++this.blockRange;
                    }
                    else if (this.buffType[index1] == 108)
                        this.kbBuff = true;
                    else if (this.buffType[index1] == 109)
                    {
                        this.ignoreWater = true;
                        this.accFlipper = true;
                    }
                    else if (this.buffType[index1] == 110)
                        ++this.maxMinions;
                    else if (this.buffType[index1] == 150)
                        ++this.maxMinions;
                    else if (this.buffType[index1] == 111)
                        this.dangerSense = true;
                    else if (this.buffType[index1] == 112)
                        this.ammoPotion = true;
                    else if (this.buffType[index1] == 113)
                    {
                        this.lifeForce = true;
                        this.statLifeMax2 += this.statLifeMax / 5 / 20 * 20;
                    }
                    else if (this.buffType[index1] == 114)
                        this.endurance += 0.1f;
                    else if (this.buffType[index1] == 115)
                    {
                        this.meleeCrit += 10;
                        this.rangedCrit += 10;
                        this.magicCrit += 10;
                        this.thrownCrit += 10;
                    }
                    else if (this.buffType[index1] == 116)
                    {
                        this.inferno = true;
                        Lighting.AddLight((int) ((double) this.Center.X / 16.0), (int) ((double) this.Center.Y / 16.0),
                            0.65f, 0.4f, 0.1f);
                        var type = 24;
                        var num1 = 200f;
                        var flag = this.infernoCounter % 60 == 0;
                        var num2 = 10;
                        if (this.whoAmI == Main.myPlayer)
                        {
                            for (var index2 = 0; index2 < 200; ++index2)
                            {
                                var npc = Main.npc[index2];
                                if (npc.active && !npc.friendly && (npc.damage > 0 && !npc.dontTakeDamage) &&
                                    (!npc.buffImmune[type] && (double) Vector2.Distance(this.Center, npc.Center) <=
                                     (double) num1))
                                {
                                    if (npc.FindBuffIndex(type) == -1)
                                        npc.AddBuff(type, 120, false);
                                    if (flag)
                                        this.ApplyDamageToNPC(npc, num2, 0.0f, 0, false);
                                }
                            }

                            if (this.hostile)
                            {
                                for (var playerTargetIndex = 0;
                                    playerTargetIndex < (int) byte.MaxValue;
                                    ++playerTargetIndex)
                                {
                                    var player = Main.player[playerTargetIndex];
                                    if (player != this && player.active && (!player.dead && player.hostile) &&
                                        (!player.buffImmune[type] && (player.team != this.team || player.team == 0)) &&
                                        (double) Vector2.Distance(this.Center, player.Center) <= (double) num1)
                                    {
                                        if (player.FindBuffIndex(type) == -1)
                                            player.AddBuff(type, 120, true);
                                        if (flag)
                                        {
                                            player.Hurt(PlayerDeathReason.LegacyEmpty(), num2, 0, true, false, false,
                                                -1);
                                            if (Main.netMode != 0)
                                            {
                                                var reason = PlayerDeathReason.ByPlayer(this.whoAmI);
                                                NetMessage.SendPlayerHurt(playerTargetIndex, reason, num2, 0, false,
                                                    true, 0, -1, -1);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else if (this.buffType[index1] == 117)
                    {
                        this.thrownDamage += 0.1f;
                        this.meleeDamage += 0.1f;
                        this.rangedDamage += 0.1f;
                        this.magicDamage += 0.1f;
                        this.minionDamage += 0.1f;
                    }
                    else if (this.buffType[index1] == 119)
                        this.loveStruck = true;
                    else if (this.buffType[index1] == 120)
                        this.stinky = true;
                    else if (this.buffType[index1] == 124)
                        this.resistCold = true;
                    else if (this.buffType[index1] == 165)
                    {
                        this.lifeRegen += 6;
                        this.statDefense += 8;
                        this.dryadWard = true;
                        if ((double) this.thorns < 1.0)
                            this.thorns += 0.2f;
                    }
                    else if (this.buffType[index1] == 144)
                    {
                        this.electrified = true;
                        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.3f, 0.8f, 1.1f);
                    }
                    else if (this.buffType[index1] == 94)
                    {
                        this.manaSick = true;
                        this.manaSickReduction = Player.manaSickLessDmg *
                                                 ((float) this.buffTime[index1] / (float) Player.manaSickTime);
                    }
                    else if (this.buffType[index1] >= 95 && this.buffType[index1] <= 97)
                    {
                        this.buffTime[index1] = 5;
                        var num = (int) (byte) (1 + this.buffType[index1] - 95);
                        if (this.beetleOrbs > 0 && this.beetleOrbs != num)
                        {
                            if (this.beetleOrbs > num)
                            {
                                this.DelBuff(index1);
                                --index1;
                            }
                            else
                            {
                                for (var b = 0; b < 22; ++b)
                                {
                                    if (this.buffType[b] >= 95 && this.buffType[b] <= 95 + num - 1)
                                    {
                                        this.DelBuff(b);
                                        --b;
                                    }
                                }
                            }
                        }

                        this.beetleOrbs = num;
                        if (!this.beetleDefense)
                        {
                            this.beetleOrbs = 0;
                            this.DelBuff(index1);
                            --index1;
                        }
                        else
                            this.beetleBuff = true;
                    }
                    else if (this.buffType[index1] >= 170 && this.buffType[index1] <= 172)
                    {
                        this.buffTime[index1] = 5;
                        var num = (int) (byte) (1 + this.buffType[index1] - 170);
                        if (this.solarShields > 0 && this.solarShields != num)
                        {
                            if (this.solarShields > num)
                            {
                                this.DelBuff(index1);
                                --index1;
                            }
                            else
                            {
                                for (var b = 0; b < 22; ++b)
                                {
                                    if (this.buffType[b] >= 170 && this.buffType[b] <= 170 + num - 1)
                                    {
                                        this.DelBuff(b);
                                        --b;
                                    }
                                }
                            }
                        }

                        this.solarShields = num;
                        if (!this.setSolar)
                        {
                            this.solarShields = 0;
                            this.DelBuff(index1);
                            --index1;
                        }
                    }
                    else if (this.buffType[index1] >= 98 && this.buffType[index1] <= 100)
                    {
                        var num = (int) (byte) (1 + this.buffType[index1] - 98);
                        if (this.beetleOrbs > 0 && this.beetleOrbs != num)
                        {
                            if (this.beetleOrbs > num)
                            {
                                this.DelBuff(index1);
                                --index1;
                            }
                            else
                            {
                                for (var b = 0; b < 22; ++b)
                                {
                                    if (this.buffType[b] >= 98 && this.buffType[b] <= 98 + num - 1)
                                    {
                                        this.DelBuff(b);
                                        --b;
                                    }
                                }
                            }
                        }

                        this.beetleOrbs = num;
                        this.meleeDamage += 0.1f * (float) this.beetleOrbs;
                        this.meleeSpeed += 0.1f * (float) this.beetleOrbs;
                        if (!this.beetleOffense)
                        {
                            this.beetleOrbs = 0;
                            this.DelBuff(index1);
                            --index1;
                        }
                        else
                            this.beetleBuff = true;
                    }
                    else if (this.buffType[index1] >= 176 && this.buffType[index1] <= 178)
                    {
                        var nebulaLevelMana = this.nebulaLevelMana;
                        var num = (int) (byte) (1 + this.buffType[index1] - 176);
                        if (nebulaLevelMana > 0 && nebulaLevelMana != num)
                        {
                            if (nebulaLevelMana > num)
                            {
                                this.DelBuff(index1);
                                --index1;
                            }
                            else
                            {
                                for (var b = 0; b < 22; ++b)
                                {
                                    if (this.buffType[b] >= 176 && this.buffType[b] <= 178 + num - 1)
                                    {
                                        this.DelBuff(b);
                                        --b;
                                    }
                                }
                            }
                        }

                        this.nebulaLevelMana = num;
                        if (this.buffTime[index1] == 2 && this.nebulaLevelMana > 1)
                        {
                            --this.nebulaLevelMana;
                            --this.buffType[index1];
                            this.buffTime[index1] = 480;
                        }
                    }
                    else if (this.buffType[index1] >= 173 && this.buffType[index1] <= 175)
                    {
                        var nebulaLevelLife = this.nebulaLevelLife;
                        var num = (int) (byte) (1 + this.buffType[index1] - 173);
                        if (nebulaLevelLife > 0 && nebulaLevelLife != num)
                        {
                            if (nebulaLevelLife > num)
                            {
                                this.DelBuff(index1);
                                --index1;
                            }
                            else
                            {
                                for (var b = 0; b < 22; ++b)
                                {
                                    if (this.buffType[b] >= 173 && this.buffType[b] <= 175 + num - 1)
                                    {
                                        this.DelBuff(b);
                                        --b;
                                    }
                                }
                            }
                        }

                        this.nebulaLevelLife = num;
                        if (this.buffTime[index1] == 2 && this.nebulaLevelLife > 1)
                        {
                            --this.nebulaLevelLife;
                            --this.buffType[index1];
                            this.buffTime[index1] = 480;
                        }

                        this.lifeRegen += 10 * this.nebulaLevelLife;
                    }
                    else if (this.buffType[index1] >= 179 && this.buffType[index1] <= 181)
                    {
                        var nebulaLevelDamage = this.nebulaLevelDamage;
                        var num1 = (int) (byte) (1 + this.buffType[index1] - 179);
                        if (nebulaLevelDamage > 0 && nebulaLevelDamage != num1)
                        {
                            if (nebulaLevelDamage > num1)
                            {
                                this.DelBuff(index1);
                                --index1;
                            }
                            else
                            {
                                for (var b = 0; b < 22; ++b)
                                {
                                    if (this.buffType[b] >= 179 && this.buffType[b] <= 181 + num1 - 1)
                                    {
                                        this.DelBuff(b);
                                        --b;
                                    }
                                }
                            }
                        }

                        this.nebulaLevelDamage = num1;
                        if (this.buffTime[index1] == 2 && this.nebulaLevelDamage > 1)
                        {
                            --this.nebulaLevelDamage;
                            --this.buffType[index1];
                            this.buffTime[index1] = 480;
                        }

                        var num2 = 0.15f * (float) this.nebulaLevelDamage;
                        this.meleeDamage += num2;
                        this.rangedDamage += num2;
                        this.magicDamage += num2;
                        this.minionDamage += num2;
                        this.thrownDamage += num2;
                    }
                    else if (this.buffType[index1] == 62)
                    {
                        if ((double) this.statLife <= (double) this.statLifeMax2 * 0.5)
                        {
                            Lighting.AddLight((int) ((double) this.Center.X / 16.0),
                                (int) ((double) this.Center.Y / 16.0), 0.1f, 0.2f, 0.45f);
                            this.iceBarrier = true;
                            this.endurance += 0.25f;
                            ++this.iceBarrierFrameCounter;
                            if (this.iceBarrierFrameCounter > (byte) 2)
                            {
                                this.iceBarrierFrameCounter = (byte) 0;
                                ++this.iceBarrierFrame;
                                if (this.iceBarrierFrame >= (byte) 12)
                                    this.iceBarrierFrame = (byte) 0;
                            }
                        }
                        else
                        {
                            this.DelBuff(index1);
                            --index1;
                        }
                    }
                    else if (this.buffType[index1] == 49)
                    {
                        for (var index2 = 191; index2 <= 194; ++index2)
                        {
                            if (this.ownedProjectileCounts[index2] > 0)
                                this.pygmy = true;
                        }

                        if (!this.pygmy)
                        {
                            this.DelBuff(index1);
                            --index1;
                        }
                        else
                            this.buffTime[index1] = 18000;
                    }
                    else if (this.buffType[index1] == 83)
                    {
                        if (this.ownedProjectileCounts[317] > 0)
                            this.raven = true;
                        if (!this.raven)
                        {
                            this.DelBuff(index1);
                            --index1;
                        }
                        else
                            this.buffTime[index1] = 18000;
                    }
                    else if (this.buffType[index1] == 64)
                    {
                        if (this.ownedProjectileCounts[266] > 0)
                            this.slime = true;
                        if (!this.slime)
                        {
                            this.DelBuff(index1);
                            --index1;
                        }
                        else
                            this.buffTime[index1] = 18000;
                    }
                    else if (this.buffType[index1] == 125)
                    {
                        if (this.ownedProjectileCounts[373] > 0)
                            this.hornetMinion = true;
                        if (!this.hornetMinion)
                        {
                            this.DelBuff(index1);
                            --index1;
                        }
                        else
                            this.buffTime[index1] = 18000;
                    }
                    else if (this.buffType[index1] == 126)
                    {
                        if (this.ownedProjectileCounts[375] > 0)
                            this.impMinion = true;
                        if (!this.impMinion)
                        {
                            this.DelBuff(index1);
                            --index1;
                        }
                        else
                            this.buffTime[index1] = 18000;
                    }
                    else if (this.buffType[index1] == 133)
                    {
                        if (this.ownedProjectileCounts[390] > 0 || this.ownedProjectileCounts[391] > 0 ||
                            this.ownedProjectileCounts[392] > 0)
                            this.spiderMinion = true;
                        if (!this.spiderMinion)
                        {
                            this.DelBuff(index1);
                            --index1;
                        }
                        else
                            this.buffTime[index1] = 18000;
                    }
                    else if (this.buffType[index1] == 134)
                    {
                        if (this.ownedProjectileCounts[387] > 0 || this.ownedProjectileCounts[388] > 0)
                            this.twinsMinion = true;
                        if (!this.twinsMinion)
                        {
                            this.DelBuff(index1);
                            --index1;
                        }
                        else
                            this.buffTime[index1] = 18000;
                    }
                    else if (this.buffType[index1] == 135)
                    {
                        if (this.ownedProjectileCounts[393] > 0 || this.ownedProjectileCounts[394] > 0 ||
                            this.ownedProjectileCounts[395] > 0)
                            this.pirateMinion = true;
                        if (!this.pirateMinion)
                        {
                            this.DelBuff(index1);
                            --index1;
                        }
                        else
                            this.buffTime[index1] = 18000;
                    }
                    else if (this.buffType[index1] == 139)
                    {
                        if (this.ownedProjectileCounts[407] > 0)
                            this.sharknadoMinion = true;
                        if (!this.sharknadoMinion)
                        {
                            this.DelBuff(index1);
                            --index1;
                        }
                        else
                            this.buffTime[index1] = 18000;
                    }
                    else if (this.buffType[index1] == 140)
                    {
                        if (this.ownedProjectileCounts[423] > 0)
                            this.UFOMinion = true;
                        if (!this.UFOMinion)
                        {
                            this.DelBuff(index1);
                            --index1;
                        }
                        else
                            this.buffTime[index1] = 18000;
                    }
                    else if (this.buffType[index1] == 182)
                    {
                        if (this.ownedProjectileCounts[613] > 0)
                            this.stardustMinion = true;
                        if (!this.stardustMinion)
                        {
                            this.DelBuff(index1);
                            --index1;
                        }
                        else
                            this.buffTime[index1] = 18000;
                    }
                    else if (this.buffType[index1] == 187)
                    {
                        if (this.ownedProjectileCounts[623] > 0)
                            this.stardustGuardian = true;
                        if (!this.stardustGuardian)
                        {
                            this.DelBuff(index1);
                            --index1;
                        }
                        else
                            this.buffTime[index1] = 18000;
                    }
                    else if (this.buffType[index1] == 188)
                    {
                        if (this.ownedProjectileCounts[625] > 0)
                            this.stardustDragon = true;
                        if (!this.stardustDragon)
                        {
                            this.DelBuff(index1);
                            --index1;
                        }
                        else
                            this.buffTime[index1] = 18000;
                    }
                    else if (this.buffType[index1] == 161)
                    {
                        if (this.ownedProjectileCounts[533] > 0)
                            this.DeadlySphereMinion = true;
                        if (!this.DeadlySphereMinion)
                        {
                            this.DelBuff(index1);
                            --index1;
                        }
                        else
                            this.buffTime[index1] = 18000;
                    }
                    else if (this.buffType[index1] == 90)
                    {
                        this.mount.SetMount(0, this, false);
                        this.buffTime[index1] = 10;
                    }
                    else if (this.buffType[index1] == 128)
                    {
                        this.mount.SetMount(1, this, false);
                        this.buffTime[index1] = 10;
                    }
                    else if (this.buffType[index1] == 129)
                    {
                        this.mount.SetMount(2, this, false);
                        this.buffTime[index1] = 10;
                    }
                    else if (this.buffType[index1] == 130)
                    {
                        this.mount.SetMount(3, this, false);
                        this.buffTime[index1] = 10;
                    }
                    else if (this.buffType[index1] == 118)
                    {
                        this.mount.SetMount(6, this, true);
                        this.buffTime[index1] = 10;
                    }
                    else if (this.buffType[index1] == 138)
                    {
                        this.mount.SetMount(6, this, false);
                        this.buffTime[index1] = 10;
                    }
                    else if (this.buffType[index1] == 167)
                    {
                        this.mount.SetMount(11, this, true);
                        this.buffTime[index1] = 10;
                    }
                    else if (this.buffType[index1] == 166)
                    {
                        this.mount.SetMount(11, this, false);
                        this.buffTime[index1] = 10;
                    }
                    else if (this.buffType[index1] == 184)
                    {
                        this.mount.SetMount(13, this, true);
                        this.buffTime[index1] = 10;
                    }
                    else if (this.buffType[index1] == 185)
                    {
                        this.mount.SetMount(13, this, false);
                        this.buffTime[index1] = 10;
                    }
                    else if (this.buffType[index1] == 131)
                    {
                        this.ignoreWater = true;
                        this.accFlipper = true;
                        this.mount.SetMount(4, this, false);
                        this.buffTime[index1] = 10;
                    }
                    else if (this.buffType[index1] == 132)
                    {
                        this.mount.SetMount(5, this, false);
                        this.buffTime[index1] = 10;
                    }
                    else if (this.buffType[index1] == 168)
                    {
                        this.ignoreWater = true;
                        this.accFlipper = true;
                        this.mount.SetMount(12, this, false);
                        this.buffTime[index1] = 10;
                    }
                    else if (this.buffType[index1] == 141)
                    {
                        this.mount.SetMount(7, this, false);
                        this.buffTime[index1] = 10;
                    }
                    else if (this.buffType[index1] == 142)
                    {
                        this.mount.SetMount(8, this, false);
                        this.buffTime[index1] = 10;
                    }
                    else if (this.buffType[index1] == 143)
                    {
                        this.mount.SetMount(9, this, false);
                        this.buffTime[index1] = 10;
                    }
                    else if (this.buffType[index1] == 162)
                    {
                        this.mount.SetMount(10, this, false);
                        this.buffTime[index1] = 10;
                    }
                    else if (this.buffType[index1] == 193)
                    {
                        this.mount.SetMount(14, this, false);
                        this.buffTime[index1] = 10;
                    }
                    else if (this.buffType[index1] == 37)
                    {
                        if (Main.wof >= 0 && Main.npc[Main.wof].type == 113)
                        {
                            this.gross = true;
                            this.buffTime[index1] = 10;
                        }
                        else
                        {
                            this.DelBuff(index1);
                            --index1;
                        }
                    }
                    else if (this.buffType[index1] == 38)
                    {
                        this.buffTime[index1] = 10;
                        this.tongued = true;
                    }
                    else if (this.buffType[index1] == 146)
                    {
                        this.moveSpeed += 0.1f;
                        this.moveSpeed *= 1.1f;
                        this.sunflower = true;
                    }
                    else if (this.buffType[index1] == 19)
                    {
                        this.buffTime[index1] = 18000;
                        this.lightOrb = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[18] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 18, 0, 0.0f, this.whoAmI, 0.0f,
                                0.0f);
                    }
                    else if (this.buffType[index1] == 155)
                    {
                        this.buffTime[index1] = 18000;
                        this.crimsonHeart = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[500] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 500, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 191)
                        this.CommonPetBuffHandle(index1, ref this.companionCube, 653);
                    else if (this.buffType[index1] == 202)
                        this.CommonPetBuffHandle(index1, ref this.petFlagDD2Dragon, 701);
                    else if (this.buffType[index1] == 200)
                        this.CommonPetBuffHandle(index1, ref this.petFlagDD2Gato, 703);
                    else if (this.buffType[index1] == 201)
                        this.CommonPetBuffHandle(index1, ref this.petFlagDD2Ghost, 702);
                    else if (this.buffType[index1] == 190)
                    {
                        this.buffTime[index1] = 18000;
                        this.suspiciouslookingTentacle = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[650] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 650, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 27 || this.buffType[index1] == 101 ||
                             this.buffType[index1] == 102)
                    {
                        this.buffTime[index1] = 18000;
                        var flag = true;
                        var Type = 72;
                        if (this.buffType[index1] == 27)
                            this.blueFairy = true;
                        if (this.buffType[index1] == 101)
                        {
                            Type = 86;
                            this.redFairy = true;
                        }

                        if (this.buffType[index1] == 102)
                        {
                            Type = 87;
                            this.greenFairy = true;
                        }

                        if (this.head == 45 && this.body == 26 && this.legs == 25)
                            Type = 72;
                        if (this.ownedProjectileCounts[Type] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, Type, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 40)
                    {
                        this.buffTime[index1] = 18000;
                        this.bunny = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[111] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 111, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 148)
                    {
                        this.rabid = true;
                        if (Main.rand.Next(1200) == 0)
                        {
                            var num1 = Main.rand.Next(6);
                            var num2 = (float) Main.rand.Next(60, 100) * 0.01f;
                            switch (num1)
                            {
                                case 0:
                                    this.AddBuff(22, (int) (60.0 * (double) num2 * 3.0), true);
                                    break;
                                case 1:
                                    this.AddBuff(23, (int) (60.0 * (double) num2 * 0.75), true);
                                    break;
                                case 2:
                                    this.AddBuff(31, (int) (60.0 * (double) num2 * 1.5), true);
                                    break;
                                case 3:
                                    this.AddBuff(32, (int) (60.0 * (double) num2 * 3.5), true);
                                    break;
                                case 4:
                                    this.AddBuff(33, (int) (60.0 * (double) num2 * 5.0), true);
                                    break;
                                case 5:
                                    this.AddBuff(35, (int) (60.0 * (double) num2 * 1.0), true);
                                    break;
                            }
                        }

                        this.meleeDamage += 0.2f;
                        this.magicDamage += 0.2f;
                        this.rangedDamage += 0.2f;
                        this.thrownDamage += 0.2f;
                        this.minionDamage += 0.2f;
                    }
                    else if (this.buffType[index1] == 41)
                    {
                        this.buffTime[index1] = 18000;
                        this.penguin = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[112] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 112, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 152)
                    {
                        this.buffTime[index1] = 18000;
                        this.magicLantern = true;
                        if (this.ownedProjectileCounts[492] == 0 && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 492, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 91)
                    {
                        this.buffTime[index1] = 18000;
                        this.puppy = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[334] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 334, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 92)
                    {
                        this.buffTime[index1] = 18000;
                        this.grinch = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[353] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 353, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 84)
                    {
                        this.buffTime[index1] = 18000;
                        this.blackCat = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[319] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 319, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 61)
                    {
                        this.buffTime[index1] = 18000;
                        this.dino = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[236] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 236, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 154)
                    {
                        this.buffTime[index1] = 18000;
                        this.babyFaceMonster = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[499] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 499, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 65)
                    {
                        this.buffTime[index1] = 18000;
                        this.eyeSpring = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[268] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 268, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 66)
                    {
                        this.buffTime[index1] = 18000;
                        this.snowman = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[269] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 269, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 42)
                    {
                        this.buffTime[index1] = 18000;
                        this.turtle = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[(int) sbyte.MaxValue] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, (int) sbyte.MaxValue, 0, 0.0f,
                                this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 45)
                    {
                        this.buffTime[index1] = 18000;
                        this.eater = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[175] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 175, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 50)
                    {
                        this.buffTime[index1] = 18000;
                        this.skeletron = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[197] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 197, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 51)
                    {
                        this.buffTime[index1] = 18000;
                        this.hornet = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[198] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 198, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 52)
                    {
                        this.buffTime[index1] = 18000;
                        this.tiki = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[199] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 199, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 53)
                    {
                        this.buffTime[index1] = 18000;
                        this.lizard = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[200] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 200, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 54)
                    {
                        this.buffTime[index1] = 18000;
                        this.parrot = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[208] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 208, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 55)
                    {
                        this.buffTime[index1] = 18000;
                        this.truffle = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[209] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 209, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 56)
                    {
                        this.buffTime[index1] = 18000;
                        this.sapling = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[210] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 210, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 85)
                    {
                        this.buffTime[index1] = 18000;
                        this.cSapling = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[324] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 324, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 81)
                    {
                        this.buffTime[index1] = 18000;
                        this.spider = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[313] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 313, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 82)
                    {
                        this.buffTime[index1] = 18000;
                        this.squashling = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[314] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 314, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 57)
                    {
                        this.buffTime[index1] = 18000;
                        this.wisp = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[211] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 211, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 60)
                    {
                        this.buffTime[index1] = 18000;
                        this.crystalLeaf = true;
                        var flag = true;
                        for (var index2 = 0; index2 < 1000; ++index2)
                        {
                            if (Main.projectile[index2].active && Main.projectile[index2].owner == this.whoAmI &&
                                Main.projectile[index2].type == 226)
                            {
                                if (!flag)
                                    Main.projectile[index2].Kill();
                                flag = false;
                            }
                        }

                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 226, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == (int) sbyte.MaxValue)
                    {
                        this.buffTime[index1] = 18000;
                        this.zephyrfish = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[380] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 380, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 136)
                    {
                        this.buffTime[index1] = 18000;
                        this.miniMinotaur = true;
                        var flag = true;
                        if (this.ownedProjectileCounts[398] > 0)
                            flag = false;
                        if (flag && this.whoAmI == Main.myPlayer)
                            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, 398, 0, 0.0f, this.whoAmI,
                                0.0f, 0.0f);
                    }
                    else if (this.buffType[index1] == 70)
                        this.venom = true;
                    else if (this.buffType[index1] == 20)
                        this.poisoned = true;
                    else if (this.buffType[index1] == 21)
                        this.potionDelay = this.buffTime[index1];
                    else if (this.buffType[index1] == 22)
                        this.blind = true;
                    else if (this.buffType[index1] == 80)
                        this.blackout = true;
                    else if (this.buffType[index1] == 23)
                        this.noItems = true;
                    else if (this.buffType[index1] == 24)
                        this.onFire = true;
                    else if (this.buffType[index1] == 103)
                        this.dripping = true;
                    else if (this.buffType[index1] == 137)
                        this.drippingSlime = true;
                    else if (this.buffType[index1] == 67)
                        this.burned = true;
                    else if (this.buffType[index1] == 68)
                        this.suffocating = true;
                    else if (this.buffType[index1] == 39)
                        this.onFire2 = true;
                    else if (this.buffType[index1] == 44)
                        this.onFrostBurn = true;
                    else if (this.buffType[index1] == 163)
                    {
                        this.headcovered = true;
                        this.bleed = true;
                    }
                    else if (this.buffType[index1] == 164)
                        this.vortexDebuff = true;
                    else if (this.buffType[index1] == 194)
                        this.windPushed = true;
                    else if (this.buffType[index1] == 195)
                        this.witheredArmor = true;
                    else if (this.buffType[index1] == 205)
                        this.ballistaPanic = true;
                    else if (this.buffType[index1] == 196)
                        this.witheredWeapon = true;
                    else if (this.buffType[index1] == 197)
                        this.slowOgreSpit = true;
                    else if (this.buffType[index1] == 198)
                        this.parryDamageBuff = true;
                    else if (this.buffType[index1] == 145)
                        this.moonLeech = true;
                    else if (this.buffType[index1] == 149)
                    {
                        this.webbed = true;
                        if ((double) this.velocity.Y != 0.0)
                            this.velocity = new Vector2(0.0f, 1E-06f);
                        else
                            this.velocity = Vector2.Zero;
                        Player.jumpHeight = 0;
                        this.gravity = 0.0f;
                        this.moveSpeed = 0.0f;
                        this.dash = 0;
                        this.noKnockback = true;
                        this.grappling[0] = -1;
                        this.grapCount = 0;
                        for (var index2 = 0; index2 < 1000; ++index2)
                        {
                            if (Main.projectile[index2].active && Main.projectile[index2].owner == this.whoAmI &&
                                Main.projectile[index2].aiStyle == 7)
                                Main.projectile[index2].Kill();
                        }
                    }
                    else if (this.buffType[index1] == 43)
                        this.defendedByPaladin = true;
                    else if (this.buffType[index1] == 29)
                    {
                        this.magicCrit += 2;
                        this.magicDamage += 0.05f;
                        this.statManaMax2 += 20;
                        this.manaCost -= 0.02f;
                    }
                    else if (this.buffType[index1] == 28)
                    {
                        if (!Main.dayTime && this.wolfAcc && !this.merman)
                        {
                            ++this.lifeRegen;
                            this.wereWolf = true;
                            this.meleeCrit += 2;
                            this.meleeDamage += 0.051f;
                            this.meleeSpeed += 0.051f;
                            this.statDefense += 3;
                            this.moveSpeed += 0.05f;
                        }
                        else
                        {
                            this.DelBuff(index1);
                            --index1;
                        }
                    }
                    else if (this.buffType[index1] == 33)
                    {
                        this.meleeDamage -= 0.051f;
                        this.meleeSpeed -= 0.051f;
                        this.statDefense -= 4;
                        this.moveSpeed -= 0.1f;
                    }
                    else if (this.buffType[index1] == 25)
                    {
                        this.statDefense -= 4;
                        this.meleeCrit += 2;
                        this.meleeDamage += 0.1f;
                        this.meleeSpeed += 0.1f;
                    }
                    else if (this.buffType[index1] == 26)
                    {
                        this.wellFed = true;
                        this.statDefense += 2;
                        this.meleeCrit += 2;
                        this.meleeDamage += 0.05f;
                        this.meleeSpeed += 0.05f;
                        this.magicCrit += 2;
                        this.magicDamage += 0.05f;
                        this.rangedCrit += 2;
                        this.rangedDamage += 0.05f;
                        this.thrownCrit += 2;
                        this.thrownDamage += 0.05f;
                        this.minionDamage += 0.05f;
                        this.minionKB += 0.5f;
                        this.moveSpeed += 0.2f;
                    }
                    else if (this.buffType[index1] == 71)
                        this.meleeEnchant = (byte) 1;
                    else if (this.buffType[index1] == 73)
                        this.meleeEnchant = (byte) 2;
                    else if (this.buffType[index1] == 74)
                        this.meleeEnchant = (byte) 3;
                    else if (this.buffType[index1] == 75)
                        this.meleeEnchant = (byte) 4;
                    else if (this.buffType[index1] == 76)
                        this.meleeEnchant = (byte) 5;
                    else if (this.buffType[index1] == 77)
                        this.meleeEnchant = (byte) 6;
                    else if (this.buffType[index1] == 78)
                        this.meleeEnchant = (byte) 7;
                    else if (this.buffType[index1] == 79)
                        this.meleeEnchant = (byte) 8;
                }
            }
        }

        private void CommonPetBuffHandle(int buffIndex, ref bool petBool, int petProjID)
        {
            this.buffTime[buffIndex] = 18000;
            petBool = true;
            var flag = true;
            if (this.ownedProjectileCounts[petProjID] > 0)
                flag = false;
            if (!flag || this.whoAmI != Main.myPlayer)
                return;
            Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                this.position.Y + (float) (this.height / 2), 0.0f, 0.0f, petProjID, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
        }

        public void Counterweight(Vector2 hitPos, int dmg, float kb)
        {
            if (!this.yoyoGlove && this.counterWeight <= 0)
                return;
            var index1 = -1;
            var num1 = 0;
            var num2 = 0;
            for (var index2 = 0; index2 < 1000; ++index2)
            {
                if (Main.projectile[index2].active && Main.projectile[index2].owner == this.whoAmI)
                {
                    if (Main.projectile[index2].counterweight)
                        ++num2;
                    else if (Main.projectile[index2].aiStyle == 99)
                    {
                        ++num1;
                        index1 = index2;
                    }
                }
            }

            if (this.yoyoGlove && num1 < 2)
            {
                if (index1 < 0)
                    return;
                var vector2_1 = hitPos - this.Center;
                vector2_1.Normalize();
                var vector2_2 = vector2_1 * 16f;
                Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_2.X, vector2_2.Y,
                    Main.projectile[index1].type, Main.projectile[index1].damage, Main.projectile[index1].knockBack,
                    this.whoAmI, 1f, 0.0f);
            }
            else
            {
                if (num2 >= num1)
                    return;
                var vector2_1 = hitPos - this.Center;
                vector2_1.Normalize();
                var vector2_2 = vector2_1 * 16f;
                var KnockBack = (float) (((double) kb + 6.0) / 2.0);
                if (num2 > 0)
                    Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_2.X, vector2_2.Y, this.counterWeight,
                        (int) ((double) dmg * 0.8), KnockBack, this.whoAmI, 1f, 0.0f);
                else
                    Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_2.X, vector2_2.Y, this.counterWeight,
                        (int) ((double) dmg * 0.8), KnockBack, this.whoAmI, 0.0f, 0.0f);
            }
        }

        public int beeType()
        {
            if (this.strongBees && Main.rand.Next(2) == 0)
            {
                this.makeStrongBee = true;
                return 566;
            }

            this.makeStrongBee = false;
            return 181;
        }

        public int beeDamage(int dmg)
        {
            if (this.makeStrongBee)
                return dmg + Main.rand.Next(1, 4);
            return dmg + Main.rand.Next(2);
        }

        public float beeKB(float KB)
        {
            if (this.makeStrongBee)
                return (float) (0.5 + (double) KB * 1.10000002384186);
            return KB;
        }

        public void Yoraiz0rEye()
        {
            var index = 0 + this.bodyFrame.Y / 56;
            if (index >= Main.OffsetsPlayerHeadgear.Length)
                index = 0;
            var spinningpoint1 =
                new Vector2((float) (3 * this.direction - (this.direction == 1 ? 1 : 0)), -11.5f * this.gravDir) +
                Vector2.UnitY * this.gfxOffY + this.Size / 2f + Main.OffsetsPlayerHeadgear[index];
            var spinningpoint2 =
                new Vector2((float) (3 * this.shadowDirection[1] - (this.direction == 1 ? 1 : 0)),
                    -11.5f * this.gravDir) + this.Size / 2f + Main.OffsetsPlayerHeadgear[index];
            var vector2_1 = Vector2.Zero;
            if (this.mount.Active && this.mount.Cart)
            {
                var num = Math.Sign(this.velocity.X);
                if (num == 0)
                    num = this.direction;
                vector2_1 = new Vector2(MathHelper.Lerp(0.0f, -8f, this.fullRotation / 0.7853982f),
                        MathHelper.Lerp(0.0f, 2f, Math.Abs(this.fullRotation / 0.7853982f)))
                    .RotatedBy((double) this.fullRotation, new Vector2());
                if (num == Math.Sign(this.fullRotation))
                    vector2_1 *= MathHelper.Lerp(1f, 0.6f, Math.Abs(this.fullRotation / 0.7853982f));
            }

            if ((double) this.fullRotation != 0.0)
            {
                spinningpoint1 = spinningpoint1.RotatedBy((double) this.fullRotation, this.fullRotationOrigin);
                spinningpoint2 = spinningpoint2.RotatedBy((double) this.fullRotation, this.fullRotationOrigin);
            }

            var num1 = 0.0f;
            if (this.mount.Active)
                num1 = (float) this.mount.PlayerOffset;
            var vector2_2 = this.position + spinningpoint1 + vector2_1;
            var vector2_3 = this.oldPosition + spinningpoint2 + vector2_1;
            vector2_3.Y -= num1 / 2f;
            vector2_2.Y -= num1 / 2f;
            var num2 = 1f;
            switch (this.yoraiz0rEye % 10)
            {
                case 1:
                    return;
                case 2:
                    num2 = 0.5f;
                    break;
                case 3:
                    num2 = 0.625f;
                    break;
                case 4:
                    num2 = 0.75f;
                    break;
                case 5:
                    num2 = 0.875f;
                    break;
                case 6:
                    num2 = 1f;
                    break;
                case 7:
                    num2 = 1.1f;
                    break;
            }

            if (this.yoraiz0rEye < 7)
            {
                DelegateMethods.v3_1 =
                    Main.hslToRgb(Main.rgbToHsl(this.eyeColor).X, 1f, 0.5f).ToVector3() * 0.5f * num2;
                if (this.velocity != Vector2.Zero)
                    Utils.PlotTileLine(this.Center, this.Center + this.velocity * 2f, 4f,
                        new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
                else
                    Utils.PlotTileLine(this.Left, this.Right, 4f,
                        new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
            }

            var num3 = (int) Vector2.Distance(vector2_2, vector2_3) / 3 + 1;
            if ((double) Vector2.Distance(vector2_2, vector2_3) % 3.0 != 0.0)
                ++num3;
            for (var num4 = 1f; (double) num4 <= (double) num3; ++num4)
            {
                var dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 182, 0.0f, 0.0f, 0, new Color(), 1f)];
                dust.position = Vector2.Lerp(vector2_3, vector2_2, num4 / (float) num3);
                dust.noGravity = true;
                dust.velocity = Vector2.Zero;
                dust.customData = (object) this;
                dust.scale = num2;
                dust.shader = GameShaders.Armor.GetSecondaryShader(this.cYorai, this);
            }
        }

        public void UpdateEquips(int i)
        {
            for (var index = 0; index < 58; ++index)
            {
                var type = this.inventory[index].type;
                if ((type == 15 || type == 707) && this.accWatch < 1)
                    this.accWatch = 1;
                if ((type == 16 || type == 708) && this.accWatch < 2)
                    this.accWatch = 2;
                if ((type == 17 || type == 709) && this.accWatch < 3)
                    this.accWatch = 3;
                if (type == 393)
                    this.accCompass = 1;
                if (type == 18)
                    this.accDepthMeter = 1;
                if (type == 395 || type == 3123 || type == 3124)
                {
                    this.accWatch = 3;
                    this.accDepthMeter = 1;
                    this.accCompass = 1;
                }

                if (type == 3120 || type == 3036 || (type == 3123 || type == 3124))
                    this.accFishFinder = true;
                if (type == 3037 || type == 3036 || (type == 3123 || type == 3124))
                    this.accWeatherRadio = true;
                if (type == 3096 || type == 3036 || (type == 3123 || type == 3124))
                    this.accCalendar = true;
                if (type == 3084 || type == 3122 || (type == 3123 || type == 3124))
                    this.accThirdEye = true;
                if (type == 3095 || type == 3122 || (type == 3123 || type == 3124))
                    this.accJarOfSouls = true;
                if (type == 3118 || type == 3122 || (type == 3123 || type == 3124))
                    this.accCritterGuide = true;
                if (type == 3099 || type == 3121 || (type == 3123 || type == 3124))
                    this.accStopwatch = true;
                if (type == 3102 || type == 3121 || (type == 3123 || type == 3124))
                    this.accOreFinder = true;
                if (type == 3119 || type == 3121 || (type == 3123 || type == 3124))
                    this.accDreamCatcher = true;
                if (type == 3619 || type == 3611)
                    this.InfoAccMechShowWires = true;
                if (type == 486 || type == 3611)
                    this.rulerLine = true;
                if (type == 2799)
                    this.rulerGrid = true;
                if (type == 2216 || type == 3061)
                    this.autoPaint = true;
                if (type == 3624)
                    this.autoActuator = true;
            }

            for (var index1 = 0; index1 < 8 + this.extraAccessorySlots; ++index1)
            {
                if (!this.armor[index1].expertOnly || Main.expertMode)
                {
                    var type = this.armor[index1].type;
                    if ((type == 15 || type == 707) && this.accWatch < 1)
                        this.accWatch = 1;
                    if ((type == 16 || type == 708) && this.accWatch < 2)
                        this.accWatch = 2;
                    if ((type == 17 || type == 709) && this.accWatch < 3)
                        this.accWatch = 3;
                    if (type == 393)
                        this.accCompass = 1;
                    if (type == 18)
                        this.accDepthMeter = 1;
                    if (type == 395 || type == 3123 || type == 3124)
                    {
                        this.accWatch = 3;
                        this.accDepthMeter = 1;
                        this.accCompass = 1;
                    }

                    if (type == 3120 || type == 3036 || (type == 3123 || type == 3124))
                        this.accFishFinder = true;
                    if (type == 3037 || type == 3036 || (type == 3123 || type == 3124))
                        this.accWeatherRadio = true;
                    if (type == 3096 || type == 3036 || (type == 3123 || type == 3124))
                        this.accCalendar = true;
                    if (type == 3084 || type == 3122 || (type == 3123 || type == 3124))
                        this.accThirdEye = true;
                    if (type == 3095 || type == 3122 || (type == 3123 || type == 3124))
                        this.accJarOfSouls = true;
                    if (type == 3118 || type == 3122 || (type == 3123 || type == 3124))
                        this.accCritterGuide = true;
                    if (type == 3099 || type == 3121 || (type == 3123 || type == 3124))
                        this.accStopwatch = true;
                    if (type == 3102 || type == 3121 || (type == 3123 || type == 3124))
                        this.accOreFinder = true;
                    if (type == 3119 || type == 3121 || (type == 3123 || type == 3124))
                        this.accDreamCatcher = true;
                    if (type == 3619)
                        this.InfoAccMechShowWires = true;
                    if (this.armor[index1].type == 3017 && this.whoAmI == Main.myPlayer &&
                        ((double) this.velocity.Y == 0.0 && this.grappling[0] == -1))
                    {
                        var index2 = (int) this.Center.X / 16;
                        var tileY = (int) ((double) this.position.Y + (double) this.height - 1.0) / 16;
                        if (Main.tile[index2, tileY] == null)
                            Main.tile[index2, tileY] = new Tile();
                        if (!Main.tile[index2, tileY].active() && Main.tile[index2, tileY].liquid == (byte) 0 &&
                            (Main.tile[index2, tileY + 1] != null && WorldGen.SolidTile(index2, tileY + 1)))
                        {
                            Main.tile[index2, tileY].frameY = (short) 0;
                            Main.tile[index2, tileY].slope((byte) 0);
                            Main.tile[index2, tileY].halfBrick(false);
                            if (Main.tile[index2, tileY + 1].type == (ushort) 2)
                            {
                                if (Main.rand.Next(2) == 0)
                                {
                                    Main.tile[index2, tileY].active(true);
                                    Main.tile[index2, tileY].type = (ushort) 3;
                                    Main.tile[index2, tileY].frameX = (short) (18 * Main.rand.Next(6, 11));
                                    while (Main.tile[index2, tileY].frameX == (short) 144)
                                        Main.tile[index2, tileY].frameX = (short) (18 * Main.rand.Next(6, 11));
                                }
                                else
                                {
                                    Main.tile[index2, tileY].active(true);
                                    Main.tile[index2, tileY].type = (ushort) 73;
                                    Main.tile[index2, tileY].frameX = (short) (18 * Main.rand.Next(6, 21));
                                    while (Main.tile[index2, tileY].frameX == (short) 144)
                                        Main.tile[index2, tileY].frameX = (short) (18 * Main.rand.Next(6, 21));
                                }

                                if (Main.netMode == 1)
                                    NetMessage.SendTileSquare(-1, index2, tileY, 1, TileChangeType.None);
                            }
                            else if (Main.tile[index2, tileY + 1].type == (ushort) 109)
                            {
                                if (Main.rand.Next(2) == 0)
                                {
                                    Main.tile[index2, tileY].active(true);
                                    Main.tile[index2, tileY].type = (ushort) 110;
                                    Main.tile[index2, tileY].frameX = (short) (18 * Main.rand.Next(4, 7));
                                    while (Main.tile[index2, tileY].frameX == (short) 90)
                                        Main.tile[index2, tileY].frameX = (short) (18 * Main.rand.Next(4, 7));
                                }
                                else
                                {
                                    Main.tile[index2, tileY].active(true);
                                    Main.tile[index2, tileY].type = (ushort) 113;
                                    Main.tile[index2, tileY].frameX = (short) (18 * Main.rand.Next(2, 8));
                                    while (Main.tile[index2, tileY].frameX == (short) 90)
                                        Main.tile[index2, tileY].frameX = (short) (18 * Main.rand.Next(2, 8));
                                }

                                if (Main.netMode == 1)
                                    NetMessage.SendTileSquare(-1, index2, tileY, 1, TileChangeType.None);
                            }
                            else if (Main.tile[index2, tileY + 1].type == (ushort) 60)
                            {
                                Main.tile[index2, tileY].active(true);
                                Main.tile[index2, tileY].type = (ushort) 74;
                                Main.tile[index2, tileY].frameX = (short) (18 * Main.rand.Next(9, 17));
                                if (Main.netMode == 1)
                                    NetMessage.SendTileSquare(-1, index2, tileY, 1, TileChangeType.None);
                            }
                        }
                    }

                    this.statDefense += this.armor[index1].defense;
                    this.lifeRegen += this.armor[index1].lifeRegen;
                    if (this.armor[index1].shieldSlot > (sbyte) 0)
                        this.hasRaisableShield = true;
                    switch (this.armor[index1].type)
                    {
                        case 3797:
                            ++this.maxTurrets;
                            this.manaCost -= 0.1f;
                            break;
                        case 3798:
                            this.magicDamage += 0.1f;
                            this.minionDamage += 0.2f;
                            break;
                        case 3799:
                            this.minionDamage += 0.1f;
                            this.magicCrit += 20;
                            break;
                        case 3800:
                            ++this.maxTurrets;
                            this.lifeRegen += 8;
                            break;
                        case 3801:
                            this.meleeDamage += 0.15f;
                            this.minionDamage += 0.15f;
                            break;
                        case 3802:
                            this.minionDamage += 0.15f;
                            this.meleeCrit += 20;
                            this.moveSpeed += 0.2f;
                            break;
                        case 3803:
                            ++this.maxTurrets;
                            this.rangedCrit += 10;
                            break;
                        case 3804:
                            this.rangedDamage += 0.2f;
                            this.minionDamage += 0.2f;
                            break;
                        case 3805:
                            this.minionDamage += 0.1f;
                            this.moveSpeed += 0.2f;
                            break;
                        case 3806:
                            ++this.maxTurrets;
                            this.meleeSpeed += 0.2f;
                            break;
                        case 3807:
                            this.meleeDamage += 0.2f;
                            this.minionDamage += 0.2f;
                            break;
                        case 3808:
                            this.minionDamage += 0.1f;
                            this.meleeCrit += 10;
                            this.moveSpeed += 0.2f;
                            break;
                        case 3871:
                            this.maxTurrets += 2;
                            this.minionDamage += 0.1f;
                            break;
                        case 3872:
                            this.minionDamage += 0.3f;
                            this.lifeRegen += 16;
                            break;
                        case 3873:
                            this.minionDamage += 0.2f;
                            this.meleeCrit += 20;
                            this.moveSpeed += 0.3f;
                            break;
                        case 3874:
                            this.maxTurrets += 2;
                            this.magicDamage += 0.1f;
                            this.minionDamage += 0.1f;
                            break;
                        case 3875:
                            this.minionDamage += 0.3f;
                            this.magicDamage += 0.15f;
                            break;
                        case 3876:
                            this.minionDamage += 0.2f;
                            this.magicCrit += 25;
                            break;
                        case 3877:
                            this.maxTurrets += 2;
                            this.minionDamage += 0.1f;
                            this.rangedCrit += 10;
                            break;
                        case 3878:
                            this.minionDamage += 0.25f;
                            this.rangedDamage += 0.25f;
                            break;
                        case 3879:
                            this.minionDamage += 0.25f;
                            this.moveSpeed += 0.2f;
                            break;
                        case 3880:
                            this.maxTurrets += 2;
                            this.minionDamage += 0.2f;
                            this.meleeDamage += 0.2f;
                            break;
                        case 3881:
                            this.meleeSpeed += 0.2f;
                            this.minionDamage += 0.2f;
                            break;
                        case 3882:
                            this.minionDamage += 0.2f;
                            this.meleeCrit += 20;
                            this.moveSpeed += 0.2f;
                            break;
                    }

                    if (this.armor[index1].type == 268)
                        this.accDivingHelm = true;
                    if (this.armor[index1].type == 238)
                        this.magicDamage += 0.15f;
                    if (this.armor[index1].type == 3770)
                        this.slowFall = true;
                    if (this.armor[index1].type == 3776)
                    {
                        this.magicDamage += 0.15f;
                        this.minionDamage += 0.15f;
                    }

                    if (this.armor[index1].type == 3777)
                        this.statManaMax2 += 80;
                    if (this.armor[index1].type == 3778)
                        this.maxMinions += 2;
                    if (this.armor[index1].type == 3212)
                        this.armorPenetration += 5;
                    if (this.armor[index1].type == 2277)
                    {
                        this.magicDamage += 0.05f;
                        this.meleeDamage += 0.05f;
                        this.rangedDamage += 0.05f;
                        this.thrownDamage += 0.05f;
                        this.magicCrit += 5;
                        this.rangedCrit += 5;
                        this.meleeCrit += 5;
                        this.thrownCrit += 5;
                        this.meleeSpeed += 0.1f;
                        this.moveSpeed += 0.1f;
                    }

                    if (this.armor[index1].type == 2279)
                    {
                        this.magicDamage += 0.06f;
                        this.magicCrit += 6;
                        this.manaCost -= 0.1f;
                    }

                    if (this.armor[index1].type == 3109)
                        this.nightVision = true;
                    if (this.armor[index1].type == 256)
                        this.thrownVelocity += 0.15f;
                    if (this.armor[index1].type == 257)
                        this.thrownDamage += 0.15f;
                    if (this.armor[index1].type == 258)
                        this.thrownCrit += 10;
                    if (this.armor[index1].type == 3374)
                        this.thrownVelocity += 0.2f;
                    if (this.armor[index1].type == 3375)
                        this.thrownDamage += 0.2f;
                    if (this.armor[index1].type == 3376)
                        this.thrownCrit += 15;
                    if (this.armor[index1].type == 2275)
                    {
                        this.magicDamage += 0.07f;
                        this.magicCrit += 7;
                    }

                    if (this.armor[index1].type == 123 || this.armor[index1].type == 124 ||
                        this.armor[index1].type == 125)
                        this.magicDamage += 0.07f;
                    if (this.armor[index1].type == 151 || this.armor[index1].type == 152 ||
                        (this.armor[index1].type == 153 || this.armor[index1].type == 959))
                        this.rangedDamage += 0.05f;
                    if (this.armor[index1].type == 111 || this.armor[index1].type == 228 ||
                        (this.armor[index1].type == 229 || this.armor[index1].type == 230) ||
                        (this.armor[index1].type == 960 || this.armor[index1].type == 961 ||
                         this.armor[index1].type == 962))
                        this.statManaMax2 += 20;
                    if (this.armor[index1].type == 228 || this.armor[index1].type == 960)
                        this.statManaMax2 += 20;
                    if (this.armor[index1].type == 228 || this.armor[index1].type == 229 ||
                        (this.armor[index1].type == 230 || this.armor[index1].type == 960) ||
                        (this.armor[index1].type == 961 || this.armor[index1].type == 962))
                        this.magicCrit += 4;
                    if (this.armor[index1].type == 100 || this.armor[index1].type == 101 ||
                        this.armor[index1].type == 102)
                        this.meleeSpeed += 0.07f;
                    if (this.armor[index1].type == 956 || this.armor[index1].type == 957 ||
                        this.armor[index1].type == 958)
                        this.meleeSpeed += 0.07f;
                    if (this.armor[index1].type == 792 || this.armor[index1].type == 793 ||
                        this.armor[index1].type == 794)
                    {
                        this.meleeDamage += 0.02f;
                        this.rangedDamage += 0.02f;
                        this.magicDamage += 0.02f;
                        this.thrownDamage += 0.02f;
                    }

                    if (this.armor[index1].type == 371)
                    {
                        this.magicCrit += 9;
                        this.statManaMax2 += 40;
                    }

                    if (this.armor[index1].type == 372)
                    {
                        this.moveSpeed += 0.07f;
                        this.meleeSpeed += 0.12f;
                    }

                    if (this.armor[index1].type == 373)
                    {
                        this.rangedDamage += 0.1f;
                        this.rangedCrit += 6;
                    }

                    if (this.armor[index1].type == 374)
                    {
                        this.magicCrit += 3;
                        this.meleeCrit += 3;
                        this.rangedCrit += 3;
                    }

                    if (this.armor[index1].type == 375)
                        this.moveSpeed += 0.1f;
                    if (this.armor[index1].type == 376)
                    {
                        this.magicDamage += 0.15f;
                        this.statManaMax2 += 60;
                    }

                    if (this.armor[index1].type == 377)
                    {
                        this.meleeCrit += 5;
                        this.meleeDamage += 0.1f;
                    }

                    if (this.armor[index1].type == 378)
                    {
                        this.rangedDamage += 0.12f;
                        this.rangedCrit += 7;
                    }

                    if (this.armor[index1].type == 379)
                    {
                        this.rangedDamage += 0.05f;
                        this.meleeDamage += 0.05f;
                        this.magicDamage += 0.05f;
                    }

                    if (this.armor[index1].type == 380)
                    {
                        this.magicCrit += 3;
                        this.meleeCrit += 3;
                        this.rangedCrit += 3;
                    }

                    if (this.armor[index1].type >= 2367 && this.armor[index1].type <= 2369)
                        this.fishingSkill += 5;
                    if (this.armor[index1].type == 400)
                    {
                        this.magicDamage += 0.11f;
                        this.magicCrit += 11;
                        this.statManaMax2 += 80;
                    }

                    if (this.armor[index1].type == 401)
                    {
                        this.meleeCrit += 7;
                        this.meleeDamage += 0.14f;
                    }

                    if (this.armor[index1].type == 402)
                    {
                        this.rangedDamage += 0.14f;
                        this.rangedCrit += 8;
                    }

                    if (this.armor[index1].type == 403)
                    {
                        this.rangedDamage += 0.06f;
                        this.meleeDamage += 0.06f;
                        this.magicDamage += 0.06f;
                    }

                    if (this.armor[index1].type == 404)
                    {
                        this.magicCrit += 4;
                        this.meleeCrit += 4;
                        this.rangedCrit += 4;
                        this.moveSpeed += 0.05f;
                    }

                    if (this.armor[index1].type == 1205)
                    {
                        this.meleeDamage += 0.08f;
                        this.meleeSpeed += 0.12f;
                    }

                    if (this.armor[index1].type == 1206)
                    {
                        this.rangedDamage += 0.09f;
                        this.rangedCrit += 9;
                    }

                    if (this.armor[index1].type == 1207)
                    {
                        this.magicDamage += 0.07f;
                        this.magicCrit += 7;
                        this.statManaMax2 += 60;
                    }

                    if (this.armor[index1].type == 1208)
                    {
                        this.meleeDamage += 0.03f;
                        this.rangedDamage += 0.03f;
                        this.magicDamage += 0.03f;
                        this.magicCrit += 2;
                        this.meleeCrit += 2;
                        this.rangedCrit += 2;
                    }

                    if (this.armor[index1].type == 1209)
                    {
                        this.meleeDamage += 0.02f;
                        this.rangedDamage += 0.02f;
                        this.magicDamage += 0.02f;
                        ++this.magicCrit;
                        ++this.meleeCrit;
                        ++this.rangedCrit;
                    }

                    if (this.armor[index1].type == 1210)
                    {
                        this.meleeDamage += 0.07f;
                        this.meleeSpeed += 0.07f;
                        this.moveSpeed += 0.07f;
                    }

                    if (this.armor[index1].type == 1211)
                    {
                        this.rangedCrit += 15;
                        this.moveSpeed += 0.08f;
                    }

                    if (this.armor[index1].type == 1212)
                    {
                        this.magicCrit += 18;
                        this.statManaMax2 += 80;
                    }

                    if (this.armor[index1].type == 1213)
                    {
                        this.magicCrit += 6;
                        this.meleeCrit += 6;
                        this.rangedCrit += 6;
                    }

                    if (this.armor[index1].type == 1214)
                        this.moveSpeed += 0.11f;
                    if (this.armor[index1].type == 1215)
                    {
                        this.meleeDamage += 0.08f;
                        this.meleeCrit += 8;
                        this.meleeSpeed += 0.08f;
                    }

                    if (this.armor[index1].type == 1216)
                    {
                        this.rangedDamage += 0.16f;
                        this.rangedCrit += 7;
                    }

                    if (this.armor[index1].type == 1217)
                    {
                        this.magicDamage += 0.16f;
                        this.magicCrit += 7;
                        this.statManaMax2 += 100;
                    }

                    if (this.armor[index1].type == 1218)
                    {
                        this.meleeDamage += 0.04f;
                        this.rangedDamage += 0.04f;
                        this.magicDamage += 0.04f;
                        this.magicCrit += 3;
                        this.meleeCrit += 3;
                        this.rangedCrit += 3;
                    }

                    if (this.armor[index1].type == 1219)
                    {
                        this.meleeDamage += 0.03f;
                        this.rangedDamage += 0.03f;
                        this.magicDamage += 0.03f;
                        this.magicCrit += 3;
                        this.meleeCrit += 3;
                        this.rangedCrit += 3;
                        this.moveSpeed += 0.06f;
                    }

                    if (this.armor[index1].type == 558)
                    {
                        this.magicDamage += 0.12f;
                        this.magicCrit += 12;
                        this.statManaMax2 += 100;
                    }

                    if (this.armor[index1].type == 559)
                    {
                        this.meleeCrit += 10;
                        this.meleeDamage += 0.1f;
                        this.meleeSpeed += 0.1f;
                    }

                    if (this.armor[index1].type == 553)
                    {
                        this.rangedDamage += 0.15f;
                        this.rangedCrit += 8;
                    }

                    if (this.armor[index1].type == 551)
                    {
                        this.magicCrit += 7;
                        this.meleeCrit += 7;
                        this.rangedCrit += 7;
                    }

                    if (this.armor[index1].type == 552)
                    {
                        this.rangedDamage += 0.07f;
                        this.meleeDamage += 0.07f;
                        this.magicDamage += 0.07f;
                        this.moveSpeed += 0.08f;
                    }

                    if (this.armor[index1].type == 1001)
                    {
                        this.meleeDamage += 0.16f;
                        this.meleeCrit += 6;
                    }

                    if (this.armor[index1].type == 1002)
                    {
                        this.rangedDamage += 0.16f;
                        this.ammoCost80 = true;
                    }

                    if (this.armor[index1].type == 1003)
                    {
                        this.statManaMax2 += 80;
                        this.manaCost -= 0.17f;
                        this.magicDamage += 0.16f;
                    }

                    if (this.armor[index1].type == 1004)
                    {
                        this.meleeDamage += 0.05f;
                        this.magicDamage += 0.05f;
                        this.rangedDamage += 0.05f;
                        this.magicCrit += 7;
                        this.meleeCrit += 7;
                        this.rangedCrit += 7;
                    }

                    if (this.armor[index1].type == 1005)
                    {
                        this.magicCrit += 8;
                        this.meleeCrit += 8;
                        this.rangedCrit += 8;
                        this.moveSpeed += 0.05f;
                    }

                    if (this.armor[index1].type == 2189)
                    {
                        this.statManaMax2 += 60;
                        this.manaCost -= 0.13f;
                        this.magicDamage += 0.05f;
                        this.magicCrit += 5;
                    }

                    if (this.armor[index1].type == 1503)
                        this.magicDamage -= 0.4f;
                    if (this.armor[index1].type == 1504)
                    {
                        this.magicDamage += 0.07f;
                        this.magicCrit += 7;
                    }

                    if (this.armor[index1].type == 1505)
                    {
                        this.magicDamage += 0.08f;
                        this.moveSpeed += 0.08f;
                    }

                    if (this.armor[index1].type == 1546)
                    {
                        this.rangedCrit += 5;
                        this.arrowDamage += 0.15f;
                    }

                    if (this.armor[index1].type == 1547)
                    {
                        this.rangedCrit += 5;
                        this.bulletDamage += 0.15f;
                    }

                    if (this.armor[index1].type == 1548)
                    {
                        this.rangedCrit += 5;
                        this.rocketDamage += 0.15f;
                    }

                    if (this.armor[index1].type == 1549)
                    {
                        this.rangedCrit += 13;
                        this.rangedDamage += 0.13f;
                        this.ammoCost80 = true;
                    }

                    if (this.armor[index1].type == 1550)
                    {
                        this.rangedCrit += 7;
                        this.moveSpeed += 0.12f;
                    }

                    if (this.armor[index1].type == 1282)
                    {
                        this.statManaMax2 += 20;
                        this.manaCost -= 0.05f;
                    }

                    if (this.armor[index1].type == 1283)
                    {
                        this.statManaMax2 += 40;
                        this.manaCost -= 0.07f;
                    }

                    if (this.armor[index1].type == 1284)
                    {
                        this.statManaMax2 += 40;
                        this.manaCost -= 0.09f;
                    }

                    if (this.armor[index1].type == 1285)
                    {
                        this.statManaMax2 += 60;
                        this.manaCost -= 0.11f;
                    }

                    if (this.armor[index1].type == 1286)
                    {
                        this.statManaMax2 += 60;
                        this.manaCost -= 0.13f;
                    }

                    if (this.armor[index1].type == 1287)
                    {
                        this.statManaMax2 += 80;
                        this.manaCost -= 0.15f;
                    }

                    if (this.armor[index1].type == 1316 || this.armor[index1].type == 1317 ||
                        this.armor[index1].type == 1318)
                        this.aggro += 250;
                    if (this.armor[index1].type == 1316)
                        this.meleeDamage += 0.06f;
                    if (this.armor[index1].type == 1317)
                    {
                        this.meleeDamage += 0.08f;
                        this.meleeCrit += 8;
                    }

                    if (this.armor[index1].type == 1318)
                        this.meleeCrit += 4;
                    if (this.armor[index1].type == 2199 || this.armor[index1].type == 2202)
                        this.aggro += 250;
                    if (this.armor[index1].type == 2201)
                        this.aggro += 400;
                    if (this.armor[index1].type == 2199)
                        this.meleeDamage += 0.06f;
                    if (this.armor[index1].type == 2200)
                    {
                        this.meleeDamage += 0.08f;
                        this.meleeCrit += 8;
                        this.meleeSpeed += 0.06f;
                        this.moveSpeed += 0.06f;
                    }

                    if (this.armor[index1].type == 2201)
                    {
                        this.meleeDamage += 0.05f;
                        this.meleeCrit += 5;
                    }

                    if (this.armor[index1].type == 2202)
                    {
                        this.meleeSpeed += 0.06f;
                        this.moveSpeed += 0.06f;
                    }

                    if (this.armor[index1].type == 684)
                    {
                        this.rangedDamage += 0.16f;
                        this.meleeDamage += 0.16f;
                    }

                    if (this.armor[index1].type == 685)
                    {
                        this.meleeCrit += 11;
                        this.rangedCrit += 11;
                    }

                    if (this.armor[index1].type == 686)
                    {
                        this.moveSpeed += 0.08f;
                        this.meleeSpeed += 0.07f;
                    }

                    if (this.armor[index1].type == 2361)
                    {
                        ++this.maxMinions;
                        this.minionDamage += 0.04f;
                    }

                    if (this.armor[index1].type == 2362)
                    {
                        ++this.maxMinions;
                        this.minionDamage += 0.04f;
                    }

                    if (this.armor[index1].type == 2363)
                        this.minionDamage += 0.05f;
                    if (this.armor[index1].type >= 1158 && this.armor[index1].type <= 1161)
                        ++this.maxMinions;
                    if (this.armor[index1].type >= 1159 && this.armor[index1].type <= 1161)
                        this.minionDamage += 0.1f;
                    if (this.armor[index1].type >= 2370 && this.armor[index1].type <= 2371)
                    {
                        this.minionDamage += 0.05f;
                        ++this.maxMinions;
                    }

                    if (this.armor[index1].type == 2372)
                    {
                        this.minionDamage += 0.06f;
                        ++this.maxMinions;
                    }

                    if (this.armor[index1].type == 3381 || this.armor[index1].type == 3382 ||
                        this.armor[index1].type == 3383)
                    {
                        if (this.armor[index1].type != 3381)
                            ++this.maxMinions;
                        ++this.maxMinions;
                        this.minionDamage += 0.22f;
                    }

                    if (this.armor[index1].type == 2763)
                    {
                        this.aggro += 300;
                        this.meleeCrit += 17;
                    }

                    if (this.armor[index1].type == 2764)
                    {
                        this.aggro += 300;
                        this.meleeDamage += 0.22f;
                    }

                    if (this.armor[index1].type == 2765)
                    {
                        this.aggro += 300;
                        this.meleeSpeed += 0.15f;
                        this.moveSpeed += 0.15f;
                    }

                    if (this.armor[index1].type == 2757)
                    {
                        this.rangedCrit += 7;
                        this.rangedDamage += 0.16f;
                    }

                    if (this.armor[index1].type == 2758)
                    {
                        this.ammoCost75 = true;
                        this.rangedCrit += 12;
                        this.rangedDamage += 0.12f;
                    }

                    if (this.armor[index1].type == 2759)
                    {
                        this.rangedCrit += 8;
                        this.rangedDamage += 0.08f;
                        this.moveSpeed += 0.1f;
                    }

                    if (this.armor[index1].type == 2760)
                    {
                        this.statManaMax2 += 60;
                        this.manaCost -= 0.15f;
                        this.magicCrit += 7;
                        this.magicDamage += 0.07f;
                    }

                    if (this.armor[index1].type == 2761)
                    {
                        this.magicDamage += 0.09f;
                        this.magicCrit += 9;
                    }

                    if (this.armor[index1].type == 2762)
                    {
                        this.moveSpeed += 0.1f;
                        this.magicDamage += 0.1f;
                    }

                    if (this.armor[index1].type >= 1832 && this.armor[index1].type <= 1834)
                        ++this.maxMinions;
                    if (this.armor[index1].type >= 1832 && this.armor[index1].type <= 1834)
                        this.minionDamage += 0.11f;
                    if (this.armor[index1].prefix == (byte) 62)
                        ++this.statDefense;
                    if (this.armor[index1].prefix == (byte) 63)
                        this.statDefense += 2;
                    if (this.armor[index1].prefix == (byte) 64)
                        this.statDefense += 3;
                    if (this.armor[index1].prefix == (byte) 65)
                        this.statDefense += 4;
                    if (this.armor[index1].prefix == (byte) 66)
                        this.statManaMax2 += 20;
                    if (this.armor[index1].prefix == (byte) 67)
                    {
                        this.meleeCrit += 2;
                        this.rangedCrit += 2;
                        this.magicCrit += 2;
                        this.thrownCrit += 2;
                    }

                    if (this.armor[index1].prefix == (byte) 68)
                    {
                        this.meleeCrit += 4;
                        this.rangedCrit += 4;
                        this.magicCrit += 4;
                        this.thrownCrit += 4;
                    }

                    if (this.armor[index1].prefix == (byte) 69)
                    {
                        this.meleeDamage += 0.01f;
                        this.rangedDamage += 0.01f;
                        this.magicDamage += 0.01f;
                        this.minionDamage += 0.01f;
                        this.thrownDamage += 0.01f;
                    }

                    if (this.armor[index1].prefix == (byte) 70)
                    {
                        this.meleeDamage += 0.02f;
                        this.rangedDamage += 0.02f;
                        this.magicDamage += 0.02f;
                        this.minionDamage += 0.02f;
                        this.thrownDamage += 0.02f;
                    }

                    if (this.armor[index1].prefix == (byte) 71)
                    {
                        this.meleeDamage += 0.03f;
                        this.rangedDamage += 0.03f;
                        this.magicDamage += 0.03f;
                        this.minionDamage += 0.03f;
                        this.thrownDamage += 0.03f;
                    }

                    if (this.armor[index1].prefix == (byte) 72)
                    {
                        this.meleeDamage += 0.04f;
                        this.rangedDamage += 0.04f;
                        this.magicDamage += 0.04f;
                        this.minionDamage += 0.04f;
                        this.thrownDamage += 0.04f;
                    }

                    if (this.armor[index1].prefix == (byte) 73)
                        this.moveSpeed += 0.01f;
                    if (this.armor[index1].prefix == (byte) 74)
                        this.moveSpeed += 0.02f;
                    if (this.armor[index1].prefix == (byte) 75)
                        this.moveSpeed += 0.03f;
                    if (this.armor[index1].prefix == (byte) 76)
                        this.moveSpeed += 0.04f;
                    if (this.armor[index1].prefix == (byte) 77)
                        this.meleeSpeed += 0.01f;
                    if (this.armor[index1].prefix == (byte) 78)
                        this.meleeSpeed += 0.02f;
                    if (this.armor[index1].prefix == (byte) 79)
                        this.meleeSpeed += 0.03f;
                    if (this.armor[index1].prefix == (byte) 80)
                        this.meleeSpeed += 0.04f;
                }
            }

            var flag1 = false;
            var flag2 = false;
            var flag3 = false;
            for (var index = 3; index < 8 + this.extraAccessorySlots; ++index)
            {
                if (!this.armor[index].expertOnly || Main.expertMode)
                {
                    if (this.armor[index].type == 3810 || this.armor[index].type == 3809 ||
                        (this.armor[index].type == 3812 || this.armor[index].type == 3811))
                        this.dd2Accessory = true;
                    if (this.armor[index].type == 3015)
                    {
                        this.aggro -= 400;
                        this.meleeCrit += 5;
                        this.magicCrit += 5;
                        this.rangedCrit += 5;
                        this.thrownCrit += 5;
                        this.meleeDamage += 0.05f;
                        this.magicDamage += 0.05f;
                        this.rangedDamage += 0.05f;
                        this.thrownDamage += 0.05f;
                        this.minionDamage += 0.05f;
                    }

                    if (this.armor[index].type == 3016)
                        this.aggro += 400;
                    if (this.armor[index].type == 2373)
                        this.accFishingLine = true;
                    if (this.armor[index].type == 2374)
                        this.fishingSkill += 10;
                    if (this.armor[index].type == 2375)
                        this.accTackleBox = true;
                    if (this.armor[index].type == 3721)
                    {
                        this.accFishingLine = true;
                        this.accTackleBox = true;
                        this.fishingSkill += 10;
                    }

                    if (this.armor[index].type == 3090)
                    {
                        this.npcTypeNoAggro[1] = true;
                        this.npcTypeNoAggro[16] = true;
                        this.npcTypeNoAggro[59] = true;
                        this.npcTypeNoAggro[71] = true;
                        this.npcTypeNoAggro[81] = true;
                        this.npcTypeNoAggro[138] = true;
                        this.npcTypeNoAggro[121] = true;
                        this.npcTypeNoAggro[122] = true;
                        this.npcTypeNoAggro[141] = true;
                        this.npcTypeNoAggro[147] = true;
                        this.npcTypeNoAggro[183] = true;
                        this.npcTypeNoAggro[184] = true;
                        this.npcTypeNoAggro[204] = true;
                        this.npcTypeNoAggro[225] = true;
                        this.npcTypeNoAggro[244] = true;
                        this.npcTypeNoAggro[302] = true;
                        this.npcTypeNoAggro[333] = true;
                        this.npcTypeNoAggro[335] = true;
                        this.npcTypeNoAggro[334] = true;
                        this.npcTypeNoAggro[336] = true;
                        this.npcTypeNoAggro[537] = true;
                    }

                    if (this.armor[index].stringColor > 0)
                        this.yoyoString = true;
                    if (this.armor[index].type == 3366)
                    {
                        this.counterWeight = 556 + Main.rand.Next(6);
                        this.yoyoGlove = true;
                        this.yoyoString = true;
                    }

                    if (this.armor[index].type >= 3309 && this.armor[index].type <= 3314)
                        this.counterWeight = 556 + this.armor[index].type - 3309;
                    if (this.armor[index].type == 3334)
                        this.yoyoGlove = true;
                    if (this.armor[index].type == 3337)
                        this.shinyStone = true;
                    if (this.armor[index].type == 3336)
                    {
                        this.SporeSac();
                        this.sporeSac = true;
                    }

                    if (this.armor[index].type == 2423)
                    {
                        this.autoJump = true;
                        this.jumpSpeedBoost += 2.4f;
                        this.extraFall += 15;
                    }

                    if (this.armor[index].type == 857)
                        this.doubleJumpSandstorm = true;
                    if (this.armor[index].type == 983)
                    {
                        this.doubleJumpSandstorm = true;
                        this.jumpBoost = true;
                    }

                    if (this.armor[index].type == 987)
                        this.doubleJumpBlizzard = true;
                    if (this.armor[index].type == 1163)
                    {
                        this.doubleJumpBlizzard = true;
                        this.jumpBoost = true;
                    }

                    if (this.armor[index].type == 1724)
                        this.doubleJumpFart = true;
                    if (this.armor[index].type == 1863)
                    {
                        this.doubleJumpFart = true;
                        this.jumpBoost = true;
                    }

                    if (this.armor[index].type == 1164)
                    {
                        this.doubleJumpCloud = true;
                        this.doubleJumpSandstorm = true;
                        this.doubleJumpBlizzard = true;
                        this.jumpBoost = true;
                    }

                    if (this.armor[index].type == 1250)
                    {
                        this.jumpBoost = true;
                        this.doubleJumpCloud = true;
                        this.noFallDmg = true;
                    }

                    if (this.armor[index].type == 1252)
                    {
                        this.doubleJumpSandstorm = true;
                        this.jumpBoost = true;
                        this.noFallDmg = true;
                    }

                    if (this.armor[index].type == 1251)
                    {
                        this.doubleJumpBlizzard = true;
                        this.jumpBoost = true;
                        this.noFallDmg = true;
                    }

                    if (this.armor[index].type == 3250)
                    {
                        this.doubleJumpFart = true;
                        this.jumpBoost = true;
                        this.noFallDmg = true;
                    }

                    if (this.armor[index].type == 3252)
                    {
                        this.doubleJumpSail = true;
                        this.jumpBoost = true;
                        this.noFallDmg = true;
                    }

                    if (this.armor[index].type == 3251)
                    {
                        this.jumpBoost = true;
                        this.bee = true;
                        this.noFallDmg = true;
                    }

                    if (this.armor[index].type == 1249)
                    {
                        this.jumpBoost = true;
                        this.bee = true;
                    }

                    if (this.armor[index].type == 3241)
                    {
                        this.jumpBoost = true;
                        this.doubleJumpSail = true;
                    }

                    if (this.armor[index].type == 1253 && (double) this.statLife <= (double) this.statLifeMax2 * 0.5)
                        this.AddBuff(62, 5, true);
                    if (this.armor[index].type == 1290)
                        this.panic = true;
                    if ((this.armor[index].type == 1300 || this.armor[index].type == 1858) &&
                        (this.inventory[this.selectedItem].useAmmo == AmmoID.Bullet ||
                         this.inventory[this.selectedItem].useAmmo == AmmoID.CandyCorn ||
                         (this.inventory[this.selectedItem].useAmmo == AmmoID.Stake ||
                          this.inventory[this.selectedItem].useAmmo == 23)))
                        this.scope = true;
                    if (this.armor[index].type == 1858)
                    {
                        this.rangedCrit += 10;
                        this.rangedDamage += 0.1f;
                    }

                    if (this.armor[index].type == 1303 && this.wet)
                        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.9f, 0.2f, 0.6f);
                    if (this.armor[index].type == 1301)
                    {
                        this.meleeCrit += 8;
                        this.rangedCrit += 8;
                        this.magicCrit += 8;
                        this.thrownCrit += 8;
                        this.meleeDamage += 0.1f;
                        this.rangedDamage += 0.1f;
                        this.magicDamage += 0.1f;
                        this.minionDamage += 0.1f;
                        this.thrownDamage += 0.1f;
                    }

                    if (this.armor[index].type == 982)
                    {
                        this.statManaMax2 += 20;
                        ++this.manaRegenDelayBonus;
                        this.manaRegenBonus += 25;
                    }

                    if (this.armor[index].type == 1595)
                    {
                        this.statManaMax2 += 20;
                        this.magicCuffs = true;
                    }

                    if (this.armor[index].type == 2219)
                        this.manaMagnet = true;
                    if (this.armor[index].type == 2220)
                    {
                        this.manaMagnet = true;
                        this.magicDamage += 0.15f;
                    }

                    if (this.armor[index].type == 2221)
                    {
                        this.manaMagnet = true;
                        this.magicCuffs = true;
                    }

                    if (this.whoAmI == Main.myPlayer && this.armor[index].type == 1923)
                    {
                        ++Player.tileRangeX;
                        ++Player.tileRangeY;
                    }

                    if (this.armor[index].type == 1247)
                    {
                        this.starCloak = true;
                        this.bee = true;
                    }

                    if (this.armor[index].type == 1248)
                    {
                        this.meleeCrit += 10;
                        this.rangedCrit += 10;
                        this.magicCrit += 10;
                        this.thrownCrit += 10;
                    }

                    if (this.armor[index].type == 854)
                        this.discount = true;
                    if (this.armor[index].type == 855)
                        this.coins = true;
                    if (this.armor[index].type == 3033)
                        this.goldRing = true;
                    if (this.armor[index].type == 3034)
                    {
                        this.goldRing = true;
                        this.coins = true;
                    }

                    if (this.armor[index].type == 3035)
                    {
                        this.goldRing = true;
                        this.coins = true;
                        this.discount = true;
                    }

                    if (this.armor[index].type == 53)
                        this.doubleJumpCloud = true;
                    if (this.armor[index].type == 3201)
                        this.doubleJumpSail = true;
                    if (this.armor[index].type == 54)
                        this.accRunSpeed = 6f;
                    if (this.armor[index].type == 3068)
                        this.cordage = true;
                    if (this.armor[index].type == 1579)
                    {
                        this.accRunSpeed = 6f;
                        this.coldDash = true;
                    }

                    if (this.armor[index].type == 3200)
                    {
                        this.accRunSpeed = 6f;
                        this.sailDash = true;
                    }

                    if (this.armor[index].type == 128)
                        this.rocketBoots = 1;
                    if (this.armor[index].type == 156)
                        this.noKnockback = true;
                    if (this.armor[index].type == 158)
                        this.noFallDmg = true;
                    if (this.armor[index].type == 934)
                        this.carpet = true;
                    if (this.armor[index].type == 953)
                        ++this.spikedBoots;
                    if (this.armor[index].type == 975)
                        ++this.spikedBoots;
                    if (this.armor[index].type == 976)
                        this.spikedBoots += 2;
                    if (this.armor[index].type == 977)
                        this.dash = 1;
                    if (this.armor[index].type == 3097)
                        this.dash = 2;
                    if (this.armor[index].type == 963)
                        this.blackBelt = true;
                    if (this.armor[index].type == 984)
                    {
                        this.blackBelt = true;
                        this.dash = 1;
                        this.spikedBoots = 2;
                    }

                    if (this.armor[index].type == 1131)
                        this.gravControl2 = true;
                    if (this.armor[index].type == 1132)
                        this.bee = true;
                    if (this.armor[index].type == 1578)
                    {
                        this.bee = true;
                        this.panic = true;
                    }

                    if (this.armor[index].type == 3224)
                        this.endurance += 0.17f;
                    if (this.armor[index].type == 3223)
                        this.brainOfConfusion = true;
                    if (this.armor[index].type == 950)
                        this.iceSkate = true;
                    if (this.armor[index].type == 159)
                        this.jumpBoost = true;
                    if (this.armor[index].type == 3225)
                        this.jumpBoost = true;
                    if (this.armor[index].type == 187)
                        this.accFlipper = true;
                    if (this.armor[index].type == 211)
                        this.meleeSpeed += 0.12f;
                    if (this.armor[index].type == 223)
                        this.manaCost -= 0.06f;
                    if (this.armor[index].type == 285)
                        this.moveSpeed += 0.05f;
                    if (this.armor[index].type == 212)
                        this.moveSpeed += 0.1f;
                    if (this.armor[index].type == 267)
                        this.killGuide = true;
                    if (this.armor[index].type == 1307)
                        this.killClothier = true;
                    if (this.armor[index].type == 193)
                        this.fireWalk = true;
                    if (this.armor[index].type == 861)
                    {
                        this.accMerman = true;
                        this.wolfAcc = true;
                        if (this.hideVisual[index])
                        {
                            this.hideMerman = true;
                            this.hideWolf = true;
                        }
                    }

                    if (this.armor[index].type == 862)
                    {
                        this.starCloak = true;
                        this.longInvince = true;
                    }

                    if (this.armor[index].type == 860)
                        this.pStone = true;
                    if (this.armor[index].type == 863)
                        this.waterWalk2 = true;
                    if (this.armor[index].type == 907)
                    {
                        this.waterWalk2 = true;
                        this.fireWalk = true;
                    }

                    if (this.armor[index].type == 908)
                    {
                        this.waterWalk = true;
                        this.fireWalk = true;
                        this.lavaMax += 420;
                    }

                    if (this.armor[index].type == 906)
                        this.lavaMax += 420;
                    if (this.armor[index].type == 485)
                    {
                        this.wolfAcc = true;
                        if (this.hideVisual[index])
                            this.hideWolf = true;
                    }

                    if (this.armor[index].type == 486)
                        this.rulerLine = true;
                    if (this.armor[index].type == 2799)
                        this.rulerGrid = true;
                    if (this.armor[index].type == 394)
                    {
                        this.accFlipper = true;
                        this.accDivingHelm = true;
                    }

                    if (this.armor[index].type == 396)
                    {
                        this.noFallDmg = true;
                        this.fireWalk = true;
                    }

                    if (this.armor[index].type == 397)
                    {
                        this.noKnockback = true;
                        this.fireWalk = true;
                    }

                    if (this.armor[index].type == 399)
                    {
                        this.jumpBoost = true;
                        this.doubleJumpCloud = true;
                    }

                    if (this.armor[index].type == 405)
                    {
                        this.accRunSpeed = 6f;
                        this.rocketBoots = 2;
                    }

                    if (this.armor[index].type == 1860)
                    {
                        this.accFlipper = true;
                        this.accDivingHelm = true;
                        if (this.wet)
                            Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.9f, 0.2f, 0.6f);
                    }

                    if (this.armor[index].type == 1861)
                    {
                        this.arcticDivingGear = true;
                        this.accFlipper = true;
                        this.accDivingHelm = true;
                        this.iceSkate = true;
                        if (this.wet)
                            Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.2f, 0.8f, 0.9f);
                    }

                    if (this.armor[index].type == 2214)
                        flag2 = true;
                    if (this.armor[index].type == 2215)
                        flag3 = true;
                    if (this.armor[index].type == 2216)
                        this.autoPaint = true;
                    if (this.armor[index].type == 2217)
                        flag1 = true;
                    if (this.armor[index].type == 3061)
                    {
                        flag1 = true;
                        flag2 = true;
                        this.autoPaint = true;
                        flag3 = true;
                    }

                    if (this.armor[index].type == 3624)
                        this.autoActuator = true;
                    if (this.armor[index].type == 897)
                    {
                        this.kbGlove = true;
                        this.meleeSpeed += 0.12f;
                    }

                    if (this.armor[index].type == 1343)
                    {
                        this.kbGlove = true;
                        this.meleeSpeed += 0.1f;
                        this.meleeDamage += 0.1f;
                        this.magmaStone = true;
                    }

                    if (this.armor[index].type == 1167)
                    {
                        this.minionKB += 2f;
                        this.minionDamage += 0.15f;
                    }

                    if (this.armor[index].type == 1864)
                    {
                        this.minionKB += 2f;
                        this.minionDamage += 0.15f;
                        ++this.maxMinions;
                    }

                    if (this.armor[index].type == 1845)
                    {
                        this.minionDamage += 0.1f;
                        ++this.maxMinions;
                    }

                    if (this.armor[index].type == 1321)
                    {
                        this.magicQuiver = true;
                        this.arrowDamage += 0.1f;
                    }

                    if (this.armor[index].type == 1322)
                        this.magmaStone = true;
                    if (this.armor[index].type == 1323)
                        this.lavaRose = true;
                    if (this.armor[index].type == 3333)
                        this.strongBees = true;
                    if (this.armor[index].type == 938)
                    {
                        this.noKnockback = true;
                        if ((double) this.statLife > (double) this.statLifeMax2 * 0.25)
                        {
                            this.hasPaladinShield = true;
                            if (i != Main.myPlayer && this.miscCounter % 10 == 0)
                            {
                                var player = Main.myPlayer;
                                if (Main.player[player].team == this.team && this.team != 0)
                                {
                                    var num1 = this.position.X - Main.player[player].position.X;
                                    var num2 = this.position.Y - Main.player[player].position.Y;
                                    if (Math.Sqrt((double) num1 * (double) num1 + (double) num2 * (double) num2) <
                                        800.0)
                                        Main.player[player].AddBuff(43, 20, true);
                                }
                            }
                        }
                    }

                    if (this.armor[index].type == 936)
                    {
                        this.kbGlove = true;
                        this.meleeSpeed += 0.12f;
                        this.meleeDamage += 0.12f;
                    }

                    if (this.armor[index].type == 898)
                    {
                        this.accRunSpeed = 6.75f;
                        this.rocketBoots = 2;
                        this.moveSpeed += 0.08f;
                    }

                    if (this.armor[index].type == 1862)
                    {
                        this.accRunSpeed = 6.75f;
                        this.rocketBoots = 3;
                        this.moveSpeed += 0.08f;
                        this.iceSkate = true;
                    }

                    if (this.armor[index].type == 3110)
                    {
                        this.accMerman = true;
                        this.wolfAcc = true;
                        if (this.hideVisual[index])
                        {
                            this.hideMerman = true;
                            this.hideWolf = true;
                        }
                    }

                    if (this.armor[index].type == 1865 || this.armor[index].type == 3110)
                    {
                        this.lifeRegen += 2;
                        this.statDefense += 4;
                        this.meleeSpeed += 0.1f;
                        this.meleeDamage += 0.1f;
                        this.meleeCrit += 2;
                        this.rangedDamage += 0.1f;
                        this.rangedCrit += 2;
                        this.magicDamage += 0.1f;
                        this.magicCrit += 2;
                        this.pickSpeed -= 0.15f;
                        this.minionDamage += 0.1f;
                        this.minionKB += 0.5f;
                        this.thrownDamage += 0.1f;
                        this.thrownCrit += 2;
                    }

                    if (this.armor[index].type == 899 && Main.dayTime)
                    {
                        this.lifeRegen += 2;
                        this.statDefense += 4;
                        this.meleeSpeed += 0.1f;
                        this.meleeDamage += 0.1f;
                        this.meleeCrit += 2;
                        this.rangedDamage += 0.1f;
                        this.rangedCrit += 2;
                        this.magicDamage += 0.1f;
                        this.magicCrit += 2;
                        this.pickSpeed -= 0.15f;
                        this.minionDamage += 0.1f;
                        this.minionKB += 0.5f;
                        this.thrownDamage += 0.1f;
                        this.thrownCrit += 2;
                    }

                    if (this.armor[index].type == 900 && (!Main.dayTime || Main.eclipse))
                    {
                        this.lifeRegen += 2;
                        this.statDefense += 4;
                        this.meleeSpeed += 0.1f;
                        this.meleeDamage += 0.1f;
                        this.meleeCrit += 2;
                        this.rangedDamage += 0.1f;
                        this.rangedCrit += 2;
                        this.magicDamage += 0.1f;
                        this.magicCrit += 2;
                        this.pickSpeed -= 0.15f;
                        this.minionDamage += 0.1f;
                        this.minionKB += 0.5f;
                        this.thrownDamage += 0.1f;
                        this.thrownCrit += 2;
                    }

                    if (this.armor[index].type == 407)
                        this.blockRange = 1;
                    if (this.armor[index].type == 489)
                        this.magicDamage += 0.15f;
                    if (this.armor[index].type == 490)
                        this.meleeDamage += 0.15f;
                    if (this.armor[index].type == 491)
                        this.rangedDamage += 0.15f;
                    if (this.armor[index].type == 2998)
                        this.minionDamage += 0.15f;
                    if (this.armor[index].type == 935)
                    {
                        this.magicDamage += 0.12f;
                        this.meleeDamage += 0.12f;
                        this.rangedDamage += 0.12f;
                        this.minionDamage += 0.12f;
                        this.thrownDamage += 0.12f;
                    }

                    if (this.armor[index].type == 492)
                        this.wingTimeMax = 100;
                    if (this.armor[index].type == 493)
                        this.wingTimeMax = 100;
                    if (this.armor[index].type == 748)
                        this.wingTimeMax = 115;
                    if (this.armor[index].type == 749)
                        this.wingTimeMax = 130;
                    if (this.armor[index].type == 761)
                        this.wingTimeMax = 130;
                    if (this.armor[index].type == 785)
                        this.wingTimeMax = 140;
                    if (this.armor[index].type == 786)
                        this.wingTimeMax = 140;
                    if (this.armor[index].type == 821)
                        this.wingTimeMax = 160;
                    if (this.armor[index].type == 822)
                        this.wingTimeMax = 160;
                    if (this.armor[index].type == 823)
                        this.wingTimeMax = 160;
                    if (this.armor[index].type == 2280)
                        this.wingTimeMax = 160;
                    if (this.armor[index].type == 2494)
                        this.wingTimeMax = 100;
                    if (this.armor[index].type == 2609)
                    {
                        this.wingTimeMax = 180;
                        this.ignoreWater = true;
                    }

                    if (this.armor[index].type == 948)
                        this.wingTimeMax = 180;
                    if (this.armor[index].type == 1162)
                        this.wingTimeMax = 160;
                    if (this.armor[index].type == 1165)
                        this.wingTimeMax = 140;
                    if (this.armor[index].type == 1515)
                        this.wingTimeMax = 130;
                    if (this.armor[index].type == 665)
                        this.wingTimeMax = 150;
                    if (this.armor[index].type == 1583)
                        this.wingTimeMax = 150;
                    if (this.armor[index].type == 1584)
                        this.wingTimeMax = 150;
                    if (this.armor[index].type == 1585)
                        this.wingTimeMax = 150;
                    if (this.armor[index].type == 1586)
                        this.wingTimeMax = 150;
                    if (this.armor[index].type == 3228)
                        this.wingTimeMax = 150;
                    if (this.armor[index].type == 3580)
                        this.wingTimeMax = 150;
                    if (this.armor[index].type == 3582)
                        this.wingTimeMax = 150;
                    if (this.armor[index].type == 3588)
                        this.wingTimeMax = 150;
                    if (this.armor[index].type == 3592)
                        this.wingTimeMax = 150;
                    if (this.armor[index].type == 3924)
                        this.wingTimeMax = 150;
                    if (this.armor[index].type == 3928)
                        this.wingTimeMax = 150;
                    if (this.armor[index].type == 1797)
                        this.wingTimeMax = 180;
                    if (this.armor[index].type == 1830)
                        this.wingTimeMax = 180;
                    if (this.armor[index].type == 1866)
                        this.wingTimeMax = 170;
                    if (this.armor[index].type == 1871)
                        this.wingTimeMax = 170;
                    if (this.armor[index].type == 2770)
                        this.wingTimeMax = 160;
                    if (this.armor[index].type == 3468)
                        this.wingTimeMax = 180;
                    if (this.armor[index].type == 3469)
                        this.wingTimeMax = 160;
                    if (this.armor[index].type == 3470)
                        this.wingTimeMax = 160;
                    if (this.armor[index].type == 3471)
                        this.wingTimeMax = 180;
                    if (this.armor[index].type == 3883)
                        this.wingTimeMax = 150;
                    if (this.armor[index].type == 885)
                        this.buffImmune[30] = true;
                    if (this.armor[index].type == 886)
                        this.buffImmune[36] = true;
                    if (this.armor[index].type == 887)
                        this.buffImmune[20] = true;
                    if (this.armor[index].type == 888)
                        this.buffImmune[22] = true;
                    if (this.armor[index].type == 889)
                        this.buffImmune[32] = true;
                    if (this.armor[index].type == 890)
                        this.buffImmune[35] = true;
                    if (this.armor[index].type == 891)
                        this.buffImmune[23] = true;
                    if (this.armor[index].type == 892)
                        this.buffImmune[33] = true;
                    if (this.armor[index].type == 893)
                        this.buffImmune[31] = true;
                    if (this.armor[index].type == 3781)
                        this.buffImmune[156] = true;
                    if (this.armor[index].type == 901)
                    {
                        this.buffImmune[33] = true;
                        this.buffImmune[36] = true;
                    }

                    if (this.armor[index].type == 902)
                    {
                        this.buffImmune[30] = true;
                        this.buffImmune[20] = true;
                    }

                    if (this.armor[index].type == 903)
                    {
                        this.buffImmune[32] = true;
                        this.buffImmune[31] = true;
                    }

                    if (this.armor[index].type == 904)
                    {
                        this.buffImmune[35] = true;
                        this.buffImmune[23] = true;
                    }

                    if (this.armor[index].type == 1921)
                    {
                        this.buffImmune[46] = true;
                        this.buffImmune[47] = true;
                    }

                    if (this.armor[index].type == 1612)
                    {
                        this.buffImmune[33] = true;
                        this.buffImmune[36] = true;
                        this.buffImmune[30] = true;
                        this.buffImmune[20] = true;
                        this.buffImmune[32] = true;
                        this.buffImmune[31] = true;
                        this.buffImmune[35] = true;
                        this.buffImmune[23] = true;
                        this.buffImmune[22] = true;
                    }

                    if (this.armor[index].type == 1613)
                    {
                        this.buffImmune[46] = true;
                        this.noKnockback = true;
                        this.fireWalk = true;
                        this.buffImmune[33] = true;
                        this.buffImmune[36] = true;
                        this.buffImmune[30] = true;
                        this.buffImmune[20] = true;
                        this.buffImmune[32] = true;
                        this.buffImmune[31] = true;
                        this.buffImmune[35] = true;
                        this.buffImmune[23] = true;
                        this.buffImmune[22] = true;
                    }

                    if (this.armor[index].type == 497)
                    {
                        this.accMerman = true;
                        if (this.hideVisual[index])
                            this.hideMerman = true;
                    }

                    if (this.armor[index].type == 535)
                        this.pStone = true;
                    if (this.armor[index].type == 536)
                        this.kbGlove = true;
                    if (this.armor[index].type == 532)
                        this.starCloak = true;
                    if (this.armor[index].type == 554)
                        this.longInvince = true;
                    if (this.armor[index].type == 555)
                    {
                        this.manaFlower = true;
                        this.manaCost -= 0.08f;
                    }

                    if (Main.myPlayer == this.whoAmI)
                    {
                        if (this.armor[index].type == 576 && Main.rand.Next(10800) == 0 &&
                            (Main.curMusic > 0 && Main.curMusic <= 41))
                        {
                            var num = 0;
                            if (Main.curMusic == 1)
                                num = 0;
                            if (Main.curMusic == 2)
                                num = 1;
                            if (Main.curMusic == 3)
                                num = 2;
                            if (Main.curMusic == 4)
                                num = 4;
                            if (Main.curMusic == 5)
                                num = 5;
                            if (Main.curMusic == 6)
                                num = 3;
                            if (Main.curMusic == 7)
                                num = 6;
                            if (Main.curMusic == 8)
                                num = 7;
                            if (Main.curMusic == 9)
                                num = 9;
                            if (Main.curMusic == 10)
                                num = 8;
                            if (Main.curMusic == 11)
                                num = 11;
                            if (Main.curMusic == 12)
                                num = 10;
                            if (Main.curMusic == 13)
                                num = 12;
                            if (Main.curMusic == 28)
                                this.armor[index].SetDefaults(1963, false);
                            else if (Main.curMusic == 29)
                                this.armor[index].SetDefaults(1610, false);
                            else if (Main.curMusic == 30)
                                this.armor[index].SetDefaults(1963, false);
                            else if (Main.curMusic == 31)
                                this.armor[index].SetDefaults(1964, false);
                            else if (Main.curMusic == 32)
                                this.armor[index].SetDefaults(1965, false);
                            else if (Main.curMusic == 33)
                                this.armor[index].SetDefaults(2742, false);
                            else if (Main.curMusic == 34)
                                this.armor[index].SetDefaults(3370, false);
                            else if (Main.curMusic == 35)
                                this.armor[index].SetDefaults(3236, false);
                            else if (Main.curMusic == 36)
                                this.armor[index].SetDefaults(3237, false);
                            else if (Main.curMusic == 37)
                                this.armor[index].SetDefaults(3235, false);
                            else if (Main.curMusic == 38)
                                this.armor[index].SetDefaults(3044, false);
                            else if (Main.curMusic == 39)
                                this.armor[index].SetDefaults(3371, false);
                            else if (Main.curMusic == 40)
                                this.armor[index].SetDefaults(3796, false);
                            else if (Main.curMusic == 41)
                                this.armor[index].SetDefaults(3869, false);
                            else if (Main.curMusic > 13)
                                this.armor[index].SetDefaults(1596 + Main.curMusic - 14, false);
                            else
                                this.armor[index].SetDefaults(num + 562, false);
                        }

                        if (this.armor[index].type >= 562 && this.armor[index].type <= 574)
                            Main.musicBox2 = this.armor[index].type - 562;
                        if (this.armor[index].type >= 1596 && this.armor[index].type <= 1609)
                            Main.musicBox2 = this.armor[index].type - 1596 + 13;
                        if (this.armor[index].type == 1610)
                            Main.musicBox2 = 27;
                        if (this.armor[index].type == 1963)
                            Main.musicBox2 = 28;
                        if (this.armor[index].type == 1964)
                            Main.musicBox2 = 29;
                        if (this.armor[index].type == 1965)
                            Main.musicBox2 = 30;
                        if (this.armor[index].type == 2742)
                            Main.musicBox2 = 31;
                        if (this.armor[index].type == 3044)
                            Main.musicBox2 = 32;
                        if (this.armor[index].type == 3235)
                            Main.musicBox2 = 33;
                        if (this.armor[index].type == 3236)
                            Main.musicBox2 = 34;
                        if (this.armor[index].type == 3237)
                            Main.musicBox2 = 35;
                        if (this.armor[index].type == 3370)
                            Main.musicBox2 = 36;
                        if (this.armor[index].type == 3371)
                            Main.musicBox2 = 37;
                        if (this.armor[index].type == 3796)
                            Main.musicBox2 = 38;
                        if (this.armor[index].type == 3869)
                            Main.musicBox2 = 39;
                    }
                }
            }

            if (this.dd2Accessory)
            {
                this.minionDamage += 0.1f;
                ++this.maxTurrets;
            }

            for (var index = 3; index < 8 + this.extraAccessorySlots; ++index)
            {
                if (this.armor[index].wingSlot > (sbyte) 0)
                {
                    if (!this.hideVisual[index] || (double) this.velocity.Y != 0.0 && !this.mount.Active)
                        this.wings = (int) this.armor[index].wingSlot;
                    this.wingsLogic = (int) this.armor[index].wingSlot;
                }
            }

            for (var index = 13; index < 18 + this.extraAccessorySlots; ++index)
            {
                var type = this.armor[index].type;
                if (this.armor[index].wingSlot > (sbyte) 0)
                    this.wings = (int) this.armor[index].wingSlot;
                if (type == 861 || type == 3110 || type == 485)
                {
                    this.hideWolf = false;
                    this.forceWerewolf = true;
                }

                if ((this.wet && !this.lavaWet && (!this.mount.Active || this.mount.Type != 3) ||
                     !this.forceWerewolf) && (type == 861 || type == 3110 || type == 497))
                {
                    this.hideMerman = false;
                    this.forceMerman = true;
                }
            }

            if (this.whoAmI == Main.myPlayer && Main.clock && this.accWatch < 3)
                ++this.accWatch;
            if (flag2)
                this.tileSpeed += 0.5f;
            if (flag1)
                this.wallSpeed += 0.5f;
            if (flag3 && this.whoAmI == Main.myPlayer)
            {
                Player.tileRangeX += 3;
                Player.tileRangeY += 2;
            }

            if (!this.accThirdEye)
                this.accThirdEyeCounter = (byte) 0;
            if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
            {
                for (var index = 0; index < (int) byte.MaxValue; ++index)
                {
                    if (index != this.whoAmI && Main.player[index].active &&
                        (!Main.player[index].dead && Main.player[index].team == this.team) &&
                        Main.player[index].team != 0)
                    {
                        var num = 800;
                        if ((double) (Main.player[index].Center - this.Center).Length() < (double) num)
                        {
                            if (Main.player[index].accWatch > this.accWatch)
                                this.accWatch = Main.player[index].accWatch;
                            if (Main.player[index].accCompass > this.accCompass)
                                this.accCompass = Main.player[index].accCompass;
                            if (Main.player[index].accDepthMeter > this.accDepthMeter)
                                this.accDepthMeter = Main.player[index].accDepthMeter;
                            if (Main.player[index].accFishFinder)
                                this.accFishFinder = true;
                            if (Main.player[index].accWeatherRadio)
                                this.accWeatherRadio = true;
                            if (Main.player[index].accThirdEye)
                                this.accThirdEye = true;
                            if (Main.player[index].accJarOfSouls)
                                this.accJarOfSouls = true;
                            if (Main.player[index].accCalendar)
                                this.accCalendar = true;
                            if (Main.player[index].accStopwatch)
                                this.accStopwatch = true;
                            if (Main.player[index].accOreFinder)
                                this.accOreFinder = true;
                            if (Main.player[index].accCritterGuide)
                                this.accCritterGuide = true;
                            if (Main.player[index].accDreamCatcher)
                                this.accDreamCatcher = true;
                        }
                    }
                }
            }

            if (this.accDreamCatcher || !this.dpsStarted)
                return;
            this.dpsStarted = false;
            this.dpsEnd = DateTime.Now;
        }

        public void UpdateArmorSets(int i)
        {
            this.setBonus = "";
            if (this.body == 67 && this.legs == 56 && (this.head >= 103 && this.head <= 105))
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Shroomite");
                this.shroomiteStealth = true;
            }

            if (this.head == 52 && this.body == 32 && this.legs == 31 ||
                this.head == 53 && this.body == 33 && this.legs == 32 ||
                (this.head == 54 && this.body == 34 && this.legs == 33 ||
                 this.head == 55 && this.body == 35 && this.legs == 34) ||
                (this.head == 70 && this.body == 46 && this.legs == 42 ||
                 this.head == 71 && this.body == 47 && this.legs == 43 ||
                 (this.head == 166 && this.body == 173 && this.legs == 108 ||
                  this.head == 167 && this.body == 174 && this.legs == 109)))
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Wood");
                ++this.statDefense;
            }

            if (this.head == 1 && this.body == 1 && this.legs == 1 ||
                (this.head == 72 || this.head == 2) && (this.body == 2 && this.legs == 2) ||
                this.head == 47 && this.body == 28 && this.legs == 27)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.MetalTier1");
                this.statDefense += 2;
            }

            if (this.head == 3 && this.body == 3 && this.legs == 3 ||
                (this.head == 73 || this.head == 4) && (this.body == 4 && this.legs == 4) ||
                (this.head == 48 && this.body == 29 && this.legs == 28 ||
                 this.head == 49 && this.body == 30 && this.legs == 29))
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.MetalTier2");
                this.statDefense += 3;
            }

            if (this.head == 188 && this.body == 189 && this.legs == 129)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Fossil");
                this.thrownCost50 = true;
            }

            if (this.head == 50 && this.body == 31 && this.legs == 30)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Platinum");
                this.statDefense += 4;
            }

            if (this.head == 112 && this.body == 75 && this.legs == 64)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Pumpkin");
                this.meleeDamage += 0.1f;
                this.magicDamage += 0.1f;
                this.rangedDamage += 0.1f;
                this.thrownDamage += 0.1f;
            }

            if (this.head == 22 && this.body == 14 && this.legs == 14)
            {
                this.thrownCost33 = true;
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Ninja");
            }

            if (this.head == 157 && this.body == 105 && this.legs == 98)
            {
                var num1 = 0;
                this.setBonus = Language.GetTextValue("ArmorSetBonus.BeetleDamage");
                this.beetleOffense = true;
                this.beetleCounter -= 3f;
                this.beetleCounter -= (float) (this.beetleCountdown / 10);
                ++this.beetleCountdown;
                if ((double) this.beetleCounter < 0.0)
                    this.beetleCounter = 0.0f;
                var num2 = 400;
                var num3 = 1200;
                var num4 = 4600;
                if ((double) this.beetleCounter > (double) (num2 + num3 + num4 + num3))
                    this.beetleCounter = (float) (num2 + num3 + num4 + num3);
                if ((double) this.beetleCounter > (double) (num2 + num3 + num4))
                {
                    this.AddBuff(100, 5, false);
                    num1 = 3;
                }
                else if ((double) this.beetleCounter > (double) (num2 + num3))
                {
                    this.AddBuff(99, 5, false);
                    num1 = 2;
                }
                else if ((double) this.beetleCounter > (double) num2)
                {
                    this.AddBuff(98, 5, false);
                    num1 = 1;
                }

                if (num1 < this.beetleOrbs)
                    this.beetleCountdown = 0;
                else if (num1 > this.beetleOrbs)
                    this.beetleCounter += 200f;
                if (num1 != this.beetleOrbs && this.beetleOrbs > 0)
                {
                    for (var b = 0; b < 22; ++b)
                    {
                        if (this.buffType[b] >= 98 && this.buffType[b] <= 100 && this.buffType[b] != 97 + num1)
                            this.DelBuff(b);
                    }
                }
            }
            else if (this.head == 157 && this.body == 106 && this.legs == 98)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.BeetleDefense");
                this.beetleDefense = true;
                ++this.beetleCounter;
                var num = 180;
                if ((double) this.beetleCounter >= (double) num)
                {
                    if (this.beetleOrbs > 0 && this.beetleOrbs < 3)
                    {
                        for (var b = 0; b < 22; ++b)
                        {
                            if (this.buffType[b] >= 95 && this.buffType[b] <= 96)
                                this.DelBuff(b);
                        }
                    }

                    if (this.beetleOrbs < 3)
                    {
                        this.AddBuff(95 + this.beetleOrbs, 5, false);
                        this.beetleCounter = 0.0f;
                    }
                    else
                        this.beetleCounter = (float) num;
                }
            }

            if (!this.beetleDefense && !this.beetleOffense)
            {
                this.beetleCounter = 0.0f;
            }
            else
            {
                ++this.beetleFrameCounter;
                if (this.beetleFrameCounter >= 1)
                {
                    this.beetleFrameCounter = 0;
                    ++this.beetleFrame;
                    if (this.beetleFrame > 2)
                        this.beetleFrame = 0;
                }

                for (var beetleOrbs = this.beetleOrbs; beetleOrbs < 3; ++beetleOrbs)
                {
                    this.beetlePos[beetleOrbs].X = 0.0f;
                    this.beetlePos[beetleOrbs].Y = 0.0f;
                }

                for (var index = 0; index < this.beetleOrbs; ++index)
                {
                    this.beetlePos[index] += this.beetleVel[index];
                    this.beetleVel[index].X += (float) Main.rand.Next(-100, 101) * 0.005f;
                    this.beetleVel[index].Y += (float) Main.rand.Next(-100, 101) * 0.005f;
                    var x1 = this.beetlePos[index].X;
                    var y1 = this.beetlePos[index].Y;
                    var num1 = (float) Math.Sqrt((double) x1 * (double) x1 + (double) y1 * (double) y1);
                    if ((double) num1 > 100.0)
                    {
                        var num2 = 20f / num1;
                        var num3 = x1 * -num2;
                        var num4 = y1 * -num2;
                        var num5 = 10;
                        this.beetleVel[index].X = (this.beetleVel[index].X * (float) (num5 - 1) + num3) / (float) num5;
                        this.beetleVel[index].Y = (this.beetleVel[index].Y * (float) (num5 - 1) + num4) / (float) num5;
                    }
                    else if ((double) num1 > 30.0)
                    {
                        var num2 = 10f / num1;
                        var num3 = x1 * -num2;
                        var num4 = y1 * -num2;
                        var num5 = 20;
                        this.beetleVel[index].X = (this.beetleVel[index].X * (float) (num5 - 1) + num3) / (float) num5;
                        this.beetleVel[index].Y = (this.beetleVel[index].Y * (float) (num5 - 1) + num4) / (float) num5;
                    }

                    var x2 = this.beetleVel[index].X;
                    var y2 = this.beetleVel[index].Y;
                    if (Math.Sqrt((double) x2 * (double) x2 + (double) y2 * (double) y2) > 2.0)
                        this.beetleVel[index] *= 0.9f;
                    this.beetlePos[index] -= this.velocity * 0.25f;
                }
            }

            if (this.head == 14 && (this.body >= 58 && this.body <= 63 || this.body == 167))
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Wizard");
                this.magicCrit += 10;
            }

            if (this.head == 159 && (this.body >= 58 && this.body <= 63 || this.body == 167))
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.MagicHat");
                this.statManaMax2 += 60;
            }

            if ((this.head == 5 || this.head == 74) && (this.body == 5 || this.body == 48) &&
                (this.legs == 5 || this.legs == 44))
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.ShadowScale");
                this.moveSpeed += 0.15f;
            }

            if (this.head == 57 && this.body == 37 && this.legs == 35)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Crimson");
                this.crimsonRegen = true;
            }

            if (this.head == 101 && this.body == 66 && this.legs == 55)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.SpectreHealing");
                this.ghostHeal = true;
            }

            if (this.head == 156 && this.body == 66 && this.legs == 55)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.SpectreDamage");
                this.ghostHurt = true;
            }

            if (this.head == 6 && this.body == 6 && this.legs == 6)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Meteor");
                this.spaceGun = true;
            }

            if (this.head == 46 && this.body == 27 && this.legs == 26)
            {
                this.frostArmor = true;
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Frost");
                this.frostBurn = true;
            }

            if ((this.head == 75 || this.head == 7) && (this.body == 7 && this.legs == 7))
            {
                this.boneArmor = true;
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Bone");
                this.ammoCost80 = true;
            }

            if ((this.head == 76 || this.head == 8) && (this.body == 49 || this.body == 8) &&
                (this.legs == 45 || this.legs == 8))
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Jungle");
                this.manaCost -= 0.16f;
            }

            if (this.head == 9 && this.body == 9 && this.legs == 9)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Molten");
                this.meleeDamage += 0.17f;
            }

            if (this.head == 11 && this.body == 20 && this.legs == 19)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Mining");
                this.pickSpeed -= 0.3f;
            }

            if ((this.head == 78 || this.head == 79 || this.head == 80) && (this.body == 51 && this.legs == 47))
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Chlorophyte");
                this.AddBuff(60, 18000, true);
            }
            else if (this.crystalLeaf)
            {
                for (var b = 0; b < 22; ++b)
                {
                    if (this.buffType[b] == 60)
                        this.DelBuff(b);
                }
            }

            if (this.head == 99 && this.body == 65 && this.legs == 54)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Turtle");
                this.thorns = 1f;
                this.turtleThorns = true;
            }

            if (this.body == 17 && this.legs == 16)
            {
                if (this.head == 29)
                {
                    this.setBonus = Language.GetTextValue("ArmorSetBonus.CobaltCaster");
                    this.manaCost -= 0.14f;
                }
                else if (this.head == 30)
                {
                    this.setBonus = Language.GetTextValue("ArmorSetBonus.CobaltMelee");
                    this.meleeSpeed += 0.15f;
                }
                else if (this.head == 31)
                {
                    this.setBonus = Language.GetTextValue("ArmorSetBonus.CobaltRanged");
                    this.ammoCost80 = true;
                }
            }

            if (this.body == 18 && this.legs == 17)
            {
                if (this.head == 32)
                {
                    this.setBonus = Language.GetTextValue("ArmorSetBonus.MythrilCaster");
                    this.manaCost -= 0.17f;
                }
                else if (this.head == 33)
                {
                    this.setBonus = Language.GetTextValue("ArmorSetBonus.MythrilMelee");
                    this.meleeCrit += 5;
                }
                else if (this.head == 34)
                {
                    this.setBonus = Language.GetTextValue("ArmorSetBonus.MythrilRanged");
                    this.ammoCost80 = true;
                }
            }

            if (this.body == 19 && this.legs == 18)
            {
                if (this.head == 35)
                {
                    this.setBonus = Language.GetTextValue("ArmorSetBonus.AdamantiteCaster");
                    this.manaCost -= 0.19f;
                }
                else if (this.head == 36)
                {
                    this.setBonus = Language.GetTextValue("ArmorSetBonus.AdamantiteMelee");
                    this.meleeSpeed += 0.18f;
                    this.moveSpeed += 0.18f;
                }
                else if (this.head == 37)
                {
                    this.setBonus = Language.GetTextValue("ArmorSetBonus.AdamantiteRanged");
                    this.ammoCost75 = true;
                }
            }

            if (this.body == 54 && this.legs == 49 && (this.head == 83 || this.head == 84 || this.head == 85))
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Palladium");
                this.onHitRegen = true;
            }

            if (this.body == 55 && this.legs == 50 && (this.head == 86 || this.head == 87 || this.head == 88))
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Orichalcum");
                this.onHitPetal = true;
            }

            if (this.body == 56 && this.legs == 51 && (this.head == 89 || this.head == 90 || this.head == 91))
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Titanium");
                this.onHitDodge = true;
            }

            if (this.body == 24 && this.legs == 23)
            {
                if (this.head == 42)
                {
                    this.setBonus = Language.GetTextValue("ArmorSetBonus.HallowCaster");
                    this.manaCost -= 0.2f;
                }
                else if (this.head == 43)
                {
                    this.setBonus = Language.GetTextValue("ArmorSetBonus.HallowMelee");
                    this.meleeSpeed += 0.19f;
                    this.moveSpeed += 0.19f;
                }
                else if (this.head == 41)
                {
                    this.setBonus = Language.GetTextValue("ArmorSetBonus.HallowRanged");
                    this.ammoCost75 = true;
                }
            }

            if (this.head == 82 && this.body == 53 && this.legs == 48)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Tiki");
                ++this.maxMinions;
            }

            if (this.head == 134 && this.body == 95 && this.legs == 79)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Spooky");
                this.minionDamage += 0.25f;
            }

            if (this.head == 160 && this.body == 168 && this.legs == 103)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Bee");
                this.minionDamage += 0.1f;
                if (this.itemAnimation > 0 && this.inventory[this.selectedItem].type == 1121)
                    AchievementsHelper.HandleSpecialEvent(this, 3);
            }

            if (this.head == 162 && this.body == 170 && this.legs == 105)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Spider");
                this.minionDamage += 0.12f;
            }

            if (this.head == 171 && this.body == 177 && this.legs == 112)
            {
                this.setSolar = true;
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Solar");
                ++this.solarCounter;
                var num = 240;
                if (this.solarCounter >= num)
                {
                    if (this.solarShields > 0 && this.solarShields < 3)
                    {
                        for (var b = 0; b < 22; ++b)
                        {
                            if (this.buffType[b] >= 170 && this.buffType[b] <= 171)
                                this.DelBuff(b);
                        }
                    }

                    if (this.solarShields < 3)
                    {
                        this.AddBuff(170 + this.solarShields, 5, false);
                        for (var index = 0; index < 16; ++index)
                        {
                            var dust = Main.dust[
                                Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(),
                                    1f)];
                            dust.noGravity = true;
                            dust.scale = 1.7f;
                            dust.fadeIn = 0.5f;
                            dust.velocity *= 5f;
                            dust.shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                        }

                        this.solarCounter = 0;
                    }
                    else
                        this.solarCounter = num;
                }

                for (var solarShields = this.solarShields; solarShields < 3; ++solarShields)
                    this.solarShieldPos[solarShields] = Vector2.Zero;
                for (var index = 0; index < this.solarShields; ++index)
                {
                    this.solarShieldPos[index] += this.solarShieldVel[index];
                    var vector2 =
                        ((float) ((double) this.miscCounter / 100.0 * 6.28318548202515 +
                                  (double) index * (6.28318548202515 / (double) this.solarShields)))
                        .ToRotationVector2() * 6f;
                    vector2.X = (float) (this.direction * 20);
                    this.solarShieldVel[index] = (vector2 - this.solarShieldPos[index]) * 0.2f;
                }

                if (this.dashDelay >= 0)
                {
                    this.solarDashing = false;
                    this.solarDashConsumedFlare = false;
                }

                if (this.solarShields > 0 || this.solarDashing && this.dashDelay < 0)
                    this.dash = 3;
            }
            else
                this.solarCounter = 0;

            if (this.head == 169 && this.body == 175 && this.legs == 110)
            {
                this.setVortex = true;
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Vortex",
                    (object) Language.GetTextValue(Main.ReversedUpDownArmorSetBonuses ? "Key.UP" : "Key.DOWN"));
            }
            else
                this.vortexStealthActive = false;

            if (this.head == 170 && this.body == 176 && this.legs == 111)
            {
                if (this.nebulaCD > 0)
                    --this.nebulaCD;
                this.setNebula = true;
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Nebula");
            }

            if (this.head == 189 && this.body == 190 && this.legs == 130)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Stardust",
                    (object) Language.GetTextValue(Main.ReversedUpDownArmorSetBonuses ? "Key.UP" : "Key.DOWN"));
                this.setStardust = true;
                if (this.whoAmI == Main.myPlayer)
                {
                    if (this.FindBuffIndex(187) == -1)
                        this.AddBuff(187, 3600, true);
                    if (this.ownedProjectileCounts[623] < 1)
                        Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, -1f, 623, 0, 0.0f, Main.myPlayer,
                            0.0f, 0.0f);
                }
            }
            else if (this.FindBuffIndex(187) != -1)
                this.DelBuff(this.FindBuffIndex(187));

            if (this.head == 200 && this.body == 198 && this.legs == 142)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.Forbidden",
                    (object) Language.GetTextValue(Main.ReversedUpDownArmorSetBonuses ? "Key.UP" : "Key.DOWN"));
                this.setForbidden = true;
                this.UpdateForbiddenSetLock();
                Lighting.AddLight(this.Center, 0.8f, 0.7f, 0.2f);
            }

            if (this.head == 204 && this.body == 201 && this.legs == 145)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.SquireTier2");
                this.setSquireT2 = true;
                ++this.maxTurrets;
            }

            if (this.head == 203 && this.body == 200 && this.legs == 144)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.ApprenticeTier2");
                this.setApprenticeT2 = true;
                ++this.maxTurrets;
            }

            if (this.head == 205 && this.body == 202 && (this.legs == 147 || this.legs == 146))
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.HuntressTier2");
                this.setHuntressT2 = true;
                ++this.maxTurrets;
            }

            if (this.head == 206 && this.body == 203 && this.legs == 148)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.MonkTier2");
                this.setMonkT2 = true;
                ++this.maxTurrets;
            }

            if (this.head == 210 && this.body == 204 && this.legs == 152)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.SquireTier3");
                this.setSquireT3 = true;
                this.setSquireT2 = true;
                ++this.maxTurrets;
            }

            if (this.head == 211 && this.body == 205 && this.legs == 153)
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.ApprenticeTier3");
                this.setApprenticeT3 = true;
                this.setApprenticeT2 = true;
                ++this.maxTurrets;
            }

            if (this.head == 212 && this.body == 206 && (this.legs == 154 || this.legs == 155))
            {
                this.setBonus = Language.GetTextValue("ArmorSetBonus.HuntressTier3");
                this.setHuntressT3 = true;
                this.setHuntressT2 = true;
                ++this.maxTurrets;
            }

            if (this.head != 213 || this.body != 207 || this.legs != 156)
                return;
            this.setBonus = Language.GetTextValue("ArmorSetBonus.MonkTier3");
            this.setMonkT3 = true;
            this.setMonkT2 = true;
            ++this.maxTurrets;
        }

        public void UpdateSocialShadow()
        {
            for (var index = 2; index > 0; --index)
                this.shadowDirection[index] = this.shadowDirection[index - 1];
            this.shadowDirection[0] = this.direction;
            ++this.shadowCount;
            if (this.shadowCount == 1)
            {
                this.shadowPos[2] = this.shadowPos[1];
                this.shadowRotation[2] = this.shadowRotation[1];
                this.shadowOrigin[2] = this.shadowOrigin[1];
            }
            else if (this.shadowCount == 2)
            {
                this.shadowPos[1] = this.shadowPos[0];
                this.shadowRotation[1] = this.shadowRotation[0];
                this.shadowOrigin[1] = this.shadowOrigin[0];
            }
            else
            {
                if (this.shadowCount < 3)
                    return;
                this.shadowCount = 0;
                this.shadowPos[0] = this.position;
                this.shadowPos[0].Y += this.gfxOffY;
                this.shadowRotation[0] = this.fullRotation;
                this.shadowOrigin[0] = this.fullRotationOrigin;
            }
        }

        public void UpdateTeleportVisuals()
        {
            if ((double) this.teleportTime <= 0.0)
                return;
            if (this.teleportStyle == 0)
            {
                if ((double) Main.rand.Next(100) <= 100.0 * (double) this.teleportTime * 2.0)
                {
                    var index = Dust.NewDust(new Vector2((float) this.getRect().X, (float) this.getRect().Y),
                        this.getRect().Width, this.getRect().Height, 159, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index].scale = this.teleportTime * 1.5f;
                    Main.dust[index].noGravity = true;
                    Main.dust[index].velocity *= 1.1f;
                }
            }
            else if (this.teleportStyle == 1)
            {
                if ((double) Main.rand.Next(100) <= 100.0 * (double) this.teleportTime)
                {
                    var index = Dust.NewDust(new Vector2((float) this.getRect().X, (float) this.getRect().Y),
                        this.getRect().Width, this.getRect().Height, 164, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index].scale = this.teleportTime * 1.5f;
                    Main.dust[index].noGravity = true;
                    Main.dust[index].velocity *= 1.1f;
                }
            }
            else if (this.teleportStyle == 2)
                this.teleportTime = 0.005f;
            else if (this.teleportStyle == 3)
                this.teleportTime = 0.005f;
            else if (this.teleportStyle == 4)
            {
                this.teleportTime -= 0.02f;
                if ((double) Main.rand.Next(100) <= 100.0 * (double) this.teleportTime)
                {
                    var dust = Main.dust[
                        Dust.NewDust(this.position, this.width, this.height, 263, 0.0f, 0.0f, 0, new Color(), 1f)];
                    dust.color = PortalHelper.GetPortalColor(this.lastPortalColorIndex);
                    dust.noLight = true;
                    dust.noGravity = true;
                    dust.scale = 1.2f;
                    dust.fadeIn = 0.4f;
                }
            }

            this.teleportTime -= 0.005f;
        }

        public void UpdateBiomes()
        {
            var tileCoordinates1 = this.Center.ToTileCoordinates();
            this.ZoneDungeon = false;
            if (Main.dungeonTiles >= 250 && (double) this.Center.Y > Main.worldSurface * 16.0)
            {
                var index1 = (int) this.Center.X / 16;
                var index2 = (int) this.Center.Y / 16;
                if (Main.wallDungeon[(int) Main.tile[index1, index2].wall])
                    this.ZoneDungeon = true;
            }

            var tileSafely = Framing.GetTileSafely(this.Center);
            if (tileSafely != null)
                this.behindBackWall = tileSafely.wall > (byte) 0;
            if (Main.sandTiles > 1000 && (double) this.Center.Y > 3200.0)
            {
                if (WallID.Sets.Conversion.Sandstone[(int) tileSafely.wall] ||
                    WallID.Sets.Conversion.HardenedSand[(int) tileSafely.wall])
                    this.ZoneUndergroundDesert = true;
            }
            else
                this.ZoneUndergroundDesert = false;

            this.ZoneCorrupt = Main.evilTiles >= 200;
            this.ZoneHoly = Main.holyTiles >= 100;
            this.ZoneMeteor = Main.meteorTiles >= 50;
            this.ZoneJungle = Main.jungleTiles >= 80;
            this.ZoneSnow = Main.snowTiles >= 300;
            this.ZoneCrimson = Main.bloodTiles >= 200;
            this.ZoneWaterCandle = Main.waterCandles > 0;
            this.ZonePeaceCandle = Main.peaceCandles > 0;
            this.ZoneDesert = Main.sandTiles > 1000;
            this.ZoneGlowshroom = Main.shroomTiles > 100;
            this.ZoneUnderworldHeight = tileCoordinates1.Y > Main.maxTilesY - 200;
            this.ZoneRockLayerHeight = tileCoordinates1.Y <= Main.maxTilesY - 200 &&
                                       (double) tileCoordinates1.Y > Main.rockLayer;
            this.ZoneDirtLayerHeight = (double) tileCoordinates1.Y <= Main.rockLayer &&
                                       (double) tileCoordinates1.Y > Main.worldSurface;
            this.ZoneOverworldHeight = (double) tileCoordinates1.Y <= Main.worldSurface &&
                                       (double) tileCoordinates1.Y > Main.worldSurface * 0.349999994039536;
            this.ZoneSkyHeight = (double) tileCoordinates1.Y <= Main.worldSurface * 0.349999994039536;
            this.ZoneBeach = this.ZoneOverworldHeight &&
                             (tileCoordinates1.X < 380 || tileCoordinates1.X > Main.maxTilesX - 380);
            this.ZoneRain = Main.raining && (double) tileCoordinates1.Y <= Main.worldSurface;
            this.ZoneSandstorm = (double) tileCoordinates1.Y <= Main.worldSurface && this.ZoneDesert &&
                                 !this.ZoneBeach && Sandstorm.Happening;
            this.ZoneTowerSolar = this.ZoneTowerVortex = this.ZoneTowerNebula = this.ZoneTowerStardust = false;
            this.ZoneOldOneArmy = false;
            var vector2_1 = Vector2.Zero;
            var vector2_2 = Vector2.Zero;
            var vector2_3 = Vector2.Zero;
            var vector2_4 = Vector2.Zero;
            var zero = Vector2.Zero;
            for (var index = 0; index < 200; ++index)
            {
                if (Main.npc[index].active)
                {
                    if (Main.npc[index].type == 493)
                    {
                        if ((double) this.Distance(Main.npc[index].Center) <= 4000.0)
                        {
                            this.ZoneTowerStardust = true;
                            vector2_4 = Main.npc[index].Center;
                        }
                    }
                    else if (Main.npc[index].type == 507)
                    {
                        if ((double) this.Distance(Main.npc[index].Center) <= 4000.0)
                        {
                            this.ZoneTowerNebula = true;
                            vector2_3 = Main.npc[index].Center;
                        }
                    }
                    else if (Main.npc[index].type == 422)
                    {
                        if ((double) this.Distance(Main.npc[index].Center) <= 4000.0)
                        {
                            this.ZoneTowerVortex = true;
                            vector2_2 = Main.npc[index].Center;
                        }
                    }
                    else if (Main.npc[index].type == 517)
                    {
                        if ((double) this.Distance(Main.npc[index].Center) <= 4000.0)
                        {
                            this.ZoneTowerSolar = true;
                            vector2_1 = Main.npc[index].Center;
                        }
                    }
                    else if (Main.npc[index].type == 549 && (double) this.Distance(Main.npc[index].Center) <= 4000.0)
                    {
                        this.ZoneOldOneArmy = true;
                        vector2_1 = Main.npc[index].Center;
                    }
                }
            }

            var flag1 = this.ZoneRain && this.ZoneSnow;
            var flag2 = tileCoordinates1.Y > Main.maxTilesY - 320;
            var flag3 = this.ZoneOverworldHeight &&
                         (tileCoordinates1.X < 380 || tileCoordinates1.X > Main.maxTilesX - 380);
            this.ManageSpecialBiomeVisuals("Stardust", this.ZoneTowerStardust, vector2_4 - new Vector2(0.0f, 10f));
            this.ManageSpecialBiomeVisuals("Nebula", this.ZoneTowerNebula, vector2_3 - new Vector2(0.0f, 10f));
            this.ManageSpecialBiomeVisuals("Vortex", this.ZoneTowerVortex, vector2_2 - new Vector2(0.0f, 10f));
            this.ManageSpecialBiomeVisuals("Solar", this.ZoneTowerSolar, vector2_1 - new Vector2(0.0f, 10f));
            this.ManageSpecialBiomeVisuals("MoonLord", NPC.AnyNPCs(398), new Vector2());
            this.ManageSpecialBiomeVisuals("BloodMoon", Main.bloodMoon, new Vector2());
            this.ManageSpecialBiomeVisuals("Blizzard", Main.UseStormEffects && flag1, new Vector2());
            this.ManageSpecialBiomeVisuals("HeatDistortion",
                Main.UseHeatDistortion && (flag2 || (double) tileCoordinates1.Y < Main.worldSurface &&
                                           this.ZoneDesert && (!flag3 && !Main.raining) &&
                                           !Filters.Scene["Sandstorm"].IsActive()), new Vector2());
            if (!Filters.Scene["WaterDistortion"].IsActive() && Main.WaveQuality > 0)
                Filters.Scene.Activate("WaterDistortion", new Vector2());
            else if (Filters.Scene["WaterDistortion"].IsActive() && Main.WaveQuality == 0)
                Filters.Scene.Deactivate("WaterDistortion");
            if (Filters.Scene["WaterDistortion"].IsActive())
            {
                var num1 = (float) Main.maxTilesX * 0.5f -
                             Math.Abs((float) tileCoordinates1.X - (float) Main.maxTilesX * 0.5f);
                var num2 = 1f + Math.Abs(Main.windSpeed) * 1f + MathHelper.Clamp(Main.maxRaining, 0.0f, 1f) * 1.5f +
                             (float) -((double) MathHelper.Clamp((float) (((double) num1 - 380.0) / 100.0), 0.0f, 1f) *
                                       0.5 - 0.25);
                var num3 =
                    1f - MathHelper.Clamp(
                        (float) (3.0 * ((double) ((float) tileCoordinates1.Y - (float) Main.worldSurface) /
                                        (Main.rockLayer - Main.worldSurface))), 0.0f, 1f);
                var intensity = MathHelper.Clamp(
                    num2 * num3 +
                    (float) (0.899999976158142 -
                             (double) MathHelper.Clamp((float) (Main.maxTilesY - tileCoordinates1.Y - 200) / 300f, 0.0f,
                                 1f) * 0.899999976158142) + (float) ((1.0 - (double) num3) * 0.75), 0.0f, 2.5f);
                Filters.Scene["WaterDistortion"].GetShader().UseIntensity(intensity);
            }

            if (flag2)
            {
                var intensity = Math.Min(1f, (float) (tileCoordinates1.Y - (Main.maxTilesY - 320)) / 120f) * 2f;
                Filters.Scene["HeatDistortion"].GetShader().UseIntensity(intensity);
            }

            this._shaderObstructionInternalValue = Utils.Clamp<float>(
                this._shaderObstructionInternalValue + (float) this.behindBackWall.ToDirectionInt() * -0.005f, -0.1f,
                1.1f);
            this._stormShaderObstruction = Utils.Clamp<float>(this._shaderObstructionInternalValue, 0.0f, 1f);
            if (Filters.Scene["Sandstorm"].IsActive())
            {
                Filters.Scene["Sandstorm"].GetShader()
                    .UseIntensity(this._stormShaderObstruction * 0.4f * Math.Min(1f, Sandstorm.Severity));
                Filters.Scene["Sandstorm"].GetShader()
                    .UseOpacity(Math.Min(1f, Sandstorm.Severity * 1.5f) * this._stormShaderObstruction);
                ((SimpleOverlay) Overlays.Scene["Sandstorm"]).GetShader()
                    .UseOpacity(Math.Min(1f, Sandstorm.Severity * 1.5f) * (1f - this._stormShaderObstruction));
            }
            else if (this.ZoneDesert && !flag3 && (!Main.raining && !flag2))
            {
                var vector3 = Main.tileColor.ToVector3();
                var num = (float) (((double) vector3.X + (double) vector3.Y + (double) vector3.Z) / 3.0);
                var intensity = this._stormShaderObstruction * 4f * Math.Max(0.0f, 0.5f - Main.cloudAlpha) * num;
                Filters.Scene["HeatDistortion"].GetShader().UseIntensity(intensity);
                if ((double) intensity <= 0.0)
                    Filters.Scene["HeatDistortion"].IsHidden = true;
                else
                    Filters.Scene["HeatDistortion"].IsHidden = false;
            }

            if (flag1)
            {
                var activeSound1 = Main.GetActiveSound(Player._strongBlizzardSound);
                var activeSound2 = Main.GetActiveSound(Player._insideBlizzardSound);
                if (activeSound1 == null)
                    Player._strongBlizzardSound = Main.PlayTrackedSound((SoundStyle) SoundID.BlizzardStrongLoop);
                if (activeSound2 == null)
                    Player._insideBlizzardSound =
                        Main.PlayTrackedSound((SoundStyle) SoundID.BlizzardInsideBuildingLoop);
                Main.GetActiveSound(Player._strongBlizzardSound);
                Main.GetActiveSound(Player._insideBlizzardSound);
                var opacity = Math.Min(1f, Main.cloudAlpha * 2f) * this._stormShaderObstruction;
                Filters.Scene["Blizzard"].GetShader().UseIntensity(
                    (float) ((double) this._stormShaderObstruction * 0.400000005960464 *
                             (double) Math.Min(1f, Main.cloudAlpha * 2f) * 0.899999976158142 + 0.100000001490116));
                Filters.Scene["Blizzard"].GetShader().UseOpacity(opacity);
                ((SimpleOverlay) Overlays.Scene["Blizzard"]).GetShader().UseOpacity(1f - opacity);
            }

            Player._blizzardSoundVolume = !flag1
                ? Math.Max(Player._blizzardSoundVolume - 0.01f, 0.0f)
                : Math.Min(Player._blizzardSoundVolume + 0.01f, 1f);
            var num4 = Math.Min(1f, Main.cloudAlpha * 2f) * this._stormShaderObstruction;
            var activeSound3 = Main.GetActiveSound(Player._strongBlizzardSound);
            var activeSound4 = Main.GetActiveSound(Player._insideBlizzardSound);
            if ((double) Player._blizzardSoundVolume > 0.0)
            {
                if (activeSound3 == null)
                {
                    Player._strongBlizzardSound = Main.PlayTrackedSound((SoundStyle) SoundID.BlizzardStrongLoop);
                    activeSound3 = Main.GetActiveSound(Player._strongBlizzardSound);
                }

                activeSound3.Volume = num4 * Player._blizzardSoundVolume;
                if (activeSound4 == null)
                {
                    Player._insideBlizzardSound =
                        Main.PlayTrackedSound((SoundStyle) SoundID.BlizzardInsideBuildingLoop);
                    activeSound4 = Main.GetActiveSound(Player._insideBlizzardSound);
                }

                activeSound4.Volume = (1f - num4) * Player._blizzardSoundVolume;
            }
            else
            {
                if (activeSound3 != null)
                    activeSound3.Volume = 0.0f;
                else
                    Player._strongBlizzardSound = (SlotId) SlotId.Invalid;
                if (activeSound4 != null)
                    activeSound4.Volume = 0.0f;
                else
                    Player._insideBlizzardSound = (SlotId) SlotId.Invalid;
            }

            if (!this.dead)
            {
                var tileCoordinates2 = this.Center.ToTileCoordinates();
                if (WorldGen.InWorld(tileCoordinates2.X, tileCoordinates2.Y, 1))
                {
                    var num1 = 0;
                    if (Main.tile[tileCoordinates2.X, tileCoordinates2.Y] != null)
                        num1 = (int) Main.tile[tileCoordinates2.X, tileCoordinates2.Y].wall;
                    switch (num1)
                    {
                        case 62:
                            AchievementsHelper.HandleSpecialEvent(this, 13);
                            break;
                        case 86:
                            AchievementsHelper.HandleSpecialEvent(this, 12);
                            break;
                    }
                }

                if (this._funkytownCheckCD > 0)
                    --this._funkytownCheckCD;
                if ((double) this.position.Y / 16.0 > (double) (Main.maxTilesY - 200))
                {
                    AchievementsHelper.HandleSpecialEvent(this, 14);
                }
                else
                {
                    if (this._funkytownCheckCD != 0 || (double) this.position.Y / 16.0 >= Main.worldSurface ||
                        Main.shroomTiles < 200)
                        return;
                    AchievementsHelper.HandleSpecialEvent(this, 15);
                }
            }
            else
                this._funkytownCheckCD = 100;
        }

        public void ManageSpecialBiomeVisuals(string biomeName, bool inZone,
            Vector2 activationSource = default(Vector2))
        {
            if (SkyManager.Instance[biomeName] != null && inZone != SkyManager.Instance[biomeName].IsActive())
            {
                if (inZone)
                    SkyManager.Instance.Activate(biomeName, activationSource);
                else
                    SkyManager.Instance.Deactivate(biomeName);
            }

            if (inZone != Filters.Scene[biomeName].IsActive())
            {
                if (inZone)
                    Filters.Scene.Activate(biomeName, activationSource);
                else
                    Filters.Scene[biomeName].Deactivate();
            }
            else if (inZone)
                Filters.Scene[biomeName].GetShader().UseTargetPosition(activationSource);

            if (Overlays.Scene[biomeName] == null || inZone == (Overlays.Scene[biomeName].Mode != OverlayMode.Inactive))
                return;
            if (inZone)
                Overlays.Scene.Activate(biomeName, activationSource);
            else
                Overlays.Scene[biomeName].Deactivate();
        }

        public void UpdateDead()
        {
            this._portalPhysicsTime = 0;
            this.MountFishronSpecialCounter = 0.0f;
            this.gem = -1;
            this.ownedLargeGems = (BitsByte) (byte) 0;
            this.slippy = false;
            this.slippy2 = false;
            this.powerrun = false;
            this.wings = 0;
            this.wingsLogic = 0;
            this.face = this.neck = this.back = this.front = this.handoff =
                this.handon = this.shoe = this.waist = this.balloon = this.shield = (sbyte) 0;
            this.poisoned = false;
            this.venom = false;
            this.onFire = false;
            this.dripping = false;
            this.drippingSlime = false;
            this.burned = false;
            this.suffocating = false;
            this.onFire2 = false;
            this.onFrostBurn = false;
            this.blind = false;
            this.blackout = false;
            this.loveStruck = false;
            this.dryadWard = false;
            this.stinky = false;
            this.resistCold = false;
            this.electrified = false;
            this.moonLeech = false;
            this.headcovered = false;
            this.vortexDebuff = false;
            this.windPushed = false;
            this.setForbidden = false;
            this.setMonkT3 = false;
            this.setHuntressT3 = false;
            this.setApprenticeT3 = false;
            this.setSquireT3 = false;
            this.setForbiddenCooldownLocked = false;
            this.setSolar = this.setVortex = this.setNebula = this.setStardust = false;
            this.nebulaLevelDamage = this.nebulaLevelLife = this.nebulaLevelMana = 0;
            this.trapDebuffSource = false;
            this.yoraiz0rEye = 0;
            this.yoraiz0rDarkness = false;
            this.leinforsHair = false;
            this.gravDir = 1f;
            for (var index = 0; index < 22; ++index)
            {
                if (this.buffType[index] <= 0 || !Main.persistentBuff[this.buffType[index]])
                {
                    this.buffTime[index] = 0;
                    this.buffType[index] = 0;
                }
            }

            if (this.whoAmI == Main.myPlayer)
            {
                Main.npcChatText = "";
                Main.editSign = false;
            }

            this.grappling[0] = -1;
            this.grappling[1] = -1;
            this.grappling[2] = -1;
            this.sign = -1;
            this.talkNPC = -1;
            Main.npcChatCornerItem = 0;
            this.statLife = 0;
            this.channel = false;
            this.potionDelay = 0;
            this.chest = -1;
            this.changeItem = -1;
            this.itemAnimation = 0;
            this.immuneAlpha += 2;
            if (this.immuneAlpha > (int) byte.MaxValue)
                this.immuneAlpha = (int) byte.MaxValue;
            this.headPosition += this.headVelocity;
            this.bodyPosition += this.bodyVelocity;
            this.legPosition += this.legVelocity;
            this.headRotation += this.headVelocity.X * 0.1f;
            this.bodyRotation += this.bodyVelocity.X * 0.1f;
            this.legRotation += this.legVelocity.X * 0.1f;
            this.headVelocity.Y += 0.1f;
            this.bodyVelocity.Y += 0.1f;
            this.legVelocity.Y += 0.1f;
            this.headVelocity.X *= 0.99f;
            this.bodyVelocity.X *= 0.99f;
            this.legVelocity.X *= 0.99f;
            for (var index = 0; index < this.npcTypeNoAggro.Length; ++index)
                this.npcTypeNoAggro[index] = false;
            if (this.difficulty == (byte) 2)
            {
                if (this.respawnTimer > 0)
                {
                    --this.respawnTimer;
                }
                else
                {
                    if (this.whoAmI != Main.myPlayer && Main.netMode != 2)
                        return;
                    this.ghost = true;
                }
            }
            else
            {
                --this.respawnTimer;
                if (this.respawnTimer > 0 || Main.myPlayer != this.whoAmI)
                    return;
                if (Main.mouseItem.type > 0)
                    Main.playerInventory = true;
                this.Spawn();
            }
        }

        public void UpdatePet(int i)
        {
            if (i != Main.myPlayer || this.miscEquips[0].buffType < 1 || this.miscEquips[0].stack < 1)
                return;
            var buffType = this.miscEquips[0].buffType;
            if (!Main.vanityPet[buffType] && !Main.lightPet[buffType] || this.hideMisc[0] ||
                (this.miscEquips[0].type == 603 && !Main.cEd || this.FindBuffIndex(buffType) != -1))
                return;
            this.AddBuff(buffType, 3600, true);
            Main.PlaySound(this.miscEquips[0].UseSound, this.position);
        }

        public void UpdatePetLight(int i)
        {
            if (i != Main.myPlayer || this.miscEquips[1].buffType < 1 || this.miscEquips[1].stack < 1)
                return;
            var type = this.miscEquips[1].buffType;
            if (!Main.vanityPet[type] && !Main.lightPet[type] || this.hideMisc[1] ||
                this.miscEquips[1].type == 603 && !Main.cEd)
                return;
            var buffIndex = this.FindBuffIndex(type);
            if (type == 27 && buffIndex == -1)
                buffIndex = this.FindBuffIndex(102);
            if (type == 27 && buffIndex == -1)
                buffIndex = this.FindBuffIndex(101);
            if (buffIndex != -1)
                return;
            if (type == 27)
                type = Utils.SelectRandom<int>(Main.rand, new int[3]
                {
                    27,
                    102,
                    101
                });
            this.AddBuff(type, 3600, true);
            Main.PlaySound(this.miscEquips[1].UseSound, this.position);
        }

        public void TogglePet()
        {
            this.hideMisc[0] = !this.hideMisc[0];
            if (!this.hideMisc[0])
                return;
            this.ClearBuff(this.miscEquips[0].buffType);
        }

        public void ToggleLight()
        {
            this.hideMisc[1] = !this.hideMisc[1];
            if (!this.hideMisc[1])
                return;
            this.ClearBuff(this.miscEquips[1].buffType);
            if (this.miscEquips[1].buffType != 27)
                return;
            this.ClearBuff(102);
            this.ClearBuff(101);
        }

        public void SmartCursorLookup()
        {
            if (this.whoAmI != Main.myPlayer)
                return;
            Main.SmartCursorShowing = false;
            if (!Main.SmartCursorEnabled)
                return;
            var obj = this.inventory[this.selectedItem];
            var mouse = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY);
            if ((double) this.gravDir == -1.0)
                mouse.Y = Main.screenPosition.Y + (float) Main.screenHeight - (float) Main.mouseY;
            var index1 = Player.tileTargetX;
            var index2 = Player.tileTargetY;
            if (index1 < 10)
                index1 = 10;
            if (index1 > Main.maxTilesX - 10)
                index1 = Main.maxTilesX - 10;
            if (index2 < 10)
                index2 = 10;
            if (index2 > Main.maxTilesY - 10)
                index2 = Main.maxTilesY - 10;
            var flag1 = false;
            if (Main.tile[index1, index2] == null)
                return;
            if (Main.tile[index1, index2].active())
            {
                switch (Main.tile[index1, index2].type)
                {
                    case 4:
                    case 10:
                    case 11:
                    case 13:
                    case 21:
                    case 29:
                    case 33:
                    case 49:
                    case 50:
                    case 55:
                    case 79:
                    case 85:
                    case 88:
                    case 97:
                    case 104:
                    case 125:
                    case 132:
                    case 136:
                    case 139:
                    case 144:
                    case 174:
                    case 207:
                    case 209:
                    case 212:
                    case 216:
                    case 219:
                    case 237:
                    case 287:
                    case 334:
                    case 335:
                    case 338:
                    case 354:
                    case 386:
                    case 387:
                    case 388:
                    case 389:
                    case 411:
                    case 425:
                    case 441:
                    case 463:
                    case 467:
                    case 468:
                        flag1 = true;
                        break;
                    case 314:
                        if ((double) this.gravDir == 1.0)
                        {
                            flag1 = true;
                            break;
                        }

                        break;
                }
            }

            var tileBoost = obj.tileBoost;
            var num1 = 0;
            if (obj.type == 1071 || obj.type == 1543 || (obj.type == 1072 || obj.type == 1544))
            {
                for (var index3 = 0; index3 < 58; ++index3)
                {
                    if (this.inventory[index3].stack > 0 && this.inventory[index3].paint > (byte) 0)
                    {
                        num1 = (int) this.inventory[index3].paint;
                        break;
                    }
                }
            }

            var num2 = (int) ((double) this.position.X / 16.0) - Player.tileRangeX - tileBoost + 1;
            var num3 = (int) (((double) this.position.X + (double) this.width) / 16.0) + Player.tileRangeX + tileBoost -
                       1;
            var num4 = (int) ((double) this.position.Y / 16.0) - Player.tileRangeY - tileBoost + 1;
            var num5 = (int) (((double) this.position.Y + (double) this.height) / 16.0) + Player.tileRangeY +
                       tileBoost - 2;
            var num6 = Utils.Clamp<int>(num2, 10, Main.maxTilesX - 10);
            var num7 = Utils.Clamp<int>(num3, 10, Main.maxTilesX - 10);
            var num8 = Utils.Clamp<int>(num4, 10, Main.maxTilesY - 10);
            var num9 = Utils.Clamp<int>(num5, 10, Main.maxTilesY - 10);
            if (flag1 && index1 >= num6 && (index1 <= num7 && index2 >= num8) && index2 <= num9)
                return;
            var ignoreTargets = new List<Tuple<int, int>>();
            for (var index3 = 0; index3 < this.grapCount; ++index3)
            {
                var projectile = Main.projectile[this.grappling[index3]];
                var num10 = (int) projectile.Center.X / 16;
                var num11 = (int) projectile.Center.Y / 16;
                ignoreTargets.Add(new Tuple<int, int>(num10, num11));
            }

            var fX = -1;
            var fY = -1;
            if (!Player.SmartCursorSettings.SmartAxeAfterPickaxe)
                Player.SmartCursor_Axe(obj, ref mouse, num6, num7, num8, num9, ref fX, ref fY);
            if (obj.pick > 0 && fX == -1 && fY == -1)
            {
                if (PlayerInput.UsingGamepad &&
                    (PlayerInput.Triggers.Current.GetNavigatorDirections() == Vector2.Zero &&
                     (double) PlayerInput.GamepadThumbstickLeft.Length() < 0.0500000007450581 &&
                     (double) PlayerInput.GamepadThumbstickRight.Length() < 0.0500000007450581))
                    mouse = this.Center + new Vector2((float) (this.direction * 1000), 0.0f);
                var vector2 = mouse - this.Center;
                var num10 = Math.Sign(vector2.X);
                var num11 = Math.Sign(vector2.Y);
                if ((double) Math.Abs(vector2.X) > (double) Math.Abs(vector2.Y) * 3.0)
                {
                    num11 = 0;
                    mouse.Y = this.Center.Y;
                }

                if ((double) Math.Abs(vector2.Y) > (double) Math.Abs(vector2.X) * 3.0)
                {
                    num10 = 0;
                    mouse.X = this.Center.X;
                }

                var num12 = (int) this.Center.X / 16;
                var num13 = (int) this.Center.Y / 16;
                var tupleList1 = new List<Tuple<int, int>>();
                var tupleList2 = new List<Tuple<int, int>>();
                var num14 = 1;
                if (num11 == -1 && num10 != 0)
                    num14 = -1;
                var index3 = (int) (((double) this.position.X + (double) (this.width / 2) +
                                     (double) ((this.width / 2 - 1) * num10)) / 16.0);
                var index4 = (int) (((double) this.position.Y + 0.1) / 16.0);
                if (num14 == -1)
                    index4 = (int) (((double) this.position.Y + (double) this.height - 1.0) / 16.0);
                var num15 = this.width / 16 + (this.width % 16 == 0 ? 0 : 1);
                var num16 = this.height / 16 + (this.height % 16 == 0 ? 0 : 1);
                if (num10 != 0)
                {
                    for (var index5 = 0; index5 < num16; ++index5)
                    {
                        if (Main.tile[index3, index4 + index5 * num14] == null)
                            return;
                        tupleList1.Add(new Tuple<int, int>(index3, index4 + index5 * num14));
                    }
                }

                if (num11 != 0)
                {
                    for (var index5 = 0; index5 < num15; ++index5)
                    {
                        if (Main.tile[(int) ((double) this.position.X / 16.0) + index5, index4] == null)
                            return;
                        tupleList1.Add(new Tuple<int, int>((int) ((double) this.position.X / 16.0) + index5, index4));
                    }
                }

                var index6 = (int) (((double) mouse.X + (double) ((this.width / 2 - 1) * num10)) / 16.0);
                var index7 = (int) (((double) mouse.Y + 0.1 - (double) (this.height / 2 + 1)) / 16.0);
                if (num14 == -1)
                    index7 = (int) (((double) mouse.Y + (double) (this.height / 2) - 1.0) / 16.0);
                if ((double) this.gravDir == -1.0 && num11 == 0)
                    ++index7;
                if (index7 < 10)
                    index7 = 10;
                if (index7 > Main.maxTilesY - 10)
                    index7 = Main.maxTilesY - 10;
                var num17 = this.width / 16 + (this.width % 16 == 0 ? 0 : 1);
                var num18 = this.height / 16 + (this.height % 16 == 0 ? 0 : 1);
                if (num10 != 0)
                {
                    for (var index5 = 0; index5 < num18; ++index5)
                    {
                        if (Main.tile[index6, index7 + index5 * num14] == null)
                            return;
                        tupleList2.Add(new Tuple<int, int>(index6, index7 + index5 * num14));
                    }
                }

                if (num11 != 0)
                {
                    for (var index5 = 0; index5 < num17; ++index5)
                    {
                        if (Main.tile[(int) (((double) mouse.X - (double) (this.width / 2)) / 16.0) + index5, index7] ==
                            null)
                            return;
                        tupleList2.Add(new Tuple<int, int>(
                            (int) (((double) mouse.X - (double) (this.width / 2)) / 16.0) + index5, index7));
                    }
                }

                var tupleList3 = new List<Tuple<int, int>>();
                while (tupleList1.Count > 0)
                {
                    var tuple1 = tupleList1[0];
                    var tuple2 = tupleList2[0];
                    Tuple<int, int> col;
                    if (!Collision.TupleHitLine(tuple1.Item1, tuple1.Item2, tuple2.Item1, tuple2.Item2,
                        num10 * (int) this.gravDir, -num11 * (int) this.gravDir, ignoreTargets, out col))
                    {
                        tupleList1.Remove(tuple1);
                        tupleList2.Remove(tuple2);
                    }
                    else
                    {
                        if (col.Item1 != tuple2.Item1 || col.Item2 != tuple2.Item2)
                            tupleList3.Add(col);
                        var tile = Main.tile[col.Item1, col.Item2];
                        if (!tile.inActive() && tile.active() &&
                            (Main.tileSolid[(int) tile.type] && !Main.tileSolidTop[(int) tile.type]) &&
                            !ignoreTargets.Contains(col))
                            tupleList3.Add(col);
                        tupleList1.Remove(tuple1);
                        tupleList2.Remove(tuple2);
                    }
                }

                var tupleList4 = new List<Tuple<int, int>>();
                for (var index5 = 0; index5 < tupleList3.Count; ++index5)
                {
                    if (!WorldGen.CanKillTile(tupleList3[index5].Item1, tupleList3[index5].Item2))
                        tupleList4.Add(tupleList3[index5]);
                }

                for (var index5 = 0; index5 < tupleList4.Count; ++index5)
                    tupleList3.Remove(tupleList4[index5]);
                tupleList4.Clear();
                if (tupleList3.Count > 0)
                {
                    var num19 = -1f;
                    var tuple = tupleList3[0];
                    for (var index5 = 0; index5 < tupleList3.Count; ++index5)
                    {
                        var num20 =
                            Vector2.Distance(
                                new Vector2((float) tupleList3[index5].Item1, (float) tupleList3[index5].Item2) * 16f +
                                Vector2.One * 8f, this.Center);
                        if ((double) num19 == -1.0 || (double) num20 < (double) num19)
                        {
                            num19 = num20;
                            tuple = tupleList3[index5];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9))
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList1.Clear();
                tupleList2.Clear();
                tupleList3.Clear();
            }

            if (Player.SmartCursorSettings.SmartAxeAfterPickaxe)
                Player.SmartCursor_Axe(obj, ref mouse, num6, num7, num8, num9, ref fX, ref fY);
            if ((obj.type == 509 || obj.type == 850 || (obj.type == 851 || obj.type == 3612)) && (fX == -1 && fY == -1))
            {
                var tupleList = new List<Tuple<int, int>>();
                var num10 = 0;
                if (obj.type == 509)
                    num10 = 1;
                if (obj.type == 850)
                    num10 = 2;
                if (obj.type == 851)
                    num10 = 3;
                if (obj.type == 3612)
                    num10 = 4;
                var flag2 = false;
                if (Main.tile[index1, index2].wire() && num10 == 1)
                    flag2 = true;
                if (Main.tile[index1, index2].wire2() && num10 == 2)
                    flag2 = true;
                if (Main.tile[index1, index2].wire3() && num10 == 3)
                    flag2 = true;
                if (Main.tile[index1, index2].wire4() && num10 == 4)
                    flag2 = true;
                if (!flag2)
                {
                    for (var index3 = num6; index3 <= num7; ++index3)
                    {
                        for (var index4 = num8; index4 <= num9; ++index4)
                        {
                            var tile = Main.tile[index3, index4];
                            if (tile.wire() && num10 == 1 || tile.wire2() && num10 == 2 ||
                                (tile.wire3() && num10 == 3 || tile.wire4() && num10 == 4))
                            {
                                if (num10 == 1)
                                {
                                    if (!Main.tile[index3 - 1, index4].wire())
                                        tupleList.Add(new Tuple<int, int>(index3 - 1, index4));
                                    if (!Main.tile[index3 + 1, index4].wire())
                                        tupleList.Add(new Tuple<int, int>(index3 + 1, index4));
                                    if (!Main.tile[index3, index4 - 1].wire())
                                        tupleList.Add(new Tuple<int, int>(index3, index4 - 1));
                                    if (!Main.tile[index3, index4 + 1].wire())
                                        tupleList.Add(new Tuple<int, int>(index3, index4 + 1));
                                }

                                if (num10 == 2)
                                {
                                    if (!Main.tile[index3 - 1, index4].wire2())
                                        tupleList.Add(new Tuple<int, int>(index3 - 1, index4));
                                    if (!Main.tile[index3 + 1, index4].wire2())
                                        tupleList.Add(new Tuple<int, int>(index3 + 1, index4));
                                    if (!Main.tile[index3, index4 - 1].wire2())
                                        tupleList.Add(new Tuple<int, int>(index3, index4 - 1));
                                    if (!Main.tile[index3, index4 + 1].wire2())
                                        tupleList.Add(new Tuple<int, int>(index3, index4 + 1));
                                }

                                if (num10 == 3)
                                {
                                    if (!Main.tile[index3 - 1, index4].wire3())
                                        tupleList.Add(new Tuple<int, int>(index3 - 1, index4));
                                    if (!Main.tile[index3 + 1, index4].wire3())
                                        tupleList.Add(new Tuple<int, int>(index3 + 1, index4));
                                    if (!Main.tile[index3, index4 - 1].wire3())
                                        tupleList.Add(new Tuple<int, int>(index3, index4 - 1));
                                    if (!Main.tile[index3, index4 + 1].wire3())
                                        tupleList.Add(new Tuple<int, int>(index3, index4 + 1));
                                }

                                if (num10 == 4)
                                {
                                    if (!Main.tile[index3 - 1, index4].wire4())
                                        tupleList.Add(new Tuple<int, int>(index3 - 1, index4));
                                    if (!Main.tile[index3 + 1, index4].wire4())
                                        tupleList.Add(new Tuple<int, int>(index3 + 1, index4));
                                    if (!Main.tile[index3, index4 - 1].wire4())
                                        tupleList.Add(new Tuple<int, int>(index3, index4 - 1));
                                    if (!Main.tile[index3, index4 + 1].wire4())
                                        tupleList.Add(new Tuple<int, int>(index3, index4 + 1));
                                }
                            }
                        }
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num11 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        var num12 =
                            Vector2.Distance(
                                new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) * 16f +
                                Vector2.One * 8f, mouse);
                        if ((double) num11 == -1.0 || (double) num12 < (double) num11)
                        {
                            num11 = num12;
                            tuple = tupleList[index3];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9))
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            if (obj.type == 3625 && fX == -1 && fY == -1)
            {
                var tupleList = new List<Tuple<int, int>>();
                var toolMode1 = WiresUI.Settings.ToolMode;
                var multiToolMode = (WiresUI.Settings.MultiToolMode) 0;
                if (Main.tile[index1, index2].wire())
                    multiToolMode |= WiresUI.Settings.MultiToolMode.Red;
                if (Main.tile[index1, index2].wire2())
                    multiToolMode |= WiresUI.Settings.MultiToolMode.Blue;
                if (Main.tile[index1, index2].wire3())
                    multiToolMode |= WiresUI.Settings.MultiToolMode.Green;
                if (Main.tile[index1, index2].wire4())
                    multiToolMode |= WiresUI.Settings.MultiToolMode.Yellow;
                var flag2 = (toolMode1 & ~WiresUI.Settings.MultiToolMode.Cutter) == multiToolMode;
                var toolMode2 = WiresUI.Settings.ToolMode;
                if (!flag2)
                {
                    var flag3 = toolMode2.HasFlag((Enum) WiresUI.Settings.MultiToolMode.Red);
                    var flag4 = toolMode2.HasFlag((Enum) WiresUI.Settings.MultiToolMode.Blue);
                    var flag5 = toolMode2.HasFlag((Enum) WiresUI.Settings.MultiToolMode.Green);
                    var flag6 = toolMode2.HasFlag((Enum) WiresUI.Settings.MultiToolMode.Yellow);
                    var flag7 = toolMode2.HasFlag((Enum) WiresUI.Settings.MultiToolMode.Cutter);
                    for (var index3 = num6; index3 <= num7; ++index3)
                    {
                        for (var index4 = num8; index4 <= num9; ++index4)
                        {
                            var tile = Main.tile[index3, index4];
                            if (flag7)
                            {
                                if (tile.wire() && flag3 || tile.wire2() && flag4 ||
                                    (tile.wire3() && flag5 || tile.wire4() && flag6))
                                    tupleList.Add(new Tuple<int, int>(index3, index4));
                            }
                            else if (tile.wire() && flag3 || tile.wire2() && flag4 ||
                                     (tile.wire3() && flag5 || tile.wire4() && flag6))
                            {
                                if (flag3)
                                {
                                    if (!Main.tile[index3 - 1, index4].wire())
                                        tupleList.Add(new Tuple<int, int>(index3 - 1, index4));
                                    if (!Main.tile[index3 + 1, index4].wire())
                                        tupleList.Add(new Tuple<int, int>(index3 + 1, index4));
                                    if (!Main.tile[index3, index4 - 1].wire())
                                        tupleList.Add(new Tuple<int, int>(index3, index4 - 1));
                                    if (!Main.tile[index3, index4 + 1].wire())
                                        tupleList.Add(new Tuple<int, int>(index3, index4 + 1));
                                }

                                if (flag4)
                                {
                                    if (!Main.tile[index3 - 1, index4].wire2())
                                        tupleList.Add(new Tuple<int, int>(index3 - 1, index4));
                                    if (!Main.tile[index3 + 1, index4].wire2())
                                        tupleList.Add(new Tuple<int, int>(index3 + 1, index4));
                                    if (!Main.tile[index3, index4 - 1].wire2())
                                        tupleList.Add(new Tuple<int, int>(index3, index4 - 1));
                                    if (!Main.tile[index3, index4 + 1].wire2())
                                        tupleList.Add(new Tuple<int, int>(index3, index4 + 1));
                                }

                                if (flag5)
                                {
                                    if (!Main.tile[index3 - 1, index4].wire3())
                                        tupleList.Add(new Tuple<int, int>(index3 - 1, index4));
                                    if (!Main.tile[index3 + 1, index4].wire3())
                                        tupleList.Add(new Tuple<int, int>(index3 + 1, index4));
                                    if (!Main.tile[index3, index4 - 1].wire3())
                                        tupleList.Add(new Tuple<int, int>(index3, index4 - 1));
                                    if (!Main.tile[index3, index4 + 1].wire3())
                                        tupleList.Add(new Tuple<int, int>(index3, index4 + 1));
                                }

                                if (flag6)
                                {
                                    if (!Main.tile[index3 - 1, index4].wire4())
                                        tupleList.Add(new Tuple<int, int>(index3 - 1, index4));
                                    if (!Main.tile[index3 + 1, index4].wire4())
                                        tupleList.Add(new Tuple<int, int>(index3 + 1, index4));
                                    if (!Main.tile[index3, index4 - 1].wire4())
                                        tupleList.Add(new Tuple<int, int>(index3, index4 - 1));
                                    if (!Main.tile[index3, index4 + 1].wire4())
                                        tupleList.Add(new Tuple<int, int>(index3, index4 + 1));
                                }
                            }
                        }
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        var num11 =
                            Vector2.Distance(
                                new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) * 16f +
                                Vector2.One * 8f, mouse);
                        if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                        {
                            num10 = num11;
                            tuple = tupleList[index3];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9))
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            if (obj.hammer > 0 && fX == -1 && fY == -1)
            {
                var vector2 = mouse - this.Center;
                var num10 = Math.Sign(vector2.X);
                var num11 = Math.Sign(vector2.Y);
                if ((double) Math.Abs(vector2.X) > (double) Math.Abs(vector2.Y) * 3.0)
                {
                    num11 = 0;
                    mouse.Y = this.Center.Y;
                }

                if ((double) Math.Abs(vector2.Y) > (double) Math.Abs(vector2.X) * 3.0)
                {
                    num10 = 0;
                    mouse.X = this.Center.X;
                }

                var num12 = (int) this.Center.X / 16;
                var num13 = (int) this.Center.Y / 16;
                var tupleList1 = new List<Tuple<int, int>>();
                var tupleList2 = new List<Tuple<int, int>>();
                var num14 = 1;
                if (num11 == -1 && num10 != 0)
                    num14 = -1;
                var index3 = (int) (((double) this.position.X + (double) (this.width / 2) +
                                     (double) ((this.width / 2 - 1) * num10)) / 16.0);
                var index4 = (int) (((double) this.position.Y + 0.1) / 16.0);
                if (num14 == -1)
                    index4 = (int) (((double) this.position.Y + (double) this.height - 1.0) / 16.0);
                var num15 = this.width / 16 + (this.width % 16 == 0 ? 0 : 1);
                var num16 = this.height / 16 + (this.height % 16 == 0 ? 0 : 1);
                if (num10 != 0)
                {
                    for (var index5 = 0; index5 < num16; ++index5)
                    {
                        if (Main.tile[index3, index4 + index5 * num14] == null)
                            return;
                        tupleList1.Add(new Tuple<int, int>(index3, index4 + index5 * num14));
                    }
                }

                if (num11 != 0)
                {
                    for (var index5 = 0; index5 < num15; ++index5)
                    {
                        if (Main.tile[(int) ((double) this.position.X / 16.0) + index5, index4] == null)
                            return;
                        tupleList1.Add(new Tuple<int, int>((int) ((double) this.position.X / 16.0) + index5, index4));
                    }
                }

                var index6 = (int) (((double) mouse.X + (double) ((this.width / 2 - 1) * num10)) / 16.0);
                var index7 = (int) (((double) mouse.Y + 0.1 - (double) (this.height / 2 + 1)) / 16.0);
                if (num14 == -1)
                    index7 = (int) (((double) mouse.Y + (double) (this.height / 2) - 1.0) / 16.0);
                if ((double) this.gravDir == -1.0 && num11 == 0)
                    ++index7;
                if (index7 < 10)
                    index7 = 10;
                if (index7 > Main.maxTilesY - 10)
                    index7 = Main.maxTilesY - 10;
                var num17 = this.width / 16 + (this.width % 16 == 0 ? 0 : 1);
                var num18 = this.height / 16 + (this.height % 16 == 0 ? 0 : 1);
                if (num10 != 0)
                {
                    for (var index5 = 0; index5 < num18; ++index5)
                    {
                        if (Main.tile[index6, index7 + index5 * num14] == null)
                            return;
                        tupleList2.Add(new Tuple<int, int>(index6, index7 + index5 * num14));
                    }
                }

                if (num11 != 0)
                {
                    for (var index5 = 0; index5 < num17; ++index5)
                    {
                        if (Main.tile[(int) (((double) mouse.X - (double) (this.width / 2)) / 16.0) + index5, index7] ==
                            null)
                            return;
                        tupleList2.Add(new Tuple<int, int>(
                            (int) (((double) mouse.X - (double) (this.width / 2)) / 16.0) + index5, index7));
                    }
                }

                var tupleList3 = new List<Tuple<int, int>>();
                while (tupleList1.Count > 0)
                {
                    var tuple1 = tupleList1[0];
                    var tuple2 = tupleList2[0];
                    var tuple3 =
                        Collision.TupleHitLineWall(tuple1.Item1, tuple1.Item2, tuple2.Item1, tuple2.Item2);
                    if (tuple3.Item1 == -1 || tuple3.Item2 == -1)
                    {
                        tupleList1.Remove(tuple1);
                        tupleList2.Remove(tuple2);
                    }
                    else
                    {
                        if (tuple3.Item1 != tuple2.Item1 || tuple3.Item2 != tuple2.Item2)
                            tupleList3.Add(tuple3);
                        var tile = Main.tile[tuple3.Item1, tuple3.Item2];
                        if (Collision.HitWallSubstep(tuple3.Item1, tuple3.Item2))
                            tupleList3.Add(tuple3);
                        tupleList1.Remove(tuple1);
                        tupleList2.Remove(tuple2);
                    }
                }

                if (tupleList3.Count > 0)
                {
                    var num19 = -1f;
                    var tuple = tupleList3[0];
                    for (var index5 = 0; index5 < tupleList3.Count; ++index5)
                    {
                        var num20 =
                            Vector2.Distance(
                                new Vector2((float) tupleList3[index5].Item1, (float) tupleList3[index5].Item2) * 16f +
                                Vector2.One * 8f, this.Center);
                        if ((double) num19 == -1.0 || (double) num20 < (double) num19)
                        {
                            num19 = num20;
                            tuple = tupleList3[index5];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9))
                    {
                        this.poundRelease = false;
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList3.Clear();
                tupleList1.Clear();
                tupleList2.Clear();
            }

            if (obj.hammer > 0 && fX == -1 && fY == -1)
            {
                var tupleList = new List<Tuple<int, int>>();
                for (var x = num6; x <= num7; ++x)
                {
                    for (var y = num8; y <= num9; ++y)
                    {
                        if (Main.tile[x, y].wall > (byte) 0 && Collision.HitWallSubstep(x, y))
                            tupleList.Add(new Tuple<int, int>(x, y));
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        var num11 =
                            Vector2.Distance(
                                new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) * 16f +
                                Vector2.One * 8f, mouse);
                        if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                        {
                            num10 = num11;
                            tuple = tupleList[index3];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9))
                    {
                        this.poundRelease = false;
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            if (obj.type == 3620 && fX == -1 && fY == -1)
            {
                var tupleList = new List<Tuple<int, int>>();
                for (var index3 = num6; index3 <= num7; ++index3)
                {
                    for (var index4 = num8; index4 <= num9; ++index4)
                    {
                        var tile = Main.tile[index3, index4];
                        if (tile.active() && tile.actuator() &&
                            (!this.ActuationRodLock || this.ActuationRodLockSetting == tile.inActive()))
                            tupleList.Add(new Tuple<int, int>(index3, index4));
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        var num11 =
                            Vector2.Distance(
                                new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) * 16f +
                                Vector2.One * 8f, mouse);
                        if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                        {
                            num10 = num11;
                            tuple = tupleList[index3];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9))
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            if (obj.type == 510 && fX == -1 && fY == -1)
            {
                var tupleList = new List<Tuple<int, int>>();
                for (var index3 = num6; index3 <= num7; ++index3)
                {
                    for (var index4 = num8; index4 <= num9; ++index4)
                    {
                        var tile = Main.tile[index3, index4];
                        if (tile.wire() || tile.wire2() || (tile.wire3() || tile.wire4()) || tile.actuator())
                            tupleList.Add(new Tuple<int, int>(index3, index4));
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        var num11 =
                            Vector2.Distance(
                                new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) * 16f +
                                Vector2.One * 8f, mouse);
                        if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                        {
                            num10 = num11;
                            tuple = tupleList[index3];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9))
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            if (obj.createTile >= 0 && TileID.Sets.Platforms[obj.createTile] && (fX == -1 && fY == -1))
            {
                var tupleList = new List<Tuple<int, int>>();
                var flag2 = false;
                if (Main.tile[index1, index2].active() && TileID.Sets.Platforms[(int) Main.tile[index1, index2].type])
                    flag2 = true;
                if (!flag2)
                {
                    for (var index3 = num6; index3 <= num7; ++index3)
                    {
                        for (var index4 = num8; index4 <= num9; ++index4)
                        {
                            var tile1 = Main.tile[index3, index4];
                            if (tile1.active() && TileID.Sets.Platforms[(int) tile1.type])
                            {
                                var num10 = (int) tile1.slope();
                                if (num10 != 2 && !Main.tile[index3 - 1, index4 - 1].active())
                                    tupleList.Add(new Tuple<int, int>(index3 - 1, index4 - 1));
                                if (!Main.tile[index3 - 1, index4].active())
                                    tupleList.Add(new Tuple<int, int>(index3 - 1, index4));
                                if (num10 != 1 && !Main.tile[index3 - 1, index4 + 1].active())
                                    tupleList.Add(new Tuple<int, int>(index3 - 1, index4 + 1));
                                if (num10 != 1 && !Main.tile[index3 + 1, index4 - 1].active())
                                    tupleList.Add(new Tuple<int, int>(index3 + 1, index4 - 1));
                                if (!Main.tile[index3 + 1, index4].active())
                                    tupleList.Add(new Tuple<int, int>(index3 + 1, index4));
                                if (num10 != 2 && !Main.tile[index3 + 1, index4 + 1].active())
                                    tupleList.Add(new Tuple<int, int>(index3 + 1, index4 + 1));
                            }

                            if (!tile1.active())
                            {
                                var num10 = 0;
                                var num11 = 1;
                                var tile2 = Main.tile[index3 + num10, index4 + num11];
                                if (tile2.active() && Main.tileSolid[(int) tile2.type] &&
                                    !Main.tileSolidTop[(int) tile2.type])
                                    tupleList.Add(new Tuple<int, int>(index3, index4));
                                var num12 = -1;
                                var num13 = 0;
                                var tile3 = Main.tile[index3 + num12, index4 + num13];
                                if (tile3.active() && Main.tileSolid[(int) tile3.type] &&
                                    !Main.tileSolidTop[(int) tile3.type])
                                    tupleList.Add(new Tuple<int, int>(index3, index4));
                                var num14 = 1;
                                var num15 = 0;
                                var tile4 = Main.tile[index3 + num14, index4 + num15];
                                if (tile4.active() && Main.tileSolid[(int) tile4.type] &&
                                    !Main.tileSolidTop[(int) tile4.type])
                                    tupleList.Add(new Tuple<int, int>(index3, index4));
                            }
                        }
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        var num11 =
                            Vector2.Distance(
                                new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) * 16f +
                                Vector2.One * 8f, mouse);
                        if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                        {
                            num10 = num11;
                            tuple = tupleList[index3];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9))
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            if ((obj.type == 2340 || obj.type == 2739) && (fX == -1 && fY == -1))
            {
                var tupleList = new List<Tuple<int, int>>();
                var flag2 = false;
                if (Main.tile[index1, index2].active() && Main.tile[index1, index2].type == (ushort) 314)
                    flag2 = true;
                if (!flag2)
                {
                    for (var index3 = num6; index3 <= num7; ++index3)
                    {
                        for (var index4 = num8; index4 <= num9; ++index4)
                        {
                            var tile = Main.tile[index3, index4];
                            if (tile.active() && tile.type == (ushort) 314)
                            {
                                var flag3 = Main.tile[index3 + 1, index4 + 1].active() &&
                                             Main.tile[index3 + 1, index4 + 1].type == (ushort) 314;
                                var flag4 = Main.tile[index3 + 1, index4 - 1].active() &&
                                             Main.tile[index3 + 1, index4 - 1].type == (ushort) 314;
                                var flag5 = Main.tile[index3 - 1, index4 + 1].active() &&
                                             Main.tile[index3 - 1, index4 + 1].type == (ushort) 314;
                                var flag6 = Main.tile[index3 - 1, index4 - 1].active() &&
                                             Main.tile[index3 - 1, index4 - 1].type == (ushort) 314;
                                if ((!Main.tile[index3 - 1, index4 - 1].active() ||
                                     Main.tileCut[(int) Main.tile[index3 - 1, index4 - 1].type] ||
                                     TileID.Sets.BreakableWhenPlacing[(int) Main.tile[index3 - 1, index4 - 1].type]) &&
                                    (flag3 || !flag4))
                                    tupleList.Add(new Tuple<int, int>(index3 - 1, index4 - 1));
                                if (!Main.tile[index3 - 1, index4].active() ||
                                    Main.tileCut[(int) Main.tile[index3 - 1, index4].type] ||
                                    TileID.Sets.BreakableWhenPlacing[(int) Main.tile[index3 - 1, index4].type])
                                    tupleList.Add(new Tuple<int, int>(index3 - 1, index4));
                                if ((!Main.tile[index3 - 1, index4 + 1].active() ||
                                     Main.tileCut[(int) Main.tile[index3 - 1, index4 + 1].type] ||
                                     TileID.Sets.BreakableWhenPlacing[(int) Main.tile[index3 - 1, index4 + 1].type]) &&
                                    (flag4 || !flag3))
                                    tupleList.Add(new Tuple<int, int>(index3 - 1, index4 + 1));
                                if ((!Main.tile[index3 + 1, index4 - 1].active() ||
                                     Main.tileCut[(int) Main.tile[index3 + 1, index4 - 1].type] ||
                                     TileID.Sets.BreakableWhenPlacing[(int) Main.tile[index3 + 1, index4 - 1].type]) &&
                                    (flag5 || !flag6))
                                    tupleList.Add(new Tuple<int, int>(index3 + 1, index4 - 1));
                                if (!Main.tile[index3 + 1, index4].active() ||
                                    Main.tileCut[(int) Main.tile[index3 + 1, index4].type] ||
                                    TileID.Sets.BreakableWhenPlacing[(int) Main.tile[index3 + 1, index4].type])
                                    tupleList.Add(new Tuple<int, int>(index3 + 1, index4));
                                if ((!Main.tile[index3 + 1, index4 + 1].active() ||
                                     Main.tileCut[(int) Main.tile[index3 + 1, index4 + 1].type] ||
                                     TileID.Sets.BreakableWhenPlacing[(int) Main.tile[index3 + 1, index4 + 1].type]) &&
                                    (flag6 || !flag5))
                                    tupleList.Add(new Tuple<int, int>(index3 + 1, index4 + 1));
                            }
                        }
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        if ((!Main.tile[tupleList[index3].Item1, tupleList[index3].Item2 - 1].active() ||
                             Main.tile[tupleList[index3].Item1, tupleList[index3].Item2 - 1].type != (ushort) 314) &&
                            (!Main.tile[tupleList[index3].Item1, tupleList[index3].Item2 + 1].active() ||
                             Main.tile[tupleList[index3].Item1, tupleList[index3].Item2 + 1].type != (ushort) 314))
                        {
                            var num11 =
                                Vector2.Distance(
                                    new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) *
                                    16f + Vector2.One * 8f, mouse);
                            if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                            {
                                num10 = num11;
                                tuple = tupleList[index3];
                            }
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9) &&
                        (double) num10 != -1.0)
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            if (obj.type == 2492 && fX == -1 && fY == -1)
            {
                var tupleList = new List<Tuple<int, int>>();
                var flag2 = false;
                if (Main.tile[index1, index2].active() && Main.tile[index1, index2].type == (ushort) 314)
                    flag2 = true;
                if (!flag2)
                {
                    for (var index3 = num6; index3 <= num7; ++index3)
                    {
                        for (var index4 = num8; index4 <= num9; ++index4)
                        {
                            var tile = Main.tile[index3, index4];
                            if (tile.active() && tile.type == (ushort) 314)
                            {
                                if (!Main.tile[index3 - 1, index4].active() ||
                                    Main.tileCut[(int) Main.tile[index3 - 1, index4].type] ||
                                    TileID.Sets.BreakableWhenPlacing[(int) Main.tile[index3 - 1, index4].type])
                                    tupleList.Add(new Tuple<int, int>(index3 - 1, index4));
                                if (!Main.tile[index3 + 1, index4].active() ||
                                    Main.tileCut[(int) Main.tile[index3 + 1, index4].type] ||
                                    TileID.Sets.BreakableWhenPlacing[(int) Main.tile[index3 + 1, index4].type])
                                    tupleList.Add(new Tuple<int, int>(index3 + 1, index4));
                            }
                        }
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        if ((!Main.tile[tupleList[index3].Item1, tupleList[index3].Item2 - 1].active() ||
                             Main.tile[tupleList[index3].Item1, tupleList[index3].Item2 - 1].type != (ushort) 314) &&
                            (!Main.tile[tupleList[index3].Item1, tupleList[index3].Item2 + 1].active() ||
                             Main.tile[tupleList[index3].Item1, tupleList[index3].Item2 + 1].type != (ushort) 314))
                        {
                            var num11 =
                                Vector2.Distance(
                                    new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) *
                                    16f + Vector2.One * 8f, mouse);
                            if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                            {
                                num10 = num11;
                                tuple = tupleList[index3];
                            }
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9) &&
                        (double) num10 != -1.0)
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            if (obj.createWall > 0 && fX == -1 && fY == -1)
            {
                var tupleList = new List<Tuple<int, int>>();
                for (var x = num6; x <= num7; ++x)
                {
                    for (var y = num8; y <= num9; ++y)
                    {
                        var tile = Main.tile[x, y];
                        if (tile.wall == (byte) 0 &&
                            (!tile.active() || !Main.tileSolid[(int) tile.type] ||
                             Main.tileSolidTop[(int) tile.type]) && Collision.CanHitWithCheck(this.position, this.width,
                                this.height, new Vector2((float) x, (float) y) * 16f, 16, 16,
                                new Utils.PerLinePoint(DelegateMethods.NotDoorStand)))
                        {
                            var flag2 = false;
                            if (Main.tile[x - 1, y].active() || Main.tile[x - 1, y].wall > (byte) 0)
                                flag2 = true;
                            if (Main.tile[x + 1, y].active() || Main.tile[x + 1, y].wall > (byte) 0)
                                flag2 = true;
                            if (Main.tile[x, y - 1].active() || Main.tile[x, y - 1].wall > (byte) 0)
                                flag2 = true;
                            if (Main.tile[x, y + 1].active() || Main.tile[x, y + 1].wall > (byte) 0)
                                flag2 = true;
                            if (WorldGen.IsOpenDoorAnchorFrame(x, y))
                                flag2 = false;
                            if (flag2)
                                tupleList.Add(new Tuple<int, int>(x, y));
                        }
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        var num11 =
                            Vector2.Distance(
                                new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) * 16f +
                                Vector2.One * 8f, mouse);
                        if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                        {
                            num10 = num11;
                            tuple = tupleList[index3];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9))
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            if (obj.createTile == 254 && fX == -1 && fY == -1)
            {
                var tupleList = new List<Tuple<int, int>>();
                for (var index3 = num6; index3 <= num7; ++index3)
                {
                    for (var index4 = num8; index4 <= num9; ++index4)
                    {
                        var tile1 = Main.tile[index3, index4 + 1];
                        var tile2 = Main.tile[index3 - 1, index4 + 1];
                        if ((double) index4 <= Main.worldSurface - 2.0)
                        {
                            var flag2 = true;
                            if (!tile2.active() || !tile1.active())
                                flag2 = false;
                            if (tile2.slope() > (byte) 0 || tile1.slope() > (byte) 0 ||
                                (tile2.halfBrick() || tile1.halfBrick()))
                                flag2 = false;
                            if (tile2.type != (ushort) 2 && tile2.type != (ushort) 109)
                                flag2 = false;
                            if (tile1.type != (ushort) 2 && tile1.type != (ushort) 109)
                                flag2 = false;
                            for (var x = index3 - 1; x <= index3; ++x)
                            {
                                for (var y = index4 - 1; y <= index4; ++y)
                                {
                                    if (Main.tile[x, y].active() &&
                                        !WorldGen.CanCutTile(x, y, TileCuttingContext.AttackMelee))
                                        flag2 = false;
                                }
                            }

                            if (flag2)
                                tupleList.Add(new Tuple<int, int>(index3, index4));
                        }
                        else
                            break;
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        var num11 =
                            Vector2.Distance(
                                new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) * 16f +
                                Vector2.One * 8f, mouse);
                        if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                        {
                            num10 = num11;
                            tuple = tupleList[index3];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9))
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            if (obj.createTile == 454 && fX == -1 && fY == -1)
            {
                var tupleList = new List<Tuple<int, int>>();
                for (var index3 = num6; index3 <= num7; ++index3)
                {
                    for (var index4 = num8; index4 <= num9 && (double) index4 <= Main.worldSurface - 2.0; ++index4)
                    {
                        var flag2 = true;
                        for (var index5 = index3 - 2; index5 <= index3 + 1; ++index5)
                        {
                            for (var index6 = index4 - 1; index6 <= index4 + 2; ++index6)
                            {
                                var testTile = Main.tile[index5, index6];
                                if (index6 == index4 - 1)
                                {
                                    if (!WorldGen.SolidTile(testTile))
                                        flag2 = false;
                                }
                                else if (testTile.active() &&
                                         (!Main.tileCut[(int) testTile.type] || testTile.type == (ushort) 454))
                                    flag2 = false;
                            }
                        }

                        if (flag2)
                            tupleList.Add(new Tuple<int, int>(index3, index4));
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        var num11 =
                            Vector2.Distance(
                                new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) * 16f +
                                Vector2.One * 8f, mouse);
                        if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                        {
                            num10 = num11;
                            tuple = tupleList[index3];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9))
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            if (obj.createTile == 138 && fX == -1 && fY == -1)
            {
                var tupleList = new List<Tuple<int, int>>();
                for (var index3 = num6; index3 <= num7; ++index3)
                {
                    for (var index4 = num8; index4 <= num9; ++index4)
                    {
                        var tile1 = Main.tile[index3, index4 + 1];
                        var tile2 = Main.tile[index3 - 1, index4 + 1];
                        var flag2 = true;
                        if (!tile2.nactive() || !tile1.nactive())
                            flag2 = false;
                        if (tile2.slope() > (byte) 0 || tile1.slope() > (byte) 0 ||
                            (tile2.halfBrick() || tile1.halfBrick()))
                            flag2 = false;
                        if (Main.tileNoAttach[(int) tile2.type] || Main.tileNoAttach[(int) tile1.type])
                            flag2 = false;
                        for (var index5 = index3 - 1; index5 <= index3; ++index5)
                        {
                            for (var index6 = index4 - 1; index6 <= index4; ++index6)
                            {
                                var tile3 = Main.tile[index5, index6];
                                if (tile3.active() && !Main.tileCut[(int) tile3.type])
                                    flag2 = false;
                            }
                        }

                        var rectangle =
                            new Microsoft.Xna.Framework.Rectangle(index3 * 16 - 16, index4 * 16 - 16, 32, 32);
                        for (var index5 = 0; index5 < (int) byte.MaxValue; ++index5)
                        {
                            var player = Main.player[index5];
                            if (player.active && !player.dead && player.Hitbox.Intersects(rectangle))
                            {
                                flag2 = false;
                                break;
                            }
                        }

                        if (flag2)
                            tupleList.Add(new Tuple<int, int>(index3, index4));
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        var num11 =
                            Vector2.Distance(
                                new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) * 16f +
                                Vector2.One * 8f, mouse);
                        if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                        {
                            num10 = num11;
                            tuple = tupleList[index3];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9))
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            Player.SmartCursor_Torch(obj, ref mouse, num6, num7, num8, num9, ref fX, ref fY, index1, index2);
            Player.SmartCursor_Filling(obj, ref mouse, num6, num7, num8, num9, ref fX, ref fY, index1, index2);
            if (Player.SmartCursorSettings.SmartBlocksEnabled && obj.createTile > -1 &&
                (obj.type != 213 && Main.tileSolid[obj.createTile]) &&
                (!Main.tileSolidTop[obj.createTile] && !Main.tileFrameImportant[obj.createTile] &&
                 (fX == -1 && fY == -1)))
            {
                var tupleList = new List<Tuple<int, int>>();
                var flag2 = false;
                if (Main.tile[index1, index2].active())
                    flag2 = true;
                if (!Collision.InTileBounds(index1, index2, num6, num8, num7, num9))
                    flag2 = true;
                if (!flag2)
                {
                    for (var index3 = num6; index3 <= num7; ++index3)
                    {
                        for (var index4 = num8; index4 <= num9; ++index4)
                        {
                            var tile = Main.tile[index3, index4];
                            if (!tile.active() || Main.tileCut[(int) tile.type] ||
                                TileID.Sets.BreakableWhenPlacing[(int) tile.type])
                            {
                                var flag3 = false;
                                if (Main.tile[index3 - 1, index4].active() &&
                                    Main.tileSolid[(int) Main.tile[index3 - 1, index4].type] &&
                                    !Main.tileSolidTop[(int) Main.tile[index3 - 1, index4].type])
                                    flag3 = true;
                                if (Main.tile[index3 + 1, index4].active() &&
                                    Main.tileSolid[(int) Main.tile[index3 + 1, index4].type] &&
                                    !Main.tileSolidTop[(int) Main.tile[index3 + 1, index4].type])
                                    flag3 = true;
                                if (Main.tile[index3, index4 - 1].active() &&
                                    Main.tileSolid[(int) Main.tile[index3, index4 - 1].type] &&
                                    !Main.tileSolidTop[(int) Main.tile[index3, index4 - 1].type])
                                    flag3 = true;
                                if (Main.tile[index3, index4 + 1].active() &&
                                    Main.tileSolid[(int) Main.tile[index3, index4 + 1].type] &&
                                    !Main.tileSolidTop[(int) Main.tile[index3, index4 + 1].type])
                                    flag3 = true;
                                if (flag3)
                                    tupleList.Add(new Tuple<int, int>(index3, index4));
                            }
                        }
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        if (Collision.EmptyTile(tupleList[index3].Item1, tupleList[index3].Item2, false))
                        {
                            var num11 =
                                Vector2.Distance(
                                    new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) *
                                    16f + Vector2.One * 8f, mouse);
                            if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                            {
                                num10 = num11;
                                tuple = tupleList[index3];
                            }
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9) &&
                        (double) num10 != -1.0)
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            if ((obj.type == 1072 || obj.type == 1544) && (num1 != 0 && fX == -1) && fY == -1)
            {
                var tupleList = new List<Tuple<int, int>>();
                for (var index3 = num6; index3 <= num7; ++index3)
                {
                    for (var index4 = num8; index4 <= num9; ++index4)
                    {
                        var tile = Main.tile[index3, index4];
                        if (tile.wall > (byte) 0 && (int) tile.wallColor() != num1 &&
                            (!tile.active() || !Main.tileSolid[(int) tile.type] || Main.tileSolidTop[(int) tile.type]))
                            tupleList.Add(new Tuple<int, int>(index3, index4));
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        var num11 =
                            Vector2.Distance(
                                new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) * 16f +
                                Vector2.One * 8f, mouse);
                        if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                        {
                            num10 = num11;
                            tuple = tupleList[index3];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9))
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            if ((obj.type == 1071 || obj.type == 1543) && (num1 != 0 && fX == -1) && fY == -1)
            {
                var tupleList = new List<Tuple<int, int>>();
                for (var index3 = num6; index3 <= num7; ++index3)
                {
                    for (var index4 = num8; index4 <= num9; ++index4)
                    {
                        var tile = Main.tile[index3, index4];
                        if (tile.active() && (int) tile.color() != num1)
                            tupleList.Add(new Tuple<int, int>(index3, index4));
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        var num11 =
                            Vector2.Distance(
                                new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) * 16f +
                                Vector2.One * 8f, mouse);
                        if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                        {
                            num10 = num11;
                            tuple = tupleList[index3];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9))
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            if ((obj.type == 1100 || obj.type == 1545) && (fX == -1 && fY == -1))
            {
                var tupleList = new List<Tuple<int, int>>();
                for (var index3 = num6; index3 <= num7; ++index3)
                {
                    for (var index4 = num8; index4 <= num9; ++index4)
                    {
                        var tile = Main.tile[index3, index4];
                        if (tile.active() && tile.color() > (byte) 0 ||
                            tile.wall > (byte) 0 && tile.wallColor() > (byte) 0)
                            tupleList.Add(new Tuple<int, int>(index3, index4));
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        var num11 =
                            Vector2.Distance(
                                new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) * 16f +
                                Vector2.One * 8f, mouse);
                        if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                        {
                            num10 = num11;
                            tuple = tupleList[index3];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9))
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            if (obj.type == 27 && fX == -1 && (fY == -1 && num8 > 20))
            {
                var tupleList1 = new List<Tuple<int, int>>();
                for (var index3 = num6; index3 <= num7; ++index3)
                {
                    for (var endY = num8; endY <= num9; ++endY)
                    {
                        var tile1 = Main.tile[index3, endY];
                        var tile2 = Main.tile[index3, endY - 1];
                        var testTile = Main.tile[index3, endY + 1];
                        var tile3 = Main.tile[index3 - 1, endY];
                        var tile4 = Main.tile[index3 + 1, endY];
                        var tile5 = Main.tile[index3 - 2, endY];
                        var tile6 = Main.tile[index3 + 2, endY];
                        var tile7 = Main.tile[index3 - 3, endY];
                        var tile8 = Main.tile[index3 + 3, endY];
                        if ((!tile1.active() || Main.tileCut[(int) tile1.type] ||
                             TileID.Sets.BreakableWhenPlacing[(int) tile1.type]) &&
                            (!tile2.active() || Main.tileCut[(int) tile2.type] ||
                             TileID.Sets.BreakableWhenPlacing[(int) tile2.type]) &&
                            ((!tile3.active() || tile3.type != (ushort) 20) &&
                             (!tile4.active() || tile4.type != (ushort) 20) &&
                             ((!tile5.active() || tile5.type != (ushort) 20) &&
                              (!tile6.active() || tile6.type != (ushort) 20))) &&
                            ((!tile7.active() || tile7.type != (ushort) 20) &&
                             (!tile8.active() || tile8.type != (ushort) 20) &&
                             (testTile.active() && WorldGen.SolidTile2(testTile))))
                        {
                            switch (testTile.type)
                            {
                                case 2:
                                case 23:
                                case 53:
                                case 109:
                                case 112:
                                case 116:
                                case 147:
                                case 199:
                                case 234:
                                    if (tile3.liquid == (byte) 0 && tile1.liquid == (byte) 0 &&
                                        (tile4.liquid == (byte) 0 &&
                                         WorldGen.EmptyTileCheck(index3 - 2, index3 + 2, endY - 20, endY, 20)))
                                    {
                                        tupleList1.Add(new Tuple<int, int>(index3, endY));
                                        continue;
                                    }

                                    continue;
                                case 60:
                                    if (WorldGen.EmptyTileCheck(index3 - 2, index3 + 2, endY - 20, endY, 20))
                                    {
                                        tupleList1.Add(new Tuple<int, int>(index3, endY));
                                        continue;
                                    }

                                    continue;
                                default:
                                    continue;
                            }
                        }
                    }
                }

                var tupleList2 = new List<Tuple<int, int>>();
                for (var index3 = 0; index3 < tupleList1.Count; ++index3)
                {
                    var flag2 = false;
                    var num10 = -1;
                    while (num10 < 2)
                    {
                        var tile = Main.tile[tupleList1[index3].Item1 + num10, tupleList1[index3].Item2 + 1];
                        if (tile.active())
                        {
                            switch (tile.type)
                            {
                                case 2:
                                case 23:
                                case 53:
                                case 60:
                                case 109:
                                case 112:
                                case 116:
                                case 147:
                                case 199:
                                case 234:
                                    flag2 = true;
                                    break;
                            }
                        }

                        num10 += 2;
                    }

                    if (!flag2)
                        tupleList2.Add(tupleList1[index3]);
                }

                for (var index3 = 0; index3 < tupleList2.Count; ++index3)
                    tupleList1.Remove(tupleList2[index3]);
                tupleList2.Clear();
                if (tupleList1.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList1[0];
                    for (var index3 = 0; index3 < tupleList1.Count; ++index3)
                    {
                        var num11 =
                            Vector2.Distance(
                                new Vector2((float) tupleList1[index3].Item1, (float) tupleList1[index3].Item2) * 16f +
                                Vector2.One * 8f, mouse);
                        if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                        {
                            num10 = num11;
                            tuple = tupleList1[index3];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9))
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList1.Clear();
            }

            if (obj.type == 205 && fX == -1 && fY == -1)
            {
                var tupleList = new List<Tuple<int, int>>();
                for (var index3 = num6; index3 <= num7; ++index3)
                {
                    for (var index4 = num8; index4 <= num9; ++index4)
                    {
                        var tile = Main.tile[index3, index4];
                        if (tile.liquid > (byte) 0)
                        {
                            var num10 = (int) tile.liquidType();
                            var num11 = 0;
                            for (var index5 = index3 - 1; index5 <= index3 + 1; ++index5)
                            {
                                for (var index6 = index4 - 1; index6 <= index4 + 1; ++index6)
                                {
                                    if ((int) Main.tile[index5, index6].liquidType() == num10)
                                        num11 += (int) Main.tile[index5, index6].liquid;
                                }
                            }

                            if (num11 > 100)
                                tupleList.Add(new Tuple<int, int>(index3, index4));
                        }
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        var num11 =
                            Vector2.Distance(
                                new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) * 16f +
                                Vector2.One * 8f, mouse);
                        if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                        {
                            num10 = num11;
                            tuple = tupleList[index3];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9))
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            if (obj.type == 849 && fX == -1 && fY == -1)
            {
                var tupleList = new List<Tuple<int, int>>();
                for (var index3 = num6; index3 <= num7; ++index3)
                {
                    for (var index4 = num8; index4 <= num9; ++index4)
                    {
                        var tile = Main.tile[index3, index4];
                        if ((tile.wire() || tile.wire2() || (tile.wire3() || tile.wire4())) &&
                            (!tile.actuator() && tile.active()))
                            tupleList.Add(new Tuple<int, int>(index3, index4));
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        var num11 =
                            Vector2.Distance(
                                new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) * 16f +
                                Vector2.One * 8f, mouse);
                        if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                        {
                            num10 = num11;
                            tuple = tupleList[index3];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9))
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            if (obj.createTile == 82 && fX == -1 && fY == -1)
            {
                var placeStyle = obj.placeStyle;
                var tupleList = new List<Tuple<int, int>>();
                for (var index3 = num6; index3 <= num7; ++index3)
                {
                    for (var index4 = num8; index4 <= num9; ++index4)
                    {
                        var tile1 = Main.tile[index3, index4];
                        var tile2 = Main.tile[index3, index4 + 1];
                        if ((!tile1.active() || TileID.Sets.BreakableWhenPlacing[(int) tile1.type] ||
                             Main.tileCut[(int) tile1.type] && tile1.type != (ushort) 82 && tile1.type != (ushort) 83
                            ) && (tile2.nactive() && !tile2.halfBrick() && tile2.slope() == (byte) 0))
                        {
                            switch (placeStyle)
                            {
                                case 0:
                                    if (tile2.type != (ushort) 78 && tile2.type != (ushort) 380 &&
                                        (tile2.type != (ushort) 2 && tile2.type != (ushort) 109) ||
                                        tile1.liquid > (byte) 0)
                                        continue;
                                    break;
                                case 1:
                                    if (tile2.type != (ushort) 78 && tile2.type != (ushort) 380 &&
                                        tile2.type != (ushort) 60 || tile1.liquid > (byte) 0)
                                        continue;
                                    break;
                                case 2:
                                    if (tile2.type != (ushort) 78 && tile2.type != (ushort) 380 &&
                                        (tile2.type != (ushort) 0 && tile2.type != (ushort) 59) ||
                                        tile1.liquid > (byte) 0)
                                        continue;
                                    break;
                                case 3:
                                    if (tile2.type != (ushort) 78 && tile2.type != (ushort) 380 &&
                                        (tile2.type != (ushort) 203 && tile2.type != (ushort) 199) &&
                                        (tile2.type != (ushort) 23 && tile2.type != (ushort) 25) ||
                                        tile1.liquid > (byte) 0)
                                        continue;
                                    break;
                                case 4:
                                    if (tile2.type != (ushort) 78 && tile2.type != (ushort) 380 &&
                                        (tile2.type != (ushort) 53 && tile2.type != (ushort) 116) ||
                                        tile1.liquid > (byte) 0 && tile1.lava())
                                        continue;
                                    break;
                                case 5:
                                    if (tile2.type != (ushort) 78 && tile2.type != (ushort) 380 &&
                                        tile2.type != (ushort) 57 || tile1.liquid > (byte) 0 && !tile1.lava())
                                        continue;
                                    break;
                                case 6:
                                    if (tile2.type != (ushort) 78 && tile2.type != (ushort) 380 &&
                                        (tile2.type != (ushort) 147 && tile2.type != (ushort) 161) &&
                                        (tile2.type != (ushort) 163 && tile2.type != (ushort) 164 &&
                                         tile2.type != (ushort) 200) || tile1.liquid > (byte) 0 && tile1.lava())
                                        continue;
                                    break;
                            }

                            tupleList.Add(new Tuple<int, int>(index3, index4));
                        }
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        var num11 =
                            Vector2.Distance(
                                new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) * 16f +
                                Vector2.One * 8f, mouse);
                        if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                        {
                            num10 = num11;
                            tuple = tupleList[index3];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9))
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            if (obj.createTile == 380 && fX == -1 && fY == -1)
            {
                var tupleList = new List<Tuple<int, int>>();
                var flag2 = false;
                if (Main.tile[index1, index2].active() && Main.tile[index1, index2].type == (ushort) 380)
                    flag2 = true;
                if (!flag2)
                {
                    for (var index3 = num6; index3 <= num7; ++index3)
                    {
                        for (var index4 = num8; index4 <= num9; ++index4)
                        {
                            var tile = Main.tile[index3, index4];
                            if (tile.active() && tile.type == (ushort) 380)
                            {
                                if (!Main.tile[index3 - 1, index4].active() ||
                                    Main.tileCut[(int) Main.tile[index3 - 1, index4].type] ||
                                    TileID.Sets.BreakableWhenPlacing[(int) Main.tile[index3 - 1, index4].type])
                                    tupleList.Add(new Tuple<int, int>(index3 - 1, index4));
                                if (!Main.tile[index3 + 1, index4].active() ||
                                    Main.tileCut[(int) Main.tile[index3 + 1, index4].type] ||
                                    TileID.Sets.BreakableWhenPlacing[(int) Main.tile[index3 + 1, index4].type])
                                    tupleList.Add(new Tuple<int, int>(index3 + 1, index4));
                            }
                        }
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        var num11 =
                            Vector2.Distance(
                                new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) * 16f +
                                Vector2.One * 8f, mouse);
                        if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                        {
                            num10 = num11;
                            tuple = tupleList[index3];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9) &&
                        (double) num10 != -1.0)
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            if (obj.createTile == 78 && fX == -1 && fY == -1)
            {
                var tupleList = new List<Tuple<int, int>>();
                var flag2 = false;
                if (Main.tile[index1, index2].active())
                    flag2 = true;
                if (!Collision.InTileBounds(index1, index2, num6, num8, num7, num9))
                    flag2 = true;
                if (!flag2)
                {
                    for (var index3 = num6; index3 <= num7; ++index3)
                    {
                        for (var index4 = num8; index4 <= num9; ++index4)
                        {
                            var tile1 = Main.tile[index3, index4];
                            var tile2 = Main.tile[index3, index4 + 1];
                            if ((!tile1.active() || Main.tileCut[(int) tile1.type] ||
                                 TileID.Sets.BreakableWhenPlacing[(int) tile1.type]) &&
                                (tile2.nactive() && !tile2.halfBrick() &&
                                 (tile2.slope() == (byte) 0 && Main.tileSolid[(int) tile2.type])))
                                tupleList.Add(new Tuple<int, int>(index3, index4));
                        }
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        if (Collision.EmptyTile(tupleList[index3].Item1, tupleList[index3].Item2, true))
                        {
                            var num11 =
                                Vector2.Distance(
                                    new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) *
                                    16f + Vector2.One * 8f, mouse);
                            if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                            {
                                num10 = num11;
                                tuple = tupleList[index3];
                            }
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9) &&
                        (double) num10 != -1.0)
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            if (obj.type == 213 && fX == -1 && fY == -1)
            {
                var tupleList = new List<Tuple<int, int>>();
                for (var index3 = num6; index3 <= num7; ++index3)
                {
                    for (var index4 = num8; index4 <= num9; ++index4)
                    {
                        var tile = Main.tile[index3, index4];
                        var flag2 = !Main.tile[index3 - 1, index4].active() ||
                                     !Main.tile[index3, index4 + 1].active() ||
                                     !Main.tile[index3 + 1, index4].active() || !Main.tile[index3, index4 - 1].active();
                        var flag3 = !Main.tile[index3 - 1, index4 - 1].active() ||
                                     !Main.tile[index3 - 1, index4 + 1].active() ||
                                     !Main.tile[index3 + 1, index4 + 1].active() ||
                                     !Main.tile[index3 + 1, index4 - 1].active();
                        if (tile.active() && !tile.inActive() && (tile.type == (ushort) 0 || tile.type == (ushort) 1) &&
                            (flag2 || tile.type == (ushort) 0 && flag3))
                            tupleList.Add(new Tuple<int, int>(index3, index4));
                    }
                }

                if (tupleList.Count > 0)
                {
                    var num10 = -1f;
                    var tuple = tupleList[0];
                    for (var index3 = 0; index3 < tupleList.Count; ++index3)
                    {
                        var num11 =
                            Vector2.Distance(
                                new Vector2((float) tupleList[index3].Item1, (float) tupleList[index3].Item2) * 16f +
                                Vector2.One * 8f, mouse);
                        if ((double) num10 == -1.0 || (double) num11 < (double) num10)
                        {
                            num10 = num11;
                            tuple = tupleList[index3];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, num6, num8, num7, num9))
                    {
                        fX = tuple.Item1;
                        fY = tuple.Item2;
                    }
                }

                tupleList.Clear();
            }

            if (fX != -1 && fY != -1)
            {
                Main.SmartCursorX = Player.tileTargetX = fX;
                Main.SmartCursorY = Player.tileTargetY = fY;
                Main.SmartCursorShowing = true;
            }

            ignoreTargets.Clear();
        }

        public void SmartInteractLookup()
        {
            if (this.whoAmI != Main.myPlayer)
                return;
            Main.SmartInteractShowingGenuine = false;
            Main.SmartInteractShowingFake = false;
            Main.SmartInteractNPC = -1;
            Main.SmartInteractNPCsNearby.Clear();
            Main.SmartInteractTileCoords.Clear();
            Main.SmartInteractTileCoordsSelected.Clear();
            int num1;
            Main.TileInteractionHY = num1 = -1;
            Main.TileInteractionLY = num1;
            Main.TileInteractionHX = num1;
            Main.TileInteractionLX = num1;
            var smartCursorEnabled = Main.SmartCursorEnabled;
            if (!smartCursorEnabled && !PlayerInput.UsingGamepad)
                return;
            var obj = this.inventory[this.selectedItem];
            var vector2 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY);
            if ((double) this.gravDir == -1.0)
                vector2.Y = Main.screenPosition.Y + (float) Main.screenHeight - (float) Main.mouseY;
            var index1 = Player.tileTargetX;
            var index2 = Player.tileTargetY;
            if (index1 < 10)
                index1 = 10;
            if (index1 > Main.maxTilesX - 10)
                index1 = Main.maxTilesX - 10;
            if (index2 < 10)
                index2 = 10;
            if (index2 > Main.maxTilesY - 10)
                index2 = Main.maxTilesY - 10;
            var flag1 = false;
            if (Main.tile[index1, index2] == null)
                return;
            if (Main.tile[index1, index2].active())
            {
                switch (Main.tile[index1, index2].type)
                {
                    case 4:
                    case 33:
                    case 334:
                    case 395:
                    case 410:
                    case 455:
                        flag1 = true;
                        break;
                }
            }

            if (flag1)
                return;
            var num2 = 0;
            var num3 = (int) ((double) this.position.X / 16.0) - Player.tileRangeX - num2 + 1;
            var num4 = (int) (((double) this.position.X + (double) this.width) / 16.0) + Player.tileRangeX + num2 - 1;
            var num5 = (int) ((double) this.position.Y / 16.0) - Player.tileRangeY - num2 + 1;
            var num6 = (int) (((double) this.position.Y + (double) this.height) / 16.0) + Player.tileRangeY + num2 - 2;
            var lx1 = Utils.Clamp<int>(num3, 10, Main.maxTilesX - 10);
            var hx = Utils.Clamp<int>(num4, 10, Main.maxTilesX - 10);
            var ly1 = Utils.Clamp<int>(num5, 10, Main.maxTilesY - 10);
            var hy = Utils.Clamp<int>(num6, 10, Main.maxTilesY - 10);
            var tupleList1 = new List<Tuple<int, int>>();
            for (var index3 = 0; index3 < this.grapCount; ++index3)
            {
                var projectile = Main.projectile[this.grappling[index3]];
                var num7 = (int) projectile.Center.X / 16;
                var num8 = (int) projectile.Center.Y / 16;
                tupleList1.Add(new Tuple<int, int>(num7, num8));
            }

            var x1 = -1;
            var y1 = -1;
            var index4 = -1;
            var point1 = Main.ReverseGravitySupport(Main.MouseScreen, 0.0f) + Main.screenPosition;
            if (x1 == -1 && y1 == -1)
            {
                var tupleList2 = new List<Tuple<int, int>>();
                for (var index3 = lx1; index3 <= hx; ++index3)
                {
                    for (var index5 = ly1; index5 <= hy; ++index5)
                    {
                        var tile = Main.tile[index3, index5];
                        if (tile.active())
                        {
                            switch (tile.type)
                            {
                                case 10:
                                case 11:
                                case 21:
                                case 29:
                                case 55:
                                case 79:
                                case 85:
                                case 88:
                                case 97:
                                case 104:
                                case 125:
                                case 132:
                                case 136:
                                case 139:
                                case 144:
                                case 207:
                                case 209:
                                case 215:
                                case 216:
                                case 287:
                                case 335:
                                case 338:
                                case 354:
                                case 377:
                                case 386:
                                case 387:
                                case 388:
                                case 389:
                                case 410:
                                case 411:
                                case 425:
                                case 441:
                                case 455:
                                case 463:
                                case 467:
                                case 468:
                                    tupleList2.Add(new Tuple<int, int>(index3, index5));
                                    continue;
                                case 212:
                                    if (this.HasItem(949))
                                    {
                                        tupleList2.Add(new Tuple<int, int>(index3, index5));
                                        continue;
                                    }

                                    continue;
                                case 237:
                                    if (this.HasItem(1293))
                                    {
                                        tupleList2.Add(new Tuple<int, int>(index3, index5));
                                        continue;
                                    }

                                    continue;
                                case 356:
                                    if (!Main.fastForwardTime && (Main.netMode == 1 || Main.sundialCooldown == 0))
                                    {
                                        tupleList2.Add(new Tuple<int, int>(index3, index5));
                                        continue;
                                    }

                                    continue;
                                default:
                                    continue;
                            }
                        }
                    }
                }

                if (tupleList2.Count > 0)
                {
                    var num7 = -1f;
                    var tuple = tupleList2[0];
                    for (var index3 = 0; index3 < tupleList2.Count; ++index3)
                    {
                        var num8 =
                            Vector2.Distance(
                                new Vector2((float) tupleList2[index3].Item1, (float) tupleList2[index3].Item2) * 16f +
                                Vector2.One * 8f, vector2);
                        if ((double) num7 == -1.0 || (double) num8 < (double) num7)
                        {
                            num7 = num8;
                            tuple = tupleList2[index3];
                        }
                    }

                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, lx1, ly1, hx, hy))
                    {
                        x1 = tuple.Item1;
                        y1 = tuple.Item2;
                    }
                }

                var flag2 = false;
                for (var index3 = 0; index3 < tupleList2.Count; ++index3)
                {
                    var index5 = tupleList2[index3].Item1;
                    var index6 = tupleList2[index3].Item2;
                    var tile = Main.tile[index5, index6];
                    var num7 = 0;
                    var num8 = 0;
                    var num9 = 18;
                    var num10 = 18;
                    var num11 = 0;
                    var num12 = 2;
                    switch (tile.type)
                    {
                        case 10:
                            num7 = 1;
                            num8 = 3;
                            num12 = 0;
                            break;
                        case 11:
                        case 356:
                        case 410:
                            num7 = 2;
                            num8 = 3;
                            num12 = 0;
                            break;
                        case 21:
                        case 55:
                        case 85:
                        case 97:
                        case 125:
                        case 132:
                        case 287:
                        case 335:
                        case 386:
                        case 411:
                        case 425:
                        case 441:
                        case 467:
                        case 468:
                            num7 = 2;
                            num8 = 2;
                            break;
                        case 29:
                        case 387:
                            num7 = 2;
                            num8 = 1;
                            break;
                        case 79:
                            num7 = 4;
                            num8 = 2;
                            num12 = 0;
                            break;
                        case 88:
                            num7 = 3;
                            num8 = 1;
                            num12 = 0;
                            break;
                        case 104:
                            num7 = 2;
                            num8 = 5;
                            break;
                        case 136:
                        case 144:
                            num7 = 1;
                            num8 = 1;
                            num12 = 0;
                            break;
                        case 139:
                            num7 = 2;
                            num8 = 2;
                            num12 = 0;
                            break;
                        case 207:
                            num7 = 2;
                            num8 = 4;
                            num12 = 0;
                            break;
                        case 209:
                            num7 = 4;
                            num8 = 3;
                            num12 = 0;
                            break;
                        case 212:
                            num7 = 4;
                            num8 = 3;
                            break;
                        case 215:
                        case 237:
                        case 377:
                            num7 = 3;
                            num8 = 2;
                            break;
                        case 216:
                        case 338:
                            num7 = 1;
                            num8 = 2;
                            break;
                        case 354:
                        case 455:
                            num7 = 3;
                            num8 = 3;
                            num12 = 0;
                            break;
                        case 388:
                        case 389:
                            num7 = 1;
                            num8 = 5;
                            break;
                        case 463:
                            num7 = 3;
                            num8 = 4;
                            break;
                    }

                    if (num7 != 0 && num8 != 0)
                    {
                        var lx2 = index5 - (int) tile.frameX % (num9 * num7 + num11) / num9;
                        var ly2 = index6 - (int) tile.frameY % (num10 * num8 + num12) / num10;
                        var flag3 = Collision.InTileBounds(x1, y1, lx2, ly2, lx2 + num7 - 1, ly2 + num8 - 1);
                        if (!smartCursorEnabled)
                            flag3 = flag3 && Collision.InTileBounds((int) vector2.X / 16, (int) vector2.Y / 16, lx2,
                                        ly2, lx2 + num7 - 1, ly2 + num8 - 1);
                        if (flag2)
                            flag3 = false;
                        if (!flag2 && flag3)
                            flag2 = true;
                        for (var x2 = lx2; x2 < lx2 + num7; ++x2)
                        {
                            for (var y2 = ly2; y2 < ly2 + num8; ++y2)
                            {
                                var point2 = new Point(x2, y2);
                                if (!Main.SmartInteractTileCoords.Contains(point2))
                                {
                                    if (flag3)
                                        Main.SmartInteractTileCoordsSelected.Add(point2);
                                    if (flag3 || smartCursorEnabled)
                                        Main.SmartInteractTileCoords.Add(point2);
                                }
                            }
                        }
                    }
                }

                tupleList2.Clear();
            }

            if (index4 == -1 && smartCursorEnabled)
            {
                var rectangle =
                    new Microsoft.Xna.Framework.Rectangle(lx1 * 16, ly1 * 16, (hx - lx1) * 16 + 16,
                        (hy - ly1) * 16 + 16);
                var flag2 = false;
                for (var index3 = 0; index3 < 200; ++index3)
                {
                    var npc = Main.npc[index3];
                    if (npc.active && npc.townNPC && npc.Hitbox.Intersects(rectangle))
                    {
                        Main.SmartInteractNPCsNearby.Add(index3);
                        if (!flag2)
                        {
                            var num7 = npc.Hitbox.Distance(point1);
                            if (index4 == -1 || (double) Main.npc[index4].Hitbox.Distance(point1) > (double) num7)
                                index4 = index3;
                            if ((double) num7 == 0.0)
                            {
                                flag2 = true;
                                index4 = index3;
                                break;
                            }
                        }
                    }
                }

                if (flag2)
                {
                    x1 = y1 = -1;
                    Main.SmartInteractTileCoordsSelected.Clear();
                }
            }

            if (x1 != -1 && y1 != -1 && index4 != -1)
            {
                var r = new Microsoft.Xna.Framework.Rectangle(x1 * 16, y1 * 16, 16, 16);
                var hitbox = Main.npc[index4].Hitbox;
                if ((double) r.Distance(point1) < (double) hitbox.Distance(point1))
                {
                    index4 = -1;
                }
                else
                {
                    x1 = y1 = -1;
                    Main.SmartInteractTileCoordsSelected.Clear();
                }
            }

            if (UILinkPointNavigator.InUse || PlayerInput.UsingGamepad && Main.HoveringOverAnNPC)
                Main.SmartInteractTileCoordsSelected.Clear();
            if (PlayerInput.UsingGamepad && !Main.SmartCursorEnabled)
            {
                if (x1 != -1 && y1 != -1)
                {
                    Main.TileInteractionLX = lx1 - 10;
                    Main.TileInteractionLY = ly1 - 10;
                    Main.TileInteractionHX = hx + 10;
                    Main.TileInteractionHY = hy + 10;
                    Main.SmartInteractShowingFake = Main.SmartInteractTileCoords.Count > 0;
                }
            }
            else
            {
                if (x1 != -1 && y1 != -1)
                {
                    Main.SmartInteractX = x1;
                    Main.SmartInteractY = y1;
                    Main.SmartInteractShowingGenuine = true;
                    Main.TileInteractionLX = lx1 - 10;
                    Main.TileInteractionLY = ly1 - 10;
                    Main.TileInteractionHX = hx + 10;
                    Main.TileInteractionHY = hy + 10;
                }

                if (index4 != -1)
                {
                    Main.SmartInteractNPC = index4;
                    Main.SmartInteractShowingGenuine = true;
                }
            }

            tupleList1.Clear();
        }

        private static void SmartCursor_Axe(Item item, ref Vector2 mouse, int LX, int HX, int LY, int HY, ref int fX,
            ref int fY)
        {
            if (item.axe <= 0 || fX != -1 || fY != -1)
                return;
            var num1 = -1f;
            for (var index1 = LX; index1 <= HX; ++index1)
            {
                for (var index2 = LY; index2 <= HY; ++index2)
                {
                    if (Main.tile[index1, index2].active())
                    {
                        var tile = Main.tile[index1, index2];
                        if (Main.tileAxe[(int) tile.type])
                        {
                            var x = index1;
                            var y = index2;
                            if (tile.type == (ushort) 5)
                            {
                                if (Collision.InTileBounds(x + 1, y, LX, LY, HX, HY))
                                {
                                    if (Main.tile[x, y].frameY >= (short) 198 && Main.tile[x, y].frameX == (short) 44)
                                        ++x;
                                    if (Main.tile[x, y].frameX == (short) 66 && Main.tile[x, y].frameY <= (short) 44)
                                        ++x;
                                    if (Main.tile[x, y].frameX == (short) 44 && Main.tile[x, y].frameY >= (short) 132 &&
                                        Main.tile[x, y].frameY <= (short) 176)
                                        ++x;
                                }

                                if (Collision.InTileBounds(x - 1, y, LX, LY, HX, HY))
                                {
                                    if (Main.tile[x, y].frameY >= (short) 198 && Main.tile[x, y].frameX == (short) 66)
                                        --x;
                                    if (Main.tile[x, y].frameX == (short) 88 && Main.tile[x, y].frameY >= (short) 66 &&
                                        Main.tile[x, y].frameY <= (short) 110)
                                        --x;
                                    if (Main.tile[x, y].frameX == (short) 22 && Main.tile[x, y].frameY >= (short) 132 &&
                                        Main.tile[x, y].frameY <= (short) 176)
                                        --x;
                                }

                                while (Main.tile[x, y].active() && Main.tile[x, y].type == (ushort) 5 &&
                                       (Main.tile[x, y + 1].type == (ushort) 5 &&
                                        Collision.InTileBounds(x, y + 1, LX, LY, HX, HY)))
                                    ++y;
                            }

                            if (tile.type == (ushort) 80)
                            {
                                if (Collision.InTileBounds(x + 1, y, LX, LY, HX, HY))
                                {
                                    if (Main.tile[x, y].frameX == (short) 54)
                                        ++x;
                                    if (Main.tile[x, y].frameX == (short) 108 && Main.tile[x, y].frameY == (short) 36)
                                        ++x;
                                }

                                if (Collision.InTileBounds(x - 1, y, LX, LY, HX, HY))
                                {
                                    if (Main.tile[x, y].frameX == (short) 36)
                                        --x;
                                    if (Main.tile[x, y].frameX == (short) 108 && Main.tile[x, y].frameY == (short) 18)
                                        --x;
                                }

                                while (Main.tile[x, y].active() && Main.tile[x, y].type == (ushort) 80 &&
                                       (Main.tile[x, y + 1].type == (ushort) 80 &&
                                        Collision.InTileBounds(x, y + 1, LX, LY, HX, HY)))
                                    ++y;
                            }

                            if (tile.type == (ushort) 323 || tile.type == (ushort) 72)
                            {
                                while (Main.tile[x, y].active() &&
                                       (Main.tile[x, y].type == (ushort) 323 &&
                                        Main.tile[x, y + 1].type == (ushort) 323 ||
                                        Main.tile[x, y].type == (ushort) 72 && Main.tile[x, y + 1].type == (ushort) 72
                                       ) && Collision.InTileBounds(x, y + 1, LX, LY, HX, HY))
                                    ++y;
                            }

                            var num2 = Vector2.Distance(new Vector2((float) x, (float) y) * 16f + Vector2.One * 8f,
                                mouse);
                            if ((double) num1 == -1.0 || (double) num2 < (double) num1)
                            {
                                num1 = num2;
                                fX = x;
                                fY = y;
                            }
                        }
                    }
                }
            }
        }

        private static void SmartCursor_Filling(Item item, ref Vector2 mouse, int LX, int HX, int LY, int HY,
            ref int fX, ref int fY, int tX, int tY)
        {
            if (Player.SmartCursorSettings.SmartBlocksEnabled || item.createTile <= -1 ||
                (item.type == 213 || !Main.tileSolid[item.createTile]) ||
                (Main.tileSolidTop[item.createTile] || Main.tileFrameImportant[item.createTile] ||
                 (fX != -1 || fY != -1)))
                return;
            var tupleList = new List<Tuple<int, int>>();
            var flag1 = false;
            if (Main.tile[tX, tY].active())
                flag1 = true;
            if (!Collision.InTileBounds(tX, tY, LX, LY, HX, HY))
                flag1 = true;
            if (!flag1)
            {
                for (var index1 = LX; index1 <= HX; ++index1)
                {
                    for (var index2 = LY; index2 <= HY; ++index2)
                    {
                        var tile = Main.tile[index1, index2];
                        if (!tile.active() || Main.tileCut[(int) tile.type] ||
                            TileID.Sets.BreakableWhenPlacing[(int) tile.type])
                        {
                            var num = 0;
                            if (Main.tile[index1 - 1, index2].active() &&
                                Main.tileSolid[(int) Main.tile[index1 - 1, index2].type] &&
                                !Main.tileSolidTop[(int) Main.tile[index1 - 1, index2].type])
                                ++num;
                            if (Main.tile[index1 + 1, index2].active() &&
                                Main.tileSolid[(int) Main.tile[index1 + 1, index2].type] &&
                                !Main.tileSolidTop[(int) Main.tile[index1 + 1, index2].type])
                                ++num;
                            if (Main.tile[index1, index2 - 1].active() &&
                                Main.tileSolid[(int) Main.tile[index1, index2 - 1].type] &&
                                !Main.tileSolidTop[(int) Main.tile[index1, index2 - 1].type])
                                ++num;
                            if (Main.tile[index1, index2 + 1].active() &&
                                Main.tileSolid[(int) Main.tile[index1, index2 + 1].type] &&
                                !Main.tileSolidTop[(int) Main.tile[index1, index2 + 1].type])
                                ++num;
                            if (num >= 2)
                                tupleList.Add(new Tuple<int, int>(index1, index2));
                        }
                    }
                }
            }

            if (tupleList.Count > 0)
            {
                var num1 = -1f;
                var num2 = float.PositiveInfinity;
                var tuple = tupleList[0];
                for (var index = 0; index < tupleList.Count; ++index)
                {
                    if (Collision.EmptyTile(tupleList[index].Item1, tupleList[index].Item2, true))
                    {
                        var vector2 =
                            new Vector2((float) tupleList[index].Item1, (float) tupleList[index].Item2) * 16f +
                            Vector2.One * 8f - mouse;
                        var flag2 = false;
                        var num3 = Math.Abs(vector2.X);
                        var num4 = vector2.Length();
                        if ((double) num3 < (double) num2)
                            flag2 = true;
                        if ((double) num3 == (double) num2 && ((double) num1 == -1.0 || (double) num4 < (double) num1))
                            flag2 = true;
                        if (flag2)
                        {
                            num1 = num4;
                            num2 = num3;
                            tuple = tupleList[index];
                        }
                    }
                }

                if (Collision.InTileBounds(tuple.Item1, tuple.Item2, LX, LY, HX, HY) && (double) num1 != -1.0)
                {
                    fX = tuple.Item1;
                    fY = tuple.Item2;
                }
            }

            tupleList.Clear();
        }

        private static void SmartCursor_Torch(Item item, ref Vector2 mouse, int LX, int HX, int LY, int HY, ref int fX,
            ref int fY, int tX, int tY)
        {
            if (item.createTile != 4 || fX != -1 || fY != -1)
                return;
            var tupleList = new List<Tuple<int, int>>();
            var flag1 = item.type != 1333 && item.type != 523;
            for (var index1 = LX; index1 <= HX; ++index1)
            {
                for (var index2 = LY; index2 <= HY; ++index2)
                {
                    var tile1 = Main.tile[index1, index2];
                    var tile2 = Main.tile[index1 - 1, index2];
                    var tile3 = Main.tile[index1 + 1, index2];
                    var tile4 = Main.tile[index1, index2 + 1];
                    if (!tile1.active() || TileID.Sets.BreakableWhenPlacing[(int) tile1.type] ||
                        Main.tileCut[(int) tile1.type] && tile1.type != (ushort) 82 && tile1.type != (ushort) 83)
                    {
                        var flag2 = false;
                        for (var index3 = index1 - 7; index3 <= index1 + 7; ++index3)
                        {
                            for (var index4 = index2 - 7; index4 <= index2 + 7; ++index4)
                            {
                                if (Main.tile[index3, index4] != null && Main.tile[index3, index4].type == (ushort) 4)
                                {
                                    flag2 = true;
                                    break;
                                }
                            }

                            if (flag2)
                                break;
                        }

                        if (!flag2 && (!flag1 || tile1.liquid <= (byte) 0) &&
                            (tile1.wall > (byte) 0 ||
                             tile2.active() && (tile2.slope() == (byte) 0 || (int) tile2.slope() % 2 != 1) &&
                             (Main.tileSolid[(int) tile2.type] && !Main.tileNoAttach[(int) tile2.type] &&
                              (!Main.tileSolidTop[(int) tile2.type] && !TileID.Sets.NotReallySolid[(int) tile2.type]) ||
                              tile2.type == (ushort) 124 ||
                              tile2.type == (ushort) 5 && Main.tile[index1 - 1, index2 - 1].type == (ushort) 5 &&
                              Main.tile[index1 - 1, index2 + 1].type == (ushort) 5) ||
                             (tile3.active() && (tile3.slope() == (byte) 0 || (int) tile3.slope() % 2 != 0) &&
                              (Main.tileSolid[(int) tile3.type] && !Main.tileNoAttach[(int) tile3.type] &&
                               (!Main.tileSolidTop[(int) tile3.type] &&
                                !TileID.Sets.NotReallySolid[(int) tile3.type]) || tile3.type == (ushort) 124 ||
                               tile3.type == (ushort) 5 && Main.tile[index1 + 1, index2 - 1].type == (ushort) 5 &&
                               Main.tile[index1 + 1, index2 + 1].type == (ushort) 5) || tile4.active() &&
                              Main.tileSolid[(int) tile4.type] && !Main.tileNoAttach[(int) tile4.type] &&
                              (!Main.tileSolidTop[(int) tile4.type] || TileID.Sets.Platforms[(int) tile4.type] &&
                               tile4.slope() == (byte) 0) &&
                              (!TileID.Sets.NotReallySolid[(int) tile4.type] && !tile4.halfBrick() &&
                               tile4.slope() == (byte) 0))) && tile1.type != (ushort) 4)
                            tupleList.Add(new Tuple<int, int>(index1, index2));
                    }
                }
            }

            if (tupleList.Count > 0)
            {
                var num1 = -1f;
                var tuple = tupleList[0];
                for (var index = 0; index < tupleList.Count; ++index)
                {
                    var num2 =
                        Vector2.Distance(
                            new Vector2((float) tupleList[index].Item1, (float) tupleList[index].Item2) * 16f +
                            Vector2.One * 8f, mouse);
                    if ((double) num1 == -1.0 || (double) num2 < (double) num1)
                    {
                        num1 = num2;
                        tuple = tupleList[index];
                    }
                }

                if (Collision.InTileBounds(tuple.Item1, tuple.Item2, LX, LY, HX, HY))
                {
                    fX = tuple.Item1;
                    fY = tuple.Item2;
                }
            }

            tupleList.Clear();
        }

        public void SmartSelectLookup()
        {
            if (this.controlTorch && this.itemAnimation == 0)
            {
                var num1 = 0;
                var index1 = (int) (((double) Main.mouseX + (double) Main.screenPosition.X) / 16.0);
                var index2 = (int) (((double) Main.mouseY + (double) Main.screenPosition.Y) / 16.0);
                if ((double) this.gravDir == -1.0)
                    index2 =
                        (int) (((double) Main.screenPosition.Y + (double) Main.screenHeight - (double) Main.mouseY) /
                               16.0);
                var num2 = -10;
                var num3 = -10;
                var num4 = -10;
                var num5 = -10;
                var num6 = -10;
                for (var index3 = 0; index3 < 50; ++index3)
                {
                    if (this.inventory[index3].pick > 0 && num2 == -10)
                        num2 = this.inventory[index3].tileBoost;
                    if (this.inventory[index3].axe > 0 && num3 == -10)
                        num3 = this.inventory[index3].tileBoost;
                    if (this.inventory[index3].hammer > 0 && num4 == -10)
                        num4 = this.inventory[index3].tileBoost;
                    if ((this.inventory[index3].type == 929 || this.inventory[index3].type == 1338 ||
                         this.inventory[index3].type == 1345) && num5 == -10)
                        num5 = this.inventory[index3].tileBoost;
                    if ((this.inventory[index3].type == 424 || this.inventory[index3].type == 1103) && num6 == -10)
                        num6 = this.inventory[index3].tileBoost;
                }

                var num7 = 0;
                var num8 = 0;
                if ((double) this.position.X / 16.0 >= (double) index1)
                    num7 = (int) ((double) this.position.X / 16.0) - index1;
                if (((double) this.position.X + (double) this.width) / 16.0 <= (double) index1)
                    num7 = index1 - (int) (((double) this.position.X + (double) this.width) / 16.0);
                if ((double) this.position.Y / 16.0 >= (double) index2)
                    num8 = (int) ((double) this.position.Y / 16.0) - index2;
                if (((double) this.position.Y + (double) this.height) / 16.0 <= (double) index2)
                    num8 = index2 - (int) (((double) this.position.Y + (double) this.height) / 16.0);
                var flag1 = false;
                var flag2 = false;
                try
                {
                    flag2 = Main.tile[index1, index2].liquid > (byte) 0;
                    if (Main.tile[index1, index2].active())
                    {
                        var type = (int) Main.tile[index1, index2].type;
                        if (type == 219 && num7 <= num6 + Player.tileRangeX && num8 <= num6 + Player.tileRangeY)
                        {
                            num1 = 7;
                            flag1 = true;
                        }
                        else if (type == 209 && num7 <= num5 + Player.tileRangeX && num8 <= num5 + Player.tileRangeY)
                        {
                            num1 = 6;
                            flag1 = true;
                        }
                        else if (Main.tileHammer[type] && num7 <= num4 + Player.tileRangeX &&
                                 num8 <= num4 + Player.tileRangeY)
                        {
                            num1 = 1;
                            flag1 = true;
                        }
                        else if (Main.tileAxe[type] && num7 <= num3 + Player.tileRangeX &&
                                 num8 <= num3 + Player.tileRangeY)
                        {
                            num1 = 2;
                            flag1 = true;
                        }
                        else if (num7 <= num2 + Player.tileRangeX)
                        {
                            if (num8 <= num2 + Player.tileRangeY)
                            {
                                num1 = 3;
                                flag1 = true;
                            }
                        }
                    }
                    else if (flag2)
                    {
                        if (this.wet)
                        {
                            num1 = 4;
                            flag1 = true;
                        }
                    }
                }
                catch
                {
                }

                if (!flag1 && this.wet)
                    num1 = 4;
                if (num1 == 0 || num1 == 4)
                {
                    var num9 = Math.Abs((float) ((double) Main.mouseX + (double) Main.screenPosition.X -
                                                   ((double) this.position.X + (double) (this.width / 2))));
                    var num10 = Math.Abs((float) ((double) Main.mouseY + (double) Main.screenPosition.Y -
                                                    ((double) this.position.Y + (double) (this.height / 2)))) * 1.3f;
                    if (Math.Sqrt((double) num9 * (double) num9 + (double) num10 * (double) num10) > 200.0)
                        num1 = 5;
                }

                for (var index3 = 0; index3 < 50; ++index3)
                {
                    var type = this.inventory[index3].type;
                    switch (num1)
                    {
                        case 0:
                            switch (type)
                            {
                                case 8:
                                case 427:
                                case 428:
                                case 429:
                                case 430:
                                case 431:
                                case 432:
                                case 433:
                                case 523:
                                case 974:
                                case 1245:
                                case 1333:
                                case 2274:
                                case 3004:
                                case 3045:
                                case 3114:
                                    if (this.nonTorch == -1)
                                        this.nonTorch = this.selectedItem;
                                    this.selectedItem = index3;
                                    return;
                                case 282:
                                case 286:
                                case 3002:
                                case 3112:
                                    if (this.nonTorch == -1)
                                        this.nonTorch = this.selectedItem;
                                    this.selectedItem = index3;
                                    continue;
                                default:
                                    continue;
                            }
                        case 1:
                            if (this.inventory[index3].hammer > 0)
                            {
                                if (this.nonTorch == -1)
                                    this.nonTorch = this.selectedItem;
                                this.selectedItem = index3;
                                return;
                            }

                            break;
                        case 2:
                            if (this.inventory[index3].axe > 0)
                            {
                                if (this.nonTorch == -1)
                                    this.nonTorch = this.selectedItem;
                                this.selectedItem = index3;
                                return;
                            }

                            break;
                        case 3:
                            if (this.inventory[index3].pick > 0)
                            {
                                if (this.nonTorch == -1)
                                    this.nonTorch = this.selectedItem;
                                this.selectedItem = index3;
                                return;
                            }

                            break;
                        case 4:
                            if (this.inventory[index3].type != 282 && this.inventory[index3].type != 286 &&
                                (this.inventory[index3].type != 3002 && this.inventory[index3].type != 3112) &&
                                this.inventory[index3].type != 930 && (type == 8 || type == 427 ||
                                                                       (type == 428 || type == 429) ||
                                                                       (type == 430 || type == 431 ||
                                                                        (type == 432 || type == 433)) ||
                                                                       (type == 974 || type == 1245 ||
                                                                        (type == 2274 || type == 3004) ||
                                                                        (type == 3045 || type == 3114))))
                            {
                                if (this.nonTorch == -1)
                                    this.nonTorch = this.selectedItem;
                                if (this.inventory[this.selectedItem].createTile != 4)
                                {
                                    this.selectedItem = index3;
                                    break;
                                }

                                break;
                            }

                            if ((type == 282 || type == 286 || (type == 3002 || type == 3112)) && flag2)
                            {
                                if (this.nonTorch == -1)
                                    this.nonTorch = this.selectedItem;
                                this.selectedItem = index3;
                                return;
                            }

                            if (type == 930 && flag2)
                            {
                                var flag3 = false;
                                for (var index4 = 57; index4 >= 0; --index4)
                                {
                                    if (this.inventory[index4].ammo == this.inventory[index3].useAmmo)
                                    {
                                        flag3 = true;
                                        break;
                                    }
                                }

                                if (flag3)
                                {
                                    if (this.nonTorch == -1)
                                        this.nonTorch = this.selectedItem;
                                    this.selectedItem = index3;
                                    return;
                                }

                                break;
                            }

                            if (type == 1333 || type == 523)
                            {
                                if (this.nonTorch == -1)
                                    this.nonTorch = this.selectedItem;
                                this.selectedItem = index3;
                                return;
                            }

                            break;
                        case 5:
                            switch (type)
                            {
                                case 8:
                                case 427:
                                case 428:
                                case 429:
                                case 430:
                                case 431:
                                case 432:
                                case 433:
                                case 523:
                                case 974:
                                case 1245:
                                case 1333:
                                case 2274:
                                case 3004:
                                case 3045:
                                case 3114:
                                    if (this.nonTorch == -1)
                                        this.nonTorch = this.selectedItem;
                                    if (this.inventory[this.selectedItem].createTile != 4)
                                    {
                                        this.selectedItem = index3;
                                        continue;
                                    }

                                    continue;
                                case 282:
                                case 286:
                                case 3002:
                                case 3112:
                                    if (this.nonTorch == -1)
                                        this.nonTorch = this.selectedItem;
                                    this.selectedItem = index3;
                                    return;
                                case 930:
                                    var flag4 = false;
                                    for (var index4 = 57; index4 >= 0; --index4)
                                    {
                                        if (this.inventory[index4].ammo == this.inventory[index3].useAmmo)
                                        {
                                            flag4 = true;
                                            break;
                                        }
                                    }

                                    if (flag4)
                                    {
                                        if (this.nonTorch == -1)
                                            this.nonTorch = this.selectedItem;
                                        this.selectedItem = index3;
                                        return;
                                    }

                                    continue;
                                default:
                                    continue;
                            }
                        case 6:
                            var num9 = 929;
                            if (Main.tile[index1, index2].frameX >= (short) 144)
                                num9 = 1345;
                            else if (Main.tile[index1, index2].frameX >= (short) 72)
                                num9 = 1338;
                            if (type == num9)
                            {
                                if (this.nonTorch == -1)
                                    this.nonTorch = this.selectedItem;
                                this.selectedItem = index3;
                                return;
                            }

                            break;
                        case 7:
                            if (ItemID.Sets.ExtractinatorMode[type] >= 0)
                            {
                                if (this.nonTorch == -1)
                                    this.nonTorch = this.selectedItem;
                                this.selectedItem = index3;
                                return;
                            }

                            break;
                    }
                }
            }
            else if (this.itemAnimation == 0 && this.DpadRadial.SelectedItem != -1 &&
                     this.inventory[this.DpadRadial.SelectedItem].stack > 0)
            {
                if (this.nonTorch == -1)
                    this.nonTorch = this.selectedItem;
                this.selectedItem = this.DpadRadial.SelectedItem;
            }
            else if (this.itemAnimation == 0 && this.CircularRadial.SelectedItem != -1 &&
                     this.inventory[this.CircularRadial.SelectedItem].stack > 0)
            {
                if (this.nonTorch == -1)
                    this.nonTorch = this.selectedItem;
                this.selectedItem = this.CircularRadial.SelectedItem;
            }
            else
            {
                if (this.nonTorch <= -1 || this.itemAnimation != 0)
                    return;
                this.selectedItem = this.nonTorch;
                this.nonTorch = -1;
            }
        }

        public void ResetEffects()
        {
            this.extraAccessorySlots = !this.extraAccessory || !Main.expertMode && !Main.gameMenu ? 0 : 1;
            this.arcticDivingGear = false;
            this.noBuilding = false;
            this.strongBees = false;
            this.armorPenetration = 0;
            this.shroomiteStealth = false;
            this.statDefense = 0;
            this.accWatch = 0;
            this.accCompass = 0;
            this.accDepthMeter = 0;
            this.accDivingHelm = false;
            this.lifeRegen = 0;
            this.manaCost = 1f;
            this.meleeSpeed = 1f;
            this.meleeDamage = 1f;
            this.rangedDamage = 1f;
            this.thrownDamage = 1f;
            this.magicDamage = 1f;
            this.minionDamage = 1f;
            this.meleeCrit = 4;
            this.rangedCrit = 4;
            this.magicCrit = 4;
            this.thrownCrit = 4;
            this.thrownVelocity = 1f;
            this.minionKB = 0.0f;
            this.moveSpeed = 1f;
            this.boneArmor = false;
            this.honey = false;
            this.frostArmor = false;
            this.rocketBoots = 0;
            this.fireWalk = false;
            this.noKnockback = false;
            this.jumpBoost = false;
            this.noFallDmg = false;
            this.accFlipper = false;
            this.spawnMax = false;
            this.spaceGun = false;
            this.killGuide = false;
            this.killClothier = false;
            this.lavaImmune = false;
            this.gills = false;
            this.slowFall = false;
            this.findTreasure = false;
            this.invis = false;
            this.nightVision = false;
            this.enemySpawns = false;
            this.thorns = 0.0f;
            this.aggro = 0;
            this.waterWalk = false;
            this.waterWalk2 = false;
            this.detectCreature = false;
            this.gravControl = false;
            this.bee = false;
            this.gravControl2 = false;
            this.statLifeMax2 = this.statLifeMax;
            this.statManaMax2 = this.statManaMax;
            this.ammoCost80 = false;
            this.ammoCost75 = false;
            this.thrownCost50 = false;
            this.thrownCost33 = false;
            this.manaRegenBuff = false;
            this.arrowDamage = 1f;
            this.bulletDamage = 1f;
            this.rocketDamage = 1f;
            this.yoraiz0rEye = 0;
            this.yoraiz0rDarkness = false;
            this.leinforsHair = false;
            this.suspiciouslookingTentacle = false;
            this.crimsonHeart = false;
            this.lightOrb = false;
            this.blueFairy = false;
            this.redFairy = false;
            this.greenFairy = false;
            this.wisp = false;
            this.bunny = false;
            this.turtle = false;
            this.eater = false;
            this.skeletron = false;
            this.hornet = false;
            this.zephyrfish = false;
            this.tiki = false;
            this.lizard = false;
            this.parrot = false;
            this.sapling = false;
            this.cSapling = false;
            this.truffle = false;
            this.yoyoGlove = false;
            this.counterWeight = 0;
            this.stringColor = 0;
            this.yoyoString = false;
            this.shadowDodge = false;
            this.palladiumRegen = false;
            this.chaosState = false;
            this.onHitDodge = false;
            this.onHitRegen = false;
            this.onHitPetal = false;
            this.iceBarrier = false;
            this.maxMinions = 1;
            this.maxTurrets = 1;
            this.ammoBox = false;
            this.ammoPotion = false;
            this.penguin = false;
            this.sporeSac = false;
            this.shinyStone = false;
            this.dd2Accessory = false;
            this.magicLantern = false;
            this.rabid = false;
            this.sunflower = false;
            this.wellFed = false;
            this.inferno = false;
            this.manaMagnet = false;
            this.lifeMagnet = false;
            this.lifeForce = false;
            this.dangerSense = false;
            this.endurance = 0.0f;
            this.calmed = false;
            this.beetleOrbs = 0;
            this.beetleBuff = false;
            this.miniMinotaur = false;
            this.goldRing = false;
            this.solarShields = 0;
            this.GoingDownWithGrapple = false;
            this.fishingSkill = 0;
            this.cratePotion = false;
            this.sonarPotion = false;
            this.accTackleBox = false;
            this.accFishingLine = false;
            this.accFishFinder = false;
            this.accWeatherRadio = false;
            this.accThirdEye = false;
            this.InfoAccMechShowWires = false;
            this.accJarOfSouls = false;
            this.accCalendar = false;
            this.accStopwatch = false;
            this.accOreFinder = false;
            this.accCritterGuide = false;
            this.accDreamCatcher = false;
            this.wallSpeed = 1f;
            this.tileSpeed = 1f;
            this.autoPaint = false;
            this.autoActuator = false;
            this.petFlagDD2Gato = false;
            this.petFlagDD2Dragon = false;
            this.petFlagDD2Ghost = false;
            this.companionCube = false;
            this.babyFaceMonster = false;
            this.manaSick = false;
            this.puppy = false;
            this.grinch = false;
            this.blackCat = false;
            this.spider = false;
            this.squashling = false;
            this.magicCuffs = false;
            this.coldDash = false;
            this.sailDash = false;
            this.cordage = false;
            this.magicQuiver = false;
            this.magmaStone = false;
            this.hasRaisableShield = false;
            this.lavaRose = false;
            this.eyeSpring = false;
            this.snowman = false;
            this.scope = false;
            this.panic = false;
            this.brainOfConfusion = false;
            this.dino = false;
            this.crystalLeaf = false;
            this.pygmy = false;
            this.raven = false;
            this.slime = false;
            this.hornetMinion = false;
            this.impMinion = false;
            this.twinsMinion = false;
            this.spiderMinion = false;
            this.pirateMinion = false;
            this.sharknadoMinion = false;
            this.stardustMinion = false;
            this.stardustGuardian = false;
            this.stardustDragon = false;
            this.UFOMinion = false;
            this.DeadlySphereMinion = false;
            this.chilled = false;
            this.dazed = false;
            this.frozen = false;
            this.stoned = false;
            this.webbed = false;
            this.ichor = false;
            this.manaRegenBonus = 0;
            this.manaRegenDelayBonus = 0;
            this.carpet = false;
            this.iceSkate = false;
            this.dash = 0;
            this.spikedBoots = 0;
            this.blackBelt = false;
            this.lavaMax = 0;
            this.archery = false;
            this.poisoned = false;
            this.venom = false;
            this.blind = false;
            this.blackout = false;
            this.onFire = false;
            this.dripping = false;
            this.drippingSlime = false;
            this.burned = false;
            this.suffocating = false;
            this.onFire2 = false;
            this.onFrostBurn = false;
            this.frostBurn = false;
            this.noItems = false;
            this.blockRange = 0;
            this.pickSpeed = 1f;
            this.wereWolf = false;
            this.rulerGrid = false;
            this.rulerLine = false;
            this.bleed = false;
            this.confused = false;
            this.witheredArmor = false;
            this.witheredWeapon = false;
            this.parryDamageBuff = false;
            this.slowOgreSpit = false;
            this.wings = 0;
            this.wingsLogic = 0;
            this.wingTimeMax = 0;
            this.brokenArmor = false;
            this.silence = false;
            this.slow = false;
            this.gross = false;
            this.tongued = false;
            this.kbGlove = false;
            this.kbBuff = false;
            this.starCloak = false;
            this.longInvince = false;
            this.pStone = false;
            this.manaFlower = false;
            this.crimsonRegen = false;
            this.ghostHeal = false;
            this.ghostHurt = false;
            this.turtleArmor = false;
            this.turtleThorns = false;
            this.spiderArmor = false;
            this.loveStruck = false;
            this.stinky = false;
            this.dryadWard = false;
            this.resistCold = false;
            this.electrified = false;
            this.moonLeech = false;
            this.headcovered = false;
            this.vortexDebuff = false;
            this.windPushed = false;
            this.ballistaPanic = false;
            this.setVortex = this.setNebula = this.setStardust = false;
            this.setForbidden = false;
            this.setHuntressT3 = false;
            this.setSquireT3 = false;
            this.setMonkT3 = false;
            this.setApprenticeT3 = false;
            this.setHuntressT2 = false;
            this.setSquireT2 = false;
            this.setMonkT2 = false;
            this.setApprenticeT2 = false;
            this.setForbiddenCooldownLocked = false;
            this.nebulaLevelDamage = this.nebulaLevelLife = this.nebulaLevelMana = 0;
            this.ignoreWater = false;
            this.meleeEnchant = (byte) 0;
            this.discount = false;
            this.coins = false;
            this.doubleJumpSail = false;
            this.doubleJumpSandstorm = false;
            this.doubleJumpBlizzard = false;
            this.doubleJumpFart = false;
            this.doubleJumpUnicorn = false;
            this.defendedByPaladin = false;
            this.hasPaladinShield = false;
            this.autoJump = false;
            this.justJumped = false;
            this.jumpSpeedBoost = 0.0f;
            this.extraFall = 0;
            if (this.phantasmTime > 0)
                --this.phantasmTime;
            if (this.wireOperationsCooldown > 0)
                --this.wireOperationsCooldown;
            if (this.releaseUseItem)
                this.ActuationRodLock = false;
            for (var index = 0; index < this.npcTypeNoAggro.Length; ++index)
                this.npcTypeNoAggro[index] = false;
            for (var index = 0; index < this.ownedProjectileCounts.Length; ++index)
                this.ownedProjectileCounts[index] = 0;
            if (this.whoAmI == Main.myPlayer)
            {
                Player.tileRangeX = 5;
                Player.tileRangeY = 4;
            }

            this.mount.CheckMountBuff(this);
        }

        public void UpdateImmunity()
        {
            if (this.immune)
            {
                --this.immuneTime;
                if (this.immuneTime <= 0)
                {
                    this.immune = false;
                    this.immuneNoBlink = false;
                }

                if (this.immuneNoBlink)
                {
                    this.immuneAlpha = 0;
                }
                else
                {
                    this.immuneAlpha += this.immuneAlphaDirection * 50;
                    if (this.immuneAlpha <= 50)
                        this.immuneAlphaDirection = 1;
                    else if (this.immuneAlpha >= 205)
                        this.immuneAlphaDirection = -1;
                }
            }
            else
                this.immuneAlpha = 0;

            for (var index = 0; index < this.hurtCooldowns.Length; ++index)
            {
                if (this.hurtCooldowns[index] > 0)
                    --this.hurtCooldowns[index];
            }
        }

        public void UpdateLifeRegen()
        {
            var flag = false;
            if (this.shinyStone && (double) Math.Abs(this.velocity.X) < 0.05 &&
                ((double) Math.Abs(this.velocity.Y) < 0.05 && this.itemAnimation == 0))
                flag = true;
            if (this.poisoned)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegenTime = 0;
                this.lifeRegen -= 4;
            }

            if (this.venom)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegenTime = 0;
                this.lifeRegen -= 12;
            }

            if (this.onFire)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegenTime = 0;
                this.lifeRegen -= 8;
            }

            if (this.onFrostBurn)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegenTime = 0;
                this.lifeRegen -= 12;
            }

            if (this.onFire2)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegenTime = 0;
                this.lifeRegen -= 12;
            }

            if (this.burned)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegenTime = 0;
                this.lifeRegen -= 60;
                this.moveSpeed *= 0.5f;
            }

            if (this.suffocating)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegenTime = 0;
                this.lifeRegen -= 40;
            }

            if (this.electrified)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegenTime = 0;
                this.lifeRegen -= 8;
                if (this.controlLeft || this.controlRight)
                    this.lifeRegen -= 32;
            }

            if (this.tongued && Main.expertMode)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegenTime = 0;
                this.lifeRegen -= 100;
            }

            if (this.honey && this.lifeRegen < 0)
            {
                this.lifeRegen += 4;
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
            }

            if (this.lifeRegen < 0 && this.nebulaLevelLife > 0)
                this.lifeRegen = 0;
            if (flag && this.lifeRegen < 0)
                this.lifeRegen /= 2;
            ++this.lifeRegenTime;
            if (this.crimsonRegen)
                ++this.lifeRegenTime;
            if (this.soulDrain > 0)
                this.lifeRegenTime += 2;
            if (flag)
            {
                if (this.lifeRegenTime > 90 && this.lifeRegenTime < 1800)
                    this.lifeRegenTime = 1800;
                this.lifeRegenTime += 4;
                this.lifeRegen += 4;
            }

            if (this.honey)
            {
                this.lifeRegenTime += 2;
                this.lifeRegen += 2;
            }

            if (this.soulDrain > 0)
            {
                var num = (5 + this.soulDrain) / 2;
                this.lifeRegenTime += num;
                this.lifeRegen += num;
            }

            if (this.whoAmI == Main.myPlayer && Main.campfire)
                ++this.lifeRegen;
            if (this.whoAmI == Main.myPlayer && Main.heartLantern)
                this.lifeRegen += 2;
            if (this.bleed)
                this.lifeRegenTime = 0;
            var num1 = 0.0f;
            if (this.lifeRegenTime >= 300)
                ++num1;
            if (this.lifeRegenTime >= 600)
                ++num1;
            if (this.lifeRegenTime >= 900)
                ++num1;
            if (this.lifeRegenTime >= 1200)
                ++num1;
            if (this.lifeRegenTime >= 1500)
                ++num1;
            if (this.lifeRegenTime >= 1800)
                ++num1;
            if (this.lifeRegenTime >= 2400)
                ++num1;
            if (this.lifeRegenTime >= 3000)
                ++num1;
            if (flag)
            {
                var num2 = (float) (this.lifeRegenTime - 3000) / 300f;
                if ((double) num2 > 0.0)
                {
                    if ((double) num2 > 30.0)
                        num2 = 30f;
                    num1 += num2;
                }
            }
            else if (this.lifeRegenTime >= 3600)
            {
                ++num1;
                this.lifeRegenTime = 3600;
            }

            var num3 = (double) this.velocity.X == 0.0 || this.grappling[0] > 0 ? num1 * 1.25f : num1 * 0.5f;
            if (this.crimsonRegen)
                num3 *= 1.5f;
            if (this.shinyStone)
                num3 *= 1.1f;
            if (this.whoAmI == Main.myPlayer && Main.campfire)
                num3 *= 1.1f;
            if (Main.expertMode && !this.wellFed)
            {
                if (this.shinyStone)
                    num3 *= 0.75f;
                else
                    num3 /= 2f;
            }

            if (this.rabid)
            {
                if (this.shinyStone)
                    num3 *= 0.75f;
                else
                    num3 /= 2f;
            }

            var num4 = (float) ((double) this.statLifeMax2 / 400.0 * 0.850000023841858 + 0.150000005960464);
            this.lifeRegen += (int) Math.Round((double) (num3 * num4));
            this.lifeRegenCount += this.lifeRegen;
            if (this.palladiumRegen)
                this.lifeRegenCount += 6;
            if (flag && this.lifeRegen > 0 && this.statLife < this.statLifeMax2)
            {
                ++this.lifeRegenCount;
                if (flag && (Main.rand.Next(30000) < this.lifeRegenTime || Main.rand.Next(30) == 0))
                {
                    var index = Dust.NewDust(this.position, this.width, this.height, 55, 0.0f, 0.0f, 200, new Color(),
                        0.5f);
                    Main.dust[index].noGravity = true;
                    Main.dust[index].velocity *= 0.75f;
                    Main.dust[index].fadeIn = 1.3f;
                    var vector2_1 = new Vector2((float) Main.rand.Next(-100, 101),
                        (float) Main.rand.Next(-100, 101));
                    vector2_1.Normalize();
                    var vector2_2 = vector2_1 * ((float) Main.rand.Next(50, 100) * 0.04f);
                    Main.dust[index].velocity = vector2_2;
                    vector2_2.Normalize();
                    var vector2_3 = vector2_2 * 34f;
                    Main.dust[index].position = this.Center - vector2_3;
                }
            }

            while (this.lifeRegenCount >= 120)
            {
                this.lifeRegenCount -= 120;
                if (this.statLife < this.statLifeMax2)
                {
                    ++this.statLife;
                    if (this.crimsonRegen)
                    {
                        for (var index1 = 0; index1 < 10; ++index1)
                        {
                            var index2 = Dust.NewDust(this.position, this.width, this.height, 5, 0.0f, 0.0f, 175,
                                new Color(), 1.75f);
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].velocity *= 0.75f;
                            var num2 = Main.rand.Next(-40, 41);
                            var num5 = Main.rand.Next(-40, 41);
                            Main.dust[index2].position.X += (float) num2;
                            Main.dust[index2].position.Y += (float) num5;
                            Main.dust[index2].velocity.X = (float) -num2 * 0.075f;
                            Main.dust[index2].velocity.Y = (float) -num5 * 0.075f;
                        }
                    }
                }

                if (this.statLife > this.statLifeMax2)
                    this.statLife = this.statLifeMax2;
            }

            if (this.burned || this.suffocating || this.tongued && Main.expertMode)
            {
                while (this.lifeRegenCount <= -600)
                {
                    this.lifeRegenCount += 600;
                    this.statLife -= 5;
                    CombatText.NewText(
                        new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width,
                            this.height), CombatText.LifeRegen, 5, false, true);
                    if (this.statLife <= 0 && this.whoAmI == Main.myPlayer)
                    {
                        if (this.suffocating)
                            this.KillMe(PlayerDeathReason.ByOther(7), 10.0, 0, false);
                        else
                            this.KillMe(PlayerDeathReason.ByOther(8), 10.0, 0, false);
                    }
                }
            }
            else
            {
                while (this.lifeRegenCount <= -120)
                {
                    if (this.lifeRegenCount <= -480)
                    {
                        this.lifeRegenCount += 480;
                        this.statLife -= 4;
                        CombatText.NewText(
                            new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y,
                                this.width, this.height), CombatText.LifeRegen, 4, false, true);
                    }
                    else if (this.lifeRegenCount <= -360)
                    {
                        this.lifeRegenCount += 360;
                        this.statLife -= 3;
                        CombatText.NewText(
                            new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y,
                                this.width, this.height), CombatText.LifeRegen, 3, false, true);
                    }
                    else if (this.lifeRegenCount <= -240)
                    {
                        this.lifeRegenCount += 240;
                        this.statLife -= 2;
                        CombatText.NewText(
                            new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y,
                                this.width, this.height), CombatText.LifeRegen, 2, false, true);
                    }
                    else
                    {
                        this.lifeRegenCount += 120;
                        --this.statLife;
                        CombatText.NewText(
                            new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y,
                                this.width, this.height), CombatText.LifeRegen, 1, false, true);
                    }

                    if (this.statLife <= 0 && this.whoAmI == Main.myPlayer)
                    {
                        if (this.poisoned || this.venom)
                            this.KillMe(PlayerDeathReason.ByOther(9), 10.0, 0, false);
                        else if (this.electrified)
                            this.KillMe(PlayerDeathReason.ByOther(10), 10.0, 0, false);
                        else
                            this.KillMe(PlayerDeathReason.ByOther(8), 10.0, 0, false);
                    }
                }
            }
        }

        public void UpdateManaRegen()
        {
            if (this.nebulaLevelMana > 0)
            {
                var num = 6;
                this.nebulaManaCounter += this.nebulaLevelMana;
                if (this.nebulaManaCounter >= num)
                {
                    this.nebulaManaCounter -= num;
                    ++this.statMana;
                    if (this.statMana >= this.statManaMax2)
                        this.statMana = this.statManaMax2;
                }
            }
            else
                this.nebulaManaCounter = 0;

            if (this.manaRegenDelay > 0)
            {
                --this.manaRegenDelay;
                this.manaRegenDelay -= this.manaRegenDelayBonus;
                if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0 ||
                    (this.grappling[0] >= 0 || this.manaRegenBuff))
                    --this.manaRegenDelay;
            }

            if (this.manaRegenBuff && this.manaRegenDelay > 20)
                this.manaRegenDelay = 20;
            if (this.manaRegenDelay <= 0)
            {
                this.manaRegenDelay = 0;
                this.manaRegen = this.statManaMax2 / 7 + 1 + this.manaRegenBonus;
                if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0 ||
                    (this.grappling[0] >= 0 || this.manaRegenBuff))
                    this.manaRegen += this.statManaMax2 / 2;
                var num = (float) ((double) this.statMana / (double) this.statManaMax2 * 0.800000011920929 +
                                     0.200000002980232);
                if (this.manaRegenBuff)
                    num = 1f;
                this.manaRegen = (int) ((double) this.manaRegen * (double) num * 1.15);
            }
            else
                this.manaRegen = 0;

            this.manaRegenCount += this.manaRegen;
            while (this.manaRegenCount >= 120)
            {
                var flag = false;
                this.manaRegenCount -= 120;
                if (this.statMana < this.statManaMax2)
                {
                    ++this.statMana;
                    flag = true;
                }

                if (this.statMana >= this.statManaMax2)
                {
                    if (this.whoAmI == Main.myPlayer && flag)
                    {
                        Main.PlaySound(25, -1, -1, 1, 1f, 0.0f);
                        for (var index1 = 0; index1 < 5; ++index1)
                        {
                            var index2 = Dust.NewDust(this.position, this.width, this.height, 45, 0.0f, 0.0f,
                                (int) byte.MaxValue, new Color(), (float) Main.rand.Next(20, 26) * 0.1f);
                            Main.dust[index2].noLight = true;
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].velocity *= 0.5f;
                        }
                    }

                    this.statMana = this.statManaMax2;
                }
            }
        }

        public void UpdateJumpHeight()
        {
            if (this.mount.Active)
            {
                Player.jumpHeight = this.mount.JumpHeight(this.velocity.X);
                Player.jumpSpeed = this.mount.JumpSpeed(this.velocity.X);
            }
            else
            {
                if (this.jumpBoost)
                {
                    Player.jumpHeight = 20;
                    Player.jumpSpeed = 6.51f;
                }

                if (this.wereWolf)
                {
                    Player.jumpHeight += 2;
                    Player.jumpSpeed += 0.2f;
                }

                Player.jumpSpeed += this.jumpSpeedBoost;
            }

            if (this.sticky)
            {
                Player.jumpHeight /= 10;
                Player.jumpSpeed /= 5f;
            }

            if (!this.dazed)
                return;
            Player.jumpHeight /= 5;
            Player.jumpSpeed /= 2f;
        }

        public void FindPulley()
        {
            if (!this.controlUp && !this.controlDown)
                return;
            var index1 = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
            var index2 = (int) ((double) this.position.Y - 8.0) / 16;
            if (Main.tile[index1, index2] == null || !Main.tile[index1, index2].active() ||
                !Main.tileRope[(int) Main.tile[index1, index2].type])
                return;
            var num1 = this.position.Y;
            if (Main.tile[index1, index2 - 1] == null)
                Main.tile[index1, index2 - 1] = new Tile();
            if (Main.tile[index1, index2 + 1] == null)
                Main.tile[index1, index2 + 1] = new Tile();
            if ((!Main.tile[index1, index2 - 1].active() || !Main.tileRope[(int) Main.tile[index1, index2 - 1].type]) &&
                (!Main.tile[index1, index2 + 1].active() || !Main.tileRope[(int) Main.tile[index1, index2 + 1].type]))
                num1 = (float) (index2 * 16 + 22);
            var x1 = (float) (index1 * 16 + 8 - this.width / 2 + 6 * this.direction);
            var num2 = index1 * 16 + 8 - this.width / 2 + 6;
            var num3 = index1 * 16 + 8 - this.width / 2;
            var num4 = index1 * 16 + 8 - this.width / 2 - 6;
            var num5 = 1;
            var num6 = Math.Abs(this.position.X - (float) num2);
            if ((double) Math.Abs(this.position.X - (float) num3) < (double) num6)
            {
                num5 = 2;
                num6 = Math.Abs(this.position.X - (float) num3);
            }

            if ((double) Math.Abs(this.position.X - (float) num4) < (double) num6)
            {
                num5 = 3;
                Math.Abs(this.position.X - (float) num4);
            }

            if (num5 == 1)
            {
                x1 = (float) num2;
                this.pulleyDir = (byte) 2;
                this.direction = 1;
            }

            if (num5 == 2)
            {
                x1 = (float) num3;
                this.pulleyDir = (byte) 1;
            }

            if (num5 == 3)
            {
                x1 = (float) num4;
                this.pulleyDir = (byte) 2;
                this.direction = -1;
            }

            if (!Collision.SolidCollision(new Vector2(x1, this.position.Y), this.width, this.height))
            {
                if (this.whoAmI == Main.myPlayer)
                    Main.cameraX = Main.cameraX + this.position.X - x1;
                this.pulley = true;
                this.position.X = x1;
                this.gfxOffY = this.position.Y - num1;
                this.stepSpeed = 2.5f;
                this.position.Y = num1;
                this.velocity.X = 0.0f;
            }
            else
            {
                var x2 = (float) num2;
                this.pulleyDir = (byte) 2;
                this.direction = 1;
                if (!Collision.SolidCollision(new Vector2(x2, this.position.Y), this.width, this.height))
                {
                    if (this.whoAmI == Main.myPlayer)
                        Main.cameraX = Main.cameraX + this.position.X - x2;
                    this.pulley = true;
                    this.position.X = x2;
                    this.gfxOffY = this.position.Y - num1;
                    this.stepSpeed = 2.5f;
                    this.position.Y = num1;
                    this.velocity.X = 0.0f;
                }
                else
                {
                    var x3 = (float) num4;
                    this.pulleyDir = (byte) 2;
                    this.direction = -1;
                    if (Collision.SolidCollision(new Vector2(x3, this.position.Y), this.width, this.height))
                        return;
                    if (this.whoAmI == Main.myPlayer)
                        Main.cameraX = Main.cameraX + this.position.X - x3;
                    this.pulley = true;
                    this.position.X = x3;
                    this.gfxOffY = this.position.Y - num1;
                    this.stepSpeed = 2.5f;
                    this.position.Y = num1;
                    this.velocity.X = 0.0f;
                }
            }
        }

        public void HorizontalMovement()
        {
            if (this.chilled)
                this.accRunSpeed = this.maxRunSpeed;
            var flag1 = (this.itemAnimation == 0 || this.inventory[this.selectedItem].useTurn) &&
                         this.mount.AllowDirectionChange;
            var flag2 = this.controlLeft || this.controlRight;
            var num1 = (float) (((double) this.accRunSpeed + (double) this.maxRunSpeed) / 2.0);
            var num2 = 0.0f;
            var flag3 = false;
            if (this.windPushed && (!this.mount.Active || (double) this.velocity.Y != 0.0 || !flag2))
            {
                num2 = (float) Math.Sign(Main.windSpeed) * 0.07f;
                if ((double) Math.Abs(Main.windSpeed) > 0.5)
                    num2 *= 1.37f;
                if ((double) this.velocity.Y != 0.0)
                    num2 *= 1.5f;
                if (flag2)
                    num2 *= 0.8f;
                flag3 = true;
                if (Math.Sign(this.direction) != Math.Sign(num2))
                    num1 -= Math.Abs(num2) * 40f;
            }

            if ((double) this.trackBoost != 0.0)
            {
                this.velocity.X += this.trackBoost;
                this.trackBoost = 0.0f;
                if ((double) this.velocity.X < 0.0)
                {
                    if ((double) this.velocity.X < -(double) this.maxRunSpeed)
                        this.velocity.X = -this.maxRunSpeed;
                }
                else if ((double) this.velocity.X > (double) this.maxRunSpeed)
                    this.velocity.X = this.maxRunSpeed;
            }

            if (this.controlLeft && (double) this.velocity.X > -(double) this.maxRunSpeed)
            {
                if (!this.mount.Active || !this.mount.Cart || (double) this.velocity.Y == 0.0)
                {
                    if ((double) this.velocity.X > (double) this.runSlowdown)
                        this.velocity.X -= this.runSlowdown;
                    this.velocity.X -= this.runAcceleration;
                }

                if (this.onWrongGround)
                {
                    if ((double) this.velocity.X < -(double) this.runSlowdown)
                        this.velocity.X += this.runSlowdown;
                    else
                        this.velocity.X = 0.0f;
                }

                if (this.mount.Active && this.mount.Cart && !this.onWrongGround)
                {
                    if ((double) this.velocity.X < 0.0 && flag1)
                        this.direction = -1;
                    else if (this.itemAnimation <= 0 && (double) this.velocity.Y == 0.0)
                    {
                        Main.PlaySound(SoundID.Item55, (int) this.position.X + this.width / 2,
                            (int) this.position.Y + this.height / 2);
                        DelegateMethods.Minecart.rotation = this.fullRotation;
                        DelegateMethods.Minecart.rotationOrigin = this.fullRotationOrigin;
                        if ((double) Math.Abs(this.velocity.X) > (double) this.maxRunSpeed * 0.66)
                        {
                            if (Main.rand.Next(2) == 0)
                                Minecart.WheelSparks(this.mount.MinecartDust, this.position + this.velocity * 0.66f,
                                    this.width, this.height, 1);
                            if (Main.rand.Next(2) == 0)
                                Minecart.WheelSparks(this.mount.MinecartDust, this.position + this.velocity * 0.33f,
                                    this.width, this.height, 1);
                            if (Main.rand.Next(2) == 0)
                                Minecart.WheelSparks(this.mount.MinecartDust, this.position, this.width, this.height,
                                    1);
                        }
                        else if ((double) Math.Abs(this.velocity.X) > (double) this.maxRunSpeed * 0.33)
                        {
                            if (Main.rand.Next(3) != 0)
                                Minecart.WheelSparks(this.mount.MinecartDust, this.position + this.velocity * 0.5f,
                                    this.width, this.height, 1);
                            if (Main.rand.Next(3) != 0)
                                Minecart.WheelSparks(this.mount.MinecartDust, this.position, this.width, this.height,
                                    1);
                        }
                        else
                            Minecart.WheelSparks(this.mount.MinecartDust, this.position, this.width, this.height, 1);
                    }
                }
                else if (!this.sandStorm && (this.itemAnimation == 0 || this.inventory[this.selectedItem].useTurn) &&
                         this.mount.AllowDirectionChange)
                    this.direction = -1;
            }
            else if (this.controlRight && (double) this.velocity.X < (double) this.maxRunSpeed)
            {
                if (!this.mount.Active || !this.mount.Cart || (double) this.velocity.Y == 0.0)
                {
                    if ((double) this.velocity.X < -(double) this.runSlowdown)
                        this.velocity.X += this.runSlowdown;
                    this.velocity.X += this.runAcceleration;
                }

                if (this.onWrongGround)
                {
                    if ((double) this.velocity.X > (double) this.runSlowdown)
                        this.velocity.X -= this.runSlowdown;
                    else
                        this.velocity.X = 0.0f;
                }

                if (this.mount.Active && this.mount.Cart && !this.onWrongGround)
                {
                    if ((double) this.velocity.X > 0.0 && flag1)
                        this.direction = 1;
                    else if (this.itemAnimation <= 0 && (double) this.velocity.Y == 0.0)
                    {
                        Main.PlaySound(SoundID.Item55, (int) this.position.X + this.width / 2,
                            (int) this.position.Y + this.height / 2);
                        DelegateMethods.Minecart.rotation = this.fullRotation;
                        DelegateMethods.Minecart.rotationOrigin = this.fullRotationOrigin;
                        if ((double) Math.Abs(this.velocity.X) > (double) this.maxRunSpeed * 0.66)
                        {
                            if (Main.rand.Next(2) == 0)
                                Minecart.WheelSparks(this.mount.MinecartDust, this.position + this.velocity * 0.66f,
                                    this.width, this.height, 1);
                            if (Main.rand.Next(2) == 0)
                                Minecart.WheelSparks(this.mount.MinecartDust, this.position + this.velocity * 0.33f,
                                    this.width, this.height, 1);
                            if (Main.rand.Next(2) == 0)
                                Minecart.WheelSparks(this.mount.MinecartDust, this.position, this.width, this.height,
                                    1);
                        }
                        else if ((double) Math.Abs(this.velocity.X) > (double) this.maxRunSpeed * 0.33)
                        {
                            if (Main.rand.Next(3) != 0)
                                Minecart.WheelSparks(this.mount.MinecartDust, this.position + this.velocity * 0.5f,
                                    this.width, this.height, 1);
                            if (Main.rand.Next(3) != 0)
                                Minecart.WheelSparks(this.mount.MinecartDust, this.position, this.width, this.height,
                                    1);
                        }
                        else
                            Minecart.WheelSparks(this.mount.MinecartDust, this.position, this.width, this.height, 1);
                    }
                }
                else if (!this.sandStorm && (this.itemAnimation == 0 || this.inventory[this.selectedItem].useTurn) &&
                         this.mount.AllowDirectionChange)
                    this.direction = 1;
            }
            else if (this.controlLeft && (double) this.velocity.X > -(double) this.accRunSpeed && this.dashDelay >= 0)
            {
                if (this.mount.Active && this.mount.Cart)
                {
                    if ((double) this.velocity.X < 0.0)
                        this.direction = -1;
                }
                else if ((this.itemAnimation == 0 || this.inventory[this.selectedItem].useTurn) &&
                         this.mount.AllowDirectionChange)
                    this.direction = -1;

                if ((double) this.velocity.Y == 0.0 || this.wingsLogic > 0 || this.mount.CanFly)
                {
                    if ((double) this.velocity.X > (double) this.runSlowdown)
                        this.velocity.X -= this.runSlowdown;
                    this.velocity.X -= this.runAcceleration * 0.2f;
                    if (this.wingsLogic > 0)
                        this.velocity.X -= this.runAcceleration * 0.2f;
                }

                if (this.onWrongGround)
                {
                    if ((double) this.velocity.X < (double) this.runSlowdown)
                        this.velocity.X += this.runSlowdown;
                    else
                        this.velocity.X = 0.0f;
                }

                if ((double) this.velocity.X < -(double) num1 && (double) this.velocity.Y == 0.0 && !this.mount.Active)
                {
                    var num3 = 0;
                    if ((double) this.gravDir == -1.0)
                        num3 -= this.height;
                    if (this.runSoundDelay == 0 && (double) this.velocity.Y == 0.0)
                    {
                        Main.PlaySound(this.hermesStepSound.SoundType, (int) this.position.X, (int) this.position.Y,
                            this.hermesStepSound.SoundStyle, 1f, 0.0f);
                        this.runSoundDelay = this.hermesStepSound.IntendedCooldown;
                    }

                    if (this.wings == 3)
                    {
                        var index1 = Dust.NewDust(
                            new Vector2(this.position.X - 4f, this.position.Y + (float) this.height + (float) num3),
                            this.width + 8, 4, 186, (float) (-(double) this.velocity.X * 0.5), this.velocity.Y * 0.5f,
                            50, new Color(), 1.5f);
                        Main.dust[index1].velocity *= 0.025f;
                        Main.dust[index1].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                        var index2 = Dust.NewDust(
                            new Vector2(this.position.X - 4f, this.position.Y + (float) this.height + (float) num3),
                            this.width + 8, 4, 186, (float) (-(double) this.velocity.X * 0.5), this.velocity.Y * 0.5f,
                            50, new Color(), 1.5f);
                        Main.dust[index2].velocity *= 0.2f;
                        Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                    }
                    else if (this.sailDash)
                    {
                        for (var index1 = 0; index1 < 4; ++index1)
                        {
                            var index2 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y),
                                this.width + 8, this.height, 253, (float) (-(double) this.velocity.X * 0.5),
                                this.velocity.Y * 0.5f, 100, new Color(), 1.5f);
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].velocity.X *= 0.2f;
                            Main.dust[index2].velocity.Y *= 0.2f;
                            Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                            Main.dust[index2].scale += (float) Main.rand.Next(-5, 3) * 0.1f;
                            var vector2 = new Vector2((float) Main.rand.Next(-100, 101),
                                (float) Main.rand.Next(-100, 101));
                            vector2.Normalize();
                            vector2 *= (float) Main.rand.Next(81) * 0.1f;
                        }
                    }
                    else if (this.coldDash)
                    {
                        for (var index1 = 0; index1 < 2; ++index1)
                        {
                            var index2 = index1 != 0
                                ? Dust.NewDust(
                                    new Vector2(this.position.X + (float) (this.width / 2),
                                        this.position.Y + (float) this.height + this.gfxOffY), this.width / 2, 6, 76,
                                    0.0f, 0.0f, 0, new Color(), 1.35f)
                                : Dust.NewDust(
                                    new Vector2(this.position.X, this.position.Y + (float) this.height + this.gfxOffY),
                                    this.width / 2, 6, 76, 0.0f, 0.0f, 0, new Color(), 1.35f);
                            Main.dust[index2].scale *=
                                (float) (1.0 + (double) Main.rand.Next(20, 40) * 0.00999999977648258);
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].noLight = true;
                            Main.dust[index2].velocity *= 1f / 1000f;
                            Main.dust[index2].velocity.Y -= 3f / 1000f;
                            Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                        }
                    }
                    else
                    {
                        var index = Dust.NewDust(
                            new Vector2(this.position.X - 4f, this.position.Y + (float) this.height + (float) num3),
                            this.width + 8, 4, 16, (float) (-(double) this.velocity.X * 0.5), this.velocity.Y * 0.5f,
                            50, new Color(), 1.5f);
                        Main.dust[index].velocity.X *= 0.2f;
                        Main.dust[index].velocity.Y *= 0.2f;
                        Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                    }
                }
            }
            else if (this.controlRight && (double) this.velocity.X < (double) this.accRunSpeed && this.dashDelay >= 0)
            {
                if (this.mount.Active && this.mount.Cart)
                {
                    if ((double) this.velocity.X > 0.0)
                        this.direction = -1;
                }
                else if ((this.itemAnimation == 0 || this.inventory[this.selectedItem].useTurn) &&
                         this.mount.AllowDirectionChange)
                    this.direction = 1;

                if ((double) this.velocity.Y == 0.0 || this.wingsLogic > 0 || this.mount.CanFly)
                {
                    if ((double) this.velocity.X < -(double) this.runSlowdown)
                        this.velocity.X += this.runSlowdown;
                    this.velocity.X += this.runAcceleration * 0.2f;
                    if (this.wingsLogic > 0)
                        this.velocity.X += this.runAcceleration * 0.2f;
                }

                if (this.onWrongGround)
                {
                    if ((double) this.velocity.X > (double) this.runSlowdown)
                        this.velocity.X -= this.runSlowdown;
                    else
                        this.velocity.X = 0.0f;
                }

                if ((double) this.velocity.X > (double) num1 && (double) this.velocity.Y == 0.0 && !this.mount.Active)
                {
                    var num3 = 0;
                    if ((double) this.gravDir == -1.0)
                        num3 -= this.height;
                    if (this.runSoundDelay == 0 && (double) this.velocity.Y == 0.0)
                    {
                        Main.PlaySound(this.hermesStepSound.SoundType, (int) this.position.X, (int) this.position.Y,
                            this.hermesStepSound.SoundStyle, 1f, 0.0f);
                        this.runSoundDelay = this.hermesStepSound.IntendedCooldown;
                    }

                    if (this.wings == 3)
                    {
                        var index1 = Dust.NewDust(
                            new Vector2(this.position.X - 4f, this.position.Y + (float) this.height + (float) num3),
                            this.width + 8, 4, 186, (float) (-(double) this.velocity.X * 0.5), this.velocity.Y * 0.5f,
                            50, new Color(), 1.5f);
                        Main.dust[index1].velocity *= 0.025f;
                        Main.dust[index1].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                        var index2 = Dust.NewDust(
                            new Vector2(this.position.X - 4f, this.position.Y + (float) this.height + (float) num3),
                            this.width + 8, 4, 186, (float) (-(double) this.velocity.X * 0.5), this.velocity.Y * 0.5f,
                            50, new Color(), 1.5f);
                        Main.dust[index2].velocity *= 0.2f;
                        Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                    }
                    else if (this.sailDash)
                    {
                        for (var index1 = 0; index1 < 4; ++index1)
                        {
                            var index2 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y),
                                this.width + 8, this.height, 253, (float) (-(double) this.velocity.X * 0.5),
                                this.velocity.Y * 0.5f, 100, new Color(), 1.5f);
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].velocity.X *= 0.2f;
                            Main.dust[index2].velocity.Y *= 0.2f;
                            Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                            Main.dust[index2].scale += (float) Main.rand.Next(-5, 3) * 0.1f;
                            var vector2 = new Vector2((float) Main.rand.Next(-100, 101),
                                (float) Main.rand.Next(-100, 101));
                            vector2.Normalize();
                            vector2 *= (float) Main.rand.Next(81) * 0.1f;
                        }
                    }
                    else if (this.coldDash)
                    {
                        for (var index1 = 0; index1 < 2; ++index1)
                        {
                            var index2 = index1 != 0
                                ? Dust.NewDust(
                                    new Vector2(this.position.X + (float) (this.width / 2),
                                        this.position.Y + (float) this.height + this.gfxOffY), this.width / 2, 6, 76,
                                    0.0f, 0.0f, 0, new Color(), 1.35f)
                                : Dust.NewDust(
                                    new Vector2(this.position.X, this.position.Y + (float) this.height + this.gfxOffY),
                                    this.width / 2, 6, 76, 0.0f, 0.0f, 0, new Color(), 1.35f);
                            Main.dust[index2].scale *=
                                (float) (1.0 + (double) Main.rand.Next(20, 40) * 0.00999999977648258);
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].noLight = true;
                            Main.dust[index2].velocity *= 1f / 1000f;
                            Main.dust[index2].velocity.Y -= 3f / 1000f;
                            Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                        }
                    }
                    else
                    {
                        var index = Dust.NewDust(
                            new Vector2(this.position.X - 4f, this.position.Y + (float) this.height + (float) num3),
                            this.width + 8, 4, 16, (float) (-(double) this.velocity.X * 0.5), this.velocity.Y * 0.5f,
                            50, new Color(), 1.5f);
                        Main.dust[index].velocity.X *= 0.2f;
                        Main.dust[index].velocity.Y *= 0.2f;
                        Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                    }
                }
            }
            else if (this.mount.Active && this.mount.Cart && (double) Math.Abs(this.velocity.X) >= 1.0)
            {
                if (this.onWrongGround)
                {
                    if ((double) this.velocity.X > 0.0)
                    {
                        if ((double) this.velocity.X > (double) this.runSlowdown)
                            this.velocity.X -= this.runSlowdown;
                        else
                            this.velocity.X = 0.0f;
                    }
                    else if ((double) this.velocity.X < 0.0)
                    {
                        if ((double) this.velocity.X < -(double) this.runSlowdown)
                            this.velocity.X += this.runSlowdown;
                        else
                            this.velocity.X = 0.0f;
                    }
                }

                if ((double) this.velocity.X > (double) this.maxRunSpeed)
                    this.velocity.X = this.maxRunSpeed;
                if ((double) this.velocity.X < -(double) this.maxRunSpeed)
                    this.velocity.X = -this.maxRunSpeed;
            }
            else if ((double) this.velocity.Y == 0.0)
            {
                if ((double) this.velocity.X > (double) this.runSlowdown)
                    this.velocity.X -= this.runSlowdown;
                else if ((double) this.velocity.X < -(double) this.runSlowdown)
                    this.velocity.X += this.runSlowdown;
                else
                    this.velocity.X = 0.0f;
            }
            else if (!this.PortalPhysicsEnabled)
            {
                if ((double) this.velocity.X > (double) this.runSlowdown * 0.5)
                    this.velocity.X -= this.runSlowdown * 0.5f;
                else if ((double) this.velocity.X < -(double) this.runSlowdown * 0.5)
                    this.velocity.X += this.runSlowdown * 0.5f;
                else
                    this.velocity.X = 0.0f;
            }

            if (flag3)
            {
                if ((double) num2 < 0.0 && (double) this.velocity.X > (double) num2)
                {
                    this.velocity.X += num2;
                    if ((double) this.velocity.X < (double) num2)
                        this.velocity.X = num2;
                }

                if ((double) num2 > 0.0 && (double) this.velocity.X < (double) num2)
                {
                    this.velocity.X += num2;
                    if ((double) this.velocity.X > (double) num2)
                        this.velocity.X = num2;
                }
            }

            if (this.mount.Active && this.mount.Type == 10 && (double) Math.Abs(this.velocity.X) >
                (double) this.mount.DashSpeed - (double) this.mount.RunSpeed / 2.0)
            {
                var rect = this.getRect();
                if (this.direction == 1)
                    rect.Offset(this.width - 1, 0);
                rect.Width = 2;
                rect.Inflate(6, 12);
                var Damage = 80f * this.minionDamage;
                var Knockback = 10f;
                var NPCImmuneTime = 30;
                var PlayerImmuneTime = 6;
                this.CollideWithNPCs(rect, Damage, Knockback, NPCImmuneTime, PlayerImmuneTime);
            }

            if (!this.mount.Active || this.mount.Type != 14 ||
                (double) Math.Abs(this.velocity.X) <= (double) this.mount.RunSpeed / 2.0)
                return;
            var rect1 = this.getRect();
            if (this.direction == 1)
                rect1.Offset(this.width - 1, 0);
            rect1.Width = 2;
            rect1.Inflate(6, 12);
            var Damage1 = 90f * this.minionDamage;
            var Knockback1 = 10f;
            var NPCImmuneTime1 = 30;
            var PlayerImmuneTime1 = 6;
            this.CollideWithNPCs(rect1, Damage1, Knockback1, NPCImmuneTime1, PlayerImmuneTime1);
        }

        private int CollideWithNPCs(Microsoft.Xna.Framework.Rectangle myRect, float Damage, float Knockback,
            int NPCImmuneTime, int PlayerImmuneTime)
        {
            var num = 0;
            for (var index = 0; index < 200; ++index)
            {
                var npc = Main.npc[index];
                if (npc.active && !npc.dontTakeDamage && (!npc.friendly && npc.immune[this.whoAmI] == 0))
                {
                    var rect = npc.getRect();
                    if (myRect.Intersects(rect) && (npc.noTileCollide || Collision.CanHit(this.position, this.width,
                                                        this.height, npc.position, npc.width, npc.height)))
                    {
                        var direction = this.direction;
                        if ((double) this.velocity.X < 0.0)
                            direction = -1;
                        if ((double) this.velocity.X > 0.0)
                            direction = 1;
                        if (this.whoAmI == Main.myPlayer)
                            this.ApplyDamageToNPC(npc, (int) Damage, Knockback, direction, false);
                        npc.immune[this.whoAmI] = NPCImmuneTime;
                        this.immune = true;
                        this.immuneNoBlink = true;
                        this.immuneTime = PlayerImmuneTime;
                        ++num;
                        break;
                    }
                }
            }

            return num;
        }

        public void ApplyDamageToNPC(NPC npc, int damage, float knockback, int direction, bool crit)
        {
            npc.StrikeNPC(damage, knockback, direction, crit, false, false);
            if (Main.netMode != 0)
                NetMessage.SendData(28, -1, -1, (NetworkText) null, npc.whoAmI, (float) damage, knockback,
                    (float) direction, crit.ToInt(), 0, 0);
            var num = Item.NPCtoBanner(npc.BannerID());
            if (num < 0)
                return;
            this.lastCreatureHit = num;
        }

        public bool SlimeDontHyperJump
        {
            get
            {
                if (this.mount.Active && this.mount.Type == 3 && this.wetSlime > (byte) 0)
                    return !this.controlJump;
                return false;
            }
        }

        public void JumpMovement()
        {
            if (this.mount.Active && this.mount.Type == 3 &&
                (this.wetSlime == (byte) 0 && (double) this.velocity.Y > 0.0))
            {
                var rect1 = this.getRect();
                rect1.Offset(0, this.height - 1);
                rect1.Height = 2;
                rect1.Inflate(12, 6);
                for (var index = 0; index < 200; ++index)
                {
                    var npc = Main.npc[index];
                    if (npc.active && !npc.dontTakeDamage && (!npc.friendly && npc.immune[this.whoAmI] == 0))
                    {
                        var rect2 = npc.getRect();
                        if (rect1.Intersects(rect2) && (npc.noTileCollide || Collision.CanHit(this.position, this.width,
                                                            this.height, npc.position, npc.width, npc.height)))
                        {
                            var num = 40f * this.minionDamage;
                            var knockback = 5f;
                            var direction = this.direction;
                            if ((double) this.velocity.X < 0.0)
                                direction = -1;
                            if ((double) this.velocity.X > 0.0)
                                direction = 1;
                            if (this.whoAmI == Main.myPlayer)
                                this.ApplyDamageToNPC(npc, (int) num, knockback, direction, false);
                            npc.immune[this.whoAmI] = 10;
                            this.velocity.Y = -10f;
                            this.immune = true;
                            this.immuneNoBlink = true;
                            this.immuneTime = 6;
                            break;
                        }
                    }
                }
            }

            if (this.controlJump)
            {
                var flag1 = false;
                if (this.mount.Active && this.mount.Type == 3 && this.wetSlime > (byte) 0)
                    flag1 = true;
                if (this.jump > 0)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        this.jump = 0;
                    }
                    else
                    {
                        this.velocity.Y = -Player.jumpSpeed * this.gravDir;
                        if (this.merman && (!this.mount.Active || !this.mount.Cart))
                        {
                            if (this.swimTime <= 10)
                                this.swimTime = 30;
                        }
                        else
                            --this.jump;
                    }
                }
                else if ((this.sliding || (double) this.velocity.Y == 0.0 || (flag1 || this.jumpAgainCloud) ||
                          (this.jumpAgainSandstorm || this.jumpAgainBlizzard ||
                           (this.jumpAgainFart || this.jumpAgainSail)) ||
                          (this.jumpAgainUnicorn ||
                           this.wet && this.accFlipper && (!this.mount.Active || !this.mount.Cart))) &&
                         (this.releaseJump || this.autoJump && ((double) this.velocity.Y == 0.0 || this.sliding)))
                {
                    if (this.sliding || (double) this.velocity.Y == 0.0)
                        this.justJumped = true;
                    var flag2 = false;
                    if (this.wet && this.accFlipper)
                    {
                        if (this.swimTime == 0)
                            this.swimTime = 30;
                        flag2 = true;
                    }

                    var flag3 = false;
                    var flag4 = false;
                    var flag5 = false;
                    var flag6 = false;
                    var flag7 = false;
                    if (!flag1)
                    {
                        if (this.jumpAgainUnicorn)
                        {
                            flag7 = true;
                            this.jumpAgainUnicorn = false;
                        }
                        else if (this.jumpAgainSandstorm)
                        {
                            flag3 = true;
                            this.jumpAgainSandstorm = false;
                        }
                        else if (this.jumpAgainBlizzard)
                        {
                            flag4 = true;
                            this.jumpAgainBlizzard = false;
                        }
                        else if (this.jumpAgainFart)
                        {
                            this.jumpAgainFart = false;
                            flag5 = true;
                        }
                        else if (this.jumpAgainSail)
                        {
                            this.jumpAgainSail = false;
                            flag6 = true;
                        }
                        else
                            this.jumpAgainCloud = false;
                    }

                    this.canRocket = false;
                    this.rocketRelease = false;
                    if (((double) this.velocity.Y == 0.0 || this.sliding || this.autoJump && this.justJumped) &&
                        this.doubleJumpCloud)
                        this.jumpAgainCloud = true;
                    if (((double) this.velocity.Y == 0.0 || this.sliding || this.autoJump && this.justJumped) &&
                        this.doubleJumpSandstorm)
                        this.jumpAgainSandstorm = true;
                    if (((double) this.velocity.Y == 0.0 || this.sliding || this.autoJump && this.justJumped) &&
                        this.doubleJumpBlizzard)
                        this.jumpAgainBlizzard = true;
                    if (((double) this.velocity.Y == 0.0 || this.sliding || this.autoJump && this.justJumped) &&
                        this.doubleJumpFart)
                        this.jumpAgainFart = true;
                    if (((double) this.velocity.Y == 0.0 || this.sliding || this.autoJump && this.justJumped) &&
                        this.doubleJumpSail)
                        this.jumpAgainSail = true;
                    if (((double) this.velocity.Y == 0.0 || this.sliding || this.autoJump && this.justJumped) &&
                        this.doubleJumpUnicorn)
                        this.jumpAgainUnicorn = true;
                    if ((double) this.velocity.Y == 0.0 || flag2 || (this.sliding || flag1))
                    {
                        this.velocity.Y = -Player.jumpSpeed * this.gravDir;
                        this.jump = Player.jumpHeight;
                        if (this.sliding)
                            this.velocity.X = (float) (3 * -this.slideDir);
                    }
                    else if (flag3)
                    {
                        this.dJumpEffectSandstorm = true;
                        var height = this.height;
                        var gravDir = (double) this.gravDir;
                        Main.PlaySound(16, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                        this.velocity.Y = -Player.jumpSpeed * this.gravDir;
                        this.jump = Player.jumpHeight * 3;
                    }
                    else if (flag4)
                    {
                        this.dJumpEffectBlizzard = true;
                        var height = this.height;
                        var gravDir = (double) this.gravDir;
                        Main.PlaySound(16, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                        this.velocity.Y = -Player.jumpSpeed * this.gravDir;
                        this.jump = (int) ((double) Player.jumpHeight * 1.5);
                    }
                    else if (flag6)
                    {
                        this.dJumpEffectSail = true;
                        var num = this.height;
                        if ((double) this.gravDir == -1.0)
                            num = 0;
                        Main.PlaySound(16, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                        this.velocity.Y = -Player.jumpSpeed * this.gravDir;
                        this.jump = (int) ((double) Player.jumpHeight * 1.25);
                        for (var index1 = 0; index1 < 30; ++index1)
                        {
                            var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float) num),
                                this.width, 12, 253, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 100, new Color(),
                                1.5f);
                            if (index1 % 2 == 0)
                                Main.dust[index2].velocity.X += (float) Main.rand.Next(30, 71) * 0.1f;
                            else
                                Main.dust[index2].velocity.X -= (float) Main.rand.Next(30, 71) * 0.1f;
                            Main.dust[index2].velocity.Y += (float) Main.rand.Next(-10, 31) * 0.1f;
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].scale += (float) Main.rand.Next(-10, 41) * 0.01f;
                            Main.dust[index2].velocity *= Main.dust[index2].scale * 0.7f;
                            var vector2 = new Vector2((float) Main.rand.Next(-100, 101),
                                (float) Main.rand.Next(-100, 101));
                            vector2.Normalize();
                            vector2 *= (float) Main.rand.Next(81) * 0.1f;
                        }
                    }
                    else if (flag5)
                    {
                        this.dJumpEffectFart = true;
                        var num = this.height;
                        if ((double) this.gravDir == -1.0)
                            num = 0;
                        Main.PlaySound(SoundID.Item16, this.position);
                        this.velocity.Y = -Player.jumpSpeed * this.gravDir;
                        this.jump = Player.jumpHeight * 2;
                        for (var index1 = 0; index1 < 10; ++index1)
                        {
                            var index2 = Dust.NewDust(
                                new Vector2(this.position.X - 34f,
                                    (float) ((double) this.position.Y + (double) num - 16.0)), 102, 32, 188,
                                (float) (-(double) this.velocity.X * 0.5), this.velocity.Y * 0.5f, 100, new Color(),
                                1.5f);
                            Main.dust[index2].velocity.X =
                                (float) ((double) Main.dust[index2].velocity.X * 0.5 -
                                         (double) this.velocity.X * 0.100000001490116);
                            Main.dust[index2].velocity.Y =
                                (float) ((double) Main.dust[index2].velocity.Y * 0.5 -
                                         (double) this.velocity.Y * 0.300000011920929);
                        }

                        var index3 = Gore.NewGore(
                            new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 16.0),
                                (float) ((double) this.position.Y + (double) num - 16.0)),
                            new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(435, 438), 1f);
                        Main.gore[index3].velocity.X =
                            (float) ((double) Main.gore[index3].velocity.X * 0.100000001490116 -
                                     (double) this.velocity.X * 0.100000001490116);
                        Main.gore[index3].velocity.Y =
                            (float) ((double) Main.gore[index3].velocity.Y * 0.100000001490116 -
                                     (double) this.velocity.Y * 0.0500000007450581);
                        var index4 =
                            Gore.NewGore(
                                new Vector2(this.position.X - 36f,
                                    (float) ((double) this.position.Y + (double) num - 16.0)),
                                new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(435, 438), 1f);
                        Main.gore[index4].velocity.X =
                            (float) ((double) Main.gore[index4].velocity.X * 0.100000001490116 -
                                     (double) this.velocity.X * 0.100000001490116);
                        Main.gore[index4].velocity.Y =
                            (float) ((double) Main.gore[index4].velocity.Y * 0.100000001490116 -
                                     (double) this.velocity.Y * 0.0500000007450581);
                        var index5 = Gore.NewGore(
                            new Vector2((float) ((double) this.position.X + (double) this.width + 4.0),
                                (float) ((double) this.position.Y + (double) num - 16.0)),
                            new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(435, 438), 1f);
                        Main.gore[index5].velocity.X =
                            (float) ((double) Main.gore[index5].velocity.X * 0.100000001490116 -
                                     (double) this.velocity.X * 0.100000001490116);
                        Main.gore[index5].velocity.Y =
                            (float) ((double) Main.gore[index5].velocity.Y * 0.100000001490116 -
                                     (double) this.velocity.Y * 0.0500000007450581);
                    }
                    else if (flag7)
                    {
                        this.dJumpEffectUnicorn = true;
                        var height = this.height;
                        var gravDir = (double) this.gravDir;
                        Main.PlaySound(16, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                        this.velocity.Y = -Player.jumpSpeed * this.gravDir;
                        this.jump = Player.jumpHeight * 2;
                        var center = this.Center;
                        var vector2_1 = new Vector2(50f, 20f);
                        var num1 = 6.283185f * Main.rand.NextFloat();
                        for (var index = 0; index < 5; ++index)
                        {
                            for (var num2 = 0.0f; (double) num2 < 14.0; ++num2)
                            {
                                var dust = Main.dust[Dust.NewDust(center, 0, 0, Utils.SelectRandom<int>(Main.rand,
                                    new int[3]
                                    {
                                        176,
                                        177,
                                        179
                                    }), 0.0f, 0.0f, 0, new Color(), 1f)];
                                var vector2_2 =
                                    Vector2.UnitY.RotatedBy((double) num2 * 6.28318548202515 / 14.0 + (double) num1,
                                        new Vector2()) * (0.2f * (float) index);
                                dust.position = center + vector2_2 * vector2_1;
                                dust.velocity = vector2_2 + new Vector2(0.0f, this.gravDir * 4f);
                                dust.noGravity = true;
                                dust.scale = (float) (1.0 + (double) Main.rand.NextFloat() * 0.800000011920929);
                                dust.fadeIn = Main.rand.NextFloat() * 2f;
                                dust.shader = GameShaders.Armor.GetSecondaryShader(this.cMount, this);
                            }
                        }
                    }
                    else
                    {
                        this.dJumpEffectCloud = true;
                        var num = this.height;
                        if ((double) this.gravDir == -1.0)
                            num = 0;
                        Main.PlaySound(16, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                        this.velocity.Y = -Player.jumpSpeed * this.gravDir;
                        this.jump = (int) ((double) Player.jumpHeight * 0.75);
                        for (var index1 = 0; index1 < 10; ++index1)
                        {
                            var index2 = Dust.NewDust(
                                new Vector2(this.position.X - 34f,
                                    (float) ((double) this.position.Y + (double) num - 16.0)), 102, 32, 16,
                                (float) (-(double) this.velocity.X * 0.5), this.velocity.Y * 0.5f, 100, new Color(),
                                1.5f);
                            Main.dust[index2].velocity.X =
                                (float) ((double) Main.dust[index2].velocity.X * 0.5 -
                                         (double) this.velocity.X * 0.100000001490116);
                            Main.dust[index2].velocity.Y =
                                (float) ((double) Main.dust[index2].velocity.Y * 0.5 -
                                         (double) this.velocity.Y * 0.300000011920929);
                        }

                        var index3 = Gore.NewGore(
                            new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 16.0),
                                (float) ((double) this.position.Y + (double) num - 16.0)),
                            new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(11, 14), 1f);
                        Main.gore[index3].velocity.X =
                            (float) ((double) Main.gore[index3].velocity.X * 0.100000001490116 -
                                     (double) this.velocity.X * 0.100000001490116);
                        Main.gore[index3].velocity.Y =
                            (float) ((double) Main.gore[index3].velocity.Y * 0.100000001490116 -
                                     (double) this.velocity.Y * 0.0500000007450581);
                        var index4 =
                            Gore.NewGore(
                                new Vector2(this.position.X - 36f,
                                    (float) ((double) this.position.Y + (double) num - 16.0)),
                                new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(11, 14), 1f);
                        Main.gore[index4].velocity.X =
                            (float) ((double) Main.gore[index4].velocity.X * 0.100000001490116 -
                                     (double) this.velocity.X * 0.100000001490116);
                        Main.gore[index4].velocity.Y =
                            (float) ((double) Main.gore[index4].velocity.Y * 0.100000001490116 -
                                     (double) this.velocity.Y * 0.0500000007450581);
                        var index5 = Gore.NewGore(
                            new Vector2((float) ((double) this.position.X + (double) this.width + 4.0),
                                (float) ((double) this.position.Y + (double) num - 16.0)),
                            new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(11, 14), 1f);
                        Main.gore[index5].velocity.X =
                            (float) ((double) Main.gore[index5].velocity.X * 0.100000001490116 -
                                     (double) this.velocity.X * 0.100000001490116);
                        Main.gore[index5].velocity.Y =
                            (float) ((double) Main.gore[index5].velocity.Y * 0.100000001490116 -
                                     (double) this.velocity.Y * 0.0500000007450581);
                    }
                }

                this.releaseJump = false;
            }
            else
            {
                this.jump = 0;
                this.releaseJump = true;
                this.rocketRelease = true;
            }
        }

        public void DashMovement()
        {
            if (this.dash == 2 && this.eocDash > 0)
            {
                if (this.eocHit < 0)
                {
                    var rectangle = new Microsoft.Xna.Framework.Rectangle(
                        (int) ((double) this.position.X + (double) this.velocity.X * 0.5 - 4.0),
                        (int) ((double) this.position.Y + (double) this.velocity.Y * 0.5 - 4.0), this.width + 8,
                        this.height + 8);
                    for (var index = 0; index < 200; ++index)
                    {
                        if (Main.npc[index].active && !Main.npc[index].dontTakeDamage && !Main.npc[index].friendly)
                        {
                            var npc = Main.npc[index];
                            var rect = npc.getRect();
                            if (rectangle.Intersects(rect) && (npc.noTileCollide || this.CanHit((Entity) npc)))
                            {
                                var num = 30f * this.meleeDamage;
                                var knockback = 9f;
                                var crit = false;
                                if (this.kbGlove)
                                    knockback *= 2f;
                                if (this.kbBuff)
                                    knockback *= 1.5f;
                                if (Main.rand.Next(100) < this.meleeCrit)
                                    crit = true;
                                var direction = this.direction;
                                if ((double) this.velocity.X < 0.0)
                                    direction = -1;
                                if ((double) this.velocity.X > 0.0)
                                    direction = 1;
                                if (this.whoAmI == Main.myPlayer)
                                    this.ApplyDamageToNPC(npc, (int) num, knockback, direction, crit);
                                this.eocDash = 10;
                                this.dashDelay = 30;
                                this.velocity.X = (float) (-direction * 9);
                                this.velocity.Y = -4f;
                                this.immune = true;
                                this.immuneNoBlink = true;
                                this.immuneTime = 4;
                                this.eocHit = index;
                            }
                        }
                    }
                }
                else if ((!this.controlLeft || (double) this.velocity.X >= 0.0) &&
                         (!this.controlRight || (double) this.velocity.X <= 0.0))
                    this.velocity.X *= 0.95f;
            }

            if (this.dash == 3 && this.dashDelay < 0 && this.whoAmI == Main.myPlayer)
            {
                var rectangle = new Microsoft.Xna.Framework.Rectangle(
                    (int) ((double) this.position.X + (double) this.velocity.X * 0.5 - 4.0),
                    (int) ((double) this.position.Y + (double) this.velocity.Y * 0.5 - 4.0), this.width + 8,
                    this.height + 8);
                for (var index1 = 0; index1 < 200; ++index1)
                {
                    if (Main.npc[index1].active && !Main.npc[index1].dontTakeDamage &&
                        (!Main.npc[index1].friendly && Main.npc[index1].immune[this.whoAmI] <= 0))
                    {
                        var npc = Main.npc[index1];
                        var rect = npc.getRect();
                        if (rectangle.Intersects(rect) && (npc.noTileCollide || this.CanHit((Entity) npc)))
                        {
                            if (!this.solarDashConsumedFlare)
                            {
                                this.solarDashConsumedFlare = true;
                                this.ConsumeSolarFlare();
                            }

                            var num = 150f * this.meleeDamage;
                            var knockback = 9f;
                            var crit = false;
                            if (this.kbGlove)
                                knockback *= 2f;
                            if (this.kbBuff)
                                knockback *= 1.5f;
                            if (Main.rand.Next(100) < this.meleeCrit)
                                crit = true;
                            var direction = this.direction;
                            if ((double) this.velocity.X < 0.0)
                                direction = -1;
                            if ((double) this.velocity.X > 0.0)
                                direction = 1;
                            if (this.whoAmI == Main.myPlayer)
                            {
                                this.ApplyDamageToNPC(npc, (int) num, knockback, direction, crit);
                                var index2 = Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 608,
                                    150, 15f, Main.myPlayer, 0.0f, 0.0f);
                                Main.projectile[index2].Kill();
                            }

                            npc.immune[this.whoAmI] = 6;
                            this.immune = true;
                            this.immuneNoBlink = true;
                            this.immuneTime = 4;
                        }
                    }
                }
            }

            if (this.dashDelay > 0)
            {
                if (this.eocDash > 0)
                    --this.eocDash;
                if (this.eocDash == 0)
                    this.eocHit = -1;
                --this.dashDelay;
            }
            else if (this.dashDelay < 0)
            {
                var num1 = 12f;
                var num2 = 0.992f;
                var num3 = Math.Max(this.accRunSpeed, this.maxRunSpeed);
                var num4 = 0.96f;
                var num5 = 20;
                if (this.dash == 1)
                {
                    for (var index1 = 0; index1 < 2; ++index1)
                    {
                        var index2 = (double) this.velocity.Y != 0.0
                            ? Dust.NewDust(
                                new Vector2(this.position.X,
                                    (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width,
                                16, 31, 0.0f, 0.0f, 100, new Color(), 1.4f)
                            : Dust.NewDust(
                                new Vector2(this.position.X,
                                    (float) ((double) this.position.Y + (double) this.height - 4.0)), this.width, 8, 31,
                                0.0f, 0.0f, 100, new Color(), 1.4f);
                        Main.dust[index2].velocity *= 0.1f;
                        Main.dust[index2].scale *= (float) (1.0 + (double) Main.rand.Next(20) * 0.00999999977648258);
                        Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                    }
                }
                else if (this.dash == 2)
                {
                    for (var index1 = 0; index1 < 0; ++index1)
                    {
                        var index2 = (double) this.velocity.Y != 0.0
                            ? Dust.NewDust(
                                new Vector2(this.position.X,
                                    (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width,
                                16, 31, 0.0f, 0.0f, 100, new Color(), 1.4f)
                            : Dust.NewDust(
                                new Vector2(this.position.X,
                                    (float) ((double) this.position.Y + (double) this.height - 4.0)), this.width, 8, 31,
                                0.0f, 0.0f, 100, new Color(), 1.4f);
                        Main.dust[index2].velocity *= 0.1f;
                        Main.dust[index2].scale *= (float) (1.0 + (double) Main.rand.Next(20) * 0.00999999977648258);
                        Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                    }

                    num2 = 0.985f;
                    num4 = 0.94f;
                    num5 = 30;
                }
                else if (this.dash == 3)
                {
                    for (var index1 = 0; index1 < 4; ++index1)
                    {
                        var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 4f), this.width,
                            this.height - 8, 6, 0.0f, 0.0f, 100, new Color(), 1.7f);
                        Main.dust[index2].velocity *= 0.1f;
                        Main.dust[index2].scale *= (float) (1.0 + (double) Main.rand.Next(20) * 0.00999999977648258);
                        Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                        Main.dust[index2].noGravity = true;
                        if (Main.rand.Next(2) == 0)
                            Main.dust[index2].fadeIn = 0.5f;
                    }

                    num1 = 14f;
                    num2 = 0.985f;
                    num4 = 0.94f;
                    num5 = 20;
                }
                else if (this.dash == 4)
                {
                    for (var index1 = 0; index1 < 2; ++index1)
                    {
                        var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 4f), this.width,
                            this.height - 8, 229, 0.0f, 0.0f, 100, new Color(), 1.2f);
                        Main.dust[index2].velocity *= 0.1f;
                        Main.dust[index2].scale *= (float) (1.0 + (double) Main.rand.Next(20) * 0.00999999977648258);
                        Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                        Main.dust[index2].noGravity = true;
                        if (Main.rand.Next(2) == 0)
                            Main.dust[index2].fadeIn = 0.3f;
                    }

                    num2 = 0.985f;
                    num4 = 0.94f;
                    num5 = 20;
                }

                if (this.dash <= 0)
                    return;
                this.vortexStealthActive = false;
                if ((double) this.velocity.X > (double) num1 || (double) this.velocity.X < -(double) num1)
                    this.velocity.X *= num2;
                else if ((double) this.velocity.X > (double) num3 || (double) this.velocity.X < -(double) num3)
                {
                    this.velocity.X *= num4;
                }
                else
                {
                    this.dashDelay = num5;
                    if ((double) this.velocity.X < 0.0)
                    {
                        this.velocity.X = -num3;
                    }
                    else
                    {
                        if ((double) this.velocity.X <= 0.0)
                            return;
                        this.velocity.X = num3;
                    }
                }
            }
            else
            {
                if (this.dash <= 0 || this.mount.Active)
                    return;
                if (this.dash == 1)
                {
                    var num = 0;
                    var flag = false;
                    if (this.dashTime > 0)
                        --this.dashTime;
                    if (this.dashTime < 0)
                        ++this.dashTime;
                    if (this.controlRight && this.releaseRight)
                    {
                        if (this.dashTime > 0)
                        {
                            num = 1;
                            flag = true;
                            this.dashTime = 0;
                        }
                        else
                            this.dashTime = 15;
                    }
                    else if (this.controlLeft && this.releaseLeft)
                    {
                        if (this.dashTime < 0)
                        {
                            num = -1;
                            flag = true;
                            this.dashTime = 0;
                        }
                        else
                            this.dashTime = -15;
                    }

                    if (!flag)
                        return;
                    this.velocity.X = 16.9f * (float) num;
                    var tileCoordinates1 = (this.Center + new Vector2((float) (num * this.width / 2 + 2),
                                                  (float) ((double) this.gravDir * (double) -this.height / 2.0 +
                                                           (double) this.gravDir * 2.0))).ToTileCoordinates();
                    var tileCoordinates2 = (this.Center + new Vector2((float) (num * this.width / 2 + 2), 0.0f))
                        .ToTileCoordinates();
                    if (WorldGen.SolidOrSlopedTile(tileCoordinates1.X, tileCoordinates1.Y) ||
                        WorldGen.SolidOrSlopedTile(tileCoordinates2.X, tileCoordinates2.Y))
                        this.velocity.X /= 2f;
                    this.dashDelay = -1;
                    for (var index1 = 0; index1 < 20; ++index1)
                    {
                        var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 31, 0.0f, 0.0f, 100, new Color(), 2f);
                        Main.dust[index2].position.X += (float) Main.rand.Next(-5, 6);
                        Main.dust[index2].position.Y += (float) Main.rand.Next(-5, 6);
                        Main.dust[index2].velocity *= 0.2f;
                        Main.dust[index2].scale *= (float) (1.0 + (double) Main.rand.Next(20) * 0.00999999977648258);
                        Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                    }

                    var index3 =
                        Gore.NewGore(
                            new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0),
                                (float) ((double) this.position.Y + (double) (this.height / 2) - 34.0)), new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                    Main.gore[index3].velocity.X = (float) Main.rand.Next(-50, 51) * 0.01f;
                    Main.gore[index3].velocity.Y = (float) Main.rand.Next(-50, 51) * 0.01f;
                    Main.gore[index3].velocity *= 0.4f;
                    var index4 =
                        Gore.NewGore(
                            new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0),
                                (float) ((double) this.position.Y + (double) (this.height / 2) - 14.0)), new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                    Main.gore[index4].velocity.X = (float) Main.rand.Next(-50, 51) * 0.01f;
                    Main.gore[index4].velocity.Y = (float) Main.rand.Next(-50, 51) * 0.01f;
                    Main.gore[index4].velocity *= 0.4f;
                }
                else if (this.dash == 2)
                {
                    var num = 0;
                    var flag = false;
                    if (this.dashTime > 0)
                        --this.dashTime;
                    if (this.dashTime < 0)
                        ++this.dashTime;
                    if (this.controlRight && this.releaseRight)
                    {
                        if (this.dashTime > 0)
                        {
                            num = 1;
                            flag = true;
                            this.dashTime = 0;
                        }
                        else
                            this.dashTime = 15;
                    }
                    else if (this.controlLeft && this.releaseLeft)
                    {
                        if (this.dashTime < 0)
                        {
                            num = -1;
                            flag = true;
                            this.dashTime = 0;
                        }
                        else
                            this.dashTime = -15;
                    }

                    if (!flag)
                        return;
                    this.velocity.X = 14.5f * (float) num;
                    var tileCoordinates1 = (this.Center + new Vector2((float) (num * this.width / 2 + 2),
                                                  (float) ((double) this.gravDir * (double) -this.height / 2.0 +
                                                           (double) this.gravDir * 2.0))).ToTileCoordinates();
                    var tileCoordinates2 = (this.Center + new Vector2((float) (num * this.width / 2 + 2), 0.0f))
                        .ToTileCoordinates();
                    if (WorldGen.SolidOrSlopedTile(tileCoordinates1.X, tileCoordinates1.Y) ||
                        WorldGen.SolidOrSlopedTile(tileCoordinates2.X, tileCoordinates2.Y))
                        this.velocity.X /= 2f;
                    this.dashDelay = -1;
                    this.eocDash = 15;
                    for (var index1 = 0; index1 < 0; ++index1)
                    {
                        var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 31, 0.0f, 0.0f, 100, new Color(), 2f);
                        Main.dust[index2].position.X += (float) Main.rand.Next(-5, 6);
                        Main.dust[index2].position.Y += (float) Main.rand.Next(-5, 6);
                        Main.dust[index2].velocity *= 0.2f;
                        Main.dust[index2].scale *= (float) (1.0 + (double) Main.rand.Next(20) * 0.00999999977648258);
                        Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cShield, this);
                    }
                }
                else
                {
                    if (this.dash != 3)
                        return;
                    var num = 0;
                    var flag = false;
                    if (this.dashTime > 0)
                        --this.dashTime;
                    if (this.dashTime < 0)
                        ++this.dashTime;
                    if (this.controlRight && this.releaseRight)
                    {
                        if (this.dashTime > 0)
                        {
                            num = 1;
                            flag = true;
                            this.dashTime = 0;
                            this.solarDashing = true;
                            this.solarDashConsumedFlare = false;
                        }
                        else
                            this.dashTime = 15;
                    }
                    else if (this.controlLeft && this.releaseLeft)
                    {
                        if (this.dashTime < 0)
                        {
                            num = -1;
                            flag = true;
                            this.dashTime = 0;
                            this.solarDashing = true;
                            this.solarDashConsumedFlare = false;
                        }
                        else
                            this.dashTime = -15;
                    }

                    if (!flag)
                        return;
                    this.velocity.X = 21.9f * (float) num;
                    var tileCoordinates1 = (this.Center + new Vector2((float) (num * this.width / 2 + 2),
                                                  (float) ((double) this.gravDir * (double) -this.height / 2.0 +
                                                           (double) this.gravDir * 2.0))).ToTileCoordinates();
                    var tileCoordinates2 = (this.Center + new Vector2((float) (num * this.width / 2 + 2), 0.0f))
                        .ToTileCoordinates();
                    if (WorldGen.SolidOrSlopedTile(tileCoordinates1.X, tileCoordinates1.Y) ||
                        WorldGen.SolidOrSlopedTile(tileCoordinates2.X, tileCoordinates2.Y))
                        this.velocity.X /= 2f;
                    this.dashDelay = -1;
                    for (var index1 = 0; index1 < 20; ++index1)
                    {
                        var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 2f);
                        Main.dust[index2].position.X += (float) Main.rand.Next(-5, 6);
                        Main.dust[index2].position.Y += (float) Main.rand.Next(-5, 6);
                        Main.dust[index2].velocity *= 0.2f;
                        Main.dust[index2].scale *= (float) (1.0 + (double) Main.rand.Next(20) * 0.00999999977648258);
                        Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].fadeIn = 0.5f;
                    }
                }
            }
        }

        public void WallslideMovement()
        {
            this.sliding = false;
            if (this.slideDir == 0 || this.spikedBoots <= 0 || this.mount.Active ||
                (!this.controlLeft || this.slideDir != -1) && (!this.controlRight || this.slideDir != 1))
                return;
            var flag = false;
            var x = this.position.X;
            if (this.slideDir == 1)
                x += (float) this.width;
            var num1 = x + (float) this.slideDir;
            var num2 = (float) ((double) this.position.Y + (double) this.height + 1.0);
            if ((double) this.gravDir < 0.0)
                num2 = this.position.Y - 1f;
            var num3 = num1 / 16f;
            var num4 = num2 / 16f;
            if (WorldGen.SolidTile((int) num3, (int) num4) && WorldGen.SolidTile((int) num3, (int) num4 - 1))
                flag = true;
            if (this.spikedBoots >= 2)
            {
                if (!flag || ((double) this.velocity.Y <= 0.0 || (double) this.gravDir != 1.0) &&
                    ((double) this.velocity.Y >= (double) this.gravity || (double) this.gravDir != -1.0))
                    return;
                var num5 = this.gravity;
                if (this.slowFall)
                    num5 = !this.controlUp ? this.gravity / 3f * this.gravDir : this.gravity / 10f * this.gravDir;
                this.fallStart = (int) ((double) this.position.Y / 16.0);
                if (this.controlDown && (double) this.gravDir == 1.0 || this.controlUp && (double) this.gravDir == -1.0)
                {
                    this.velocity.Y = 4f * this.gravDir;
                    var index = Dust.NewDust(
                        new Vector2(
                            this.position.X + (float) (this.width / 2) + (float) ((this.width / 2 - 4) * this.slideDir),
                            (float) ((double) this.position.Y + (double) (this.height / 2) +
                                     (double) (this.height / 2 - 4) * (double) this.gravDir)), 8, 8, 31, 0.0f, 0.0f, 0,
                        new Color(), 1f);
                    if (this.slideDir < 0)
                        Main.dust[index].position.X -= 10f;
                    if ((double) this.gravDir < 0.0)
                        Main.dust[index].position.Y -= 12f;
                    Main.dust[index].velocity *= 0.1f;
                    Main.dust[index].scale *= 1.2f;
                    Main.dust[index].noGravity = true;
                    Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                }
                else if ((double) this.gravDir == -1.0)
                    this.velocity.Y = (float) (-(double) num5 + 9.99999974737875E-06) * this.gravDir;
                else
                    this.velocity.Y = (float) (-(double) num5 + 9.99999974737875E-06) * this.gravDir;

                this.sliding = true;
            }
            else
            {
                if ((!flag || (double) this.velocity.Y <= 0.5 || (double) this.gravDir != 1.0) &&
                    ((double) this.velocity.Y >= -0.5 || (double) this.gravDir != -1.0))
                    return;
                this.fallStart = (int) ((double) this.position.Y / 16.0);
                if (this.controlDown)
                    this.velocity.Y = 4f * this.gravDir;
                else
                    this.velocity.Y = 0.5f * this.gravDir;
                this.sliding = true;
                var index = Dust.NewDust(
                    new Vector2(
                        this.position.X + (float) (this.width / 2) + (float) ((this.width / 2 - 4) * this.slideDir),
                        (float) ((double) this.position.Y + (double) (this.height / 2) +
                                 (double) (this.height / 2 - 4) * (double) this.gravDir)), 8, 8, 31, 0.0f, 0.0f, 0,
                    new Color(), 1f);
                if (this.slideDir < 0)
                    Main.dust[index].position.X -= 10f;
                if ((double) this.gravDir < 0.0)
                    Main.dust[index].position.Y -= 12f;
                Main.dust[index].velocity *= 0.1f;
                Main.dust[index].scale *= 1.2f;
                Main.dust[index].noGravity = true;
                Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
            }
        }

        public void CarpetMovement()
        {
            var flag = false;
            if (this.grappling[0] == -1 && this.carpet && (!this.jumpAgainCloud && !this.jumpAgainSandstorm) &&
                (!this.jumpAgainBlizzard && !this.jumpAgainFart && (!this.jumpAgainSail && !this.jumpAgainUnicorn)) &&
                (this.jump == 0 && (double) this.velocity.Y != 0.0 &&
                 (this.rocketTime == 0 && (double) this.wingTime == 0.0) && !this.mount.Active))
            {
                if (this.controlJump && this.canCarpet)
                {
                    this.canCarpet = false;
                    this.carpetTime = 300;
                }

                if (this.carpetTime > 0 && this.controlJump)
                {
                    this.fallStart = (int) ((double) this.position.Y / 16.0);
                    flag = true;
                    --this.carpetTime;
                    var gravity = this.gravity;
                    if ((double) this.gravDir == 1.0 && (double) this.velocity.Y > -(double) gravity)
                        this.velocity.Y = (float) -((double) gravity + 9.99999997475243E-07);
                    else if ((double) this.gravDir == -1.0 && (double) this.velocity.Y < (double) gravity)
                        this.velocity.Y = gravity + 1E-06f;
                    this.carpetFrameCounter += 1f + Math.Abs(this.velocity.X * 0.5f);
                    if ((double) this.carpetFrameCounter > 8.0)
                    {
                        this.carpetFrameCounter = 0.0f;
                        ++this.carpetFrame;
                    }

                    if (this.carpetFrame < 0)
                        this.carpetFrame = 0;
                    if (this.carpetFrame > 5)
                        this.carpetFrame = 0;
                }
            }

            if (!flag)
                this.carpetFrame = -1;
            else
                this.slowFall = false;
        }

        public void DoubleJumpVisuals()
        {
            if (this.dJumpEffectCloud && this.doubleJumpCloud && !this.jumpAgainCloud &&
                (this.jumpAgainSandstorm || !this.doubleJumpSandstorm) &&
                ((double) this.gravDir == 1.0 && (double) this.velocity.Y < 0.0 ||
                 (double) this.gravDir == -1.0 && (double) this.velocity.Y > 0.0))
            {
                var num = this.height;
                if ((double) this.gravDir == -1.0)
                    num = -6;
                var index = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float) num),
                    this.width + 8, 4, 16, (float) (-(double) this.velocity.X * 0.5), this.velocity.Y * 0.5f, 100,
                    new Color(), 1.5f);
                Main.dust[index].velocity.X = (float) ((double) Main.dust[index].velocity.X * 0.5 -
                                                       (double) this.velocity.X * 0.100000001490116);
                Main.dust[index].velocity.Y = (float) ((double) Main.dust[index].velocity.Y * 0.5 -
                                                       (double) this.velocity.Y * 0.300000011920929);
            }

            if (this.dJumpEffectSandstorm && this.doubleJumpSandstorm && !this.jumpAgainSandstorm &&
                ((double) this.gravDir == 1.0 && (double) this.velocity.Y < 0.0 ||
                 (double) this.gravDir == -1.0 && (double) this.velocity.Y > 0.0))
            {
                var num = this.height;
                if ((double) this.gravDir == -1.0)
                    num = -6;
                var Scale = (float) (((double) this.jump / 75.0 + 1.0) / 2.0);
                for (var index1 = 0; index1 < 3; ++index1)
                {
                    var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float) (num / 2)),
                        this.width, 32, 124, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 150, new Color(),
                        1f * Scale);
                    Main.dust[index2].velocity *= 0.5f * Scale;
                    Main.dust[index2].fadeIn = 1.5f * Scale;
                }

                this.sandStorm = true;
                if (this.miscCounter % 3 == 0)
                {
                    var index = Gore.NewGore(
                        new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 18.0),
                            this.position.Y + (float) (num / 2)), new Vector2(-this.velocity.X, -this.velocity.Y),
                        Main.rand.Next(220, 223), Scale);
                    Main.gore[index].velocity = this.velocity * 0.3f * Scale;
                    Main.gore[index].alpha = 100;
                }
            }

            if (this.dJumpEffectFart && this.doubleJumpFart && !this.jumpAgainFart &&
                ((double) this.gravDir == 1.0 && (double) this.velocity.Y < 0.0 ||
                 (double) this.gravDir == -1.0 && (double) this.velocity.Y > 0.0))
            {
                var num = this.height;
                if ((double) this.gravDir == -1.0)
                    num = -6;
                var index = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float) num),
                    this.width + 8, 4, 188, (float) (-(double) this.velocity.X * 0.5), this.velocity.Y * 0.5f, 100,
                    new Color(), 1.5f);
                Main.dust[index].velocity.X = (float) ((double) Main.dust[index].velocity.X * 0.5 -
                                                       (double) this.velocity.X * 0.100000001490116);
                Main.dust[index].velocity.Y = (float) ((double) Main.dust[index].velocity.Y * 0.5 -
                                                       (double) this.velocity.Y * 0.300000011920929);
                Main.dust[index].velocity *= 0.5f;
            }

            if (this.dJumpEffectUnicorn && this.doubleJumpUnicorn && !this.jumpAgainUnicorn &&
                ((double) this.gravDir == 1.0 && (double) this.velocity.Y < 0.0 ||
                 (double) this.gravDir == -1.0 && (double) this.velocity.Y > 0.0))
            {
                var dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Utils.SelectRandom<int>(
                    Main.rand, new int[3]
                    {
                        176,
                        177,
                        179
                    }), 0.0f, 0.0f, 0, new Color(), 1f)];
                dust.velocity = Vector2.Zero;
                dust.noGravity = true;
                dust.scale = (float) (0.5 + (double) Main.rand.NextFloat() * 0.800000011920929);
                dust.fadeIn = (float) (1.0 + (double) Main.rand.NextFloat() * 2.0);
                dust.shader = GameShaders.Armor.GetSecondaryShader(this.cMount, this);
            }

            if (this.dJumpEffectSail && this.doubleJumpSail && !this.jumpAgainSail &&
                ((double) this.gravDir == 1.0 && (double) this.velocity.Y < 1.0 ||
                 (double) this.gravDir == -1.0 && (double) this.velocity.Y > 1.0))
            {
                var num1 = 1;
                if (this.jump > 0)
                    num1 = 2;
                var num2 = this.height - 6;
                if ((double) this.gravDir == -1.0)
                    num2 = 6;
                for (var index1 = 0; index1 < num1; ++index1)
                {
                    var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float) num2), this.width,
                        12, 253, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 100, new Color(), 1.5f);
                    Main.dust[index2].scale += (float) Main.rand.Next(-5, 3) * 0.1f;
                    if (this.jump <= 0)
                        Main.dust[index2].scale *= 0.8f;
                    else
                        Main.dust[index2].velocity -= this.velocity / 5f;
                    Main.dust[index2].noGravity = true;
                    var vector2 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
                    vector2.Normalize();
                    vector2 *= (float) Main.rand.Next(81) * 0.1f;
                }
            }

            if (!this.dJumpEffectBlizzard || !this.doubleJumpBlizzard || this.jumpAgainBlizzard ||
                ((double) this.gravDir != 1.0 || (double) this.velocity.Y >= 0.0) &&
                ((double) this.gravDir != -1.0 || (double) this.velocity.Y <= 0.0))
                return;
            var num3 = this.height - 6;
            if ((double) this.gravDir == -1.0)
                num3 = 6;
            for (var index1 = 0; index1 < 2; ++index1)
            {
                var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float) num3), this.width, 12,
                    76, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 0, new Color(), 1f);
                Main.dust[index2].velocity *= 0.1f;
                if (index1 == 0)
                    Main.dust[index2].velocity += this.velocity * 0.03f;
                else
                    Main.dust[index2].velocity -= this.velocity * 0.03f;
                Main.dust[index2].velocity -= this.velocity * 0.1f;
                Main.dust[index2].noGravity = true;
                Main.dust[index2].noLight = true;
            }

            for (var index1 = 0; index1 < 3; ++index1)
            {
                var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float) num3), this.width, 12,
                    76, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 0, new Color(), 1f);
                Main.dust[index2].fadeIn = 1.5f;
                Main.dust[index2].velocity *= 0.6f;
                Main.dust[index2].velocity += this.velocity * 0.8f;
                Main.dust[index2].noGravity = true;
                Main.dust[index2].noLight = true;
            }

            for (var index1 = 0; index1 < 3; ++index1)
            {
                var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float) num3), this.width, 12,
                    76, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 0, new Color(), 1f);
                Main.dust[index2].fadeIn = 1.5f;
                Main.dust[index2].velocity *= 0.6f;
                Main.dust[index2].velocity -= this.velocity * 0.8f;
                Main.dust[index2].noGravity = true;
                Main.dust[index2].noLight = true;
            }
        }

        public void WingMovement()
        {
            if (this.wingsLogic == 4 && this.controlUp)
            {
                this.velocity.Y -= 0.2f * this.gravDir;
                if ((double) this.gravDir == 1.0)
                {
                    if ((double) this.velocity.Y > 0.0)
                        --this.velocity.Y;
                    else if ((double) this.velocity.Y > -(double) Player.jumpSpeed)
                        this.velocity.Y -= 0.2f;
                    if ((double) this.velocity.Y < -(double) Player.jumpSpeed * 3.0)
                        this.velocity.Y = (float) (-(double) Player.jumpSpeed * 3.0);
                }
                else
                {
                    if ((double) this.velocity.Y < 0.0)
                        ++this.velocity.Y;
                    else if ((double) this.velocity.Y < (double) Player.jumpSpeed)
                        this.velocity.Y += 0.2f;
                    if ((double) this.velocity.Y > (double) Player.jumpSpeed * 3.0)
                        this.velocity.Y = Player.jumpSpeed * 3f;
                }

                this.wingTime -= 2f;
            }
            else
            {
                var num1 = 0.1f;
                var num2 = 0.5f;
                var num3 = 1.5f;
                var num4 = 0.5f;
                var num5 = 0.1f;
                if (this.wingsLogic == 26)
                {
                    num2 = 0.75f;
                    num5 = 0.15f;
                    num4 = 1f;
                    num3 = 2.5f;
                    num1 = 0.125f;
                }

                if (this.wingsLogic == 37)
                {
                    num2 = 0.75f;
                    num5 = 0.15f;
                    num4 = 1f;
                    num3 = 2.5f;
                    num1 = 0.125f;
                }

                if (this.wingsLogic == 29 || this.wingsLogic == 32)
                {
                    num2 = 0.85f;
                    num5 = 0.15f;
                    num4 = 1f;
                    num3 = 3f;
                    num1 = 0.135f;
                }

                if (this.wingsLogic == 30 || this.wingsLogic == 31)
                {
                    num4 = 1f;
                    num3 = 2f;
                    num1 = 0.15f;
                }

                this.velocity.Y -= num1 * this.gravDir;
                if ((double) this.gravDir == 1.0)
                {
                    if ((double) this.velocity.Y > 0.0)
                        this.velocity.Y -= num2;
                    else if ((double) this.velocity.Y > -(double) Player.jumpSpeed * (double) num4)
                        this.velocity.Y -= num5;
                    if ((double) this.velocity.Y < -(double) Player.jumpSpeed * (double) num3)
                        this.velocity.Y = -Player.jumpSpeed * num3;
                }
                else
                {
                    if ((double) this.velocity.Y < 0.0)
                        this.velocity.Y += num2;
                    else if ((double) this.velocity.Y < (double) Player.jumpSpeed * (double) num4)
                        this.velocity.Y += num5;
                    if ((double) this.velocity.Y > (double) Player.jumpSpeed * (double) num3)
                        this.velocity.Y = Player.jumpSpeed * num3;
                }

                if ((this.wingsLogic == 22 || this.wingsLogic == 28 ||
                     (this.wingsLogic == 30 || this.wingsLogic == 31) || this.wingsLogic == 37) &&
                    (this.controlDown && !this.controlLeft && !this.controlRight))
                    this.wingTime -= 0.5f;
                else
                    --this.wingTime;
            }
        }

        public void MoonLeechRope()
        {
            var index1 = -1;
            for (var index2 = 0; index2 < 1000; ++index2)
            {
                if (Main.projectile[index2].active && Main.projectile[index2].type == 456 &&
                    (double) Main.projectile[index2].ai[1] == (double) this.whoAmI)
                {
                    index1 = index2;
                    break;
                }
            }

            if (index1 == -1 || (double) Main.projectile[index1].ai[0] < 0.0)
                return;
            var projectile = Main.projectile[index1];
            var vector2_1 = new Vector2(0.0f, 216f);
            var vector2_2 = Main.npc[(int) Math.Abs(projectile.ai[0]) - 1].Center - this.Center + vector2_1;
            if ((double) vector2_2.Length() <= 200.0)
                return;
            var vector2_3 = Vector2.Normalize(vector2_2);
            var player = this;
            player.position = player.position + vector2_3 * (vector2_2.Length() - 200f);
        }

        public void WOFTongue()
        {
            if (Main.wof < 0 || !Main.npc[Main.wof].active)
                return;
            var num1 = Main.npc[Main.wof].position.X + 40f;
            if (Main.npc[Main.wof].direction > 0)
                num1 -= 96f;
            if ((double) this.position.X + (double) this.width > (double) num1 &&
                (double) this.position.X < (double) num1 + 140.0 && this.gross)
            {
                this.noKnockback = false;
                this.Hurt(PlayerDeathReason.LegacyDefault(), 50, Main.npc[Main.wof].direction, false, false, false, -1);
            }

            if (!this.gross && (double) this.position.Y > (double) ((Main.maxTilesY - 250) * 16) &&
                ((double) this.position.X > (double) num1 - 1920.0 &&
                 (double) this.position.X < (double) num1 + 1920.0))
            {
                this.AddBuff(37, 10, true);
                Main.PlaySound(4, (int) Main.npc[Main.wof].position.X, (int) Main.npc[Main.wof].position.Y, 10, 1f,
                    0.0f);
            }

            if (this.gross)
            {
                if ((double) this.position.Y < (double) ((Main.maxTilesY - 200) * 16))
                    this.AddBuff(38, 10, true);
                if (Main.npc[Main.wof].direction < 0)
                {
                    if ((double) this.position.X + (double) (this.width / 2) > (double) Main.npc[Main.wof].position.X +
                        (double) (Main.npc[Main.wof].width / 2) + 40.0)
                        this.AddBuff(38, 10, true);
                }
                else if ((double) this.position.X + (double) (this.width / 2) < (double) Main.npc[Main.wof].position.X +
                         (double) (Main.npc[Main.wof].width / 2) - 40.0)
                    this.AddBuff(38, 10, true);
            }

            if (!this.tongued)
                return;
            this.controlHook = false;
            this.controlUseItem = false;
            for (var index = 0; index < 1000; ++index)
            {
                if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer &&
                    Main.projectile[index].aiStyle == 7)
                    Main.projectile[index].Kill();
            }

            var center = this.Center;
            var num2 = Main.npc[Main.wof].position.X + (float) (Main.npc[Main.wof].width / 2) - center.X;
            var num3 = Main.npc[Main.wof].position.Y + (float) (Main.npc[Main.wof].height / 2) - center.Y;
            if (Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3) > 3000.0)
            {
                this.KillMe(PlayerDeathReason.ByOther(11), 1000.0, 0, false);
            }
            else
            {
                if ((double) Main.npc[Main.wof].position.X >= 608.0 && (double) Main.npc[Main.wof].position.X <=
                    (double) ((Main.maxTilesX - 38) * 16))
                    return;
                this.KillMe(PlayerDeathReason.ByOther(12), 1000.0, 0, false);
            }
        }

        public void StatusPlayer(NPC npc)
        {
            if (Main.expertMode && (npc.type == 266 && Main.rand.Next(3) == 0 || npc.type == 267))
            {
                var num1 = Main.rand.Next(9);
                switch (num1)
                {
                    case 2:
                    case 4:
                        num1 = Main.rand.Next(9);
                        break;
                }

                var num2 = (float) Main.rand.Next(75, 150) * 0.01f;
                if (num1 == 0)
                    this.AddBuff(20, (int) (60.0 * (double) num2 * 3.5), true);
                else if (num1 == 1)
                    this.AddBuff(22, (int) (60.0 * (double) num2 * 2.0), true);
                else if (num1 == 2)
                    this.AddBuff(23, (int) (60.0 * (double) num2 * 0.5), true);
                else if (num1 == 3)
                    this.AddBuff(30, (int) (60.0 * (double) num2 * 5.0), true);
                else if (num1 == 4)
                    this.AddBuff(31, (int) (60.0 * (double) num2 * 1.0), true);
                else if (num1 == 5)
                    this.AddBuff(32, (int) (60.0 * (double) num2 * 3.5), true);
                else if (num1 == 6)
                    this.AddBuff(33, (int) (60.0 * (double) num2 * 7.5), true);
                else if (num1 == 7)
                    this.AddBuff(35, (int) (60.0 * (double) num2 * 1.0), true);
                else if (num1 == 8)
                    this.AddBuff(36, (int) (60.0 * (double) num2 * 6.5), true);
            }

            if (npc.type == 530 || npc.type == 531)
                this.AddBuff(70, Main.rand.Next(240, 481), true);
            if (npc.type == 159 || npc.type == 158)
                this.AddBuff(30, Main.rand.Next(300, 600), true);
            if (npc.type == 525)
                this.AddBuff(39, 420, true);
            if (npc.type == 526)
                this.AddBuff(69, 420, true);
            if (npc.type == 527)
                this.AddBuff(31, 840, true);
            if (Main.expertMode && (npc.type == 49 || npc.type == 93 || (npc.type == 51 || npc.type == 152)) &&
                Main.rand.Next(10) == 0)
                this.AddBuff(148, Main.rand.Next(1800, 5400), true);
            if (Main.expertMode && npc.type == 222)
                this.AddBuff(20, Main.rand.Next(60, 240), true);
            if (Main.expertMode && (npc.type == 210 || npc.type == 211))
                this.AddBuff(20, Main.rand.Next(60, 180), true);
            if (Main.expertMode && npc.type == 35)
                this.AddBuff(30, Main.rand.Next(180, 300), true);
            if (Main.expertMode && npc.type == 36 && Main.rand.Next(2) == 0)
                this.AddBuff(32, Main.rand.Next(30, 60), true);
            if (npc.type >= 269 && npc.type <= 272)
            {
                if (Main.rand.Next(3) == 0)
                    this.AddBuff(30, 600, true);
                else if (Main.rand.Next(3) == 0)
                    this.AddBuff(32, 300, true);
            }

            if (npc.type >= 273 && npc.type <= 276 && Main.rand.Next(2) == 0)
                this.AddBuff(36, 600, true);
            if (npc.type >= 277 && npc.type <= 280)
                this.AddBuff(24, 600, true);
            if (npc.type == 371)
                this.AddBuff(103, 60 * Main.rand.Next(3, 8), true);
            if (npc.type == 370 && Main.expertMode)
            {
                var type = Utils.SelectRandom<int>(Main.rand, new int[3]
                {
                    0,
                    148,
                    30
                });
                if (type != 0)
                    this.AddBuff(type, 60 * Main.rand.Next(3, 11), true);
            }

            if ((npc.type == 1 && npc.netID == -6 || (npc.type == 81 || npc.type == 79)) && Main.rand.Next(4) == 0)
                this.AddBuff(22, 900, true);
            if ((npc.type == 23 || npc.type == 25) && Main.rand.Next(3) == 0)
                this.AddBuff(24, 420, true);
            if ((npc.type == 34 || npc.type == 83 || npc.type == 84) && Main.rand.Next(3) == 0)
                this.AddBuff(23, 240, true);
            if ((npc.type == 104 || npc.type == 102) && Main.rand.Next(8) == 0)
                this.AddBuff(30, 2700, true);
            if (npc.type == 75 && Main.rand.Next(10) == 0)
                this.AddBuff(35, 420, true);
            if ((npc.type == 163 || npc.type == 238) && Main.rand.Next(10) == 0)
                this.AddBuff(70, 480, true);
            if ((npc.type == 79 || npc.type == 103) && Main.rand.Next(5) == 0)
                this.AddBuff(35, 420, true);
            if ((npc.type == 75 || npc.type == 78 || npc.type == 82) && Main.rand.Next(8) == 0)
                this.AddBuff(32, 900, true);
            if ((npc.type == 93 || npc.type == 109 || npc.type == 80) && Main.rand.Next(14) == 0)
                this.AddBuff(31, 300, true);
            if (npc.type >= 305 && npc.type <= 314 && Main.rand.Next(10) == 0)
                this.AddBuff(33, 3600, true);
            if (npc.type == 77 && Main.rand.Next(6) == 0)
                this.AddBuff(36, 7200, true);
            if (npc.type == 112 && Main.rand.Next(20) == 0)
                this.AddBuff(33, 18000, true);
            if (npc.type == 182 && Main.rand.Next(25) == 0)
                this.AddBuff(33, 7200, true);
            if (npc.type == 141 && Main.rand.Next(2) == 0)
                this.AddBuff(20, 600, true);
            if (npc.type == 147 && !this.frozen && Main.rand.Next(12) == 0)
                this.AddBuff(46, 600, true);
            if (npc.type == 150)
            {
                if (Main.rand.Next(2) == 0)
                    this.AddBuff(46, 900, true);
                if (!this.frozen && Main.rand.Next(35) == 0)
                    this.AddBuff(47, 60, true);
                else if (!this.frozen && Main.expertMode && Main.rand.Next(35) == 0)
                    this.AddBuff(47, 60, true);
            }

            if (npc.type != 184)
                return;
            this.AddBuff(46, 1200, true);
            if (!this.frozen && Main.rand.Next(15) == 0)
            {
                this.AddBuff(47, 60, true);
            }
            else
            {
                if (this.frozen || !Main.expertMode || Main.rand.Next(25) != 0)
                    return;
                this.AddBuff(47, 60, true);
            }
        }

        public void GrappleMovement()
        {
            if (this.grappling[0] < 0)
                return;
            if (Main.myPlayer == this.whoAmI && this.mount.Active)
                this.mount.Dismount(this);
            this.canCarpet = true;
            this.carpetFrame = -1;
            this.wingFrame = 1;
            if ((double) this.velocity.Y == 0.0 ||
                this.wet && (double) this.velocity.Y > -0.02 && (double) this.velocity.Y < 0.02)
                this.wingFrame = 0;
            if (this.wings == 4)
                this.wingFrame = 3;
            if (this.wings == 30)
                this.wingFrame = 0;
            this.wingTime = (float) this.wingTimeMax;
            this.rocketTime = this.rocketTimeMax;
            this.rocketDelay = 0;
            this.rocketFrame = false;
            this.canRocket = false;
            this.rocketRelease = false;
            this.fallStart = (int) ((double) this.position.Y / 16.0);
            var index1 = -1;
            var num1 = 0.0f;
            var num2 = 0.0f;
            for (var index2 = 0; index2 < this.grapCount; ++index2)
            {
                var projectile = Main.projectile[this.grappling[index2]];
                num1 += projectile.position.X + (float) (projectile.width / 2);
                num2 += projectile.position.Y + (float) (projectile.height / 2);
                if (projectile.type == 403)
                    index1 = index2;
                else if (projectile.type == 446)
                {
                    var vector2_1 = new Vector2((float) (this.controlRight.ToInt() - this.controlLeft.ToInt()),
                        (float) (this.controlDown.ToInt() - this.controlUp.ToInt()) * this.gravDir);
                    if (vector2_1 != Vector2.Zero)
                        vector2_1.Normalize();
                    vector2_1 *= 100f;
                    var vector2_2 = Vector2.Normalize(this.Center - projectile.Center + vector2_1);
                    if (float.IsNaN(vector2_2.X) || float.IsNaN(vector2_2.Y))
                        vector2_2 = -Vector2.UnitY;
                    var num3 = 200f;
                    num1 += vector2_2.X * num3;
                    num2 += vector2_2.Y * num3;
                }
                else if (projectile.type == 652)
                {
                    var vector2_1 = new Vector2((float) (this.controlRight.ToInt() - this.controlLeft.ToInt()),
                        (float) (this.controlDown.ToInt() - this.controlUp.ToInt()) * this.gravDir);
                    if (vector2_1 != Vector2.Zero)
                        vector2_1.Normalize();
                    var vector2_2 = projectile.Center - this.Center;
                    var vector2_3 = vector2_2;
                    if (vector2_3 != Vector2.Zero)
                        vector2_3.Normalize();
                    var vector2_4 = Vector2.Zero;
                    if (vector2_1 != Vector2.Zero)
                        vector2_4 = vector2_3 * Vector2.Dot(vector2_3, vector2_1);
                    var num3 = 6f;
                    if ((double) Vector2.Dot(vector2_4, vector2_2) < 0.0 && (double) vector2_2.Length() >= 600.0)
                        num3 = 0.0f;
                    num1 += (float) (-(double) vector2_2.X + (double) vector2_4.X * (double) num3);
                    num2 += (float) (-(double) vector2_2.Y + (double) vector2_4.Y * (double) num3);
                }
            }

            var num4 = num1 / (float) this.grapCount;
            var num5 = num2 / (float) this.grapCount;
            var vector2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                this.position.Y + (float) this.height * 0.5f);
            var num6 = num4 - vector2.X;
            var num7 = num5 - vector2.Y;
            var num8 = (float) Math.Sqrt((double) num6 * (double) num6 + (double) num7 * (double) num7);
            var num9 = 11f;
            if (Main.projectile[this.grappling[0]].type == 315)
                num9 = 16f;
            if (Main.projectile[this.grappling[0]].type >= 646 && Main.projectile[this.grappling[0]].type <= 649)
                num9 = 13f;
            var num10 = (double) num8 <= (double) num9 ? 1f : num9 / num8;
            var num11 = num6 * num10;
            var num12 = num7 * num10;
            if ((double) num12 > 0.0)
                this.GoingDownWithGrapple = true;
            this.velocity.X = num11;
            this.velocity.Y = num12;
            if (index1 != -1)
            {
                var projectile = Main.projectile[this.grappling[index1]];
                if ((double) projectile.position.X < (double) this.position.X + (double) this.width &&
                    (double) projectile.position.X + (double) projectile.width >= (double) this.position.X &&
                    ((double) projectile.position.Y < (double) this.position.Y + (double) this.height &&
                     (double) projectile.position.Y + (double) projectile.height >= (double) this.position.Y))
                {
                    var tileX = (int) ((double) projectile.position.X + (double) (projectile.width / 2)) / 16;
                    var tileY = (int) ((double) projectile.position.Y + (double) (projectile.height / 2)) / 16;
                    this.velocity = Vector2.Zero;
                    if (Main.tile[tileX, tileY].type == (ushort) 314)
                    {
                        Vector2 Position;
                        Position.X = projectile.position.X + (float) (projectile.width / 2) - (float) (this.width / 2);
                        Position.Y = projectile.position.Y + (float) (projectile.height / 2) -
                                     (float) (this.height / 2);
                        this.grappling[0] = -1;
                        this.grapCount = 0;
                        for (var index2 = 0; index2 < 1000; ++index2)
                        {
                            if (Main.projectile[index2].active && Main.projectile[index2].owner == this.whoAmI &&
                                Main.projectile[index2].aiStyle == 7)
                                Main.projectile[index2].Kill();
                        }

                        var num3 = 13;
                        if (this.miscEquips[2].stack > 0 && this.miscEquips[2].mountType >= 0 &&
                            MountID.Sets.Cart[this.miscEquips[2].mountType] &&
                            (!this.miscEquips[2].expertOnly || Main.expertMode))
                            num3 = this.miscEquips[2].mountType;
                        var Height = this.height + Mount.GetHeightBoost(num3);
                        if (Minecart.GetOnTrack(tileX, tileY, ref Position, this.width, Height) &&
                            !Collision.SolidCollision(Position, this.width, Height - 20))
                        {
                            this.position = Position;
                            DelegateMethods.Minecart.rotation = this.fullRotation;
                            DelegateMethods.Minecart.rotationOrigin = this.fullRotationOrigin;
                            this.mount.SetMount(num3, this, this.minecartLeft);
                            Minecart.WheelSparks(this.mount.MinecartDust, this.position, this.width, this.height, 25);
                        }
                    }
                }
            }

            if (this.itemAnimation == 0)
            {
                if ((double) this.velocity.X > 0.0)
                    this.ChangeDir(1);
                if ((double) this.velocity.X < 0.0)
                    this.ChangeDir(-1);
            }

            if (this.controlJump)
            {
                if (!this.releaseJump)
                    return;
                if (((double) this.velocity.Y == 0.0 ||
                     this.wet && (double) this.velocity.Y > -0.02 && (double) this.velocity.Y < 0.02) &&
                    !this.controlDown)
                {
                    this.velocity.Y = -Player.jumpSpeed;
                    this.jump = Player.jumpHeight / 2;
                    this.releaseJump = false;
                }
                else
                {
                    this.velocity.Y += 0.01f;
                    this.releaseJump = false;
                }

                if (this.doubleJumpCloud)
                    this.jumpAgainCloud = true;
                if (this.doubleJumpSandstorm)
                    this.jumpAgainSandstorm = true;
                if (this.doubleJumpBlizzard)
                    this.jumpAgainBlizzard = true;
                if (this.doubleJumpFart)
                    this.jumpAgainFart = true;
                if (this.doubleJumpSail)
                    this.jumpAgainSail = true;
                if (this.doubleJumpUnicorn)
                    this.jumpAgainUnicorn = true;
                this.grappling[0] = 0;
                this.grapCount = 0;
                for (var index2 = 0; index2 < 1000; ++index2)
                {
                    if (Main.projectile[index2].active && Main.projectile[index2].owner == this.whoAmI &&
                        Main.projectile[index2].aiStyle == 7)
                        Main.projectile[index2].Kill();
                }
            }
            else
                this.releaseJump = true;
        }

        public void StickyMovement()
        {
            var flag = false;
            if (this.mount.Type == 6 && (double) Math.Abs(this.velocity.X) > 5.0)
                flag = true;
            if (this.mount.Type == 13 && (double) Math.Abs(this.velocity.X) > 5.0)
                flag = true;
            if (this.mount.Type == 11 && (double) Math.Abs(this.velocity.X) > 5.0)
                flag = true;
            var vector2_1 = new Vector2(this.position.X + (float) (this.width / 2) - (float) (this.width / 2 / 2),
                this.position.Y + (float) (this.height / 2) - (float) (this.height / 2 / 2));
            var vector2_2 = Collision.StickyTiles(this.position, this.velocity, this.width, this.height);
            if ((double) vector2_2.Y != -1.0 && (double) vector2_2.X != -1.0)
            {
                var x = (int) vector2_2.X;
                var y = (int) vector2_2.Y;
                var type = (int) Main.tile[x, y].type;
                if (this.whoAmI == Main.myPlayer && type == 51 &&
                    ((double) this.velocity.X != 0.0 || (double) this.velocity.Y != 0.0))
                {
                    ++this.stickyBreak;
                    if (this.stickyBreak > Main.rand.Next(20, 100) || flag)
                    {
                        this.stickyBreak = 0;
                        WorldGen.KillTile(x, y, false, false, false);
                        if (Main.netMode == 1 && !Main.tile[x, y].active() && Main.netMode == 1)
                            NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) x, (float) y, 0.0f, 0, 0, 0);
                    }
                }

                if (flag)
                    return;
                this.fallStart = (int) ((double) this.position.Y / 16.0);
                if (type != 229)
                    this.jump = 0;
                if ((double) this.velocity.X > 1.0)
                    this.velocity.X = 1f;
                if ((double) this.velocity.X < -1.0)
                    this.velocity.X = -1f;
                if ((double) this.velocity.Y > 1.0)
                    this.velocity.Y = 1f;
                if ((double) this.velocity.Y < -5.0)
                    this.velocity.Y = -5f;
                if ((double) this.velocity.X > 0.75 || (double) this.velocity.X < -0.75)
                    this.velocity.X *= 0.85f;
                else
                    this.velocity.X *= 0.6f;
                if ((double) this.velocity.Y < 0.0)
                    this.velocity.Y *= 0.96f;
                else
                    this.velocity.Y *= 0.3f;
                if (type != 229 || Main.rand.Next(5) != 0 ||
                    (double) this.velocity.Y <= 0.15 && (double) this.velocity.Y >= 0.0)
                    return;
                if ((double) (x * 16) < (double) this.position.X + (double) (this.width / 2))
                {
                    var index = Dust.NewDust(new Vector2(this.position.X - 4f, (float) (y * 16)), 4, 16, 153, 0.0f,
                        0.0f, 50, new Color(), 1f);
                    Main.dust[index].scale += (float) Main.rand.Next(0, 6) * 0.1f;
                    Main.dust[index].velocity *= 0.1f;
                    Main.dust[index].noGravity = true;
                }
                else
                {
                    var index = Dust.NewDust(
                        new Vector2((float) ((double) this.position.X + (double) this.width - 2.0), (float) (y * 16)),
                        4, 16, 153, 0.0f, 0.0f, 50, new Color(), 1f);
                    Main.dust[index].scale += (float) Main.rand.Next(0, 6) * 0.1f;
                    Main.dust[index].velocity *= 0.1f;
                    Main.dust[index].noGravity = true;
                }

                if (Main.tile[x, y + 1] != null && Main.tile[x, y + 1].type == (ushort) 229 &&
                    (double) this.position.Y + (double) this.height > (double) ((y + 1) * 16))
                {
                    if ((double) (x * 16) < (double) this.position.X + (double) (this.width / 2))
                    {
                        var index = Dust.NewDust(new Vector2(this.position.X - 4f, (float) (y * 16 + 16)), 4, 16, 153,
                            0.0f, 0.0f, 50, new Color(), 1f);
                        Main.dust[index].scale += (float) Main.rand.Next(0, 6) * 0.1f;
                        Main.dust[index].velocity *= 0.1f;
                        Main.dust[index].noGravity = true;
                    }
                    else
                    {
                        var index = Dust.NewDust(
                            new Vector2((float) ((double) this.position.X + (double) this.width - 2.0),
                                (float) (y * 16 + 16)), 4, 16, 153, 0.0f, 0.0f, 50, new Color(), 1f);
                        Main.dust[index].scale += (float) Main.rand.Next(0, 6) * 0.1f;
                        Main.dust[index].velocity *= 0.1f;
                        Main.dust[index].noGravity = true;
                    }
                }

                if (Main.tile[x, y + 2] == null || Main.tile[x, y + 2].type != (ushort) 229 ||
                    (double) this.position.Y + (double) this.height <= (double) ((y + 2) * 16))
                    return;
                if ((double) (x * 16) < (double) this.position.X + (double) (this.width / 2))
                {
                    var index = Dust.NewDust(new Vector2(this.position.X - 4f, (float) (y * 16 + 32)), 4, 16, 153, 0.0f,
                        0.0f, 50, new Color(), 1f);
                    Main.dust[index].scale += (float) Main.rand.Next(0, 6) * 0.1f;
                    Main.dust[index].velocity *= 0.1f;
                    Main.dust[index].noGravity = true;
                }
                else
                {
                    var index = Dust.NewDust(
                        new Vector2((float) ((double) this.position.X + (double) this.width - 2.0),
                            (float) (y * 16 + 32)), 4, 16, 153, 0.0f, 0.0f, 50, new Color(), 1f);
                    Main.dust[index].scale += (float) Main.rand.Next(0, 6) * 0.1f;
                    Main.dust[index].velocity *= 0.1f;
                    Main.dust[index].noGravity = true;
                }
            }
            else
                this.stickyBreak = 0;
        }

        public bool IsStackingItems()
        {
            for (var index = 0; index < this.inventoryChestStack.Length; ++index)
            {
                if (this.inventoryChestStack[index])
                {
                    if (this.inventory[index].type != 0 && this.inventory[index].stack != 0)
                        return true;
                    this.inventoryChestStack[index] = false;
                }
            }

            return false;
        }

        public void QuickStackAllChests()
        {
            if (this.IsStackingItems())
                return;
            if (Main.netMode == 1)
            {
                for (var number = 10; number < 50; ++number)
                {
                    if (this.inventory[number].type > 0 && this.inventory[number].stack > 0 &&
                        !this.inventory[number].favorited &&
                        (this.inventory[number].type < 71 || this.inventory[number].type > 74))
                    {
                        NetMessage.SendData(5, -1, -1, (NetworkText) null, this.whoAmI, (float) number,
                            (float) this.inventory[number].prefix, 0.0f, 0, 0, 0);
                        NetMessage.SendData(85, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                        this.inventoryChestStack[number] = true;
                    }
                }
            }
            else
            {
                var flag = false;
                for (var index = 10; index < 50; ++index)
                {
                    if (this.inventory[index].type > 0 && this.inventory[index].stack > 0 &&
                        !this.inventory[index].favorited)
                    {
                        var type = this.inventory[index].type;
                        var stack = this.inventory[index].stack;
                        this.inventory[index] = Chest.PutItemInNearbyChest(this.inventory[index], this.Center);
                        if (this.inventory[index].type != type || this.inventory[index].stack != stack)
                            flag = true;
                    }
                }

                if (!flag)
                    return;
                Main.PlaySound(7, -1, -1, 1, 1f, 0.0f);
            }
        }

        public void CheckDrowning()
        {
            var flag = Collision.DrownCollision(this.position, this.width, this.height, this.gravDir);
            if (this.armor[0].type == 250)
                flag = true;
            if (this.inventory[this.selectedItem].type == 186)
            {
                try
                {
                    var index1 = (int) (((double) this.position.X + (double) (this.width / 2) +
                                         (double) (6 * this.direction)) / 16.0);
                    var num = 0;
                    if ((double) this.gravDir == -1.0)
                        num = this.height;
                    var index2 = (int) (((double) this.position.Y + (double) num - 44.0 * (double) this.gravDir) /
                                        16.0);
                    if (Main.tile[index1, index2].liquid < (byte) 128)
                    {
                        if (Main.tile[index1, index2] == null)
                            Main.tile[index1, index2] = new Tile();
                        if (Main.tile[index1, index2].active() && Main.tileSolid[(int) Main.tile[index1, index2].type])
                        {
                            if (!Main.tileSolidTop[(int) Main.tile[index1, index2].type])
                                goto label_13;
                        }

                        flag = false;
                    }
                }
                catch
                {
                }
            }

            label_13:
            if (this.gills)
                flag = false;
            if (Main.myPlayer == this.whoAmI)
            {
                if (this.merman)
                    flag = false;
                if (flag)
                {
                    ++this.breathCD;
                    var num = 7;
                    if (this.inventory[this.selectedItem].type == 186)
                        num *= 2;
                    if (this.accDivingHelm)
                        num *= 4;
                    if (this.breathCD >= num)
                    {
                        this.breathCD = 0;
                        --this.breath;
                        if (this.breath == 0)
                            Main.PlaySound(23, -1, -1, 1, 1f, 0.0f);
                        if (this.breath <= 0)
                        {
                            this.lifeRegenTime = 0;
                            this.breath = 0;
                            this.statLife -= 2;
                            if (this.statLife <= 0)
                            {
                                this.statLife = 0;
                                this.KillMe(PlayerDeathReason.ByOther(1), 10.0, 0, false);
                            }
                        }
                    }
                }
                else
                {
                    this.breath += 3;
                    if (this.breath > this.breathMax)
                        this.breath = this.breathMax;
                    this.breathCD = 0;
                }
            }

            if (!flag || Main.rand.Next(20) != 0 || (this.lavaWet || this.honeyWet))
                return;
            var num1 = 0;
            if ((double) this.gravDir == -1.0)
                num1 += this.height - 12;
            if (this.inventory[this.selectedItem].type == 186)
                Dust.NewDust(
                    new Vector2((float) ((double) this.position.X + (double) (10 * this.direction) + 4.0),
                        (float) ((double) this.position.Y + (double) num1 - 54.0 * (double) this.gravDir)),
                    this.width - 8, 8, 34, 0.0f, 0.0f, 0, new Color(), 1.2f);
            else
                Dust.NewDust(
                    new Vector2(this.position.X + (float) (12 * this.direction),
                        (float) ((double) this.position.Y + (double) num1 + 4.0 * (double) this.gravDir)),
                    this.width - 8, 8, 34, 0.0f, 0.0f, 0, new Color(), 1.2f);
        }

        public void CheckIceBreak()
        {
            if ((double) this.velocity.Y <= 7.0)
                return;
            var vector2 = this.position + this.velocity;
            var num1 = (int) ((double) vector2.X / 16.0);
            var num2 = (int) (((double) vector2.X + (double) this.width) / 16.0);
            var num3 = (int) (((double) this.position.Y + (double) this.height + 1.0) / 16.0);
            for (var i = num1; i <= num2; ++i)
            {
                for (var j = num3; j <= num3 + 1; ++j)
                {
                    if (Main.tile[i, j].nactive() && Main.tile[i, j].type == (ushort) 162 &&
                        !WorldGen.SolidTile(i, j - 1))
                    {
                        WorldGen.KillTile(i, j, false, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) i, (float) j, 0.0f, 0, 0, 0);
                    }
                }
            }
        }

        public void SlopeDownMovement()
        {
            this.sloping = false;
            var y = this.velocity.Y;
            var vector4 = Collision.WalkDownSlope(this.position, this.velocity, this.width, this.height,
                this.gravity * this.gravDir);
            this.position.X = vector4.X;
            this.position.Y = vector4.Y;
            this.velocity.X = vector4.Z;
            this.velocity.Y = vector4.W;
            if ((double) this.velocity.Y == (double) y)
                return;
            this.sloping = true;
        }

        public void HoneyCollision(bool fallThrough, bool ignorePlats)
        {
            var Height = !this.onTrack ? this.height : this.height - 20;
            var velocity = this.velocity;
            this.velocity = Collision.TileCollision(this.position, this.velocity, this.width, Height, fallThrough,
                ignorePlats, (int) this.gravDir);
            var vector2 = this.velocity * 0.25f;
            if ((double) this.velocity.X != (double) velocity.X)
                vector2.X = this.velocity.X;
            if ((double) this.velocity.Y != (double) velocity.Y)
                vector2.Y = this.velocity.Y;
            var player = this;
            player.position = player.position + vector2;
        }

        public void WaterCollision(bool fallThrough, bool ignorePlats)
        {
            var Height = !this.onTrack ? this.height : this.height - 20;
            var velocity = this.velocity;
            this.velocity = Collision.TileCollision(this.position, this.velocity, this.width, Height, fallThrough,
                ignorePlats, (int) this.gravDir);
            var vector2 = this.velocity * 0.5f;
            if ((double) this.velocity.X != (double) velocity.X)
                vector2.X = this.velocity.X;
            if ((double) this.velocity.Y != (double) velocity.Y)
                vector2.Y = this.velocity.Y;
            var player = this;
            player.position = player.position + vector2;
        }

        public void DryCollision(bool fallThrough, bool ignorePlats)
        {
            var Height = !this.onTrack ? this.height : this.height - 10;
            if ((double) this.velocity.Length() > 16.0)
            {
                var vector2_1 = Collision.TileCollision(this.position, this.velocity, this.width, Height,
                    fallThrough, ignorePlats, (int) this.gravDir);
                var num1 = this.velocity.Length();
                var vector2_2 = Vector2.Normalize(this.velocity);
                if ((double) vector2_1.Y == 0.0)
                    vector2_2.Y = 0.0f;
                var zero1 = Vector2.Zero;
                var flag = this.mount.Type == 7 || this.mount.Type == 8 || this.mount.Type == 12;
                var zero2 = Vector2.Zero;
                while ((double) num1 > 0.0)
                {
                    var num2 = num1;
                    if ((double) num2 > 16.0)
                        num2 = 16f;
                    num1 -= num2;
                    var velocity1 = vector2_2 * num2;
                    this.velocity = velocity1;
                    this.SlopeDownMovement();
                    velocity1 = this.velocity;
                    if ((double) this.velocity.Y == (double) this.gravity &&
                        (!this.mount.Active || !this.mount.Cart && !flag))
                        Collision.StepDown(ref this.position, ref velocity1, this.width, this.height,
                            ref this.stepSpeed, ref this.gfxOffY, (int) this.gravDir,
                            this.waterWalk || this.waterWalk2);
                    if ((double) this.gravDir == -1.0)
                    {
                        if ((this.carpetFrame != -1 || (double) this.velocity.Y <= (double) this.gravity) &&
                            !this.controlUp)
                            Collision.StepUp(ref this.position, ref velocity1, this.width, this.height,
                                ref this.stepSpeed, ref this.gfxOffY, (int) this.gravDir, this.controlUp, 0);
                    }
                    else if (flag || (this.carpetFrame != -1 || (double) this.velocity.Y >= (double) this.gravity) &&
                             (!this.controlDown && !this.mount.Cart))
                        Collision.StepUp(ref this.position, ref velocity1, this.width, this.height, ref this.stepSpeed,
                            ref this.gfxOffY, (int) this.gravDir, this.controlUp, 0);

                    var Velocity = Collision.TileCollision(this.position, velocity1, this.width, Height,
                        fallThrough, ignorePlats, (int) this.gravDir);
                    if (Collision.up && (double) this.gravDir == 1.0)
                        this.jump = 0;
                    if (this.waterWalk || this.waterWalk2)
                    {
                        var velocity2 = this.velocity;
                        Velocity = Collision.WaterCollision(this.position, Velocity, this.width, this.height,
                            fallThrough, false, this.waterWalk);
                        if (velocity2 != this.velocity)
                            this.fallStart = (int) ((double) this.position.Y / 16.0);
                    }

                    var player = this;
                    player.position = player.position + Velocity;
                    var Falling = false;
                    if ((double) Velocity.Y > (double) this.gravity)
                        Falling = true;
                    if ((double) Velocity.Y < -(double) this.gravity)
                        Falling = true;
                    this.velocity = Velocity;
                    this.UpdateTouchingTiles();
                    this.TryBouncingBlocks(Falling);
                    this.TryLandingOnDetonator();
                    this.SlopingCollision(fallThrough);
                    Collision.StepConveyorBelt((Entity) this, this.gravDir);
                    Velocity = this.velocity;
                    zero1 += Velocity;
                }

                this.velocity = zero1;
            }
            else
            {
                this.velocity = Collision.TileCollision(this.position, this.velocity, this.width, Height, fallThrough,
                    ignorePlats, (int) this.gravDir);
                if (Collision.up && (double) this.gravDir == 1.0)
                    this.jump = 0;
                if (this.waterWalk || this.waterWalk2)
                {
                    var velocity = this.velocity;
                    this.velocity = Collision.WaterCollision(this.position, this.velocity, this.width, this.height,
                        fallThrough, false, this.waterWalk);
                    if (velocity != this.velocity)
                        this.fallStart = (int) ((double) this.position.Y / 16.0);
                }

                var player = this;
                player.position = player.position + this.velocity;
            }
        }

        public void SlopingCollision(bool fallThrough)
        {
            if (this.controlDown || this.grappling[0] >= 0 || (double) this.gravDir == -1.0)
                this.stairFall = true;
            var vector4 = Collision.SlopeCollision(this.position, this.velocity, this.width, this.height,
                this.gravity, this.stairFall);
            if (Collision.stairFall)
                this.stairFall = true;
            else if (!fallThrough)
                this.stairFall = false;
            if (Collision.stair && (double) Math.Abs(vector4.Y - this.position.Y) >
                8.0 + (double) Math.Abs(this.velocity.X))
            {
                this.gfxOffY -= vector4.Y - this.position.Y;
                this.stepSpeed = 4f;
            }

            var y = (double) this.velocity.Y;
            this.position.X = vector4.X;
            this.position.Y = vector4.Y;
            this.velocity.X = vector4.Z;
            this.velocity.Y = vector4.W;
            if ((double) this.gravDir != -1.0 || (double) this.velocity.Y != 0.0100999996066093)
                return;
            this.velocity.Y = 0.0f;
        }

        public void FloorVisuals(bool Falling)
        {
            var index1 = (int) (((double) this.position.X + (double) (this.width / 2)) / 16.0);
            var index2 = (int) (((double) this.position.Y + (double) this.height) / 16.0);
            if ((double) this.gravDir == -1.0)
                index2 = (int) ((double) this.position.Y - 0.100000001490116) / 16;
            var type = -1;
            if (Main.tile[index1 - 1, index2] == null)
                Main.tile[index1 - 1, index2] = new Tile();
            if (Main.tile[index1 + 1, index2] == null)
                Main.tile[index1 + 1, index2] = new Tile();
            if (Main.tile[index1, index2] == null)
                Main.tile[index1, index2] = new Tile();
            if (Main.tile[index1, index2].nactive() && Main.tileSolid[(int) Main.tile[index1, index2].type])
                type = (int) Main.tile[index1, index2].type;
            else if (Main.tile[index1 - 1, index2].nactive() &&
                     Main.tileSolid[(int) Main.tile[index1 - 1, index2].type])
                type = (int) Main.tile[index1 - 1, index2].type;
            else if (Main.tile[index1 + 1, index2].nactive() &&
                     Main.tileSolid[(int) Main.tile[index1 + 1, index2].type])
                type = (int) Main.tile[index1 + 1, index2].type;
            if (type <= -1)
            {
                this.slippy = false;
                this.slippy2 = false;
                this.sticky = false;
                this.powerrun = false;
            }
            else
            {
                this.sticky = type == 229;
                this.slippy = type == 161 || type == 162 || (type == 163 || type == 164) || type == 200 ||
                              type == (int) sbyte.MaxValue;
                this.slippy2 = type == 197;
                this.powerrun = type == 198;
                if (Main.tile[index1 - 1, index2].slope() != (byte) 0 ||
                    Main.tile[index1, index2].slope() != (byte) 0 || Main.tile[index1 + 1, index2].slope() != (byte) 0)
                    type = -1;
                if (this.wet || this.mount.Cart)
                    return;
                this.MakeFloorDust(Falling, type);
            }
        }

        private void MakeFloorDust(bool Falling, int type)
        {
            if (type != 147 && type != 25 && (type != 53 && type != 189) &&
                (type != 0 && type != 123 && (type != 57 && type != 112)) &&
                (type != 116 && type != 196 && (type != 193 && type != 195) &&
                 (type != 197 && type != 199 && (type != 229 && type != 371))))
                return;
            var num1 = 1;
            if (Falling)
                num1 = 20;
            for (var index1 = 0; index1 < num1; ++index1)
            {
                var flag = true;
                var Type = 76;
                if (type == 53)
                    Type = 32;
                if (type == 189)
                    Type = 16;
                if (type == 0)
                    Type = 0;
                if (type == 123)
                    Type = 53;
                if (type == 57)
                    Type = 36;
                if (type == 112)
                    Type = 14;
                if (type == 116)
                    Type = 51;
                if (type == 196)
                    Type = 108;
                if (type == 193)
                    Type = 4;
                if (type == 195 || type == 199)
                    Type = 5;
                if (type == 197)
                    Type = 4;
                if (type == 229)
                    Type = 153;
                if (type == 371)
                    Type = 243;
                if (type == 25)
                    Type = 37;
                if (Type == 32 && Main.rand.Next(2) == 0)
                    flag = false;
                if (Type == 14 && Main.rand.Next(2) == 0)
                    flag = false;
                if (Type == 51 && Main.rand.Next(2) == 0)
                    flag = false;
                if (Type == 36 && Main.rand.Next(2) == 0)
                    flag = false;
                if (Type == 0 && Main.rand.Next(3) != 0)
                    flag = false;
                if (Type == 53 && Main.rand.Next(3) != 0)
                    flag = false;
                var newColor = new Color();
                if (type == 193)
                    newColor = new Color(30, 100, (int) byte.MaxValue, 100);
                if (type == 197)
                    newColor = new Color(97, 200, (int) byte.MaxValue, 100);
                if (!Falling)
                {
                    var num2 = Math.Abs(this.velocity.X) / 3f;
                    if ((double) Main.rand.Next(100) > (double) num2 * 100.0)
                        flag = false;
                }

                if (flag)
                {
                    var num2 = this.velocity.X;
                    if ((double) num2 > 6.0)
                        num2 = 6f;
                    if ((double) num2 < -6.0)
                        num2 = -6f;
                    if ((double) this.velocity.X != 0.0 || Falling)
                    {
                        var index2 =
                            Dust.NewDust(
                                new Vector2(this.position.X,
                                    (float) ((double) this.position.Y + (double) this.height - 2.0)), this.width, 6,
                                Type, 0.0f, 0.0f, 50, newColor, 1f);
                        if ((double) this.gravDir == -1.0)
                            Main.dust[index2].position.Y -= (float) (this.height + 4);
                        if (Type == 76)
                        {
                            Main.dust[index2].scale += (float) Main.rand.Next(3) * 0.1f;
                            Main.dust[index2].noLight = true;
                        }

                        if (Type == 16 || Type == 108 || Type == 153)
                            Main.dust[index2].scale += (float) Main.rand.Next(6) * 0.1f;
                        if (Type == 37)
                        {
                            Main.dust[index2].scale += 0.25f;
                            Main.dust[index2].alpha = 50;
                        }

                        if (Type == 5)
                            Main.dust[index2].scale += (float) Main.rand.Next(2, 8) * 0.1f;
                        Main.dust[index2].noGravity = true;
                        if (num1 > 1)
                        {
                            Main.dust[index2].velocity.X *= 1.2f;
                            Main.dust[index2].velocity.Y *= 0.8f;
                            --Main.dust[index2].velocity.Y;
                            Main.dust[index2].velocity *= 0.8f;
                            Main.dust[index2].scale += (float) Main.rand.Next(3) * 0.1f;
                            Main.dust[index2].velocity.X =
                                (float) (((double) Main.dust[index2].position.X -
                                          ((double) this.position.X + (double) (this.width / 2))) * 0.200000002980232);
                            if ((double) Main.dust[index2].velocity.Y > 0.0)
                                Main.dust[index2].velocity.Y *= -1f;
                            Main.dust[index2].velocity.X += num2 * 0.3f;
                        }
                        else
                            Main.dust[index2].velocity *= 0.2f;

                        Main.dust[index2].position.X -= num2 * 1f;
                        if ((double) this.gravDir == -1.0)
                            Main.dust[index2].velocity.Y *= -1f;
                    }
                }
            }
        }

        public void BordersMovement()
        {
            if ((double) this.position.X < (double) Main.leftWorld + 640.0 + 16.0)
            {
                this.position.X = (float) ((double) Main.leftWorld + 640.0 + 16.0);
                this.velocity.X = 0.0f;
            }

            if ((double) this.position.X + (double) this.width > (double) Main.rightWorld - 640.0 - 32.0)
            {
                this.position.X = (float) ((double) Main.rightWorld - 640.0 - 32.0) - (float) this.width;
                this.velocity.X = 0.0f;
            }

            if ((double) this.position.Y < (double) Main.topWorld + 640.0 + 16.0)
            {
                this.position.Y = (float) ((double) Main.topWorld + 640.0 + 16.0);
                if ((double) this.velocity.Y < 0.11)
                    this.velocity.Y = 0.11f;
                this.gravDir = 1f;
                AchievementsHelper.HandleSpecialEvent(this, 11);
            }

            if ((double) this.position.Y > (double) Main.bottomWorld - 640.0 - 32.0 - (double) this.height)
            {
                this.position.Y = (float) ((double) Main.bottomWorld - 640.0 - 32.0) - (float) this.height;
                this.velocity.Y = 0.0f;
            }

            if ((double) this.position.Y <= (double) Main.bottomWorld - 640.0 - 150.0 - (double) this.height)
                return;
            AchievementsHelper.HandleSpecialEvent(this, 10);
        }

        public void CollectTaxes()
        {
            var num1 = Item.buyPrice(0, 0, 0, 50);
            var num2 = Item.buyPrice(0, 10, 0, 0);
            if (!NPC.taxCollector || this.taxMoney >= num2)
                return;
            var num3 = 0;
            for (var index = 0; index < 200; ++index)
            {
                if (Main.npc[index].active && !Main.npc[index].homeless &&
                    NPC.TypeToHeadIndex(Main.npc[index].type) > 0)
                    ++num3;
            }

            this.taxMoney += num1 * num3;
            if (this.taxMoney <= num2)
                return;
            this.taxMoney = num2;
        }

        public void GamepadEnableGrappleCooldown()
        {
            this._quickGrappleCooldown = 3;
        }

        public void Update(int i)
        {
            if (i == Main.myPlayer && Main.netMode != 2)
            {
                LockOnHelper.Update();
            }

            if (launcherWait > 0)
            {
                launcherWait--;
            }

            maxFallSpeed = 10f;
            gravity = defaultGravity;
            jumpHeight = 15;
            jumpSpeed = 5.01f;
            maxRunSpeed = 3f;
            runAcceleration = 0.08f;
            runSlowdown = 0.2f;
            accRunSpeed = maxRunSpeed;
            if (!mount.Active || !mount.Cart)
            {
                onWrongGround = false;
            }

            heldProj = -1;
            if (PortalPhysicsEnabled)
            {
                maxFallSpeed = 35f;
            }

            if (wet)
            {
                if (honeyWet)
                {
                    gravity = 0.1f;
                    maxFallSpeed = 3f;
                }
                else if (merman)
                {
                    gravity = 0.3f;
                    maxFallSpeed = 7f;
                }
                else
                {
                    gravity = 0.2f;
                    maxFallSpeed = 5f;
                    jumpHeight = 30;
                    jumpSpeed = 6.01f;
                }
            }

            if (vortexDebuff)
            {
                gravity = 0f;
            }

            maxFallSpeed += 0.01f;
            var flag = false;
            if (Main.mapFullscreen)
            {
                GamepadEnableGrappleCooldown();
            }
            else if (_quickGrappleCooldown > 0)
            {
                _quickGrappleCooldown--;
            }

            if (Main.myPlayer == i)
            {
                TileObject.objectPreview.Reset();
                if (DD2Event.DownedInvasionAnyDifficulty)
                {
                    downedDD2EventAnyDifficulty = true;
                }
            }

            if (active)
            {
                if (ghostDmg > 0f)
                {
                    ghostDmg -= 2.5f;
                }

                if (ghostDmg < 0f)
                {
                    ghostDmg = 0f;
                }

                if (Main.expertMode)
                {
                    if (lifeSteal < 70f)
                    {
                        lifeSteal += 0.5f;
                    }

                    if (lifeSteal > 70f)
                    {
                        lifeSteal = 70f;
                    }
                }
                else
                {
                    if (lifeSteal < 80f)
                    {
                        lifeSteal += 0.6f;
                    }

                    if (lifeSteal > 80f)
                    {
                        lifeSteal = 80f;
                    }
                }

                if (mount.Active)
                {
                    base.position.Y += (float) height;
                    height = 42 + mount.HeightBoost;
                    base.position.Y -= (float) height;
                    if (mount.Type == 0)
                    {
                        var num = (int) (base.position.X + (float) (width / 2)) / 16;
                        var j = (int) (base.position.Y + (float) (height / 2) - 14f) / 16;
                        Lighting.AddLight(num, j, 0.5f, 0.2f, 0.05f);
                        Lighting.AddLight(num + base.direction, j, 0.5f, 0.2f, 0.05f);
                        Lighting.AddLight(num + base.direction * 2, j, 0.5f, 0.2f, 0.05f);
                    }
                }
                else
                {
                    base.position.Y += (float) height;
                    height = 42;
                    base.position.Y -= (float) height;
                }

                Main.ActivePlayersCount++;
                outOfRange = false;
                if (whoAmI != Main.myPlayer)
                {
                    var num2 = (int) (base.position.X + (float) (width / 2)) / 16;
                    var num3 = (int) (base.position.Y + (float) (height / 2)) / 16;
                    if (!WorldGen.InWorld(num2, num3, 4))
                    {
                        flag = true;
                    }
                    else if (Main.tile[num2, num3] == null)
                    {
                        flag = true;
                    }
                    else if (Main.tile[num2 - 3, num3] == null)
                    {
                        flag = true;
                    }
                    else if (Main.tile[num2 + 3, num3] == null)
                    {
                        flag = true;
                    }
                    else if (Main.tile[num2, num3 - 3] == null)
                    {
                        flag = true;
                    }
                    else if (Main.tile[num2, num3 + 3] == null)
                    {
                        flag = true;
                    }

                    if (flag)
                    {
                        outOfRange = true;
                        numMinions = 0;
                        slotsMinions = 0f;
                        itemAnimation = 0;
                        PlayerFrame();
                    }
                }

                if (tankPet >= 0)
                {
                    if (!tankPetReset)
                    {
                        tankPetReset = true;
                    }
                    else
                    {
                        tankPet = -1;
                    }
                }
            }

            if (chatOverhead.timeLeft > 0)
            {
                chatOverhead.timeLeft--;
            }

            if (active && !flag)
            {
                miscCounter++;
                if (miscCounter >= 300)
                {
                    miscCounter = 0;
                }

                infernoCounter++;
                if (infernoCounter >= 180)
                {
                    infernoCounter = 0;
                }

                var num4 = (float) (Main.maxTilesX / 4200);
                num4 *= num4;
                var num5 =
                    (float) ((double) (base.position.Y / 16f - (60f + 10f * num4)) / (Main.worldSurface / 6.0));
                if ((double) num5 < 0.25)
                {
                    num5 = 0.25f;
                }

                if (num5 > 1f)
                {
                    num5 = 1f;
                }

                gravity *= num5;
                maxRegenDelay = (1f - (float) statMana / (float) statManaMax2) * 60f * 4f + 45f;
                maxRegenDelay *= 0.7f;
                UpdateSocialShadow();
                UpdateTeleportVisuals();
                whoAmI = i;
                if (whoAmI == Main.myPlayer)
                {
                    if (!DD2Event.Ongoing)
                    {
                        PurgeDD2EnergyCrystals();
                    }

                    TryPortalJumping();
                }

                if (runSoundDelay > 0)
                {
                    runSoundDelay--;
                }

                if (attackCD > 0)
                {
                    attackCD--;
                }

                if (itemAnimation == 0)
                {
                    attackCD = 0;
                }

                if (potionDelay > 0)
                {
                    potionDelay--;
                }

                if (i == Main.myPlayer)
                {
                    if (trashItem.type >= 1522 && trashItem.type <= 1527)
                    {
                        trashItem.SetDefaults(0, false);
                    }

                    if (trashItem.type == 3643)
                    {
                        trashItem.SetDefaults(0, false);
                    }

                    UpdateBiomes();
                    UpdateMinionTarget();
                }

                if (ghost)
                {
                    Ghost();
                }
                else if (dead)
                {
                    UpdateDead();
                }
                else
                {
                    Rectangle rectangle;
                    if (i == Main.myPlayer)
                    {
                        controlUp = false;
                        controlLeft = false;
                        controlDown = false;
                        controlRight = false;
                        controlJump = false;
                        controlUseItem = false;
                        controlUseTile = false;
                        controlThrow = false;
                        controlInv = false;
                        controlHook = false;
                        controlTorch = false;
                        controlSmart = false;
                        controlMount = false;
                        controlQuickHeal = false;
                        controlQuickMana = false;
                        mapStyle = false;
                        mapAlphaDown = false;
                        mapAlphaUp = false;
                        mapFullScreen = false;
                        mapZoomIn = false;
                        mapZoomOut = false;
                        if (Main.hasFocus)
                        {
                            if (!Main.drawingPlayerChat && !Main.editSign && !Main.editChest && !Main.blockInput)
                            {
                                PlayerInput.Triggers.Current.CopyInto(this);
                                if (Main.mapFullscreen)
                                {
                                    if (controlUp)
                                    {
                                        Main.mapFullscreenPos.Y -= 1f * (16f / Main.mapFullscreenScale);
                                    }

                                    if (controlDown)
                                    {
                                        Main.mapFullscreenPos.Y += 1f * (16f / Main.mapFullscreenScale);
                                    }

                                    if (controlLeft)
                                    {
                                        Main.mapFullscreenPos.X -= 1f * (16f / Main.mapFullscreenScale);
                                    }

                                    if (controlRight)
                                    {
                                        Main.mapFullscreenPos.X += 1f * (16f / Main.mapFullscreenScale);
                                    }

                                    controlUp = false;
                                    controlLeft = false;
                                    controlDown = false;
                                    controlRight = false;
                                    controlJump = false;
                                    controlUseItem = false;
                                    controlUseTile = false;
                                    controlThrow = false;
                                    controlHook = false;
                                    controlTorch = false;
                                    controlSmart = false;
                                    controlMount = false;
                                }

                                if (controlQuickHeal)
                                {
                                    if (releaseQuickHeal)
                                    {
                                        QuickHeal();
                                    }

                                    releaseQuickHeal = false;
                                }
                                else
                                {
                                    releaseQuickHeal = true;
                                }

                                if (controlQuickMana)
                                {
                                    if (releaseQuickMana)
                                    {
                                        QuickMana();
                                    }

                                    releaseQuickMana = false;
                                }
                                else
                                {
                                    releaseQuickMana = true;
                                }

                                if (controlLeft && controlRight)
                                {
                                    controlLeft = false;
                                    controlRight = false;
                                }

                                if (Main.cSmartCursorToggle)
                                {
                                    if (controlSmart && releaseSmart)
                                    {
                                        Main.PlaySound(12, -1, -1, 1, 1f, 0f);
                                        Main.SmartCursorEnabled = !Main.SmartCursorEnabled;
                                    }
                                }
                                else
                                {
                                    if (Main.SmartCursorEnabled != controlSmart)
                                    {
                                        Main.PlaySound(12, -1, -1, 1, 1f, 0f);
                                    }

                                    Main.SmartCursorEnabled = controlSmart;
                                }

                                if (controlSmart)
                                {
                                    releaseSmart = false;
                                }
                                else
                                {
                                    releaseSmart = true;
                                }

                                if (controlMount)
                                {
                                    if (releaseMount)
                                    {
                                        QuickMount();
                                    }

                                    releaseMount = false;
                                }
                                else
                                {
                                    releaseMount = true;
                                }

                                if (Main.mapFullscreen)
                                {
                                    if (mapZoomIn)
                                    {
                                        Main.mapFullscreenScale *= 1.05f;
                                    }

                                    if (mapZoomOut)
                                    {
                                        Main.mapFullscreenScale *= 0.95f;
                                    }
                                }
                                else
                                {
                                    if (Main.mapStyle == 1)
                                    {
                                        if (mapZoomIn)
                                        {
                                            Main.mapMinimapScale *= 1.025f;
                                        }

                                        if (mapZoomOut)
                                        {
                                            Main.mapMinimapScale *= 0.975f;
                                        }

                                        if (mapAlphaUp)
                                        {
                                            Main.mapMinimapAlpha += 0.015f;
                                        }

                                        if (mapAlphaDown)
                                        {
                                            Main.mapMinimapAlpha -= 0.015f;
                                        }
                                    }
                                    else if (Main.mapStyle == 2)
                                    {
                                        if (mapZoomIn)
                                        {
                                            Main.mapOverlayScale *= 1.05f;
                                        }

                                        if (mapZoomOut)
                                        {
                                            Main.mapOverlayScale *= 0.95f;
                                        }

                                        if (mapAlphaUp)
                                        {
                                            Main.mapOverlayAlpha += 0.015f;
                                        }

                                        if (mapAlphaDown)
                                        {
                                            Main.mapOverlayAlpha -= 0.015f;
                                        }
                                    }

                                    if (mapStyle)
                                    {
                                        if (releaseMapStyle)
                                        {
                                            Main.PlaySound(12, -1, -1, 1, 1f, 0f);
                                            Main.mapStyle++;
                                            if (Main.mapStyle > 2)
                                            {
                                                Main.mapStyle = 0;
                                            }
                                        }

                                        releaseMapStyle = false;
                                    }
                                    else
                                    {
                                        releaseMapStyle = true;
                                    }
                                }

                                if (mapFullScreen)
                                {
                                    if (releaseMapFullscreen)
                                    {
                                        if (Main.mapFullscreen)
                                        {
                                            Main.PlaySound(11, -1, -1, 1, 1f, 0f);
                                            Main.mapFullscreen = false;
                                        }
                                        else if (Main.mapEnabled)
                                        {
                                            Main.playerInventory = false;
                                            talkNPC = -1;
                                            Main.npcChatCornerItem = 0;
                                            Main.PlaySound(10, -1, -1, 1, 1f, 0f);
                                            var num6 = Main.mapFullscreenScale = 2.5f;
                                            Main.mapFullscreen = true;
                                            Main.resetMapFull = true;
                                            Main.buffString = string.Empty;
                                        }
                                    }

                                    releaseMapFullscreen = false;
                                }
                                else
                                {
                                    releaseMapFullscreen = true;
                                }
                            }
                            else if (!PlayerInput.UsingGamepad && !Main.editSign && !Main.editChest && !Main.blockInput)
                            {
                                PlayerInput.Triggers.Current.CopyIntoDuringChat(this);
                            }

                            if (confused)
                            {
                                var flag2 = controlLeft;
                                var flag3 = controlUp;
                                controlLeft = controlRight;
                                controlRight = flag2;
                                controlUp = controlRight;
                                controlDown = flag3;
                            }
                            else if (cartFlip)
                            {
                                if (controlRight || controlLeft)
                                {
                                    var flag4 = controlLeft;
                                    controlLeft = controlRight;
                                    controlRight = flag4;
                                }
                                else
                                {
                                    cartFlip = false;
                                }
                            }

                            for (var k = 0; k < doubleTapCardinalTimer.Length; k++)
                            {
                                doubleTapCardinalTimer[k]--;
                                if (doubleTapCardinalTimer[k] < 0)
                                {
                                    doubleTapCardinalTimer[k] = 0;
                                }
                            }

                            for (var l = 0; l < 4; l++)
                            {
                                var flag5 = false;
                                var flag6 = false;
                                switch (l)
                                {
                                    case 0:
                                        flag5 = (controlDown && releaseDown);
                                        flag6 = controlDown;
                                        break;
                                    case 1:
                                        flag5 = (controlUp && releaseUp);
                                        flag6 = controlUp;
                                        break;
                                    case 2:
                                        flag5 = (controlRight && releaseRight);
                                        flag6 = controlRight;
                                        break;
                                    case 3:
                                        flag5 = (controlLeft && releaseLeft);
                                        flag6 = controlLeft;
                                        break;
                                }

                                if (flag5)
                                {
                                    if (doubleTapCardinalTimer[l] > 0)
                                    {
                                        KeyDoubleTap(l);
                                    }
                                    else
                                    {
                                        doubleTapCardinalTimer[l] = 15;
                                    }
                                }

                                if (flag6)
                                {
                                    holdDownCardinalTimer[l]++;
                                    KeyHoldDown(l, holdDownCardinalTimer[l]);
                                }
                                else
                                {
                                    holdDownCardinalTimer[l] = 0;
                                }
                            }

                            if (controlInv)
                            {
                                if (releaseInventory)
                                {
                                    ToggleInv();
                                }

                                releaseInventory = false;
                            }
                            else
                            {
                                releaseInventory = true;
                            }

                            if (delayUseItem)
                            {
                                if (!controlUseItem)
                                {
                                    delayUseItem = false;
                                }

                                controlUseItem = false;
                            }

                            if (itemAnimation == 0 && itemTime == 0 && reuseDelay == 0)
                            {
                                dropItemCheck();
                                var num7 = selectedItem;
                                var flag7 = false;
                                if (!Main.drawingPlayerChat && selectedItem != 58 && !Main.editSign && !Main.editChest)
                                {
                                    if (PlayerInput.Triggers.Current.Hotbar1)
                                    {
                                        selectedItem = 0;
                                        flag7 = true;
                                    }

                                    if (PlayerInput.Triggers.Current.Hotbar2)
                                    {
                                        selectedItem = 1;
                                        flag7 = true;
                                    }

                                    if (PlayerInput.Triggers.Current.Hotbar3)
                                    {
                                        selectedItem = 2;
                                        flag7 = true;
                                    }

                                    if (PlayerInput.Triggers.Current.Hotbar4)
                                    {
                                        selectedItem = 3;
                                        flag7 = true;
                                    }

                                    if (PlayerInput.Triggers.Current.Hotbar5)
                                    {
                                        selectedItem = 4;
                                        flag7 = true;
                                    }

                                    if (PlayerInput.Triggers.Current.Hotbar6)
                                    {
                                        selectedItem = 5;
                                        flag7 = true;
                                    }

                                    if (PlayerInput.Triggers.Current.Hotbar7)
                                    {
                                        selectedItem = 6;
                                        flag7 = true;
                                    }

                                    if (PlayerInput.Triggers.Current.Hotbar8)
                                    {
                                        selectedItem = 7;
                                        flag7 = true;
                                    }

                                    if (PlayerInput.Triggers.Current.Hotbar9)
                                    {
                                        selectedItem = 8;
                                        flag7 = true;
                                    }

                                    if (PlayerInput.Triggers.Current.Hotbar10)
                                    {
                                        selectedItem = 9;
                                        flag7 = true;
                                    }

                                    var selectedBinding = DpadRadial.SelectedBinding;
                                    var selectedBinding2 = CircularRadial.SelectedBinding;
                                    var selectedBinding3 = QuicksRadial.SelectedBinding;
                                    DpadRadial.Update();
                                    CircularRadial.Update();
                                    QuicksRadial.Update();
                                    if (CircularRadial.SelectedBinding >= 0 &&
                                        selectedBinding2 != CircularRadial.SelectedBinding)
                                    {
                                        DpadRadial.ChangeSelection(-1);
                                    }

                                    if (DpadRadial.SelectedBinding >= 0 &&
                                        selectedBinding != DpadRadial.SelectedBinding)
                                    {
                                        CircularRadial.ChangeSelection(-1);
                                    }

                                    if (QuicksRadial.SelectedBinding != -1 &&
                                        PlayerInput.Triggers.JustReleased.RadialQuickbar &&
                                        !PlayerInput.MiscSettingsTEMP.HotbarRadialShouldBeUsed)
                                    {
                                        switch (QuicksRadial.SelectedBinding)
                                        {
                                            case 0:
                                                QuickHeal();
                                                break;
                                            case 1:
                                                QuickBuff();
                                                break;
                                            case 2:
                                                QuickMana();
                                                break;
                                        }
                                    }

                                    if (controlTorch || flag7)
                                    {
                                        DpadRadial.ChangeSelection(-1);
                                        CircularRadial.ChangeSelection(-1);
                                    }

                                    if (controlTorch && flag7)
                                    {
                                        if (selectedItem != nonTorch)
                                        {
                                            Main.PlaySound(12, -1, -1, 1, 1f, 0f);
                                        }

                                        nonTorch = selectedItem;
                                        selectedItem = num7;
                                        flag7 = false;
                                    }
                                }

                                var flag8 = Main.hairWindow;
                                if (flag8)
                                {
                                    var y = Main.screenHeight / 2 + 60;
                                    var x = Main.screenWidth / 2 - Main.hairStyleBackTexture.Width / 2;
                                    rectangle = new Rectangle(x, y, Main.hairStyleBackTexture.Width,
                                        Main.hairStyleBackTexture.Height);
                                    flag8 = rectangle.Contains(Main.MouseScreen.ToPoint());
                                }

                                if (flag7 && CaptureManager.Instance.Active)
                                {
                                    CaptureManager.Instance.Active = false;
                                }

                                if (num7 != selectedItem)
                                {
                                    Main.PlaySound(12, -1, -1, 1, 1f, 0f);
                                }

                                if (Main.mapFullscreen)
                                {
                                    var num8 = (float) (PlayerInput.ScrollWheelDelta / 120);
                                    if (PlayerInput.UsingGamepad)
                                    {
                                        num8 += (float) (PlayerInput.Triggers.Current.HotbarPlus.ToInt() -
                                                         PlayerInput.Triggers.Current.HotbarMinus.ToInt()) * 0.1f;
                                    }

                                    Main.mapFullscreenScale *= 1f + num8 * 0.3f;
                                }
                                else if (CaptureManager.Instance.Active)
                                {
                                    CaptureManager.Instance.Scrolling();
                                }
                                else if (!flag8)
                                {
                                    if (!Main.playerInventory)
                                    {
                                        HandleHotbar();
                                    }
                                    else
                                    {
                                        var num9 = PlayerInput.ScrollWheelDelta / 120;
                                        var flag9 = true;
                                        if (Main.recBigList)
                                        {
                                            var num10 = 42;
                                            var num11 = 340;
                                            var num12 = 310;
                                            PlayerInput.SetZoom_UI();
                                            var num13 = (Main.screenWidth - num12 - 280) / num10;
                                            var num14 = (Main.screenHeight - num11 - 20) / num10;
                                            rectangle = new Rectangle(num12, num11, num13 * num10, num14 * num10);
                                            if (rectangle.Contains(Main.MouseScreen.ToPoint()))
                                            {
                                                num9 *= -1;
                                                var num15 = Math.Sign(num9);
                                                while (num9 != 0)
                                                {
                                                    if (num9 < 0)
                                                    {
                                                        Main.recStart -= num13;
                                                        if (Main.recStart < 0)
                                                        {
                                                            Main.recStart = 0;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        Main.recStart += num13;
                                                        if (Main.recStart > Main.numAvailableRecipes - num13)
                                                        {
                                                            Main.recStart = Main.numAvailableRecipes - num13;
                                                        }
                                                    }

                                                    num9 -= num15;
                                                }
                                            }

                                            PlayerInput.SetZoom_World();
                                        }

                                        if (flag9)
                                        {
                                            Main.focusRecipe += num9;
                                            if (Main.focusRecipe > Main.numAvailableRecipes - 1)
                                            {
                                                Main.focusRecipe = Main.numAvailableRecipes - 1;
                                            }

                                            if (Main.focusRecipe < 0)
                                            {
                                                Main.focusRecipe = 0;
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                var flag10 = false;
                                if (!Main.drawingPlayerChat && selectedItem != 58 && !Main.editSign && !Main.editChest)
                                {
                                    var num16 = -1;
                                    if (Main.keyState.IsKeyDown(Keys.D1))
                                    {
                                        num16 = 0;
                                        flag10 = true;
                                    }

                                    if (Main.keyState.IsKeyDown(Keys.D2))
                                    {
                                        num16 = 1;
                                        flag10 = true;
                                    }

                                    if (Main.keyState.IsKeyDown(Keys.D3))
                                    {
                                        num16 = 2;
                                        flag10 = true;
                                    }

                                    if (Main.keyState.IsKeyDown(Keys.D4))
                                    {
                                        num16 = 3;
                                        flag10 = true;
                                    }

                                    if (Main.keyState.IsKeyDown(Keys.D5))
                                    {
                                        num16 = 4;
                                        flag10 = true;
                                    }

                                    if (Main.keyState.IsKeyDown(Keys.D6))
                                    {
                                        num16 = 5;
                                        flag10 = true;
                                    }

                                    if (Main.keyState.IsKeyDown(Keys.D7))
                                    {
                                        num16 = 6;
                                        flag10 = true;
                                    }

                                    if (Main.keyState.IsKeyDown(Keys.D8))
                                    {
                                        num16 = 7;
                                        flag10 = true;
                                    }

                                    if (Main.keyState.IsKeyDown(Keys.D9))
                                    {
                                        num16 = 8;
                                        flag10 = true;
                                    }

                                    if (Main.keyState.IsKeyDown(Keys.D0))
                                    {
                                        num16 = 9;
                                        flag10 = true;
                                    }

                                    if (flag10)
                                    {
                                        if (num16 != nonTorch)
                                        {
                                            Main.PlaySound(12, -1, -1, 1, 1f, 0f);
                                        }

                                        nonTorch = num16;
                                    }
                                }
                            }
                        }

                        if (selectedItem == 58)
                        {
                            nonTorch = -1;
                        }
                        else
                        {
                            SmartSelectLookup();
                        }

                        if (stoned != lastStoned)
                        {
                            if (whoAmI == Main.myPlayer && stoned)
                            {
                                var damage = (int) (20.0 * (double) Main.damageMultiplier);
                                Hurt(PlayerDeathReason.ByOther(5), damage, 0, false, false, false, -1);
                            }

                            Main.PlaySound(0, (int) base.position.X, (int) base.position.Y, 1, 1f, 0f);
                            for (var m = 0; m < 20; m++)
                            {
                                var num17 = Dust.NewDust(base.position, width, height, 1, 0f, 0f, 0, default(Color),
                                    1f);
                                if (Main.rand.Next(2) == 0)
                                {
                                    Main.dust[num17].noGravity = true;
                                }
                            }
                        }

                        lastStoned = stoned;
                        if (frozen || webbed || stoned)
                        {
                            controlJump = false;
                            controlDown = false;
                            controlLeft = false;
                            controlRight = false;
                            controlUp = false;
                            controlUseItem = false;
                            controlUseTile = false;
                            controlThrow = false;
                            gravDir = 1f;
                        }

                        if (!controlThrow)
                        {
                            releaseThrow = true;
                        }
                        else
                        {
                            releaseThrow = false;
                        }

                        if (Main.netMode == 1)
                        {
                            var flag11 = false;
                            if (controlUp != Main.clientPlayer.controlUp)
                            {
                                flag11 = true;
                            }

                            if (controlDown != Main.clientPlayer.controlDown)
                            {
                                flag11 = true;
                            }

                            if (controlLeft != Main.clientPlayer.controlLeft)
                            {
                                flag11 = true;
                            }

                            if (controlRight != Main.clientPlayer.controlRight)
                            {
                                flag11 = true;
                            }

                            if (controlJump != Main.clientPlayer.controlJump)
                            {
                                flag11 = true;
                            }

                            if (controlUseItem != Main.clientPlayer.controlUseItem)
                            {
                                flag11 = true;
                            }

                            if (selectedItem != Main.clientPlayer.selectedItem)
                            {
                                flag11 = true;
                            }

                            if (flag11)
                            {
                                NetMessage.SendData(13, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
                            }
                        }

                        if (Main.playerInventory)
                        {
                            AdjTiles();
                        }

                        if (chest != -1)
                        {
                            if (chest != -2)
                            {
                                flyingPigChest = -1;
                            }

                            if (flyingPigChest >= 0)
                            {
                                if (!Main.projectile[flyingPigChest].active ||
                                    Main.projectile[flyingPigChest].type != 525)
                                {
                                    Main.PlaySound(SoundID.Item59, -1, -1);
                                    chest = -1;
                                    Recipe.FindRecipes();
                                }
                                else
                                {
                                    var num18 = (int) (((double) base.position.X + (double) width * 0.5) / 16.0);
                                    var num19 = (int) (((double) base.position.Y + (double) height * 0.5) / 16.0);
                                    chestX = (int) Main.projectile[flyingPigChest].Center.X / 16;
                                    chestY = (int) Main.projectile[flyingPigChest].Center.Y / 16;
                                    if (num18 < chestX - tileRangeX || num18 > chestX + tileRangeX + 1 ||
                                        num19 < chestY - tileRangeY || num19 > chestY + tileRangeY + 1)
                                    {
                                        if (chest != -1)
                                        {
                                            Main.PlaySound(SoundID.Item59, -1, -1);
                                        }

                                        chest = -1;
                                        Recipe.FindRecipes();
                                    }
                                }
                            }
                            else
                            {
                                var num20 = (int) (((double) base.position.X + (double) width * 0.5) / 16.0);
                                var num21 = (int) (((double) base.position.Y + (double) height * 0.5) / 16.0);
                                if (Main.tile[chestX, chestY].type == 463 && num21 < chestY)
                                {
                                    num21 += 2;
                                }

                                if (num20 < chestX - tileRangeX || num20 > chestX + tileRangeX + 1 ||
                                    num21 < chestY - tileRangeY || num21 > chestY + tileRangeY + 1)
                                {
                                    if (chest != -1)
                                    {
                                        Main.PlaySound(11, -1, -1, 1, 1f, 0f);
                                    }

                                    chest = -1;
                                    Recipe.FindRecipes();
                                }
                                else if (!Main.tile[chestX, chestY].active())
                                {
                                    Main.PlaySound(11, -1, -1, 1, 1f, 0f);
                                    chest = -1;
                                    Recipe.FindRecipes();
                                }
                            }
                        }
                        else
                        {
                            flyingPigChest = -1;
                        }

                        if (base.velocity.Y <= 0f)
                        {
                            fallStart2 = (int) (base.position.Y / 16f);
                        }

                        if (base.velocity.Y == 0f)
                        {
                            var num22 = 25;
                            num22 += extraFall;
                            var num23 = (int) (base.position.Y / 16f) - fallStart;
                            if (mount.CanFly)
                            {
                                num23 = 0;
                            }

                            if (mount.Cart && Minecart.OnTrack(base.position, width, height))
                            {
                                num23 = 0;
                            }

                            if (mount.Type == 1)
                            {
                                num23 = 0;
                            }

                            mount.FatigueRecovery();
                            var flag12 = false;
                            for (var n = 3; n < 10; n++)
                            {
                                if (armor[n].stack > 0 && armor[n].wingSlot > -1)
                                {
                                    flag12 = true;
                                }
                            }

                            if (stoned)
                            {
                                var num24 = (int) (((float) num23 * gravDir - 2f) * 20f);
                                if (num24 > 0)
                                {
                                    Hurt(PlayerDeathReason.ByOther(5), num24, 0, false, false, false, -1);
                                    immune = false;
                                }
                            }
                            else if (((gravDir == 1f && num23 > num22) || (gravDir == -1f && num23 < -num22)) &&
                                     !noFallDmg && !flag12)
                            {
                                immune = false;
                                var num25 = (int) ((float) num23 * gravDir - (float) num22) * 10;
                                if (mount.Active)
                                {
                                    num25 = (int) ((float) num25 * mount.FallDamage);
                                }

                                Hurt(PlayerDeathReason.ByOther(0), num25, 0, false, false, false, -1);
                                if (!dead && statLife <= statLifeMax2 / 10)
                                {
                                    AchievementsHelper.HandleSpecialEvent(this, 8);
                                }
                            }

                            fallStart = (int) (base.position.Y / 16f);
                        }

                        if (jump > 0 || rocketDelay > 0 || wet || slowFall || (double) num5 < 0.8 || tongued)
                        {
                            fallStart = (int) (base.position.Y / 16f);
                        }
                    }

                    if (Main.netMode != 1)
                    {
                        if (chest == -1 && lastChest >= 0 && Main.chest[lastChest] != null &&
                            Main.chest[lastChest] != null)
                        {
                            var x2 = Main.chest[lastChest].x;
                            var y2 = Main.chest[lastChest].y;
                            NPC.BigMimicSummonCheck(x2, y2);
                        }

                        lastChest = chest;
                    }

                    if (mouseInterface)
                    {
                        delayUseItem = true;
                    }

                    tileTargetX = (int) (((float) Main.mouseX + Main.screenPosition.X) / 16f);
                    tileTargetY = (int) (((float) Main.mouseY + Main.screenPosition.Y) / 16f);
                    if (gravDir == -1f)
                    {
                        tileTargetY = (int) ((Main.screenPosition.Y + (float) Main.screenHeight - (float) Main.mouseY) /
                                             16f);
                    }

                    if (tileTargetX >= Main.maxTilesX - 5)
                    {
                        tileTargetX = Main.maxTilesX - 5;
                    }

                    if (tileTargetY >= Main.maxTilesY - 5)
                    {
                        tileTargetY = Main.maxTilesY - 5;
                    }

                    if (tileTargetX < 5)
                    {
                        tileTargetX = 5;
                    }

                    if (tileTargetY < 5)
                    {
                        tileTargetY = 5;
                    }

                    if (Main.tile[tileTargetX - 1, tileTargetY] == null)
                    {
                        var tile = Main.tile;
                        var num26 = tileTargetX - 1;
                        var num27 = tileTargetY;
                        var tile2 = new Tile();
                        tile[num26, num27] = tile2;
                    }

                    if (Main.tile[tileTargetX + 1, tileTargetY] == null)
                    {
                        var tile3 = Main.tile;
                        var num28 = tileTargetX + 1;
                        var num29 = tileTargetY;
                        var tile4 = new Tile();
                        tile3[num28, num29] = tile4;
                    }

                    if (Main.tile[tileTargetX, tileTargetY] == null)
                    {
                        var tile5 = Main.tile;
                        var num30 = tileTargetX;
                        var num31 = tileTargetY;
                        var tile6 = new Tile();
                        tile5[num30, num31] = tile6;
                    }

                    if (!Main.tile[tileTargetX, tileTargetY].active())
                    {
                        if (Main.tile[tileTargetX - 1, tileTargetY].active() &&
                            Main.tile[tileTargetX - 1, tileTargetY].type == 323)
                        {
                            int frameY = Main.tile[tileTargetX - 1, tileTargetY].frameY;
                            if (frameY < -4)
                            {
                                tileTargetX++;
                            }

                            if (frameY > 4)
                            {
                                tileTargetX--;
                            }
                        }
                        else if (Main.tile[tileTargetX + 1, tileTargetY].active() &&
                                 Main.tile[tileTargetX + 1, tileTargetY].type == 323)
                        {
                            int frameY2 = Main.tile[tileTargetX + 1, tileTargetY].frameY;
                            if (frameY2 < -4)
                            {
                                tileTargetX++;
                            }

                            if (frameY2 > 4)
                            {
                                tileTargetX--;
                            }
                        }
                    }

                    try
                    {
                        SmartCursorLookup();
                        SmartInteractLookup();
                    }
                    catch
                    {
                        Main.SmartCursorEnabled = false;
                    }

                    UpdateImmunity();
                    if (petalTimer > 0)
                    {
                        petalTimer--;
                    }

                    if (shadowDodgeTimer > 0)
                    {
                        shadowDodgeTimer--;
                    }

                    if (jump > 0 || base.velocity.Y != 0f)
                    {
                        slippy = false;
                        slippy2 = false;
                        powerrun = false;
                        sticky = false;
                    }

                    potionDelayTime = Item.potionDelay;
                    restorationDelayTime = Item.restorationDelay;
                    if (pStone)
                    {
                        potionDelayTime = (int) ((double) potionDelayTime * 0.75);
                        restorationDelayTime = (int) ((double) restorationDelayTime * 0.75);
                    }

                    if (yoraiz0rEye > 0)
                    {
                        Yoraiz0rEye();
                    }

                    ResetEffects();
                    UpdateDyes(i);
                    meleeCrit += inventory[selectedItem].crit;
                    magicCrit += inventory[selectedItem].crit;
                    rangedCrit += inventory[selectedItem].crit;
                    thrownCrit += inventory[selectedItem].crit;
                    if (whoAmI == Main.myPlayer)
                    {
                        Main.musicBox2 = -1;
                        if (Main.waterCandles > 0)
                        {
                            AddBuff(86, 2, false);
                        }

                        if (Main.peaceCandles > 0)
                        {
                            AddBuff(157, 2, false);
                        }

                        if (Main.campfire)
                        {
                            AddBuff(87, 2, false);
                        }

                        if (Main.starInBottle)
                        {
                            AddBuff(158, 2, false);
                        }

                        if (Main.heartLantern)
                        {
                            AddBuff(89, 2, false);
                        }

                        if (Main.sunflower)
                        {
                            AddBuff(146, 2, false);
                        }

                        if (hasBanner)
                        {
                            AddBuff(147, 2, false);
                        }

                        if (!behindBackWall && ZoneSandstorm)
                        {
                            AddBuff(194, 2, false);
                        }
                    }

                    for (var num32 = 0; num32 < 206; num32++)
                    {
                        buffImmune[num32] = false;
                    }

                    UpdateBuffs(i);
                    if (whoAmI == Main.myPlayer)
                    {
                        if (!onFire && !poisoned)
                        {
                            trapDebuffSource = false;
                        }

                        UpdatePet(i);
                        UpdatePetLight(i);
                    }

                    var flag13 = wet && !lavaWet && (!mount.Active || mount.Type != 3);
                    if (accMerman && flag13)
                    {
                        releaseJump = true;
                        wings = 0;
                        merman = true;
                        accFlipper = true;
                        AddBuff(34, 2, true);
                    }
                    else
                    {
                        merman = false;
                    }

                    if (!flag13 && forceWerewolf)
                    {
                        forceMerman = false;
                    }

                    if (forceMerman && flag13)
                    {
                        wings = 0;
                    }

                    accMerman = false;
                    hideMerman = false;
                    forceMerman = false;
                    if (wolfAcc && !merman && !Main.dayTime && !wereWolf)
                    {
                        AddBuff(28, 60, true);
                    }

                    wolfAcc = false;
                    hideWolf = false;
                    forceWerewolf = false;
                    if (whoAmI == Main.myPlayer)
                    {
                        for (var num33 = 0; num33 < 22; num33++)
                        {
                            if (buffType[num33] > 0 && buffTime[num33] <= 0)
                            {
                                DelBuff(num33);
                            }
                        }
                    }

                    beetleDefense = false;
                    beetleOffense = false;
                    doubleJumpCloud = false;
                    setSolar = false;
                    head = armor[0].headSlot;
                    body = armor[1].bodySlot;
                    legs = armor[2].legSlot;
                    handon = -1;
                    handoff = -1;
                    back = -1;
                    front = -1;
                    shoe = -1;
                    waist = -1;
                    shield = -1;
                    neck = -1;
                    face = -1;
                    balloon = -1;
                    if (MountFishronSpecialCounter > 0f)
                    {
                        MountFishronSpecialCounter -= 1f;
                    }

                    if (_portalPhysicsTime > 0)
                    {
                        _portalPhysicsTime--;
                    }

                    UpdateEquips(i);
                    if (base.velocity.Y == 0f || controlJump)
                    {
                        portalPhysicsFlag = false;
                    }

                    if (inventory[selectedItem].type == 3384 || portalPhysicsFlag)
                    {
                        _portalPhysicsTime = 30;
                    }

                    if (mount.Active)
                    {
                        mount.UpdateEffects(this);
                    }

                    gemCount++;
                    if (gemCount >= 10)
                    {
                        gem = -1;
                        ownedLargeGems = (byte) 0;
                        gemCount = 0;
                        for (var num34 = 0; num34 <= 58; num34++)
                        {
                            if (inventory[num34].type == 0 || inventory[num34].stack == 0)
                            {
                                inventory[num34].TurnToAir();
                            }

                            if (inventory[num34].type >= 1522 && inventory[num34].type <= 1527)
                            {
                                gem = inventory[num34].type - 1522;
                                ownedLargeGems[gem] = true;
                            }

                            if (inventory[num34].type == 3643)
                            {
                                gem = 6;
                                ownedLargeGems[gem] = true;
                            }
                        }
                    }

                    UpdateArmorLights();
                    UpdateArmorSets(i);
                    if (maxTurretsOld != maxTurrets)
                    {
                        UpdateMaxTurrets();
                        maxTurretsOld = maxTurrets;
                    }

                    if (shieldRaised)
                    {
                        statDefense += 20;
                    }

                    if ((merman || forceMerman) && flag13)
                    {
                        wings = 0;
                    }

                    if (invis)
                    {
                        if (itemAnimation == 0 && aggro > -750)
                        {
                            aggro = -750;
                        }
                        else if (aggro > -250)
                        {
                            aggro = -250;
                        }
                    }

                    if (inventory[selectedItem].type == 3106)
                    {
                        if (itemAnimation > 0)
                        {
                            stealthTimer = 15;
                            if (stealth > 0f)
                            {
                                stealth += 0.1f;
                            }
                        }
                        else if ((double) base.velocity.X > -0.1 && (double) base.velocity.X < 0.1 &&
                                 (double) base.velocity.Y > -0.1 && (double) base.velocity.Y < 0.1 && !mount.Active)
                        {
                            if (stealthTimer == 0 && stealth > 0f)
                            {
                                stealth -= 0.02f;
                                if ((double) stealth <= 0.0)
                                {
                                    stealth = 0f;
                                    if (Main.netMode == 1)
                                    {
                                        NetMessage.SendData(84, -1, -1, null, whoAmI, 0f, 0f, 0f, 0, 0, 0);
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (stealth > 0f)
                            {
                                stealth += 0.1f;
                            }

                            if (mount.Active)
                            {
                                stealth = 1f;
                            }
                        }

                        if (stealth > 1f)
                        {
                            stealth = 1f;
                        }

                        meleeDamage += (1f - stealth) * 3f;
                        meleeCrit += (int) ((1f - stealth) * 30f);
                        if (meleeCrit > 100)
                        {
                            meleeCrit = 100;
                        }

                        aggro -= (int) ((1f - stealth) * 750f);
                        if (stealthTimer > 0)
                        {
                            stealthTimer--;
                        }
                    }
                    else if (shroomiteStealth)
                    {
                        if (itemAnimation > 0)
                        {
                            stealthTimer = 5;
                        }

                        if ((double) base.velocity.X > -0.1 && (double) base.velocity.X < 0.1 &&
                            (double) base.velocity.Y > -0.1 && (double) base.velocity.Y < 0.1 && !mount.Active)
                        {
                            if (stealthTimer == 0 && stealth > 0f)
                            {
                                stealth -= 0.015f;
                                if ((double) stealth <= 0.0)
                                {
                                    stealth = 0f;
                                    if (Main.netMode == 1)
                                    {
                                        NetMessage.SendData(84, -1, -1, null, whoAmI, 0f, 0f, 0f, 0, 0, 0);
                                    }
                                }
                            }
                        }
                        else
                        {
                            var num35 = Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y);
                            stealth += num35 * 0.0075f;
                            if (stealth > 1f)
                            {
                                stealth = 1f;
                            }

                            if (mount.Active)
                            {
                                stealth = 1f;
                            }
                        }

                        rangedDamage += (1f - stealth) * 0.6f;
                        rangedCrit += (int) ((1f - stealth) * 10f);
                        aggro -= (int) ((1f - stealth) * 750f);
                        if (stealthTimer > 0)
                        {
                            stealthTimer--;
                        }
                    }
                    else if (setVortex)
                    {
                        var flag14 = false;
                        if (vortexStealthActive)
                        {
                            var num36 = stealth;
                            stealth -= 0.04f;
                            if (stealth < 0f)
                            {
                                stealth = 0f;
                            }
                            else
                            {
                                flag14 = true;
                            }

                            if (stealth == 0f && num36 != stealth && Main.netMode == 1)
                            {
                                NetMessage.SendData(84, -1, -1, null, whoAmI, 0f, 0f, 0f, 0, 0, 0);
                            }

                            rangedDamage += (1f - stealth) * 0.8f;
                            rangedCrit += (int) ((1f - stealth) * 20f);
                            aggro -= (int) ((1f - stealth) * 1200f);
                            moveSpeed *= 0.3f;
                            if (mount.Active)
                            {
                                vortexStealthActive = false;
                            }
                        }
                        else
                        {
                            var num37 = stealth;
                            stealth += 0.04f;
                            if (stealth > 1f)
                            {
                                stealth = 1f;
                            }
                            else
                            {
                                flag14 = true;
                            }

                            if (stealth == 1f && num37 != stealth && Main.netMode == 1)
                            {
                                NetMessage.SendData(84, -1, -1, null, whoAmI, 0f, 0f, 0f, 0, 0, 0);
                            }
                        }

                        if (flag14)
                        {
                            if (Main.rand.Next(2) == 0)
                            {
                                var vector = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                                var dust = Main.dust[
                                    Dust.NewDust(base.Center - vector * 30f, 0, 0, 229, 0f, 0f, 0, default(Color), 1f)];
                                dust.noGravity = true;
                                dust.position = base.Center - vector * (float) Main.rand.Next(5, 11);
                                dust.velocity = vector.RotatedBy(1.5707963705062866, default(Vector2)) * 4f;
                                dust.scale = 0.5f + Main.rand.NextFloat();
                                dust.fadeIn = 0.5f;
                            }

                            if (Main.rand.Next(2) == 0)
                            {
                                var vector2 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                                var dust2 =
                                    Main.dust[
                                        Dust.NewDust(base.Center - vector2 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color),
                                            1f)];
                                dust2.noGravity = true;
                                dust2.position = base.Center - vector2 * 12f;
                                dust2.velocity = vector2.RotatedBy(-1.5707963705062866, default(Vector2)) * 2f;
                                dust2.scale = 0.5f + Main.rand.NextFloat();
                                dust2.fadeIn = 0.5f;
                            }
                        }
                    }
                    else
                    {
                        stealth = 1f;
                    }

                    if (manaSick)
                    {
                        magicDamage *= 1f - manaSickReduction;
                    }

                    if (inventory[selectedItem].type == 1947)
                    {
                        meleeSpeed = (1f + meleeSpeed) / 2f;
                    }

                    if ((double) pickSpeed < 0.3)
                    {
                        pickSpeed = 0.3f;
                    }

                    if (meleeSpeed > 3f)
                    {
                        meleeSpeed = 3f;
                    }

                    if ((double) moveSpeed > 1.6)
                    {
                        moveSpeed = 1.6f;
                    }

                    if (tileSpeed > 3f)
                    {
                        tileSpeed = 3f;
                    }

                    tileSpeed = 1f / tileSpeed;
                    if (wallSpeed > 3f)
                    {
                        wallSpeed = 3f;
                    }

                    wallSpeed = 1f / wallSpeed;
                    if (statManaMax2 > 400)
                    {
                        statManaMax2 = 400;
                    }

                    if (statDefense < 0)
                    {
                        statDefense = 0;
                    }

                    if (slowOgreSpit)
                    {
                        moveSpeed /= 3f;
                        if (base.velocity.Y == 0f && Math.Abs(base.velocity.X) > 1f)
                        {
                            base.velocity.X /= 2f;
                        }
                    }
                    else if (dazed)
                    {
                        moveSpeed /= 3f;
                    }
                    else if (slow)
                    {
                        moveSpeed /= 2f;
                    }
                    else if (chilled)
                    {
                        moveSpeed *= 0.75f;
                    }

                    if (shieldRaised)
                    {
                        moveSpeed /= 3f;
                        if (base.velocity.Y == 0f && Math.Abs(base.velocity.X) > 3f)
                        {
                            base.velocity.X /= 2f;
                        }
                    }

                    if (DD2Event.Ongoing)
                    {
                        DD2Event.FindArenaHitbox();
                        if (DD2Event.ShouldBlockBuilding(base.Center))
                        {
                            noBuilding = true;
                            AddBuff(199, 3, true);
                        }
                    }

                    meleeSpeed = 1f / meleeSpeed;
                    UpdateLifeRegen();
                    soulDrain = 0;
                    UpdateManaRegen();
                    if (manaRegenCount < 0)
                    {
                        manaRegenCount = 0;
                    }

                    if (statMana > statManaMax2)
                    {
                        statMana = statManaMax2;
                    }

                    runAcceleration *= moveSpeed;
                    maxRunSpeed *= moveSpeed;
                    UpdateJumpHeight();
                    for (var num38 = 0; num38 < 22; num38++)
                    {
                        if (buffType[num38] > 0 && buffTime[num38] > 0 && buffImmune[buffType[num38]])
                        {
                            DelBuff(num38);
                        }
                    }

                    if (brokenArmor)
                    {
                        statDefense /= 2;
                    }

                    if (witheredArmor)
                    {
                        statDefense /= 2;
                    }

                    if (witheredWeapon)
                    {
                        meleeDamage *= 0.5f;
                        rangedDamage *= 0.5f;
                        magicDamage *= 0.5f;
                        minionDamage *= 0.5f;
                        thrownDamage *= 0.5f;
                    }

                    lastTileRangeX = tileRangeX;
                    lastTileRangeY = tileRangeY;
                    if (mount.Active && mount.BlockExtraJumps)
                    {
                        jumpAgainCloud = false;
                        jumpAgainSandstorm = false;
                        jumpAgainBlizzard = false;
                        jumpAgainFart = false;
                        jumpAgainSail = false;
                        jumpAgainUnicorn = false;
                    }
                    else
                    {
                        if (!doubleJumpCloud)
                        {
                            jumpAgainCloud = false;
                        }
                        else if (base.velocity.Y == 0f || sliding)
                        {
                            jumpAgainCloud = true;
                        }

                        if (!doubleJumpSandstorm)
                        {
                            jumpAgainSandstorm = false;
                        }
                        else if (base.velocity.Y == 0f || sliding)
                        {
                            jumpAgainSandstorm = true;
                        }

                        if (!doubleJumpBlizzard)
                        {
                            jumpAgainBlizzard = false;
                        }
                        else if (base.velocity.Y == 0f || sliding)
                        {
                            jumpAgainBlizzard = true;
                        }

                        if (!doubleJumpFart)
                        {
                            jumpAgainFart = false;
                        }
                        else if (base.velocity.Y == 0f || sliding)
                        {
                            jumpAgainFart = true;
                        }

                        if (!doubleJumpSail)
                        {
                            jumpAgainSail = false;
                        }
                        else if (base.velocity.Y == 0f || sliding)
                        {
                            jumpAgainSail = true;
                        }

                        if (!doubleJumpUnicorn)
                        {
                            jumpAgainUnicorn = false;
                        }
                        else if (base.velocity.Y == 0f || sliding)
                        {
                            jumpAgainUnicorn = true;
                        }
                    }

                    if (!carpet)
                    {
                        canCarpet = false;
                        carpetFrame = -1;
                    }
                    else if (base.velocity.Y == 0f || sliding)
                    {
                        canCarpet = true;
                        carpetTime = 0;
                        carpetFrame = -1;
                        carpetFrameCounter = 0f;
                    }

                    if (gravDir == -1f)
                    {
                        canCarpet = false;
                    }

                    if (ropeCount > 0)
                    {
                        ropeCount--;
                    }

                    if (!pulley && !frozen && !webbed && !stoned && !controlJump && gravDir == 1f && ropeCount == 0 &&
                        grappling[0] == -1 && !tongued && !mount.Active)
                    {
                        FindPulley();
                    }

                    if (pulley)
                    {
                        if (mount.Active)
                        {
                            pulley = false;
                        }

                        sandStorm = false;
                        dJumpEffectCloud = false;
                        dJumpEffectSandstorm = false;
                        dJumpEffectBlizzard = false;
                        dJumpEffectFart = false;
                        dJumpEffectSail = false;
                        dJumpEffectUnicorn = false;
                        var num39 = (int) (base.position.X + (float) (width / 2)) / 16;
                        var num40 = (int) (base.position.Y - 8f) / 16;
                        var flag15 = false;
                        if (pulleyDir == 0)
                        {
                            pulleyDir = 1;
                        }

                        if (pulleyDir == 1)
                        {
                            if (base.direction == -1 && controlLeft && (releaseLeft || leftTimer == 0))
                            {
                                pulleyDir = 2;
                                flag15 = true;
                            }
                            else if ((base.direction == 1 && controlRight && releaseRight) || rightTimer == 0)
                            {
                                pulleyDir = 2;
                                flag15 = true;
                            }
                            else
                            {
                                if (base.direction == 1 && controlLeft)
                                {
                                    base.direction = -1;
                                    flag15 = true;
                                }

                                if (base.direction == -1 && controlRight)
                                {
                                    base.direction = 1;
                                    flag15 = true;
                                }
                            }
                        }
                        else if (pulleyDir == 2)
                        {
                            if (base.direction == 1 && controlLeft)
                            {
                                flag15 = true;
                                var num41 = num39 * 16 + 8 - width / 2;
                                if (!Collision.SolidCollision(new Vector2((float) num41, base.position.Y), width,
                                    height))
                                {
                                    pulleyDir = 1;
                                    base.direction = -1;
                                    flag15 = true;
                                }
                            }

                            if (base.direction == -1 && controlRight)
                            {
                                flag15 = true;
                                var num42 = num39 * 16 + 8 - width / 2;
                                if (!Collision.SolidCollision(new Vector2((float) num42, base.position.Y), width,
                                    height))
                                {
                                    pulleyDir = 1;
                                    base.direction = 1;
                                    flag15 = true;
                                }
                            }
                        }

                        var flag16 = false;
                        if (!flag15 && ((controlLeft && (releaseLeft || leftTimer == 0)) ||
                                        (controlRight && (releaseRight || rightTimer == 0))))
                        {
                            var num43 = 1;
                            if (controlLeft)
                            {
                                num43 = -1;
                            }

                            var num44 = num39 + num43;
                            if (Main.tile[num44, num40].active() && Main.tileRope[Main.tile[num44, num40].type])
                            {
                                pulleyDir = 1;
                                base.direction = num43;
                                var num45 = num44 * 16 + 8 - width / 2;
                                var y3 = base.position.Y;
                                y3 = (float) (num40 * 16 + 22);
                                if ((!Main.tile[num44, num40 - 1].active() ||
                                     !Main.tileRope[Main.tile[num44, num40 - 1].type]) &&
                                    (!Main.tile[num44, num40 + 1].active() ||
                                     !Main.tileRope[Main.tile[num44, num40 + 1].type]))
                                {
                                    y3 = (float) (num40 * 16 + 22);
                                }

                                if (Collision.SolidCollision(new Vector2((float) num45, y3), width, height))
                                {
                                    pulleyDir = 2;
                                    base.direction = -num43;
                                    num45 = ((base.direction != 1)
                                        ? (num44 * 16 + 8 - width / 2 + -6)
                                        : (num44 * 16 + 8 - width / 2 + 6));
                                }

                                if (i == Main.myPlayer)
                                {
                                    Main.cameraX = Main.cameraX + base.position.X - (float) num45;
                                }

                                base.position.X = (float) num45;
                                gfxOffY = base.position.Y - y3;
                                base.position.Y = y3;
                                flag16 = true;
                            }
                        }

                        if (!flag16 && !flag15 && !controlUp &&
                            ((controlLeft && releaseLeft) || (controlRight && releaseRight)))
                        {
                            pulley = false;
                            if (controlLeft && base.velocity.X == 0f)
                            {
                                base.velocity.X = -1f;
                            }

                            if (controlRight && base.velocity.X == 0f)
                            {
                                base.velocity.X = 1f;
                            }
                        }

                        if (base.velocity.X != 0f)
                        {
                            pulley = false;
                        }

                        if (Main.tile[num39, num40] == null)
                        {
                            var tile7 = Main.tile;
                            var num46 = num39;
                            var num47 = num40;
                            var tile8 = new Tile();
                            tile7[num46, num47] = tile8;
                        }

                        if (!Main.tile[num39, num40].active() || !Main.tileRope[Main.tile[num39, num40].type])
                        {
                            pulley = false;
                        }

                        if (gravDir != 1f)
                        {
                            pulley = false;
                        }

                        if (frozen || webbed || stoned)
                        {
                            pulley = false;
                        }

                        if (!pulley)
                        {
                            base.velocity.Y -= gravity;
                        }

                        if (controlJump)
                        {
                            pulley = false;
                            jump = jumpHeight;
                            base.velocity.Y = 0f - jumpSpeed;
                        }
                    }

                    if (pulley)
                    {
                        fallStart = (int) base.position.Y / 16;
                        wingFrame = 0;
                        if (wings == 4)
                        {
                            wingFrame = 3;
                        }

                        var num48 = (int) (base.position.X + (float) (width / 2)) / 16;
                        var num49 = (int) (base.position.Y - 16f) / 16;
                        var num50 = (int) (base.position.Y - 8f) / 16;
                        var flag17 = true;
                        var flag18 = false;
                        if ((Main.tile[num48, num50 - 1].active() && Main.tileRope[Main.tile[num48, num50 - 1].type]) ||
                            (Main.tile[num48, num50 + 1].active() && Main.tileRope[Main.tile[num48, num50 + 1].type]))
                        {
                            flag18 = true;
                        }

                        if (Main.tile[num48, num49] == null)
                        {
                            var tile9 = Main.tile;
                            var num51 = num48;
                            var num52 = num49;
                            var tile10 = new Tile();
                            tile9[num51, num52] = tile10;
                        }

                        if (!Main.tile[num48, num49].active() || !Main.tileRope[Main.tile[num48, num49].type])
                        {
                            flag17 = false;
                            if (base.velocity.Y < 0f)
                            {
                                base.velocity.Y = 0f;
                            }
                        }

                        if (flag18)
                        {
                            if (controlUp && flag17)
                            {
                                var x3 = base.position.X;
                                var y4 = base.position.Y - Math.Abs(base.velocity.Y) - 2f;
                                if (Collision.SolidCollision(new Vector2(x3, y4), width, height))
                                {
                                    x3 = (float) (num48 * 16 + 8 - width / 2 + 6);
                                    if (!Collision.SolidCollision(new Vector2(x3, y4), width,
                                        (int) ((float) height + Math.Abs(base.velocity.Y) + 2f)))
                                    {
                                        if (i == Main.myPlayer)
                                        {
                                            Main.cameraX = Main.cameraX + base.position.X - x3;
                                        }

                                        pulleyDir = 2;
                                        base.direction = 1;
                                        base.position.X = x3;
                                        base.velocity.X = 0f;
                                    }
                                    else
                                    {
                                        x3 = (float) (num48 * 16 + 8 - width / 2 + -6);
                                        if (!Collision.SolidCollision(new Vector2(x3, y4), width,
                                            (int) ((float) height + Math.Abs(base.velocity.Y) + 2f)))
                                        {
                                            if (i == Main.myPlayer)
                                            {
                                                Main.cameraX = Main.cameraX + base.position.X - x3;
                                            }

                                            pulleyDir = 2;
                                            base.direction = -1;
                                            base.position.X = x3;
                                            base.velocity.X = 0f;
                                        }
                                    }
                                }

                                if (base.velocity.Y > 0f)
                                {
                                    base.velocity.Y *= 0.7f;
                                }

                                if (base.velocity.Y > -3f)
                                {
                                    base.velocity.Y -= 0.2f;
                                }
                                else
                                {
                                    base.velocity.Y -= 0.02f;
                                }

                                if (base.velocity.Y < -8f)
                                {
                                    base.velocity.Y = -8f;
                                }
                            }
                            else if (controlDown)
                            {
                                var x4 = base.position.X;
                                var y5 = base.position.Y;
                                if (Collision.SolidCollision(new Vector2(x4, y5), width,
                                    (int) ((float) height + Math.Abs(base.velocity.Y) + 2f)))
                                {
                                    x4 = (float) (num48 * 16 + 8 - width / 2 + 6);
                                    if (!Collision.SolidCollision(new Vector2(x4, y5), width,
                                        (int) ((float) height + Math.Abs(base.velocity.Y) + 2f)))
                                    {
                                        if (i == Main.myPlayer)
                                        {
                                            Main.cameraX = Main.cameraX + base.position.X - x4;
                                        }

                                        pulleyDir = 2;
                                        base.direction = 1;
                                        base.position.X = x4;
                                        base.velocity.X = 0f;
                                    }
                                    else
                                    {
                                        x4 = (float) (num48 * 16 + 8 - width / 2 + -6);
                                        if (!Collision.SolidCollision(new Vector2(x4, y5), width,
                                            (int) ((float) height + Math.Abs(base.velocity.Y) + 2f)))
                                        {
                                            if (i == Main.myPlayer)
                                            {
                                                Main.cameraX = Main.cameraX + base.position.X - x4;
                                            }

                                            pulleyDir = 2;
                                            base.direction = -1;
                                            base.position.X = x4;
                                            base.velocity.X = 0f;
                                        }
                                    }
                                }

                                if (base.velocity.Y < 0f)
                                {
                                    base.velocity.Y *= 0.7f;
                                }

                                if (base.velocity.Y < 3f)
                                {
                                    base.velocity.Y += 0.2f;
                                }
                                else
                                {
                                    base.velocity.Y += 0.1f;
                                }

                                if (base.velocity.Y > maxFallSpeed)
                                {
                                    base.velocity.Y = maxFallSpeed;
                                }
                            }
                            else
                            {
                                base.velocity.Y *= 0.7f;
                                if ((double) base.velocity.Y > -0.1 && (double) base.velocity.Y < 0.1)
                                {
                                    base.velocity.Y = 0f;
                                }
                            }
                        }
                        else if (controlDown)
                        {
                            ropeCount = 10;
                            pulley = false;
                            base.velocity.Y = 1f;
                        }
                        else
                        {
                            base.velocity.Y = 0f;
                            base.position.Y = (float) (num49 * 16 + 22);
                        }

                        var num53 = (float) (num48 * 16 + 8 - width / 2);
                        if (pulleyDir == 1)
                        {
                            num53 = (float) (num48 * 16 + 8 - width / 2);
                        }

                        if (pulleyDir == 2)
                        {
                            num53 = (float) (num48 * 16 + 8 - width / 2 + 6 * base.direction);
                        }

                        if (i == Main.myPlayer)
                        {
                            Main.cameraX = Main.cameraX + base.position.X - num53;
                        }

                        base.position.X = num53;
                        pulleyFrameCounter += Math.Abs(base.velocity.Y * 0.75f);
                        if (base.velocity.Y != 0f)
                        {
                            pulleyFrameCounter += 0.75f;
                        }

                        if (pulleyFrameCounter > 10f)
                        {
                            pulleyFrame++;
                            pulleyFrameCounter = 0f;
                        }

                        if (pulleyFrame > 1)
                        {
                            pulleyFrame = 0;
                        }

                        canCarpet = true;
                        carpetFrame = -1;
                        wingTime = (float) wingTimeMax;
                        rocketTime = rocketTimeMax;
                        rocketDelay = 0;
                        rocketFrame = false;
                        canRocket = false;
                        rocketRelease = false;
                        DashMovement();
                    }
                    else if (grappling[0] == -1 && !tongued)
                    {
                        if (wingsLogic > 0 && base.velocity.Y != 0f && !merman)
                        {
                            if (wingsLogic == 1 || wingsLogic == 2)
                            {
                                accRunSpeed = 6.25f;
                            }

                            if (wingsLogic == 4)
                            {
                                accRunSpeed = 6.5f;
                            }

                            if (wingsLogic == 5 || wingsLogic == 6 || wingsLogic == 13 || wingsLogic == 15)
                            {
                                accRunSpeed = 6.75f;
                            }

                            if (wingsLogic == 7 || wingsLogic == 8)
                            {
                                accRunSpeed = 7f;
                            }

                            if (wingsLogic == 9 || wingsLogic == 10 || wingsLogic == 11 || wingsLogic == 20 ||
                                wingsLogic == 21 || wingsLogic == 23 || wingsLogic == 24)
                            {
                                accRunSpeed = 7.5f;
                            }

                            if (wingsLogic == 22)
                            {
                                if (controlDown && controlJump && wingTime > 0f)
                                {
                                    accRunSpeed = 10f;
                                    runAcceleration *= 10f;
                                }
                                else
                                {
                                    accRunSpeed = 6.25f;
                                }
                            }

                            if (wingsLogic == 30 || wingsLogic == 31)
                            {
                                if (controlDown && controlJump && wingTime > 0f)
                                {
                                    accRunSpeed = 12f;
                                    runAcceleration *= 12f;
                                }
                                else
                                {
                                    accRunSpeed = 6.5f;
                                    runAcceleration *= 1.5f;
                                }
                            }

                            if (wingsLogic == 26)
                            {
                                accRunSpeed = 8f;
                                runAcceleration *= 2f;
                            }

                            if (wingsLogic == 37)
                            {
                                if (controlDown && controlJump && wingTime > 0f)
                                {
                                    accRunSpeed = 12f;
                                    runAcceleration *= 12f;
                                }
                                else
                                {
                                    accRunSpeed = 6f;
                                    runAcceleration *= 2.5f;
                                }
                            }

                            if (wingsLogic == 29 || wingsLogic == 32)
                            {
                                accRunSpeed = 9f;
                                runAcceleration *= 2.5f;
                            }

                            if (wingsLogic == 12)
                            {
                                accRunSpeed = 7.75f;
                            }

                            if (wingsLogic == 16 || wingsLogic == 17 || wingsLogic == 18 || wingsLogic == 19 ||
                                wingsLogic == 34 || wingsLogic == 3 || wingsLogic == 28 || wingsLogic == 33 ||
                                wingsLogic == 34 || wingsLogic == 35 || wingsLogic == 36)
                            {
                                accRunSpeed = 7f;
                            }
                        }

                        if (sticky)
                        {
                            maxRunSpeed *= 0.25f;
                            runAcceleration *= 0.25f;
                            runSlowdown *= 2f;
                            if (base.velocity.X > maxRunSpeed)
                            {
                                base.velocity.X = maxRunSpeed;
                            }

                            if (base.velocity.X < 0f - maxRunSpeed)
                            {
                                base.velocity.X = 0f - maxRunSpeed;
                            }
                        }
                        else if (powerrun)
                        {
                            maxRunSpeed *= 3.5f;
                            runAcceleration *= 1f;
                            runSlowdown *= 2f;
                        }
                        else if (slippy2)
                        {
                            runAcceleration *= 0.6f;
                            runSlowdown = 0f;
                            if (iceSkate)
                            {
                                runAcceleration *= 3.5f;
                                maxRunSpeed *= 1.25f;
                            }
                        }
                        else if (slippy)
                        {
                            runAcceleration *= 0.7f;
                            if (iceSkate)
                            {
                                runAcceleration *= 3.5f;
                                maxRunSpeed *= 1.25f;
                            }
                            else
                            {
                                runSlowdown *= 0.1f;
                            }
                        }

                        if (sandStorm)
                        {
                            runAcceleration *= 1.5f;
                            maxRunSpeed *= 2f;
                        }

                        if (dJumpEffectBlizzard && doubleJumpBlizzard)
                        {
                            runAcceleration *= 3f;
                            maxRunSpeed *= 1.5f;
                        }

                        if (dJumpEffectFart && doubleJumpFart)
                        {
                            runAcceleration *= 3f;
                            maxRunSpeed *= 1.75f;
                        }

                        if (dJumpEffectUnicorn && doubleJumpUnicorn)
                        {
                            runAcceleration *= 3f;
                            maxRunSpeed *= 1.5f;
                        }

                        if (dJumpEffectSail && doubleJumpSail)
                        {
                            runAcceleration *= 1.5f;
                            maxRunSpeed *= 1.25f;
                        }

                        if (carpetFrame != -1)
                        {
                            runAcceleration *= 1.25f;
                            maxRunSpeed *= 1.5f;
                        }

                        if (inventory[selectedItem].type == 3106 && stealth < 1f)
                        {
                            var num54 = maxRunSpeed / 2f * (1f - stealth);
                            maxRunSpeed -= num54;
                            accRunSpeed = maxRunSpeed;
                        }

                        if (mount.Active)
                        {
                            rocketBoots = 0;
                            wings = 0;
                            wingsLogic = 0;
                            maxRunSpeed = mount.RunSpeed;
                            accRunSpeed = mount.DashSpeed;
                            runAcceleration = mount.Acceleration;
                            if (mount.Type == 12 && !MountFishronSpecial)
                            {
                                runAcceleration /= 2f;
                                maxRunSpeed /= 2f;
                            }

                            mount.AbilityRecovery();
                            if (mount.Cart && base.velocity.Y == 0f)
                            {
                                if (!Minecart.OnTrack(base.position, width, height))
                                {
                                    fullRotation = 0f;
                                    onWrongGround = true;
                                    runSlowdown = 0.2f;
                                    if ((controlLeft && releaseLeft) || (controlRight && releaseRight))
                                    {
                                        mount.Dismount(this);
                                    }
                                }
                                else
                                {
                                    runSlowdown = runAcceleration;
                                    onWrongGround = false;
                                }
                            }

                            if (mount.Type == 8)
                            {
                                mount.UpdateDrill(this, controlUp, controlDown);
                            }
                        }

                        HorizontalMovement();
                        if (gravControl)
                        {
                            if (controlUp && releaseUp)
                            {
                                if (gravDir == 1f)
                                {
                                    gravDir = -1f;
                                    fallStart = (int) (base.position.Y / 16f);
                                    jump = 0;
                                    Main.PlaySound(SoundID.Item8, base.position);
                                }
                                else
                                {
                                    gravDir = 1f;
                                    fallStart = (int) (base.position.Y / 16f);
                                    jump = 0;
                                    Main.PlaySound(SoundID.Item8, base.position);
                                }
                            }
                        }
                        else if (gravControl2)
                        {
                            if (controlUp && releaseUp && base.velocity.Y == 0f)
                            {
                                if (gravDir == 1f)
                                {
                                    gravDir = -1f;
                                    fallStart = (int) (base.position.Y / 16f);
                                    jump = 0;
                                    Main.PlaySound(SoundID.Item8, base.position);
                                }
                                else
                                {
                                    gravDir = 1f;
                                    fallStart = (int) (base.position.Y / 16f);
                                    jump = 0;
                                    Main.PlaySound(SoundID.Item8, base.position);
                                }
                            }
                        }
                        else
                        {
                            gravDir = 1f;
                        }

                        if (base.velocity.Y == 0f && mount.Active && mount.CanHover && controlUp && releaseUp)
                        {
                            base.velocity.Y = 0f - (mount.Acceleration + gravity + 0.001f);
                        }

                        if (controlUp)
                        {
                            releaseUp = false;
                        }
                        else
                        {
                            releaseUp = true;
                        }

                        sandStorm = false;
                        JumpMovement();
                        if (wingsLogic == 0)
                        {
                            wingTime = 0f;
                        }

                        if (rocketBoots == 0)
                        {
                            rocketTime = 0;
                        }

                        if (jump == 0)
                        {
                            dJumpEffectCloud = false;
                            dJumpEffectSandstorm = false;
                            dJumpEffectBlizzard = false;
                            dJumpEffectFart = false;
                            dJumpEffectSail = false;
                            dJumpEffectUnicorn = false;
                        }

                        DashMovement();
                        WallslideMovement();
                        CarpetMovement();
                        DoubleJumpVisuals();
                        if (wings > 0 || mount.Active)
                        {
                            sandStorm = false;
                        }

                        if (((gravDir == 1f && base.velocity.Y > 0f - jumpSpeed) ||
                             (gravDir == -1f && base.velocity.Y < jumpSpeed)) && base.velocity.Y != 0f)
                        {
                            canRocket = true;
                        }

                        var flag19 = false;
                        if (((base.velocity.Y == 0f || sliding) && releaseJump) || (autoJump && justJumped))
                        {
                            mount.ResetFlightTime(base.velocity.X);
                            wingTime = (float) wingTimeMax;
                        }

                        if (wingsLogic > 0 && controlJump && wingTime > 0f && !jumpAgainCloud && jump == 0 &&
                            base.velocity.Y != 0f)
                        {
                            flag19 = true;
                        }

                        if ((wingsLogic == 22 || wingsLogic == 28 || wingsLogic == 30 || wingsLogic == 32 ||
                             wingsLogic == 29 || wingsLogic == 33 || wingsLogic == 35 || wingsLogic == 37) &&
                            controlJump && controlDown && wingTime > 0f)
                        {
                            flag19 = true;
                        }

                        if (frozen || webbed || stoned)
                        {
                            if (mount.Active)
                            {
                                mount.Dismount(this);
                            }

                            base.velocity.Y += gravity;
                            if (base.velocity.Y > maxFallSpeed)
                            {
                                base.velocity.Y = maxFallSpeed;
                            }

                            sandStorm = false;
                            dJumpEffectCloud = false;
                            dJumpEffectSandstorm = false;
                            dJumpEffectBlizzard = false;
                            dJumpEffectFart = false;
                            dJumpEffectSail = false;
                            dJumpEffectUnicorn = false;
                        }
                        else
                        {
                            if (flag19)
                            {
                                if (wings == 10 && Main.rand.Next(2) == 0)
                                {
                                    var num55 = 4;
                                    if (base.direction == 1)
                                    {
                                        num55 = -40;
                                    }

                                    var num56 = Dust.NewDust(
                                        new Vector2(base.position.X + (float) (width / 2) + (float) num55,
                                            base.position.Y + (float) (height / 2) - 15f), 30, 30, 76, 0f, 0f, 50,
                                        default(Color), 0.6f);
                                    Main.dust[num56].fadeIn = 1.1f;
                                    Main.dust[num56].noGravity = true;
                                    Main.dust[num56].noLight = true;
                                    Main.dust[num56].velocity *= 0.3f;
                                    Main.dust[num56].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                }

                                if (wings == 34 && Main.rand.Next(2) == 0)
                                {
                                    var num57 = 4;
                                    if (base.direction == 1)
                                    {
                                        num57 = -40;
                                    }

                                    var num58 = Dust.NewDust(
                                        new Vector2(base.position.X + (float) (width / 2) + (float) num57,
                                            base.position.Y + (float) (height / 2) - 15f), 30, 30, 261, 0f, 0f, 50,
                                        default(Color), 0.6f);
                                    Main.dust[num58].fadeIn = 1.1f;
                                    Main.dust[num58].noGravity = true;
                                    Main.dust[num58].noLight = true;
                                    Main.dust[num58].velocity *= 0.3f;
                                    Main.dust[num58].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                }

                                if (wings == 9 && Main.rand.Next(2) == 0)
                                {
                                    var num59 = 4;
                                    if (base.direction == 1)
                                    {
                                        num59 = -40;
                                    }

                                    var num60 = Dust.NewDust(
                                        new Vector2(base.position.X + (float) (width / 2) + (float) num59,
                                            base.position.Y + (float) (height / 2) - 15f), 30, 30, 6, 0f, 0f, 200,
                                        default(Color), 2f);
                                    Main.dust[num60].noGravity = true;
                                    Main.dust[num60].velocity *= 0.3f;
                                    Main.dust[num60].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                }

                                if (wings == 6 && Main.rand.Next(4) == 0)
                                {
                                    var num61 = 4;
                                    if (base.direction == 1)
                                    {
                                        num61 = -40;
                                    }

                                    var num62 = Dust.NewDust(
                                        new Vector2(base.position.X + (float) (width / 2) + (float) num61,
                                            base.position.Y + (float) (height / 2) - 15f), 30, 30, 55, 0f, 0f, 200,
                                        default(Color), 1f);
                                    Main.dust[num62].velocity *= 0.3f;
                                    Main.dust[num62].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                }

                                if (wings == 5 && Main.rand.Next(3) == 0)
                                {
                                    var num63 = 6;
                                    if (base.direction == 1)
                                    {
                                        num63 = -30;
                                    }

                                    var num64 = Dust.NewDust(
                                        new Vector2(base.position.X + (float) (width / 2) + (float) num63,
                                            base.position.Y), 18, height, 58, 0f, 0f, 255, default(Color), 1.2f);
                                    Main.dust[num64].velocity *= 0.3f;
                                    Main.dust[num64].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                }

                                if (wings == 26)
                                {
                                    var num65 = 6;
                                    if (base.direction == 1)
                                    {
                                        num65 = -30;
                                    }

                                    var num66 = Dust.NewDust(
                                        new Vector2(base.position.X + (float) (width / 2) + (float) num65,
                                            base.position.Y), 18, height, 217, 0f, 0f, 100, default(Color), 1.4f);
                                    Main.dust[num66].noGravity = true;
                                    Main.dust[num66].noLight = true;
                                    Main.dust[num66].velocity /= 4f;
                                    Main.dust[num66].velocity -= base.velocity;
                                    Main.dust[num66].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                    if (Main.rand.Next(2) == 0)
                                    {
                                        num65 = -24;
                                        if (base.direction == 1)
                                        {
                                            num65 = 12;
                                        }

                                        var num67 = base.position.Y;
                                        if (gravDir == -1f)
                                        {
                                            num67 += (float) (height / 2);
                                        }

                                        num66 = Dust.NewDust(
                                            new Vector2(base.position.X + (float) (width / 2) + (float) num65, num67),
                                            12, height / 2, 217, 0f, 0f, 100, default(Color), 1.4f);
                                        Main.dust[num66].noGravity = true;
                                        Main.dust[num66].noLight = true;
                                        Main.dust[num66].velocity /= 4f;
                                        Main.dust[num66].velocity -= base.velocity;
                                        Main.dust[num66].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                    }
                                }

                                if (wings == 37)
                                {
                                    var num68 = 6;
                                    if (base.direction == 1)
                                    {
                                        num68 = -30;
                                    }

                                    var dust3 = Dust.NewDustDirect(
                                        new Vector2(base.position.X + (float) (width / 2) + (float) num68,
                                            base.position.Y), 24, height,
                                        Utils.SelectRandom<int>(Main.rand, 31, 31, 31), 0f, 0f, 100, default(Color),
                                        1f);
                                    dust3.noGravity = true;
                                    dust3.noLight = true;
                                    dust3.velocity /= 4f;
                                    dust3.velocity -= base.velocity / 2f;
                                    dust3.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                    if (dust3.type == 55)
                                    {
                                        dust3.noGravity = true;
                                        dust3.velocity *= 2f;
                                        dust3.color = Color.Red;
                                    }

                                    if (Main.rand.Next(3) == 0)
                                    {
                                        num68 = -24;
                                        if (base.direction == 1)
                                        {
                                            num68 = 12;
                                        }

                                        var num69 = base.position.Y;
                                        if (gravDir == -1f)
                                        {
                                            num69 += (float) (height / 2);
                                        }

                                        dust3 = Dust.NewDustDirect(
                                            new Vector2(base.position.X + (float) (width / 2) + (float) num68, num69),
                                            16, height / 2, Utils.SelectRandom<int>(Main.rand, 31, 31, 31), 0f, 0f, 100,
                                            default(Color), 1f);
                                        dust3.noGravity = true;
                                        dust3.noLight = true;
                                        dust3.velocity /= 4f;
                                        dust3.velocity -= base.velocity / 2f;
                                        dust3.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                        if (dust3.type == 55)
                                        {
                                            dust3.noGravity = true;
                                            dust3.velocity *= 2f;
                                            dust3.color = Color.Red;
                                        }
                                    }
                                }

                                if (wings == 29 && Main.rand.Next(3) == 0)
                                {
                                    var num70 = 4;
                                    if (base.direction == 1)
                                    {
                                        num70 = -40;
                                    }

                                    var num71 = Dust.NewDust(
                                        new Vector2(base.position.X + (float) (width / 2) + (float) num70,
                                            base.position.Y + (float) (height / 2) - 15f), 30, 30, 6, 0f, 0f, 100,
                                        default(Color), 2.4f);
                                    Main.dust[num71].noGravity = true;
                                    Main.dust[num71].velocity *= 0.3f;
                                    if (Main.rand.Next(10) == 0)
                                    {
                                        Main.dust[num71].fadeIn = 2f;
                                    }

                                    Main.dust[num71].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                }

                                if (wings == 31)
                                {
                                    if (Main.rand.Next(6) == 0)
                                    {
                                        var num72 = 4;
                                        if (base.direction == 1)
                                        {
                                            num72 = -40;
                                        }

                                        var dust4 =
                                            Main.dust[
                                                Dust.NewDust(
                                                    new Vector2(base.position.X + (float) (width / 2) + (float) num72,
                                                        base.position.Y + (float) (height / 2) - 15f), 30, 30, 86, 0f,
                                                    0f, 0, default(Color), 1f)];
                                        dust4.noGravity = true;
                                        dust4.scale = 1f;
                                        dust4.fadeIn = 1.2f;
                                        dust4.velocity *= 0.2f;
                                        dust4.noLight = true;
                                        dust4.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                    }

                                    if (Main.rand.Next(3) == 0)
                                    {
                                        var num73 = 4;
                                        if (base.direction == 1)
                                        {
                                            num73 = -40;
                                        }

                                        var dust5 =
                                            Main.dust[
                                                Dust.NewDust(
                                                    new Vector2(base.position.X + (float) (width / 2) + (float) num73,
                                                        base.position.Y + (float) (height / 2) - 15f), 30, 30, 240, 0f,
                                                    0f, 0, default(Color), 1f)];
                                        dust5.noGravity = true;
                                        dust5.scale = 1.2f;
                                        dust5.velocity *= 0.2f;
                                        dust5.alpha = 200;
                                        dust5.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                    }

                                    if (Main.rand.Next(2) == 0)
                                    {
                                        if (Main.rand.Next(6) == 0)
                                        {
                                            var num74 = -24;
                                            if (base.direction == 1)
                                            {
                                                num74 = 12;
                                            }

                                            var num75 = base.position.Y;
                                            if (gravDir == -1f)
                                            {
                                                num75 += (float) (height / 2);
                                            }

                                            var dust6 =
                                                Main.dust[
                                                    Dust.NewDust(
                                                        new Vector2(
                                                            base.position.X + (float) (width / 2) + (float) num74,
                                                            num75), 12, height / 2, 86, 0f, 0f, 0, default(Color), 1f)];
                                            dust6.noGravity = true;
                                            dust6.scale = 1f;
                                            dust6.fadeIn = 1.2f;
                                            dust6.velocity *= 0.2f;
                                            dust6.noLight = true;
                                            dust6.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                        }

                                        if (Main.rand.Next(3) == 0)
                                        {
                                            var num74 = -24;
                                            if (base.direction == 1)
                                            {
                                                num74 = 12;
                                            }

                                            var num76 = base.position.Y;
                                            if (gravDir == -1f)
                                            {
                                                num76 += (float) (height / 2);
                                            }

                                            var dust7 =
                                                Main.dust[
                                                    Dust.NewDust(
                                                        new Vector2(
                                                            base.position.X + (float) (width / 2) + (float) num74,
                                                            num76), 12, height / 2, 240, 0f, 0f, 0, default(Color),
                                                        1f)];
                                            dust7.noGravity = true;
                                            dust7.scale = 1.2f;
                                            dust7.velocity *= 0.2f;
                                            dust7.alpha = 200;
                                            dust7.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                        }
                                    }
                                }

                                WingMovement();
                            }

                            if (wings == 4)
                            {
                                if (flag19 || jump > 0)
                                {
                                    rocketDelay2--;
                                    if (rocketDelay2 <= 0)
                                    {
                                        Main.PlaySound(SoundID.Item13, base.position);
                                        rocketDelay2 = 60;
                                    }

                                    var num77 = 2;
                                    if (controlUp)
                                    {
                                        num77 = 4;
                                    }

                                    for (var num78 = 0; num78 < num77; num78++)
                                    {
                                        var type = 6;
                                        if (head == 41)
                                        {
                                            var body2 = body;
                                        }

                                        var scale = 1.75f;
                                        var alpha = 100;
                                        var x5 = base.position.X + (float) (width / 2) + 16f;
                                        if (base.direction > 0)
                                        {
                                            x5 = base.position.X + (float) (width / 2) - 26f;
                                        }

                                        var num79 = base.position.Y + (float) height - 18f;
                                        if (num78 == 1 || num78 == 3)
                                        {
                                            x5 = base.position.X + (float) (width / 2) + 8f;
                                            if (base.direction > 0)
                                            {
                                                x5 = base.position.X + (float) (width / 2) - 20f;
                                            }

                                            num79 += 6f;
                                        }

                                        if (num78 > 1)
                                        {
                                            num79 += base.velocity.Y;
                                        }

                                        var num80 = Dust.NewDust(new Vector2(x5, num79), 8, 8, type, 0f, 0f, alpha,
                                            default(Color), scale);
                                        Main.dust[num80].velocity.X *= 0.1f;
                                        Main.dust[num80].velocity.Y =
                                            Main.dust[num80].velocity.Y * 1f + 2f * gravDir - base.velocity.Y * 0.3f;
                                        Main.dust[num80].noGravity = true;
                                        Main.dust[num80].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                        if (num77 == 4)
                                        {
                                            Main.dust[num80].velocity.Y += 6f;
                                        }
                                    }

                                    wingFrameCounter++;
                                    if (wingFrameCounter > 4)
                                    {
                                        wingFrame++;
                                        wingFrameCounter = 0;
                                        if (wingFrame >= 3)
                                        {
                                            wingFrame = 0;
                                        }
                                    }
                                }
                                else if (!controlJump || base.velocity.Y == 0f)
                                {
                                    wingFrame = 3;
                                }
                            }
                            else if (wings == 28)
                            {
                                if (base.velocity.Y != 0f)
                                {
                                    Lighting.AddLight(base.Bottom, 0.3f, 0.1f, 0.4f);
                                }
                            }
                            else if (wings == 22)
                            {
                                if (!controlJump)
                                {
                                    wingFrame = 0;
                                    wingFrameCounter = 0;
                                }
                                else if (wingTime > 0f)
                                {
                                    if (controlDown)
                                    {
                                        if (base.velocity.X != 0f)
                                        {
                                            wingFrameCounter++;
                                            var num81 = 2;
                                            if (wingFrameCounter < num81)
                                            {
                                                wingFrame = 1;
                                            }
                                            else if (wingFrameCounter < num81 * 2)
                                            {
                                                wingFrame = 2;
                                            }
                                            else if (wingFrameCounter < num81 * 3)
                                            {
                                                wingFrame = 3;
                                            }
                                            else if (wingFrameCounter < num81 * 4 - 1)
                                            {
                                                wingFrame = 2;
                                            }
                                            else
                                            {
                                                wingFrame = 2;
                                                wingFrameCounter = 0;
                                            }
                                        }
                                        else
                                        {
                                            wingFrameCounter++;
                                            var num82 = 6;
                                            if (wingFrameCounter < num82)
                                            {
                                                wingFrame = 4;
                                            }
                                            else if (wingFrameCounter < num82 * 2)
                                            {
                                                wingFrame = 5;
                                            }
                                            else if (wingFrameCounter < num82 * 3 - 1)
                                            {
                                                wingFrame = 4;
                                            }
                                            else
                                            {
                                                wingFrame = 4;
                                                wingFrameCounter = 0;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        wingFrameCounter++;
                                        var num83 = 2;
                                        if (wingFrameCounter < num83)
                                        {
                                            wingFrame = 4;
                                        }
                                        else if (wingFrameCounter < num83 * 2)
                                        {
                                            wingFrame = 5;
                                        }
                                        else if (wingFrameCounter < num83 * 3)
                                        {
                                            wingFrame = 6;
                                        }
                                        else if (wingFrameCounter < num83 * 4 - 1)
                                        {
                                            wingFrame = 5;
                                        }
                                        else
                                        {
                                            wingFrame = 5;
                                            wingFrameCounter = 0;
                                        }
                                    }
                                }
                                else
                                {
                                    wingFrameCounter++;
                                    var num84 = 6;
                                    if (wingFrameCounter < num84)
                                    {
                                        wingFrame = 4;
                                    }
                                    else if (wingFrameCounter < num84 * 2)
                                    {
                                        wingFrame = 5;
                                    }
                                    else if (wingFrameCounter < num84 * 3 - 1)
                                    {
                                        wingFrame = 4;
                                    }
                                    else
                                    {
                                        wingFrame = 4;
                                        wingFrameCounter = 0;
                                    }
                                }
                            }
                            else if (wings == 12)
                            {
                                if (flag19 || jump > 0)
                                {
                                    wingFrameCounter++;
                                    var num85 = 5;
                                    if (wingFrameCounter < num85)
                                    {
                                        wingFrame = 1;
                                    }
                                    else if (wingFrameCounter < num85 * 2)
                                    {
                                        wingFrame = 2;
                                    }
                                    else if (wingFrameCounter < num85 * 3)
                                    {
                                        wingFrame = 3;
                                    }
                                    else if (wingFrameCounter < num85 * 4 - 1)
                                    {
                                        wingFrame = 2;
                                    }
                                    else
                                    {
                                        wingFrame = 2;
                                        wingFrameCounter = 0;
                                    }
                                }
                                else if (base.velocity.Y != 0f)
                                {
                                    wingFrame = 2;
                                }
                                else
                                {
                                    wingFrame = 0;
                                }
                            }
                            else if (wings == 24)
                            {
                                if (flag19 || jump > 0)
                                {
                                    wingFrameCounter++;
                                    var num86 = 1;
                                    if (wingFrameCounter < num86)
                                    {
                                        wingFrame = 1;
                                    }
                                    else if (wingFrameCounter < num86 * 2)
                                    {
                                        wingFrame = 2;
                                    }
                                    else if (wingFrameCounter < num86 * 3)
                                    {
                                        wingFrame = 3;
                                    }
                                    else
                                    {
                                        wingFrame = 2;
                                        if (wingFrameCounter >= num86 * 4 - 1)
                                        {
                                            wingFrameCounter = 0;
                                        }
                                    }
                                }
                                else if (base.velocity.Y != 0f)
                                {
                                    if (controlJump)
                                    {
                                        wingFrameCounter++;
                                        var num87 = 3;
                                        if (wingFrameCounter < num87)
                                        {
                                            wingFrame = 1;
                                        }
                                        else if (wingFrameCounter < num87 * 2)
                                        {
                                            wingFrame = 2;
                                        }
                                        else if (wingFrameCounter < num87 * 3)
                                        {
                                            wingFrame = 3;
                                        }
                                        else
                                        {
                                            wingFrame = 2;
                                            if (wingFrameCounter >= num87 * 4 - 1)
                                            {
                                                wingFrameCounter = 0;
                                            }
                                        }
                                    }
                                    else if (wingTime == 0f)
                                    {
                                        wingFrame = 0;
                                    }
                                    else
                                    {
                                        wingFrame = 1;
                                    }
                                }
                                else
                                {
                                    wingFrame = 0;
                                }
                            }
                            else if (wings == 30)
                            {
                                var flag20 = false;
                                if (flag19 || jump > 0)
                                {
                                    wingFrameCounter++;
                                    var num88 = 2;
                                    if (wingFrameCounter >= num88 * 3)
                                    {
                                        wingFrameCounter = 0;
                                    }

                                    wingFrame = 1 + wingFrameCounter / num88;
                                    flag20 = true;
                                }
                                else if (base.velocity.Y != 0f)
                                {
                                    if (controlJump)
                                    {
                                        wingFrameCounter++;
                                        var num89 = 2;
                                        if (wingFrameCounter >= num89 * 3)
                                        {
                                            wingFrameCounter = 0;
                                        }

                                        wingFrame = 1 + wingFrameCounter / num89;
                                        flag20 = true;
                                    }
                                    else if (wingTime == 0f)
                                    {
                                        wingFrame = 0;
                                    }
                                    else
                                    {
                                        wingFrame = 0;
                                    }
                                }
                                else
                                {
                                    wingFrame = 0;
                                }

                                if (flag20)
                                {
                                    for (var num90 = 0; num90 < 4; num90++)
                                    {
                                        if (Main.rand.Next(4) == 0)
                                        {
                                            var value =
                                                (-0.745398164f + 0.3926991f * (float) num90 + 0.03f * (float) num90)
                                                .ToRotationVector2() * new Vector2((float) (-base.direction * 20), 20f);
                                            var dust8 =
                                                Main.dust[
                                                    Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, Color.White,
                                                        0.8f)];
                                            dust8.noGravity = true;
                                            dust8.position = base.Center + value;
                                            dust8.velocity = DirectionTo(dust8.position) * 2f;
                                            if (Main.rand.Next(10) != 0)
                                            {
                                                dust8.customData = this;
                                            }
                                            else
                                            {
                                                dust8.fadeIn = 0.5f;
                                            }

                                            dust8.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                        }
                                    }

                                    for (var num91 = 0; num91 < 4; num91++)
                                    {
                                        if (Main.rand.Next(8) == 0)
                                        {
                                            var value2 =
                                                (-0.7053982f + 0.3926991f * (float) num91 + 0.03f * (float) num91)
                                                .ToRotationVector2() * new Vector2((float) (base.direction * 20), 24f) +
                                                new Vector2((float) (-base.direction) * 16f, 0f);
                                            var dust9 =
                                                Main.dust[
                                                    Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, Color.White,
                                                        0.5f)];
                                            dust9.noGravity = true;
                                            dust9.position = base.Center + value2;
                                            dust9.velocity =
                                                Vector2.Normalize(
                                                    dust9.position - base.Center -
                                                    new Vector2((float) (-base.direction) * 16f, 0f)) * 2f;
                                            dust9.position += dust9.velocity * 5f;
                                            if (Main.rand.Next(10) != 0)
                                            {
                                                dust9.customData = this;
                                            }
                                            else
                                            {
                                                dust9.fadeIn = 0.5f;
                                            }

                                            dust9.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                        }
                                    }
                                }
                            }
                            else if (wings == 34)
                            {
                                if (flag19 || jump > 0)
                                {
                                    wingFrameCounter++;
                                    var num92 = 4;
                                    if (wingFrameCounter >= num92 * 6)
                                    {
                                        wingFrameCounter = 0;
                                    }

                                    wingFrame = wingFrameCounter / num92;
                                }
                                else if (base.velocity.Y != 0f)
                                {
                                    if (controlJump)
                                    {
                                        wingFrameCounter++;
                                        var num93 = 9;
                                        if (wingFrameCounter >= num93 * 6)
                                        {
                                            wingFrameCounter = 0;
                                        }

                                        wingFrame = wingFrameCounter / num93;
                                    }
                                    else
                                    {
                                        wingFrameCounter++;
                                        var num94 = 6;
                                        if (wingFrameCounter >= num94 * 6)
                                        {
                                            wingFrameCounter = 0;
                                        }

                                        wingFrame = wingFrameCounter / num94;
                                    }
                                }
                                else
                                {
                                    wingFrameCounter++;
                                    var num95 = 4;
                                    if (wingFrameCounter >= num95 * 6)
                                    {
                                        wingFrameCounter = 0;
                                    }

                                    wingFrame = wingFrameCounter / num95;
                                }
                            }
                            else if (wings == 39)
                            {
                                if (flag19 || jump > 0)
                                {
                                    wingFrameCounter++;
                                    var num96 = 4;
                                    if (wingFrameCounter >= num96 * 6)
                                    {
                                        wingFrameCounter = 0;
                                    }

                                    wingFrame = wingFrameCounter / num96;
                                }
                                else if (base.velocity.Y != 0f)
                                {
                                    if (controlJump)
                                    {
                                        wingFrameCounter++;
                                        var num97 = 9;
                                        if (wingFrameCounter >= num97 * 6)
                                        {
                                            wingFrameCounter = 0;
                                        }

                                        wingFrame = wingFrameCounter / num97;
                                    }
                                    else
                                    {
                                        wingFrameCounter++;
                                        var num98 = 6;
                                        if (wingFrameCounter >= num98 * 6)
                                        {
                                            wingFrameCounter = 0;
                                        }

                                        wingFrame = wingFrameCounter / num98;
                                    }
                                }
                                else
                                {
                                    wingFrameCounter++;
                                    var num99 = 4;
                                    if (wingFrameCounter >= num99 * 6)
                                    {
                                        wingFrameCounter = 0;
                                    }

                                    wingFrame = wingFrameCounter / num99;
                                }

                                var num100 = 1;
                                if (wingFrame == 3)
                                {
                                    num100 = 5;
                                }

                                if (base.velocity.Y == 0f)
                                {
                                    num100 = 0;
                                }

                                var r = Utils.CenteredRectangle(
                                    (gravDir == 1f)
                                        ? (base.Bottom + new Vector2(0f, -10f))
                                        : (base.Top + new Vector2(0f, 10f)), new Vector2(50f, 20f));
                                for (var num101 = 0; num101 < num100; num101++)
                                {
                                    var dust10 = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, 31, 0f, 0f, 0,
                                        Color.Black, 1f);
                                    dust10.scale = 0.7f;
                                    dust10.velocity *= 0.4f;
                                    dust10.velocity.Y += gravDir * 0.5f;
                                    dust10.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                }
                            }
                            else if (wings == 33)
                            {
                                var flag21 = false;
                                if (flag19 || jump > 0)
                                {
                                    flag21 = true;
                                }
                                else if (base.velocity.Y != 0f && controlJump)
                                {
                                    flag21 = true;
                                }

                                if (flag21)
                                {
                                    var newColor = Main.hslToRgb(Main.rgbToHsl(eyeColor).X, 1f, 0.5f);
                                    var num102 = (base.direction != 1) ? (-4) : 0;
                                    var num103 = (gravDir == 1f) ? height : 0;
                                    for (var num104 = 0; num104 < 2; num104++)
                                    {
                                        var dust11 =
                                            Main.dust[
                                                Dust.NewDust(base.position, width, height, 182, base.velocity.X,
                                                    base.velocity.Y, 127, newColor, 1f)];
                                        dust11.noGravity = true;
                                        dust11.fadeIn = 1f;
                                        dust11.scale = 1f;
                                        dust11.noLight = true;
                                        switch (num104)
                                        {
                                            case 0:
                                                dust11.position = new Vector2(base.position.X + (float) num102,
                                                    base.position.Y + (float) num103);
                                                dust11.velocity.X =
                                                    dust11.velocity.X * 1f - 2f - base.velocity.X * 0.3f;
                                                dust11.velocity.Y =
                                                    dust11.velocity.Y * 1f + 2f * gravDir - base.velocity.Y * 0.3f;
                                                break;
                                            case 1:
                                                dust11.position =
                                                    new Vector2(base.position.X + (float) width + (float) num102,
                                                        base.position.Y + (float) num103);
                                                dust11.velocity.X =
                                                    dust11.velocity.X * 1f + 2f - base.velocity.X * 0.3f;
                                                dust11.velocity.Y =
                                                    dust11.velocity.Y * 1f + 2f * gravDir - base.velocity.Y * 0.3f;
                                                break;
                                        }

                                        var dust12 = Dust.CloneDust(dust11);
                                        dust12.scale *= 0.65f;
                                        dust12.fadeIn *= 0.65f;
                                        dust12.color = new Color(255, 255, 255, 255);
                                        dust11.noLight = true;
                                        dust11.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                    }
                                }
                            }
                            else if (wings == 38)
                            {
                                var flag22 = false;
                                if (flag19 || jump > 0)
                                {
                                    wingFrameCounter++;
                                    if (wingFrameCounter >= 32)
                                    {
                                        wingFrameCounter = 0;
                                    }

                                    wingFrame = 1 + wingFrameCounter / 8;
                                    if (wingFrame == 4)
                                    {
                                        wingFrame = 2;
                                    }

                                    flag22 = true;
                                }
                                else if (base.velocity.Y != 0f)
                                {
                                    if (controlJump)
                                    {
                                        wingFrameCounter++;
                                        if (wingFrameCounter >= 32)
                                        {
                                            wingFrameCounter = 0;
                                        }

                                        wingFrame = 1 + wingFrameCounter / 8;
                                        if (wingFrame == 4)
                                        {
                                            wingFrame = 2;
                                        }

                                        flag22 = true;
                                    }
                                    else
                                    {
                                        wingFrame = 0;
                                    }
                                }
                                else
                                {
                                    wingFrame = 0;
                                }

                                if (flag22)
                                {
                                    var value3 = new Vector2((float) base.direction, gravDir);
                                    var value4 = base.velocity * 0.5f;
                                    var type2 = 267;
                                    var num105 = miscCounter * base.direction;
                                    for (var num106 = 0; num106 < 3; num106++)
                                    {
                                        var value5 = Vector2.Zero;
                                        switch (num106)
                                        {
                                            case 1:
                                                value5 = base.velocity * -0.33f;
                                                break;
                                            case 2:
                                                value5 = base.velocity * -0.66f;
                                                break;
                                        }

                                        var value6 = new Vector2(-39f, 6f) * value3 +
                                                         new Vector2(2f, 0f).RotatedBy(
                                                             (double) ((float) num105 / -15f * 6.28318548f),
                                                             default(Vector2));
                                        var dust13 = Dust.NewDustPerfect(base.Center + value6 + value5, type2, value4,
                                            0, underShirtColor, 1f);
                                        dust13.noGravity = true;
                                        dust13.noLight = true;
                                        dust13.scale = 0.47f;
                                        dust13.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                        value6 = new Vector2(-23f, 2f) * value3 +
                                                 new Vector2(2f, 0f).RotatedBy(
                                                     (double) ((float) num105 / -15f * 6.28318548f), default(Vector2));
                                        dust13 = Dust.NewDustPerfect(base.Center + value6 + value5, type2, value4, 0,
                                            underShirtColor, 1f);
                                        dust13.noGravity = true;
                                        dust13.noLight = true;
                                        dust13.scale = 0.35f;
                                        dust13.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                        value6 = new Vector2(-31f, -6f) * value3 +
                                                 new Vector2(2f, 0f).RotatedBy(
                                                     (double) ((float) num105 / -20f * 6.28318548f), default(Vector2));
                                        dust13 = Dust.NewDustPerfect(base.Center + value6 + value5, type2, value4, 0,
                                            underShirtColor, 1f);
                                        dust13.noGravity = true;
                                        dust13.noLight = true;
                                        dust13.scale = 0.49f;
                                        dust13.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                    }
                                }
                            }
                            else
                            {
                                var num107 = 4;
                                if (wings == 32)
                                {
                                    num107 = 3;
                                }

                                if (flag19 || jump > 0)
                                {
                                    wingFrameCounter++;
                                    if (wingFrameCounter > num107)
                                    {
                                        wingFrame++;
                                        wingFrameCounter = 0;
                                        if (wingFrame >= 4)
                                        {
                                            wingFrame = 0;
                                        }
                                    }
                                }
                                else if (base.velocity.Y != 0f)
                                {
                                    wingFrame = 1;
                                    if (wings == 32)
                                    {
                                        wingFrame = 3;
                                    }

                                    if (wings == 29 && Main.rand.Next(5) == 0)
                                    {
                                        var num108 = 4;
                                        if (base.direction == 1)
                                        {
                                            num108 = -40;
                                        }

                                        var num109 =
                                            Dust.NewDust(
                                                new Vector2(base.position.X + (float) (width / 2) + (float) num108,
                                                    base.position.Y + (float) (height / 2) - 15f), 30, 30, 6, 0f, 0f,
                                                100, default(Color), 2.4f);
                                        Main.dust[num109].noGravity = true;
                                        Main.dust[num109].velocity *= 0.3f;
                                        if (Main.rand.Next(10) == 0)
                                        {
                                            Main.dust[num109].fadeIn = 2f;
                                        }

                                        Main.dust[num109].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
                                    }
                                }
                                else
                                {
                                    wingFrame = 0;
                                }
                            }

                            if (wingsLogic > 0 && rocketBoots > 0 && base.velocity.Y != 0f)
                            {
                                var num110 = 6;
                                wingTime += (float) (rocketTime * num110);
                                if (wingTime > (float) (wingTimeMax + rocketTimeMax * num110))
                                {
                                    wingTime = (float) (wingTimeMax + rocketTimeMax * num110);
                                }

                                rocketTime = 0;
                            }

                            if (flag19 && wings != 4 && wings != 22 && wings != 0 && wings != 24 && wings != 28 &&
                                wings != 30 && wings != 33)
                            {
                                if (wingFrame == 3)
                                {
                                    if (!flapSound)
                                    {
                                        Main.PlaySound(SoundID.Item32, base.position);
                                    }

                                    flapSound = true;
                                }
                                else
                                {
                                    flapSound = false;
                                }
                            }

                            if (base.velocity.Y == 0f || sliding || (autoJump && justJumped))
                            {
                                rocketTime = rocketTimeMax;
                            }

                            if ((wingTime == 0f || wingsLogic == 0) && rocketBoots > 0 && controlJump &&
                                rocketDelay == 0 && canRocket && rocketRelease && !jumpAgainCloud)
                            {
                                if (rocketTime > 0)
                                {
                                    rocketTime--;
                                    rocketDelay = 10;
                                    if (rocketDelay2 <= 0)
                                    {
                                        if (rocketBoots == 1)
                                        {
                                            Main.PlaySound(SoundID.Item13, base.position);
                                            rocketDelay2 = 30;
                                        }
                                        else if (rocketBoots == 2 || rocketBoots == 3)
                                        {
                                            Main.PlaySound(SoundID.Item24, base.position);
                                            rocketDelay2 = 15;
                                        }
                                    }
                                }
                                else
                                {
                                    canRocket = false;
                                }
                            }

                            if (rocketDelay2 > 0)
                            {
                                rocketDelay2--;
                            }

                            if (rocketDelay == 0)
                            {
                                rocketFrame = false;
                            }

                            if (rocketDelay > 0)
                            {
                                var num111 = height;
                                if (gravDir == -1f)
                                {
                                    num111 = 4;
                                }

                                rocketFrame = true;
                                for (var num112 = 0; num112 < 2; num112++)
                                {
                                    var type3 = 6;
                                    var scale2 = 2.5f;
                                    var alpha2 = 100;
                                    if (rocketBoots == 2)
                                    {
                                        type3 = 16;
                                        scale2 = 1.5f;
                                        alpha2 = 20;
                                    }
                                    else if (rocketBoots == 3)
                                    {
                                        type3 = 76;
                                        scale2 = 1f;
                                        alpha2 = 20;
                                    }
                                    else if (socialShadowRocketBoots)
                                    {
                                        type3 = 27;
                                        scale2 = 1.5f;
                                    }

                                    if (num112 == 0)
                                    {
                                        var num113 =
                                            Dust.NewDust(
                                                new Vector2(base.position.X - 4f,
                                                    base.position.Y + (float) num111 - 10f), 8, 8, type3, 0f, 0f,
                                                alpha2, default(Color), scale2);
                                        Main.dust[num113].shader = GameShaders.Armor.GetSecondaryShader(cShoe, this);
                                        if (rocketBoots == 1)
                                        {
                                            Main.dust[num113].noGravity = true;
                                        }

                                        Main.dust[num113].velocity.X =
                                            Main.dust[num113].velocity.X * 1f - 2f - base.velocity.X * 0.3f;
                                        Main.dust[num113].velocity.Y =
                                            Main.dust[num113].velocity.Y * 1f + 2f * gravDir - base.velocity.Y * 0.3f;
                                        if (rocketBoots == 2)
                                        {
                                            Main.dust[num113].velocity *= 0.1f;
                                        }

                                        if (rocketBoots == 3)
                                        {
                                            Main.dust[num113].velocity *= 0.05f;
                                            Main.dust[num113].velocity.Y += 0.15f;
                                            Main.dust[num113].noLight = true;
                                            if (Main.rand.Next(2) == 0)
                                            {
                                                Main.dust[num113].noGravity = true;
                                                Main.dust[num113].scale = 1.75f;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        var num114 =
                                            Dust.NewDust(
                                                new Vector2(base.position.X + (float) width - 4f,
                                                    base.position.Y + (float) num111 - 10f), 8, 8, type3, 0f, 0f,
                                                alpha2, default(Color), scale2);
                                        Main.dust[num114].shader = GameShaders.Armor.GetSecondaryShader(cShoe, this);
                                        if (rocketBoots == 1)
                                        {
                                            Main.dust[num114].noGravity = true;
                                        }

                                        Main.dust[num114].velocity.X =
                                            Main.dust[num114].velocity.X * 1f + 2f - base.velocity.X * 0.3f;
                                        Main.dust[num114].velocity.Y =
                                            Main.dust[num114].velocity.Y * 1f + 2f * gravDir - base.velocity.Y * 0.3f;
                                        if (rocketBoots == 2)
                                        {
                                            Main.dust[num114].velocity *= 0.1f;
                                        }

                                        if (rocketBoots == 3)
                                        {
                                            Main.dust[num114].velocity *= 0.05f;
                                            Main.dust[num114].velocity.Y += 0.15f;
                                            Main.dust[num114].noLight = true;
                                            if (Main.rand.Next(2) == 0)
                                            {
                                                Main.dust[num114].noGravity = true;
                                                Main.dust[num114].scale = 1.75f;
                                            }
                                        }
                                    }
                                }

                                if (rocketDelay == 0)
                                {
                                    releaseJump = true;
                                }

                                rocketDelay--;
                                base.velocity.Y -= 0.1f * gravDir;
                                if (gravDir == 1f)
                                {
                                    if (base.velocity.Y > 0f)
                                    {
                                        base.velocity.Y -= 0.5f;
                                    }
                                    else if ((double) base.velocity.Y > (double) (0f - jumpSpeed) * 0.5)
                                    {
                                        base.velocity.Y -= 0.1f;
                                    }

                                    if (base.velocity.Y < (0f - jumpSpeed) * 1.5f)
                                    {
                                        base.velocity.Y = (0f - jumpSpeed) * 1.5f;
                                    }
                                }
                                else
                                {
                                    if (base.velocity.Y < 0f)
                                    {
                                        base.velocity.Y += 0.5f;
                                    }
                                    else if ((double) base.velocity.Y < (double) jumpSpeed * 0.5)
                                    {
                                        base.velocity.Y += 0.1f;
                                    }

                                    if (base.velocity.Y > jumpSpeed * 1.5f)
                                    {
                                        base.velocity.Y = jumpSpeed * 1.5f;
                                    }
                                }
                            }
                            else if (!flag19)
                            {
                                if (mount.CanHover)
                                {
                                    mount.Hover(this);
                                }
                                else if (mount.CanFly && controlJump && jump == 0)
                                {
                                    if (mount.Flight())
                                    {
                                        if (controlDown)
                                        {
                                            base.velocity.Y *= 0.9f;
                                            if (base.velocity.Y > -1f && (double) base.velocity.Y < 0.5)
                                            {
                                                base.velocity.Y = 1E-05f;
                                            }
                                        }
                                        else
                                        {
                                            if (base.velocity.Y > 0f)
                                            {
                                                base.velocity.Y -= 0.5f;
                                            }
                                            else if ((double) base.velocity.Y > (double) (0f - jumpSpeed) * 1.5)
                                            {
                                                base.velocity.Y -= 0.1f;
                                            }

                                            if (base.velocity.Y < (0f - jumpSpeed) * 1.5f)
                                            {
                                                base.velocity.Y = (0f - jumpSpeed) * 1.5f;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        base.velocity.Y += gravity / 3f * gravDir;
                                        if (gravDir == 1f)
                                        {
                                            if (base.velocity.Y > maxFallSpeed / 3f && !controlDown)
                                            {
                                                base.velocity.Y = maxFallSpeed / 3f;
                                            }
                                        }
                                        else if (base.velocity.Y < (0f - maxFallSpeed) / 3f && !controlUp)
                                        {
                                            base.velocity.Y = (0f - maxFallSpeed) / 3f;
                                        }
                                    }
                                }
                                else if (slowFall && ((!controlDown && gravDir == 1f) ||
                                                      (!controlDown && gravDir == -1f)))
                                {
                                    if ((controlUp && gravDir == 1f) || (controlUp && gravDir == -1f))
                                    {
                                        gravity = gravity / 10f * gravDir;
                                    }
                                    else
                                    {
                                        gravity = gravity / 3f * gravDir;
                                    }

                                    base.velocity.Y += gravity;
                                }
                                else if (wingsLogic > 0 && controlJump && base.velocity.Y > 0f)
                                {
                                    fallStart = (int) (base.position.Y / 16f);
                                    if (base.velocity.Y > 0f)
                                    {
                                        if (wings == 10 && Main.rand.Next(3) == 0)
                                        {
                                            var num115 = 4;
                                            if (base.direction == 1)
                                            {
                                                num115 = -40;
                                            }

                                            var num116 =
                                                Dust.NewDust(
                                                    new Vector2(base.position.X + (float) (width / 2) + (float) num115,
                                                        base.position.Y + (float) (height / 2) - 15f), 30, 30, 76, 0f,
                                                    0f, 50, default(Color), 0.6f);
                                            Main.dust[num116].fadeIn = 1.1f;
                                            Main.dust[num116].noGravity = true;
                                            Main.dust[num116].noLight = true;
                                            Main.dust[num116].velocity *= 0.3f;
                                            Main.dust[num116].shader =
                                                GameShaders.Armor.GetSecondaryShader(cWings, this);
                                        }

                                        if (wings == 34 && Main.rand.Next(3) == 0)
                                        {
                                            var num117 = 4;
                                            if (base.direction == 1)
                                            {
                                                num117 = -40;
                                            }

                                            var num118 =
                                                Dust.NewDust(
                                                    new Vector2(base.position.X + (float) (width / 2) + (float) num117,
                                                        base.position.Y + (float) (height / 2) - 15f), 30, 30, 261, 0f,
                                                    0f, 50, default(Color), 0.6f);
                                            Main.dust[num118].fadeIn = 1.1f;
                                            Main.dust[num118].noGravity = true;
                                            Main.dust[num118].noLight = true;
                                            Main.dust[num118].velocity *= 0.3f;
                                            Main.dust[num118].shader =
                                                GameShaders.Armor.GetSecondaryShader(cWings, this);
                                        }

                                        if (wings == 9 && Main.rand.Next(3) == 0)
                                        {
                                            var num119 = 8;
                                            if (base.direction == 1)
                                            {
                                                num119 = -40;
                                            }

                                            var num120 =
                                                Dust.NewDust(
                                                    new Vector2(base.position.X + (float) (width / 2) + (float) num119,
                                                        base.position.Y + (float) (height / 2) - 15f), 30, 30, 6, 0f,
                                                    0f, 200, default(Color), 2f);
                                            Main.dust[num120].noGravity = true;
                                            Main.dust[num120].velocity *= 0.3f;
                                            Main.dust[num120].shader =
                                                GameShaders.Armor.GetSecondaryShader(cWings, this);
                                        }

                                        if (wings == 29 && Main.rand.Next(3) == 0)
                                        {
                                            var num121 = 8;
                                            if (base.direction == 1)
                                            {
                                                num121 = -40;
                                            }

                                            var num122 =
                                                Dust.NewDust(
                                                    new Vector2(base.position.X + (float) (width / 2) + (float) num121,
                                                        base.position.Y + (float) (height / 2) - 15f), 30, 30, 6, 0f,
                                                    0f, 100, default(Color), 2.4f);
                                            Main.dust[num122].noGravity = true;
                                            Main.dust[num122].velocity *= 0.3f;
                                            if (Main.rand.Next(10) == 0)
                                            {
                                                Main.dust[num122].fadeIn = 2f;
                                            }

                                            Main.dust[num122].shader =
                                                GameShaders.Armor.GetSecondaryShader(cWings, this);
                                        }

                                        if (wings == 6)
                                        {
                                            if (Main.rand.Next(10) == 0)
                                            {
                                                var num123 = 4;
                                                if (base.direction == 1)
                                                {
                                                    num123 = -40;
                                                }

                                                var num124 = Dust.NewDust(
                                                    new Vector2(base.position.X + (float) (width / 2) + (float) num123,
                                                        base.position.Y + (float) (height / 2) - 12f), 30, 20, 55, 0f,
                                                    0f, 200, default(Color), 1f);
                                                Main.dust[num124].velocity *= 0.3f;
                                                Main.dust[num124].shader =
                                                    GameShaders.Armor.GetSecondaryShader(cWings, this);
                                            }
                                        }
                                        else if (wings == 5 && Main.rand.Next(6) == 0)
                                        {
                                            var num125 = 6;
                                            if (base.direction == 1)
                                            {
                                                num125 = -30;
                                            }

                                            var num126 =
                                                Dust.NewDust(
                                                    new Vector2(base.position.X + (float) (width / 2) + (float) num125,
                                                        base.position.Y), 18, height, 58, 0f, 0f, 255, default(Color),
                                                    1.2f);
                                            Main.dust[num126].velocity *= 0.3f;
                                            Main.dust[num126].shader =
                                                GameShaders.Armor.GetSecondaryShader(cWings, this);
                                        }

                                        if (wings == 4)
                                        {
                                            rocketDelay2--;
                                            if (rocketDelay2 <= 0)
                                            {
                                                Main.PlaySound(SoundID.Item13, base.position);
                                                rocketDelay2 = 60;
                                            }

                                            var type4 = 6;
                                            var scale3 = 1.5f;
                                            var alpha3 = 100;
                                            var x6 = base.position.X + (float) (width / 2) + 16f;
                                            if (base.direction > 0)
                                            {
                                                x6 = base.position.X + (float) (width / 2) - 26f;
                                            }

                                            var num127 = base.position.Y + (float) height - 18f;
                                            if (Main.rand.Next(2) == 1)
                                            {
                                                x6 = base.position.X + (float) (width / 2) + 8f;
                                                if (base.direction > 0)
                                                {
                                                    x6 = base.position.X + (float) (width / 2) - 20f;
                                                }

                                                num127 += 6f;
                                            }

                                            var num128 = Dust.NewDust(new Vector2(x6, num127), 8, 8, type4, 0f, 0f,
                                                alpha3, default(Color), scale3);
                                            Main.dust[num128].velocity.X *= 0.3f;
                                            Main.dust[num128].velocity.Y += 10f;
                                            Main.dust[num128].noGravity = true;
                                            Main.dust[num128].shader =
                                                GameShaders.Armor.GetSecondaryShader(cWings, this);
                                            wingFrameCounter++;
                                            if (wingFrameCounter > 4)
                                            {
                                                wingFrame++;
                                                wingFrameCounter = 0;
                                                if (wingFrame >= 3)
                                                {
                                                    wingFrame = 0;
                                                }
                                            }
                                        }
                                        else if (wings != 22 && wings != 28)
                                        {
                                            if (wings == 30)
                                            {
                                                wingFrameCounter++;
                                                var num129 = 5;
                                                if (wingFrameCounter >= num129 * 3)
                                                {
                                                    wingFrameCounter = 0;
                                                }

                                                wingFrame = 1 + wingFrameCounter / num129;
                                            }
                                            else if (wings == 34)
                                            {
                                                wingFrameCounter++;
                                                var num130 = 7;
                                                if (wingFrameCounter >= num130 * 6)
                                                {
                                                    wingFrameCounter = 0;
                                                }

                                                wingFrame = wingFrameCounter / num130;
                                            }
                                            else if (wings == 39)
                                            {
                                                wingFrameCounter++;
                                                var num131 = 12;
                                                if (wingFrameCounter >= num131 * 6)
                                                {
                                                    wingFrameCounter = 0;
                                                }

                                                wingFrame = wingFrameCounter / num131;
                                            }
                                            else if (wings == 26)
                                            {
                                                var num132 = 6;
                                                if (base.direction == 1)
                                                {
                                                    num132 = -30;
                                                }

                                                var num133 = Dust.NewDust(
                                                    new Vector2(base.position.X + (float) (width / 2) + (float) num132,
                                                        base.position.Y), 18, height, 217, 0f, 0f, 100, default(Color),
                                                    1.4f);
                                                Main.dust[num133].noGravity = true;
                                                Main.dust[num133].noLight = true;
                                                Main.dust[num133].velocity /= 4f;
                                                Main.dust[num133].velocity -= base.velocity;
                                                Main.dust[num133].shader =
                                                    GameShaders.Armor.GetSecondaryShader(cWings, this);
                                                if (Main.rand.Next(2) == 0)
                                                {
                                                    num132 = -24;
                                                    if (base.direction == 1)
                                                    {
                                                        num132 = 12;
                                                    }

                                                    var num134 = base.position.Y;
                                                    if (gravDir == -1f)
                                                    {
                                                        num134 += (float) (height / 2);
                                                    }

                                                    num133 = Dust.NewDust(
                                                        new Vector2(
                                                            base.position.X + (float) (width / 2) + (float) num132,
                                                            num134), 12, height / 2, 217, 0f, 0f, 100, default(Color),
                                                        1.4f);
                                                    Main.dust[num133].noGravity = true;
                                                    Main.dust[num133].noLight = true;
                                                    Main.dust[num133].velocity /= 4f;
                                                    Main.dust[num133].velocity -= base.velocity;
                                                    Main.dust[num133].shader =
                                                        GameShaders.Armor.GetSecondaryShader(cWings, this);
                                                }

                                                wingFrame = 2;
                                            }
                                            else if (wings == 37)
                                            {
                                                var color = Color.Lerp(Color.Black, Color.White,
                                                    Main.rand.NextFloat());
                                                var num135 = 6;
                                                if (base.direction == 1)
                                                {
                                                    num135 = -30;
                                                }

                                                var num136 = Dust.NewDust(
                                                    new Vector2(base.position.X + (float) (width / 2) + (float) num135,
                                                        base.position.Y), 24, height,
                                                    Utils.SelectRandom<int>(Main.rand, 31, 31, 31), 0f, 0f, 100,
                                                    default(Color), 0.7f);
                                                Main.dust[num136].noGravity = true;
                                                Main.dust[num136].noLight = true;
                                                Main.dust[num136].velocity /= 4f;
                                                Main.dust[num136].velocity -= base.velocity;
                                                Main.dust[num136].shader =
                                                    GameShaders.Armor.GetSecondaryShader(cWings, this);
                                                if (Main.dust[num136].type == 55)
                                                {
                                                    Main.dust[num136].color = color;
                                                }

                                                if (Main.rand.Next(3) == 0)
                                                {
                                                    num135 = -24;
                                                    if (base.direction == 1)
                                                    {
                                                        num135 = 12;
                                                    }

                                                    var num137 = base.position.Y;
                                                    if (gravDir == -1f)
                                                    {
                                                        num137 += (float) (height / 2);
                                                    }

                                                    num136 = Dust.NewDust(
                                                        new Vector2(
                                                            base.position.X + (float) (width / 2) + (float) num135,
                                                            num137), 12, height / 2,
                                                        Utils.SelectRandom<int>(Main.rand, 31, 31, 31), 0f, 0f, 140,
                                                        default(Color), 0.7f);
                                                    Main.dust[num136].noGravity = true;
                                                    Main.dust[num136].noLight = true;
                                                    Main.dust[num136].velocity /= 4f;
                                                    Main.dust[num136].velocity -= base.velocity;
                                                    Main.dust[num136].shader =
                                                        GameShaders.Armor.GetSecondaryShader(cWings, this);
                                                    if (Main.dust[num136].type == 55)
                                                    {
                                                        Main.dust[num136].color = color;
                                                    }
                                                }

                                                wingFrame = 2;
                                            }
                                            else if (wings != 24)
                                            {
                                                if (wings == 12)
                                                {
                                                    wingFrame = 3;
                                                }
                                                else
                                                {
                                                    wingFrame = 2;
                                                }
                                            }
                                        }
                                    }

                                    base.velocity.Y += gravity / 3f * gravDir;
                                    if (gravDir == 1f)
                                    {
                                        if (base.velocity.Y > maxFallSpeed / 3f && !controlDown)
                                        {
                                            base.velocity.Y = maxFallSpeed / 3f;
                                        }
                                    }
                                    else if (base.velocity.Y < (0f - maxFallSpeed) / 3f && !controlUp)
                                    {
                                        base.velocity.Y = (0f - maxFallSpeed) / 3f;
                                    }
                                }
                                else if (cartRampTime <= 0)
                                {
                                    base.velocity.Y += gravity * gravDir;
                                }
                                else
                                {
                                    cartRampTime--;
                                }
                            }

                            if (!mount.Active || mount.Type != 5)
                            {
                                if (gravDir == 1f)
                                {
                                    if (base.velocity.Y > maxFallSpeed)
                                    {
                                        base.velocity.Y = maxFallSpeed;
                                    }

                                    if (slowFall && base.velocity.Y > maxFallSpeed / 3f && !controlDown)
                                    {
                                        base.velocity.Y = maxFallSpeed / 3f;
                                    }

                                    if (slowFall && base.velocity.Y > maxFallSpeed / 5f && controlUp)
                                    {
                                        base.velocity.Y = maxFallSpeed / 10f;
                                    }
                                }
                                else
                                {
                                    if (base.velocity.Y < 0f - maxFallSpeed)
                                    {
                                        base.velocity.Y = 0f - maxFallSpeed;
                                    }

                                    if (slowFall && base.velocity.Y < (0f - maxFallSpeed) / 3f && !controlDown)
                                    {
                                        base.velocity.Y = (0f - maxFallSpeed) / 3f;
                                    }

                                    if (slowFall && base.velocity.Y < (0f - maxFallSpeed) / 5f && controlUp)
                                    {
                                        base.velocity.Y = (0f - maxFallSpeed) / 10f;
                                    }
                                }
                            }
                        }
                    }

                    if (mount.Active)
                    {
                        wingFrame = 0;
                    }

                    if ((wingsLogic == 22 || wingsLogic == 28 || wingsLogic == 30 || wingsLogic == 31 ||
                         wingsLogic == 33 || wingsLogic == 35 || wingsLogic == 37) && controlDown && controlJump &&
                        wingTime > 0f && !merman)
                    {
                        base.velocity.Y *= 0.9f;
                        if (base.velocity.Y > -2f && base.velocity.Y < 1f)
                        {
                            base.velocity.Y = 1E-05f;
                        }
                    }

                    if (wingsLogic == 37 && controlDown && controlJump && wingTime > 0f && !merman)
                    {
                        base.velocity.Y *= 0.92f;
                        if (base.velocity.Y > -2f && base.velocity.Y < 1f)
                        {
                            base.velocity.Y = 1E-05f;
                        }
                    }

                    GrabItems(i);
                    LookForTileInteractions();
                    if (tongued)
                    {
                        var flag23 = false;
                        if (Main.wof >= 0)
                        {
                            var num138 = Main.npc[Main.wof].position.X + (float) (Main.npc[Main.wof].width / 2);
                            num138 += (float) (Main.npc[Main.wof].direction * 200);
                            var num139 = Main.npc[Main.wof].position.Y + (float) (Main.npc[Main.wof].height / 2);
                            var center = base.Center;
                            var num140 = num138 - center.X;
                            var num141 = num139 - center.Y;
                            var num142 = (float) Math.Sqrt((double) (num140 * num140 + num141 * num141));
                            var num143 = 11f;
                            var num144 = num142;
                            if (num142 > num143)
                            {
                                num144 = num143 / num142;
                            }
                            else
                            {
                                num144 = 1f;
                                flag23 = true;
                            }

                            num140 *= num144;
                            num141 *= num144;
                            base.velocity.X = num140;
                            base.velocity.Y = num141;
                        }
                        else
                        {
                            flag23 = true;
                        }

                        if (flag23 && Main.myPlayer == whoAmI)
                        {
                            for (var num145 = 0; num145 < 22; num145++)
                            {
                                if (buffType[num145] == 38)
                                {
                                    DelBuff(num145);
                                }
                            }
                        }
                    }

                    if (Main.myPlayer == whoAmI)
                    {
                        WOFTongue();
                        if (controlHook)
                        {
                            if (releaseHook)
                            {
                                QuickGrapple();
                            }

                            releaseHook = false;
                        }
                        else
                        {
                            releaseHook = true;
                        }

                        if (talkNPC >= 0)
                        {
                            var rectangle2 = new Rectangle(
                                (int) (base.position.X + (float) (width / 2) - (float) (tileRangeX * 16)),
                                (int) (base.position.Y + (float) (height / 2) - (float) (tileRangeY * 16)),
                                tileRangeX * 16 * 2, tileRangeY * 16 * 2);
                            var value7 = new Rectangle((int) Main.npc[talkNPC].position.X,
                                (int) Main.npc[talkNPC].position.Y, Main.npc[talkNPC].width, Main.npc[talkNPC].height);
                            if (!rectangle2.Intersects(value7) || chest != -1 || !Main.npc[talkNPC].active)
                            {
                                if (chest == -1)
                                {
                                    Main.PlaySound(11, -1, -1, 1, 1f, 0f);
                                }

                                talkNPC = -1;
                                Main.npcChatCornerItem = 0;
                                Main.npcChatText = "";
                            }
                        }

                        if (sign >= 0)
                        {
                            var value8 = new Rectangle(
                                (int) (base.position.X + (float) (width / 2) - (float) (tileRangeX * 16)),
                                (int) (base.position.Y + (float) (height / 2) - (float) (tileRangeY * 16)),
                                tileRangeX * 16 * 2, tileRangeY * 16 * 2);
                            try
                            {
                                var flag24 = false;
                                if (Main.sign[sign] == null)
                                {
                                    flag24 = true;
                                }

                                if (!flag24)
                                {
                                    rectangle = new Rectangle(Main.sign[sign].x * 16, Main.sign[sign].y * 16, 32, 32);
                                    if (!rectangle.Intersects(value8))
                                    {
                                        flag24 = true;
                                    }
                                }

                                if (flag24)
                                {
                                    Main.PlaySound(11, -1, -1, 1, 1f, 0f);
                                    sign = -1;
                                    Main.editSign = false;
                                    Main.npcChatText = "";
                                }
                            }
                            catch
                            {
                                Main.PlaySound(11, -1, -1, 1, 1f, 0f);
                                sign = -1;
                                Main.editSign = false;
                                Main.npcChatText = "";
                            }
                        }

                        if (Main.editSign)
                        {
                            if (sign == -1)
                            {
                                Main.editSign = false;
                            }
                            else
                            {
                                Main.InputTextSign();
                            }
                        }
                        else if (Main.editChest)
                        {
                            Main.InputTextChest();
                            if (Main.player[Main.myPlayer].chest == -1)
                            {
                                Main.editChest = false;
                            }
                        }

                        if (mount.Active && mount.Cart && Math.Abs(base.velocity.X) > 4f)
                        {
                            var rectangle3 = new Rectangle((int) base.position.X, (int) base.position.Y, width,
                                height);
                            for (var num146 = 0; num146 < 200; num146++)
                            {
                                if (Main.npc[num146].active && !Main.npc[num146].dontTakeDamage &&
                                    !Main.npc[num146].friendly && Main.npc[num146].immune[i] == 0 &&
                                    rectangle3.Intersects(new Rectangle((int) Main.npc[num146].position.X,
                                        (int) Main.npc[num146].position.Y, Main.npc[num146].width,
                                        Main.npc[num146].height)))
                                {
                                    var num147 = (float) meleeCrit;
                                    if (num147 < (float) rangedCrit)
                                    {
                                        num147 = (float) rangedCrit;
                                    }

                                    if (num147 < (float) magicCrit)
                                    {
                                        num147 = (float) magicCrit;
                                    }

                                    var crit = false;
                                    if ((float) Main.rand.Next(1, 101) <= num147)
                                    {
                                        crit = true;
                                    }

                                    var num148 = Math.Abs(base.velocity.X) / maxRunSpeed;
                                    var damage2 = Main.DamageVar(25f + 55f * num148);
                                    if (mount.Type == 11)
                                    {
                                        damage2 = Main.DamageVar(50f + 100f * num148);
                                    }

                                    if (mount.Type == 13)
                                    {
                                        damage2 = Main.DamageVar(15f + 30f * num148);
                                    }

                                    var knockback = 5f + 25f * num148;
                                    var direction = 1;
                                    if (base.velocity.X < 0f)
                                    {
                                        direction = -1;
                                    }

                                    if (whoAmI == Main.myPlayer)
                                    {
                                        ApplyDamageToNPC(Main.npc[num146], damage2, knockback, direction, crit);
                                    }

                                    Main.npc[num146].immune[i] = 30;
                                    if (!Main.npc[num146].active)
                                    {
                                        AchievementsHelper.HandleSpecialEvent(this, 9);
                                    }
                                }
                            }
                        }

                        Update_NPCCollision();
                        var vector3 = (mount.Active && mount.Cart)
                            ? Collision.HurtTiles(base.position, base.velocity, width, height - 16, fireWalk)
                            : Collision.HurtTiles(base.position, base.velocity, width, height, fireWalk);
                        if (vector3.Y == 0f && !fireWalk)
                        {
                            foreach (var touchedTile in TouchedTiles)
                            {
                                var current = touchedTile;
                                var tile11 = Main.tile[current.X, current.Y];
                                if (tile11 != null && tile11.active() && tile11.nactive() && !fireWalk &&
                                    TileID.Sets.TouchDamageHot[tile11.type] != 0)
                                {
                                    vector3.Y = (float) TileID.Sets.TouchDamageHot[tile11.type];
                                    vector3.X = (float) ((!(base.Center.X / 16f < (float) current.X + 0.5f))
                                        ? 1
                                        : (-1));
                                    break;
                                }
                            }
                        }

                        if (vector3.Y == 20f)
                        {
                            AddBuff(67, 20, true);
                        }
                        else if (vector3.Y == 15f)
                        {
                            if (suffocateDelay < 5)
                            {
                                suffocateDelay++;
                            }
                            else
                            {
                                AddBuff(68, 1, true);
                            }
                        }
                        else if (vector3.Y != 0f)
                        {
                            var damage3 = Main.DamageVar(vector3.Y);
                            Hurt(PlayerDeathReason.ByOther(3), damage3, 0, false, false, false, 0);
                        }
                        else
                        {
                            suffocateDelay = 0;
                        }
                    }

                    if (controlRight)
                    {
                        releaseRight = false;
                    }
                    else
                    {
                        releaseRight = true;
                        rightTimer = 7;
                    }

                    if (controlLeft)
                    {
                        releaseLeft = false;
                    }
                    else
                    {
                        releaseLeft = true;
                        leftTimer = 7;
                    }

                    releaseDown = !controlDown;
                    if (rightTimer > 0)
                    {
                        rightTimer--;
                    }
                    else if (controlRight)
                    {
                        rightTimer = 7;
                    }

                    if (leftTimer > 0)
                    {
                        leftTimer--;
                    }
                    else if (controlLeft)
                    {
                        leftTimer = 7;
                    }

                    GrappleMovement();
                    StickyMovement();
                    CheckDrowning();
                    if (gravDir == -1f)
                    {
                        waterWalk = false;
                        waterWalk2 = false;
                    }

                    var num149 = height;
                    if (waterWalk)
                    {
                        num149 -= 6;
                    }

                    var flag25 = Collision.LavaCollision(base.position, width, num149);
                    if (flag25)
                    {
                        if (!lavaImmune && Main.myPlayer == i && !immune)
                        {
                            if (lavaTime > 0)
                            {
                                lavaTime--;
                            }
                            else if (lavaRose)
                            {
                                Hurt(PlayerDeathReason.ByOther(2), 50, 0, false, false, false, -1);
                                AddBuff(24, 210, true);
                            }
                            else
                            {
                                Hurt(PlayerDeathReason.ByOther(2), 80, 0, false, false, false, -1);
                                AddBuff(24, 420, true);
                            }
                        }

                        lavaWet = true;
                    }
                    else
                    {
                        lavaWet = false;
                        if (lavaTime < lavaMax)
                        {
                            lavaTime++;
                        }
                    }

                    if (lavaTime > lavaMax)
                    {
                        lavaTime = lavaMax;
                    }

                    if (waterWalk2 && !waterWalk)
                    {
                        num149 -= 6;
                    }

                    var flag26 = Collision.WetCollision(base.position, width, height);
                    var flag27 = Collision.honey;
                    if (flag27)
                    {
                        AddBuff(48, 1800, true);
                        honeyWet = true;
                    }

                    if (flag26)
                    {
                        if (onFire && !lavaWet)
                        {
                            for (var num150 = 0; num150 < 22; num150++)
                            {
                                if (buffType[num150] == 24)
                                {
                                    DelBuff(num150);
                                }
                            }
                        }

                        if (!wet)
                        {
                            if (wetCount == 0)
                            {
                                wetCount = 10;
                                if (!flag25)
                                {
                                    if (honeyWet)
                                    {
                                        for (var num151 = 0; num151 < 20; num151++)
                                        {
                                            var num152 =
                                                Dust.NewDust(
                                                    new Vector2(base.position.X - 6f,
                                                        base.position.Y + (float) (height / 2) - 8f), width + 12, 24,
                                                    152, 0f, 0f, 0, default(Color), 1f);
                                            Main.dust[num152].velocity.Y -= 1f;
                                            Main.dust[num152].velocity.X *= 2.5f;
                                            Main.dust[num152].scale = 1.3f;
                                            Main.dust[num152].alpha = 100;
                                            Main.dust[num152].noGravity = true;
                                        }

                                        Main.PlaySound(19, (int) base.position.X, (int) base.position.Y, 1, 1f, 0f);
                                    }
                                    else
                                    {
                                        for (var num153 = 0; num153 < 50; num153++)
                                        {
                                            var num154 =
                                                Dust.NewDust(
                                                    new Vector2(base.position.X - 6f,
                                                        base.position.Y + (float) (height / 2) - 8f), width + 12, 24,
                                                    Dust.dustWater(), 0f, 0f, 0, default(Color), 1f);
                                            Main.dust[num154].velocity.Y -= 3f;
                                            Main.dust[num154].velocity.X *= 2.5f;
                                            Main.dust[num154].scale = 0.8f;
                                            Main.dust[num154].alpha = 100;
                                            Main.dust[num154].noGravity = true;
                                        }

                                        Main.PlaySound(19, (int) base.position.X, (int) base.position.Y, 0, 1f, 0f);
                                    }
                                }
                                else
                                {
                                    for (var num155 = 0; num155 < 20; num155++)
                                    {
                                        var num156 =
                                            Dust.NewDust(
                                                new Vector2(base.position.X - 6f,
                                                    base.position.Y + (float) (height / 2) - 8f), width + 12, 24, 35,
                                                0f, 0f, 0, default(Color), 1f);
                                        Main.dust[num156].velocity.Y -= 1.5f;
                                        Main.dust[num156].velocity.X *= 2.5f;
                                        Main.dust[num156].scale = 1.3f;
                                        Main.dust[num156].alpha = 100;
                                        Main.dust[num156].noGravity = true;
                                    }

                                    Main.PlaySound(19, (int) base.position.X, (int) base.position.Y, 1, 1f, 0f);
                                }
                            }

                            wet = true;
                        }
                    }
                    else if (wet)
                    {
                        wet = false;
                        if (jump > jumpHeight / 5 && wetSlime == 0)
                        {
                            jump = jumpHeight / 5;
                        }

                        if (wetCount == 0)
                        {
                            wetCount = 10;
                            if (!lavaWet)
                            {
                                if (honeyWet)
                                {
                                    for (var num157 = 0; num157 < 20; num157++)
                                    {
                                        var num158 =
                                            Dust.NewDust(
                                                new Vector2(base.position.X - 6f,
                                                    base.position.Y + (float) (height / 2) - 8f), width + 12, 24, 152,
                                                0f, 0f, 0, default(Color), 1f);
                                        Main.dust[num158].velocity.Y -= 1f;
                                        Main.dust[num158].velocity.X *= 2.5f;
                                        Main.dust[num158].scale = 1.3f;
                                        Main.dust[num158].alpha = 100;
                                        Main.dust[num158].noGravity = true;
                                    }

                                    Main.PlaySound(19, (int) base.position.X, (int) base.position.Y, 1, 1f, 0f);
                                }
                                else
                                {
                                    for (var num159 = 0; num159 < 50; num159++)
                                    {
                                        var num160 =
                                            Dust.NewDust(
                                                new Vector2(base.position.X - 6f,
                                                    base.position.Y + (float) (height / 2)), width + 12, 24,
                                                Dust.dustWater(), 0f, 0f, 0, default(Color), 1f);
                                        Main.dust[num160].velocity.Y -= 4f;
                                        Main.dust[num160].velocity.X *= 2.5f;
                                        Main.dust[num160].scale = 0.8f;
                                        Main.dust[num160].alpha = 100;
                                        Main.dust[num160].noGravity = true;
                                    }

                                    Main.PlaySound(19, (int) base.position.X, (int) base.position.Y, 0, 1f, 0f);
                                }
                            }
                            else
                            {
                                for (var num161 = 0; num161 < 20; num161++)
                                {
                                    var num162 =
                                        Dust.NewDust(
                                            new Vector2(base.position.X - 6f,
                                                base.position.Y + (float) (height / 2) - 8f), width + 12, 24, 35, 0f,
                                            0f, 0, default(Color), 1f);
                                    Main.dust[num162].velocity.Y -= 1.5f;
                                    Main.dust[num162].velocity.X *= 2.5f;
                                    Main.dust[num162].scale = 1.3f;
                                    Main.dust[num162].alpha = 100;
                                    Main.dust[num162].noGravity = true;
                                }

                                Main.PlaySound(19, (int) base.position.X, (int) base.position.Y, 1, 1f, 0f);
                            }
                        }
                    }

                    if (!flag27)
                    {
                        honeyWet = false;
                    }

                    if (!wet)
                    {
                        lavaWet = false;
                        honeyWet = false;
                    }

                    if (wetCount > 0)
                    {
                        wetCount--;
                    }

                    if (wetSlime > 0)
                    {
                        wetSlime--;
                    }

                    if (wet && mount.Active)
                    {
                        switch (mount.Type)
                        {
                            case 5:
                            case 7:
                                if (whoAmI == Main.myPlayer)
                                {
                                    mount.Dismount(this);
                                }

                                break;
                            case 3:
                                wetSlime = 30;
                                if (base.velocity.Y > 2f)
                                {
                                    base.velocity.Y *= 0.9f;
                                }

                                base.velocity.Y -= 0.5f;
                                if (base.velocity.Y < -4f)
                                {
                                    base.velocity.Y = -4f;
                                }

                                break;
                        }
                    }

                    if (Main.expertMode && ZoneSnow && wet && !lavaWet && !honeyWet && !arcticDivingGear)
                    {
                        AddBuff(46, 150, true);
                    }

                    var num163 = 1f + Math.Abs(base.velocity.X) / 3f;
                    if (gfxOffY > 0f)
                    {
                        gfxOffY -= num163 * stepSpeed;
                        if (gfxOffY < 0f)
                        {
                            gfxOffY = 0f;
                        }
                    }
                    else if (gfxOffY < 0f)
                    {
                        gfxOffY += num163 * stepSpeed;
                        if (gfxOffY > 0f)
                        {
                            gfxOffY = 0f;
                        }
                    }

                    if (gfxOffY > 32f)
                    {
                        gfxOffY = 32f;
                    }

                    if (gfxOffY < -32f)
                    {
                        gfxOffY = -32f;
                    }

                    if (Main.myPlayer == i && !iceSkate)
                    {
                        CheckIceBreak();
                    }

                    SlopeDownMovement();
                    var flag28 = mount.Type == 7 || mount.Type == 8 || mount.Type == 12;
                    if (base.velocity.Y == gravity && (!mount.Active || (!mount.Cart && !flag28)))
                    {
                        Collision.StepDown(ref base.position, ref base.velocity, width, height, ref stepSpeed,
                            ref gfxOffY, (int) gravDir, waterWalk || waterWalk2);
                    }

                    if (gravDir == -1f)
                    {
                        if ((carpetFrame != -1 || base.velocity.Y <= gravity) && !controlUp)
                        {
                            Collision.StepUp(ref base.position, ref base.velocity, width, height, ref stepSpeed,
                                ref gfxOffY, (int) gravDir, controlUp, 0);
                        }
                    }
                    else if (flag28 ||
                             ((carpetFrame != -1 || base.velocity.Y >= gravity) && !controlDown && !mount.Cart))
                    {
                        Collision.StepUp(ref base.position, ref base.velocity, width, height, ref stepSpeed,
                            ref gfxOffY, (int) gravDir, controlUp, 0);
                    }

                    oldPosition = base.position;
                    oldDirection = base.direction;
                    var falling = false;
                    if (base.velocity.Y > gravity)
                    {
                        falling = true;
                    }

                    if (base.velocity.Y < 0f - gravity)
                    {
                        falling = true;
                    }

                    var velocity = base.velocity;
                    slideDir = 0;
                    var ignorePlats = false;
                    var fallThrough = controlDown;
                    if (gravDir == -1f || (mount.Active && mount.Cart) || GoingDownWithGrapple)
                    {
                        ignorePlats = true;
                        fallThrough = true;
                    }

                    onTrack = false;
                    var flag29 = false;
                    if (mount.Active && mount.Cart)
                    {
                        var num164 = (ignoreWater || merman) ? 1f : (honeyWet ? 0.25f : ((!wet) ? 1f : 0.5f));
                        base.velocity *= num164;
                        DelegateMethods.Minecart.rotation = fullRotation;
                        DelegateMethods.Minecart.rotationOrigin = fullRotationOrigin;
                        var bitsByte = Minecart.TrackCollision(ref base.position, ref base.velocity, ref lastBoost,
                            width, height, controlDown, controlUp, fallStart2, false, mount.MinecartDust);
                        if (bitsByte[0])
                        {
                            onTrack = true;
                            gfxOffY = Minecart.TrackRotation(ref fullRotation, base.position + base.velocity, width,
                                height, controlDown, controlUp, mount.MinecartDust);
                            fullRotationOrigin = new Vector2((float) (width / 2), (float) height);
                        }

                        if (bitsByte[1])
                        {
                            if (controlLeft || controlRight)
                            {
                                if (cartFlip)
                                {
                                    cartFlip = false;
                                }
                                else
                                {
                                    cartFlip = true;
                                }
                            }

                            if (base.velocity.X > 0f)
                            {
                                base.direction = 1;
                            }
                            else if (base.velocity.X < 0f)
                            {
                                base.direction = -1;
                            }

                            Main.PlaySound(SoundID.Item56, (int) base.position.X + width / 2,
                                (int) base.position.Y + height / 2);
                        }

                        base.velocity /= num164;
                        if (bitsByte[3] && whoAmI == Main.myPlayer)
                        {
                            flag29 = true;
                        }

                        if (bitsByte[2])
                        {
                            cartRampTime = (int) (Math.Abs(base.velocity.X) / mount.RunSpeed * 20f);
                        }

                        if (bitsByte[4])
                        {
                            trackBoost -= 4f;
                        }

                        if (bitsByte[5])
                        {
                            trackBoost += 4f;
                        }
                    }

                    var flag30 = whoAmI == Main.myPlayer && !mount.Active;
                    var position = base.position;
                    if (vortexDebuff)
                    {
                        base.velocity.Y = base.velocity.Y * 0.8f +
                                          (float) Math.Cos((double) (base.Center.X % 120f / 120f * 6.28318548f)) * 5f *
                                          0.2f;
                    }

                    if (tongued)
                    {
                        base.position += base.velocity;
                        flag30 = false;
                    }
                    else if (honeyWet && !ignoreWater)
                    {
                        HoneyCollision(fallThrough, ignorePlats);
                    }
                    else if (wet && !merman && !ignoreWater)
                    {
                        WaterCollision(fallThrough, ignorePlats);
                    }
                    else
                    {
                        DryCollision(fallThrough, ignorePlats);
                        if (mount.Active && mount.Type == 3 && base.velocity.Y != 0f && !SlimeDontHyperJump)
                        {
                            var velocity2 = base.velocity;
                            base.velocity.X = 0f;
                            DryCollision(fallThrough, ignorePlats);
                            base.velocity.X = velocity2.X;
                        }
                    }

                    UpdateTouchingTiles();
                    TryBouncingBlocks(falling);
                    TryLandingOnDetonator();
                    SlopingCollision(fallThrough);
                    Collision.StepConveyorBelt(this, gravDir);
                    if (flag30 && base.velocity.Y == 0f)
                    {
                        AchievementsHelper.HandleRunning(Math.Abs(base.position.X - position.X));
                    }

                    if (flag29)
                    {
                        NetMessage.SendData(13, -1, -1, null, whoAmI, 0f, 0f, 0f, 0, 0, 0);
                        Minecart.HitTrackSwitch(new Vector2(base.position.X, base.position.Y), width, height);
                    }

                    if (velocity.X != base.velocity.X)
                    {
                        if (velocity.X < 0f)
                        {
                            slideDir = -1;
                        }
                        else if (velocity.X > 0f)
                        {
                            slideDir = 1;
                        }
                    }

                    if (gravDir == 1f && Collision.up)
                    {
                        base.velocity.Y = 0.01f;
                        if (!merman)
                        {
                            jump = 0;
                        }
                    }
                    else if (gravDir == -1f && Collision.down)
                    {
                        base.velocity.Y = -0.01f;
                        if (!merman)
                        {
                            jump = 0;
                        }
                    }

                    if (base.velocity.Y == 0f && grappling[0] == -1)
                    {
                        FloorVisuals(falling);
                    }

                    if (whoAmI == Main.myPlayer)
                    {
                        Collision.SwitchTiles(base.position, width, height, oldPosition, 1);
                    }

                    PressurePlateHelper.UpdatePlayerPosition(this);
                    BordersMovement();
                    numMinions = 0;
                    slotsMinions = 0f;
                    ItemCheck_ManageRightClickFeatures();
                    ItemCheckWrapped(i);
                    PlayerFrame();
                    if (mount.Type == 8)
                    {
                        mount.UseDrill(this);
                    }

                    if (statLife > statLifeMax2)
                    {
                        statLife = statLifeMax2;
                    }

                    if (statMana > statManaMax2)
                    {
                        statMana = statManaMax2;
                    }

                    grappling[0] = -1;
                    grapCount = 0;
                    releaseUseTile = !tileInteractAttempted;
                }
            }
        }


        private void UpdateArmorLights()
        {
            if (this.vortexStealthActive)
                return;
            var num1 = 0.0f;
            var num2 = 0.0f;
            var num3 = 0.0f;
            switch (this.head)
            {
                case 11:
                    num1 = 0.92f;
                    num2 = 0.8f;
                    num3 = 0.65f;
                    break;
                case 169:
                    num1 = 0.0f;
                    num2 = 0.36f;
                    num3 = 0.4f;
                    break;
                case 170:
                    num1 = 0.4f;
                    num2 = 0.16f;
                    num3 = 0.36f;
                    break;
                case 171:
                    num1 = 0.5f;
                    num2 = 0.25f;
                    num3 = 0.05f;
                    break;
                case 178:
                    num1 = 0.1f;
                    num2 = 0.2f;
                    num3 = 0.3f;
                    break;
                case 189:
                    num1 = 0.9f;
                    num2 = 0.9f;
                    num3 = 0.7f;
                    break;
                case 211:
                    num1 = 0.2f;
                    num2 = 0.4f;
                    num3 = 0.8f;
                    break;
            }

            var num4 = 0.0f;
            var num5 = 0.0f;
            var num6 = 0.0f;
            switch (this.body)
            {
                case 175:
                    num4 = 0.0f;
                    num5 = 0.36f;
                    num6 = 0.4f;
                    break;
                case 176:
                    num4 = 0.4f;
                    num5 = 0.16f;
                    num6 = 0.36f;
                    break;
                case 177:
                    num4 = 0.5f;
                    num5 = 0.25f;
                    num6 = 0.05f;
                    break;
                case 190:
                    num1 = 0.9f;
                    num2 = 0.9f;
                    num3 = 0.7f;
                    break;
                case 205:
                    num4 = 0.2f;
                    num5 = 0.4f;
                    num6 = 0.8f;
                    break;
            }

            var num7 = 0.0f;
            var num8 = 0.0f;
            var num9 = 0.0f;
            switch (this.legs)
            {
                case 110:
                    num7 = 0.0f;
                    num8 = 0.36f;
                    num9 = 0.4f;
                    break;
                case 111:
                    num7 = 0.4f;
                    num8 = 0.16f;
                    num9 = 0.36f;
                    break;
                case 112:
                    num7 = 0.5f;
                    num8 = 0.25f;
                    num9 = 0.05f;
                    break;
                case 130:
                    num1 = 0.9f;
                    num2 = 0.9f;
                    num3 = 0.7f;
                    break;
            }

            if ((double) num1 != 0.0 || (double) num2 != 0.0 || (double) num3 != 0.0)
            {
                var num10 = 1f;
                if ((double) num1 == (double) num4 && (double) num2 == (double) num5 && (double) num3 == (double) num6)
                    num10 += 0.5f;
                if ((double) num1 == (double) num7 && (double) num2 == (double) num8 && (double) num3 == (double) num9)
                    num10 += 0.5f;
                var spinningpoint = new Vector2((float) (this.width / 2 + 8 * this.direction), 2f);
                if ((double) this.fullRotation != 0.0)
                    spinningpoint = spinningpoint.RotatedBy((double) this.fullRotation, this.fullRotationOrigin);
                Lighting.AddLight((int) ((double) this.position.X + (double) spinningpoint.X) / 16,
                    (int) ((double) this.position.Y + (double) spinningpoint.Y) / 16, num1 * num10, num2 * num10,
                    num3 * num10);
            }

            if ((double) num4 != 0.0 || (double) num5 != 0.0 || (double) num6 != 0.0)
            {
                var num10 = 1f;
                if ((double) num4 == (double) num1 && (double) num5 == (double) num2 && (double) num6 == (double) num3)
                    num10 += 0.5f;
                if ((double) num4 == (double) num7 && (double) num5 == (double) num8 && (double) num6 == (double) num9)
                    num10 += 0.5f;
                var spinningpoint = new Vector2((float) (this.width / 2 + 8), (float) (this.height / 2));
                if ((double) this.fullRotation != 0.0)
                    spinningpoint = spinningpoint.RotatedBy((double) this.fullRotation, this.fullRotationOrigin);
                Lighting.AddLight((int) ((double) this.position.X + (double) spinningpoint.X) / 16,
                    (int) ((double) this.position.Y + (double) spinningpoint.Y) / 16, num4 * num10, num5 * num10,
                    num6 * num10);
            }

            if ((double) num7 == 0.0 && (double) num8 == 0.0 && (double) num9 == 0.0)
                return;
            var num11 = 1f;
            if ((double) num7 == (double) num4 && (double) num8 == (double) num5 && (double) num9 == (double) num6)
                num11 += 0.5f;
            if ((double) num7 == (double) num1 && (double) num8 == (double) num2 && (double) num9 == (double) num3)
                num11 += 0.5f;
            var spinningpoint1 =
                new Vector2((float) (this.width / 2 + 8 * this.direction), (float) this.height * 0.75f);
            if ((double) this.fullRotation != 0.0)
                spinningpoint1 = spinningpoint1.RotatedBy((double) this.fullRotation, this.fullRotationOrigin);
            Lighting.AddLight((int) ((double) this.position.X + (double) spinningpoint1.X) / 16,
                (int) ((double) this.position.Y + (double) spinningpoint1.Y) / 16, num7 * num11, num8 * num11,
                num9 * num11);
        }

        private void Update_NPCCollision()
        {
            var rectangle =
                new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width,
                    this.height);
            for (var index = 0; index < 200; ++index)
            {
                if (Main.npc[index].active && !Main.npc[index].friendly && Main.npc[index].damage > 0)
                {
                    var specialHitSetter = -1;
                    switch (Main.npc[index].type)
                    {
                        case 396:
                        case 397:
                        case 398:
                        case 400:
                        case 401:
                            specialHitSetter = 1;
                            break;
                    }

                    if ((specialHitSetter != -1 || !this.immune) &&
                        (this.dash != 2 || index != this.eocHit || this.eocDash <= 0) &&
                        !this.npcTypeNoAggro[Main.npc[index].type])
                    {
                        var damageMultiplier = 1f;
                        var npcRect =
                            new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].position.X,
                                (int) Main.npc[index].position.Y, Main.npc[index].width, Main.npc[index].height);
                        NPC.GetMeleeCollisionData(rectangle, index, ref specialHitSetter, ref damageMultiplier,
                            ref npcRect);
                        if (rectangle.Intersects(npcRect) && !this.npcTypeNoAggro[Main.npc[index].type])
                        {
                            var flag1 = true;
                            var flag2 = false;
                            var flag3 = this.CanParryAgainst(rectangle, npcRect, Main.npc[index].velocity);
                            var num = this.thorns;
                            var knockback = 10f;
                            if (this.turtleThorns)
                                num = 1f;
                            if (flag3)
                            {
                                num = 2f;
                                knockback = 5f;
                                flag1 = false;
                                flag2 = true;
                            }

                            var hitDirection = -1;
                            if ((double) Main.npc[index].position.X + (double) (Main.npc[index].width / 2) <
                                (double) this.position.X + (double) (this.width / 2))
                                hitDirection = 1;
                            var Damage = Main.DamageVar((float) Main.npc[index].damage * damageMultiplier);
                            var banner = Item.NPCtoBanner(Main.npc[index].BannerID());
                            if (banner > 0 && this.NPCBannerBuff[banner])
                                Damage = !Main.expertMode
                                    ? (int) ((double) Damage * (double) ItemID.Sets
                                                 .BannerStrength[Item.BannerToItem(banner)].NormalDamageReceived)
                                    : (int) ((double) Damage * (double) ItemID.Sets
                                                 .BannerStrength[Item.BannerToItem(banner)].ExpertDamageReceived);
                            if (this.whoAmI == Main.myPlayer && (double) num > 0.0 &&
                                (!this.immune && !Main.npc[index].dontTakeDamage))
                            {
                                var damage = (int) ((double) Damage * (double) num);
                                this.ApplyDamageToNPC(Main.npc[index], damage, knockback, -hitDirection, false);
                            }

                            if (this.resistCold && Main.npc[index].coldDamage)
                                Damage = (int) ((double) Damage * 0.699999988079071);
                            if (!this.immune && !flag2)
                                this.StatusPlayer(Main.npc[index]);
                            if (flag1)
                                this.Hurt(PlayerDeathReason.ByNPC(index), Damage, hitDirection, false, false, false,
                                    specialHitSetter);
                            if (flag3)
                            {
                                this.immune = true;
                                this.immuneNoBlink = true;
                                this.immuneTime = 30;
                                if (this.longInvince)
                                    this.immuneTime = 60;
                                this.AddBuff(198, 300, false);
                            }
                        }
                    }
                }
            }
        }

        public bool CanParryAgainst(Microsoft.Xna.Framework.Rectangle blockingPlayerRect,
            Microsoft.Xna.Framework.Rectangle enemyRect, Vector2 enemyVelocity)
        {
            if (this.shieldParryTimeLeft > 0 &&
                Math.Sign(enemyRect.Center.X - blockingPlayerRect.Center.X) == this.direction &&
                enemyVelocity != Vector2.Zero)
                return !this.immune;
            return false;
        }

        private void PurgeDD2EnergyCrystals()
        {
            if (this.trashItem.type == 3822)
                this.trashItem.TurnToAir();
            for (var index = 0; index < 58; ++index)
            {
                var obj = this.inventory[index];
                if (obj.stack > 0 && obj.type == 3822)
                    obj.TurnToAir();
            }

            if (this.chest == -2)
            {
                var bank = this.bank;
                for (var index = 0; index < 40; ++index)
                {
                    if (bank.item[index].stack > 0 && bank.item[index].type == 3822)
                        bank.item[index].TurnToAir();
                }
            }

            if (this.chest == -4)
            {
                var bank3 = this.bank3;
                for (var index = 0; index < 40; ++index)
                {
                    if (bank3.item[index].stack > 0 && bank3.item[index].type == 3822)
                        bank3.item[index].TurnToAir();
                }
            }

            if (this.chest == -3)
            {
                var bank2 = this.bank2;
                for (var index = 0; index < 40; ++index)
                {
                    if (bank2.item[index].stack > 0 && bank2.item[index].type == 3822)
                        bank2.item[index].TurnToAir();
                }
            }

            if (this.chest <= -1)
                return;
            var chest = Main.chest[this.chest];
            for (var index = 0; index < 40; ++index)
            {
                if (chest.item[index].stack > 0 && chest.item[index].type == 3822)
                {
                    chest.item[index].TurnToAir();
                    if (Main.netMode == 1)
                        NetMessage.SendData(32, -1, -1, (NetworkText) null, this.chest, (float) index, 0.0f, 0.0f, 0, 0,
                            0);
                }
            }
        }

        public void ItemCheck_ManageRightClickFeatures()
        {
            var theGeneralCheck = this.selectedItem != 58 && this.controlUseTile &&
                                   (!this.tileInteractionHappened && this.releaseUseItem) &&
                                   (!this.controlUseItem && !this.mouseInterface &&
                                    (!CaptureManager.Instance.Active && !Main.HoveringOverAnNPC)) &&
                                   !Main.SmartInteractShowingGenuine;
            if (theGeneralCheck && this.altFunctionUse == 0 && this.inventory[this.selectedItem].type == 3384)
            {
                this.altFunctionUse = 1;
                this.controlUseItem = true;
            }

            if (theGeneralCheck && this.altFunctionUse == 0 && this.inventory[this.selectedItem].type == 3858)
            {
                this.altFunctionUse = 1;
                this.controlUseItem = true;
            }

            if (theGeneralCheck && this.altFunctionUse == 0 &&
                (this.inventory[this.selectedItem].type == 3852 && this.itemAnimation == 0) &&
                this.CheckMana(20, true, false))
            {
                this.altFunctionUse = 1;
                this.controlUseItem = true;
            }

            if (theGeneralCheck && this.altFunctionUse == 0 &&
                (this.inventory[this.selectedItem].shoot > 0 &&
                 ProjectileID.Sets.TurretFeature[this.inventory[this.selectedItem].shoot]))
            {
                this.altFunctionUse = 1;
                this.controlUseItem = true;
            }

            if (theGeneralCheck && this.altFunctionUse == 0 &&
                (this.inventory[this.selectedItem].shoot > 0 &&
                 ProjectileID.Sets.MinionTargettingFeature[this.inventory[this.selectedItem].shoot]))
            {
                this.altFunctionUse = 1;
                this.controlUseItem = true;
            }

            if (!this.controlUseItem && this.altFunctionUse == 1)
                this.altFunctionUse = 0;
            this.ItemCheck_ManageRightClickFeatures_ShieldRaise(theGeneralCheck);
        }

        public void ItemCheck_ManageRightClickFeatures_ShieldRaise(bool theGeneralCheck)
        {
            var flag = false;
            if (theGeneralCheck && this.inventory[this.selectedItem].type == 3823 &&
                (this.hasRaisableShield && !this.mount.Active) &&
                (this.itemAnimation == 0 || PlayerInput.Triggers.JustPressed.MouseRight))
                flag = true;
            if (this.shield_parry_cooldown > 0)
            {
                --this.shield_parry_cooldown;
                if (this.shield_parry_cooldown == 0)
                {
                    Main.PlaySound(25, -1, -1, 1, 1f, 0.0f);
                    for (var index1 = 0; index1 < 10; ++index1)
                    {
                        var index2 = Dust.NewDust(
                            this.Center + new Vector2((float) (this.direction * 6 + (this.direction == -1 ? -10 : 0)),
                                -14f), 10, 16, 45, 0.0f, 0.0f, (int) byte.MaxValue,
                            new Color((int) byte.MaxValue, 100, 0, (int) sbyte.MaxValue),
                            (float) Main.rand.Next(10, 16) * 0.1f);
                        Main.dust[index2].noLight = true;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 0.5f;
                    }
                }
            }

            if (this.shieldParryTimeLeft > 0 && ++this.shieldParryTimeLeft > 20)
                this.shieldParryTimeLeft = 0;
            if (flag != this.shieldRaised)
            {
                this.shieldRaised = flag;
                if (this.shieldRaised)
                {
                    if (this.shield_parry_cooldown == 0)
                        this.shieldParryTimeLeft = 1;
                    this.itemAnimation = 0;
                    this.itemTime = 0;
                    this.reuseDelay = 0;
                }
                else
                {
                    this.shield_parry_cooldown = 15;
                    this.shieldParryTimeLeft = 0;
                    if (this.attackCD < 20)
                        this.attackCD = 20;
                }
            }

            var num = this.shieldRaised ? 1 : 0;
        }

        private void HandleHotbar()
        {
            var num = PlayerInput.Triggers.Current.HotbarPlus.ToInt() -
                      PlayerInput.Triggers.Current.HotbarMinus.ToInt();
            if (PlayerInput.CurrentProfile.HotbarAllowsRadial && num != 0 &&
                (PlayerInput.Triggers.Current.HotbarHoldTime >
                 PlayerInput.CurrentProfile.HotbarRadialHoldTimeRequired &&
                 PlayerInput.CurrentProfile.HotbarRadialHoldTimeRequired != -1))
            {
                PlayerInput.MiscSettingsTEMP.HotbarRadialShouldBeUsed = true;
                PlayerInput.Triggers.Current.HotbarScrollCD = 2;
            }

            if (PlayerInput.CurrentProfile.HotbarRadialHoldTimeRequired != -1)
            {
                num = PlayerInput.Triggers.JustReleased.HotbarPlus.ToInt() -
                      PlayerInput.Triggers.JustReleased.HotbarMinus.ToInt();
                if (PlayerInput.Triggers.Current.HotbarScrollCD == 1 && num != 0)
                    num = 0;
            }

            if (PlayerInput.Triggers.Current.HotbarScrollCD == 0 && num != 0)
            {
                this.HotbarOffset += num;
                PlayerInput.Triggers.Current.HotbarScrollCD = 8;
            }

            if (!Main.inFancyUI && !Main.ingameOptionsWindow)
                this.HotbarOffset += PlayerInput.ScrollWheelDelta / -120;
            this.ScrollHotbar(this.HotbarOffset);
            this.HotbarOffset = 0;
        }

        private void ItemCheckWrapped(int i)
        {
            LockOnHelper.SetUP();
            var stack = this.inventory[this.selectedItem].stack;
            if (Main.ignoreErrors)
            {
                try
                {
                    this.ItemCheck(i);
                }
                catch
                {
                }
            }
            else
                this.ItemCheck(i);

            if (stack != this.inventory[this.selectedItem].stack)
                Recipe.FindRecipes();
            LockOnHelper.SetDOWN();
        }

        public void ScrollHotbar(int Offset)
        {
            while (Offset > 9)
                Offset -= 10;
            while (Offset < 0)
                Offset += 10;
            this.selectedItem += Offset;
            if (Offset != 0)
            {
                Main.PlaySound(12, -1, -1, 1, 1f, 0.0f);
                var num = this.selectedItem - Offset;
                this.DpadRadial.ChangeSelection(-1);
                this.CircularRadial.ChangeSelection(-1);
                this.selectedItem = num + Offset;
                this.nonTorch = -1;
            }

            if (this.changeItem >= 0)
            {
                if (this.selectedItem != this.changeItem)
                    Main.PlaySound(12, -1, -1, 1, 1f, 0.0f);
                this.selectedItem = this.changeItem;
                this.changeItem = -1;
            }

            if (this.itemAnimation != 0 || this.selectedItem == 58)
                return;
            while (this.selectedItem > 9)
                this.selectedItem -= 10;
            while (this.selectedItem < 0)
                this.selectedItem += 10;
        }

        private void OldInput()
        {
            var flag1 = false;
            var flag2 = false;
            var pressedKeys = Main.keyState.GetPressedKeys();
            for (var index = 0; index < pressedKeys.Length; ++index)
            {
                if (pressedKeys[index] == Keys.LeftShift || pressedKeys[index] == Keys.RightShift)
                    flag1 = true;
                else if (pressedKeys[index] == Keys.LeftAlt || pressedKeys[index] == Keys.RightAlt)
                    flag2 = true;
            }

            if (Main.blockKey != Keys.None.ToString())
            {
                var flag3 = false;
                for (var index = 0; index < pressedKeys.Length; ++index)
                {
                    if (pressedKeys[index].ToString() == Main.blockKey)
                    {
                        pressedKeys[index] = Keys.None;
                        flag3 = true;
                    }
                }

                if (!flag3)
                    Main.blockKey = Keys.None.ToString();
            }

            for (var index = 0; index < pressedKeys.Length; ++index)
            {
                var str = string.Concat((object) pressedKeys[index]);
                if (pressedKeys[index] != Keys.Tab || (!flag1 || SocialAPI.Mode != SocialMode.Steam) && !flag2)
                {
                    if (str == Main.cUp)
                        this.controlUp = true;
                    if (str == Main.cLeft)
                        this.controlLeft = true;
                    if (str == Main.cDown)
                        this.controlDown = true;
                    if (str == Main.cRight)
                        this.controlRight = true;
                    if (str == Main.cJump)
                        this.controlJump = true;
                    if (str == Main.cThrowItem)
                        this.controlThrow = true;
                    if (str == Main.cInv)
                        this.controlInv = true;
                    if (str == Main.cBuff)
                        this.QuickBuff();
                    if (str == Main.cHeal)
                        this.controlQuickHeal = true;
                    if (str == Main.cMana)
                        this.controlQuickMana = true;
                    if (str == Main.cHook)
                        this.controlHook = true;
                    if (str == Main.cTorch)
                        this.controlTorch = true;
                    if (str == Main.cSmart)
                        this.controlSmart = true;
                    if (str == Main.cMount)
                        this.controlMount = true;
                    if (Main.mapEnabled)
                    {
                        if (str == Main.cMapZoomIn)
                            this.mapZoomIn = true;
                        if (str == Main.cMapZoomOut)
                            this.mapZoomOut = true;
                        if (str == Main.cMapAlphaUp)
                            this.mapAlphaUp = true;
                        if (str == Main.cMapAlphaDown)
                            this.mapAlphaDown = true;
                        if (str == Main.cMapFull)
                            this.mapFullScreen = true;
                        if (str == Main.cMapStyle)
                            this.mapStyle = true;
                    }
                }
            }

            if (Main.gamePad)
            {
                var state = GamePad.GetState(PlayerIndex.One);
                if (state.DPad.Up == ButtonState.Pressed)
                    this.controlUp = true;
                if (state.DPad.Down == ButtonState.Pressed)
                    this.controlDown = true;
                if (state.DPad.Left == ButtonState.Pressed)
                    this.controlLeft = true;
                if (state.DPad.Right == ButtonState.Pressed)
                    this.controlRight = true;
                if ((double) state.Triggers.Left > 0.0)
                    this.controlJump = true;
                if ((double) state.Triggers.Right > 0.0)
                    this.controlUseItem = true;
                Main.mouseX = (int) ((double) (Main.screenWidth / 2) +
                                     (double) state.ThumbSticks.Right.X * (double) Player.tileRangeX * 16.0);
                Main.mouseY = (int) ((double) (Main.screenHeight / 2) -
                                     (double) state.ThumbSticks.Right.Y * (double) Player.tileRangeX * 16.0);
                if ((double) state.ThumbSticks.Right.X == 0.0)
                    Main.mouseX = Main.screenWidth / 2 + this.direction * 2;
            }

            if (Main.mouseLeft)
            {
                if (!Main.blockMouse && !this.mouseInterface)
                    this.controlUseItem = true;
            }
            else
                Main.blockMouse = false;

            if (!Main.mouseRight || this.mouseInterface || Main.blockMouse)
                return;
            this.controlUseTile = true;
        }

        private void LookForTileInteractions()
        {
            if (Main.mapFullscreen)
                return;
            var myX = Player.tileTargetX;
            var myY = Player.tileTargetY;
            if (Main.SmartInteractShowingGenuine && Main.SmartInteractNPC == -1)
            {
                myX = Main.SmartInteractX;
                myY = Main.SmartInteractY;
            }

            var flag = this.controlUseTile;
            if (PlayerInput.UsingGamepad && Main.HoveringOverAnNPC)
                flag = false;
            if (this.releaseUseTile)
                this.tileInteractionHappened = false;
            this.tileInteractAttempted = flag;
            if ((double) this.position.X / 16.0 - (double) Player.tileRangeX <= (double) myX &&
                ((double) this.position.X + (double) this.width) / 16.0 + (double) Player.tileRangeX - 1.0 >=
                (double) myX && ((double) this.position.Y / 16.0 - (double) Player.tileRangeY <= (double) myY &&
                                 ((double) this.position.Y + (double) this.height) / 16.0 + (double) Player.tileRangeY -
                                 2.0 >= (double) myY))
            {
                this.TileInteractionsCheckLongDistance(Player.tileTargetX, Player.tileTargetY);
                this.TileInteractionsCheck(myX, myY);
            }
            else
                this.TileInteractionsCheckLongDistance(myX, myY);
        }

        public void TileInteractionsCheck(int myX, int myY)
        {
            if (Main.tile[myX, myY] == null)
                Main.tile[myX, myY] = new Tile();
            if (!Main.tile[myX, myY].active())
                return;
            this.TileInteractionsMouseOver(myX, myY);
            this.TileInteractionsUse(myX, myY);
        }

        private void TileInteractionsCheckLongDistance(int myX, int myY)
        {
            if (Main.tile[myX, myY] == null)
                Main.tile[myX, myY] = new Tile();
            if (Main.tile[myX, myY].type == (ushort) 21)
            {
                this.TileInteractionsMouseOver_Containers(myX, myY);
                if (this.showItemIconText == "")
                {
                    this.showItemIcon = false;
                    this.showItemIcon2 = 0;
                }
            }

            if (Main.tile[myX, myY].type == (ushort) 88)
            {
                var tile = Main.tile[myX, myY];
                var num = myX;
                var Y = myY;
                var X = num - (int) tile.frameX % 54 / 18;
                if ((int) tile.frameY % 36 != 0)
                    --Y;
                var chest = Chest.FindChest(X, Y);
                this.showItemIcon2 = -1;
                if (chest < 0)
                {
                    this.showItemIconText = Lang.dresserType[0].Value;
                }
                else
                {
                    this.showItemIconText = !(Main.chest[chest].name != "")
                        ? Lang.dresserType[(int) tile.frameX / 54].Value
                        : Main.chest[chest].name;
                    if (this.showItemIconText == Lang.dresserType[(int) tile.frameX / 54].Value)
                    {
                        this.showItemIcon2 = Chest.dresserTypeToIcon[(int) tile.frameX / 54];
                        this.showItemIconText = "";
                    }
                }

                this.noThrow = 2;
                this.showItemIcon = true;
                if (this.showItemIconText == "")
                {
                    this.showItemIcon = false;
                    this.showItemIcon2 = 0;
                }
            }

            if (!Main.tileSign[(int) Main.tile[myX, myY].type])
                return;
            this.noThrow = 2;
            var num1 = (int) Main.tile[myX, myY].frameX / 18;
            var num2 = (int) Main.tile[myX, myY].frameY / 18;
            var num3 = num1 % 2;
            var i = myX - num3;
            var j = myY - num2;
            Main.signBubble = true;
            Main.signX = i * 16 + 16;
            Main.signY = j * 16;
            var num4 = Sign.ReadSign(i, j, true);
            if (num4 == -1)
                return;
            Main.signHover = num4;
            this.showItemIcon = false;
            this.showItemIcon2 = -1;
        }

        private void TileInteractionsUse(int myX, int myY)
        {
            if (WiresUI.Open || this.ownedProjectileCounts[651] > 0)
                return;
            var releaseUseTile = this.releaseUseTile;
            if (!this.tileInteractAttempted)
                return;
            var flag1 = false;
            if (Main.tile[myX, myY].type == (ushort) 212 && this.launcherWait <= 0)
            {
                var index1 = myX;
                var index2 = myY;
                var flag2 = false;
                for (var index3 = 0; index3 < 58; ++index3)
                {
                    if (this.inventory[index3].type == 949 && this.inventory[index3].stack > 0)
                    {
                        --this.inventory[index3].stack;
                        if (this.inventory[index3].stack <= 0)
                            this.inventory[index3].SetDefaults(0, false);
                        flag2 = true;
                        break;
                    }
                }

                if (flag2)
                {
                    flag1 = true;
                    this.launcherWait = 10;
                    Main.PlaySound(SoundID.Item11, this.position);
                    var num1 = (int) Main.tile[index1, index2].frameX / 18;
                    var num2 = 0;
                    while (num1 >= 3)
                    {
                        ++num2;
                        num1 -= 3;
                    }

                    var num3 = index1 - num1;
                    var num4 = (int) Main.tile[index1, index2].frameY / 18;
                    while (num4 >= 3)
                        num4 -= 3;
                    var num5 = index2 - num4;
                    var num6 = (float) (12.0 + (double) Main.rand.Next(450) * 0.00999999977648258);
                    var num7 = (float) Main.rand.Next(85, 105);
                    var num8 = (float) Main.rand.Next(-35, 11);
                    var Type = 166;
                    var Damage = 35;
                    var KnockBack = 3.5f;
                    var vector2 = new Vector2((float) ((num3 + 2) * 16 - 8), (float) ((num5 + 2) * 16 - 8));
                    if (num2 == 0)
                    {
                        num7 *= -1f;
                        vector2.X -= 12f;
                    }
                    else
                        vector2.X += 12f;

                    var num9 = num7;
                    var num10 = num8;
                    var num11 = (float) Math.Sqrt((double) num9 * (double) num9 + (double) num10 * (double) num10);
                    var num12 = num6 / num11;
                    var SpeedX = num9 * num12;
                    var SpeedY = num10 * num12;
                    Projectile.NewProjectile(vector2.X, vector2.Y, SpeedX, SpeedY, Type, Damage, KnockBack,
                        Main.myPlayer, 0.0f, 0.0f);
                }
            }

            if (releaseUseTile)
            {
                if (Main.tile[myX, myY].type == (ushort) 132 || Main.tile[myX, myY].type == (ushort) 136 ||
                    Main.tile[myX, myY].type == (ushort) 144)
                {
                    flag1 = true;
                    Wiring.HitSwitch(myX, myY);
                    NetMessage.SendData(59, -1, -1, (NetworkText) null, myX, (float) myY, 0.0f, 0.0f, 0, 0, 0);
                }
                else if (Main.tile[myX, myY].type == (ushort) 441 || Main.tile[myX, myY].type == (ushort) 468)
                {
                    flag1 = true;
                    var num1 = (int) Main.tile[myX, myY].frameX / 18;
                    while (num1 > 1)
                        num1 -= 2;
                    var num2 = myX - num1;
                    var num3 = myY - (int) Main.tile[myX, myY].frameY / 18;
                    Animation.NewTemporaryAnimation(2, Main.tile[myX, myY].type, num2, num3);
                    NetMessage.SendTemporaryAnimation(-1, 2, (int) Main.tile[myX, myY].type, num2, num3);
                    Wiring.HitSwitch(myX, myY);
                    NetMessage.SendData(59, -1, -1, (NetworkText) null, myX, (float) myY, 0.0f, 0.0f, 0, 0, 0);
                }
                else if (Main.tile[myX, myY].type == (ushort) 139)
                {
                    flag1 = true;
                    Main.PlaySound(28, myX * 16, myY * 16, 0, 1f, 0.0f);
                    WorldGen.SwitchMB(myX, myY);
                }
                else if (Main.tile[myX, myY].type == (ushort) 215)
                {
                    flag1 = true;
                    Main.PlaySound(28, myX * 16, myY * 16, 0, 1f, 0.0f);
                    var num1 = (int) Main.tile[myX, myY].frameX % 54 / 18;
                    var num2 = (int) Main.tile[myX, myY].frameY % 36 / 18;
                    var index1 = myX - num1;
                    var index2 = myY - num2;
                    var num3 = 36;
                    if (Main.tile[index1, index2].frameY >= (short) 36)
                        num3 = -36;
                    for (var index3 = index1; index3 < index1 + 3; ++index3)
                    {
                        for (var index4 = index2; index4 < index2 + 2; ++index4)
                            Main.tile[index3, index4].frameY += (short) num3;
                    }

                    NetMessage.SendTileSquare(-1, index1 + 1, index2 + 1, 3, TileChangeType.None);
                }
                else if (Main.tile[myX, myY].type == (ushort) 207)
                {
                    flag1 = true;
                    Main.PlaySound(28, myX * 16, myY * 16, 0, 1f, 0.0f);
                    WorldGen.SwitchFountain(myX, myY);
                }
                else if (Main.tile[myX, myY].type == (ushort) 410)
                {
                    flag1 = true;
                    Main.PlaySound(28, myX * 16, myY * 16, 0, 1f, 0.0f);
                    this.GamepadEnableGrappleCooldown();
                    WorldGen.SwitchMonolith(myX, myY);
                }
                else if (Main.tile[myX, myY].type == (ushort) 455)
                {
                    flag1 = true;
                    Main.PlaySound(28, myX * 16, myY * 16, 0, 1f, 0.0f);
                    this.GamepadEnableGrappleCooldown();
                    BirthdayParty.ToggleManualParty();
                }
                else if (Main.tile[myX, myY].type == (ushort) 216)
                {
                    flag1 = true;
                    WorldGen.LaunchRocket(myX, myY);
                }
                else if (Main.tile[myX, myY].type == (ushort) 386 || Main.tile[myX, myY].type == (ushort) 387)
                {
                    flag1 = true;
                    var flag2 = Main.tile[myX, myY].type == (ushort) 387;
                    var num = WorldGen.ShiftTrapdoor(myX, myY, (double) (myY * 16) > (double) this.Center.Y, -1)
                        .ToInt();
                    if (num == 0)
                        num = -WorldGen.ShiftTrapdoor(myX, myY, (double) (myY * 16) <= (double) this.Center.Y, -1)
                            .ToInt();
                    if (num != 0)
                        NetMessage.SendData(19, -1, -1, (NetworkText) null, 2 + flag2.ToInt(), (float) myX, (float) myY,
                            (float) (num * Math.Sign((float) (myY * 16) - this.Center.Y)), 0, 0, 0);
                }
                else if (Main.tile[myX, myY].type == (ushort) 388 || Main.tile[myX, myY].type == (ushort) 389)
                {
                    flag1 = true;
                    var closing = Main.tile[myX, myY].type == (ushort) 389;
                    WorldGen.ShiftTallGate(myX, myY, closing);
                    NetMessage.SendData(19, -1, -1, (NetworkText) null, 4 + closing.ToInt(), (float) myX, (float) myY,
                        0.0f, 0, 0, 0);
                }
                else if (Main.tile[myX, myY].type == (ushort) 335)
                {
                    flag1 = true;
                    WorldGen.LaunchRocketSmall(myX, myY);
                }
                else if (Main.tile[myX, myY].type == (ushort) 411 && Main.tile[myX, myY].frameX < (short) 36)
                {
                    flag1 = true;
                    Wiring.HitSwitch(myX, myY);
                    NetMessage.SendData(59, -1, -1, (NetworkText) null, myX, (float) myY, 0.0f, 0.0f, 0, 0, 0);
                }
                else if (Main.tile[myX, myY].type == (ushort) 338)
                {
                    flag1 = true;
                    var index1 = myX;
                    var index2 = myY;
                    if (Main.tile[index1, index2].frameY == (short) 18)
                        --index2;
                    var flag2 = false;
                    for (var index3 = 0; index3 < 1000; ++index3)
                    {
                        if (Main.projectile[index3].active && Main.projectile[index3].aiStyle == 73 &&
                            ((double) Main.projectile[index3].ai[0] == (double) index1 &&
                             (double) Main.projectile[index3].ai[1] == (double) index2))
                        {
                            flag2 = true;
                            break;
                        }
                    }

                    if (!flag2)
                        Projectile.NewProjectile((float) (index1 * 16 + 8), (float) (index2 * 16 + 2), 0.0f, 0.0f,
                            419 + Main.rand.Next(4), 0, 0.0f, this.whoAmI, (float) index1, (float) index2);
                }
                else if (Main.tile[myX, myY].type == (ushort) 4 || Main.tile[myX, myY].type == (ushort) 13 ||
                         (Main.tile[myX, myY].type == (ushort) 33 || Main.tile[myX, myY].type == (ushort) 49) ||
                         (Main.tile[myX, myY].type == (ushort) 50 && Main.tile[myX, myY].frameX == (short) 90 ||
                          Main.tile[myX, myY].type == (ushort) 174))
                {
                    flag1 = true;
                    WorldGen.KillTile(myX, myY, false, false, false);
                    this.GamepadEnableGrappleCooldown();
                    if (Main.netMode == 1)
                        NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) myX, (float) myY, 0.0f, 0, 0, 0);
                }
                else if (Main.tile[myX, myY].type == (ushort) 466)
                {
                    flag1 = true;
                    this.GamepadEnableGrappleCooldown();
                    var y = myY;
                    var tileSafely = Framing.GetTileSafely(myX, myY);
                    if (tileSafely.frameY == (short) 0)
                        y += 3;
                    if (tileSafely.frameY == (short) 18)
                        y += 2;
                    if (tileSafely.frameY == (short) 36)
                        ++y;
                    var flag2 = !DD2Event.Ongoing && !NPC.AnyNPCs(548) && !Main.pumpkinMoon && !Main.snowMoon;
                    if (flag2)
                        flag2 = this.HasItem(3828);
                    if (flag2)
                    {
                        flag2 = !DD2Event.WouldFailSpawningHere(myX, y);
                        if (!flag2)
                            DD2Event.FailureMessage(-1);
                    }

                    if (flag2)
                        flag2 = this.ConsumeItem(3828, true);
                    if (flag2)
                        DD2Event.SummonCrystal(myX, y);
                }
                else if (Main.tile[myX, myY].type == (ushort) 334)
                {
                    flag1 = true;
                    if (this.ItemFitsWeaponRack(this.inventory[this.selectedItem]))
                    {
                        this.GamepadEnableGrappleCooldown();
                        this.PlaceWeapon(myX, myY);
                    }
                    else
                    {
                        var num1 = myX;
                        var j = myY;
                        if (Main.tile[myX, myY].frameY == (short) 0)
                            ++j;
                        if (Main.tile[myX, myY].frameY == (short) 36)
                            --j;
                        var frameX = (int) Main.tile[myX, j].frameX;
                        var num2 = (int) Main.tile[myX, j].frameX;
                        var num3 = 0;
                        while (num2 >= 5000)
                        {
                            num2 -= 5000;
                            ++num3;
                        }

                        if (num3 != 0)
                            num2 = (num3 - 1) * 18;
                        var num4 = num2 % 54;
                        if (num4 == 18)
                        {
                            frameX = (int) Main.tile[myX - 1, j].frameX;
                            --num1;
                        }

                        if (num4 == 36)
                        {
                            frameX = (int) Main.tile[myX - 2, j].frameX;
                            var num5 = num1 - 2;
                        }

                        if (frameX >= 5000)
                        {
                            this.GamepadEnableGrappleCooldown();
                            WorldGen.KillTile(myX, j, true, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) myX, (float) j, 1f, 0, 0,
                                    0);
                        }
                    }
                }
                else if (Main.tile[myX, myY].type == (ushort) 440)
                {
                    flag1 = true;
                    var index = myX;
                    var j = myY;
                    var num1 = (int) Main.tile[index, j].frameX / 54;
                    var num2 = (int) Main.tile[index, j].frameY / 54;
                    var num3 = (int) Main.tile[index, j].frameX % 54 / 18;
                    var num4 = (int) Main.tile[index, j].frameY % 54 / 18;
                    var type = -1;
                    switch (num1)
                    {
                        case 0:
                            type = 1526;
                            break;
                        case 1:
                            type = 1524;
                            break;
                        case 2:
                            type = 1525;
                            break;
                        case 3:
                            type = 1523;
                            break;
                        case 4:
                            type = 1522;
                            break;
                        case 5:
                            type = 1527;
                            break;
                        case 6:
                            type = 3643;
                            break;
                    }

                    if (type != -1)
                    {
                        if (num2 == 0 && this.HasItem(type) && this.selectedItem != 58)
                        {
                            this.GamepadEnableGrappleCooldown();
                            if (Main.netMode != 1)
                            {
                                this.ConsumeItem(type, false);
                                WorldGen.ToggleGemLock(index, j, true);
                            }
                            else
                            {
                                this.ConsumeItem(type, false);
                                NetMessage.SendData(105, -1, -1, (NetworkText) null, index, (float) j, 1f, 0.0f, 0, 0,
                                    0);
                            }
                        }
                        else if (num2 == 1)
                        {
                            this.GamepadEnableGrappleCooldown();
                            if (Main.netMode != 1)
                                WorldGen.ToggleGemLock(index, j, false);
                            else
                                NetMessage.SendData(105, -1, -1, (NetworkText) null, index, (float) j, 0.0f, 0.0f, 0, 0,
                                    0);
                        }
                    }
                }
                else if (Main.tile[myX, myY].type == (ushort) 395)
                {
                    flag1 = true;
                    if (this.ItemFitsItemFrame(this.inventory[this.selectedItem]) &&
                        !this.inventory[this.selectedItem].favorited)
                    {
                        this.GamepadEnableGrappleCooldown();
                        this.PlaceItemInFrame(myX, myY);
                    }
                    else
                    {
                        var x = myX;
                        var index1 = myY;
                        if ((int) Main.tile[x, index1].frameX % 36 != 0)
                            --x;
                        if ((int) Main.tile[x, index1].frameY % 36 != 0)
                            --index1;
                        var index2 = TEItemFrame.Find(x, index1);
                        if (index2 != -1 && ((TEItemFrame) TileEntity.ByID[index2]).item.stack > 0)
                        {
                            this.GamepadEnableGrappleCooldown();
                            WorldGen.KillTile(myX, index1, true, false, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) myX, (float) index1, 1f,
                                    0, 0, 0);
                        }
                    }
                }
                else if (Main.tile[myX, myY].type == (ushort) 125)
                {
                    flag1 = true;
                    this.AddBuff(29, 36000, true);
                    Main.PlaySound(SoundID.Item4, this.position);
                }
                else if (Main.tile[myX, myY].type == (ushort) 377)
                {
                    flag1 = true;
                    this.AddBuff(159, 36000, true);
                    Main.PlaySound(SoundID.Item37, this.position);
                }
                else if (Main.tile[myX, myY].type == (ushort) 354)
                {
                    flag1 = true;
                    this.AddBuff(150, 36000, true);
                    Main.PlaySound(SoundID.Item4, this.position);
                }
                else if (Main.tile[myX, myY].type == (ushort) 287)
                {
                    flag1 = true;
                    this.AddBuff(93, 36000, true);
                    Main.PlaySound(7, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                }
                else if (Main.tile[myX, myY].type == (ushort) 356)
                {
                    flag1 = true;
                    if (!Main.fastForwardTime && (Main.netMode == 1 || Main.sundialCooldown == 0))
                    {
                        Main.Sundialing();
                        Main.PlaySound(SoundID.Item4, this.position);
                    }
                }
                else if (Main.tile[myX, myY].type == (ushort) 79)
                {
                    flag1 = true;
                    var num1 = myX;
                    var num2 = myY;
                    var num3 = num1 + (int) Main.tile[myX, myY].frameX / 18 * -1;
                    var x = Main.tile[myX, myY].frameX < (short) 72 ? num3 + 2 : num3 + 4 + 1;
                    var num4 = (int) Main.tile[myX, myY].frameY / 18;
                    var num5 = 0;
                    while (num4 > 1)
                    {
                        num4 -= 2;
                        ++num5;
                    }

                    var y = num2 - num4 + 2;
                    this.FindSpawn();
                    if (this.SpawnX == x && this.SpawnY == y)
                    {
                        this.RemoveSpawn();
                        Main.NewText(Language.GetTextValue("Game.SpawnPointRemoved"), byte.MaxValue, (byte) 240,
                            (byte) 20, false);
                    }
                    else if (Player.CheckSpawn(x, y))
                    {
                        this.ChangeSpawn(x, y);
                        Main.NewText(Language.GetTextValue("Game.SpawnPointSet"), byte.MaxValue, (byte) 240, (byte) 20,
                            false);
                    }
                }
                else if (Main.tileSign[(int) Main.tile[myX, myY].type])
                {
                    flag1 = true;
                    var flag2 = true;
                    if (this.sign >= 0 && Sign.ReadSign(myX, myY, true) == this.sign)
                    {
                        this.sign = -1;
                        Main.npcChatText = "";
                        Main.editSign = false;
                        Main.PlaySound(11, -1, -1, 1, 1f, 0.0f);
                        flag2 = false;
                    }

                    if (flag2)
                    {
                        if (Main.netMode == 0)
                        {
                            this.talkNPC = -1;
                            Main.npcChatCornerItem = 0;
                            Main.playerInventory = false;
                            Main.editSign = false;
                            Main.PlaySound(10, -1, -1, 1, 1f, 0.0f);
                            var index = Sign.ReadSign(myX, myY, true);
                            this.sign = index;
                            Main.npcChatText = Main.sign[index].text;
                        }
                        else
                        {
                            var num1 = (int) Main.tile[myX, myY].frameX / 18;
                            var num2 = (int) Main.tile[myX, myY].frameY / 18;
                            while (num1 > 1)
                                num1 -= 2;
                            var number = myX - num1;
                            var index = myY - num2;
                            if (Main.tileSign[(int) Main.tile[number, index].type])
                                NetMessage.SendData(46, -1, -1, (NetworkText) null, number, (float) index, 0.0f, 0.0f,
                                    0, 0, 0);
                        }
                    }
                }
                else if (Main.tile[myX, myY].type == (ushort) 104)
                {
                    flag1 = true;
                    var str1 = "AM";
                    var time = Main.time;
                    if (!Main.dayTime)
                        time += 54000.0;
                    var num1 = time / 86400.0 * 24.0 - 7.5 - 12.0;
                    if (num1 < 0.0)
                        num1 += 24.0;
                    if (num1 >= 12.0)
                        str1 = "PM";
                    var num2 = (int) num1;
                    var num3 = (double) (int) ((num1 - (double) num2) * 60.0);
                    var str2 = string.Concat((object) num3);
                    if (num3 < 10.0)
                        str2 = "0" + str2;
                    if (num2 > 12)
                        num2 -= 12;
                    if (num2 == 0)
                        num2 = 12;
                    Main.NewText(
                        Language.GetTextValue("Game.Time", (object) (num2.ToString() + ":" + str2 + " " + str1)),
                        byte.MaxValue, (byte) 240, (byte) 20, false);
                }
                else if (Main.tile[myX, myY].type == (ushort) 237)
                {
                    flag1 = true;
                    var flag2 = false;
                    if (!NPC.AnyNPCs(245) && Main.hardMode && NPC.downedPlantBoss)
                    {
                        for (var index = 0; index < 58; ++index)
                        {
                            if (this.inventory[index].type == 1293)
                            {
                                --this.inventory[index].stack;
                                if (this.inventory[index].stack <= 0)
                                    this.inventory[index].SetDefaults(0, false);
                                flag2 = true;
                                break;
                            }
                        }
                    }

                    if (flag2)
                    {
                        Main.PlaySound(15, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
                        if (Main.netMode != 1)
                            NPC.SpawnOnPlayer(this.whoAmI, 245);
                        else
                            NetMessage.SendData(61, -1, -1, (NetworkText) null, this.whoAmI, 245f, 0.0f, 0.0f, 0, 0, 0);
                    }
                }
                else if (Main.tile[myX, myY].type == (ushort) 10)
                {
                    flag1 = true;
                    var num1 = myX;
                    var num2 = myY;
                    if (WorldGen.IsLockedDoor(num1, num2))
                    {
                        var num3 = 1141;
                        for (var index = 0; index < 58; ++index)
                        {
                            if (this.inventory[index].type == num3 && this.inventory[index].stack > 0)
                            {
                                --this.inventory[index].stack;
                                if (this.inventory[index].stack <= 0)
                                    this.inventory[index] = new Item();
                                WorldGen.UnlockDoor(num1, num2);
                                if (Main.netMode == 1)
                                    NetMessage.SendData(52, -1, -1, (NetworkText) null, this.whoAmI, 2f, (float) num1,
                                        (float) num2, 0, 0, 0);
                            }
                        }
                    }
                    else
                    {
                        WorldGen.OpenDoor(myX, myY, this.direction);
                        NetMessage.SendData(19, -1, -1, (NetworkText) null, 0, (float) myX, (float) myY,
                            (float) this.direction, 0, 0, 0);
                    }
                }
                else if (Main.tile[myX, myY].type == (ushort) 11)
                {
                    flag1 = true;
                    if (WorldGen.CloseDoor(myX, myY, false))
                        NetMessage.SendData(19, -1, -1, (NetworkText) null, 1, (float) myX, (float) myY,
                            (float) this.direction, 0, 0, 0);
                }
                else if (Main.tile[myX, myY].type == (ushort) 88)
                {
                    flag1 = true;
                    if (Main.tile[myX, myY].frameY == (short) 0)
                    {
                        Main.CancelClothesWindow(true);
                        Main.mouseRightRelease = false;
                        var num1 = (int) Main.tile[myX, myY].frameX / 18 % 3;
                        var num2 = myX - num1;
                        var Y = myY - (int) Main.tile[myX, myY].frameY / 18;
                        if (this.sign > -1)
                        {
                            Main.PlaySound(11, -1, -1, 1, 1f, 0.0f);
                            this.sign = -1;
                            Main.editSign = false;
                            Main.npcChatText = string.Empty;
                        }

                        if (Main.editChest)
                        {
                            Main.PlaySound(12, -1, -1, 1, 1f, 0.0f);
                            Main.editChest = false;
                            Main.npcChatText = string.Empty;
                        }

                        if (this.editedChestName)
                        {
                            NetMessage.SendData(33, -1, -1, NetworkText.FromLiteral(Main.chest[this.chest].name),
                                this.chest, 1f, 0.0f, 0.0f, 0, 0, 0);
                            this.editedChestName = false;
                        }

                        if (Main.netMode == 1)
                        {
                            if (num2 == this.chestX && Y == this.chestY && this.chest != -1)
                            {
                                this.chest = -1;
                                Recipe.FindRecipes();
                                Main.PlaySound(11, -1, -1, 1, 1f, 0.0f);
                            }
                            else
                            {
                                NetMessage.SendData(31, -1, -1, (NetworkText) null, num2, (float) Y, 0.0f, 0.0f, 0, 0,
                                    0);
                                Main.stackSplit = 600;
                            }
                        }
                        else
                        {
                            this.flyingPigChest = -1;
                            var chest = Chest.FindChest(num2, Y);
                            if (chest != -1)
                            {
                                Main.stackSplit = 600;
                                if (chest == this.chest)
                                {
                                    this.chest = -1;
                                    Recipe.FindRecipes();
                                    Main.PlaySound(11, -1, -1, 1, 1f, 0.0f);
                                }
                                else if (chest != this.chest && this.chest == -1)
                                {
                                    this.chest = chest;
                                    Main.playerInventory = true;
                                    if (PlayerInput.GrappleAndInteractAreShared)
                                        PlayerInput.Triggers.JustPressed.Grapple = false;
                                    Main.recBigList = false;
                                    Main.PlaySound(10, -1, -1, 1, 1f, 0.0f);
                                    this.chestX = num2;
                                    this.chestY = Y;
                                }
                                else
                                {
                                    this.chest = chest;
                                    Main.playerInventory = true;
                                    if (PlayerInput.GrappleAndInteractAreShared)
                                        PlayerInput.Triggers.JustPressed.Grapple = false;
                                    Main.recBigList = false;
                                    Main.PlaySound(12, -1, -1, 1, 1f, 0.0f);
                                    this.chestX = num2;
                                    this.chestY = Y;
                                }

                                Recipe.FindRecipes();
                            }
                        }
                    }
                    else
                    {
                        Main.playerInventory = false;
                        this.chest = -1;
                        Recipe.FindRecipes();
                        Main.dresserX = myX;
                        Main.dresserY = myY;
                        Main.OpenClothesWindow();
                    }
                }
                else if (Main.tile[myX, myY].type == (ushort) 209)
                {
                    flag1 = true;
                    var tile = Main.tile[myX, myY];
                    var num1 = (int) tile.frameX % 72 / 18;
                    var num2 = (int) tile.frameY % 54 / 18;
                    var x = myX - num1;
                    var y = myY - num2;
                    var angle = (int) tile.frameY / 54;
                    var num3 = (int) tile.frameX / 72;
                    var num4 = -1;
                    if (num1 == 1 || num1 == 2)
                        num4 = num2;
                    var num5 = 0;
                    if (num1 == 3 || num1 == 2 && num3 != 3 && num3 != 4)
                        num5 = -54;
                    if (num1 == 0 || num1 == 1 && num3 != 3 && num3 != 4)
                        num5 = 54;
                    if (angle >= 8 && num5 > 0)
                        num5 = 0;
                    if (angle == 0 && num5 < 0)
                        num5 = 0;
                    var flag2 = false;
                    if (num5 != 0)
                    {
                        for (var index1 = x; index1 < x + 4; ++index1)
                        {
                            for (var index2 = y; index2 < y + 3; ++index2)
                                Main.tile[index1, index2].frameY += (short) num5;
                        }

                        flag2 = true;
                    }

                    if ((num3 == 3 || num3 == 4) && (num4 == 1 || num4 == 0))
                    {
                        var num6 = num3 == 3 ? 72 : -72;
                        for (var index1 = x; index1 < x + 4; ++index1)
                        {
                            for (var index2 = y; index2 < y + 3; ++index2)
                                Main.tile[index1, index2].frameX += (short) num6;
                        }

                        flag2 = true;
                    }

                    if (flag2)
                        NetMessage.SendTileSquare(-1, x + 1, y + 1, 4, TileChangeType.None);
                    if (num4 != -1)
                    {
                        var flag3 = false;
                        if ((num3 == 3 || num3 == 4) && num4 == 2)
                            flag3 = true;
                        if (flag3)
                            WorldGen.ShootFromCannon(x, y, angle, num3 + 1, 0, 0.0f, this.whoAmI);
                    }
                }
                else if ((TileID.Sets.BasicChest[(int) Main.tile[myX, myY].type] ||
                          Main.tile[myX, myY].type == (ushort) 29 ||
                          (Main.tile[myX, myY].type == (ushort) 97 || Main.tile[myX, myY].type == (ushort) 463)) &&
                         this.talkNPC == -1)
                {
                    flag1 = true;
                    Main.mouseRightRelease = false;
                    var num1 = 0;
                    var num2 = (int) Main.tile[myX, myY].frameX / 18;
                    while (num2 > 1)
                        num2 -= 2;
                    var index1 = myX - num2;
                    var index2 = myY - (int) Main.tile[myX, myY].frameY / 18;
                    if (Main.tile[myX, myY].type == (ushort) 29)
                        num1 = 1;
                    else if (Main.tile[myX, myY].type == (ushort) 97)
                        num1 = 2;
                    else if (Main.tile[myX, myY].type == (ushort) 463)
                    {
                        num1 = 3;
                        if (Main.tile[myX, myY].frameX == (short) 36)
                            --index1;
                        else
                            ++index1;
                        index2 += 2;
                    }

                    if (this.sign > -1)
                    {
                        Main.PlaySound(11, -1, -1, 1, 1f, 0.0f);
                        this.sign = -1;
                        Main.editSign = false;
                        Main.npcChatText = string.Empty;
                    }

                    if (Main.editChest)
                    {
                        Main.PlaySound(12, -1, -1, 1, 1f, 0.0f);
                        Main.editChest = false;
                        Main.npcChatText = string.Empty;
                    }

                    if (this.editedChestName)
                    {
                        NetMessage.SendData(33, -1, -1, NetworkText.FromLiteral(Main.chest[this.chest].name),
                            this.chest, 1f, 0.0f, 0.0f, 0, 0, 0);
                        this.editedChestName = false;
                    }

                    if (Main.netMode == 1 && num1 == 0 &&
                        (Main.tile[index1, index2].frameX < (short) 72 ||
                         Main.tile[index1, index2].frameX > (short) 106) &&
                        ((Main.tile[index1, index2].frameX < (short) 144 ||
                          Main.tile[index1, index2].frameX > (short) 178) &&
                         (Main.tile[index1, index2].frameX < (short) 828 ||
                          Main.tile[index1, index2].frameX > (short) 1006)) &&
                        ((Main.tile[index1, index2].frameX < (short) 1296 ||
                          Main.tile[index1, index2].frameX > (short) 1330) &&
                         (Main.tile[index1, index2].frameX < (short) 1368 ||
                          Main.tile[index1, index2].frameX > (short) 1402) &&
                         (Main.tile[index1, index2].frameX < (short) 1440 ||
                          Main.tile[index1, index2].frameX > (short) 1474)))
                    {
                        if (index1 == this.chestX && index2 == this.chestY && this.chest != -1)
                        {
                            this.chest = -1;
                            Recipe.FindRecipes();
                            Main.PlaySound(11, -1, -1, 1, 1f, 0.0f);
                        }
                        else
                        {
                            NetMessage.SendData(31, -1, -1, (NetworkText) null, index1, (float) index2, 0.0f, 0.0f, 0,
                                0, 0);
                            Main.stackSplit = 600;
                        }
                    }
                    else
                    {
                        var num3 = -1;
                        switch (num1)
                        {
                            case 1:
                                num3 = -2;
                                break;
                            case 2:
                                num3 = -3;
                                break;
                            case 3:
                                num3 = -4;
                                break;
                            default:
                                var flag2 = false;
                                if (Chest.isLocked(index1, index2))
                                {
                                    var num4 = 327;
                                    if (Main.tile[index1, index2].frameX >= (short) 144 &&
                                        Main.tile[index1, index2].frameX <= (short) 178)
                                        num4 = 329;
                                    if (Main.tile[index1, index2].frameX >= (short) 828 &&
                                        Main.tile[index1, index2].frameX <= (short) 1006)
                                    {
                                        var num5 = (int) Main.tile[index1, index2].frameX / 18;
                                        var num6 = 0;
                                        while (num5 >= 2)
                                        {
                                            num5 -= 2;
                                            ++num6;
                                        }

                                        num4 = 1533 + (num6 - 23);
                                    }

                                    flag2 = true;
                                    for (var index3 = 0; index3 < 58; ++index3)
                                    {
                                        if (this.inventory[index3].type == num4 && this.inventory[index3].stack > 0 &&
                                            Chest.Unlock(index1, index2))
                                        {
                                            if (num4 != 329)
                                            {
                                                --this.inventory[index3].stack;
                                                if (this.inventory[index3].stack <= 0)
                                                    this.inventory[index3] = new Item();
                                            }

                                            if (Main.netMode == 1)
                                                NetMessage.SendData(52, -1, -1, (NetworkText) null, this.whoAmI, 1f,
                                                    (float) index1, (float) index2, 0, 0, 0);
                                        }
                                    }
                                }

                                if (!flag2)
                                {
                                    num3 = Chest.FindChest(index1, index2);
                                    break;
                                }

                                break;
                        }

                        if (num3 != -1)
                        {
                            Main.stackSplit = 600;
                            if (num3 == this.chest)
                            {
                                this.chest = -1;
                                Main.PlaySound(11, -1, -1, 1, 1f, 0.0f);
                            }
                            else if (num3 != this.chest && this.chest == -1)
                            {
                                this.chest = num3;
                                Main.playerInventory = true;
                                if (PlayerInput.GrappleAndInteractAreShared)
                                    PlayerInput.Triggers.JustPressed.Grapple = false;
                                Main.recBigList = false;
                                Main.PlaySound(10, -1, -1, 1, 1f, 0.0f);
                                this.chestX = index1;
                                this.chestY = index2;
                                if (Main.tile[index1, index2].frameX >= (short) 36 &&
                                    Main.tile[index1, index2].frameX < (short) 72)
                                    AchievementsHelper.HandleSpecialEvent(this, 16);
                            }
                            else
                            {
                                this.chest = num3;
                                Main.playerInventory = true;
                                if (PlayerInput.GrappleAndInteractAreShared)
                                    PlayerInput.Triggers.JustPressed.Grapple = false;
                                Main.recBigList = false;
                                Main.PlaySound(12, -1, -1, 1, 1f, 0.0f);
                                this.chestX = index1;
                                this.chestY = index2;
                            }

                            Recipe.FindRecipes();
                        }
                    }
                }
                else if (Main.tile[myX, myY].type == (ushort) 314 && (double) this.gravDir == 1.0)
                {
                    flag1 = true;
                    var flag2 = true;
                    if (this.mount.Active)
                    {
                        if (this.mount.Cart)
                            flag2 = false;
                        else
                            this.mount.Dismount(this);
                    }

                    if (flag2)
                        this.LaunchMinecartHook(myX, myY);
                }
            }

            if (!flag1)
                return;
            this.tileInteractionHappened = true;
        }

        private void LaunchMinecartHook(int myX, int myY)
        {
            var vector2 = new Vector2((float) Main.mouseX + Main.screenPosition.X,
                (float) Main.mouseY + Main.screenPosition.Y);
            vector2 = new Vector2((float) (myX * 16 + 8), (float) (myY * 16 + 8));
            this.minecartLeft = this.direction <= 0;
            this.grappling[0] = -1;
            this.grapCount = 0;
            for (var index = 0; index < 1000; ++index)
            {
                if (Main.projectile[index].active && Main.projectile[index].owner == this.whoAmI &&
                    Main.projectile[index].aiStyle == 7)
                    Main.projectile[index].Kill();
            }

            Projectile.NewProjectile(vector2.X, vector2.Y, 0.0f, 0.0f, 403, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
        }

        private void TileInteractionsMouseOver(int myX, int myY)
        {
            if (myX != Player.tileTargetX || myY != Player.tileTargetY)
                return;
            if (Main.tile[myX, myY].type == (ushort) 79)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                var num = (int) Main.tile[myX, myY].frameY / 36;
                this.showItemIcon2 = num != 0
                    ? (num != 1
                        ? (num != 2
                            ? (num != 3
                                ? (num != 4
                                    ? (num != 5
                                        ? (num != 6
                                            ? (num != 7
                                                ? (num != 8
                                                    ? (num != 9
                                                        ? (num != 10
                                                            ? (num != 11
                                                                ? (num != 12
                                                                    ? (num < 13 || num > 18
                                                                        ? (num < 19 || num > 20
                                                                            ? (num != 21
                                                                                ? (num != 22
                                                                                    ? (num != 23
                                                                                        ? (num != 24
                                                                                            ? (num != 25
                                                                                                ? (num != 26
                                                                                                    ? (num != 27
                                                                                                        ? (num != 28
                                                                                                            ? (num != 29
                                                                                                                ? (
                                                                                                                    num !=
                                                                                                                    30
                                                                                                                        ? (
                                                                                                                            num !=
                                                                                                                            31
                                                                                                                                ? 646
                                                                                                                                : 3897
                                                                                                                        )
                                                                                                                        : 3163
                                                                                                                )
                                                                                                                : 3164)
                                                                                                            : 3162)
                                                                                                        : 2811)
                                                                                                    : 2669)
                                                                                                : 2568)
                                                                                            : 2553)
                                                                                        : 2538)
                                                                                    : 2520)
                                                                                : 2231)
                                                                            : 2139 + num - 19)
                                                                        : 2066 + num - 13)
                                                                    : 1722)
                                                                : 1721)
                                                            : 1720)
                                                        : 1719)
                                                    : 1473)
                                                : 1472)
                                            : 1471)
                                        : 1470)
                                    : 920)
                                : 646)
                            : 645)
                        : 644)
                    : 224;
            }

            if (Main.tile[myX, myY].type == (ushort) 33)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 105;
                var num = (int) Main.tile[myX, myY].frameY / 22;
                if (num == 1)
                    this.showItemIcon2 = 1405;
                if (num == 2)
                    this.showItemIcon2 = 1406;
                if (num == 3)
                    this.showItemIcon2 = 1407;
                if (num >= 4 && num <= 13)
                    this.showItemIcon2 = 2045 + num - 4;
                if (num >= 14 && num <= 16)
                    this.showItemIcon2 = 2153 + num - 14;
                if (num == 17)
                    this.showItemIcon2 = 2236;
                if (num == 18)
                    this.showItemIcon2 = 2523;
                if (num == 19)
                    this.showItemIcon2 = 2542;
                if (num == 20)
                    this.showItemIcon2 = 2556;
                if (num == 21)
                    this.showItemIcon2 = 2571;
                if (num == 22)
                    this.showItemIcon2 = 2648;
                if (num == 23)
                    this.showItemIcon2 = 2649;
                if (num == 24)
                    this.showItemIcon2 = 2650;
                if (num == 25)
                    this.showItemIcon2 = 2651;
                else if (num == 26)
                    this.showItemIcon2 = 2818;
                else if (num == 27)
                    this.showItemIcon2 = 3171;
                else if (num == 28)
                    this.showItemIcon2 = 3173;
                else if (num == 29)
                    this.showItemIcon2 = 3172;
                else if (num == 30)
                    this.showItemIcon2 = 3890;
            }

            if (Main.tile[myX, myY].type == (ushort) 21)
                this.TileInteractionsMouseOver_Containers(myX, myY);
            if (Main.tile[myX, myY].type == (ushort) 467)
                this.TileInteractionsMouseOver_Containers(myX, myY);
            if (Main.tile[myX, myY].type == (ushort) 441)
            {
                var tile = Main.tile[myX, myY];
                var num1 = myX;
                var num2 = myY;
                if ((int) tile.frameX % 36 != 0)
                {
                    var num3 = num1 - 1;
                }

                if ((int) tile.frameY % 36 != 0)
                {
                    var num4 = num2 - 1;
                }

                this.showItemIcon2 = -1;
                this.showItemIcon2 = Chest.chestTypeToIcon[(int) tile.frameX / 36];
                this.noThrow = 2;
                this.showItemIcon = true;
            }

            if (Main.tile[myX, myY].type == (ushort) 468)
            {
                var tile = Main.tile[myX, myY];
                var num1 = myX;
                var num2 = myY;
                if ((int) tile.frameX % 36 != 0)
                {
                    var num3 = num1 - 1;
                }

                if ((int) tile.frameY % 36 != 0)
                {
                    var num4 = num2 - 1;
                }

                this.showItemIcon2 = -1;
                this.showItemIcon2 = Chest.chestTypeToIcon2[(int) tile.frameX / 36];
                this.noThrow = 2;
                this.showItemIcon = true;
            }

            if (Main.tile[myX, myY].type == (ushort) 88)
            {
                var tile = Main.tile[myX, myY];
                var num = myX;
                var Y = myY;
                var X = num - (int) tile.frameX % 54 / 18;
                if ((int) tile.frameY % 36 != 0)
                    --Y;
                var chest = Chest.FindChest(X, Y);
                this.showItemIcon2 = -1;
                if (chest < 0)
                {
                    this.showItemIconText = Lang.dresserType[0].Value;
                }
                else
                {
                    this.showItemIconText = !(Main.chest[chest].name != "")
                        ? Lang.dresserType[(int) tile.frameX / 54].Value
                        : Main.chest[chest].name;
                    if (this.showItemIconText == Lang.dresserType[(int) tile.frameX / 54].Value)
                    {
                        this.showItemIcon2 = Chest.dresserTypeToIcon[(int) tile.frameX / 54];
                        this.showItemIconText = "";
                    }
                }

                this.noThrow = 2;
                this.showItemIcon = true;
                if (Main.tile[myX, myY].frameY > (short) 0)
                    this.showItemIcon2 = 269;
            }

            if (Main.tile[myX, myY].type == (ushort) 10 || Main.tile[myX, myY].type == (ushort) 11)
            {
                var tile = Main.tile[myX, myY];
                this.noThrow = 2;
                this.showItemIcon = true;
                var frameY = (int) tile.frameY;
                var num = 0;
                while (frameY >= 54)
                {
                    frameY -= 54;
                    ++num;
                }

                if (tile.type == (ushort) 10)
                    num += 36 * ((int) tile.frameX / 54);
                if (tile.type == (ushort) 11)
                    num += 36 * ((int) tile.frameX / 72);
                this.showItemIcon2 = num != 0
                    ? (num != 9
                        ? (num != 10
                            ? (num != 11
                                ? (num != 12
                                    ? (num != 13
                                        ? (num != 14
                                            ? (num != 15
                                                ? (num != 16
                                                    ? (num != 17
                                                        ? (num != 18
                                                            ? (num != 19
                                                                ? (num < 20 || num > 23
                                                                    ? (num != 24
                                                                        ? (num != 25
                                                                            ? (num != 26
                                                                                ? (num != 27
                                                                                    ? (num != 28
                                                                                        ? (num != 29
                                                                                            ? (num != 30
                                                                                                ? (num != 31
                                                                                                    ? (num != 32
                                                                                                        ? (num != 33
                                                                                                            ? (num != 34
                                                                                                                ? (
                                                                                                                    num !=
                                                                                                                    35
                                                                                                                        ? (
                                                                                                                            num !=
                                                                                                                            36
                                                                                                                                ? (
                                                                                                                                    num <
                                                                                                                                    4 ||
                                                                                                                                    num >
                                                                                                                                    8
                                                                                                                                        ? 649 +
                                                                                                                                          num
                                                                                                                                        : 812 +
                                                                                                                                          num
                                                                                                                                )
                                                                                                                                : 3888
                                                                                                                        )
                                                                                                                        : 3130
                                                                                                                )
                                                                                                                : 3131)
                                                                                                            : 3129)
                                                                                                        : 2815)
                                                                                                    : 2576)
                                                                                                : 2561)
                                                                                            : 2528)
                                                                                        : 2265)
                                                                                    : 2044)
                                                                                : 1924)
                                                                            : 1815)
                                                                        : 1793)
                                                                    : 1709 + num - 20)
                                                                : 1458)
                                                            : 1413)
                                                        : 1412)
                                                    : 1411)
                                                : 1140)
                                            : 1139)
                                        : 1138)
                                    : 1137)
                                : 1141)
                            : 912)
                        : 837)
                    : 25;
            }

            if (Main.tile[myX, myY].type == (ushort) 104)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                switch ((int) Main.tile[myX, myY].frameX / 36)
                {
                    case 0:
                        this.showItemIcon2 = 359;
                        break;
                    case 1:
                        this.showItemIcon2 = 2237;
                        break;
                    case 2:
                        this.showItemIcon2 = 2238;
                        break;
                    case 3:
                        this.showItemIcon2 = 2239;
                        break;
                    case 4:
                        this.showItemIcon2 = 2240;
                        break;
                    case 5:
                        this.showItemIcon2 = 2241;
                        break;
                    case 6:
                        this.showItemIcon2 = 2560;
                        break;
                    case 7:
                        this.showItemIcon2 = 2575;
                        break;
                    case 8:
                        this.showItemIcon2 = 2591;
                        break;
                    case 9:
                        this.showItemIcon2 = 2592;
                        break;
                    case 10:
                        this.showItemIcon2 = 2593;
                        break;
                    case 11:
                        this.showItemIcon2 = 2594;
                        break;
                    case 12:
                        this.showItemIcon2 = 2595;
                        break;
                    case 13:
                        this.showItemIcon2 = 2596;
                        break;
                    case 14:
                        this.showItemIcon2 = 2597;
                        break;
                    case 15:
                        this.showItemIcon2 = 2598;
                        break;
                    case 16:
                        this.showItemIcon2 = 2599;
                        break;
                    case 17:
                        this.showItemIcon2 = 2600;
                        break;
                    case 18:
                        this.showItemIcon2 = 2601;
                        break;
                    case 19:
                        this.showItemIcon2 = 2602;
                        break;
                    case 20:
                        this.showItemIcon2 = 2603;
                        break;
                    case 21:
                        this.showItemIcon2 = 2604;
                        break;
                    case 22:
                        this.showItemIcon2 = 2605;
                        break;
                    case 23:
                        this.showItemIcon2 = 2606;
                        break;
                    case 24:
                        this.showItemIcon2 = 2809;
                        break;
                    case 25:
                        this.showItemIcon2 = 3126;
                        break;
                    case 26:
                        this.showItemIcon2 = 3128;
                        break;
                    case 27:
                        this.showItemIcon2 = 3127;
                        break;
                    case 28:
                        this.showItemIcon2 = 3898;
                        break;
                    case 29:
                        this.showItemIcon2 = 3899;
                        break;
                    case 30:
                        this.showItemIcon2 = 3900;
                        break;
                    case 31:
                        this.showItemIcon2 = 3901;
                        break;
                    case 32:
                        this.showItemIcon2 = 3902;
                        break;
                }
            }

            if (Main.tile[myX, myY].type == (ushort) 356)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 3064;
            }

            if (Main.tile[myX, myY].type == (ushort) 377)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 3198;
            }

            if (Main.tile[myX, myY].type == (ushort) 209)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                if (Main.tile[myX, myY].frameX < (short) 72)
                    this.showItemIcon2 = 928;
                else if (Main.tile[myX, myY].frameX < (short) 144)
                    this.showItemIcon2 = 1337;
                else if (Main.tile[myX, myY].frameX < (short) 216)
                    this.showItemIcon2 = 3369;
                else if (Main.tile[myX, myY].frameX < (short) 360)
                    this.showItemIcon2 = 3664;
                var num = (int) Main.tile[myX, myY].frameX / 18;
                while (num >= 4)
                    num -= 4;
                this.showItemIconR = num < 2;
            }

            if (Main.tile[myX, myY].type == (ushort) 216)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                var frameY = (int) Main.tile[myX, myY].frameY;
                var num = 0;
                while (frameY >= 40)
                {
                    frameY -= 40;
                    ++num;
                }

                this.showItemIcon2 = 970 + num;
            }

            if (Main.tile[myX, myY].type == (ushort) 387 || Main.tile[myX, myY].type == (ushort) 386)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                var x = 0;
                var y = 0;
                WorldGen.GetTopLeftAndStyles(ref x, ref y, 2, 1 + (Main.tile[myX, myY].type == (ushort) 386).ToInt(),
                    18, 18);
                this.showItemIcon2 = 3239;
            }

            if (Main.tile[myX, myY].type == (ushort) 389 || Main.tile[myX, myY].type == (ushort) 388)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 3240;
            }

            if (Main.tile[myX, myY].type == (ushort) 335)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 2700;
            }

            if (Main.tile[myX, myY].type == (ushort) 410)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 3536 + Math.Min((int) Main.tile[myX, myY].frameX / 36, 3);
            }

            if (Main.tile[myX, myY].type == (ushort) 463)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 3813;
            }

            if (Main.tile[myX, myY].type == (ushort) 411 && Main.tile[myX, myY].frameX < (short) 36)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 3545;
            }

            if (Main.tile[myX, myY].type == (ushort) 338)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 2738;
            }

            if (Main.tile[myX, myY].type == (ushort) 455)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 3747;
            }

            if (Main.tile[myX, myY].type == (ushort) 219 &&
                (this.inventory[this.selectedItem].type == 424 || this.inventory[this.selectedItem].type == 1103))
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = this.inventory[this.selectedItem].type;
            }

            if (Main.tile[myX, myY].type == (ushort) 212)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 949;
            }

            if (Main.tile[myX, myY].type == (ushort) 314 && (double) this.gravDir == 1.0)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 2343;
            }

            if (Main.tile[myX, myY].type == (ushort) 215)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                var num = (int) Main.tile[myX, myY].frameX / 54;
                switch (num)
                {
                    case 0:
                        this.showItemIcon2 = 966;
                        break;
                    case 5:
                        this.showItemIcon2 = 3050;
                        break;
                    case 6:
                        this.showItemIcon2 = 3723;
                        break;
                    case 7:
                        this.showItemIcon2 = 3724;
                        break;
                    default:
                        this.showItemIcon2 = 3046 + num - 1;
                        break;
                }
            }

            if (Main.tile[myX, myY].type == (ushort) 4)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                var num = (int) Main.tile[myX, myY].frameY / 22;
                switch (num)
                {
                    case 0:
                        this.showItemIcon2 = 8;
                        break;
                    case 8:
                        this.showItemIcon2 = 523;
                        break;
                    case 9:
                        this.showItemIcon2 = 974;
                        break;
                    case 10:
                        this.showItemIcon2 = 1245;
                        break;
                    case 11:
                        this.showItemIcon2 = 1333;
                        break;
                    case 12:
                        this.showItemIcon2 = 2274;
                        break;
                    case 13:
                        this.showItemIcon2 = 3004;
                        break;
                    case 14:
                        this.showItemIcon2 = 3045;
                        break;
                    case 15:
                        this.showItemIcon2 = 3114;
                        break;
                    default:
                        this.showItemIcon2 = 426 + num;
                        break;
                }
            }

            if (Main.tile[myX, myY].type == (ushort) 13)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                switch ((int) Main.tile[myX, myY].frameX / 18)
                {
                    case 1:
                        this.showItemIcon2 = 28;
                        break;
                    case 2:
                        this.showItemIcon2 = 110;
                        break;
                    case 3:
                        this.showItemIcon2 = 350;
                        break;
                    case 4:
                        this.showItemIcon2 = 351;
                        break;
                    case 5:
                        this.showItemIcon2 = 2234;
                        break;
                    case 6:
                        this.showItemIcon2 = 2244;
                        break;
                    case 7:
                        this.showItemIcon2 = 2257;
                        break;
                    case 8:
                        this.showItemIcon2 = 2258;
                        break;
                    default:
                        this.showItemIcon2 = 31;
                        break;
                }
            }

            if (Main.tile[myX, myY].type == (ushort) 29)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 87;
            }

            if (Main.tile[myX, myY].type == (ushort) 97)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 346;
            }

            if (Main.tile[myX, myY].type == (ushort) 49)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 148;
            }

            if (Main.tile[myX, myY].type == (ushort) 174)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 713;
            }

            if (Main.tile[myX, myY].type == (ushort) 50)
            {
                this.noThrow = 2;
                if (Main.tile[myX, myY].frameX == (short) 90)
                {
                    this.showItemIcon = true;
                    this.showItemIcon2 = 165;
                }
            }

            if (Main.tile[myX, myY].type == (ushort) 139)
            {
                this.noThrow = 2;
                var index1 = myX;
                var index2 = myY;
                var num1 = 0;
                var num2 = (int) Main.tile[index1, index2].frameY / 18;
                while (num2 >= 2)
                {
                    ++num1;
                    num2 -= 2;
                }

                this.showItemIcon = true;
                this.showItemIcon2 = num1 != 28
                    ? (num1 != 29
                        ? (num1 != 30
                            ? (num1 != 31
                                ? (num1 != 32
                                    ? (num1 != 33
                                        ? (num1 != 34
                                            ? (num1 != 35
                                                ? (num1 != 36
                                                    ? (num1 != 37
                                                        ? (num1 != 38
                                                            ? (num1 != 39
                                                                ? (num1 < 13 ? 562 + num1 : 1596 + num1 - 13)
                                                                : 3869)
                                                            : 3796)
                                                        : 3371)
                                                    : 3370)
                                                : 3237)
                                            : 3236)
                                        : 3235)
                                    : 3044)
                                : 2742)
                            : 1965)
                        : 1964)
                    : 1963;
            }

            if (Main.tile[myX, myY].type == (ushort) 207)
            {
                this.noThrow = 2;
                var index1 = myX;
                var index2 = myY;
                var num1 = 0;
                var num2 = (int) Main.tile[index1, index2].frameX / 18;
                while (num2 >= 2)
                {
                    ++num1;
                    num2 -= 2;
                }

                this.showItemIcon = true;
                switch (num1)
                {
                    case 0:
                        this.showItemIcon2 = 909;
                        break;
                    case 1:
                        this.showItemIcon2 = 910;
                        break;
                    case 2:
                        this.showItemIcon2 = 940;
                        break;
                    case 3:
                        this.showItemIcon2 = 941;
                        break;
                    case 4:
                        this.showItemIcon2 = 942;
                        break;
                    case 5:
                        this.showItemIcon2 = 943;
                        break;
                    case 6:
                        this.showItemIcon2 = 944;
                        break;
                    case 7:
                        this.showItemIcon2 = 945;
                        break;
                }
            }

            if (Main.tileSign[(int) Main.tile[myX, myY].type])
            {
                this.noThrow = 2;
                var num1 = (int) Main.tile[myX, myY].frameX / 18;
                var num2 = (int) Main.tile[myX, myY].frameY / 18;
                var num3 = num1 % 2;
                var i = myX - num3;
                var j = myY - num2;
                Main.signBubble = true;
                Main.signX = i * 16 + 16;
                Main.signY = j * 16;
                var num4 = Sign.ReadSign(i, j, false);
                if (num4 != -1)
                    Main.signHover = num4;
                if (num4 != -1)
                {
                    Main.signHover = num4;
                    this.showItemIcon = false;
                    this.showItemIcon2 = -1;
                }
            }

            if (Main.tile[myX, myY].type == (ushort) 237)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 1293;
            }

            if (Main.tile[myX, myY].type == (ushort) 466)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 3828;
            }

            if (Main.tile[myX, myY].type == (ushort) 125)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 487;
            }

            if (Main.tile[myX, myY].type == (ushort) 354)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 2999;
            }

            if (Main.tile[myX, myY].type == (ushort) 287)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 2177;
            }

            if (Main.tile[myX, myY].type == (ushort) 132)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 513;
            }

            if (Main.tile[myX, myY].type == (ushort) 136)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 538;
            }

            if (Main.tile[myX, myY].type == (ushort) 144)
            {
                this.noThrow = 2;
                this.showItemIcon = true;
                this.showItemIcon2 = 583 + (int) Main.tile[myX, myY].frameX / 18;
            }

            if (Main.tile[myX, myY].type != (ushort) 440)
                return;
            var index = myY;
            var num5 = (int) Main.tile[myX, index].frameX / 54;
            var num6 = (int) Main.tile[myX, index].frameY / 54;
            var type = -1;
            switch (num5)
            {
                case 0:
                    type = 1526;
                    break;
                case 1:
                    type = 1524;
                    break;
                case 2:
                    type = 1525;
                    break;
                case 3:
                    type = 1523;
                    break;
                case 4:
                    type = 1522;
                    break;
                case 5:
                    type = 1527;
                    break;
                case 6:
                    type = 3643;
                    break;
            }

            if (type == -1 || num6 != 1 && !this.HasItem(type))
                return;
            this.noThrow = 2;
            this.showItemIcon = true;
            this.showItemIcon2 = type;
        }

        public Color ChatColor()
        {
            switch (this.difficulty)
            {
                case 1:
                    return Main.mcColor;
                case 2:
                    return Main.hcColor;
                default:
                    return Color.White;
            }
        }

        private void TileInteractionsMouseOver_Containers(int myX, int myY)
        {
            var localizedTextArray = Lang.chestType;
            var numArray = Chest.chestTypeToIcon;
            var tile = Main.tile[myX, myY];
            if (tile.type == (ushort) 467)
            {
                localizedTextArray = Lang.chestType2;
                numArray = Chest.chestTypeToIcon2;
            }

            var X = myX;
            var Y = myY;
            if ((int) tile.frameX % 36 != 0)
                --X;
            if ((int) tile.frameY % 36 != 0)
                --Y;
            var chest = Chest.FindChest(X, Y);
            this.showItemIcon2 = -1;
            if (chest < 0)
            {
                this.showItemIconText = localizedTextArray[0].Value;
            }
            else
            {
                this.showItemIconText = !(Main.chest[chest].name != "")
                    ? localizedTextArray[(int) tile.frameX / 36].Value
                    : Main.chest[chest].name;
                if (this.showItemIconText == localizedTextArray[(int) tile.frameX / 36].Value)
                {
                    this.showItemIcon2 = numArray[(int) tile.frameX / 36];
                    this.showItemIconText = "";
                }
            }

            this.noThrow = 2;
            this.showItemIcon = true;
        }

        private void TryLandingOnDetonator()
        {
            if (this.whoAmI != Main.myPlayer || (double) this.velocity.Y < 3.0)
                return;
            var tileCoordinates = (this.Bottom + new Vector2(0.0f, 0.01f)).ToTileCoordinates();
            var tileSafely = Framing.GetTileSafely(tileCoordinates.X, tileCoordinates.Y);
            if (!tileSafely.active() || tileSafely.type != (ushort) 411 ||
                (tileSafely.frameY != (short) 0 || tileSafely.frameX >= (short) 36))
                return;
            Wiring.HitSwitch(tileCoordinates.X, tileCoordinates.Y);
            NetMessage.SendData(59, -1, -1, (NetworkText) null, tileCoordinates.X, (float) tileCoordinates.Y, 0.0f,
                0.0f, 0, 0, 0);
        }

        private void TryBouncingBlocks(bool Falling)
        {
            if ((double) this.velocity.Y < 5.0 && (double) this.velocity.Y > -5.0 || this.wet)
                return;
            var num = 0;
            var flag = false;
            foreach (var touchedTile in this.TouchedTiles)
            {
                var tile = Main.tile[touchedTile.X, touchedTile.Y];
                if (tile != null && tile.active() && (tile.nactive() && Main.tileBouncy[(int) tile.type]))
                {
                    flag = true;
                    num = touchedTile.Y;
                    break;
                }
            }

            if (!flag)
                return;
            this.velocity.Y *= -0.8f;
            if (this.controlJump)
                this.velocity.Y = MathHelper.Clamp(this.velocity.Y, -13f, 13f);
            this.position.Y = (float) (num * 16 - ((double) this.velocity.Y < 0.0 ? this.height : -16));
            this.FloorVisuals(Falling);
            this.velocity.Y = MathHelper.Clamp(this.velocity.Y, -20f, 20f);
            if ((double) this.velocity.Y * (double) this.gravDir >= 0.0)
                return;
            this.fallStart = (int) this.position.Y / 16;
        }

        private void GrabItems(int i)
        {
            for (var number = 0; number < 400; ++number)
            {
                if (Main.item[number].active && Main.item[number].noGrabDelay == 0 && Main.item[number].owner == i)
                {
                    var defaultItemGrabRange = Player.defaultItemGrabRange;
                    if (this.goldRing && Main.item[number].type >= 71 && Main.item[number].type <= 74)
                        defaultItemGrabRange += Item.coinGrabRange;
                    if (this.manaMagnet && (Main.item[number].type == 184 || Main.item[number].type == 1735 ||
                                            Main.item[number].type == 1868))
                        defaultItemGrabRange += Item.manaGrabRange;
                    if (this.lifeMagnet && (Main.item[number].type == 58 || Main.item[number].type == 1734 ||
                                            Main.item[number].type == 1867))
                        defaultItemGrabRange += Item.lifeGrabRange;
                    if (Main.item[number].type == 3822)
                        defaultItemGrabRange += 50;
                    if (ItemID.Sets.NebulaPickup[Main.item[number].type])
                        defaultItemGrabRange += 100;
                    if (new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width,
                        this.height).Intersects(new Microsoft.Xna.Framework.Rectangle(
                        (int) Main.item[number].position.X, (int) Main.item[number].position.Y, Main.item[number].width,
                        Main.item[number].height)))
                    {
                        if (i == Main.myPlayer &&
                            (this.inventory[this.selectedItem].type != 0 || this.itemAnimation <= 0))
                        {
                            if (ItemID.Sets.NebulaPickup[Main.item[number].type])
                            {
                                Main.PlaySound(7, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                                var buffType = Main.item[number].buffType;
                                Main.item[number] = new Item();
                                if (Main.netMode == 1)
                                {
                                    NetMessage.SendData(102, -1, -1, (NetworkText) null, i, (float) buffType,
                                        this.Center.X, this.Center.Y, 0, 0, 0);
                                    NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0,
                                        0);
                                }
                                else
                                    this.NebulaLevelup(buffType);
                            }

                            if (Main.item[number].type == 58 || Main.item[number].type == 1734 ||
                                Main.item[number].type == 1867)
                            {
                                Main.PlaySound(7, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                                this.statLife += 20;
                                if (Main.myPlayer == this.whoAmI)
                                    this.HealEffect(20, true);
                                if (this.statLife > this.statLifeMax2)
                                    this.statLife = this.statLifeMax2;
                                Main.item[number] = new Item();
                                if (Main.netMode == 1)
                                    NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0,
                                        0);
                            }
                            else if (Main.item[number].type == 184 || Main.item[number].type == 1735 ||
                                     Main.item[number].type == 1868)
                            {
                                Main.PlaySound(7, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                                this.statMana += 100;
                                if (Main.myPlayer == this.whoAmI)
                                    this.ManaEffect(100);
                                if (this.statMana > this.statManaMax2)
                                    this.statMana = this.statManaMax2;
                                Main.item[number] = new Item();
                                if (Main.netMode == 1)
                                    NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0,
                                        0);
                            }
                            else
                            {
                                Main.item[number] = this.GetItem(i, Main.item[number], false, false);
                                if (Main.netMode == 1)
                                    NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0,
                                        0);
                            }
                        }
                    }
                    else if (new Microsoft.Xna.Framework.Rectangle((int) this.position.X - defaultItemGrabRange,
                                     (int) this.position.Y - defaultItemGrabRange,
                                     this.width + defaultItemGrabRange * 2,
                                     this.height + defaultItemGrabRange * 2)
                                 .Intersects(new Microsoft.Xna.Framework.Rectangle((int) Main.item[number].position.X,
                                     (int) Main.item[number].position.Y, Main.item[number].width,
                                     Main.item[number].height)) && this.ItemSpace(Main.item[number]))
                    {
                        Main.item[number].beingGrabbed = true;
                        if (this.manaMagnet && (Main.item[number].type == 184 || Main.item[number].type == 1735 ||
                                                Main.item[number].type == 1868))
                        {
                            var num1 = 12f;
                            var vector2 =
                                new Vector2(Main.item[number].position.X + (float) (Main.item[number].width / 2),
                                    Main.item[number].position.Y + (float) (Main.item[number].height / 2));
                            var num2 = this.Center.X - vector2.X;
                            var num3 = this.Center.Y - vector2.Y;
                            var num4 =
                                (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
                            var num5 = num1 / num4;
                            var num6 = num2 * num5;
                            var num7 = num3 * num5;
                            var num8 = 5;
                            Main.item[number].velocity.X =
                                (Main.item[number].velocity.X * (float) (num8 - 1) + num6) / (float) num8;
                            Main.item[number].velocity.Y =
                                (Main.item[number].velocity.Y * (float) (num8 - 1) + num7) / (float) num8;
                        }
                        else if (this.lifeMagnet && (Main.item[number].type == 58 || Main.item[number].type == 1734 ||
                                                     Main.item[number].type == 1867))
                        {
                            var num1 = 15f;
                            var vector2 =
                                new Vector2(Main.item[number].position.X + (float) (Main.item[number].width / 2),
                                    Main.item[number].position.Y + (float) (Main.item[number].height / 2));
                            var num2 = this.Center.X - vector2.X;
                            var num3 = this.Center.Y - vector2.Y;
                            var num4 =
                                (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
                            var num5 = num1 / num4;
                            var num6 = num2 * num5;
                            var num7 = num3 * num5;
                            var num8 = 5;
                            Main.item[number].velocity.X =
                                (Main.item[number].velocity.X * (float) (num8 - 1) + num6) / (float) num8;
                            Main.item[number].velocity.Y =
                                (Main.item[number].velocity.Y * (float) (num8 - 1) + num7) / (float) num8;
                        }
                        else if (this.goldRing && Main.item[number].type >= 71 && Main.item[number].type <= 74)
                        {
                            var num1 = 12f;
                            var vector2 =
                                new Vector2(Main.item[number].position.X + (float) (Main.item[number].width / 2),
                                    Main.item[number].position.Y + (float) (Main.item[number].height / 2));
                            var num2 = this.Center.X - vector2.X;
                            var num3 = this.Center.Y - vector2.Y;
                            var num4 =
                                (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
                            var num5 = num1 / num4;
                            var num6 = num2 * num5;
                            var num7 = num3 * num5;
                            var num8 = 5;
                            Main.item[number].velocity.X =
                                (Main.item[number].velocity.X * (float) (num8 - 1) + num6) / (float) num8;
                            Main.item[number].velocity.Y =
                                (Main.item[number].velocity.Y * (float) (num8 - 1) + num7) / (float) num8;
                        }
                        else if (ItemID.Sets.NebulaPickup[Main.item[number].type])
                        {
                            var num1 = 12f;
                            var vector2 =
                                new Vector2(Main.item[number].position.X + (float) (Main.item[number].width / 2),
                                    Main.item[number].position.Y + (float) (Main.item[number].height / 2));
                            var num2 = this.Center.X - vector2.X;
                            var num3 = this.Center.Y - vector2.Y;
                            var num4 =
                                (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
                            var num5 = num1 / num4;
                            var num6 = num2 * num5;
                            var num7 = num3 * num5;
                            var num8 = 5;
                            Main.item[number].velocity.X =
                                (Main.item[number].velocity.X * (float) (num8 - 1) + num6) / (float) num8;
                            Main.item[number].velocity.Y =
                                (Main.item[number].velocity.Y * (float) (num8 - 1) + num7) / (float) num8;
                        }
                        else
                        {
                            if ((double) this.position.X + (double) this.width * 0.5 >
                                (double) Main.item[number].position.X + (double) Main.item[number].width * 0.5)
                            {
                                if ((double) Main.item[number].velocity.X <
                                    (double) Player.itemGrabSpeedMax + (double) this.velocity.X)
                                    Main.item[number].velocity.X += Player.itemGrabSpeed;
                                if ((double) Main.item[number].velocity.X < 0.0)
                                    Main.item[number].velocity.X += Player.itemGrabSpeed * 0.75f;
                            }
                            else
                            {
                                if ((double) Main.item[number].velocity.X >
                                    -(double) Player.itemGrabSpeedMax + (double) this.velocity.X)
                                    Main.item[number].velocity.X -= Player.itemGrabSpeed;
                                if ((double) Main.item[number].velocity.X > 0.0)
                                    Main.item[number].velocity.X -= Player.itemGrabSpeed * 0.75f;
                            }

                            if ((double) this.position.Y + (double) this.height * 0.5 >
                                (double) Main.item[number].position.Y + (double) Main.item[number].height * 0.5)
                            {
                                if ((double) Main.item[number].velocity.Y < (double) Player.itemGrabSpeedMax)
                                    Main.item[number].velocity.Y += Player.itemGrabSpeed;
                                if ((double) Main.item[number].velocity.Y < 0.0)
                                    Main.item[number].velocity.Y += Player.itemGrabSpeed * 0.75f;
                            }
                            else
                            {
                                if ((double) Main.item[number].velocity.Y > -(double) Player.itemGrabSpeedMax)
                                    Main.item[number].velocity.Y -= Player.itemGrabSpeed;
                                if ((double) Main.item[number].velocity.Y > 0.0)
                                    Main.item[number].velocity.Y -= Player.itemGrabSpeed * 0.75f;
                            }
                        }
                    }
                }
            }
        }

        public bool SellItem(int price, int stack)
        {
            if (price <= 0)
                return false;
            var objArray = new Item[58];
            for (var index = 0; index < 58; ++index)
            {
                objArray[index] = new Item();
                objArray[index] = this.inventory[index].Clone();
            }

            var num1 = price / 5;
            if (num1 < 1)
                num1 = 1;
            var num2 = num1 * stack;
            var flag = false;
            while (num2 >= 1000000 && !flag)
            {
                var index = -1;
                for (var i = 53; i >= 0; --i)
                {
                    if (index == -1 && (this.inventory[i].type == 0 || this.inventory[i].stack == 0))
                        index = i;
                    while (this.inventory[i].type == 74 && this.inventory[i].stack < this.inventory[i].maxStack &&
                           num2 >= 1000000)
                    {
                        ++this.inventory[i].stack;
                        num2 -= 1000000;
                        this.DoCoins(i);
                        if (this.inventory[i].stack == 0 && index == -1)
                            index = i;
                    }
                }

                if (num2 >= 1000000)
                {
                    if (index == -1)
                    {
                        flag = true;
                    }
                    else
                    {
                        this.inventory[index].SetDefaults(74, false);
                        num2 -= 1000000;
                    }
                }
            }

            while (num2 >= 10000 && !flag)
            {
                var index = -1;
                for (var i = 53; i >= 0; --i)
                {
                    if (index == -1 && (this.inventory[i].type == 0 || this.inventory[i].stack == 0))
                        index = i;
                    while (this.inventory[i].type == 73 && this.inventory[i].stack < this.inventory[i].maxStack &&
                           num2 >= 10000)
                    {
                        ++this.inventory[i].stack;
                        num2 -= 10000;
                        this.DoCoins(i);
                        if (this.inventory[i].stack == 0 && index == -1)
                            index = i;
                    }
                }

                if (num2 >= 10000)
                {
                    if (index == -1)
                    {
                        flag = true;
                    }
                    else
                    {
                        this.inventory[index].SetDefaults(73, false);
                        num2 -= 10000;
                    }
                }
            }

            while (num2 >= 100 && !flag)
            {
                var index = -1;
                for (var i = 53; i >= 0; --i)
                {
                    if (index == -1 && (this.inventory[i].type == 0 || this.inventory[i].stack == 0))
                        index = i;
                    while (this.inventory[i].type == 72 && this.inventory[i].stack < this.inventory[i].maxStack &&
                           num2 >= 100)
                    {
                        ++this.inventory[i].stack;
                        num2 -= 100;
                        this.DoCoins(i);
                        if (this.inventory[i].stack == 0 && index == -1)
                            index = i;
                    }
                }

                if (num2 >= 100)
                {
                    if (index == -1)
                    {
                        flag = true;
                    }
                    else
                    {
                        this.inventory[index].SetDefaults(72, false);
                        num2 -= 100;
                    }
                }
            }

            while (num2 >= 1 && !flag)
            {
                var index = -1;
                for (var i = 53; i >= 0; --i)
                {
                    if (index == -1 && (this.inventory[i].type == 0 || this.inventory[i].stack == 0))
                        index = i;
                    while (this.inventory[i].type == 71 && this.inventory[i].stack < this.inventory[i].maxStack &&
                           num2 >= 1)
                    {
                        ++this.inventory[i].stack;
                        --num2;
                        this.DoCoins(i);
                        if (this.inventory[i].stack == 0 && index == -1)
                            index = i;
                    }
                }

                if (num2 >= 1)
                {
                    if (index == -1)
                    {
                        flag = true;
                    }
                    else
                    {
                        this.inventory[index].SetDefaults(71, false);
                        --num2;
                    }
                }
            }

            if (!flag)
                return true;
            for (var index = 0; index < 58; ++index)
                this.inventory[index] = objArray[index].Clone();
            return false;
        }

        public bool BuyItem(int price, int customCurrency = -1)
        {
            if (customCurrency != -1)
                return CustomCurrencyManager.BuyItem(this, price, customCurrency);
            bool overFlowing;
            var num1 = Utils.CoinsCount(out overFlowing, this.inventory, 58, 57, 56, 55, 54);
            var num2 = Utils.CoinsCount(out overFlowing, this.bank.item);
            var num3 = Utils.CoinsCount(out overFlowing, this.bank2.item);
            var num4 = Utils.CoinsCount(out overFlowing, this.bank3.item);
            if (Utils.CoinsCombineStacks(out overFlowing, num1, num2, num3, num4) < (long) price)
                return false;
            var inv = new List<Item[]>();
            var dictionary = new Dictionary<int, List<int>>();
            var slotsEmpty = new List<Point>();
            var slotCoins = new List<Point>();
            var slotEmptyBank = new List<Point>();
            var slotEmptyBank2 = new List<Point>();
            var slotEmptyBank3 = new List<Point>();
            inv.Add(this.inventory);
            inv.Add(this.bank.item);
            inv.Add(this.bank2.item);
            inv.Add(this.bank3.item);
            for (var index = 0; index < inv.Count; ++index)
                dictionary[index] = new List<int>();
            dictionary[0] = new List<int>() {58, 57, 56, 55, 54};
            for (var x = 0; x < inv.Count; ++x)
            {
                for (var y = 0; y < inv[x].Length; ++y)
                {
                    if (!dictionary[x].Contains(y) && inv[x][y].type >= 71 && inv[x][y].type <= 74)
                        slotCoins.Add(new Point(x, y));
                }
            }

            var x1 = 0;
            for (var y = inv[x1].Length - 1; y >= 0; --y)
            {
                if (!dictionary[x1].Contains(y) && (inv[x1][y].type == 0 || inv[x1][y].stack == 0))
                    slotsEmpty.Add(new Point(x1, y));
            }

            var x2 = 1;
            for (var y = inv[x2].Length - 1; y >= 0; --y)
            {
                if (!dictionary[x2].Contains(y) && (inv[x2][y].type == 0 || inv[x2][y].stack == 0))
                    slotEmptyBank.Add(new Point(x2, y));
            }

            var x3 = 2;
            for (var y = inv[x3].Length - 1; y >= 0; --y)
            {
                if (!dictionary[x3].Contains(y) && (inv[x3][y].type == 0 || inv[x3][y].stack == 0))
                    slotEmptyBank2.Add(new Point(x3, y));
            }

            var x4 = 3;
            for (var y = inv[x4].Length - 1; y >= 0; --y)
            {
                if (!dictionary[x4].Contains(y) && (inv[x4][y].type == 0 || inv[x4][y].stack == 0))
                    slotEmptyBank3.Add(new Point(x4, y));
            }

            return !Player.TryPurchasing(price, inv, slotCoins, slotsEmpty, slotEmptyBank, slotEmptyBank2,
                slotEmptyBank3);
        }

        private static bool TryPurchasing(int price, List<Item[]> inv, List<Point> slotCoins, List<Point> slotsEmpty,
            List<Point> slotEmptyBank, List<Point> slotEmptyBank2, List<Point> slotEmptyBank3)
        {
            var num1 = (long) price;
            var dictionary = new Dictionary<Point, Item>();
            var flag = false;
            while (num1 > 0L)
            {
                long num2 = 1000000;
                for (var index = 0; index < 4; ++index)
                {
                    if (num1 >= num2)
                    {
                        foreach (var slotCoin in slotCoins)
                        {
                            if (inv[slotCoin.X][slotCoin.Y].type == 74 - index)
                            {
                                var num3 = num1 / num2;
                                dictionary[slotCoin] = inv[slotCoin.X][slotCoin.Y].Clone();
                                if (num3 < (long) inv[slotCoin.X][slotCoin.Y].stack)
                                {
                                    inv[slotCoin.X][slotCoin.Y].stack -= (int) num3;
                                }
                                else
                                {
                                    inv[slotCoin.X][slotCoin.Y].SetDefaults(0, false);
                                    slotsEmpty.Add(slotCoin);
                                }

                                num1 -= num2 * (long) (dictionary[slotCoin].stack - inv[slotCoin.X][slotCoin.Y].stack);
                            }
                        }
                    }

                    num2 /= 100L;
                }

                if (num1 > 0L)
                {
                    if (slotsEmpty.Count > 0)
                    {
                        slotsEmpty.Sort(new Comparison<Point>(DelegateMethods.CompareYReverse));
                        var point = new Point(-1, -1);
                        for (var index1 = 0; index1 < inv.Count; ++index1)
                        {
                            long num3 = 10000;
                            for (var index2 = 0; index2 < 3; ++index2)
                            {
                                if (num1 >= num3)
                                {
                                    foreach (var slotCoin in slotCoins)
                                    {
                                        if (slotCoin.X == index1 && inv[slotCoin.X][slotCoin.Y].type == 74 - index2 &&
                                            inv[slotCoin.X][slotCoin.Y].stack >= 1)
                                        {
                                            var pointList = slotsEmpty;
                                            if (index1 == 1 && slotEmptyBank.Count > 0)
                                                pointList = slotEmptyBank;
                                            if (index1 == 2 && slotEmptyBank2.Count > 0)
                                                pointList = slotEmptyBank2;
                                            if (--inv[slotCoin.X][slotCoin.Y].stack <= 0)
                                            {
                                                inv[slotCoin.X][slotCoin.Y].SetDefaults(0, false);
                                                pointList.Add(slotCoin);
                                            }

                                            dictionary[pointList[0]] = inv[pointList[0].X][pointList[0].Y].Clone();
                                            inv[pointList[0].X][pointList[0].Y].SetDefaults(73 - index2, false);
                                            inv[pointList[0].X][pointList[0].Y].stack = 100;
                                            point = pointList[0];
                                            pointList.RemoveAt(0);
                                            break;
                                        }
                                    }
                                }

                                if (point.X == -1 && point.Y == -1)
                                    num3 /= 100L;
                                else
                                    break;
                            }

                            for (var index2 = 0; index2 < 2; ++index2)
                            {
                                if (point.X == -1 && point.Y == -1)
                                {
                                    foreach (var slotCoin in slotCoins)
                                    {
                                        if (slotCoin.X == index1 && inv[slotCoin.X][slotCoin.Y].type == 73 + index2 &&
                                            inv[slotCoin.X][slotCoin.Y].stack >= 1)
                                        {
                                            var pointList = slotsEmpty;
                                            if (index1 == 1 && slotEmptyBank.Count > 0)
                                                pointList = slotEmptyBank;
                                            if (index1 == 2 && slotEmptyBank2.Count > 0)
                                                pointList = slotEmptyBank2;
                                            if (index1 == 3 && slotEmptyBank3.Count > 0)
                                                pointList = slotEmptyBank3;
                                            if (--inv[slotCoin.X][slotCoin.Y].stack <= 0)
                                            {
                                                inv[slotCoin.X][slotCoin.Y].SetDefaults(0, false);
                                                pointList.Add(slotCoin);
                                            }

                                            dictionary[pointList[0]] = inv[pointList[0].X][pointList[0].Y].Clone();
                                            inv[pointList[0].X][pointList[0].Y].SetDefaults(72 + index2, false);
                                            inv[pointList[0].X][pointList[0].Y].stack = 100;
                                            point = pointList[0];
                                            pointList.RemoveAt(0);
                                            break;
                                        }
                                    }
                                }
                            }

                            if (point.X != -1 && point.Y != -1)
                            {
                                slotCoins.Add(point);
                                break;
                            }
                        }

                        slotsEmpty.Sort(new Comparison<Point>(DelegateMethods.CompareYReverse));
                        slotEmptyBank.Sort(new Comparison<Point>(DelegateMethods.CompareYReverse));
                        slotEmptyBank2.Sort(new Comparison<Point>(DelegateMethods.CompareYReverse));
                        slotEmptyBank3.Sort(new Comparison<Point>(DelegateMethods.CompareYReverse));
                    }
                    else
                    {
                        foreach (var keyValuePair in dictionary)
                            inv[keyValuePair.Key.X][keyValuePair.Key.Y] = keyValuePair.Value.Clone();
                        flag = true;
                        break;
                    }
                }
            }

            return flag;
        }

        public bool BuyItemOld(int price)
        {
            if (price == 0)
                return true;
            long num1 = 0;
            var objArray = new Item[54];
            for (var index = 0; index < 54; ++index)
            {
                objArray[index] = new Item();
                objArray[index] = this.inventory[index].Clone();
                if (this.inventory[index].type == 71)
                    num1 += (long) this.inventory[index].stack;
                if (this.inventory[index].type == 72)
                    num1 += (long) (this.inventory[index].stack * 100);
                if (this.inventory[index].type == 73)
                    num1 += (long) (this.inventory[index].stack * 10000);
                if (this.inventory[index].type == 74)
                    num1 += (long) (this.inventory[index].stack * 1000000);
            }

            if (num1 < (long) price)
                return false;
            var num2 = price;
            while (num2 > 0)
            {
                if (num2 >= 1000000)
                {
                    for (var index = 0; index < 54; ++index)
                    {
                        if (this.inventory[index].type == 74)
                        {
                            while (this.inventory[index].stack > 0 && num2 >= 1000000)
                            {
                                num2 -= 1000000;
                                --this.inventory[index].stack;
                                if (this.inventory[index].stack == 0)
                                    this.inventory[index].type = 0;
                            }
                        }
                    }
                }

                if (num2 >= 10000)
                {
                    for (var index = 0; index < 54; ++index)
                    {
                        if (this.inventory[index].type == 73)
                        {
                            while (this.inventory[index].stack > 0 && num2 >= 10000)
                            {
                                num2 -= 10000;
                                --this.inventory[index].stack;
                                if (this.inventory[index].stack == 0)
                                    this.inventory[index].type = 0;
                            }
                        }
                    }
                }

                if (num2 >= 100)
                {
                    for (var index = 0; index < 54; ++index)
                    {
                        if (this.inventory[index].type == 72)
                        {
                            while (this.inventory[index].stack > 0 && num2 >= 100)
                            {
                                num2 -= 100;
                                --this.inventory[index].stack;
                                if (this.inventory[index].stack == 0)
                                    this.inventory[index].type = 0;
                            }
                        }
                    }
                }

                if (num2 >= 1)
                {
                    for (var index = 0; index < 54; ++index)
                    {
                        if (this.inventory[index].type == 71)
                        {
                            while (this.inventory[index].stack > 0 && num2 >= 1)
                            {
                                --num2;
                                --this.inventory[index].stack;
                                if (this.inventory[index].stack == 0)
                                    this.inventory[index].type = 0;
                            }
                        }
                    }
                }

                if (num2 > 0)
                {
                    var index1 = -1;
                    for (var index2 = 53; index2 >= 0; --index2)
                    {
                        if (this.inventory[index2].type == 0 || this.inventory[index2].stack == 0)
                        {
                            index1 = index2;
                            break;
                        }
                    }

                    if (index1 >= 0)
                    {
                        var flag = true;
                        if (num2 >= 10000)
                        {
                            for (var index2 = 0; index2 < 58; ++index2)
                            {
                                if (this.inventory[index2].type == 74 && this.inventory[index2].stack >= 1)
                                {
                                    --this.inventory[index2].stack;
                                    if (this.inventory[index2].stack == 0)
                                        this.inventory[index2].type = 0;
                                    this.inventory[index1].SetDefaults(73, false);
                                    this.inventory[index1].stack = 100;
                                    flag = false;
                                    break;
                                }
                            }
                        }
                        else if (num2 >= 100)
                        {
                            for (var index2 = 0; index2 < 54; ++index2)
                            {
                                if (this.inventory[index2].type == 73 && this.inventory[index2].stack >= 1)
                                {
                                    --this.inventory[index2].stack;
                                    if (this.inventory[index2].stack == 0)
                                        this.inventory[index2].type = 0;
                                    this.inventory[index1].SetDefaults(72, false);
                                    this.inventory[index1].stack = 100;
                                    flag = false;
                                    break;
                                }
                            }
                        }
                        else if (num2 >= 1)
                        {
                            for (var index2 = 0; index2 < 54; ++index2)
                            {
                                if (this.inventory[index2].type == 72 && this.inventory[index2].stack >= 1)
                                {
                                    --this.inventory[index2].stack;
                                    if (this.inventory[index2].stack == 0)
                                        this.inventory[index2].type = 0;
                                    this.inventory[index1].SetDefaults(71, false);
                                    this.inventory[index1].stack = 100;
                                    flag = false;
                                    break;
                                }
                            }
                        }

                        if (flag)
                        {
                            if (num2 < 10000)
                            {
                                for (var index2 = 0; index2 < 54; ++index2)
                                {
                                    if (this.inventory[index2].type == 73 && this.inventory[index2].stack >= 1)
                                    {
                                        --this.inventory[index2].stack;
                                        if (this.inventory[index2].stack == 0)
                                            this.inventory[index2].type = 0;
                                        this.inventory[index1].SetDefaults(72, false);
                                        this.inventory[index1].stack = 100;
                                        flag = false;
                                        break;
                                    }
                                }
                            }

                            if (flag && num2 < 1000000)
                            {
                                for (var index2 = 0; index2 < 54; ++index2)
                                {
                                    if (this.inventory[index2].type == 74 && this.inventory[index2].stack >= 1)
                                    {
                                        --this.inventory[index2].stack;
                                        if (this.inventory[index2].stack == 0)
                                            this.inventory[index2].type = 0;
                                        this.inventory[index1].SetDefaults(73, false);
                                        this.inventory[index1].stack = 100;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        for (var index2 = 0; index2 < 54; ++index2)
                            this.inventory[index2] = objArray[index2].Clone();
                        return false;
                    }
                }
            }

            return true;
        }

        public void AdjTiles()
        {
            var num1 = 4;
            var num2 = 3;
            for (var index = 0; index < 470; ++index)
            {
                this.oldAdjTile[index] = this.adjTile[index];
                this.adjTile[index] = false;
            }

            this.oldAdjWater = this.adjWater;
            this.adjWater = false;
            this.oldAdjHoney = this.adjHoney;
            this.adjHoney = false;
            this.oldAdjLava = this.adjLava;
            this.adjLava = false;
            this.alchemyTable = false;
            var num3 = (int) (((double) this.position.X + (double) (this.width / 2)) / 16.0);
            var num4 = (int) (((double) this.position.Y + (double) this.height) / 16.0);
            for (var index1 = num3 - num1; index1 <= num3 + num1; ++index1)
            {
                for (var index2 = num4 - num2; index2 < num4 + num2; ++index2)
                {
                    if (Main.tile[index1, index2].active())
                    {
                        this.adjTile[(int) Main.tile[index1, index2].type] = true;
                        if (Main.tile[index1, index2].type == (ushort) 302)
                            this.adjTile[17] = true;
                        if (Main.tile[index1, index2].type == (ushort) 77)
                            this.adjTile[17] = true;
                        if (Main.tile[index1, index2].type == (ushort) 133)
                        {
                            this.adjTile[17] = true;
                            this.adjTile[77] = true;
                        }

                        if (Main.tile[index1, index2].type == (ushort) 134)
                            this.adjTile[16] = true;
                        if (Main.tile[index1, index2].type == (ushort) 354 ||
                            Main.tile[index1, index2].type == (ushort) 469)
                            this.adjTile[14] = true;
                        if (Main.tile[index1, index2].type == (ushort) 355)
                        {
                            this.adjTile[13] = true;
                            this.adjTile[14] = true;
                            this.alchemyTable = true;
                        }
                    }

                    if (Main.tile[index1, index2].liquid > (byte) 200 &&
                        Main.tile[index1, index2].liquidType() == (byte) 0)
                        this.adjWater = true;
                    if (Main.tile[index1, index2].liquid > (byte) 200 &&
                        Main.tile[index1, index2].liquidType() == (byte) 2)
                        this.adjHoney = true;
                    if (Main.tile[index1, index2].liquid > (byte) 200 &&
                        Main.tile[index1, index2].liquidType() == (byte) 1)
                        this.adjLava = true;
                }
            }

            if (!Main.playerInventory)
                return;
            var flag = false;
            for (var index = 0; index < 470; ++index)
            {
                if (this.oldAdjTile[index] != this.adjTile[index])
                {
                    flag = true;
                    break;
                }
            }

            if (this.adjWater != this.oldAdjWater)
                flag = true;
            if (this.adjHoney != this.oldAdjHoney)
                flag = true;
            if (this.adjLava != this.oldAdjLava)
                flag = true;
            if (!flag)
                return;
            Recipe.FindRecipes();
        }

        public void PlayerFrame()
        {
            if (this.swimTime > 0)
            {
                --this.swimTime;
                if (!this.wet)
                    this.swimTime = 0;
            }

            this.head = this.armor[0].headSlot;
            this.body = this.armor[1].bodySlot;
            this.legs = this.armor[2].legSlot;
            for (var index = 3; index < 8 + this.extraAccessorySlots; ++index)
            {
                if (this.armor[index].shieldSlot == (sbyte) 5 && this.eocDash > 0 && this.shield == (sbyte) -1)
                    this.shield = this.armor[index].shieldSlot;
                if (this.shieldRaised && this.shield == (sbyte) -1 && this.armor[index].shieldSlot != (sbyte) -1)
                    this.shield = this.armor[index].shieldSlot;
                if ((this.shield <= (sbyte) 0 || this.armor[index].frontSlot < (sbyte) 1 ||
                     this.armor[index].frontSlot > (sbyte) 4) &&
                    (this.front < (sbyte) 1 || this.front > (sbyte) 4 || this.armor[index].shieldSlot <= (sbyte) 0))
                {
                    if (this.armor[index].wingSlot > (sbyte) 0)
                    {
                        if (!this.hideVisual[index] || (double) this.velocity.Y != 0.0 && !this.mount.Active)
                            this.wings = (int) this.armor[index].wingSlot;
                        else
                            continue;
                    }

                    if (!this.hideVisual[index])
                    {
                        if (this.armor[index].stringColor > 0)
                            this.stringColor = this.armor[index].stringColor;
                        if (this.armor[index].handOnSlot > (sbyte) 0)
                            this.handon = this.armor[index].handOnSlot;
                        if (this.armor[index].handOffSlot > (sbyte) 0)
                            this.handoff = this.armor[index].handOffSlot;
                        if (this.armor[index].backSlot > (sbyte) 0)
                        {
                            this.back = this.armor[index].backSlot;
                            this.front = (sbyte) -1;
                        }

                        if (this.armor[index].frontSlot > (sbyte) 0)
                            this.front = this.armor[index].frontSlot;
                        if (this.armor[index].shoeSlot > (sbyte) 0)
                            this.shoe = this.armor[index].shoeSlot;
                        if (this.armor[index].waistSlot > (sbyte) 0)
                            this.waist = this.armor[index].waistSlot;
                        if (this.armor[index].shieldSlot > (sbyte) 0)
                            this.shield = this.armor[index].shieldSlot;
                        if (this.armor[index].neckSlot > (sbyte) 0)
                            this.neck = this.armor[index].neckSlot;
                        if (this.armor[index].faceSlot > (sbyte) 0)
                            this.face = this.armor[index].faceSlot;
                        if (this.armor[index].balloonSlot > (sbyte) 0)
                            this.balloon = this.armor[index].balloonSlot;
                        if (this.armor[index].type == 3580)
                            this.yoraiz0rEye = index - 2;
                        if (this.armor[index].type == 3581)
                            this.yoraiz0rDarkness = true;
                        if (this.armor[index].type == 3929)
                            this.leinforsHair = true;
                    }
                }
            }

            for (var index = 13; index < 18 + this.extraAccessorySlots; ++index)
            {
                if (this.armor[index].stringColor > 0)
                    this.stringColor = this.armor[index].stringColor;
                if (this.armor[index].handOnSlot > (sbyte) 0)
                    this.handon = this.armor[index].handOnSlot;
                if (this.armor[index].handOffSlot > (sbyte) 0)
                    this.handoff = this.armor[index].handOffSlot;
                if (this.armor[index].backSlot > (sbyte) 0)
                {
                    this.back = this.armor[index].backSlot;
                    this.front = (sbyte) -1;
                }

                if (this.armor[index].frontSlot > (sbyte) 0)
                    this.front = this.armor[index].frontSlot;
                if (this.armor[index].shoeSlot > (sbyte) 0)
                    this.shoe = this.armor[index].shoeSlot;
                if (this.armor[index].waistSlot > (sbyte) 0)
                    this.waist = this.armor[index].waistSlot;
                if (this.armor[index].shieldSlot > (sbyte) 0)
                    this.shield = this.armor[index].shieldSlot;
                if (this.armor[index].neckSlot > (sbyte) 0)
                    this.neck = this.armor[index].neckSlot;
                if (this.armor[index].faceSlot > (sbyte) 0)
                    this.face = this.armor[index].faceSlot;
                if (this.armor[index].balloonSlot > (sbyte) 0)
                    this.balloon = this.armor[index].balloonSlot;
                if (this.armor[index].wingSlot > (sbyte) 0)
                    this.wings = (int) this.armor[index].wingSlot;
                if (this.armor[index].type == 3580)
                    this.yoraiz0rEye = index - 2;
                if (this.armor[index].type == 3581)
                    this.yoraiz0rDarkness = true;
                if (this.armor[index].type == 3929)
                    this.leinforsHair = true;
            }

            if (this.armor[10].headSlot >= 0)
                this.head = this.armor[10].headSlot;
            if (this.armor[11].bodySlot >= 0)
                this.body = this.armor[11].bodySlot;
            if (this.armor[12].legSlot >= 0)
                this.legs = this.armor[12].legSlot;
            this.wearsRobe = false;
            var somethingSpecial = false;
            var num1 = Player.SetMatch(1, this.body, this.Male, ref this.wearsRobe);
            if (num1 != -1)
                this.legs = num1;
            var num2 = Player.SetMatch(2, this.legs, this.Male, ref somethingSpecial);
            if (num2 != -1)
                this.legs = num2;
            var num3 = Player.SetMatch(0, this.head, this.Male, ref somethingSpecial);
            if (num3 != -1)
                this.head = num3;
            if (this.body == 93)
            {
                this.shield = (sbyte) 0;
                this.handoff = (sbyte) 0;
            }

            if (this.body == 206 && this.back == (sbyte) -1)
                this.back = (sbyte) 12;
            if (this.body == 207 && this.back == (sbyte) -1)
                this.back = (sbyte) 13;
            if (this.body == 205 && this.back == (sbyte) -1)
                this.back = (sbyte) 11;
            if (this.legs == 67)
                this.shoe = (sbyte) 0;
            if (this.legs == 140)
                this.shoe = (sbyte) 0;
            if ((this.wereWolf || this.forceWerewolf) && !this.hideWolf)
            {
                this.legs = 20;
                this.body = 21;
                this.head = 38;
            }

            var flag = this.wet && !this.lavaWet && (!this.mount.Active || this.mount.Type != 3);
            if (this.merman || this.forceMerman)
            {
                if (!this.hideMerman)
                {
                    this.head = 39;
                    this.legs = 21;
                    this.body = 22;
                }

                if (flag)
                    this.wings = 0;
            }

            this.socialShadowRocketBoots = false;
            this.socialIgnoreLight = false;
            this.socialGhost = false;
            this.armorEffectDrawShadow = false;
            this.armorEffectDrawShadowSubtle = false;
            this.armorEffectDrawOutlines = false;
            this.armorEffectDrawShadowLokis = false;
            this.armorEffectDrawShadowBasilisk = false;
            this.armorEffectDrawOutlinesForbidden = false;
            this.armorEffectDrawShadowEOCShield = false;
            if (this.head == 101 && this.body == 66 && this.legs == 55)
                this.socialGhost = true;
            if (this.head == 156 && this.body == 66 && this.legs == 55)
                this.socialGhost = true;
            this.SetArmorEffectVisuals(this);
            this.hermesStepSound.SoundType = 17;
            this.hermesStepSound.SoundStyle = -1;
            this.hermesStepSound.IntendedCooldown = 9;
            if (this.head == 99 && this.body == 65 && this.legs == 54)
                this.turtleArmor = true;
            if (this.head == 162 && this.body == 170 && this.legs == 105)
                this.spiderArmor = true;
            if ((this.head == 75 || this.head == 7) && (this.body == 7 && this.legs == 7))
                this.boneArmor = true;
            if (this.legs == 140)
            {
                this.hermesStepSound.SoundType = 2;
                this.hermesStepSound.SoundStyle = 24;
                this.hermesStepSound.IntendedCooldown = 6;
            }

            if (this.wings > 0)
            {
                this.back = (sbyte) -1;
                this.front = (sbyte) -1;
            }

            if (this.head > 0 && this.face != (sbyte) 7)
                this.face = (sbyte) -1;
            if (this.webbed || this.frozen || this.stoned || Main.gamePaused && !Main.gameMenu)
                return;
            if ((this.body == 68 && this.legs == 57 && this.head == 106 ||
                 this.body == 74 && this.legs == 63 && this.head == 106) && Main.rand.Next(10) == 0)
            {
                var index = Dust.NewDust(
                    new Vector2(this.position.X - this.velocity.X * 2f,
                        (float) ((double) this.position.Y - 2.0 - (double) this.velocity.Y * 2.0)), this.width,
                    this.height, 43, 0.0f, 0.0f, 100, new Color((int) byte.MaxValue, 0, (int) byte.MaxValue), 0.3f);
                Main.dust[index].fadeIn = 0.8f;
                Main.dust[index].noGravity = true;
                Main.dust[index].velocity *= 2f;
                Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
            }

            if (this.wings == 27)
            {
                var R = 0.4f * this.stealth;
                Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, R, R * 0.9f, R * 0.2f);
            }

            if (this.head == 5 && this.body == 5 && this.legs == 5)
                this.socialShadowRocketBoots = true;
            if (this.head == 5 && this.body == 5 && (this.legs == 5 && Main.rand.Next(10) == 0))
            {
                var index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14,
                    0.0f, 0.0f, 200, new Color(), 1.2f);
                Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
            }

            if (this.head == 76 && this.body == 49 && this.legs == 45)
                this.socialShadowRocketBoots = true;
            if (this.head == 74 && this.body == 48 && this.legs == 44)
                this.socialShadowRocketBoots = true;
            if (this.head == 74 && this.body == 48 && (this.legs == 44 && Main.rand.Next(10) == 0))
            {
                var index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14,
                    0.0f, 0.0f, 200, new Color(), 1.2f);
                Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
            }

            if (this.head == 57 && this.body == 37 && this.legs == 35)
            {
                var maxValue = 10;
                if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) > 1.0)
                    maxValue = 2;
                if (Main.rand.Next(maxValue) == 0)
                {
                    var index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        115, 0.0f, 0.0f, 140, new Color(), 0.75f);
                    Main.dust[index].noGravity = true;
                    Main.dust[index].fadeIn = 1.5f;
                    Main.dust[index].velocity *= 0.3f;
                    Main.dust[index].velocity += this.velocity * 0.2f;
                    Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                }
            }

            if (this.head == 6 && this.body == 6 &&
                (this.legs == 6 && (double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) > 1.0) &&
                !this.rocketFrame)
            {
                for (var index1 = 0; index1 < 2; ++index1)
                {
                    var index2 =
                        Dust.NewDust(
                            new Vector2(this.position.X - this.velocity.X * 2f,
                                (float) ((double) this.position.Y - 2.0 - (double) this.velocity.Y * 2.0)), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 2f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].noLight = true;
                    Main.dust[index2].velocity.X -= this.velocity.X * 0.5f;
                    Main.dust[index2].velocity.Y -= this.velocity.Y * 0.5f;
                    Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                }
            }

            if (this.head == 8 && this.body == 8 && (this.legs == 8 &&
                                                     (double) Math.Abs(this.velocity.X) +
                                                     (double) Math.Abs(this.velocity.Y) > 1.0))
            {
                var index = Dust.NewDust(
                    new Vector2(this.position.X - this.velocity.X * 2f,
                        (float) ((double) this.position.Y - 2.0 - (double) this.velocity.Y * 2.0)), this.width,
                    this.height, 40, 0.0f, 0.0f, 50, new Color(), 1.4f);
                Main.dust[index].noGravity = true;
                Main.dust[index].velocity.X = this.velocity.X * 0.25f;
                Main.dust[index].velocity.Y = this.velocity.Y * 0.25f;
                Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
            }

            if (this.head == 9 && this.body == 9 &&
                (this.legs == 9 && (double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) > 1.0) &&
                !this.rocketFrame)
            {
                for (var index1 = 0; index1 < 2; ++index1)
                {
                    var index2 =
                        Dust.NewDust(
                            new Vector2(this.position.X - this.velocity.X * 2f,
                                (float) ((double) this.position.Y - 2.0 - (double) this.velocity.Y * 2.0)), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 2f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].noLight = true;
                    Main.dust[index2].velocity.X -= this.velocity.X * 0.5f;
                    Main.dust[index2].velocity.Y -= this.velocity.Y * 0.5f;
                    Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                }
            }

            if (this.body == 18 && this.legs == 17 && (this.head == 32 || this.head == 33 || this.head == 34) &&
                Main.rand.Next(10) == 0)
            {
                var index = Dust.NewDust(
                    new Vector2(this.position.X - this.velocity.X * 2f,
                        (float) ((double) this.position.Y - 2.0 - (double) this.velocity.Y * 2.0)), this.width,
                    this.height, 43, 0.0f, 0.0f, 100, new Color(), 0.3f);
                Main.dust[index].fadeIn = 0.8f;
                Main.dust[index].velocity *= 0.0f;
                Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
            }

            if (this.body == 24 && this.legs == 23 && (this.head == 42 || this.head == 43 || this.head == 41) &&
                ((double) this.velocity.X != 0.0 && (double) this.velocity.Y != 0.0 && Main.rand.Next(10) == 0))
            {
                var index = Dust.NewDust(
                    new Vector2(this.position.X - this.velocity.X * 2f,
                        (float) ((double) this.position.Y - 2.0 - (double) this.velocity.Y * 2.0)), this.width,
                    this.height, 43, 0.0f, 0.0f, 100, new Color(), 0.3f);
                Main.dust[index].fadeIn = 0.8f;
                Main.dust[index].velocity *= 0.0f;
                Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
            }

            if (this.body == 36 && this.head == 56 &&
                ((double) this.velocity.X != 0.0 && (double) this.velocity.Y == 0.0))
            {
                for (var index1 = 0; index1 < 2; ++index1)
                {
                    var index2 =
                        Dust.NewDust(
                            new Vector2(this.position.X,
                                this.position.Y + ((double) this.gravDir == 1.0 ? (float) (this.height - 2) : -4f)),
                            this.width, 6, 106, 0.0f, 0.0f, 100, new Color(), 0.1f);
                    Main.dust[index2].fadeIn = 1f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 0.2f;
                    Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                }
            }

            if (this.body == 27 && this.head == 46 && this.legs == 26)
            {
                this.frostArmor = true;
                if ((double) this.velocity.X != 0.0 && (double) this.velocity.Y == 0.0 && this.miscCounter % 2 == 0)
                {
                    for (var index1 = 0; index1 < 2; ++index1)
                    {
                        var index2 = index1 != 0
                            ? Dust.NewDust(
                                new Vector2(this.position.X + (float) (this.width / 2),
                                    this.position.Y + (float) this.height + this.gfxOffY), this.width / 2, 6, 76, 0.0f,
                                0.0f, 0, new Color(), 1.35f)
                            : Dust.NewDust(
                                new Vector2(this.position.X, this.position.Y + (float) this.height + this.gfxOffY),
                                this.width / 2, 6, 76, 0.0f, 0.0f, 0, new Color(), 1.35f);
                        Main.dust[index2].scale *=
                            (float) (1.0 + (double) Main.rand.Next(20, 40) * 0.00999999977648258);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].noLight = true;
                        Main.dust[index2].velocity *= 1f / 1000f;
                        Main.dust[index2].velocity.Y -= 3f / 1000f;
                        Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                    }
                }
            }

            if (this.mount.Active)
            {
                this.legFrameCounter = 0.0;
                this.legFrame.Y = this.legFrame.Height * 6;
                if ((double) this.velocity.Y != 0.0)
                {
                    if (this.mount.FlyTime > 0 && this.jump == 0 && (this.controlJump && !this.mount.CanHover))
                    {
                        if (this.mount.Type == 0)
                        {
                            if (this.direction > 0)
                            {
                                if (Main.rand.Next(4) == 0)
                                {
                                    var index = Dust.NewDust(
                                        new Vector2(this.Center.X - 22f,
                                            (float) ((double) this.position.Y + (double) this.height - 6.0)), 20, 10,
                                        64, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, (int) byte.MaxValue,
                                        new Color(), 1f);
                                    Main.dust[index].velocity *= 0.1f;
                                    Main.dust[index].noLight = true;
                                }

                                if (Main.rand.Next(4) == 0)
                                {
                                    var index = Dust.NewDust(
                                        new Vector2(this.Center.X + 12f,
                                            (float) ((double) this.position.Y + (double) this.height - 6.0)), 20, 10,
                                        64, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, (int) byte.MaxValue,
                                        new Color(), 1f);
                                    Main.dust[index].velocity *= 0.1f;
                                    Main.dust[index].noLight = true;
                                }
                            }
                            else
                            {
                                if (Main.rand.Next(4) == 0)
                                {
                                    var index = Dust.NewDust(
                                        new Vector2(this.Center.X - 32f,
                                            (float) ((double) this.position.Y + (double) this.height - 6.0)), 20, 10,
                                        64, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, (int) byte.MaxValue,
                                        new Color(), 1f);
                                    Main.dust[index].velocity *= 0.1f;
                                    Main.dust[index].noLight = true;
                                }

                                if (Main.rand.Next(4) == 0)
                                {
                                    var index = Dust.NewDust(
                                        new Vector2(this.Center.X + 2f,
                                            (float) ((double) this.position.Y + (double) this.height - 6.0)), 20, 10,
                                        64, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, (int) byte.MaxValue,
                                        new Color(), 1f);
                                    Main.dust[index].velocity *= 0.1f;
                                    Main.dust[index].noLight = true;
                                }
                            }
                        }

                        this.mount.UpdateFrame(this, 3, this.velocity);
                    }
                    else if (this.wet)
                        this.mount.UpdateFrame(this, 4, this.velocity);
                    else
                        this.mount.UpdateFrame(this, 2, this.velocity);
                }
                else if ((double) this.velocity.X == 0.0 || (this.slippy || this.slippy2 || this.windPushed) &&
                         (!this.controlLeft && !this.controlRight))
                    this.mount.UpdateFrame(this, 0, this.velocity);
                else
                    this.mount.UpdateFrame(this, 1, this.velocity);
            }
            else if (this.legs == 140)
            {
                this.legFrameCounter = 0.0;
                this.legFrame.Y = this.legFrame.Height * ((double) this.velocity.Y != 0.0).ToInt();
                if (this.wings == 22 || this.wings == 28)
                    this.legFrame.Y = 0;
            }
            else if (this.swimTime > 0)
            {
                this.legFrameCounter += 2.0;
                while (this.legFrameCounter > 8.0)
                {
                    this.legFrameCounter -= 8.0;
                    this.legFrame.Y += this.legFrame.Height;
                }

                if (this.legFrame.Y < this.legFrame.Height * 7)
                    this.legFrame.Y = this.legFrame.Height * 19;
                else if (this.legFrame.Y > this.legFrame.Height * 19)
                    this.legFrame.Y = this.legFrame.Height * 7;
            }
            else if ((double) this.velocity.Y != 0.0 || this.grappling[0] > -1)
            {
                this.legFrameCounter = 0.0;
                this.legFrame.Y = this.legFrame.Height * 5;
                if (this.wings == 22 || this.wings == 28)
                    this.legFrame.Y = 0;
            }
            else if ((double) this.velocity.X != 0.0)
            {
                if ((this.slippy || this.slippy2 || this.windPushed) && (!this.controlLeft && !this.controlRight))
                {
                    this.legFrameCounter = 0.0;
                    this.legFrame.Y = 0;
                }
                else
                {
                    this.legFrameCounter += (double) Math.Abs(this.velocity.X) * 1.3;
                    while (this.legFrameCounter > 8.0)
                    {
                        this.legFrameCounter -= 8.0;
                        this.legFrame.Y += this.legFrame.Height;
                    }

                    if (this.legFrame.Y < this.legFrame.Height * 7)
                        this.legFrame.Y = this.legFrame.Height * 19;
                    else if (this.legFrame.Y > this.legFrame.Height * 19)
                        this.legFrame.Y = this.legFrame.Height * 7;
                }
            }
            else
            {
                this.legFrameCounter = 0.0;
                this.legFrame.Y = 0;
            }

            if (this.carpetFrame >= 0)
            {
                this.legFrameCounter = 0.0;
                this.legFrame.Y = 0;
            }

            if (this.sandStorm)
            {
                if (this.miscCounter % 4 == 0 && this.itemAnimation == 0)
                {
                    this.ChangeDir(this.direction * -1);
                    if (this.inventory[this.selectedItem].holdStyle == 2)
                    {
                        if (this.inventory[this.selectedItem].type == 946)
                            this.itemLocation.X = this.position.X + (float) this.width * 0.5f -
                                                  (float) (16 * this.direction);
                        if (this.inventory[this.selectedItem].type == 186)
                        {
                            this.itemLocation.X =
                                this.position.X + (float) this.width * 0.5f + (float) (6 * this.direction);
                            this.itemRotation = 0.79f * (float) -this.direction;
                        }
                    }
                }

                this.legFrameCounter = 0.0;
                this.legFrame.Y = 0;
            }

            if (this.itemAnimation > 0 && this.inventory[this.selectedItem].useStyle != 10)
            {
                if (this.inventory[this.selectedItem].useStyle == 1 || this.inventory[this.selectedItem].type == 0)
                {
                    if ((double) this.itemAnimation < (double) this.itemAnimationMax * 0.333)
                        this.bodyFrame.Y = this.bodyFrame.Height * 3;
                    else if ((double) this.itemAnimation < (double) this.itemAnimationMax * 0.666)
                        this.bodyFrame.Y = this.bodyFrame.Height * 2;
                    else
                        this.bodyFrame.Y = this.bodyFrame.Height;
                }
                else if (this.inventory[this.selectedItem].useStyle == 2)
                {
                    if ((double) this.itemAnimation > (double) this.itemAnimationMax * 0.5)
                        this.bodyFrame.Y = this.bodyFrame.Height * 3;
                    else
                        this.bodyFrame.Y = this.bodyFrame.Height * 2;
                }
                else if (this.inventory[this.selectedItem].useStyle == 3)
                {
                    if ((double) this.itemAnimation > (double) this.itemAnimationMax * 0.666)
                        this.bodyFrame.Y = this.bodyFrame.Height * 3;
                    else
                        this.bodyFrame.Y = this.bodyFrame.Height * 3;
                }
                else if (this.inventory[this.selectedItem].useStyle == 4)
                {
                    this.bodyFrame.Y = this.bodyFrame.Height * 2;
                }
                else
                {
                    if (this.inventory[this.selectedItem].useStyle != 5)
                        return;
                    if (this.inventory[this.selectedItem].type == 281 || this.inventory[this.selectedItem].type == 986)
                    {
                        this.bodyFrame.Y = this.bodyFrame.Height * 2;
                    }
                    else
                    {
                        var num4 = this.itemRotation * (float) this.direction;
                        this.bodyFrame.Y = this.bodyFrame.Height * 3;
                        if ((double) num4 < -0.75)
                        {
                            this.bodyFrame.Y = this.bodyFrame.Height * 2;
                            if ((double) this.gravDir == -1.0)
                                this.bodyFrame.Y = this.bodyFrame.Height * 4;
                        }

                        if ((double) num4 <= 0.6)
                            return;
                        this.bodyFrame.Y = this.bodyFrame.Height * 4;
                        if ((double) this.gravDir != -1.0)
                            return;
                        this.bodyFrame.Y = this.bodyFrame.Height * 2;
                    }
                }
            }
            else if (this.mount.Active)
            {
                this.bodyFrameCounter = 0.0;
                this.bodyFrame.Y = this.bodyFrame.Height * this.mount.BodyFrame;
            }
            else if (this.pulley)
            {
                if (this.pulleyDir == (byte) 2)
                    this.bodyFrame.Y = this.bodyFrame.Height;
                else
                    this.bodyFrame.Y = this.bodyFrame.Height * 2;
            }
            else if (this.inventory[this.selectedItem].holdStyle == 1 &&
                     (!this.wet || !this.inventory[this.selectedItem].noWet))
                this.bodyFrame.Y = this.bodyFrame.Height * 3;
            else if (this.inventory[this.selectedItem].holdStyle == 2 &&
                     (!this.wet || !this.inventory[this.selectedItem].noWet))
                this.bodyFrame.Y = this.bodyFrame.Height * 2;
            else if (this.inventory[this.selectedItem].holdStyle == 3)
                this.bodyFrame.Y = this.bodyFrame.Height * 3;
            else if (this.shieldRaised)
                this.bodyFrame.Y = this.bodyFrame.Height * 10;
            else if (this.grappling[0] >= 0)
            {
                this.sandStorm = false;
                this.dJumpEffectCloud = false;
                this.dJumpEffectSandstorm = false;
                this.dJumpEffectBlizzard = false;
                this.dJumpEffectFart = false;
                this.dJumpEffectSail = false;
                this.dJumpEffectUnicorn = false;
                var vector2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                    this.position.Y + (float) this.height * 0.5f);
                var num4 = 0.0f;
                var num5 = 0.0f;
                for (var index = 0; index < this.grapCount; ++index)
                {
                    num4 += Main.projectile[this.grappling[index]].position.X +
                            (float) (Main.projectile[this.grappling[index]].width / 2);
                    num5 += Main.projectile[this.grappling[index]].position.Y +
                            (float) (Main.projectile[this.grappling[index]].height / 2);
                }

                var num6 = num4 / (float) this.grapCount;
                var num7 = num5 / (float) this.grapCount;
                var num8 = num6 - vector2.X;
                var num9 = num7 - vector2.Y;
                if ((double) num9 < 0.0 && (double) Math.Abs(num9) > (double) Math.Abs(num8))
                {
                    this.bodyFrame.Y = this.bodyFrame.Height * 2;
                    if ((double) this.gravDir != -1.0)
                        return;
                    this.bodyFrame.Y = this.bodyFrame.Height * 4;
                }
                else if ((double) num9 > 0.0 && (double) Math.Abs(num9) > (double) Math.Abs(num8))
                {
                    this.bodyFrame.Y = this.bodyFrame.Height * 4;
                    if ((double) this.gravDir != -1.0)
                        return;
                    this.bodyFrame.Y = this.bodyFrame.Height * 2;
                }
                else
                    this.bodyFrame.Y = this.bodyFrame.Height * 3;
            }
            else if (this.swimTime > 0)
            {
                if (this.swimTime > 20)
                    this.bodyFrame.Y = 0;
                else if (this.swimTime > 10)
                    this.bodyFrame.Y = this.bodyFrame.Height * 5;
                else
                    this.bodyFrame.Y = 0;
            }
            else if ((double) this.velocity.Y != 0.0)
            {
                this.bodyFrame.Y = !this.sliding
                    ? (this.sandStorm || this.carpetFrame >= 0
                        ? this.bodyFrame.Height * 6
                        : (this.eocDash <= 0
                            ? (this.wings <= 0
                                ? this.bodyFrame.Height * 5
                                : (this.wings == 22 || this.wings == 28
                                    ? 0
                                    : ((double) this.velocity.Y <= 0.0
                                        ? this.bodyFrame.Height * 6
                                        : (!this.controlJump ? this.bodyFrame.Height * 5 : this.bodyFrame.Height * 6))))
                            : this.bodyFrame.Height * 6))
                    : this.bodyFrame.Height * 3;
                this.bodyFrameCounter = 0.0;
            }
            else if ((double) this.velocity.X != 0.0)
            {
                if (this.legs == 140)
                {
                    this.bodyFrameCounter += (double) Math.Abs(this.velocity.X) * 0.5;
                    while (this.bodyFrameCounter > 8.0)
                    {
                        this.bodyFrameCounter -= 8.0;
                        this.bodyFrame.Y += this.bodyFrame.Height;
                    }

                    if (this.bodyFrame.Y < this.bodyFrame.Height * 7)
                    {
                        this.bodyFrame.Y = this.bodyFrame.Height * 19;
                    }
                    else
                    {
                        if (this.bodyFrame.Y <= this.bodyFrame.Height * 19)
                            return;
                        this.bodyFrame.Y = this.bodyFrame.Height * 7;
                    }
                }
                else
                {
                    this.bodyFrameCounter += (double) Math.Abs(this.velocity.X) * 1.5;
                    this.bodyFrame.Y = this.legFrame.Y;
                }
            }
            else
            {
                this.bodyFrameCounter = 0.0;
                this.bodyFrame.Y = 0;
            }
        }

        public void SetArmorEffectVisuals(Player drawPlayer)
        {
            if (drawPlayer.head == 111 && drawPlayer.body == 73 && drawPlayer.legs == 62)
            {
                this.armorEffectDrawShadowSubtle = true;
                this.armorEffectDrawOutlines = true;
            }

            if (drawPlayer.head == 134 && drawPlayer.body == 95 && drawPlayer.legs == 79)
            {
                this.armorEffectDrawShadowSubtle = true;
                this.armorEffectDrawOutlines = true;
            }

            if (drawPlayer.head == 107 && drawPlayer.body == 69 && drawPlayer.legs == 58)
            {
                this.armorEffectDrawShadowSubtle = true;
                this.armorEffectDrawShadow = true;
            }

            if (drawPlayer.head == 108 && drawPlayer.body == 70 && drawPlayer.legs == 59)
            {
                this.armorEffectDrawShadowSubtle = true;
                this.armorEffectDrawShadow = true;
            }

            if (drawPlayer.head == 109 && drawPlayer.body == 71 && drawPlayer.legs == 60)
            {
                this.armorEffectDrawShadowSubtle = true;
                this.armorEffectDrawShadow = true;
            }

            if (drawPlayer.head == 110 && drawPlayer.body == 72 && drawPlayer.legs == 61)
            {
                this.armorEffectDrawShadowSubtle = true;
                this.armorEffectDrawShadow = true;
            }

            if (drawPlayer.head == 193 && drawPlayer.body == 194 && drawPlayer.legs == 134)
            {
                this.armorEffectDrawShadowSubtle = true;
                this.armorEffectDrawShadowLokis = true;
                this.armorEffectDrawOutlines = true;
            }

            if (drawPlayer.mount.Active && drawPlayer.mount.Type == 3 &&
                ((double) drawPlayer.velocity.Y != 0.0 && !drawPlayer.SlimeDontHyperJump))
                this.armorEffectDrawShadow = true;
            if (drawPlayer.mount.Active && drawPlayer.mount.Type == 10 && (double) Math.Abs(drawPlayer.velocity.X) >
                (double) drawPlayer.mount.DashSpeed - (double) drawPlayer.mount.RunSpeed / 2.0)
                this.armorEffectDrawShadow = true;
            if (drawPlayer.mount.Active && drawPlayer.mount.Type == 14 && (double) Math.Abs(drawPlayer.velocity.X) >
                (double) drawPlayer.mount.RunSpeed / 2.0)
                this.armorEffectDrawShadowBasilisk = true;
            if (drawPlayer.body == 67 && drawPlayer.legs == 56 && (drawPlayer.head >= 103 && drawPlayer.head <= 105))
                this.armorEffectDrawShadow = true;
            if ((drawPlayer.head == 78 || drawPlayer.head == 79 || drawPlayer.head == 80) &&
                (drawPlayer.body == 51 && drawPlayer.legs == 47))
                this.armorEffectDrawShadowSubtle = true;
            if (drawPlayer.head == 200 && drawPlayer.body == 198 && drawPlayer.legs == 142)
            {
                this.armorEffectDrawShadowLokis = true;
                this.armorEffectDrawOutlinesForbidden = true;
            }

            if (drawPlayer.head == 171 && drawPlayer.body == 177 && drawPlayer.legs == 112)
            {
                this.armorEffectDrawShadow = true;
                this.armorEffectDrawOutlines = true;
            }

            if (drawPlayer.head == 169 && drawPlayer.body == 175 && drawPlayer.legs == 110)
                this.armorEffectDrawShadow = true;
            if (drawPlayer.head == 170 && drawPlayer.body == 176 && drawPlayer.legs == 111)
            {
                this.armorEffectDrawShadowLokis = true;
                this.armorEffectDrawOutlines = true;
            }

            if (drawPlayer.body == 209 && drawPlayer.legs == 159)
                this.armorEffectDrawShadow = true;
            if (drawPlayer.eocDash > 0)
                this.armorEffectDrawShadowEOCShield = true;
            else if (drawPlayer.dashDelay < 0)
                this.armorEffectDrawShadow = true;
            if (drawPlayer.head == 5 && drawPlayer.body == 5 && drawPlayer.legs == 5)
                this.armorEffectDrawShadow = true;
            if (drawPlayer.head == 74 && drawPlayer.body == 48 && drawPlayer.legs == 44)
                this.armorEffectDrawShadow = true;
            if (drawPlayer.head == 76 && drawPlayer.body == 49 && drawPlayer.legs == 45)
                this.armorEffectDrawShadow = true;
            if (drawPlayer.head == 7 && drawPlayer.body == 7 && drawPlayer.legs == 7)
                this.armorEffectDrawShadow = true;
            if (drawPlayer.head == 22 && drawPlayer.body == 14 && drawPlayer.legs == 14)
                this.armorEffectDrawShadow = true;
            if (drawPlayer.dye[0].dye == (byte) 30 && drawPlayer.dye[1].dye == (byte) 30 &&
                (drawPlayer.dye[2].dye == (byte) 30 && drawPlayer.head == 4) &&
                (drawPlayer.body == 27 && drawPlayer.legs == 26))
            {
                this.armorEffectDrawShadow = true;
                this.armorEffectDrawOutlines = true;
            }

            if (drawPlayer.head == 189 && drawPlayer.body == 190 && drawPlayer.legs == 130)
                this.armorEffectDrawOutlines = true;
            if (drawPlayer.body == 17 && drawPlayer.legs == 16 &&
                (drawPlayer.head == 29 || drawPlayer.head == 30 || drawPlayer.head == 31))
                this.armorEffectDrawShadow = true;
            if (drawPlayer.body == 19 && drawPlayer.legs == 18 &&
                (drawPlayer.head == 35 || drawPlayer.head == 36 || drawPlayer.head == 37))
                this.armorEffectDrawOutlines = true;
            if (drawPlayer.body == 24 && drawPlayer.legs == 23 &&
                (drawPlayer.head == 41 || drawPlayer.head == 42 || drawPlayer.head == 43))
            {
                this.armorEffectDrawOutlines = true;
                this.armorEffectDrawShadow = true;
            }

            if (drawPlayer.head == 157 && drawPlayer.legs == 98 && drawPlayer.body != 105)
            {
                var body = drawPlayer.body;
            }

            if (drawPlayer.body == 36 && drawPlayer.head == 56)
                this.armorEffectDrawOutlines = true;
            if (!drawPlayer.stoned && (double) drawPlayer.stealth == 1.0)
                return;
            this.armorEffectDrawOutlines = false;
            this.armorEffectDrawShadow = false;
            this.armorEffectDrawShadowSubtle = false;
        }

        public static int SetMatch(int armorslot, int type, bool male, ref bool somethingSpecial)
        {
            var num = -1;
            if (armorslot == 0 && type == 201)
                num = male ? 201 : 202;
            if (armorslot == 1)
            {
                switch (type)
                {
                    case 15:
                        num = 88;
                        break;
                    case 36:
                        num = 89;
                        break;
                    case 41:
                        num = 97;
                        break;
                    case 42:
                        num = 90;
                        break;
                    case 58:
                        num = 91;
                        break;
                    case 59:
                        num = 92;
                        break;
                    case 60:
                        num = 93;
                        break;
                    case 61:
                        num = 94;
                        break;
                    case 62:
                        num = 95;
                        break;
                    case 63:
                        num = 96;
                        break;
                    case 77:
                        num = 121;
                        break;
                    case 165:
                        num = !male ? 99 : 118;
                        break;
                    case 166:
                        num = !male ? 100 : 119;
                        break;
                    case 167:
                        num = male ? 101 : 102;
                        break;
                    case 180:
                        num = 115;
                        break;
                    case 181:
                        num = 116;
                        break;
                    case 183:
                        num = male ? 136 : 123;
                        break;
                    case 191:
                        num = 131;
                        break;
                }

                if (num != -1)
                    somethingSpecial = true;
            }

            if (armorslot == 2)
            {
                switch (type)
                {
                    case 57:
                        if (male)
                        {
                            num = 137;
                            break;
                        }

                        break;
                    case 83:
                        if (male)
                        {
                            num = 117;
                            break;
                        }

                        break;
                    case 84:
                        if (male)
                        {
                            num = 120;
                            break;
                        }

                        break;
                    case 132:
                        if (male)
                        {
                            num = 135;
                            break;
                        }

                        break;
                    case 146:
                        num = male ? 146 : 147;
                        break;
                    case 154:
                        num = male ? 155 : 154;
                        break;
                    case 158:
                        if (male)
                        {
                            num = 157;
                            break;
                        }

                        break;
                }
            }

            return num;
        }

        public void Teleport(Vector2 newPos, int Style = 0, int extraInfo = 0)
        {
            try
            {
                this.grappling[0] = -1;
                this.grapCount = 0;
                for (var index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].owner == this.whoAmI &&
                        Main.projectile[index].aiStyle == 7)
                        Main.projectile[index].Kill();
                }

                var extraInfo1 = 0;
                if (Style == 4)
                    extraInfo1 = this.lastPortalColorIndex;
                var dustCountMult = MathHelper.Clamp((float) (1.0 - (double) this.teleportTime * 0.990000009536743),
                    0.01f, 1f);
                Main.TeleportEffect(this.getRect(), Style, extraInfo1, dustCountMult);
                var num = Vector2.Distance(this.position, newPos);
                PressurePlateHelper.UpdatePlayerPosition(this);
                this.position = newPos;
                this.fallStart = (int) ((double) this.position.Y / 16.0);
                if (this.whoAmI == Main.myPlayer)
                {
                    var flag = false;
                    if ((double) num <
                        (double) new Vector2((float) Main.screenWidth, (float) Main.screenHeight).Length() / 2.0 +
                        100.0)
                    {
                        var time = 0;
                        if (Style == 1)
                            time = 10;
                        Main.SetCameraLerp(0.1f, time);
                        flag = true;
                    }
                    else
                    {
                        Main.BlackFadeIn = (int) byte.MaxValue;
                        Lighting.BlackOut();
                        Main.screenLastPosition = Main.screenPosition;
                        Main.screenPosition.X =
                            this.position.X + (float) (this.width / 2) - (float) (Main.screenWidth / 2);
                        Main.screenPosition.Y =
                            this.position.Y + (float) (this.height / 2) - (float) (Main.screenHeight / 2);
                        Main.quickBG = 10;
                    }

                    if ((double) dustCountMult > 0.100000001490116 || !flag || Style != 0)
                    {
                        if (Main.mapTime < 5)
                            Main.mapTime = 5;
                        Main.maxQ = true;
                        Main.renderNow = true;
                    }
                }

                if (Style == 4)
                {
                    this.lastPortalColorIndex = extraInfo;
                    extraInfo1 = this.lastPortalColorIndex;
                    this.portalPhysicsFlag = true;
                    this.gravity = 0.0f;
                }

                PressurePlateHelper.UpdatePlayerPosition(this);
                for (var index = 0; index < 3; ++index)
                    this.UpdateSocialShadow();
                this.oldPosition = this.position + this.BlehOldPositionFixer;
                Main.TeleportEffect(this.getRect(), Style, extraInfo1, dustCountMult);
                this.teleportTime = 1f;
                this.teleportStyle = Style;
            }
            catch
            {
            }
        }

        public void Spawn()
        {
            Main.InitLifeBytes();
            if (this.whoAmI == Main.myPlayer)
            {
                if (Main.mapTime < 5)
                    Main.mapTime = 5;
                Main.quickBG = 10;
                this.FindSpawn();
                if (!Player.CheckSpawn(this.SpawnX, this.SpawnY))
                {
                    this.SpawnX = -1;
                    this.SpawnY = -1;
                }

                Main.maxQ = true;
            }

            if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
            {
                NetMessage.SendData(12, -1, -1, (NetworkText) null, Main.myPlayer, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                Main.gameMenu = false;
            }

            this.headPosition = Vector2.Zero;
            this.bodyPosition = Vector2.Zero;
            this.legPosition = Vector2.Zero;
            this.headRotation = 0.0f;
            this.bodyRotation = 0.0f;
            this.legRotation = 0.0f;
            this.lavaTime = this.lavaMax;
            if (this.statLife <= 0)
            {
                var num = this.statLifeMax2 / 2;
                this.statLife = 100;
                if (num > this.statLife)
                    this.statLife = num;
                this.breath = this.breathMax;
                if (this.spawnMax)
                {
                    this.statLife = this.statLifeMax2;
                    this.statMana = this.statManaMax2;
                }
            }

            this.immune = true;
            this.dead = false;
            this.immuneTime = 0;
            this.active = true;
            if (this.SpawnX >= 0 && this.SpawnY >= 0)
            {
                this.position.X = (float) (this.SpawnX * 16 + 8 - this.width / 2);
                this.position.Y = (float) (this.SpawnY * 16 - this.height);
            }
            else
            {
                this.position.X = (float) (Main.spawnTileX * 16 + 8 - this.width / 2);
                this.position.Y = (float) (Main.spawnTileY * 16 - this.height);
                for (var i = Main.spawnTileX - 1; i < Main.spawnTileX + 2; ++i)
                {
                    for (var j = Main.spawnTileY - 3; j < Main.spawnTileY; ++j)
                    {
                        if (Main.tile[i, j] != null)
                        {
                            if (Main.tileSolid[(int) Main.tile[i, j].type] &&
                                !Main.tileSolidTop[(int) Main.tile[i, j].type])
                                WorldGen.KillTile(i, j, false, false, false);
                            if (Main.tile[i, j].liquid > (byte) 0)
                            {
                                Main.tile[i, j].lava(false);
                                Main.tile[i, j].liquid = (byte) 0;
                                WorldGen.SquareTileFrame(i, j, true);
                            }
                        }
                    }
                }
            }

            this.wet = false;
            this.wetCount = (byte) 0;
            this.lavaWet = false;
            this.fallStart = (int) ((double) this.position.Y / 16.0);
            this.fallStart2 = this.fallStart;
            this.velocity.X = 0.0f;
            this.velocity.Y = 0.0f;
            for (var index = 0; index < 3; ++index)
                this.UpdateSocialShadow();
            this.oldPosition = this.position + this.BlehOldPositionFixer;
            this.talkNPC = -1;
            if (this.whoAmI == Main.myPlayer)
                Main.npcChatCornerItem = 0;
            if (this.pvpDeath)
            {
                this.pvpDeath = false;
                this.immuneTime = 300;
                this.statLife = this.statLifeMax;
            }
            else
                this.immuneTime = 60;

            if (this.whoAmI != Main.myPlayer)
                return;
            Main.BlackFadeIn = (int) byte.MaxValue;
            Main.renderNow = true;
            if (Main.netMode == 1)
                Netplay.newRecent();
            Main.screenPosition.X = this.position.X + (float) (this.width / 2) - (float) (Main.screenWidth / 2);
            Main.screenPosition.Y = this.position.Y + (float) (this.height / 2) - (float) (Main.screenHeight / 2);
        }

        public void ShadowDodge()
        {
            this.immune = true;
            this.immuneTime = 80;
            if (this.longInvince)
                this.immuneTime += 40;
            for (var index = 0; index < this.hurtCooldowns.Length; ++index)
                this.hurtCooldowns[index] = this.immuneTime;
            if (this.whoAmI != Main.myPlayer)
                return;
            for (var b = 0; b < 22; ++b)
            {
                if (this.buffTime[b] > 0 && this.buffType[b] == 59)
                    this.DelBuff(b);
            }

            NetMessage.SendData(62, -1, -1, (NetworkText) null, this.whoAmI, 2f, 0.0f, 0.0f, 0, 0, 0);
        }

        public void NinjaDodge()
        {
            this.immune = true;
            this.immuneTime = 80;
            if (this.longInvince)
                this.immuneTime += 40;
            for (var index = 0; index < this.hurtCooldowns.Length; ++index)
                this.hurtCooldowns[index] = this.immuneTime;
            for (var index1 = 0; index1 < 100; ++index1)
            {
                var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31,
                    0.0f, 0.0f, 100, new Color(), 2f);
                Main.dust[index2].position.X += (float) Main.rand.Next(-20, 21);
                Main.dust[index2].position.Y += (float) Main.rand.Next(-20, 21);
                Main.dust[index2].velocity *= 0.4f;
                Main.dust[index2].scale *= (float) (1.0 + (double) Main.rand.Next(40) * 0.00999999977648258);
                Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cWaist, this);
                if (Main.rand.Next(2) == 0)
                {
                    Main.dust[index2].scale *= (float) (1.0 + (double) Main.rand.Next(40) * 0.00999999977648258);
                    Main.dust[index2].noGravity = true;
                }
            }

            var index3 =
                Gore.NewGore(
                    new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0),
                        (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)), new Vector2(),
                    Main.rand.Next(61, 64), 1f);
            Main.gore[index3].scale = 1.5f;
            Main.gore[index3].velocity.X = (float) Main.rand.Next(-50, 51) * 0.01f;
            Main.gore[index3].velocity.Y = (float) Main.rand.Next(-50, 51) * 0.01f;
            Main.gore[index3].velocity *= 0.4f;
            var index4 =
                Gore.NewGore(
                    new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0),
                        (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)), new Vector2(),
                    Main.rand.Next(61, 64), 1f);
            Main.gore[index4].scale = 1.5f;
            Main.gore[index4].velocity.X = (float) (1.5 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
            Main.gore[index4].velocity.Y = (float) (1.5 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
            Main.gore[index4].velocity *= 0.4f;
            var index5 =
                Gore.NewGore(
                    new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0),
                        (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)), new Vector2(),
                    Main.rand.Next(61, 64), 1f);
            Main.gore[index5].scale = 1.5f;
            Main.gore[index5].velocity.X = (float) (-1.5 - (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
            Main.gore[index5].velocity.Y = (float) (1.5 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
            Main.gore[index5].velocity *= 0.4f;
            var index6 =
                Gore.NewGore(
                    new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0),
                        (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)), new Vector2(),
                    Main.rand.Next(61, 64), 1f);
            Main.gore[index6].scale = 1.5f;
            Main.gore[index6].velocity.X = (float) (1.5 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
            Main.gore[index6].velocity.Y = (float) (-1.5 - (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
            Main.gore[index6].velocity *= 0.4f;
            var index7 =
                Gore.NewGore(
                    new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0),
                        (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)), new Vector2(),
                    Main.rand.Next(61, 64), 1f);
            Main.gore[index7].scale = 1.5f;
            Main.gore[index7].velocity.X = (float) (-1.5 - (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
            Main.gore[index7].velocity.Y = (float) (-1.5 - (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
            Main.gore[index7].velocity *= 0.4f;
            if (this.whoAmI != Main.myPlayer)
                return;
            NetMessage.SendData(62, -1, -1, (NetworkText) null, this.whoAmI, 1f, 0.0f, 0.0f, 0, 0, 0);
        }

        public double HurtOld(int Damage, int hitDirection, bool pvp = false, bool quiet = false,
            string deathText = " was slain...", bool Crit = false, int cooldownCounter = -1)
        {
            return 0.0;
        }

        public double Hurt(PlayerDeathReason damageSource, int Damage, int hitDirection, bool pvp = false,
            bool quiet = false, bool Crit = false, int cooldownCounter = -1)
        {
            var flag1 = !this.immune;
            var flag2 = false;
            var hitContext = cooldownCounter;
            if (cooldownCounter == 0)
                flag1 = this.hurtCooldowns[cooldownCounter] <= 0;
            if (cooldownCounter == 1)
                flag1 = this.hurtCooldowns[cooldownCounter] <= 0;
            if (cooldownCounter == 2)
            {
                flag2 = true;
                cooldownCounter = -1;
            }

            if (!flag1)
                return 0.0;
            if (this.whoAmI == Main.myPlayer && this.blackBelt && Main.rand.Next(10) == 0)
            {
                this.NinjaDodge();
                return 0.0;
            }

            if (this.whoAmI == Main.myPlayer && this.shadowDodge)
            {
                this.ShadowDodge();
                return 0.0;
            }

            if (this.whoAmI == Main.myPlayer && this.panic)
                this.AddBuff(63, 300, true);
            if (this.whoAmI == Main.myPlayer && this.setSquireT2)
                this.AddBuff(205, 300, true);
            this.stealth = 1f;
            if (Main.netMode == 1)
                NetMessage.SendData(84, -1, -1, (NetworkText) null, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
            var Damage1 = Damage;
            var dmg = Main.CalculatePlayerDamage(Damage1, this.statDefense);
            if (Crit)
                Damage1 *= 2;
            if (dmg >= 1.0)
            {
                if (this.invis)
                {
                    for (var b = 0; b < 22; ++b)
                    {
                        if (this.buffType[b] == 10)
                            this.DelBuff(b);
                    }
                }

                dmg = (double) (int) ((1.0 - (double) this.endurance) * dmg);
                if (dmg < 1.0)
                    dmg = 1.0;
                if (this.ConsumeSolarFlare())
                {
                    dmg = (double) (int) ((1.0 - 0.300000011920929) * dmg);
                    if (dmg < 1.0)
                        dmg = 1.0;
                    if (this.whoAmI == Main.myPlayer)
                    {
                        var index = Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 608, 150, 15f,
                            Main.myPlayer, 0.0f, 0.0f);
                        Main.projectile[index].Kill();
                    }
                }

                if (this.beetleDefense && this.beetleOrbs > 0)
                {
                    dmg = (double) (int) ((1.0 - (double) (0.15f * (float) this.beetleOrbs)) * dmg);
                    --this.beetleOrbs;
                    for (var b = 0; b < 22; ++b)
                    {
                        if (this.buffType[b] >= 95 && this.buffType[b] <= 97)
                            this.DelBuff(b);
                    }

                    if (this.beetleOrbs > 0)
                        this.AddBuff(95 + this.beetleOrbs - 1, 5, false);
                    this.beetleCounter = 0.0f;
                    if (dmg < 1.0)
                        dmg = 1.0;
                }

                if (this.magicCuffs)
                {
                    var manaAmount = Damage1;
                    this.statMana += manaAmount;
                    if (this.statMana > this.statManaMax2)
                        this.statMana = this.statManaMax2;
                    this.ManaEffect(manaAmount);
                }

                if (this.defendedByPaladin)
                {
                    if (this.whoAmI != Main.myPlayer)
                    {
                        if (Main.player[Main.myPlayer].hasPaladinShield)
                        {
                            var player = Main.player[Main.myPlayer];
                            if (player.team == this.team && this.team != 0)
                            {
                                var num1 = player.Distance(this.Center);
                                var flag3 = (double) num1 < 800.0;
                                if (flag3)
                                {
                                    for (var index = 0; index < (int) byte.MaxValue; ++index)
                                    {
                                        if (index != Main.myPlayer && Main.player[index].active &&
                                            (!Main.player[index].dead && !Main.player[index].immune) &&
                                            (Main.player[index].hasPaladinShield &&
                                             Main.player[index].team == this.team &&
                                             (double) Main.player[index].statLife >
                                             (double) Main.player[index].statLifeMax2 * 0.25))
                                        {
                                            var num2 = Main.player[index].Distance(this.Center);
                                            if ((double) num1 > (double) num2 ||
                                                (double) num1 == (double) num2 && index < Main.myPlayer)
                                            {
                                                flag3 = false;
                                                break;
                                            }
                                        }
                                    }
                                }

                                if (flag3)
                                {
                                    var Damage2 = (int) (dmg * 0.25);
                                    dmg = (double) (int) (dmg * 0.75);
                                    player.Hurt(PlayerDeathReason.LegacyEmpty(), Damage2, 0, false, false, false, -1);
                                }
                            }
                        }
                    }
                    else
                    {
                        var flag3 = false;
                        for (var index = 0; index < (int) byte.MaxValue; ++index)
                        {
                            if (index != Main.myPlayer && Main.player[index].active &&
                                (!Main.player[index].dead && !Main.player[index].immune) &&
                                (Main.player[index].hasPaladinShield && Main.player[index].team == this.team &&
                                 (double) Main.player[index].statLife >
                                 (double) Main.player[index].statLifeMax2 * 0.25))
                            {
                                flag3 = true;
                                break;
                            }
                        }

                        if (flag3)
                            dmg = (double) (int) (dmg * 0.75);
                    }
                }

                if (this.brainOfConfusion && Main.myPlayer == this.whoAmI)
                {
                    for (var index = 0; index < 200; ++index)
                    {
                        if (Main.npc[index].active && !Main.npc[index].friendly)
                        {
                            var num1 = 300 + (int) dmg * 2;
                            if (Main.rand.Next(500) < num1)
                            {
                                var num2 = (Main.npc[index].Center - this.Center).Length();
                                var num3 = (float) Main.rand.Next(200 + (int) dmg / 2, 301 + (int) dmg * 2);
                                if ((double) num3 > 500.0)
                                    num3 = (float) (500.0 + ((double) num3 - 500.0) * 0.75);
                                if ((double) num3 > 700.0)
                                    num3 = (float) (700.0 + ((double) num3 - 700.0) * 0.5);
                                if ((double) num3 > 900.0)
                                    num3 = (float) (900.0 + ((double) num3 - 900.0) * 0.25);
                                if ((double) num2 < (double) num3)
                                {
                                    var num4 = (float) Main.rand.Next(90 + (int) dmg / 3, 300 + (int) dmg / 2);
                                    Main.npc[index].AddBuff(31, (int) num4, false);
                                }
                            }
                        }
                    }

                    Projectile.NewProjectile(this.Center.X + (float) Main.rand.Next(-40, 40),
                        this.Center.Y - (float) Main.rand.Next(20, 60), this.velocity.X * 0.3f, this.velocity.Y * 0.3f,
                        565, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                }

                if (Main.netMode == 1 && this.whoAmI == Main.myPlayer && !quiet)
                {
                    NetMessage.SendData(13, -1, -1, (NetworkText) null, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    NetMessage.SendData(16, -1, -1, (NetworkText) null, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    NetMessage.SendPlayerHurt(this.whoAmI, damageSource, Damage, hitDirection, Crit, pvp, hitContext,
                        -1, -1);
                }

                CombatText.NewText(
                    new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width,
                        this.height), Crit ? CombatText.DamagedFriendlyCrit : CombatText.DamagedFriendly, (int) dmg,
                    Crit, false);
                this.statLife -= (int) dmg;
                switch (cooldownCounter)
                {
                    case -1:
                        this.immune = true;
                        if (dmg == 1.0)
                        {
                            this.immuneTime = 20;
                            if (this.longInvince)
                                this.immuneTime += 20;
                        }
                        else
                        {
                            this.immuneTime = 40;
                            if (this.longInvince)
                                this.immuneTime += 40;
                        }

                        if (pvp)
                        {
                            this.immuneTime = 8;
                            break;
                        }

                        break;
                    case 0:
                        this.hurtCooldowns[cooldownCounter] =
                            dmg != 1.0 ? (this.longInvince ? 80 : 40) : (this.longInvince ? 40 : 20);
                        break;
                    case 1:
                        this.hurtCooldowns[cooldownCounter] =
                            dmg != 1.0 ? (this.longInvince ? 80 : 40) : (this.longInvince ? 40 : 20);
                        break;
                }

                this.lifeRegenTime = 0;
                if (this.whoAmI == Main.myPlayer)
                {
                    if (this.starCloak)
                    {
                        for (var index1 = 0; index1 < 3; ++index1)
                        {
                            var num1 = this.position.X + (float) Main.rand.Next(-400, 400);
                            var num2 = this.position.Y - (float) Main.rand.Next(500, 800);
                            var vector2 = new Vector2(num1, num2);
                            var num3 = this.position.X + (float) (this.width / 2) - vector2.X;
                            var num4 = this.position.Y + (float) (this.height / 2) - vector2.Y;
                            var num5 = num3 + (float) Main.rand.Next(-100, 101);
                            var num6 =
                                23f / (float) Math.Sqrt((double) num5 * (double) num5 + (double) num4 * (double) num4);
                            var SpeedX = num5 * num6;
                            var SpeedY = num4 * num6;
                            var index2 = Projectile.NewProjectile(num1, num2, SpeedX, SpeedY, 92, 30, 5f, this.whoAmI,
                                0.0f, 0.0f);
                            Main.projectile[index2].ai[1] = this.position.Y;
                        }
                    }

                    if (this.bee)
                    {
                        var num = 1;
                        if (Main.rand.Next(3) == 0)
                            ++num;
                        if (Main.rand.Next(3) == 0)
                            ++num;
                        if (this.strongBees && Main.rand.Next(3) == 0)
                            ++num;
                        for (var index = 0; index < num; ++index)
                            Projectile.NewProjectile(this.position.X, this.position.Y,
                                (float) Main.rand.Next(-35, 36) * 0.02f, (float) Main.rand.Next(-35, 36) * 0.02f,
                                this.beeType(), this.beeDamage(7), this.beeKB(0.0f), Main.myPlayer, 0.0f, 0.0f);
                    }
                }

                if (flag2 && hitDirection != 0)
                {
                    if (!this.mount.Active || !this.mount.Cart)
                    {
                        var num1 = 10.5f;
                        var num2 = -7.5f;
                        if (this.noKnockback)
                        {
                            num1 = 2.5f;
                            num2 = -1.5f;
                        }

                        this.velocity.X = num1 * (float) hitDirection;
                        this.velocity.Y = num2;
                    }
                }
                else if (!this.noKnockback && hitDirection != 0 && (!this.mount.Active || !this.mount.Cart))
                {
                    this.velocity.X = 4.5f * (float) hitDirection;
                    this.velocity.Y = -3.5f;
                }

                if (this.stoned)
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                else if (this.frostArmor)
                    Main.PlaySound(SoundID.Item27, this.position);
                else if ((this.wereWolf || this.forceWerewolf) && !this.hideWolf)
                    Main.PlaySound(3, (int) this.position.X, (int) this.position.Y, 6, 1f, 0.0f);
                else if (this.boneArmor)
                    Main.PlaySound(3, (int) this.position.X, (int) this.position.Y, 2, 1f, 0.0f);
                else if (!this.Male)
                    Main.PlaySound(20, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                else
                    Main.PlaySound(1, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                if (this.statLife > 0)
                {
                    var num1 = dmg / (double) this.statLifeMax2 * 100.0;
                    var num2 = (float) (2 * hitDirection);
                    var num3 = 0.0f;
                    if (flag2)
                    {
                        num1 *= 12.0;
                        num3 = 6f;
                    }

                    for (var index1 = 0; (double) index1 < num1; ++index1)
                    {
                        if (this.stoned)
                            Dust.NewDust(this.position, this.width, this.height, 1,
                                num2 + (float) hitDirection * num3 * Main.rand.NextFloat(), -2f, 0, new Color(), 1f);
                        else if (this.frostArmor)
                        {
                            var index2 = Dust.NewDust(this.position, this.width, this.height, 135,
                                num2 + (float) hitDirection * num3 * Main.rand.NextFloat(), -2f, 0, new Color(), 1f);
                            Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                        }
                        else if (this.boneArmor)
                        {
                            var index2 = Dust.NewDust(this.position, this.width, this.height, 26,
                                num2 + (float) hitDirection * num3 * Main.rand.NextFloat(), -2f, 0, new Color(), 1f);
                            Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                        }
                        else
                            Dust.NewDust(this.position, this.width, this.height, 5,
                                num2 + (float) hitDirection * num3 * Main.rand.NextFloat(), -2f, 0, new Color(), 1f);
                    }
                }
                else
                {
                    this.statLife = 0;
                    if (this.whoAmI == Main.myPlayer)
                        this.KillMe(damageSource, dmg, hitDirection, pvp);
                }
            }

            if (pvp)
                dmg = Main.CalculateDamage(Damage1, this.statDefense);
            return dmg;
        }

        public void KillMeForGood()
        {
            var isCloudSave = Main.ActivePlayerFileData.IsCloudSave;
            if (FileUtilities.Exists(Main.playerPathName, isCloudSave))
                FileUtilities.Delete(Main.playerPathName, isCloudSave);
            if (FileUtilities.Exists(Main.playerPathName + ".bak", isCloudSave))
                FileUtilities.Delete(Main.playerPathName + ".bak", isCloudSave);
            Main.ActivePlayerFileData = new PlayerFileData();
        }

        public void KillMeOld(double dmg, int hitDirection, bool pvp = false, string deathText = " was slain...")
        {
        }

        public void KillMe(PlayerDeathReason damageSource, double dmg, int hitDirection, bool pvp = false)
        {
            if (this.dead)
                return;
            if (pvp)
                this.pvpDeath = true;
            if (this.trapDebuffSource)
                AchievementsHelper.HandleSpecialEvent(this, 4);
            this.lastDeathPostion = this.Center;
            this.lastDeathTime = DateTime.Now;
            this.showLastDeath = true;
            bool overFlowing;
            var coinsOwned = (int) Utils.CoinsCount(out overFlowing, this.inventory);
            if (Main.myPlayer == this.whoAmI)
            {
                this.lostCoins = coinsOwned;
                this.lostCoinString = Main.ValueToCoins(this.lostCoins);
            }

            if (Main.myPlayer == this.whoAmI)
                Main.mapFullscreen = false;
            if (Main.myPlayer == this.whoAmI)
            {
                this.trashItem.SetDefaults(0, false);
                if (this.difficulty == (byte) 0)
                {
                    for (var index = 0; index < 59; ++index)
                    {
                        if (this.inventory[index].stack > 0 &&
                            (this.inventory[index].type >= 1522 && this.inventory[index].type <= 1527 ||
                             this.inventory[index].type == 3643))
                        {
                            var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, this.inventory[index].type, 1, false, 0, false, false);
                            Main.item[number].netDefaults(this.inventory[index].netID);
                            Main.item[number].Prefix((int) this.inventory[index].prefix);
                            Main.item[number].stack = this.inventory[index].stack;
                            Main.item[number].velocity.Y = (float) Main.rand.Next(-20, 1) * 0.2f;
                            Main.item[number].velocity.X = (float) Main.rand.Next(-20, 21) * 0.2f;
                            Main.item[number].noGrabDelay = 100;
                            Main.item[number].favorited = false;
                            Main.item[number].newAndShiny = false;
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                            this.inventory[index].SetDefaults(0, false);
                        }
                    }
                }
                else if (this.difficulty == (byte) 1)
                    this.DropItems();
                else if (this.difficulty == (byte) 2)
                {
                    this.DropItems();
                    this.KillMeForGood();
                }
            }

            Main.PlaySound(5, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
            this.headVelocity.Y = (float) Main.rand.Next(-40, -10) * 0.1f;
            this.bodyVelocity.Y = (float) Main.rand.Next(-40, -10) * 0.1f;
            this.legVelocity.Y = (float) Main.rand.Next(-40, -10) * 0.1f;
            this.headVelocity.X = (float) Main.rand.Next(-20, 21) * 0.1f + (float) (2 * hitDirection);
            this.bodyVelocity.X = (float) Main.rand.Next(-20, 21) * 0.1f + (float) (2 * hitDirection);
            this.legVelocity.X = (float) Main.rand.Next(-20, 21) * 0.1f + (float) (2 * hitDirection);
            if (this.stoned)
            {
                this.headPosition = Vector2.Zero;
                this.bodyPosition = Vector2.Zero;
                this.legPosition = Vector2.Zero;
            }

            for (var index1 = 0; index1 < 100; ++index1)
            {
                if (this.stoned)
                    Dust.NewDust(this.position, this.width, this.height, 1, (float) (2 * hitDirection), -2f, 0,
                        new Color(), 1f);
                else if (this.frostArmor)
                {
                    var index2 = Dust.NewDust(this.position, this.width, this.height, 135, (float) (2 * hitDirection),
                        -2f, 0, new Color(), 1f);
                    Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                }
                else if (this.boneArmor)
                {
                    var index2 = Dust.NewDust(this.position, this.width, this.height, 26, (float) (2 * hitDirection),
                        -2f, 0, new Color(), 1f);
                    Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                }
                else
                    Dust.NewDust(this.position, this.width, this.height, 5, (float) (2 * hitDirection), -2f, 0,
                        new Color(), 1f);
            }

            this.mount.Dismount(this);
            this.dead = true;
            this.respawnTimer = 600;
            var flag = false;
            if (Main.netMode != 0 && !pvp)
            {
                for (var index = 0; index < 200; ++index)
                {
                    if (Main.npc[index].active &&
                        (Main.npc[index].boss || Main.npc[index].type == 13 ||
                         (Main.npc[index].type == 14 || Main.npc[index].type == 15)) &&
                        (double) Math.Abs(this.Center.X - Main.npc[index].Center.X) +
                        (double) Math.Abs(this.Center.Y - Main.npc[index].Center.Y) < 4000.0)
                    {
                        flag = true;
                        break;
                    }
                }
            }

            if (flag)
                this.respawnTimer += 600;
            if (Main.expertMode)
                this.respawnTimer = (int) ((double) this.respawnTimer * 1.5);
            this.immuneAlpha = 0;
            this.palladiumRegen = false;
            this.iceBarrier = false;
            this.crystalLeaf = false;
            var deathText = damageSource.GetDeathText(this.name);
            switch (Main.netMode)
            {
                case 0:
                    Main.NewText(deathText.ToString(), (byte) 225, (byte) 25, (byte) 25, false);
                    break;
                case 2:
                    NetMessage.BroadcastChatMessage(deathText, new Color(225, 25, 25), -1);
                    break;
            }

            if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
                NetMessage.SendPlayerDeath(this.whoAmI, damageSource, (int) dmg, hitDirection, pvp, -1, -1);
            if (this.whoAmI == Main.myPlayer && this.difficulty == (byte) 0)
            {
                if (!pvp)
                {
                    this.DropCoins();
                }
                else
                {
                    this.lostCoins = 0;
                    this.lostCoinString = Main.ValueToCoins(this.lostCoins);
                }
            }

            this.DropTombstone(coinsOwned, deathText, hitDirection);
            if (this.whoAmI != Main.myPlayer)
                return;
            try
            {
                WorldGen.saveToonWhilePlaying();
            }
            catch
            {
            }
        }

        public void DropTombstone(int coinsOwned, NetworkText deathText, int hitDirection)
        {
            if (Main.netMode == 1)
                return;
            var num1 = (float) Main.rand.Next(-35, 36) * 0.1f;
            while ((double) num1 < 2.0 && (double) num1 > -2.0)
                num1 += (float) Main.rand.Next(-30, 31) * 0.1f;
            var num2 = Main.rand.Next(6);
            var Type = coinsOwned <= 100000 ? (num2 != 0 ? 200 + num2 : 43) : Main.rand.Next(5) + 527;
            var index = Projectile.NewProjectile(this.position.X + (float) (this.width / 2),
                this.position.Y + (float) (this.height / 2),
                (float) Main.rand.Next(10, 30) * 0.1f * (float) hitDirection + num1,
                (float) Main.rand.Next(-40, -20) * 0.1f, Type, 0, 0.0f, Main.myPlayer, 0.0f, 0.0f);
            Main.projectile[index].miscText = deathText.ToString();
        }

        public bool ItemSpace(Item newItem)
        {
            if (newItem.uniqueStack && this.HasItem(newItem.type))
                return false;
            if (newItem.type == 58 || newItem.type == 184 || (newItem.type == 1734 || newItem.type == 1735) ||
                (newItem.type == 1867 || newItem.type == 1868 || ItemID.Sets.NebulaPickup[newItem.type]))
                return true;
            var num = 50;
            if (newItem.type == 71 || newItem.type == 72 || (newItem.type == 73 || newItem.type == 74))
                num = 54;
            for (var index = 0; index < num; ++index)
            {
                if (this.inventory[index].type == 0)
                    return true;
            }

            for (var index = 0; index < num; ++index)
            {
                if (this.inventory[index].type > 0 && this.inventory[index].stack < this.inventory[index].maxStack &&
                    newItem.IsTheSameAs(this.inventory[index]))
                    return true;
            }

            if (newItem.ammo > 0 && !newItem.notAmmo)
            {
                if (newItem.type != 75 && newItem.type != 169 && (newItem.type != 23 && newItem.type != 408) &&
                    (newItem.type != 370 && newItem.type != 1246))
                {
                    for (var index = 54; index < 58; ++index)
                    {
                        if (this.inventory[index].type == 0)
                            return true;
                    }
                }

                for (var index = 54; index < 58; ++index)
                {
                    if (this.inventory[index].type > 0 &&
                        this.inventory[index].stack < this.inventory[index].maxStack &&
                        newItem.IsTheSameAs(this.inventory[index]))
                        return true;
                }
            }

            for (var index = 54; index < 58; ++index)
            {
                if (this.inventory[index].type > 0 && this.inventory[index].stack < this.inventory[index].maxStack &&
                    newItem.IsTheSameAs(this.inventory[index]))
                    return true;
            }

            return false;
        }

        public void DoCoins(int i)
        {
            if (this.inventory[i].stack != 100 || this.inventory[i].type != 71 && this.inventory[i].type != 72 &&
                this.inventory[i].type != 73)
                return;
            this.inventory[i].SetDefaults(this.inventory[i].type + 1, false);
            for (var i1 = 0; i1 < 54; ++i1)
            {
                if (this.inventory[i1].IsTheSameAs(this.inventory[i]) && i1 != i &&
                    (this.inventory[i1].type == this.inventory[i].type &&
                     this.inventory[i1].stack < this.inventory[i1].maxStack))
                {
                    ++this.inventory[i1].stack;
                    this.inventory[i].SetDefaults(0, false);
                    this.inventory[i].active = false;
                    this.inventory[i].TurnToAir();
                    this.DoCoins(i1);
                }
            }
        }

        public Item FillAmmo(int plr, Item newItem, bool noText = false)
        {
            var obj = newItem;
            for (var i = 54; i < 58; ++i)
            {
                if (this.inventory[i].type > 0 && this.inventory[i].stack < this.inventory[i].maxStack &&
                    obj.IsTheSameAs(this.inventory[i]))
                {
                    Main.PlaySound(7, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    if (obj.stack + this.inventory[i].stack <= this.inventory[i].maxStack)
                    {
                        this.inventory[i].stack += obj.stack;
                        if (!noText)
                            ItemText.NewText(newItem, obj.stack, false, false);
                        this.DoCoins(i);
                        if (plr == Main.myPlayer)
                            Recipe.FindRecipes();
                        return new Item();
                    }

                    obj.stack -= this.inventory[i].maxStack - this.inventory[i].stack;
                    if (!noText)
                        ItemText.NewText(newItem, this.inventory[i].maxStack - this.inventory[i].stack, false, false);
                    this.inventory[i].stack = this.inventory[i].maxStack;
                    this.DoCoins(i);
                    if (plr == Main.myPlayer)
                        Recipe.FindRecipes();
                }
            }

            if (obj.bait <= 0 && obj.type != 169 && (obj.type != 75 && obj.type != 23) &&
                (obj.type != 408 && obj.type != 370 && (obj.type != 1246 && obj.type != 154)) && !obj.notAmmo)
            {
                for (var i = 54; i < 58; ++i)
                {
                    if (this.inventory[i].type == 0)
                    {
                        this.inventory[i] = obj;
                        if (!noText)
                            ItemText.NewText(newItem, newItem.stack, false, false);
                        this.DoCoins(i);
                        Main.PlaySound(7, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                        if (plr == Main.myPlayer)
                            Recipe.FindRecipes();
                        return new Item();
                    }
                }
            }

            return obj;
        }

        public Item GetItem(int plr, Item newItem, bool longText = false, bool noText = false)
        {
            var flag = newItem.type >= 71 && newItem.type <= 74;
            var newItem1 = newItem;
            var num1 = 50;
            if (newItem.noGrabDelay > 0)
                return newItem1;
            var num2 = 0;
            if (newItem.uniqueStack && this.HasItem(newItem.type))
                return newItem1;
            if (newItem.type == 71 || newItem.type == 72 || (newItem.type == 73 || newItem.type == 74))
            {
                num2 = -4;
                num1 = 54;
            }

            if ((newItem1.ammo > 0 || newItem1.bait > 0) && !newItem1.notAmmo || newItem1.type == 530)
            {
                newItem1 = this.FillAmmo(plr, newItem1, noText);
                if (newItem1.type == 0 || newItem1.stack == 0)
                    return new Item();
            }

            for (var index = num2; index < 50; ++index)
            {
                var i = index;
                if (i < 0)
                    i = 54 + index;
                if (this.inventory[i].type > 0 && this.inventory[i].stack < this.inventory[i].maxStack &&
                    newItem1.IsTheSameAs(this.inventory[i]))
                {
                    if (flag)
                        Main.PlaySound(38, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    else
                        Main.PlaySound(7, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    if (newItem1.stack + this.inventory[i].stack <= this.inventory[i].maxStack)
                    {
                        this.inventory[i].stack += newItem1.stack;
                        if (!noText)
                            ItemText.NewText(newItem, newItem1.stack, false, longText);
                        this.DoCoins(i);
                        if (plr == Main.myPlayer)
                            Recipe.FindRecipes();
                        AchievementsHelper.NotifyItemPickup(this, newItem1);
                        return new Item();
                    }

                    AchievementsHelper.NotifyItemPickup(this, newItem1,
                        this.inventory[i].maxStack - this.inventory[i].stack);
                    newItem1.stack -= this.inventory[i].maxStack - this.inventory[i].stack;
                    if (!noText)
                        ItemText.NewText(newItem, this.inventory[i].maxStack - this.inventory[i].stack, false,
                            longText);
                    this.inventory[i].stack = this.inventory[i].maxStack;
                    this.DoCoins(i);
                    if (plr == Main.myPlayer)
                        Recipe.FindRecipes();
                }
            }

            if (newItem.type != 71 && newItem.type != 72 && (newItem.type != 73 && newItem.type != 74) &&
                newItem.useStyle > 0)
            {
                for (var i = 0; i < 10; ++i)
                {
                    if (this.inventory[i].type == 0)
                    {
                        this.inventory[i] = newItem1;
                        if (!noText)
                            ItemText.NewText(newItem, newItem.stack, false, longText);
                        this.DoCoins(i);
                        if (flag)
                            Main.PlaySound(38, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                        else
                            Main.PlaySound(7, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                        if (plr == Main.myPlayer)
                            Recipe.FindRecipes();
                        AchievementsHelper.NotifyItemPickup(this, newItem1);
                        return new Item();
                    }
                }
            }

            if (newItem.favorited)
            {
                for (var i = 0; i < num1; ++i)
                {
                    if (this.inventory[i].type == 0)
                    {
                        this.inventory[i] = newItem1;
                        if (!noText)
                            ItemText.NewText(newItem, newItem.stack, false, longText);
                        this.DoCoins(i);
                        if (flag)
                            Main.PlaySound(38, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                        else
                            Main.PlaySound(7, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                        if (plr == Main.myPlayer)
                            Recipe.FindRecipes();
                        AchievementsHelper.NotifyItemPickup(this, newItem1);
                        return new Item();
                    }
                }
            }
            else
            {
                for (var i = num1 - 1; i >= 0; --i)
                {
                    if (this.inventory[i].type == 0)
                    {
                        this.inventory[i] = newItem1;
                        if (!noText)
                            ItemText.NewText(newItem, newItem.stack, false, longText);
                        this.DoCoins(i);
                        if (flag)
                            Main.PlaySound(38, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                        else
                            Main.PlaySound(7, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                        if (plr == Main.myPlayer)
                            Recipe.FindRecipes();
                        AchievementsHelper.NotifyItemPickup(this, newItem1);
                        return new Item();
                    }
                }
            }

            return newItem1;
        }

        public void PlaceThing()
        {
            if ((this.inventory[this.selectedItem].type == 1071 || this.inventory[this.selectedItem].type == 1543) &&
                ((double) this.position.X / 16.0 - (double) Player.tileRangeX -
                 (double) this.inventory[this.selectedItem].tileBoost - (double) this.blockRange <=
                 (double) Player.tileTargetX &&
                 ((double) this.position.X + (double) this.width) / 16.0 + (double) Player.tileRangeX +
                 (double) this.inventory[this.selectedItem].tileBoost - 1.0 + (double) this.blockRange >=
                 (double) Player.tileTargetX) &&
                ((double) this.position.Y / 16.0 - (double) Player.tileRangeY -
                 (double) this.inventory[this.selectedItem].tileBoost - (double) this.blockRange <=
                 (double) Player.tileTargetY &&
                 ((double) this.position.Y + (double) this.height) / 16.0 + (double) Player.tileRangeY +
                 (double) this.inventory[this.selectedItem].tileBoost - 2.0 + (double) this.blockRange >=
                 (double) Player.tileTargetY))
            {
                var tileTargetX = Player.tileTargetX;
                var tileTargetY = Player.tileTargetY;
                if (Main.tile[tileTargetX, tileTargetY] != null && Main.tile[tileTargetX, tileTargetY].active())
                {
                    this.showItemIcon = true;
                    if (this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
                    {
                        var num1 = -1;
                        var num2 = -1;
                        for (var index = 0; index < 58; ++index)
                        {
                            if (this.inventory[index].stack > 0 && this.inventory[index].paint > (byte) 0)
                            {
                                num1 = (int) this.inventory[index].paint;
                                num2 = index;
                                break;
                            }
                        }

                        if (num1 > 0 && (int) Main.tile[tileTargetX, tileTargetY].color() != num1 &&
                            WorldGen.paintTile(tileTargetX, tileTargetY, (byte) num1, true))
                        {
                            var index = num2;
                            --this.inventory[index].stack;
                            if (this.inventory[index].stack <= 0)
                                this.inventory[index].SetDefaults(0, false);
                            this.itemTime = this.inventory[this.selectedItem].useTime;
                        }
                    }
                }
            }

            if ((this.inventory[this.selectedItem].type == 1072 || this.inventory[this.selectedItem].type == 1544) &&
                ((double) this.position.X / 16.0 - (double) Player.tileRangeX -
                 (double) this.inventory[this.selectedItem].tileBoost - (double) this.blockRange <=
                 (double) Player.tileTargetX &&
                 ((double) this.position.X + (double) this.width) / 16.0 + (double) Player.tileRangeX +
                 (double) this.inventory[this.selectedItem].tileBoost - 1.0 + (double) this.blockRange >=
                 (double) Player.tileTargetX) &&
                ((double) this.position.Y / 16.0 - (double) Player.tileRangeY -
                 (double) this.inventory[this.selectedItem].tileBoost - (double) this.blockRange <=
                 (double) Player.tileTargetY &&
                 ((double) this.position.Y + (double) this.height) / 16.0 + (double) Player.tileRangeY +
                 (double) this.inventory[this.selectedItem].tileBoost - 2.0 + (double) this.blockRange >=
                 (double) Player.tileTargetY))
            {
                var tileTargetX = Player.tileTargetX;
                var tileTargetY = Player.tileTargetY;
                if (Main.tile[tileTargetX, tileTargetY] != null && Main.tile[tileTargetX, tileTargetY].wall > (byte) 0)
                {
                    this.showItemIcon = true;
                    if (this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
                    {
                        var num1 = -1;
                        var num2 = -1;
                        for (var index = 0; index < 58; ++index)
                        {
                            if (this.inventory[index].stack > 0 && this.inventory[index].paint > (byte) 0)
                            {
                                num1 = (int) this.inventory[index].paint;
                                num2 = index;
                                break;
                            }
                        }

                        if (num1 > 0 && (int) Main.tile[tileTargetX, tileTargetY].wallColor() != num1 &&
                            WorldGen.paintWall(tileTargetX, tileTargetY, (byte) num1, true))
                        {
                            var index = num2;
                            --this.inventory[index].stack;
                            if (this.inventory[index].stack <= 0)
                                this.inventory[index].SetDefaults(0, false);
                            this.itemTime = this.inventory[this.selectedItem].useTime;
                        }
                    }
                }
            }

            if ((this.inventory[this.selectedItem].type == 1100 || this.inventory[this.selectedItem].type == 1545) &&
                ((double) this.position.X / 16.0 - (double) Player.tileRangeX -
                 (double) this.inventory[this.selectedItem].tileBoost - (double) this.blockRange <=
                 (double) Player.tileTargetX &&
                 ((double) this.position.X + (double) this.width) / 16.0 + (double) Player.tileRangeX +
                 (double) this.inventory[this.selectedItem].tileBoost - 1.0 + (double) this.blockRange >=
                 (double) Player.tileTargetX) &&
                ((double) this.position.Y / 16.0 - (double) Player.tileRangeY -
                 (double) this.inventory[this.selectedItem].tileBoost - (double) this.blockRange <=
                 (double) Player.tileTargetY &&
                 ((double) this.position.Y + (double) this.height) / 16.0 + (double) Player.tileRangeY +
                 (double) this.inventory[this.selectedItem].tileBoost - 2.0 + (double) this.blockRange >=
                 (double) Player.tileTargetY))
            {
                var tileTargetX = Player.tileTargetX;
                var tileTargetY = Player.tileTargetY;
                if (Main.tile[tileTargetX, tileTargetY] != null &&
                    (Main.tile[tileTargetX, tileTargetY].wallColor() > (byte) 0 &&
                     Main.tile[tileTargetX, tileTargetY].wall > (byte) 0 ||
                     Main.tile[tileTargetX, tileTargetY].color() > (byte) 0 &&
                     Main.tile[tileTargetX, tileTargetY].active()))
                {
                    this.showItemIcon = true;
                    if (this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
                    {
                        if (Main.tile[tileTargetX, tileTargetY].color() > (byte) 0 &&
                            Main.tile[tileTargetX, tileTargetY].active() &&
                            WorldGen.paintTile(tileTargetX, tileTargetY, (byte) 0, true))
                            this.itemTime = this.inventory[this.selectedItem].useTime;
                        else if (Main.tile[tileTargetX, tileTargetY].wallColor() > (byte) 0 &&
                                 Main.tile[tileTargetX, tileTargetY].wall > (byte) 0 &&
                                 WorldGen.paintWall(tileTargetX, tileTargetY, (byte) 0, true))
                            this.itemTime = this.inventory[this.selectedItem].useTime;
                    }
                }
            }

            if (
                (this.inventory[this.selectedItem].type == 929 || this.inventory[this.selectedItem].type == 1338 ||
                 this.inventory[this.selectedItem].type == 1345) &&
                ((double) this.position.X / 16.0 - (double) Player.tileRangeX -
                 (double) this.inventory[this.selectedItem].tileBoost - (double) this.blockRange <=
                 (double) Player.tileTargetX &&
                 ((double) this.position.X + (double) this.width) / 16.0 + (double) Player.tileRangeX +
                 (double) this.inventory[this.selectedItem].tileBoost - 1.0 + (double) this.blockRange >=
                 (double) Player.tileTargetX &&
                 ((double) this.position.Y / 16.0 - (double) Player.tileRangeY -
                  (double) this.inventory[this.selectedItem].tileBoost - (double) this.blockRange <=
                  (double) Player.tileTargetY &&
                  ((double) this.position.Y + (double) this.height) / 16.0 + (double) Player.tileRangeY +
                  (double) this.inventory[this.selectedItem].tileBoost - 2.0 + (double) this.blockRange >=
                  (double) Player.tileTargetY)))
            {
                var tileTargetX = Player.tileTargetX;
                var tileTargetY = Player.tileTargetY;
                if (Main.tile[tileTargetX, tileTargetY].active() &&
                    Main.tile[tileTargetX, tileTargetY].type == (ushort) 209)
                    this.ShootFromCannon(tileTargetX, tileTargetY);
            }

            if (this.inventory[this.selectedItem].type >= 1874 && this.inventory[this.selectedItem].type <= 1905 &&
                (Main.tile[Player.tileTargetX, Player.tileTargetY].active() &&
                 Main.tile[Player.tileTargetX, Player.tileTargetY].type == (ushort) 171) &&
                ((double) this.position.X / 16.0 - (double) Player.tileRangeX -
                 (double) this.inventory[this.selectedItem].tileBoost - (double) this.blockRange <=
                 (double) Player.tileTargetX &&
                 ((double) this.position.X + (double) this.width) / 16.0 + (double) Player.tileRangeX +
                 (double) this.inventory[this.selectedItem].tileBoost - 1.0 + (double) this.blockRange >=
                 (double) Player.tileTargetX &&
                 ((double) this.position.Y / 16.0 - (double) Player.tileRangeY -
                  (double) this.inventory[this.selectedItem].tileBoost - (double) this.blockRange <=
                  (double) Player.tileTargetY &&
                  ((double) this.position.Y + (double) this.height) / 16.0 + (double) Player.tileRangeY +
                  (double) this.inventory[this.selectedItem].tileBoost - 2.0 + (double) this.blockRange >=
                  (double) Player.tileTargetY)) &&
                (this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem))
            {
                var type = this.inventory[this.selectedItem].type;
                if (type >= 1874 && type <= 1877)
                {
                    var style = type - 1873;
                    if (WorldGen.checkXmasTreeDrop(Player.tileTargetX, Player.tileTargetY, 0) != style)
                    {
                        this.itemTime = this.inventory[this.selectedItem].useTime;
                        WorldGen.dropXmasTree(Player.tileTargetX, Player.tileTargetY, 0);
                        WorldGen.setXmasTree(Player.tileTargetX, Player.tileTargetY, 0, style);
                        var tileTargetX = Player.tileTargetX;
                        var tileTargetY = Player.tileTargetY;
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].frameX < (short) 10)
                        {
                            tileTargetX -= (int) Main.tile[Player.tileTargetX, Player.tileTargetY].frameX;
                            tileTargetY -= (int) Main.tile[Player.tileTargetX, Player.tileTargetY].frameY;
                        }

                        NetMessage.SendTileSquare(-1, tileTargetX, tileTargetY, 1, TileChangeType.None);
                    }
                }
                else if (type >= 1878 && type <= 1883)
                {
                    var style = type - 1877;
                    if (WorldGen.checkXmasTreeDrop(Player.tileTargetX, Player.tileTargetY, 1) != style)
                    {
                        this.itemTime = this.inventory[this.selectedItem].useTime;
                        WorldGen.dropXmasTree(Player.tileTargetX, Player.tileTargetY, 1);
                        WorldGen.setXmasTree(Player.tileTargetX, Player.tileTargetY, 1, style);
                        var tileTargetX = Player.tileTargetX;
                        var tileTargetY = Player.tileTargetY;
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].frameX < (short) 10)
                        {
                            tileTargetX -= (int) Main.tile[Player.tileTargetX, Player.tileTargetY].frameX;
                            tileTargetY -= (int) Main.tile[Player.tileTargetX, Player.tileTargetY].frameY;
                        }

                        NetMessage.SendTileSquare(-1, tileTargetX, tileTargetY, 1, TileChangeType.None);
                    }
                }
                else if (type >= 1884 && type <= 1894)
                {
                    var style = type - 1883;
                    if (WorldGen.checkXmasTreeDrop(Player.tileTargetX, Player.tileTargetY, 2) != style)
                    {
                        this.itemTime = this.inventory[this.selectedItem].useTime;
                        WorldGen.dropXmasTree(Player.tileTargetX, Player.tileTargetY, 2);
                        WorldGen.setXmasTree(Player.tileTargetX, Player.tileTargetY, 2, style);
                        var tileTargetX = Player.tileTargetX;
                        var tileTargetY = Player.tileTargetY;
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].frameX < (short) 10)
                        {
                            tileTargetX -= (int) Main.tile[Player.tileTargetX, Player.tileTargetY].frameX;
                            tileTargetY -= (int) Main.tile[Player.tileTargetX, Player.tileTargetY].frameY;
                        }

                        NetMessage.SendTileSquare(-1, tileTargetX, tileTargetY, 1, TileChangeType.None);
                    }
                }
                else if (type >= 1895 && type <= 1905)
                {
                    var style = type - 1894;
                    if (WorldGen.checkXmasTreeDrop(Player.tileTargetX, Player.tileTargetY, 3) != style)
                    {
                        this.itemTime = this.inventory[this.selectedItem].useTime;
                        WorldGen.dropXmasTree(Player.tileTargetX, Player.tileTargetY, 3);
                        WorldGen.setXmasTree(Player.tileTargetX, Player.tileTargetY, 3, style);
                        var tileTargetX = Player.tileTargetX;
                        var tileTargetY = Player.tileTargetY;
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].frameX < (short) 10)
                        {
                            tileTargetX -= (int) Main.tile[Player.tileTargetX, Player.tileTargetY].frameX;
                            tileTargetY -= (int) Main.tile[Player.tileTargetX, Player.tileTargetY].frameY;
                        }

                        NetMessage.SendTileSquare(-1, tileTargetX, tileTargetY, 1, TileChangeType.None);
                    }
                }
            }

            if (ItemID.Sets.ExtractinatorMode[this.inventory[this.selectedItem].type] >= 0 &&
                Main.tile[Player.tileTargetX, Player.tileTargetY].active() &&
                Main.tile[Player.tileTargetX, Player.tileTargetY].type == (ushort) 219)
            {
                if (
                    (double) this.position.X / 16.0 - (double) Player.tileRangeX -
                    (double) this.inventory[this.selectedItem].tileBoost - (double) this.blockRange <=
                    (double) Player.tileTargetX &&
                    ((double) this.position.X + (double) this.width) / 16.0 + (double) Player.tileRangeX +
                    (double) this.inventory[this.selectedItem].tileBoost - 1.0 + (double) this.blockRange >=
                    (double) Player.tileTargetX &&
                    ((double) this.position.Y / 16.0 - (double) Player.tileRangeY -
                     (double) this.inventory[this.selectedItem].tileBoost - (double) this.blockRange <=
                     (double) Player.tileTargetY &&
                     ((double) this.position.Y + (double) this.height) / 16.0 + (double) Player.tileRangeY +
                     (double) this.inventory[this.selectedItem].tileBoost - 2.0 + (double) this.blockRange >=
                     (double) Player.tileTargetY) &&
                    (this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem))
                {
                    this.itemTime = this.inventory[this.selectedItem].useTime;
                    Main.PlaySound(7, -1, -1, 1, 1f, 0.0f);
                    Player.ExtractinatorUse(ItemID.Sets.ExtractinatorMode[this.inventory[this.selectedItem].type]);
                }
            }
            else if (!this.noBuilding && this.inventory[this.selectedItem].createTile >= 0 &&
                     ((double) this.position.X / 16.0 - (double) Player.tileRangeX -
                      (double) this.inventory[this.selectedItem].tileBoost - (double) this.blockRange <=
                      (double) Player.tileTargetX &&
                      ((double) this.position.X + (double) this.width) / 16.0 + (double) Player.tileRangeX +
                      (double) this.inventory[this.selectedItem].tileBoost - 1.0 + (double) this.blockRange >=
                      (double) Player.tileTargetX) &&
                     ((double) this.position.Y / 16.0 - (double) Player.tileRangeY -
                      (double) this.inventory[this.selectedItem].tileBoost - (double) this.blockRange <=
                      (double) Player.tileTargetY &&
                      ((double) this.position.Y + (double) this.height) / 16.0 + (double) Player.tileRangeY +
                      (double) this.inventory[this.selectedItem].tileBoost - 2.0 + (double) this.blockRange >=
                      (double) Player.tileTargetY))
            {
                this.showItemIcon = true;
                var flag1 = false;
                if (Main.tile[Player.tileTargetX, Player.tileTargetY].liquid > (byte) 0 &&
                    Main.tile[Player.tileTargetX, Player.tileTargetY].lava())
                {
                    if (Main.tileSolid[this.inventory[this.selectedItem].createTile])
                        flag1 = true;
                    else if (!TileObjectData.CheckLiquidPlacement(this.inventory[this.selectedItem].createTile,
                        this.inventory[this.selectedItem].placeStyle,
                        Main.tile[Player.tileTargetX, Player.tileTargetY]))
                        flag1 = true;
                }

                var flag2 = true;
                if (PlayerInput.UsingGamepad && this.inventory[this.selectedItem].createTile == 4 &&
                    (Main.SmartCursorEnabled && !Main.SmartCursorShowing))
                    flag2 = false;
                if (this.inventory[this.selectedItem].tileWand > 0)
                {
                    var tileWand = this.inventory[this.selectedItem].tileWand;
                    flag2 = false;
                    for (var index = 0; index < 58; ++index)
                    {
                        if (tileWand == this.inventory[index].type && this.inventory[index].stack > 0)
                        {
                            flag2 = true;
                            break;
                        }
                    }
                }

                if (Main.tileRope[this.inventory[this.selectedItem].createTile] && flag2 &&
                    (Main.tile[Player.tileTargetX, Player.tileTargetY].active() &&
                     Main.tileRope[(int) Main.tile[Player.tileTargetX, Player.tileTargetY].type]))
                {
                    var tileTargetY = Player.tileTargetY;
                    var tileTargetX = Player.tileTargetX;
                    var createTile = this.inventory[this.selectedItem].createTile;
                    while (Main.tile[tileTargetX, tileTargetY].active() &&
                           Main.tileRope[(int) Main.tile[tileTargetX, tileTargetY].type] &&
                           (tileTargetY < Main.maxTilesX - 5 && Main.tile[tileTargetX, tileTargetY + 2] != null) &&
                           !Main.tile[tileTargetX, tileTargetY + 1].lava())
                    {
                        ++tileTargetY;
                        if (Main.tile[tileTargetX, tileTargetY] == null)
                        {
                            flag2 = false;
                            tileTargetY = Player.tileTargetY;
                        }
                    }

                    if (!Main.tile[tileTargetX, tileTargetY].active())
                        Player.tileTargetY = tileTargetY;
                }

                if (flag2 && (!Main.tile[Player.tileTargetX, Player.tileTargetY].active() && !flag1 ||
                              Main.tileCut[(int) Main.tile[Player.tileTargetX, Player.tileTargetY].type] ||
                              (Main.tile[Player.tileTargetX, Player.tileTargetY].type >= (ushort) 373 &&
                               Main.tile[Player.tileTargetX, Player.tileTargetY].type <= (ushort) 375 ||
                               (Main.tile[Player.tileTargetX, Player.tileTargetY].type == (ushort) 461 ||
                                this.inventory[this.selectedItem].createTile == 199)) ||
                              (this.inventory[this.selectedItem].createTile == 23 ||
                               this.inventory[this.selectedItem].createTile == 2 ||
                               (this.inventory[this.selectedItem].createTile == 109 ||
                                this.inventory[this.selectedItem].createTile == 60) ||
                               (this.inventory[this.selectedItem].createTile == 70 ||
                                TileID.Sets.BreakableWhenPlacing[
                                    (int) Main.tile[Player.tileTargetX, Player.tileTargetY].type]))) &&
                    (this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem))
                {
                    var flag3 = false;
                    var flag4 = false;
                    var objectData = new TileObject();
                    if (TileObjectData.CustomPlace(this.inventory[this.selectedItem].createTile,
                            this.inventory[this.selectedItem].placeStyle) &&
                        this.inventory[this.selectedItem].createTile != 82)
                    {
                        flag4 = true;
                        flag3 = TileObject.CanPlace(Player.tileTargetX, Player.tileTargetY,
                            (int) (ushort) this.inventory[this.selectedItem].createTile,
                            this.inventory[this.selectedItem].placeStyle, this.direction, out objectData, false);
                        var width = 0;
                        var height = 0;
                        var x = 0;
                        var y = 0;
                        switch (objectData.type)
                        {
                            case 138:
                                width = 32;
                                height = 32;
                                x = objectData.xCoord * 16;
                                y = objectData.yCoord * 16;
                                break;
                            case 235:
                                width = 48;
                                height = 16;
                                x = objectData.xCoord * 16;
                                y = objectData.yCoord * 16;
                                break;
                        }

                        if (width != 0 && height != 0)
                        {
                            var rectangle =
                                new Microsoft.Xna.Framework.Rectangle(x, y, width, height);
                            for (var index = 0; index < (int) byte.MaxValue; ++index)
                            {
                                var player = Main.player[index];
                                if (player.active && !player.dead && player.Hitbox.Intersects(rectangle))
                                {
                                    flag3 = false;
                                    break;
                                }
                            }
                        }

                        if (objectData.type == 454)
                        {
                            for (var index = -2; index < 2; ++index)
                            {
                                var tile = Main.tile[Player.tileTargetX + index, Player.tileTargetY];
                                if (tile.active() && tile.type == (ushort) 454)
                                    flag3 = false;
                            }
                        }

                        if (objectData.type == 254)
                        {
                            for (var index1 = -1; index1 < 1; ++index1)
                            {
                                for (var index2 = -1; index2 < 1; ++index2)
                                {
                                    if (!WorldGen.CanCutTile(Player.tileTargetX + index2, Player.tileTargetY + index1,
                                        TileCuttingContext.TilePlacement))
                                        flag3 = false;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (this.inventory[this.selectedItem].type == 213)
                        {
                            if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == (ushort) 0 ||
                                Main.tile[Player.tileTargetX, Player.tileTargetY].type == (ushort) 1)
                                flag3 = true;
                        }
                        else if (this.inventory[this.selectedItem].createTile == 23 ||
                                 this.inventory[this.selectedItem].createTile == 2 ||
                                 (this.inventory[this.selectedItem].createTile == 109 ||
                                  this.inventory[this.selectedItem].createTile == 199))
                        {
                            if (Main.tile[Player.tileTargetX, Player.tileTargetY].nactive() &&
                                Main.tile[Player.tileTargetX, Player.tileTargetY].type == (ushort) 0)
                                flag3 = true;
                        }
                        else if (this.inventory[this.selectedItem].createTile == 227)
                            flag3 = true;
                        else if (this.inventory[this.selectedItem].createTile >= 373 &&
                                 this.inventory[this.selectedItem].createTile <= 375)
                        {
                            var tileTargetX = Player.tileTargetX;
                            var index = Player.tileTargetY - 1;
                            if (Main.tile[tileTargetX, index].nactive() &&
                                Main.tileSolid[(int) Main.tile[tileTargetX, index].type] &&
                                !Main.tileSolidTop[(int) Main.tile[tileTargetX, index].type])
                                flag3 = true;
                        }
                        else if (this.inventory[this.selectedItem].createTile == 461)
                        {
                            var tileTargetX = Player.tileTargetX;
                            var index = Player.tileTargetY - 1;
                            if (Main.tile[tileTargetX, index].nactive() &&
                                Main.tileSolid[(int) Main.tile[tileTargetX, index].type] &&
                                !Main.tileSolidTop[(int) Main.tile[tileTargetX, index].type])
                                flag3 = true;
                        }
                        else if (this.inventory[this.selectedItem].createTile == 60 ||
                                 this.inventory[this.selectedItem].createTile == 70)
                        {
                            if (Main.tile[Player.tileTargetX, Player.tileTargetY].nactive() &&
                                Main.tile[Player.tileTargetX, Player.tileTargetY].type == (ushort) 59)
                                flag3 = true;
                        }
                        else if (this.inventory[this.selectedItem].createTile == 4 ||
                                 this.inventory[this.selectedItem].createTile == 136)
                        {
                            if (Main.tile[Player.tileTargetX, Player.tileTargetY].wall > (byte) 0)
                            {
                                flag3 = true;
                            }
                            else
                            {
                                if (!WorldGen.SolidTileNoAttach(Player.tileTargetX, Player.tileTargetY + 1) &&
                                    !WorldGen.SolidTileNoAttach(Player.tileTargetX - 1, Player.tileTargetY) &&
                                    !WorldGen.SolidTileNoAttach(Player.tileTargetX + 1, Player.tileTargetY))
                                {
                                    if (!WorldGen.SolidTileNoAttach(Player.tileTargetX, Player.tileTargetY + 1) &&
                                        (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].halfBrick() ||
                                         Main.tile[Player.tileTargetX, Player.tileTargetY + 1].slope() != (byte) 0))
                                    {
                                        if (!TileID.Sets.Platforms[
                                            (int) Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type])
                                        {
                                            WorldGen.SlopeTile(Player.tileTargetX, Player.tileTargetY + 1, 0);
                                            if (Main.netMode == 1)
                                                NetMessage.SendData(17, -1, -1, (NetworkText) null, 14,
                                                    (float) Player.tileTargetX, (float) (Player.tileTargetY + 1), 0.0f,
                                                    0, 0, 0);
                                        }
                                    }
                                    else if (!WorldGen.SolidTileNoAttach(Player.tileTargetX, Player.tileTargetY + 1) &&
                                             !WorldGen.SolidTileNoAttach(Player.tileTargetX - 1, Player.tileTargetY) &&
                                             (Main.tile[Player.tileTargetX - 1, Player.tileTargetY].halfBrick() ||
                                              Main.tile[Player.tileTargetX - 1, Player.tileTargetY].slope() !=
                                              (byte) 0))
                                    {
                                        if (!TileID.Sets.Platforms[
                                            (int) Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type])
                                        {
                                            WorldGen.SlopeTile(Player.tileTargetX - 1, Player.tileTargetY, 0);
                                            if (Main.netMode == 1)
                                                NetMessage.SendData(17, -1, -1, (NetworkText) null, 14,
                                                    (float) (Player.tileTargetX - 1), (float) Player.tileTargetY, 0.0f,
                                                    0, 0, 0);
                                        }
                                    }
                                    else if (!WorldGen.SolidTileNoAttach(Player.tileTargetX, Player.tileTargetY + 1) &&
                                             !WorldGen.SolidTileNoAttach(Player.tileTargetX - 1, Player.tileTargetY) &&
                                             !WorldGen.SolidTileNoAttach(Player.tileTargetX + 1, Player.tileTargetY) &&
                                             ((Main.tile[Player.tileTargetX + 1, Player.tileTargetY].halfBrick() ||
                                               Main.tile[Player.tileTargetX + 1, Player.tileTargetY].slope() != (byte) 0
                                              ) && TileID.Sets.Platforms[
                                                  (int) Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type]))
                                    {
                                        WorldGen.SlopeTile(Player.tileTargetX + 1, Player.tileTargetY, 0);
                                        if (Main.netMode == 1)
                                            NetMessage.SendData(17, -1, -1, (NetworkText) null, 14,
                                                (float) (Player.tileTargetX + 1), (float) Player.tileTargetY, 0.0f, 0,
                                                0, 0);
                                    }
                                }

                                var index1 = (int) Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type;
                                if (Main.tile[Player.tileTargetX, Player.tileTargetY].halfBrick())
                                    index1 = -1;
                                var index2 = (int) Main.tile[Player.tileTargetX - 1, Player.tileTargetY].type;
                                var index3 = (int) Main.tile[Player.tileTargetX + 1, Player.tileTargetY].type;
                                var num1 = (int) Main.tile[Player.tileTargetX - 1, Player.tileTargetY - 1].type;
                                var num2 = (int) Main.tile[Player.tileTargetX + 1, Player.tileTargetY - 1].type;
                                var num3 = (int) Main.tile[Player.tileTargetX - 1, Player.tileTargetY - 1].type;
                                var num4 = (int) Main.tile[Player.tileTargetX + 1, Player.tileTargetY + 1].type;
                                if (!Main.tile[Player.tileTargetX, Player.tileTargetY + 1].nactive())
                                    index1 = -1;
                                if (!Main.tile[Player.tileTargetX - 1, Player.tileTargetY].nactive())
                                    index2 = -1;
                                if (!Main.tile[Player.tileTargetX + 1, Player.tileTargetY].nactive())
                                    index3 = -1;
                                if (!Main.tile[Player.tileTargetX - 1, Player.tileTargetY - 1].nactive())
                                    num1 = -1;
                                if (!Main.tile[Player.tileTargetX + 1, Player.tileTargetY - 1].nactive())
                                    num2 = -1;
                                if (!Main.tile[Player.tileTargetX - 1, Player.tileTargetY + 1].nactive())
                                    num3 = -1;
                                if (!Main.tile[Player.tileTargetX + 1, Player.tileTargetY + 1].nactive())
                                    num4 = -1;
                                if (index1 >= 0 && Main.tileSolid[index1] &&
                                    (!Main.tileNoAttach[index1] || index1 >= 0 && TileID.Sets.Platforms[index1]))
                                    flag3 = true;
                                else if (index2 >= 0 && Main.tileSolid[index2] && !Main.tileNoAttach[index2] ||
                                         index2 == 5 && num1 == 5 && num3 == 5 || index2 == 124)
                                    flag3 = true;
                                else if (index3 >= 0 && Main.tileSolid[index3] && !Main.tileNoAttach[index3] ||
                                         index3 == 5 && num2 == 5 && num4 == 5 || index3 == 124)
                                    flag3 = true;
                            }
                        }
                        else if (this.inventory[this.selectedItem].createTile == 78 ||
                                 this.inventory[this.selectedItem].createTile == 98 ||
                                 (this.inventory[this.selectedItem].createTile == 100 ||
                                  this.inventory[this.selectedItem].createTile == 173) ||
                                 (this.inventory[this.selectedItem].createTile == 174 ||
                                  this.inventory[this.selectedItem].createTile == 324))
                        {
                            if (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].nactive() &&
                                (Main.tileSolid[(int) Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type] ||
                                 Main.tileTable[(int) Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type]))
                                flag3 = true;
                        }
                        else if (this.inventory[this.selectedItem].createTile == 419)
                        {
                            if (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].active() &&
                                (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type == (ushort) 419 ||
                                 this.inventory[this.selectedItem].placeStyle != 2 &&
                                 Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type == (ushort) 420))
                                flag3 = true;
                        }
                        else if (this.inventory[this.selectedItem].createTile == 13 ||
                                 this.inventory[this.selectedItem].createTile == 29 ||
                                 (this.inventory[this.selectedItem].createTile == 33 ||
                                  this.inventory[this.selectedItem].createTile == 49) ||
                                 (this.inventory[this.selectedItem].createTile == 50 ||
                                  this.inventory[this.selectedItem].createTile == 103))
                        {
                            if (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].nactive() &&
                                Main.tileTable[(int) Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type])
                                flag3 = true;
                        }
                        else if (this.inventory[this.selectedItem].createTile == 275 ||
                                 this.inventory[this.selectedItem].createTile == 276 ||
                                 this.inventory[this.selectedItem].createTile == 277)
                            flag3 = true;
                        else if (this.inventory[this.selectedItem].createTile == 51 ||
                                 this.inventory[this.selectedItem].createTile == 330 ||
                                 (this.inventory[this.selectedItem].createTile == 331 ||
                                  this.inventory[this.selectedItem].createTile == 332) ||
                                 (this.inventory[this.selectedItem].createTile == 333 ||
                                  this.inventory[this.selectedItem].createTile == 336 ||
                                  (this.inventory[this.selectedItem].createTile == 340 ||
                                   this.inventory[this.selectedItem].createTile == 342)) ||
                                 (this.inventory[this.selectedItem].createTile == 341 ||
                                  this.inventory[this.selectedItem].createTile == 343 ||
                                  (this.inventory[this.selectedItem].createTile == 344 ||
                                   this.inventory[this.selectedItem].createTile == 379) ||
                                  this.inventory[this.selectedItem].createTile == 351))
                        {
                            if (Main.tile[Player.tileTargetX + 1, Player.tileTargetY].active() ||
                                Main.tile[Player.tileTargetX + 1, Player.tileTargetY].wall > (byte) 0 ||
                                (Main.tile[Player.tileTargetX - 1, Player.tileTargetY].active() ||
                                 Main.tile[Player.tileTargetX - 1, Player.tileTargetY].wall > (byte) 0) ||
                                (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].active() ||
                                 Main.tile[Player.tileTargetX, Player.tileTargetY + 1].wall > (byte) 0 ||
                                 (Main.tile[Player.tileTargetX, Player.tileTargetY - 1].active() ||
                                  Main.tile[Player.tileTargetX, Player.tileTargetY - 1].wall > (byte) 0)))
                                flag3 = true;
                        }
                        else if (this.inventory[this.selectedItem].createTile == 314)
                        {
                            for (var index1 = Player.tileTargetX - 1; index1 <= Player.tileTargetX + 1; ++index1)
                            {
                                for (var index2 = Player.tileTargetY - 1; index2 <= Player.tileTargetY + 1; ++index2)
                                {
                                    var tile = Main.tile[index1, index2];
                                    if (tile.active() || tile.wall > (byte) 0)
                                    {
                                        flag3 = true;
                                        break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            var tile1 = Main.tile[Player.tileTargetX - 1, Player.tileTargetY];
                            var tile2 = Main.tile[Player.tileTargetX + 1, Player.tileTargetY];
                            var tile3 = Main.tile[Player.tileTargetX, Player.tileTargetY - 1];
                            var tile4 = Main.tile[Player.tileTargetX, Player.tileTargetY + 1];
                            if (tile2.active() && (Main.tileSolid[(int) tile2.type] ||
                                                   Main.tileRope[(int) tile2.type] || tile2.type == (ushort) 314) ||
                                tile2.wall > (byte) 0 ||
                                (tile1.active() && (Main.tileSolid[(int) tile1.type] ||
                                                    Main.tileRope[(int) tile1.type] || tile1.type == (ushort) 314) ||
                                 tile1.wall > (byte) 0) ||
                                (tile4.active() && (Main.tileSolid[(int) tile4.type] || tile4.type == (ushort) 124 ||
                                                    (Main.tileRope[(int) tile4.type] || tile4.type == (ushort) 314)) ||
                                 tile4.wall > (byte) 0 ||
                                 (tile3.active() && (Main.tileSolid[(int) tile3.type] || tile3.type == (ushort) 124 ||
                                                     (Main.tileRope[(int) tile3.type] || tile3.type == (ushort) 314)) ||
                                  tile3.wall > (byte) 0)))
                                flag3 = true;
                        }

                        if (this.inventory[this.selectedItem].type == 213 &&
                            Main.tile[Player.tileTargetX, Player.tileTargetY].active())
                        {
                            var tileTargetX = Player.tileTargetX;
                            var tileTargetY = Player.tileTargetY;
                            if (Main.tile[tileTargetX, tileTargetY].type == (ushort) 3 ||
                                Main.tile[tileTargetX, tileTargetY].type == (ushort) 73 ||
                                Main.tile[tileTargetX, tileTargetY].type == (ushort) 84)
                            {
                                WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, false, false, false);
                                if (!Main.tile[Player.tileTargetX, Player.tileTargetY].active() && Main.netMode == 1)
                                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) Player.tileTargetX,
                                        (float) Player.tileTargetY, 0.0f, 0, 0, 0);
                            }
                            else if (Main.tile[tileTargetX, tileTargetY].type == (ushort) 83)
                            {
                                var flag5 = false;
                                var num = (int) Main.tile[tileTargetX, tileTargetY].frameX / 18;
                                if (num == 0 && Main.dayTime)
                                    flag5 = true;
                                if (num == 1 && !Main.dayTime)
                                    flag5 = true;
                                if (num == 3 && !Main.dayTime && (Main.bloodMoon || Main.moonPhase == 0))
                                    flag5 = true;
                                if (num == 4 && (Main.raining || (double) Main.cloudAlpha > 0.0))
                                    flag5 = true;
                                if (num == 5 && !Main.raining && (Main.dayTime && Main.time > 40500.0))
                                    flag5 = true;
                                if (flag5)
                                {
                                    WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, false, false, false);
                                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) Player.tileTargetX,
                                        (float) Player.tileTargetY, 0.0f, 0, 0, 0);
                                }
                            }
                        }

                        if (Main.tileAlch[this.inventory[this.selectedItem].createTile])
                            flag3 = true;
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].active() &&
                            (Main.tileCut[(int) Main.tile[Player.tileTargetX, Player.tileTargetY].type] ||
                             TileID.Sets.BreakableWhenPlacing
                                 [(int) Main.tile[Player.tileTargetX, Player.tileTargetY].type] ||
                             Main.tile[Player.tileTargetX, Player.tileTargetY].type >= (ushort) 373 &&
                             Main.tile[Player.tileTargetX, Player.tileTargetY].type <= (ushort) 375 ||
                             Main.tile[Player.tileTargetX, Player.tileTargetY].type == (ushort) 461))
                        {
                            if ((int) Main.tile[Player.tileTargetX, Player.tileTargetY].type !=
                                this.inventory[this.selectedItem].createTile)
                            {
                                if (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type != (ushort) 78 &&
                                    Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type != (ushort) 380 ||
                                    (Main.tile[Player.tileTargetX, Player.tileTargetY].type == (ushort) 3 ||
                                     Main.tile[Player.tileTargetX, Player.tileTargetY].type == (ushort) 73) &&
                                    Main.tileAlch[this.inventory[this.selectedItem].createTile])
                                {
                                    WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, false, false, false);
                                    if (!Main.tile[Player.tileTargetX, Player.tileTargetY].active() &&
                                        Main.netMode == 1)
                                        NetMessage.SendData(17, -1, -1, (NetworkText) null, 4,
                                            (float) Player.tileTargetX, (float) Player.tileTargetY, 0.0f, 0, 0, 0);
                                }
                                else
                                    flag3 = false;
                            }
                            else
                                flag3 = false;
                        }

                        if (!flag3 && this.inventory[this.selectedItem].createTile >= 0 &&
                            TileID.Sets.Platforms[this.inventory[this.selectedItem].createTile])
                        {
                            for (var index1 = Player.tileTargetX - 1; index1 <= Player.tileTargetX + 1; ++index1)
                            {
                                for (var index2 = Player.tileTargetY - 1; index2 <= Player.tileTargetY + 1; ++index2)
                                {
                                    if (Main.tile[index1, index2].active())
                                    {
                                        flag3 = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    if (flag3)
                    {
                        var num1 = this.inventory[this.selectedItem].placeStyle;
                        if (!flag4)
                        {
                            if (this.inventory[this.selectedItem].createTile == 36)
                                num1 = Main.rand.Next(7);
                            if (this.inventory[this.selectedItem].createTile == 212 && this.direction > 0)
                                num1 = 1;
                            if (this.inventory[this.selectedItem].createTile == 141)
                                num1 = Main.rand.Next(2);
                            if (this.inventory[this.selectedItem].createTile == 128 ||
                                this.inventory[this.selectedItem].createTile == 269 ||
                                this.inventory[this.selectedItem].createTile == 334)
                                num1 = this.direction >= 0 ? 1 : -1;
                            if (this.inventory[this.selectedItem].createTile == 241 &&
                                this.inventory[this.selectedItem].placeStyle == 0)
                                num1 = Main.rand.Next(0, 9);
                            if (this.inventory[this.selectedItem].createTile == 35 &&
                                this.inventory[this.selectedItem].placeStyle == 0)
                                num1 = Main.rand.Next(9);
                        }

                        if (this.inventory[this.selectedItem].createTile == 314 && num1 == 2 && this.direction == 1)
                            ++num1;
                        var numArray = (int[,]) null;
                        if (this.autoPaint || this.autoActuator)
                        {
                            numArray = new int[11, 11];
                            for (var index1 = 0; index1 < 11; ++index1)
                            {
                                for (var index2 = 0; index2 < 11; ++index2)
                                {
                                    var index3 = Player.tileTargetX - 5 + index1;
                                    var index4 = Player.tileTargetY - 5 + index2;
                                    numArray[index1, index2] = !Main.tile[index3, index4].active()
                                        ? -1
                                        : (int) Main.tile[index3, index4].type;
                                }
                            }
                        }

                        var forced = false;
                        bool flag5;
                        if (flag4)
                        {
                            flag5 = TileObject.Place(objectData);
                            WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
                            Main.PlaySound(0, Player.tileTargetX * 16, Player.tileTargetY * 16, 1, 1f, 0.0f);
                        }
                        else
                            flag5 = WorldGen.PlaceTile(Player.tileTargetX, Player.tileTargetY,
                                this.inventory[this.selectedItem].createTile, false, forced, this.whoAmI, num1);

                        if (this.inventory[this.selectedItem].type == 213 && !flag5 &&
                            (Main.tile[Player.tileTargetX, Player.tileTargetY].type == (ushort) 1 &&
                             Main.tile[Player.tileTargetX, Player.tileTargetY].active()))
                        {
                            var num2 = 0;
                            var num3 = 0;
                            var tileCoordinates = this.Center.ToTileCoordinates();
                            var resultsOutput = new Dictionary<ushort, int>();
                            WorldUtils.Gen(new Point(tileCoordinates.X - 25, tileCoordinates.Y - 25),
                                (GenShape) new Shapes.Rectangle(50, 50), (GenAction) new Actions.TileScanner(
                                    new ushort[6]
                                    {
                                        (ushort) 182,
                                        (ushort) 180,
                                        (ushort) 179,
                                        (ushort) 183,
                                        (ushort) 181,
                                        (ushort) 381
                                    }).Output(resultsOutput));
                            foreach (var keyValuePair in resultsOutput)
                            {
                                if (keyValuePair.Value > num3)
                                {
                                    num3 = keyValuePair.Value;
                                    num2 = (int) keyValuePair.Key;
                                }
                            }

                            if (num3 == 0)
                                num2 = Utils.SelectRandom<int>(Main.rand, new int[5]
                                {
                                    182,
                                    180,
                                    179,
                                    183,
                                    181
                                });
                            if (num2 != 0)
                            {
                                Main.tile[Player.tileTargetX, Player.tileTargetY].type = (ushort) num2;
                                WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
                                NetMessage.SendTileSquare(-1, Player.tileTargetX, Player.tileTargetY, 1,
                                    TileChangeType.None);
                                flag5 = true;
                            }
                        }

                        if (flag5)
                        {
                            this.itemTime = (int) ((double) this.inventory[this.selectedItem].useTime *
                                                   (double) this.tileSpeed);
                            if (flag4)
                            {
                                TileObjectData.CallPostPlacementPlayerHook(Player.tileTargetX, Player.tileTargetY,
                                    this.inventory[this.selectedItem].createTile, num1, this.direction, objectData);
                                if (Main.netMode == 1 &&
                                    !Main.tileContainer[this.inventory[this.selectedItem].createTile] &&
                                    this.inventory[this.selectedItem].createTile != 423)
                                    NetMessage.SendObjectPlacment(-1, Player.tileTargetX, Player.tileTargetY,
                                        objectData.type, objectData.style, objectData.alternate, objectData.random,
                                        this.direction);
                            }
                            else
                            {
                                NetMessage.SendData(17, -1, -1, (NetworkText) null, 1, (float) Player.tileTargetX,
                                    (float) Player.tileTargetY, (float) this.inventory[this.selectedItem].createTile,
                                    num1, 0, 0);
                                if (this.inventory[this.selectedItem].createTile == 15)
                                {
                                    if (this.direction == 1)
                                    {
                                        Main.tile[Player.tileTargetX, Player.tileTargetY].frameX += (short) 18;
                                        Main.tile[Player.tileTargetX, Player.tileTargetY - 1].frameX += (short) 18;
                                    }

                                    if (Main.netMode == 1)
                                        NetMessage.SendTileSquare(-1, Player.tileTargetX - 1, Player.tileTargetY - 1, 3,
                                            TileChangeType.None);
                                }
                                else if ((this.inventory[this.selectedItem].createTile == 79 ||
                                          this.inventory[this.selectedItem].createTile == 90) && Main.netMode == 1)
                                    NetMessage.SendTileSquare(-1, Player.tileTargetX, Player.tileTargetY, 5,
                                        TileChangeType.None);
                            }

                            if (this.inventory[this.selectedItem].createTile == 137)
                            {
                                if (this.direction == 1)
                                    Main.tile[Player.tileTargetX, Player.tileTargetY].frameX += (short) 18;
                                if (Main.netMode == 1)
                                    NetMessage.SendTileSquare(-1, Player.tileTargetX, Player.tileTargetY, 1,
                                        TileChangeType.None);
                            }

                            if (this.inventory[this.selectedItem].createTile == 419)
                            {
                                if (Main.netMode == 1)
                                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 18, (float) Player.tileTargetX,
                                        (float) Player.tileTargetY, 0.0f, 0, 0, 0);
                                else
                                    Wiring.PokeLogicGate(Player.tileTargetX, Player.tileTargetY);
                            }

                            if (this.inventory[this.selectedItem].createTile >= 0 &&
                                TileID.Sets.Platforms[this.inventory[this.selectedItem].createTile] &&
                                Main.SmartCursorEnabled)
                            {
                                var tileTargetX = Player.tileTargetX;
                                var tileTargetY = Player.tileTargetY;
                                var slope1 = -1;
                                var num2 = 0;
                                var num3 = 0;
                                var flag6 = true;
                                for (var index1 = -1; index1 < 2; ++index1)
                                {
                                    for (var index2 = -1; index2 < 2; ++index2)
                                    {
                                        if ((index1 != 0 || index2 != 0) &&
                                            TileID.Sets.Platforms[
                                                (int) Main.tile[tileTargetX + index1, tileTargetY + index2].type])
                                            flag6 = false;
                                    }
                                }

                                if (!flag6)
                                {
                                    var tile1 = Main.tile[tileTargetX - 1, tileTargetY - 1];
                                    if (tile1.active() && TileID.Sets.Platforms[(int) tile1.type] &&
                                        tile1.slope() != (byte) 2)
                                        ++num2;
                                    var tile2 = Main.tile[tileTargetX - 1, tileTargetY + 1];
                                    if (tile2.active() && TileID.Sets.Platforms[(int) tile2.type] &&
                                        tile2.slope() != (byte) 1)
                                        ++num3;
                                    var tile3 = Main.tile[tileTargetX + 1, tileTargetY - 1];
                                    if (tile3.active() && TileID.Sets.Platforms[(int) tile3.type] &&
                                        tile3.slope() != (byte) 1)
                                        ++num3;
                                    var tile4 = Main.tile[tileTargetX + 1, tileTargetY + 1];
                                    if (tile4.active() && TileID.Sets.Platforms[(int) tile4.type] &&
                                        tile4.slope() != (byte) 2)
                                        ++num2;
                                    var testTile1 = Main.tile[tileTargetX - 1, tileTargetY];
                                    if (WorldGen.SolidTile(testTile1))
                                    {
                                        ++num2;
                                        if (TileID.Sets.Platforms[(int) testTile1.type] &&
                                            testTile1.slope() == (byte) 0)
                                            ++num2;
                                    }

                                    var testTile2 = Main.tile[tileTargetX + 1, tileTargetY];
                                    if (WorldGen.SolidTile(testTile2))
                                    {
                                        ++num3;
                                        if (TileID.Sets.Platforms[(int) testTile2.type] &&
                                            testTile2.slope() == (byte) 0)
                                            ++num3;
                                    }

                                    if (num2 > num3)
                                        slope1 = 1;
                                    else if (num3 > num2)
                                        slope1 = 2;
                                    var tile5 = Main.tile[tileTargetX - 1, tileTargetY];
                                    if (tile5.active() && TileID.Sets.Platforms[(int) tile5.type])
                                        slope1 = 0;
                                    var tile6 = Main.tile[tileTargetX + 1, tileTargetY];
                                    if (tile6.active() && TileID.Sets.Platforms[(int) tile6.type])
                                        slope1 = 0;
                                    if (slope1 != -1)
                                    {
                                        WorldGen.SlopeTile(tileTargetX, tileTargetY, slope1);
                                        var num4 = (int) Main.tile[tileTargetX, tileTargetY].slope();
                                        if (Main.netMode == 1)
                                            NetMessage.SendData(17, -1, -1, (NetworkText) null, 14,
                                                (float) Player.tileTargetX, (float) Player.tileTargetY, (float) num4, 0,
                                                0, 0);
                                        int num5;
                                        int num6;
                                        if (slope1 == 1)
                                        {
                                            num5 = -1;
                                            num6 = -1;
                                        }
                                        else
                                        {
                                            num5 = 1;
                                            num6 = -1;
                                        }

                                        var tile7 = Main.tile[tileTargetX + num5, tileTargetY + num6];
                                        if (tile7.active() && TileID.Sets.Platforms[(int) tile7.type] &&
                                            tile7.slope() == (byte) 0 &&
                                            (!Main.tile[tileTargetX + num5 + num5, tileTargetY + num6].active() ||
                                             !TileID.Sets.Platforms[
                                                 (int) Main.tile[tileTargetX + num5 + num5, tileTargetY + num6].type] ||
                                             !Main.tile[tileTargetX + num5 + num5, tileTargetY + num6].halfBrick()))
                                        {
                                            WorldGen.SlopeTile(tileTargetX + num5, tileTargetY + num6, slope1);
                                            var num7 = (int) tile7.slope();
                                            if (Main.netMode == 1)
                                                NetMessage.SendData(17, -1, -1, (NetworkText) null, 14,
                                                    (float) (tileTargetX + num5), (float) (tileTargetY + num6),
                                                    (float) num7, 0, 0, 0);
                                        }

                                        int num8;
                                        int num9;
                                        if (slope1 == 1)
                                        {
                                            num8 = 1;
                                            num9 = 1;
                                        }
                                        else
                                        {
                                            num8 = -1;
                                            num9 = 1;
                                        }

                                        var tile8 = Main.tile[tileTargetX + num8, tileTargetY + num9];
                                        if (tile8.active() && TileID.Sets.Platforms[(int) tile8.type] &&
                                            (tile8.slope() == (byte) 0 &&
                                             WorldGen.PlatformProperSides(tileTargetX + num8, tileTargetY + num9,
                                                 true) <= 0))
                                        {
                                            WorldGen.SlopeTile(tileTargetX + num8, tileTargetY + num9, slope1);
                                            var num7 = (int) tile8.slope();
                                            if (Main.netMode == 1)
                                                NetMessage.SendData(17, -1, -1, (NetworkText) null, 14,
                                                    (float) (tileTargetX + num8), (float) (tileTargetY + num9),
                                                    (float) num7, 0, 0, 0);
                                        }
                                    }
                                    else
                                    {
                                        var num4 = -1;
                                        var tile7 = Main.tile[tileTargetX + num4, tileTargetY];
                                        if (tile7.active() && TileID.Sets.Platforms[(int) tile7.type] &&
                                            tile7.slope() != (byte) 0)
                                        {
                                            var num5 = (tile7.slope() == (byte) 1).ToDirectionInt() * num4;
                                            var slope2 = num5 == -1 ? 0 : (int) tile7.slope();
                                            var flag7 = true;
                                            if (Main.tile[tileTargetX + num4 * 2, tileTargetY + num5].active() &&
                                                TileID.Sets.Platforms[
                                                    (int) Main.tile[tileTargetX + num4 * 2, tileTargetY].type] &&
                                                slope2 == (int) Main.tile[tileTargetX + num4 * 2, tileTargetY + num5]
                                                    .slope())
                                                flag7 = false;
                                            if (Main.tile[tileTargetX, tileTargetY - num5].active() &&
                                                TileID.Sets.Platforms[
                                                    (int) Main.tile[tileTargetX, tileTargetY - num5].type] &&
                                                (int) tile7.slope() ==
                                                (int) Main.tile[tileTargetX, tileTargetY - num5].slope())
                                                flag7 = false;
                                            if (flag7)
                                            {
                                                WorldGen.SlopeTile(tileTargetX + num4, tileTargetY, slope2);
                                                var num6 = (int) tile7.slope();
                                                if (Main.netMode == 1)
                                                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 14,
                                                        (float) (tileTargetX + num4), (float) tileTargetY, (float) num6,
                                                        0, 0, 0);
                                            }
                                        }

                                        var num7 = 1;
                                        var num8 = 0;
                                        var tile8 = Main.tile[tileTargetX + num7, tileTargetY + num8];
                                        if (tile8.active() && TileID.Sets.Platforms[(int) tile8.type] &&
                                            tile8.slope() != (byte) 0)
                                        {
                                            var num5 = (tile8.slope() == (byte) 1).ToDirectionInt() * num7;
                                            var slope2 = num5 == -1 ? 0 : (int) tile8.slope();
                                            var flag7 = true;
                                            if (Main.tile[tileTargetX + num7 * 2, tileTargetY + num5].active() &&
                                                TileID.Sets.Platforms[
                                                    (int) Main.tile[tileTargetX + num7 * 2, tileTargetY].type] &&
                                                slope2 == (int) Main.tile[tileTargetX + num7 * 2, tileTargetY + num5]
                                                    .slope())
                                                flag7 = false;
                                            if (Main.tile[tileTargetX, tileTargetY - num5].active() &&
                                                TileID.Sets.Platforms[
                                                    (int) Main.tile[tileTargetX, tileTargetY - num5].type] &&
                                                (int) tile8.slope() ==
                                                (int) Main.tile[tileTargetX, tileTargetY - num5].slope())
                                                flag7 = false;
                                            if (flag7)
                                            {
                                                WorldGen.SlopeTile(tileTargetX + num7, tileTargetY, slope2);
                                                var num6 = (int) tile8.slope();
                                                if (Main.netMode == 1)
                                                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 14,
                                                        (float) (tileTargetX + num7), (float) tileTargetY, (float) num6,
                                                        0, 0, 0);
                                            }
                                        }

                                        if (num2 == num3 &&
                                            WorldGen.PlatformProperSides(tileTargetX, tileTargetY, false) == 0)
                                        {
                                            var tile9 = Main.tile[tileTargetX, tileTargetY + 1];
                                            if (tile9.active() && !tile9.halfBrick() &&
                                                (tile9.slope() == (byte) 0 && Main.tileSolid[(int) tile9.type]))
                                            {
                                                var slope2 = this.direction == 1 ? 2 : 1;
                                                WorldGen.SlopeTile(tileTargetX, tileTargetY, slope2);
                                                var num5 = (int) Main.tile[tileTargetX, tileTargetY].slope();
                                                if (Main.netMode == 1)
                                                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 14,
                                                        (float) Player.tileTargetX, (float) Player.tileTargetY,
                                                        (float) num5, 0, 0, 0);
                                            }
                                        }
                                    }
                                }
                            }

                            if (Main.tileSolid[this.inventory[this.selectedItem].createTile] &&
                                (this.inventory[this.selectedItem].createTile < 0 ||
                                 !TileID.Sets.Platforms[this.inventory[this.selectedItem].createTile]))
                            {
                                var tileTargetX1 = Player.tileTargetX;
                                var j1 = Player.tileTargetY + 1;
                                if (Main.tile[tileTargetX1, j1] != null &&
                                    !TileID.Sets.Platforms[(int) Main.tile[tileTargetX1, j1].type] &&
                                    (Main.tile[tileTargetX1, j1].topSlope() || Main.tile[tileTargetX1, j1].halfBrick()))
                                {
                                    WorldGen.SlopeTile(tileTargetX1, j1, 0);
                                    if (Main.netMode == 1)
                                        NetMessage.SendData(17, -1, -1, (NetworkText) null, 14, (float) tileTargetX1,
                                            (float) j1, 0.0f, 0, 0, 0);
                                }

                                var tileTargetX2 = Player.tileTargetX;
                                var j2 = Player.tileTargetY - 1;
                                if (Main.tile[tileTargetX2, j2] != null &&
                                    !TileID.Sets.Platforms[(int) Main.tile[tileTargetX2, j2].type] &&
                                    Main.tile[tileTargetX2, j2].bottomSlope())
                                {
                                    WorldGen.SlopeTile(tileTargetX2, j2, 0);
                                    if (Main.netMode == 1)
                                        NetMessage.SendData(17, -1, -1, (NetworkText) null, 14, (float) tileTargetX2,
                                            (float) j2, 0.0f, 0, 0, 0);
                                }
                            }

                            if (Main.tileSolid[this.inventory[this.selectedItem].createTile])
                            {
                                for (var i1 = Player.tileTargetX - 1; i1 <= Player.tileTargetX + 1; ++i1)
                                {
                                    for (var j1 = Player.tileTargetY - 1; j1 <= Player.tileTargetY + 1; ++j1)
                                    {
                                        if (Main.tile[i1, j1].active() &&
                                            this.inventory[this.selectedItem].createTile !=
                                            (int) Main.tile[i1, j1].type &&
                                            (Main.tile[i1, j1].type == (ushort) 2 ||
                                             Main.tile[i1, j1].type == (ushort) 23 ||
                                             (Main.tile[i1, j1].type == (ushort) 60 ||
                                              Main.tile[i1, j1].type == (ushort) 70) ||
                                             (Main.tile[i1, j1].type == (ushort) 109 ||
                                              Main.tile[i1, j1].type == (ushort) 199)))
                                        {
                                            var flag6 = true;
                                            for (var i2 = i1 - 1; i2 <= i1 + 1; ++i2)
                                            {
                                                for (var j2 = j1 - 1; j2 <= j1 + 1; ++j2)
                                                {
                                                    if (!WorldGen.SolidTile(i2, j2))
                                                        flag6 = false;
                                                }
                                            }

                                            if (flag6)
                                            {
                                                WorldGen.KillTile(i1, j1, true, false, false);
                                                if (Main.netMode == 1)
                                                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) i1,
                                                        (float) j1, 1f, 0, 0, 0);
                                            }
                                        }
                                    }
                                }
                            }

                            if (this.autoPaint || this.autoActuator)
                            {
                                var num2 = 0;
                                var num3 = 0;
                                var num4 = 11;
                                var num5 = 11;
                                if (!Main.tileFrameImportant[
                                    (int) Main.tile[Player.tileTargetX, Player.tileTargetY].type])
                                {
                                    num2 = num3 = 5;
                                    num4 = num5 = 6;
                                }

                                for (var index1 = num2; index1 < num4; ++index1)
                                {
                                    for (var index2 = num3; index2 < num5; ++index2)
                                    {
                                        var index3 = Player.tileTargetX - 5 + index1;
                                        var index4 = Player.tileTargetY - 5 + index2;
                                        if ((Main.tile[index3, index4].active() || numArray[index1, index2] != -1) &&
                                            (!Main.tile[index3, index4].active() ||
                                             numArray[index1, index2] != (int) Main.tile[index3, index4].type &&
                                             (int) Main.tile[index3, index4].type ==
                                             this.inventory[this.selectedItem].createTile))
                                        {
                                            if (this.autoPaint && this.builderAccStatus[3] == 0)
                                            {
                                                var num6 = -1;
                                                var num7 = -1;
                                                for (var index5 = 0; index5 < 58; ++index5)
                                                {
                                                    if (this.inventory[index5].stack > 0 &&
                                                        this.inventory[index5].paint > (byte) 0)
                                                    {
                                                        num6 = (int) this.inventory[index5].paint;
                                                        num7 = index5;
                                                        break;
                                                    }
                                                }

                                                if (num6 > 0 && (int) Main.tile[index3, index4].color() != num6 &&
                                                    WorldGen.paintTile(index3, index4, (byte) num6, true))
                                                {
                                                    var index5 = num7;
                                                    --this.inventory[index5].stack;
                                                    if (this.inventory[index5].stack <= 0)
                                                        this.inventory[index5].SetDefaults(0, false);
                                                    this.itemTime =
                                                        (int) ((double) this.inventory[this.selectedItem].useTime *
                                                               (double) this.tileSpeed);
                                                }
                                            }

                                            if (this.autoActuator && this.builderAccStatus[2] == 0)
                                            {
                                                var flag6 =
                                                    Main.tileSolid[(int) Main.tile[index3, index4].type] &&
                                                    !TileID.Sets.NotReallySolid[(int) Main.tile[index3, index4].type];
                                                switch (Main.tile[index3, index4].type)
                                                {
                                                    case 314:
                                                    case 386:
                                                    case 387:
                                                    case 388:
                                                    case 389:
                                                        flag6 = false;
                                                        break;
                                                }

                                                if (flag6)
                                                {
                                                    var index5 = this.FindItem(849);
                                                    if (index5 > -1 && WorldGen.PlaceActuator(index3, index4))
                                                    {
                                                        NetMessage.SendData(17, -1, -1, (NetworkText) null, 8,
                                                            (float) index3, (float) index4, 0.0f, 0, 0, 0);
                                                        --this.inventory[index5].stack;
                                                        if (this.inventory[index5].stack <= 0)
                                                            this.inventory[index5].SetDefaults(0, false);
                                                        this.itemTime =
                                                            (int) ((double) this.inventory[this.selectedItem].useTime *
                                                                   (double) this.tileSpeed);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            if (PlayerInput.UsingGamepad &&
                                ItemID.Sets.SingleUseInGamepad[this.inventory[this.selectedItem].type] &&
                                (Main.myPlayer == this.whoAmI && !Main.SmartCursorEnabled))
                                Main.blockMouse = true;
                        }
                    }
                }
            }

            if (this.inventory[this.selectedItem].createWall < 0 ||
                (double) this.position.X / 16.0 - (double) Player.tileRangeX -
                (double) this.inventory[this.selectedItem].tileBoost > (double) Player.tileTargetX ||
                (((double) this.position.X + (double) this.width) / 16.0 + (double) Player.tileRangeX +
                 (double) this.inventory[this.selectedItem].tileBoost - 1.0 < (double) Player.tileTargetX ||
                 (double) this.position.Y / 16.0 - (double) Player.tileRangeY -
                 (double) this.inventory[this.selectedItem].tileBoost > (double) Player.tileTargetY) ||
                ((double) this.position.Y + (double) this.height) / 16.0 + (double) Player.tileRangeY +
                (double) this.inventory[this.selectedItem].tileBoost - 2.0 < (double) Player.tileTargetY)
                return;
            this.showItemIcon = true;
            if (this.itemTime != 0 || this.itemAnimation <= 0 || !this.controlUseItem ||
                !Main.tile[Player.tileTargetX + 1, Player.tileTargetY].active() &&
                Main.tile[Player.tileTargetX + 1, Player.tileTargetY].wall <= (byte) 0 &&
                (!Main.tile[Player.tileTargetX - 1, Player.tileTargetY].active() &&
                 Main.tile[Player.tileTargetX - 1, Player.tileTargetY].wall <= (byte) 0) &&
                (!Main.tile[Player.tileTargetX, Player.tileTargetY + 1].active() &&
                 Main.tile[Player.tileTargetX, Player.tileTargetY + 1].wall <= (byte) 0 &&
                 (!Main.tile[Player.tileTargetX, Player.tileTargetY - 1].active() &&
                  Main.tile[Player.tileTargetX, Player.tileTargetY - 1].wall <= (byte) 0)) ||
                (int) Main.tile[Player.tileTargetX, Player.tileTargetY].wall ==
                this.inventory[this.selectedItem].createWall)
                return;
            if (Player.SmartCursorSettings.SmartWallReplacement &&
                Main.tile[Player.tileTargetX, Player.tileTargetY].wall != (byte) 0 &&
                WorldGen.NearFriendlyWall(Player.tileTargetX, Player.tileTargetY))
            {
                WorldGen.KillWall(Player.tileTargetX, Player.tileTargetY, false);
                if (Main.tile[Player.tileTargetX, Player.tileTargetY].wall == (byte) 0 && Main.netMode == 1)
                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 2, (float) Player.tileTargetX,
                        (float) Player.tileTargetY, 0.0f, 0, 0, 0);
                if (this.inventory[this.selectedItem].consumable)
                    ++this.inventory[this.selectedItem].stack;
                this.itemTime = (int) ((double) this.inventory[this.selectedItem].useTime * (double) this.wallSpeed);
            }
            else
            {
                WorldGen.PlaceWall(Player.tileTargetX, Player.tileTargetY, this.inventory[this.selectedItem].createWall,
                    false);
                if ((int) Main.tile[Player.tileTargetX, Player.tileTargetY].wall !=
                    this.inventory[this.selectedItem].createWall)
                    return;
                this.itemTime = (int) ((double) this.inventory[this.selectedItem].useTime * (double) this.wallSpeed);
                if (Main.netMode == 1)
                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 3, (float) Player.tileTargetX,
                        (float) Player.tileTargetY, (float) this.inventory[this.selectedItem].createWall, 0, 0, 0);
                if (this.inventory[this.selectedItem].stack > 1)
                {
                    var createWall = this.inventory[this.selectedItem].createWall;
                    for (var index1 = 0; index1 < 4; ++index1)
                    {
                        var tileTargetX = Player.tileTargetX;
                        var tileTargetY = Player.tileTargetY;
                        if (index1 == 0)
                            --tileTargetX;
                        if (index1 == 1)
                            ++tileTargetX;
                        if (index1 == 2)
                            --tileTargetY;
                        if (index1 == 3)
                            ++tileTargetY;
                        if (Main.tile[tileTargetX, tileTargetY].wall == (byte) 0)
                        {
                            var num1 = 0;
                            for (var index2 = 0; index2 < 4; ++index2)
                            {
                                var index3 = tileTargetX;
                                var index4 = tileTargetY;
                                if (index2 == 0)
                                    --index3;
                                if (index2 == 1)
                                    ++index3;
                                if (index2 == 2)
                                    --index4;
                                if (index2 == 3)
                                    ++index4;
                                if ((int) Main.tile[index3, index4].wall == createWall)
                                    ++num1;
                            }

                            if (num1 == 4)
                            {
                                WorldGen.PlaceWall(tileTargetX, tileTargetY, createWall, false);
                                if ((int) Main.tile[tileTargetX, tileTargetY].wall == createWall)
                                {
                                    --this.inventory[this.selectedItem].stack;
                                    if (this.inventory[this.selectedItem].stack == 0)
                                        this.inventory[this.selectedItem].SetDefaults(0, false);
                                    if (Main.netMode == 1)
                                        NetMessage.SendData(17, -1, -1, (NetworkText) null, 3, (float) tileTargetX,
                                            (float) tileTargetY, (float) createWall, 0, 0, 0);
                                    if (this.autoPaint && this.builderAccStatus[3] == 0)
                                    {
                                        var x = tileTargetX;
                                        var y = tileTargetY;
                                        var num2 = -1;
                                        var num3 = -1;
                                        for (var index2 = 0; index2 < 58; ++index2)
                                        {
                                            if (this.inventory[index2].stack > 0 &&
                                                this.inventory[index2].paint > (byte) 0)
                                            {
                                                num2 = (int) this.inventory[index2].paint;
                                                num3 = index2;
                                                break;
                                            }
                                        }

                                        if (num2 > 0 && (int) Main.tile[x, y].wallColor() != num2 &&
                                            WorldGen.paintWall(x, y, (byte) num2, true))
                                        {
                                            var index2 = num3;
                                            --this.inventory[index2].stack;
                                            if (this.inventory[index2].stack <= 0)
                                                this.inventory[index2].SetDefaults(0, false);
                                            this.itemTime =
                                                (int) ((double) this.inventory[this.selectedItem].useTime *
                                                       (double) this.wallSpeed);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                if (!this.autoPaint || this.builderAccStatus[3] != 0)
                    return;
                var tileTargetX1 = Player.tileTargetX;
                var tileTargetY1 = Player.tileTargetY;
                var num4 = -1;
                var num5 = -1;
                for (var index = 0; index < 58; ++index)
                {
                    if (this.inventory[index].stack > 0 && this.inventory[index].paint > (byte) 0)
                    {
                        num4 = (int) this.inventory[index].paint;
                        num5 = index;
                        break;
                    }
                }

                if (num4 <= 0 || (int) Main.tile[tileTargetX1, tileTargetY1].wallColor() == num4 ||
                    !WorldGen.paintWall(tileTargetX1, tileTargetY1, (byte) num4, true))
                    return;
                var index5 = num5;
                --this.inventory[index5].stack;
                if (this.inventory[index5].stack <= 0)
                    this.inventory[index5].SetDefaults(0, false);
                this.itemTime = (int) ((double) this.inventory[this.selectedItem].useTime * (double) this.wallSpeed);
            }
        }

        private void ShootFromCannon(int x, int y)
        {
            var ammo = 0;
            if (Main.tile[x, y].frameX < (short) 72)
            {
                if (this.inventory[this.selectedItem].type == 929)
                    ammo = 1;
            }
            else if (Main.tile[x, y].frameX < (short) 144)
            {
                if (this.inventory[this.selectedItem].type == 1338)
                    ammo = 2;
            }
            else if (Main.tile[x, y].frameX < (short) 288 && this.inventory[this.selectedItem].type == 1345)
                ammo = 3;

            if (ammo <= 0)
                return;
            this.showItemIcon = true;
            if (this.itemTime != 0 || this.itemAnimation <= 0 || !this.controlUseItem)
                return;
            var num1 = (int) Main.tile[x, y].frameX / 18;
            var num2 = 0;
            var angle = 0;
            while (num1 >= 4)
            {
                ++num2;
                num1 -= 4;
            }

            var x1 = x - num1;
            var num3 = (int) Main.tile[x, y].frameY / 18;
            while (num3 >= 3)
            {
                ++angle;
                num3 -= 3;
            }

            var y1 = y - num3;
            this.itemTime = this.inventory[this.selectedItem].useTime;
            WorldGen.ShootFromCannon(x1, y1, angle, ammo, this.inventory[this.selectedItem].damage, 8f, Main.myPlayer);
        }

        private static void ExtractinatorUse(int extractType)
        {
            var maxValue1 = 5000;
            var maxValue2 = 25;
            var maxValue3 = 50;
            var maxValue4 = -1;
            if (extractType == 1)
            {
                maxValue1 /= 3;
                maxValue2 *= 2;
                maxValue3 /= 2;
                maxValue4 = 10;
            }

            var Stack = 1;
            int Type;
            if (maxValue4 != -1 && Main.rand.Next(maxValue4) == 0)
            {
                Type = 3380;
                if (Main.rand.Next(5) == 0)
                    Stack += Main.rand.Next(2);
                if (Main.rand.Next(10) == 0)
                    Stack += Main.rand.Next(3);
                if (Main.rand.Next(15) == 0)
                    Stack += Main.rand.Next(4);
            }
            else if (Main.rand.Next(2) == 0)
            {
                if (Main.rand.Next(12000) == 0)
                {
                    Type = 74;
                    if (Main.rand.Next(14) == 0)
                        Stack += Main.rand.Next(0, 2);
                    if (Main.rand.Next(14) == 0)
                        Stack += Main.rand.Next(0, 2);
                    if (Main.rand.Next(14) == 0)
                        Stack += Main.rand.Next(0, 2);
                }
                else if (Main.rand.Next(800) == 0)
                {
                    Type = 73;
                    if (Main.rand.Next(6) == 0)
                        Stack += Main.rand.Next(1, 21);
                    if (Main.rand.Next(6) == 0)
                        Stack += Main.rand.Next(1, 21);
                    if (Main.rand.Next(6) == 0)
                        Stack += Main.rand.Next(1, 21);
                    if (Main.rand.Next(6) == 0)
                        Stack += Main.rand.Next(1, 21);
                    if (Main.rand.Next(6) == 0)
                        Stack += Main.rand.Next(1, 20);
                }
                else if (Main.rand.Next(60) == 0)
                {
                    Type = 72;
                    if (Main.rand.Next(4) == 0)
                        Stack += Main.rand.Next(5, 26);
                    if (Main.rand.Next(4) == 0)
                        Stack += Main.rand.Next(5, 26);
                    if (Main.rand.Next(4) == 0)
                        Stack += Main.rand.Next(5, 26);
                    if (Main.rand.Next(4) == 0)
                        Stack += Main.rand.Next(5, 25);
                }
                else
                {
                    Type = 71;
                    if (Main.rand.Next(3) == 0)
                        Stack += Main.rand.Next(10, 26);
                    if (Main.rand.Next(3) == 0)
                        Stack += Main.rand.Next(10, 26);
                    if (Main.rand.Next(3) == 0)
                        Stack += Main.rand.Next(10, 26);
                    if (Main.rand.Next(3) == 0)
                        Stack += Main.rand.Next(10, 25);
                }
            }
            else if (maxValue1 != -1 && Main.rand.Next(maxValue1) == 0)
                Type = 1242;
            else if (maxValue2 != -1 && Main.rand.Next(maxValue2) == 0)
            {
                switch (Main.rand.Next(6))
                {
                    case 0:
                        Type = 181;
                        break;
                    case 1:
                        Type = 180;
                        break;
                    case 2:
                        Type = 177;
                        break;
                    case 3:
                        Type = 179;
                        break;
                    case 4:
                        Type = 178;
                        break;
                    default:
                        Type = 182;
                        break;
                }

                if (Main.rand.Next(20) == 0)
                    Stack += Main.rand.Next(0, 2);
                if (Main.rand.Next(30) == 0)
                    Stack += Main.rand.Next(0, 3);
                if (Main.rand.Next(40) == 0)
                    Stack += Main.rand.Next(0, 4);
                if (Main.rand.Next(50) == 0)
                    Stack += Main.rand.Next(0, 5);
                if (Main.rand.Next(60) == 0)
                    Stack += Main.rand.Next(0, 6);
            }
            else if (maxValue3 != -1 && Main.rand.Next(maxValue3) == 0)
            {
                Type = 999;
                if (Main.rand.Next(20) == 0)
                    Stack += Main.rand.Next(0, 2);
                if (Main.rand.Next(30) == 0)
                    Stack += Main.rand.Next(0, 3);
                if (Main.rand.Next(40) == 0)
                    Stack += Main.rand.Next(0, 4);
                if (Main.rand.Next(50) == 0)
                    Stack += Main.rand.Next(0, 5);
                if (Main.rand.Next(60) == 0)
                    Stack += Main.rand.Next(0, 6);
            }
            else if (Main.rand.Next(3) == 0)
            {
                if (Main.rand.Next(5000) == 0)
                {
                    Type = 74;
                    if (Main.rand.Next(10) == 0)
                        Stack += Main.rand.Next(0, 3);
                    if (Main.rand.Next(10) == 0)
                        Stack += Main.rand.Next(0, 3);
                    if (Main.rand.Next(10) == 0)
                        Stack += Main.rand.Next(0, 3);
                    if (Main.rand.Next(10) == 0)
                        Stack += Main.rand.Next(0, 3);
                    if (Main.rand.Next(10) == 0)
                        Stack += Main.rand.Next(0, 3);
                }
                else if (Main.rand.Next(400) == 0)
                {
                    Type = 73;
                    if (Main.rand.Next(5) == 0)
                        Stack += Main.rand.Next(1, 21);
                    if (Main.rand.Next(5) == 0)
                        Stack += Main.rand.Next(1, 21);
                    if (Main.rand.Next(5) == 0)
                        Stack += Main.rand.Next(1, 21);
                    if (Main.rand.Next(5) == 0)
                        Stack += Main.rand.Next(1, 21);
                    if (Main.rand.Next(5) == 0)
                        Stack += Main.rand.Next(1, 20);
                }
                else if (Main.rand.Next(30) == 0)
                {
                    Type = 72;
                    if (Main.rand.Next(3) == 0)
                        Stack += Main.rand.Next(5, 26);
                    if (Main.rand.Next(3) == 0)
                        Stack += Main.rand.Next(5, 26);
                    if (Main.rand.Next(3) == 0)
                        Stack += Main.rand.Next(5, 26);
                    if (Main.rand.Next(3) == 0)
                        Stack += Main.rand.Next(5, 25);
                }
                else
                {
                    Type = 71;
                    if (Main.rand.Next(2) == 0)
                        Stack += Main.rand.Next(10, 26);
                    if (Main.rand.Next(2) == 0)
                        Stack += Main.rand.Next(10, 26);
                    if (Main.rand.Next(2) == 0)
                        Stack += Main.rand.Next(10, 26);
                    if (Main.rand.Next(2) == 0)
                        Stack += Main.rand.Next(10, 25);
                }
            }
            else
            {
                switch (Main.rand.Next(8))
                {
                    case 0:
                        Type = 12;
                        break;
                    case 1:
                        Type = 11;
                        break;
                    case 2:
                        Type = 14;
                        break;
                    case 3:
                        Type = 13;
                        break;
                    case 4:
                        Type = 699;
                        break;
                    case 5:
                        Type = 700;
                        break;
                    case 6:
                        Type = 701;
                        break;
                    default:
                        Type = 702;
                        break;
                }

                if (Main.rand.Next(20) == 0)
                    Stack += Main.rand.Next(0, 2);
                if (Main.rand.Next(30) == 0)
                    Stack += Main.rand.Next(0, 3);
                if (Main.rand.Next(40) == 0)
                    Stack += Main.rand.Next(0, 4);
                if (Main.rand.Next(50) == 0)
                    Stack += Main.rand.Next(0, 5);
                if (Main.rand.Next(60) == 0)
                    Stack += Main.rand.Next(0, 6);
            }

            if (Type <= 0)
                return;
            var vector2 = Main.ReverseGravitySupport(Main.MouseScreen, 0.0f) + Main.screenPosition;
            var number = Item.NewItem((int) vector2.X, (int) vector2.Y, 1, 1, Type, Stack, false, -1, false, false);
            if (Main.netMode != 1)
                return;
            NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
        }

        public void ChangeDir(int dir)
        {
            if (!this.pulley || this.pulleyDir != (byte) 2)
            {
                this.direction = dir;
            }
            else
            {
                if (this.pulleyDir == (byte) 2 && dir == this.direction)
                    return;
                var num = (int) ((double) this.position.X + (double) (this.width / 2)) / 16 * 16 + 8 - this.width / 2;
                if (Collision.SolidCollision(new Vector2((float) num, this.position.Y), this.width, this.height))
                    return;
                if (this.whoAmI == Main.myPlayer)
                    Main.cameraX = Main.cameraX + this.position.X - (float) num;
                this.pulleyDir = (byte) 1;
                this.position.X = (float) num;
                this.direction = dir;
            }
        }

        public Microsoft.Xna.Framework.Rectangle getRect()
        {
            return new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width,
                this.height);
        }

        private void pumpkinSword(int i, int dmg, float kb)
        {
            var checkScreenHeight = Main.LogicCheckScreenHeight;
            var checkScreenWidth = Main.LogicCheckScreenWidth;
            var num1 = Main.rand.Next(100, 300);
            var num2 = Main.rand.Next(100, 300);
            var num3 = Main.rand.Next(2) != 0
                ? num1 + (checkScreenWidth / 2 - num1)
                : num1 - (checkScreenWidth / 2 + num1);
            var num4 = Main.rand.Next(2) != 0
                ? num2 + (checkScreenHeight / 2 - num2)
                : num2 - (checkScreenHeight / 2 + num2);
            var num5 = num3 + (int) this.position.X;
            var num6 = num4 + (int) this.position.Y;
            var num7 = 8f;
            var vector2 = new Vector2((float) num5, (float) num6);
            var num8 = Main.npc[i].position.X - vector2.X;
            var num9 = Main.npc[i].position.Y - vector2.Y;
            var num10 = (float) Math.Sqrt((double) num8 * (double) num8 + (double) num9 * (double) num9);
            var num11 = num7 / num10;
            var SpeedX = num8 * num11;
            var SpeedY = num9 * num11;
            Projectile.NewProjectile((float) num5, (float) num6, SpeedX, SpeedY, 321, dmg, kb, this.whoAmI, (float) i,
                0.0f);
        }

        public void PutItemInInventory(int type, int selItem = -1)
        {
            for (var index = 0; index < 58; ++index)
            {
                var obj = this.inventory[index];
                if (obj.stack > 0 && obj.type == type && obj.stack < obj.maxStack)
                {
                    ++obj.stack;
                    return;
                }
            }

            if (selItem >= 0 && (this.inventory[selItem].type == 0 || this.inventory[selItem].stack <= 0))
            {
                this.inventory[selItem].SetDefaults(type, false);
            }
            else
            {
                var newItem = new Item();
                newItem.SetDefaults(type, false);
                if (this.GetItem(this.whoAmI, newItem, false, false).stack > 0)
                {
                    var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        type, 1, false, 0, true, false);
                    if (Main.netMode != 1)
                        return;
                    NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
                else
                {
                    newItem.position.X = this.Center.X - (float) (newItem.width / 2);
                    newItem.position.Y = this.Center.Y - (float) (newItem.height / 2);
                    newItem.active = true;
                    ItemText.NewText(newItem, 0, false, false);
                }
            }
        }

        public bool SummonItemCheck()
        {
            for (var index = 0; index < 200; ++index)
            {
                if (Main.npc[index].active &&
                    (this.inventory[this.selectedItem].type == 43 && Main.npc[index].type == 4 ||
                     this.inventory[this.selectedItem].type == 70 && Main.npc[index].type == 13 ||
                     (this.inventory[this.selectedItem].type == 560 & Main.npc[index].type == 50 ||
                      this.inventory[this.selectedItem].type == 544 && Main.npc[index].type == 125) ||
                     (this.inventory[this.selectedItem].type == 544 && Main.npc[index].type == 126 ||
                      this.inventory[this.selectedItem].type == 556 && Main.npc[index].type == 134 ||
                      (this.inventory[this.selectedItem].type == 557 && Main.npc[index].type == (int) sbyte.MaxValue ||
                       this.inventory[this.selectedItem].type == 1133 && Main.npc[index].type == 222)) ||
                     this.inventory[this.selectedItem].type == 1331 && Main.npc[index].type == 266))
                    return false;
            }

            return true;
        }

        public int FishingLevel()
        {
            var num1 = 0;
            var fishingPole = this.inventory[this.selectedItem].fishingPole;
            if (fishingPole == 0)
            {
                for (var index = 0; index < 58; ++index)
                {
                    if (this.inventory[index].fishingPole > fishingPole)
                        fishingPole = this.inventory[index].fishingPole;
                }
            }

            for (var index = 0; index < 58; ++index)
            {
                if (this.inventory[index].stack > 0 && this.inventory[index].bait > 0)
                {
                    if (this.inventory[index].type == 2673)
                        return -1;
                    num1 = this.inventory[index].bait;
                    break;
                }
            }

            if (num1 == 0 || fishingPole == 0)
                return 0;
            var num2 = num1 + fishingPole + this.fishingSkill;
            if (Main.raining)
                num2 = (int) ((double) num2 * 1.20000004768372);
            if ((double) Main.cloudBGAlpha > 0.0)
                num2 = (int) ((double) num2 * 1.10000002384186);
            if (Main.dayTime && (Main.time < 5400.0 || Main.time > 48600.0))
                num2 = (int) ((double) num2 * 1.29999995231628);
            if (Main.dayTime && Main.time > 16200.0 && Main.time < 37800.0)
                num2 = (int) ((double) num2 * 0.800000011920929);
            if (!Main.dayTime && Main.time > 6480.0 && Main.time < 25920.0)
                num2 = (int) ((double) num2 * 0.800000011920929);
            if (Main.moonPhase == 0)
                num2 = (int) ((double) num2 * 1.10000002384186);
            if (Main.moonPhase == 1 || Main.moonPhase == 7)
                num2 = (int) ((double) num2 * 1.04999995231628);
            if (Main.moonPhase == 3 || Main.moonPhase == 5)
                num2 = (int) ((double) num2 * 0.949999988079071);
            if (Main.moonPhase == 4)
                num2 = (int) ((double) num2 * 0.899999976158142);
            return num2;
        }

        public bool HasUnityPotion()
        {
            for (var index = 0; index < 58; ++index)
            {
                if (this.inventory[index].type == 2997 && this.inventory[index].stack > 0)
                    return true;
            }

            return false;
        }

        public void TakeUnityPotion()
        {
            for (var index = 0; index < 400; ++index)
            {
                if (this.inventory[index].type == 2997 && this.inventory[index].stack > 0)
                {
                    --this.inventory[index].stack;
                    if (this.inventory[index].stack > 0)
                        break;
                    this.inventory[index].SetDefaults(0, false);
                    break;
                }
            }
        }

        public void UnityTeleport(Vector2 telePos)
        {
            var num = 3;
            if (Main.netMode == 0)
                this.Teleport(telePos, num, 0);
            else
                NetMessage.SendData(65, -1, -1, (NetworkText) null, 2, (float) this.whoAmI, telePos.X, telePos.Y, num,
                    0, 0);
        }

        private void PayDD2CrystalsBeforeUse(Item item)
        {
            var dd2CrystalsToUse = this.GetRequiredDD2CrystalsToUse(item);
            for (var index = 0; index < dd2CrystalsToUse; ++index)
                this.ConsumeItem(3822, true);
        }

        private bool CheckDD2CrystalPaymentLock(Item item)
        {
            if (!DD2Event.Ongoing)
                return true;
            var dd2CrystalsToUse = this.GetRequiredDD2CrystalsToUse(item);
            return this.CountItem(3822, dd2CrystalsToUse) >= dd2CrystalsToUse;
        }

        private int GetRequiredDD2CrystalsToUse(Item item)
        {
            switch (item.type)
            {
                case 3818:
                case 3819:
                case 3820:
                    return 10;
                case 3824:
                case 3825:
                case 3826:
                    return 10;
                case 3829:
                case 3830:
                case 3831:
                    return 10;
                case 3832:
                case 3833:
                case 3834:
                    return 10;
                default:
                    return 0;
            }
        }

        public void SporeSac()
        {
            var Damage = 70;
            var KnockBack = 1.5f;
            if (Main.rand.Next(15) != 0)
                return;
            var num1 = 0;
            for (var index = 0; index < 1000; ++index)
            {
                if (Main.projectile[index].active && Main.projectile[index].owner == this.whoAmI &&
                    (Main.projectile[index].type == 567 || Main.projectile[index].type == 568))
                    ++num1;
            }

            if (Main.rand.Next(15) < num1 || num1 >= 10)
                return;
            var num2 = 50;
            var num3 = 24;
            var num4 = 90;
            for (var index1 = 0; index1 < num2; ++index1)
            {
                var num5 = Main.rand.Next(200 - index1 * 2, 400 + index1 * 2);
                var center = this.Center;
                center.X += (float) Main.rand.Next(-num5, num5 + 1);
                center.Y += (float) Main.rand.Next(-num5, num5 + 1);
                if (!Collision.SolidCollision(center, num3, num3) && !Collision.WetCollision(center, num3, num3))
                {
                    center.X += (float) (num3 / 2);
                    center.Y += (float) (num3 / 2);
                    if (Collision.CanHit(new Vector2(this.Center.X, this.position.Y), 1, 1, center, 1, 1) ||
                        Collision.CanHit(new Vector2(this.Center.X, this.position.Y - 50f), 1, 1, center, 1, 1))
                    {
                        var index2 = (int) center.X / 16;
                        var index3 = (int) center.Y / 16;
                        var flag = false;
                        if (Main.rand.Next(3) == 0 && Main.tile[index2, index3] != null &&
                            Main.tile[index2, index3].wall > (byte) 0)
                        {
                            flag = true;
                        }
                        else
                        {
                            center.X -= (float) (num4 / 2);
                            center.Y -= (float) (num4 / 2);
                            if (Collision.SolidCollision(center, num4, num4))
                            {
                                center.X += (float) (num4 / 2);
                                center.Y += (float) (num4 / 2);
                                flag = true;
                            }
                        }

                        if (flag)
                        {
                            for (var index4 = 0; index4 < 1000; ++index4)
                            {
                                if (Main.projectile[index4].active && Main.projectile[index4].owner == this.whoAmI &&
                                    Main.projectile[index4].aiStyle == 105 &&
                                    (double) (center - Main.projectile[index4].Center).Length() < 48.0)
                                {
                                    flag = false;
                                    break;
                                }
                            }

                            if (flag && Main.myPlayer == this.whoAmI)
                            {
                                Projectile.NewProjectile(center.X, center.Y, 0.0f, 0.0f, 567 + Main.rand.Next(2),
                                    Damage, KnockBack, this.whoAmI, 0.0f, 0.0f);
                                break;
                            }
                        }
                    }
                }
            }
        }

        public bool CanHit(Entity ent)
        {
            if (!Collision.CanHit(this.position, this.width, this.height, ent.position, ent.width, ent.height) &&
                !Collision.CanHitLine(
                    this.Center + new Vector2((float) (this.direction * this.width / 2),
                        (float) ((double) this.gravDir * (double) -this.height / 3.0)), 0, 0,
                    ent.Center + new Vector2(0.0f, (float) (-ent.height / 3)), 0, 0) && !Collision.CanHitLine(
                    this.Center + new Vector2((float) (this.direction * this.width / 2),
                        (float) ((double) this.gravDir * (double) -this.height / 3.0)), 0, 0, ent.Center, 0, 0))
                return Collision.CanHitLine(this.Center + new Vector2((float) (this.direction * this.width / 2), 0.0f),
                    0, 0, ent.Center + new Vector2(0.0f, (float) (ent.height / 3)), 0, 0);
            return true;
        }

        public void ItemCheck(int i)
        {
            if (this.webbed || this.frozen || this.stoned)
                return;
            var flag1 = false;
            var playerOffsetHitbox = (float) this.mount.PlayerOffsetHitbox;
            var sItem = this.inventory[this.selectedItem];
            if (this.mount.Active)
            {
                if (this.mount.Type == 8)
                {
                    this.noItems = true;
                    if (this.controlUseItem)
                    {
                        this.channel = true;
                        if (this.releaseUseItem)
                            this.mount.UseAbility(this, Vector2.Zero, true);
                        this.releaseUseItem = false;
                    }
                }

                if (this.whoAmI == Main.myPlayer && (double) this.gravDir == -1.0)
                    this.mount.Dismount(this);
            }

            var weaponDamage = this.GetWeaponDamage(sItem);
            if (sItem.autoReuse && !this.noItems)
            {
                this.releaseUseItem = true;
                if (this.itemAnimation == 1 && sItem.stack > 0)
                {
                    if (sItem.shoot > 0 && this.whoAmI != Main.myPlayer && (this.controlUseItem && sItem.useStyle == 5))
                    {
                        this.ApplyAnimation(sItem);
                        if (sItem.UseSound != null)
                            Main.PlaySound(sItem.UseSound, this.Center);
                    }
                    else
                        this.itemAnimation = 0;
                }
            }

            if (sItem.fishingPole > 0)
            {
                sItem.holdStyle = 0;
                if (this.itemTime == 0 && this.itemAnimation == 0)
                {
                    for (var index = 0; index < 1000; ++index)
                    {
                        if (Main.projectile[index].active && Main.projectile[index].owner == this.whoAmI &&
                            Main.projectile[index].bobber)
                            sItem.holdStyle = 1;
                    }
                }
            }

            if (this.itemAnimation == 0 && this.reuseDelay > 0)
            {
                this.itemAnimation = this.reuseDelay;
                this.itemTime = this.reuseDelay;
                this.reuseDelay = 0;
            }

            if (this.controlUseItem && this.releaseUseItem &&
                (sItem.headSlot > 0 || sItem.bodySlot > 0 || sItem.legSlot > 0))
            {
                if (sItem.useStyle == 0)
                    this.releaseUseItem = false;
                if ((double) this.position.X / 16.0 - (double) Player.tileRangeX - (double) sItem.tileBoost <=
                    (double) Player.tileTargetX &&
                    ((double) this.position.X + (double) this.width) / 16.0 + (double) Player.tileRangeX +
                    (double) sItem.tileBoost - 1.0 >= (double) Player.tileTargetX &&
                    ((double) this.position.Y / 16.0 - (double) Player.tileRangeY - (double) sItem.tileBoost <=
                     (double) Player.tileTargetY &&
                     ((double) this.position.Y + (double) this.height) / 16.0 + (double) Player.tileRangeY +
                     (double) sItem.tileBoost - 2.0 >= (double) Player.tileTargetY))
                {
                    var tileTargetX = Player.tileTargetX;
                    var tileTargetY = Player.tileTargetY;
                    if (Main.tile[tileTargetX, tileTargetY].active() &&
                        (Main.tile[tileTargetX, tileTargetY].type == (ushort) 128 ||
                         Main.tile[tileTargetX, tileTargetY].type == (ushort) 269))
                    {
                        var frameY = (int) Main.tile[tileTargetX, tileTargetY].frameY;
                        var num1 = 0;
                        if (sItem.bodySlot >= 0)
                            num1 = 1;
                        if (sItem.legSlot >= 0)
                            num1 = 2;
                        int num2;
                        for (num2 = frameY / 18;
                            num1 > num2;
                            num2 = (int) Main.tile[tileTargetX, tileTargetY].frameY / 18)
                            ++tileTargetY;
                        for (; num1 < num2; num2 = (int) Main.tile[tileTargetX, tileTargetY].frameY / 18)
                            --tileTargetY;
                        var frameX1 = (int) Main.tile[tileTargetX, tileTargetY].frameX;
                        while (frameX1 >= 100)
                            frameX1 -= 100;
                        if (frameX1 >= 36)
                            frameX1 -= 36;
                        var index = tileTargetX - frameX1 / 18;
                        var frameX2 = (int) Main.tile[index, tileTargetY].frameX;
                        WorldGen.KillTile(index, tileTargetY, true, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) index, (float) tileTargetY,
                                1f, 0, 0, 0);
                        while (frameX2 >= 100)
                            frameX2 -= 100;
                        if (num2 == 0 && sItem.headSlot >= 0)
                        {
                            Main.blockMouse = true;
                            Main.tile[index, tileTargetY].frameX = (short) (frameX2 + sItem.headSlot * 100);
                            if (Main.netMode == 1)
                                NetMessage.SendTileSquare(-1, index, tileTargetY, 1, TileChangeType.None);
                            --sItem.stack;
                            if (sItem.stack <= 0)
                            {
                                sItem.SetDefaults(0, false);
                                Main.mouseItem.SetDefaults(0, false);
                            }

                            if (this.selectedItem == 58)
                                Main.mouseItem = sItem.Clone();
                            this.releaseUseItem = false;
                            this.mouseInterface = true;
                        }
                        else if (num2 == 1 && sItem.bodySlot >= 0)
                        {
                            Main.blockMouse = true;
                            Main.tile[index, tileTargetY].frameX = (short) (frameX2 + sItem.bodySlot * 100);
                            if (Main.netMode == 1)
                                NetMessage.SendTileSquare(-1, index, tileTargetY, 1, TileChangeType.None);
                            --sItem.stack;
                            if (sItem.stack <= 0)
                            {
                                sItem.SetDefaults(0, false);
                                Main.mouseItem.SetDefaults(0, false);
                            }

                            if (this.selectedItem == 58)
                                Main.mouseItem = sItem.Clone();
                            this.releaseUseItem = false;
                            this.mouseInterface = true;
                        }
                        else if (num2 == 2 && sItem.legSlot >= 0 &&
                                 !ArmorIDs.Legs.Sets.MannequinIncompatible.Contains(sItem.legSlot))
                        {
                            Main.blockMouse = true;
                            Main.tile[index, tileTargetY].frameX = (short) (frameX2 + sItem.legSlot * 100);
                            if (Main.netMode == 1)
                                NetMessage.SendTileSquare(-1, index, tileTargetY, 1, TileChangeType.None);
                            --sItem.stack;
                            if (sItem.stack <= 0)
                            {
                                sItem.SetDefaults(0, false);
                                Main.mouseItem.SetDefaults(0, false);
                            }

                            if (this.selectedItem == 58)
                                Main.mouseItem = sItem.Clone();
                            this.releaseUseItem = false;
                            this.mouseInterface = true;
                        }
                    }
                }
            }

            if (Main.myPlayer == i && this.itemAnimation == 0 &&
                TileObjectData.CustomPlace(sItem.createTile, sItem.placeStyle))
            {
                TileObject objectData;
                TileObject.CanPlace(Player.tileTargetX, Player.tileTargetY, sItem.createTile, sItem.placeStyle,
                    this.direction, out objectData, true);
            }

            if (this.itemAnimation == 0 && this.altFunctionUse == 2)
                this.altFunctionUse = 0;
            if (this.controlUseItem && this.itemAnimation == 0 && (this.releaseUseItem && sItem.useStyle > 0))
            {
                if (this.altFunctionUse == 1)
                    this.altFunctionUse = 2;
                var canUse = true;
                if (sItem.shoot == 0)
                    this.itemRotation = 0.0f;
                if (sItem.type == 3335 && (this.extraAccessory || !Main.expertMode))
                    canUse = false;
                if (this.pulley && sItem.fishingPole > 0)
                    canUse = false;
                if (sItem.type == 3611 && (WiresUI.Settings.ToolMode &
                                           (WiresUI.Settings.MultiToolMode.Red | WiresUI.Settings.MultiToolMode.Green |
                                            WiresUI.Settings.MultiToolMode.Blue |
                                            WiresUI.Settings.MultiToolMode.Yellow |
                                            WiresUI.Settings.MultiToolMode.Actuator)) ==
                    (WiresUI.Settings.MultiToolMode) 0)
                    canUse = false;
                if ((sItem.type == 3611 || sItem.type == 3625) && this.wireOperationsCooldown > 0)
                    canUse = false;
                if (!this.CheckDD2CrystalPaymentLock(sItem))
                    canUse = false;
                if (this.whoAmI == Main.myPlayer && sItem.shoot > -1 &&
                    (ProjectileID.Sets.IsADD2Turret[sItem.shoot] && !this.downedDD2EventAnyDifficulty) &&
                    !DD2Event.Ongoing)
                    canUse = false;
                if (sItem.shoot > -1 && ProjectileID.Sets.IsADD2Turret[sItem.shoot] &&
                    (DD2Event.Ongoing && i == Main.myPlayer))
                {
                    int worldX;
                    int worldY;
                    int pushYUp;
                    this.FindSentryRestingSpot(sItem.shoot, out worldX, out worldY, out pushYUp);
                    if (Player.WouldSpotOverlapWithSentry(worldX, worldY))
                        canUse = false;
                }

                if (sItem.shoot > -1 && ProjectileID.Sets.IsADD2Turret[sItem.shoot] && i == Main.myPlayer)
                {
                    int worldX;
                    int worldY;
                    int pushYUp;
                    this.FindSentryRestingSpot(sItem.shoot, out worldX, out worldY, out pushYUp);
                    if (WorldGen.SolidTile(worldX / 16, worldY / 16 - 1))
                        canUse = false;
                }

                if (this.wet && (sItem.shoot == 85 || sItem.shoot == 15 || sItem.shoot == 34))
                    canUse = false;
                if (sItem.makeNPC > (short) 0 && !NPC.CanReleaseNPCs(this.whoAmI))
                    canUse = false;
                if (this.whoAmI == Main.myPlayer && sItem.type == 603 && !Main.cEd)
                    canUse = false;
                if (sItem.type == 1071 || sItem.type == 1072)
                {
                    var flag2 = false;
                    for (var index = 0; index < 58; ++index)
                    {
                        if (this.inventory[index].paint > (byte) 0)
                        {
                            flag2 = true;
                            break;
                        }
                    }

                    if (!flag2)
                        canUse = false;
                }

                if (this.noItems)
                    canUse = false;
                if (sItem.tileWand > 0)
                {
                    var tileWand = sItem.tileWand;
                    canUse = false;
                    for (var index = 0; index < 58; ++index)
                    {
                        if (tileWand == this.inventory[index].type && this.inventory[index].stack > 0)
                        {
                            canUse = true;
                            break;
                        }
                    }
                }

                if (sItem.fishingPole > 0)
                {
                    for (var index1 = 0; index1 < 1000; ++index1)
                    {
                        if (Main.projectile[index1].active && Main.projectile[index1].owner == this.whoAmI &&
                            Main.projectile[index1].bobber)
                        {
                            canUse = false;
                            if (this.whoAmI == Main.myPlayer && (double) Main.projectile[index1].ai[0] == 0.0)
                            {
                                Main.projectile[index1].ai[0] = 1f;
                                var num1 = -10f;
                                if (Main.projectile[index1].wet &&
                                    (double) Main.projectile[index1].velocity.Y > (double) num1)
                                    Main.projectile[index1].velocity.Y = num1;
                                Main.projectile[index1].netUpdate2 = true;
                                if ((double) Main.projectile[index1].ai[1] < 0.0 &&
                                    (double) Main.projectile[index1].localAI[1] != 0.0)
                                {
                                    var flag2 = false;
                                    var num2 = 0;
                                    for (var index2 = 0; index2 < 58; ++index2)
                                    {
                                        if (this.inventory[index2].stack > 0 && this.inventory[index2].bait > 0)
                                        {
                                            var flag3 = false;
                                            var maxValue = 1 + this.inventory[index2].bait / 5;
                                            if (maxValue < 1)
                                                maxValue = 1;
                                            if (this.accTackleBox)
                                                ++maxValue;
                                            if (Main.rand.Next(maxValue) == 0)
                                                flag3 = true;
                                            if ((double) Main.projectile[index1].localAI[1] < 0.0)
                                                flag3 = true;
                                            if ((double) Main.projectile[index1].localAI[1] > 0.0)
                                            {
                                                var obj = new Item();
                                                obj.SetDefaults((int) Main.projectile[index1].localAI[1], false);
                                                if (obj.rare < 0)
                                                    flag3 = false;
                                            }

                                            if (flag3)
                                            {
                                                num2 = this.inventory[index2].type;
                                                --this.inventory[index2].stack;
                                                if (this.inventory[index2].stack <= 0)
                                                    this.inventory[index2].SetDefaults(0, false);
                                            }

                                            flag2 = true;
                                            break;
                                        }
                                    }

                                    if (flag2)
                                    {
                                        if (num2 == 2673)
                                        {
                                            if (Main.netMode != 1)
                                                NPC.SpawnOnPlayer(this.whoAmI, 370);
                                            else
                                                NetMessage.SendData(61, -1, -1, (NetworkText) null, this.whoAmI, 370f,
                                                    0.0f, 0.0f, 0, 0, 0);
                                            Main.projectile[index1].ai[0] = 2f;
                                        }
                                        else if (Main.rand.Next(7) == 0 && !this.accFishingLine)
                                            Main.projectile[index1].ai[0] = 2f;
                                        else
                                            Main.projectile[index1].ai[1] = Main.projectile[index1].localAI[1];

                                        Main.projectile[index1].netUpdate = true;
                                    }
                                }
                            }
                        }
                    }
                }

                if (sItem.shoot == 6 || sItem.shoot == 19 || (sItem.shoot == 33 || sItem.shoot == 52) ||
                    (sItem.shoot == 113 || sItem.shoot == 320 || (sItem.shoot == 333 || sItem.shoot == 383)) ||
                    sItem.shoot == 491)
                {
                    for (var index = 0; index < 1000; ++index)
                    {
                        if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer &&
                            Main.projectile[index].type == sItem.shoot)
                            canUse = false;
                    }
                }

                if (sItem.shoot == 106)
                {
                    var num = 0;
                    for (var index = 0; index < 1000; ++index)
                    {
                        if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer &&
                            Main.projectile[index].type == sItem.shoot)
                            ++num;
                    }

                    if (num >= sItem.stack)
                        canUse = false;
                }

                if (sItem.shoot == 272)
                {
                    var num = 0;
                    for (var index = 0; index < 1000; ++index)
                    {
                        if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer &&
                            Main.projectile[index].type == sItem.shoot)
                            ++num;
                    }

                    if (num >= sItem.stack)
                        canUse = false;
                }

                if (sItem.shoot == 13 || sItem.shoot == 32 || sItem.shoot >= 230 && sItem.shoot <= 235 ||
                    (sItem.shoot == 315 || sItem.shoot == 331 || sItem.shoot == 372))
                {
                    for (var index = 0; index < 1000; ++index)
                    {
                        if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer &&
                            (Main.projectile[index].type == sItem.shoot &&
                             (double) Main.projectile[index].ai[0] != 2.0))
                            canUse = false;
                    }
                }

                if (sItem.shoot == 332)
                {
                    var num = 0;
                    for (var index = 0; index < 1000; ++index)
                    {
                        if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer &&
                            (Main.projectile[index].type == sItem.shoot &&
                             (double) Main.projectile[index].ai[0] != 2.0))
                            ++num;
                    }

                    if (num >= 3)
                        canUse = false;
                }

                if (sItem.potion && canUse)
                {
                    if (this.potionDelay <= 0)
                    {
                        if (sItem.type == 227)
                        {
                            this.potionDelay = this.restorationDelayTime;
                            this.AddBuff(21, this.potionDelay, true);
                        }
                        else
                        {
                            this.potionDelay = this.potionDelayTime;
                            this.AddBuff(21, this.potionDelay, true);
                        }
                    }
                    else
                        canUse = false;
                }

                if (sItem.mana > 0 && this.silence)
                    canUse = false;
                if (sItem.mana > 0 && canUse)
                {
                    var flag2 = false;
                    if (sItem.type == 2795)
                        flag2 = true;
                    if (sItem.shoot > 0 && ProjectileID.Sets.TurretFeature[sItem.shoot] && this.altFunctionUse == 2)
                        flag2 = true;
                    if (sItem.shoot > 0 && ProjectileID.Sets.MinionTargettingFeature[sItem.shoot] &&
                        this.altFunctionUse == 2)
                        flag2 = true;
                    if (sItem.type != (int) sbyte.MaxValue || !this.spaceGun)
                    {
                        if (this.statMana >= (int) ((double) sItem.mana * (double) this.manaCost))
                        {
                            if (!flag2)
                                this.statMana -= (int) ((double) sItem.mana * (double) this.manaCost);
                        }
                        else if (this.manaFlower)
                        {
                            this.QuickMana();
                            if (this.statMana >= (int) ((double) sItem.mana * (double) this.manaCost))
                            {
                                if (!flag2)
                                    this.statMana -= (int) ((double) sItem.mana * (double) this.manaCost);
                            }
                            else
                                canUse = false;
                        }
                        else
                            canUse = false;
                    }

                    if (this.whoAmI == Main.myPlayer && sItem.buffType != 0 && (sItem.buffTime != 0 && canUse))
                        this.AddBuff(sItem.buffType, sItem.buffTime, true);
                }

                if (sItem.shoot <= 0 || !ProjectileID.Sets.MinionTargettingFeature[sItem.shoot] ||
                    this.altFunctionUse != 2)
                    this.ItemCheck_ApplyPetBuffs(sItem);
                if (this.whoAmI == Main.myPlayer && (double) this.gravDir == 1.0 &&
                    (sItem.mountType != -1 && this.mount.CanMount(sItem.mountType, this)))
                    this.mount.SetMount(sItem.mountType, this, false);
                if (sItem.type == 43 && Main.dayTime)
                    canUse = false;
                if (sItem.type == 544 && Main.dayTime)
                    canUse = false;
                if (sItem.type == 556 && Main.dayTime)
                    canUse = false;
                if (sItem.type == 557 && Main.dayTime)
                    canUse = false;
                if (sItem.type == 70 && !this.ZoneCorrupt)
                    canUse = false;
                if (sItem.type == 1133 && !this.ZoneJungle)
                    canUse = false;
                if (sItem.type == 1844 && (Main.dayTime || Main.pumpkinMoon || (Main.snowMoon || DD2Event.Ongoing)))
                    canUse = false;
                if (sItem.type == 1958 && (Main.dayTime || Main.pumpkinMoon || (Main.snowMoon || DD2Event.Ongoing)))
                    canUse = false;
                if (sItem.type == 2767 && (!Main.dayTime || Main.eclipse || !Main.hardMode))
                    canUse = false;
                if (sItem.type == 3601 && (!NPC.downedGolemBoss || !Main.hardMode ||
                                           (NPC.AnyDanger() || NPC.AnyoneNearCultists())))
                    canUse = false;
                if (!this.SummonItemCheck())
                    canUse = false;
                if (sItem.shoot == 17 && canUse && i == Main.myPlayer)
                {
                    var i1 = (int) ((double) Main.mouseX + (double) Main.screenPosition.X) / 16;
                    var j = (int) ((double) Main.mouseY + (double) Main.screenPosition.Y) / 16;
                    if ((double) this.gravDir == -1.0)
                        j = (int) ((double) Main.screenPosition.Y + (double) Main.screenHeight - (double) Main.mouseY) /
                            16;
                    var tile = Main.tile[i1, j];
                    if (tile.active() && (tile.type == (ushort) 0 || tile.type == (ushort) 2 ||
                                          (tile.type == (ushort) 23 || tile.type == (ushort) 109) ||
                                          tile.type == (ushort) 199))
                    {
                        WorldGen.KillTile(i1, j, false, false, true);
                        if (!Main.tile[i1, j].active())
                        {
                            if (Main.netMode == 1)
                                NetMessage.SendData(17, -1, -1, (NetworkText) null, 4, (float) i1, (float) j, 0.0f, 0,
                                    0, 0);
                        }
                        else
                            canUse = false;
                    }
                    else
                        canUse = false;
                }

                if (canUse)
                    canUse = this.HasAmmo(sItem, canUse);
                if (canUse)
                {
                    if (sItem.pick > 0 || sItem.axe > 0 || sItem.hammer > 0)
                        this.toolTime = 1;
                    if (this.grappling[0] > -1)
                    {
                        this.pulley = false;
                        this.pulleyDir = (byte) 1;
                        if (this.controlRight)
                            this.direction = 1;
                        else if (this.controlLeft)
                            this.direction = -1;
                    }

                    this.channel = sItem.channel;
                    this.attackCD = 0;
                    this.ApplyAnimation(sItem);
                    if (sItem.UseSound != null)
                        Main.PlaySound(sItem.UseSound, this.Center);
                }

                if ((sItem.shoot <= 0 || !ProjectileID.Sets.MinionTargettingFeature[sItem.shoot] ||
                     this.altFunctionUse != 2) && canUse && (this.whoAmI == Main.myPlayer && sItem.shoot >= 0) &&
                    (sItem.shoot < 714 && (ProjectileID.Sets.LightPet[sItem.shoot] || Main.projPet[sItem.shoot])))
                {
                    if (ProjectileID.Sets.MinionSacrificable[sItem.shoot])
                    {
                        var intList = new List<int>();
                        var num1 = 0.0f;
                        for (var index1 = 0; index1 < 1000; ++index1)
                        {
                            if (Main.projectile[index1].active && Main.projectile[index1].owner == i &&
                                Main.projectile[index1].minion)
                            {
                                int index2;
                                for (index2 = 0; index2 < intList.Count; ++index2)
                                {
                                    if ((double) Main.projectile[intList[index2]].minionSlots >
                                        (double) Main.projectile[index1].minionSlots)
                                    {
                                        intList.Insert(index2, index1);
                                        break;
                                    }
                                }

                                if (index2 == intList.Count)
                                    intList.Add(index1);
                                num1 += Main.projectile[index1].minionSlots;
                            }
                        }

                        var num2 = (float) ItemID.Sets.StaffMinionSlotsRequired[sItem.type];
                        var num3 = 0.0f;
                        var num4 = 388;
                        var index3 = -1;
                        for (var index1 = 0; index1 < intList.Count; ++index1)
                        {
                            var type = Main.projectile[intList[index1]].type;
                            if (type == 626)
                            {
                                intList.RemoveAt(index1);
                                --index1;
                            }

                            if (type == 627)
                            {
                                if (Main.projectile[(int) Main.projectile[intList[index1]].localAI[1]].type == 628)
                                    index3 = intList[index1];
                                intList.RemoveAt(index1);
                                --index1;
                            }
                        }

                        if (index3 != -1)
                        {
                            intList.Add(index3);
                            intList.Add(Projectile.GetByUUID(Main.projectile[index3].owner,
                                Main.projectile[index3].ai[0]));
                        }

                        for (var index1 = 0;
                            index1 < intList.Count &&
                            (double) num1 - (double) num3 > (double) this.maxMinions - (double) num2;
                            ++index1)
                        {
                            var type = Main.projectile[intList[index1]].type;
                            if (type != num4 && type != 625 && (type != 628 && type != 623))
                            {
                                if (type == 388 && num4 == 387)
                                    num4 = 388;
                                if (type == 387 && num4 == 388)
                                    num4 = 387;
                                num3 += Main.projectile[intList[index1]].minionSlots;
                                if (type == 626 || type == 627)
                                {
                                    var byUuid = Projectile.GetByUUID(Main.projectile[intList[index1]].owner,
                                        Main.projectile[intList[index1]].ai[0]);
                                    if (byUuid >= 0)
                                    {
                                        var projectile1 = Main.projectile[byUuid];
                                        if (projectile1.type != 625)
                                            projectile1.localAI[1] = Main.projectile[intList[index1]].localAI[1];
                                        var projectile2 =
                                            Main.projectile[(int) Main.projectile[intList[index1]].localAI[1]];
                                        projectile2.ai[0] = Main.projectile[intList[index1]].ai[0];
                                        projectile2.ai[1] = 1f;
                                        projectile2.netUpdate = true;
                                    }
                                }

                                Main.projectile[intList[index1]].Kill();
                            }
                        }

                        intList.Clear();
                        if ((double) num1 + (double) num2 >= 9.0)
                            AchievementsHelper.HandleSpecialEvent(this, 6);
                    }
                    else
                    {
                        for (var index = 0; index < 1000; ++index)
                        {
                            if (Main.projectile[index].active && Main.projectile[index].owner == i &&
                                Main.projectile[index].type == sItem.shoot)
                                Main.projectile[index].Kill();
                            if (sItem.shoot == 72)
                            {
                                if (Main.projectile[index].active && Main.projectile[index].owner == i &&
                                    Main.projectile[index].type == 86)
                                    Main.projectile[index].Kill();
                                if (Main.projectile[index].active && Main.projectile[index].owner == i &&
                                    Main.projectile[index].type == 87)
                                    Main.projectile[index].Kill();
                            }
                        }
                    }
                }
            }

            if (!this.controlUseItem)
            {
                var num = this.channel ? 1 : 0;
                this.channel = false;
            }

            if (this.itemAnimation > 0)
            {
                this.itemAnimationMax = !sItem.melee
                    ? sItem.useAnimation
                    : (int) ((double) sItem.useAnimation * (double) this.meleeSpeed);
                if (sItem.mana > 0 && !flag1 && (sItem.type != (int) sbyte.MaxValue || !this.spaceGun))
                    this.manaRegenDelay = (int) this.maxRegenDelay;
                if (Main.dedServ)
                {
                    this.itemHeight = sItem.height;
                    this.itemWidth = sItem.width;
                }
                else
                {
                    this.itemHeight = Main.itemTexture[sItem.type].Height;
                    this.itemWidth = Main.itemTexture[sItem.type].Width;
                }

                --this.itemAnimation;
                if (!Main.dedServ)
                {
                    if (sItem.useStyle == 1)
                    {
                        if (sItem.type > -1 && Item.claw[sItem.type])
                        {
                            if ((double) this.itemAnimation < (double) this.itemAnimationMax * 0.333)
                            {
                                var num = 10f;
                                this.itemLocation.X =
                                    (float) ((double) this.position.X + (double) this.width * 0.5 +
                                             ((double) Main.itemTexture[sItem.type].Width * 0.5 - (double) num) *
                                             (double) this.direction);
                                this.itemLocation.Y = this.position.Y + 26f + playerOffsetHitbox;
                            }
                            else if ((double) this.itemAnimation < (double) this.itemAnimationMax * 0.666)
                            {
                                var num = 8f;
                                this.itemLocation.X =
                                    (float) ((double) this.position.X + (double) this.width * 0.5 +
                                             ((double) Main.itemTexture[sItem.type].Width * 0.5 - (double) num) *
                                             (double) this.direction);
                                this.itemLocation.Y = this.position.Y + 24f + playerOffsetHitbox;
                            }
                            else
                            {
                                var num = 6f;
                                this.itemLocation.X =
                                    (float) ((double) this.position.X + (double) this.width * 0.5 -
                                             ((double) Main.itemTexture[sItem.type].Width * 0.5 - (double) num) *
                                             (double) this.direction);
                                this.itemLocation.Y = this.position.Y + 20f + playerOffsetHitbox;
                            }

                            this.itemRotation =
                                (float) (((double) this.itemAnimation / (double) this.itemAnimationMax - 0.5) *
                                         (double) -this.direction * 3.5 - (double) this.direction * 0.300000011920929);
                        }
                        else
                        {
                            if ((double) this.itemAnimation < (double) this.itemAnimationMax * 0.333)
                            {
                                var num = 10f;
                                if (Main.itemTexture[sItem.type].Width > 32)
                                    num = 14f;
                                if (Main.itemTexture[sItem.type].Width >= 52)
                                    num = 24f;
                                if (Main.itemTexture[sItem.type].Width >= 64)
                                    num = 28f;
                                if (Main.itemTexture[sItem.type].Width >= 92)
                                    num = 38f;
                                if (sItem.type == 2330 || sItem.type == 2320 || sItem.type == 2341)
                                    num += 8f;
                                this.itemLocation.X =
                                    (float) ((double) this.position.X + (double) this.width * 0.5 +
                                             ((double) Main.itemTexture[sItem.type].Width * 0.5 - (double) num) *
                                             (double) this.direction);
                                this.itemLocation.Y = this.position.Y + 24f + playerOffsetHitbox;
                            }
                            else if ((double) this.itemAnimation < (double) this.itemAnimationMax * 0.666)
                            {
                                var num1 = 10f;
                                if (Main.itemTexture[sItem.type].Width > 32)
                                    num1 = 18f;
                                if (Main.itemTexture[sItem.type].Width >= 52)
                                    num1 = 24f;
                                if (Main.itemTexture[sItem.type].Width >= 64)
                                    num1 = 28f;
                                if (Main.itemTexture[sItem.type].Width >= 92)
                                    num1 = 38f;
                                if (sItem.type == 2330 || sItem.type == 2320 || sItem.type == 2341)
                                    num1 += 4f;
                                this.itemLocation.X =
                                    (float) ((double) this.position.X + (double) this.width * 0.5 +
                                             ((double) Main.itemTexture[sItem.type].Width * 0.5 - (double) num1) *
                                             (double) this.direction);
                                var num2 = 10f;
                                if (Main.itemTexture[sItem.type].Height > 32)
                                    num2 = 8f;
                                if (Main.itemTexture[sItem.type].Height > 52)
                                    num2 = 12f;
                                if (Main.itemTexture[sItem.type].Height > 64)
                                    num2 = 14f;
                                if (sItem.type == 2330 || sItem.type == 2320 || sItem.type == 2341)
                                    num2 += 4f;
                                this.itemLocation.Y = this.position.Y + num2 + playerOffsetHitbox;
                            }
                            else
                            {
                                var num1 = 6f;
                                if (Main.itemTexture[sItem.type].Width > 32)
                                    num1 = 14f;
                                if (Main.itemTexture[sItem.type].Width >= 48)
                                    num1 = 18f;
                                if (Main.itemTexture[sItem.type].Width >= 52)
                                    num1 = 24f;
                                if (Main.itemTexture[sItem.type].Width >= 64)
                                    num1 = 28f;
                                if (Main.itemTexture[sItem.type].Width >= 92)
                                    num1 = 38f;
                                if (sItem.type == 2330 || sItem.type == 2320 || sItem.type == 2341)
                                    num1 += 4f;
                                this.itemLocation.X =
                                    (float) ((double) this.position.X + (double) this.width * 0.5 -
                                             ((double) Main.itemTexture[sItem.type].Width * 0.5 - (double) num1) *
                                             (double) this.direction);
                                var num2 = 10f;
                                if (Main.itemTexture[sItem.type].Height > 32)
                                    num2 = 10f;
                                if (Main.itemTexture[sItem.type].Height > 52)
                                    num2 = 12f;
                                if (Main.itemTexture[sItem.type].Height > 64)
                                    num2 = 14f;
                                if (sItem.type == 2330 || sItem.type == 2320 || sItem.type == 2341)
                                    num2 += 4f;
                                this.itemLocation.Y = this.position.Y + num2 + playerOffsetHitbox;
                            }

                            this.itemRotation =
                                (float) (((double) this.itemAnimation / (double) this.itemAnimationMax - 0.5) *
                                         (double) -this.direction * 3.5 - (double) this.direction * 0.300000011920929);
                        }

                        if ((double) this.gravDir == -1.0)
                        {
                            this.itemRotation = -this.itemRotation;
                            this.itemLocation.Y =
                                (float) ((double) this.position.Y + (double) this.height +
                                         ((double) this.position.Y - (double) this.itemLocation.Y));
                        }
                    }
                    else if (sItem.useStyle == 2)
                    {
                        this.itemRotation =
                            (float) ((double) this.itemAnimation / (double) this.itemAnimationMax *
                                     (double) this.direction * 2.0 + -1.39999997615814 * (double) this.direction);
                        if ((double) this.itemAnimation < (double) this.itemAnimationMax * 0.5)
                        {
                            this.itemLocation.X = (float) ((double) this.position.X + (double) this.width * 0.5 +
                                                           ((double) Main.itemTexture[sItem.type].Width * 0.5 - 9.0 -
                                                            (double) this.itemRotation * 12.0 * (double) this.direction
                                                           ) * (double) this.direction);
                            this.itemLocation.Y =
                                (float) ((double) this.position.Y + 38.0 +
                                         (double) this.itemRotation * (double) this.direction * 4.0) +
                                playerOffsetHitbox;
                        }
                        else
                        {
                            this.itemLocation.X = (float) ((double) this.position.X + (double) this.width * 0.5 +
                                                           ((double) Main.itemTexture[sItem.type].Width * 0.5 - 9.0 -
                                                            (double) this.itemRotation * 16.0 * (double) this.direction
                                                           ) * (double) this.direction);
                            this.itemLocation.Y =
                                (float) ((double) this.position.Y + 38.0 +
                                         (double) this.itemRotation * (double) this.direction) + playerOffsetHitbox;
                        }

                        if ((double) this.gravDir == -1.0)
                        {
                            this.itemRotation = -this.itemRotation;
                            this.itemLocation.Y =
                                (float) ((double) this.position.Y + (double) this.height +
                                         ((double) this.position.Y - (double) this.itemLocation.Y));
                        }
                    }
                    else if (sItem.useStyle == 3)
                    {
                        if ((double) this.itemAnimation > (double) this.itemAnimationMax * 0.666)
                        {
                            this.itemLocation.X = -1000f;
                            this.itemLocation.Y = -1000f;
                            this.itemRotation = -1.3f * (float) this.direction;
                        }
                        else
                        {
                            this.itemLocation.X =
                                (float) ((double) this.position.X + (double) this.width * 0.5 +
                                         ((double) Main.itemTexture[sItem.type].Width * 0.5 - 4.0) *
                                         (double) this.direction);
                            this.itemLocation.Y = this.position.Y + 24f + playerOffsetHitbox;
                            var num = (float) ((double) this.itemAnimation / (double) this.itemAnimationMax *
                                                 (double) Main.itemTexture[sItem.type].Width * (double) this.direction *
                                                 (double) sItem.scale * 1.20000004768372) -
                                        (float) (10 * this.direction);
                            if ((double) num > -4.0 && this.direction == -1)
                                num = -8f;
                            if ((double) num < 4.0 && this.direction == 1)
                                num = 8f;
                            this.itemLocation.X -= num;
                            this.itemRotation = 0.8f * (float) this.direction;
                        }

                        if ((double) this.gravDir == -1.0)
                        {
                            this.itemRotation = -this.itemRotation;
                            this.itemLocation.Y =
                                (float) ((double) this.position.Y + (double) this.height +
                                         ((double) this.position.Y - (double) this.itemLocation.Y));
                        }
                    }
                    else if (sItem.useStyle == 4)
                    {
                        var num = 0;
                        if (sItem.type == 3601)
                            num = 10;
                        this.itemRotation = 0.0f;
                        this.itemLocation.X = (float) ((double) this.position.X + (double) this.width * 0.5 +
                                                       ((double) Main.itemTexture[sItem.type].Width * 0.5 - 9.0 -
                                                        (double) this.itemRotation * 14.0 * (double) this.direction -
                                                        4.0 - (double) num) * (double) this.direction);
                        this.itemLocation.Y =
                            (float) ((double) this.position.Y + (double) Main.itemTexture[sItem.type].Height * 0.5 +
                                     4.0) + playerOffsetHitbox;
                        if ((double) this.gravDir == -1.0)
                        {
                            this.itemRotation = -this.itemRotation;
                            this.itemLocation.Y =
                                (float) ((double) this.position.Y + (double) this.height +
                                         ((double) this.position.Y - (double) this.itemLocation.Y));
                        }
                    }
                    else if (sItem.useStyle == 5)
                    {
                        if (sItem.type == 3779)
                        {
                            this.itemRotation = 0.0f;
                            this.itemLocation.X = this.Center.X + (float) (6 * this.direction);
                            this.itemLocation.Y = this.MountedCenter.Y + 6f;
                        }
                        else if (Item.staff[sItem.type])
                        {
                            var num = 6f;
                            if (sItem.type == 3476)
                                num = 14f;
                            this.itemLocation = this.MountedCenter;
                            this.itemLocation += this.itemRotation.ToRotationVector2() * num * (float) this.direction;
                        }
                        else
                        {
                            this.itemLocation.X =
                                (float) ((double) this.position.X + (double) this.width * 0.5 -
                                         (double) Main.itemTexture[sItem.type].Width * 0.5) -
                                (float) (this.direction * 2);
                            this.itemLocation.Y =
                                this.MountedCenter.Y - (float) Main.itemTexture[sItem.type].Height * 0.5f;
                        }
                    }
                }
            }
            else if (sItem.holdStyle == 1 && !this.pulley)
            {
                if (Main.dedServ)
                    this.itemLocation.X = (float) ((double) this.position.X + (double) this.width * 0.5 +
                                                   20.0 * (double) this.direction);
                else if (sItem.type == 930)
                {
                    this.itemLocation.X = (float) ((double) this.position.X + (double) (this.width / 2) * 0.5 - 12.0) -
                                          (float) (2 * this.direction);
                    var x = this.position.X + (float) (this.width / 2) + (float) (38 * this.direction);
                    if (this.direction == 1)
                        x -= 10f;
                    var y = this.MountedCenter.Y - 4f * this.gravDir;
                    if ((double) this.gravDir == -1.0)
                        y -= 8f;
                    this.RotateRelativePoint(ref x, ref y);
                    var Type = 0;
                    for (var index = 54; index < 58; ++index)
                    {
                        if (this.inventory[index].stack > 0 && this.inventory[index].ammo == 931)
                        {
                            Type = this.inventory[index].type;
                            break;
                        }
                    }

                    if (Type == 0)
                    {
                        for (var index = 0; index < 54; ++index)
                        {
                            if (this.inventory[index].stack > 0 && this.inventory[index].ammo == 931)
                            {
                                Type = this.inventory[index].type;
                                break;
                            }
                        }
                    }

                    if (Type == 931)
                        Type = (int) sbyte.MaxValue;
                    else if (Type == 1614)
                        Type = 187;
                    if (Type > 0)
                    {
                        var index = Dust.NewDust(new Vector2(x, y + this.gfxOffY), 6, 6, Type, 0.0f, 0.0f, 100,
                            new Color(), 1.6f);
                        Main.dust[index].noGravity = true;
                        Main.dust[index].velocity.Y -= 4f * this.gravDir;
                    }
                }
                else if (sItem.type == 968)
                {
                    this.itemLocation.X = this.position.X + (float) this.width * 0.5f + (float) (8 * this.direction);
                    if (this.whoAmI == Main.myPlayer)
                    {
                        var index1 = (int) ((double) this.itemLocation.X + (double) Main.itemTexture[sItem.type].Width *
                                            0.800000011920929 * (double) this.direction) / 16;
                        var index2 = (int) ((double) this.itemLocation.Y + (double) playerOffsetHitbox +
                                            (double) (Main.itemTexture[sItem.type].Height / 2)) / 16;
                        if (Main.tile[index1, index2] == null)
                            Main.tile[index1, index2] = new Tile();
                        if (Main.tile[index1, index2].active() && Main.tile[index1, index2].type == (ushort) 215 &&
                            Main.tile[index1, index2].frameY < (short) 54)
                        {
                            ++this.miscTimer;
                            if (Main.rand.Next(5) == 0)
                                ++this.miscTimer;
                            if (this.miscTimer > 900)
                            {
                                this.miscTimer = 0;
                                sItem.SetDefaults(969, false);
                                if (this.selectedItem == 58)
                                    Main.mouseItem.SetDefaults(969, false);
                                for (var index3 = 0; index3 < 58; ++index3)
                                {
                                    if (this.inventory[index3].type == sItem.type && index3 != this.selectedItem &&
                                        this.inventory[index3].stack < this.inventory[index3].maxStack)
                                    {
                                        Main.PlaySound(7, -1, -1, 1, 1f, 0.0f);
                                        ++this.inventory[index3].stack;
                                        sItem.SetDefaults(0, false);
                                        if (this.selectedItem == 58)
                                            Main.mouseItem.SetDefaults(0, false);
                                    }
                                }
                            }
                        }
                        else
                            this.miscTimer = 0;
                    }
                }
                else if (sItem.type == 856)
                    this.itemLocation.X = this.position.X + (float) this.width * 0.5f + (float) (4 * this.direction);
                else if (sItem.fishingPole > 0)
                {
                    this.itemLocation.X = (float) ((double) this.position.X + (double) this.width * 0.5 +
                                                   (double) Main.itemTexture[sItem.type].Width * 0.180000007152557 *
                                                   (double) this.direction);
                }
                else
                {
                    this.itemLocation.X = (float) ((double) this.position.X + (double) this.width * 0.5 +
                                                   ((double) Main.itemTexture[sItem.type].Width * 0.5 + 2.0) *
                                                   (double) this.direction);
                    if (sItem.type == 282 || sItem.type == 286 || sItem.type == 3112)
                    {
                        this.itemLocation.X -= (float) (this.direction * 2);
                        this.itemLocation.Y += 4f;
                    }
                    else if (sItem.type == 3002)
                    {
                        this.itemLocation.X -= (float) (4 * this.direction);
                        this.itemLocation.Y += 2f;
                    }
                }

                this.itemLocation.Y = this.position.Y + 24f + playerOffsetHitbox;
                if (sItem.type == 856)
                    this.itemLocation.Y = this.position.Y + 34f + playerOffsetHitbox;
                if (sItem.type == 930)
                    this.itemLocation.Y = this.position.Y + 9f + playerOffsetHitbox;
                if (sItem.fishingPole > 0)
                    this.itemLocation.Y += 4f;
                else if (sItem.type == 3476)
                {
                    this.itemLocation.X = this.Center.X + (float) (14 * this.direction);
                    this.itemLocation.Y = this.MountedCenter.Y;
                }
                else if (sItem.type == 3779)
                {
                    this.itemLocation.X = this.Center.X + (float) (6 * this.direction);
                    this.itemLocation.Y = this.MountedCenter.Y + 6f;
                }
                else if (sItem.type == 353)
                {
                    this.itemLocation.X = this.Center.X + (float) (8 * this.direction);
                    this.itemLocation.Y = this.MountedCenter.Y + 11f;
                }

                this.itemRotation = 0.0f;
                if ((double) this.gravDir == -1.0)
                {
                    this.itemRotation = -this.itemRotation;
                    this.itemLocation.Y =
                        (float) ((double) this.position.Y + (double) this.height +
                                 ((double) this.position.Y - (double) this.itemLocation.Y)) + playerOffsetHitbox;
                    if (sItem.type == 930)
                        this.itemLocation.Y -= 24f;
                }
            }
            else if (sItem.holdStyle == 2 && !this.pulley)
            {
                if (sItem.type == 946)
                {
                    this.itemRotation = 0.0f;
                    this.itemLocation.X = this.position.X + (float) this.width * 0.5f - (float) (16 * this.direction);
                    this.itemLocation.Y = this.position.Y + 22f + playerOffsetHitbox;
                    this.fallStart = (int) ((double) this.position.Y / 16.0);
                    if ((double) this.gravDir == -1.0)
                    {
                        this.itemRotation = -this.itemRotation;
                        this.itemLocation.Y = (float) ((double) this.position.Y + (double) this.height +
                                                       ((double) this.position.Y - (double) this.itemLocation.Y));
                        if ((double) this.velocity.Y < -2.0)
                            this.velocity.Y = -2f;
                    }
                    else if ((double) this.velocity.Y > 2.0)
                        this.velocity.Y = 2f;
                }
                else
                {
                    this.itemLocation.X = this.position.X + (float) this.width * 0.5f + (float) (6 * this.direction);
                    this.itemLocation.Y = this.position.Y + 16f + playerOffsetHitbox;
                    this.itemRotation = 0.79f * (float) -this.direction;
                    if ((double) this.gravDir == -1.0)
                    {
                        this.itemRotation = -this.itemRotation;
                        this.itemLocation.Y = (float) ((double) this.position.Y + (double) this.height +
                                                       ((double) this.position.Y - (double) this.itemLocation.Y));
                    }
                }
            }
            else if (sItem.holdStyle == 3 && !this.pulley && !Main.dedServ)
            {
                this.itemLocation.X =
                    (float) ((double) this.position.X + (double) this.width * 0.5 -
                             (double) Main.itemTexture[sItem.type].Width * 0.5) - (float) (this.direction * 2);
                this.itemLocation.Y = this.MountedCenter.Y - (float) Main.itemTexture[sItem.type].Height * 0.5f;
                this.itemRotation = 0.0f;
            }

            if (((sItem.type == 974 || sItem.type == 8 || (sItem.type == 1245 || sItem.type == 2274) ||
                  (sItem.type == 3004 || sItem.type == 3045 || sItem.type == 3114) ||
                  sItem.type >= 427 && sItem.type <= 433) && !this.wet || (sItem.type == 523 || sItem.type == 1333)) &&
                !this.pulley)
            {
                var R = 1f;
                var G = 0.95f;
                var B = 0.8f;
                var num1 = 0;
                if (sItem.type == 523)
                    num1 = 8;
                else if (sItem.type == 974)
                    num1 = 9;
                else if (sItem.type == 1245)
                    num1 = 10;
                else if (sItem.type == 1333)
                    num1 = 11;
                else if (sItem.type == 2274)
                    num1 = 12;
                else if (sItem.type == 3004)
                    num1 = 13;
                else if (sItem.type == 3045)
                    num1 = 14;
                else if (sItem.type == 3114)
                    num1 = 15;
                else if (sItem.type >= 427)
                    num1 = sItem.type - 426;
                switch (num1)
                {
                    case 1:
                        R = 0.0f;
                        G = 0.1f;
                        B = 1.3f;
                        break;
                    case 2:
                        R = 1f;
                        G = 0.1f;
                        B = 0.1f;
                        break;
                    case 3:
                        R = 0.0f;
                        G = 1f;
                        B = 0.1f;
                        break;
                    case 4:
                        R = 0.9f;
                        G = 0.0f;
                        B = 0.9f;
                        break;
                    case 5:
                        R = 1.3f;
                        G = 1.3f;
                        B = 1.3f;
                        break;
                    case 6:
                        R = 0.9f;
                        G = 0.9f;
                        B = 0.0f;
                        break;
                    case 7:
                        R = (float) (0.5 * (double) Main.demonTorch + 1.0 * (1.0 - (double) Main.demonTorch));
                        G = 0.3f;
                        B = (float) (1.0 * (double) Main.demonTorch + 0.5 * (1.0 - (double) Main.demonTorch));
                        break;
                    case 8:
                        B = 0.7f;
                        R = 0.85f;
                        G = 1f;
                        break;
                    case 9:
                        B = 1f;
                        R = 0.7f;
                        G = 0.85f;
                        break;
                    case 10:
                        B = 0.0f;
                        R = 1f;
                        G = 0.5f;
                        break;
                    case 11:
                        B = 0.8f;
                        R = 1.25f;
                        G = 1.25f;
                        break;
                    case 12:
                        R *= 0.75f;
                        G *= 1.35f;
                        B *= 1.5f;
                        break;
                    case 13:
                        R = 0.95f;
                        G = 0.65f;
                        B = 1.3f;
                        break;
                    case 14:
                        R = (float) Main.DiscoR / (float) byte.MaxValue;
                        G = (float) Main.DiscoG / (float) byte.MaxValue;
                        B = (float) Main.DiscoB / (float) byte.MaxValue;
                        break;
                    case 15:
                        R = 1f;
                        G = 0.0f;
                        B = 1f;
                        break;
                }

                var num2 = num1;
                int Type;
                switch (num2)
                {
                    case 0:
                        Type = 6;
                        break;
                    case 8:
                        Type = 75;
                        break;
                    case 9:
                        Type = 135;
                        break;
                    case 10:
                        Type = 158;
                        break;
                    case 11:
                        Type = 169;
                        break;
                    case 12:
                        Type = 156;
                        break;
                    case 13:
                        Type = 234;
                        break;
                    case 14:
                        Type = 66;
                        break;
                    case 15:
                        Type = 242;
                        break;
                    default:
                        Type = 58 + num2;
                        break;
                }

                var maxValue = 30;
                if (this.itemAnimation > 0)
                    maxValue = 7;
                if (this.direction == -1)
                {
                    if (Main.rand.Next(maxValue) == 0)
                    {
                        var index = Dust.NewDust(
                            new Vector2(this.itemLocation.X - 16f, this.itemLocation.Y - 14f * this.gravDir), 4, 4,
                            Type, 0.0f, 0.0f, 100, new Color(), 1f);
                        if (Main.rand.Next(3) != 0)
                            Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.3f;
                        Main.dust[index].velocity.Y -= 1.5f;
                        Main.dust[index].position = this.RotatedRelativePoint(Main.dust[index].position, true);
                        if (Type == 66)
                        {
                            Main.dust[index].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
                            Main.dust[index].noGravity = true;
                        }
                    }

                    Lighting.AddLight(
                        this.RotatedRelativePoint(
                            new Vector2(this.itemLocation.X - 12f + this.velocity.X,
                                this.itemLocation.Y - 14f + this.velocity.Y), true), R, G, B);
                }
                else
                {
                    if (Main.rand.Next(maxValue) == 0)
                    {
                        var index = Dust.NewDust(
                            new Vector2(this.itemLocation.X + 6f, this.itemLocation.Y - 14f * this.gravDir), 4, 4, Type,
                            0.0f, 0.0f, 100, new Color(), 1f);
                        if (Main.rand.Next(3) != 0)
                            Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.3f;
                        Main.dust[index].velocity.Y -= 1.5f;
                        Main.dust[index].position = this.RotatedRelativePoint(Main.dust[index].position, true);
                        if (Type == 66)
                        {
                            Main.dust[index].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
                            Main.dust[index].noGravity = true;
                        }
                    }

                    Lighting.AddLight(
                        this.RotatedRelativePoint(
                            new Vector2(this.itemLocation.X + 12f + this.velocity.X,
                                this.itemLocation.Y - 14f + this.velocity.Y), true), R, G, B);
                }
            }

            if ((sItem.type == 105 || sItem.type == 713) && (!this.wet && !this.pulley))
            {
                var maxValue = 20;
                if (this.itemAnimation > 0)
                    maxValue = 7;
                if (this.direction == -1)
                {
                    if (Main.rand.Next(maxValue) == 0)
                    {
                        var index = Dust.NewDust(
                            new Vector2(this.itemLocation.X - 12f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 6,
                            0.0f, 0.0f, 100, new Color(), 1f);
                        if (Main.rand.Next(3) != 0)
                            Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.3f;
                        Main.dust[index].velocity.Y -= 1.5f;
                        Main.dust[index].position = this.RotatedRelativePoint(Main.dust[index].position, true);
                    }

                    Lighting.AddLight(
                        this.RotatedRelativePoint(
                            new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), true),
                        1f, 0.95f, 0.8f);
                }
                else
                {
                    if (Main.rand.Next(maxValue) == 0)
                    {
                        var index = Dust.NewDust(
                            new Vector2(this.itemLocation.X + 4f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 6,
                            0.0f, 0.0f, 100, new Color(), 1f);
                        if (Main.rand.Next(3) != 0)
                            Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.3f;
                        Main.dust[index].velocity.Y -= 1.5f;
                        Main.dust[index].position = this.RotatedRelativePoint(Main.dust[index].position, true);
                    }

                    Lighting.AddLight(
                        this.RotatedRelativePoint(
                            new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), true),
                        1f, 0.95f, 0.8f);
                }
            }
            else if (sItem.type == 148 && !this.wet)
            {
                var maxValue = 10;
                if (this.itemAnimation > 0)
                    maxValue = 7;
                if (this.direction == -1)
                {
                    if (Main.rand.Next(maxValue) == 0)
                    {
                        var index = Dust.NewDust(
                            new Vector2(this.itemLocation.X - 12f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 172,
                            0.0f, 0.0f, 100, new Color(), 1f);
                        if (Main.rand.Next(3) != 0)
                            Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.3f;
                        Main.dust[index].velocity.Y -= 1.5f;
                        Main.dust[index].position = this.RotatedRelativePoint(Main.dust[index].position, true);
                    }

                    Lighting.AddLight(
                        this.RotatedRelativePoint(
                            new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), true),
                        0.0f, 0.5f, 1f);
                }
                else
                {
                    if (Main.rand.Next(maxValue) == 0)
                    {
                        var index = Dust.NewDust(
                            new Vector2(this.itemLocation.X + 4f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 172,
                            0.0f, 0.0f, 100, new Color(), 1f);
                        if (Main.rand.Next(3) != 0)
                            Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.3f;
                        Main.dust[index].velocity.Y -= 1.5f;
                        Main.dust[index].position = this.RotatedRelativePoint(Main.dust[index].position, true);
                    }

                    Lighting.AddLight(
                        this.RotatedRelativePoint(
                            new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), true),
                        0.0f, 0.5f, 1f);
                }
            }
            else if (sItem.type == 3117 && !this.wet)
            {
                this.itemLocation.X -= (float) (this.direction * 4);
                var maxValue = 10;
                if (this.itemAnimation > 0)
                    maxValue = 7;
                if (this.direction == -1)
                {
                    if (Main.rand.Next(maxValue) == 0)
                    {
                        var index = Dust.NewDust(
                            new Vector2(this.itemLocation.X - 10f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 242,
                            0.0f, 0.0f, 100, new Color(), 1f);
                        if (Main.rand.Next(3) != 0)
                            Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.3f;
                        Main.dust[index].velocity.Y -= 1.5f;
                        Main.dust[index].position = this.RotatedRelativePoint(Main.dust[index].position, true);
                    }

                    Lighting.AddLight(
                        this.RotatedRelativePoint(
                            new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), true),
                        0.9f, 0.1f, 0.75f);
                }
                else
                {
                    if (Main.rand.Next(maxValue) == 0)
                    {
                        var index = Dust.NewDust(
                            new Vector2(this.itemLocation.X + 6f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 242,
                            0.0f, 0.0f, 100, new Color(), 1f);
                        if (Main.rand.Next(3) != 0)
                            Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.3f;
                        Main.dust[index].velocity.Y -= 1.5f;
                        Main.dust[index].position = this.RotatedRelativePoint(Main.dust[index].position, true);
                    }

                    Lighting.AddLight(
                        this.RotatedRelativePoint(
                            new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), true),
                        0.9f, 0.1f, 0.75f);
                }
            }

            if (sItem.type == 282 && !this.pulley)
            {
                if (this.direction == -1)
                    Lighting.AddLight(
                        this.RotatedRelativePoint(
                            new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), true),
                        0.7f, 1f, 0.8f);
                else
                    Lighting.AddLight(
                        this.RotatedRelativePoint(
                            new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), true),
                        0.7f, 1f, 0.8f);
            }

            if (sItem.type == 3002 && !this.pulley)
            {
                var R = 1.05f;
                var G = 0.95f;
                var B = 0.55f;
                if (this.direction == -1)
                    Lighting.AddLight(
                        this.RotatedRelativePoint(
                            new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), true),
                        R, G, B);
                else
                    Lighting.AddLight(
                        this.RotatedRelativePoint(
                            new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), true),
                        R, G, B);
                ++this.spelunkerTimer;
                if (this.spelunkerTimer >= (byte) 10)
                {
                    this.spelunkerTimer = (byte) 0;
                    var num1 = 30;
                    var num2 = (int) this.Center.X / 16;
                    var num3 = (int) this.Center.Y / 16;
                    for (var index1 = num2 - num1; index1 <= num2 + num1; ++index1)
                    {
                        for (var index2 = num3 - num1; index2 <= num3 + num1; ++index2)
                        {
                            if (Main.rand.Next(4) == 0 &&
                                ((double) new Vector2((float) (num2 - index1), (float) (num3 - index2)).Length() <
                                 (double) num1 && index1 > 0 && (index1 < Main.maxTilesX - 1 && index2 > 0) &&
                                 (index2 < Main.maxTilesY - 1 && Main.tile[index1, index2] != null &&
                                  Main.tile[index1, index2].active())))
                            {
                                var flag2 = false;
                                if (Main.tile[index1, index2].type == (ushort) 185 &&
                                    Main.tile[index1, index2].frameY == (short) 18)
                                {
                                    if (Main.tile[index1, index2].frameX >= (short) 576 &&
                                        Main.tile[index1, index2].frameX <= (short) 882)
                                        flag2 = true;
                                }
                                else if (Main.tile[index1, index2].type == (ushort) 186 &&
                                         Main.tile[index1, index2].frameX >= (short) 864 &&
                                         Main.tile[index1, index2].frameX <= (short) 1170)
                                    flag2 = true;

                                if (flag2 || Main.tileSpelunker[(int) Main.tile[index1, index2].type] ||
                                    Main.tileAlch[(int) Main.tile[index1, index2].type] &&
                                    Main.tile[index1, index2].type != (ushort) 82)
                                {
                                    var index3 = Dust.NewDust(new Vector2((float) (index1 * 16), (float) (index2 * 16)),
                                        16, 16, 204, 0.0f, 0.0f, 150, new Color(), 0.3f);
                                    Main.dust[index3].fadeIn = 0.75f;
                                    Main.dust[index3].velocity *= 0.1f;
                                    Main.dust[index3].noLight = true;
                                }
                            }
                        }
                    }
                }
            }

            if (sItem.type == 286 && !this.pulley)
            {
                if (this.direction == -1)
                    Lighting.AddLight(
                        this.RotatedRelativePoint(
                            new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), true),
                        0.7f, 0.8f, 1f);
                else
                    Lighting.AddLight(
                        this.RotatedRelativePoint(
                            new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), true),
                        0.7f, 0.8f, 1f);
            }

            if (sItem.type == 3112 && !this.pulley)
            {
                if (this.direction == -1)
                    Lighting.AddLight(
                        this.RotatedRelativePoint(
                            new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), true),
                        1f, 0.6f, 0.85f);
                else
                    Lighting.AddLight(
                        this.RotatedRelativePoint(
                            new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), true),
                        1f, 0.6f, 0.85f);
            }

            this.releaseUseItem = !this.controlUseItem;
            if (this.itemTime > 0)
            {
                --this.itemTime;
                if (this.itemTime == 0 && this.whoAmI == Main.myPlayer)
                {
                    switch (sItem.type)
                    {
                        case 65:
                        case 676:
                        case 723:
                        case 724:
                        case 989:
                        case 1226:
                        case 1227:
                            Main.PlaySound(25, -1, -1, 1, 1f, 0.0f);
                            for (var index1 = 0; index1 < 5; ++index1)
                            {
                                var index2 = Dust.NewDust(this.position, this.width, this.height, 45, 0.0f, 0.0f,
                                    (int) byte.MaxValue, new Color(), (float) Main.rand.Next(20, 26) * 0.1f);
                                Main.dust[index2].noLight = true;
                                Main.dust[index2].noGravity = true;
                                Main.dust[index2].velocity *= 0.5f;
                            }

                            break;
                    }
                }
            }

            if (i == Main.myPlayer)
            {
                var flag2 = true;
                var type1 = sItem.type;
                if ((type1 == 65 || type1 == 676 || (type1 == 723 || type1 == 724) ||
                     (type1 == 757 || type1 == 674 || (type1 == 675 || type1 == 989)) ||
                     (type1 == 1226 || type1 == 1227)) && this.itemAnimation != this.itemAnimationMax - 1)
                    flag2 = false;
                if (type1 == 3852)
                {
                    if (this.itemAnimation < this.itemAnimationMax - 12)
                        flag2 = false;
                    if (this.altFunctionUse == 2 && this.itemAnimation != this.itemAnimationMax - 1)
                        flag2 = false;
                }

                if (sItem.shoot > 0 && ProjectileID.Sets.TurretFeature[sItem.shoot] &&
                    (this.altFunctionUse == 2 && flag2) && this.itemTime == 0)
                {
                    this.itemTime = sItem.useTime;
                    for (var index = 0; index < 1000; ++index)
                    {
                        var projectile = Main.projectile[index];
                        if (projectile.active && projectile.owner == Main.myPlayer &&
                            ProjectileID.Sets.TurretFeature[projectile.type])
                            projectile.Kill();
                    }
                }

                if (sItem.shoot > 0 && ProjectileID.Sets.MinionTargettingFeature[sItem.shoot] &&
                    (this.altFunctionUse == 2 && flag2) && this.itemTime == 0)
                {
                    this.itemTime = sItem.useTime;
                    this.MinionNPCTargetAim();
                }

                if (sItem.shoot > 0 && this.itemAnimation > 0 && (this.itemTime == 0 && flag2))
                {
                    var shoot = sItem.shoot;
                    var speed = sItem.shootSpeed;
                    if (this.inventory[this.selectedItem].thrown && (double) speed < 16.0)
                    {
                        speed *= this.thrownVelocity;
                        if ((double) speed > 16.0)
                            speed = 16f;
                    }

                    if (sItem.melee && shoot != 25 && (shoot != 26 && shoot != 35))
                        speed /= this.meleeSpeed;
                    var canShoot = false;
                    var Damage = weaponDamage;
                    var knockBack = sItem.knockBack;
                    if (shoot == 13 || shoot == 32 || shoot == 315 || (shoot >= 230 && shoot <= 235 || shoot == 331))
                    {
                        this.grappling[0] = -1;
                        this.grapCount = 0;
                        for (var index = 0; index < 1000; ++index)
                        {
                            if (Main.projectile[index].active && Main.projectile[index].owner == i)
                            {
                                if (Main.projectile[index].type == 13)
                                    Main.projectile[index].Kill();
                                if (Main.projectile[index].type == 331)
                                    Main.projectile[index].Kill();
                                if (Main.projectile[index].type == 315)
                                    Main.projectile[index].Kill();
                                if (Main.projectile[index].type >= 230 && Main.projectile[index].type <= 235)
                                    Main.projectile[index].Kill();
                            }
                        }
                    }

                    if (sItem.useAmmo > 0)
                        this.PickAmmo(sItem, ref shoot, ref speed, ref canShoot, ref Damage, ref knockBack,
                            ItemID.Sets.gunProj[sItem.type]);
                    else
                        canShoot = true;
                    if (ItemID.Sets.gunProj[sItem.type])
                    {
                        knockBack = sItem.knockBack;
                        Damage = weaponDamage;
                        speed = sItem.shootSpeed;
                    }

                    if (sItem.type == 71)
                        canShoot = false;
                    if (sItem.type == 72)
                        canShoot = false;
                    if (sItem.type == 73)
                        canShoot = false;
                    if (sItem.type == 74)
                        canShoot = false;
                    if (sItem.type == 1254 && shoot == 14)
                        shoot = 242;
                    if (sItem.type == 1255 && shoot == 14)
                        shoot = 242;
                    if (sItem.type == 1265 && shoot == 14)
                        shoot = 242;
                    if (sItem.type == 3542)
                    {
                        if (Main.rand.Next(100) < 20)
                        {
                            ++shoot;
                            Damage *= 3;
                        }
                        else
                            --speed;
                    }

                    if (shoot == 73)
                    {
                        for (var index = 0; index < 1000; ++index)
                        {
                            if (Main.projectile[index].active && Main.projectile[index].owner == i)
                            {
                                if (Main.projectile[index].type == 73)
                                    shoot = 74;
                                if (shoot == 74 && Main.projectile[index].type == 74)
                                    canShoot = false;
                            }
                        }
                    }

                    if (canShoot)
                    {
                        var num1 = this.GetWeaponKnockback(sItem, knockBack);
                        if (shoot == 228)
                            num1 = 0.0f;
                        if (shoot == 1 && sItem.type == 120)
                            shoot = 2;
                        if (sItem.type == 682)
                            shoot = 117;
                        if (sItem.type == 725)
                            shoot = 120;
                        if (sItem.type == 2796)
                            shoot = 442;
                        if (sItem.type == 2223)
                            shoot = 357;
                        this.itemTime = sItem.useTime;
                        var vector2_1 = this.RotatedRelativePoint(this.MountedCenter, true);
                        var flag3 = true;
                        if (sItem.type == 3611)
                            flag3 = false;
                        var vector2_2 = Vector2.UnitX.RotatedBy((double) this.fullRotation, new Vector2());
                        var v1 = Main.MouseWorld - vector2_1;
                        var vector2_3 = this.itemRotation.ToRotationVector2() * (float) this.direction;
                        if (sItem.type == 3852 && this.itemAnimation != this.itemAnimationMax - 1)
                            v1 = vector2_3;
                        if (v1 != Vector2.Zero)
                            v1.Normalize();
                        var num2 = Vector2.Dot(vector2_2, v1);
                        if (flag3)
                        {
                            if ((double) num2 > 0.0)
                                this.ChangeDir(1);
                            else
                                this.ChangeDir(-1);
                        }

                        if (sItem.type == 3094 || sItem.type == 3378 || sItem.type == 3543)
                            vector2_1.Y = this.position.Y + (float) (this.height / 3);
                        if (sItem.type == 2611)
                        {
                            var vector2_4 = v1;
                            if (vector2_4 != Vector2.Zero)
                                vector2_4.Normalize();
                            vector2_1 += vector2_4;
                        }

                        if (sItem.type == 3827)
                            vector2_1 += v1.SafeNormalize(Vector2.Zero)
                                             .RotatedBy((double) this.direction * -1.57079637050629, new Vector2()) *
                                         24f;
                        if (shoot == 9)
                        {
                            vector2_1 = new Vector2(
                                (float) ((double) this.position.X + (double) this.width * 0.5 +
                                         (double) (Main.rand.Next(201) * -this.direction) +
                                         ((double) Main.mouseX + (double) Main.screenPosition.X -
                                          (double) this.position.X)), this.MountedCenter.Y - 600f);
                            num1 = 0.0f;
                            Damage *= 2;
                        }

                        if (sItem.type == 986 || sItem.type == 281)
                        {
                            vector2_1.X += (float) (6 * this.direction);
                            vector2_1.Y -= 6f * this.gravDir;
                        }

                        if (sItem.type == 3007)
                        {
                            vector2_1.X -= (float) (4 * this.direction);
                            vector2_1.Y -= 1f * this.gravDir;
                        }

                        var f1 = (float) Main.mouseX + Main.screenPosition.X - vector2_1.X;
                        var f2 = (float) Main.mouseY + Main.screenPosition.Y - vector2_1.Y;
                        if (sItem.type == 3852 && this.itemAnimation != this.itemAnimationMax - 1)
                        {
                            var vector2_4 = vector2_3;
                            f1 = vector2_4.X;
                            f2 = vector2_4.Y;
                        }

                        if ((double) this.gravDir == -1.0)
                            f2 = Main.screenPosition.Y + (float) Main.screenHeight - (float) Main.mouseY - vector2_1.Y;
                        var num3 = (float) Math.Sqrt((double) f1 * (double) f1 + (double) f2 * (double) f2);
                        var num4 = num3;
                        float num5;
                        if (float.IsNaN(f1) && float.IsNaN(f2) || (double) f1 == 0.0 && (double) f2 == 0.0)
                        {
                            f1 = (float) this.direction;
                            f2 = 0.0f;
                            num5 = speed;
                        }
                        else
                            num5 = speed / num3;

                        if (sItem.type == 1929 || sItem.type == 2270)
                        {
                            f1 += (float) Main.rand.Next(-50, 51) * 0.03f / num5;
                            f2 += (float) Main.rand.Next(-50, 51) * 0.03f / num5;
                        }

                        var num6 = f1 * num5;
                        var num7 = f2 * num5;
                        if (sItem.type == 757)
                            Damage = (int) ((double) Damage * 1.25);
                        if (shoot == 250)
                        {
                            for (var index = 0; index < 1000; ++index)
                            {
                                if (Main.projectile[index].active && Main.projectile[index].owner == this.whoAmI &&
                                    (Main.projectile[index].type == 250 || Main.projectile[index].type == 251))
                                    Main.projectile[index].Kill();
                            }
                        }

                        if (shoot == 12)
                        {
                            vector2_1.X += num6 * 3f;
                            vector2_1.Y += num7 * 3f;
                        }

                        if (sItem.useStyle == 5)
                        {
                            if (sItem.type == 3029)
                            {
                                var vector2_4 = new Vector2(num6, num7);
                                vector2_4.X = (float) Main.mouseX + Main.screenPosition.X - vector2_1.X;
                                vector2_4.Y = (float) ((double) Main.mouseY + (double) Main.screenPosition.Y -
                                                       (double) vector2_1.Y - 1000.0);
                                this.itemRotation = (float) Math.Atan2((double) vector2_4.Y * (double) this.direction,
                                    (double) vector2_4.X * (double) this.direction);
                                NetMessage.SendData(13, -1, -1, (NetworkText) null, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0,
                                    0);
                                NetMessage.SendData(41, -1, -1, (NetworkText) null, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0,
                                    0);
                            }
                            else if (sItem.type == 3779)
                            {
                                this.itemRotation = 0.0f;
                                NetMessage.SendData(13, -1, -1, (NetworkText) null, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0,
                                    0);
                                NetMessage.SendData(41, -1, -1, (NetworkText) null, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0,
                                    0);
                            }
                            else
                            {
                                this.itemRotation = (float) Math.Atan2((double) num7 * (double) this.direction,
                                                        (double) num6 * (double) this.direction) - this.fullRotation;
                                NetMessage.SendData(13, -1, -1, (NetworkText) null, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0,
                                    0);
                                NetMessage.SendData(41, -1, -1, (NetworkText) null, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0,
                                    0);
                            }
                        }

                        if (shoot == 17)
                        {
                            vector2_1.X = (float) Main.mouseX + Main.screenPosition.X;
                            vector2_1.Y = (float) Main.mouseY + Main.screenPosition.Y;
                            if ((double) this.gravDir == -1.0)
                                vector2_1.Y = Main.screenPosition.Y + (float) Main.screenHeight - (float) Main.mouseY;
                        }

                        if (shoot == 76)
                        {
                            shoot += Main.rand.Next(3);
                            var num8 = num4 / (float) (Main.screenHeight / 2);
                            if ((double) num8 > 1.0)
                                num8 = 1f;
                            var num9 = num6 + (float) Main.rand.Next(-40, 41) * 0.01f;
                            var num10 = num7 + (float) Main.rand.Next(-40, 41) * 0.01f;
                            var SpeedX = num9 * (num8 + 0.25f);
                            var SpeedY = num10 * (num8 + 0.25f);
                            var number = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot,
                                Damage, num1, i, 0.0f, 0.0f);
                            Main.projectile[number].ai[1] = 1f;
                            var num11 = (float) ((double) num8 * 2.0 - 1.0);
                            if ((double) num11 < -1.0)
                                num11 = -1f;
                            if ((double) num11 > 1.0)
                                num11 = 1f;
                            Main.projectile[number].ai[0] = num11;
                            NetMessage.SendData(27, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                        }
                        else if (sItem.type == 3029)
                        {
                            var num8 = 3;
                            if (Main.rand.Next(3) == 0)
                                ++num8;
                            for (var index1 = 0; index1 < num8; ++index1)
                            {
                                vector2_1 = new Vector2(
                                    (float) ((double) this.position.X + (double) this.width * 0.5 +
                                             (double) (Main.rand.Next(201) * -this.direction) +
                                             ((double) Main.mouseX + (double) Main.screenPosition.X -
                                              (double) this.position.X)), this.MountedCenter.Y - 600f);
                                vector2_1.X = (float) (((double) vector2_1.X * 10.0 + (double) this.Center.X) / 11.0) +
                                              (float) Main.rand.Next(-100, 101);
                                vector2_1.Y -= (float) (150 * index1);
                                var num9 = (float) Main.mouseX + Main.screenPosition.X - vector2_1.X;
                                var num10 = (float) Main.mouseY + Main.screenPosition.Y - vector2_1.Y;
                                if ((double) num10 < 0.0)
                                    num10 *= -1f;
                                if ((double) num10 < 20.0)
                                    num10 = 20f;
                                var num11 =
                                    (float) Math.Sqrt((double) num9 * (double) num9 + (double) num10 * (double) num10);
                                var num12 = speed / num11;
                                var num13 = num9 * num12;
                                var num14 = num10 * num12;
                                var num15 = num13 + (float) Main.rand.Next(-40, 41) * 0.03f;
                                var SpeedY = num14 + (float) Main.rand.Next(-40, 41) * 0.03f;
                                var SpeedX = num15 * ((float) Main.rand.Next(75, 150) * 0.01f);
                                vector2_1.X += (float) Main.rand.Next(-50, 51);
                                var index2 = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot,
                                    Damage, num1, i, 0.0f, 0.0f);
                                Main.projectile[index2].noDropItem = true;
                            }
                        }
                        else if (sItem.type == 98 || sItem.type == 533)
                        {
                            var SpeedX = num6 + (float) Main.rand.Next(-40, 41) * 0.01f;
                            var SpeedY = num7 + (float) Main.rand.Next(-40, 41) * 0.01f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1, i,
                                0.0f, 0.0f);
                        }
                        else if (sItem.type == 1319)
                        {
                            var SpeedX = num6 + (float) Main.rand.Next(-40, 41) * 0.02f;
                            var SpeedY = num7 + (float) Main.rand.Next(-40, 41) * 0.02f;
                            var index = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot,
                                Damage, num1, i, 0.0f, 0.0f);
                            Main.projectile[index].ranged = true;
                            Main.projectile[index].thrown = false;
                        }
                        else if (sItem.type == 3107)
                        {
                            var SpeedX = num6 + (float) Main.rand.Next(-40, 41) * 0.02f;
                            var SpeedY = num7 + (float) Main.rand.Next(-40, 41) * 0.02f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1, i,
                                0.0f, 0.0f);
                        }
                        else if (sItem.type == 3053)
                        {
                            var vector2_4 = new Vector2(num6, num7);
                            vector2_4.Normalize();
                            var vector2_5 = new Vector2((float) Main.rand.Next(-100, 101),
                                (float) Main.rand.Next(-100, 101));
                            vector2_5.Normalize();
                            var vector2_6 = vector2_4 * 4f + vector2_5;
                            vector2_6.Normalize();
                            vector2_6 *= sItem.shootSpeed;
                            var ai1 = (float) Main.rand.Next(10, 80) * (1f / 1000f);
                            if (Main.rand.Next(2) == 0)
                                ai1 *= -1f;
                            var ai0 = (float) Main.rand.Next(10, 80) * (1f / 1000f);
                            if (Main.rand.Next(2) == 0)
                                ai0 *= -1f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_6.X, vector2_6.Y, shoot, Damage,
                                num1, i, ai0, ai1);
                        }
                        else if (sItem.type == 3019)
                        {
                            var vector2_4 = new Vector2(num6, num7);
                            var num8 = vector2_4.Length();
                            vector2_4.X += (float) ((double) Main.rand.Next(-100, 101) * 0.00999999977648258 *
                                                    (double) num8 * 0.150000005960464);
                            vector2_4.Y += (float) ((double) Main.rand.Next(-100, 101) * 0.00999999977648258 *
                                                    (double) num8 * 0.150000005960464);
                            var num9 = num6 + (float) Main.rand.Next(-40, 41) * 0.03f;
                            var num10 = num7 + (float) Main.rand.Next(-40, 41) * 0.03f;
                            vector2_4.Normalize();
                            var vector2_5 = vector2_4 * num8;
                            var vector2_6 = new Vector2(num9 * ((float) Main.rand.Next(50, 150) * 0.01f),
                                num10 * ((float) Main.rand.Next(50, 150) * 0.01f));
                            vector2_6.X += (float) Main.rand.Next(-100, 101) * 0.025f;
                            vector2_6.Y += (float) Main.rand.Next(-100, 101) * 0.025f;
                            vector2_6.Normalize();
                            vector2_6 *= num8;
                            var x = vector2_6.X;
                            var y = vector2_6.Y;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, x, y, shoot, Damage, num1, i,
                                vector2_5.X, vector2_5.Y);
                        }
                        else if (sItem.type == 2797)
                        {
                            var vector2_4 = Vector2.Normalize(new Vector2(num6, num7)) * 40f * sItem.scale;
                            if (Collision.CanHit(vector2_1, 0, 0, vector2_1 + vector2_4, 0, 0))
                                vector2_1 += vector2_4;
                            var rotation = new Vector2(num6, num7).ToRotation();
                            var num8 = 2.094395f;
                            var num9 = Main.rand.Next(4, 5);
                            if (Main.rand.Next(4) == 0)
                                ++num9;
                            for (var index1 = 0; index1 < num9; ++index1)
                            {
                                var num10 = (float) (Main.rand.NextDouble() * 0.200000002980232 + 0.0500000007450581);
                                var vector2_5 =
                                    new Vector2(num6, num7).RotatedBy(
                                        (double) num8 * Main.rand.NextDouble() - (double) num8 / 2.0, new Vector2()) *
                                    num10;
                                var index2 = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_5.X,
                                    vector2_5.Y, 444, Damage, num1, i, rotation, 0.0f);
                                Main.projectile[index2].localAI[0] = (float) shoot;
                                Main.projectile[index2].localAI[1] = speed;
                            }
                        }
                        else if (sItem.type == 2270)
                        {
                            var SpeedX = num6 + (float) Main.rand.Next(-40, 41) * 0.05f;
                            var SpeedY = num7 + (float) Main.rand.Next(-40, 41) * 0.05f;
                            if (Main.rand.Next(3) == 0)
                            {
                                SpeedX *= (float) (1.0 + (double) Main.rand.Next(-30, 31) * 0.0199999995529652);
                                SpeedY *= (float) (1.0 + (double) Main.rand.Next(-30, 31) * 0.0199999995529652);
                            }

                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1, i,
                                0.0f, 0.0f);
                        }
                        else if (sItem.type == 1930)
                        {
                            var num8 = 2 + Main.rand.Next(3);
                            for (var index = 0; index < num8; ++index)
                            {
                                var num9 = num6;
                                var num10 = num7;
                                var num11 = 0.025f * (float) index;
                                var num12 = num9 + (float) Main.rand.Next(-35, 36) * num11;
                                var num13 = num10 + (float) Main.rand.Next(-35, 36) * num11;
                                var num14 =
                                    (float) Math.Sqrt((double) num12 * (double) num12 +
                                                      (double) num13 * (double) num13);
                                var num15 = speed / num14;
                                var SpeedX = num12 * num15;
                                var SpeedY = num13 * num15;
                                Projectile.NewProjectile(
                                    vector2_1.X + (float) ((double) num6 * (double) (num8 - index) * 1.75),
                                    vector2_1.Y + (float) ((double) num7 * (double) (num8 - index) * 1.75), SpeedX,
                                    SpeedY, shoot, Damage, num1, i, (float) Main.rand.Next(0, 10 * (index + 1)), 0.0f);
                            }
                        }
                        else if (sItem.type == 1931)
                        {
                            var num8 = 2;
                            for (var index = 0; index < num8; ++index)
                            {
                                vector2_1 = new Vector2(
                                    (float) ((double) this.position.X + (double) this.width * 0.5 +
                                             (double) (Main.rand.Next(201) * -this.direction) +
                                             ((double) Main.mouseX + (double) Main.screenPosition.X -
                                              (double) this.position.X)), this.MountedCenter.Y - 600f);
                                vector2_1.X = (float) (((double) vector2_1.X + (double) this.Center.X) / 2.0) +
                                              (float) Main.rand.Next(-200, 201);
                                vector2_1.Y -= (float) (100 * index);
                                var num9 = (float) Main.mouseX + Main.screenPosition.X - vector2_1.X;
                                var num10 = (float) Main.mouseY + Main.screenPosition.Y - vector2_1.Y;
                                if ((double) num10 < 0.0)
                                    num10 *= -1f;
                                if ((double) num10 < 20.0)
                                    num10 = 20f;
                                var num11 =
                                    (float) Math.Sqrt((double) num9 * (double) num9 + (double) num10 * (double) num10);
                                var num12 = speed / num11;
                                var num13 = num9 * num12;
                                var num14 = num10 * num12;
                                var SpeedX = num13 + (float) Main.rand.Next(-40, 41) * 0.02f;
                                var SpeedY = num14 + (float) Main.rand.Next(-40, 41) * 0.02f;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1,
                                    i, 0.0f, (float) Main.rand.Next(5));
                            }
                        }
                        else if (sItem.type == 2750)
                        {
                            var num8 = 1;
                            for (var index = 0; index < num8; ++index)
                            {
                                vector2_1 = new Vector2(
                                    (float) ((double) this.position.X + (double) this.width * 0.5 +
                                             (double) (Main.rand.Next(201) * -this.direction) +
                                             ((double) Main.mouseX + (double) Main.screenPosition.X -
                                              (double) this.position.X)), this.MountedCenter.Y - 600f);
                                vector2_1.X = (float) (((double) vector2_1.X + (double) this.Center.X) / 2.0) +
                                              (float) Main.rand.Next(-200, 201);
                                vector2_1.Y -= (float) (100 * index);
                                var num9 = (float) ((double) Main.mouseX + (double) Main.screenPosition.X -
                                                      (double) vector2_1.X + (double) Main.rand.Next(-40, 41) *
                                                      0.0299999993294477);
                                var num10 = (float) Main.mouseY + Main.screenPosition.Y - vector2_1.Y;
                                if ((double) num10 < 0.0)
                                    num10 *= -1f;
                                if ((double) num10 < 20.0)
                                    num10 = 20f;
                                var num11 =
                                    (float) Math.Sqrt((double) num9 * (double) num9 + (double) num10 * (double) num10);
                                var num12 = speed / num11;
                                var num13 = num9 * num12;
                                var num14 = num10 * num12;
                                var num15 = num13;
                                var num16 = num14 + (float) Main.rand.Next(-40, 41) * 0.02f;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, num15 * 0.75f, num16 * 0.75f,
                                    shoot + Main.rand.Next(3), Damage, num1, i, 0.0f,
                                    (float) (0.5 + Main.rand.NextDouble() * 0.300000011920929));
                            }
                        }
                        else if (sItem.type == 3570)
                        {
                            var num8 = 3;
                            for (var index = 0; index < num8; ++index)
                            {
                                vector2_1 = new Vector2(
                                    (float) ((double) this.position.X + (double) this.width * 0.5 +
                                             (double) (Main.rand.Next(201) * -this.direction) +
                                             ((double) Main.mouseX + (double) Main.screenPosition.X -
                                              (double) this.position.X)), this.MountedCenter.Y - 600f);
                                vector2_1.X = (float) (((double) vector2_1.X + (double) this.Center.X) / 2.0) +
                                              (float) Main.rand.Next(-200, 201);
                                vector2_1.Y -= (float) (100 * index);
                                var num9 = (float) Main.mouseX + Main.screenPosition.X - vector2_1.X;
                                var num10 = (float) Main.mouseY + Main.screenPosition.Y - vector2_1.Y;
                                var ai1 = num10 + vector2_1.Y;
                                if ((double) num10 < 0.0)
                                    num10 *= -1f;
                                if ((double) num10 < 20.0)
                                    num10 = 20f;
                                var num11 =
                                    (float) Math.Sqrt((double) num9 * (double) num9 + (double) num10 * (double) num10);
                                var num12 = speed / num11;
                                var vector2_4 = new Vector2(num9 * num12, num10 * num12) / 2f;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_4.X, vector2_4.Y, shoot,
                                    Damage, num1, i, 0.0f, ai1);
                            }
                        }
                        else if (sItem.type == 3065)
                        {
                            var vector2_4 = Main.screenPosition +
                                                new Vector2((float) Main.mouseX, (float) Main.mouseY);
                            var ai1 = vector2_4.Y;
                            if ((double) ai1 > (double) this.Center.Y - 200.0)
                                ai1 = this.Center.Y - 200f;
                            for (var index = 0; index < 3; ++index)
                            {
                                vector2_1 = this.Center +
                                            new Vector2((float) (-Main.rand.Next(0, 401) * this.direction), -600f);
                                vector2_1.Y -= (float) (100 * index);
                                var vector2_5 = vector2_4 - vector2_1;
                                if ((double) vector2_5.Y < 0.0)
                                    vector2_5.Y *= -1f;
                                if ((double) vector2_5.Y < 20.0)
                                    vector2_5.Y = 20f;
                                vector2_5.Normalize();
                                vector2_5 *= speed;
                                var x = vector2_5.X;
                                var y = vector2_5.Y;
                                var SpeedX = x;
                                var SpeedY = y + (float) Main.rand.Next(-40, 41) * 0.02f;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage * 2,
                                    num1, i, 0.0f, ai1);
                            }
                        }
                        else if (sItem.type == 2624)
                        {
                            var num8 = 0.3141593f;
                            var num9 = 5;
                            var spinningpoint = new Vector2(num6, num7);
                            spinningpoint.Normalize();
                            spinningpoint *= 40f;
                            var flag4 = Collision.CanHit(vector2_1, 0, 0, vector2_1 + spinningpoint, 0, 0);
                            for (var index1 = 0; index1 < num9; ++index1)
                            {
                                var num10 = (float) index1 - (float) (((double) num9 - 1.0) / 2.0);
                                var vector2_4 =
                                    spinningpoint.RotatedBy((double) num8 * (double) num10, new Vector2());
                                if (!flag4)
                                    vector2_4 -= spinningpoint;
                                var index2 = Projectile.NewProjectile(vector2_1.X + vector2_4.X,
                                    vector2_1.Y + vector2_4.Y, num6, num7, shoot, Damage, num1, i, 0.0f, 0.0f);
                                Main.projectile[index2].noDropItem = true;
                            }
                        }
                        else if (sItem.type == 1929)
                        {
                            var SpeedX = num6 + (float) Main.rand.Next(-40, 41) * 0.03f;
                            var SpeedY = num7 + (float) Main.rand.Next(-40, 41) * 0.03f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1, i,
                                0.0f, 0.0f);
                        }
                        else if (sItem.type == 1553)
                        {
                            var SpeedX = num6 + (float) Main.rand.Next(-40, 41) * 0.005f;
                            var SpeedY = num7 + (float) Main.rand.Next(-40, 41) * 0.005f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1, i,
                                0.0f, 0.0f);
                        }
                        else if (sItem.type == 518)
                        {
                            var num8 = num6;
                            var num9 = num7;
                            var SpeedX = num8 + (float) Main.rand.Next(-40, 41) * 0.04f;
                            var SpeedY = num9 + (float) Main.rand.Next(-40, 41) * 0.04f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1, i,
                                0.0f, 0.0f);
                        }
                        else if (sItem.type == 1265)
                        {
                            var num8 = num6;
                            var num9 = num7;
                            var SpeedX = num8 + (float) Main.rand.Next(-30, 31) * 0.03f;
                            var SpeedY = num9 + (float) Main.rand.Next(-30, 31) * 0.03f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1, i,
                                0.0f, 0.0f);
                        }
                        else if (sItem.type == 534)
                        {
                            var num8 = Main.rand.Next(4, 6);
                            for (var index = 0; index < num8; ++index)
                            {
                                var num9 = num6;
                                var num10 = num7;
                                var SpeedX = num9 + (float) Main.rand.Next(-40, 41) * 0.05f;
                                var SpeedY = num10 + (float) Main.rand.Next(-40, 41) * 0.05f;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1,
                                    i, 0.0f, 0.0f);
                            }
                        }
                        else if (sItem.type == 2188)
                        {
                            var num8 = 4;
                            if (Main.rand.Next(3) == 0)
                                ++num8;
                            if (Main.rand.Next(4) == 0)
                                ++num8;
                            if (Main.rand.Next(5) == 0)
                                ++num8;
                            for (var index = 0; index < num8; ++index)
                            {
                                var num9 = num6;
                                var num10 = num7;
                                var num11 = 0.05f * (float) index;
                                var num12 = num9 + (float) Main.rand.Next(-35, 36) * num11;
                                var num13 = num10 + (float) Main.rand.Next(-35, 36) * num11;
                                var num14 =
                                    (float) Math.Sqrt((double) num12 * (double) num12 +
                                                      (double) num13 * (double) num13);
                                var num15 = speed / num14;
                                var SpeedX = num12 * num15;
                                var SpeedY = num13 * num15;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1,
                                    i, 0.0f, 0.0f);
                            }
                        }
                        else if (sItem.type == 1308)
                        {
                            var num8 = 3;
                            if (Main.rand.Next(3) == 0)
                                ++num8;
                            for (var index = 0; index < num8; ++index)
                            {
                                var num9 = num6;
                                var num10 = num7;
                                var num11 = 0.05f * (float) index;
                                var num12 = num9 + (float) Main.rand.Next(-35, 36) * num11;
                                var num13 = num10 + (float) Main.rand.Next(-35, 36) * num11;
                                var num14 =
                                    (float) Math.Sqrt((double) num12 * (double) num12 +
                                                      (double) num13 * (double) num13);
                                var num15 = speed / num14;
                                var SpeedX = num12 * num15;
                                var SpeedY = num13 * num15;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1,
                                    i, 0.0f, 0.0f);
                            }
                        }
                        else if (sItem.type == 1258)
                        {
                            var num8 = num6;
                            var num9 = num7;
                            var SpeedX = num8 + (float) Main.rand.Next(-40, 41) * 0.01f;
                            var SpeedY = num9 + (float) Main.rand.Next(-40, 41) * 0.01f;
                            vector2_1.X += (float) Main.rand.Next(-40, 41) * 0.05f;
                            vector2_1.Y += (float) Main.rand.Next(-45, 36) * 0.05f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1, i,
                                0.0f, 0.0f);
                        }
                        else if (sItem.type == 964)
                        {
                            var num8 = Main.rand.Next(3, 5);
                            for (var index = 0; index < num8; ++index)
                            {
                                var num9 = num6;
                                var num10 = num7;
                                var SpeedX = num9 + (float) Main.rand.Next(-35, 36) * 0.04f;
                                var SpeedY = num10 + (float) Main.rand.Next(-35, 36) * 0.04f;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1,
                                    i, 0.0f, 0.0f);
                            }
                        }
                        else if (sItem.type == 1569)
                        {
                            var num8 = 4;
                            if (Main.rand.Next(2) == 0)
                                ++num8;
                            if (Main.rand.Next(4) == 0)
                                ++num8;
                            if (Main.rand.Next(8) == 0)
                                ++num8;
                            if (Main.rand.Next(16) == 0)
                                ++num8;
                            for (var index = 0; index < num8; ++index)
                            {
                                var num9 = num6;
                                var num10 = num7;
                                var num11 = 0.05f * (float) index;
                                var num12 = num9 + (float) Main.rand.Next(-35, 36) * num11;
                                var num13 = num10 + (float) Main.rand.Next(-35, 36) * num11;
                                var num14 =
                                    (float) Math.Sqrt((double) num12 * (double) num12 +
                                                      (double) num13 * (double) num13);
                                var num15 = speed / num14;
                                var SpeedX = num12 * num15;
                                var SpeedY = num13 * num15;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1,
                                    i, 0.0f, 0.0f);
                            }
                        }
                        else if (sItem.type == 1572 || sItem.type == 2366 || (sItem.type == 3571 || sItem.type == 3569))
                        {
                            var flag4 = sItem.type == 3571 || sItem.type == 3569;
                            var i1 = (int) ((double) Main.mouseX + (double) Main.screenPosition.X) / 16;
                            var j = (int) ((double) Main.mouseY + (double) Main.screenPosition.Y) / 16;
                            if ((double) this.gravDir == -1.0)
                                j = (int) ((double) Main.screenPosition.Y + (double) Main.screenHeight -
                                           (double) Main.mouseY) / 16;
                            if (!flag4)
                            {
                                while (j < Main.maxTilesY - 10 && Main.tile[i1, j] != null &&
                                       (!WorldGen.SolidTile2(i1, j) && Main.tile[i1 - 1, j] != null) &&
                                       (!WorldGen.SolidTile2(i1 - 1, j) && Main.tile[i1 + 1, j] != null &&
                                        !WorldGen.SolidTile2(i1 + 1, j)))
                                    ++j;
                                --j;
                            }

                            Projectile.NewProjectile((float) Main.mouseX + Main.screenPosition.X, (float) (j * 16 - 24),
                                0.0f, 15f, shoot, Damage, num1, i, 0.0f, 0.0f);
                            this.UpdateMaxTurrets();
                        }
                        else if (sItem.type == 1244 || sItem.type == 1256)
                        {
                            var index = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, num6, num7, shoot, Damage,
                                num1, i, 0.0f, 0.0f);
                            Main.projectile[index].ai[0] = (float) Main.mouseX + Main.screenPosition.X;
                            Main.projectile[index].ai[1] = (float) Main.mouseY + Main.screenPosition.Y;
                        }
                        else if (sItem.type == 1229)
                        {
                            var num8 = Main.rand.Next(2, 4);
                            if (Main.rand.Next(5) == 0)
                                ++num8;
                            for (var index1 = 0; index1 < num8; ++index1)
                            {
                                var SpeedX = num6;
                                var SpeedY = num7;
                                if (index1 > 0)
                                {
                                    SpeedX += (float) Main.rand.Next(-35, 36) * 0.04f;
                                    SpeedY += (float) Main.rand.Next(-35, 36) * 0.04f;
                                }

                                if (index1 > 1)
                                {
                                    SpeedX += (float) Main.rand.Next(-35, 36) * 0.04f;
                                    SpeedY += (float) Main.rand.Next(-35, 36) * 0.04f;
                                }

                                if (index1 > 2)
                                {
                                    SpeedX += (float) Main.rand.Next(-35, 36) * 0.04f;
                                    SpeedY += (float) Main.rand.Next(-35, 36) * 0.04f;
                                }

                                var index2 = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot,
                                    Damage, num1, i, 0.0f, 0.0f);
                                Main.projectile[index2].noDropItem = true;
                            }
                        }
                        else if (sItem.type == 1121)
                        {
                            var num8 = Main.rand.Next(1, 4);
                            if (Main.rand.Next(6) == 0)
                                ++num8;
                            if (Main.rand.Next(6) == 0)
                                ++num8;
                            if (this.strongBees && Main.rand.Next(3) == 0)
                                ++num8;
                            for (var index1 = 0; index1 < num8; ++index1)
                            {
                                var num9 = num6;
                                var num10 = num7;
                                var SpeedX = num9 + (float) Main.rand.Next(-35, 36) * 0.02f;
                                var SpeedY = num10 + (float) Main.rand.Next(-35, 36) * 0.02f;
                                var index2 = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY,
                                    this.beeType(), this.beeDamage(Damage), this.beeKB(num1), i, 0.0f, 0.0f);
                                Main.projectile[index2].magic = true;
                            }
                        }
                        else if (sItem.type == 1155)
                        {
                            var num8 = Main.rand.Next(2, 5);
                            if (Main.rand.Next(5) == 0)
                                ++num8;
                            if (Main.rand.Next(5) == 0)
                                ++num8;
                            for (var index = 0; index < num8; ++index)
                            {
                                var num9 = num6;
                                var num10 = num7;
                                var SpeedX = num9 + (float) Main.rand.Next(-35, 36) * 0.02f;
                                var SpeedY = num10 + (float) Main.rand.Next(-35, 36) * 0.02f;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1,
                                    i, 0.0f, 0.0f);
                            }
                        }
                        else if (sItem.type == 1801)
                        {
                            var num8 = Main.rand.Next(1, 4);
                            for (var index = 0; index < num8; ++index)
                            {
                                var num9 = num6;
                                var num10 = num7;
                                var SpeedX = num9 + (float) Main.rand.Next(-35, 36) * 0.05f;
                                var SpeedY = num10 + (float) Main.rand.Next(-35, 36) * 0.05f;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1,
                                    i, 0.0f, 0.0f);
                            }
                        }
                        else if (sItem.type == 679)
                        {
                            for (var index = 0; index < 6; ++index)
                            {
                                var num8 = num6;
                                var num9 = num7;
                                var SpeedX = num8 + (float) Main.rand.Next(-40, 41) * 0.05f;
                                var SpeedY = num9 + (float) Main.rand.Next(-40, 41) * 0.05f;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1,
                                    i, 0.0f, 0.0f);
                            }
                        }
                        else if (sItem.type == 2623)
                        {
                            for (var index = 0; index < 3; ++index)
                            {
                                var num8 = num6;
                                var num9 = num7;
                                var SpeedX = num8 + (float) Main.rand.Next(-40, 41) * 0.1f;
                                var SpeedY = num9 + (float) Main.rand.Next(-40, 41) * 0.1f;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1,
                                    i, 0.0f, 0.0f);
                            }
                        }
                        else if (sItem.type == 3210)
                        {
                            var vector2_4 = new Vector2(num6, num7);
                            vector2_4.X += (float) Main.rand.Next(-30, 31) * 0.04f;
                            vector2_4.Y += (float) Main.rand.Next(-30, 31) * 0.03f;
                            vector2_4.Normalize();
                            vector2_4 *= (float) Main.rand.Next(70, 91) * 0.1f;
                            vector2_4.X += (float) Main.rand.Next(-30, 31) * 0.04f;
                            vector2_4.Y += (float) Main.rand.Next(-30, 31) * 0.03f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_4.X, vector2_4.Y, shoot, Damage,
                                num1, i, (float) Main.rand.Next(20), 0.0f);
                        }
                        else if (sItem.type == 434)
                        {
                            var SpeedX = num6;
                            var SpeedY = num7;
                            if (this.itemAnimation < 5)
                            {
                                var num8 = SpeedX + (float) Main.rand.Next(-40, 41) * 0.01f;
                                var num9 = SpeedY + (float) Main.rand.Next(-40, 41) * 0.01f;
                                SpeedX = num8 * 1.1f;
                                SpeedY = num9 * 1.1f;
                            }
                            else if (this.itemAnimation < 10)
                            {
                                var num8 = SpeedX + (float) Main.rand.Next(-20, 21) * 0.01f;
                                var num9 = SpeedY + (float) Main.rand.Next(-20, 21) * 0.01f;
                                SpeedX = num8 * 1.05f;
                                SpeedY = num9 * 1.05f;
                            }

                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1, i,
                                0.0f, 0.0f);
                        }
                        else if (sItem.type == 1157)
                        {
                            shoot = Main.rand.Next(191, 195);
                            var SpeedX = 0.0f;
                            var SpeedY = 0.0f;
                            vector2_1.X = (float) Main.mouseX + Main.screenPosition.X;
                            vector2_1.Y = (float) Main.mouseY + Main.screenPosition.Y;
                            var index = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot,
                                Damage, num1, i, 0.0f, 0.0f);
                            Main.projectile[index].localAI[0] = 30f;
                        }
                        else if (sItem.type == 1802)
                        {
                            var SpeedX = 0.0f;
                            var SpeedY = 0.0f;
                            vector2_1.X = (float) Main.mouseX + Main.screenPosition.X;
                            vector2_1.Y = (float) Main.mouseY + Main.screenPosition.Y;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1, i,
                                0.0f, 0.0f);
                        }
                        else if (sItem.type == 2364 || sItem.type == 2365)
                        {
                            var SpeedX = 0.0f;
                            var SpeedY = 0.0f;
                            vector2_1.X = (float) Main.mouseX + Main.screenPosition.X;
                            vector2_1.Y = (float) Main.mouseY + Main.screenPosition.Y;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1, i,
                                0.0f, 0.0f);
                        }
                        else if (sItem.type == 2535)
                        {
                            var x = 0.0f;
                            var y = 0.0f;
                            vector2_1.X = (float) Main.mouseX + Main.screenPosition.X;
                            vector2_1.Y = (float) Main.mouseY + Main.screenPosition.Y;
                            var spinningpoint = new Vector2(x, y).RotatedBy(1.57079637050629, new Vector2());
                            Projectile.NewProjectile(vector2_1.X + spinningpoint.X, vector2_1.Y + spinningpoint.Y,
                                spinningpoint.X, spinningpoint.Y, shoot, Damage, num1, i, 0.0f, 0.0f);
                            spinningpoint = spinningpoint.RotatedBy(-3.14159274101257, new Vector2());
                            Projectile.NewProjectile(vector2_1.X + spinningpoint.X, vector2_1.Y + spinningpoint.Y,
                                spinningpoint.X, spinningpoint.Y, shoot + 1, Damage, num1, i, 0.0f, 0.0f);
                        }
                        else if (sItem.type == 2551)
                        {
                            var SpeedX = 0.0f;
                            var SpeedY = 0.0f;
                            vector2_1.X = (float) Main.mouseX + Main.screenPosition.X;
                            vector2_1.Y = (float) Main.mouseY + Main.screenPosition.Y;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY,
                                shoot + Main.rand.Next(3), Damage, num1, i, 0.0f, 0.0f);
                        }
                        else if (sItem.type == 2584)
                        {
                            var SpeedX = 0.0f;
                            var SpeedY = 0.0f;
                            vector2_1.X = (float) Main.mouseX + Main.screenPosition.X;
                            vector2_1.Y = (float) Main.mouseY + Main.screenPosition.Y;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY,
                                shoot + Main.rand.Next(3), Damage, num1, i, 0.0f, 0.0f);
                        }
                        else if (sItem.type == 2621)
                        {
                            var SpeedX = 0.0f;
                            var SpeedY = 0.0f;
                            vector2_1.X = (float) Main.mouseX + Main.screenPosition.X;
                            vector2_1.Y = (float) Main.mouseY + Main.screenPosition.Y;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1, i,
                                0.0f, 0.0f);
                        }
                        else if (sItem.type == 2749 || sItem.type == 3249 || sItem.type == 3474)
                        {
                            var SpeedX = 0.0f;
                            var SpeedY = 0.0f;
                            vector2_1.X = (float) Main.mouseX + Main.screenPosition.X;
                            vector2_1.Y = (float) Main.mouseY + Main.screenPosition.Y;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1, i,
                                0.0f, 0.0f);
                        }
                        else if (sItem.type == 3531)
                        {
                            var num8 = -1;
                            var index1 = -1;
                            for (var index2 = 0; index2 < 1000; ++index2)
                            {
                                if (Main.projectile[index2].active && Main.projectile[index2].owner == Main.myPlayer)
                                {
                                    if (num8 == -1 && Main.projectile[index2].type == 625)
                                        num8 = index2;
                                    if (index1 == -1 && Main.projectile[index2].type == 628)
                                        index1 = index2;
                                    if (num8 != -1 && index1 != -1)
                                        break;
                                }
                            }

                            if (num8 == -1 && index1 == -1)
                            {
                                var SpeedX = 0.0f;
                                var SpeedY = 0.0f;
                                vector2_1.X = (float) Main.mouseX + Main.screenPosition.X;
                                vector2_1.Y = (float) Main.mouseY + Main.screenPosition.Y;
                                var num9 = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot,
                                    Damage, num1, i, 0.0f, 0.0f);
                                var num10 = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY,
                                    shoot + 1, Damage, num1, i, (float) num9, 0.0f);
                                var index2 = num10;
                                var num11 = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY,
                                    shoot + 2, Damage, num1, i, (float) num10, 0.0f);
                                Main.projectile[index2].localAI[1] = (float) num11;
                                var index3 = num11;
                                var num12 = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY,
                                    shoot + 3, Damage, num1, i, (float) num11, 0.0f);
                                Main.projectile[index3].localAI[1] = (float) num12;
                            }
                            else if (num8 != -1 && index1 != -1)
                            {
                                var num9 = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, num6, num7, shoot + 1,
                                    Damage, num1, i,
                                    (float) Projectile.GetByUUID(Main.myPlayer, Main.projectile[index1].ai[0]), 0.0f);
                                var index2 = num9;
                                var index3 = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, num6, num7, shoot + 2,
                                    Damage, num1, i, (float) num9, 0.0f);
                                Main.projectile[index2].localAI[1] = (float) index3;
                                Main.projectile[index2].netUpdate = true;
                                Main.projectile[index2].ai[1] = 1f;
                                Main.projectile[index3].localAI[1] = (float) index1;
                                Main.projectile[index3].netUpdate = true;
                                Main.projectile[index3].ai[1] = 1f;
                                Main.projectile[index1].ai[0] = (float) Main.projectile[index3].projUUID;
                                Main.projectile[index1].netUpdate = true;
                                Main.projectile[index1].ai[1] = 1f;
                            }
                        }
                        else if (sItem.type == 1309)
                        {
                            var SpeedX = 0.0f;
                            var SpeedY = 0.0f;
                            vector2_1.X = (float) Main.mouseX + Main.screenPosition.X;
                            vector2_1.Y = (float) Main.mouseY + Main.screenPosition.Y;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, num1, i,
                                0.0f, 0.0f);
                        }
                        else if (sItem.shoot > 0 &&
                                 (Main.projPet[sItem.shoot] || sItem.shoot == 72 ||
                                  (sItem.shoot == 18 || sItem.shoot == 500) || sItem.shoot == 650) && !sItem.summon)
                        {
                            for (var index = 0; index < 1000; ++index)
                            {
                                if (Main.projectile[index].active && Main.projectile[index].owner == this.whoAmI)
                                {
                                    if (sItem.shoot == 72)
                                    {
                                        if (Main.projectile[index].type == 72 || Main.projectile[index].type == 86 ||
                                            Main.projectile[index].type == 87)
                                            Main.projectile[index].Kill();
                                    }
                                    else if (sItem.shoot == Main.projectile[index].type)
                                        Main.projectile[index].Kill();
                                }
                            }

                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, num6, num7, shoot, Damage, num1, i, 0.0f,
                                0.0f);
                        }
                        else if (sItem.type == 3006)
                        {
                            Vector2 vector2_4;
                            vector2_4.X = (float) Main.mouseX + Main.screenPosition.X;
                            vector2_4.Y = (float) Main.mouseY + Main.screenPosition.Y;
                            while (Collision.CanHitLine(this.position, this.width, this.height, vector2_1, 1, 1))
                            {
                                vector2_1.X += num6;
                                vector2_1.Y += num7;
                                if ((double) (vector2_1 - vector2_4).Length() <
                                    20.0 + (double) Math.Abs(num6) + (double) Math.Abs(num7))
                                {
                                    vector2_1 = vector2_4;
                                    break;
                                }
                            }

                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, 0.0f, 0.0f, shoot, Damage, num1, i, 0.0f,
                                0.0f);
                        }
                        else if (sItem.type == 3014)
                        {
                            Vector2 vector2_4;
                            vector2_4.X = (float) Main.mouseX + Main.screenPosition.X;
                            vector2_4.Y = (float) Main.mouseY + Main.screenPosition.Y;
                            while (Collision.CanHitLine(this.position, this.width, this.height, vector2_1, 1, 1))
                            {
                                vector2_1.X += num6;
                                vector2_1.Y += num7;
                                if ((double) (vector2_1 - vector2_4).Length() <
                                    20.0 + (double) Math.Abs(num6) + (double) Math.Abs(num7))
                                {
                                    vector2_1 = vector2_4;
                                    break;
                                }
                            }

                            var flag4 = false;
                            var j1 = (int) vector2_1.Y / 16;
                            var i1 = (int) vector2_1.X / 16;
                            var num8 = j1;
                            while (j1 < Main.maxTilesY - 10 && j1 - num8 < 30 &&
                                   (!WorldGen.SolidTile(i1, j1) &&
                                    !TileID.Sets.Platforms[(int) Main.tile[i1, j1].type]))
                                ++j1;
                            if (!WorldGen.SolidTile(i1, j1) && !TileID.Sets.Platforms[(int) Main.tile[i1, j1].type])
                                flag4 = true;
                            var num9 = (float) (j1 * 16);
                            var j2 = num8;
                            while (j2 > 10 && num8 - j2 < 30 && !WorldGen.SolidTile(i1, j2))
                                --j2;
                            var num10 = (float) (j2 * 16 + 16);
                            var ai1 = num9 - num10;
                            var num11 = 10;
                            if ((double) ai1 > (double) (16 * num11))
                                ai1 = (float) (16 * num11);
                            var ai0 = num9 - ai1;
                            vector2_1.X = (float) ((int) ((double) vector2_1.X / 16.0) * 16);
                            if (!flag4)
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, 0.0f, 0.0f, shoot, Damage, num1, i,
                                    ai0, ai1);
                        }
                        else if (sItem.type == 3384)
                        {
                            var num8 = this.altFunctionUse == 2 ? 1 : 0;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, num6, num7, shoot, Damage, num1, i, 0.0f,
                                (float) num8);
                        }
                        else if (sItem.type == 3473)
                        {
                            var ai1 = (float) (((double) Main.rand.NextFloat() - 0.5) * 0.785398185253143);
                            var vector2_4 = new Vector2(num6, num7);
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_4.X, vector2_4.Y, shoot, Damage,
                                num1, i, 0.0f, ai1);
                        }
                        else if (sItem.type == 3836)
                        {
                            var ai0 = (float) ((double) Main.rand.NextFloat() * (double) speed * 0.75) *
                                        (float) this.direction;
                            var velocity = new Vector2(num6, num7);
                            Projectile.NewProjectile(vector2_1, velocity, shoot, Damage, num1, i, ai0, 0.0f);
                        }
                        else if (sItem.type == 3858)
                        {
                            var flag4 = this.altFunctionUse == 2;
                            var velocity = new Vector2(num6, num7);
                            if (flag4)
                            {
                                velocity *= 1.5f;
                                var ai0 = (float) ((0.300000011920929 +
                                                      0.699999988079071 * (double) Main.rand.NextFloat()) *
                                                     (double) speed * 1.75) * (float) this.direction;
                                Projectile.NewProjectile(vector2_1, velocity, 708, (int) ((double) Damage * 0.75),
                                    num1 + 4f, i, ai0, 0.0f);
                            }
                            else
                                Projectile.NewProjectile(vector2_1, velocity, shoot, Damage, num1, i, 0.0f, 0.0f);
                        }
                        else if (sItem.type == 3859)
                        {
                            var vector2_4 = new Vector2(num6, num7);
                            shoot = 710;
                            Damage = (int) ((double) Damage * 0.699999988079071);
                            var v2 = vector2_4 * 0.8f;
                            var vector2_5 = v2.SafeNormalize(-Vector2.UnitY);
                            var num8 = (float) Math.PI / 180f * (float) -this.direction;
                            for (var num9 = -2.5f; (double) num9 < 3.0; ++num9)
                                Projectile.NewProjectile(vector2_1,
                                    (v2 + vector2_5 * num9 * 0.5f).RotatedBy((double) num9 * (double) num8,
                                        new Vector2()), shoot, Damage, num1, i, 0.0f, 0.0f);
                        }
                        else if (sItem.type == 3870)
                        {
                            var vector2_4 = Vector2.Normalize(new Vector2(num6, num7)) * 40f * sItem.scale;
                            if (Collision.CanHit(vector2_1, 0, 0, vector2_1 + vector2_4, 0, 0))
                                vector2_1 += vector2_4;
                            var v2 = new Vector2(num6, num7) * 0.8f;
                            var vector2_5 = v2.SafeNormalize(-Vector2.UnitY);
                            var num8 = (float) Math.PI / 180f * (float) -this.direction;
                            for (var index = 0; index <= 2; ++index)
                                Projectile.NewProjectile(vector2_1,
                                    (v2 + vector2_5 * (float) index * 1f).RotatedBy((double) index * (double) num8,
                                        new Vector2()), shoot, Damage, num1, i, 0.0f, 0.0f);
                        }
                        else if (sItem.type == 3542)
                        {
                            var num8 = (float) (((double) Main.rand.NextFloat() - 0.5) * 0.785398185253143 *
                                                  0.699999988079071);
                            for (var index = 0;
                                index < 10 && !Collision.CanHit(vector2_1, 0, 0,
                                    vector2_1 + new Vector2(num6, num7).RotatedBy((double) num8, new Vector2()) * 100f,
                                    0, 0);
                                ++index)
                                num8 = (float) (((double) Main.rand.NextFloat() - 0.5) * 0.785398185253143 *
                                                0.699999988079071);
                            var vector2_4 = new Vector2(num6, num7).RotatedBy((double) num8, new Vector2()) *
                                                (float) (0.949999988079071 +
                                                         (double) Main.rand.NextFloat() * 0.300000011920929);
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_4.X, vector2_4.Y, shoot, Damage,
                                num1, i, 0.0f, 0.0f);
                        }
                        else if (sItem.type == 3779)
                        {
                            var num8 = Main.rand.NextFloat() * 6.283185f;
                            for (var index = 0;
                                index < 10 && !Collision.CanHit(vector2_1, 0, 0,
                                    vector2_1 + new Vector2(num6, num7).RotatedBy((double) num8, new Vector2()) * 100f,
                                    0, 0);
                                ++index)
                                num8 = Main.rand.NextFloat() * 6.283185f;
                            var vector2_4 = new Vector2(num6, num7).RotatedBy((double) num8, new Vector2()) *
                                                (float) (0.949999988079071 +
                                                         (double) Main.rand.NextFloat() * 0.300000011920929);
                            Projectile.NewProjectile(vector2_1 + vector2_4 * 30f, Vector2.Zero, shoot, Damage, num1, i,
                                -2f, 0.0f);
                        }
                        else if (sItem.type == 3787)
                        {
                            var f3 = Main.rand.NextFloat() * 6.283185f;
                            var num8 = 20f;
                            var num9 = 60f;
                            var position = vector2_1 + f3.ToRotationVector2() *
                                               MathHelper.Lerp(num8, num9, Main.rand.NextFloat());
                            for (var index = 0; index < 50; ++index)
                            {
                                position = vector2_1 + f3.ToRotationVector2() *
                                           MathHelper.Lerp(num8, num9, Main.rand.NextFloat());
                                if (!Collision.CanHit(vector2_1, 0, 0,
                                    position + (position - vector2_1).SafeNormalize(Vector2.UnitX) * 8f, 0, 0))
                                    f3 = Main.rand.NextFloat() * 6.283185f;
                                else
                                    break;
                            }

                            var v2 = Main.MouseWorld - position;
                            var defaultValue = new Vector2(num6, num7).SafeNormalize(Vector2.UnitY) * speed;
                            var velocity = Vector2.Lerp(v2.SafeNormalize(defaultValue) * speed, defaultValue,
                                0.25f);
                            Projectile.NewProjectile(position, velocity, shoot, Damage, num1, i, 0.0f, 0.0f);
                        }
                        else if (sItem.type == 3788)
                        {
                            var v2 = new Vector2(num6, num7);
                            var num8 = 0.7853982f;
                            for (var index = 0; index < 2; ++index)
                            {
                                Projectile.NewProjectile(vector2_1,
                                    v2 + v2.SafeNormalize(Vector2.Zero).RotatedBy(
                                        (double) num8 * ((double) Main.rand.NextFloat() * 0.5 + 0.5), new Vector2()) *
                                    Main.rand.NextFloatDirection() * 2f, shoot, Damage, num1, i, 0.0f, 0.0f);
                                Projectile.NewProjectile(vector2_1,
                                    v2 + v2.SafeNormalize(Vector2.Zero).RotatedBy(
                                        -(double) num8 * ((double) Main.rand.NextFloat() * 0.5 + 0.5), new Vector2()) *
                                    Main.rand.NextFloatDirection() * 2f, shoot, Damage, num1, i, 0.0f, 0.0f);
                            }

                            Projectile.NewProjectile(vector2_1,
                                v2.SafeNormalize(Vector2.UnitX * (float) this.direction) * (speed * 1.3f), 661,
                                Damage * 2, num1, i, 0.0f, 0.0f);
                        }
                        else if (sItem.type == 3475)
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, num6, num7, 615, Damage, num1, i,
                                (float) (5 * Main.rand.Next(0, 20)), 0.0f);
                        else if (sItem.type == 3540)
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, num6, num7, 630, Damage, num1, i, 0.0f,
                                0.0f);
                        else if (sItem.type == 3854)
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, num6, num7, 705, Damage, num1, i, 0.0f,
                                0.0f);
                        else if (sItem.type == 3546)
                        {
                            for (var index = 0; index < 2; ++index)
                            {
                                var num8 = num6;
                                var num9 = num7;
                                var num10 = num8 + (float) Main.rand.Next(-40, 41) * 0.05f;
                                var num11 = num9 + (float) Main.rand.Next(-40, 41) * 0.05f;
                                var vector2_4 =
                                    vector2_1 + Vector2.Normalize(
                                        new Vector2(num10, num11).RotatedBy(-1.57079637050629 * (double) this.direction,
                                            new Vector2())) * 6f;
                                Projectile.NewProjectile(vector2_4.X, vector2_4.Y, num10, num11,
                                    167 + Main.rand.Next(4), Damage, num1, i, 0.0f, 1f);
                            }
                        }
                        else if (sItem.type == 3350)
                        {
                            var num8 = num6;
                            var num9 = num7;
                            var num10 = num8 + (float) Main.rand.Next(-1, 2) * 0.5f;
                            var num11 = num9 + (float) Main.rand.Next(-1, 2) * 0.5f;
                            if (Collision.CanHitLine(this.Center, 0, 0, vector2_1 + new Vector2(num10, num11) * 2f, 0,
                                0))
                                vector2_1 += new Vector2(num10, num11);
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y - this.gravDir * 4f, num10, num11, shoot,
                                Damage, num1, i, 0.0f, (float) Main.rand.Next(12) / 6f);
                        }
                        else if (sItem.type == 3852)
                        {
                            if (this.altFunctionUse == 2)
                                Projectile.NewProjectile(vector2_1.X, this.Bottom.Y - 100f,
                                    (float) this.direction * speed, 0.0f, 704, Damage * 2, num1, i, 0.0f, 0.0f);
                            else
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, num6, num7, shoot, Damage, num1, i,
                                    0.0f, 0.0f);
                        }
                        else if (sItem.type == 3818 || sItem.type == 3819 ||
                                 (sItem.type == 3820 || sItem.type == 3824) ||
                                 (sItem.type == 3825 || sItem.type == 3826 ||
                                  (sItem.type == 3829 || sItem.type == 3830)) ||
                                 (sItem.type == 3831 || sItem.type == 3832 ||
                                  (sItem.type == 3833 || sItem.type == 3834)))
                        {
                            this.PayDD2CrystalsBeforeUse(sItem);
                            int worldX;
                            int worldY;
                            int pushYUp;
                            this.FindSentryRestingSpot(sItem.shoot, out worldX, out worldY, out pushYUp);
                            Projectile.NewProjectile((float) worldX, (float) (worldY - pushYUp), 0.0f, 0.0f, shoot,
                                Damage, num1, i, 0.0f, 0.0f);
                            this.UpdateMaxTurrets();
                        }
                        else
                        {
                            var index = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, num6, num7, shoot, Damage,
                                num1, i, 0.0f, 0.0f);
                            if (sItem.type == 726)
                                Main.projectile[index].magic = true;
                            if (sItem.type == 724 || sItem.type == 676)
                                Main.projectile[index].melee = true;
                            if (shoot == 80)
                            {
                                Main.projectile[index].ai[0] = (float) Player.tileTargetX;
                                Main.projectile[index].ai[1] = (float) Player.tileTargetY;
                            }

                            if (shoot == 442)
                            {
                                Main.projectile[index].ai[0] = (float) Player.tileTargetX;
                                Main.projectile[index].ai[1] = (float) Player.tileTargetY;
                            }

                            if ((this.thrownCost50 || this.thrownCost33) && this.inventory[this.selectedItem].thrown)
                                Main.projectile[index].noDropItem = true;
                            if (Main.projectile[index].aiStyle == 99)
                                AchievementsHelper.HandleSpecialEvent(this, 7);
                        }
                    }
                    else if (sItem.useStyle == 5)
                    {
                        this.itemRotation = 0.0f;
                        NetMessage.SendData(41, -1, -1, (NetworkText) null, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    }
                }

                if (this.whoAmI == Main.myPlayer &&
                    (sItem.type == 509 || sItem.type == 510 || (sItem.type == 849 || sItem.type == 850) ||
                     (sItem.type == 851 || sItem.type == 3612 || (sItem.type == 3620 || sItem.type == 3625))) &&
                    ((double) this.position.X / 16.0 - (double) Player.tileRangeX - (double) sItem.tileBoost -
                     (double) this.blockRange <= (double) Player.tileTargetX &&
                     ((double) this.position.X + (double) this.width) / 16.0 + (double) Player.tileRangeX +
                     (double) sItem.tileBoost - 1.0 + (double) this.blockRange >= (double) Player.tileTargetX &&
                     ((double) this.position.Y / 16.0 - (double) Player.tileRangeY - (double) sItem.tileBoost -
                      (double) this.blockRange <= (double) Player.tileTargetY &&
                      ((double) this.position.Y + (double) this.height) / 16.0 + (double) Player.tileRangeY +
                      (double) sItem.tileBoost - 2.0 + (double) this.blockRange >= (double) Player.tileTargetY)))
                {
                    if (!Main.GamepadDisableCursorItemIcon)
                    {
                        this.showItemIcon = true;
                        Main.ItemIconCacheUpdate(sItem.type);
                    }

                    if (this.itemAnimation > 0 && this.itemTime == 0 && this.controlUseItem)
                    {
                        var tileTargetX = Player.tileTargetX;
                        var tileTargetY = Player.tileTargetY;
                        if (sItem.type == 509)
                        {
                            var index1 = -1;
                            for (var index2 = 0; index2 < 58; ++index2)
                            {
                                if (this.inventory[index2].stack > 0 && this.inventory[index2].type == 530)
                                {
                                    index1 = index2;
                                    break;
                                }
                            }

                            if (index1 >= 0 && WorldGen.PlaceWire(tileTargetX, tileTargetY))
                            {
                                --this.inventory[index1].stack;
                                if (this.inventory[index1].stack <= 0)
                                    this.inventory[index1].SetDefaults(0, false);
                                this.itemTime = sItem.useTime;
                                NetMessage.SendData(17, -1, -1, (NetworkText) null, 5, (float) Player.tileTargetX,
                                    (float) Player.tileTargetY, 0.0f, 0, 0, 0);
                            }
                        }
                        else if (sItem.type == 850)
                        {
                            var index1 = -1;
                            for (var index2 = 0; index2 < 58; ++index2)
                            {
                                if (this.inventory[index2].stack > 0 && this.inventory[index2].type == 530)
                                {
                                    index1 = index2;
                                    break;
                                }
                            }

                            if (index1 >= 0 && WorldGen.PlaceWire2(tileTargetX, tileTargetY))
                            {
                                --this.inventory[index1].stack;
                                if (this.inventory[index1].stack <= 0)
                                    this.inventory[index1].SetDefaults(0, false);
                                this.itemTime = sItem.useTime;
                                NetMessage.SendData(17, -1, -1, (NetworkText) null, 10, (float) Player.tileTargetX,
                                    (float) Player.tileTargetY, 0.0f, 0, 0, 0);
                            }
                        }

                        if (sItem.type == 851)
                        {
                            var index1 = -1;
                            for (var index2 = 0; index2 < 58; ++index2)
                            {
                                if (this.inventory[index2].stack > 0 && this.inventory[index2].type == 530)
                                {
                                    index1 = index2;
                                    break;
                                }
                            }

                            if (index1 >= 0 && WorldGen.PlaceWire3(tileTargetX, tileTargetY))
                            {
                                --this.inventory[index1].stack;
                                if (this.inventory[index1].stack <= 0)
                                    this.inventory[index1].SetDefaults(0, false);
                                this.itemTime = sItem.useTime;
                                NetMessage.SendData(17, -1, -1, (NetworkText) null, 12, (float) Player.tileTargetX,
                                    (float) Player.tileTargetY, 0.0f, 0, 0, 0);
                            }
                        }

                        if (sItem.type == 3612)
                        {
                            var index1 = -1;
                            for (var index2 = 0; index2 < 58; ++index2)
                            {
                                if (this.inventory[index2].stack > 0 && this.inventory[index2].type == 530)
                                {
                                    index1 = index2;
                                    break;
                                }
                            }

                            if (index1 >= 0 && WorldGen.PlaceWire4(tileTargetX, tileTargetY))
                            {
                                --this.inventory[index1].stack;
                                if (this.inventory[index1].stack <= 0)
                                    this.inventory[index1].SetDefaults(0, false);
                                this.itemTime = sItem.useTime;
                                NetMessage.SendData(17, -1, -1, (NetworkText) null, 16, (float) Player.tileTargetX,
                                    (float) Player.tileTargetY, 0.0f, 0, 0, 0);
                            }
                        }
                        else if (sItem.type == 510)
                        {
                            if (WorldGen.KillActuator(tileTargetX, tileTargetY))
                            {
                                this.itemTime = sItem.useTime;
                                NetMessage.SendData(17, -1, -1, (NetworkText) null, 9, (float) Player.tileTargetX,
                                    (float) Player.tileTargetY, 0.0f, 0, 0, 0);
                            }
                            else if (WorldGen.KillWire4(tileTargetX, tileTargetY))
                            {
                                this.itemTime = sItem.useTime;
                                NetMessage.SendData(17, -1, -1, (NetworkText) null, 17, (float) Player.tileTargetX,
                                    (float) Player.tileTargetY, 0.0f, 0, 0, 0);
                            }
                            else if (WorldGen.KillWire3(tileTargetX, tileTargetY))
                            {
                                this.itemTime = sItem.useTime;
                                NetMessage.SendData(17, -1, -1, (NetworkText) null, 13, (float) Player.tileTargetX,
                                    (float) Player.tileTargetY, 0.0f, 0, 0, 0);
                            }
                            else if (WorldGen.KillWire2(tileTargetX, tileTargetY))
                            {
                                this.itemTime = sItem.useTime;
                                NetMessage.SendData(17, -1, -1, (NetworkText) null, 11, (float) Player.tileTargetX,
                                    (float) Player.tileTargetY, 0.0f, 0, 0, 0);
                            }
                            else if (WorldGen.KillWire(tileTargetX, tileTargetY))
                            {
                                this.itemTime = sItem.useTime;
                                NetMessage.SendData(17, -1, -1, (NetworkText) null, 6, (float) Player.tileTargetX,
                                    (float) Player.tileTargetY, 0.0f, 0, 0, 0);
                            }
                        }
                        else if (sItem.type == 849 && sItem.stack > 0 &&
                                 WorldGen.PlaceActuator(tileTargetX, tileTargetY))
                        {
                            this.itemTime = sItem.useTime;
                            NetMessage.SendData(17, -1, -1, (NetworkText) null, 8, (float) Player.tileTargetX,
                                (float) Player.tileTargetY, 0.0f, 0, 0, 0);
                            --sItem.stack;
                            if (sItem.stack <= 0)
                                sItem.SetDefaults(0, false);
                        }

                        if (sItem.type == 3620)
                        {
                            var tile = Main.tile[tileTargetX, tileTargetY];
                            if (tile != null && tile.actuator())
                            {
                                var flag3 = tile.inActive();
                                if ((!this.ActuationRodLock || this.ActuationRodLockSetting == tile.inActive()) &&
                                    (Wiring.Actuate(tileTargetX, tileTargetY) && flag3 != tile.inActive()))
                                {
                                    this.ActuationRodLock = true;
                                    this.ActuationRodLockSetting = !tile.inActive();
                                    this.itemTime = sItem.useTime;
                                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 19, (float) Player.tileTargetX,
                                        (float) Player.tileTargetY, 0.0f, 0, 0, 0);
                                }
                            }
                        }

                        if (sItem.type == 3625)
                        {
                            var point = new Point(Player.tileTargetX, Player.tileTargetY);
                            this.itemTime = sItem.useTime;
                            var toolMode = WiresUI.Settings.ToolMode;
                            WiresUI.Settings.ToolMode &= ~WiresUI.Settings.MultiToolMode.Actuator;
                            if (Main.netMode == 1)
                                NetMessage.SendData(109, -1, -1, (NetworkText) null, point.X, (float) point.Y,
                                    (float) point.X, (float) point.Y, (int) WiresUI.Settings.ToolMode, 0, 0);
                            else
                                Wiring.MassWireOperation(point, point, this);
                            WiresUI.Settings.ToolMode = toolMode;
                        }
                    }
                }

                if (this.itemAnimation > 0 && this.itemTime == 0 && (sItem.type == 507 || sItem.type == 508))
                {
                    this.itemTime = sItem.useTime;
                    var vector2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                        this.position.Y + (float) this.height * 0.5f);
                    var num1 = (float) Main.mouseX + Main.screenPosition.X - vector2.X;
                    var num2 = (float) Main.mouseY + Main.screenPosition.Y - vector2.Y;
                    var num3 = (float) Math.Sqrt((double) num1 * (double) num1 + (double) num2 * (double) num2) /
                                 (float) (Main.screenHeight / 2);
                    if ((double) num3 > 1.0)
                        num3 = 1f;
                    var number2 = (float) ((double) num3 * 2.0 - 1.0);
                    if ((double) number2 < -1.0)
                        number2 = -1f;
                    if ((double) number2 > 1.0)
                        number2 = 1f;
                    Main.harpNote = number2;
                    var type2 = SoundID.Item26;
                    if (sItem.type == 507)
                        type2 = SoundID.Item35;
                    Main.PlaySound(type2, this.position);
                    NetMessage.SendData(58, -1, -1, (NetworkText) null, this.whoAmI, number2, 0.0f, 0.0f, 0, 0, 0);
                }

                if ((sItem.type >= 205 && sItem.type <= 207 || (sItem.type == 1128 || sItem.type == 3031) ||
                     sItem.type == 3032) && (!this.noBuilding &&
                                             (double) this.position.X / 16.0 - (double) Player.tileRangeX -
                                             (double) sItem.tileBoost <= (double) Player.tileTargetX &&
                                             (((double) this.position.X + (double) this.width) / 16.0 +
                                              (double) Player.tileRangeX + (double) sItem.tileBoost - 1.0 >=
                                              (double) Player.tileTargetX &&
                                              (double) this.position.Y / 16.0 - (double) Player.tileRangeY -
                                              (double) sItem.tileBoost <= (double) Player.tileTargetY) &&
                                             ((double) this.position.Y + (double) this.height) / 16.0 +
                                             (double) Player.tileRangeY + (double) sItem.tileBoost - 2.0 >=
                                             (double) Player.tileTargetY))
                {
                    if (!Main.GamepadDisableCursorItemIcon)
                    {
                        this.showItemIcon = true;
                        Main.ItemIconCacheUpdate(sItem.type);
                    }

                    if (this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
                    {
                        if (sItem.type == 205 || sItem.type == 3032 &&
                            Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType() == (byte) 0)
                        {
                            var num1 = (int) Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType();
                            var num2 = 0;
                            for (var index1 = Player.tileTargetX - 1; index1 <= Player.tileTargetX + 1; ++index1)
                            {
                                for (var index2 = Player.tileTargetY - 1; index2 <= Player.tileTargetY + 1; ++index2)
                                {
                                    if ((int) Main.tile[index1, index2].liquidType() == num1)
                                        num2 += (int) Main.tile[index1, index2].liquid;
                                }
                            }

                            if (Main.tile[Player.tileTargetX, Player.tileTargetY].liquid > (byte) 0 &&
                                (num2 > 100 || sItem.type == 3032))
                            {
                                var liquidType = (int) Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType();
                                if (sItem.type != 3032)
                                {
                                    if (!Main.tile[Player.tileTargetX, Player.tileTargetY].lava())
                                    {
                                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].honey())
                                        {
                                            --sItem.stack;
                                            this.PutItemInInventory(1128, this.selectedItem);
                                        }
                                        else
                                        {
                                            --sItem.stack;
                                            this.PutItemInInventory(206, this.selectedItem);
                                        }
                                    }
                                    else
                                    {
                                        --sItem.stack;
                                        this.PutItemInInventory(207, this.selectedItem);
                                    }
                                }

                                Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                                this.itemTime = sItem.useTime;
                                var liquid = (int) Main.tile[Player.tileTargetX, Player.tileTargetY].liquid;
                                Main.tile[Player.tileTargetX, Player.tileTargetY].liquid = (byte) 0;
                                Main.tile[Player.tileTargetX, Player.tileTargetY].lava(false);
                                Main.tile[Player.tileTargetX, Player.tileTargetY].honey(false);
                                WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, false);
                                if (Main.netMode == 1)
                                    NetMessage.sendWater(Player.tileTargetX, Player.tileTargetY);
                                else
                                    Liquid.AddWater(Player.tileTargetX, Player.tileTargetY);
                                for (var index1 = Player.tileTargetX - 1; index1 <= Player.tileTargetX + 1; ++index1)
                                {
                                    for (var index2 = Player.tileTargetY - 1;
                                        index2 <= Player.tileTargetY + 1;
                                        ++index2)
                                    {
                                        if (liquid < 256 && (int) Main.tile[index1, index2].liquidType() == num1)
                                        {
                                            var num3 = (int) Main.tile[index1, index2].liquid;
                                            if (num3 + liquid > (int) byte.MaxValue)
                                                num3 = (int) byte.MaxValue - liquid;
                                            liquid += num3;
                                            Main.tile[index1, index2].liquid -= (byte) num3;
                                            Main.tile[index1, index2].liquidType(liquidType);
                                            if (Main.tile[index1, index2].liquid == (byte) 0)
                                            {
                                                Main.tile[index1, index2].lava(false);
                                                Main.tile[index1, index2].honey(false);
                                            }

                                            WorldGen.SquareTileFrame(index1, index2, false);
                                            if (Main.netMode == 1)
                                                NetMessage.sendWater(index1, index2);
                                            else
                                                Liquid.AddWater(index1, index2);
                                        }
                                    }
                                }
                            }
                        }
                        else if (Main.tile[Player.tileTargetX, Player.tileTargetY].liquid < (byte) 200 &&
                                 (!Main.tile[Player.tileTargetX, Player.tileTargetY].nactive() ||
                                  !Main.tileSolid[(int) Main.tile[Player.tileTargetX, Player.tileTargetY].type] ||
                                  Main.tileSolidTop[(int) Main.tile[Player.tileTargetX, Player.tileTargetY].type]))
                        {
                            if (sItem.type == 207)
                            {
                                if (Main.tile[Player.tileTargetX, Player.tileTargetY].liquid == (byte) 0 ||
                                    Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType() == (byte) 1)
                                {
                                    Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                                    Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType(1);
                                    Main.tile[Player.tileTargetX, Player.tileTargetY].liquid = byte.MaxValue;
                                    WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
                                    --sItem.stack;
                                    this.PutItemInInventory(205, this.selectedItem);
                                    this.itemTime = sItem.useTime;
                                    if (Main.netMode == 1)
                                        NetMessage.sendWater(Player.tileTargetX, Player.tileTargetY);
                                }
                            }
                            else if (sItem.type == 206 || sItem.type == 3031)
                            {
                                if (Main.tile[Player.tileTargetX, Player.tileTargetY].liquid == (byte) 0 ||
                                    Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType() == (byte) 0)
                                {
                                    Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                                    Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType(0);
                                    Main.tile[Player.tileTargetX, Player.tileTargetY].liquid = byte.MaxValue;
                                    WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
                                    if (sItem.type != 3031)
                                    {
                                        --sItem.stack;
                                        this.PutItemInInventory(205, this.selectedItem);
                                    }

                                    this.itemTime = sItem.useTime;
                                    if (Main.netMode == 1)
                                        NetMessage.sendWater(Player.tileTargetX, Player.tileTargetY);
                                }
                            }
                            else if (sItem.type == 1128 &&
                                     (Main.tile[Player.tileTargetX, Player.tileTargetY].liquid == (byte) 0 ||
                                      Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType() == (byte) 2))
                            {
                                Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                                Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType(2);
                                Main.tile[Player.tileTargetX, Player.tileTargetY].liquid = byte.MaxValue;
                                WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
                                --sItem.stack;
                                this.PutItemInInventory(205, this.selectedItem);
                                this.itemTime = sItem.useTime;
                                if (Main.netMode == 1)
                                    NetMessage.sendWater(Player.tileTargetX, Player.tileTargetY);
                            }
                        }
                    }
                }

                if (!this.channel)
                {
                    this.toolTime = this.itemTime;
                }
                else
                {
                    --this.toolTime;
                    if (this.toolTime < 0)
                        this.toolTime = sItem.pick <= 0
                            ? (int) ((double) sItem.useTime * (double) this.pickSpeed)
                            : sItem.useTime;
                }

                if (sItem.pick > 0 || sItem.axe > 0 || sItem.hammer > 0)
                {
                    var flag3 =
                        (double) this.position.X / 16.0 - (double) Player.tileRangeX - (double) sItem.tileBoost <=
                        (double) Player.tileTargetX &&
                        ((double) this.position.X + (double) this.width) / 16.0 + (double) Player.tileRangeX +
                        (double) sItem.tileBoost - 1.0 >= (double) Player.tileTargetX &&
                        (double) this.position.Y / 16.0 - (double) Player.tileRangeY - (double) sItem.tileBoost <=
                        (double) Player.tileTargetY &&
                        ((double) this.position.Y + (double) this.height) / 16.0 + (double) Player.tileRangeY +
                        (double) sItem.tileBoost - 2.0 >= (double) Player.tileTargetY;
                    if (this.noBuilding)
                        flag3 = false;
                    if (flag3)
                    {
                        var damageAmount1 = 0;
                        var flag4 = true;
                        if (!Main.GamepadDisableCursorItemIcon)
                        {
                            this.showItemIcon = true;
                            Main.ItemIconCacheUpdate(sItem.type);
                        }

                        if (this.toolTime == 0 && this.itemAnimation > 0 && this.controlUseItem &&
                            (!Main.tile[Player.tileTargetX, Player.tileTargetY].active() ||
                             !Main.tileHammer[(int) Main.tile[Player.tileTargetX, Player.tileTargetY].type] &&
                             !Main.tileSolid[(int) Main.tile[Player.tileTargetX, Player.tileTargetY].type] &&
                             (Main.tile[Player.tileTargetX, Player.tileTargetY].type != (ushort) 314 &&
                              Main.tile[Player.tileTargetX, Player.tileTargetY].type != (ushort) 424) &&
                             (Main.tile[Player.tileTargetX, Player.tileTargetY].type != (ushort) 442 &&
                              Main.tile[Player.tileTargetX, Player.tileTargetY].type != (ushort) 351)))
                            this.poundRelease = false;
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].active())
                        {
                            if (sItem.pick > 0 &&
                                !Main.tileAxe[(int) Main.tile[Player.tileTargetX, Player.tileTargetY].type] &&
                                !Main.tileHammer[(int) Main.tile[Player.tileTargetX, Player.tileTargetY].type] ||
                                (sItem.axe > 0 &&
                                 Main.tileAxe[(int) Main.tile[Player.tileTargetX, Player.tileTargetY].type] ||
                                 sItem.hammer > 0 &&
                                 Main.tileHammer[(int) Main.tile[Player.tileTargetX, Player.tileTargetY].type]))
                                flag4 = false;
                            if (this.toolTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
                            {
                                var tileId = this.hitTile.HitObject(Player.tileTargetX, Player.tileTargetY, 1);
                                if (Main.tileNoFail[(int) Main.tile[Player.tileTargetX, Player.tileTargetY].type])
                                    damageAmount1 = 100;
                                if (Main.tileHammer[(int) Main.tile[Player.tileTargetX, Player.tileTargetY].type])
                                {
                                    flag4 = false;
                                    if (sItem.hammer > 0)
                                    {
                                        damageAmount1 += sItem.hammer;
                                        if (!WorldGen.CanKillTile(Player.tileTargetX, Player.tileTargetY))
                                            damageAmount1 = 0;
                                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == (ushort) 26 &&
                                            (sItem.hammer < 80 || !Main.hardMode))
                                        {
                                            damageAmount1 = 0;
                                            this.Hurt(PlayerDeathReason.ByOther(4), this.statLife / 2, -this.direction,
                                                false, false, false, -1);
                                        }

                                        AchievementsHelper.CurrentlyMining = true;
                                        if (this.hitTile.AddDamage(tileId, damageAmount1, true) >= 100)
                                        {
                                            this.hitTile.Clear(tileId);
                                            WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, false, false,
                                                false);
                                            if (Main.netMode == 1)
                                                NetMessage.SendData(17, -1, -1, (NetworkText) null, 0,
                                                    (float) Player.tileTargetX, (float) Player.tileTargetY, 0.0f, 0, 0,
                                                    0);
                                        }
                                        else
                                        {
                                            WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, true, false,
                                                false);
                                            if (Main.netMode == 1)
                                                NetMessage.SendData(17, -1, -1, (NetworkText) null, 0,
                                                    (float) Player.tileTargetX, (float) Player.tileTargetY, 1f, 0, 0,
                                                    0);
                                        }

                                        if (damageAmount1 != 0)
                                            this.hitTile.Prune();
                                        this.itemTime = sItem.useTime;
                                        AchievementsHelper.CurrentlyMining = false;
                                    }
                                }
                                else if (Main.tileAxe[(int) Main.tile[Player.tileTargetX, Player.tileTargetY].type])
                                {
                                    if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == (ushort) 80)
                                        damageAmount1 += sItem.axe * 3;
                                    else
                                        damageAmount1 += sItem.axe;
                                    if (sItem.axe > 0)
                                    {
                                        AchievementsHelper.CurrentlyMining = true;
                                        if (!WorldGen.CanKillTile(Player.tileTargetX, Player.tileTargetY))
                                            damageAmount1 = 0;
                                        if (this.hitTile.AddDamage(tileId, damageAmount1, true) >= 100)
                                        {
                                            this.hitTile.Clear(tileId);
                                            WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, false, false,
                                                false);
                                            if (Main.netMode == 1)
                                                NetMessage.SendData(17, -1, -1, (NetworkText) null, 0,
                                                    (float) Player.tileTargetX, (float) Player.tileTargetY, 0.0f, 0, 0,
                                                    0);
                                        }
                                        else
                                        {
                                            WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, true, false,
                                                false);
                                            if (Main.netMode == 1)
                                                NetMessage.SendData(17, -1, -1, (NetworkText) null, 0,
                                                    (float) Player.tileTargetX, (float) Player.tileTargetY, 1f, 0, 0,
                                                    0);
                                        }

                                        if (damageAmount1 != 0)
                                            this.hitTile.Prune();
                                        this.itemTime = sItem.useTime;
                                        AchievementsHelper.CurrentlyMining = false;
                                    }
                                }
                                else if (sItem.pick > 0)
                                {
                                    this.PickTile(Player.tileTargetX, Player.tileTargetY, sItem.pick);
                                    this.itemTime = (int) ((double) sItem.useTime * (double) this.pickSpeed);
                                }

                                if (sItem.pick > 0)
                                    this.itemTime = (int) ((double) sItem.useTime * (double) this.pickSpeed);
                                if (sItem.hammer > 0 && Main.tile[Player.tileTargetX, Player.tileTargetY].active() &&
                                    (Main.tileSolid[(int) Main.tile[Player.tileTargetX, Player.tileTargetY].type] &&
                                     Main.tile[Player.tileTargetX, Player.tileTargetY].type != (ushort) 10 ||
                                     (Main.tile[Player.tileTargetX, Player.tileTargetY].type == (ushort) 314 ||
                                      Main.tile[Player.tileTargetX, Player.tileTargetY].type == (ushort) 351) ||
                                     (Main.tile[Player.tileTargetX, Player.tileTargetY].type == (ushort) 424 ||
                                      Main.tile[Player.tileTargetX, Player.tileTargetY].type == (ushort) 442)) &&
                                    this.poundRelease)
                                {
                                    flag4 = false;
                                    this.itemTime = sItem.useTime;
                                    var num1 = damageAmount1 + (int) ((double) sItem.hammer * 1.25);
                                    var damageAmount2 = 100;
                                    if (Main.tile[Player.tileTargetX, Player.tileTargetY - 1].active() &&
                                        Main.tile[Player.tileTargetX, Player.tileTargetY - 1].type == (ushort) 10)
                                        damageAmount2 = 0;
                                    if (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].active() &&
                                        Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type == (ushort) 10)
                                        damageAmount2 = 0;
                                    if (this.hitTile.AddDamage(tileId, damageAmount2, true) >= 100)
                                    {
                                        this.hitTile.Clear(tileId);
                                        if (this.poundRelease)
                                        {
                                            var tileTargetX = Player.tileTargetX;
                                            var tileTargetY = Player.tileTargetY;
                                            if (TileID.Sets.Platforms[(int) Main.tile[tileTargetX, tileTargetY].type])
                                            {
                                                if (Main.tile[tileTargetX, tileTargetY].halfBrick())
                                                {
                                                    WorldGen.PoundTile(tileTargetX, tileTargetY);
                                                    if (Main.netMode == 1)
                                                        NetMessage.SendData(17, -1, -1, (NetworkText) null, 7,
                                                            (float) Player.tileTargetX, (float) Player.tileTargetY, 1f,
                                                            0, 0, 0);
                                                }
                                                else
                                                {
                                                    var slope1 = 1;
                                                    var slope2 = 2;
                                                    if (TileID.Sets.Platforms
                                                            [(int) Main.tile[tileTargetX + 1, tileTargetY - 1].type] ||
                                                        TileID.Sets.Platforms[
                                                            (int) Main.tile[tileTargetX - 1, tileTargetY + 1].type] ||
                                                        WorldGen.SolidTile(tileTargetX + 1, tileTargetY) &&
                                                        !WorldGen.SolidTile(tileTargetX - 1, tileTargetY))
                                                    {
                                                        slope1 = 2;
                                                        slope2 = 1;
                                                    }

                                                    if (Main.tile[tileTargetX, tileTargetY].slope() == (byte) 0)
                                                    {
                                                        WorldGen.SlopeTile(tileTargetX, tileTargetY, slope1);
                                                        var num2 = (int) Main.tile[tileTargetX, tileTargetY].slope();
                                                        if (Main.netMode == 1)
                                                            NetMessage.SendData(17, -1, -1, (NetworkText) null, 14,
                                                                (float) Player.tileTargetX, (float) Player.tileTargetY,
                                                                (float) num2, 0, 0, 0);
                                                    }
                                                    else if ((int) Main.tile[tileTargetX, tileTargetY].slope() ==
                                                             slope1)
                                                    {
                                                        WorldGen.SlopeTile(tileTargetX, tileTargetY, slope2);
                                                        var num2 = (int) Main.tile[tileTargetX, tileTargetY].slope();
                                                        if (Main.netMode == 1)
                                                            NetMessage.SendData(17, -1, -1, (NetworkText) null, 14,
                                                                (float) Player.tileTargetX, (float) Player.tileTargetY,
                                                                (float) num2, 0, 0, 0);
                                                    }
                                                    else
                                                    {
                                                        WorldGen.SlopeTile(tileTargetX, tileTargetY, 0);
                                                        var num2 = (int) Main.tile[tileTargetX, tileTargetY].slope();
                                                        if (Main.netMode == 1)
                                                            NetMessage.SendData(17, -1, -1, (NetworkText) null, 14,
                                                                (float) Player.tileTargetX, (float) Player.tileTargetY,
                                                                (float) num2, 0, 0, 0);
                                                        WorldGen.PoundTile(tileTargetX, tileTargetY);
                                                        if (Main.netMode == 1)
                                                            NetMessage.SendData(17, -1, -1, (NetworkText) null, 7,
                                                                (float) Player.tileTargetX, (float) Player.tileTargetY,
                                                                1f, 0, 0, 0);
                                                    }
                                                }
                                            }
                                            else if (Main.tile[tileTargetX, tileTargetY].type == (ushort) 314)
                                            {
                                                if (Minecart.FrameTrack(tileTargetX, tileTargetY, true, false) &&
                                                    Main.netMode == 1)
                                                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 15,
                                                        (float) Player.tileTargetX, (float) Player.tileTargetY, 1f, 0,
                                                        0, 0);
                                            }
                                            else if (Main.tile[tileTargetX, tileTargetY].type == (ushort) 137)
                                            {
                                                var num2 = 0;
                                                switch ((int) Main.tile[tileTargetX, tileTargetY].frameY / 18)
                                                {
                                                    case 0:
                                                    case 1:
                                                    case 2:
                                                        switch ((int) Main.tile[tileTargetX, tileTargetY].frameX / 18)
                                                        {
                                                            case 0:
                                                                num2 = 2;
                                                                break;
                                                            case 1:
                                                                num2 = 3;
                                                                break;
                                                            case 2:
                                                                num2 = 4;
                                                                break;
                                                            case 3:
                                                                num2 = 5;
                                                                break;
                                                            case 4:
                                                                num2 = 1;
                                                                break;
                                                            case 5:
                                                                num2 = 0;
                                                                break;
                                                        }

                                                        break;
                                                    case 3:
                                                    case 4:
                                                        switch ((int) Main.tile[tileTargetX, tileTargetY].frameX / 18)
                                                        {
                                                            case 0:
                                                            case 1:
                                                                num2 = 3;
                                                                break;
                                                            case 2:
                                                                num2 = 4;
                                                                break;
                                                            case 3:
                                                                num2 = 2;
                                                                break;
                                                            case 4:
                                                                num2 = 0;
                                                                break;
                                                        }

                                                        break;
                                                }

                                                Main.tile[tileTargetX, tileTargetY].frameX = (short) (num2 * 18);
                                                if (Main.netMode == 1)
                                                    NetMessage.SendTileSquare(-1, Player.tileTargetX,
                                                        Player.tileTargetY, 1, TileChangeType.None);
                                            }
                                            else if (Main.tile[tileTargetX, tileTargetY].type == (ushort) 424)
                                            {
                                                Main.tile[tileTargetX, tileTargetY].frameX =
                                                    Main.tile[tileTargetX, tileTargetY].frameX != (short) 0
                                                        ? (Main.tile[tileTargetX, tileTargetY].frameX != (short) 18
                                                            ? (short) 0
                                                            : (short) 36)
                                                        : (short) 18;
                                                if (Main.netMode == 1)
                                                    NetMessage.SendTileSquare(-1, Player.tileTargetX,
                                                        Player.tileTargetY, 1, TileChangeType.None);
                                            }
                                            else if (Main.tile[tileTargetX, tileTargetY].type == (ushort) 442)
                                            {
                                                var tile1 = Main.tile[tileTargetX, tileTargetY - 1];
                                                var tile2 = Main.tile[tileTargetX, tileTargetY + 1];
                                                var tile3 = Main.tile[tileTargetX - 1, tileTargetY];
                                                var tile4 = Main.tile[tileTargetX + 1, tileTargetY];
                                                var tile5 = Main.tile[tileTargetX - 1, tileTargetY + 1];
                                                var tile6 = Main.tile[tileTargetX + 1, tileTargetY + 1];
                                                var tile7 = Main.tile[tileTargetX - 1, tileTargetY - 1];
                                                var tile8 = Main.tile[tileTargetX + 1, tileTargetY - 1];
                                                var index1 = -1;
                                                var index2 = -1;
                                                var index3 = -1;
                                                var index4 = -1;
                                                var num2 = -1;
                                                var num3 = -1;
                                                var num4 = -1;
                                                var num5 = -1;
                                                if (tile1 != null && tile1.nactive() && !tile1.bottomSlope())
                                                    index2 = (int) tile1.type;
                                                if (tile2 != null && tile2.nactive() &&
                                                    (!tile2.halfBrick() && !tile2.topSlope()))
                                                    index1 = (int) tile2.type;
                                                if (tile3 != null && tile3.nactive() &&
                                                    (tile3.slope() == (byte) 0 || (int) tile3.slope() % 2 != 1))
                                                    index3 = (int) tile3.type;
                                                if (tile4 != null && tile4.nactive() &&
                                                    (tile4.slope() == (byte) 0 || (int) tile4.slope() % 2 != 0))
                                                    index4 = (int) tile4.type;
                                                if (tile5 != null && tile5.nactive())
                                                    num2 = (int) tile5.type;
                                                if (tile6 != null && tile6.nactive())
                                                    num3 = (int) tile6.type;
                                                if (tile7 != null && tile7.nactive())
                                                    num4 = (int) tile7.type;
                                                if (tile8 != null && tile8.nactive())
                                                    num5 = (int) tile8.type;
                                                var flag5 = false;
                                                var flag6 = false;
                                                var flag7 = false;
                                                var flag8 = false;
                                                if (index1 >= 0 && Main.tileSolid[index1] &&
                                                    (!Main.tileNoAttach[index1] || TileID.Sets.Platforms[index1]) &&
                                                    ((tile2.bottomSlope() || tile2.slope() == (byte) 0) &&
                                                     !tile2.halfBrick()))
                                                    flag8 = true;
                                                if (index2 >= 0 && Main.tileSolid[index2] &&
                                                    (!Main.tileNoAttach[index2] || TileID.Sets.Platforms[index2] &&
                                                     tile1.halfBrick()) &&
                                                    (tile1.topSlope() || tile1.slope() == (byte) 0 ||
                                                     tile1.halfBrick()))
                                                    flag5 = true;
                                                if (index3 >= 0 && Main.tileSolid[index3] &&
                                                    !Main.tileNoAttach[index3] &&
                                                    ((tile3.leftSlope() || tile3.slope() == (byte) 0) &&
                                                     !tile3.halfBrick()) ||
                                                    (index3 == 124 || index3 == 5 && num4 == 5 && num2 == 5))
                                                    flag6 = true;
                                                if (index4 >= 0 && Main.tileSolid[index4] &&
                                                    !Main.tileNoAttach[index4] &&
                                                    ((tile4.rightSlope() || tile4.slope() == (byte) 0) &&
                                                     !tile4.halfBrick()) ||
                                                    (index4 == 124 || index4 == 5 && num5 == 5 && num3 == 5))
                                                    flag7 = true;
                                                var num6 = (int) Main.tile[tileTargetX, tileTargetY].frameX / 22;
                                                short num7 = -2;
                                                switch (num6)
                                                {
                                                    case 0:
                                                        num7 = !flag6
                                                            ? (!flag5 ? (!flag7 ? (short) -1 : (short) 3) : (short) 1)
                                                            : (short) 2;
                                                        break;
                                                    case 1:
                                                        num7 = !flag7
                                                            ? (!flag8 ? (!flag6 ? (short) -1 : (short) 2) : (short) 0)
                                                            : (short) 3;
                                                        break;
                                                    case 2:
                                                        num7 = !flag5
                                                            ? (!flag7 ? (!flag8 ? (short) -1 : (short) 0) : (short) 3)
                                                            : (short) 1;
                                                        break;
                                                    case 3:
                                                        num7 = !flag8
                                                            ? (!flag6 ? (!flag5 ? (short) -1 : (short) 1) : (short) 2)
                                                            : (short) 0;
                                                        break;
                                                }

                                                switch (num7)
                                                {
                                                    case -2:
                                                        num7 = (short) 0;
                                                        break;
                                                    case -1:
                                                        goto label_1391;
                                                }

                                                Main.tile[tileTargetX, tileTargetY].frameX = (short) (22 * (int) num7);
                                                if (Main.netMode == 1)
                                                    NetMessage.SendTileSquare(-1, Player.tileTargetX,
                                                        Player.tileTargetY, 1, TileChangeType.None);
                                            }
                                            else if ((Main.tile[tileTargetX, tileTargetY].halfBrick() ||
                                                      Main.tile[tileTargetX, tileTargetY].slope() != (byte) 0) &&
                                                     !Main.tileSolidTop[
                                                         (int) Main.tile[Player.tileTargetX, Player.tileTargetY].type])
                                            {
                                                var num2 = 1;
                                                var slope1 = 1;
                                                var slope2 = 2;
                                                if ((WorldGen.SolidTile(tileTargetX + 1, tileTargetY) ||
                                                     Main.tile[tileTargetX + 1, tileTargetY].slope() == (byte) 1 ||
                                                     Main.tile[tileTargetX + 1, tileTargetY].slope() == (byte) 3) &&
                                                    !WorldGen.SolidTile(tileTargetX - 1, tileTargetY))
                                                {
                                                    slope1 = 2;
                                                    slope2 = 1;
                                                }

                                                if (WorldGen.SolidTile(tileTargetX, tileTargetY - 1) &&
                                                    !WorldGen.SolidTile(tileTargetX, tileTargetY + 1))
                                                    num2 = -1;
                                                if (num2 == 1)
                                                {
                                                    if (Main.tile[tileTargetX, tileTargetY].slope() == (byte) 0)
                                                        WorldGen.SlopeTile(tileTargetX, tileTargetY, slope1);
                                                    else if ((int) Main.tile[tileTargetX, tileTargetY].slope() ==
                                                             slope1)
                                                        WorldGen.SlopeTile(tileTargetX, tileTargetY, slope2);
                                                    else if ((int) Main.tile[tileTargetX, tileTargetY].slope() ==
                                                             slope2)
                                                        WorldGen.SlopeTile(tileTargetX, tileTargetY, slope1 + 2);
                                                    else if ((int) Main.tile[tileTargetX, tileTargetY].slope() ==
                                                             slope1 + 2)
                                                        WorldGen.SlopeTile(tileTargetX, tileTargetY, slope2 + 2);
                                                    else
                                                        WorldGen.SlopeTile(tileTargetX, tileTargetY, 0);
                                                }
                                                else if (Main.tile[tileTargetX, tileTargetY].slope() == (byte) 0)
                                                    WorldGen.SlopeTile(tileTargetX, tileTargetY, slope1 + 2);
                                                else if ((int) Main.tile[tileTargetX, tileTargetY].slope() ==
                                                         slope1 + 2)
                                                    WorldGen.SlopeTile(tileTargetX, tileTargetY, slope2 + 2);
                                                else if ((int) Main.tile[tileTargetX, tileTargetY].slope() ==
                                                         slope2 + 2)
                                                    WorldGen.SlopeTile(tileTargetX, tileTargetY, slope1);
                                                else if ((int) Main.tile[tileTargetX, tileTargetY].slope() == slope1)
                                                    WorldGen.SlopeTile(tileTargetX, tileTargetY, slope2);
                                                else
                                                    WorldGen.SlopeTile(tileTargetX, tileTargetY, 0);

                                                var num3 = (int) Main.tile[tileTargetX, tileTargetY].slope();
                                                if (Main.netMode == 1)
                                                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 14,
                                                        (float) Player.tileTargetX, (float) Player.tileTargetY,
                                                        (float) num3, 0, 0, 0);
                                            }
                                            else
                                            {
                                                WorldGen.PoundTile(tileTargetX, tileTargetY);
                                                if (Main.netMode == 1)
                                                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 7,
                                                        (float) Player.tileTargetX, (float) Player.tileTargetY, 1f, 0,
                                                        0, 0);
                                            }

                                            label_1391:
                                            this.poundRelease = false;
                                        }
                                    }
                                    else
                                    {
                                        WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, true, true, false);
                                        Main.PlaySound(0, Player.tileTargetX * 16, Player.tileTargetY * 16, 1, 1f,
                                            0.0f);
                                    }
                                }
                                else
                                    this.poundRelease = false;
                            }
                        }

                        if (this.releaseUseItem)
                            this.poundRelease = true;
                        var index5 = Player.tileTargetX;
                        var index6 = Player.tileTargetY;
                        var flag9 = true;
                        if (Main.tile[index5, index6].wall > (byte) 0)
                        {
                            if (!Main.wallHouse[(int) Main.tile[index5, index6].wall])
                            {
                                for (var index1 = index5 - 1; index1 < index5 + 2; ++index1)
                                {
                                    for (var index2 = index6 - 1; index2 < index6 + 2; ++index2)
                                    {
                                        if ((int) Main.tile[index1, index2].wall !=
                                            (int) Main.tile[index5, index6].wall)
                                        {
                                            flag9 = false;
                                            break;
                                        }
                                    }
                                }
                            }
                            else
                                flag9 = false;
                        }

                        if (flag9 && !Main.tile[index5, index6].active())
                        {
                            var num1 = -1;
                            if (((double) Main.mouseX + (double) Main.screenPosition.X) / 16.0 <
                                Math.Round(((double) Main.mouseX + (double) Main.screenPosition.X) / 16.0))
                                num1 = 0;
                            var num2 = -1;
                            if (((double) Main.mouseY + (double) Main.screenPosition.Y) / 16.0 <
                                Math.Round(((double) Main.mouseY + (double) Main.screenPosition.Y) / 16.0))
                                num2 = 0;
                            for (var index1 = Player.tileTargetX + num1;
                                index1 <= Player.tileTargetX + num1 + 1;
                                ++index1)
                            {
                                for (var index2 = Player.tileTargetY + num2;
                                    index2 <= Player.tileTargetY + num2 + 1;
                                    ++index2)
                                {
                                    if (flag9)
                                    {
                                        index5 = index1;
                                        index6 = index2;
                                        if (Main.tile[index5, index6].wall > (byte) 0)
                                        {
                                            if (!Main.wallHouse[(int) Main.tile[index5, index6].wall])
                                            {
                                                for (var index3 = index5 - 1; index3 < index5 + 2; ++index3)
                                                {
                                                    for (var index4 = index6 - 1; index4 < index6 + 2; ++index4)
                                                    {
                                                        if ((int) Main.tile[index3, index4].wall !=
                                                            (int) Main.tile[index5, index6].wall)
                                                        {
                                                            flag9 = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                                flag9 = false;
                                        }
                                    }
                                }
                            }
                        }

                        if (flag4 && Main.tile[index5, index6].wall > (byte) 0 &&
                            (!Main.tile[index5, index6].active() || index5 != Player.tileTargetX ||
                             index6 != Player.tileTargetY ||
                             !Main.tileHammer[(int) Main.tile[index5, index6].type] && !this.poundRelease) &&
                            (this.toolTime == 0 && this.itemAnimation > 0 && (this.controlUseItem && sItem.hammer > 0)))
                        {
                            var flag5 = true;
                            if (!Main.wallHouse[(int) Main.tile[index5, index6].wall])
                            {
                                flag5 = false;
                                for (var index1 = index5 - 1; index1 < index5 + 2; ++index1)
                                {
                                    for (var index2 = index6 - 1; index2 < index6 + 2; ++index2)
                                    {
                                        if (Main.tile[index1, index2].wall == (byte) 0 ||
                                            Main.wallHouse[(int) Main.tile[index1, index2].wall])
                                        {
                                            flag5 = true;
                                            break;
                                        }
                                    }
                                }
                            }

                            if (flag5)
                            {
                                var tileId = this.hitTile.HitObject(index5, index6, 2);
                                var damageAmount2 = (int) ((double) sItem.hammer * 1.5);
                                if (this.hitTile.AddDamage(tileId, damageAmount2, true) >= 100)
                                {
                                    this.hitTile.Clear(tileId);
                                    WorldGen.KillWall(index5, index6, false);
                                    if (Main.netMode == 1)
                                        NetMessage.SendData(17, -1, -1, (NetworkText) null, 2, (float) index5,
                                            (float) index6, 0.0f, 0, 0, 0);
                                }
                                else
                                {
                                    WorldGen.KillWall(index5, index6, true);
                                    if (Main.netMode == 1)
                                        NetMessage.SendData(17, -1, -1, (NetworkText) null, 2, (float) index5,
                                            (float) index6, 1f, 0, 0, 0);
                                }

                                if (damageAmount2 != 0)
                                    this.hitTile.Prune();
                                this.itemTime = sItem.useTime / 2;
                            }
                        }
                    }
                }

                if (Main.myPlayer == this.whoAmI && sItem.type == 1326 &&
                    (this.itemAnimation > 0 && this.itemTime == 0))
                {
                    this.itemTime = sItem.useTime;
                    Vector2 vector2;
                    vector2.X = (float) Main.mouseX + Main.screenPosition.X;
                    vector2.Y = (double) this.gravDir != 1.0
                        ? Main.screenPosition.Y + (float) Main.screenHeight - (float) Main.mouseY
                        : (float) Main.mouseY + Main.screenPosition.Y - (float) this.height;
                    vector2.X -= (float) (this.width / 2);
                    if ((double) vector2.X > 50.0 && (double) vector2.X < (double) (Main.maxTilesX * 16 - 50) &&
                        ((double) vector2.Y > 50.0 && (double) vector2.Y < (double) (Main.maxTilesY * 16 - 50)))
                    {
                        var index1 = (int) ((double) vector2.X / 16.0);
                        var index2 = (int) ((double) vector2.Y / 16.0);
                        if ((Main.tile[index1, index2].wall != (byte) 87 || (double) index2 <= Main.worldSurface ||
                             NPC.downedPlantBoss) && !Collision.SolidCollision(vector2, this.width, this.height))
                        {
                            this.Teleport(vector2, 1, 0);
                            NetMessage.SendData(65, -1, -1, (NetworkText) null, 0, (float) this.whoAmI, vector2.X,
                                vector2.Y, 1, 0, 0);
                            if (this.chaosState)
                            {
                                this.statLife -= this.statLifeMax2 / 7;
                                var damageSource = PlayerDeathReason.ByOther(13);
                                if (Main.rand.Next(2) == 0)
                                    damageSource = PlayerDeathReason.ByOther(this.Male ? 14 : 15);
                                if (this.statLife <= 0)
                                    this.KillMe(damageSource, 1.0, 0, false);
                                this.lifeRegenCount = 0;
                                this.lifeRegenTime = 0;
                            }

                            this.AddBuff(88, 360, true);
                        }
                    }
                }

                if (sItem.type == 29 && this.itemAnimation > 0 && (this.statLifeMax < 400 && this.itemTime == 0))
                {
                    this.itemTime = sItem.useTime;
                    this.statLifeMax += 20;
                    this.statLifeMax2 += 20;
                    this.statLife += 20;
                    if (Main.myPlayer == this.whoAmI)
                        this.HealEffect(20, true);
                    AchievementsHelper.HandleSpecialEvent(this, 0);
                }

                if (sItem.type == 1291 && this.itemAnimation > 0 &&
                    (this.statLifeMax >= 400 && this.statLifeMax < 500) && this.itemTime == 0)
                {
                    this.itemTime = sItem.useTime;
                    this.statLifeMax += 5;
                    this.statLifeMax2 += 5;
                    this.statLife += 5;
                    if (Main.myPlayer == this.whoAmI)
                        this.HealEffect(5, true);
                    AchievementsHelper.HandleSpecialEvent(this, 2);
                }

                if (sItem.type == 109 && this.itemAnimation > 0 && (this.statManaMax < 200 && this.itemTime == 0))
                {
                    this.itemTime = sItem.useTime;
                    this.statManaMax += 20;
                    this.statManaMax2 += 20;
                    this.statMana += 20;
                    if (Main.myPlayer == this.whoAmI)
                        this.ManaEffect(20);
                    AchievementsHelper.HandleSpecialEvent(this, 1);
                }

                if (sItem.type == 3335 && this.itemAnimation > 0 && (!this.extraAccessory && Main.expertMode) &&
                    this.itemTime == 0)
                {
                    this.itemTime = sItem.useTime;
                    this.extraAccessory = true;
                    NetMessage.SendData(4, -1, -1, (NetworkText) null, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                }

                this.PlaceThing();
            }

            if (sItem.type == 3542)
            {
                var vector2_1 = Main.OffsetsPlayerOnhand[this.bodyFrame.Y / 56] * 2f;
                if (this.direction != 1)
                    vector2_1.X = (float) this.bodyFrame.Width - vector2_1.X;
                if ((double) this.gravDir != 1.0)
                    vector2_1.Y = (float) this.bodyFrame.Height - vector2_1.Y;
                vector2_1 -= new Vector2((float) (this.bodyFrame.Width - this.width),
                                 (float) (this.bodyFrame.Height - 42)) / 2f;
                var vector2_2 = this.RotatedRelativePoint(this.position + vector2_1, true) - this.velocity;
                for (var index = 0; index < 4; ++index)
                {
                    var dust = Main.dust[
                        Dust.NewDust(this.Center, 0, 0, 242, (float) (this.direction * 2), 0.0f, 150, new Color(),
                            1.3f)];
                    dust.position = vector2_2;
                    dust.velocity *= 0.0f;
                    dust.noGravity = true;
                    dust.fadeIn = 1f;
                    dust.velocity += this.velocity;
                    if (Main.rand.Next(2) == 0)
                    {
                        dust.position += Utils.RandomVector2(Main.rand, -4f, 4f);
                        dust.scale += Main.rand.NextFloat();
                        if (Main.rand.Next(2) == 0)
                            dust.customData = (object) this;
                    }
                }
            }

            if ((sItem.damage >= 0 && sItem.type > 0 && !sItem.noMelee ||
                 (sItem.type == 1450 || sItem.type == 1991 || (sItem.type == 3183 || sItem.type == 3542)) ||
                 sItem.type == 3779) && this.itemAnimation > 0)
            {
                var flag2 = false;
                var r =
                    new Microsoft.Xna.Framework.Rectangle((int) this.itemLocation.X, (int) this.itemLocation.Y, 32, 32);
                if (!Main.dedServ)
                    r = new Microsoft.Xna.Framework.Rectangle((int) this.itemLocation.X, (int) this.itemLocation.Y,
                        Main.itemTexture[sItem.type].Width, Main.itemTexture[sItem.type].Height);
                r.Width = (int) ((double) r.Width * (double) sItem.scale);
                r.Height = (int) ((double) r.Height * (double) sItem.scale);
                if (this.direction == -1)
                    r.X -= r.Width;
                if ((double) this.gravDir == 1.0)
                    r.Y -= r.Height;
                if (sItem.useStyle == 1)
                {
                    if ((double) this.itemAnimation < (double) this.itemAnimationMax * 0.333)
                    {
                        if (this.direction == -1)
                            r.X -= (int) ((double) r.Width * 1.4 - (double) r.Width);
                        r.Width = (int) ((double) r.Width * 1.4);
                        r.Y += (int) ((double) r.Height * 0.5 * (double) this.gravDir);
                        r.Height = (int) ((double) r.Height * 1.1);
                    }
                    else if ((double) this.itemAnimation >= (double) this.itemAnimationMax * 0.666)
                    {
                        if (this.direction == 1)
                            r.X -= (int) ((double) r.Width * 1.2);
                        r.Width *= 2;
                        r.Y -= (int) (((double) r.Height * 1.4 - (double) r.Height) * (double) this.gravDir);
                        r.Height = (int) ((double) r.Height * 1.4);
                    }
                }
                else if (sItem.useStyle == 3)
                {
                    if ((double) this.itemAnimation > (double) this.itemAnimationMax * 0.666)
                    {
                        flag2 = true;
                    }
                    else
                    {
                        if (this.direction == -1)
                            r.X -= (int) ((double) r.Width * 1.4 - (double) r.Width);
                        r.Width = (int) ((double) r.Width * 1.4);
                        r.Y += (int) ((double) r.Height * 0.6);
                        r.Height = (int) ((double) r.Height * 0.6);
                    }
                }

                var gravDir = (double) this.gravDir;
                if (sItem.type == 1450 && Main.rand.Next(3) == 0)
                {
                    var index = -1;
                    var x = (float) (r.X + Main.rand.Next(r.Width));
                    var y = (float) (r.Y + Main.rand.Next(r.Height));
                    if (Main.rand.Next(500) == 0)
                        index = Gore.NewGore(new Vector2(x, y), new Vector2(), 415,
                            (float) Main.rand.Next(51, 101) * 0.01f);
                    else if (Main.rand.Next(250) == 0)
                        index = Gore.NewGore(new Vector2(x, y), new Vector2(), 414,
                            (float) Main.rand.Next(51, 101) * 0.01f);
                    else if (Main.rand.Next(80) == 0)
                        index = Gore.NewGore(new Vector2(x, y), new Vector2(), 413,
                            (float) Main.rand.Next(51, 101) * 0.01f);
                    else if (Main.rand.Next(10) == 0)
                        index = Gore.NewGore(new Vector2(x, y), new Vector2(), 412,
                            (float) Main.rand.Next(51, 101) * 0.01f);
                    else if (Main.rand.Next(3) == 0)
                        index = Gore.NewGore(new Vector2(x, y), new Vector2(), 411,
                            (float) Main.rand.Next(51, 101) * 0.01f);
                    if (index >= 0)
                    {
                        Main.gore[index].velocity.X += (float) (this.direction * 2);
                        Main.gore[index].velocity.Y *= 0.3f;
                    }
                }

                if (sItem.type == 3542)
                    flag2 = true;
                if (sItem.type == 3779)
                {
                    flag2 = true;
                    var vector2_1 = this.itemLocation + new Vector2((float) (this.direction * 30), -8f);
                    var itemAnimation = this.itemAnimation;
                    var num = this.itemAnimationMax - 2;
                    var vector2_2 = vector2_1 - this.position;
                    var amount = 0.0f;
                    while ((double) amount < 1.0)
                    {
                        var vector2_3 = Vector2.Lerp(this.oldPosition + vector2_2 + new Vector2(0.0f, this.gfxOffY),
                            vector2_1, amount);
                        var dust = Main.dust[
                            Dust.NewDust(vector2_1 - Vector2.One * 8f, 16, 16, 27, 0.0f, -2f, 0, new Color(), 1f)];
                        dust.noGravity = true;
                        dust.position = vector2_3;
                        dust.velocity = new Vector2(0.0f, (float) (-(double) this.gravDir * 2.0));
                        dust.scale = 1.2f;
                        dust.alpha = 200;
                        amount += 0.2f;
                    }
                }

                if (!flag2)
                {
                    if (sItem.type == 989 && Main.rand.Next(5) == 0)
                    {
                        int Type;
                        switch (Main.rand.Next(3))
                        {
                            case 0:
                                Type = 15;
                                break;
                            case 1:
                                Type = 57;
                                break;
                            default:
                                Type = 58;
                                break;
                        }

                        var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, Type,
                            (float) (this.direction * 2), 0.0f, 150, new Color(), 1.3f);
                        Main.dust[index].velocity *= 0.2f;
                    }

                    if (sItem.type == 2880 && Main.rand.Next(2) == 0)
                    {
                        var Type = Utils.SelectRandom<int>(Main.rand, new int[2]
                        {
                            226,
                            229
                        });
                        var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, Type,
                            (float) (this.direction * 2), 0.0f, 150, new Color(), 1f);
                        Main.dust[index].velocity *= 0.2f;
                        Main.dust[index].noGravity = true;
                    }

                    if ((sItem.type == 44 || sItem.type == 45 || (sItem.type == 46 || sItem.type == 103) ||
                         sItem.type == 104) && Main.rand.Next(15) == 0)
                        Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 14,
                            (float) (this.direction * 2), 0.0f, 150, new Color(), 1.3f);
                    if (sItem.type == 273 || sItem.type == 675)
                    {
                        if (Main.rand.Next(5) == 0)
                            Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 14,
                                (float) (this.direction * 2), 0.0f, 150, new Color(), 1.4f);
                        var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 27,
                            this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100,
                            new Color(), 1.2f);
                        Main.dust[index].noGravity = true;
                        Main.dust[index].velocity.X /= 2f;
                        Main.dust[index].velocity.Y /= 2f;
                    }

                    if (sItem.type == 723 && Main.rand.Next(2) == 0)
                    {
                        var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 64, 0.0f,
                            0.0f, 150, new Color(), 1.2f);
                        Main.dust[index].noGravity = true;
                    }

                    if (sItem.type == 65)
                    {
                        if (Main.rand.Next(5) == 0)
                            Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 58, 0.0f, 0.0f, 150,
                                new Color(), 1.2f);
                        if (Main.rand.Next(10) == 0)
                            Gore.NewGore(new Vector2((float) r.X, (float) r.Y), new Vector2(), Main.rand.Next(16, 18),
                                1f);
                    }

                    if (sItem.type == 3065)
                    {
                        var index1 = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 58, 0.0f,
                            0.0f, 150, new Color(), 1.2f);
                        Main.dust[index1].velocity *= 0.5f;
                        if (Main.rand.Next(8) == 0)
                        {
                            var index2 = Gore.NewGore(new Vector2((float) r.Center.X, (float) r.Center.Y),
                                new Vector2(), 16, 1f);
                            Main.gore[index2].velocity *= 0.5f;
                            Main.gore[index2].velocity += new Vector2((float) this.direction, 0.0f);
                        }
                    }

                    if (sItem.type == 190)
                    {
                        var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 40,
                            this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 0,
                            new Color(), 1.2f);
                        Main.dust[index].noGravity = true;
                    }
                    else if (sItem.type == 213)
                    {
                        var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 3,
                            this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 0,
                            new Color(), 1.2f);
                        Main.dust[index].noGravity = true;
                    }

                    if (sItem.type == 121)
                    {
                        for (var index1 = 0; index1 < 2; ++index1)
                        {
                            var index2 = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 6,
                                this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100,
                                new Color(), 2.5f);
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].velocity.X *= 2f;
                            Main.dust[index2].velocity.Y *= 2f;
                        }
                    }

                    if (sItem.type == 122 || sItem.type == 217)
                    {
                        var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 6,
                            this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100,
                            new Color(), 1.9f);
                        Main.dust[index].noGravity = true;
                    }

                    if (sItem.type == 155)
                    {
                        var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 172,
                            this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100,
                            new Color(), 0.9f);
                        Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.1f;
                    }

                    if (sItem.type == 676 && Main.rand.Next(3) == 0)
                    {
                        var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 67,
                            this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 90,
                            new Color(), 1.5f);
                        Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.2f;
                    }

                    if (sItem.type == 3063)
                    {
                        var index = Dust.NewDust(r.TopLeft(), r.Width, r.Height, 66, 0.0f, 0.0f, 150, Color.Transparent,
                            0.85f);
                        Main.dust[index].color = Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f);
                        Main.dust[index].noGravity = true;
                        Main.dust[index].velocity /= 2f;
                    }

                    if (sItem.type == 3823)
                    {
                        var dust = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, 6,
                            this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100,
                            Color.Transparent, 0.7f);
                        dust.noGravity = true;
                        dust.velocity *= 2f;
                        dust.fadeIn = 0.9f;
                    }

                    if (sItem.type == 724 && Main.rand.Next(5) == 0)
                    {
                        var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 67,
                            this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 90,
                            new Color(), 1.5f);
                        Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.2f;
                    }

                    if (sItem.type >= 795 && sItem.type <= 802 && Main.rand.Next(3) == 0)
                    {
                        var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 115,
                            this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 140,
                            new Color(), 1.5f);
                        Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.25f;
                    }

                    if (sItem.type == 367 || sItem.type == 368 || sItem.type == 674)
                    {
                        if (Main.rand.Next(3) == 0)
                        {
                            var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 57,
                                this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100,
                                new Color(), 1.1f);
                            Main.dust[index].noGravity = true;
                            Main.dust[index].velocity.X /= 2f;
                            Main.dust[index].velocity.Y /= 2f;
                            Main.dust[index].velocity.X += (float) (this.direction * 2);
                        }

                        if (Main.rand.Next(4) == 0)
                        {
                            var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 43, 0.0f,
                                0.0f, 254, new Color(), 0.3f);
                            Main.dust[index].velocity *= 0.0f;
                        }
                    }

                    if (sItem.type >= 198 && sItem.type <= 203 || sItem.type >= 3764 && sItem.type <= 3769)
                    {
                        var R = 0.5f;
                        var G = 0.5f;
                        var B = 0.5f;
                        if (sItem.type == 198 || sItem.type == 3764)
                        {
                            R *= 0.1f;
                            G *= 0.5f;
                            B *= 1.2f;
                        }
                        else if (sItem.type == 199 || sItem.type == 3765)
                        {
                            R *= 1f;
                            G *= 0.2f;
                            B *= 0.1f;
                        }
                        else if (sItem.type == 200 || sItem.type == 3766)
                        {
                            R *= 0.1f;
                            G *= 1f;
                            B *= 0.2f;
                        }
                        else if (sItem.type == 201 || sItem.type == 3767)
                        {
                            R *= 0.8f;
                            G *= 0.1f;
                            B *= 1f;
                        }
                        else if (sItem.type == 202 || sItem.type == 3768)
                        {
                            R *= 0.8f;
                            G *= 0.9f;
                            B *= 1f;
                        }
                        else if (sItem.type == 203 || sItem.type == 3769)
                        {
                            R *= 0.9f;
                            G *= 0.9f;
                            B *= 0.1f;
                        }

                        Lighting.AddLight(
                            (int) (((double) this.itemLocation.X + 6.0 + (double) this.velocity.X) / 16.0),
                            (int) (((double) this.itemLocation.Y - 14.0) / 16.0), R, G, B);
                    }

                    if (this.frostBurn && sItem.melee && (!sItem.noMelee && !sItem.noUseGraphic) &&
                        Main.rand.Next(2) == 0)
                    {
                        var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 135,
                            this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100,
                            new Color(), 2.5f);
                        Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.7f;
                        Main.dust[index].velocity.Y -= 0.5f;
                    }

                    if (sItem.melee && !sItem.noMelee && (!sItem.noUseGraphic && this.meleeEnchant > (byte) 0))
                    {
                        if (this.meleeEnchant == (byte) 1)
                        {
                            if (Main.rand.Next(3) == 0)
                            {
                                var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 171,
                                    0.0f, 0.0f, 100, new Color(), 1f);
                                Main.dust[index].noGravity = true;
                                Main.dust[index].fadeIn = 1.5f;
                                Main.dust[index].velocity *= 0.25f;
                            }
                        }
                        else if (this.meleeEnchant == (byte) 2)
                        {
                            if (Main.rand.Next(2) == 0)
                            {
                                var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 75,
                                    this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100,
                                    new Color(), 2.5f);
                                Main.dust[index].noGravity = true;
                                Main.dust[index].velocity *= 0.7f;
                                Main.dust[index].velocity.Y -= 0.5f;
                            }
                        }
                        else if (this.meleeEnchant == (byte) 3)
                        {
                            if (Main.rand.Next(2) == 0)
                            {
                                var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 6,
                                    this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100,
                                    new Color(), 2.5f);
                                Main.dust[index].noGravity = true;
                                Main.dust[index].velocity *= 0.7f;
                                Main.dust[index].velocity.Y -= 0.5f;
                            }
                        }
                        else if (this.meleeEnchant == (byte) 4)
                        {
                            if (Main.rand.Next(2) == 0)
                            {
                                var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 57,
                                    this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100,
                                    new Color(), 1.1f);
                                Main.dust[index].noGravity = true;
                                Main.dust[index].velocity.X /= 2f;
                                Main.dust[index].velocity.Y /= 2f;
                            }
                        }
                        else if (this.meleeEnchant == (byte) 5)
                        {
                            if (Main.rand.Next(2) == 0)
                            {
                                var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 169,
                                    0.0f, 0.0f, 100, new Color(), 1f);
                                Main.dust[index].velocity.X += (float) this.direction;
                                Main.dust[index].velocity.Y += 0.2f;
                                Main.dust[index].noGravity = true;
                            }
                        }
                        else if (this.meleeEnchant == (byte) 6)
                        {
                            if (Main.rand.Next(2) == 0)
                            {
                                var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 135,
                                    0.0f, 0.0f, 100, new Color(), 1f);
                                Main.dust[index].velocity.X += (float) this.direction;
                                Main.dust[index].velocity.Y += 0.2f;
                                Main.dust[index].noGravity = true;
                            }
                        }
                        else if (this.meleeEnchant == (byte) 7)
                        {
                            if (Main.rand.Next(20) == 0)
                            {
                                var Type = Main.rand.Next(139, 143);
                                var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, Type,
                                    this.velocity.X, this.velocity.Y, 0, new Color(), 1.2f);
                                Main.dust[index].velocity.X *=
                                    (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                                Main.dust[index].velocity.Y *=
                                    (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                                Main.dust[index].velocity.X += (float) Main.rand.Next(-50, 51) * 0.05f;
                                Main.dust[index].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.05f;
                                Main.dust[index].scale *=
                                    (float) (1.0 + (double) Main.rand.Next(-30, 31) * 0.00999999977648258);
                            }

                            if (Main.rand.Next(40) == 0)
                            {
                                var Type = Main.rand.Next(276, 283);
                                var index = Gore.NewGore(new Vector2((float) r.X, (float) r.Y), this.velocity, Type,
                                    1f);
                                Main.gore[index].velocity.X *=
                                    (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                                Main.gore[index].velocity.Y *=
                                    (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                                Main.gore[index].scale *=
                                    (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.00999999977648258);
                                Main.gore[index].velocity.X += (float) Main.rand.Next(-50, 51) * 0.05f;
                                Main.gore[index].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.05f;
                            }
                        }
                        else if (this.meleeEnchant == (byte) 8 && Main.rand.Next(4) == 0)
                        {
                            var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 46, 0.0f,
                                0.0f, 100, new Color(), 1f);
                            Main.dust[index].noGravity = true;
                            Main.dust[index].fadeIn = 1.5f;
                            Main.dust[index].velocity *= 0.25f;
                        }
                    }

                    if (this.magmaStone && sItem.melee && (!sItem.noMelee && !sItem.noUseGraphic) &&
                        Main.rand.Next(3) != 0)
                    {
                        var index = Dust.NewDust(new Vector2((float) r.X, (float) r.Y), r.Width, r.Height, 6,
                            this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100,
                            new Color(), 2.5f);
                        Main.dust[index].noGravity = true;
                        Main.dust[index].velocity.X *= 2f;
                        Main.dust[index].velocity.Y *= 2f;
                    }

                    if (Main.myPlayer == i && (sItem.type == 1991 || sItem.type == 3183))
                    {
                        for (var i1 = 0; i1 < 200; ++i1)
                        {
                            if (Main.npc[i1].active && Main.npc[i1].catchItem > (short) 0)
                            {
                                var rectangle =
                                    new Microsoft.Xna.Framework.Rectangle((int) Main.npc[i1].position.X,
                                        (int) Main.npc[i1].position.Y, Main.npc[i1].width, Main.npc[i1].height);
                                if (r.Intersects(rectangle) &&
                                    (sItem.type == 3183 || Main.npc[i1].noTileCollide ||
                                     this.CanHit((Entity) Main.npc[i1])))
                                    NPC.CatchNPC(i1, i);
                            }
                        }
                    }

                    if (Main.myPlayer == i && (sItem.damage > 0 || sItem.type == 3183))
                    {
                        var num1 = sItem.damage;
                        if (sItem.melee)
                            num1 = (int) ((double) sItem.damage * (double) this.meleeDamage);
                        if (sItem.ranged)
                            num1 = (int) ((double) sItem.damage * (double) this.rangedDamage);
                        if (sItem.magic)
                            num1 = (int) ((double) sItem.damage * (double) this.magicDamage);
                        if (sItem.summon)
                            num1 = (int) ((double) sItem.damage * (double) this.minionDamage);
                        if (sItem.thrown)
                            num1 = (int) ((double) sItem.damage * (double) this.thrownDamage);
                        var knockBack = sItem.knockBack;
                        var num2 = 1f;
                        if (this.kbGlove)
                            ++num2;
                        if (this.kbBuff)
                            num2 += 0.5f;
                        var num3 = knockBack * num2;
                        if (this.inventory[this.selectedItem].type == 3106)
                            num3 += num3 * (1f - this.stealth);
                        var ushortList = (List<ushort>) null;
                        if (sItem.type == 213)
                            ushortList = new List<ushort>((IEnumerable<ushort>) new ushort[17]
                            {
                                (ushort) 3,
                                (ushort) 24,
                                (ushort) 52,
                                (ushort) 61,
                                (ushort) 62,
                                (ushort) 71,
                                (ushort) 73,
                                (ushort) 74,
                                (ushort) 82,
                                (ushort) 83,
                                (ushort) 84,
                                (ushort) 110,
                                (ushort) 113,
                                (ushort) 115,
                                (ushort) 184,
                                (ushort) 205,
                                (ushort) 201
                            });
                        var num4 = r.X / 16;
                        var num5 = (r.X + r.Width) / 16 + 1;
                        var num6 = r.Y / 16;
                        var num7 = (r.Y + r.Height) / 16 + 1;
                        for (var index1 = num4; index1 < num5; ++index1)
                        {
                            for (var index2 = num6; index2 < num7; ++index2)
                            {
                                if (Main.tile[index1, index2] != null &&
                                    Main.tileCut[(int) Main.tile[index1, index2].type] &&
                                    (ushortList == null || !ushortList.Contains(Main.tile[index1, index2].type)) &&
                                    WorldGen.CanCutTile(index1, index2, TileCuttingContext.AttackMelee))
                                {
                                    if (sItem.type == 1786)
                                    {
                                        var type = (int) Main.tile[index1, index2].type;
                                        WorldGen.KillTile(index1, index2, false, false, false);
                                        if (!Main.tile[index1, index2].active())
                                        {
                                            var Stack = 0;
                                            if (type == 3 || type == 24 || (type == 61 || type == 110) || type == 201)
                                                Stack = Main.rand.Next(1, 3);
                                            if (type == 73 || type == 74 || type == 113)
                                                Stack = Main.rand.Next(2, 5);
                                            if (Stack > 0)
                                            {
                                                var number = Item.NewItem(index1 * 16, index2 * 16, 16, 16, 1727, Stack,
                                                    false, 0, false, false);
                                                if (Main.netMode == 1)
                                                    NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f,
                                                        0.0f, 0.0f, 0, 0, 0);
                                            }
                                        }

                                        if (Main.netMode == 1)
                                            NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) index1,
                                                (float) index2, 0.0f, 0, 0, 0);
                                    }
                                    else
                                    {
                                        WorldGen.KillTile(index1, index2, false, false, false);
                                        if (Main.netMode == 1)
                                            NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) index1,
                                                (float) index2, 0.0f, 0, 0, 0);
                                    }
                                }
                            }
                        }

                        if (sItem.type != 3183)
                        {
                            for (var index1 = 0; index1 < 200; ++index1)
                            {
                                if (Main.npc[index1].active && Main.npc[index1].immune[i] == 0 && this.attackCD == 0)
                                {
                                    if (!Main.npc[index1].dontTakeDamage)
                                    {
                                        if (!Main.npc[index1].friendly ||
                                            Main.npc[index1].type == 22 && this.killGuide ||
                                            Main.npc[index1].type == 54 && this.killClothier)
                                        {
                                            var rectangle =
                                                new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index1].position.X,
                                                    (int) Main.npc[index1].position.Y, Main.npc[index1].width,
                                                    Main.npc[index1].height);
                                            if (r.Intersects(rectangle) &&
                                                (Main.npc[index1].noTileCollide ||
                                                 this.CanHit((Entity) Main.npc[index1])))
                                            {
                                                var crit = false;
                                                if (sItem.melee && Main.rand.Next(1, 101) <= this.meleeCrit)
                                                    crit = true;
                                                if (sItem.ranged && Main.rand.Next(1, 101) <= this.rangedCrit)
                                                    crit = true;
                                                if (sItem.magic && Main.rand.Next(1, 101) <= this.magicCrit)
                                                    crit = true;
                                                if (sItem.thrown && Main.rand.Next(1, 101) <= this.thrownCrit)
                                                    crit = true;
                                                var banner = Item.NPCtoBanner(Main.npc[index1].BannerID());
                                                if (banner > 0 && this.NPCBannerBuff[banner])
                                                    num1 = !Main.expertMode
                                                        ? (int) ((double) num1 * (double) ItemID.Sets
                                                                     .BannerStrength[Item.BannerToItem(banner)]
                                                                     .NormalDamageDealt)
                                                        : (int) ((double) num1 * (double) ItemID.Sets
                                                                     .BannerStrength[Item.BannerToItem(banner)]
                                                                     .ExpertDamageDealt);
                                                if (this.parryDamageBuff && sItem.melee)
                                                {
                                                    num1 *= 5;
                                                    this.parryDamageBuff = false;
                                                    this.ClearBuff(198);
                                                }

                                                var num8 = Main.DamageVar((float) num1);
                                                this.StatusNPC(sItem.type, index1);
                                                this.OnHit(Main.npc[index1].Center.X, Main.npc[index1].Center.Y,
                                                    (Entity) Main.npc[index1]);
                                                if (this.armorPenetration > 0)
                                                    num8 += Main.npc[index1]
                                                        .checkArmorPenetration(this.armorPenetration);
                                                var num9 = (int) Main.npc[index1].StrikeNPC(num8, num3, this.direction,
                                                    crit, false, false);
                                                if (this.inventory[this.selectedItem].type == 3211)
                                                {
                                                    var vector2_1 = new Vector2(
                                                        (float) (this.direction * 100 + Main.rand.Next(-25, 26)),
                                                        (float) Main.rand.Next(-75, 76));
                                                    vector2_1.Normalize();
                                                    vector2_1 *= (float) Main.rand.Next(30, 41) * 0.1f;
                                                    var vector2_2 = new Vector2(
                                                        (float) (r.X + Main.rand.Next(r.Width)),
                                                        (float) (r.Y + Main.rand.Next(r.Height)));
                                                    vector2_2 = (vector2_2 + Main.npc[index1].Center * 2f) / 3f;
                                                    Projectile.NewProjectile(vector2_2.X, vector2_2.Y, vector2_1.X,
                                                        vector2_1.Y, 524, (int) ((double) num1 * 0.7), num3 * 0.7f,
                                                        this.whoAmI, 0.0f, 0.0f);
                                                }

                                                var flag3 = !Main.npc[index1].immortal;
                                                if (this.beetleOffense && flag3)
                                                {
                                                    this.beetleCounter += (float) num9;
                                                    this.beetleCountdown = 0;
                                                }

                                                if (sItem.type == 1826 &&
                                                    ((double) Main.npc[index1].value > 0.0 ||
                                                     Main.npc[index1].damage > 0 && !Main.npc[index1].friendly))
                                                    this.pumpkinSword(index1, (int) ((double) num1 * 1.5), num3);
                                                if (this.meleeEnchant == (byte) 7)
                                                    Projectile.NewProjectile(Main.npc[index1].Center.X,
                                                        Main.npc[index1].Center.Y, Main.npc[index1].velocity.X,
                                                        Main.npc[index1].velocity.Y, 289, 0, 0.0f, this.whoAmI, 0.0f,
                                                        0.0f);
                                                if (this.inventory[this.selectedItem].type == 3106)
                                                {
                                                    this.stealth = 1f;
                                                    if (Main.netMode == 1)
                                                        NetMessage.SendData(84, -1, -1, (NetworkText) null, this.whoAmI,
                                                            0.0f, 0.0f, 0.0f, 0, 0, 0);
                                                }

                                                if (sItem.type == 1123 && flag3)
                                                {
                                                    var num10 = Main.rand.Next(1, 4);
                                                    if (this.strongBees && Main.rand.Next(3) == 0)
                                                        ++num10;
                                                    for (var index2 = 0; index2 < num10; ++index2)
                                                    {
                                                        var num11 =
                                                            (float) (this.direction * 2) +
                                                            (float) Main.rand.Next(-35, 36) * 0.02f;
                                                        var num12 = (float) Main.rand.Next(-35, 36) * 0.02f;
                                                        var SpeedX = num11 * 0.2f;
                                                        var SpeedY = num12 * 0.2f;
                                                        Projectile.NewProjectile((float) (r.X + r.Width / 2),
                                                            (float) (r.Y + r.Height / 2), SpeedX, SpeedY,
                                                            this.beeType(), this.beeDamage(num8 / 3), this.beeKB(0.0f),
                                                            i, 0.0f, 0.0f);
                                                    }
                                                }

                                                if ((double) Main.npc[index1].value > 0.0 && this.coins &&
                                                    Main.rand.Next(5) == 0)
                                                {
                                                    var Type = 71;
                                                    if (Main.rand.Next(10) == 0)
                                                        Type = 72;
                                                    if (Main.rand.Next(100) == 0)
                                                        Type = 73;
                                                    var number = Item.NewItem((int) Main.npc[index1].position.X,
                                                        (int) Main.npc[index1].position.Y, Main.npc[index1].width,
                                                        Main.npc[index1].height, Type, 1, false, 0, false, false);
                                                    Main.item[number].stack = Main.rand.Next(1, 11);
                                                    Main.item[number].velocity.Y =
                                                        (float) Main.rand.Next(-20, 1) * 0.2f;
                                                    Main.item[number].velocity.X =
                                                        (float) Main.rand.Next(10, 31) * 0.2f * (float) this.direction;
                                                    if (Main.netMode == 1)
                                                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number,
                                                            0.0f, 0.0f, 0.0f, 0, 0, 0);
                                                }

                                                var num13 = Item.NPCtoBanner(Main.npc[index1].BannerID());
                                                if (num13 >= 0)
                                                    this.lastCreatureHit = num13;
                                                if (Main.netMode != 0)
                                                {
                                                    if (crit)
                                                        NetMessage.SendData(28, -1, -1, (NetworkText) null, index1,
                                                            (float) num8, num3, (float) this.direction, 1, 0, 0);
                                                    else
                                                        NetMessage.SendData(28, -1, -1, (NetworkText) null, index1,
                                                            (float) num8, num3, (float) this.direction, 0, 0, 0);
                                                }

                                                if (this.accDreamCatcher)
                                                    this.addDPS(num8);
                                                Main.npc[index1].immune[i] = this.itemAnimation;
                                                this.attackCD = (int) ((double) this.itemAnimationMax * 0.33);
                                            }
                                        }
                                    }
                                    else if (Main.npc[index1].type == 63 || Main.npc[index1].type == 64 ||
                                             (Main.npc[index1].type == 103 || Main.npc[index1].type == 242))
                                    {
                                        var rectangle =
                                            new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index1].position.X,
                                                (int) Main.npc[index1].position.Y, Main.npc[index1].width,
                                                Main.npc[index1].height);
                                        if (r.Intersects(rectangle) &&
                                            (Main.npc[index1].noTileCollide || this.CanHit((Entity) Main.npc[index1])))
                                        {
                                            this.Hurt(PlayerDeathReason.LegacyDefault(),
                                                (int) ((double) Main.npc[index1].damage * 1.3), -this.direction, false,
                                                false, false, -1);
                                            Main.npc[index1].immune[i] = this.itemAnimation;
                                            this.attackCD = (int) ((double) this.itemAnimationMax * 0.33);
                                        }
                                    }
                                }
                            }

                            if (this.hostile)
                            {
                                for (var index1 = 0; index1 < (int) byte.MaxValue; ++index1)
                                {
                                    if (index1 != i && Main.player[index1].active &&
                                        (Main.player[index1].hostile && !Main.player[index1].immune) &&
                                        !Main.player[index1].dead &&
                                        (Main.player[i].team == 0 || Main.player[i].team != Main.player[index1].team))
                                    {
                                        var rectangle =
                                            new Microsoft.Xna.Framework.Rectangle((int) Main.player[index1].position.X,
                                                (int) Main.player[index1].position.Y, Main.player[index1].width,
                                                Main.player[index1].height);
                                        if (r.Intersects(rectangle) && this.CanHit((Entity) Main.player[index1]))
                                        {
                                            var flag3 = false;
                                            if (Main.rand.Next(1, 101) <= 10)
                                                flag3 = true;
                                            var num8 = Main.DamageVar((float) num1);
                                            this.StatusPvP(sItem.type, index1);
                                            this.OnHit(Main.player[index1].Center.X, Main.player[index1].Center.Y,
                                                (Entity) Main.player[index1]);
                                            var playerDeathReason =
                                                PlayerDeathReason.ByPlayer(this.whoAmI);
                                            var num9 = (int) Main.player[index1].Hurt(playerDeathReason, num8,
                                                this.direction, true, false, flag3, -1);
                                            if (this.inventory[this.selectedItem].type == 3211)
                                            {
                                                var vector2_1 = new Vector2(
                                                    (float) (this.direction * 100 + Main.rand.Next(-25, 26)),
                                                    (float) Main.rand.Next(-75, 76));
                                                vector2_1.Normalize();
                                                vector2_1 *= (float) Main.rand.Next(30, 41) * 0.1f;
                                                var vector2_2 = new Vector2((float) (r.X + Main.rand.Next(r.Width)),
                                                    (float) (r.Y + Main.rand.Next(r.Height)));
                                                vector2_2 = (vector2_2 + Main.player[index1].Center * 2f) / 3f;
                                                Projectile.NewProjectile(vector2_2.X, vector2_2.Y, vector2_1.X,
                                                    vector2_1.Y, 524, (int) ((double) num1 * 0.7), num3 * 0.7f,
                                                    this.whoAmI, 0.0f, 0.0f);
                                            }

                                            if (this.beetleOffense)
                                            {
                                                this.beetleCounter += (float) num9;
                                                this.beetleCountdown = 0;
                                            }

                                            if (this.meleeEnchant == (byte) 7)
                                                Projectile.NewProjectile(Main.player[index1].Center.X,
                                                    Main.player[index1].Center.Y, Main.player[index1].velocity.X,
                                                    Main.player[index1].velocity.Y, 289, 0, 0.0f, this.whoAmI, 0.0f,
                                                    0.0f);
                                            if (sItem.type == 1123)
                                            {
                                                var num10 = Main.rand.Next(1, 4);
                                                if (this.strongBees && Main.rand.Next(3) == 0)
                                                    ++num10;
                                                for (var index2 = 0; index2 < num10; ++index2)
                                                {
                                                    var num11 =
                                                        (float) (this.direction * 2) +
                                                        (float) Main.rand.Next(-35, 36) * 0.02f;
                                                    var num12 = (float) Main.rand.Next(-35, 36) * 0.02f;
                                                    var SpeedX = num11 * 0.2f;
                                                    var SpeedY = num12 * 0.2f;
                                                    Projectile.NewProjectile((float) (r.X + r.Width / 2),
                                                        (float) (r.Y + r.Height / 2), SpeedX, SpeedY, this.beeType(),
                                                        this.beeDamage(num8 / 3), this.beeKB(0.0f), i, 0.0f, 0.0f);
                                                }
                                            }

                                            if (this.inventory[this.selectedItem].type == 3106)
                                            {
                                                this.stealth = 1f;
                                                if (Main.netMode == 1)
                                                    NetMessage.SendData(84, -1, -1, (NetworkText) null, this.whoAmI,
                                                        0.0f, 0.0f, 0.0f, 0, 0, 0);
                                            }

                                            if (sItem.type == 1826 && (double) Main.npc[index1].value > 0.0)
                                                this.pumpkinSword(index1, (int) ((double) num1 * 1.5), num3);
                                            if (Main.netMode != 0)
                                                NetMessage.SendPlayerHurt(index1, playerDeathReason, num8,
                                                    this.direction, flag3, true, -1, -1, -1);
                                            this.attackCD = (int) ((double) this.itemAnimationMax * 0.33);
                                        }
                                    }
                                }
                            }

                            if (sItem.type == 787 &&
                                (this.itemAnimation == (int) ((double) this.itemAnimationMax * 0.1) ||
                                 this.itemAnimation == (int) ((double) this.itemAnimationMax * 0.3) ||
                                 (this.itemAnimation == (int) ((double) this.itemAnimationMax * 0.5) ||
                                  this.itemAnimation == (int) ((double) this.itemAnimationMax * 0.7)) ||
                                 this.itemAnimation == (int) ((double) this.itemAnimationMax * 0.9)))
                            {
                                var num8 = 0.0f;
                                var num9 = 0.0f;
                                var num10 = 0.0f;
                                var num11 = 0.0f;
                                if (this.itemAnimation == (int) ((double) this.itemAnimationMax * 0.9))
                                    num8 = -7f;
                                if (this.itemAnimation == (int) ((double) this.itemAnimationMax * 0.7))
                                {
                                    num8 = -6f;
                                    num9 = 2f;
                                }

                                if (this.itemAnimation == (int) ((double) this.itemAnimationMax * 0.5))
                                {
                                    num8 = -4f;
                                    num9 = 4f;
                                }

                                if (this.itemAnimation == (int) ((double) this.itemAnimationMax * 0.3))
                                {
                                    num8 = -2f;
                                    num9 = 6f;
                                }

                                if (this.itemAnimation == (int) ((double) this.itemAnimationMax * 0.1))
                                    num9 = 7f;
                                if (this.itemAnimation == (int) ((double) this.itemAnimationMax * 0.7))
                                    num11 = 26f;
                                if (this.itemAnimation == (int) ((double) this.itemAnimationMax * 0.3))
                                {
                                    num11 -= 4f;
                                    num10 -= 20f;
                                }

                                if (this.itemAnimation == (int) ((double) this.itemAnimationMax * 0.1))
                                    num10 += 6f;
                                if (this.direction == -1)
                                {
                                    if (this.itemAnimation == (int) ((double) this.itemAnimationMax * 0.9))
                                        num11 -= 8f;
                                    if (this.itemAnimation == (int) ((double) this.itemAnimationMax * 0.7))
                                        num11 -= 6f;
                                }

                                var num12 = num8 * 1.5f;
                                var num13 = num9 * 1.5f;
                                var num14 = num11 * (float) this.direction;
                                var num15 = num10 * this.gravDir;
                                Projectile.NewProjectile((float) (r.X + r.Width / 2) + num14,
                                    (float) (r.Y + r.Height / 2) + num15, (float) this.direction * num13,
                                    num12 * this.gravDir, 131, num1 / 2, 0.0f, i, 0.0f, 0.0f);
                            }
                        }
                    }
                }
            }

            if (this.itemTime == 0 && this.itemAnimation > 0)
            {
                if (sItem.hairDye >= (short) 0)
                {
                    this.itemTime = sItem.useTime;
                    if (this.whoAmI == Main.myPlayer)
                    {
                        this.hairDye = (byte) sItem.hairDye;
                        NetMessage.SendData(4, -1, -1, (NetworkText) null, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    }
                }

                if (sItem.healLife > 0)
                {
                    this.statLife += sItem.healLife;
                    this.itemTime = sItem.useTime;
                    if (Main.myPlayer == this.whoAmI)
                        this.HealEffect(sItem.healLife, true);
                }

                if (sItem.healMana > 0)
                {
                    this.statMana += sItem.healMana;
                    this.itemTime = sItem.useTime;
                    if (Main.myPlayer == this.whoAmI)
                    {
                        this.AddBuff(94, Player.manaSickTime, true);
                        this.ManaEffect(sItem.healMana);
                    }
                }

                if (sItem.buffType > 0)
                {
                    if (this.whoAmI == Main.myPlayer && sItem.buffType != 90 && sItem.buffType != 27)
                        this.AddBuff(sItem.buffType, sItem.buffTime, true);
                    this.itemTime = sItem.useTime;
                }

                if (sItem.type == 678)
                {
                    this.itemTime = sItem.useTime;
                    if (this.whoAmI == Main.myPlayer)
                    {
                        this.AddBuff(20, 216000, true);
                        this.AddBuff(22, 216000, true);
                        this.AddBuff(23, 216000, true);
                        this.AddBuff(24, 216000, true);
                        this.AddBuff(30, 216000, true);
                        this.AddBuff(31, 216000, true);
                        this.AddBuff(32, 216000, true);
                        this.AddBuff(33, 216000, true);
                        this.AddBuff(35, 216000, true);
                        this.AddBuff(36, 216000, true);
                        this.AddBuff(68, 216000, true);
                    }
                }
            }

            if (this.whoAmI == Main.myPlayer)
            {
                if (this.itemTime == 0 && this.itemAnimation > 0 &&
                    (sItem.type == 361 && Main.CanStartInvasion(1, true)))
                {
                    this.itemTime = sItem.useTime;
                    Main.PlaySound(15, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
                    if (Main.netMode != 1)
                    {
                        if (Main.invasionType == 0)
                        {
                            Main.invasionDelay = 0;
                            Main.StartInvasion(1);
                        }
                    }
                    else
                        NetMessage.SendData(61, -1, -1, (NetworkText) null, this.whoAmI, -1f, 0.0f, 0.0f, 0, 0, 0);
                }

                if (this.itemTime == 0 && this.itemAnimation > 0 &&
                    (sItem.type == 602 && Main.CanStartInvasion(2, true)))
                {
                    this.itemTime = sItem.useTime;
                    Main.PlaySound(15, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
                    if (Main.netMode != 1)
                    {
                        if (Main.invasionType == 0)
                        {
                            Main.invasionDelay = 0;
                            Main.StartInvasion(2);
                        }
                    }
                    else
                        NetMessage.SendData(61, -1, -1, (NetworkText) null, this.whoAmI, -2f, 0.0f, 0.0f, 0, 0, 0);
                }

                if (this.itemTime == 0 && this.itemAnimation > 0 &&
                    (sItem.type == 1315 && Main.CanStartInvasion(3, true)))
                {
                    this.itemTime = sItem.useTime;
                    Main.PlaySound(15, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
                    if (Main.netMode != 1)
                    {
                        if (Main.invasionType == 0)
                        {
                            Main.invasionDelay = 0;
                            Main.StartInvasion(3);
                        }
                    }
                    else
                        NetMessage.SendData(61, -1, -1, (NetworkText) null, this.whoAmI, -3f, 0.0f, 0.0f, 0, 0, 0);
                }

                if (this.itemTime == 0 && this.itemAnimation > 0 && (sItem.type == 1844 && !Main.dayTime) &&
                    (!Main.pumpkinMoon && !Main.snowMoon && !DD2Event.Ongoing))
                {
                    this.itemTime = sItem.useTime;
                    Main.PlaySound(15, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
                    if (Main.netMode != 1)
                    {
                        Main.NewText(Lang.misc[31].Value, (byte) 50, byte.MaxValue, (byte) 130, false);
                        Main.startPumpkinMoon();
                    }
                    else
                        NetMessage.SendData(61, -1, -1, (NetworkText) null, this.whoAmI, -4f, 0.0f, 0.0f, 0, 0, 0);
                }

                if (this.itemTime == 0 && this.itemAnimation > 0 && (sItem.type == 2767 && Main.dayTime) &&
                    !Main.eclipse)
                {
                    Main.PlaySound(15, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
                    this.itemTime = sItem.useTime;
                    if (Main.netMode == 0)
                    {
                        Main.eclipse = true;
                        Main.NewText(Lang.misc[20].Value, (byte) 50, byte.MaxValue, (byte) 130, false);
                    }
                    else
                        NetMessage.SendData(61, -1, -1, (NetworkText) null, this.whoAmI, -6f, 0.0f, 0.0f, 0, 0, 0);
                }

                if (this.itemTime == 0 && this.itemAnimation > 0 && (sItem.type == 3601 && NPC.downedGolemBoss) &&
                    (Main.hardMode && !NPC.AnyDanger() && !NPC.AnyoneNearCultists()))
                {
                    Main.PlaySound(15, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
                    this.itemTime = sItem.useTime;
                    if (Main.netMode == 0)
                        WorldGen.StartImpendingDoom();
                    else
                        NetMessage.SendData(61, -1, -1, (NetworkText) null, this.whoAmI, -8f, 0.0f, 0.0f, 0, 0, 0);
                }

                if (this.itemTime == 0 && this.itemAnimation > 0 && (sItem.type == 1958 && !Main.dayTime) &&
                    (!Main.pumpkinMoon && !Main.snowMoon && !DD2Event.Ongoing))
                {
                    this.itemTime = sItem.useTime;
                    Main.PlaySound(15, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
                    if (Main.netMode != 1)
                    {
                        Main.NewText(Lang.misc[34].Value, (byte) 50, byte.MaxValue, (byte) 130, false);
                        Main.startSnowMoon();
                    }
                    else
                        NetMessage.SendData(61, -1, -1, (NetworkText) null, this.whoAmI, -5f, 0.0f, 0.0f, 0, 0, 0);
                }

                if (this.itemTime == 0 && this.itemAnimation > 0 &&
                    (sItem.makeNPC > (short) 0 && this.controlUseItem) &&
                    ((double) this.position.X / 16.0 - (double) Player.tileRangeX - (double) sItem.tileBoost <=
                     (double) Player.tileTargetX &&
                     ((double) this.position.X + (double) this.width) / 16.0 + (double) Player.tileRangeX +
                     (double) sItem.tileBoost - 1.0 >= (double) Player.tileTargetX &&
                     ((double) this.position.Y / 16.0 - (double) Player.tileRangeY - (double) sItem.tileBoost <=
                      (double) Player.tileTargetY &&
                      ((double) this.position.Y + (double) this.height) / 16.0 + (double) Player.tileRangeY +
                      (double) sItem.tileBoost - 2.0 >= (double) Player.tileTargetY)))
                {
                    var x = Main.mouseX + (int) Main.screenPosition.X;
                    var y = Main.mouseY + (int) Main.screenPosition.Y;
                    this.itemTime = sItem.useTime;
                    if (!WorldGen.SolidTile(x / 16, y / 16))
                        NPC.ReleaseNPC(x, y, (int) sItem.makeNPC, sItem.placeStyle, this.whoAmI);
                }

                if (this.itemTime == 0 && this.itemAnimation > 0 &&
                    (sItem.type == 43 || sItem.type == 70 || (sItem.type == 544 || sItem.type == 556) ||
                     (sItem.type == 557 || sItem.type == 560 || (sItem.type == 1133 || sItem.type == 1331))) &&
                    this.SummonItemCheck())
                {
                    if (sItem.type == 560)
                    {
                        this.itemTime = sItem.useTime;
                        Main.PlaySound(15, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
                        if (Main.netMode != 1)
                            NPC.SpawnOnPlayer(i, 50);
                        else
                            NetMessage.SendData(61, -1, -1, (NetworkText) null, this.whoAmI, 50f, 0.0f, 0.0f, 0, 0, 0);
                    }
                    else if (sItem.type == 43)
                    {
                        if (!Main.dayTime)
                        {
                            this.itemTime = sItem.useTime;
                            Main.PlaySound(15, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
                            if (Main.netMode != 1)
                                NPC.SpawnOnPlayer(i, 4);
                            else
                                NetMessage.SendData(61, -1, -1, (NetworkText) null, this.whoAmI, 4f, 0.0f, 0.0f, 0, 0,
                                    0);
                        }
                    }
                    else if (sItem.type == 70)
                    {
                        if (this.ZoneCorrupt)
                        {
                            this.itemTime = sItem.useTime;
                            Main.PlaySound(15, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
                            if (Main.netMode != 1)
                                NPC.SpawnOnPlayer(i, 13);
                            else
                                NetMessage.SendData(61, -1, -1, (NetworkText) null, this.whoAmI, 13f, 0.0f, 0.0f, 0, 0,
                                    0);
                        }
                    }
                    else if (sItem.type == 544)
                    {
                        if (!Main.dayTime)
                        {
                            this.itemTime = sItem.useTime;
                            Main.PlaySound(15, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
                            if (Main.netMode != 1)
                            {
                                NPC.SpawnOnPlayer(i, 125);
                                NPC.SpawnOnPlayer(i, 126);
                            }
                            else
                            {
                                NetMessage.SendData(61, -1, -1, (NetworkText) null, this.whoAmI, 125f, 0.0f, 0.0f, 0, 0,
                                    0);
                                NetMessage.SendData(61, -1, -1, (NetworkText) null, this.whoAmI, 126f, 0.0f, 0.0f, 0, 0,
                                    0);
                            }
                        }
                    }
                    else if (sItem.type == 556)
                    {
                        if (!Main.dayTime)
                        {
                            this.itemTime = sItem.useTime;
                            Main.PlaySound(15, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
                            if (Main.netMode != 1)
                                NPC.SpawnOnPlayer(i, 134);
                            else
                                NetMessage.SendData(61, -1, -1, (NetworkText) null, this.whoAmI, 134f, 0.0f, 0.0f, 0, 0,
                                    0);
                        }
                    }
                    else if (sItem.type == 557)
                    {
                        if (!Main.dayTime)
                        {
                            this.itemTime = sItem.useTime;
                            Main.PlaySound(15, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
                            if (Main.netMode != 1)
                                NPC.SpawnOnPlayer(i, (int) sbyte.MaxValue);
                            else
                                NetMessage.SendData(61, -1, -1, (NetworkText) null, this.whoAmI, (float) sbyte.MaxValue,
                                    0.0f, 0.0f, 0, 0, 0);
                        }
                    }
                    else if (sItem.type == 1133)
                    {
                        this.itemTime = sItem.useTime;
                        Main.PlaySound(15, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
                        if (Main.netMode != 1)
                            NPC.SpawnOnPlayer(i, 222);
                        else
                            NetMessage.SendData(61, -1, -1, (NetworkText) null, this.whoAmI, 222f, 0.0f, 0.0f, 0, 0, 0);
                    }
                    else if (sItem.type == 1331 && this.ZoneCrimson)
                    {
                        this.itemTime = sItem.useTime;
                        Main.PlaySound(15, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
                        if (Main.netMode != 1)
                            NPC.SpawnOnPlayer(i, 266);
                        else
                            NetMessage.SendData(61, -1, -1, (NetworkText) null, this.whoAmI, 266f, 0.0f, 0.0f, 0, 0, 0);
                    }
                }
            }

            if ((sItem.type == 50 || sItem.type == 3124 || sItem.type == 3199) && this.itemAnimation > 0)
            {
                if (Main.rand.Next(2) == 0)
                    Dust.NewDust(this.position, this.width, this.height, 15, 0.0f, 0.0f, 150, new Color(), 1.1f);
                if (this.itemTime == 0)
                    this.itemTime = sItem.useTime;
                else if (this.itemTime == sItem.useTime / 2)
                {
                    for (var index = 0; index < 70; ++index)
                        Dust.NewDust(this.position, this.width, this.height, 15, this.velocity.X * 0.5f,
                            this.velocity.Y * 0.5f, 150, new Color(), 1.5f);
                    this.grappling[0] = -1;
                    this.grapCount = 0;
                    for (var index = 0; index < 1000; ++index)
                    {
                        if (Main.projectile[index].active && Main.projectile[index].owner == i &&
                            Main.projectile[index].aiStyle == 7)
                            Main.projectile[index].Kill();
                    }

                    this.Spawn();
                    for (var index = 0; index < 70; ++index)
                        Dust.NewDust(this.position, this.width, this.height, 15, 0.0f, 0.0f, 150, new Color(), 1.5f);
                }
            }

            if (sItem.type == 2350 && this.itemAnimation > 0)
            {
                if (this.itemTime == 0)
                    this.itemTime = sItem.useTime;
                else if (this.itemTime == 2)
                {
                    for (var index = 0; index < 70; ++index)
                        Main.dust[
                            Dust.NewDust(this.position, this.width, this.height, 15, this.velocity.X * 0.2f,
                                this.velocity.Y * 0.2f, 150, Color.Cyan, 1.2f)].velocity *= 0.5f;
                    this.grappling[0] = -1;
                    this.grapCount = 0;
                    for (var index = 0; index < 1000; ++index)
                    {
                        if (Main.projectile[index].active && Main.projectile[index].owner == i &&
                            Main.projectile[index].aiStyle == 7)
                            Main.projectile[index].Kill();
                    }

                    var immune = this.immune;
                    var immuneTime = this.immuneTime;
                    this.Spawn();
                    this.immune = immune;
                    this.immuneTime = immuneTime;
                    for (var index = 0; index < 70; ++index)
                        Main.dust[
                                Dust.NewDust(this.position, this.width, this.height, 15, 0.0f, 0.0f, 150, Color.Cyan,
                                    1.2f)]
                            .velocity *= 0.5f;
                    if (sItem.stack > 0)
                        --sItem.stack;
                }
            }

            if (sItem.type == 2351 && this.itemAnimation > 0)
            {
                if (this.itemTime == 0)
                    this.itemTime = sItem.useTime;
                else if (this.itemTime == 2)
                {
                    switch (Main.netMode)
                    {
                        case 0:
                            this.TeleportationPotion();
                            break;
                        case 1:
                            if (this.whoAmI == Main.myPlayer)
                            {
                                NetMessage.SendData(73, -1, -1, (NetworkText) null, 0, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                                break;
                            }

                            break;
                    }

                    if (sItem.stack > 0)
                        --sItem.stack;
                }
            }

            if (sItem.type == 2756 && this.itemAnimation > 0)
            {
                if (this.itemTime == 0)
                    this.itemTime = sItem.useTime;
                else if (this.itemTime == 2)
                {
                    if (this.whoAmI == Main.myPlayer)
                    {
                        this.Male = !this.Male;
                        if (Main.netMode == 1)
                            NetMessage.SendData(4, -1, -1, (NetworkText) null, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    }

                    if (sItem.stack > 0)
                        --sItem.stack;
                }
                else
                {
                    var useTime = (float) sItem.useTime;
                    var num1 = (useTime - (float) this.itemTime) / useTime;
                    var x = 15f;
                    var num2 = 44f;
                    var num3 = 9.424778f;
                    var vector2 = new Vector2(x, 0.0f).RotatedBy((double) num3 * (double) num1, new Vector2());
                    vector2.X *= (float) this.direction;
                    for (var index1 = 0; index1 < 2; ++index1)
                    {
                        var Type = 221;
                        if (index1 == 1)
                        {
                            vector2.X *= -1f;
                            Type = 219;
                        }

                        var Position = new Vector2(vector2.X,
                            num2 * (1f - num1) - num2 + (float) (this.height / 2));
                        Position += this.Center;
                        var index2 = Dust.NewDust(Position, 0, 0, Type, 0.0f, 0.0f, 100, new Color(), 1f);
                        Main.dust[index2].position = Position;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity = Vector2.Zero;
                        Main.dust[index2].scale = 1.3f;
                        Main.dust[index2].customData = (object) this;
                    }
                }
            }

            if (i != Main.myPlayer)
                return;
            if (this.itemTime == (int) ((double) sItem.useTime * (double) this.tileSpeed) && sItem.tileWand > 0)
            {
                var tileWand = sItem.tileWand;
                for (var index = 0; index < 58; ++index)
                {
                    if (tileWand == this.inventory[index].type && this.inventory[index].stack > 0)
                    {
                        --this.inventory[index].stack;
                        if (this.inventory[index].stack <= 0)
                        {
                            this.inventory[index] = new Item();
                            break;
                        }

                        break;
                    }
                }
            }

            if (this.itemTime == (sItem.createTile < 0
                    ? (sItem.createWall <= 0 ? sItem.useTime : (int) ((double) sItem.useTime * (double) this.wallSpeed))
                    : (int) ((double) sItem.useTime * (double) this.tileSpeed)) && sItem.consumable)
            {
                var flag2 = true;
                if (sItem.type == 2350 || sItem.type == 2351)
                    flag2 = false;
                if (sItem.type == 2756)
                    flag2 = false;
                if (sItem.ranged)
                {
                    if (this.ammoCost80 && Main.rand.Next(5) == 0)
                        flag2 = false;
                    if (this.ammoCost75 && Main.rand.Next(4) == 0)
                        flag2 = false;
                }

                if (sItem.thrown)
                {
                    if (this.thrownCost50 && Main.rand.Next(100) < 50)
                        flag2 = false;
                    if (this.thrownCost33 && Main.rand.Next(100) < 33)
                        flag2 = false;
                }

                if (sItem.type >= 71 && sItem.type <= 74)
                    flag2 = true;
                if (flag2)
                {
                    if (sItem.stack > 0)
                        --sItem.stack;
                    if (sItem.stack <= 0)
                    {
                        this.itemTime = this.itemAnimation;
                        Main.blockMouse = true;
                    }
                }
            }

            if (sItem.stack <= 0 && this.itemAnimation == 0)
                this.inventory[this.selectedItem] = new Item();
            if (this.selectedItem != 58 || this.itemAnimation == 0)
                return;
            Main.mouseItem = sItem.Clone();
        }

        public static bool WouldSpotOverlapWithSentry(int worldX, int worldY)
        {
            var point1 = new Point(worldX, worldY - 8);
            var point2 = new Point(worldX + 16, worldY - 8);
            var point3 = new Point(worldX - 16, worldY - 8);
            var flag = false;
            for (var index = 0; index < 1000; ++index)
            {
                var projectile = Main.projectile[index];
                if (projectile.active && projectile.sentry)
                {
                    var hitbox = projectile.Hitbox;
                    if (hitbox.Contains(point1) || hitbox.Contains(point2) || hitbox.Contains(point3))
                    {
                        flag = true;
                        break;
                    }
                }
            }

            return flag;
        }

        public void FindSentryRestingSpot(int checkProj, out int worldX, out int worldY, out int pushYUp)
        {
            var flag = false;
            var i = (int) ((double) Main.mouseX + (double) Main.screenPosition.X) / 16;
            var j = (int) ((double) Main.mouseY + (double) Main.screenPosition.Y) / 16;
            if ((double) this.gravDir == -1.0)
                j = (int) ((double) Main.screenPosition.Y + (double) Main.screenHeight - (double) Main.mouseY) / 16;
            worldX = i * 16 + 8;
            pushYUp = 41;
            switch (checkProj)
            {
                case 663:
                    worldX += this.direction;
                    break;
                case 665:
                    pushYUp += 2;
                    break;
                case 667:
                    pushYUp += 3;
                    break;
                case 677:
                    worldX += this.direction;
                    break;
                case 678:
                    worldX += this.direction;
                    break;
                case 691:
                case 692:
                case 693:
                    pushYUp = 20;
                    worldX += this.direction;
                    pushYUp += 2;
                    break;
            }

            if (!flag)
            {
                while (j < Main.maxTilesY - 10 && Main.tile[i, j] != null &&
                       (!WorldGen.SolidTile2(i, j) && Main.tile[i - 1, j] != null) &&
                       (!WorldGen.SolidTile2(i - 1, j) && Main.tile[i + 1, j] != null &&
                        !WorldGen.SolidTile2(i + 1, j)))
                    ++j;
                ++j;
            }

            var num = j - 1;
            pushYUp -= 14;
            worldY = num * 16;
        }

        public void WipeOldestTurret()
        {
            var projectileList = new List<Projectile>();
            for (var index = 0; index < 1000; ++index)
            {
                if (Main.projectile[index].WipableTurret)
                    projectileList.Add(Main.projectile[index]);
            }

            if (projectileList.Count == 0)
                return;
            var projectile = projectileList[0];
            for (var index = 1; index < projectileList.Count; ++index)
            {
                if (projectileList[index].timeLeft < projectile.timeLeft)
                    projectile = projectileList[index];
            }

            projectile.Kill();
        }

        public void UpdateMaxTurrets()
        {
            var projectileList = new List<Projectile>();
            for (var index = 0; index < 1000; ++index)
            {
                if (Main.projectile[index].WipableTurret)
                    projectileList.Add(Main.projectile[index]);
            }

            var num = 0;
            while (projectileList.Count > this.maxTurrets && ++num < 1000)
            {
                var projectile = projectileList[0];
                for (var index = 1; index < projectileList.Count; ++index)
                {
                    if (projectileList[index].timeLeft < projectile.timeLeft)
                        projectile = projectileList[index];
                }

                projectile.Kill();
                projectileList.Remove(projectile);
            }
        }

        private void ItemCheck_ApplyPetBuffs(Item sItem)
        {
            if (this.whoAmI == Main.myPlayer && sItem.type == 603 && Main.cEd)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 669)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 115)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 3060)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 3628)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 3062)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 3577)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 425)
            {
                var type = Main.rand.Next(3);
                if (type == 0)
                    type = 27;
                if (type == 1)
                    type = 101;
                if (type == 2)
                    type = 102;
                for (var b = 0; b < 22; ++b)
                {
                    if (this.buffType[b] == 27 || this.buffType[b] == 101 || this.buffType[b] == 102)
                    {
                        this.DelBuff(b);
                        --b;
                    }
                }

                this.AddBuff(type, 3600, true);
            }

            if (this.whoAmI == Main.myPlayer && sItem.type == 753)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 994)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 1169)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 1170)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 1171)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 1172)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 1180)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 1181)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 1182)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 1183)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 1242)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 1157)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 1309)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 1311)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 1837)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 1312)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 1798)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 1799)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 1802)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 1810)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 1927)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 1959)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 2364)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 2365)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 3043)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 2420)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 2535)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 2551)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 2584)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 2587)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 2621)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 2749)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 3249)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 3474)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI == Main.myPlayer && sItem.type == 3531)
                this.AddBuff(sItem.buffType, 3600, true);
            if (this.whoAmI != Main.myPlayer)
                return;
            switch (sItem.type)
            {
                case 3855:
                case 3856:
                case 3857:
                    this.AddBuff(sItem.buffType, 3600, true);
                    break;
            }
        }

        public float GetWeaponKnockback(Item sItem, float KnockBack)
        {
            if (sItem.summon)
                KnockBack += this.minionKB;
            if (sItem.melee && this.kbGlove)
                KnockBack *= 2f;
            if (this.kbBuff)
                KnockBack *= 1.5f;
            if (sItem.ranged && this.shroomiteStealth)
                KnockBack *= (float) (1.0 + (1.0 - (double) this.stealth) * 0.5);
            if (sItem.ranged && this.setVortex)
                KnockBack *= (float) (1.0 + (1.0 - (double) this.stealth) * 0.5);
            return KnockBack;
        }

        public int GetWeaponDamage(Item sItem)
        {
            var num = sItem.damage;
            if (num > 0)
            {
                if (sItem.melee)
                    num = (int) ((double) num * (double) this.meleeDamage + 4.99999987368938E-06);
                else if (sItem.ranged)
                {
                    num = (int) ((double) num * (double) this.rangedDamage + 4.99999987368938E-06);
                    if (sItem.useAmmo == AmmoID.Arrow || sItem.useAmmo == AmmoID.Stake)
                        num = (int) ((double) num * (double) this.arrowDamage + 4.99999987368938E-06);
                    if (sItem.useAmmo == AmmoID.Bullet || sItem.useAmmo == AmmoID.CandyCorn)
                        num = (int) ((double) num * (double) this.bulletDamage + 4.99999987368938E-06);
                    if (sItem.useAmmo == AmmoID.Rocket || sItem.useAmmo == AmmoID.StyngerBolt ||
                        (sItem.useAmmo == AmmoID.JackOLantern || sItem.useAmmo == AmmoID.NailFriendly))
                        num = (int) ((double) num * (double) this.rocketDamage + 4.99999987368938E-06);
                }
                else if (sItem.thrown)
                    num = (int) ((double) num * (double) this.thrownDamage + 4.99999987368938E-06);
                else if (sItem.magic)
                    num = (int) ((double) num * (double) this.magicDamage + 4.99999987368938E-06);
                else if (sItem.summon)
                    num = (int) ((double) num * (double) this.minionDamage);
            }

            return num;
        }

        private void ApplyAnimation(Item sItem)
        {
            if (sItem.melee)
            {
                this.itemAnimation = (int) ((double) sItem.useAnimation * (double) this.meleeSpeed);
                this.itemAnimationMax = (int) ((double) sItem.useAnimation * (double) this.meleeSpeed);
            }
            else if (sItem.createTile >= 0)
            {
                this.itemAnimation = (int) ((double) sItem.useAnimation * (double) this.tileSpeed);
                this.itemAnimationMax = (int) ((double) sItem.useAnimation * (double) this.tileSpeed);
            }
            else if (sItem.createWall >= 0)
            {
                this.itemAnimation = (int) ((double) sItem.useAnimation * (double) this.wallSpeed);
                this.itemAnimationMax = (int) ((double) sItem.useAnimation * (double) this.wallSpeed);
            }
            else
            {
                this.itemAnimation = sItem.useAnimation;
                this.itemAnimationMax = sItem.useAnimation;
                this.reuseDelay = sItem.reuseDelay;
            }
        }

        public bool HasAmmo(Item sItem, bool canUse)
        {
            if (sItem.useAmmo > 0)
            {
                canUse = false;
                for (var index = 0; index < 58; ++index)
                {
                    if (this.inventory[index].ammo == sItem.useAmmo && this.inventory[index].stack > 0)
                    {
                        canUse = true;
                        break;
                    }
                }
            }

            return canUse;
        }

        public void PickAmmo(Item sItem, ref int shoot, ref float speed, ref bool canShoot, ref int Damage,
            ref float KnockBack, bool dontConsume = false)
        {
            var obj = new Item();
            var flag1 = false;
            for (var index = 54; index < 58; ++index)
            {
                if (this.inventory[index].ammo == sItem.useAmmo && this.inventory[index].stack > 0)
                {
                    obj = this.inventory[index];
                    canShoot = true;
                    flag1 = true;
                    break;
                }
            }

            if (!flag1)
            {
                for (var index = 0; index < 54; ++index)
                {
                    if (this.inventory[index].ammo == sItem.useAmmo && this.inventory[index].stack > 0)
                    {
                        obj = this.inventory[index];
                        canShoot = true;
                        break;
                    }
                }
            }

            if (!canShoot)
                return;
            if (sItem.type == 1946)
                shoot = 338 + obj.type - 771;
            else if (sItem.useAmmo == AmmoID.Rocket)
                shoot += obj.shoot;
            else if (sItem.useAmmo == 780)
                shoot += obj.shoot;
            else if (obj.shoot > 0)
                shoot = obj.shoot;
            if (sItem.type == 3019 && shoot == 1)
                shoot = 485;
            if (sItem.type == 3052)
                shoot = 495;
            if (sItem.type == 3245 && shoot == 21)
                shoot = 532;
            if (shoot == 42)
            {
                if (obj.type == 370)
                {
                    shoot = 65;
                    Damage += 5;
                }
                else if (obj.type == 408)
                {
                    shoot = 68;
                    Damage += 5;
                }
                else if (obj.type == 1246)
                {
                    shoot = 354;
                    Damage += 5;
                }
            }

            if (this.inventory[this.selectedItem].type == 2888 && shoot == 1)
                shoot = 469;
            if (this.magicQuiver && (sItem.useAmmo == AmmoID.Arrow || sItem.useAmmo == AmmoID.Stake))
            {
                KnockBack = (float) (int) ((double) KnockBack * 1.1);
                speed *= 1.1f;
            }

            speed += obj.shootSpeed;
            if (obj.ranged)
            {
                if (obj.damage > 0)
                    Damage += (int) ((double) obj.damage * (double) this.rangedDamage);
            }
            else
                Damage += obj.damage;

            if (sItem.useAmmo == AmmoID.Arrow && this.archery)
            {
                if ((double) speed < 20.0)
                {
                    speed *= 1.2f;
                    if ((double) speed > 20.0)
                        speed = 20f;
                }

                Damage = (int) ((double) Damage * 1.2);
            }

            KnockBack += obj.knockBack;
            var flag2 = dontConsume;
            if (sItem.type == 3245)
            {
                if (Main.rand.Next(3) == 0)
                    flag2 = true;
                else if (this.thrownCost33 && Main.rand.Next(100) < 33)
                    flag2 = true;
                else if (this.thrownCost50 && Main.rand.Next(100) < 50)
                    flag2 = true;
            }

            if (sItem.type == 3475 && Main.rand.Next(3) != 0)
                flag2 = true;
            if (sItem.type == 3540 && Main.rand.Next(3) != 0)
                flag2 = true;
            if (this.magicQuiver && sItem.useAmmo == AmmoID.Arrow && Main.rand.Next(5) == 0)
                flag2 = true;
            if (this.ammoBox && Main.rand.Next(5) == 0)
                flag2 = true;
            if (this.ammoPotion && Main.rand.Next(5) == 0)
                flag2 = true;
            if (sItem.type == 1782 && Main.rand.Next(3) == 0)
                flag2 = true;
            if (sItem.type == 98 && Main.rand.Next(3) == 0)
                flag2 = true;
            if (sItem.type == 2270 && Main.rand.Next(2) == 0)
                flag2 = true;
            if (sItem.type == 533 && Main.rand.Next(2) == 0)
                flag2 = true;
            if (sItem.type == 1929 && Main.rand.Next(2) == 0)
                flag2 = true;
            if (sItem.type == 1553 && Main.rand.Next(2) == 0)
                flag2 = true;
            if (sItem.type == 434 && this.itemAnimation < sItem.useAnimation - 2)
                flag2 = true;
            if (this.ammoCost80 && Main.rand.Next(5) == 0)
                flag2 = true;
            if (this.ammoCost75 && Main.rand.Next(4) == 0)
                flag2 = true;
            if (shoot == 85 && this.itemAnimation < this.itemAnimationMax - 6)
                flag2 = true;
            if ((shoot == 145 || shoot == 146 || (shoot == 147 || shoot == 148) || shoot == 149) &&
                this.itemAnimation < this.itemAnimationMax - 5)
                flag2 = true;
            if (flag2 || !obj.consumable)
                return;
            --obj.stack;
            if (obj.stack > 0)
                return;
            obj.active = false;
            obj.TurnToAir();
        }

        public void PickTile(int x, int y, int pickPower)
        {
            var num1 = 0;
            var tileId = this.hitTile.HitObject(x, y, 1);
            var tile = Main.tile[x, y];
            if (Main.tileNoFail[(int) tile.type])
                num1 = 100;
            var damageAmount =
                Main.tileDungeon[(int) tile.type] || tile.type == (ushort) 25 ||
                (tile.type == (ushort) 58 || tile.type == (ushort) 117) || tile.type == (ushort) 203
                    ? num1 + pickPower / 2
                    : (tile.type == (ushort) 48 || tile.type == (ushort) 232
                        ? num1 + pickPower / 4
                        : (tile.type != (ushort) 226
                            ? (tile.type == (ushort) 107 || tile.type == (ushort) 221
                                ? num1 + pickPower / 2
                                : (tile.type == (ushort) 108 || tile.type == (ushort) 222
                                    ? num1 + pickPower / 3
                                    : (tile.type == (ushort) 111 || tile.type == (ushort) 223
                                        ? num1 + pickPower / 4
                                        : (tile.type != (ushort) 211 ? num1 + pickPower : num1 + pickPower / 5))))
                            : num1 + pickPower / 4));
            if (tile.type == (ushort) 211 && pickPower < 200)
                damageAmount = 0;
            if ((tile.type == (ushort) 25 || tile.type == (ushort) 203) && pickPower < 65)
                damageAmount = 0;
            else if (tile.type == (ushort) 117 && pickPower < 65)
                damageAmount = 0;
            else if (tile.type == (ushort) 37 && pickPower < 50)
                damageAmount = 0;
            else if (tile.type == (ushort) 404 && pickPower < 65)
                damageAmount = 0;
            else if ((tile.type == (ushort) 22 || tile.type == (ushort) 204) &&
                     ((double) y > Main.worldSurface && pickPower < 55))
                damageAmount = 0;
            else if (tile.type == (ushort) 56 && pickPower < 65)
                damageAmount = 0;
            else if (tile.type == (ushort) 58 && pickPower < 65)
                damageAmount = 0;
            else if ((tile.type == (ushort) 226 || tile.type == (ushort) 237) && pickPower < 210)
                damageAmount = 0;
            else if (Main.tileDungeon[(int) tile.type] && pickPower < 65)
            {
                if ((double) x < (double) Main.maxTilesX * 0.35 || (double) x > (double) Main.maxTilesX * 0.65)
                    damageAmount = 0;
            }
            else if (tile.type == (ushort) 107 && pickPower < 100)
                damageAmount = 0;
            else if (tile.type == (ushort) 108 && pickPower < 110)
                damageAmount = 0;
            else if (tile.type == (ushort) 111 && pickPower < 150)
                damageAmount = 0;
            else if (tile.type == (ushort) 221 && pickPower < 100)
                damageAmount = 0;
            else if (tile.type == (ushort) 222 && pickPower < 110)
                damageAmount = 0;
            else if (tile.type == (ushort) 223 && pickPower < 150)
                damageAmount = 0;

            if (tile.type == (ushort) 147 || tile.type == (ushort) 0 ||
                (tile.type == (ushort) 40 || tile.type == (ushort) 53) ||
                (tile.type == (ushort) 57 || tile.type == (ushort) 59 ||
                 (tile.type == (ushort) 123 || tile.type == (ushort) 224)) || tile.type == (ushort) 397)
                damageAmount += pickPower;
            if (tile.type == (ushort) 165 || Main.tileRope[(int) tile.type] ||
                (tile.type == (ushort) 199 || Main.tileMoss[(int) tile.type]))
                damageAmount = 100;
            if (this.hitTile.AddDamage(tileId, damageAmount, false) >= 100 && (tile.type == (ushort) 2 ||
                                                                               tile.type == (ushort) 23 ||
                                                                               (tile.type == (ushort) 60 ||
                                                                                tile.type == (ushort) 70) ||
                                                                               (tile.type == (ushort) 109 ||
                                                                                tile.type == (ushort) 199 ||
                                                                                Main.tileMoss[(int) tile.type])))
                damageAmount = 0;
            if (tile.type == (ushort) 128 || tile.type == (ushort) 269)
            {
                if (tile.frameX == (short) 18 || tile.frameX == (short) 54)
                {
                    --x;
                    tile = Main.tile[x, y];
                    this.hitTile.UpdatePosition(tileId, x, y);
                }

                if (tile.frameX >= (short) 100)
                {
                    damageAmount = 0;
                    Main.blockMouse = true;
                }
            }

            if (tile.type == (ushort) 334)
            {
                if (tile.frameY == (short) 0)
                {
                    ++y;
                    tile = Main.tile[x, y];
                    this.hitTile.UpdatePosition(tileId, x, y);
                }

                if (tile.frameY == (short) 36)
                {
                    --y;
                    tile = Main.tile[x, y];
                    this.hitTile.UpdatePosition(tileId, x, y);
                }

                var frameX1 = (int) tile.frameX;
                var flag1 = frameX1 >= 5000;
                var flag2 = false;
                if (!flag1)
                {
                    var num2 = frameX1 / 18 % 3;
                    x -= num2;
                    tile = Main.tile[x, y];
                    if (tile.frameX >= (short) 5000)
                        flag1 = true;
                }

                if (flag1)
                {
                    var frameX2 = (int) tile.frameX;
                    var num2 = 0;
                    while (frameX2 >= 5000)
                    {
                        frameX2 -= 5000;
                        ++num2;
                    }

                    if (num2 != 0)
                        flag2 = true;
                }

                if (flag2)
                {
                    damageAmount = 0;
                    Main.blockMouse = true;
                }
            }

            if (!WorldGen.CanKillTile(x, y))
                damageAmount = 0;
            if (this.hitTile.AddDamage(tileId, damageAmount, true) >= 100)
            {
                AchievementsHelper.CurrentlyMining = true;
                this.hitTile.Clear(tileId);
                if (Main.netMode == 1 && Main.tileContainer[(int) Main.tile[x, y].type])
                {
                    WorldGen.KillTile(x, y, true, false, false);
                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) x, (float) y, 1f, 0, 0, 0);
                    if (Main.tile[x, y].type == (ushort) 21)
                        NetMessage.SendData(34, -1, -1, (NetworkText) null, 1, (float) x, (float) y, 0.0f, 0, 0, 0);
                    if (Main.tile[x, y].type == (ushort) 467)
                        NetMessage.SendData(34, -1, -1, (NetworkText) null, 5, (float) x, (float) y, 0.0f, 0, 0, 0);
                    if (Main.tile[x, y].type == (ushort) 88)
                        NetMessage.SendData(34, -1, -1, (NetworkText) null, 3, (float) x, (float) y, 0.0f, 0, 0, 0);
                }
                else
                {
                    var j = y;
                    var flag = Main.tile[x, j].active();
                    WorldGen.KillTile(x, j, false, false, false);
                    if (flag && !Main.tile[x, j].active())
                        AchievementsHelper.HandleMining();
                    if (Main.netMode == 1)
                        NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) x, (float) j, 0.0f, 0, 0, 0);
                }

                AchievementsHelper.CurrentlyMining = false;
            }
            else
            {
                WorldGen.KillTile(x, y, true, false, false);
                if (Main.netMode == 1)
                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) x, (float) y, 1f, 0, 0, 0);
            }

            if (damageAmount == 0)
                return;
            this.hitTile.Prune();
        }

        public bool ItemFitsWeaponRack(Item i)
        {
            var flag = false;
            if (i.fishingPole > 0)
                flag = true;
            switch (i.netID)
            {
                case 905:
                case 1326:
                    flag = true;
                    break;
            }

            if ((i.damage > 0 || flag) && i.useStyle > 0)
                return i.stack > 0;
            return false;
        }

        public void PlaceWeapon(int x, int y)
        {
            if (!Main.tile[x, y].active() || Main.tile[x, y].type != (ushort) 334)
                return;
            var frameY = (int) Main.tile[x, y].frameY;
            var num1 = 1;
            int num2;
            for (num2 = frameY / 18; num1 > num2; num2 = (int) Main.tile[x, y].frameY / 18)
                ++y;
            for (; num1 < num2; num2 = (int) Main.tile[x, y].frameY / 18)
                --y;
            var num3 = (int) Main.tile[x, y].frameX;
            var num4 = 0;
            while (num3 >= 5000)
            {
                num3 -= 5000;
                ++num4;
            }

            if (num4 != 0)
                num3 = (num4 - 1) * 18;
            var flag = false;
            if (num3 >= 54)
            {
                num3 -= 54;
                flag = true;
            }

            x -= num3 / 18;
            var frameX = (int) Main.tile[x, y].frameX;
            WorldGen.KillTile(x, y, true, false, false);
            if (Main.netMode == 1)
                NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) x, (float) y, 1f, 0, 0, 0);
            if (Main.netMode == 1)
                NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) (x + 1), (float) y, 1f, 0, 0, 0);
            while (frameX >= 5000)
                frameX -= 5000;
            Main.blockMouse = true;
            var num5 = 5000;
            var num6 = 10000;
            if (flag)
            {
                num5 = 20000;
                num6 = 25000;
            }

            Main.tile[x, y].frameX = (short) (this.inventory[this.selectedItem].netID + num5 + 100);
            Main.tile[x + 1, y].frameX = (short) ((int) this.inventory[this.selectedItem].prefix + num6);
            if (Main.netMode == 1)
                NetMessage.SendTileSquare(-1, x, y, 1, TileChangeType.None);
            if (Main.netMode == 1)
                NetMessage.SendTileSquare(-1, x + 1, y, 1, TileChangeType.None);
            --this.inventory[this.selectedItem].stack;
            if (this.inventory[this.selectedItem].stack <= 0)
            {
                this.inventory[this.selectedItem].SetDefaults(0, false);
                Main.mouseItem.SetDefaults(0, false);
            }

            if (this.selectedItem == 58)
                Main.mouseItem = this.inventory[this.selectedItem].Clone();
            this.releaseUseItem = false;
            this.mouseInterface = true;
        }

        public bool ItemFitsItemFrame(Item i)
        {
            return i.stack > 0;
        }

        public void PlaceItemInFrame(int x, int y)
        {
            if ((int) Main.tile[x, y].frameX % 36 != 0)
                --x;
            if ((int) Main.tile[x, y].frameY % 36 != 0)
                --y;
            var index = TEItemFrame.Find(x, y);
            if (index == -1)
                return;
            if (((TEItemFrame) TileEntity.ByID[index]).item.stack > 0)
            {
                WorldGen.KillTile(x, y, true, false, false);
                if (Main.netMode == 1)
                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) Player.tileTargetX, (float) y, 1f, 0,
                        0, 0);
            }

            if (Main.netMode == 1)
                NetMessage.SendData(89, -1, -1, (NetworkText) null, x, (float) y, (float) this.selectedItem,
                    (float) this.whoAmI, 0, 0, 0);
            else
                TEItemFrame.TryPlacing(x, y, this.inventory[this.selectedItem].netID,
                    (int) this.inventory[this.selectedItem].prefix, this.inventory[this.selectedItem].stack);
            --this.inventory[this.selectedItem].stack;
            if (this.inventory[this.selectedItem].stack <= 0)
            {
                this.inventory[this.selectedItem].SetDefaults(0, false);
                Main.mouseItem.SetDefaults(0, false);
            }

            if (this.selectedItem == 58)
                Main.mouseItem = this.inventory[this.selectedItem].Clone();
            this.releaseUseItem = false;
            this.mouseInterface = true;
        }

        public Color GetImmuneAlpha(Color newColor, float alphaReduction)
        {
            var scale = (float) ((int) byte.MaxValue - this.immuneAlpha) / (float) byte.MaxValue;
            if ((double) alphaReduction > 0.0)
                scale *= 1f - alphaReduction;
            if (this.immuneAlpha > 125)
                return Color.Transparent;
            return Color.Multiply(newColor, scale);
        }

        public Color GetImmuneAlphaPure(Color newColor, float alphaReduction)
        {
            var scale = (float) ((int) byte.MaxValue - this.immuneAlpha) / (float) byte.MaxValue;
            if ((double) alphaReduction > 0.0)
                scale *= 1f - alphaReduction;
            return Color.Multiply(newColor, scale);
        }

        public Color GetDeathAlpha(Color newColor)
        {
            var r = (int) newColor.R + (int) ((double) this.immuneAlpha * 0.9);
            var g = (int) newColor.G + (int) ((double) this.immuneAlpha * 0.5);
            var b = (int) newColor.B + (int) ((double) this.immuneAlpha * 0.5);
            var a = (int) newColor.A + (int) ((double) this.immuneAlpha * 0.4);
            if (a < 0)
                a = 0;
            if (a > (int) byte.MaxValue)
                a = (int) byte.MaxValue;
            return new Color(r, g, b, a);
        }

        public void addDPS(int dmg)
        {
            if (this.dpsStarted)
            {
                this.dpsLastHit = DateTime.Now;
                this.dpsDamage += dmg;
                this.dpsEnd = DateTime.Now;
            }
            else
            {
                this.dpsStarted = true;
                this.dpsStart = DateTime.Now;
                this.dpsEnd = DateTime.Now;
                this.dpsLastHit = DateTime.Now;
                this.dpsDamage = dmg;
            }
        }

        public void checkDPSTime()
        {
            if (!this.dpsStarted || (DateTime.Now - this.dpsLastHit).Seconds < 3)
                return;
            this.dpsStarted = false;
        }

        public int getDPS()
        {
            var timeSpan1 = this.dpsEnd - this.dpsStart;
            var num = (float) timeSpan1.Milliseconds / 1000f + (float) timeSpan1.Seconds +
                        (float) timeSpan1.Minutes / 60f;
            if ((double) num >= 3.0)
            {
                this.dpsStart = DateTime.Now;
                this.dpsStart = this.dpsStart.AddSeconds(-1.0);
                this.dpsDamage = (int) ((double) this.dpsDamage / (double) num);
                var timeSpan2 = this.dpsEnd - this.dpsStart;
                num = (float) timeSpan2.Milliseconds / 1000f + (float) timeSpan2.Seconds +
                      (float) timeSpan2.Minutes / 60f;
            }

            if ((double) num < 1.0)
                num = 1f;
            return (int) ((float) this.dpsDamage / num);
        }

        public int DropCoins()
        {
            var num1 = 0;
            for (var index = 0; index < 59; ++index)
            {
                if (this.inventory[index].type >= 71 && this.inventory[index].type <= 74)
                {
                    var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        this.inventory[index].type, 1, false, 0, false, false);
                    var num2 = this.inventory[index].stack / 2;
                    if (Main.expertMode)
                        num2 = (int) ((double) this.inventory[index].stack * 0.25);
                    var num3 = this.inventory[index].stack - num2;
                    this.inventory[index].stack -= num3;
                    if (this.inventory[index].type == 71)
                        num1 += num3;
                    if (this.inventory[index].type == 72)
                        num1 += num3 * 100;
                    if (this.inventory[index].type == 73)
                        num1 += num3 * 10000;
                    if (this.inventory[index].type == 74)
                        num1 += num3 * 1000000;
                    if (this.inventory[index].stack <= 0)
                        this.inventory[index] = new Item();
                    Main.item[number].stack = num3;
                    Main.item[number].velocity.Y = (float) Main.rand.Next(-20, 1) * 0.2f;
                    Main.item[number].velocity.X = (float) Main.rand.Next(-20, 21) * 0.2f;
                    Main.item[number].noGrabDelay = 100;
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    if (index == 58)
                        Main.mouseItem = this.inventory[index].Clone();
                }
            }

            this.lostCoins = num1;
            this.lostCoinString = Main.ValueToCoins(this.lostCoins);
            return num1;
        }

        public void DropItems()
        {
            for (var index = 0; index < 59; ++index)
            {
                if (this.inventory[index].stack > 0 && this.inventory[index].Name != "Copper Pickaxe" &&
                    (this.inventory[index].Name != "Copper Axe" && this.inventory[index].Name != "Copper Shortsword"))
                {
                    var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        this.inventory[index].type, 1, false, 0, false, false);
                    Main.item[number].netDefaults(this.inventory[index].netID);
                    Main.item[number].Prefix((int) this.inventory[index].prefix);
                    Main.item[number].stack = this.inventory[index].stack;
                    Main.item[number].velocity.Y = (float) Main.rand.Next(-20, 1) * 0.2f;
                    Main.item[number].velocity.X = (float) Main.rand.Next(-20, 21) * 0.2f;
                    Main.item[number].noGrabDelay = 100;
                    Main.item[number].newAndShiny = false;
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                }

                this.inventory[index] = new Item();
                if (index < this.armor.Length)
                {
                    if (this.armor[index].stack > 0)
                    {
                        var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            this.armor[index].type, 1, false, 0, false, false);
                        Main.item[number].netDefaults(this.armor[index].netID);
                        Main.item[number].Prefix((int) this.armor[index].prefix);
                        Main.item[number].stack = this.armor[index].stack;
                        Main.item[number].velocity.Y = (float) Main.rand.Next(-20, 1) * 0.2f;
                        Main.item[number].velocity.X = (float) Main.rand.Next(-20, 21) * 0.2f;
                        Main.item[number].noGrabDelay = 100;
                        Main.item[number].newAndShiny = false;
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    }

                    this.armor[index] = new Item();
                }

                if (index < this.dye.Length)
                {
                    if (this.dye[index].stack > 0)
                    {
                        var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            this.dye[index].type, 1, false, 0, false, false);
                        Main.item[number].netDefaults(this.dye[index].netID);
                        Main.item[number].Prefix((int) this.dye[index].prefix);
                        Main.item[number].stack = this.dye[index].stack;
                        Main.item[number].velocity.Y = (float) Main.rand.Next(-20, 1) * 0.2f;
                        Main.item[number].velocity.X = (float) Main.rand.Next(-20, 21) * 0.2f;
                        Main.item[number].noGrabDelay = 100;
                        Main.item[number].newAndShiny = false;
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    }

                    this.dye[index] = new Item();
                }

                if (index < this.miscEquips.Length)
                {
                    if (this.miscEquips[index].stack > 0)
                    {
                        var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            this.miscEquips[index].type, 1, false, 0, false, false);
                        Main.item[number].netDefaults(this.miscEquips[index].netID);
                        Main.item[number].Prefix((int) this.miscEquips[index].prefix);
                        Main.item[number].stack = this.miscEquips[index].stack;
                        Main.item[number].velocity.Y = (float) Main.rand.Next(-20, 1) * 0.2f;
                        Main.item[number].velocity.X = (float) Main.rand.Next(-20, 21) * 0.2f;
                        Main.item[number].noGrabDelay = 100;
                        Main.item[number].newAndShiny = false;
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    }

                    this.miscEquips[index] = new Item();
                }

                if (index < this.miscDyes.Length)
                {
                    if (this.miscDyes[index].stack > 0)
                    {
                        var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            this.miscDyes[index].type, 1, false, 0, false, false);
                        Main.item[number].netDefaults(this.miscDyes[index].netID);
                        Main.item[number].Prefix((int) this.miscDyes[index].prefix);
                        Main.item[number].stack = this.miscDyes[index].stack;
                        Main.item[number].velocity.Y = (float) Main.rand.Next(-20, 1) * 0.2f;
                        Main.item[number].velocity.X = (float) Main.rand.Next(-20, 21) * 0.2f;
                        Main.item[number].noGrabDelay = 100;
                        Main.item[number].newAndShiny = false;
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    }

                    this.miscDyes[index] = new Item();
                }
            }

            this.inventory[0].SetDefaults(3507, false);
            this.inventory[0].Prefix(-1);
            this.inventory[1].SetDefaults(3509, false);
            this.inventory[1].Prefix(-1);
            this.inventory[2].SetDefaults(3506, false);
            this.inventory[2].Prefix(-1);
            Main.mouseItem = new Item();
        }

        public object Clone()
        {
            return this.MemberwiseClone();
        }

        public object clientClone()
        {
            var player = new Player();
            player.zone1 = this.zone1;
            player.zone2 = this.zone2;
            player.zone3 = this.zone3;
            player.zone4 = this.zone4;
            player.extraAccessory = this.extraAccessory;
            player.MinionRestTargetPoint = this.MinionRestTargetPoint;
            player.MinionAttackTargetNPC = this.MinionAttackTargetNPC;
            player.direction = this.direction;
            player.selectedItem = this.selectedItem;
            player.controlUp = this.controlUp;
            player.controlDown = this.controlDown;
            player.controlLeft = this.controlLeft;
            player.controlRight = this.controlRight;
            player.controlJump = this.controlJump;
            player.controlUseItem = this.controlUseItem;
            player.statLife = this.statLife;
            player.statLifeMax = this.statLifeMax;
            player.statMana = this.statMana;
            player.statManaMax = this.statManaMax;
            player.position.X = this.position.X;
            player.chest = this.chest;
            player.talkNPC = this.talkNPC;
            player.hideVisual = this.hideVisual;
            player.hideMisc = this.hideMisc;
            for (var index = 0; index < 59; ++index)
            {
                player.inventory[index] = this.inventory[index].Clone();
                if (index < this.armor.Length)
                    player.armor[index] = this.armor[index].Clone();
                if (index < this.dye.Length)
                    player.dye[index] = this.dye[index].Clone();
                if (index < this.miscEquips.Length)
                    player.miscEquips[index] = this.miscEquips[index].Clone();
                if (index < this.miscDyes.Length)
                    player.miscDyes[index] = this.miscDyes[index].Clone();
                if (index < this.bank.item.Length)
                    player.bank.item[index] = this.bank.item[index].Clone();
                if (index < this.bank2.item.Length)
                    player.bank2.item[index] = this.bank2.item[index].Clone();
                if (index < this.bank3.item.Length)
                    player.bank3.item[index] = this.bank3.item[index].Clone();
            }

            player.trashItem = this.trashItem.Clone();
            for (var index = 0; index < 22; ++index)
            {
                player.buffType[index] = this.buffType[index];
                player.buffTime[index] = this.buffTime[index];
            }

            this.DpadRadial.CopyTo(player.DpadRadial);
            this.CircularRadial.CopyTo(player.CircularRadial);
            return (object) player;
        }

        public static bool CheckSpawn(int x, int y)
        {
            if (x < 10 || x > Main.maxTilesX - 10 || (y < 10 || y > Main.maxTilesX - 10) ||
                (Main.tile[x, y - 1] == null || !Main.tile[x, y - 1].active() ||
                 Main.tile[x, y - 1].type != (ushort) 79))
                return false;
            for (var index1 = x - 1; index1 <= x + 1; ++index1)
            {
                for (var index2 = y - 3; index2 < y; ++index2)
                {
                    if (Main.tile[index1, index2] == null)
                        return false;
                    if (Main.tile[index1, index2].nactive() && Main.tileSolid[(int) Main.tile[index1, index2].type] &&
                        !Main.tileSolidTop[(int) Main.tile[index1, index2].type])
                    {
                        Main.NewText(Language.GetTextValue("Game.BedObstructed"), byte.MaxValue, (byte) 240, (byte) 20,
                            false);
                        return false;
                    }
                }
            }

            return WorldGen.StartRoomCheck(x, y - 1);
        }

        public void FindSpawn()
        {
            for (var index = 0; index < 200; ++index)
            {
                if (this.spN[index] == null)
                {
                    this.SpawnX = -1;
                    this.SpawnY = -1;
                    break;
                }

                if (this.spN[index] == Main.worldName && this.spI[index] == Main.worldID)
                {
                    this.SpawnX = this.spX[index];
                    this.SpawnY = this.spY[index];
                    break;
                }
            }
        }

        public void RemoveSpawn()
        {
            this.SpawnX = -1;
            this.SpawnY = -1;
            for (var index1 = 0; index1 < 200 && this.spN[index1] != null; ++index1)
            {
                if (this.spN[index1] == Main.worldName && this.spI[index1] == Main.worldID)
                {
                    for (var index2 = index1; index2 < 199; ++index2)
                    {
                        this.spN[index2] = this.spN[index2 + 1];
                        this.spI[index2] = this.spI[index2 + 1];
                        this.spX[index2] = this.spX[index2 + 1];
                        this.spY[index2] = this.spY[index2 + 1];
                    }

                    this.spN[199] = (string) null;
                    this.spI[199] = 0;
                    this.spX[199] = 0;
                    this.spY[199] = 0;
                    break;
                }
            }
        }

        public void ChangeSpawn(int x, int y)
        {
            for (var index1 = 0; index1 < 200 && this.spN[index1] != null; ++index1)
            {
                if (this.spN[index1] == Main.worldName && this.spI[index1] == Main.worldID)
                {
                    for (var index2 = index1; index2 > 0; --index2)
                    {
                        this.spN[index2] = this.spN[index2 - 1];
                        this.spI[index2] = this.spI[index2 - 1];
                        this.spX[index2] = this.spX[index2 - 1];
                        this.spY[index2] = this.spY[index2 - 1];
                    }

                    this.spN[0] = Main.worldName;
                    this.spI[0] = Main.worldID;
                    this.spX[0] = x;
                    this.spY[0] = y;
                    return;
                }
            }

            for (var index = 199; index > 0; --index)
            {
                if (this.spN[index - 1] != null)
                {
                    this.spN[index] = this.spN[index - 1];
                    this.spI[index] = this.spI[index - 1];
                    this.spX[index] = this.spX[index - 1];
                    this.spY[index] = this.spY[index - 1];
                }
            }

            this.spN[0] = Main.worldName;
            this.spI[0] = Main.worldID;
            this.spX[0] = x;
            this.spY[0] = y;
        }

        public static void SavePlayer(PlayerFileData playerFile, bool skipMapSave = false)
        {
            Main.Achievements.Save();
            var path = playerFile.Path;
            var player = playerFile.Player;
            var isCloudSave = playerFile.IsCloudSave;
            if (!skipMapSave)
            {
                if (!string.IsNullOrEmpty(Main.playerPathName))
                {
                    try
                    {
                        if (Main.mapEnabled)
                            Main.Map.Save();
                    }
                    catch
                    {
                    }

                    try
                    {
                        if (!isCloudSave)
                            Directory.CreateDirectory(Main.PlayerPath);
                    }
                    catch
                    {
                    }
                }
            }

            if (Main.ServerSideCharacter || path == null || path == "")
                return;
            if (FileUtilities.Exists(path, isCloudSave))
                FileUtilities.Copy(path, path + ".bak", isCloudSave, true);
            var rijndaelManaged = new RijndaelManaged();
            using (var stream = isCloudSave
                ? (Stream) new MemoryStream(2000)
                : (Stream) new FileStream(path, FileMode.Create))
            {
                using (var cryptoStream = new CryptoStream(stream,
                    rijndaelManaged.CreateEncryptor(Player.ENCRYPTION_KEY, Player.ENCRYPTION_KEY),
                    CryptoStreamMode.Write))
                {
                    using (var writer = new BinaryWriter((Stream) cryptoStream))
                    {
                        writer.Write(193);
                        playerFile.Metadata.Write(writer);
                        writer.Write(player.name);
                        writer.Write(player.difficulty);
                        writer.Write(playerFile.GetPlayTime().Ticks);
                        writer.Write(player.hair);
                        writer.Write(player.hairDye);
                        var bitsByte1 = (BitsByte) (byte) 0;
                        for (var index = 0; index < 8; ++index)
                            bitsByte1[index] = player.hideVisual[index];
                        writer.Write((byte) bitsByte1);
                        var bitsByte2 = (BitsByte) (byte) 0;
                        for (var index = 0; index < 2; ++index)
                            bitsByte2[index] = player.hideVisual[index + 8];
                        writer.Write((byte) bitsByte2);
                        writer.Write((byte) player.hideMisc);
                        writer.Write((byte) player.skinVariant);
                        writer.Write(player.statLife);
                        writer.Write(player.statLifeMax);
                        writer.Write(player.statMana);
                        writer.Write(player.statManaMax);
                        writer.Write(player.extraAccessory);
                        writer.Write(player.downedDD2EventAnyDifficulty);
                        writer.Write(player.taxMoney);
                        writer.Write(player.hairColor.R);
                        writer.Write(player.hairColor.G);
                        writer.Write(player.hairColor.B);
                        writer.Write(player.skinColor.R);
                        writer.Write(player.skinColor.G);
                        writer.Write(player.skinColor.B);
                        writer.Write(player.eyeColor.R);
                        writer.Write(player.eyeColor.G);
                        writer.Write(player.eyeColor.B);
                        writer.Write(player.shirtColor.R);
                        writer.Write(player.shirtColor.G);
                        writer.Write(player.shirtColor.B);
                        writer.Write(player.underShirtColor.R);
                        writer.Write(player.underShirtColor.G);
                        writer.Write(player.underShirtColor.B);
                        writer.Write(player.pantsColor.R);
                        writer.Write(player.pantsColor.G);
                        writer.Write(player.pantsColor.B);
                        writer.Write(player.shoeColor.R);
                        writer.Write(player.shoeColor.G);
                        writer.Write(player.shoeColor.B);
                        for (var index = 0; index < player.armor.Length; ++index)
                        {
                            writer.Write(player.armor[index].netID);
                            writer.Write(player.armor[index].prefix);
                        }

                        for (var index = 0; index < player.dye.Length; ++index)
                        {
                            writer.Write(player.dye[index].netID);
                            writer.Write(player.dye[index].prefix);
                        }

                        for (var index = 0; index < 58; ++index)
                        {
                            writer.Write(player.inventory[index].netID);
                            writer.Write(player.inventory[index].stack);
                            writer.Write(player.inventory[index].prefix);
                            writer.Write(player.inventory[index].favorited);
                        }

                        for (var index = 0; index < player.miscEquips.Length; ++index)
                        {
                            writer.Write(player.miscEquips[index].netID);
                            writer.Write(player.miscEquips[index].prefix);
                            writer.Write(player.miscDyes[index].netID);
                            writer.Write(player.miscDyes[index].prefix);
                        }

                        for (var index = 0; index < 40; ++index)
                        {
                            writer.Write(player.bank.item[index].netID);
                            writer.Write(player.bank.item[index].stack);
                            writer.Write(player.bank.item[index].prefix);
                        }

                        for (var index = 0; index < 40; ++index)
                        {
                            writer.Write(player.bank2.item[index].netID);
                            writer.Write(player.bank2.item[index].stack);
                            writer.Write(player.bank2.item[index].prefix);
                        }

                        for (var index = 0; index < 40; ++index)
                        {
                            writer.Write(player.bank3.item[index].netID);
                            writer.Write(player.bank3.item[index].stack);
                            writer.Write(player.bank3.item[index].prefix);
                        }

                        for (var index = 0; index < 22; ++index)
                        {
                            if (Main.buffNoSave[player.buffType[index]])
                            {
                                writer.Write(0);
                                writer.Write(0);
                            }
                            else
                            {
                                writer.Write(player.buffType[index]);
                                writer.Write(player.buffTime[index]);
                            }
                        }

                        for (var index = 0; index < 200; ++index)
                        {
                            if (player.spN[index] == null)
                            {
                                writer.Write(-1);
                                break;
                            }

                            writer.Write(player.spX[index]);
                            writer.Write(player.spY[index]);
                            writer.Write(player.spI[index]);
                            writer.Write(player.spN[index]);
                        }

                        writer.Write(player.hbLocked);
                        for (var index = 0; index < player.hideInfo.Length; ++index)
                            writer.Write(player.hideInfo[index]);
                        writer.Write(player.anglerQuestsFinished);
                        for (var index = 0; index < player.DpadRadial.Bindings.Length; ++index)
                            writer.Write(player.DpadRadial.Bindings[index]);
                        for (var index = 0; index < player.builderAccStatus.Length; ++index)
                            writer.Write(player.builderAccStatus[index]);
                        writer.Write(player.bartenderQuestLog);
                        writer.Flush();
                        cryptoStream.FlushFinalBlock();
                        stream.Flush();
                        if (!isCloudSave || SocialAPI.Cloud == null)
                            return;
                        SocialAPI.Cloud.Write(playerFile.Path, ((MemoryStream) stream).ToArray());
                    }
                }
            }
        }

        public static PlayerFileData LoadPlayer(string playerPath, bool cloudSave)
        {
            var playerFileData = new PlayerFileData(playerPath, cloudSave);
            if (cloudSave && SocialAPI.Cloud == null)
                return playerFileData;
            if (Main.rand == null)
                Main.rand = new UnifiedRandom((int) DateTime.Now.Ticks);
            var player1 = new Player();
            try
            {
                var rijndaelManaged = new RijndaelManaged();
                rijndaelManaged.Padding = PaddingMode.None;
                using (var memoryStream = new MemoryStream(FileUtilities.ReadAllBytes(playerPath, cloudSave)))
                {
                    using (var cryptoStream = new CryptoStream((Stream) memoryStream,
                        rijndaelManaged.CreateDecryptor(Player.ENCRYPTION_KEY, Player.ENCRYPTION_KEY),
                        CryptoStreamMode.Read))
                    {
                        using (var binaryReader = new BinaryReader((Stream) cryptoStream))
                        {
                            var release = binaryReader.ReadInt32();
                            if (release >= 135)
                                playerFileData.Metadata = FileMetadata.Read(binaryReader, FileType.Player);
                            else
                                playerFileData.Metadata = FileMetadata.FromCurrentSettings(FileType.Player);
                            if (release > 193)
                            {
                                player1.loadStatus = 1;
                                player1.name = binaryReader.ReadString();
                                playerFileData.Player = player1;
                                return playerFileData;
                            }

                            player1.name = binaryReader.ReadString();
                            if (release >= 10)
                            {
                                if (release >= 17)
                                    player1.difficulty = binaryReader.ReadByte();
                                else if (binaryReader.ReadBoolean())
                                    player1.difficulty = (byte) 2;
                            }

                            if (release >= 138)
                                playerFileData.SetPlayTime(new TimeSpan(binaryReader.ReadInt64()));
                            else
                                playerFileData.SetPlayTime(TimeSpan.Zero);
                            player1.hair = binaryReader.ReadInt32();
                            if (release >= 82)
                                player1.hairDye = binaryReader.ReadByte();
                            if (release >= 124)
                            {
                                var bitsByte = (BitsByte) binaryReader.ReadByte();
                                for (var index = 0; index < 8; ++index)
                                    player1.hideVisual[index] = bitsByte[index];
                                bitsByte = (BitsByte) binaryReader.ReadByte();
                                for (var index = 0; index < 2; ++index)
                                    player1.hideVisual[index + 8] = bitsByte[index];
                            }
                            else if (release >= 83)
                            {
                                var bitsByte = (BitsByte) binaryReader.ReadByte();
                                for (var index = 0; index < 8; ++index)
                                    player1.hideVisual[index] = bitsByte[index];
                            }

                            if (release >= 119)
                                player1.hideMisc = (BitsByte) binaryReader.ReadByte();
                            if (release <= 17)
                                player1.Male = player1.hair != 5 && player1.hair != 6 &&
                                               (player1.hair != 9 && player1.hair != 11);
                            else if (release < 107)
                                player1.Male = binaryReader.ReadBoolean();
                            else
                                player1.skinVariant = (int) binaryReader.ReadByte();
                            if (release < 161 && player1.skinVariant == 7)
                                player1.skinVariant = 9;
                            player1.statLife = binaryReader.ReadInt32();
                            player1.statLifeMax = binaryReader.ReadInt32();
                            if (player1.statLifeMax > 500)
                                player1.statLifeMax = 500;
                            player1.statMana = binaryReader.ReadInt32();
                            player1.statManaMax = binaryReader.ReadInt32();
                            if (player1.statManaMax > 200)
                                player1.statManaMax = 200;
                            if (player1.statMana > 400)
                                player1.statMana = 400;
                            if (release >= 125)
                                player1.extraAccessory = binaryReader.ReadBoolean();
                            if (release >= 182)
                                player1.downedDD2EventAnyDifficulty = binaryReader.ReadBoolean();
                            if (release >= 128)
                                player1.taxMoney = binaryReader.ReadInt32();
                            player1.hairColor = binaryReader.ReadRGB();
                            player1.skinColor = binaryReader.ReadRGB();
                            player1.eyeColor = binaryReader.ReadRGB();
                            player1.shirtColor = binaryReader.ReadRGB();
                            player1.underShirtColor = binaryReader.ReadRGB();
                            player1.pantsColor = binaryReader.ReadRGB();
                            player1.shoeColor = binaryReader.ReadRGB();
                            Main.player[Main.myPlayer].shirtColor = player1.shirtColor;
                            Main.player[Main.myPlayer].pantsColor = player1.pantsColor;
                            Main.player[Main.myPlayer].hairColor = player1.hairColor;
                            if (release >= 38)
                            {
                                if (release < 124)
                                {
                                    var num = 11;
                                    if (release >= 81)
                                        num = 16;
                                    for (var index1 = 0; index1 < num; ++index1)
                                    {
                                        var index2 = index1;
                                        if (index2 >= 8)
                                            index2 += 2;
                                        player1.armor[index2].netDefaults(binaryReader.ReadInt32());
                                        player1.armor[index2].Prefix((int) binaryReader.ReadByte());
                                    }
                                }
                                else
                                {
                                    var num = 20;
                                    for (var index = 0; index < num; ++index)
                                    {
                                        player1.armor[index].netDefaults(binaryReader.ReadInt32());
                                        player1.armor[index].Prefix((int) binaryReader.ReadByte());
                                    }
                                }

                                if (release >= 47)
                                {
                                    var num = 3;
                                    if (release >= 81)
                                        num = 8;
                                    if (release >= 124)
                                        num = 10;
                                    for (var index1 = 0; index1 < num; ++index1)
                                    {
                                        var index2 = index1;
                                        player1.dye[index2].netDefaults(binaryReader.ReadInt32());
                                        player1.dye[index2].Prefix((int) binaryReader.ReadByte());
                                    }
                                }

                                if (release >= 58)
                                {
                                    for (var index = 0; index < 58; ++index)
                                    {
                                        var type = binaryReader.ReadInt32();
                                        if (type >= 3930)
                                        {
                                            player1.inventory[index].netDefaults(0);
                                            binaryReader.ReadInt32();
                                            var num = (int) binaryReader.ReadByte();
                                            if (release >= 114)
                                                binaryReader.ReadBoolean();
                                        }
                                        else
                                        {
                                            player1.inventory[index].netDefaults(type);
                                            player1.inventory[index].stack = binaryReader.ReadInt32();
                                            player1.inventory[index].Prefix((int) binaryReader.ReadByte());
                                            if (release >= 114)
                                                player1.inventory[index].favorited = binaryReader.ReadBoolean();
                                        }
                                    }
                                }
                                else
                                {
                                    for (var index = 0; index < 48; ++index)
                                    {
                                        var type = binaryReader.ReadInt32();
                                        if (type >= 3930)
                                        {
                                            player1.inventory[index].netDefaults(0);
                                            binaryReader.ReadInt32();
                                            var num = (int) binaryReader.ReadByte();
                                        }
                                        else
                                        {
                                            player1.inventory[index].netDefaults(type);
                                            player1.inventory[index].stack = binaryReader.ReadInt32();
                                            player1.inventory[index].Prefix((int) binaryReader.ReadByte());
                                        }
                                    }
                                }

                                if (release >= 117)
                                {
                                    if (release < 136)
                                    {
                                        for (var index = 0; index < 5; ++index)
                                        {
                                            if (index != 1)
                                            {
                                                var type1 = binaryReader.ReadInt32();
                                                if (type1 >= 3930)
                                                {
                                                    player1.miscEquips[index].netDefaults(0);
                                                    var num = (int) binaryReader.ReadByte();
                                                }
                                                else
                                                {
                                                    player1.miscEquips[index].netDefaults(type1);
                                                    player1.miscEquips[index].Prefix((int) binaryReader.ReadByte());
                                                }

                                                var type2 = binaryReader.ReadInt32();
                                                if (type2 >= 3930)
                                                {
                                                    player1.miscDyes[index].netDefaults(0);
                                                    var num = (int) binaryReader.ReadByte();
                                                }
                                                else
                                                {
                                                    player1.miscDyes[index].netDefaults(type2);
                                                    player1.miscDyes[index].Prefix((int) binaryReader.ReadByte());
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        for (var index = 0; index < 5; ++index)
                                        {
                                            var type1 = binaryReader.ReadInt32();
                                            if (type1 >= 3930)
                                            {
                                                player1.miscEquips[index].netDefaults(0);
                                                var num = (int) binaryReader.ReadByte();
                                            }
                                            else
                                            {
                                                player1.miscEquips[index].netDefaults(type1);
                                                player1.miscEquips[index].Prefix((int) binaryReader.ReadByte());
                                            }

                                            var type2 = binaryReader.ReadInt32();
                                            if (type2 >= 3930)
                                            {
                                                player1.miscDyes[index].netDefaults(0);
                                                var num = (int) binaryReader.ReadByte();
                                            }
                                            else
                                            {
                                                player1.miscDyes[index].netDefaults(type2);
                                                player1.miscDyes[index].Prefix((int) binaryReader.ReadByte());
                                            }
                                        }
                                    }
                                }

                                if (release >= 58)
                                {
                                    for (var index = 0; index < 40; ++index)
                                    {
                                        player1.bank.item[index].netDefaults(binaryReader.ReadInt32());
                                        player1.bank.item[index].stack = binaryReader.ReadInt32();
                                        player1.bank.item[index].Prefix((int) binaryReader.ReadByte());
                                    }

                                    for (var index = 0; index < 40; ++index)
                                    {
                                        player1.bank2.item[index].netDefaults(binaryReader.ReadInt32());
                                        player1.bank2.item[index].stack = binaryReader.ReadInt32();
                                        player1.bank2.item[index].Prefix((int) binaryReader.ReadByte());
                                    }
                                }
                                else
                                {
                                    for (var index = 0; index < 20; ++index)
                                    {
                                        player1.bank.item[index].netDefaults(binaryReader.ReadInt32());
                                        player1.bank.item[index].stack = binaryReader.ReadInt32();
                                        player1.bank.item[index].Prefix((int) binaryReader.ReadByte());
                                    }

                                    for (var index = 0; index < 20; ++index)
                                    {
                                        player1.bank2.item[index].netDefaults(binaryReader.ReadInt32());
                                        player1.bank2.item[index].stack = binaryReader.ReadInt32();
                                        player1.bank2.item[index].Prefix((int) binaryReader.ReadByte());
                                    }
                                }

                                if (release >= 182)
                                {
                                    for (var index = 0; index < 40; ++index)
                                    {
                                        player1.bank3.item[index].netDefaults(binaryReader.ReadInt32());
                                        player1.bank3.item[index].stack = binaryReader.ReadInt32();
                                        player1.bank3.item[index].Prefix((int) binaryReader.ReadByte());
                                    }
                                }
                            }
                            else
                            {
                                for (var index = 0; index < 8; ++index)
                                {
                                    player1.armor[index]
                                        .SetDefaults((int) ItemID.FromLegacyName(binaryReader.ReadString(), release),
                                            false);
                                    if (release >= 36)
                                        player1.armor[index].Prefix((int) binaryReader.ReadByte());
                                }

                                if (release >= 6)
                                {
                                    for (var index = 8; index < 11; ++index)
                                    {
                                        player1.armor[index]
                                            .SetDefaults(
                                                (int) ItemID.FromLegacyName(binaryReader.ReadString(), release), false);
                                        if (release >= 36)
                                            player1.armor[index].Prefix((int) binaryReader.ReadByte());
                                    }
                                }

                                for (var index = 0; index < 44; ++index)
                                {
                                    player1.inventory[index]
                                        .SetDefaults((int) ItemID.FromLegacyName(binaryReader.ReadString(), release),
                                            false);
                                    player1.inventory[index].stack = binaryReader.ReadInt32();
                                    if (release >= 36)
                                        player1.inventory[index].Prefix((int) binaryReader.ReadByte());
                                }

                                if (release >= 15)
                                {
                                    for (var index = 44; index < 48; ++index)
                                    {
                                        player1.inventory[index]
                                            .SetDefaults(
                                                (int) ItemID.FromLegacyName(binaryReader.ReadString(), release), false);
                                        player1.inventory[index].stack = binaryReader.ReadInt32();
                                        if (release >= 36)
                                            player1.inventory[index].Prefix((int) binaryReader.ReadByte());
                                    }
                                }

                                for (var index = 0; index < 20; ++index)
                                {
                                    player1.bank.item[index]
                                        .SetDefaults((int) ItemID.FromLegacyName(binaryReader.ReadString(), release),
                                            false);
                                    player1.bank.item[index].stack = binaryReader.ReadInt32();
                                    if (release >= 36)
                                        player1.bank.item[index].Prefix((int) binaryReader.ReadByte());
                                }

                                if (release >= 20)
                                {
                                    for (var index = 0; index < 20; ++index)
                                    {
                                        player1.bank2.item[index]
                                            .SetDefaults(
                                                (int) ItemID.FromLegacyName(binaryReader.ReadString(), release), false);
                                        player1.bank2.item[index].stack = binaryReader.ReadInt32();
                                        if (release >= 36)
                                            player1.bank2.item[index].Prefix((int) binaryReader.ReadByte());
                                    }
                                }
                            }

                            if (release < 58)
                            {
                                for (var index = 40; index < 48; ++index)
                                {
                                    player1.inventory[index + 10] = player1.inventory[index].Clone();
                                    player1.inventory[index].SetDefaults(0, false);
                                }
                            }

                            if (release >= 11)
                            {
                                var num = 22;
                                if (release < 74)
                                    num = 10;
                                for (var index = 0; index < num; ++index)
                                {
                                    player1.buffType[index] = binaryReader.ReadInt32();
                                    player1.buffTime[index] = binaryReader.ReadInt32();
                                    if (player1.buffType[index] == 0)
                                    {
                                        --index;
                                        --num;
                                    }
                                }
                            }

                            for (var index = 0; index < 200; ++index)
                            {
                                var num = binaryReader.ReadInt32();
                                if (num != -1)
                                {
                                    player1.spX[index] = num;
                                    player1.spY[index] = binaryReader.ReadInt32();
                                    player1.spI[index] = binaryReader.ReadInt32();
                                    player1.spN[index] = binaryReader.ReadString();
                                }
                                else
                                    break;
                            }

                            if (release >= 16)
                                player1.hbLocked = binaryReader.ReadBoolean();
                            if (release >= 115)
                            {
                                var num = 13;
                                for (var index = 0; index < num; ++index)
                                    player1.hideInfo[index] = binaryReader.ReadBoolean();
                            }

                            if (release >= 98)
                                player1.anglerQuestsFinished = binaryReader.ReadInt32();
                            if (release >= 162)
                            {
                                for (var index = 0; index < 4; ++index)
                                    player1.DpadRadial.Bindings[index] = binaryReader.ReadInt32();
                            }

                            if (release >= 164)
                            {
                                var num = 8;
                                if (release >= 167)
                                    num = 10;
                                for (var index = 0; index < num; ++index)
                                    player1.builderAccStatus[index] = binaryReader.ReadInt32();
                            }

                            if (release >= 181)
                                player1.bartenderQuestLog = binaryReader.ReadInt32();
                            player1.skinVariant = (int) MathHelper.Clamp((float) player1.skinVariant, 0.0f, 9f);
                            for (var index = 3; index < 8 + player1.extraAccessorySlots; ++index)
                            {
                                var type = player1.armor[index].type;
                                if (type == 908)
                                    player1.lavaMax += 420;
                                if (type == 906)
                                    player1.lavaMax += 420;
                                if (player1.wingsLogic == 0 && player1.armor[index].wingSlot >= (sbyte) 0)
                                    player1.wingsLogic = (int) player1.armor[index].wingSlot;
                                if (type == 158 || type == 396 || (type == 1250 || type == 1251) || type == 1252)
                                    player1.noFallDmg = true;
                                player1.lavaTime = player1.lavaMax;
                            }
                        }
                    }
                }

                player1.PlayerFrame();
                player1.loadStatus = 0;
                playerFileData.Player = player1;
                return playerFileData;
            }
            catch
            {
            }

            var player2 = new Player();
            player2.loadStatus = 2;
            if (player1.name != "")
            {
                player2.name = player1.name;
            }
            else
            {
                var strArray = playerPath.Split(Path.DirectorySeparatorChar);
                player1.name = strArray[strArray.Length - 1].Split('.')[0];
            }

            playerFileData.Player = player2;
            return playerFileData;
        }

        public static PlayerFileData GetFileData(string file, bool cloudSave)
        {
            if (file == null || cloudSave && SocialAPI.Cloud == null)
                return (PlayerFileData) null;
            var playerFileData = Player.LoadPlayer(file, cloudSave);
            if (playerFileData.Player == null)
                return (PlayerFileData) null;
            if (playerFileData.Player.loadStatus != 0 && playerFileData.Player.loadStatus != 1)
            {
                if (FileUtilities.Exists(file + ".bak", cloudSave))
                    FileUtilities.Move(file + ".bak", file, cloudSave, true);
                playerFileData = Player.LoadPlayer(file, cloudSave);
                if (playerFileData.Player == null)
                    return (PlayerFileData) null;
            }

            return playerFileData;
        }

        public Color GetHairColor(bool useLighting = true)
        {
            var color = Lighting.GetColor((int) ((double) this.position.X + (double) this.width * 0.5) / 16,
                (int) (((double) this.position.Y + (double) this.height * 0.25) / 16.0));
            return GameShaders.Hair.GetColor((short) this.hairDye, this, useLighting ? color : Color.White);
        }

        public bool HasItem(int type)
        {
            for (var index = 0; index < 58; ++index)
            {
                if (type == this.inventory[index].type && this.inventory[index].stack > 0)
                    return true;
            }

            return false;
        }

        public int FindItem(int netid)
        {
            for (var index = 0; index < 58; ++index)
            {
                if (netid == this.inventory[index].netID && this.inventory[index].stack > 0)
                    return index;
            }

            return -1;
        }

        public int FindItem(List<int> netids)
        {
            for (var index = 0; index < 58; ++index)
            {
                if (this.inventory[index].stack > 0 && netids.Contains(this.inventory[index].netID))
                    return index;
            }

            return -1;
        }

        public int FindItem(bool[] validtypes)
        {
            for (var index = 0; index < 58; ++index)
            {
                if (this.inventory[index].stack > 0 && validtypes[this.inventory[index].type])
                    return index;
            }

            return -1;
        }

        public Player()
        {
            this.width = 20;
            this.height = 42;
            this.name = string.Empty;
            this.bodyFrame.Width = 40;
            this.bodyFrame.Height = 56;
            this.legFrame.Width = 40;
            this.legFrame.Height = 56;
            for (var index = 0; index < 59; ++index)
            {
                if (index < this.armor.Length)
                    this.armor[index] = new Item();
                this.inventory[index] = new Item();
            }

            for (var index = 0; index < 40; ++index)
            {
                this.bank.item[index] = new Item();
                this.bank2.item[index] = new Item();
                this.bank3.item[index] = new Item();
            }

            for (var index = 0; index < this.dye.Length; ++index)
                this.dye[index] = new Item();
            for (var index = 0; index < this.miscEquips.Length; ++index)
                this.miscEquips[index] = new Item();
            for (var index = 0; index < this.miscDyes.Length; ++index)
                this.miscDyes[index] = new Item();
            this.trashItem = new Item();
            this.grappling[0] = -1;
            this.inventory[0].SetDefaults(3507, false);
            this.inventory[1].SetDefaults(3509, false);
            this.inventory[2].SetDefaults(3506, false);
            this.statManaMax = 20;
            this.extraAccessory = false;
            if (Main.cEd)
                this.inventory[3].SetDefaults(603, false);
            for (var index = 0; index < 470; ++index)
            {
                this.adjTile[index] = false;
                this.oldAdjTile[index] = false;
            }

            this.hitTile = new HitTile();
            this.mount = new Mount();
        }

        public void TeleportationPotion()
        {
            var canSpawn = false;
            var teleportStartX = 100;
            var teleportRangeX = Main.maxTilesX - 200;
            var teleportStartY = 100;
            var teleportRangeY = Main.maxTilesY - 200;
            var vector2 = this.TestTeleport(ref canSpawn, teleportStartX, teleportRangeX, teleportStartY,
                teleportRangeY);
            if (!canSpawn)
                return;
            var newPos = vector2;
            this.Teleport(newPos, 2, 0);
            this.velocity = Vector2.Zero;
            if (Main.netMode != 2)
                return;
            RemoteClient.CheckSection(this.whoAmI, this.position, 1);
            NetMessage.SendData(65, -1, -1, (NetworkText) null, 0, (float) this.whoAmI, newPos.X, newPos.Y, 3, 0, 0);
        }

        private Vector2 TestTeleport(ref bool canSpawn, int teleportStartX, int teleportRangeX, int teleportStartY,
            int teleportRangeY)
        {
            var num1 = 0;
            var num2 = 0;
            var num3 = 0;
            var width = this.width;
            var Position = new Vector2((float) num2, (float) num3) * 16f +
                               new Vector2((float) (-width / 2 + 8), (float) -this.height);
            while (!canSpawn && num1 < 1000)
            {
                ++num1;
                var index1 = teleportStartX + Main.rand.Next(teleportRangeX);
                var index2 = teleportStartY + Main.rand.Next(teleportRangeY);
                Position = new Vector2((float) index1, (float) index2) * 16f +
                           new Vector2((float) (-width / 2 + 8), (float) -this.height);
                if (!Collision.SolidCollision(Position, width, this.height))
                {
                    if (Main.tile[index1, index2] == null)
                        Main.tile[index1, index2] = new Tile();
                    if ((Main.tile[index1, index2].wall != (byte) 87 || (double) index2 <= Main.worldSurface ||
                         NPC.downedPlantBoss) && (!Main.wallDungeon[(int) Main.tile[index1, index2].wall] ||
                                                  (double) index2 <= Main.worldSurface || NPC.downedBoss3))
                    {
                        var num4 = 0;
                        while (num4 < 100)
                        {
                            if (Main.tile[index1, index2 + num4] == null)
                                Main.tile[index1, index2 + num4] = new Tile();
                            var tile = Main.tile[index1, index2 + num4];
                            Position = new Vector2((float) index1, (float) (index2 + num4)) * 16f +
                                       new Vector2((float) (-width / 2 + 8), (float) -this.height);
                            var vector4 = Collision.SlopeCollision(Position, this.velocity, width, this.height,
                                this.gravDir, false);
                            var flag = !Collision.SolidCollision(Position, width, this.height);
                            if ((double) vector4.Z == (double) this.velocity.X)
                            {
                                var y = (double) this.velocity.Y;
                            }

                            if (flag)
                                ++num4;
                            else if (!tile.active() || tile.inActive() || !Main.tileSolid[(int) tile.type])
                                ++num4;
                            else
                                break;
                        }

                        if (!Collision.LavaCollision(Position, width, this.height) &&
                            (double) Collision.HurtTiles(Position, this.velocity, width, this.height, false).Y <= 0.0)
                        {
                            Collision.SlopeCollision(Position, this.velocity, width, this.height, this.gravDir, false);
                            if (Collision.SolidCollision(Position, width, this.height) && num4 < 99)
                            {
                                var Velocity1 = Vector2.UnitX * 16f;
                                if (!(Collision.TileCollision(Position - Velocity1, Velocity1, this.width, this.height,
                                          false, false, (int) this.gravDir) != Velocity1))
                                {
                                    var Velocity2 = -Vector2.UnitX * 16f;
                                    if (!(Collision.TileCollision(Position - Velocity2, Velocity2, this.width,
                                              this.height, false, false, (int) this.gravDir) != Velocity2))
                                    {
                                        var Velocity3 = Vector2.UnitY * 16f;
                                        if (!(Collision.TileCollision(Position - Velocity3, Velocity3, this.width,
                                                  this.height, false, false, (int) this.gravDir) != Velocity3))
                                        {
                                            var Velocity4 = -Vector2.UnitY * 16f;
                                            if (!(Collision.TileCollision(Position - Velocity4, Velocity4, this.width,
                                                      this.height, false, false, (int) this.gravDir) != Velocity4))
                                            {
                                                canSpawn = true;
                                                var num5 = index2 + num4;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return Position;
        }

        public void GetAnglerReward()
        {
            var newItem1 = new Item();
            newItem1.type = 0;
            var num1 = 1f;
            if (this.anglerQuestsFinished <= 50)
                num1 -= (float) this.anglerQuestsFinished * 0.01f;
            else if (this.anglerQuestsFinished <= 100)
                num1 = (float) (0.5 - (double) (this.anglerQuestsFinished - 50) * 0.00499999988824129);
            else if (this.anglerQuestsFinished <= 150)
                num1 = (float) (0.25 - (double) (this.anglerQuestsFinished - 100) * (1.0 / 500.0));
            if (this.anglerQuestsFinished == 5)
                newItem1.SetDefaults(2428, false);
            else if (this.anglerQuestsFinished == 10)
                newItem1.SetDefaults(2367, false);
            else if (this.anglerQuestsFinished == 15)
                newItem1.SetDefaults(2368, false);
            else if (this.anglerQuestsFinished == 20)
                newItem1.SetDefaults(2369, false);
            else if (this.anglerQuestsFinished == 30)
                newItem1.SetDefaults(2294, false);
            else if (this.anglerQuestsFinished > 75 && Main.rand.Next((int) (250.0 * (double) num1)) == 0)
                newItem1.SetDefaults(2294, false);
            else if (Main.hardMode && this.anglerQuestsFinished > 25 &&
                     Main.rand.Next((int) (100.0 * (double) num1)) == 0)
                newItem1.SetDefaults(2422, false);
            else if (Main.hardMode && this.anglerQuestsFinished > 10 &&
                     Main.rand.Next((int) (70.0 * (double) num1)) == 0)
                newItem1.SetDefaults(2494, false);
            else if (Main.hardMode && this.anglerQuestsFinished > 10 &&
                     Main.rand.Next((int) (70.0 * (double) num1)) == 0)
                newItem1.SetDefaults(3031, false);
            else if (Main.hardMode && this.anglerQuestsFinished > 10 &&
                     Main.rand.Next((int) (70.0 * (double) num1)) == 0)
                newItem1.SetDefaults(3032, false);
            else if (Main.rand.Next((int) (80.0 * (double) num1)) == 0)
                newItem1.SetDefaults(3183, false);
            else if (Main.rand.Next((int) (60.0 * (double) num1)) == 0)
                newItem1.SetDefaults(2360, false);
            else if (Main.rand.Next((int) (40.0 * (double) num1)) == 0)
                newItem1.SetDefaults(2373, false);
            else if (Main.rand.Next((int) (40.0 * (double) num1)) == 0)
                newItem1.SetDefaults(2374, false);
            else if (Main.rand.Next((int) (40.0 * (double) num1)) == 0)
                newItem1.SetDefaults(2375, false);
            else if (Main.rand.Next((int) (40.0 * (double) num1)) == 0)
                newItem1.SetDefaults(3120, false);
            else if (Main.rand.Next((int) (40.0 * (double) num1)) == 0)
                newItem1.SetDefaults(3037, false);
            else if (Main.rand.Next((int) (40.0 * (double) num1)) == 0)
                newItem1.SetDefaults(3096, false);
            else if (Main.rand.Next((int) (40.0 * (double) num1)) == 0)
                newItem1.SetDefaults(2417, false);
            else if (Main.rand.Next((int) (40.0 * (double) num1)) == 0)
            {
                newItem1.SetDefaults(2498, false);
            }
            else
            {
                switch (Main.rand.Next(70))
                {
                    case 0:
                        newItem1.SetDefaults(2442, false);
                        break;
                    case 1:
                        newItem1.SetDefaults(2443, false);
                        break;
                    case 2:
                        newItem1.SetDefaults(2444, false);
                        break;
                    case 3:
                        newItem1.SetDefaults(2445, false);
                        break;
                    case 4:
                        newItem1.SetDefaults(2497, false);
                        break;
                    case 5:
                        newItem1.SetDefaults(2495, false);
                        break;
                    case 6:
                        newItem1.SetDefaults(2446, false);
                        break;
                    case 7:
                        newItem1.SetDefaults(2447, false);
                        break;
                    case 8:
                        newItem1.SetDefaults(2448, false);
                        break;
                    case 9:
                        newItem1.SetDefaults(2449, false);
                        break;
                    case 10:
                        newItem1.SetDefaults(2490, false);
                        break;
                    case 11:
                        newItem1.SetDefaults(2435, false);
                        newItem1.stack = Main.rand.Next(50, 151);
                        break;
                    case 12:
                        newItem1.SetDefaults(2496, false);
                        break;
                    default:
                        switch (Main.rand.Next(3))
                        {
                            case 0:
                                newItem1.SetDefaults(2354, false);
                                newItem1.stack = Main.rand.Next(2, 6);
                                break;
                            case 1:
                                newItem1.SetDefaults(2355, false);
                                newItem1.stack = Main.rand.Next(2, 6);
                                break;
                            default:
                                newItem1.SetDefaults(2356, false);
                                newItem1.stack = Main.rand.Next(2, 6);
                                break;
                        }

                        break;
                }
            }

            newItem1.position = this.Center;
            var obj1 = this.GetItem(this.whoAmI, newItem1, true, false);
            if (obj1.stack > 0)
            {
                var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                    obj1.type, obj1.stack, false, 0, true, false);
                if (Main.netMode == 1)
                    NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }

            if (newItem1.type == 2417)
            {
                var newItem2 = new Item();
                var newItem3 = new Item();
                newItem2.SetDefaults(2418, false);
                newItem2.position = this.Center;
                var obj2 = this.GetItem(this.whoAmI, newItem2, true, false);
                if (obj2.stack > 0)
                {
                    var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        obj2.type, obj2.stack, false, 0, true, false);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }

                newItem3.SetDefaults(2419, false);
                newItem3.position = this.Center;
                var obj3 = this.GetItem(this.whoAmI, newItem3, true, false);
                if (obj3.stack > 0)
                {
                    var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        obj3.type, obj3.stack, false, 0, true, false);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
            }
            else if (newItem1.type == 2498)
            {
                var newItem2 = new Item();
                var newItem3 = new Item();
                newItem2.SetDefaults(2499, false);
                newItem2.position = this.Center;
                var obj2 = this.GetItem(this.whoAmI, newItem2, true, false);
                if (obj2.stack > 0)
                {
                    var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        obj2.type, obj2.stack, false, 0, true, false);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }

                newItem3.SetDefaults(2500, false);
                newItem3.position = this.Center;
                var obj3 = this.GetItem(this.whoAmI, newItem3, true, false);
                if (obj3.stack > 0)
                {
                    var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        obj3.type, obj3.stack, false, 0, true, false);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
            }

            var newItem4 = new Item();
            var num2 =
                (int) ((double) (int) ((double) ((this.anglerQuestsFinished + 50) / 2 * Main.rand.Next(50, 201)) *
                                       0.0149999996647239) * 1.5);
            if (Main.expertMode)
                num2 *= 2;
            if (num2 > 100)
            {
                var num3 = num2 / 100;
                if (num3 > 10)
                    num3 = 10;
                if (num3 < 1)
                    num3 = 1;
                newItem4.SetDefaults(73, false);
                newItem4.stack = num3;
            }
            else
            {
                if (num2 > 99)
                    num2 = 99;
                if (num2 < 1)
                    num2 = 1;
                newItem4.SetDefaults(72, false);
                newItem4.stack = num2;
            }

            newItem4.position = this.Center;
            var obj4 = this.GetItem(this.whoAmI, newItem4, true, false);
            if (obj4.stack > 0)
            {
                var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                    obj4.type, obj4.stack, false, 0, true, false);
                if (Main.netMode == 1)
                    NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }

            if (Main.rand.Next((int) (100.0 * (double) num1)) > 50)
                return;
            var newItem5 = new Item();
            if (Main.rand.Next((int) (15.0 * (double) num1)) == 0)
                newItem5.SetDefaults(2676, false);
            else if (Main.rand.Next((int) (5.0 * (double) num1)) == 0)
                newItem5.SetDefaults(2675, false);
            else
                newItem5.SetDefaults(2674, false);
            if (Main.rand.Next(25) <= this.anglerQuestsFinished)
                ++newItem5.stack;
            if (Main.rand.Next(50) <= this.anglerQuestsFinished)
                ++newItem5.stack;
            if (Main.rand.Next(100) <= this.anglerQuestsFinished)
                ++newItem5.stack;
            if (Main.rand.Next(150) <= this.anglerQuestsFinished)
                ++newItem5.stack;
            if (Main.rand.Next(200) <= this.anglerQuestsFinished)
                ++newItem5.stack;
            if (Main.rand.Next(250) <= this.anglerQuestsFinished)
                ++newItem5.stack;
            newItem5.position = this.Center;
            var obj5 = this.GetItem(this.whoAmI, newItem5, true, false);
            if (obj5.stack <= 0)
                return;
            var number1 = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, obj5.type,
                obj5.stack, false, 0, true, false);
            if (Main.netMode != 1)
                return;
            NetMessage.SendData(21, -1, -1, (NetworkText) null, number1, 1f, 0.0f, 0.0f, 0, 0, 0);
        }

        public void GetDyeTraderReward()
        {
            var intList = new List<int>()
            {
                3560,
                3028,
                3041,
                3040,
                3025,
                3190,
                3027,
                3026,
                3554,
                3553,
                3555,
                2872,
                3534,
                2871
            };
            if (Main.hardMode)
            {
                intList.Add(3039);
                intList.Add(3038);
                intList.Add(3598);
                intList.Add(3597);
                intList.Add(3600);
                intList.Add(3042);
                intList.Add(3533);
                intList.Add(3561);
                if (NPC.downedMechBossAny)
                {
                    intList.Add(2883);
                    intList.Add(2869);
                    intList.Add(2873);
                    intList.Add(2870);
                }

                if (NPC.downedPlantBoss)
                {
                    intList.Add(2878);
                    intList.Add(2879);
                    intList.Add(2884);
                    intList.Add(2885);
                }

                if (NPC.downedMartians)
                {
                    intList.Add(2864);
                    intList.Add(3556);
                }

                if (NPC.downedMoonlord)
                    intList.Add(3024);
            }

            var Type = intList[Main.rand.Next(intList.Count)];
            var newItem = new Item();
            newItem.SetDefaults(Type, false);
            newItem.stack = 3;
            newItem.position = this.Center;
            var obj = this.GetItem(this.whoAmI, newItem, true, false);
            if (obj.stack <= 0)
                return;
            var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, obj.type,
                obj.stack, false, 0, true, false);
            if (Main.netMode != 1)
                return;
            NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
        }

        public bool CheckMana(int amount, bool pay = false, bool blockQuickMana = false)
        {
            var num = (int) ((double) amount * (double) this.manaCost);
            if (this.statMana >= num)
            {
                if (pay)
                    this.statMana -= num;
                return true;
            }

            if (!this.manaFlower || blockQuickMana)
                return false;
            this.QuickMana();
            if (this.statMana < num)
                return false;
            if (pay)
                this.statMana -= num;
            return true;
        }

        public void TryPortalJumping()
        {
            if (this.mount.Active || this.dead)
                return;
            PortalHelper.TryGoingThroughPortals((Entity) this);
        }

        public bool ConsumeSolarFlare()
        {
            if (!this.setSolar || this.solarShields <= 0)
                return false;
            if (Main.netMode == 1 && this.whoAmI != Main.myPlayer)
                return true;
            --this.solarShields;
            for (var b = 0; b < 22; ++b)
            {
                if (this.buffType[b] >= 170 && this.buffType[b] <= 172)
                    this.DelBuff(b);
            }

            if (this.solarShields > 0)
                this.AddBuff(170 + this.solarShields - 1, 5, false);
            this.solarCounter = 0;
            return true;
        }

        public void KeyDoubleTap(int keyDir)
        {
            var num = 0;
            if (Main.ReversedUpDownArmorSetBonuses)
                num = 1;
            if (keyDir != num)
                return;
            if (this.setVortex && !this.mount.Active)
                this.vortexStealthActive = !this.vortexStealthActive;
            if (this.setStardust)
                this.MinionRestTargetAim();
            if (!this.setForbidden)
                return;
            this.MinionRestTargetAim();
            if (this.setForbiddenCooldownLocked)
                return;
            this.CommandForbiddenStorm();
        }

        public void UpdateForbiddenSetLock()
        {
            var intList = new List<int>();
            for (var index = 0; index < 1000; ++index)
            {
                var projectile = Main.projectile[index];
                if (projectile.active && projectile.type == 656 && projectile.owner == this.whoAmI)
                    intList.Add(index);
            }

            this.setForbiddenCooldownLocked = intList.Count > 1;
        }

        public void CommandForbiddenStorm()
        {
            var intList = new List<int>();
            for (var index = 0; index < 1000; ++index)
            {
                var projectile = Main.projectile[index];
                if (projectile.active && projectile.type == 656 && projectile.owner == this.whoAmI)
                    intList.Add(index);
            }

            var flag1 = StrayMethods.CanSpawnSandstormFriendly(this.MinionRestTargetPoint, 30, 30);
            var flag2 = this.MinionRestTargetPoint == Vector2.Zero;
            var center = this.Center;
            var vector2_1 = this.MinionRestTargetPoint;
            if (flag2)
                vector2_1 = center;
            var flag3 = false;
            var samples = new float[10];
            var v = vector2_1 - center;
            Collision.LaserScan(center, v.SafeNormalize(Vector2.Zero), 60f, v.Length(), samples);
            var num1 = 0.0f;
            for (var index = 0; index < samples.Length; ++index)
            {
                if ((double) samples[index] > (double) num1)
                    num1 = samples[index];
            }

            foreach (var num2 in samples)
            {
                if ((double) Math.Abs(num2 - v.Length()) < 10.0)
                {
                    flag3 = true;
                    break;
                }
            }

            if (intList.Count <= 1)
            {
                var Position1 = center + v.SafeNormalize(Vector2.Zero) * num1;
                var vector2_2 = Position1 - center;
                if ((double) vector2_2.Length() > 0.0)
                {
                    var num2 = 0.0f;
                    while ((double) num2 < (double) vector2_2.Length())
                    {
                        var Position2 = center + vector2_2 * (num2 / vector2_2.Length());
                        var dust = Main.dust[Dust.NewDust(Position2, 0, 0, 269, 0.0f, 0.0f, 0, new Color(), 1f)];
                        dust.position = Position2;
                        dust.fadeIn = 0.5f;
                        dust.scale = 0.7f;
                        dust.velocity *= 0.4f;
                        dust.noLight = true;
                        num2 += 15f;
                    }
                }

                var num3 = 0.0f;
                while ((double) num3 < 6.28318548202515)
                {
                    var dust = Main.dust[Dust.NewDust(Position1, 0, 0, 269, 0.0f, 0.0f, 0, new Color(), 1f)];
                    dust.position = Position1;
                    dust.fadeIn = 1f;
                    dust.scale = 0.3f;
                    dust.noLight = true;
                    num3 += 0.2094395f;
                }
            }

            var flag4 = flag1 & intList.Count <= 1 & flag3;
            if (flag4)
            {
                flag4 = this.CheckMana(20, true, false);
                if (flag4)
                    this.manaRegenDelay = (int) this.maxRegenDelay;
            }

            if (!flag4)
                return;
            foreach (var index in intList)
            {
                var projectile = Main.projectile[index];
                if ((double) projectile.ai[0] < 780.0)
                {
                    projectile.ai[0] = (float) (780.0 + (double) projectile.ai[0] % 60.0);
                    projectile.netUpdate = true;
                }
            }

            var Damage = (int) (20.0 * (1.0 + (double) this.magicDamage + (double) this.minionDamage - 2.0));
            var projectile1 =
                Main.projectile[
                    Projectile.NewProjectile(this.MinionRestTargetPoint, Vector2.Zero, 656, Damage, 0.0f, Main.myPlayer,
                        0.0f, 0.0f)];
        }

        public void KeyHoldDown(int keyDir, int holdTime)
        {
            var num = 0;
            if (Main.ReversedUpDownArmorSetBonuses)
                num = 1;
            if (keyDir != num)
                return;
            if (this.setStardust && holdTime >= 60)
                this.MinionRestTargetPoint = Vector2.Zero;
            if (!this.setForbidden || holdTime < 60)
                return;
            this.MinionRestTargetPoint = Vector2.Zero;
        }

        public void MinionNPCTargetAim()
        {
            var mouseWorld = Main.MouseWorld;
            var index1 = -1;
            for (var index2 = 0; index2 < 200; ++index2)
            {
                if (Main.npc[index2].CanBeChasedBy((object) this, false) &&
                    (index1 == -1 || (double) Main.npc[index2].Hitbox.Distance(mouseWorld) <
                     (double) Main.npc[index1].Hitbox.Distance(mouseWorld)))
                    index1 = index2;
            }

            if (this.MinionAttackTargetNPC == index1)
                this.MinionAttackTargetNPC = -1;
            else
                this.MinionAttackTargetNPC = index1;
        }

        public void MinionRestTargetAim()
        {
            var mouseWorld = Main.MouseWorld;
            var y = mouseWorld.Y;
            var i = (int) mouseWorld.X / 16;
            var index1 = (int) y / 16;
            var num1 = 0;
            if (Main.tile[i, index1].nactive() && Main.tileSolid[(int) Main.tile[i, index1].type] &&
                !Main.tileSolidTop[(int) Main.tile[i, index1].type])
            {
                var num2 = 0;
                for (var index2 = 0; index2 > -20 && index1 + index2 > 1; --index2)
                {
                    var index3 = index1 + index2;
                    if (Main.tile[i, index3].nactive() && Main.tileSolid[(int) Main.tile[i, index3].type] &&
                        !Main.tileSolidTop[(int) Main.tile[i, index3].type])
                    {
                        num2 = index2;
                    }
                    else
                    {
                        num2 = index2;
                        break;
                    }
                }

                var num3 = 0;
                for (var index2 = 0; index2 < 20 && index1 + index2 < Main.maxTilesY; ++index2)
                {
                    var index3 = index1 + index2;
                    if (Main.tile[i, index3].nactive() && Main.tileSolid[(int) Main.tile[i, index3].type] &&
                        !Main.tileSolidTop[(int) Main.tile[i, index3].type])
                    {
                        num3 = index2;
                    }
                    else
                    {
                        num3 = index2;
                        break;
                    }
                }

                num1 = num3 <= -num2 ? num3 + 3 : num2 - 2;
            }

            var num4 = index1 + num1;
            var flag = false;
            for (var j = num4; j < num4 + 5; ++j)
            {
                if (WorldGen.SolidTileAllowBottomSlope(i, j))
                    flag = true;
            }

            while (!flag)
            {
                ++num4;
                for (var j = num4; j < num4 + 5; ++j)
                {
                    if (WorldGen.SolidTileAllowBottomSlope(i, j))
                        flag = true;
                }
            }

            var Other = new Vector2((float) (i * 16 + 8), (float) (num4 * 16));
            if ((double) this.Distance(Other) > 1000.0)
                return;
            this.MinionRestTargetPoint = Other;
        }

        public void UpdateMinionTarget()
        {
            if (this.whoAmI != Main.myPlayer)
                return;
            if ((double) this.Distance(this.MinionRestTargetPoint) > 1000.0)
                this.MinionRestTargetPoint = Vector2.Zero;
            if (this.MinionAttackTargetNPC != -1 &&
                (!Main.npc[this.MinionAttackTargetNPC].CanBeChasedBy((object) this, false) ||
                 (double) Main.npc[this.MinionAttackTargetNPC].Hitbox.Distance(this.Center) > 3000.0))
                this.MinionAttackTargetNPC = -1;
            if (this.stardustGuardian && this.HasMinionRestTarget)
            {
                var minionRestTargetPoint = this.MinionRestTargetPoint;
                var num1 = (float) this.miscCounter / 150f;
                var num2 = 2.094395f;
                for (var index1 = 0; index1 < 3; ++index1)
                {
                    var index2 = Dust.NewDust(minionRestTargetPoint, 0, 0, 135, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity = Vector2.Zero;
                    Main.dust[index2].noLight = true;
                    Main.dust[index2].position = minionRestTargetPoint +
                                                 ((float) ((double) num1 * 6.28318548202515 +
                                                           (double) num2 * (double) index1)).ToRotationVector2() * 4f;
                    Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cPet, this);
                }
            }

            if (this.MinionAttackTargetNPC == -1)
                return;
            var center = Main.npc[this.MinionAttackTargetNPC].Center;
            var num3 = (float) this.miscCounter / 60f;
            var num4 = 2.094395f;
            for (var index1 = 0; index1 < 3; ++index1)
            {
                var index2 = Dust.NewDust(center, 0, 0, 272, 0.0f, 0.0f, 100, new Color(), 0.5f);
                Main.dust[index2].noGravity = true;
                Main.dust[index2].velocity = Vector2.Zero;
                Main.dust[index2].noLight = true;
                Main.dust[index2].position =
                    center + ((float) ((double) num3 * 6.28318548202515 + (double) num4 * (double) index1))
                    .ToRotationVector2() * 12f;
            }
        }

        public void NebulaLevelup(int type)
        {
            if (this.whoAmI != Main.myPlayer)
                return;
            var time1 = 480;
            for (var b = 0; b < 22; ++b)
            {
                if (this.buffType[b] >= type && this.buffType[b] < type + 3)
                    this.DelBuff(b);
            }

            switch (type)
            {
                case 173:
                    this.nebulaLevelLife = (int) MathHelper.Clamp((float) (this.nebulaLevelLife + 1), 0.0f, 3f);
                    this.AddBuff(type + this.nebulaLevelLife - 1, time1, true);
                    break;
                case 176:
                    this.nebulaLevelMana = (int) MathHelper.Clamp((float) (this.nebulaLevelMana + 1), 0.0f, 3f);
                    this.AddBuff(type + this.nebulaLevelMana - 1, time1, true);
                    break;
                case 179:
                    this.nebulaLevelDamage = (int) MathHelper.Clamp((float) (this.nebulaLevelDamage + 1), 0.0f, 3f);
                    this.AddBuff(type + this.nebulaLevelDamage - 1, time1, true);
                    break;
            }
        }

        public void UpdateTouchingTiles()
        {
            this.TouchedTiles.Clear();
            var pointList1 = (List<Point>) null;
            var pointList2 = (List<Point>) null;
            if (!Collision.IsClearSpotTest(this.position + this.velocity, 16f, this.width, this.height, false, false,
                (int) this.gravDir, true, true))
                pointList1 = Collision.FindCollisionTile(Math.Sign(this.velocity.Y) == 1 ? 2 : 3,
                    this.position + this.velocity, 16f, this.width, this.height, false, false, (int) this.gravDir, true,
                    false);
            if (!Collision.IsClearSpotTest(this.position, Math.Abs(this.velocity.Y), this.width, this.height, false,
                false, (int) this.gravDir, true, true))
                pointList2 = Collision.FindCollisionTile(Math.Sign(this.velocity.Y) == 1 ? 2 : 3, this.position,
                    Math.Abs(this.velocity.Y), this.width, this.height, false, false, (int) this.gravDir, true, true);
            if (pointList1 != null && pointList2 != null)
            {
                for (var index = 0; index < pointList2.Count; ++index)
                {
                    if (!pointList1.Contains(pointList2[index]))
                        pointList1.Add(pointList2[index]);
                }
            }

            if (pointList1 == null && pointList2 != null)
                pointList1 = pointList2;
            if (pointList1 == null)
                return;
            this.TouchedTiles = pointList1;
        }

        public static class Hooks
        {
            public static event Action<Player> OnEnterWorld;

            public static void PlayerConnect(int playerIndex)
            {
                PressurePlateHelper.ResetPlayer(playerIndex);
            }

            public static void PlayerDisconnect(int playerIndex)
            {
                PressurePlateHelper.ResetPlayer(playerIndex);
            }

            public static void EnterWorld(int playerIndex)
            {
                if (Player.Hooks.OnEnterWorld == null)
                    return;
                Player.Hooks.OnEnterWorld(Main.player[playerIndex]);
            }
        }

        public class SmartCursorSettings
        {
            public static bool SmartBlocksEnabled = false;
            public static bool SmartWallReplacement = true;
            public static bool SmartAxeAfterPickaxe = false;
        }

        public class SelectionRadial
        {
            private int _SelectedBinding = -1;
            public int RadialCount;
            public int[] Bindings;
            public Player.SelectionRadial.SelectionMode Mode;

            public int SelectedBinding
            {
                get { return this._SelectedBinding; }
            }

            public int SelectedItem
            {
                get
                {
                    if (this._SelectedBinding == -1)
                        return -1;
                    return this.Bindings[this._SelectedBinding];
                }
            }

            public SelectionRadial(
                Player.SelectionRadial.SelectionMode mode = Player.SelectionRadial.SelectionMode.Dpad4)
            {
                this.Mode = mode;
                var num = 0;
                switch (mode)
                {
                    case Player.SelectionRadial.SelectionMode.Dpad4:
                        num = 4;
                        break;
                    case Player.SelectionRadial.SelectionMode.RadialCircular:
                        num = 10;
                        break;
                    case Player.SelectionRadial.SelectionMode.RadialQuicks:
                        num = 3;
                        break;
                }

                this.RadialCount = num;
                this.Bindings = new int[this.RadialCount];
                for (var index = 0; index < this.RadialCount; ++index)
                    this.Bindings[index] = -1;
            }

            public void Update()
            {
                switch (this.Mode)
                {
                    case Player.SelectionRadial.SelectionMode.Dpad4:
                        if (PlayerInput.Triggers.JustPressed.DpadRadial1)
                            this.ChangeSelection(0);
                        if (PlayerInput.Triggers.JustPressed.DpadRadial2)
                            this.ChangeSelection(1);
                        if (PlayerInput.Triggers.JustPressed.DpadRadial3)
                            this.ChangeSelection(2);
                        if (!PlayerInput.Triggers.JustPressed.DpadRadial4)
                            break;
                        this.ChangeSelection(3);
                        break;
                    case Player.SelectionRadial.SelectionMode.RadialCircular:
                    case Player.SelectionRadial.SelectionMode.RadialQuicks:
                        for (var index = 0; index < this.RadialCount; ++index)
                            this.Bindings[index] = index;
                        if ((this.Mode != Player.SelectionRadial.SelectionMode.RadialCircular ||
                             !PlayerInput.Triggers.Current.RadialHotbar) &&
                            (this.Mode != Player.SelectionRadial.SelectionMode.RadialQuicks ||
                             !PlayerInput.Triggers.Current.RadialQuickbar))
                            break;
                        var flag = this.Mode == Player.SelectionRadial.SelectionMode.RadialCircular;
                        var num = (float) (6.28318548202515 / (double) this.RadialCount / 2.0);
                        var v = PlayerInput.GamepadThumbstickRight.RotatedBy((double) num - 1.57079637050629,
                            new Vector2());
                        if ((double) v.Length() == 0.0)
                            v = PlayerInput.GamepadThumbstickLeft.RotatedBy((double) num - 1.57079637050629,
                                new Vector2());
                        var to = -1;
                        if ((double) v.Length() > 0.300000011920929)
                        {
                            to = (int) ((double) (v.ToRotation() + 3.141593f) /
                                        (6.28318548202515 / (double) this.RadialCount));
                            if (to >= this.RadialCount)
                                to -= this.RadialCount;
                        }

                        if (to == -1 && flag || this._SelectedBinding == to || to == -1 && v != Vector2.Zero)
                            break;
                        this.ChangeSelection(to);
                        break;
                }
            }

            public void ChangeBinding(int itemSlot)
            {
                if (itemSlot < 0 || itemSlot >= 50 || this.Mode != Player.SelectionRadial.SelectionMode.Dpad4)
                    return;
                if (PlayerInput.Triggers.JustPressed.DpadRadial1)
                    this.Bind(itemSlot, 0);
                if (PlayerInput.Triggers.JustPressed.DpadRadial2)
                    this.Bind(itemSlot, 1);
                if (PlayerInput.Triggers.JustPressed.DpadRadial3)
                    this.Bind(itemSlot, 2);
                if (!PlayerInput.Triggers.JustPressed.DpadRadial4)
                    return;
                this.Bind(itemSlot, 3);
            }

            public void ChangeSelection(int to)
            {
                if (this._SelectedBinding == to)
                    this._SelectedBinding = -1;
                else
                    this._SelectedBinding = to;
            }

            private void Bind(int itemslot, int radialslot)
            {
                this.ChangeSelection(-1);
                if (this.Bindings[radialslot] == itemslot)
                {
                    this.Bindings[radialslot] = -1;
                }
                else
                {
                    for (var index = 0; index < this.RadialCount; ++index)
                    {
                        if (this.Bindings[index] == itemslot)
                            this.Bindings[index] = -1;
                    }

                    this.Bindings[radialslot] = itemslot;
                }
            }

            public int GetDrawMode(int itemslot)
            {
                if (this.SelectedBinding != -1 && this.Bindings[this.SelectedBinding] == itemslot)
                    return 2;
                for (var index = 0; index < this.RadialCount; ++index)
                {
                    if (this.Bindings[index] == itemslot)
                        return 1;
                }

                return 0;
            }

            public void CopyTo(Player.SelectionRadial that)
            {
                that._SelectedBinding = this._SelectedBinding;
                that.Mode = this.Mode;
                that.RadialCount = this.RadialCount;
                Array.Resize<int>(ref that.Bindings, this.RadialCount);
                for (var index = 0; index < this.RadialCount; ++index)
                    that.Bindings[index] = this.Bindings[index];
            }

            public enum SelectionMode
            {
                Dpad4,
                RadialCircular,
                RadialQuicks,
            }
        }

        public struct OverheadMessage
        {
            public string chatText;
            public TextSnippet[] snippets;
            public Vector2 messageSize;
            public int timeLeft;

            public void NewMessage(string message, int displayTime)
            {
                this.chatText = message;
                this.snippets = ChatManager.ParseMessage(this.chatText, Color.White).ToArray();
                this.messageSize = ChatManager.GetStringSize(Main.fontMouseText, this.snippets, Vector2.One, -1f);
                this.timeLeft = displayTime;
            }
        }
    }
}