// Decompiled with JetBrains decompiler
// Type: Terraria.NPC
// Assembly: Terraria, Version=1.3.5.1, Culture=neutral, PublicKeyToken=null
// MVID: E90A5A2F-CD10-4A2C-9D2A-6B036D4E8877
// Assembly location: E:\Decompile\Terraria\Terraria.exe

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using ReLogic.Utilities;
using System;
using System.Collections.Generic;
using Terraria.Audio;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Events;
using Terraria.GameContent.UI;
using Terraria.ID;
using Terraria.Localization;
using Terraria.Utilities;
using Terraria.World.Generation;

namespace Terraria
{
    public class NPC : Entity
    {
        public static readonly int[,,,] MoonLordAttacksArray = NPC.InitializeMoonLordAttacks();
        public static readonly int[,] MoonLordAttacksArray2 = NPC.InitializeMoonLordAttacks2();
        public static int MoonLordCountdown = 0;
        public static int immuneTime = 20;
        public static int maxAI = 4;
        public static int goldCritterChance = 150;
        public static int[] killCount = new int[580];
        public static float waveKills = 0.0f;
        public static int waveNumber = 0;
        public static bool taxCollector = false;
        private static int spawnSpaceX = 3;
        private static int spawnSpaceY = 3;
        private static float gravity = 0.3f;
        private static int maxAttack = 20;
        private static int[] attackNPC = new int[NPC.maxAttack];
        public static int fireFlyFriendly = 0;
        public static int fireFlyChance = 0;
        public static int fireFlyMultiple = 0;
        public static int butterflyChance = 0;
        public static int golemBoss = -1;
        public static int plantBoss = -1;
        public static int crimsonBoss = -1;
        public static int sWidth = 1920;
        public static int sHeight = 1080;
        private static int spawnRangeX = (int) ((double) (NPC.sWidth / 16) * 0.7);
        private static int spawnRangeY = (int) ((double) (NPC.sHeight / 16) * 0.7);
        public static int safeRangeX = (int) ((double) (NPC.sWidth / 16) * 0.52);
        public static int safeRangeY = (int) ((double) (NPC.sHeight / 16) * 0.52);
        private static int activeRangeX = (int) ((double) NPC.sWidth * 2.1);
        private static int activeRangeY = (int) ((double) NPC.sHeight * 2.1);
        private static int townRangeX = NPC.sWidth;
        private static int townRangeY = NPC.sHeight;
        private static bool noSpawnCycle = false;
        private static int activeTime = 750;
        private static int defaultSpawnRate = 600;
        private static int defaultMaxSpawns = 5;
        public static bool savedTaxCollector = false;
        public static bool savedGoblin = false;
        public static bool savedWizard = false;
        public static bool savedMech = false;
        public static bool savedAngler = false;
        public static bool savedStylist = false;
        public static bool savedBartender = false;
        public static bool downedBoss1 = false;
        public static bool downedBoss2 = false;
        public static bool downedBoss3 = false;
        public static bool downedQueenBee = false;
        public static bool downedSlimeKing = false;
        public static bool downedGoblins = false;
        public static bool downedFrost = false;
        public static bool downedPirates = false;
        public static bool downedClown = false;
        public static bool downedPlantBoss = false;
        public static bool downedGolemBoss = false;
        public static bool downedMartians = false;
        public static bool downedFishron = false;
        public static bool downedHalloweenTree = false;
        public static bool downedHalloweenKing = false;
        public static bool downedChristmasIceQueen = false;
        public static bool downedChristmasTree = false;
        public static bool downedChristmasSantank = false;
        public static bool downedAncientCultist = false;
        public static bool downedMoonlord = false;
        public static bool downedTowerSolar = false;
        public static bool downedTowerVortex = false;
        public static bool downedTowerNebula = false;
        public static bool downedTowerStardust = false;
        public static int ShieldStrengthTowerSolar = 0;
        public static int ShieldStrengthTowerVortex = 0;
        public static int ShieldStrengthTowerNebula = 0;
        public static int ShieldStrengthTowerStardust = 0;
        public static int LunarShieldPowerNormal = 100;
        public static int LunarShieldPowerExpert = 150;
        public static bool TowerActiveSolar = false;
        public static bool TowerActiveVortex = false;
        public static bool TowerActiveNebula = false;
        public static bool TowerActiveStardust = false;
        public static bool LunarApocalypseIsUp = false;
        public static bool downedMechBossAny = false;
        public static bool downedMechBoss1 = false;
        public static bool downedMechBoss2 = false;
        public static bool downedMechBoss3 = false;
        public static bool[] npcsFoundForCheckActive = new bool[580];
        private static int spawnRate = NPC.defaultSpawnRate;
        private static int maxSpawns = NPC.defaultMaxSpawns;
        public static bool travelNPC = false;
        public static int[,] cavernMonsterType = new int[2, 3];
        private static int ignorePlayerInteractions = 0;
        private float waterMovementSpeed = 0.5f;
        private float lavaMovementSpeed = 0.5f;
        private float honeyMovementSpeed = 0.25f;
        public Vector2 visualOffset = Vector2.Zero;
        public short releaseOwner = (short) byte.MaxValue;
        public bool[] playerInteraction = new bool[256];
        public int lastInteraction = (int) byte.MaxValue;
        public float takenDamageMultiplier = 1f;
        private byte[] streamPlayer = new byte[(int) byte.MaxValue];
        public Vector2[] oldPos = new Vector2[10];
        public float[] oldRot = new float[10];
        public int realLife = -1;
        private string _givenName = "";
        public float npcSlots = 1f;
        public int[] buffType = new int[5];
        public int[] buffTime = new int[5];
        public bool[] buffImmune = new bool[206];
        public int lifeRegenExpectedLossPerSecond = -1;
        public bool chaseable = true;
        public bool canGhostHeal = true;
        public int[] immune = new int[256];
        public int directionY = 1;
        public float[] ai = new float[NPC.maxAI];
        public float[] localAI = new float[NPC.maxAI];
        public int target = -1;
        public float scale = 1f;
        public float knockBackResist = 1f;
        public int spriteDirection = -1;
        public int homeTileX = -1;
        public int homeTileY = -1;
        public int oldHomeTileX = -1;
        public int oldHomeTileY = -1;
        private const int NPC_TARGETS_START = 300;
        public const int MaxMoonLordCountdown = 3600;
        public const float nameOverIncrement = 0.025f;
        public const float nameOverDistance = 400f;
        public const int maxBuffs = 5;
        public const int breathMax = 200;
        public int teleportStyle;
        public float teleportTime;
        public int netSpam;
        public float nameOver;
        public bool SpawnedFromStatue;
        public bool dripping;
        public bool drippingSlime;
        public int altTexture;
        public short catchItem;
        public int rarity;
        public float gfxOffY;
        public float stepSpeed;
        public bool teleporting;
        public bool stairFall;
        private byte netStream;
        private byte npcNameLookup;
        public bool setFrameSize;
        public int netSkip;
        public bool netAlways;
        public bool dontCountMe;
        public bool midas;
        public bool ichor;
        public bool onFire;
        public bool onFire2;
        public bool onFrostBurn;
        public bool poisoned;
        public bool venom;
        public bool shadowFlame;
        public bool soulDrain;
        public int lifeRegen;
        public int lifeRegenCount;
        public bool confused;
        public bool loveStruck;
        public bool stinky;
        public bool dryadWard;
        public bool immortal;
        public bool javelined;
        public bool celled;
        public bool dryadBane;
        public bool daybreak;
        public bool dontTakeDamageFromHostiles;
        public bool betsysCurse;
        public bool oiled;
        public int soundDelay;
        public int type;
        public int aiAction;
        public int aiStyle;
        public bool justHit;
        public int timeLeft;
        public int damage;
        public int defense;
        public int defDamage;
        public int defDefense;
        public bool coldDamage;
        public bool trapImmune;
        public LegacySoundStyle HitSound;
        public LegacySoundStyle DeathSound;
        public int life;
        public int lifeMax;
        public Microsoft.Xna.Framework.Rectangle targetRect;
        public double frameCounter;
        public Microsoft.Xna.Framework.Rectangle frame;
        public Color color;
        public int alpha;
        public bool hide;
        public int oldDirectionY;
        public int oldTarget;
        public float rotation;
        public bool noGravity;
        public bool noTileCollide;
        public bool netUpdate;
        public bool netUpdate2;
        public bool collideX;
        public bool collideY;
        public bool boss;
        public bool behindTiles;
        public bool lavaImmune;
        public float value;
        public float extraValue;
        public bool dontTakeDamage;
        public int netID;
        public bool townNPC;
        public bool homeless;
        public bool oldHomeless;
        public bool friendly;
        public bool closeDoor;
        public int doorX;
        public int doorY;
        public int friendlyRegen;
        public int breath;
        public int breathCounter;
        public bool reflectingProjectiles;
        public int lastPortalColorIndex;

        public bool CanTalk
        {
            get
            {
                if ((this.townNPC || this.type == 453) && this.aiStyle == 7)
                    return (double) this.velocity.Y == 0.0;
                return false;
            }
        }

        public bool HasValidTarget
        {
            get
            {
                if (this.HasPlayerTarget && Main.player[this.target].active &&
                    (!Main.player[this.target].dead && !Main.player[this.target].ghost))
                    return true;
                if (this.SupportsNPCTargets && this.HasNPCTarget)
                    return Main.npc[this.TranslatedTargetIndex].active;
                return false;
            }
        }

        public bool HasPlayerTarget
        {
            get
            {
                if (this.target >= 0)
                    return this.target < (int) byte.MaxValue;
                return false;
            }
        }

        public bool HasNPCTarget
        {
            get
            {
                if (this.target >= 300)
                    return this.target < 500;
                return false;
            }
        }

        public bool SupportsNPCTargets
        {
            get { return NPCID.Sets.UsesNewTargetting[this.type]; }
        }

        public int TranslatedTargetIndex
        {
            get
            {
                if (this.HasNPCTarget)
                    return this.target - 300;
                return this.target;
            }
        }

        public int WhoAmIToTargettingIndex
        {
            get { return this.whoAmI + 300; }
        }

        public NPCAimedTarget GetTargetData(bool ignorePlayerTankPets = true)
        {
            if (!this.HasValidTarget)
                return new NPCAimedTarget();
            if (this.SupportsNPCTargets && this.HasNPCTarget)
                return new NPCAimedTarget(Main.npc[this.TranslatedTargetIndex]);
            return new NPCAimedTarget(Main.player[this.target], ignorePlayerTankPets);
        }

        public static int[,,,] InitializeMoonLordAttacks()
        {
            int[,,,] numArray;
            if (NPC.MoonLordAttacksArray != null)
            {
                numArray = NPC.MoonLordAttacksArray;
                for (var index1 = 0; index1 < numArray.GetLength(0); ++index1)
                {
                    for (var index2 = 0; index2 < numArray.GetLength(1); ++index2)
                    {
                        for (var index3 = 0; index3 < numArray.GetLength(2); ++index3)
                        {
                            for (var index4 = 0; index4 < numArray.GetLength(3); ++index4)
                                numArray[index1, index2, index3, index4] = 0;
                        }
                    }
                }
            }
            else
                numArray = new int[3, 3, 2, 5];

            numArray[0, 0, 0, 0] = 0;
            numArray[0, 0, 1, 0] = 60;
            numArray[0, 0, 0, 1] = 1;
            numArray[0, 0, 1, 1] = 70;
            numArray[0, 0, 0, 2] = 2;
            numArray[0, 0, 1, 2] = 330;
            numArray[0, 0, 0, 3] = 0;
            numArray[0, 0, 1, 3] = 60;
            numArray[0, 0, 0, 4] = 3;
            numArray[0, 0, 1, 4] = 90;
            numArray[0, 1, 0, 0] = 1;
            numArray[0, 1, 1, 0] = 70;
            numArray[0, 1, 0, 1] = 0;
            numArray[0, 1, 1, 1] = 120;
            numArray[0, 1, 0, 2] = 3;
            numArray[0, 1, 1, 2] = 90;
            numArray[0, 1, 0, 3] = 0;
            numArray[0, 1, 1, 3] = 120;
            numArray[0, 1, 0, 4] = 2;
            numArray[0, 1, 1, 4] = 390;
            numArray[0, 2, 0, 0] = 3;
            numArray[0, 2, 1, 0] = 90;
            numArray[0, 2, 0, 1] = 0;
            numArray[0, 2, 1, 1] = 120;
            numArray[0, 2, 0, 2] = 2;
            numArray[0, 2, 1, 2] = 435;
            numArray[0, 2, 0, 3] = 0;
            numArray[0, 2, 1, 3] = 120;
            numArray[0, 2, 0, 4] = 1;
            numArray[0, 2, 1, 4] = 375;
            numArray[1, 0, 0, 0] = 0;
            numArray[1, 0, 1, 0] = 0;
            numArray[1, 0, 0, 1] = 0;
            numArray[1, 0, 1, 1] = 0;
            numArray[1, 0, 0, 2] = 0;
            numArray[1, 0, 1, 2] = 0;
            numArray[1, 0, 0, 3] = 0;
            numArray[1, 0, 1, 3] = 0;
            numArray[1, 0, 0, 4] = 0;
            numArray[1, 0, 1, 4] = 0;
            numArray[1, 1, 0, 0] = 0;
            numArray[1, 1, 1, 0] = 0;
            numArray[1, 1, 0, 1] = 0;
            numArray[1, 1, 1, 1] = 0;
            numArray[1, 1, 0, 2] = 0;
            numArray[1, 1, 1, 2] = 0;
            numArray[1, 1, 0, 3] = 0;
            numArray[1, 1, 1, 3] = 0;
            numArray[1, 1, 0, 4] = 0;
            numArray[1, 1, 1, 4] = 0;
            numArray[1, 2, 0, 0] = 0;
            numArray[1, 2, 1, 0] = 0;
            numArray[1, 2, 0, 1] = 0;
            numArray[1, 2, 1, 1] = 0;
            numArray[1, 2, 0, 2] = 0;
            numArray[1, 2, 1, 2] = 0;
            numArray[1, 2, 0, 3] = 0;
            numArray[1, 2, 1, 3] = 0;
            numArray[1, 2, 0, 4] = 0;
            numArray[1, 2, 1, 4] = 0;
            numArray[2, 0, 0, 0] = 0;
            numArray[2, 0, 1, 0] = 0;
            numArray[2, 0, 0, 1] = 0;
            numArray[2, 0, 1, 1] = 0;
            numArray[2, 0, 0, 2] = 0;
            numArray[2, 0, 1, 2] = 0;
            numArray[2, 0, 0, 3] = 0;
            numArray[2, 0, 1, 3] = 0;
            numArray[2, 0, 0, 4] = 0;
            numArray[2, 0, 1, 4] = 0;
            numArray[2, 1, 0, 0] = 0;
            numArray[2, 1, 1, 0] = 0;
            numArray[2, 1, 0, 1] = 0;
            numArray[2, 1, 1, 1] = 0;
            numArray[2, 1, 0, 2] = 0;
            numArray[2, 1, 1, 2] = 0;
            numArray[2, 1, 0, 3] = 0;
            numArray[2, 1, 1, 3] = 0;
            numArray[2, 1, 0, 4] = 0;
            numArray[2, 1, 1, 4] = 0;
            numArray[2, 2, 0, 0] = 0;
            numArray[2, 2, 1, 0] = 0;
            numArray[2, 2, 0, 1] = 0;
            numArray[2, 2, 1, 1] = 0;
            numArray[2, 2, 0, 2] = 0;
            numArray[2, 2, 1, 2] = 0;
            numArray[2, 2, 0, 3] = 0;
            numArray[2, 2, 1, 3] = 0;
            numArray[2, 2, 0, 4] = 0;
            numArray[2, 2, 1, 4] = 0;
            NPC.InitializeMoonLordAttacks2();
            return numArray;
        }

        public static int[,] InitializeMoonLordAttacks2()
        {
            int[,] numArray;
            if (NPC.MoonLordAttacksArray2 != null)
            {
                numArray = NPC.MoonLordAttacksArray2;
                for (var index1 = 0; index1 < numArray.GetLength(0); ++index1)
                {
                    for (var index2 = 0; index2 < numArray.GetLength(1); ++index2)
                        numArray[index1, index2] = 0;
                }
            }
            else
                numArray = new int[2, 10];

            numArray[0, 0] = 0;
            numArray[1, 0] = 90;
            numArray[0, 1] = 1;
            numArray[1, 1] = 90;
            numArray[0, 2] = 0;
            numArray[1, 2] = 90;
            numArray[0, 3] = 2;
            numArray[1, 3] = 135;
            numArray[0, 4] = 0;
            numArray[1, 4] = 90;
            numArray[0, 5] = 3;
            numArray[1, 5] = 200;
            numArray[0, 6] = 0;
            numArray[1, 6] = 90;
            numArray[0, 7] = 4;
            numArray[1, 7] = 375;
            numArray[0, 8] = 0;
            numArray[1, 8] = 90;
            numArray[0, 9] = 2;
            numArray[1, 9] = 135;
            return numArray;
        }

        public string TypeName
        {
            get { return Lang.GetNPCNameValue(this.netID); }
        }

        public string FullName
        {
            get
            {
                if (!this.HasGivenName)
                    return this.TypeName;
                return Language.GetTextValue("Game.NPCTitle", (object) this._givenName, (object) this.TypeName);
            }
        }

        public bool HasGivenName
        {
            get { return this._givenName.Length != 0; }
        }

        public string GivenOrTypeName
        {
            get
            {
                if (!this.HasGivenName)
                    return this.TypeName;
                return this._givenName;
            }
        }

        public string GivenName
        {
            get { return this._givenName; }
            set { this._givenName = value ?? ""; }
        }

        public static bool downedTowers
        {
            get
            {
                if (NPC.downedTowerSolar && NPC.downedTowerVortex && NPC.downedTowerNebula)
                    return NPC.downedTowerStardust;
                return false;
            }
        }

        public static int ShieldStrengthTowerMax
        {
            get
            {
                if (!Main.expertMode)
                    return NPC.LunarShieldPowerNormal;
                return NPC.LunarShieldPowerExpert;
            }
        }

        public static bool TowersDefeated
        {
            get
            {
                if (NPC.TowerActiveSolar && NPC.TowerActiveVortex && NPC.TowerActiveNebula)
                    return NPC.TowerActiveStardust;
                return false;
            }
        }

        public static bool BusyWithAnyInvasionOfSorts()
        {
            if (Main.slimeRainTime == 0.0 && !Main.bloodMoon && (!Main.eclipse && !Main.snowMoon) &&
                (!Main.pumpkinMoon && Main.invasionType == 0))
                return DD2Event.Ongoing;
            return true;
        }

        public float Opacity
        {
            get { return (float) (1.0 - (double) this.alpha / (double) byte.MaxValue); }
            set
            {
                this.alpha = (int) MathHelper.Clamp((float) ((1.0 - (double) value) * (double) byte.MaxValue), 0.0f,
                    (float) byte.MaxValue);
            }
        }

        public static void ClearFoundActiveNPCs()
        {
            for (var index = 0; index < NPC.npcsFoundForCheckActive.Length; ++index)
                NPC.npcsFoundForCheckActive[index] = false;
        }

        public static void UpdateFoundActiveNPCs()
        {
            for (var index = 0; index < 200; ++index)
            {
                var npc = Main.npc[index];
                if (npc.active && npc.type >= 0 && npc.type < 580)
                    NPC.npcsFoundForCheckActive[npc.type] = true;
            }
        }

        public static string getNewNPCName(int npcType)
        {
            switch (npcType)
            {
                case 17:
                    switch (WorldGen.genRand.Next(23))
                    {
                        case 0:
                            return "Alfred";
                        case 1:
                            return "Barney";
                        case 2:
                            return "Calvin";
                        case 3:
                            return "Edmund";
                        case 4:
                            return "Edwin";
                        case 5:
                            return "Eugene";
                        case 6:
                            return "Frank";
                        case 7:
                            return "Frederick";
                        case 8:
                            return "Gilbert";
                        case 9:
                            return "Gus";
                        case 10:
                            return "Wilbur";
                        case 11:
                            return "Seymour";
                        case 12:
                            return "Louis";
                        case 13:
                            return "Humphrey";
                        case 14:
                            return "Harold";
                        case 15:
                            return "Milton";
                        case 16:
                            return "Mortimer";
                        case 17:
                            return "Howard";
                        case 18:
                            return "Walter";
                        case 19:
                            return "Finn";
                        case 20:
                            return "Isaac";
                        case 21:
                            return "Joseph";
                        default:
                            return "Ralph";
                    }
                case 18:
                    switch (WorldGen.genRand.Next(24))
                    {
                        case 0:
                            return "Molly";
                        case 1:
                            return "Amy";
                        case 2:
                            return "Claire";
                        case 3:
                            return "Emily";
                        case 4:
                            return "Katie";
                        case 5:
                            return "Madeline";
                        case 6:
                            return "Katelyn";
                        case 7:
                            return "Emma";
                        case 8:
                            return "Abigail";
                        case 9:
                            return "Carly";
                        case 10:
                            return "Jenna";
                        case 11:
                            return "Heather";
                        case 12:
                            return "Katherine";
                        case 13:
                            return "Caitlin";
                        case 14:
                            return "Kaitlin";
                        case 15:
                            return "Holly";
                        case 16:
                            return "Kaitlyn";
                        case 17:
                            return "Hannah";
                        case 18:
                            return "Kathryn";
                        case 19:
                            return "Lorraine";
                        case 20:
                            return "Helen";
                        case 21:
                            return "Kayla";
                        case 22:
                            return "Lisa";
                        default:
                            return "Allison";
                    }
                case 19:
                    switch (WorldGen.genRand.Next(24))
                    {
                        case 0:
                            return "DeShawn";
                        case 1:
                            return "DeAndre";
                        case 2:
                            return "Marquis";
                        case 3:
                            return "Darnell";
                        case 4:
                            return "Terrell";
                        case 5:
                            return "Malik";
                        case 6:
                            return "Trevon";
                        case 7:
                            return "Tyrone";
                        case 8:
                            return "Willie";
                        case 9:
                            return "Dominique";
                        case 10:
                            return "Demetrius";
                        case 11:
                            return "Reginald";
                        case 12:
                            return "Jamal";
                        case 13:
                            return "Maurice";
                        case 14:
                            return "Jalen";
                        case 15:
                            return "Darius";
                        case 16:
                            return "Xavier";
                        case 17:
                            return "Terrance";
                        case 18:
                            return "Andre";
                        case 19:
                            return "Dante";
                        case 20:
                            return "Brimst";
                        case 21:
                            return "Bronson";
                        case 22:
                            return "Tony";
                        default:
                            return "Darryl";
                    }
                case 20:
                    switch (WorldGen.genRand.Next(22))
                    {
                        case 0:
                            return "Alalia";
                        case 1:
                            return "Alalia";
                        case 2:
                            return "Alura";
                        case 3:
                            return "Ariella";
                        case 4:
                            return "Caelia";
                        case 5:
                            return "Calista";
                        case 6:
                            return "Chryseis";
                        case 7:
                            return "Emerenta";
                        case 8:
                            return "Elysia";
                        case 9:
                            return "Evvie";
                        case 10:
                            return "Faye";
                        case 11:
                            return "Felicitae";
                        case 12:
                            return "Lunette";
                        case 13:
                            return "Nata";
                        case 14:
                            return "Nissa";
                        case 15:
                            return "Tatiana";
                        case 16:
                            return "Rosalva";
                        case 17:
                            return "Shea";
                        case 18:
                            return "Tania";
                        case 19:
                            return "Isis";
                        case 20:
                            return "Celestia";
                        default:
                            return "Xylia";
                    }
                case 22:
                    switch (WorldGen.genRand.Next(35))
                    {
                        case 0:
                            return "Joe";
                        case 1:
                            return "Connor";
                        case 2:
                            return "Tanner";
                        case 3:
                            return "Wyatt";
                        case 4:
                            return "Cody";
                        case 5:
                            return "Levi";
                        case 6:
                            return "Luke";
                        case 7:
                            return "Jack";
                        case 8:
                            return "Scott";
                        case 9:
                            return "Logan";
                        case 10:
                            return "Cole";
                        case 11:
                            return "Asher";
                        case 12:
                            return "Bradley";
                        case 13:
                            return "Jacob";
                        case 14:
                            return "Garrett";
                        case 15:
                            return "Dylan";
                        case 16:
                            return "Maxwell";
                        case 17:
                            return "Steve";
                        case 18:
                            return "Brett";
                        case 19:
                            return "Andrew";
                        case 20:
                            return "Harley";
                        case 21:
                            return "Kyle";
                        case 22:
                            return "Jake";
                        case 23:
                            return "Ryan";
                        case 24:
                            return "Jeffrey";
                        case 25:
                            return "Seth";
                        case 26:
                            return "Marty";
                        case 27:
                            return "Brandon";
                        case 28:
                            return "Zach";
                        case 29:
                            return "Jeff";
                        case 30:
                            return "Daniel";
                        case 31:
                            return "Trent";
                        case 32:
                            return "Kevin";
                        case 33:
                            return "Brian";
                        default:
                            return "Colin";
                    }
                case 38:
                    switch (WorldGen.genRand.Next(22))
                    {
                        case 0:
                            return "Dolbere";
                        case 1:
                            return "Bazdin";
                        case 2:
                            return "Durim";
                        case 3:
                            return "Tordak";
                        case 4:
                            return "Garval";
                        case 5:
                            return "Morthal";
                        case 6:
                            return "Oten";
                        case 7:
                            return "Dolgen";
                        case 8:
                            return "Gimli";
                        case 9:
                            return "Gimut";
                        case 10:
                            return "Duerthen";
                        case 11:
                            return "Beldin";
                        case 12:
                            return "Jarut";
                        case 13:
                            return "Ovbere";
                        case 14:
                            return "Norkas";
                        case 15:
                            return "Dolgrim";
                        case 16:
                            return "Boften";
                        case 17:
                            return "Norsun";
                        case 18:
                            return "Dias";
                        case 19:
                            return "Fikod";
                        case 20:
                            return "Urist";
                        default:
                            return "Darur";
                    }
                case 54:
                    switch (WorldGen.genRand.Next(26))
                    {
                        case 0:
                            return "Sebastian";
                        case 1:
                            return "Rupert";
                        case 2:
                            return "Clive";
                        case 3:
                            return "Nigel";
                        case 4:
                            return "Mervyn";
                        case 5:
                            return "Cedric";
                        case 6:
                            return "Pip";
                        case 7:
                            return "Cyril";
                        case 8:
                            return "Fitz";
                        case 9:
                            return "Lloyd";
                        case 10:
                            return "Arthur";
                        case 11:
                            return "Rodney";
                        case 12:
                            return "Graham";
                        case 13:
                            return "Edward";
                        case 14:
                            return "Alfred";
                        case 15:
                            return "Edmund";
                        case 16:
                            return "Henry";
                        case 17:
                            return "Herald";
                        case 18:
                            return "Roland";
                        case 19:
                            return "Lincoln";
                        case 20:
                            return "Lloyd";
                        case 21:
                            return "Edgar";
                        case 22:
                            return "Eustace";
                        case 23:
                            return "Benjamin";
                        case 24:
                            return "James";
                        default:
                            return "Rodrick";
                    }
                case 107:
                    switch (WorldGen.genRand.Next(25))
                    {
                        case 0:
                            return "Grodax";
                        case 1:
                            return "Sarx";
                        case 2:
                            return "Xon";
                        case 3:
                            return "Mrunok";
                        case 4:
                            return "Nuxatk";
                        case 5:
                            return "Tgerd";
                        case 6:
                            return "Darz";
                        case 7:
                            return "Smador";
                        case 8:
                            return "Stazen";
                        case 9:
                            return "Mobart";
                        case 10:
                            return "Knogs";
                        case 11:
                            return "Tkanus";
                        case 12:
                            return "Negurk";
                        case 13:
                            return "Nort";
                        case 14:
                            return "Durnok";
                        case 15:
                            return "Trogem";
                        case 16:
                            return "Stezom";
                        case 17:
                            return "Gnudar";
                        case 18:
                            return "Ragz";
                        case 19:
                            return "Fahd";
                        case 20:
                            return "Xanos";
                        case 21:
                            return "Arback";
                        case 22:
                            return "Fjell";
                        case 23:
                            return "Dalek";
                        default:
                            return "Knub";
                    }
                case 108:
                    switch (WorldGen.genRand.Next(22))
                    {
                        case 0:
                            return "Dalamar";
                        case 1:
                            return "Dulais";
                        case 2:
                            return "Elric";
                        case 3:
                            return "Arddun";
                        case 4:
                            return "Maelor";
                        case 5:
                            return "Leomund";
                        case 6:
                            return "Hirael";
                        case 7:
                            return "Gwentor";
                        case 8:
                            return "Greum";
                        case 9:
                            return "Gearroid";
                        case 10:
                            return "Fizban";
                        case 11:
                            return "Ningauble";
                        case 12:
                            return "Seonag";
                        case 13:
                            return "Sargon";
                        case 14:
                            return "Merlyn";
                        case 15:
                            return "Magius";
                        case 16:
                            return "Berwyn";
                        case 17:
                            return "Arwyn";
                        case 18:
                            return "Alasdair";
                        case 19:
                            return "Tagar";
                        case 20:
                            return "Abram";
                        default:
                            return "Xanadu";
                    }
                case 124:
                    switch (WorldGen.genRand.Next(24))
                    {
                        case 0:
                            return "Shayna";
                        case 1:
                            return "Korrie";
                        case 2:
                            return "Ginger";
                        case 3:
                            return "Brooke";
                        case 4:
                            return "Jenny";
                        case 5:
                            return "Autumn";
                        case 6:
                            return "Nancy";
                        case 7:
                            return "Ella";
                        case 8:
                            return "Kayla";
                        case 9:
                            return "Selah";
                        case 10:
                            return "Sophia";
                        case 11:
                            return "Marshanna";
                        case 12:
                            return "Lauren";
                        case 13:
                            return "Trisha";
                        case 14:
                            return "Shirlena";
                        case 15:
                            return "Sheena";
                        case 16:
                            return "Ellen";
                        case 17:
                            return "Amy";
                        case 18:
                            return "Dawn";
                        case 19:
                            return "Susana";
                        case 20:
                            return "Meredith";
                        case 21:
                            return "Selene";
                        case 22:
                            return "Terra";
                        default:
                            return "Sally";
                    }
                case 160:
                    switch (WorldGen.genRand.Next(12))
                    {
                        case 0:
                            return "Reishi";
                        case 1:
                            return "Maitake";
                        case 2:
                            return "Chanterelle";
                        case 3:
                            return "Porcini";
                        case 4:
                            return "Shimeji";
                        case 5:
                            return "Amanita";
                        case 6:
                            return "Muscaria";
                        case 7:
                            return "Agaric";
                        case 8:
                            return "Cremini";
                        case 9:
                            return "Morel";
                        case 10:
                            return "Enoki";
                        default:
                            return "Shiitake";
                    }
                case 178:
                    switch (WorldGen.genRand.Next(20))
                    {
                        case 0:
                            return "Whitney";
                        case 1:
                            return "Verity";
                        case 2:
                            return "Ada";
                        case 3:
                            return "Cornelia";
                        case 4:
                            return "Lydia";
                        case 5:
                            return "Leila";
                        case 6:
                            return "Minerva";
                        case 7:
                            return "Emeline";
                        case 8:
                            return "Cynthia";
                        case 9:
                            return "Fidelia";
                        case 10:
                            return "Lilly";
                        case 11:
                            return "Phoebe";
                        case 12:
                            return "Zylphia";
                        case 13:
                            return "Zelda";
                        case 14:
                            return "Selina";
                        case 15:
                            return "Hope";
                        case 16:
                            return "Isabella";
                        case 17:
                            return "Judith";
                        case 18:
                            return "Savannah";
                        default:
                            return "Vivian";
                    }
                case 207:
                    switch (WorldGen.genRand.Next(16))
                    {
                        case 0:
                            return "Abdosir";
                        case 1:
                            return "Akbar";
                        case 2:
                            return "Bodashtart";
                        case 3:
                            return "Danel";
                        case 4:
                            return "Hanno";
                        case 5:
                            return "Hiram";
                        case 6:
                            return "Kanmi";
                        case 7:
                            return "Philosir";
                        case 8:
                            return "Tabnit";
                        case 9:
                            return "Yutpan";
                        case 10:
                            return "Ahirom";
                        case 11:
                            return "Batnoam";
                        case 12:
                            return "Sikarbaal";
                        case 13:
                            return "Hannibal";
                        case 14:
                            return "Yehomilk";
                        default:
                            return "Ahinadab";
                    }
                case 208:
                    switch (WorldGen.genRand.Next(17))
                    {
                        case 0:
                            return "Candy";
                        case 1:
                            return "Isis";
                        case 2:
                            return "Trixy";
                        case 3:
                            return "Destiny";
                        case 4:
                            return "Lexus";
                        case 5:
                            return "Bambi";
                        case 6:
                            return "Bailey";
                        case 7:
                            return "Glitter";
                        case 8:
                            return "Sparkle";
                        case 9:
                            return "Paris";
                        case 10:
                            return "Dazzle";
                        case 11:
                            return "Fantasy";
                        case 12:
                            return "Bunny";
                        case 13:
                            return "Sugar";
                        case 14:
                            return "Fantasia";
                        case 15:
                            return "Star";
                        default:
                            return "Cherry";
                    }
                case 209:
                    switch (WorldGen.genRand.Next(23))
                    {
                        case 0:
                            return "Alpha";
                        case 1:
                            return "Beta";
                        case 2:
                            return "Delta";
                        case 3:
                            return "Omega";
                        case 4:
                            return "Gamma";
                        case 5:
                            return "Theta";
                        case 6:
                            return "Kappa";
                        case 7:
                            return "Omicron";
                        case 8:
                            return "Sigma";
                        case 9:
                            return "Upsilon";
                        case 10:
                            return "Phi";
                        case 11:
                            return "Zeta";
                        case 12:
                            return "Lambda";
                        case 13:
                            return "Nu";
                        case 14:
                            return "Ci";
                        case 15:
                            return "Rho";
                        case 16:
                            return "Phi";
                        case 17:
                            return "Fender";
                        case 18:
                            return "T-3E0";
                        case 19:
                            return "Niner-7";
                        case 20:
                            return "A.N.D.Y";
                        case 21:
                            return "Syn-X";
                        default:
                            return "Mu";
                    }
                case 227:
                    switch (WorldGen.genRand.Next(18))
                    {
                        case 0:
                            return "Marco";
                        case 1:
                            return "Guido";
                        case 2:
                            return "Enzo";
                        case 3:
                            return "Martino";
                        case 4:
                            return "Mauro";
                        case 5:
                            return "Lorenzo";
                        case 6:
                            return "Ludo";
                        case 7:
                            return "Luciano";
                        case 8:
                            return "Carlo";
                        case 9:
                            return "Bruno";
                        case 10:
                            return "Mario";
                        case 11:
                            return "Leonardo";
                        case 12:
                            return "Raphael";
                        case 13:
                            return "Luigi";
                        case 14:
                            return "Luca";
                        case 15:
                            return "Darren";
                        case 16:
                            return "Esreadel";
                        default:
                            return "Stefano";
                    }
                case 228:
                    switch (WorldGen.genRand.Next(10))
                    {
                        case 0:
                            return "Abibe";
                        case 1:
                            return "Jamundi";
                        case 2:
                            return "U'wa";
                        case 3:
                            return "Tairona";
                        case 4:
                            return "Xirigua";
                        case 5:
                            return "Zop'a";
                        case 6:
                            return "Opuni";
                        case 7:
                            return "Kogi-ghi";
                        case 8:
                            return "Konah";
                        default:
                            return "Gboto";
                    }
                case 229:
                    switch (WorldGen.genRand.Next(11))
                    {
                        case 0:
                            return "David";
                        case 1:
                            return "Red Beard";
                        case 2:
                            return "Jack";
                        case 3:
                            return "Black Beard";
                        case 4:
                            return "Captain Morgan";
                        case 5:
                            return "Wet Beard";
                        case 6:
                            return "James T. Beard";
                        case 7:
                            return "Gunpowder Garry";
                        case 8:
                            return "Captain Stoney Dirt";
                        case 9:
                            return "Jake";
                        default:
                            return "Captain Bullywort";
                    }
                case 353:
                    switch (WorldGen.genRand.Next(20))
                    {
                        case 0:
                            return "Bri";
                        case 1:
                            return "Brianne";
                        case 2:
                            return "Flora";
                        case 3:
                            return "Iris";
                        case 4:
                            return "Scarlett";
                        case 5:
                            return "Lola";
                        case 6:
                            return "Hazel";
                        case 7:
                            return "Stella";
                        case 8:
                            return "Pearl";
                        case 9:
                            return "Tallulah";
                        case 10:
                            return "Ruby";
                        case 11:
                            return "Esmeralda";
                        case 12:
                            return "Kylie";
                        case 13:
                            return "Kati";
                        case 14:
                            return "Biah";
                        case 15:
                            return "Meliyah";
                        case 16:
                            return "Petra";
                        case 17:
                            return "Rox";
                        case 18:
                            return "Roxanne";
                        default:
                            return "Annabel";
                    }
                case 368:
                    switch (WorldGen.genRand.Next(13))
                    {
                        case 0:
                            return "Abraham";
                        case 1:
                            return "Bohemas";
                        case 2:
                            return "Eladon";
                        case 3:
                            return "Aphraim";
                        case 4:
                            return "Gallius";
                        case 5:
                            return "Llewellyn";
                        case 6:
                            return "Riley";
                        case 7:
                            return "Rawleigh";
                        case 8:
                            return "Shipton";
                        case 9:
                            return "Romeo";
                        case 10:
                            return "Aedan";
                        case 11:
                            return "Mercer";
                        default:
                            return "Willy";
                    }
                case 369:
                    switch (WorldGen.genRand.Next(22))
                    {
                        case 0:
                            return "Bobby";
                        case 1:
                            return "Sammy";
                        case 2:
                            return "Jimmy";
                        case 3:
                            return "Danny";
                        case 4:
                            return "Timmy";
                        case 5:
                            return "Simon";
                        case 6:
                            return "Johnny";
                        case 7:
                            return "Billy";
                        case 8:
                            return "Matty";
                        case 9:
                            return "Bart";
                        case 10:
                            return "Phillip";
                        case 11:
                            return "Spencer";
                        case 12:
                            return "Nathan";
                        case 13:
                            return "Grayson";
                        case 14:
                            return "Bryce";
                        case 15:
                            return "Miles";
                        case 16:
                            return "Charles";
                        case 17:
                            return "Adam";
                        case 18:
                            return "Tyler";
                        case 19:
                            return "Jey";
                        case 20:
                            return "Ivan";
                        default:
                            return "Izzy";
                    }
                case 441:
                    switch (WorldGen.genRand.Next(20))
                    {
                        case 0:
                            return "McKinly";
                        case 1:
                            return "Millard";
                        case 2:
                            return "Fillmore";
                        case 3:
                            return "Rutherford";
                        case 4:
                            return "Chester";
                        case 5:
                            return "Grover";
                        case 6:
                            return "Cleveland";
                        case 7:
                            return "Theodore";
                        case 8:
                            return "Herbert";
                        case 9:
                            return "Warren";
                        case 10:
                            return "Lyndon";
                        case 11:
                            return "Ronald";
                        case 12:
                            return "Harrison";
                        case 13:
                            return "Woodrow";
                        case 14:
                            return "Tweed";
                        case 15:
                            return "Blanton";
                        case 16:
                            return "Dwyer";
                        case 17:
                            return "Carroll";
                        default:
                            return "Agnew";
                    }
                case 453:
                    switch (WorldGen.genRand.Next(10))
                    {
                        case 0:
                            return "Skellington";
                        case 1:
                            return "Bones McGee";
                        case 2:
                            return "Gloomy Mays";
                        case 3:
                            return "Jack Sellington";
                        case 4:
                            return "Billy Marrows";
                        case 5:
                            return "Tom";
                        case 6:
                            return "Rattles Magoo";
                        case 7:
                            return "Mandible Calavera";
                        case 8:
                            return "Mika";
                        default:
                            return "No-Eyed Wiley";
                    }
                case 550:
                    return Language.RandomFromCategory("BartenderNames", WorldGen.genRand).Value;
                default:
                    return "";
            }
        }

        public NetworkText GetTypeNetName()
        {
            return NetworkText.FromKey(Lang.GetNPCName(this.netID).Key);
        }

        public NetworkText GetFullNetName()
        {
            if (!this.HasGivenName)
                return this.GetTypeNetName();
            return NetworkText.FromKey("Game.NPCTitle", (object) this.GetGivenNetName(),
                (object) this.GetTypeNetName());
        }

        public NetworkText GetGivenOrTypeNetName()
        {
            if (!this.HasGivenName)
                return this.GetTypeNetName();
            return this.GetGivenNetName();
        }

        public NetworkText GetGivenNetName()
        {
            return NetworkText.FromLiteral(this._givenName);
        }

        public static void setNPCName(string newName, int npcType, bool resetExtras = false)
        {
            var flag = false;
            for (var index = 0; index < 200; ++index)
            {
                if (Main.npc[index].active && Main.npc[index].type == npcType)
                {
                    if (flag)
                    {
                        Main.npc[index].GivenName = NPC.getNewNPCName(npcType);
                    }
                    else
                    {
                        Main.npc[index].GivenName = newName;
                        if (!resetExtras)
                            break;
                        flag = true;
                    }
                }
            }
        }

        public static string firstNPCName(int npcType)
        {
            for (var index = 0; index < 200; ++index)
            {
                if (Main.npc[index].active && Main.npc[index].type == npcType)
                    return Main.npc[index].GivenOrTypeName;
            }

            return NPC.getNewNPCName(npcType);
        }

        public static string GetFirstNPCNameOrNull(int npcType)
        {
            for (var index = 0; index < 200; ++index)
            {
                if (Main.npc[index].active && Main.npc[index].type == npcType)
                    return Main.npc[index].GivenOrTypeName;
            }

            return (string) null;
        }

        public static bool MechSpawn(float x, float y, int type)
        {
            var num1 = 0;
            var num2 = 0;
            var num3 = 0;
            for (var index = 0; index < 200; ++index)
            {
                if (Main.npc[index].active && Main.npc[index].type == type)
                {
                    ++num1;
                    var vector2 = new Vector2(x, y);
                    var num4 = Main.npc[index].position.X - vector2.X;
                    var num5 = Main.npc[index].position.Y - vector2.Y;
                    var num6 = (float) Math.Sqrt((double) num4 * (double) num4 + (double) num5 * (double) num5);
                    if ((double) num6 < 200.0)
                        ++num2;
                    if ((double) num6 < 600.0)
                        ++num3;
                }
            }

            return num2 < 3 && num3 < 6 && num1 < 10;
        }

        public static int TypeToHeadIndex(int type)
        {
            switch (type)
            {
                case 17:
                    return 2;
                case 18:
                    return 3;
                case 19:
                    return 6;
                case 20:
                    return 5;
                case 22:
                    return 1;
                case 38:
                    return 4;
                case 54:
                    return 7;
                case 107:
                    return 9;
                case 108:
                    return 10;
                case 124:
                    return 8;
                case 142:
                    return 11;
                case 160:
                    return 12;
                case 178:
                    return 13;
                case 207:
                    return 14;
                case 208:
                    return 15;
                case 209:
                    return 16;
                case 227:
                    return 17;
                case 228:
                    return 18;
                case 229:
                    return 19;
                case 353:
                    return 20;
                case 368:
                    return 21;
                case 369:
                    return 22;
                case 441:
                    return 23;
                case 550:
                    return 24;
                default:
                    return -1;
            }
        }

        public static int HeadIndexToType(int type)
        {
            switch (type)
            {
                case 1:
                    return 22;
                case 2:
                    return 17;
                case 3:
                    return 18;
                case 4:
                    return 38;
                case 5:
                    return 20;
                case 6:
                    return 19;
                case 7:
                    return 54;
                case 8:
                    return 124;
                case 9:
                    return 107;
                case 10:
                    return 108;
                case 11:
                    return 142;
                case 12:
                    return 160;
                case 13:
                    return 178;
                case 14:
                    return 207;
                case 15:
                    return 208;
                case 16:
                    return 209;
                case 17:
                    return 227;
                case 18:
                    return 228;
                case 19:
                    return 229;
                case 20:
                    return 353;
                case 21:
                    return 368;
                case 22:
                    return 369;
                case 23:
                    return 441;
                case 24:
                    return 550;
                default:
                    return -1;
            }
        }

        public int GetBossHeadTextureIndex()
        {
            var num = NPCID.Sets.BossHeadTextures[this.type];
            switch (this.type)
            {
                case 4:
                    if ((double) this.ai[0] >= 2.0)
                    {
                        num = 1;
                        break;
                    }

                    break;
                case 125:
                    if ((double) this.ai[0] >= 3.0)
                    {
                        num = 20;
                        break;
                    }

                    break;
                case 126:
                    if ((double) this.ai[0] >= 3.0)
                    {
                        num = 21;
                        break;
                    }

                    break;
                case 262:
                    if (this.life <= this.lifeMax / 2)
                    {
                        num = 12;
                        break;
                    }

                    break;
                case 439:
                    if ((double) this.ai[0] == 5.0 && this.alpha == (int) byte.MaxValue)
                    {
                        num = -1;
                        break;
                    }

                    break;
                case 440:
                    if ((double) this.ai[0] != 5.0 || this.alpha == (int) byte.MaxValue)
                    {
                        num = -1;
                        break;
                    }

                    break;
            }

            return num;
        }

        public float GetBossHeadRotation()
        {
            var num = 0.0f;
            switch (this.type)
            {
                case 35:
                case (int) sbyte.MaxValue:
                    if ((double) this.ai[1] == 1.0 || (double) this.ai[1] == 2.0)
                    {
                        num = this.rotation;
                        break;
                    }

                    break;
                case 68:
                case 262:
                    num = this.rotation;
                    break;
                case 345:
                    if ((double) this.ai[0] == 2.0)
                    {
                        num = this.rotation;
                        break;
                    }

                    break;
            }

            return num;
        }

        public SpriteEffects GetBossHeadSpriteEffects()
        {
            var spriteEffects = SpriteEffects.None;
            if (this.type == 491 && this.spriteDirection == 1)
                spriteEffects = SpriteEffects.FlipHorizontally;
            return spriteEffects;
        }

        public int BannerID()
        {
            if (this.netID >= -10)
                return this.netID;
            return this.type;
        }

        private void SetDefaultsFromNetId(int id)
        {
            var flag = false;
            var Type = NPCID.FromNetId(id);
            this.SetDefaults(0, -1f);
            switch (id)
            {
                case -65:
                    this.SetDefaults(Type, 1.21f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -64:
                    this.SetDefaults(Type, 0.87f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -63:
                    this.SetDefaults(Type, 1.16f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -62:
                    this.SetDefaults(Type, 0.78f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -61:
                    this.SetDefaults(Type, 1.1f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -60:
                    this.SetDefaults(Type, 0.92f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -59:
                    this.SetDefaults(Type, 1.15f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -58:
                    this.SetDefaults(Type, 0.8f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -57:
                    this.SetDefaults(Type, 1.25f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -56:
                    this.SetDefaults(Type, 0.85f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -55:
                    this.SetDefaults(Type, 1.1f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -54:
                    this.SetDefaults(Type, 0.9f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -53:
                    this.SetDefaults(Type, 1.15f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -52:
                    this.SetDefaults(Type, 0.85f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -51:
                    this.SetDefaults(Type, 1.13f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -50:
                    this.SetDefaults(Type, 0.87f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -49:
                    this.SetDefaults(Type, 1.07f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -48:
                    this.SetDefaults(Type, 0.93f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -47:
                    this.SetDefaults(Type, 1.1f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -46:
                    this.SetDefaults(Type, 0.9f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -45:
                    this.SetDefaults(Type, 1.05f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -44:
                    this.SetDefaults(Type, 0.87f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -43:
                    this.SetDefaults(Type, 1.15f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -42:
                    this.SetDefaults(Type, 1.1f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -41:
                    this.SetDefaults(Type, 0.85f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -40:
                    this.SetDefaults(Type, 0.9f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -39:
                    this.SetDefaults(Type, 1.1f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -38:
                    this.SetDefaults(Type, 1.15f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -37:
                    this.SetDefaults(Type, 1.08f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -36:
                    this.SetDefaults(Type, 0.92f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -35:
                    this.SetDefaults(Type, 1.13f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -34:
                    this.SetDefaults(Type, 0.87f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -33:
                    this.SetDefaults(Type, 1.11f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -32:
                    this.SetDefaults(Type, 0.89f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -31:
                    this.SetDefaults(Type, 1.13f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -30:
                    this.SetDefaults(Type, 0.93f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -29:
                    this.SetDefaults(Type, 1.15f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -28:
                    this.SetDefaults(Type, 0.85f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -27:
                    this.SetDefaults(Type, 1.1f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -26:
                    this.SetDefaults(Type, 0.9f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -25:
                    this.SetDefaults(Type, 1.15f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -24:
                    this.SetDefaults(Type, 0.85f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -23:
                    this.SetDefaults(Type, 1.15f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -22:
                    this.SetDefaults(Type, 0.85f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -21:
                    this.SetDefaults(Type, 1.2f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -20:
                    this.SetDefaults(Type, 1.1f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -19:
                    this.SetDefaults(Type, 0.9f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -18:
                    this.SetDefaults(Type, 0.8f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -17:
                    this.SetDefaults(Type, 1.2f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -16:
                    this.SetDefaults(Type, 0.85f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -15:
                    this.SetDefaults(Type, 1.15f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale * 1.1);
                    this.life = 400;
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots = 2f;
                    this.knockBackResist *= 2f - this.scale;
                    this.height = 44;
                    break;
                case -14:
                    this.SetDefaults(Type, 1.15f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale * 1.1);
                    this.life = (int) ((double) this.life * (double) this.scale * 1.1);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots = 2f;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -13:
                    this.SetDefaults(Type, 0.9f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    break;
                case -12:
                    this.SetDefaults(Type, 1.15f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -11:
                    this.SetDefaults(Type, 0.85f);
                    this.defense = (int) ((double) this.defense * (double) this.scale);
                    this.damage = (int) ((double) this.damage * (double) this.scale);
                    this.life = (int) ((double) this.life * (double) this.scale);
                    this.value = (float) (int) ((double) this.value * (double) this.scale);
                    this.npcSlots *= this.scale;
                    this.knockBackResist *= 2f - this.scale;
                    break;
                case -10:
                    this.SetDefaults(Type, 1.1f);
                    this.damage = 18;
                    this.defense = 6;
                    this.life = 60;
                    this.color = new Color(143, 215, 93, 100);
                    this.value = 500f;
                    flag = true;
                    break;
                case -9:
                    this.SetDefaults(Type, 1.2f);
                    this.damage = 15;
                    this.defense = 7;
                    this.life = 45;
                    this.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, 0, 100);
                    this.value = 10f;
                    flag = true;
                    break;
                case -8:
                    this.SetDefaults(Type, 1.025f);
                    this.damage = 12;
                    this.defense = 4;
                    this.life = 35;
                    this.color = new Color((int) byte.MaxValue, 30, 0, 100);
                    this.value = 8f;
                    flag = true;
                    break;
                case -7:
                    this.SetDefaults(Type, 1.2f);
                    this.damage = 12;
                    this.defense = 6;
                    this.life = 40;
                    this.knockBackResist *= 0.9f;
                    this.color = new Color(200, 0, (int) byte.MaxValue, 150);
                    this.value = 10f;
                    flag = true;
                    break;
                case -6:
                    this.SetDefaults(Type, 1.05f);
                    this.damage = 15;
                    this.defense = 4;
                    this.life = 45;
                    this.color = new Color(0, 0, 0, 50);
                    this.value = 20f;
                    flag = true;
                    break;
                case -5:
                    this.SetDefaults(Type, 0.9f);
                    this.damage = 13;
                    this.defense = 4;
                    this.life = 30;
                    this.knockBackResist *= 0.95f;
                    this.alpha = 120;
                    this.color = new Color(0, 0, 0, 50);
                    this.value = 10f;
                    flag = true;
                    break;
                case -4:
                    this.SetDefaults(Type, 0.6f);
                    this.damage = 5;
                    this.defense = 5;
                    this.life = 150;
                    this.knockBackResist *= 1.4f;
                    this.color = new Color(250, 30, 90, 90);
                    this.value = 10000f;
                    flag = true;
                    this.rarity = 1;
                    break;
                case -3:
                    this.SetDefaults(Type, 0.9f);
                    this.damage = 6;
                    this.defense = 0;
                    this.life = 14;
                    this.knockBackResist *= 1.2f;
                    this.color = new Color(0, 220, 40, 100);
                    this.value = 3f;
                    flag = true;
                    break;
                case -2:
                    this.SetDefaults(Type, 0.9f);
                    this.damage = 45;
                    this.defense = 20;
                    this.life = 90;
                    this.knockBackResist *= 1.2f;
                    this.value = 100f;
                    flag = true;
                    break;
                case -1:
                    this.SetDefaults(Type, 0.6f);
                    this.damage = 45;
                    this.defense = 10;
                    this.life = 90;
                    this.knockBackResist *= 1.2f;
                    this.value = 100f;
                    flag = true;
                    break;
                default:
                    return;
            }

            this.netID = id;
            this.lifeMax = this.life;
            this.defDamage = this.damage;
            this.defDefense = this.defense;
            if (!Main.expertMode || !flag)
                return;
            this.scaleStats();
        }

        public void SetDefaultsKeepPlayerInteraction(int Type)
        {
            var flagArray = new bool[this.playerInteraction.Length];
            for (var index = 0; index < this.playerInteraction.Length; ++index)
                flagArray[index] = this.playerInteraction[index];
            this.SetDefaults(Type, -1f);
            for (var index = 0; index < this.playerInteraction.Length; ++index)
                this.playerInteraction[index] = flagArray[index];
        }

        public void SetDefaults(int Type, float scaleOverride = -1f)
        {
            if (Type < 0)
            {
                this.SetDefaultsFromNetId(Type);
            }
            else
            {
                this.waterMovementSpeed = this.lavaMovementSpeed = 0.5f;
                this.honeyMovementSpeed = 0.25f;
                this.altTexture = 0;
                this.nameOver = 0.0f;
                this.takenDamageMultiplier = 1f;
                this.extraValue = 0.0f;
                for (var index = 0; index < this.playerInteraction.Length; ++index)
                    this.playerInteraction[index] = false;
                this.rarity = 0;
                this.dontCountMe = false;
                this.releaseOwner = (short) byte.MaxValue;
                this.catchItem = (short) 0;
                this.npcNameLookup = (byte) 0;
                this.netStream = (byte) 32;
                var flag = false;
                this.netID = 0;
                this.netAlways = false;
                this.netSpam = 0;
                this.SpawnedFromStatue = false;
                var newSize = 10;
                if (Type >= 0)
                    newSize = NPCID.Sets.TrailCacheLength[Type];
                if (newSize != this.oldPos.Length)
                {
                    Array.Resize<Vector2>(ref this.oldPos, newSize);
                    Array.Resize<float>(ref this.oldRot, newSize);
                }

                for (var index = 0; index < this.oldPos.Length; ++index)
                {
                    this.oldRot[index] = 0.0f;
                    this.oldPos[index].X = 0.0f;
                    this.oldPos[index].Y = 0.0f;
                }

                for (var index = 0; index < 5; ++index)
                {
                    this.buffTime[index] = 0;
                    this.buffType[index] = 0;
                }

                for (var index = 0; index < 206; ++index)
                    this.buffImmune[index] = false;
                this.setFrameSize = false;
                this.buffImmune[31] = true;
                this.netSkip = -2;
                this.realLife = -1;
                this.lifeRegen = 0;
                this.lifeRegenExpectedLossPerSecond = -1;
                this.lifeRegenCount = 0;
                this.poisoned = false;
                this.soulDrain = false;
                this.venom = false;
                this.shadowFlame = false;
                this.onFire = false;
                this.midas = false;
                this.ichor = false;
                this.onFrostBurn = false;
                this.confused = false;
                this.loveStruck = false;
                this.dontTakeDamageFromHostiles = false;
                this.stinky = false;
                this.dryadWard = false;
                this.onFire2 = false;
                this.justHit = false;
                this.dontTakeDamage = false;
                this.npcSlots = 1f;
                this.lavaImmune = false;
                this.lavaWet = false;
                this.wetCount = (byte) 0;
                this.wet = false;
                this.townNPC = false;
                this.homeless = false;
                this.homeTileX = -1;
                this.homeTileY = -1;
                this.friendly = false;
                this.behindTiles = false;
                this.boss = false;
                this.noTileCollide = false;
                this.rotation = 0.0f;
                this.active = true;
                this.alpha = 0;
                this.color = new Color();
                this.collideX = false;
                this.collideY = false;
                this.direction = 0;
                this.oldDirection = this.direction;
                this.frameCounter = 0.0;
                this.netUpdate = true;
                this.netUpdate2 = false;
                this.knockBackResist = 1f;
                this.GivenName = "";
                this.noGravity = false;
                this.scale = 1f;
                this.HitSound = (LegacySoundStyle) null;
                this.DeathSound = (LegacySoundStyle) null;
                this.spriteDirection = -1;
                this.target = (int) byte.MaxValue;
                this.oldTarget = this.target;
                this.targetRect = new Microsoft.Xna.Framework.Rectangle();
                this.timeLeft = NPC.activeTime;
                this.type = Type;
                this.value = 0.0f;
                this.coldDamage = false;
                this.trapImmune = false;
                this.hide = false;
                this.immortal = false;
                this.chaseable = true;
                this.breath = 200;
                this.breathCounter = 0;
                this.reflectingProjectiles = false;
                this.canGhostHeal = true;
                this.javelined = false;
                this.daybreak = false;
                this.celled = false;
                this.dryadBane = false;
                this.betsysCurse = false;
                this.oiled = false;
                for (var index = 0; index < NPC.maxAI; ++index)
                    this.ai[index] = 0.0f;
                for (var index = 0; index < NPC.maxAI; ++index)
                    this.localAI[index] = 0.0f;
                if (this.type == 1)
                {
                    this.width = 24;
                    this.height = 18;
                    this.aiStyle = 1;
                    this.damage = 7;
                    this.defense = 2;
                    this.lifeMax = 25;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.alpha = 175;
                    this.color = new Color(0, 80, (int) byte.MaxValue, 100);
                    this.value = 25f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 2)
                {
                    this.width = 30;
                    this.height = 32;
                    this.aiStyle = 2;
                    this.damage = 18;
                    this.defense = 2;
                    this.lifeMax = 60;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.8f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 75f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 3)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 14;
                    this.defense = 6;
                    this.lifeMax = 45;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 60f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 430)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 14;
                    this.defense = 6;
                    this.lifeMax = 45;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 60f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 431)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 16;
                    this.defense = 8;
                    this.lifeMax = 50;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.45f;
                    this.value = 80f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 432)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 16;
                    this.defense = 8;
                    this.lifeMax = 50;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.45f;
                    this.value = 65f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 433)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 13;
                    this.defense = 6;
                    this.lifeMax = 40;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.55f;
                    this.value = 55f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 434)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 13;
                    this.defense = 8;
                    this.lifeMax = 45;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.45f;
                    this.value = 80f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 435)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 16;
                    this.defense = 4;
                    this.lifeMax = 45;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.55f;
                    this.value = 70f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 436)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 12;
                    this.defense = 4;
                    this.lifeMax = 38;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.6f;
                    this.value = 65f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 4)
                {
                    this.width = 100;
                    this.height = 110;
                    this.aiStyle = 4;
                    this.damage = 15;
                    this.defense = 12;
                    this.lifeMax = 2800;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.timeLeft = NPC.activeTime * 30;
                    this.boss = true;
                    this.value = 30000f;
                    this.npcSlots = 5f;
                }
                else if (this.type == 5)
                {
                    this.width = 20;
                    this.height = 20;
                    this.aiStyle = 5;
                    this.damage = 12;
                    this.defense = 0;
                    this.lifeMax = 8;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                }
                else if (this.type == 6)
                {
                    this.npcSlots = 1f;
                    this.width = 30;
                    this.height = 30;
                    this.aiStyle = 5;
                    this.damage = 22;
                    this.defense = 8;
                    this.lifeMax = 40;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.knockBackResist = 0.5f;
                    this.value = 90f;
                }
                else if (this.type == 7)
                {
                    this.npcSlots = 3.5f;
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 6;
                    this.damage = 31;
                    this.defense = 2;
                    this.lifeMax = 100;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 140f;
                    this.netAlways = true;
                }
                else if (this.type == 8)
                {
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 16;
                    this.defense = 6;
                    this.lifeMax = 100;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 140f;
                    this.dontCountMe = true;
                }
                else if (this.type == 9)
                {
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 13;
                    this.defense = 10;
                    this.lifeMax = 100;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 140f;
                    this.dontCountMe = true;
                }
                else if (this.type == 10)
                {
                    this.width = 14;
                    this.height = 14;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 8;
                    this.defense = 0;
                    this.lifeMax = 30;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 40f;
                }
                else if (this.type == 11)
                {
                    this.width = 14;
                    this.height = 14;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 4;
                    this.defense = 4;
                    this.lifeMax = 30;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 40f;
                    this.dontCountMe = true;
                }
                else if (this.type == 12)
                {
                    this.width = 14;
                    this.height = 14;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 4;
                    this.defense = 6;
                    this.lifeMax = 30;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 40f;
                    this.dontCountMe = true;
                }
                else if (this.type == 13)
                {
                    this.npcSlots = 5f;
                    this.width = 38;
                    this.height = 38;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 22;
                    this.defense = 2;
                    this.lifeMax = 65;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 300f;
                    this.scale = 1f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                }
                else if (this.type == 14)
                {
                    this.width = 38;
                    this.height = 38;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 13;
                    this.defense = 4;
                    this.lifeMax = 150;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 300f;
                    this.scale = 1f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.dontCountMe = true;
                }
                else if (this.type == 15)
                {
                    this.width = 38;
                    this.height = 38;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 11;
                    this.defense = 8;
                    this.lifeMax = 220;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 300f;
                    this.scale = 1f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.dontCountMe = true;
                }
                else if (this.type == 16)
                {
                    this.npcSlots = 2f;
                    this.width = 36;
                    this.height = 24;
                    this.aiStyle = 1;
                    this.damage = 20;
                    this.defense = 7;
                    this.lifeMax = 90;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.alpha = 120;
                    this.color = new Color(0, 0, 0, 50);
                    this.value = 75f;
                    this.scale = 1.25f;
                    this.knockBackResist = 0.6f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 17)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 18)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 19)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 20)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 21)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 20;
                    this.defense = 8;
                    this.lifeMax = 60;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 100f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 22)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 23)
                {
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 5;
                    this.damage = 40;
                    this.defense = 6;
                    this.lifeMax = 26;
                    this.HitSound = SoundID.NPCHit3;
                    this.DeathSound = SoundID.NPCDeath3;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.value = 80f;
                    this.knockBackResist = 0.4f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                }
                else if (this.type == 24)
                {
                    this.npcSlots = 3f;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 8;
                    this.damage = 30;
                    this.defense = 16;
                    this.lifeMax = 70;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                    this.lavaImmune = true;
                    this.value = 350f;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                }
                else if (this.type == 25)
                {
                    this.width = 16;
                    this.height = 16;
                    this.aiStyle = 9;
                    this.damage = 30;
                    this.defense = 0;
                    this.lifeMax = 1;
                    this.HitSound = SoundID.NPCHit3;
                    this.DeathSound = SoundID.NPCDeath3;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.alpha = 100;
                }
                else if (this.type == 31)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 26;
                    this.defense = 8;
                    this.lifeMax = 80;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.8f;
                    this.value = 130f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 32)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 8;
                    this.damage = 20;
                    this.defense = 2;
                    this.lifeMax = 50;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.6f;
                    this.value = 140f;
                    this.npcSlots = 2f;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 33)
                {
                    this.width = 16;
                    this.height = 16;
                    this.aiStyle = 9;
                    this.damage = 20;
                    this.defense = 0;
                    this.lifeMax = 1;
                    this.HitSound = SoundID.NPCHit3;
                    this.DeathSound = SoundID.NPCDeath3;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.alpha = (int) byte.MaxValue;
                    this.knockBackResist = 0.0f;
                }
                else if (this.type == 34)
                {
                    this.width = 26;
                    this.height = 28;
                    this.aiStyle = 10;
                    this.damage = 35;
                    this.defense = 6;
                    this.lifeMax = 40;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.value = 150f;
                    this.knockBackResist = 0.2f;
                    this.npcSlots = 0.75f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                }
                else if (this.type == 35)
                {
                    this.width = 80;
                    this.height = 102;
                    this.aiStyle = 11;
                    this.damage = 32;
                    this.defense = 10;
                    this.lifeMax = 4400;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.value = 50000f;
                    this.knockBackResist = 0.0f;
                    this.boss = true;
                    this.npcSlots = 6f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.buffImmune[189] = this.buffImmune[169] = this.buffImmune[183] = true;
                }
                else if (this.type == 36)
                {
                    this.width = 52;
                    this.height = 52;
                    this.aiStyle = 12;
                    this.damage = 20;
                    this.defense = 14;
                    this.lifeMax = 600;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                }
                else if (this.type == 37)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 38)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 39)
                {
                    this.npcSlots = 6f;
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 30;
                    this.defense = 10;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath5;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 1200f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                }
                else if (this.type == 40)
                {
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 15;
                    this.defense = 12;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath5;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 1200f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.dontCountMe = true;
                }
                else if (this.type == 41)
                {
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 10;
                    this.defense = 18;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath5;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 1200f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.dontCountMe = true;
                }
                else if (this.type == 42)
                {
                    this.width = 34;
                    this.height = 32;
                    this.aiStyle = 5;
                    this.damage = 26;
                    this.defense = 12;
                    this.lifeMax = 48;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.5f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 200f;
                    this.noGravity = true;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 43)
                {
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.width = 30;
                    this.height = 30;
                    this.aiStyle = 13;
                    this.damage = 34;
                    this.defense = 10;
                    this.lifeMax = 110;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.0f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 350f;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 44)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 22;
                    this.defense = 9;
                    this.lifeMax = 70;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 250f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 45)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 8;
                    this.damage = 20;
                    this.defense = 4;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.6f;
                    this.value = 5000f;
                    this.buffImmune[20] = true;
                    this.rarity = 4;
                }
                else if (this.type == 46 || this.type == 303 || (this.type == 337 || this.type == 540))
                {
                    this.width = 18;
                    this.height = 20;
                    this.aiStyle = 7;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.catchItem = (short) 2019;
                }
                else if (this.type == 47)
                {
                    this.width = 18;
                    this.height = 20;
                    this.aiStyle = 3;
                    this.damage = 20;
                    this.defense = 4;
                    this.lifeMax = 70;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 500f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 48)
                {
                    this.width = 24;
                    this.height = 34;
                    this.aiStyle = 14;
                    this.damage = 25;
                    this.defense = 8;
                    this.lifeMax = 100;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.6f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 300f;
                }
                else if (this.type == 49)
                {
                    this.npcSlots = 0.5f;
                    this.width = 22;
                    this.height = 18;
                    this.aiStyle = 14;
                    this.damage = 13;
                    this.defense = 2;
                    this.lifeMax = 16;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.8f;
                    this.DeathSound = SoundID.NPCDeath4;
                    this.value = 90f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 50)
                {
                    this.boss = true;
                    this.width = 98;
                    this.height = 92;
                    this.aiStyle = 15;
                    this.damage = 40;
                    this.defense = 10;
                    this.lifeMax = 2000;
                    this.knockBackResist = 0.0f;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.alpha = 30;
                    this.value = 10000f;
                    this.scale = 1.25f;
                    this.buffImmune[20] = true;
                    this.timeLeft = NPC.activeTime * 30;
                }
                else if (this.type == 51)
                {
                    this.npcSlots = 0.5f;
                    this.width = 22;
                    this.height = 18;
                    this.aiStyle = 14;
                    this.damage = 20;
                    this.defense = 4;
                    this.lifeMax = 34;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.8f;
                    this.DeathSound = SoundID.NPCDeath4;
                    this.value = 80f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 52)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 20;
                    this.defense = 10;
                    this.lifeMax = 500;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 1000f;
                    this.buffImmune[31] = false;
                    this.rarity = 2;
                }
                else if (this.type == 53)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 14;
                    this.defense = 8;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 1000f;
                    this.buffImmune[31] = false;
                    this.rarity = 2;
                }
                else if (this.type == 54)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 55)
                {
                    this.noGravity = true;
                    this.width = 20;
                    this.height = 18;
                    this.aiStyle = 16;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                    this.catchItem = (short) 261;
                }
                else if (this.type == 56)
                {
                    this.noTileCollide = true;
                    this.noGravity = true;
                    this.width = 30;
                    this.height = 30;
                    this.aiStyle = 13;
                    this.damage = 25;
                    this.defense = 10;
                    this.lifeMax = 60;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.0f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 90f;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 57)
                {
                    this.noGravity = true;
                    this.width = 18;
                    this.height = 20;
                    this.aiStyle = 16;
                    this.damage = 30;
                    this.defense = 6;
                    this.lifeMax = 100;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 500f;
                }
                else if (this.type == 58)
                {
                    this.npcSlots = 0.5f;
                    this.noGravity = true;
                    this.width = 18;
                    this.height = 20;
                    this.aiStyle = 16;
                    this.damage = 25;
                    this.defense = 2;
                    this.lifeMax = 30;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 50f;
                }
                else if (this.type == 59)
                {
                    this.width = 24;
                    this.height = 18;
                    this.aiStyle = 1;
                    this.damage = 15;
                    this.defense = 10;
                    this.lifeMax = 50;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.scale = 1.1f;
                    this.alpha = 50;
                    this.lavaImmune = true;
                    this.value = 120f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 60)
                {
                    this.npcSlots = 0.5f;
                    this.width = 22;
                    this.height = 18;
                    this.aiStyle = 14;
                    this.damage = 35;
                    this.defense = 8;
                    this.lifeMax = 46;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.8f;
                    this.DeathSound = SoundID.NPCDeath4;
                    this.value = 120f;
                    this.scale = 1.1f;
                    this.lavaImmune = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 61)
                {
                    this.width = 36;
                    this.height = 36;
                    this.aiStyle = 17;
                    this.damage = 15;
                    this.defense = 4;
                    this.lifeMax = 40;
                    this.knockBackResist = 0.8f;
                    this.HitSound = SoundID.NPCHit28;
                    this.DeathSound = SoundID.NPCDeath31;
                    this.value = 60f;
                }
                else if (this.type == 62)
                {
                    this.npcSlots = 2f;
                    this.width = 28;
                    this.height = 48;
                    this.aiStyle = 14;
                    this.damage = 32;
                    this.defense = 8;
                    this.lifeMax = 120;
                    this.HitSound = SoundID.NPCHit21;
                    this.knockBackResist = 0.8f;
                    this.DeathSound = SoundID.NPCDeath24;
                    this.value = 300f;
                    this.lavaImmune = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                }
                else if (this.type == 63)
                {
                    this.noGravity = true;
                    this.width = 26;
                    this.height = 26;
                    this.aiStyle = 18;
                    this.damage = 25;
                    this.defense = 4;
                    this.lifeMax = 34;
                    this.HitSound = SoundID.NPCHit25;
                    this.DeathSound = SoundID.NPCDeath28;
                    this.value = 100f;
                    this.alpha = 20;
                }
                else if (this.type == 64)
                {
                    this.noGravity = true;
                    this.width = 26;
                    this.height = 26;
                    this.aiStyle = 18;
                    this.damage = 30;
                    this.defense = 6;
                    this.lifeMax = 70;
                    this.HitSound = SoundID.NPCHit25;
                    this.DeathSound = SoundID.NPCDeath28;
                    this.value = 100f;
                    this.alpha = 20;
                }
                else if (this.type == 65)
                {
                    this.noGravity = true;
                    this.width = 100;
                    this.height = 24;
                    this.aiStyle = 16;
                    this.damage = 40;
                    this.defense = 2;
                    this.lifeMax = 300;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 400f;
                    this.knockBackResist = 0.7f;
                }
                else if (this.type == 66)
                {
                    this.npcSlots = 2f;
                    this.width = 28;
                    this.height = 48;
                    this.aiStyle = 14;
                    this.damage = 32;
                    this.defense = 8;
                    this.lifeMax = 140;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.8f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 1000f;
                    this.lavaImmune = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                }
                else if (this.type == 67)
                {
                    this.width = 28;
                    this.height = 20;
                    this.aiStyle = 3;
                    this.damage = 20;
                    this.defense = 10;
                    this.lifeMax = 40;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 60f;
                }
                else if (this.type == 68)
                {
                    this.width = 80;
                    this.height = 102;
                    this.aiStyle = 11;
                    this.damage = 1000;
                    this.defense = 9999;
                    this.lifeMax = 9999;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.buffImmune[189] = this.buffImmune[169] = this.buffImmune[183] = true;
                }
                else if (this.type == 69)
                {
                    this.width = 24;
                    this.height = 24;
                    this.aiStyle = 19;
                    this.damage = 10;
                    this.defense = 6;
                    this.lifeMax = 45;
                    this.HitSound = SoundID.NPCHit31;
                    this.DeathSound = SoundID.NPCDeath34;
                    this.knockBackResist = 0.0f;
                    this.value = 60f;
                    this.behindTiles = true;
                }
                else if (this.type == 70)
                {
                    this.npcSlots = 0.3f;
                    this.width = 34;
                    this.height = 34;
                    this.aiStyle = 20;
                    this.damage = 32;
                    this.defense = 100;
                    this.lifeMax = 100;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.dontTakeDamage = true;
                    this.scale = 1.5f;
                }
                else if (this.type == 71)
                {
                    this.npcSlots = 2f;
                    this.width = 36;
                    this.height = 24;
                    this.aiStyle = 1;
                    this.damage = 30;
                    this.defense = 7;
                    this.lifeMax = 150;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.alpha = 60;
                    this.value = 150f;
                    this.scale = 1.25f;
                    this.knockBackResist = 0.6f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                    this.rarity = 1;
                }
                else if (this.type == 72)
                {
                    this.npcSlots = 0.3f;
                    this.width = 34;
                    this.height = 34;
                    this.aiStyle = 21;
                    this.damage = 24;
                    this.defense = 100;
                    this.lifeMax = 100;
                    this.alpha = 100;
                    this.behindTiles = true;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.dontTakeDamage = true;
                    this.scale = 1.2f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                }
                else if (this.type == 73)
                {
                    this.scale = 0.95f;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 20;
                    this.defense = 6;
                    this.lifeMax = 80;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.7f;
                    this.value = 200f;
                    this.buffImmune[31] = false;
                    this.rarity = 1;
                }
                else if (this.type == 74 || this.type == 297 || this.type == 298)
                {
                    this.width = 14;
                    this.height = 14;
                    this.aiStyle = 24;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.8f;
                    this.DeathSound = SoundID.NPCDeath1;
                    if (this.type == 74)
                        this.catchItem = (short) 2015;
                    if (this.type == 297)
                        this.catchItem = (short) 2016;
                    if (this.type == 298)
                        this.catchItem = (short) 2017;
                    this.npcSlots = 0.4f;
                }
                else if (this.type == 75)
                {
                    this.noGravity = true;
                    this.width = 20;
                    this.height = 20;
                    this.aiStyle = 22;
                    this.damage = 55;
                    this.defense = 20;
                    this.lifeMax = 150;
                    this.HitSound = SoundID.NPCHit5;
                    this.knockBackResist = 0.6f;
                    this.DeathSound = SoundID.NPCDeath7;
                    this.value = 350f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 77)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 40;
                    this.defense = 28;
                    this.lifeMax = 260;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.4f;
                    this.value = 400f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 78)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 50;
                    this.defense = 16;
                    this.lifeMax = 130;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.knockBackResist = 0.6f;
                    this.value = 600f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 79)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 60;
                    this.defense = 18;
                    this.lifeMax = 180;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.knockBackResist = 0.5f;
                    this.value = 700f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 80)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 55;
                    this.defense = 18;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.knockBackResist = 0.55f;
                    this.value = 700f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 81)
                {
                    this.width = 40;
                    this.height = 30;
                    this.aiStyle = 1;
                    this.damage = 55;
                    this.defense = 20;
                    this.lifeMax = 170;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.alpha = 55;
                    this.value = 400f;
                    this.scale = 1.1f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 82)
                {
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.width = 24;
                    this.height = 44;
                    this.aiStyle = 22;
                    this.damage = 65;
                    this.defense = 16;
                    this.lifeMax = 160;
                    this.HitSound = SoundID.NPCHit54;
                    this.DeathSound = SoundID.NPCDeath52;
                    this.alpha = 100;
                    this.value = 500f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.knockBackResist = 0.7f;
                }
                else if (this.type == 83)
                {
                    this.width = 40;
                    this.height = 40;
                    this.aiStyle = 23;
                    this.damage = 80;
                    this.defense = 18;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.value = 1000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.knockBackResist = 0.4f;
                }
                else if (this.type == 84)
                {
                    this.width = 40;
                    this.height = 40;
                    this.aiStyle = 23;
                    this.damage = 80;
                    this.defense = 18;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.value = 1000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.knockBackResist = 0.4f;
                }
                else if (this.type == 85)
                {
                    this.width = 24;
                    this.height = 24;
                    this.aiStyle = 25;
                    this.damage = 80;
                    this.defense = 30;
                    this.lifeMax = 500;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.value = 100000f;
                    this.knockBackResist = 0.3f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.rarity = 4;
                }
                else if (this.type == 86)
                {
                    this.width = 46;
                    this.height = 42;
                    this.aiStyle = 26;
                    this.damage = 65;
                    this.defense = 30;
                    this.lifeMax = 400;
                    this.HitSound = SoundID.NPCHit12;
                    this.DeathSound = SoundID.NPCDeath18;
                    this.knockBackResist = 0.3f;
                    this.value = 1000f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 87)
                {
                    this.noTileCollide = true;
                    this.npcSlots = 5f;
                    this.width = 32;
                    this.height = 32;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 80;
                    this.defense = 10;
                    this.lifeMax = 4000;
                    this.HitSound = SoundID.NPCHit7;
                    this.DeathSound = SoundID.NPCDeath8;
                    this.noGravity = true;
                    this.knockBackResist = 0.0f;
                    this.value = 10000f;
                    this.scale = 1f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                }
                else if (this.type == 88)
                {
                    this.noTileCollide = true;
                    this.width = 32;
                    this.height = 32;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 40;
                    this.defense = 20;
                    this.lifeMax = 4000;
                    this.HitSound = SoundID.NPCHit7;
                    this.DeathSound = SoundID.NPCDeath8;
                    this.noGravity = true;
                    this.knockBackResist = 0.0f;
                    this.value = 10000f;
                    this.scale = 1f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.dontCountMe = true;
                }
                else if (this.type == 89)
                {
                    this.noTileCollide = true;
                    this.width = 32;
                    this.height = 32;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 40;
                    this.defense = 20;
                    this.lifeMax = 4000;
                    this.HitSound = SoundID.NPCHit7;
                    this.DeathSound = SoundID.NPCDeath8;
                    this.noGravity = true;
                    this.knockBackResist = 0.0f;
                    this.value = 2000f;
                    this.scale = 1f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.dontCountMe = true;
                }
                else if (this.type == 90)
                {
                    this.noTileCollide = true;
                    this.width = 32;
                    this.height = 32;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 40;
                    this.defense = 20;
                    this.lifeMax = 4000;
                    this.HitSound = SoundID.NPCHit7;
                    this.DeathSound = SoundID.NPCDeath8;
                    this.noGravity = true;
                    this.knockBackResist = 0.0f;
                    this.value = 10000f;
                    this.scale = 1f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.dontCountMe = true;
                }
                else if (this.type == 91)
                {
                    this.noTileCollide = true;
                    this.width = 32;
                    this.height = 32;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 40;
                    this.defense = 20;
                    this.lifeMax = 4000;
                    this.HitSound = SoundID.NPCHit7;
                    this.DeathSound = SoundID.NPCDeath8;
                    this.noGravity = true;
                    this.knockBackResist = 0.0f;
                    this.value = 10000f;
                    this.scale = 1f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.dontCountMe = true;
                }
                else if (this.type == 92)
                {
                    this.noTileCollide = true;
                    this.width = 32;
                    this.height = 32;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 40;
                    this.defense = 20;
                    this.lifeMax = 4000;
                    this.HitSound = SoundID.NPCHit7;
                    this.DeathSound = SoundID.NPCDeath8;
                    this.noGravity = true;
                    this.knockBackResist = 0.0f;
                    this.value = 10000f;
                    this.scale = 1f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.dontCountMe = true;
                }
                else if (this.type == 93)
                {
                    this.npcSlots = 0.5f;
                    this.width = 26;
                    this.height = 20;
                    this.aiStyle = 14;
                    this.damage = 45;
                    this.defense = 16;
                    this.lifeMax = 100;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.75f;
                    this.DeathSound = SoundID.NPCDeath4;
                    this.value = 400f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 94)
                {
                    this.npcSlots = 1f;
                    this.width = 44;
                    this.height = 44;
                    this.aiStyle = 5;
                    this.damage = 60;
                    this.defense = 32;
                    this.lifeMax = 230;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.knockBackResist = 0.55f;
                    this.value = 500f;
                }
                else if (this.type == 95)
                {
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 45;
                    this.defense = 10;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.scale = 0.9f;
                    this.value = 300f;
                }
                else if (this.type == 96)
                {
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 28;
                    this.defense = 20;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.scale = 0.9f;
                    this.value = 300f;
                    this.dontCountMe = true;
                }
                else if (this.type == 97)
                {
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 26;
                    this.defense = 30;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.scale = 0.9f;
                    this.value = 300f;
                    this.dontCountMe = true;
                }
                else if (this.type == 98)
                {
                    this.npcSlots = 3.5f;
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 70;
                    this.defense = 36;
                    this.lifeMax = 500;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 700f;
                }
                else if (this.type == 99)
                {
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 55;
                    this.defense = 40;
                    this.lifeMax = 500;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 700f;
                    this.dontCountMe = true;
                }
                else if (this.type == 100)
                {
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 40;
                    this.defense = 44;
                    this.lifeMax = 500;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 700f;
                    this.dontCountMe = true;
                }
                else if (this.type == 101)
                {
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.behindTiles = true;
                    this.width = 30;
                    this.height = 30;
                    this.aiStyle = 13;
                    this.damage = 70;
                    this.defense = 30;
                    this.lifeMax = 320;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.2f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 600f;
                }
                else if (this.type == 102)
                {
                    this.npcSlots = 0.5f;
                    this.noGravity = true;
                    this.width = 18;
                    this.height = 20;
                    this.aiStyle = 16;
                    this.damage = 80;
                    this.defense = 22;
                    this.lifeMax = 90;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 500f;
                }
                else if (this.type == 103)
                {
                    this.noGravity = true;
                    this.width = 26;
                    this.height = 26;
                    this.aiStyle = 18;
                    this.damage = 80;
                    this.defense = 30;
                    this.lifeMax = 120;
                    this.HitSound = SoundID.NPCHit25;
                    this.DeathSound = SoundID.NPCDeath28;
                    this.value = 800f;
                    this.alpha = 20;
                }
                else if (this.type == 104)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 70;
                    this.defense = 38;
                    this.lifeMax = 350;
                    this.HitSound = SoundID.NPCHit6;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.4f;
                    this.value = 1000f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 105)
                {
                    this.friendly = true;
                    this.width = 18;
                    this.height = 34;
                    this.aiStyle = 0;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                    this.rarity = 1;
                }
                else if (this.type == 106)
                {
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 0;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                    this.rarity = 1;
                }
                else if (this.type == 107)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 108)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 109)
                {
                    this.width = 34;
                    this.height = 78;
                    this.aiStyle = 3;
                    this.damage = 50;
                    this.defense = 20;
                    this.lifeMax = 400;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.4f;
                    this.value = 8000f;
                }
                else if (this.type == 110)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 45;
                    this.defense = 14;
                    this.lifeMax = 210;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.55f;
                    this.value = 400f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 112)
                {
                    this.width = 16;
                    this.height = 16;
                    this.aiStyle = 9;
                    this.damage = 65;
                    this.defense = 0;
                    this.lifeMax = 1;
                    this.HitSound = (LegacySoundStyle) null;
                    this.DeathSound = SoundID.NPCDeath9;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.scale = 0.9f;
                    this.alpha = 80;
                }
                else if (this.type == 113)
                {
                    this.npcSlots = 10f;
                    this.width = 100;
                    this.height = 100;
                    this.aiStyle = 27;
                    this.damage = 50;
                    this.defense = 12;
                    this.lifeMax = 8000;
                    this.HitSound = SoundID.NPCHit8;
                    this.DeathSound = SoundID.NPCDeath10;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.behindTiles = true;
                    this.knockBackResist = 0.0f;
                    this.scale = 1.2f;
                    this.boss = true;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.value = 80000f;
                }
                else if (this.type == 114)
                {
                    this.width = 100;
                    this.height = 100;
                    this.aiStyle = 28;
                    this.damage = 50;
                    this.defense = 0;
                    this.lifeMax = 8000;
                    this.HitSound = SoundID.NPCHit8;
                    this.DeathSound = SoundID.NPCDeath10;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.behindTiles = true;
                    this.knockBackResist = 0.0f;
                    this.scale = 1.2f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.value = 80000f;
                }
                else if (this.type == 115)
                {
                    this.width = 30;
                    this.height = 30;
                    this.aiStyle = 29;
                    this.damage = 30;
                    this.defense = 10;
                    this.lifeMax = 240;
                    this.HitSound = SoundID.NPCHit9;
                    this.DeathSound = SoundID.NPCDeath11;
                    this.noGravity = true;
                    this.behindTiles = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 1.1f;
                }
                else if (this.type == 116)
                {
                    this.width = 30;
                    this.height = 32;
                    this.aiStyle = 2;
                    this.damage = 30;
                    this.defense = 6;
                    this.lifeMax = 80;
                    this.HitSound = SoundID.NPCHit9;
                    this.knockBackResist = 0.8f;
                    this.DeathSound = SoundID.NPCDeath12;
                }
                else if (this.type == 117)
                {
                    this.width = 14;
                    this.height = 14;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 26;
                    this.defense = 2;
                    this.lifeMax = 60;
                    this.HitSound = SoundID.NPCHit9;
                    this.DeathSound = SoundID.NPCDeath12;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                }
                else if (this.type == 118)
                {
                    this.width = 14;
                    this.height = 14;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 22;
                    this.defense = 6;
                    this.lifeMax = 60;
                    this.HitSound = SoundID.NPCHit9;
                    this.DeathSound = SoundID.NPCDeath12;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                }
                else if (this.type == 119)
                {
                    this.width = 14;
                    this.height = 14;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 18;
                    this.defense = 10;
                    this.lifeMax = 60;
                    this.HitSound = SoundID.NPCHit9;
                    this.DeathSound = SoundID.NPCDeath12;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                }
                else if (this.type == 120)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 40;
                    this.defense = 30;
                    this.lifeMax = 370;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.knockBackResist = 0.4f;
                    this.value = 600f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 121)
                {
                    this.width = 40;
                    this.height = 30;
                    this.aiStyle = 14;
                    this.damage = 45;
                    this.defense = 20;
                    this.lifeMax = 60;
                    this.HitSound = SoundID.NPCHit1;
                    this.alpha = 55;
                    this.knockBackResist = 0.8f;
                    this.scale = 1.1f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 122)
                {
                    this.noGravity = true;
                    this.width = 20;
                    this.height = 20;
                    this.aiStyle = 22;
                    this.damage = 60;
                    this.defense = 22;
                    this.lifeMax = 220;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.8f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 600f;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 123)
                {
                    this.friendly = true;
                    this.width = 18;
                    this.height = 34;
                    this.aiStyle = 0;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                    this.scale = 0.9f;
                    this.rarity = 1;
                }
                else if (this.type == 124)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 125)
                {
                    this.width = 100;
                    this.height = 110;
                    this.aiStyle = 30;
                    this.defense = 10;
                    this.damage = 45;
                    this.lifeMax = 20000;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.timeLeft = NPC.activeTime * 30;
                    this.boss = true;
                    this.value = 120000f;
                    this.npcSlots = 5f;
                }
                else if (this.type == 126)
                {
                    this.width = 100;
                    this.height = 110;
                    this.aiStyle = 31;
                    this.defense = 10;
                    this.damage = 50;
                    this.lifeMax = 23000;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.timeLeft = NPC.activeTime * 30;
                    this.boss = true;
                    this.value = 120000f;
                    this.npcSlots = 5f;
                }
                else if (this.type == (int) sbyte.MaxValue)
                {
                    this.width = 80;
                    this.height = 102;
                    this.aiStyle = 32;
                    this.damage = 47;
                    this.defense = 24;
                    this.lifeMax = 28000;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.value = 120000f;
                    this.knockBackResist = 0.0f;
                    this.boss = true;
                    this.npcSlots = 6f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.buffImmune[189] = this.buffImmune[169] = this.buffImmune[183] = true;
                    this.boss = true;
                }
                else if (this.type == 128)
                {
                    this.width = 52;
                    this.height = 52;
                    this.aiStyle = 35;
                    this.damage = 30;
                    this.defense = 23;
                    this.lifeMax = 7000;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.netAlways = true;
                }
                else if (this.type == 129)
                {
                    this.width = 52;
                    this.height = 52;
                    this.aiStyle = 33;
                    this.damage = 56;
                    this.defense = 38;
                    this.lifeMax = 9000;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.netAlways = true;
                }
                else if (this.type == 130)
                {
                    this.width = 52;
                    this.height = 52;
                    this.aiStyle = 34;
                    this.damage = 52;
                    this.defense = 34;
                    this.lifeMax = 9000;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.netAlways = true;
                }
                else if (this.type == 131)
                {
                    this.width = 52;
                    this.height = 52;
                    this.aiStyle = 36;
                    this.damage = 29;
                    this.defense = 20;
                    this.lifeMax = 6000;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.netAlways = true;
                }
                else if (this.type == 132)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 15;
                    this.defense = 5;
                    this.lifeMax = 40;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 65f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 133)
                {
                    this.width = 30;
                    this.height = 32;
                    this.aiStyle = 2;
                    this.damage = 40;
                    this.defense = 20;
                    this.lifeMax = 300;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.8f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 500f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 134)
                {
                    this.npcSlots = 5f;
                    this.width = 38;
                    this.height = 38;
                    this.aiStyle = 37;
                    this.defense = 0;
                    this.damage = 70;
                    this.lifeMax = 80000;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 120000f;
                    this.scale = 1.25f;
                    this.boss = true;
                    this.netAlways = true;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    flag = true;
                    this.alpha = (int) byte.MaxValue;
                }
                else if (this.type == 135)
                {
                    this.npcSlots = 5f;
                    this.width = 38;
                    this.height = 38;
                    this.aiStyle = 37;
                    this.damage = 55;
                    this.defense = 30;
                    this.lifeMax = 80000;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.netAlways = true;
                    this.scale = 1.25f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    flag = true;
                    this.dontCountMe = true;
                    this.alpha = (int) byte.MaxValue;
                }
                else if (this.type == 136)
                {
                    this.npcSlots = 5f;
                    this.width = 38;
                    this.height = 38;
                    this.aiStyle = 37;
                    this.damage = 40;
                    this.defense = 35;
                    this.lifeMax = 80000;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.scale = 1.25f;
                    this.netAlways = true;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    flag = true;
                    this.dontCountMe = true;
                    this.alpha = (int) byte.MaxValue;
                }
                else if (this.type == 139)
                {
                    this.npcSlots = 1f;
                    this.width = 30;
                    this.height = 30;
                    this.aiStyle = 5;
                    this.damage = 50;
                    this.defense = 20;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.noGravity = true;
                    this.knockBackResist = 0.8f;
                    this.noTileCollide = true;
                    flag = true;
                }
                else if (this.type == 137)
                {
                    this.width = 26;
                    this.height = 20;
                    this.aiStyle = 14;
                    this.damage = 75;
                    this.defense = 30;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.75f;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.value = 500f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 138)
                {
                    this.width = 24;
                    this.height = 18;
                    this.aiStyle = 1;
                    this.damage = 70;
                    this.defense = 30;
                    this.lifeMax = 180;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.alpha = 100;
                    this.value = 400f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.knockBackResist = 0.85f;
                    this.scale = 1.05f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 140)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 55;
                    this.defense = 28;
                    this.lifeMax = 260;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.knockBackResist = 0.4f;
                    this.value = 400f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                    this.buffImmune[24] = true;
                }
                else if (this.type == 141)
                {
                    this.width = 34;
                    this.height = 28;
                    this.aiStyle = 1;
                    this.damage = 50;
                    this.defense = 18;
                    this.lifeMax = 150;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.alpha = 55;
                    this.value = 400f;
                    this.scale = 1.1f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                    this.knockBackResist = 0.8f;
                }
                else if (this.type == 142)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 143)
                {
                    this.width = 26;
                    this.height = 40;
                    this.aiStyle = 38;
                    this.damage = 50;
                    this.defense = 20;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit11;
                    this.DeathSound = SoundID.NPCDeath15;
                    this.knockBackResist = 0.6f;
                    this.value = 400f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                }
                else if (this.type == 144)
                {
                    this.width = 26;
                    this.height = 40;
                    this.aiStyle = 38;
                    this.damage = 65;
                    this.defense = 26;
                    this.lifeMax = 240;
                    this.HitSound = SoundID.NPCHit11;
                    this.DeathSound = SoundID.NPCDeath15;
                    this.knockBackResist = 0.6f;
                    this.value = 400f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.coldDamage = true;
                }
                else if (this.type == 145)
                {
                    this.width = 26;
                    this.height = 40;
                    this.aiStyle = 38;
                    this.damage = 55;
                    this.defense = 22;
                    this.lifeMax = 220;
                    this.HitSound = SoundID.NPCHit11;
                    this.DeathSound = SoundID.NPCDeath15;
                    this.knockBackResist = 0.6f;
                    this.value = 400f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.coldDamage = true;
                }
                else if (this.type == 147)
                {
                    this.width = 24;
                    this.height = 18;
                    this.aiStyle = 1;
                    this.damage = 8;
                    this.defense = 4;
                    this.lifeMax = 30;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.alpha = 50;
                    this.value = 50f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                    this.coldDamage = true;
                }
                else if (this.type == 148)
                {
                    this.width = 16;
                    this.height = 34;
                    this.aiStyle = 7;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.catchItem = (short) 2205;
                }
                else if (this.type == 149)
                {
                    this.width = 16;
                    this.height = 34;
                    this.aiStyle = 7;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.catchItem = (short) 2205;
                }
                else if (this.type == 150)
                {
                    this.npcSlots = 0.5f;
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 14;
                    this.damage = 18;
                    this.defense = 6;
                    this.lifeMax = 30;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.8f;
                    this.DeathSound = SoundID.NPCDeath4;
                    this.value = 250f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 151)
                {
                    this.npcSlots = 0.5f;
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 14;
                    this.damage = 50;
                    this.defense = 16;
                    this.lifeMax = 160;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.6f;
                    this.DeathSound = SoundID.NPCDeath4;
                    this.value = 400f;
                    this.scale = 1.15f;
                    this.lavaImmune = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 152)
                {
                    this.npcSlots = 0.5f;
                    this.width = 38;
                    this.height = 34;
                    this.aiStyle = 14;
                    this.damage = 80;
                    this.defense = 24;
                    this.lifeMax = 220;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.65f;
                    this.DeathSound = SoundID.NPCDeath4;
                    this.value = 400f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 153)
                {
                    this.npcSlots = 2f;
                    this.width = 46;
                    this.height = 32;
                    this.aiStyle = 39;
                    this.damage = 80;
                    this.defense = 30;
                    this.lifeMax = 470;
                    this.HitSound = SoundID.NPCHit24;
                    this.knockBackResist = 0.3f;
                    this.DeathSound = SoundID.NPCDeath27;
                    this.value = 500f;
                    this.noGravity = false;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 154)
                {
                    this.npcSlots = 1.5f;
                    this.width = 46;
                    this.height = 32;
                    this.aiStyle = 39;
                    this.damage = 55;
                    this.defense = 28;
                    this.lifeMax = 400;
                    this.HitSound = SoundID.NPCHit24;
                    this.knockBackResist = 0.3f;
                    this.DeathSound = SoundID.NPCDeath27;
                    this.value = 450f;
                    this.noGravity = false;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 155)
                {
                    this.width = 46;
                    this.height = 30;
                    this.aiStyle = 26;
                    this.damage = 65;
                    this.defense = 30;
                    this.lifeMax = 300;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.3f;
                    this.value = 1000f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 156)
                {
                    this.npcSlots = 2f;
                    this.width = 28;
                    this.height = 48;
                    this.aiStyle = 14;
                    this.damage = 50;
                    this.defense = 40;
                    this.lifeMax = 600;
                    this.HitSound = SoundID.NPCHit21;
                    this.knockBackResist = 0.5f;
                    this.DeathSound = SoundID.NPCDeath24;
                    this.value = 1200f;
                    this.lavaImmune = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                }
                else if (this.type == 157)
                {
                    this.npcSlots = 0.5f;
                    this.noGravity = true;
                    this.width = 74;
                    this.height = 20;
                    this.aiStyle = 16;
                    this.damage = 75;
                    this.defense = 30;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 500f;
                }
                else if (this.type == 160)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 161)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 16;
                    this.defense = 8;
                    this.lifeMax = 50;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.45f;
                    this.value = 80f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 163)
                {
                    this.width = 50;
                    this.height = 20;
                    this.aiStyle = 3;
                    this.damage = 90;
                    this.defense = 40;
                    this.lifeMax = 350;
                    this.HitSound = SoundID.NPCHit29;
                    this.DeathSound = SoundID.NPCDeath31;
                    this.knockBackResist = 0.25f;
                    this.value = 500f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                    this.npcSlots = 0.5f;
                    this.timeLeft = NPC.activeTime * 2;
                }
                else if (this.type == 238)
                {
                    this.noGravity = true;
                    this.width = 36;
                    this.height = 36;
                    this.aiStyle = 40;
                    this.damage = 100;
                    this.defense = 40;
                    this.lifeMax = 350;
                    this.HitSound = SoundID.NPCHit29;
                    this.DeathSound = SoundID.NPCDeath31;
                    this.knockBackResist = 0.25f;
                    this.value = 500f;
                    this.timeLeft = NPC.activeTime * 2;
                    this.npcSlots = 0.5f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 164)
                {
                    this.width = 50;
                    this.height = 20;
                    this.aiStyle = 3;
                    this.damage = 30;
                    this.defense = 10;
                    this.lifeMax = 80;
                    this.HitSound = SoundID.NPCHit29;
                    this.DeathSound = SoundID.NPCDeath31;
                    this.knockBackResist = 0.25f;
                    this.value = 100f;
                    this.timeLeft = NPC.activeTime * 2;
                    this.npcSlots = 0.5f;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 165)
                {
                    this.noGravity = true;
                    this.width = 36;
                    this.height = 36;
                    this.aiStyle = 40;
                    this.damage = 30;
                    this.defense = 10;
                    this.lifeMax = 80;
                    this.HitSound = SoundID.NPCHit29;
                    this.DeathSound = SoundID.NPCDeath31;
                    this.knockBackResist = 0.25f;
                    this.value = 100f;
                    this.timeLeft = NPC.activeTime * 2;
                    this.npcSlots = 0.5f;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 167)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 24;
                    this.defense = 10;
                    this.lifeMax = 70;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 200f;
                    this.buffImmune[31] = false;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 168)
                {
                    this.width = 16;
                    this.height = 34;
                    this.aiStyle = 3;
                    this.damage = 20;
                    this.defense = 4;
                    this.lifeMax = 70;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 500f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 169)
                {
                    this.noGravity = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 22;
                    this.damage = 55;
                    this.defense = 20;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit5;
                    this.knockBackResist = 0.6f;
                    this.DeathSound = SoundID.NPCDeath7;
                    this.value = 1500f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.buffImmune[31] = false;
                    this.buffImmune[44] = true;
                    this.coldDamage = true;
                }
                else if (this.type == 170)
                {
                    this.width = 44;
                    this.height = 36;
                    this.aiStyle = 2;
                    this.damage = 70;
                    this.defense = 16;
                    this.lifeMax = 210;
                    this.HitSound = SoundID.NPCHit27;
                    this.DeathSound = SoundID.NPCDeath30;
                    this.knockBackResist = 0.5f;
                    this.value = 2000f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 171)
                {
                    this.width = 44;
                    this.height = 36;
                    this.aiStyle = 2;
                    this.damage = 70;
                    this.defense = 16;
                    this.lifeMax = 210;
                    this.HitSound = SoundID.NPCHit27;
                    this.DeathSound = SoundID.NPCDeath30;
                    this.knockBackResist = 0.5f;
                    this.value = 2000f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 172)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 8;
                    this.damage = 200;
                    this.defense = 30;
                    this.lifeMax = 600;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.3f;
                    this.value = 5000f;
                    this.buffImmune[20] = true;
                    this.rarity = 2;
                }
                else if (this.type == 173)
                {
                    this.npcSlots = 1f;
                    this.width = 30;
                    this.height = 30;
                    this.aiStyle = 5;
                    this.damage = 22;
                    this.defense = 8;
                    this.lifeMax = 40;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.knockBackResist = 0.5f;
                    this.value = 90f;
                }
                else if (this.type == 174)
                {
                    this.npcSlots = 1f;
                    this.width = 52;
                    this.height = 26;
                    this.aiStyle = 41;
                    this.damage = 65;
                    this.defense = 26;
                    this.lifeMax = 220;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.3f;
                    this.value = 450f;
                }
                else if (this.type == 175)
                {
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.width = 30;
                    this.height = 30;
                    this.aiStyle = 13;
                    this.damage = 100;
                    this.defense = 30;
                    this.lifeMax = 300;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.25f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 650f;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 176)
                {
                    this.width = 34;
                    this.height = 32;
                    this.aiStyle = 5;
                    this.damage = 70;
                    this.defense = 22;
                    this.lifeMax = 220;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.5f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 600f;
                    this.noGravity = true;
                    this.buffImmune[20] = true;
                    this.npcSlots = 1.5f;
                }
                else if (this.type == 177)
                {
                    this.npcSlots = 1f;
                    this.width = 58;
                    this.height = 44;
                    this.aiStyle = 41;
                    this.damage = 80;
                    this.defense = 26;
                    this.lifeMax = 300;
                    this.HitSound = SoundID.NPCHit22;
                    this.DeathSound = SoundID.NPCDeath25;
                    this.knockBackResist = 0.5f;
                    this.value = 500f;
                }
                else if (this.type == 178)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 179)
                {
                    this.width = 40;
                    this.height = 40;
                    this.aiStyle = 23;
                    this.damage = 80;
                    this.defense = 18;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.value = 1000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.knockBackResist = 0.4f;
                }
                else if (this.type == 180)
                {
                    this.width = 44;
                    this.height = 36;
                    this.aiStyle = 2;
                    this.damage = 70;
                    this.defense = 16;
                    this.lifeMax = 210;
                    this.HitSound = SoundID.NPCHit27;
                    this.DeathSound = SoundID.NPCDeath30;
                    this.knockBackResist = 0.5f;
                    this.value = 4000f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 181)
                {
                    this.width = 18;
                    this.height = 44;
                    this.aiStyle = 3;
                    this.damage = 25;
                    this.defense = 10;
                    this.lifeMax = 70;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.4f;
                    this.value = 200f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 182)
                {
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.width = 24;
                    this.height = 62;
                    this.aiStyle = 22;
                    this.damage = 65;
                    this.defense = 18;
                    this.lifeMax = 240;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.alpha = 100;
                    this.value = 500f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.knockBackResist = 0.7f;
                }
                else if (this.type == 183)
                {
                    this.width = 40;
                    this.height = 30;
                    this.aiStyle = 1;
                    this.damage = 60;
                    this.defense = 26;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.alpha = 55;
                    this.value = 400f;
                    this.scale = 1.1f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 184)
                {
                    this.width = 24;
                    this.height = 18;
                    this.aiStyle = 1;
                    this.damage = 12;
                    this.defense = 8;
                    this.lifeMax = 60;
                    this.scale = 1.1f;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.alpha = 50;
                    this.value = 200f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                    this.coldDamage = true;
                }
                else if (this.type == 185)
                {
                    this.width = 28;
                    this.height = 28;
                    this.aiStyle = 3;
                    this.damage = 26;
                    this.defense = 12;
                    this.lifeMax = 70;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 1.1f;
                    this.value = 200f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                    this.coldDamage = true;
                }
                else if (this.type == 186)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 16;
                    this.defense = 8;
                    this.lifeMax = 50;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.45f;
                    this.value = 65f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 187)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 13;
                    this.defense = 6;
                    this.lifeMax = 40;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.55f;
                    this.value = 55f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 188)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 13;
                    this.defense = 8;
                    this.lifeMax = 45;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.45f;
                    this.value = 80f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 189)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 16;
                    this.defense = 4;
                    this.lifeMax = 45;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.55f;
                    this.value = 70f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 190)
                {
                    this.width = 30;
                    this.height = 32;
                    this.aiStyle = 2;
                    this.damage = 18;
                    this.defense = 4;
                    this.lifeMax = 65;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.7f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 75f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 191)
                {
                    this.width = 30;
                    this.height = 32;
                    this.aiStyle = 2;
                    this.damage = 16;
                    this.defense = 2;
                    this.lifeMax = 60;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.85f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 75f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 192)
                {
                    this.width = 30;
                    this.height = 32;
                    this.aiStyle = 2;
                    this.damage = 18;
                    this.defense = 2;
                    this.lifeMax = 50;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.8f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 75f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 193)
                {
                    this.width = 30;
                    this.height = 32;
                    this.aiStyle = 2;
                    this.damage = 20;
                    this.defense = 0;
                    this.lifeMax = 60;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.8f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 75f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 194)
                {
                    this.width = 30;
                    this.height = 32;
                    this.aiStyle = 2;
                    this.damage = 14;
                    this.defense = 4;
                    this.lifeMax = 60;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.8f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 75f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 195)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 42;
                    this.damage = 10;
                    this.defense = 30;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                    this.rarity = 1;
                }
                else if (this.type == 196)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 35;
                    this.defense = 16;
                    this.lifeMax = 300;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.4f;
                    this.value = 10000f;
                    this.buffImmune[31] = false;
                    this.rarity = 1;
                }
                else if (this.type == 197)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 50;
                    this.defense = 28;
                    this.lifeMax = 280;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.45f;
                    this.value = 500f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 198)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 38;
                    this.defense = 20;
                    this.lifeMax = 400;
                    this.HitSound = SoundID.NPCHit26;
                    this.DeathSound = SoundID.NPCDeath29;
                    this.knockBackResist = 0.4f;
                    this.value = 650f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 199)
                {
                    this.width = 42;
                    this.height = 30;
                    this.aiStyle = 3;
                    this.damage = 60;
                    this.defense = 30;
                    this.lifeMax = 400;
                    this.HitSound = SoundID.NPCHit26;
                    this.DeathSound = SoundID.NPCDeath29;
                    this.knockBackResist = 0.0f;
                    this.value = 650f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 200)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 12;
                    this.defense = 4;
                    this.lifeMax = 38;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.6f;
                    this.value = 65f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 201)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 20;
                    this.defense = 12;
                    this.lifeMax = 55;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 130f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 202)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 18;
                    this.defense = 8;
                    this.lifeMax = 65;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 120f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 203)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 22;
                    this.defense = 8;
                    this.lifeMax = 60;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 110f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 204)
                {
                    this.width = 24;
                    this.height = 18;
                    this.aiStyle = 1;
                    this.damage = 28;
                    this.defense = 8;
                    this.lifeMax = 65;
                    this.scale = 1.15f;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.alpha = 50;
                    this.value = 300f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 205)
                {
                    this.width = 40;
                    this.height = 40;
                    this.aiStyle = 5;
                    this.damage = 70;
                    this.defense = 28;
                    this.lifeMax = 1000;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.4f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 600f;
                    this.noGravity = true;
                    this.buffImmune[20] = true;
                    this.rarity = 2;
                }
                else if (this.type == 206)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 60;
                    this.defense = 30;
                    this.lifeMax = 280;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                    this.value = 500f;
                    this.buffImmune[31] = false;
                    this.coldDamage = true;
                }
                else if (this.type == 207)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 208)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 209)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 210)
                {
                    this.width = 12;
                    this.height = 12;
                    this.aiStyle = 5;
                    this.damage = 20;
                    this.defense = 5;
                    this.lifeMax = 20;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.5f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 211)
                {
                    this.width = 8;
                    this.height = 8;
                    this.aiStyle = 5;
                    this.damage = 15;
                    this.defense = 2;
                    this.lifeMax = 10;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.5f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 212)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 35;
                    this.defense = 17;
                    this.lifeMax = 300;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.4f;
                    this.value = 700f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 213)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 50;
                    this.defense = 22;
                    this.lifeMax = 450;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.2f;
                    this.value = 1000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 214)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 30;
                    this.defense = 14;
                    this.lifeMax = 225;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.3f;
                    this.value = 1000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 215)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 35;
                    this.defense = 20;
                    this.lifeMax = 350;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.35f;
                    this.value = 1500f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 216)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 70;
                    this.defense = 30;
                    this.lifeMax = 3000;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.0f;
                    this.value = 50000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = true;
                }
                else if (this.type == 217)
                {
                    this.width = 28;
                    this.height = 20;
                    this.aiStyle = 3;
                    this.damage = 20;
                    this.defense = 10;
                    this.lifeMax = 40;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath16;
                    this.value = 60f;
                }
                else if (this.type == 218)
                {
                    this.width = 28;
                    this.height = 20;
                    this.aiStyle = 3;
                    this.damage = 20;
                    this.defense = 10;
                    this.lifeMax = 40;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath16;
                    this.value = 60f;
                }
                else if (this.type == 219)
                {
                    this.width = 28;
                    this.height = 20;
                    this.aiStyle = 3;
                    this.damage = 20;
                    this.defense = 10;
                    this.lifeMax = 40;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath16;
                    this.value = 60f;
                }
                else if (this.type == 220)
                {
                    this.width = 28;
                    this.height = 20;
                    this.aiStyle = 3;
                    this.damage = 20;
                    this.defense = 10;
                    this.lifeMax = 40;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 60f;
                }
                else if (this.type == 221)
                {
                    this.noGravity = true;
                    this.width = 26;
                    this.height = 26;
                    this.aiStyle = 18;
                    this.damage = 20;
                    this.defense = 2;
                    this.lifeMax = 30;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 100f;
                    this.alpha = 20;
                }
                else if (this.type == 222)
                {
                    this.width = 66;
                    this.height = 66;
                    this.aiStyle = 43;
                    this.damage = 30;
                    this.defense = 8;
                    this.lifeMax = 3400;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.timeLeft = NPC.activeTime * 30;
                    this.boss = true;
                    this.value = 100000f;
                    this.npcSlots = 7f;
                }
                else if (this.type == 223)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 16;
                    this.defense = 8;
                    this.lifeMax = 50;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.45f;
                    this.value = 70f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 224)
                {
                    this.width = 32;
                    this.height = 18;
                    this.aiStyle = 44;
                    this.damage = 9;
                    this.defense = 4;
                    this.lifeMax = 20;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.8f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 90f;
                    this.buffImmune[31] = false;
                }

                if (this.type == 225)
                {
                    this.width = 38;
                    this.height = 26;
                    this.aiStyle = 1;
                    this.damage = 10;
                    this.defense = 5;
                    this.lifeMax = 35;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.75f;
                    this.value = 25f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 226)
                {
                    this.npcSlots = 0.5f;
                    this.width = 34;
                    this.height = 50;
                    this.aiStyle = 14;
                    this.damage = 85;
                    this.defense = 28;
                    this.lifeMax = 260;
                    this.HitSound = SoundID.NPCHit23;
                    this.knockBackResist = 0.65f;
                    this.DeathSound = SoundID.NPCDeath26;
                    this.value = 400f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 227)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 228)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 229)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 230)
                {
                    this.width = 18;
                    this.height = 20;
                    this.aiStyle = 7;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.catchItem = (short) 261;
                }
                else if (this.type == 231)
                {
                    this.width = 34;
                    this.height = 32;
                    this.aiStyle = 5;
                    this.damage = 22;
                    this.defense = 16;
                    this.lifeMax = 50;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.3f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 200f;
                    this.noGravity = true;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 232)
                {
                    this.width = 34;
                    this.height = 32;
                    this.aiStyle = 5;
                    this.damage = 28;
                    this.defense = 12;
                    this.lifeMax = 42;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.6f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 200f;
                    this.noGravity = true;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 233)
                {
                    this.width = 34;
                    this.height = 32;
                    this.aiStyle = 5;
                    this.damage = 30;
                    this.defense = 14;
                    this.lifeMax = 38;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.45f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 200f;
                    this.noGravity = true;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 234)
                {
                    this.width = 34;
                    this.height = 32;
                    this.aiStyle = 5;
                    this.damage = 32;
                    this.defense = 6;
                    this.lifeMax = 42;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.55f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 200f;
                    this.noGravity = true;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 235)
                {
                    this.width = 34;
                    this.height = 32;
                    this.aiStyle = 5;
                    this.damage = 34;
                    this.defense = 4;
                    this.lifeMax = 38;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.6f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 200f;
                    this.noGravity = true;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 236)
                {
                    this.width = 50;
                    this.height = 20;
                    this.aiStyle = 3;
                    this.damage = 50;
                    this.defense = 14;
                    this.lifeMax = 120;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.25f;
                    this.value = 1000f;
                    this.timeLeft = NPC.activeTime * 2;
                    this.npcSlots = 0.75f;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 237)
                {
                    this.noGravity = true;
                    this.width = 36;
                    this.height = 36;
                    this.aiStyle = 40;
                    this.damage = 50;
                    this.defense = 14;
                    this.lifeMax = 120;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.25f;
                    this.value = 1000f;
                    this.timeLeft = NPC.activeTime * 2;
                    this.npcSlots = 0.75f;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 239)
                {
                    this.width = 50;
                    this.height = 20;
                    this.aiStyle = 3;
                    this.damage = 30;
                    this.defense = 8;
                    this.lifeMax = 60;
                    this.HitSound = SoundID.NPCHit20;
                    this.DeathSound = SoundID.NPCDeath23;
                    this.knockBackResist = 0.5f;
                    this.value = 130f;
                    this.timeLeft = NPC.activeTime * 2;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 240)
                {
                    this.noGravity = true;
                    this.width = 50;
                    this.height = 20;
                    this.aiStyle = 40;
                    this.damage = 30;
                    this.defense = 8;
                    this.lifeMax = 60;
                    this.HitSound = SoundID.NPCHit20;
                    this.DeathSound = SoundID.NPCDeath23;
                    this.knockBackResist = 0.5f;
                    this.value = 130f;
                    this.timeLeft = NPC.activeTime * 2;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 241)
                {
                    this.npcSlots = 0.5f;
                    this.noGravity = true;
                    this.width = 18;
                    this.height = 20;
                    this.aiStyle = 16;
                    this.damage = 30;
                    this.defense = 4;
                    this.lifeMax = 20;
                    this.HitSound = SoundID.NPCHit13;
                    this.DeathSound = SoundID.NPCDeath19;
                    this.value = 350f;
                }
                else if (this.type == 242)
                {
                    this.noGravity = true;
                    this.width = 26;
                    this.height = 26;
                    this.aiStyle = 18;
                    this.damage = 75;
                    this.defense = 20;
                    this.lifeMax = 150;
                    this.HitSound = SoundID.NPCHit13;
                    this.DeathSound = SoundID.NPCDeath19;
                    this.value = 800f;
                    this.alpha = 20;
                }
                else if (this.type == 243)
                {
                    this.width = 30;
                    this.height = 114;
                    this.aiStyle = 3;
                    this.damage = 60;
                    this.defense = 32;
                    this.lifeMax = 4000;
                    this.HitSound = SoundID.NPCHit5;
                    this.DeathSound = SoundID.NPCDeath7;
                    this.knockBackResist = 0.05f;
                    this.value = (float) Item.buyPrice(0, 1, 50, 0);
                    this.buffImmune[20] = true;
                    this.buffImmune[44] = true;
                    this.coldDamage = true;
                    this.rarity = 2;
                }
                else if (this.type == 244)
                {
                    this.width = 60;
                    this.height = 42;
                    this.aiStyle = 1;
                    this.damage = 85;
                    this.defense = 26;
                    this.lifeMax = 400;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.alpha = 175;
                    this.value = (float) Item.buyPrice(0, 0, 20, 0);
                    this.knockBackResist = 0.3f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                    this.rarity = 1;
                }
                else if (this.type == 245)
                {
                    this.width = 140;
                    this.height = 140;
                    this.aiStyle = 45;
                    this.damage = 72;
                    this.defense = 26;
                    this.lifeMax = 9000;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.knockBackResist = 0.0f;
                    this.value = (float) Item.buyPrice(0, 15, 0, 0);
                    this.alpha = (int) byte.MaxValue;
                    this.boss = true;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                }
                else if (this.type == 246)
                {
                    this.noGravity = true;
                    this.width = 70;
                    this.height = 70;
                    this.aiStyle = 46;
                    this.damage = 64;
                    this.defense = 20;
                    this.lifeMax = 16000;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = (LegacySoundStyle) null;
                    this.knockBackResist = 0.0f;
                    this.alpha = (int) byte.MaxValue;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                }
                else if (this.type == 247 || this.type == 248)
                {
                    this.noGravity = true;
                    this.width = 40;
                    this.height = 30;
                    this.aiStyle = 47;
                    this.damage = 59;
                    this.defense = 28;
                    this.lifeMax = 7000;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.alpha = (int) byte.MaxValue;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                }
                else if (this.type == 249)
                {
                    this.noGravity = true;
                    this.width = 70;
                    this.height = 70;
                    this.aiStyle = 48;
                    this.damage = 80;
                    this.defense = 32;
                    this.lifeMax = 11000;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.knockBackResist = 0.0f;
                    this.dontTakeDamage = true;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                }
                else if (this.type == 250)
                {
                    this.width = 34;
                    this.height = 26;
                    this.aiStyle = 49;
                    this.damage = 50;
                    this.defense = 24;
                    this.lifeMax = 300;
                    this.HitSound = SoundID.NPCHit30;
                    this.DeathSound = SoundID.NPCDeath33;
                    this.knockBackResist = 0.3f;
                    this.value = 300f;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 251)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 50;
                    this.defense = 30;
                    this.lifeMax = 1000;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.3f;
                    this.value = (float) Item.buyPrice(0, 0, 50, 0);
                    this.buffImmune[31] = false;
                }
                else if (this.type == 252)
                {
                    this.noGravity = true;
                    this.npcSlots = 0.5f;
                    this.width = 32;
                    this.height = 32;
                    this.aiStyle = 5;
                    this.damage = 80;
                    this.defense = 12;
                    this.lifeMax = 100;
                    this.HitSound = SoundID.NPCHit46;
                    this.knockBackResist = 0.7f;
                    this.DeathSound = SoundID.NPCDeath48;
                    this.value = 500f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 254)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 40;
                    this.defense = 10;
                    this.lifeMax = 180;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.knockBackResist = 0.4f;
                    this.value = 1000f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == (int) byte.MaxValue)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 38;
                    this.defense = 16;
                    this.lifeMax = 220;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.knockBackResist = 0.3f;
                    this.value = 1200f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 256)
                {
                    this.noGravity = true;
                    this.width = 26;
                    this.height = 26;
                    this.aiStyle = 18;
                    this.damage = 90;
                    this.defense = 20;
                    this.lifeMax = 140;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.value = 1200f;
                    this.alpha = 20;
                    this.npcSlots = 0.3f;
                }
                else if (this.type == 257)
                {
                    this.width = 44;
                    this.height = 34;
                    this.aiStyle = 3;
                    this.damage = 38;
                    this.defense = 24;
                    this.lifeMax = 230;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.knockBackResist = 0.3f;
                    this.value = 1300f;
                    this.buffImmune[31] = false;
                    this.npcSlots = 0.3f;
                }
                else if (this.type == 258)
                {
                    this.width = 30;
                    this.height = 24;
                    this.aiStyle = 3;
                    this.damage = 60;
                    this.defense = 16;
                    this.lifeMax = 220;
                    this.HitSound = SoundID.NPCHit45;
                    this.DeathSound = SoundID.NPCDeath47;
                    this.knockBackResist = 0.3f;
                    this.value = 1500f;
                    this.buffImmune[31] = false;
                    this.npcSlots = 0.3f;
                }
                else if (this.type == 259)
                {
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.width = 20;
                    this.height = 20;
                    this.aiStyle = 13;
                    this.damage = 24;
                    this.defense = 4;
                    this.lifeMax = 90;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.0f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 350f;
                    this.buffImmune[20] = true;
                    this.npcSlots = 0.3f;
                }
                else if (this.type == 260)
                {
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.width = 36;
                    this.height = 36;
                    this.aiStyle = 13;
                    this.damage = 70;
                    this.defense = 20;
                    this.lifeMax = 300;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.0f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 1250f;
                    this.buffImmune[20] = true;
                    this.npcSlots = 0.3f;
                }
                else if (this.type == 261)
                {
                    this.width = 12;
                    this.height = 12;
                    this.aiStyle = 50;
                    this.damage = 80;
                    this.defense = 0;
                    this.lifeMax = 1;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.npcSlots = 0.0f;
                }
                else if (this.type == 262)
                {
                    this.noTileCollide = true;
                    this.width = 86;
                    this.height = 86;
                    this.aiStyle = 51;
                    this.damage = 50;
                    this.defense = 14;
                    this.lifeMax = 30000;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.0f;
                    this.value = (float) Item.buyPrice(0, 15, 0, 0);
                    this.noGravity = true;
                    this.boss = true;
                    this.npcSlots = 16f;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 263)
                {
                    this.noTileCollide = true;
                    this.noGravity = true;
                    this.width = 40;
                    this.height = 40;
                    this.aiStyle = 52;
                    this.damage = 60;
                    this.defense = 24;
                    this.lifeMax = 4000;
                    this.dontTakeDamage = true;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 264)
                {
                    this.width = 24;
                    this.height = 24;
                    this.aiStyle = 53;
                    this.damage = 60;
                    this.defense = 20;
                    this.lifeMax = 1000;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 265)
                {
                    this.width = 18;
                    this.height = 18;
                    this.aiStyle = 50;
                    this.damage = 70;
                    this.defense = 0;
                    this.lifeMax = 1;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.npcSlots = 0.0f;
                }
                else if (this.type == 266)
                {
                    this.dontTakeDamage = true;
                    this.width = 160;
                    this.height = 110;
                    this.aiStyle = 54;
                    this.damage = 30;
                    this.defense = 14;
                    this.lifeMax = 1000;
                    this.HitSound = SoundID.NPCHit9;
                    this.DeathSound = SoundID.NPCDeath11;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.timeLeft = NPC.activeTime * 30;
                    this.boss = true;
                    this.value = 50000f;
                    this.npcSlots = 6f;
                }
                else if (this.type == 267)
                {
                    this.width = 30;
                    this.height = 30;
                    this.aiStyle = 55;
                    this.damage = 20;
                    this.defense = 10;
                    this.lifeMax = 100;
                    this.HitSound = SoundID.NPCHit9;
                    this.DeathSound = SoundID.NPCDeath11;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.8f;
                }
                else if (this.type == 268)
                {
                    this.noGravity = true;
                    this.width = 28;
                    this.height = 56;
                    this.aiStyle = 22;
                    this.damage = 55;
                    this.defense = 20;
                    this.lifeMax = 340;
                    this.HitSound = SoundID.NPCHit13;
                    this.DeathSound = SoundID.NPCDeath19;
                    this.knockBackResist = 0.6f;
                    this.value = 450f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 269)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 70;
                    this.defense = 34;
                    this.lifeMax = 550;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.3f;
                    this.value = 1000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 270)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 55;
                    this.defense = 50;
                    this.lifeMax = 400;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.2f;
                    this.value = 1000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 271)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 70;
                    this.defense = 40;
                    this.lifeMax = 450;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.25f;
                    this.value = 1000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 272)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 75;
                    this.defense = 28;
                    this.lifeMax = 400;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.35f;
                    this.value = 1000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 273)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 45;
                    this.defense = 50;
                    this.lifeMax = 500;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.15f;
                    this.value = 1000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 274)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 65;
                    this.defense = 34;
                    this.lifeMax = 350;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.4f;
                    this.value = 1000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 275)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 45;
                    this.defense = 50;
                    this.lifeMax = 550;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.15f;
                    this.value = 1000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 276)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 85;
                    this.defense = 54;
                    this.lifeMax = 500;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.2f;
                    this.value = 1000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 277)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 70;
                    this.defense = 32;
                    this.lifeMax = 400;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.4f;
                    this.value = 1000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 278)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 65;
                    this.defense = 48;
                    this.lifeMax = 450;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.3f;
                    this.value = 1000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 279)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 40;
                    this.defense = 54;
                    this.lifeMax = 500;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.2f;
                    this.value = 1000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 280)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 75;
                    this.defense = 34;
                    this.lifeMax = 500;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.4f;
                    this.value = 1000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 281)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 8;
                    this.damage = 40;
                    this.defense = 20;
                    this.lifeMax = 400;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.6f;
                    this.value = 1500f;
                    this.npcSlots = 2f;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 282)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 8;
                    this.damage = 35;
                    this.defense = 28;
                    this.lifeMax = 450;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 1500f;
                    this.npcSlots = 2f;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 283)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 8;
                    this.damage = 50;
                    this.defense = 18;
                    this.lifeMax = 300;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.55f;
                    this.value = 1500f;
                    this.npcSlots = 2f;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 284)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 8;
                    this.damage = 35;
                    this.defense = 24;
                    this.lifeMax = 450;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 1500f;
                    this.npcSlots = 2f;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 285)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 8;
                    this.damage = 50;
                    this.defense = 12;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.7f;
                    this.value = 1500f;
                    this.npcSlots = 2f;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 286)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 8;
                    this.damage = 60;
                    this.defense = 10;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.65f;
                    this.value = 1500f;
                    this.npcSlots = 2f;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 287)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 90;
                    this.defense = 42;
                    this.lifeMax = 1000;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.3f;
                    this.value = 2000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                    this.rarity = 1;
                }
                else if (this.type == 288)
                {
                    this.width = 20;
                    this.height = 20;
                    this.aiStyle = 56;
                    this.damage = 70;
                    this.defense = 30;
                    this.lifeMax = 200;
                    this.knockBackResist = 0.2f;
                    this.HitSound = SoundID.NPCHit36;
                    this.DeathSound = SoundID.NPCDeath39;
                    this.value = 500f;
                    this.noTileCollide = true;
                    this.noGravity = true;
                    flag = true;
                }
                else if (this.type == 289)
                {
                    this.width = 44;
                    this.height = 44;
                    this.aiStyle = 10;
                    this.damage = 60;
                    this.defense = 20;
                    this.lifeMax = 400;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.value = 150f;
                    this.knockBackResist = 0.2f;
                    this.npcSlots = 0.75f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                }
                else if (this.type == 290)
                {
                    this.width = 34;
                    this.height = 62;
                    this.aiStyle = 3;
                    this.damage = 100;
                    this.defense = 50;
                    this.lifeMax = 5000;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.knockBackResist = 0.0f;
                    this.value = 50000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = true;
                    this.rarity = 1;
                }
                else if (this.type == 291)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 60;
                    this.defense = 28;
                    this.lifeMax = 400;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.4f;
                    this.value = 1000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                    this.rarity = 2;
                }
                else if (this.type == 292)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 60;
                    this.defense = 28;
                    this.lifeMax = 400;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.4f;
                    this.value = 1000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                    this.rarity = 2;
                }
                else if (this.type == 293)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 60;
                    this.defense = 28;
                    this.lifeMax = 400;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.4f;
                    this.value = 1000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                    this.rarity = 2;
                }
                else if (this.type == 294)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 34;
                    this.defense = 6;
                    this.lifeMax = 70;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.9f;
                    this.value = 130f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 295)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 28;
                    this.defense = 12;
                    this.lifeMax = 70;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.7f;
                    this.value = 130f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 296)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 24;
                    this.defense = 14;
                    this.lifeMax = 120;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.6f;
                    this.value = 130f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 299)
                {
                    this.width = 18;
                    this.height = 20;
                    this.aiStyle = 7;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.catchItem = (short) 2018;
                }
                else if (this.type == 300)
                {
                    this.width = 14;
                    this.height = 12;
                    this.aiStyle = 7;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath4;
                    this.npcSlots = 0.25f;
                    this.catchItem = (short) 2003;
                }
                else if (this.type == 301)
                {
                    this.width = 36;
                    this.height = 26;
                    this.aiStyle = 17;
                    this.damage = 12;
                    this.defense = 2;
                    this.lifeMax = 35;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.85f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 50f;
                }

                if (this.type == 302)
                {
                    this.width = 24;
                    this.height = 18;
                    this.aiStyle = 1;
                    this.damage = 7;
                    this.defense = 2;
                    this.lifeMax = 25;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 25f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 304)
                {
                    this.width = 34;
                    this.height = 28;
                    this.aiStyle = 1;
                    this.damage = 80;
                    this.defense = 20;
                    this.lifeMax = 175;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 500f;
                    this.scale = 1.1f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                    this.knockBackResist = 0.5f;
                    this.npcSlots = 0.3f;
                }
                else if (this.type >= 305 && this.type <= 314)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.value = 1200f;
                    this.buffImmune[31] = false;
                    this.npcSlots = 0.5f;
                    if (this.type == 305 || this.type == 310)
                    {
                        this.damage = 60;
                        this.defense = 18;
                        this.lifeMax = 500;
                        this.knockBackResist = 0.4f;
                    }
                    else if (this.type == 306 || this.type == 311)
                    {
                        this.damage = 52;
                        this.defense = 14;
                        this.lifeMax = 400;
                        this.knockBackResist = 0.2f;
                        this.scale = 1.05f;
                    }
                    else if (this.type == 307 || this.type == 312)
                    {
                        this.damage = 78;
                        this.defense = 16;
                        this.lifeMax = 600;
                        this.knockBackResist = 0.25f;
                        this.scale = 0.9f;
                    }
                    else if (this.type == 308 || this.type == 313)
                    {
                        this.damage = 66;
                        this.defense = 14;
                        this.lifeMax = 650;
                        this.knockBackResist = 0.35f;
                        this.scale = 0.95f;
                    }
                    else if (this.type == 309 || this.type == 314)
                    {
                        this.damage = 52;
                        this.defense = 26;
                        this.lifeMax = 450;
                        this.knockBackResist = 0.5f;
                        this.scale = 1.1f;
                    }
                }
                else if (this.type == 315)
                {
                    this.width = 74;
                    this.height = 70;
                    this.aiStyle = 26;
                    this.damage = 130;
                    this.defense = 40;
                    this.lifeMax = 10000;
                    this.HitSound = SoundID.NPCHit12;
                    this.DeathSound = SoundID.NPCDeath18;
                    this.knockBackResist = 0.0f;
                    this.value = 10000f;
                    flag = true;
                }
                else if (this.type == 316)
                {
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.width = 24;
                    this.height = 44;
                    this.aiStyle = 22;
                    this.damage = 40;
                    this.defense = 14;
                    this.lifeMax = 100;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.alpha = 100;
                    this.value = 700f;
                    flag = true;
                    this.knockBackResist = 0.7f;
                }
                else if (this.type == 317)
                {
                    this.width = 30;
                    this.height = 32;
                    this.aiStyle = 2;
                    this.damage = 16;
                    this.defense = 6;
                    this.lifeMax = 75;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.7f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 100f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 318)
                {
                    this.width = 30;
                    this.height = 32;
                    this.aiStyle = 2;
                    this.damage = 20;
                    this.defense = 4;
                    this.lifeMax = 60;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.65f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 100f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 319)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 20;
                    this.defense = 6;
                    this.lifeMax = 40;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.6f;
                    this.value = 85f;
                    this.buffImmune[31] = false;
                    this.scale = 0.9f;
                }
                else if (this.type == 320)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 15;
                    this.defense = 8;
                    this.lifeMax = 60;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 105f;
                    this.buffImmune[31] = false;
                    this.scale = 1.05f;
                }
                else if (this.type == 321)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 20;
                    this.defense = 14;
                    this.lifeMax = 34;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.3f;
                    this.value = 120f;
                    this.buffImmune[31] = false;
                    this.scale = 1.1f;
                }
                else if (this.type == 322)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 23;
                    this.defense = 0;
                    this.lifeMax = 115;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.65f;
                    this.value = 130f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 323)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 18;
                    this.defense = 10;
                    this.lifeMax = 65;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 120f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 324)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 22;
                    this.defense = 10;
                    this.lifeMax = 70;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.4f;
                    this.value = 130f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                    this.scale = 1.05f;
                }
                else if (this.type == 325)
                {
                    this.width = 164;
                    this.height = 154;
                    this.aiStyle = 57;
                    this.damage = 120;
                    this.defense = 28;
                    this.lifeMax = 12000;
                    this.HitSound = SoundID.NPCHit7;
                    this.DeathSound = SoundID.NPCDeath5;
                    this.knockBackResist = 0.0f;
                    this.value = 10000f;
                    flag = true;
                }
                else if (this.type == 326)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 100;
                    this.defense = 32;
                    this.lifeMax = 900;
                    this.HitSound = SoundID.NPCHit7;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.knockBackResist = 0.2f;
                    this.value = 2000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 327)
                {
                    this.width = 100;
                    this.height = 100;
                    this.aiStyle = 58;
                    this.damage = 50;
                    this.defense = 36;
                    this.lifeMax = 22000;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.value = 50000f;
                    this.knockBackResist = 0.0f;
                    flag = true;
                }
                else if (this.type == 328)
                {
                    this.width = 80;
                    this.height = 80;
                    this.aiStyle = 59;
                    this.damage = 65;
                    this.defense = 14;
                    this.lifeMax = 5000;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    flag = true;
                    this.dontTakeDamage = true;
                    this.npcSlots = 0.0f;
                }
                else if (this.type == 329)
                {
                    this.width = 46;
                    this.height = 30;
                    this.aiStyle = 26;
                    this.damage = 80;
                    this.defense = 38;
                    this.lifeMax = 1200;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath5;
                    this.knockBackResist = 0.3f;
                    this.value = 3000f;
                    flag = true;
                }
                else if (this.type == 330)
                {
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.width = 24;
                    this.height = 44;
                    this.aiStyle = 22;
                    this.damage = 90;
                    this.defense = 44;
                    this.lifeMax = 2000;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.alpha = 100;
                    this.value = 4500f;
                    flag = true;
                    this.knockBackResist = 0.4f;
                }
                else if (this.type == 331)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 14;
                    this.defense = 6;
                    this.lifeMax = 45;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 60f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 332)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 14;
                    this.defense = 6;
                    this.lifeMax = 45;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 60f;
                    this.buffImmune[31] = false;
                }

                if (this.type == 333)
                {
                    this.width = 24;
                    this.height = 18;
                    this.aiStyle = 1;
                    this.damage = 7;
                    this.defense = 2;
                    this.lifeMax = 25;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 25f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }

                if (this.type == 334)
                {
                    this.width = 24;
                    this.height = 18;
                    this.aiStyle = 1;
                    this.damage = 6;
                    this.defense = 2;
                    this.lifeMax = 23;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.scale = 0.9f;
                    this.value = 25f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }

                if (this.type == 335)
                {
                    this.width = 24;
                    this.height = 18;
                    this.aiStyle = 1;
                    this.damage = 8;
                    this.defense = 3;
                    this.lifeMax = 29;
                    this.scale = 1.05f;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 25f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }

                if (this.type == 336)
                {
                    this.width = 24;
                    this.height = 18;
                    this.aiStyle = 1;
                    this.damage = 5;
                    this.defense = 1;
                    this.lifeMax = 22;
                    this.scale = 0.85f;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 25f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type >= 338 && this.type <= 340)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 1200f;
                    this.buffImmune[31] = false;
                    this.npcSlots = 0.5f;
                    if (this.type == 338)
                    {
                        this.damage = 65;
                        this.defense = 18;
                        this.lifeMax = 600;
                        this.knockBackResist = 0.4f;
                    }
                    else if (this.type == 339)
                    {
                        this.damage = 52;
                        this.defense = 24;
                        this.lifeMax = 700;
                        this.knockBackResist = 0.2f;
                        this.scale = 1.05f;
                    }
                    else if (this.type == 340)
                    {
                        this.damage = 78;
                        this.defense = 14;
                        this.lifeMax = 500;
                        this.knockBackResist = 0.25f;
                        this.scale = 0.9f;
                    }
                }
                else if (this.type == 341)
                {
                    this.width = 24;
                    this.height = 24;
                    this.aiStyle = 25;
                    this.damage = 100;
                    this.defense = 32;
                    this.lifeMax = 900;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.value = (float) Item.buyPrice(0, 0, 20, 0);
                    this.knockBackResist = 0.25f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                }
                else if (this.type == 342)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 90;
                    this.defense = 26;
                    this.lifeMax = 750;
                    this.HitSound = SoundID.NPCHit7;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.knockBackResist = 0.2f;
                    this.value = 1800f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 343)
                {
                    this.width = 38;
                    this.height = 78;
                    this.aiStyle = 3;
                    this.damage = 140;
                    this.defense = 50;
                    this.lifeMax = 3500;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.0f;
                    this.value = 3000f;
                    this.buffImmune[31] = false;
                    this.npcSlots = 2f;
                }
                else if (this.type == 344)
                {
                    this.width = 172;
                    this.height = 130;
                    this.aiStyle = 57;
                    this.damage = 110;
                    this.defense = 38;
                    this.lifeMax = 13000;
                    this.HitSound = SoundID.NPCHit7;
                    this.DeathSound = SoundID.NPCDeath5;
                    this.knockBackResist = 0.0f;
                    this.value = 10000f;
                    this.buffImmune[20] = true;
                    this.npcSlots = 3f;
                }
                else if (this.type == 345)
                {
                    this.width = 130;
                    this.height = 140;
                    this.aiStyle = 60;
                    this.damage = 120;
                    this.defense = 38;
                    this.lifeMax = 34000;
                    this.HitSound = SoundID.NPCHit7;
                    this.DeathSound = SoundID.NPCDeath5;
                    this.knockBackResist = 0.0f;
                    this.value = 10000f;
                    this.buffImmune[20] = true;
                    this.noTileCollide = true;
                    this.noGravity = true;
                    this.npcSlots = 5f;
                    this.coldDamage = true;
                }
                else if (this.type == 346)
                {
                    this.width = 112;
                    this.height = 140;
                    this.aiStyle = 61;
                    this.damage = 120;
                    this.defense = 56;
                    this.lifeMax = 18000;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.knockBackResist = 0.0f;
                    this.value = 10000f;
                    this.buffImmune[20] = true;
                    this.npcSlots = 4f;
                }
                else if (this.type == 347)
                {
                    this.width = 50;
                    this.height = 50;
                    this.aiStyle = 62;
                    this.damage = 60;
                    this.defense = 28;
                    this.lifeMax = 1200;
                    this.HitSound = SoundID.NPCHit4;
                    this.knockBackResist = 0.4f;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.value = 1000f;
                    this.noTileCollide = true;
                    this.noGravity = true;
                    this.npcSlots = 1.5f;
                }
                else if (this.type == 348)
                {
                    this.width = 28;
                    this.height = 76;
                    this.aiStyle = 3;
                    this.damage = 80;
                    this.defense = 26;
                    this.lifeMax = 1800;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.4f;
                    this.value = 1500f;
                    this.buffImmune[31] = false;
                    this.npcSlots = 1.5f;
                }
                else if (this.type == 349)
                {
                    this.width = 28;
                    this.height = 76;
                    this.aiStyle = 3;
                    this.damage = 100;
                    this.defense = 42;
                    this.lifeMax = 1800;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.1f;
                    this.value = 1500f;
                    this.buffImmune[31] = false;
                    this.npcSlots = 1.5f;
                }
                else if (this.type == 350)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 70;
                    this.defense = 30;
                    this.lifeMax = 900;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.45f;
                    this.value = 900f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 351)
                {
                    this.width = 18;
                    this.height = 90;
                    this.aiStyle = 3;
                    this.damage = 100;
                    this.defense = 40;
                    this.lifeMax = 2500;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.1f;
                    this.value = 3000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                    this.npcSlots = 1.75f;
                }
                else if (this.type == 352)
                {
                    this.width = 54;
                    this.height = 54;
                    this.aiStyle = 63;
                    this.damage = 75;
                    this.defense = 8;
                    this.lifeMax = 450;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.value = 500f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.knockBackResist = 0.4f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.npcSlots = 2f;
                    this.coldDamage = true;
                }
                else if (this.type == 353)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 354)
                {
                    this.friendly = true;
                    this.width = 18;
                    this.height = 34;
                    this.aiStyle = 0;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                    this.scale = 0.9f;
                    this.rarity = 1;
                }
                else if (this.type == 355)
                {
                    this.width = 10;
                    this.height = 10;
                    this.aiStyle = 64;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.npcSlots = 0.2f;
                    this.noGravity = true;
                    this.catchItem = (short) 1992;
                }
                else if (this.type == 356)
                {
                    this.width = 10;
                    this.height = 10;
                    this.aiStyle = 65;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.npcSlots = 0.25f;
                    this.noGravity = true;
                    this.catchItem = (short) 1994;
                }
                else if (this.type == 357)
                {
                    this.width = 10;
                    this.height = 4;
                    this.aiStyle = 66;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.npcSlots = 0.1f;
                    this.catchItem = (short) 2002;
                    this.friendly = true;
                }
                else if (this.type == 358)
                {
                    this.width = 12;
                    this.height = 12;
                    this.aiStyle = 64;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.npcSlots = 0.2f;
                    this.noGravity = true;
                    this.catchItem = (short) 2004;
                }
                else if (this.type == 359)
                {
                    this.width = 12;
                    this.height = 12;
                    this.aiStyle = 67;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.npcSlots = 0.5f;
                    this.noGravity = true;
                    this.catchItem = (short) 2006;
                }
                else if (this.type == 360)
                {
                    this.width = 14;
                    this.height = 14;
                    this.aiStyle = 67;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.npcSlots = 0.5f;
                    this.noGravity = true;
                    this.catchItem = (short) 2007;
                }
                else if (this.type == 361)
                {
                    this.width = 18;
                    this.height = 20;
                    this.aiStyle = 7;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.catchItem = (short) 2121;
                }
                else if (this.type == 362)
                {
                    this.width = 22;
                    this.height = 26;
                    this.aiStyle = 7;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.catchItem = (short) 2122;
                }
                else if (this.type == 363)
                {
                    this.width = 28;
                    this.height = 22;
                    this.aiStyle = 68;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.catchItem = (short) 2122;
                }
                else if (this.type == 364)
                {
                    this.width = 22;
                    this.height = 26;
                    this.aiStyle = 7;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.catchItem = (short) 2123;
                }
                else if (this.type == 365)
                {
                    this.width = 28;
                    this.height = 22;
                    this.aiStyle = 68;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.catchItem = (short) 2123;
                }
                else if (this.type == 366 || this.type == 367)
                {
                    this.width = 26;
                    this.height = 18;
                    this.aiStyle = 7;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.catchItem = (short) (2156 + this.type - 366);
                }
                else if (this.type == 368)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 369)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 370)
                {
                    this.width = 150;
                    this.height = 100;
                    this.aiStyle = 69;
                    this.damage = 100;
                    this.defense = 50;
                    this.lifeMax = 50000;
                    this.knockBackResist = 0.0f;
                    this.noTileCollide = true;
                    this.noGravity = true;
                    this.npcSlots = 10f;
                    this.HitSound = SoundID.NPCHit14;
                    this.DeathSound = SoundID.NPCDeath20;
                    this.value = 10000f;
                    this.boss = true;
                    this.netAlways = true;
                    this.timeLeft = NPC.activeTime * 30;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[31] = true;
                    this.buffImmune[44] = true;
                }
                else if (this.type == 371)
                {
                    this.width = 36;
                    this.height = 36;
                    this.aiStyle = 70;
                    this.damage = 100;
                    this.defense = 0;
                    this.lifeMax = 1;
                    this.HitSound = SoundID.NPCHit3;
                    this.DeathSound = SoundID.NPCDeath3;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.alpha = (int) byte.MaxValue;
                }
                else if (this.type == 372)
                {
                    this.noGravity = true;
                    this.width = 120;
                    this.height = 24;
                    this.aiStyle = 71;
                    this.damage = 100;
                    this.defense = 100;
                    this.lifeMax = 100;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.0f;
                    this.alpha = (int) byte.MaxValue;
                }
                else if (this.type == 373)
                {
                    this.noGravity = true;
                    this.width = 100;
                    this.height = 24;
                    this.aiStyle = 71;
                    this.damage = 120;
                    this.defense = 100;
                    this.lifeMax = 100;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.0f;
                    this.alpha = (int) byte.MaxValue;
                }
                else if (this.type == 374)
                {
                    this.width = 20;
                    this.height = 10;
                    this.aiStyle = 66;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.npcSlots = 0.15f;
                    this.catchItem = (short) 2673;
                    this.rarity = 4;
                }
                else if (this.type == 375)
                {
                    this.width = 10;
                    this.height = 10;
                    this.aiStyle = 6;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.npcSlots = 0.15f;
                    this.catchItem = (short) 2673;
                }
                else if (this.type == 376)
                {
                    this.friendly = true;
                    this.width = 34;
                    this.height = 8;
                    this.aiStyle = 0;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.knockBackResist = 0.5f;
                    this.scale = 0.9f;
                    this.rarity = 1;
                }
                else if (this.type == 377)
                {
                    this.width = 14;
                    this.height = 12;
                    this.aiStyle = 1;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.friendly = true;
                    this.catchItem = (short) 2740;
                    this.npcSlots = 0.1f;
                }
                else if (this.type == 378)
                {
                    this.npcSlots = 1f;
                    this.width = 20;
                    this.height = 26;
                    this.aiStyle = 41;
                    this.damage = 80;
                    this.defense = 30;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                    this.value = 450f;
                }
                else if (this.type >= 379 && this.type <= 380)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 45;
                    this.defense = 14;
                    this.lifeMax = 210;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.55f;
                    this.value = 1000f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.netAlways = true;
                    this.chaseable = false;
                }
                else if (this.type >= 381 && this.type <= 382)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 50;
                    this.defense = 25;
                    this.lifeMax = 350;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.35f;
                    this.value = 1000f;
                }
                else if (this.type == 383)
                {
                    this.lifeMax = 300;
                    this.defense = 50;
                    this.damage = 75;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.HitSound = SoundID.NPCHit43;
                    this.DeathSound = SoundID.NPCDeath45;
                    this.value = 1200f;
                    this.knockBackResist = 0.25f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 384)
                {
                    this.lifeMax = 1000;
                    this.width = 18;
                    this.defense = 20;
                    this.height = 40;
                    this.aiStyle = 72;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    flag = true;
                    this.npcSlots = 0.0f;
                    this.noTileCollide = true;
                    this.canGhostHeal = false;
                }
                else if (this.type == 385)
                {
                    this.lifeMax = 750;
                    this.defense = 30;
                    this.damage = 80;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.HitSound = SoundID.NPCHit43;
                    this.DeathSound = SoundID.NPCDeath45;
                    this.value = 600f;
                    this.knockBackResist = 0.0f;
                    this.npcSlots = 0.75f;
                }
                else if (this.type == 386)
                {
                    this.lifeMax = 400;
                    this.defense = 34;
                    this.damage = 40;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.HitSound = SoundID.NPCHit43;
                    this.DeathSound = SoundID.NPCDeath45;
                    this.value = 1200f;
                    this.knockBackResist = 0.4f;
                }
                else if (this.type == 387)
                {
                    this.width = 20;
                    this.height = 50;
                    this.aiStyle = 73;
                    this.damage = 10;
                    this.defense = 40;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit53;
                    this.DeathSound = SoundID.NPCDeath56;
                    this.knockBackResist = 0.0f;
                    this.buffImmune[31] = true;
                    this.canGhostHeal = false;
                }
                else if (this.type == 388)
                {
                    this.width = 40;
                    this.height = 30;
                    this.aiStyle = 74;
                    this.damage = 60;
                    this.defense = 16;
                    this.lifeMax = 300;
                    this.HitSound = SoundID.NPCHit42;
                    this.knockBackResist = 0.4f;
                    this.DeathSound = SoundID.NPCDeath44;
                    this.value = 1000f;
                    this.noTileCollide = true;
                    this.noGravity = true;
                    this.npcSlots = 1.5f;
                    this.canGhostHeal = false;
                }
                else if (this.type == 389)
                {
                    this.lifeMax = 600;
                    this.defense = 38;
                    this.damage = 75;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.HitSound = SoundID.NPCHit39;
                    this.DeathSound = SoundID.NPCDeath57;
                    this.value = 1200f;
                    this.npcSlots = 0.5f;
                    this.knockBackResist = 0.3f;
                }
                else if (this.type == 390)
                {
                    this.damage = 65;
                    this.defense = 30;
                    this.lifeMax = 350;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 75;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 1200f;
                    this.npcSlots = 0.5f;
                }
                else if (this.type == 391)
                {
                    this.lifeMax = 600;
                    this.defense = 30;
                    this.damage = 85;
                    this.width = 60;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.HitSound = SoundID.NPCHit51;
                    this.DeathSound = SoundID.NPCDeath54;
                    this.value = 1200f;
                    this.npcSlots = 0.5f;
                    this.knockBackResist = 0.1f;
                }
                else if (this.type == 392)
                {
                    this.lifeMax = 100;
                    this.defense = 100;
                    this.damage = 50;
                    this.width = 150;
                    this.height = 80;
                    this.aiStyle = 75;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.dontTakeDamage = true;
                    flag = true;
                    this.netAlways = true;
                }
                else if (this.type == 393)
                {
                    this.lifeMax = 5000;
                    this.defense = 20;
                    this.damage = 60;
                    this.width = 40;
                    this.height = 16;
                    this.aiStyle = 75;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.value = 0.0f;
                    this.npcSlots = 1f;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    flag = true;
                    this.netAlways = true;
                }
                else if (this.type == 394)
                {
                    this.lifeMax = 3500;
                    this.defense = 20;
                    this.damage = 60;
                    this.width = 46;
                    this.height = 36;
                    this.aiStyle = 75;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.value = 0.0f;
                    this.npcSlots = 1f;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    flag = true;
                    this.netAlways = true;
                }
                else if (this.type == 395)
                {
                    this.lifeMax = 10000;
                    this.defense = 0;
                    this.damage = 80;
                    this.width = 46;
                    this.height = 36;
                    this.aiStyle = 76;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.value = 0.0f;
                    this.npcSlots = 6f;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.dontTakeDamage = true;
                    this.boss = true;
                    flag = true;
                    this.netAlways = true;
                }
                else if (this.type == 399)
                {
                    this.defense = 5;
                    this.damage = 5;
                    this.lifeMax = 500;
                    this.aiStyle = 80;
                    this.width = 42;
                    this.height = 72;
                    this.value = 0.0f;
                    this.knockBackResist = 0.0f;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.npcSlots = 0.0f;
                    this.noGravity = true;
                    this.timeLeft = NPC.activeTime * 30;
                    this.chaseable = false;
                    this.netAlways = true;
                    this.rarity = 1;
                }
                else if (this.type == 396)
                {
                    this.lifeMax = 45000;
                    this.defense = 50;
                    this.damage = 0;
                    this.width = 38;
                    this.height = 56;
                    this.aiStyle = 79;
                    this.HitSound = SoundID.NPCHit57;
                    this.DeathSound = SoundID.NPCDeath62;
                    this.value = 0.0f;
                    this.npcSlots = 6f;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.boss = true;
                    this.hide = true;
                    this.netAlways = true;
                }
                else if (this.type == 397)
                {
                    this.lifeMax = 25000;
                    this.defense = 40;
                    this.damage = 0;
                    this.width = 46;
                    this.height = 66;
                    this.aiStyle = 78;
                    this.HitSound = SoundID.NPCHit57;
                    this.DeathSound = SoundID.NPCDeath62;
                    this.value = 0.0f;
                    this.npcSlots = 6f;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.boss = true;
                    this.hide = true;
                    this.netAlways = true;
                }
                else if (this.type == 398)
                {
                    this.lifeMax = 50000;
                    this.defense = 70;
                    this.damage = 0;
                    this.width = 46;
                    this.height = 66;
                    this.aiStyle = 77;
                    this.HitSound = SoundID.NPCHit57;
                    this.DeathSound = (LegacySoundStyle) null;
                    this.value = 0.0f;
                    this.npcSlots = 6f;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.dontTakeDamage = true;
                    this.boss = true;
                    this.behindTiles = true;
                    this.hide = true;
                    this.netAlways = true;
                }
                else if (this.type == 400)
                {
                    this.defense = 0;
                    this.damage = 60;
                    this.lifeMax = 100;
                    this.aiStyle = 81;
                    this.width = 60;
                    this.height = 60;
                    this.value = 0.0f;
                    this.knockBackResist = 0.0f;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.npcSlots = 0.0f;
                    this.noGravity = true;
                    this.dontTakeDamage = true;
                    this.noTileCollide = true;
                    this.netAlways = true;
                }
                else if (this.type == 401)
                {
                    this.lifeMax = 400;
                    this.defense = 0;
                    this.damage = 0;
                    this.width = 30;
                    this.height = 30;
                    this.aiStyle = 82;
                    this.HitSound = SoundID.NPCHit57;
                    this.DeathSound = SoundID.NPCDeath62;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.hide = true;
                }
                else if (this.type == 437)
                {
                    this.lifeMax = 400;
                    this.defense = 0;
                    this.damage = 0;
                    this.width = 54;
                    this.height = 54;
                    this.aiStyle = 83;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.dontTakeDamage = true;
                    this.netAlways = true;
                }
                else if (this.type == 438)
                {
                    this.lifeMax = 400;
                    this.defense = 0;
                    this.damage = 0;
                    this.width = 22;
                    this.height = 40;
                    this.aiStyle = 83;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.knockBackResist = 0.0f;
                    this.lavaImmune = true;
                    this.netAlways = true;
                    this.chaseable = false;
                }
                else if (this.type == 439)
                {
                    this.width = 24;
                    this.height = 50;
                    this.aiStyle = 84;
                    this.damage = 50;
                    this.defense = 42;
                    this.lifeMax = 32000;
                    this.knockBackResist = 0.0f;
                    this.noTileCollide = true;
                    this.noGravity = true;
                    this.npcSlots = 10f;
                    this.HitSound = SoundID.NPCHit55;
                    this.DeathSound = SoundID.NPCDeath59;
                    this.value = 10000f;
                    this.boss = true;
                    this.netAlways = true;
                    this.timeLeft = NPC.activeTime * 30;
                    flag = true;
                }
                else if (this.type == 440)
                {
                    this.width = 24;
                    this.height = 50;
                    this.aiStyle = 84;
                    this.damage = 0;
                    this.defense = 35;
                    this.lifeMax = 10000;
                    this.knockBackResist = 0.0f;
                    this.noTileCollide = true;
                    this.noGravity = true;
                    this.npcSlots = 0.0f;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.netAlways = true;
                    this.timeLeft = NPC.activeTime * 30;
                    flag = true;
                    this.chaseable = false;
                }
                else if (this.type == 442)
                {
                    this.width = 14;
                    this.height = 14;
                    this.aiStyle = 24;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.8f;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.catchItem = (short) 2889;
                    this.npcSlots = 0.4f;
                    this.rarity = 3;
                }
                else if (this.type == 443)
                {
                    this.width = 18;
                    this.height = 20;
                    this.aiStyle = 7;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.catchItem = (short) 2890;
                    this.rarity = 3;
                }
                else if (this.type == 444)
                {
                    this.width = 10;
                    this.height = 10;
                    this.aiStyle = 65;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.npcSlots = 0.25f;
                    this.noGravity = true;
                    this.catchItem = (short) 2891;
                    this.rarity = 3;
                }
                else if (this.type == 445)
                {
                    this.width = 18;
                    this.height = 20;
                    this.aiStyle = 7;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.catchItem = (short) 2892;
                    this.rarity = 3;
                }
                else if (this.type == 446)
                {
                    this.width = 14;
                    this.height = 12;
                    this.aiStyle = 1;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.friendly = true;
                    this.catchItem = (short) 2893;
                    this.npcSlots = 0.1f;
                    this.rarity = 3;
                }
                else if (this.type == 447)
                {
                    this.width = 14;
                    this.height = 12;
                    this.aiStyle = 7;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath4;
                    this.npcSlots = 0.25f;
                    this.catchItem = (short) 2894;
                    this.rarity = 3;
                }
                else if (this.type == 448)
                {
                    this.width = 10;
                    this.height = 4;
                    this.aiStyle = 66;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.npcSlots = 0.1f;
                    this.catchItem = (short) 2895;
                    this.friendly = true;
                    this.rarity = 3;
                }
                else if (this.type == 449)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 20;
                    this.defense = 8;
                    this.lifeMax = 60;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 100f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 450)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 20;
                    this.defense = 12;
                    this.lifeMax = 55;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 130f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 451)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 18;
                    this.defense = 8;
                    this.lifeMax = 65;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 120f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 452)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 22;
                    this.defense = 8;
                    this.lifeMax = 60;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 110f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 453)
                {
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 30;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.npcSlots = 7f;
                }
                else if (this.type == 454)
                {
                    this.noTileCollide = true;
                    this.npcSlots = 5f;
                    this.width = 32;
                    this.height = 32;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 80;
                    this.defense = 10;
                    this.lifeMax = 4000;
                    this.HitSound = SoundID.NPCHit56;
                    this.DeathSound = SoundID.NPCDeath60;
                    this.noGravity = true;
                    this.knockBackResist = 0.0f;
                    this.value = 0.0f;
                    this.scale = 1f;
                    flag = true;
                    this.alpha = (int) byte.MaxValue;
                }
                else if (this.type == 459)
                {
                    this.noTileCollide = true;
                    this.width = 32;
                    this.height = 32;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 40;
                    this.defense = 20;
                    this.lifeMax = 4000;
                    this.HitSound = SoundID.NPCHit56;
                    this.DeathSound = SoundID.NPCDeath60;
                    this.noGravity = true;
                    this.knockBackResist = 0.0f;
                    this.value = 0.0f;
                    this.scale = 1f;
                    flag = true;
                    this.alpha = (int) byte.MaxValue;
                    this.dontCountMe = true;
                }
                else if (this.type == 455 || this.type == 456 || (this.type == 457 || this.type == 458))
                {
                    this.noTileCollide = true;
                    this.width = 32;
                    this.height = 32;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 40;
                    this.defense = 20;
                    this.lifeMax = 4000;
                    this.HitSound = SoundID.NPCHit56;
                    this.DeathSound = SoundID.NPCDeath60;
                    this.noGravity = true;
                    this.knockBackResist = 0.0f;
                    this.value = 0.0f;
                    this.scale = 1f;
                    flag = true;
                    this.alpha = (int) byte.MaxValue;
                    this.dontCountMe = true;
                }
                else if (this.type == 464)
                {
                    this.width = 18;
                    this.height = 20;
                    this.aiStyle = 3;
                    this.damage = 21;
                    this.defense = 5;
                    this.lifeMax = 75;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 500f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 465)
                {
                    this.noGravity = true;
                    this.width = 18;
                    this.height = 20;
                    this.aiStyle = 16;
                    this.damage = 31;
                    this.defense = 7;
                    this.lifeMax = 110;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 500f;
                }
                else if (this.type == 470)
                {
                    this.width = 16;
                    this.height = 34;
                    this.aiStyle = 3;
                    this.damage = 21;
                    this.defense = 5;
                    this.lifeMax = 75;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 500f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 473 || this.type == 474 || (this.type == 475 || this.type == 476))
                {
                    this.width = 28;
                    this.height = 44;
                    this.aiStyle = 87;
                    this.damage = 90;
                    this.defense = 34;
                    this.lifeMax = 3500;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.value = 30000f;
                    this.knockBackResist = 0.1f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.rarity = 2;
                }
                else if (this.type == 480)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 30;
                    this.defense = 20;
                    this.lifeMax = 400;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.15f;
                    this.value = 1000f;
                }
                else if (this.type == 481)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 22;
                    this.defense = 10;
                    this.lifeMax = 70;
                    this.HitSound = SoundID.NPCHit2;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.4f;
                    this.value = 300f;
                    this.buffImmune[31] = false;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 482)
                {
                    this.width = 28;
                    this.height = 48;
                    this.aiStyle = 3;
                    this.damage = 30;
                    this.defense = 18;
                    this.lifeMax = 110;
                    this.HitSound = SoundID.NPCHit41;
                    this.DeathSound = SoundID.NPCDeath44;
                    this.knockBackResist = 0.35f;
                    this.value = 500f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                }
                else if (this.type == 483)
                {
                    this.npcSlots = 0.5f;
                    this.width = 20;
                    this.height = 30;
                    this.aiStyle = 91;
                    this.damage = 24;
                    this.defense = 8;
                    this.lifeMax = 40;
                    this.HitSound = SoundID.NPCHit7;
                    this.knockBackResist = 0.6f;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.value = 1000f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                }
                else if (this.type >= 484 && this.type <= 487)
                {
                    this.width = 10;
                    this.height = 4;
                    this.aiStyle = 66;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.npcSlots = 0.1f;
                    this.catchItem = (short) (3191 + this.type - 484);
                    this.friendly = true;
                }
                else if (this.type == 488)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 92;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 1000;
                    this.HitSound = SoundID.NPCHit15;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.0f;
                    this.value = 0.0f;
                    this.immortal = true;
                    this.netAlways = true;
                }
                else if (this.type == 489)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 20;
                    this.defense = 8;
                    this.lifeMax = 75;
                    this.HitSound = SoundID.NPCHit18;
                    this.DeathSound = SoundID.NPCDeath21;
                    this.knockBackResist = 0.4f;
                    this.value = 150f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 490)
                {
                    this.noGravity = true;
                    this.width = 28;
                    this.height = 30;
                    this.aiStyle = 22;
                    this.damage = 28;
                    this.defense = 14;
                    this.lifeMax = 50;
                    this.HitSound = SoundID.NPCHit19;
                    this.knockBackResist = 0.6f;
                    this.DeathSound = SoundID.NPCDeath22;
                    this.value = 150f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 491)
                {
                    this.noGravity = true;
                    this.width = 350;
                    this.height = 120;
                    this.aiStyle = 93;
                    this.damage = 0;
                    this.defense = 100;
                    this.lifeMax = 50;
                    this.HitSound = SoundID.NPCHit19;
                    this.knockBackResist = 0.0f;
                    this.DeathSound = SoundID.NPCDeath22;
                    this.value = 0.0f;
                    flag = true;
                    this.dontTakeDamage = true;
                    this.netAlways = true;
                }
                else if (this.type == 492)
                {
                    this.lifeMax = 2000;
                    this.defense = 20;
                    this.damage = 30;
                    this.width = 30;
                    this.height = 30;
                    this.aiStyle = 75;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.value = 0.0f;
                    this.npcSlots = 1f;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    flag = true;
                    this.hide = true;
                    this.netAlways = true;
                }
                else if (this.type >= 494 && this.type <= 495)
                {
                    this.width = 28;
                    this.height = 22;
                    this.aiStyle = 3;
                    this.damage = 28;
                    this.defense = 6;
                    this.lifeMax = 50;
                    this.HitSound = SoundID.NPCHit33;
                    this.DeathSound = SoundID.NPCDeath36;
                    this.value = 120f;
                }
                else if (this.type >= 496 && this.type <= 497)
                {
                    this.width = 28;
                    this.height = 22;
                    this.aiStyle = 39;
                    this.damage = 16;
                    this.defense = 12;
                    this.lifeMax = 50;
                    this.HitSound = SoundID.NPCHit38;
                    this.DeathSound = SoundID.NPCDeath41;
                    this.knockBackResist = 0.75f;
                    this.value = 120f;
                }
                else if (this.type >= 498 && this.type <= 506)
                {
                    this.width = 24;
                    this.height = 44;
                    this.aiStyle = 3;
                    this.damage = 18;
                    this.defense = 10;
                    this.lifeMax = 65;
                    this.HitSound = SoundID.NPCHit50;
                    this.DeathSound = SoundID.NPCDeath53;
                    this.knockBackResist = 0.45f;
                    this.value = 120f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 441)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 513)
                {
                    this.npcSlots = 4f;
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 6;
                    this.damage = 34;
                    this.defense = 0;
                    this.lifeMax = 80;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 140f;
                }
                else if (this.type == 514)
                {
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 18;
                    this.defense = 12;
                    this.lifeMax = 80;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 140f;
                    this.dontCountMe = true;
                    this.npcSlots = 0.0f;
                }
                else if (this.type == 515)
                {
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 16;
                    this.defense = 20;
                    this.lifeMax = 80;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 140f;
                    this.dontCountMe = true;
                    this.npcSlots = 0.0f;
                }
                else if (this.type == 510)
                {
                    this.npcSlots = 5f;
                    this.width = 34;
                    this.height = 34;
                    this.aiStyle = 6;
                    this.damage = 58;
                    this.defense = 18;
                    this.lifeMax = 500;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 700f;
                }
                else if (this.type == 511)
                {
                    this.width = 34;
                    this.height = 34;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 54;
                    this.defense = 28;
                    this.lifeMax = 500;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 700f;
                    this.dontCountMe = true;
                    this.npcSlots = 0.0f;
                }
                else if (this.type == 512)
                {
                    this.width = 34;
                    this.height = 34;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 50;
                    this.defense = 34;
                    this.lifeMax = 500;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.behindTiles = true;
                    this.value = 700f;
                    this.dontCountMe = true;
                    this.npcSlots = 0.0f;
                }
                else if (this.type == 508)
                {
                    this.width = 33;
                    this.height = 31;
                    this.aiStyle = 3;
                    this.damage = 24;
                    this.defense = 16;
                    this.lifeMax = 70;
                    this.HitSound = SoundID.NPCHit31;
                    this.DeathSound = SoundID.NPCDeath34;
                    this.knockBackResist = 0.2f;
                    this.value = 80f;
                    this.buffImmune[31] = false;
                    this.npcSlots = 0.8f;
                }
                else if (this.type == 509)
                {
                    this.width = 40;
                    this.height = 31;
                    this.aiStyle = 44;
                    this.damage = 30;
                    this.defense = 12;
                    this.lifeMax = 50;
                    this.knockBackResist = 0.6f;
                    this.HitSound = SoundID.NPCHit32;
                    this.DeathSound = SoundID.NPCDeath35;
                    this.value = 90f;
                    this.buffImmune[31] = false;
                    this.npcSlots = 0.8f;
                }
                else if (this.type >= 524 && this.type <= 527)
                {
                    this.width = 24;
                    this.height = 44;
                    this.aiStyle = 3;
                    this.damage = 50;
                    this.defense = 26;
                    this.lifeMax = 180;
                    this.HitSound = SoundID.NPCHit37;
                    this.DeathSound = SoundID.NPCDeath40;
                    this.knockBackResist = 0.6f;
                    this.value = 500f;
                    this.buffImmune[31] = false;
                    this.npcSlots = 0.5f;
                    switch (this.type)
                    {
                        case 525:
                            this.lifeMax += 70;
                            this.defense += 4;
                            this.damage += 10;
                            this.knockBackResist -= 0.1f;
                            this.value += 150f;
                            break;
                        case 526:
                            this.lifeMax += 40;
                            this.defense += 6;
                            this.damage += 14;
                            this.knockBackResist -= 0.1f;
                            this.value += 150f;
                            break;
                        case 527:
                            this.lifeMax += 120;
                            this.defense += 6;
                            this.damage += 4;
                            this.knockBackResist -= 0.2f;
                            this.value += 250f;
                            break;
                    }
                }
                else if (this.type >= 528 && this.type <= 529)
                {
                    this.width = 24;
                    this.height = 44;
                    this.aiStyle = 3;
                    this.damage = 52;
                    this.defense = 28;
                    this.lifeMax = 350;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.35f;
                    this.value = 600f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 530)
                {
                    this.width = 50;
                    this.height = 20;
                    this.aiStyle = 3;
                    this.damage = 66;
                    this.defense = 24;
                    this.lifeMax = 320;
                    this.HitSound = SoundID.NPCHit13;
                    this.DeathSound = SoundID.NPCDeath19;
                    this.knockBackResist = 0.5f;
                    this.value = 600f;
                    this.timeLeft = NPC.activeTime * 2;
                    this.buffImmune[20] = true;
                    this.buffImmune[70] = true;
                }
                else if (this.type == 531)
                {
                    this.noGravity = true;
                    this.width = 36;
                    this.height = 36;
                    this.aiStyle = 40;
                    this.damage = 66;
                    this.defense = 24;
                    this.lifeMax = 320;
                    this.HitSound = SoundID.NPCHit13;
                    this.DeathSound = SoundID.NPCDeath19;
                    this.knockBackResist = 0.5f;
                    this.value = 600f;
                    this.timeLeft = NPC.activeTime * 2;
                    this.buffImmune[20] = true;
                    this.buffImmune[70] = true;
                }
                else if (this.type == 532)
                {
                    this.width = 32;
                    this.height = 31;
                    this.aiStyle = 3;
                    this.damage = 65;
                    this.defense = 34;
                    this.lifeMax = 270;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.3f;
                    this.value = 800f;
                    this.buffImmune[31] = false;
                    this.npcSlots = 0.75f;
                }
                else if (this.type == 533)
                {
                    this.width = 28;
                    this.height = 62;
                    this.aiStyle = 8;
                    this.damage = 40;
                    this.defense = 20;
                    this.lifeMax = 220;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.knockBackResist = 0.0f;
                    this.value = 1200f;
                    this.npcSlots = 2f;
                    flag = true;
                }
                else if (this.type == 493)
                {
                    this.lifeMax = 20000;
                    this.defense = 20;
                    this.damage = 0;
                    this.width = 130;
                    this.height = 270;
                    this.aiStyle = 94;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 0.0f;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    flag = true;
                    this.npcSlots = 0.0f;
                }
                else if (this.type == 402)
                {
                    this.noTileCollide = true;
                    this.npcSlots = 1f;
                    this.width = 32;
                    this.height = 32;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 80;
                    this.defense = 10;
                    this.lifeMax = 1200;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.knockBackResist = 0.0f;
                    this.value = 0.0f;
                    this.scale = 1f;
                    flag = true;
                }
                else if (this.type == 405)
                {
                    this.width = 44;
                    this.height = 44;
                    this.aiStyle = 85;
                    this.damage = 120;
                    this.defense = 50;
                    this.lifeMax = 300;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                    this.noGravity = true;
                    this.buffImmune[31] = true;
                    this.npcSlots = 2f;
                }
                else if (this.type == 406)
                {
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 95;
                    this.damage = 70;
                    this.defense = 0;
                    this.lifeMax = 300;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.4f;
                    this.noGravity = true;
                    this.buffImmune[31] = true;
                }
                else if (this.type == 411)
                {
                    this.width = 22;
                    this.height = 56;
                    this.aiStyle = 3;
                    this.damage = 80;
                    this.defense = 34;
                    this.lifeMax = 700;
                    this.HitSound = SoundID.NPCHit6;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.4f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 409)
                {
                    this.width = 34;
                    this.height = 42;
                    this.aiStyle = 3;
                    this.damage = 70;
                    this.defense = 40;
                    this.lifeMax = 800;
                    this.HitSound = SoundID.NPCHit6;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.4f;
                    this.buffImmune[31] = false;
                    this.npcSlots = 3f;
                }
                else if (this.type == 410)
                {
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 26;
                    this.damage = 80;
                    this.defense = 10;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath5;
                    this.knockBackResist = 0.3f;
                    this.buffImmune[31] = false;
                    this.npcSlots = 0.5f;
                }
                else if (this.type == 407)
                {
                    this.width = 40;
                    this.height = 60;
                    this.aiStyle = 96;
                    this.damage = 70;
                    this.defense = 38;
                    this.lifeMax = 1500;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.noGravity = true;
                    this.knockBackResist = 0.03f;
                    this.buffImmune[31] = true;
                    this.npcSlots = 3f;
                }
                else if (this.type == 507)
                {
                    this.lifeMax = 20000;
                    this.defense = 20;
                    this.damage = 0;
                    this.width = 130;
                    this.height = 270;
                    this.aiStyle = 94;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 0.0f;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    flag = true;
                    this.npcSlots = 0.0f;
                }
                else if (this.type == 423)
                {
                    this.width = 50;
                    this.height = 44;
                    this.aiStyle = 26;
                    this.damage = 90;
                    this.defense = 46;
                    this.lifeMax = 850;
                    this.HitSound = SoundID.NPCHit6;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.2f;
                    flag = true;
                    this.npcSlots = 1f;
                }
                else if (this.type == 421)
                {
                    this.width = 44;
                    this.height = 44;
                    this.aiStyle = 85;
                    this.damage = 70;
                    this.defense = 34;
                    this.lifeMax = 330;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                    this.noGravity = true;
                    this.buffImmune[31] = true;
                    this.npcSlots = 1f;
                }
                else if (this.type == 424)
                {
                    this.width = 22;
                    this.height = 56;
                    this.aiStyle = 3;
                    this.damage = 80;
                    this.defense = 30;
                    this.lifeMax = 700;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath5;
                    this.knockBackResist = 0.6f;
                    this.buffImmune[31] = false;
                    this.npcSlots = 2f;
                }
                else if (this.type == 420)
                {
                    this.width = 40;
                    this.height = 40;
                    this.aiStyle = 97;
                    this.damage = 75;
                    this.defense = 20;
                    this.lifeMax = 1300;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                    this.noTileCollide = true;
                    this.noGravity = true;
                    this.npcSlots = 3f;
                }
                else if (this.type == 422)
                {
                    this.lifeMax = 20000;
                    this.defense = 20;
                    this.damage = 0;
                    this.width = 130;
                    this.height = 270;
                    this.aiStyle = 94;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 0.0f;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    flag = true;
                    this.npcSlots = 0.0f;
                }
                else if (this.type == 425)
                {
                    this.width = 30;
                    this.height = 56;
                    this.aiStyle = 3;
                    this.damage = 100;
                    this.defense = 40;
                    this.lifeMax = 800;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.knockBackResist = 0.4f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 429)
                {
                    this.width = 22;
                    this.height = 56;
                    this.aiStyle = 3;
                    this.damage = 90;
                    this.defense = 34;
                    this.lifeMax = 700;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath5;
                    this.knockBackResist = 0.6f;
                    this.buffImmune[31] = false;
                    this.npcSlots = 2f;
                }
                else if (this.type == 428)
                {
                    this.width = 24;
                    this.height = 26;
                    this.aiStyle = 3;
                    this.damage = 50;
                    this.defense = 6;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                }
                else if (this.type == 427)
                {
                    this.width = 40;
                    this.height = 28;
                    this.aiStyle = 3;
                    this.damage = 75;
                    this.defense = 20;
                    this.lifeMax = 500;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.knockBackResist = 0.5f;
                    this.buffImmune[31] = false;
                    this.npcSlots = 0.5f;
                }
                else if (this.type == 426)
                {
                    this.width = 50;
                    this.height = 62;
                    this.aiStyle = 3;
                    this.damage = 100;
                    this.defense = 44;
                    this.lifeMax = 1000;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.knockBackResist = 0.3f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 517)
                {
                    this.lifeMax = 20000;
                    this.defense = 20;
                    this.damage = 0;
                    this.width = 130;
                    this.height = 270;
                    this.aiStyle = 94;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 0.0f;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    flag = true;
                    this.npcSlots = 0.0f;
                }
                else if (this.type == 412)
                {
                    this.width = 20;
                    this.height = 20;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 150;
                    this.defense = 1000;
                    this.lifeMax = 10000;
                    this.HitSound = SoundID.NPCHit11;
                    this.DeathSound = SoundID.NPCDeath22;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.dontTakeDamage = true;
                    this.npcSlots = 2f;
                }
                else if (this.type == 413)
                {
                    this.width = 20;
                    this.height = 20;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 100;
                    this.defense = 1000;
                    this.lifeMax = 10000;
                    this.HitSound = SoundID.NPCHit11;
                    this.DeathSound = SoundID.NPCDeath22;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.dontCountMe = true;
                    this.dontTakeDamage = true;
                    this.npcSlots = 0.0f;
                }
                else if (this.type == 414)
                {
                    this.width = 20;
                    this.height = 20;
                    this.aiStyle = 6;
                    this.netAlways = true;
                    this.damage = 50;
                    this.defense = 0;
                    this.lifeMax = 10000;
                    this.HitSound = SoundID.NPCHit8;
                    this.DeathSound = SoundID.NPCDeath22;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.0f;
                    this.dontCountMe = true;
                    this.takenDamageMultiplier = 10f;
                    this.npcSlots = 0.0f;
                }
                else if (this.type == 415)
                {
                    this.lifeMax = 800;
                    this.defense = 32;
                    this.damage = 55;
                    this.width = 60;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.2f;
                }
                else if (this.type == 416)
                {
                    this.damage = 80;
                    this.defense = 28;
                    this.lifeMax = 800;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 75;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.2f;
                }
                else if (this.type == 518)
                {
                    this.lifeMax = 1000;
                    this.defense = 28;
                    this.damage = 80;
                    this.width = 22;
                    this.height = 56;
                    this.aiStyle = 3;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.4f;
                }
                else if (this.type == 417)
                {
                    this.npcSlots = 2f;
                    this.width = 46;
                    this.height = 32;
                    this.aiStyle = 39;
                    this.damage = 80;
                    this.defense = 34;
                    this.lifeMax = 700;
                    this.HitSound = SoundID.NPCHit7;
                    this.knockBackResist = 0.0f;
                    this.DeathSound = SoundID.NPCDeath5;
                }
                else if (this.type == 418)
                {
                    this.width = 38;
                    this.height = 38;
                    this.aiStyle = 74;
                    this.damage = 70;
                    this.defense = 26;
                    this.lifeMax = 600;
                    this.HitSound = SoundID.NPCHit3;
                    this.DeathSound = SoundID.NPCDeath3;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.2f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                }
                else if (this.type == 419)
                {
                    this.lifeMax = 800;
                    this.defense = 30;
                    this.damage = 90;
                    this.width = 22;
                    this.height = 56;
                    this.aiStyle = 3;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.4f;
                }
                else if (this.type == 516)
                {
                    this.width = 26;
                    this.height = 26;
                    this.aiStyle = 9;
                    this.damage = 100;
                    this.defense = 0;
                    this.lifeMax = 1;
                    this.HitSound = (LegacySoundStyle) null;
                    this.DeathSound = (LegacySoundStyle) null;
                    this.noGravity = true;
                    this.noTileCollide = false;
                    this.alpha = 0;
                    this.knockBackResist = 0.0f;
                }
                else if (this.type == 519)
                {
                    this.width = 26;
                    this.height = 26;
                    this.aiStyle = 99;
                    this.damage = 120;
                    this.defense = 0;
                    this.lifeMax = 1;
                    this.HitSound = (LegacySoundStyle) null;
                    this.DeathSound = (LegacySoundStyle) null;
                    this.noGravity = true;
                    this.noTileCollide = false;
                    this.alpha = 0;
                    this.knockBackResist = 0.0f;
                }
                else if (this.type == 162)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 65;
                    this.defense = 18;
                    this.lifeMax = 350;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.3f;
                    this.value = 600f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 166)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 70;
                    this.defense = 26;
                    this.lifeMax = 450;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.2f;
                    this.value = 1000f;
                    this.buffImmune[31] = false;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 253)
                {
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.width = 24;
                    this.height = 44;
                    this.aiStyle = 22;
                    this.damage = 80;
                    this.defense = 22;
                    this.lifeMax = 700;
                    this.HitSound = SoundID.NPCHit49;
                    this.DeathSound = SoundID.NPCDeath51;
                    this.alpha = 100;
                    this.value = 1500f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.knockBackResist = 0.6f;
                }
                else if (this.type == 158)
                {
                    this.npcSlots = 2f;
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 14;
                    this.damage = 60;
                    this.defense = 32;
                    this.lifeMax = 750;
                    this.HitSound = SoundID.NPCHit1;
                    this.knockBackResist = 0.75f;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.value = 5000f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 159)
                {
                    this.npcSlots = 2f;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 80;
                    this.defense = 24;
                    this.lifeMax = 750;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.knockBackResist = 0.4f;
                    this.value = 5000f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 460)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 70;
                    this.defense = 30;
                    this.lifeMax = 700;
                    this.HitSound = SoundID.NPCHit7;
                    this.DeathSound = SoundID.NPCDeath17;
                    this.knockBackResist = 0.25f;
                    this.value = 1000f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 461)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 60;
                    this.defense = 22;
                    this.lifeMax = 400;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.3f;
                    this.value = 1000f;
                }
                else if (this.type == 462)
                {
                    this.width = 20;
                    this.height = 24;
                    this.aiStyle = 3;
                    this.damage = 70;
                    this.defense = 14;
                    this.lifeMax = 270;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.7f;
                    this.value = 600f;
                    this.buffImmune[31] = false;
                    this.npcSlots = 0.5f;
                }
                else if (this.type == 463)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 100;
                    this.defense = 34;
                    this.lifeMax = 4000;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.1f;
                    this.value = 3000f;
                }
                else if (this.type == 466)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 70;
                    this.defense = 40;
                    this.lifeMax = 550;
                    this.HitSound = SoundID.NPCHit48;
                    this.DeathSound = SoundID.NPCDeath50;
                    this.knockBackResist = 0.5f;
                    this.value = 1500f;
                }
                else if (this.type == 467)
                {
                    this.width = 22;
                    this.height = 22;
                    this.aiStyle = 85;
                    this.damage = 100;
                    this.defense = 80;
                    this.lifeMax = 350;
                    this.HitSound = SoundID.NPCHit34;
                    this.DeathSound = SoundID.NPCDeath37;
                    this.value = 900f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                    this.buffImmune[39] = true;
                    this.knockBackResist = 0.7f;
                    this.noGravity = true;
                }
                else if (this.type == 469)
                {
                    this.width = 38;
                    this.height = 26;
                    this.aiStyle = 3;
                    this.damage = 68;
                    this.defense = 28;
                    this.lifeMax = 600;
                    this.HitSound = SoundID.NPCHit47;
                    this.DeathSound = SoundID.NPCDeath49;
                    this.knockBackResist = 0.35f;
                    this.value = 1300f;
                }
                else if (this.type == 468)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 65;
                    this.defense = 24;
                    this.lifeMax = 500;
                    this.HitSound = SoundID.NPCHit35;
                    this.DeathSound = SoundID.NPCDeath38;
                    this.knockBackResist = 0.6f;
                    this.value = 1300f;
                }
                else if (this.type == 477)
                {
                    this.noGravity = true;
                    this.width = 80;
                    this.height = 50;
                    this.aiStyle = 88;
                    this.damage = 80;
                    this.defense = 30;
                    this.lifeMax = 6000;
                    this.HitSound = SoundID.NPCHit44;
                    this.DeathSound = SoundID.NPCDeath46;
                    this.value = 50000f;
                    this.knockBackResist = 0.2f;
                    this.buffImmune[20] = true;
                }
                else if (this.type == 478)
                {
                    this.width = 34;
                    this.height = 34;
                    this.aiStyle = 89;
                    this.damage = 0;
                    this.defense = 30;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 0.0f;
                    this.knockBackResist = 0.7f;
                    flag = true;
                    this.npcSlots = 0.0f;
                }
                else if (this.type == 479)
                {
                    this.width = 46;
                    this.height = 30;
                    this.aiStyle = 90;
                    this.damage = 50;
                    this.defense = 14;
                    this.lifeMax = 700;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.3f;
                    this.value = 0.0f;
                    this.npcSlots = 0.1f;
                }
                else if (this.type == 26)
                {
                    this.scale = 0.9f;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 12;
                    this.defense = 4;
                    this.lifeMax = 60;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.8f;
                    this.value = 100f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 27)
                {
                    this.scale = 0.95f;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 20;
                    this.defense = 6;
                    this.lifeMax = 80;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.7f;
                    this.value = 200f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 28)
                {
                    this.scale = 1.1f;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 25;
                    this.defense = 8;
                    this.lifeMax = 110;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                    this.value = 150f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 29)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 8;
                    this.damage = 20;
                    this.defense = 2;
                    this.lifeMax = 40;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.6f;
                    this.value = 200f;
                }
                else if (this.type == 30)
                {
                    this.width = 16;
                    this.height = 16;
                    this.aiStyle = 9;
                    this.damage = 20;
                    this.defense = 0;
                    this.lifeMax = 1;
                    this.HitSound = SoundID.NPCHit3;
                    this.DeathSound = SoundID.NPCDeath3;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.alpha = 100;
                    this.knockBackResist = 0.0f;
                }
                else if (this.type == 111)
                {
                    this.scale = 0.95f;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 20;
                    this.defense = 6;
                    this.lifeMax = 80;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.7f;
                    this.value = 200f;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 471)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 80;
                    this.defense = 26;
                    this.lifeMax = 2000;
                    this.HitSound = SoundID.NPCHit40;
                    this.DeathSound = SoundID.NPCDeath42;
                    this.knockBackResist = 0.15f;
                    this.value = 5000f;
                    flag = true;
                }
                else if (this.type == 472)
                {
                    this.width = 40;
                    this.height = 24;
                    this.aiStyle = 86;
                    this.damage = 50;
                    this.defense = 18;
                    this.lifeMax = 180;
                    this.HitSound = SoundID.NPCHit52;
                    this.DeathSound = SoundID.NPCDeath55;
                    this.knockBackResist = 0.0f;
                    this.value = 0.0f;
                    flag = true;
                    this.npcSlots = 0.1f;
                }
                else if (this.type == 520)
                {
                    this.width = 34;
                    this.height = 110;
                    this.aiStyle = 3;
                    this.damage = 60;
                    this.defense = 40;
                    this.lifeMax = 2000;
                    this.HitSound = SoundID.NPCHit4;
                    this.DeathSound = SoundID.NPCDeath14;
                    this.knockBackResist = 0.0f;
                    this.buffImmune[20] = true;
                    this.buffImmune[24] = true;
                }
                else if (this.type == 521)
                {
                    this.width = 60;
                    this.height = 60;
                    this.aiStyle = 86;
                    this.damage = 90;
                    this.defense = 30;
                    this.lifeMax = 2000;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.knockBackResist = 0.0f;
                    flag = true;
                }
                else if (this.type == 522)
                {
                    this.width = 26;
                    this.height = 26;
                    this.aiStyle = 100;
                    this.damage = 120;
                    this.defense = 0;
                    this.lifeMax = 1;
                    this.HitSound = (LegacySoundStyle) null;
                    this.DeathSound = (LegacySoundStyle) null;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.alpha = 0;
                    this.knockBackResist = 0.0f;
                    this.chaseable = false;
                }
                else if (this.type == 523)
                {
                    this.width = 42;
                    this.height = 42;
                    this.aiStyle = 101;
                    this.damage = 30;
                    this.defense = 0;
                    this.lifeMax = 500;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.alpha = 0;
                    this.knockBackResist = 0.0f;
                    this.chaseable = false;
                    this.alpha = (int) byte.MaxValue;
                    this.canGhostHeal = false;
                }
                else if (this.type == 534)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 14;
                    this.defense = 20;
                    this.lifeMax = 400;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.3f;
                    this.value = 0.0f;
                    this.buffImmune[31] = false;
                    this.lavaImmune = true;
                    this.netAlways = true;
                    this.rarity = 1;
                }
                else if (this.type == 535)
                {
                    this.width = 24;
                    this.height = 18;
                    this.aiStyle = 1;
                    this.damage = 14;
                    this.defense = 5;
                    this.lifeMax = 50;
                    this.scale = 1.1f;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.alpha = 0;
                    this.value = 40f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 536)
                {
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 3;
                    this.damage = 14;
                    this.defense = 8;
                    this.lifeMax = 200;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath2;
                    this.knockBackResist = 0.5f;
                    this.value = 1000f;
                    this.buffImmune[31] = false;
                    this.rarity = 2;
                }
                else if (this.type == 537)
                {
                    this.npcSlots = 2f;
                    this.width = 30;
                    this.height = 24;
                    this.aiStyle = 1;
                    this.damage = 11;
                    this.defense = 8;
                    this.lifeMax = 60;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.alpha = 50;
                    this.color = new Color((int) byte.MaxValue, 250, 0, 0) * 0.2f;
                    this.value = 75f;
                    this.knockBackResist = 0.8f;
                    this.buffImmune[20] = true;
                    this.buffImmune[31] = false;
                }
                else if (this.type == 538)
                {
                    this.width = 18;
                    this.height = 20;
                    this.aiStyle = 7;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.catchItem = (short) 3563;
                }
                else if (this.type == 539)
                {
                    this.width = 18;
                    this.height = 20;
                    this.aiStyle = 7;
                    this.damage = 0;
                    this.defense = 0;
                    this.lifeMax = 5;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.catchItem = (short) 3564;
                    this.rarity = 3;
                }
                else if (this.type == 541)
                {
                    this.width = 30;
                    this.height = 76;
                    this.aiStyle = 102;
                    this.damage = 40;
                    this.defense = 30;
                    this.lifeMax = 5000;
                    this.HitSound = SoundID.NPCHit23;
                    this.DeathSound = SoundID.NPCDeath39;
                    this.knockBackResist = 0.05f;
                    this.value = (float) Item.buyPrice(0, 1, 50, 0);
                    this.buffImmune[20] = true;
                    this.buffImmune[44] = true;
                    this.rarity = 2;
                }
                else if (this.type == 542)
                {
                    this.noGravity = true;
                    this.width = 100;
                    this.height = 24;
                    this.aiStyle = 103;
                    this.damage = 50;
                    this.defense = 20;
                    this.lifeMax = 360;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 400f;
                    this.knockBackResist = 0.9f;
                    this.behindTiles = true;
                }
                else if (this.type == 543)
                {
                    this.noGravity = true;
                    this.width = 100;
                    this.height = 24;
                    this.aiStyle = 103;
                    this.damage = 60;
                    this.defense = 24;
                    this.lifeMax = 380;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 400f;
                    this.knockBackResist = 0.8f;
                    this.behindTiles = true;
                }
                else if (this.type == 544)
                {
                    this.noGravity = true;
                    this.width = 100;
                    this.height = 24;
                    this.aiStyle = 103;
                    this.damage = 64;
                    this.defense = 22;
                    this.lifeMax = 400;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 400f;
                    this.knockBackResist = 0.8f;
                    this.behindTiles = true;
                }
                else if (this.type == 545)
                {
                    this.noGravity = true;
                    this.width = 100;
                    this.height = 24;
                    this.aiStyle = 103;
                    this.damage = 54;
                    this.defense = 26;
                    this.lifeMax = 450;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 400f;
                    this.knockBackResist = 0.7f;
                    this.behindTiles = true;
                }
                else if (this.type == 546)
                {
                    this.width = 30;
                    this.height = 30;
                    this.aiStyle = 26;
                    this.damage = 30;
                    this.defense = 10;
                    this.lifeMax = 60;
                    this.HitSound = SoundID.NPCHit11;
                    this.DeathSound = SoundID.NPCDeath15;
                    this.knockBackResist = 0.8f;
                    this.value = 130f;
                    this.behindTiles = true;
                }
                else if (this.type == 547)
                {
                    this.width = 16;
                    this.height = 16;
                    this.aiStyle = 104;
                    this.defense = 10;
                    this.lifeMax = 10;
                    this.HitSound = SoundID.NPCHit11;
                    this.DeathSound = SoundID.NPCDeath15;
                    this.knockBackResist = 1f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                }
                else if (this.type == 548)
                {
                    this.width = 40;
                    this.height = 40;
                    this.aiStyle = 105;
                    this.defense = 14;
                    this.lifeMax = 1000;
                    this.HitSound = SoundID.DD2_CrystalCartImpact;
                    this.DeathSound = SoundID.NPCDeath15;
                    this.knockBackResist = 0.0f;
                    this.friendly = true;
                    this.npcSlots = 0.0f;
                    this.hide = true;
                    if (Main.hardMode && NPC.downedMechBossAny)
                    {
                        this.defense = 18;
                        this.lifeMax = 3000;
                    }

                    if (NPC.downedGolemBoss && Main.hardMode)
                    {
                        this.defense = 20;
                        this.lifeMax = 5000;
                    }

                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 549)
                {
                    this.lifeMax = 5;
                    this.defense = 20;
                    this.damage = 0;
                    this.width = 78;
                    this.height = 130;
                    this.aiStyle = 106;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.value = 0.0f;
                    this.knockBackResist = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    flag = true;
                    this.npcSlots = 0.0f;
                    this.behindTiles = true;
                    this.dontTakeDamage = true;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 552)
                {
                    this.lifeMax = 30;
                    this.defense = 14;
                    this.damage = 18;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 107;
                    this.HitSound = SoundID.DD2_GoblinHurt;
                    this.DeathSound = SoundID.DD2_GoblinDeath;
                    this.knockBackResist = 0.2f;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 553)
                {
                    this.lifeMax = 170;
                    this.defense = 20;
                    this.damage = 46;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 107;
                    this.HitSound = SoundID.DD2_GoblinHurt;
                    this.DeathSound = SoundID.DD2_GoblinDeath;
                    this.knockBackResist = 0.2f;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 554)
                {
                    this.lifeMax = 560;
                    this.defense = 28;
                    this.damage = 70;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 107;
                    this.HitSound = SoundID.DD2_GoblinHurt;
                    this.DeathSound = SoundID.DD2_GoblinDeath;
                    this.knockBackResist = 0.15f;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 561)
                {
                    this.lifeMax = 60;
                    this.defense = 18;
                    this.damage = 30;
                    this.width = 26;
                    this.height = 52;
                    this.aiStyle = 107;
                    this.HitSound = SoundID.DD2_JavelinThrowersHurt;
                    this.DeathSound = SoundID.DD2_JavelinThrowersDeath;
                    this.knockBackResist = 0.1f;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 562)
                {
                    this.lifeMax = 300;
                    this.defense = 28;
                    this.damage = 60;
                    this.width = 26;
                    this.height = 52;
                    this.aiStyle = 107;
                    this.HitSound = SoundID.DD2_JavelinThrowersHurt;
                    this.DeathSound = SoundID.DD2_JavelinThrowersDeath;
                    this.knockBackResist = 0.1f;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 563)
                {
                    this.lifeMax = 1000;
                    this.defense = 38;
                    this.damage = 80;
                    this.width = 26;
                    this.height = 52;
                    this.aiStyle = 107;
                    this.HitSound = SoundID.DD2_JavelinThrowersHurt;
                    this.DeathSound = SoundID.DD2_JavelinThrowersDeath;
                    this.knockBackResist = 0.05f;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 555)
                {
                    this.lifeMax = 50;
                    this.defense = 16;
                    this.damage = 26;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 107;
                    this.HitSound = SoundID.DD2_GoblinBomberHurt;
                    this.DeathSound = SoundID.DD2_GoblinBomberDeath;
                    this.knockBackResist = 0.2f;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 556)
                {
                    this.lifeMax = 200;
                    this.defense = 26;
                    this.damage = 55;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 107;
                    this.HitSound = SoundID.DD2_GoblinBomberHurt;
                    this.DeathSound = SoundID.DD2_GoblinBomberDeath;
                    this.knockBackResist = 0.2f;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 557)
                {
                    this.lifeMax = 700;
                    this.defense = 34;
                    this.damage = 75;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 107;
                    this.HitSound = SoundID.DD2_GoblinBomberHurt;
                    this.DeathSound = SoundID.DD2_GoblinBomberDeath;
                    this.knockBackResist = 0.15f;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 558)
                {
                    this.width = 38;
                    this.height = 38;
                    this.aiStyle = 108;
                    this.damage = 30;
                    this.defense = 4;
                    this.lifeMax = 60;
                    this.HitSound = SoundID.DD2_WyvernHurt;
                    this.DeathSound = SoundID.DD2_WyvernDeath;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.2f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 559)
                {
                    this.width = 38;
                    this.height = 38;
                    this.aiStyle = 108;
                    this.damage = 75;
                    this.defense = 16;
                    this.lifeMax = 180;
                    this.HitSound = SoundID.DD2_WyvernHurt;
                    this.DeathSound = SoundID.DD2_WyvernDeath;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.2f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 560)
                {
                    this.width = 38;
                    this.height = 38;
                    this.aiStyle = 108;
                    this.damage = 100;
                    this.defense = 30;
                    this.lifeMax = 600;
                    this.HitSound = SoundID.DD2_WyvernHurt;
                    this.DeathSound = SoundID.DD2_WyvernDeath;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.05f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 550)
                {
                    this.townNPC = true;
                    this.friendly = true;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 7;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath1;
                    this.knockBackResist = 0.5f;
                }
                else if (this.type == 576)
                {
                    this.lifeMax = 5000;
                    this.defense = 34;
                    this.damage = 70;
                    this.width = 96;
                    this.height = 124;
                    this.aiStyle = 107;
                    this.HitSound = SoundID.DD2_OgreHurt;
                    this.DeathSound = SoundID.DD2_OgreDeath;
                    this.knockBackResist = 0.0f;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 577)
                {
                    this.lifeMax = 13000;
                    this.defense = 40;
                    this.damage = 90;
                    this.width = 96;
                    this.height = 124;
                    this.aiStyle = 107;
                    this.HitSound = SoundID.DD2_OgreHurt;
                    this.DeathSound = SoundID.DD2_OgreDeath;
                    this.knockBackResist = 0.0f;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 568)
                {
                    this.lifeMax = 500;
                    this.defense = 30;
                    this.damage = 50;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 107;
                    this.HitSound = SoundID.DD2_WitherBeastHurt;
                    this.DeathSound = SoundID.DD2_WitherBeastDeath;
                    this.knockBackResist = 0.15f;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 569)
                {
                    this.lifeMax = 1400;
                    this.defense = 40;
                    this.damage = 80;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 107;
                    this.HitSound = SoundID.DD2_WitherBeastHurt;
                    this.DeathSound = SoundID.DD2_WitherBeastDeath;
                    this.knockBackResist = 0.05f;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 566)
                {
                    this.lifeMax = 25;
                    this.defense = 12;
                    this.damage = 18;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 107;
                    this.HitSound = SoundID.DD2_SkeletonHurt;
                    this.DeathSound = SoundID.DD2_SkeletonDeath;
                    this.knockBackResist = 0.3f;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 567)
                {
                    this.lifeMax = 480;
                    this.defense = 22;
                    this.damage = 70;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 107;
                    this.HitSound = SoundID.DD2_SkeletonHurt;
                    this.DeathSound = SoundID.DD2_SkeletonDeath;
                    this.knockBackResist = 0.2f;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 572)
                {
                    this.lifeMax = 260;
                    this.defense = 26;
                    this.damage = 60;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 107;
                    this.HitSound = SoundID.DD2_KoboldHurt;
                    this.DeathSound = SoundID.DD2_KoboldDeath;
                    this.knockBackResist = 0.2f;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 573)
                {
                    this.lifeMax = 800;
                    this.defense = 32;
                    this.damage = 80;
                    this.width = 18;
                    this.height = 40;
                    this.aiStyle = 107;
                    this.HitSound = SoundID.DD2_KoboldHurt;
                    this.DeathSound = SoundID.DD2_KoboldDeath;
                    this.knockBackResist = 0.1f;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 570)
                {
                    this.lifeMax = 900;
                    this.defense = 30;
                    this.damage = 60;
                    this.width = 42;
                    this.height = 58;
                    this.aiStyle = 107;
                    this.HitSound = SoundID.DD2_DrakinHurt;
                    this.DeathSound = SoundID.DD2_DrakinDeath;
                    this.knockBackResist = 0.0f;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 571)
                {
                    this.lifeMax = 3000;
                    this.defense = 40;
                    this.damage = 90;
                    this.width = 42;
                    this.height = 58;
                    this.aiStyle = 107;
                    this.HitSound = SoundID.DD2_DrakinHurt;
                    this.DeathSound = SoundID.DD2_DrakinDeath;
                    this.knockBackResist = 0.0f;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 564)
                {
                    this.lifeMax = 800;
                    this.defense = 18;
                    this.damage = 40;
                    this.width = 34;
                    this.height = 62;
                    this.aiStyle = 109;
                    this.HitSound = SoundID.DD2_DarkMageHurt;
                    this.DeathSound = SoundID.DD2_DarkMageDeath;
                    this.knockBackResist = 0.0f;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.noGravity = true;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 565)
                {
                    this.lifeMax = 4000;
                    this.defense = 38;
                    this.damage = 90;
                    this.width = 34;
                    this.height = 62;
                    this.aiStyle = 109;
                    this.HitSound = SoundID.DD2_DarkMageHurt;
                    this.DeathSound = SoundID.DD2_DarkMageDeath;
                    this.knockBackResist = 0.0f;
                    this.value = 0.0f;
                    this.npcSlots = 0.0f;
                    this.noGravity = true;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 574)
                {
                    this.width = 38;
                    this.height = 38;
                    this.aiStyle = 108;
                    this.damage = 50;
                    this.defense = 16;
                    this.lifeMax = 170;
                    this.HitSound = SoundID.DD2_KoboldFlyerHurt;
                    this.DeathSound = SoundID.DD2_KoboldFlyerDeath;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.4f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 575)
                {
                    this.width = 38;
                    this.height = 38;
                    this.aiStyle = 108;
                    this.damage = 80;
                    this.defense = 32;
                    this.lifeMax = 580;
                    this.HitSound = SoundID.DD2_KoboldFlyerHurt;
                    this.DeathSound = SoundID.DD2_KoboldFlyerDeath;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.25f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 551)
                {
                    this.damage = 80;
                    this.defense = 38;
                    this.lifeMax = 50000;
                    this.width = 190;
                    this.height = 90;
                    this.aiStyle = 110;
                    this.HitSound = SoundID.DD2_BetsyHurt;
                    this.DeathSound = SoundID.DD2_BetsyDeath;
                    this.knockBackResist = 0.0f;
                    this.value = 0.0f;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 578)
                {
                    this.width = 30;
                    this.height = 24;
                    this.aiStyle = 111;
                    this.damage = 80;
                    this.defense = 36;
                    this.lifeMax = 500;
                    this.HitSound = SoundID.DD2_LightningBugHurt;
                    this.DeathSound = SoundID.DD2_LightningBugDeath;
                    this.noGravity = true;
                    this.noTileCollide = true;
                    this.knockBackResist = 0.8f;
                    this.npcSlots = 0.0f;
                    this.lavaImmune = true;
                    this.LazySetLiquidMovementDD2();
                    this.netAlways = true;
                }
                else if (this.type == 579)
                {
                    this.friendly = true;
                    this.width = 34;
                    this.height = 8;
                    this.aiStyle = 0;
                    this.damage = 10;
                    this.defense = 15;
                    this.lifeMax = 250;
                    this.HitSound = SoundID.NPCHit1;
                    this.DeathSound = SoundID.NPCDeath6;
                    this.knockBackResist = 0.5f;
                    this.scale = 1f;
                    this.rarity = 1;
                }

                if (flag)
                {
                    for (var index = 0; index < 206; ++index)
                        this.buffImmune[index] = true;
                }

                if (Main.dedServ)
                    this.frame = new Microsoft.Xna.Framework.Rectangle();
                else if (Main.NPCLoaded[this.type])
                    this.frame = new Microsoft.Xna.Framework.Rectangle(0, 0, Main.npcTexture[this.type].Width,
                        Main.npcTexture[this.type].Height / Main.npcFrameCount[this.type]);
                else
                    this.setFrameSize = true;
                if ((double) scaleOverride > 0.0)
                {
                    var num1 = (int) ((double) this.width * (double) this.scale);
                    var num2 = (int) ((double) this.height * (double) this.scale);
                    this.position.X += (float) (num1 / 2);
                    this.position.Y += (float) num2;
                    this.scale = scaleOverride;
                    this.width = (int) ((double) this.width * (double) this.scale);
                    this.height = (int) ((double) this.height * (double) this.scale);
                    if (this.height == 16 || this.height == 32)
                        ++this.height;
                    this.position.X -= (float) (this.width / 2);
                    this.position.Y -= (float) this.height;
                }
                else
                {
                    this.width = (int) ((double) this.width * (double) this.scale);
                    this.height = (int) ((double) this.height * (double) this.scale);
                }

                if (this.buffImmune[20])
                    this.buffImmune[70] = true;
                if (this.buffImmune[39])
                    this.buffImmune[153] = true;
                this.life = this.lifeMax;
                this.defDamage = this.damage;
                this.defDefense = this.defense;
                this.netID = this.type;
                if (!Main.expertMode)
                    return;
                this.scaleStats();
            }
        }

        private void LazySetLiquidMovementDD2()
        {
            this.waterMovementSpeed = 1f;
            this.lavaMovementSpeed = 1f;
            this.honeyMovementSpeed = 1f;
        }

        public static void setWorldMonsters()
        {
            var unifiedRandom = new UnifiedRandom(Main.worldID);
            var num1 = unifiedRandom.Next(3);
            var num2 = unifiedRandom.Next(3);
            while (num1 == num2)
                num1 = unifiedRandom.Next(3);
            for (var index1 = 0; index1 < 2; ++index1)
            {
                var num3 = num1;
                if (index1 == 1)
                    num3 = num2;
                for (var index2 = 0; index2 < 3; ++index2)
                {
                    switch (num3)
                    {
                        case 0:
                            NPC.cavernMonsterType[index1, index2] = unifiedRandom.Next(494, 496);
                            break;
                        case 1:
                            NPC.cavernMonsterType[index1, index2] = unifiedRandom.Next(496, 498);
                            break;
                        default:
                            NPC.cavernMonsterType[index1, index2] = unifiedRandom.Next(498, 507);
                            break;
                    }
                }
            }
        }

        public void scaleStats()
        {
            if (!Main.expertMode)
                return;
            if (this.friendly)
            {
                var life = this.life;
            }

            if ((this.type < 0 || !NPCID.Sets.NeedsExpertScaling[this.type]) &&
                (this.life <= 5 || this.damage == 0 || (this.friendly || this.townNPC)))
                return;
            var flag = this.type >= 0 && NPCID.Sets.ProjectileNPC[this.type];
            if (this.type != 5 && (this.type < 13 || this.type > 15) &&
                (this.type != 267 && (this.type < 113 || this.type > 119)) &&
                (Main.hardMode && !this.boss && this.lifeMax < 1000))
            {
                var num1 = this.damage + this.defense + this.lifeMax / 4;
                if (num1 == 0)
                    num1 = 1;
                var num2 = 80;
                if (NPC.downedPlantBoss)
                    num2 += 20;
                if (num1 < num2)
                {
                    var num3 = (float) (num2 / num1);
                    this.damage = (int) ((double) this.damage * (double) num3 * 0.9);
                    if (!flag)
                    {
                        this.defense = (int) ((double) this.defense * (double) num3);
                        this.lifeMax = (int) ((double) this.lifeMax * (double) num3 * 1.1);
                        this.value = (float) (int) ((double) this.value * (double) num3 * 0.8);
                    }
                }
            }

            if (this.type == 210 || this.type == 211)
            {
                this.damage = (int) ((double) this.damage * 0.600000023841858);
                this.lifeMax = (int) ((double) this.lifeMax * 0.800000011920929);
                this.defense = (int) ((double) this.defense * 0.800000011920929);
            }

            if (!flag)
            {
                this.value = (float) (int) ((double) this.value * 2.5);
                this.lifeMax = (int) ((double) this.lifeMax * (double) Main.expertLife);
            }

            this.damage = (int) ((double) this.damage * (double) Main.expertDamage);
            this.knockBackResist *= Main.expertKnockBack;
            var num4 = 0;
            var num5 = 1f;
            var num6 = 0.35f;
            if (Main.netMode != 0)
            {
                for (var index = 0; index < (int) byte.MaxValue; ++index)
                {
                    if (Main.player[index].active)
                        ++num4;
                }

                for (var index = 1; index < num4; ++index)
                {
                    num5 += num6;
                    num6 += (float) ((1.0 - (double) num6) / 3.0);
                }
            }

            if ((double) num5 > 8.0)
                num5 = (float) (((double) num5 * 2.0 + 8.0) / 3.0);
            if ((double) num5 > 1000.0)
                num5 = 1000f;
            if (this.type == 5)
                this.lifeMax = (int) ((double) this.lifeMax * 0.75);
            if (this.type == 4)
                this.lifeMax = (int) ((double) this.lifeMax * 0.65 * (double) num5);
            if (this.type >= 13 && this.type <= 15)
            {
                this.lifeMax = (int) ((double) this.lifeMax * 0.7 * (double) num5);
                if (this.type == 13)
                    this.damage = (int) ((double) this.damage * 1.1);
                if (this.type == 14)
                    this.damage = (int) ((double) this.damage * 0.8);
                if (this.type == 15)
                    this.damage = (int) ((double) this.damage * 0.8);
                this.scale *= 1.2f;
                this.defense += 2;
            }

            if (this.type == 266)
            {
                this.lifeMax = (int) ((double) this.lifeMax * 0.85 * (double) num5);
                this.damage = (int) ((double) this.damage * 0.9);
                this.scale *= 1.05f;
            }

            if (this.type == 50)
            {
                this.lifeMax = (int) ((double) this.lifeMax * 0.7 * (double) num5);
                this.damage = (int) ((double) this.damage * 0.8);
            }

            if (this.type == 471)
                this.lifeMax = (int) ((double) this.lifeMax * 0.85 * ((double) num5 * 2.0 + 1.0) / 3.0);
            if (this.type == 472)
            {
                this.lifeMax = (int) ((double) this.lifeMax * 0.85 * ((double) num5 + 1.0) / 2.0);
                this.damage = (int) ((double) this.damage * 0.8);
            }

            if (this.type == 222)
            {
                this.lifeMax = (int) ((double) this.lifeMax * 0.7 * (double) num5);
                this.damage = (int) ((double) this.damage * 0.9);
            }

            if (this.type == 210 || this.type == 211)
                this.lifeMax = (int) ((double) this.lifeMax * 0.75);
            if (this.type == 35)
            {
                this.lifeMax = (int) ((double) this.lifeMax * (double) num5);
                this.damage = (int) ((double) this.damage * 1.1);
            }
            else if (this.type == 36)
            {
                this.lifeMax = (int) ((double) this.lifeMax * 1.3 * (double) num5);
                this.damage = (int) ((double) this.damage * 1.1);
            }

            if (this.type == 113 || this.type == 114)
            {
                this.defense += 6;
                this.lifeMax = (int) ((double) this.lifeMax * 0.7 * (double) num5);
                this.damage = (int) ((double) this.damage * 1.5);
            }
            else if (this.type == 115)
            {
                this.lifeMax = (int) ((double) this.lifeMax * 0.7 * (double) num5);
                if (num4 > 1)
                    this.knockBackResist *= 1f - num6;
                this.defense += 6;
            }
            else if (this.type == 116)
            {
                this.lifeMax = (int) ((double) this.lifeMax * 0.7 * (double) num5);
                if (num4 > 1)
                    this.knockBackResist *= 1f - num6;
            }
            else if (this.type == 117 || this.type == 118 || this.type == 119)
                this.lifeMax = (int) ((double) this.lifeMax * 0.8);

            if (this.type >= 134 && this.type <= 136)
            {
                this.lifeMax = (int) ((double) this.lifeMax * 0.75 * (double) num5);
                if (this.type == 134)
                    this.damage *= 2;
                if (this.type == 135)
                    this.damage = (int) ((double) this.damage * 0.85);
                if (this.type == 136)
                    this.damage = (int) ((double) this.damage * 0.85);
                this.scale *= 1.05f;
            }
            else if (this.type == 139)
            {
                this.lifeMax = (int) ((double) this.lifeMax * 0.75 * ((double) num5 * 2.0 + 1.0) / 3.0);
                this.damage = (int) ((double) this.damage * 0.8);
                this.scale *= 1.05f;
            }

            if (this.type >= (int) sbyte.MaxValue && this.type <= 131)
            {
                this.lifeMax = (int) ((double) this.lifeMax * 0.75 * (double) num5);
                this.damage = (int) ((double) this.damage * 0.85);
            }

            if (this.type >= 125 && this.type <= 126)
            {
                this.lifeMax = (int) ((double) this.lifeMax * 0.75 * (double) num5);
                this.damage = (int) ((double) this.damage * 0.85);
            }

            if (this.type >= 262 && this.type <= 262)
            {
                this.lifeMax = (int) ((double) this.lifeMax * 0.7 * (double) num5);
                this.damage = (int) ((double) this.damage * 1.15);
            }

            if (this.type >= 245 && this.type <= 249)
            {
                this.lifeMax = (int) ((double) this.lifeMax * 0.75 * (double) num5);
                this.damage = (int) ((double) this.damage * 0.8);
            }

            if (this.type == 370)
            {
                this.lifeMax = (int) ((double) this.lifeMax * 0.6 * (double) num5);
                this.damage = (int) ((double) this.damage * 0.7);
            }
            else if (this.type == 371 || this.type == 372 || this.type == 373)
            {
                if (this.type != 371)
                    this.lifeMax = (int) ((double) this.lifeMax * 0.75);
                this.damage = (int) ((double) this.damage * 0.75);
            }

            if (this.type == 439 || this.type == 440 || this.type >= 454 && this.type <= 459 ||
                (this.type == 522 || this.type == 523))
            {
                if (this.type != 522)
                    this.lifeMax = (int) ((double) this.lifeMax * 0.625 * (double) num5);
                this.damage = (int) ((double) this.damage * 0.75);
            }

            if (this.type == 397 || this.type == 396 || this.type == 398)
            {
                this.lifeMax = (int) ((double) this.lifeMax * 0.75 * (double) num5);
                this.damage = (int) ((double) this.damage * 0.75);
            }

            if (this.type == 551)
            {
                this.lifeMax = (int) ((double) this.lifeMax * 0.75 * (double) num5);
                this.damage = (int) ((double) this.damage * 0.65);
            }

            switch (this.type)
            {
                case 305:
                case 306:
                case 307:
                case 308:
                case 309:
                case 310:
                case 311:
                case 312:
                case 313:
                case 314:
                case 315:
                case 326:
                case 329:
                case 330:
                    this.lifeMax = (int) ((double) this.lifeMax * 0.75);
                    this.damage = (int) ((double) this.damage * 0.75);
                    break;
                case 325:
                case 327:
                    this.lifeMax = (int) ((double) this.lifeMax * 0.65);
                    this.damage = (int) ((double) this.damage * 0.75);
                    break;
            }

            switch (this.type)
            {
                case 338:
                case 339:
                case 340:
                case 341:
                case 342:
                case 343:
                case 347:
                case 348:
                case 349:
                case 350:
                    this.lifeMax = (int) ((double) this.lifeMax * 0.75);
                    this.damage = (int) ((double) this.damage * 0.75);
                    break;
                case 344:
                case 345:
                case 346:
                    this.lifeMax = (int) ((double) this.lifeMax * 0.65);
                    this.damage = (int) ((double) this.damage * 0.75);
                    break;
            }

            this.defDefense = this.defense;
            this.defDamage = this.damage;
            this.life = this.lifeMax;
        }

        public static bool GetNPCLocation(int i, bool seekHead, bool averageDirection, out int index, out Vector2 pos)
        {
            var type = Main.npc[i].type;
            var index1 = -1;
            var num1 = -1;
            switch (type)
            {
                case 7:
                    num1 = 9;
                    index1 = 0;
                    break;
                case 8:
                case 9:
                    num1 = 7;
                    index1 = 1;
                    break;
                case 10:
                    num1 = 12;
                    index1 = 0;
                    break;
                case 11:
                case 12:
                    num1 = 10;
                    index1 = 1;
                    break;
                case 13:
                    num1 = 15;
                    index1 = 0;
                    break;
                case 14:
                case 15:
                    num1 = 13;
                    index1 = 1;
                    break;
                case 39:
                    num1 = 41;
                    index1 = 0;
                    break;
                case 40:
                case 41:
                    num1 = 39;
                    index1 = 1;
                    break;
                case 87:
                    num1 = 92;
                    index1 = 0;
                    break;
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                    num1 = 87;
                    index1 = 1;
                    break;
                case 95:
                    num1 = 97;
                    index1 = 0;
                    break;
                case 96:
                case 97:
                    num1 = 95;
                    index1 = 1;
                    break;
                case 98:
                    num1 = 100;
                    index1 = 0;
                    break;
                case 99:
                case 100:
                    num1 = 98;
                    index1 = 1;
                    break;
                case 117:
                    num1 = 119;
                    index1 = 0;
                    break;
                case 118:
                case 119:
                    num1 = 117;
                    index1 = 1;
                    break;
                case 134:
                    num1 = 136;
                    index1 = 0;
                    break;
                case 135:
                case 136:
                    num1 = 134;
                    index1 = 1;
                    break;
                case 454:
                    num1 = 459;
                    index1 = 0;
                    break;
                case 455:
                case 456:
                case 457:
                case 458:
                case 459:
                    num1 = 454;
                    index1 = 1;
                    break;
                case 510:
                    num1 = 512;
                    index1 = 0;
                    break;
                case 511:
                case 512:
                    num1 = 510;
                    index1 = 1;
                    break;
                case 513:
                    num1 = 515;
                    index1 = 0;
                    break;
                case 514:
                case 515:
                    num1 = 513;
                    index1 = 1;
                    break;
            }

            if (index1 != -1)
            {
                if (seekHead && index1 == 1)
                {
                    index = -1;
                    pos = Vector2.Zero;
                    return false;
                }

                var center1 = Main.npc[i].Center;
                var index2 = -1;
                var num2 = -1f;
                var index3 = -1;
                var center2 = Main.player[Main.myPlayer].Center;
                var index4 = (int) Main.npc[i].ai[index1];
                for (var index5 = 0;
                    index4 >= 0 && index4 < 200 && (++index5 < 100 && Main.npc[index4].active);
                    index4 = (int) Main.npc[index4].ai[index1])
                {
                    if (!averageDirection &&
                        (index3 == -1 || (double) Main.npc[index4].Distance(center2) < (double) num2))
                    {
                        num2 = Main.npc[index4].Distance(center2);
                        index3 = index4;
                    }

                    if (Main.npc[index4].type == num1)
                    {
                        index2 = index4;
                        break;
                    }
                }

                if (index2 >= 0)
                {
                    if (!averageDirection)
                    {
                        pos = Main.npc[index3].Center;
                        index = index3;
                    }
                    else
                    {
                        var vector2 = center1 + Main.npc[index2].Center;
                        pos = vector2 / 2f;
                        index = index2;
                    }

                    return true;
                }

                pos = Vector2.Zero;
                index = -1;
                return false;
            }

            pos = Main.npc[i].Center;
            index = i;
            return true;
        }

        public void AI()
        {
            //IL_4749b: Unknown result type (might be due to invalid IL or missing references)
            //IL_47f17: Unknown result type (might be due to invalid IL or missing references)
            //IL_47f24: Unknown result type (might be due to invalid IL or missing references)
            //IL_47f29: Unknown result type (might be due to invalid IL or missing references)
            //IL_47f4e: Unknown result type (might be due to invalid IL or missing references)
            //IL_47f74: Unknown result type (might be due to invalid IL or missing references)
            //IL_47f79: Unknown result type (might be due to invalid IL or missing references)
            //IL_48121: Unknown result type (might be due to invalid IL or missing references)
            //IL_48147: Unknown result type (might be due to invalid IL or missing references)
            //IL_4814c: Unknown result type (might be due to invalid IL or missing references)
            //IL_48162: Unknown result type (might be due to invalid IL or missing references)
            Color newColor;
            Vector2 vector16;
            if (aiStyle == 0)
            {
                for (var i = 0; i < 255; i++)
                {
                    if (Main.player[i].active && Main.player[i].talkNPC == whoAmI)
                    {
                        if (type == 105)
                        {
                            Transform(107);
                            return;
                        }

                        if (type == 106)
                        {
                            Transform(108);
                            return;
                        }

                        if (type == 123)
                        {
                            Transform(124);
                            return;
                        }

                        if (type == 354)
                        {
                            Transform(353);
                            return;
                        }

                        if (type == 376)
                        {
                            Transform(369);
                            return;
                        }

                        if (type == 579)
                        {
                            Transform(550);
                            return;
                        }
                    }
                }

                if (type != 376 && type != 579)
                {
                    TargetClosest(true);
                    spriteDirection = base.direction;
                }

                if (type == 376 || type == 579)
                {
                    if (wet || Main.tile[(int) (base.Center.X / 16f), (int) (base.position.Y - 4f) / 16].liquid > 0)
                    {
                        base.velocity.Y = -0.4f;
                        var num = 1;
                        if (base.Center.X / 16f > (float) (Main.maxTilesX / 2))
                        {
                            num = -1;
                        }

                        var num2 = 12;
                        var num3 = (int) base.Center.X / 16;
                        var j = (int) base.Center.Y / 16;
                        var flag = false;
                        if (num > 0)
                        {
                            for (var k = num3; k < num3 + num2; k++)
                            {
                                if (WorldGen.SolidTile(k, j))
                                {
                                    flag = true;
                                }
                            }
                        }
                        else
                        {
                            for (var num4 = num3; num4 > num3 - num2; num4--)
                            {
                                if (WorldGen.SolidTile(num4, j))
                                {
                                    flag = true;
                                }
                            }
                        }

                        if (type == 579)
                        {
                            flag = true;
                        }

                        if (flag)
                        {
                            base.velocity.X *= 0.99f;
                            if ((double) base.velocity.X > -0.01 && (double) base.velocity.X < 0.01)
                            {
                                base.velocity.X = 0f;
                            }
                        }
                        else
                        {
                            base.velocity.X += (float) num * 0.01f;
                            if (base.velocity.X > 0.2f)
                            {
                                base.velocity.X *= 0.95f;
                            }

                            if (base.velocity.X < -0.2f)
                            {
                                base.velocity.X *= 0.95f;
                            }
                        }
                    }
                    else
                    {
                        base.velocity.X *= 0.93f;
                        if ((double) base.velocity.X > -0.1 && (double) base.velocity.X < 0.1)
                        {
                            base.velocity.X = 0f;
                        }
                    }
                }
                else
                {
                    base.velocity.X *= 0.93f;
                    if ((double) base.velocity.X > -0.1 && (double) base.velocity.X < 0.1)
                    {
                        base.velocity.X = 0f;
                    }
                }
            }
            else if (aiStyle == 1)
            {
                AI_001_Slimes();
            }
            else if (aiStyle == 2)
            {
                AI_002_FloatingEye();
            }
            else if (aiStyle == 3)
            {
                AI_003_Fighters();
            }
            else if (aiStyle == 4)
            {
                var flag2 = false;
                if (Main.expertMode && (double) life < (double) lifeMax * 0.12)
                {
                    flag2 = true;
                }

                var flag3 = false;
                if (Main.expertMode && (double) life < (double) lifeMax * 0.04)
                {
                    flag3 = true;
                }

                var num5 = 20f;
                if (flag3)
                {
                    num5 = 10f;
                }

                if (target < 0 || target == 255 || Main.player[target].dead || !Main.player[target].active)
                {
                    TargetClosest(true);
                }

                var dead = Main.player[target].dead;
                var num6 = base.position.X + (float) (base.width / 2) - Main.player[target].position.X -
                             (float) (Main.player[target].width / 2);
                var num7 = base.position.Y + (float) base.height - 59f - Main.player[target].position.Y -
                             (float) (Main.player[target].height / 2);
                var num8 = (float) Math.Atan2((double) num7, (double) num6) + 1.57f;
                if (num8 < 0f)
                {
                    num8 += 6.283f;
                }
                else if ((double) num8 > 6.283)
                {
                    num8 -= 6.283f;
                }

                var num9 = 0f;
                if (this.ai[0] == 0f && this.ai[1] == 0f)
                {
                    num9 = 0.02f;
                }

                if (this.ai[0] == 0f && this.ai[1] == 2f && this.ai[2] > 40f)
                {
                    num9 = 0.05f;
                }

                if (this.ai[0] == 3f && this.ai[1] == 0f)
                {
                    num9 = 0.05f;
                }

                if (this.ai[0] == 3f && this.ai[1] == 2f && this.ai[2] > 40f)
                {
                    num9 = 0.08f;
                }

                if (this.ai[0] == 3f && this.ai[1] == 4f && this.ai[2] > num5)
                {
                    num9 = 0.15f;
                }

                if (this.ai[0] == 3f && this.ai[1] == 5f)
                {
                    num9 = 0.05f;
                }

                if (Main.expertMode)
                {
                    num9 *= 1.5f;
                }

                if (flag3 && Main.expertMode)
                {
                    num9 = 0f;
                }

                if (rotation < num8)
                {
                    if ((double) (num8 - rotation) > 3.1415)
                    {
                        rotation -= num9;
                    }
                    else
                    {
                        rotation += num9;
                    }
                }
                else if (rotation > num8)
                {
                    if ((double) (rotation - num8) > 3.1415)
                    {
                        rotation += num9;
                    }
                    else
                    {
                        rotation -= num9;
                    }
                }

                if (rotation > num8 - num9 && rotation < num8 + num9)
                {
                    rotation = num8;
                }

                if (rotation < 0f)
                {
                    rotation += 6.283f;
                }
                else if ((double) rotation > 6.283)
                {
                    rotation -= 6.283f;
                }

                if (rotation > num8 - num9 && rotation < num8 + num9)
                {
                    rotation = num8;
                }

                if (Main.rand.Next(5) == 0)
                {
                    var position = new Vector2(base.position.X, base.position.Y + (float) base.height * 0.25f);
                    var width = base.width;
                    var height = (int) ((float) base.height * 0.5f);
                    var x = base.velocity.X;
                    newColor = default(Color);
                    var num10 = Dust.NewDust(position, width, height, 5, x, 2f, 0, newColor, 1f);
                    Main.dust[num10].velocity.X *= 0.5f;
                    Main.dust[num10].velocity.Y *= 0.1f;
                }

                if (Main.dayTime || dead)
                {
                    base.velocity.Y -= 0.04f;
                    if (timeLeft > 10)
                    {
                        timeLeft = 10;
                    }
                }
                else if (this.ai[0] == 0f)
                {
                    if (this.ai[1] == 0f)
                    {
                        var num11 = 5f;
                        var num12 = 0.04f;
                        if (Main.expertMode)
                        {
                            num12 = 0.15f;
                            num11 = 7f;
                        }

                        var vector = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        var num13 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                      vector.X;
                        var num14 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) - 200f -
                                      vector.Y;
                        var num15 = (float) Math.Sqrt((double) (num13 * num13 + num14 * num14));
                        var num16 = num15;
                        num15 = num11 / num15;
                        num13 *= num15;
                        num14 *= num15;
                        if (base.velocity.X < num13)
                        {
                            base.velocity.X += num12;
                            if (base.velocity.X < 0f && num13 > 0f)
                            {
                                base.velocity.X += num12;
                            }
                        }
                        else if (base.velocity.X > num13)
                        {
                            base.velocity.X -= num12;
                            if (base.velocity.X > 0f && num13 < 0f)
                            {
                                base.velocity.X -= num12;
                            }
                        }

                        if (base.velocity.Y < num14)
                        {
                            base.velocity.Y += num12;
                            if (base.velocity.Y < 0f && num14 > 0f)
                            {
                                base.velocity.Y += num12;
                            }
                        }
                        else if (base.velocity.Y > num14)
                        {
                            base.velocity.Y -= num12;
                            if (base.velocity.Y > 0f && num14 < 0f)
                            {
                                base.velocity.Y -= num12;
                            }
                        }

                        this.ai[2] += 1f;
                        var num17 = 600f;
                        if (Main.expertMode)
                        {
                            num17 *= 0.35f;
                        }

                        if (this.ai[2] >= num17)
                        {
                            this.ai[1] = 1f;
                            this.ai[2] = 0f;
                            this.ai[3] = 0f;
                            target = 255;
                            netUpdate = true;
                        }
                        else if ((base.position.Y + (float) base.height < Main.player[target].position.Y &&
                                  num16 < 500f) || (Main.expertMode && num16 < 500f))
                        {
                            if (!Main.player[target].dead)
                            {
                                this.ai[3] += 1f;
                            }

                            var num18 = 110f;
                            if (Main.expertMode)
                            {
                                num18 *= 0.4f;
                            }

                            if (this.ai[3] >= num18)
                            {
                                this.ai[3] = 0f;
                                rotation = num8;
                                var num19 = 5f;
                                if (Main.expertMode)
                                {
                                    num19 = 6f;
                                }

                                var num20 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                              vector.X;
                                var num21 = Main.player[target].position.Y +
                                              (float) (Main.player[target].height / 2) - vector.Y;
                                var num22 = (float) Math.Sqrt((double) (num20 * num20 + num21 * num21));
                                num22 = num19 / num22;
                                var vector2 = vector;
                                var vector3 = default(Vector2);
                                vector3.X = num20 * num22;
                                vector3.Y = num21 * num22;
                                vector2.X += vector3.X * 10f;
                                vector2.Y += vector3.Y * 10f;
                                if (Main.netMode != 1)
                                {
                                    var num23 = NewNPC((int) vector2.X, (int) vector2.Y, 5, 0, 0f, 0f, 0f, 0f, 255);
                                    Main.npc[num23].velocity.X = vector3.X;
                                    Main.npc[num23].velocity.Y = vector3.Y;
                                    if (Main.netMode == 2 && num23 < 200)
                                    {
                                        NetMessage.SendData(23, -1, -1, null, num23, 0f, 0f, 0f, 0, 0, 0);
                                    }
                                }

                                Main.PlaySound(3, (int) vector2.X, (int) vector2.Y, 1, 1f, 0f);
                                for (var l = 0; l < 10; l++)
                                {
                                    var position2 = vector2;
                                    var speedX = vector3.X * 0.4f;
                                    var speedY = vector3.Y * 0.4f;
                                    newColor = default(Color);
                                    Dust.NewDust(position2, 20, 20, 5, speedX, speedY, 0, newColor, 1f);
                                }
                            }
                        }
                    }
                    else if (this.ai[1] == 1f)
                    {
                        rotation = num8;
                        var num24 = 6f;
                        if (Main.expertMode)
                        {
                            num24 = 7f;
                        }

                        var vector4 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        var num25 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                      vector4.X;
                        var num26 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                      vector4.Y;
                        var num27 = (float) Math.Sqrt((double) (num25 * num25 + num26 * num26));
                        num27 = num24 / num27;
                        base.velocity.X = num25 * num27;
                        base.velocity.Y = num26 * num27;
                        this.ai[1] = 2f;
                        netUpdate = true;
                        if (netSpam > 10)
                        {
                            netSpam = 10;
                        }
                    }
                    else if (this.ai[1] == 2f)
                    {
                        this.ai[2] += 1f;
                        if (this.ai[2] >= 40f)
                        {
                            base.velocity *= 0.98f;
                            if (Main.expertMode)
                            {
                                base.velocity *= 0.985f;
                            }

                            if ((double) base.velocity.X > -0.1 && (double) base.velocity.X < 0.1)
                            {
                                base.velocity.X = 0f;
                            }

                            if ((double) base.velocity.Y > -0.1 && (double) base.velocity.Y < 0.1)
                            {
                                base.velocity.Y = 0f;
                            }
                        }
                        else
                        {
                            rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) - 1.57f;
                        }

                        var num28 = 150;
                        if (Main.expertMode)
                        {
                            num28 = 100;
                        }

                        if (this.ai[2] >= (float) num28)
                        {
                            this.ai[3] += 1f;
                            this.ai[2] = 0f;
                            target = 255;
                            rotation = num8;
                            if (this.ai[3] >= 3f)
                            {
                                this.ai[1] = 0f;
                                this.ai[3] = 0f;
                            }
                            else
                            {
                                this.ai[1] = 1f;
                            }
                        }
                    }

                    var num29 = 0.5f;
                    if (Main.expertMode)
                    {
                        num29 = 0.65f;
                    }

                    if ((float) life < (float) lifeMax * num29)
                    {
                        this.ai[0] = 1f;
                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                        netUpdate = true;
                        if (netSpam > 10)
                        {
                            netSpam = 10;
                        }
                    }
                }
                else if (this.ai[0] == 1f || this.ai[0] == 2f)
                {
                    if (this.ai[0] == 1f)
                    {
                        this.ai[2] += 0.005f;
                        if ((double) this.ai[2] > 0.5)
                        {
                            this.ai[2] = 0.5f;
                        }
                    }
                    else
                    {
                        this.ai[2] -= 0.005f;
                        if (this.ai[2] < 0f)
                        {
                            this.ai[2] = 0f;
                        }
                    }

                    rotation += this.ai[2];
                    this.ai[1] += 1f;
                    if (Main.expertMode && this.ai[1] % 20f == 0f)
                    {
                        var num30 = 5f;
                        var vector5 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        var num31 = (float) Main.rand.Next(-200, 200);
                        var num32 = (float) Main.rand.Next(-200, 200);
                        var num33 = (float) Math.Sqrt((double) (num31 * num31 + num32 * num32));
                        num33 = num30 / num33;
                        var vector6 = vector5;
                        var vector7 = default(Vector2);
                        vector7.X = num31 * num33;
                        vector7.Y = num32 * num33;
                        vector6.X += vector7.X * 10f;
                        vector6.Y += vector7.Y * 10f;
                        if (Main.netMode != 1)
                        {
                            var num34 = NewNPC((int) vector6.X, (int) vector6.Y, 5, 0, 0f, 0f, 0f, 0f, 255);
                            Main.npc[num34].velocity.X = vector7.X;
                            Main.npc[num34].velocity.Y = vector7.Y;
                            if (Main.netMode == 2 && num34 < 200)
                            {
                                NetMessage.SendData(23, -1, -1, null, num34, 0f, 0f, 0f, 0, 0, 0);
                            }
                        }

                        for (var m = 0; m < 10; m++)
                        {
                            var position3 = vector6;
                            var speedX2 = vector7.X * 0.4f;
                            var speedY2 = vector7.Y * 0.4f;
                            newColor = default(Color);
                            Dust.NewDust(position3, 20, 20, 5, speedX2, speedY2, 0, newColor, 1f);
                        }
                    }

                    if (this.ai[1] == 100f)
                    {
                        this.ai[0] += 1f;
                        this.ai[1] = 0f;
                        if (this.ai[0] == 3f)
                        {
                            this.ai[2] = 0f;
                        }
                        else
                        {
                            Main.PlaySound(3, (int) base.position.X, (int) base.position.Y, 1, 1f, 0f);
                            for (var n = 0; n < 2; n++)
                            {
                                Gore.NewGore(base.position,
                                    new Vector2((float) Main.rand.Next(-30, 31) * 0.2f,
                                        (float) Main.rand.Next(-30, 31) * 0.2f), 8, 1f);
                                Gore.NewGore(base.position,
                                    new Vector2((float) Main.rand.Next(-30, 31) * 0.2f,
                                        (float) Main.rand.Next(-30, 31) * 0.2f), 7, 1f);
                                Gore.NewGore(base.position,
                                    new Vector2((float) Main.rand.Next(-30, 31) * 0.2f,
                                        (float) Main.rand.Next(-30, 31) * 0.2f), 6, 1f);
                            }

                            for (var num35 = 0; num35 < 20; num35++)
                            {
                                var position4 = base.position;
                                var width2 = base.width;
                                var height2 = base.height;
                                var speedX3 = (float) Main.rand.Next(-30, 31) * 0.2f;
                                var speedY3 = (float) Main.rand.Next(-30, 31) * 0.2f;
                                newColor = default(Color);
                                Dust.NewDust(position4, width2, height2, 5, speedX3, speedY3, 0, newColor, 1f);
                            }

                            Main.PlaySound(15, (int) base.position.X, (int) base.position.Y, 0, 1f, 0f);
                        }
                    }

                    var position5 = base.position;
                    var width3 = base.width;
                    var height3 = base.height;
                    var speedX4 = (float) Main.rand.Next(-30, 31) * 0.2f;
                    var speedY4 = (float) Main.rand.Next(-30, 31) * 0.2f;
                    newColor = default(Color);
                    Dust.NewDust(position5, width3, height3, 5, speedX4, speedY4, 0, newColor, 1f);
                    base.velocity.X *= 0.98f;
                    base.velocity.Y *= 0.98f;
                    if ((double) base.velocity.X > -0.1 && (double) base.velocity.X < 0.1)
                    {
                        base.velocity.X = 0f;
                    }

                    if ((double) base.velocity.Y > -0.1 && (double) base.velocity.Y < 0.1)
                    {
                        base.velocity.Y = 0f;
                    }
                }
                else
                {
                    defense = 0;
                    damage = 23;
                    if (Main.expertMode)
                    {
                        if (flag2)
                        {
                            defense = -15;
                        }

                        if (flag3)
                        {
                            damage = (int) (20f * Main.expertDamage);
                            defense = -30;
                        }
                        else
                        {
                            damage = (int) (18f * Main.expertDamage);
                        }
                    }

                    if (this.ai[1] == 0f && flag2)
                    {
                        this.ai[1] = 5f;
                    }

                    if (this.ai[1] == 0f)
                    {
                        var num36 = 6f;
                        var num37 = 0.07f;
                        var vector8 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        var num38 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                      vector8.X;
                        var num39 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) - 120f -
                                      vector8.Y;
                        var num40 = (float) Math.Sqrt((double) (num38 * num38 + num39 * num39));
                        if (num40 > 400f && Main.expertMode)
                        {
                            num36 += 1f;
                            num37 += 0.05f;
                            if (num40 > 600f)
                            {
                                num36 += 1f;
                                num37 += 0.05f;
                                if (num40 > 800f)
                                {
                                    num36 += 1f;
                                    num37 += 0.05f;
                                }
                            }
                        }

                        num40 = num36 / num40;
                        num38 *= num40;
                        num39 *= num40;
                        if (base.velocity.X < num38)
                        {
                            base.velocity.X += num37;
                            if (base.velocity.X < 0f && num38 > 0f)
                            {
                                base.velocity.X += num37;
                            }
                        }
                        else if (base.velocity.X > num38)
                        {
                            base.velocity.X -= num37;
                            if (base.velocity.X > 0f && num38 < 0f)
                            {
                                base.velocity.X -= num37;
                            }
                        }

                        if (base.velocity.Y < num39)
                        {
                            base.velocity.Y += num37;
                            if (base.velocity.Y < 0f && num39 > 0f)
                            {
                                base.velocity.Y += num37;
                            }
                        }
                        else if (base.velocity.Y > num39)
                        {
                            base.velocity.Y -= num37;
                            if (base.velocity.Y > 0f && num39 < 0f)
                            {
                                base.velocity.Y -= num37;
                            }
                        }

                        this.ai[2] += 1f;
                        if (this.ai[2] >= 200f)
                        {
                            this.ai[1] = 1f;
                            this.ai[2] = 0f;
                            this.ai[3] = 0f;
                            if (Main.expertMode && (double) life < (double) lifeMax * 0.35)
                            {
                                this.ai[1] = 3f;
                            }

                            target = 255;
                            netUpdate = true;
                        }

                        if (Main.expertMode && flag3)
                        {
                            TargetClosest(true);
                            netUpdate = true;
                            this.ai[1] = 3f;
                            this.ai[2] = 0f;
                            this.ai[3] -= 1000f;
                        }
                    }
                    else if (this.ai[1] == 1f)
                    {
                        Main.PlaySound(36, (int) base.position.X, (int) base.position.Y, 0, 1f, 0f);
                        rotation = num8;
                        var num41 = 6.8f;
                        if (Main.expertMode && this.ai[3] == 1f)
                        {
                            num41 *= 1.15f;
                        }

                        if (Main.expertMode && this.ai[3] == 2f)
                        {
                            num41 *= 1.3f;
                        }

                        var vector9 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        var num42 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                      vector9.X;
                        var num43 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                      vector9.Y;
                        var num44 = (float) Math.Sqrt((double) (num42 * num42 + num43 * num43));
                        num44 = num41 / num44;
                        base.velocity.X = num42 * num44;
                        base.velocity.Y = num43 * num44;
                        this.ai[1] = 2f;
                        netUpdate = true;
                        if (netSpam > 10)
                        {
                            netSpam = 10;
                        }
                    }
                    else if (this.ai[1] == 2f)
                    {
                        var num45 = 40f;
                        this.ai[2] += 1f;
                        if (Main.expertMode)
                        {
                            num45 = 50f;
                        }

                        if (this.ai[2] >= num45)
                        {
                            base.velocity *= 0.97f;
                            if (Main.expertMode)
                            {
                                base.velocity *= 0.98f;
                            }

                            if ((double) base.velocity.X > -0.1 && (double) base.velocity.X < 0.1)
                            {
                                base.velocity.X = 0f;
                            }

                            if ((double) base.velocity.Y > -0.1 && (double) base.velocity.Y < 0.1)
                            {
                                base.velocity.Y = 0f;
                            }
                        }
                        else
                        {
                            rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) - 1.57f;
                        }

                        var num46 = 130;
                        if (Main.expertMode)
                        {
                            num46 = 90;
                        }

                        if (this.ai[2] >= (float) num46)
                        {
                            this.ai[3] += 1f;
                            this.ai[2] = 0f;
                            target = 255;
                            rotation = num8;
                            if (this.ai[3] >= 3f)
                            {
                                this.ai[1] = 0f;
                                this.ai[3] = 0f;
                                if (Main.expertMode && Main.netMode != 1 && (double) life < (double) lifeMax * 0.5)
                                {
                                    this.ai[1] = 3f;
                                    this.ai[3] += (float) Main.rand.Next(1, 4);
                                }

                                netUpdate = true;
                                if (netSpam > 10)
                                {
                                    netSpam = 10;
                                }
                            }
                            else
                            {
                                this.ai[1] = 1f;
                            }
                        }
                    }
                    else if (this.ai[1] == 3f)
                    {
                        if (this.ai[3] == 4f && flag2 && base.Center.Y > Main.player[target].Center.Y)
                        {
                            TargetClosest(true);
                            this.ai[1] = 0f;
                            this.ai[2] = 0f;
                            this.ai[3] = 0f;
                            netUpdate = true;
                            if (netSpam > 10)
                            {
                                netSpam = 10;
                            }
                        }
                        else if (Main.netMode != 1)
                        {
                            TargetClosest(true);
                            var num47 = 20f;
                            var vector10 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                base.position.Y + (float) base.height * 0.5f);
                            var num48 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                          vector10.X;
                            var num49 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                          vector10.Y;
                            var num50 = Math.Abs(Main.player[target].velocity.X) +
                                          Math.Abs(Main.player[target].velocity.Y) / 4f;
                            num50 += 10f - num50;
                            if (num50 < 5f)
                            {
                                num50 = 5f;
                            }

                            if (num50 > 15f)
                            {
                                num50 = 15f;
                            }

                            if (this.ai[2] == -1f && !flag3)
                            {
                                num50 *= 4f;
                                num47 *= 1.3f;
                            }

                            if (flag3)
                            {
                                num50 *= 2f;
                            }

                            num48 -= Main.player[target].velocity.X * num50;
                            num49 -= Main.player[target].velocity.Y * num50 / 4f;
                            num48 *= 1f + (float) Main.rand.Next(-10, 11) * 0.01f;
                            num49 *= 1f + (float) Main.rand.Next(-10, 11) * 0.01f;
                            if (flag3)
                            {
                                num48 *= 1f + (float) Main.rand.Next(-10, 11) * 0.01f;
                                num49 *= 1f + (float) Main.rand.Next(-10, 11) * 0.01f;
                            }

                            var num51 = (float) Math.Sqrt((double) (num48 * num48 + num49 * num49));
                            var num52 = num51;
                            num51 = num47 / num51;
                            base.velocity.X = num48 * num51;
                            base.velocity.Y = num49 * num51;
                            base.velocity.X += (float) Main.rand.Next(-20, 21) * 0.1f;
                            base.velocity.Y += (float) Main.rand.Next(-20, 21) * 0.1f;
                            if (flag3)
                            {
                                base.velocity.X += (float) Main.rand.Next(-50, 51) * 0.1f;
                                base.velocity.Y += (float) Main.rand.Next(-50, 51) * 0.1f;
                                var num53 = Math.Abs(base.velocity.X);
                                var num54 = Math.Abs(base.velocity.Y);
                                if (base.Center.X > Main.player[target].Center.X)
                                {
                                    num54 *= -1f;
                                }

                                if (base.Center.Y > Main.player[target].Center.Y)
                                {
                                    num53 *= -1f;
                                }

                                base.velocity.X = num54 + base.velocity.X;
                                base.velocity.Y = num53 + base.velocity.Y;
                                base.velocity.Normalize();
                                base.velocity *= num47;
                                base.velocity.X += (float) Main.rand.Next(-20, 21) * 0.1f;
                                base.velocity.Y += (float) Main.rand.Next(-20, 21) * 0.1f;
                            }
                            else if (num52 < 100f)
                            {
                                if (Math.Abs(base.velocity.X) > Math.Abs(base.velocity.Y))
                                {
                                    var num55 = Math.Abs(base.velocity.X);
                                    var num56 = Math.Abs(base.velocity.Y);
                                    if (base.Center.X > Main.player[target].Center.X)
                                    {
                                        num56 *= -1f;
                                    }

                                    if (base.Center.Y > Main.player[target].Center.Y)
                                    {
                                        num55 *= -1f;
                                    }

                                    base.velocity.X = num56;
                                    base.velocity.Y = num55;
                                }
                            }
                            else if (Math.Abs(base.velocity.X) > Math.Abs(base.velocity.Y))
                            {
                                var num57 = (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) / 2f;
                                var num58 = num57;
                                if (base.Center.X > Main.player[target].Center.X)
                                {
                                    num58 *= -1f;
                                }

                                if (base.Center.Y > Main.player[target].Center.Y)
                                {
                                    num57 *= -1f;
                                }

                                base.velocity.X = num58;
                                base.velocity.Y = num57;
                            }

                            this.ai[1] = 4f;
                            netUpdate = true;
                            if (netSpam > 10)
                            {
                                netSpam = 10;
                            }
                        }
                    }
                    else if (this.ai[1] == 4f)
                    {
                        if (this.ai[2] == 0f)
                        {
                            Main.PlaySound(36, (int) base.position.X, (int) base.position.Y, -1, 1f, 0f);
                        }

                        var num59 = num5;
                        this.ai[2] += 1f;
                        if (this.ai[2] == num59 && Vector2.Distance(base.position, Main.player[target].position) < 200f)
                        {
                            this.ai[2] -= 1f;
                        }

                        if (this.ai[2] >= num59)
                        {
                            base.velocity *= 0.95f;
                            if ((double) base.velocity.X > -0.1 && (double) base.velocity.X < 0.1)
                            {
                                base.velocity.X = 0f;
                            }

                            if ((double) base.velocity.Y > -0.1 && (double) base.velocity.Y < 0.1)
                            {
                                base.velocity.Y = 0f;
                            }
                        }
                        else
                        {
                            rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) - 1.57f;
                        }

                        var num60 = num59 + 13f;
                        if (this.ai[2] >= num60)
                        {
                            netUpdate = true;
                            if (netSpam > 10)
                            {
                                netSpam = 10;
                            }

                            this.ai[3] += 1f;
                            this.ai[2] = 0f;
                            if (this.ai[3] >= 5f)
                            {
                                this.ai[1] = 0f;
                                this.ai[3] = 0f;
                            }
                            else
                            {
                                this.ai[1] = 3f;
                            }
                        }
                    }
                    else if (this.ai[1] == 5f)
                    {
                        var num61 = 600f;
                        var num62 = 9f;
                        var num63 = 0.3f;
                        var vector11 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        var num64 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                      vector11.X;
                        var num65 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) +
                                      num61 - vector11.Y;
                        var num66 = (float) Math.Sqrt((double) (num64 * num64 + num65 * num65));
                        num66 = num62 / num66;
                        num64 *= num66;
                        num65 *= num66;
                        if (base.velocity.X < num64)
                        {
                            base.velocity.X += num63;
                            if (base.velocity.X < 0f && num64 > 0f)
                            {
                                base.velocity.X += num63;
                            }
                        }
                        else if (base.velocity.X > num64)
                        {
                            base.velocity.X -= num63;
                            if (base.velocity.X > 0f && num64 < 0f)
                            {
                                base.velocity.X -= num63;
                            }
                        }

                        if (base.velocity.Y < num65)
                        {
                            base.velocity.Y += num63;
                            if (base.velocity.Y < 0f && num65 > 0f)
                            {
                                base.velocity.Y += num63;
                            }
                        }
                        else if (base.velocity.Y > num65)
                        {
                            base.velocity.Y -= num63;
                            if (base.velocity.Y > 0f && num65 < 0f)
                            {
                                base.velocity.Y -= num63;
                            }
                        }

                        this.ai[2] += 1f;
                        if (this.ai[2] >= 70f)
                        {
                            TargetClosest(true);
                            this.ai[1] = 3f;
                            this.ai[2] = -1f;
                            this.ai[3] = (float) Main.rand.Next(-3, 1);
                            netUpdate = true;
                        }
                    }

                    if (flag3 && this.ai[1] == 5f)
                    {
                        this.ai[1] = 3f;
                    }
                }
            }
            else if (aiStyle == 5)
            {
                AI_005_EaterOfSouls();
            }
            else if (aiStyle == 6)
            {
                AI_006_Worms();
            }
            else if (aiStyle == 7)
            {
                AI_007_TownEntities();
            }
            else if (aiStyle == 8)
            {
                TargetClosest(true);
                base.velocity.X *= 0.93f;
                if ((double) base.velocity.X > -0.1 && (double) base.velocity.X < 0.1)
                {
                    base.velocity.X = 0f;
                }

                if (this.ai[0] == 0f)
                {
                    this.ai[0] = 500f;
                }

                if (type == 172)
                {
                    if (alpha < 255)
                    {
                        alpha++;
                    }

                    if (justHit)
                    {
                        alpha = 0;
                    }
                }

                if (this.ai[2] != 0f && this.ai[3] != 0f)
                {
                    if (type == 172)
                    {
                        alpha = 255;
                    }

                    Main.PlaySound(SoundID.Item8, base.position);
                    for (var num67 = 0; num67 < 50; num67++)
                    {
                        if (type == 29 || type == 45)
                        {
                            var position6 = new Vector2(base.position.X, base.position.Y);
                            var width4 = base.width;
                            var height4 = base.height;
                            newColor = default(Color);
                            var num68 = Dust.NewDust(position6, width4, height4, 27, 0f, 0f, 100, newColor,
                                (float) Main.rand.Next(1, 3));
                            Main.dust[num68].velocity *= 3f;
                            if (Main.dust[num68].scale > 1f)
                            {
                                Main.dust[num68].noGravity = true;
                            }
                        }
                        else if (type == 32)
                        {
                            var position7 = new Vector2(base.position.X, base.position.Y);
                            var width5 = base.width;
                            var height5 = base.height;
                            newColor = default(Color);
                            var num69 = Dust.NewDust(position7, width5, height5, 172, 0f, 0f, 100, newColor, 1.5f);
                            Main.dust[num69].velocity *= 3f;
                            Main.dust[num69].noGravity = true;
                        }
                        else if (type == 283 || type == 284)
                        {
                            var position8 = new Vector2(base.position.X, base.position.Y);
                            var width6 = base.width;
                            var height6 = base.height;
                            newColor = default(Color);
                            var num70 = Dust.NewDust(position8, width6, height6, 173, 0f, 0f, 0, newColor, 1f);
                            Main.dust[num70].velocity *= 2f;
                            Main.dust[num70].scale = 1.4f;
                        }
                        else if (type == 285 || type == 286)
                        {
                            var position9 = new Vector2(base.position.X, base.position.Y);
                            var width7 = base.width;
                            var height7 = base.height;
                            newColor = default(Color);
                            var num71 = Dust.NewDust(position9, width7, height7, 174, 0f, 0f, 100, newColor, 1.5f);
                            Main.dust[num71].velocity *= 3f;
                            Main.dust[num71].noGravity = true;
                        }
                        else if (type == 281 || type == 282)
                        {
                            var position10 = new Vector2(base.position.X, base.position.Y);
                            var width8 = base.width;
                            var height8 = base.height;
                            newColor = default(Color);
                            var num72 = Dust.NewDust(position10, width8, height8, 175, 0f, 0f, 100, newColor, 1.5f);
                            Main.dust[num72].velocity *= 3f;
                            Main.dust[num72].noGravity = true;
                        }
                        else if (type == 172)
                        {
                            var position11 = new Vector2(base.position.X, base.position.Y);
                            var width9 = base.width;
                            var height9 = base.height;
                            newColor = default(Color);
                            var num73 = Dust.NewDust(position11, width9, height9, 106, 0f, 0f, 100, newColor, 2.5f);
                            Main.dust[num73].velocity *= 3f;
                            Main.dust[num73].noGravity = true;
                        }
                        else if (type == 533)
                        {
                            var position12 = base.position;
                            var width10 = base.width;
                            var height10 = base.height;
                            newColor = default(Color);
                            var num74 = Dust.NewDust(position12, width10, height10, 27, 0f, 0f, 100, newColor, 2.5f);
                            Main.dust[num74].velocity *= 3f;
                            Main.dust[num74].noGravity = true;
                        }
                        else
                        {
                            var position13 = new Vector2(base.position.X, base.position.Y);
                            var width11 = base.width;
                            var height11 = base.height;
                            newColor = default(Color);
                            var num75 = Dust.NewDust(position13, width11, height11, 6, 0f, 0f, 100, newColor, 2.5f);
                            Main.dust[num75].velocity *= 3f;
                            Main.dust[num75].noGravity = true;
                        }
                    }

                    base.position.X = this.ai[2] * 16f - (float) (base.width / 2) + 8f;
                    base.position.Y = this.ai[3] * 16f - (float) base.height;
                    base.velocity.X = 0f;
                    base.velocity.Y = 0f;
                    this.ai[2] = 0f;
                    this.ai[3] = 0f;
                    Main.PlaySound(SoundID.Item8, base.position);
                    for (var num76 = 0; num76 < 50; num76++)
                    {
                        if (type == 29 || type == 45)
                        {
                            var position14 = new Vector2(base.position.X, base.position.Y);
                            var width12 = base.width;
                            var height12 = base.height;
                            newColor = default(Color);
                            var num77 = Dust.NewDust(position14, width12, height12, 27, 0f, 0f, 100, newColor,
                                (float) Main.rand.Next(1, 3));
                            Main.dust[num77].velocity *= 3f;
                            if (Main.dust[num77].scale > 1f)
                            {
                                Main.dust[num77].noGravity = true;
                            }
                        }
                        else if (type == 32)
                        {
                            var position15 = new Vector2(base.position.X, base.position.Y);
                            var width13 = base.width;
                            var height13 = base.height;
                            newColor = default(Color);
                            var num78 = Dust.NewDust(position15, width13, height13, 172, 0f, 0f, 100, newColor, 1.5f);
                            Main.dust[num78].velocity *= 3f;
                            Main.dust[num78].noGravity = true;
                        }
                        else if (type == 172)
                        {
                            var position16 = new Vector2(base.position.X, base.position.Y);
                            var width14 = base.width;
                            var height14 = base.height;
                            newColor = default(Color);
                            var num79 = Dust.NewDust(position16, width14, height14, 106, 0f, 0f, 100, newColor, 2.5f);
                            Main.dust[num79].velocity *= 3f;
                            Main.dust[num79].noGravity = true;
                        }
                        else if (type == 283 || type == 284)
                        {
                            var position17 = new Vector2(base.position.X, base.position.Y);
                            var width15 = base.width;
                            var height15 = base.height;
                            newColor = default(Color);
                            var num80 = Dust.NewDust(position17, width15, height15, 173, 0f, 0f, 0, newColor, 1f);
                            Main.dust[num80].velocity *= 2f;
                            Main.dust[num80].scale = 1.4f;
                        }
                        else if (type == 285 || type == 286)
                        {
                            var position18 = new Vector2(base.position.X, base.position.Y);
                            var width16 = base.width;
                            var height16 = base.height;
                            newColor = default(Color);
                            var num81 = Dust.NewDust(position18, width16, height16, 174, 0f, 0f, 100, newColor, 1.5f);
                            Main.dust[num81].velocity *= 3f;
                            Main.dust[num81].noGravity = true;
                        }
                        else if (type == 281 || type == 282)
                        {
                            var position19 = new Vector2(base.position.X, base.position.Y);
                            var width17 = base.width;
                            var height17 = base.height;
                            newColor = default(Color);
                            var num82 = Dust.NewDust(position19, width17, height17, 175, 0f, 0f, 100, newColor, 1.5f);
                            Main.dust[num82].velocity *= 3f;
                            Main.dust[num82].noGravity = true;
                        }
                        else if (type == 533)
                        {
                            var position20 = base.position;
                            var width18 = base.width;
                            var height18 = base.height;
                            newColor = default(Color);
                            var num83 = Dust.NewDust(position20, width18, height18, 27, 0f, 0f, 100, newColor, 2.5f);
                            Main.dust[num83].velocity *= 3f;
                            Main.dust[num83].noGravity = true;
                        }
                        else
                        {
                            var position21 = new Vector2(base.position.X, base.position.Y);
                            var width19 = base.width;
                            var height19 = base.height;
                            newColor = default(Color);
                            var num84 = Dust.NewDust(position21, width19, height19, 6, 0f, 0f, 100, newColor, 2.5f);
                            Main.dust[num84].velocity *= 3f;
                            Main.dust[num84].noGravity = true;
                        }
                    }
                }

                this.ai[0] += 1f;
                if (type == 283 || type == 284)
                {
                    if (this.ai[0] == 50f || this.ai[0] == 100f || this.ai[0] == 150f || this.ai[0] == 200f ||
                        this.ai[0] == 250f)
                    {
                        this.ai[1] = 30f;
                        netUpdate = true;
                    }

                    if (this.ai[0] >= 400f)
                    {
                        this.ai[0] = 700f;
                    }
                }
                else if (type == 172)
                {
                    if (this.ai[0] == 75f || this.ai[0] == 150f || this.ai[0] == 225f || this.ai[0] == 300f ||
                        this.ai[0] == 375f || this.ai[0] == 450f)
                    {
                        this.ai[1] = 30f;
                        netUpdate = true;
                    }
                }
                else if (type == 533)
                {
                    if (this.ai[0] == 180f)
                    {
                        this.ai[1] = 181f;
                        netUpdate = true;
                    }
                }
                else if (type == 281 || type == 282)
                {
                    if (this.ai[0] == 20f || this.ai[0] == 40f || this.ai[0] == 60f || this.ai[0] == 120f ||
                        this.ai[0] == 140f || this.ai[0] == 160f || this.ai[0] == 220f || this.ai[0] == 240f ||
                        this.ai[0] == 260f)
                    {
                        this.ai[1] = 30f;
                        netUpdate = true;
                    }

                    if (this.ai[0] >= 460f)
                    {
                        this.ai[0] = 700f;
                    }
                }
                else if (this.ai[0] == 100f || this.ai[0] == 200f || this.ai[0] == 300f)
                {
                    this.ai[1] = 30f;
                    netUpdate = true;
                }

                if ((type == 285 || type == 286) && this.ai[0] > 400f)
                {
                    this.ai[0] = 650f;
                }

                if (type == 533 && this.ai[0] >= 360f)
                {
                    this.ai[0] = 650f;
                }

                if (this.ai[0] >= 650f && Main.netMode != 1)
                {
                    this.ai[0] = 1f;
                    var num85 = (int) Main.player[target].position.X / 16;
                    var num86 = (int) Main.player[target].position.Y / 16;
                    var num87 = (int) base.position.X / 16;
                    var num88 = (int) base.position.Y / 16;
                    var num89 = 20;
                    var num90 = 0;
                    var flag4 = false;
                    if (Math.Abs(base.position.X - Main.player[target].position.X) +
                        Math.Abs(base.position.Y - Main.player[target].position.Y) > 2000f)
                    {
                        num90 = 100;
                        flag4 = true;
                    }

                    while (!flag4 && num90 < 100)
                    {
                        num90++;
                        var num91 = Main.rand.Next(num85 - num89, num85 + num89);
                        var num92 = Main.rand.Next(num86 - num89, num86 + num89);
                        for (var num93 = num92; num93 < num86 + num89; num93++)
                        {
                            if ((num93 < num86 - 4 || num93 > num86 + 4 || num91 < num85 - 4 || num91 > num85 + 4) &&
                                (num93 < num88 - 1 || num93 > num88 + 1 || num91 < num87 - 1 || num91 > num87 + 1) &&
                                Main.tile[num91, num93].nactive())
                            {
                                var flag5 = true;
                                if ((type == 32 || (type >= 281 && type <= 286)) &&
                                    !Main.wallDungeon[Main.tile[num91, num93 - 1].wall])
                                {
                                    flag5 = false;
                                }
                                else if (Main.tile[num91, num93 - 1].lava())
                                {
                                    flag5 = false;
                                }

                                if (flag5 && Main.tileSolid[Main.tile[num91, num93].type] &&
                                    !Collision.SolidTiles(num91 - 1, num91 + 1, num93 - 4, num93 - 1))
                                {
                                    this.ai[1] = 20f;
                                    this.ai[2] = (float) num91;
                                    this.ai[3] = (float) num93;
                                    flag4 = true;
                                    break;
                                }
                            }
                        }
                    }

                    netUpdate = true;
                }

                if (this.ai[1] > 0f)
                {
                    this.ai[1] -= 1f;
                    if (type == 533)
                    {
                        if (this.ai[1] % 30f == 0f && this.ai[1] / 30f < 5f)
                        {
                            Main.PlaySound(SoundID.Item8, base.position);
                            if (Main.netMode != 1)
                            {
                                var point = base.Center.ToTileCoordinates();
                                var point2 = Main.player[target].Center.ToTileCoordinates();
                                var vector12 = Main.player[target].Center - base.Center;
                                var num94 = 6;
                                var num95 = 6;
                                var num96 = 0;
                                var num97 = 2;
                                var num98 = 0;
                                var flag6 = false;
                                if (vector12.Length() > 2000f)
                                {
                                    flag6 = true;
                                }

                                while (!flag6 && num98 < 50)
                                {
                                    num98++;
                                    var num99 = Main.rand.Next(point2.X - num94, point2.X + num94 + 1);
                                    var num100 = Main.rand.Next(point2.Y - num94, point2.Y + num94 + 1);
                                    if ((num100 < point2.Y - num96 || num100 > point2.Y + num96 ||
                                         num99 < point2.X - num96 || num99 > point2.X + num96) &&
                                        (num100 < point.Y - num95 || num100 > point.Y + num95 ||
                                         num99 < point.X - num95 || num99 > point.X + num95) &&
                                        !Main.tile[num99, num100].nactive())
                                    {
                                        var flag7 = true;
                                        if (flag7 && Main.tile[num99, num100].lava())
                                        {
                                            flag7 = false;
                                        }

                                        if (flag7 && Collision.SolidTiles(num99 - num97, num99 + num97, num100 - num97,
                                                num100 + num97))
                                        {
                                            flag7 = false;
                                        }

                                        if (flag7)
                                        {
                                            Projectile.NewProjectile((float) (num99 * 16 + 8),
                                                (float) (num100 * 16 + 8), 0f, 0f, 596, 0, 1f, Main.myPlayer,
                                                (float) target, 0f);
                                            flag6 = true;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else if (this.ai[1] == 25f)
                    {
                        if (type >= 281 && type <= 286)
                        {
                            if (Main.netMode != 1)
                            {
                                var num101 = 6f;
                                if (type == 285 || type == 286)
                                {
                                    num101 = 8f;
                                }

                                if (type == 281 || type == 282)
                                {
                                    num101 = 4f;
                                }

                                var vector13 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                    base.position.Y);
                                var num102 = Main.player[target].position.X +
                                               (float) Main.player[target].width * 0.5f - vector13.X;
                                var num103 = Main.player[target].position.Y +
                                               (float) Main.player[target].height * 0.5f - vector13.Y;
                                if (type == 283 || type == 284)
                                {
                                    num102 += (float) Main.rand.Next(-30, 31);
                                    num103 += (float) Main.rand.Next(-30, 31);
                                    num102 -= Main.player[target].velocity.X * 10f;
                                    num103 -= Main.player[target].velocity.Y * 10f;
                                }

                                var num104 = (float) Math.Sqrt((double) (num102 * num102 + num103 * num103));
                                num104 = num101 / num104;
                                num102 *= num104;
                                num103 *= num104;
                                var num105 = 30;
                                var num106 = 290;
                                if (type == 285 || type == 286)
                                {
                                    num106 = 291;
                                    num105 = 40;
                                }

                                if (type == 281 || type == 282)
                                {
                                    num106 = 293;
                                    num105 = 40;
                                }

                                if (Main.expertMode)
                                {
                                    num105 = (int) ((double) num105 * 0.8);
                                }

                                var num107 = Projectile.NewProjectile(vector13.X, vector13.Y, num102, num103, num106,
                                    num105, 0f, Main.myPlayer, 0f, 0f);
                                Main.projectile[num107].timeLeft = 300;
                                if (num106 == 291)
                                {
                                    Main.projectile[num107].ai[0] = Main.player[target].Center.X;
                                    Main.projectile[num107].ai[1] = Main.player[target].Center.Y;
                                    Main.projectile[num107].netUpdate = true;
                                }

                                localAI[0] = 0f;
                            }
                        }
                        else
                        {
                            if (type != 172)
                            {
                                Main.PlaySound(SoundID.Item8, base.position);
                            }

                            if (Main.netMode != 1)
                            {
                                if (type == 29 || type == 45)
                                {
                                    NewNPC((int) base.position.X + base.width / 2, (int) base.position.Y - 8, 30, 0, 0f,
                                        0f, 0f, 0f, 255);
                                }
                                else if (type == 32)
                                {
                                    NewNPC((int) base.position.X + base.width / 2, (int) base.position.Y - 8, 33, 0, 0f,
                                        0f, 0f, 0f, 255);
                                }
                                else if (type == 172)
                                {
                                    var num108 = 10f;
                                    var vector14 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                        base.position.Y + (float) base.height * 0.5f);
                                    var num109 = Main.player[target].position.X +
                                                   (float) Main.player[target].width * 0.5f - vector14.X +
                                                   (float) Main.rand.Next(-10, 11);
                                    var num110 = Main.player[target].position.Y +
                                                   (float) Main.player[target].height * 0.5f - vector14.Y +
                                                   (float) Main.rand.Next(-10, 11);
                                    var num111 = (float) Math.Sqrt((double) (num109 * num109 + num110 * num110));
                                    num111 = num108 / num111;
                                    num109 *= num111;
                                    num110 *= num111;
                                    var num112 = 40;
                                    var num113 = 129;
                                    var num114 = Projectile.NewProjectile(vector14.X, vector14.Y, num109, num110,
                                        num113, num112, 0f, Main.myPlayer, 0f, 0f);
                                    Main.projectile[num114].timeLeft = 300;
                                    localAI[0] = 0f;
                                }
                                else
                                {
                                    NewNPC((int) base.position.X + base.width / 2 + base.direction * 8,
                                        (int) base.position.Y + 20, 25, 0, 0f, 0f, 0f, 0f, 255);
                                }
                            }
                        }
                    }
                }

                if (type == 29 || type == 45)
                {
                    if (Main.rand.Next(5) == 0)
                    {
                        var position22 = new Vector2(base.position.X, base.position.Y + 2f);
                        var width20 = base.width;
                        var height20 = base.height;
                        var speedX5 = base.velocity.X * 0.2f;
                        var speedY5 = base.velocity.Y * 0.2f;
                        newColor = default(Color);
                        var num115 = Dust.NewDust(position22, width20, height20, 27, speedX5, speedY5, 100, newColor,
                            1.5f);
                        Main.dust[num115].noGravity = true;
                        Main.dust[num115].velocity.X *= 0.5f;
                        Main.dust[num115].velocity.Y = -2f;
                    }
                }
                else if (type == 32)
                {
                    if (Main.rand.Next(3) != 0)
                    {
                        var position23 = new Vector2(base.position.X, base.position.Y + 2f);
                        var width21 = base.width;
                        var height21 = base.height;
                        var speedX6 = base.velocity.X * 0.2f;
                        var speedY6 = base.velocity.Y * 0.2f;
                        newColor = default(Color);
                        var num116 = Dust.NewDust(position23, width21, height21, 172, speedX6, speedY6, 100, newColor,
                            0.9f);
                        Main.dust[num116].noGravity = true;
                        Main.dust[num116].velocity.X *= 0.3f;
                        Main.dust[num116].velocity.Y *= 0.2f;
                        Main.dust[num116].velocity.Y -= 1f;
                    }
                }
                else if (type == 172)
                {
                    var num117 = 1;
                    if (alpha == 255)
                    {
                        num117 = 2;
                    }

                    for (var num118 = 0; num118 < num117; num118++)
                    {
                        if (Main.rand.Next(255) > 255 - alpha)
                        {
                            var position24 = new Vector2(base.position.X, base.position.Y + 2f);
                            var width22 = base.width;
                            var height22 = base.height;
                            var speedX7 = base.velocity.X * 0.2f;
                            var speedY7 = base.velocity.Y * 0.2f;
                            newColor = default(Color);
                            var num119 = Dust.NewDust(position24, width22, height22, 106, speedX7, speedY7, 100,
                                newColor, 1.2f);
                            Main.dust[num119].noGravity = true;
                            Main.dust[num119].velocity.X *= 0.1f + (float) Main.rand.Next(30) * 0.01f;
                            Main.dust[num119].velocity.Y *= 0.1f + (float) Main.rand.Next(30) * 0.01f;
                            Main.dust[num119].scale *= 1f + (float) Main.rand.Next(6) * 0.1f;
                        }
                    }
                }
                else if (type == 283 || type == 284)
                {
                    if (Main.rand.Next(2) == 0)
                    {
                        var position25 = new Vector2(base.position.X, base.position.Y + 2f);
                        var width23 = base.width;
                        var height23 = base.height;
                        newColor = default(Color);
                        var num120 = Dust.NewDust(position25, width23, height23, 173, 0f, 0f, 0, newColor, 1f);
                        Main.dust[num120].velocity.X *= 0.5f;
                        Main.dust[num120].velocity.Y *= 0.5f;
                    }
                }
                else if (type == 285 || type == 286)
                {
                    if (Main.rand.Next(2) == 0)
                    {
                        var position26 = new Vector2(base.position.X, base.position.Y + 2f);
                        var width24 = base.width;
                        var height24 = base.height;
                        var speedX8 = base.velocity.X * 0.2f;
                        var speedY8 = base.velocity.Y * 0.2f;
                        newColor = default(Color);
                        var num121 = Dust.NewDust(position26, width24, height24, 174, speedX8, speedY8, 100, newColor,
                            1f);
                        Main.dust[num121].noGravity = true;
                        Main.dust[num121].velocity *= 0.4f;
                        Main.dust[num121].velocity.Y -= 0.7f;
                    }
                }
                else if (type == 281 || type == 282)
                {
                    if (Main.rand.Next(2) == 0)
                    {
                        var position27 = new Vector2(base.position.X, base.position.Y + 2f);
                        var width25 = base.width;
                        var height25 = base.height;
                        var speedX9 = base.velocity.X * 0.2f;
                        var speedY9 = base.velocity.Y * 0.2f;
                        newColor = default(Color);
                        var num122 = Dust.NewDust(position27, width25, height25, 175, speedX9, speedY9, 100, newColor,
                            0.1f);
                        Main.dust[num122].noGravity = true;
                        Main.dust[num122].velocity *= 0.5f;
                        Main.dust[num122].fadeIn = 1.2f;
                    }
                }
                else if (type == 533)
                {
                    Lighting.AddLight(base.Top, 0.6f, 0.6f, 0.3f);
                }
                else if (Main.rand.Next(2) == 0)
                {
                    var position28 = new Vector2(base.position.X, base.position.Y + 2f);
                    var width26 = base.width;
                    var height26 = base.height;
                    var speedX10 = base.velocity.X * 0.2f;
                    var speedY10 = base.velocity.Y * 0.2f;
                    newColor = default(Color);
                    var num123 = Dust.NewDust(position28, width26, height26, 6, speedX10, speedY10, 100, newColor, 2f);
                    Main.dust[num123].noGravity = true;
                    Main.dust[num123].velocity.X *= 1f;
                    Main.dust[num123].velocity.Y *= 1f;
                }
            }
            else if (aiStyle == 9)
            {
                if (type == 516)
                {
                    if (alpha < 220)
                    {
                        alpha += 40;
                    }

                    if (this.ai[0] == 0f)
                    {
                        this.ai[0] = 1f;
                        var vector15 = Main.player[target].Center - base.Center;
                        vector15.Normalize();
                        if (vector15.HasNaNs())
                        {
                            vector15 = -Vector2.UnitY;
                        }

                        var spinningpoint = vector15.RotatedByRandom(1.5707963705062866);
                        vector16 = default(Vector2);
                        vector15 = spinningpoint.RotatedBy(-0.78539818525314331, vector16);
                        if (vector15.Y > 0.2f)
                        {
                            vector15.Y = 0.2f;
                        }

                        base.velocity = vector15 * (6f + Main.rand.NextFloat() * 4f);
                    }

                    if (collideX || collideY || Distance(Main.player[target].Center) < 20f)
                    {
                        StrikeNPCNoInteraction(9999, 0f, base.direction, false, false, false);
                    }
                }

                if (target == 255)
                {
                    TargetClosest(true);
                    var num124 = 6f;
                    if (type == 25)
                    {
                        num124 = 5f;
                    }

                    if (type == 112)
                    {
                        num124 = 7f;
                    }

                    var vector17 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num125 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                   vector17.X;
                    var num126 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                   vector17.Y;
                    var num127 = (float) Math.Sqrt((double) (num125 * num125 + num126 * num126));
                    num127 = num124 / num127;
                    base.velocity.X = num125 * num127;
                    base.velocity.Y = num126 * num127;
                }

                if (type == 112)
                {
                    damage = ((this.ai[1] == 1f) ? 65 : defDamage);
                    this.ai[0] += 1f;
                    if (this.ai[0] > 3f)
                    {
                        this.ai[0] = 3f;
                    }

                    if (this.ai[0] == 2f)
                    {
                        base.position += base.velocity;
                        Main.PlaySound(4, (int) base.position.X, (int) base.position.Y, 9, 1f, 0f);
                        for (var num128 = 0; num128 < 20; num128++)
                        {
                            var position29 = new Vector2(base.position.X, base.position.Y + 2f);
                            var width27 = base.width;
                            var height27 = base.height;
                            newColor = default(Color);
                            var num129 = Dust.NewDust(position29, width27, height27, 18, 0f, 0f, 100, newColor, 1.8f);
                            Main.dust[num129].velocity *= 1.3f;
                            Main.dust[num129].velocity += base.velocity;
                            Main.dust[num129].noGravity = true;
                        }
                    }
                }

                if (type == 112 && Collision.SolidCollision(base.position, base.width, base.height))
                {
                    var netMode = Main.netMode;
                    StrikeNPCNoInteraction(999, 0f, 0, false, false, false);
                }

                if (timeLeft > 100)
                {
                    timeLeft = 100;
                }

                if (type == 516)
                {
                    rotation += 0.1f * (float) base.direction;
                    var num130 = 15f;
                    var num131 = 0.0833333358f;
                    var center = base.Center;
                    var center2 = Main.player[target].Center;
                    var vec = center2 - center;
                    vec.Normalize();
                    if (vec.HasNaNs())
                    {
                        vec = new Vector2((float) base.direction, 0f);
                    }

                    base.velocity = (base.velocity * (num130 - 1f) + vec * (base.velocity.Length() + num131)) / num130;
                    if (base.velocity.Length() < 6f)
                    {
                        base.velocity *= 1.05f;
                    }
                }
                else
                {
                    for (var num132 = 0; num132 < 2; num132++)
                    {
                        if (type == 30)
                        {
                            alpha = 255;
                            for (var num133 = 0; num133 < 2; num133++)
                            {
                                var position30 = new Vector2(base.position.X, base.position.Y + 2f);
                                var width28 = base.width;
                                var height28 = base.height;
                                var speedX11 = base.velocity.X * 0.2f;
                                var speedY11 = base.velocity.Y * 0.2f;
                                newColor = default(Color);
                                var num134 = Dust.NewDust(position30, width28, height28, 27, speedX11, speedY11, 100,
                                    newColor, 1.3f);
                                Main.dust[num134].noGravity = true;
                                Main.dust[num134].velocity *= 0.3f;
                                Main.dust[num134].velocity.X -= base.velocity.X * 0.2f;
                                Main.dust[num134].velocity.Y -= base.velocity.Y * 0.2f;
                            }
                        }
                        else if (type == 33)
                        {
                            for (var num135 = 0; num135 < 3; num135++)
                            {
                                var num136 = base.velocity.X / 3f * (float) num132;
                                var num137 = base.velocity.Y / 3f * (float) num132;
                                var num138 = 2;
                                var position31 = new Vector2(base.position.X + (float) num138,
                                    base.position.Y + (float) num138);
                                var width29 = base.width - num138 * 2;
                                var height29 = base.height - num138 * 2;
                                newColor = default(Color);
                                var num139 = Dust.NewDust(position31, width29, height29, 172, 0f, 0f, 100, newColor,
                                    1.2f);
                                Main.dust[num139].noGravity = true;
                                Main.dust[num139].velocity *= 0.1f;
                                Main.dust[num139].velocity += base.velocity * 0.5f;
                                Main.dust[num139].position.X -= num136;
                                Main.dust[num139].position.Y -= num137;
                            }

                            if (Main.rand.Next(5) == 0)
                            {
                                var num140 = 2;
                                var position32 = new Vector2(base.position.X + (float) num140,
                                    base.position.Y + (float) num140);
                                var width30 = base.width - num140 * 2;
                                var height30 = base.height - num140 * 2;
                                newColor = default(Color);
                                var num141 = Dust.NewDust(position32, width30, height30, 172, 0f, 0f, 100, newColor,
                                    0.6f);
                                Main.dust[num141].velocity *= 0.25f;
                                Main.dust[num141].velocity += base.velocity * 0.5f;
                            }
                        }
                        else if (type == 112)
                        {
                            var position33 = new Vector2(base.position.X, base.position.Y + 2f);
                            var width31 = base.width;
                            var height31 = base.height;
                            var speedX12 = base.velocity.X * 0.1f;
                            var speedY12 = base.velocity.Y * 0.1f;
                            newColor = default(Color);
                            var num142 = Dust.NewDust(position33, width31, height31, 18, speedX12, speedY12, 80,
                                newColor, 1.3f);
                            Main.dust[num142].velocity *= 0.3f;
                            Main.dust[num142].noGravity = true;
                        }
                        else
                        {
                            Lighting.AddLight((int) ((base.position.X + (float) (base.width / 2)) / 16f),
                                (int) ((base.position.Y + (float) (base.height / 2)) / 16f), 1f, 0.3f, 0.1f);
                            var position34 = new Vector2(base.position.X, base.position.Y + 2f);
                            var width32 = base.width;
                            var height32 = base.height;
                            var speedX13 = base.velocity.X * 0.2f;
                            var speedY13 = base.velocity.Y * 0.2f;
                            newColor = default(Color);
                            var num143 = Dust.NewDust(position34, width32, height32, 6, speedX13, speedY13, 100,
                                newColor, 2f);
                            Main.dust[num143].noGravity = true;
                            Main.dust[num143].velocity.X *= 0.3f;
                            Main.dust[num143].velocity.Y *= 0.3f;
                        }
                    }

                    rotation += 0.4f * (float) base.direction;
                }
            }
            else if (aiStyle == 10)
            {
                var num144 = 1f;
                var num145 = 0.011f;
                TargetClosest(true);
                var vector18 = new Vector2(base.position.X + (float) base.width * 0.5f,
                    base.position.Y + (float) base.height * 0.5f);
                var num146 = Main.player[target].position.X + (float) (Main.player[target].width / 2) - vector18.X;
                var num147 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) - vector18.Y;
                var num148 = (float) Math.Sqrt((double) (num146 * num146 + num147 * num147));
                var num149 = num148;
                this.ai[1] += 1f;
                if (this.ai[1] > 600f)
                {
                    num145 *= 8f;
                    num144 = 4f;
                    if (this.ai[1] > 650f)
                    {
                        this.ai[1] = 0f;
                    }
                }
                else if (num149 < 250f)
                {
                    this.ai[0] += 0.9f;
                    if (this.ai[0] > 0f)
                    {
                        base.velocity.Y += 0.019f;
                    }
                    else
                    {
                        base.velocity.Y -= 0.019f;
                    }

                    if (this.ai[0] < -100f || this.ai[0] > 100f)
                    {
                        base.velocity.X += 0.019f;
                    }
                    else
                    {
                        base.velocity.X -= 0.019f;
                    }

                    if (this.ai[0] > 200f)
                    {
                        this.ai[0] = -200f;
                    }
                }

                if (num149 > 350f)
                {
                    num144 = 5f;
                    num145 = 0.3f;
                }
                else if (num149 > 300f)
                {
                    num144 = 3f;
                    num145 = 0.2f;
                }
                else if (num149 > 250f)
                {
                    num144 = 1.5f;
                    num145 = 0.1f;
                }

                num148 = num144 / num148;
                num146 *= num148;
                num147 *= num148;
                if (Main.player[target].dead)
                {
                    num146 = (float) base.direction * num144 / 2f;
                    num147 = (0f - num144) / 2f;
                }

                if (base.velocity.X < num146)
                {
                    base.velocity.X += num145;
                }
                else if (base.velocity.X > num146)
                {
                    base.velocity.X -= num145;
                }

                if (base.velocity.Y < num147)
                {
                    base.velocity.Y += num145;
                }
                else if (base.velocity.Y > num147)
                {
                    base.velocity.Y -= num145;
                }

                if (num146 > 0f)
                {
                    spriteDirection = -1;
                    rotation = (float) Math.Atan2((double) num147, (double) num146);
                }

                if (num146 < 0f)
                {
                    spriteDirection = 1;
                    rotation = (float) Math.Atan2((double) num147, (double) num146) + 3.14f;
                }

                if (type == 289)
                {
                    if (justHit)
                    {
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                    }

                    vector18 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    num146 = Main.player[target].position.X + (float) (Main.player[target].width / 2) - vector18.X;
                    num147 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) - vector18.Y;
                    num148 = (float) Math.Sqrt((double) (num146 * num146 + num147 * num147));
                    if (num148 <= 500f)
                    {
                        this.ai[2] += 1f;
                        if (this.ai[3] == 0f)
                        {
                            if (this.ai[2] > 120f)
                            {
                                this.ai[2] = 0f;
                                this.ai[3] = 1f;
                                netUpdate = true;
                            }
                        }
                        else
                        {
                            if (this.ai[2] > 40f)
                            {
                                this.ai[3] = 0f;
                            }

                            if (Main.netMode != 1 && this.ai[2] == 20f)
                            {
                                var num150 = 6f;
                                var num151 = 25;
                                var num152 = 299;
                                num148 = num150 / num148;
                                num146 *= num148;
                                num147 *= num148;
                                Projectile.NewProjectile(vector18.X, vector18.Y, num146, num147, num152, num151, 0f,
                                    Main.myPlayer, 0f, 0f);
                            }
                        }
                    }
                    else
                    {
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                    }
                }
            }
            else if (aiStyle == 11)
            {
                defense = defDefense;
                if (this.ai[0] == 0f && Main.netMode != 1)
                {
                    TargetClosest(true);
                    this.ai[0] = 1f;
                    if (type != 68)
                    {
                        var num153 = NewNPC((int) (base.position.X + (float) (base.width / 2)),
                            (int) base.position.Y + base.height / 2, 36, whoAmI, 0f, 0f, 0f, 0f, 255);
                        Main.npc[num153].ai[0] = -1f;
                        Main.npc[num153].ai[1] = (float) whoAmI;
                        Main.npc[num153].target = target;
                        Main.npc[num153].netUpdate = true;
                        num153 = NewNPC((int) (base.position.X + (float) (base.width / 2)),
                            (int) base.position.Y + base.height / 2, 36, whoAmI, 0f, 0f, 0f, 0f, 255);
                        Main.npc[num153].ai[0] = 1f;
                        Main.npc[num153].ai[1] = (float) whoAmI;
                        Main.npc[num153].ai[3] = 150f;
                        Main.npc[num153].target = target;
                        Main.npc[num153].netUpdate = true;
                    }
                }

                if (type == 68 && this.ai[1] != 3f && this.ai[1] != 2f)
                {
                    Main.PlaySound(15, (int) base.position.X, (int) base.position.Y, 0, 1f, 0f);
                    this.ai[1] = 2f;
                }

                if (Main.player[target].dead || Math.Abs(base.position.X - Main.player[target].position.X) > 2000f ||
                    Math.Abs(base.position.Y - Main.player[target].position.Y) > 2000f)
                {
                    TargetClosest(true);
                    if (Main.player[target].dead ||
                        Math.Abs(base.position.X - Main.player[target].position.X) > 2000f ||
                        Math.Abs(base.position.Y - Main.player[target].position.Y) > 2000f)
                    {
                        this.ai[1] = 3f;
                    }
                }

                if (Main.dayTime && this.ai[1] != 3f && this.ai[1] != 2f)
                {
                    this.ai[1] = 2f;
                    Main.PlaySound(15, (int) base.position.X, (int) base.position.Y, 0, 1f, 0f);
                }

                var num154 = 0;
                if (Main.expertMode)
                {
                    for (var num155 = 0; num155 < 200; num155++)
                    {
                        if (Main.npc[num155].active && Main.npc[num155].type == type + 1)
                        {
                            num154++;
                        }
                    }

                    defense += num154 * 25;
                    if ((num154 < 2 || (double) life < (double) lifeMax * 0.75) && this.ai[1] == 0f)
                    {
                        var num156 = 80f;
                        if (num154 == 0)
                        {
                            num156 /= 2f;
                        }

                        if (Main.netMode != 1 && this.ai[2] % num156 == 0f)
                        {
                            var center3 = base.Center;
                            var num157 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                           center3.X;
                            var num158 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                           center3.Y;
                            Math.Sqrt((double) (num157 * num157 + num158 * num158));
                            if (Collision.CanHit(center3, 1, 1, Main.player[target].position, Main.player[target].width,
                                Main.player[target].height))
                            {
                                var num159 = 3f;
                                if (num154 == 0)
                                {
                                    num159 += 2f;
                                }

                                var num160 = Main.player[target].position.X +
                                               (float) Main.player[target].width * 0.5f - center3.X +
                                               (float) Main.rand.Next(-20, 21);
                                var num161 = Main.player[target].position.Y +
                                               (float) Main.player[target].height * 0.5f - center3.Y +
                                               (float) Main.rand.Next(-20, 21);
                                var num162 = (float) Math.Sqrt((double) (num160 * num160 + num161 * num161));
                                num162 = num159 / num162;
                                num160 *= num162;
                                num161 *= num162;
                                var value = new Vector2(num160 * 1f + (float) Main.rand.Next(-50, 51) * 0.01f,
                                    num161 * 1f + (float) Main.rand.Next(-50, 51) * 0.01f);
                                value.Normalize();
                                value *= num159;
                                value += base.velocity;
                                num160 = value.X;
                                num161 = value.Y;
                                var num163 = 17;
                                var num164 = 270;
                                center3 += value * 5f;
                                var num165 = Projectile.NewProjectile(center3.X, center3.Y, num160, num161, num164,
                                    num163, 0f, Main.myPlayer, -1f, 0f);
                                Main.projectile[num165].timeLeft = 300;
                            }
                        }
                    }
                }

                if (this.ai[1] == 0f)
                {
                    damage = defDamage;
                    this.ai[2] += 1f;
                    if (this.ai[2] >= 800f)
                    {
                        this.ai[2] = 0f;
                        this.ai[1] = 1f;
                        TargetClosest(true);
                        netUpdate = true;
                    }

                    rotation = base.velocity.X / 15f;
                    var num166 = 0.02f;
                    var num167 = 2f;
                    var num168 = 0.05f;
                    var num169 = 8f;
                    if (Main.expertMode)
                    {
                        num166 = 0.03f;
                        num167 = 4f;
                        num168 = 0.07f;
                        num169 = 9.5f;
                    }

                    if (base.position.Y > Main.player[target].position.Y - 250f)
                    {
                        if (base.velocity.Y > 0f)
                        {
                            base.velocity.Y *= 0.98f;
                        }

                        base.velocity.Y -= num166;
                        if (base.velocity.Y > num167)
                        {
                            base.velocity.Y = num167;
                        }
                    }
                    else if (base.position.Y < Main.player[target].position.Y - 250f)
                    {
                        if (base.velocity.Y < 0f)
                        {
                            base.velocity.Y *= 0.98f;
                        }

                        base.velocity.Y += num166;
                        if (base.velocity.Y < 0f - num167)
                        {
                            base.velocity.Y = 0f - num167;
                        }
                    }

                    if (base.position.X + (float) (base.width / 2) >
                        Main.player[target].position.X + (float) (Main.player[target].width / 2))
                    {
                        if (base.velocity.X > 0f)
                        {
                            base.velocity.X *= 0.98f;
                        }

                        base.velocity.X -= num168;
                        if (base.velocity.X > num169)
                        {
                            base.velocity.X = num169;
                        }
                    }

                    if (base.position.X + (float) (base.width / 2) <
                        Main.player[target].position.X + (float) (Main.player[target].width / 2))
                    {
                        if (base.velocity.X < 0f)
                        {
                            base.velocity.X *= 0.98f;
                        }

                        base.velocity.X += num168;
                        if (base.velocity.X < 0f - num169)
                        {
                            base.velocity.X = 0f - num169;
                        }
                    }
                }
                else if (this.ai[1] == 1f)
                {
                    defense -= 10;
                    this.ai[2] += 1f;
                    if (this.ai[2] == 2f)
                    {
                        Main.PlaySound(15, (int) base.position.X, (int) base.position.Y, 0, 1f, 0f);
                    }

                    if (this.ai[2] >= 400f)
                    {
                        this.ai[2] = 0f;
                        this.ai[1] = 0f;
                    }

                    rotation += (float) base.direction * 0.3f;
                    var vector19 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num170 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                   vector19.X;
                    var num171 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                   vector19.Y;
                    var num172 = (float) Math.Sqrt((double) (num170 * num170 + num171 * num171));
                    var num173 = 1.5f;
                    if (Main.expertMode)
                    {
                        damage = (int) ((double) defDamage * 1.3);
                        num173 = 4f;
                        if (num172 > 150f)
                        {
                            num173 *= 1.05f;
                        }

                        if (num172 > 200f)
                        {
                            num173 *= 1.1f;
                        }

                        if (num172 > 250f)
                        {
                            num173 *= 1.1f;
                        }

                        if (num172 > 300f)
                        {
                            num173 *= 1.1f;
                        }

                        if (num172 > 350f)
                        {
                            num173 *= 1.1f;
                        }

                        if (num172 > 400f)
                        {
                            num173 *= 1.1f;
                        }

                        if (num172 > 450f)
                        {
                            num173 *= 1.1f;
                        }

                        if (num172 > 500f)
                        {
                            num173 *= 1.1f;
                        }

                        if (num172 > 550f)
                        {
                            num173 *= 1.1f;
                        }

                        if (num172 > 600f)
                        {
                            num173 *= 1.1f;
                        }

                        switch (num154)
                        {
                            case 0:
                                num173 *= 1.2f;
                                break;
                            case 1:
                                num173 *= 1.1f;
                                break;
                        }
                    }

                    num172 = num173 / num172;
                    base.velocity.X = num170 * num172;
                    base.velocity.Y = num171 * num172;
                }
                else if (this.ai[1] == 2f)
                {
                    damage = 1000;
                    defense = 9999;
                    rotation += (float) base.direction * 0.3f;
                    var vector20 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num174 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                   vector20.X;
                    var num175 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                   vector20.Y;
                    var num176 = (float) Math.Sqrt((double) (num174 * num174 + num175 * num175));
                    num176 = 8f / num176;
                    base.velocity.X = num174 * num176;
                    base.velocity.Y = num175 * num176;
                }
                else if (this.ai[1] == 3f)
                {
                    base.velocity.Y += 0.1f;
                    if (base.velocity.Y < 0f)
                    {
                        base.velocity.Y *= 0.95f;
                    }

                    base.velocity.X *= 0.95f;
                    if (timeLeft > 50)
                    {
                        timeLeft = 50;
                    }
                }

                if (this.ai[1] != 2f && this.ai[1] != 3f && type != 68 && (num154 != 0 || !Main.expertMode))
                {
                    var position35 =
                        new Vector2(base.position.X + (float) (base.width / 2) - 15f - base.velocity.X * 5f,
                            base.position.Y + (float) base.height - 2f);
                    var speedX14 = (0f - base.velocity.X) * 0.2f;
                    newColor = default(Color);
                    var num177 = Dust.NewDust(position35, 30, 10, 5, speedX14, 3f, 0, newColor, 2f);
                    Main.dust[num177].noGravity = true;
                    Main.dust[num177].velocity.X *= 1.3f;
                    Main.dust[num177].velocity.X += base.velocity.X * 0.4f;
                    Main.dust[num177].velocity.Y += 2f + base.velocity.Y;
                    for (var num178 = 0; num178 < 2; num178++)
                    {
                        var position36 = new Vector2(base.position.X, base.position.Y + 120f);
                        var width33 = base.width;
                        var x2 = base.velocity.X;
                        var y = base.velocity.Y;
                        newColor = default(Color);
                        num177 = Dust.NewDust(position36, width33, 60, 5, x2, y, 0, newColor, 2f);
                        Main.dust[num177].noGravity = true;
                        Main.dust[num177].velocity -= base.velocity;
                        Main.dust[num177].velocity.Y += 5f;
                    }
                }
            }
            else if (aiStyle == 12)
            {
                spriteDirection = -(int) this.ai[0];
                if (!Main.npc[(int) this.ai[1]].active || Main.npc[(int) this.ai[1]].aiStyle != 11)
                {
                    this.ai[2] += 10f;
                    if (this.ai[2] > 50f || Main.netMode != 2)
                    {
                        life = -1;
                        HitEffect(0, 10.0);
                        active = false;
                    }
                }

                if (this.ai[2] == 0f || this.ai[2] == 3f)
                {
                    if (Main.npc[(int) this.ai[1]].ai[1] == 3f && timeLeft > 10)
                    {
                        timeLeft = 10;
                    }

                    if (Main.npc[(int) this.ai[1]].ai[1] != 0f)
                    {
                        if (base.position.Y > Main.npc[(int) this.ai[1]].position.Y - 100f)
                        {
                            if (base.velocity.Y > 0f)
                            {
                                base.velocity.Y *= 0.96f;
                            }

                            base.velocity.Y -= 0.07f;
                            if (base.velocity.Y > 6f)
                            {
                                base.velocity.Y = 6f;
                            }
                        }
                        else if (base.position.Y < Main.npc[(int) this.ai[1]].position.Y - 100f)
                        {
                            if (base.velocity.Y < 0f)
                            {
                                base.velocity.Y *= 0.96f;
                            }

                            base.velocity.Y += 0.07f;
                            if (base.velocity.Y < -6f)
                            {
                                base.velocity.Y = -6f;
                            }
                        }

                        if (base.position.X + (float) (base.width / 2) > Main.npc[(int) this.ai[1]].position.X +
                            (float) (Main.npc[(int) this.ai[1]].width / 2) - 120f * this.ai[0])
                        {
                            if (base.velocity.X > 0f)
                            {
                                base.velocity.X *= 0.96f;
                            }

                            base.velocity.X -= 0.1f;
                            if (base.velocity.X > 8f)
                            {
                                base.velocity.X = 8f;
                            }
                        }

                        if (base.position.X + (float) (base.width / 2) < Main.npc[(int) this.ai[1]].position.X +
                            (float) (Main.npc[(int) this.ai[1]].width / 2) - 120f * this.ai[0])
                        {
                            if (base.velocity.X < 0f)
                            {
                                base.velocity.X *= 0.96f;
                            }

                            base.velocity.X += 0.1f;
                            if (base.velocity.X < -8f)
                            {
                                base.velocity.X = -8f;
                            }
                        }
                    }
                    else
                    {
                        this.ai[3] += 1f;
                        if (Main.expertMode)
                        {
                            this.ai[3] += 0.5f;
                        }

                        if (this.ai[3] >= 300f)
                        {
                            this.ai[2] += 1f;
                            this.ai[3] = 0f;
                            netUpdate = true;
                        }

                        if (Main.expertMode)
                        {
                            if (base.position.Y > Main.npc[(int) this.ai[1]].position.Y + 230f)
                            {
                                if (base.velocity.Y > 0f)
                                {
                                    base.velocity.Y *= 0.96f;
                                }

                                base.velocity.Y -= 0.04f;
                                if (base.velocity.Y > 3f)
                                {
                                    base.velocity.Y = 3f;
                                }
                            }
                            else if (base.position.Y < Main.npc[(int) this.ai[1]].position.Y + 230f)
                            {
                                if (base.velocity.Y < 0f)
                                {
                                    base.velocity.Y *= 0.96f;
                                }

                                base.velocity.Y += 0.04f;
                                if (base.velocity.Y < -3f)
                                {
                                    base.velocity.Y = -3f;
                                }
                            }

                            if (base.position.X + (float) (base.width / 2) > Main.npc[(int) this.ai[1]].position.X +
                                (float) (Main.npc[(int) this.ai[1]].width / 2) - 200f * this.ai[0])
                            {
                                if (base.velocity.X > 0f)
                                {
                                    base.velocity.X *= 0.96f;
                                }

                                base.velocity.X -= 0.07f;
                                if (base.velocity.X > 8f)
                                {
                                    base.velocity.X = 8f;
                                }
                            }

                            if (base.position.X + (float) (base.width / 2) < Main.npc[(int) this.ai[1]].position.X +
                                (float) (Main.npc[(int) this.ai[1]].width / 2) - 200f * this.ai[0])
                            {
                                if (base.velocity.X < 0f)
                                {
                                    base.velocity.X *= 0.96f;
                                }

                                base.velocity.X += 0.07f;
                                if (base.velocity.X < -8f)
                                {
                                    base.velocity.X = -8f;
                                }
                            }
                        }

                        if (base.position.Y > Main.npc[(int) this.ai[1]].position.Y + 230f)
                        {
                            if (base.velocity.Y > 0f)
                            {
                                base.velocity.Y *= 0.96f;
                            }

                            base.velocity.Y -= 0.04f;
                            if (base.velocity.Y > 3f)
                            {
                                base.velocity.Y = 3f;
                            }
                        }
                        else if (base.position.Y < Main.npc[(int) this.ai[1]].position.Y + 230f)
                        {
                            if (base.velocity.Y < 0f)
                            {
                                base.velocity.Y *= 0.96f;
                            }

                            base.velocity.Y += 0.04f;
                            if (base.velocity.Y < -3f)
                            {
                                base.velocity.Y = -3f;
                            }
                        }

                        if (base.position.X + (float) (base.width / 2) > Main.npc[(int) this.ai[1]].position.X +
                            (float) (Main.npc[(int) this.ai[1]].width / 2) - 200f * this.ai[0])
                        {
                            if (base.velocity.X > 0f)
                            {
                                base.velocity.X *= 0.96f;
                            }

                            base.velocity.X -= 0.07f;
                            if (base.velocity.X > 8f)
                            {
                                base.velocity.X = 8f;
                            }
                        }

                        if (base.position.X + (float) (base.width / 2) < Main.npc[(int) this.ai[1]].position.X +
                            (float) (Main.npc[(int) this.ai[1]].width / 2) - 200f * this.ai[0])
                        {
                            if (base.velocity.X < 0f)
                            {
                                base.velocity.X *= 0.96f;
                            }

                            base.velocity.X += 0.07f;
                            if (base.velocity.X < -8f)
                            {
                                base.velocity.X = -8f;
                            }
                        }
                    }

                    var vector21 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num179 = Main.npc[(int) this.ai[1]].position.X +
                                   (float) (Main.npc[(int) this.ai[1]].width / 2) - 200f * this.ai[0] - vector21.X;
                    var num180 = Main.npc[(int) this.ai[1]].position.Y + 230f - vector21.Y;
                    Math.Sqrt((double) (num179 * num179 + num180 * num180));
                    rotation = (float) Math.Atan2((double) num180, (double) num179) + 1.57f;
                }
                else if (this.ai[2] == 1f)
                {
                    var vector22 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num181 = Main.npc[(int) this.ai[1]].position.X +
                                   (float) (Main.npc[(int) this.ai[1]].width / 2) - 200f * this.ai[0] - vector22.X;
                    var num182 = Main.npc[(int) this.ai[1]].position.Y + 230f - vector22.Y;
                    var num183 = (float) Math.Sqrt((double) (num181 * num181 + num182 * num182));
                    rotation = (float) Math.Atan2((double) num182, (double) num181) + 1.57f;
                    base.velocity.X *= 0.95f;
                    base.velocity.Y -= 0.1f;
                    if (Main.expertMode)
                    {
                        base.velocity.Y -= 0.06f;
                        if (base.velocity.Y < -13f)
                        {
                            base.velocity.Y = -13f;
                        }
                    }
                    else if (base.velocity.Y < -8f)
                    {
                        base.velocity.Y = -8f;
                    }

                    if (base.position.Y < Main.npc[(int) this.ai[1]].position.Y - 200f)
                    {
                        TargetClosest(true);
                        this.ai[2] = 2f;
                        vector22 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        num181 = Main.player[target].position.X + (float) (Main.player[target].width / 2) - vector22.X;
                        num182 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) - vector22.Y;
                        num183 = (float) Math.Sqrt((double) (num181 * num181 + num182 * num182));
                        num183 = ((!Main.expertMode) ? (18f / num183) : (21f / num183));
                        base.velocity.X = num181 * num183;
                        base.velocity.Y = num182 * num183;
                        netUpdate = true;
                    }
                }
                else if (this.ai[2] == 2f)
                {
                    if (base.position.Y > Main.player[target].position.Y || base.velocity.Y < 0f)
                    {
                        this.ai[2] = 3f;
                    }
                }
                else if (this.ai[2] == 4f)
                {
                    var vector23 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num184 = Main.npc[(int) this.ai[1]].position.X +
                                   (float) (Main.npc[(int) this.ai[1]].width / 2) - 200f * this.ai[0] - vector23.X;
                    var num185 = Main.npc[(int) this.ai[1]].position.Y + 230f - vector23.Y;
                    var num186 = (float) Math.Sqrt((double) (num184 * num184 + num185 * num185));
                    rotation = (float) Math.Atan2((double) num185, (double) num184) + 1.57f;
                    base.velocity.Y *= 0.95f;
                    base.velocity.X += 0.1f * (0f - this.ai[0]);
                    if (Main.expertMode)
                    {
                        base.velocity.X += 0.07f * (0f - this.ai[0]);
                        if (base.velocity.X < -12f)
                        {
                            base.velocity.X = -12f;
                        }
                        else if (base.velocity.X > 12f)
                        {
                            base.velocity.X = 12f;
                        }
                    }
                    else if (base.velocity.X < -8f)
                    {
                        base.velocity.X = -8f;
                    }
                    else if (base.velocity.X > 8f)
                    {
                        base.velocity.X = 8f;
                    }

                    if (base.position.X + (float) (base.width / 2) < Main.npc[(int) this.ai[1]].position.X +
                        (float) (Main.npc[(int) this.ai[1]].width / 2) - 500f ||
                        base.position.X + (float) (base.width / 2) > Main.npc[(int) this.ai[1]].position.X +
                        (float) (Main.npc[(int) this.ai[1]].width / 2) + 500f)
                    {
                        TargetClosest(true);
                        this.ai[2] = 5f;
                        vector23 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        num184 = Main.player[target].position.X + (float) (Main.player[target].width / 2) - vector23.X;
                        num185 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) - vector23.Y;
                        num186 = (float) Math.Sqrt((double) (num184 * num184 + num185 * num185));
                        num186 = ((!Main.expertMode) ? (17f / num186) : (22f / num186));
                        base.velocity.X = num184 * num186;
                        base.velocity.Y = num185 * num186;
                        netUpdate = true;
                    }
                }
                else if (this.ai[2] == 5f &&
                         ((base.velocity.X > 0f && base.position.X + (float) (base.width / 2) >
                           Main.player[target].position.X + (float) (Main.player[target].width / 2)) ||
                          (base.velocity.X < 0f && base.position.X + (float) (base.width / 2) <
                           Main.player[target].position.X + (float) (Main.player[target].width / 2))))
                {
                    this.ai[2] = 0f;
                }
            }
            else if (aiStyle == 13)
            {
                if (!(this.ai[0] < 0f) && !(this.ai[0] >= (float) Main.maxTilesX) && !(this.ai[1] < 0f) &&
                    !(this.ai[1] >= (float) Main.maxTilesX))
                {
                    if (Main.tile[(int) this.ai[0], (int) this.ai[1]] == null)
                    {
                        var tile = Main.tile;
                        var num187 = (int) this.ai[0];
                        var num188 = (int) this.ai[1];
                        var tile2 = new Tile();
                        tile[num187, num188] = tile2;
                    }

                    if (!Main.tile[(int) this.ai[0], (int) this.ai[1]].active())
                    {
                        life = -1;
                        HitEffect(0, 10.0);
                        active = false;
                    }
                    else
                    {
                        FixExploitManEaters.ProtectSpot((int) this.ai[0], (int) this.ai[1]);
                        TargetClosest(true);
                        var num189 = 0.035f;
                        var num190 = 150f;
                        if (type == 43)
                        {
                            num190 = 250f;
                        }

                        if (type == 101)
                        {
                            num190 = 175f;
                        }

                        if (type == 259)
                        {
                            num190 = 100f;
                        }

                        if (type == 175)
                        {
                            num190 = 500f;
                            num189 = 0.05f;
                        }

                        if (type == 260)
                        {
                            num190 = 350f;
                            num189 = 0.15f;
                        }

                        this.ai[2] += 1f;
                        if (this.ai[2] > 300f)
                        {
                            num190 = (float) (int) ((double) num190 * 1.3);
                            if (this.ai[2] > 450f)
                            {
                                this.ai[2] = 0f;
                            }
                        }

                        var vector24 = new Vector2(this.ai[0] * 16f + 8f, this.ai[1] * 16f + 8f);
                        var num191 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                       (float) (base.width / 2) - vector24.X;
                        var num192 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                       (float) (base.height / 2) - vector24.Y;
                        var num193 = (float) Math.Sqrt((double) (num191 * num191 + num192 * num192));
                        if (num193 > num190)
                        {
                            num193 = num190 / num193;
                            num191 *= num193;
                            num192 *= num193;
                        }

                        if (base.position.X < this.ai[0] * 16f + 8f + num191)
                        {
                            base.velocity.X += num189;
                            if (base.velocity.X < 0f && num191 > 0f)
                            {
                                base.velocity.X += num189 * 1.5f;
                            }
                        }
                        else if (base.position.X > this.ai[0] * 16f + 8f + num191)
                        {
                            base.velocity.X -= num189;
                            if (base.velocity.X > 0f && num191 < 0f)
                            {
                                base.velocity.X -= num189 * 1.5f;
                            }
                        }

                        if (base.position.Y < this.ai[1] * 16f + 8f + num192)
                        {
                            base.velocity.Y += num189;
                            if (base.velocity.Y < 0f && num192 > 0f)
                            {
                                base.velocity.Y += num189 * 1.5f;
                            }
                        }
                        else if (base.position.Y > this.ai[1] * 16f + 8f + num192)
                        {
                            base.velocity.Y -= num189;
                            if (base.velocity.Y > 0f && num192 < 0f)
                            {
                                base.velocity.Y -= num189 * 1.5f;
                            }
                        }

                        if (type == 43)
                        {
                            if (base.velocity.X > 3f)
                            {
                                base.velocity.X = 3f;
                            }

                            if (base.velocity.X < -3f)
                            {
                                base.velocity.X = -3f;
                            }

                            if (base.velocity.Y > 3f)
                            {
                                base.velocity.Y = 3f;
                            }

                            if (base.velocity.Y < -3f)
                            {
                                base.velocity.Y = -3f;
                            }
                        }
                        else if (type == 175)
                        {
                            if (base.velocity.X > 4f)
                            {
                                base.velocity.X = 4f;
                            }

                            if (base.velocity.X < -4f)
                            {
                                base.velocity.X = -4f;
                            }

                            if (base.velocity.Y > 4f)
                            {
                                base.velocity.Y = 4f;
                            }

                            if (base.velocity.Y < -4f)
                            {
                                base.velocity.Y = -4f;
                            }
                        }
                        else
                        {
                            if (base.velocity.X > 2f)
                            {
                                base.velocity.X = 2f;
                            }

                            if (base.velocity.X < -2f)
                            {
                                base.velocity.X = -2f;
                            }

                            if (base.velocity.Y > 2f)
                            {
                                base.velocity.Y = 2f;
                            }

                            if (base.velocity.Y < -2f)
                            {
                                base.velocity.Y = -2f;
                            }
                        }

                        if (type == 259 || type == 260)
                        {
                            rotation = (float) Math.Atan2((double) num192, (double) num191) + 1.57f;
                        }
                        else
                        {
                            if (num191 > 0f)
                            {
                                spriteDirection = 1;
                                rotation = (float) Math.Atan2((double) num192, (double) num191);
                            }

                            if (num191 < 0f)
                            {
                                spriteDirection = -1;
                                rotation = (float) Math.Atan2((double) num192, (double) num191) + 3.14f;
                            }
                        }

                        if (collideX)
                        {
                            netUpdate = true;
                            base.velocity.X = oldVelocity.X * -0.7f;
                            if (base.velocity.X > 0f && base.velocity.X < 2f)
                            {
                                base.velocity.X = 2f;
                            }

                            if (base.velocity.X < 0f && base.velocity.X > -2f)
                            {
                                base.velocity.X = -2f;
                            }
                        }

                        if (collideY)
                        {
                            netUpdate = true;
                            base.velocity.Y = oldVelocity.Y * -0.7f;
                            if (base.velocity.Y > 0f && base.velocity.Y < 2f)
                            {
                                base.velocity.Y = 2f;
                            }

                            if (base.velocity.Y < 0f && base.velocity.Y > -2f)
                            {
                                base.velocity.Y = -2f;
                            }
                        }

                        if (Main.netMode != 1)
                        {
                            if (type == 101 && !Main.player[target].dead)
                            {
                                if (justHit)
                                {
                                    localAI[0] = 0f;
                                }

                                localAI[0] += 1f;
                                if (localAI[0] >= 120f)
                                {
                                    if (!Collision.SolidCollision(base.position, base.width, base.height) &&
                                        Collision.CanHit(base.position, base.width, base.height,
                                            Main.player[target].position, Main.player[target].width,
                                            Main.player[target].height))
                                    {
                                        var num194 = 10f;
                                        vector24 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                            base.position.Y + (float) base.height * 0.5f);
                                        num191 = Main.player[target].position.X +
                                                 (float) Main.player[target].width * 0.5f - vector24.X +
                                                 (float) Main.rand.Next(-10, 11);
                                        num192 = Main.player[target].position.Y +
                                                 (float) Main.player[target].height * 0.5f - vector24.Y +
                                                 (float) Main.rand.Next(-10, 11);
                                        num193 = (float) Math.Sqrt((double) (num191 * num191 + num192 * num192));
                                        num193 = num194 / num193;
                                        num191 *= num193;
                                        num192 *= num193;
                                        var num195 = 22;
                                        if (Main.expertMode)
                                        {
                                            num195 = (int) ((double) num195 * 0.8);
                                        }

                                        var num196 = 96;
                                        var num197 = Projectile.NewProjectile(vector24.X, vector24.Y, num191, num192,
                                            num196, num195, 0f, Main.myPlayer, 0f, 0f);
                                        Main.projectile[num197].timeLeft = 300;
                                        localAI[0] = 0f;
                                    }
                                    else
                                    {
                                        localAI[0] = 100f;
                                    }
                                }
                            }

                            if (type == 260 && !Main.player[target].dead)
                            {
                                if (justHit)
                                {
                                    localAI[0] = 0f;
                                }

                                localAI[0] += 1f;
                                if (localAI[0] >= 150f)
                                {
                                    if (!Collision.SolidCollision(base.position, base.width, base.height))
                                    {
                                        var num198 = 14f;
                                        vector24 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                            base.position.Y + (float) base.height * 0.5f);
                                        num191 = Main.player[target].position.X +
                                                 (float) Main.player[target].width * 0.5f - vector24.X +
                                                 (float) Main.rand.Next(-10, 11);
                                        var num199 = Math.Abs(num191 * 0.1f);
                                        if (num192 > 0f)
                                        {
                                            num199 = 0f;
                                        }

                                        num192 = Main.player[target].position.Y +
                                                 (float) Main.player[target].height * 0.5f - vector24.Y +
                                                 (float) Main.rand.Next(-10, 11) - num199;
                                        num193 = (float) Math.Sqrt((double) (num191 * num191 + num192 * num192));
                                        num193 = num198 / num193;
                                        num191 *= num193;
                                        num192 *= num193;
                                        var num200 = NewNPC((int) base.Center.X, (int) base.Center.Y, 261, 0, 0f, 0f,
                                            0f, 0f, 255);
                                        Main.npc[num200].velocity.X = num191;
                                        Main.npc[num200].velocity.Y = num192;
                                        Main.npc[num200].netUpdate = true;
                                        localAI[0] = 0f;
                                    }
                                    else
                                    {
                                        localAI[0] = 250f;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else if (aiStyle == 14)
            {
                if (type == 60 || type == 151)
                {
                    var position37 = new Vector2(base.position.X, base.position.Y);
                    var width34 = base.width;
                    var height33 = base.height;
                    var speedX15 = base.velocity.X * 0.2f;
                    var speedY14 = base.velocity.Y * 0.2f;
                    newColor = default(Color);
                    var num201 = Dust.NewDust(position37, width34, height33, 6, speedX15, speedY14, 100, newColor, 2f);
                    Main.dust[num201].noGravity = true;
                }

                if (type == 150 && Main.rand.Next(10) == 0)
                {
                    var position38 = new Vector2(base.position.X, base.position.Y);
                    var width35 = base.width;
                    var height34 = base.height;
                    var speedX16 = base.velocity.X * 0.5f;
                    var speedY15 = base.velocity.Y * 0.5f;
                    newColor = default(Color);
                    var num202 = Dust.NewDust(position38, width35, height34, 67, speedX16, speedY15, 90, newColor,
                        1.5f);
                    Main.dust[num202].noGravity = true;
                    Main.dust[num202].velocity *= 0.2f;
                    Main.dust[num202].noLight = true;
                }

                noGravity = true;
                if (collideX)
                {
                    base.velocity.X = oldVelocity.X * -0.5f;
                    if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 2f)
                    {
                        base.velocity.X = 2f;
                    }

                    if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -2f)
                    {
                        base.velocity.X = -2f;
                    }
                }

                if (collideY)
                {
                    base.velocity.Y = oldVelocity.Y * -0.5f;
                    if (base.velocity.Y > 0f && base.velocity.Y < 1f)
                    {
                        base.velocity.Y = 1f;
                    }

                    if (base.velocity.Y < 0f && base.velocity.Y > -1f)
                    {
                        base.velocity.Y = -1f;
                    }
                }

                if (type == 226)
                {
                    var direction = 1;
                    var num203 = 1;
                    if (base.velocity.X < 0f)
                    {
                        direction = -1;
                    }

                    if (base.velocity.Y < 0f)
                    {
                        num203 = -1;
                    }

                    TargetClosest(true);
                    if (!Collision.CanHit(base.position, base.width, base.height, Main.player[target].position,
                        Main.player[target].width, Main.player[target].height))
                    {
                        base.direction = direction;
                        directionY = num203;
                    }
                }
                else
                {
                    TargetClosest(true);
                }

                if (type == 158)
                {
                    if ((double) base.position.Y < Main.worldSurface * 16.0 && Main.dayTime && !Main.eclipse)
                    {
                        directionY = -1;
                        base.direction *= -1;
                    }

                    if (base.direction == -1 && base.velocity.X > -7f)
                    {
                        base.velocity.X -= 0.2f;
                        if (base.velocity.X > 4f)
                        {
                            base.velocity.X -= 0.1f;
                        }
                        else if (base.velocity.X > 0f)
                        {
                            base.velocity.X += 0.05f;
                        }

                        if (base.velocity.X < -7f)
                        {
                            base.velocity.X = -7f;
                        }
                    }
                    else if (base.direction == 1 && base.velocity.X < 7f)
                    {
                        base.velocity.X += 0.2f;
                        if (base.velocity.X < -4f)
                        {
                            base.velocity.X += 0.1f;
                        }
                        else if (base.velocity.X < 0f)
                        {
                            base.velocity.X -= 0.05f;
                        }

                        if (base.velocity.X > 7f)
                        {
                            base.velocity.X = 7f;
                        }
                    }

                    if (directionY == -1 && base.velocity.Y > -7f)
                    {
                        base.velocity.Y -= 0.2f;
                        if (base.velocity.Y > 4f)
                        {
                            base.velocity.Y -= 0.1f;
                        }
                        else if (base.velocity.Y > 0f)
                        {
                            base.velocity.Y += 0.05f;
                        }

                        if (base.velocity.Y < -7f)
                        {
                            base.velocity.Y = -7f;
                        }
                    }
                    else if (directionY == 1 && base.velocity.Y < 7f)
                    {
                        base.velocity.Y += 0.2f;
                        if (base.velocity.Y < -4f)
                        {
                            base.velocity.Y += 0.1f;
                        }
                        else if (base.velocity.Y < 0f)
                        {
                            base.velocity.Y -= 0.05f;
                        }

                        if (base.velocity.Y > 7f)
                        {
                            base.velocity.Y = 7f;
                        }
                    }
                }
                else if (type == 226)
                {
                    if (base.direction == -1 && base.velocity.X > -4f)
                    {
                        base.velocity.X -= 0.2f;
                        if (base.velocity.X > 4f)
                        {
                            base.velocity.X -= 0.1f;
                        }
                        else if (base.velocity.X > 0f)
                        {
                            base.velocity.X += 0.05f;
                        }

                        if (base.velocity.X < -4f)
                        {
                            base.velocity.X = -4f;
                        }
                    }
                    else if (base.direction == 1 && base.velocity.X < 4f)
                    {
                        base.velocity.X += 0.2f;
                        if (base.velocity.X < -4f)
                        {
                            base.velocity.X += 0.1f;
                        }
                        else if (base.velocity.X < 0f)
                        {
                            base.velocity.X -= 0.05f;
                        }

                        if (base.velocity.X > 4f)
                        {
                            base.velocity.X = 4f;
                        }
                    }

                    if (directionY == -1 && (double) base.velocity.Y > -2.5)
                    {
                        base.velocity.Y -= 0.1f;
                        if ((double) base.velocity.Y > 2.5)
                        {
                            base.velocity.Y -= 0.05f;
                        }
                        else if (base.velocity.Y > 0f)
                        {
                            base.velocity.Y += 0.03f;
                        }

                        if ((double) base.velocity.Y < -2.5)
                        {
                            base.velocity.Y = -2.5f;
                        }
                    }
                    else if (directionY == 1 && (double) base.velocity.Y < 2.5)
                    {
                        base.velocity.Y += 0.1f;
                        if ((double) base.velocity.Y < -2.5)
                        {
                            base.velocity.Y += 0.05f;
                        }
                        else if (base.velocity.Y < 0f)
                        {
                            base.velocity.Y -= 0.03f;
                        }

                        if ((double) base.velocity.Y > 2.5)
                        {
                            base.velocity.Y = 2.5f;
                        }
                    }
                }
                else
                {
                    if (base.direction == -1 && base.velocity.X > -4f)
                    {
                        base.velocity.X -= 0.1f;
                        if (base.velocity.X > 4f)
                        {
                            base.velocity.X -= 0.1f;
                        }
                        else if (base.velocity.X > 0f)
                        {
                            base.velocity.X += 0.05f;
                        }

                        if (base.velocity.X < -4f)
                        {
                            base.velocity.X = -4f;
                        }
                    }
                    else if (base.direction == 1 && base.velocity.X < 4f)
                    {
                        base.velocity.X += 0.1f;
                        if (base.velocity.X < -4f)
                        {
                            base.velocity.X += 0.1f;
                        }
                        else if (base.velocity.X < 0f)
                        {
                            base.velocity.X -= 0.05f;
                        }

                        if (base.velocity.X > 4f)
                        {
                            base.velocity.X = 4f;
                        }
                    }

                    if (directionY == -1 && (double) base.velocity.Y > -1.5)
                    {
                        base.velocity.Y -= 0.04f;
                        if ((double) base.velocity.Y > 1.5)
                        {
                            base.velocity.Y -= 0.05f;
                        }
                        else if (base.velocity.Y > 0f)
                        {
                            base.velocity.Y += 0.03f;
                        }

                        if ((double) base.velocity.Y < -1.5)
                        {
                            base.velocity.Y = -1.5f;
                        }
                    }
                    else if (directionY == 1 && (double) base.velocity.Y < 1.5)
                    {
                        base.velocity.Y += 0.04f;
                        if ((double) base.velocity.Y < -1.5)
                        {
                            base.velocity.Y += 0.05f;
                        }
                        else if (base.velocity.Y < 0f)
                        {
                            base.velocity.Y -= 0.03f;
                        }

                        if ((double) base.velocity.Y > 1.5)
                        {
                            base.velocity.Y = 1.5f;
                        }
                    }
                }

                if (type == 49 || type == 51 || type == 60 || type == 62 || type == 66 || type == 93 || type == 137 ||
                    type == 150 || type == 151 || type == 152)
                {
                    if (wet)
                    {
                        if (base.velocity.Y > 0f)
                        {
                            base.velocity.Y *= 0.95f;
                        }

                        base.velocity.Y -= 0.5f;
                        if (base.velocity.Y < -4f)
                        {
                            base.velocity.Y = -4f;
                        }

                        TargetClosest(true);
                    }

                    if (type == 60)
                    {
                        if (base.direction == -1 && base.velocity.X > -4f)
                        {
                            base.velocity.X -= 0.1f;
                            if (base.velocity.X > 4f)
                            {
                                base.velocity.X -= 0.07f;
                            }
                            else if (base.velocity.X > 0f)
                            {
                                base.velocity.X += 0.03f;
                            }

                            if (base.velocity.X < -4f)
                            {
                                base.velocity.X = -4f;
                            }
                        }
                        else if (base.direction == 1 && base.velocity.X < 4f)
                        {
                            base.velocity.X += 0.1f;
                            if (base.velocity.X < -4f)
                            {
                                base.velocity.X += 0.07f;
                            }
                            else if (base.velocity.X < 0f)
                            {
                                base.velocity.X -= 0.03f;
                            }

                            if (base.velocity.X > 4f)
                            {
                                base.velocity.X = 4f;
                            }
                        }

                        if (directionY == -1 && (double) base.velocity.Y > -1.5)
                        {
                            base.velocity.Y -= 0.04f;
                            if ((double) base.velocity.Y > 1.5)
                            {
                                base.velocity.Y -= 0.03f;
                            }
                            else if (base.velocity.Y > 0f)
                            {
                                base.velocity.Y += 0.02f;
                            }

                            if ((double) base.velocity.Y < -1.5)
                            {
                                base.velocity.Y = -1.5f;
                            }
                        }
                        else if (directionY == 1 && (double) base.velocity.Y < 1.5)
                        {
                            base.velocity.Y += 0.04f;
                            if ((double) base.velocity.Y < -1.5)
                            {
                                base.velocity.Y += 0.03f;
                            }
                            else if (base.velocity.Y < 0f)
                            {
                                base.velocity.Y -= 0.02f;
                            }

                            if ((double) base.velocity.Y > 1.5)
                            {
                                base.velocity.Y = 1.5f;
                            }
                        }
                    }
                    else
                    {
                        if (base.direction == -1 && base.velocity.X > -4f)
                        {
                            base.velocity.X -= 0.1f;
                            if (base.velocity.X > 4f)
                            {
                                base.velocity.X -= 0.1f;
                            }
                            else if (base.velocity.X > 0f)
                            {
                                base.velocity.X += 0.05f;
                            }

                            if (base.velocity.X < -4f)
                            {
                                base.velocity.X = -4f;
                            }
                        }
                        else if (base.direction == 1 && base.velocity.X < 4f)
                        {
                            base.velocity.X += 0.1f;
                            if (base.velocity.X < -4f)
                            {
                                base.velocity.X += 0.1f;
                            }
                            else if (base.velocity.X < 0f)
                            {
                                base.velocity.X -= 0.05f;
                            }

                            if (base.velocity.X > 4f)
                            {
                                base.velocity.X = 4f;
                            }
                        }

                        if (directionY == -1 && (double) base.velocity.Y > -1.5)
                        {
                            base.velocity.Y -= 0.04f;
                            if ((double) base.velocity.Y > 1.5)
                            {
                                base.velocity.Y -= 0.05f;
                            }
                            else if (base.velocity.Y > 0f)
                            {
                                base.velocity.Y += 0.03f;
                            }

                            if ((double) base.velocity.Y < -1.5)
                            {
                                base.velocity.Y = -1.5f;
                            }
                        }
                        else if (directionY == 1 && (double) base.velocity.Y < 1.5)
                        {
                            base.velocity.Y += 0.04f;
                            if ((double) base.velocity.Y < -1.5)
                            {
                                base.velocity.Y += 0.05f;
                            }
                            else if (base.velocity.Y < 0f)
                            {
                                base.velocity.Y -= 0.03f;
                            }

                            if ((double) base.velocity.Y > 1.5)
                            {
                                base.velocity.Y = 1.5f;
                            }
                        }
                    }
                }

                if (type == 48 && wet)
                {
                    if (base.velocity.Y > 0f)
                    {
                        base.velocity.Y *= 0.95f;
                    }

                    base.velocity.Y -= 0.5f;
                    if (base.velocity.Y < -4f)
                    {
                        base.velocity.Y = -4f;
                    }

                    TargetClosest(true);
                }

                if (type == 158 && Main.netMode != 1)
                {
                    var vector25 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num204 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                   vector25.X;
                    var num205 = Main.player[target].position.Y + (float) Main.player[target].height * 0.5f -
                                   vector25.Y;
                    var num206 = (float) Math.Sqrt((double) (num204 * num204 + num205 * num205));
                    if (num206 < 200f &&
                        base.position.Y + (float) base.height <
                        Main.player[target].position.Y + (float) Main.player[target].height &&
                        Collision.CanHit(base.position, base.width, base.height, Main.player[target].position,
                            Main.player[target].width, Main.player[target].height))
                    {
                        Transform(159);
                    }
                }

                this.ai[1] += 1f;
                if (type == 158)
                {
                    this.ai[1] += 1f;
                }

                if (this.ai[1] > 200f)
                {
                    if (!Main.player[target].wet && Collision.CanHit(base.position, base.width, base.height,
                            Main.player[target].position, Main.player[target].width, Main.player[target].height))
                    {
                        this.ai[1] = 0f;
                    }

                    var num207 = 0.2f;
                    var num208 = 0.1f;
                    var num209 = 4f;
                    var num210 = 1.5f;
                    if (type == 48 || type == 62 || type == 66)
                    {
                        num207 = 0.12f;
                        num208 = 0.07f;
                        num209 = 3f;
                        num210 = 1.25f;
                    }

                    if (this.ai[1] > 1000f)
                    {
                        this.ai[1] = 0f;
                    }

                    this.ai[2] += 1f;
                    if (this.ai[2] > 0f)
                    {
                        if (base.velocity.Y < num210)
                        {
                            base.velocity.Y += num208;
                        }
                    }
                    else if (base.velocity.Y > 0f - num210)
                    {
                        base.velocity.Y -= num208;
                    }

                    if (this.ai[2] < -150f || this.ai[2] > 150f)
                    {
                        if (base.velocity.X < num209)
                        {
                            base.velocity.X += num207;
                        }
                    }
                    else if (base.velocity.X > 0f - num209)
                    {
                        base.velocity.X -= num207;
                    }

                    if (this.ai[2] > 300f)
                    {
                        this.ai[2] = -300f;
                    }
                }

                if (Main.netMode != 1)
                {
                    if (type == 48)
                    {
                        this.ai[0] += 1f;
                        if (this.ai[0] == 30f || this.ai[0] == 60f || this.ai[0] == 90f)
                        {
                            if (Collision.CanHit(base.position, base.width, base.height, Main.player[target].position,
                                Main.player[target].width, Main.player[target].height))
                            {
                                var num211 = 6f;
                                var vector26 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                    base.position.Y + (float) base.height * 0.5f);
                                var num212 = Main.player[target].position.X +
                                               (float) Main.player[target].width * 0.5f - vector26.X +
                                               (float) Main.rand.Next(-100, 101);
                                var num213 = Main.player[target].position.Y +
                                               (float) Main.player[target].height * 0.5f - vector26.Y +
                                               (float) Main.rand.Next(-100, 101);
                                var num214 = (float) Math.Sqrt((double) (num212 * num212 + num213 * num213));
                                num214 = num211 / num214;
                                num212 *= num214;
                                num213 *= num214;
                                var num215 = 15;
                                var num216 = 38;
                                var num217 = Projectile.NewProjectile(vector26.X, vector26.Y, num212, num213, num216,
                                    num215, 0f, Main.myPlayer, 0f, 0f);
                                Main.projectile[num217].timeLeft = 300;
                            }
                        }
                        else if (this.ai[0] >= (float) (400 + Main.rand.Next(400)))
                        {
                            this.ai[0] = 0f;
                        }
                    }

                    if (type == 62 || type == 66)
                    {
                        this.ai[0] += 1f;
                        if (this.ai[0] == 20f || this.ai[0] == 40f || this.ai[0] == 60f || this.ai[0] == 80f)
                        {
                            if (Collision.CanHit(base.position, base.width, base.height, Main.player[target].position,
                                Main.player[target].width, Main.player[target].height))
                            {
                                var num218 = 0.2f;
                                var vector27 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                    base.position.Y + (float) base.height * 0.5f);
                                var num219 = Main.player[target].position.X +
                                               (float) Main.player[target].width * 0.5f - vector27.X +
                                               (float) Main.rand.Next(-100, 101);
                                var num220 = Main.player[target].position.Y +
                                               (float) Main.player[target].height * 0.5f - vector27.Y +
                                               (float) Main.rand.Next(-100, 101);
                                var num221 = (float) Math.Sqrt((double) (num219 * num219 + num220 * num220));
                                num221 = num218 / num221;
                                num219 *= num221;
                                num220 *= num221;
                                var num222 = 21;
                                var num223 = 44;
                                var num224 = Projectile.NewProjectile(vector27.X, vector27.Y, num219, num220, num223,
                                    num222, 0f, Main.myPlayer, 0f, 0f);
                                Main.projectile[num224].timeLeft = 300;
                            }
                        }
                        else if (this.ai[0] >= (float) (300 + Main.rand.Next(300)))
                        {
                            this.ai[0] = 0f;
                        }
                    }

                    if (type == 156)
                    {
                        this.ai[0] += 1f;
                        if (this.ai[0] == 20f || this.ai[0] == 40f || this.ai[0] == 60f || this.ai[0] == 80f ||
                            this.ai[0] == 100f)
                        {
                            if (Collision.CanHit(base.position, base.width, base.height, Main.player[target].position,
                                Main.player[target].width, Main.player[target].height))
                            {
                                var num225 = 0.2f;
                                var value2 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                    base.position.Y + (float) base.height * 0.5f);
                                var num226 = Main.player[target].position.X +
                                               (float) Main.player[target].width * 0.5f - value2.X +
                                               (float) Main.rand.Next(-50, 51);
                                var num227 = Main.player[target].position.Y +
                                               (float) Main.player[target].height * 0.5f - value2.Y +
                                               (float) Main.rand.Next(-50, 51);
                                var num228 = (float) Math.Sqrt((double) (num226 * num226 + num227 * num227));
                                num228 = num225 / num228;
                                num226 *= num228;
                                num227 *= num228;
                                var num229 = 80;
                                var num230 = 115;
                                value2 += base.velocity * 5f;
                                var num231 = Projectile.NewProjectile(value2.X + num226 * 100f,
                                    value2.Y + num227 * 100f, num226, num227, num230, num229, 0f, Main.myPlayer, 0f,
                                    0f);
                                Main.projectile[num231].timeLeft = 300;
                            }
                        }
                        else if (this.ai[0] >= (float) (250 + Main.rand.Next(250)))
                        {
                            this.ai[0] = 0f;
                        }
                    }
                }
            }
            else if (aiStyle == 15)
            {
                var num232 = 1f;
                var flag8 = false;
                var flag9 = false;
                aiAction = 0;
                if (this.ai[3] == 0f && life > 0)
                {
                    this.ai[3] = (float) lifeMax;
                }

                if (localAI[3] == 0f && Main.netMode != 1)
                {
                    this.ai[0] = -100f;
                    localAI[3] = 1f;
                    TargetClosest(true);
                    netUpdate = true;
                }

                if (Main.player[target].dead)
                {
                    TargetClosest(true);
                    if (Main.player[target].dead)
                    {
                        timeLeft = 0;
                        if (Main.player[target].Center.X < base.Center.X)
                        {
                            base.direction = 1;
                        }
                        else
                        {
                            base.direction = -1;
                        }
                    }
                }

                if (!Main.player[target].dead && this.ai[2] >= 300f && this.ai[1] < 5f && base.velocity.Y == 0f)
                {
                    this.ai[2] = 0f;
                    this.ai[0] = 0f;
                    this.ai[1] = 5f;
                    if (Main.netMode != 1)
                    {
                        TargetClosest(false);
                        var point3 = base.Center.ToTileCoordinates();
                        var point4 = Main.player[target].Center.ToTileCoordinates();
                        var vector28 = Main.player[target].Center - base.Center;
                        var num233 = 10;
                        var num234 = 0;
                        var num235 = 7;
                        var num236 = 0;
                        var flag10 = false;
                        if (vector28.Length() > 2000f)
                        {
                            flag10 = true;
                            num236 = 100;
                        }

                        while (!flag10 && num236 < 100)
                        {
                            num236++;
                            var num237 = Main.rand.Next(point4.X - num233, point4.X + num233 + 1);
                            var num238 = Main.rand.Next(point4.Y - num233, point4.Y + 1);
                            if ((num238 < point4.Y - num235 || num238 > point4.Y + num235 ||
                                 num237 < point4.X - num235 || num237 > point4.X + num235) &&
                                (num238 < point3.Y - num234 || num238 > point3.Y + num234 ||
                                 num237 < point3.X - num234 || num237 > point3.X + num234) &&
                                !Main.tile[num237, num238].nactive())
                            {
                                var num239 = num238;
                                var num240 = 0;
                                if (!Main.tile[num237, num239].nactive() ||
                                    !Main.tileSolid[Main.tile[num237, num239].type] ||
                                    Main.tileSolidTop[Main.tile[num237, num239].type])
                                {
                                    for (; num240 < 150; num240++)
                                    {
                                        if (num239 + num240 >= Main.maxTilesY)
                                        {
                                            break;
                                        }

                                        var num241 = num239 + num240;
                                        if (Main.tile[num237, num241].nactive() &&
                                            Main.tileSolid[Main.tile[num237, num241].type] &&
                                            !Main.tileSolidTop[Main.tile[num237, num241].type])
                                        {
                                            num240--;
                                            break;
                                        }
                                    }
                                }
                                else
                                {
                                    num240 = 1;
                                }

                                num238 += num240;
                                var flag11 = true;
                                if (flag11 && Main.tile[num237, num238].lava())
                                {
                                    flag11 = false;
                                }

                                if (flag11 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0,
                                        0))
                                {
                                    flag11 = false;
                                }

                                if (flag11)
                                {
                                    localAI[1] = (float) (num237 * 16 + 8);
                                    localAI[2] = (float) (num238 * 16 + 16);
                                    flag10 = true;
                                    break;
                                }
                            }
                        }

                        if (num236 >= 100)
                        {
                            var bottom = Main.player[Player.FindClosest(base.position, base.width, base.height)]
                                .Bottom;
                            localAI[1] = bottom.X;
                            localAI[2] = bottom.Y;
                        }
                    }
                }

                if (!Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
                {
                    this.ai[2] += 1f;
                }

                if (Math.Abs(base.Top.Y - Main.player[target].Bottom.Y) > 320f)
                {
                    this.ai[2] += 1f;
                }

                if (this.ai[1] == 5f)
                {
                    flag8 = true;
                    aiAction = 1;
                    this.ai[0] += 1f;
                    num232 = MathHelper.Clamp((60f - this.ai[0]) / 60f, 0f, 1f);
                    num232 = 0.5f + num232 * 0.5f;
                    if (this.ai[0] >= 60f)
                    {
                        flag9 = true;
                    }

                    if (this.ai[0] == 60f)
                    {
                        Gore.NewGore(base.Center + new Vector2(-40f, (float) (-base.height / 2)), base.velocity, 734,
                            1f);
                    }

                    if (this.ai[0] >= 60f && Main.netMode != 1)
                    {
                        base.Bottom = new Vector2(localAI[1], localAI[2]);
                        this.ai[1] = 6f;
                        this.ai[0] = 0f;
                        netUpdate = true;
                    }

                    if (Main.netMode == 1 && this.ai[0] >= 120f)
                    {
                        this.ai[1] = 6f;
                        this.ai[0] = 0f;
                    }

                    if (!flag9)
                    {
                        for (var num242 = 0; num242 < 10; num242++)
                        {
                            var num243 = Dust.NewDust(base.position + Vector2.UnitX * -20f, base.width + 40,
                                base.height, 4, base.velocity.X, base.velocity.Y, 150, new Color(78, 136, 255, 80), 2f);
                            Main.dust[num243].noGravity = true;
                            Main.dust[num243].velocity *= 0.5f;
                        }
                    }
                }
                else if (this.ai[1] == 6f)
                {
                    flag8 = true;
                    aiAction = 0;
                    this.ai[0] += 1f;
                    num232 = MathHelper.Clamp(this.ai[0] / 30f, 0f, 1f);
                    num232 = 0.5f + num232 * 0.5f;
                    if (this.ai[0] >= 30f && Main.netMode != 1)
                    {
                        this.ai[1] = 0f;
                        this.ai[0] = 0f;
                        netUpdate = true;
                        TargetClosest(true);
                    }

                    if (Main.netMode == 1 && this.ai[0] >= 60f)
                    {
                        this.ai[1] = 0f;
                        this.ai[0] = 0f;
                        TargetClosest(true);
                    }

                    for (var num244 = 0; num244 < 10; num244++)
                    {
                        var num245 = Dust.NewDust(base.position + Vector2.UnitX * -20f, base.width + 40, base.height, 4,
                            base.velocity.X, base.velocity.Y, 150, new Color(78, 136, 255, 80), 2f);
                        Main.dust[num245].noGravity = true;
                        Main.dust[num245].velocity *= 2f;
                    }
                }

                dontTakeDamage = (hide = flag9);
                if (base.velocity.Y == 0f)
                {
                    base.velocity.X *= 0.8f;
                    if ((double) base.velocity.X > -0.1 && (double) base.velocity.X < 0.1)
                    {
                        base.velocity.X = 0f;
                    }

                    if (!flag8)
                    {
                        this.ai[0] += 2f;
                        if ((double) life < (double) lifeMax * 0.8)
                        {
                            this.ai[0] += 1f;
                        }

                        if ((double) life < (double) lifeMax * 0.6)
                        {
                            this.ai[0] += 1f;
                        }

                        if ((double) life < (double) lifeMax * 0.4)
                        {
                            this.ai[0] += 2f;
                        }

                        if ((double) life < (double) lifeMax * 0.2)
                        {
                            this.ai[0] += 3f;
                        }

                        if ((double) life < (double) lifeMax * 0.1)
                        {
                            this.ai[0] += 4f;
                        }

                        if (this.ai[0] >= 0f)
                        {
                            netUpdate = true;
                            TargetClosest(true);
                            if (this.ai[1] == 3f)
                            {
                                base.velocity.Y = -13f;
                                base.velocity.X += 3.5f * (float) base.direction;
                                this.ai[0] = -200f;
                                this.ai[1] = 0f;
                            }
                            else if (this.ai[1] == 2f)
                            {
                                base.velocity.Y = -6f;
                                base.velocity.X += 4.5f * (float) base.direction;
                                this.ai[0] = -120f;
                                this.ai[1] += 1f;
                            }
                            else
                            {
                                base.velocity.Y = -8f;
                                base.velocity.X += 4f * (float) base.direction;
                                this.ai[0] = -120f;
                                this.ai[1] += 1f;
                            }
                        }
                        else if (this.ai[0] >= -30f)
                        {
                            aiAction = 1;
                        }
                    }
                }
                else if (target < 255 && ((base.direction == 1 && base.velocity.X < 3f) ||
                                          (base.direction == -1 && base.velocity.X > -3f)))
                {
                    if ((base.direction == -1 && (double) base.velocity.X < 0.1) ||
                        (base.direction == 1 && (double) base.velocity.X > -0.1))
                    {
                        base.velocity.X += 0.2f * (float) base.direction;
                    }
                    else
                    {
                        base.velocity.X *= 0.93f;
                    }
                }

                var num246 = Dust.NewDust(base.position, base.width, base.height, 4, base.velocity.X, base.velocity.Y,
                    255, new Color(0, 80, 255, 80), scale * 1.2f);
                Main.dust[num246].noGravity = true;
                Main.dust[num246].velocity *= 0.5f;
                if (life > 0)
                {
                    var num247 = (float) life / (float) lifeMax;
                    num247 = num247 * 0.5f + 0.75f;
                    num247 *= num232;
                    if (num247 != scale)
                    {
                        base.position.X += (float) (base.width / 2);
                        base.position.Y += (float) base.height;
                        scale = num247;
                        base.width = (int) (98f * scale);
                        base.height = (int) (92f * scale);
                        base.position.X -= (float) (base.width / 2);
                        base.position.Y -= (float) base.height;
                    }

                    if (Main.netMode != 1)
                    {
                        var num248 = (int) ((double) lifeMax * 0.05);
                        if ((float) (life + num248) < this.ai[3])
                        {
                            this.ai[3] = (float) life;
                            var num249 = Main.rand.Next(1, 4);
                            for (var num250 = 0; num250 < num249; num250++)
                            {
                                var x3 = (int) (base.position.X + (float) Main.rand.Next(base.width - 32));
                                var y2 = (int) (base.position.Y + (float) Main.rand.Next(base.height - 32));
                                var num251 = 1;
                                if (Main.expertMode && Main.rand.Next(4) == 0)
                                {
                                    num251 = 535;
                                }

                                var num252 = NewNPC(x3, y2, num251, 0, 0f, 0f, 0f, 0f, 255);
                                Main.npc[num252].SetDefaults(num251, -1f);
                                Main.npc[num252].velocity.X = (float) Main.rand.Next(-15, 16) * 0.1f;
                                Main.npc[num252].velocity.Y = (float) Main.rand.Next(-30, 1) * 0.1f;
                                Main.npc[num252].ai[0] = (float) (-1000 * Main.rand.Next(3));
                                Main.npc[num252].ai[1] = 0f;
                                if (Main.netMode == 2 && num252 < 200)
                                {
                                    NetMessage.SendData(23, -1, -1, null, num252, 0f, 0f, 0f, 0, 0, 0);
                                }
                            }
                        }
                    }
                }
            }
            else if (aiStyle == 16)
            {
                if (base.direction == 0)
                {
                    TargetClosest(true);
                }

                if (wet)
                {
                    var flag12 = false;
                    if (type != 55)
                    {
                        TargetClosest(false);
                        if (Main.player[target].wet && !Main.player[target].dead)
                        {
                            flag12 = true;
                        }
                    }

                    if (!flag12)
                    {
                        if (collideX)
                        {
                            base.velocity.X *= -1f;
                            base.direction *= -1;
                            netUpdate = true;
                        }

                        if (collideY)
                        {
                            netUpdate = true;
                            if (base.velocity.Y > 0f)
                            {
                                base.velocity.Y = Math.Abs(base.velocity.Y) * -1f;
                                directionY = -1;
                                this.ai[0] = -1f;
                            }
                            else if (base.velocity.Y < 0f)
                            {
                                base.velocity.Y = Math.Abs(base.velocity.Y);
                                directionY = 1;
                                this.ai[0] = 1f;
                            }
                        }
                    }

                    if (type == 102)
                    {
                        Lighting.AddLight(
                            (int) (base.position.X + (float) (base.width / 2) +
                                   (float) (base.direction * (base.width + 8))) / 16, (int) (base.position.Y + 2f) / 16,
                            0.07f, 0.04f, 0.025f);
                    }

                    if (flag12)
                    {
                        TargetClosest(true);
                        if (type == 157)
                        {
                            if (base.velocity.X > 0f && base.direction < 0)
                            {
                                base.velocity.X *= 0.95f;
                            }

                            if (base.velocity.X < 0f && base.direction > 0)
                            {
                                base.velocity.X *= 0.95f;
                            }

                            base.velocity.X += (float) base.direction * 0.25f;
                            base.velocity.Y += (float) directionY * 0.2f;
                            if (base.velocity.X > 8f)
                            {
                                base.velocity.X = 7f;
                            }

                            if (base.velocity.X < -8f)
                            {
                                base.velocity.X = -7f;
                            }

                            if (base.velocity.Y > 5f)
                            {
                                base.velocity.Y = 4f;
                            }

                            if (base.velocity.Y < -5f)
                            {
                                base.velocity.Y = -4f;
                            }
                        }
                        else if (type == 65 || type == 102)
                        {
                            base.velocity.X += (float) base.direction * 0.15f;
                            base.velocity.Y += (float) directionY * 0.15f;
                            if (base.velocity.X > 5f)
                            {
                                base.velocity.X = 5f;
                            }

                            if (base.velocity.X < -5f)
                            {
                                base.velocity.X = -5f;
                            }

                            if (base.velocity.Y > 3f)
                            {
                                base.velocity.Y = 3f;
                            }

                            if (base.velocity.Y < -3f)
                            {
                                base.velocity.Y = -3f;
                            }
                        }
                        else
                        {
                            base.velocity.X += (float) base.direction * 0.1f;
                            base.velocity.Y += (float) directionY * 0.1f;
                            if (base.velocity.X > 3f)
                            {
                                base.velocity.X = 3f;
                            }

                            if (base.velocity.X < -3f)
                            {
                                base.velocity.X = -3f;
                            }

                            if (base.velocity.Y > 2f)
                            {
                                base.velocity.Y = 2f;
                            }

                            if (base.velocity.Y < -2f)
                            {
                                base.velocity.Y = -2f;
                            }
                        }
                    }
                    else
                    {
                        if (type == 157)
                        {
                            if (Main.player[target].position.Y > base.position.Y)
                            {
                                directionY = 1;
                            }
                            else
                            {
                                directionY = -1;
                            }

                            base.velocity.X += (float) base.direction * 0.2f;
                            if (base.velocity.X < -2f || base.velocity.X > 2f)
                            {
                                base.velocity.X *= 0.95f;
                            }

                            if (this.ai[0] == -1f)
                            {
                                var num253 = -0.6f;
                                if (directionY < 0)
                                {
                                    num253 = -1f;
                                }

                                if (directionY > 0)
                                {
                                    num253 = -0.2f;
                                }

                                base.velocity.Y -= 0.02f;
                                if (base.velocity.Y < num253)
                                {
                                    this.ai[0] = 1f;
                                }
                            }
                            else
                            {
                                var num254 = 0.6f;
                                if (directionY < 0)
                                {
                                    num254 = 0.2f;
                                }

                                if (directionY > 0)
                                {
                                    num254 = 1f;
                                }

                                base.velocity.Y += 0.02f;
                                if (base.velocity.Y > num254)
                                {
                                    this.ai[0] = -1f;
                                }
                            }
                        }
                        else
                        {
                            base.velocity.X += (float) base.direction * 0.1f;
                            if (base.velocity.X < -1f || base.velocity.X > 1f)
                            {
                                base.velocity.X *= 0.95f;
                            }

                            if (this.ai[0] == -1f)
                            {
                                base.velocity.Y -= 0.01f;
                                if ((double) base.velocity.Y < -0.3)
                                {
                                    this.ai[0] = 1f;
                                }
                            }
                            else
                            {
                                base.velocity.Y += 0.01f;
                                if ((double) base.velocity.Y > 0.3)
                                {
                                    this.ai[0] = -1f;
                                }
                            }
                        }

                        var num255 = (int) (base.position.X + (float) (base.width / 2)) / 16;
                        var num256 = (int) (base.position.Y + (float) (base.height / 2)) / 16;
                        if (Main.tile[num255, num256 - 1] == null)
                        {
                            var tile3 = Main.tile;
                            var num257 = num255;
                            var num258 = num256 - 1;
                            var tile4 = new Tile();
                            tile3[num257, num258] = tile4;
                        }

                        if (Main.tile[num255, num256 + 1] == null)
                        {
                            var tile5 = Main.tile;
                            var num259 = num255;
                            var num260 = num256 + 1;
                            var tile6 = new Tile();
                            tile5[num259, num260] = tile6;
                        }

                        if (Main.tile[num255, num256 + 2] == null)
                        {
                            var tile7 = Main.tile;
                            var num261 = num255;
                            var num262 = num256 + 2;
                            var tile8 = new Tile();
                            tile7[num261, num262] = tile8;
                        }

                        if (Main.tile[num255, num256 - 1].liquid > 128)
                        {
                            if (Main.tile[num255, num256 + 1].active())
                            {
                                this.ai[0] = -1f;
                            }
                            else if (Main.tile[num255, num256 + 2].active())
                            {
                                this.ai[0] = -1f;
                            }
                        }

                        if (type != 157 && ((double) base.velocity.Y > 0.4 || (double) base.velocity.Y < -0.4))
                        {
                            base.velocity.Y *= 0.95f;
                        }
                    }
                }
                else
                {
                    if (base.velocity.Y == 0f)
                    {
                        if (type == 65)
                        {
                            base.velocity.X *= 0.94f;
                            if ((double) base.velocity.X > -0.2 && (double) base.velocity.X < 0.2)
                            {
                                base.velocity.X = 0f;
                            }
                        }
                        else if (Main.netMode != 1)
                        {
                            base.velocity.Y = (float) Main.rand.Next(-50, -20) * 0.1f;
                            base.velocity.X = (float) Main.rand.Next(-20, 20) * 0.1f;
                            netUpdate = true;
                        }
                    }

                    base.velocity.Y += 0.3f;
                    if (base.velocity.Y > 10f)
                    {
                        base.velocity.Y = 10f;
                    }

                    this.ai[0] = 1f;
                }

                rotation = base.velocity.Y * (float) base.direction * 0.1f;
                if ((double) rotation < -0.2)
                {
                    rotation = -0.2f;
                }

                if ((double) rotation > 0.2)
                {
                    rotation = 0.2f;
                }
            }
            else if (aiStyle == 17)
            {
                noGravity = true;
                if (this.ai[0] == 0f)
                {
                    noGravity = false;
                    TargetClosest(true);
                    if (Main.netMode != 1)
                    {
                        if (base.velocity.X != 0f || base.velocity.Y < 0f || (double) base.velocity.Y > 0.3)
                        {
                            this.ai[0] = 1f;
                            netUpdate = true;
                        }
                        else
                        {
                            var rectangle = new Rectangle((int) Main.player[target].position.X,
                                (int) Main.player[target].position.Y, Main.player[target].width,
                                Main.player[target].height);
                            if (new Rectangle((int) base.position.X - 100, (int) base.position.Y - 100,
                                    base.width + 200, base.height + 200).Intersects(rectangle) || life < lifeMax)
                            {
                                this.ai[0] = 1f;
                                base.velocity.Y -= 6f;
                                netUpdate = true;
                            }
                        }
                    }
                }
                else if (!Main.player[target].dead)
                {
                    if (collideX)
                    {
                        base.velocity.X = oldVelocity.X * -0.5f;
                        if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 2f)
                        {
                            base.velocity.X = 2f;
                        }

                        if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -2f)
                        {
                            base.velocity.X = -2f;
                        }
                    }

                    if (collideY)
                    {
                        base.velocity.Y = oldVelocity.Y * -0.5f;
                        if (base.velocity.Y > 0f && base.velocity.Y < 1f)
                        {
                            base.velocity.Y = 1f;
                        }

                        if (base.velocity.Y < 0f && base.velocity.Y > -1f)
                        {
                            base.velocity.Y = -1f;
                        }
                    }

                    TargetClosest(true);
                    if (base.direction == -1 && base.velocity.X > -3f)
                    {
                        base.velocity.X -= 0.1f;
                        if (base.velocity.X > 3f)
                        {
                            base.velocity.X -= 0.1f;
                        }
                        else if (base.velocity.X > 0f)
                        {
                            base.velocity.X -= 0.05f;
                        }

                        if (base.velocity.X < -3f)
                        {
                            base.velocity.X = -3f;
                        }
                    }
                    else if (base.direction == 1 && base.velocity.X < 3f)
                    {
                        base.velocity.X += 0.1f;
                        if (base.velocity.X < -3f)
                        {
                            base.velocity.X += 0.1f;
                        }
                        else if (base.velocity.X < 0f)
                        {
                            base.velocity.X += 0.05f;
                        }

                        if (base.velocity.X > 3f)
                        {
                            base.velocity.X = 3f;
                        }
                    }

                    var num263 = Math.Abs(base.position.X + (float) (base.width / 2) -
                                            (Main.player[target].position.X + (float) (Main.player[target].width / 2)));
                    var num264 = Main.player[target].position.Y - (float) (base.height / 2);
                    if (num263 > 50f)
                    {
                        num264 -= 100f;
                    }

                    if (base.position.Y < num264)
                    {
                        base.velocity.Y += 0.05f;
                        if (base.velocity.Y < 0f)
                        {
                            base.velocity.Y += 0.01f;
                        }
                    }
                    else
                    {
                        base.velocity.Y -= 0.05f;
                        if (base.velocity.Y > 0f)
                        {
                            base.velocity.Y -= 0.01f;
                        }
                    }

                    if (base.velocity.Y < -3f)
                    {
                        base.velocity.Y = -3f;
                    }

                    if (base.velocity.Y > 3f)
                    {
                        base.velocity.Y = 3f;
                    }
                }

                if (wet)
                {
                    if (base.velocity.Y > 0f)
                    {
                        base.velocity.Y *= 0.95f;
                    }

                    base.velocity.Y -= 0.5f;
                    if (base.velocity.Y < -4f)
                    {
                        base.velocity.Y = -4f;
                    }

                    TargetClosest(true);
                }
            }
            else if (aiStyle == 18)
            {
                var flag13 = false;
                if (wet && this.ai[1] == 1f)
                {
                    flag13 = true;
                }
                else
                {
                    dontTakeDamage = false;
                }

                if (Main.expertMode && (type == 63 || type == 64 || type == 103 || type == 242))
                {
                    if (wet)
                    {
                        if (target >= 0 && Main.player[target].wet && !Main.player[target].dead &&
                            (Main.player[target].Center - base.Center).Length() < 150f)
                        {
                            if (this.ai[1] == 0f)
                            {
                                this.ai[2] += 2f;
                            }
                            else
                            {
                                this.ai[2] -= 0.25f;
                            }
                        }

                        if (flag13)
                        {
                            dontTakeDamage = true;
                            this.ai[2] += 1f;
                            if (this.ai[2] >= 120f)
                            {
                                this.ai[1] = 0f;
                            }
                        }
                        else
                        {
                            this.ai[2] += 1f;
                            if (this.ai[2] >= 420f)
                            {
                                this.ai[1] = 1f;
                                this.ai[2] = 0f;
                            }
                        }
                    }
                    else
                    {
                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                    }
                }

                var num265 = 1f;
                if (flag13)
                {
                    num265 += 0.5f;
                }

                if (type == 63)
                {
                    Lighting.AddLight((int) (base.position.X + (float) (base.height / 2)) / 16,
                        (int) (base.position.Y + (float) (base.height / 2)) / 16, 0.05f * num265, 0.15f * num265,
                        0.4f * num265);
                }
                else if (type == 103)
                {
                    Lighting.AddLight((int) (base.position.X + (float) (base.height / 2)) / 16,
                        (int) (base.position.Y + (float) (base.height / 2)) / 16, 0.05f * num265, 0.45f * num265,
                        0.1f * num265);
                }
                else if (type != 221 && type != 242)
                {
                    Lighting.AddLight((int) (base.position.X + (float) (base.height / 2)) / 16,
                        (int) (base.position.Y + (float) (base.height / 2)) / 16, 0.35f * num265, 0.05f * num265,
                        0.2f * num265);
                }

                if (base.direction == 0)
                {
                    TargetClosest(true);
                }

                if (!flag13)
                {
                    if (wet)
                    {
                        if (collideX)
                        {
                            base.velocity.X *= -1f;
                            base.direction *= -1;
                        }

                        if (collideY)
                        {
                            if (base.velocity.Y > 0f)
                            {
                                base.velocity.Y = Math.Abs(base.velocity.Y) * -1f;
                                directionY = -1;
                                this.ai[0] = -1f;
                            }
                            else if (base.velocity.Y < 0f)
                            {
                                base.velocity.Y = Math.Abs(base.velocity.Y);
                                directionY = 1;
                                this.ai[0] = 1f;
                            }
                        }

                        var flag14 = false;
                        if (!friendly)
                        {
                            TargetClosest(false);
                            if (Main.player[target].wet && !Main.player[target].dead)
                            {
                                flag14 = true;
                            }
                        }

                        if (flag14)
                        {
                            localAI[2] = 1f;
                            rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) + 1.57f;
                            base.velocity *= 0.98f;
                            var num266 = 0.2f;
                            if (type == 103)
                            {
                                base.velocity *= 0.98f;
                                num266 = 0.6f;
                            }

                            if (type == 221)
                            {
                                base.velocity *= 0.99f;
                                num266 = 1f;
                            }

                            if (type == 242)
                            {
                                base.velocity *= 0.995f;
                                num266 = 3f;
                            }

                            if (base.velocity.X > 0f - num266 && base.velocity.X < num266 &&
                                base.velocity.Y > 0f - num266 && base.velocity.Y < num266)
                            {
                                if (type == 221)
                                {
                                    localAI[0] = 1f;
                                }

                                TargetClosest(true);
                                var num267 = 7f;
                                if (type == 103)
                                {
                                    num267 = 9f;
                                }

                                var vector29 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                    base.position.Y + (float) base.height * 0.5f);
                                var num268 = Main.player[target].position.X +
                                               (float) (Main.player[target].width / 2) - vector29.X;
                                var num269 = Main.player[target].position.Y +
                                               (float) (Main.player[target].height / 2) - vector29.Y;
                                var num270 = (float) Math.Sqrt((double) (num268 * num268 + num269 * num269));
                                num270 = num267 / num270;
                                num268 *= num270;
                                num269 *= num270;
                                base.velocity.X = num268;
                                base.velocity.Y = num269;
                            }
                        }
                        else
                        {
                            localAI[2] = 0f;
                            base.velocity.X += (float) base.direction * 0.02f;
                            rotation = base.velocity.X * 0.4f;
                            if (base.velocity.X < -1f || base.velocity.X > 1f)
                            {
                                base.velocity.X *= 0.95f;
                            }

                            if (this.ai[0] == -1f)
                            {
                                base.velocity.Y -= 0.01f;
                                if (base.velocity.Y < -1f)
                                {
                                    this.ai[0] = 1f;
                                }
                            }
                            else
                            {
                                base.velocity.Y += 0.01f;
                                if (base.velocity.Y > 1f)
                                {
                                    this.ai[0] = -1f;
                                }
                            }

                            var num271 = (int) (base.position.X + (float) (base.width / 2)) / 16;
                            var num272 = (int) (base.position.Y + (float) (base.height / 2)) / 16;
                            if (Main.tile[num271, num272 - 1] == null)
                            {
                                var tile9 = Main.tile;
                                var num273 = num271;
                                var num274 = num272 - 1;
                                var tile10 = new Tile();
                                tile9[num273, num274] = tile10;
                            }

                            if (Main.tile[num271, num272 + 1] == null)
                            {
                                var tile11 = Main.tile;
                                var num275 = num271;
                                var num276 = num272 + 1;
                                var tile12 = new Tile();
                                tile11[num275, num276] = tile12;
                            }

                            if (Main.tile[num271, num272 + 2] == null)
                            {
                                var tile13 = Main.tile;
                                var num277 = num271;
                                var num278 = num272 + 2;
                                var tile14 = new Tile();
                                tile13[num277, num278] = tile14;
                            }

                            if (Main.tile[num271, num272 - 1].liquid > 128)
                            {
                                if (Main.tile[num271, num272 + 1].active())
                                {
                                    this.ai[0] = -1f;
                                }
                                else if (Main.tile[num271, num272 + 2].active())
                                {
                                    this.ai[0] = -1f;
                                }
                            }
                            else
                            {
                                this.ai[0] = 1f;
                            }

                            if ((double) base.velocity.Y > 1.2 || (double) base.velocity.Y < -1.2)
                            {
                                base.velocity.Y *= 0.99f;
                            }
                        }
                    }
                    else
                    {
                        rotation += base.velocity.X * 0.1f;
                        if (base.velocity.Y == 0f)
                        {
                            base.velocity.X *= 0.98f;
                            if ((double) base.velocity.X > -0.01 && (double) base.velocity.X < 0.01)
                            {
                                base.velocity.X = 0f;
                            }
                        }

                        base.velocity.Y += 0.2f;
                        if (base.velocity.Y > 10f)
                        {
                            base.velocity.Y = 10f;
                        }

                        this.ai[0] = 1f;
                    }
                }
            }
            else if (aiStyle == 19)
            {
                TargetClosest(true);
                var num279 = 12f;
                var vector30 = new Vector2(base.position.X + (float) base.width * 0.5f,
                    base.position.Y + (float) base.height * 0.5f);
                var num280 = Main.player[target].position.X + (float) (Main.player[target].width / 2) - vector30.X;
                var num281 = Main.player[target].position.Y - vector30.Y;
                var num282 = (float) Math.Sqrt((double) (num280 * num280 + num281 * num281));
                num282 = num279 / num282;
                num280 *= num282;
                num281 *= num282;
                var flag15 = false;
                if (directionY < 0)
                {
                    rotation = (float) (Math.Atan2((double) num281, (double) num280) + 1.57);
                    flag15 = ((!((double) rotation < -1.2) && !((double) rotation > 1.2)) ? true : false);
                    if ((double) rotation < -0.8)
                    {
                        rotation = -0.8f;
                    }
                    else if ((double) rotation > 0.8)
                    {
                        rotation = 0.8f;
                    }

                    if (base.velocity.X != 0f)
                    {
                        base.velocity.X *= 0.9f;
                        if ((double) base.velocity.X > -0.1 || (double) base.velocity.X < 0.1)
                        {
                            netUpdate = true;
                            base.velocity.X = 0f;
                        }
                    }
                }

                if (this.ai[0] > 0f)
                {
                    if (this.ai[0] == 200f)
                    {
                        Main.PlaySound(SoundID.Item5, base.position);
                    }

                    this.ai[0] -= 1f;
                }

                if (Main.netMode != 1 && flag15 && this.ai[0] == 0f && Collision.CanHit(base.position, base.width,
                        base.height, Main.player[target].position, Main.player[target].width,
                        Main.player[target].height))
                {
                    this.ai[0] = 200f;
                    var num283 = 10;
                    var num284 = 31;
                    var num285 = Projectile.NewProjectile(vector30.X, vector30.Y, num280, num281, num284, num283, 0f,
                        Main.myPlayer, 0f, 0f);
                    Main.projectile[num285].ai[0] = 2f;
                    Main.projectile[num285].timeLeft = 300;
                    Main.projectile[num285].friendly = false;
                    NetMessage.SendData(27, -1, -1, null, num285, 0f, 0f, 0f, 0, 0, 0);
                    netUpdate = true;
                }

                try
                {
                    var num286 = (int) base.position.X / 16;
                    var num287 = (int) (base.position.X + (float) (base.width / 2)) / 16;
                    var num288 = (int) (base.position.X + (float) base.width) / 16;
                    var num289 = (int) (base.position.Y + (float) base.height) / 16;
                    var flag16 = false;
                    if (Main.tile[num286, num289] == null)
                    {
                        var tile15 = Main.tile;
                        var num290 = num286;
                        var num291 = num289;
                        var tile16 = new Tile();
                        tile15[num290, num291] = tile16;
                    }

                    if (Main.tile[num287, num289] == null)
                    {
                        var tile17 = Main.tile;
                        var num292 = num286;
                        var num293 = num289;
                        var tile18 = new Tile();
                        tile17[num292, num293] = tile18;
                    }

                    if (Main.tile[num288, num289] == null)
                    {
                        var tile19 = Main.tile;
                        var num294 = num286;
                        var num295 = num289;
                        var tile20 = new Tile();
                        tile19[num294, num295] = tile20;
                    }

                    if ((Main.tile[num286, num289].nactive() && Main.tileSolid[Main.tile[num286, num289].type]) ||
                        (Main.tile[num287, num289].nactive() && Main.tileSolid[Main.tile[num287, num289].type]) ||
                        (Main.tile[num288, num289].nactive() && Main.tileSolid[Main.tile[num288, num289].type]))
                    {
                        flag16 = true;
                    }

                    if (flag16)
                    {
                        noGravity = true;
                        noTileCollide = true;
                        base.velocity.Y = -0.2f;
                    }
                    else
                    {
                        noGravity = false;
                        noTileCollide = false;
                        if (Main.rand.Next(2) == 0)
                        {
                            var position39 = new Vector2(base.position.X - 4f,
                                base.position.Y + (float) base.height - 8f);
                            var width36 = base.width + 8;
                            var speedY16 = base.velocity.Y / 2f;
                            newColor = default(Color);
                            var num296 = Dust.NewDust(position39, width36, 24, 32, 0f, speedY16, 0, newColor, 1f);
                            Main.dust[num296].velocity.X *= 0.4f;
                            Main.dust[num296].velocity.Y *= -1f;
                            if (Main.rand.Next(2) == 0)
                            {
                                Main.dust[num296].noGravity = true;
                                Main.dust[num296].scale += 0.2f;
                            }
                        }
                    }
                }
                catch
                {
                }
            }
            else if (aiStyle == 20)
            {
                if (this.ai[0] == 0f)
                {
                    if (Main.netMode != 1)
                    {
                        TargetClosest(true);
                        base.direction *= -1;
                        directionY *= -1;
                        base.position.Y += (float) (base.height / 2 + 8);
                        this.ai[1] = base.position.X + (float) (base.width / 2);
                        this.ai[2] = base.position.Y + (float) (base.height / 2);
                        if (base.direction == 0)
                        {
                            base.direction = 1;
                        }

                        if (directionY == 0)
                        {
                            directionY = 1;
                        }

                        this.ai[3] = 1f + (float) Main.rand.Next(15) * 0.1f;
                        base.velocity.Y = (float) (directionY * 6) * this.ai[3];
                        this.ai[0] += 1f;
                        netUpdate = true;
                    }
                    else
                    {
                        this.ai[1] = base.position.X + (float) (base.width / 2);
                        this.ai[2] = base.position.Y + (float) (base.height / 2);
                    }
                }
                else
                {
                    var num297 = 6f * this.ai[3];
                    var num298 = 0.2f * this.ai[3];
                    var num299 = num297 / num298 / 2f;
                    if (this.ai[0] >= 1f && this.ai[0] < (float) (int) num299)
                    {
                        base.velocity.Y = (float) directionY * num297;
                        this.ai[0] += 1f;
                    }
                    else if (this.ai[0] >= (float) (int) num299)
                    {
                        base.velocity.Y = 0f;
                        directionY *= -1;
                        base.velocity.X = num297 * (float) base.direction;
                        this.ai[0] = -1f;
                    }
                    else
                    {
                        if (directionY > 0)
                        {
                            if (base.velocity.Y >= num297)
                            {
                                directionY *= -1;
                                base.velocity.Y = num297;
                            }
                        }
                        else if (directionY < 0 && base.velocity.Y <= 0f - num297)
                        {
                            directionY *= -1;
                            base.velocity.Y = 0f - num297;
                        }

                        if (base.direction > 0)
                        {
                            if (base.velocity.X >= num297)
                            {
                                base.direction *= -1;
                                base.velocity.X = num297;
                            }
                        }
                        else if (base.direction < 0 && base.velocity.X <= 0f - num297)
                        {
                            base.direction *= -1;
                            base.velocity.X = 0f - num297;
                        }

                        base.velocity.X += num298 * (float) base.direction;
                        base.velocity.Y += num298 * (float) directionY;
                    }
                }
            }
            else if (aiStyle == 21)
            {
                if (this.ai[0] == 0f)
                {
                    TargetClosest(true);
                    directionY = 1;
                    this.ai[0] = 1f;
                }

                var num300 = 6;
                if (this.ai[1] == 0f)
                {
                    rotation += (float) (base.direction * directionY) * 0.13f;
                    if (collideY)
                    {
                        this.ai[0] = 2f;
                    }

                    if (!collideY && this.ai[0] == 2f)
                    {
                        base.direction = -base.direction;
                        this.ai[1] = 1f;
                        this.ai[0] = 1f;
                    }

                    if (collideX)
                    {
                        directionY = -directionY;
                        this.ai[1] = 1f;
                    }
                }
                else
                {
                    rotation -= (float) (base.direction * directionY) * 0.13f;
                    if (collideX)
                    {
                        this.ai[0] = 2f;
                    }

                    if (!collideX && this.ai[0] == 2f)
                    {
                        directionY = -directionY;
                        this.ai[1] = 0f;
                        this.ai[0] = 1f;
                    }

                    if (collideY)
                    {
                        base.direction = -base.direction;
                        this.ai[1] = 0f;
                    }
                }

                base.velocity.X = (float) (num300 * base.direction);
                base.velocity.Y = (float) (num300 * directionY);
                var num301 = (float) (270 - Main.mouseTextColor) / 400f;
                Lighting.AddLight((int) (base.position.X + (float) (base.width / 2)) / 16,
                    (int) (base.position.Y + (float) (base.height / 2)) / 16, 0.9f, 0.3f + num301, 0.2f);
            }
            else if (aiStyle == 22)
            {
                var flag17 = false;
                var flag18 = type == 330 && !Main.pumpkinMoon;
                if (type == 253 && !Main.eclipse)
                {
                    flag18 = true;
                }

                if (type == 490 && Main.dayTime)
                {
                    flag18 = true;
                }

                if (justHit)
                {
                    this.ai[2] = 0f;
                }

                if (!flag18)
                {
                    if (this.ai[2] >= 0f)
                    {
                        var num302 = 16;
                        var flag19 = false;
                        var flag20 = false;
                        if (base.position.X > this.ai[0] - (float) num302 &&
                            base.position.X < this.ai[0] + (float) num302)
                        {
                            flag19 = true;
                        }
                        else if ((base.velocity.X < 0f && base.direction > 0) ||
                                 (base.velocity.X > 0f && base.direction < 0))
                        {
                            flag19 = true;
                        }

                        num302 += 24;
                        if (base.position.Y > this.ai[1] - (float) num302 &&
                            base.position.Y < this.ai[1] + (float) num302)
                        {
                            flag20 = true;
                        }

                        if (flag19 && flag20)
                        {
                            this.ai[2] += 1f;
                            if (this.ai[2] >= 30f && num302 == 16)
                            {
                                flag17 = true;
                            }

                            if (this.ai[2] >= 60f)
                            {
                                this.ai[2] = -200f;
                                base.direction *= -1;
                                base.velocity.X *= -1f;
                                collideX = false;
                            }
                        }
                        else
                        {
                            this.ai[0] = base.position.X;
                            this.ai[1] = base.position.Y;
                            this.ai[2] = 0f;
                        }

                        TargetClosest(true);
                    }
                    else if (type == 253)
                    {
                        TargetClosest(true);
                        this.ai[2] += 2f;
                    }
                    else
                    {
                        if (type == 330)
                        {
                            this.ai[2] += 0.1f;
                        }
                        else
                        {
                            this.ai[2] += 1f;
                        }

                        if (Main.player[target].position.X + (float) (Main.player[target].width / 2) >
                            base.position.X + (float) (base.width / 2))
                        {
                            base.direction = -1;
                        }
                        else
                        {
                            base.direction = 1;
                        }
                    }
                }

                var num303 = (int) ((base.position.X + (float) (base.width / 2)) / 16f) + base.direction * 2;
                var num304 = (int) ((base.position.Y + (float) base.height) / 16f);
                var flag21 = true;
                var flag22 = false;
                var num305 = 3;
                if (type == 122)
                {
                    if (justHit)
                    {
                        this.ai[3] = 0f;
                        localAI[1] = 0f;
                    }

                    var num306 = 7f;
                    var vector31 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num307 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                   vector31.X;
                    var num308 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                   vector31.Y;
                    var num309 = (float) Math.Sqrt((double) (num307 * num307 + num308 * num308));
                    num309 = num306 / num309;
                    num307 *= num309;
                    num308 *= num309;
                    if (Main.netMode != 1 && this.ai[3] == 32f && !Main.player[target].npcTypeNoAggro[type])
                    {
                        var num310 = 25;
                        var num311 = 84;
                        Projectile.NewProjectile(vector31.X, vector31.Y, num307, num308, num311, num310, 0f,
                            Main.myPlayer, 0f, 0f);
                    }

                    num305 = 8;
                    if (this.ai[3] > 0f)
                    {
                        this.ai[3] += 1f;
                        if (this.ai[3] >= 64f)
                        {
                            this.ai[3] = 0f;
                        }
                    }

                    if (Main.netMode != 1 && this.ai[3] == 0f)
                    {
                        localAI[1] += 1f;
                        if (localAI[1] > 120f &&
                            Collision.CanHit(base.position, base.width, base.height, Main.player[target].position,
                                Main.player[target].width, Main.player[target].height) &&
                            !Main.player[target].npcTypeNoAggro[type])
                        {
                            localAI[1] = 0f;
                            this.ai[3] = 1f;
                            netUpdate = true;
                        }
                    }
                }
                else if (type == 75)
                {
                    num305 = 4;
                    if (Main.rand.Next(6) == 0)
                    {
                        var num312 = Dust.NewDust(base.position, base.width, base.height, 55, 0f, 0f, 200, this.color,
                            1f);
                        Main.dust[num312].velocity *= 0.3f;
                    }

                    if (Main.rand.Next(40) == 0)
                    {
                        Main.PlaySound(27, (int) base.position.X, (int) base.position.Y, 1, 1f, 0f);
                    }
                }
                else if (type == 169)
                {
                    Lighting.AddLight((int) ((base.position.X + (float) (base.width / 2)) / 16f),
                        (int) ((base.position.Y + (float) (base.height / 2)) / 16f), 0f, 0.6f, 0.75f);
                    alpha = 30;
                    if (Main.rand.Next(3) == 0)
                    {
                        var position40 = base.position;
                        var width37 = base.width;
                        var height35 = base.height;
                        newColor = default(Color);
                        var num313 = Dust.NewDust(position40, width37, height35, 92, 0f, 0f, 200, newColor, 1f);
                        Main.dust[num313].velocity *= 0.3f;
                        Main.dust[num313].noGravity = true;
                    }

                    if (justHit)
                    {
                        this.ai[3] = 0f;
                        localAI[1] = 0f;
                    }

                    var num314 = 5f;
                    var vector32 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num315 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                   vector32.X;
                    var num316 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                   vector32.Y;
                    var num317 = (float) Math.Sqrt((double) (num315 * num315 + num316 * num316));
                    num317 = num314 / num317;
                    num315 *= num317;
                    num316 *= num317;
                    if (num315 > 0f)
                    {
                        base.direction = 1;
                    }
                    else
                    {
                        base.direction = -1;
                    }

                    spriteDirection = base.direction;
                    if (base.direction < 0)
                    {
                        rotation = (float) Math.Atan2((double) (0f - num316), (double) (0f - num315));
                    }
                    else
                    {
                        rotation = (float) Math.Atan2((double) num316, (double) num315);
                    }

                    if (Main.netMode != 1 && this.ai[3] == 16f)
                    {
                        var num318 = 45;
                        var num319 = 128;
                        Projectile.NewProjectile(vector32.X, vector32.Y, num315, num316, num319, num318, 0f,
                            Main.myPlayer, 0f, 0f);
                    }

                    num305 = 10;
                    if (this.ai[3] > 0f)
                    {
                        this.ai[3] += 1f;
                        if (this.ai[3] >= 64f)
                        {
                            this.ai[3] = 0f;
                        }
                    }

                    if (Main.netMode != 1 && this.ai[3] == 0f)
                    {
                        localAI[1] += 1f;
                        if (localAI[1] > 120f && Collision.CanHit(base.position, base.width, base.height,
                                Main.player[target].position, Main.player[target].width, Main.player[target].height))
                        {
                            localAI[1] = 0f;
                            this.ai[3] = 1f;
                            netUpdate = true;
                        }
                    }
                }
                else if (type == 268)
                {
                    rotation = base.velocity.X * 0.1f;
                    num305 = ((!(Main.player[target].Center.Y < base.Center.Y)) ? 6 : 12);
                    if (Main.netMode != 1 && !confused)
                    {
                        this.ai[3] += 1f;
                        if (justHit)
                        {
                            this.ai[3] = -45f;
                            localAI[1] = 0f;
                        }

                        if (Main.netMode != 1 && this.ai[3] >= (float) (60 + Main.rand.Next(60)))
                        {
                            this.ai[3] = 0f;
                            if (Collision.CanHit(base.position, base.width, base.height, Main.player[target].position,
                                Main.player[target].width, Main.player[target].head))
                            {
                                var num320 = 10f;
                                var vector33 = new Vector2(base.position.X + (float) base.width * 0.5f - 4f,
                                    base.position.Y + (float) base.height * 0.7f);
                                var num321 = Main.player[target].position.X +
                                               (float) (Main.player[target].width / 2) - vector33.X;
                                var num322 = Math.Abs(num321) * 0.1f;
                                var num323 = Main.player[target].position.Y +
                                               (float) (Main.player[target].height / 2) - vector33.Y - num322;
                                num321 += (float) Main.rand.Next(-10, 11);
                                num323 += (float) Main.rand.Next(-30, 21);
                                var num324 = (float) Math.Sqrt((double) (num321 * num321 + num323 * num323));
                                num324 = num320 / num324;
                                num321 *= num324;
                                num323 *= num324;
                                var num325 = 40;
                                var num326 = 288;
                                Projectile.NewProjectile(vector33.X, vector33.Y, num321, num323, num326, num325, 0f,
                                    Main.myPlayer, 0f, 0f);
                            }
                        }
                    }
                }

                if (type == 490)
                {
                    num305 = 4;
                    if (target >= 0)
                    {
                        var num327 = (Main.player[target].Center - base.Center).Length();
                        num327 /= 70f;
                        if (num327 > 8f)
                        {
                            num327 = 8f;
                        }

                        num305 += (int) num327;
                    }
                }

                for (var num328 = num304; num328 < num304 + num305; num328++)
                {
                    if (Main.tile[num303, num328] == null)
                    {
                        var tile21 = Main.tile;
                        var num329 = num303;
                        var num330 = num328;
                        var tile22 = new Tile();
                        tile21[num329, num330] = tile22;
                    }

                    if ((Main.tile[num303, num328].nactive() && Main.tileSolid[Main.tile[num303, num328].type]) ||
                        Main.tile[num303, num328].liquid > 0)
                    {
                        if (num328 <= num304 + 1)
                        {
                            flag22 = true;
                        }

                        flag21 = false;
                        break;
                    }
                }

                if (Main.player[target].npcTypeNoAggro[type])
                {
                    var flag23 = false;
                    for (var num331 = num304; num331 < num304 + num305 - 2; num331++)
                    {
                        if (Main.tile[num303, num331] == null)
                        {
                            var tile23 = Main.tile;
                            var num332 = num303;
                            var num333 = num331;
                            var tile24 = new Tile();
                            tile23[num332, num333] = tile24;
                        }

                        if ((Main.tile[num303, num331].nactive() && Main.tileSolid[Main.tile[num303, num331].type]) ||
                            Main.tile[num303, num331].liquid > 0)
                        {
                            flag23 = true;
                            break;
                        }
                    }

                    directionY = (!flag23).ToDirectionInt();
                }

                if (type == 169 || type == 268)
                {
                    for (var num334 = num304 - 3; num334 < num304; num334++)
                    {
                        if (Main.tile[num303, num334] == null)
                        {
                            var tile25 = Main.tile;
                            var num335 = num303;
                            var num336 = num334;
                            var tile26 = new Tile();
                            tile25[num335, num336] = tile26;
                        }

                        if ((Main.tile[num303, num334].nactive() && Main.tileSolid[Main.tile[num303, num334].type]) ||
                            Main.tile[num303, num334].liquid > 0)
                        {
                            flag22 = false;
                            flag17 = true;
                            break;
                        }
                    }
                }

                if (flag17)
                {
                    flag22 = false;
                    flag21 = true;
                    if (type == 268)
                    {
                        base.velocity.Y += 2f;
                    }
                }

                if (flag21)
                {
                    if (type == 75 || type == 169)
                    {
                        base.velocity.Y += 0.2f;
                        if (base.velocity.Y > 2f)
                        {
                            base.velocity.Y = 2f;
                        }
                    }
                    else if (type == 490)
                    {
                        base.velocity.Y += 0.03f;
                        if ((double) base.velocity.Y > 0.75)
                        {
                            base.velocity.Y = 0.75f;
                        }
                    }
                    else
                    {
                        base.velocity.Y += 0.1f;
                        if (base.velocity.Y > 3f)
                        {
                            base.velocity.Y = 3f;
                        }
                    }
                }
                else
                {
                    if (type == 75 || type == 169)
                    {
                        if ((directionY < 0 && base.velocity.Y > 0f) || flag22)
                        {
                            base.velocity.Y -= 0.2f;
                        }
                    }
                    else if (type == 490)
                    {
                        if ((directionY < 0 && base.velocity.Y > 0f) || flag22)
                        {
                            base.velocity.Y -= 0.075f;
                        }

                        if (base.velocity.Y < -0.75f)
                        {
                            base.velocity.Y = -0.75f;
                        }
                    }
                    else if (directionY < 0 && base.velocity.Y > 0f)
                    {
                        base.velocity.Y -= 0.1f;
                    }

                    if (base.velocity.Y < -4f)
                    {
                        base.velocity.Y = -4f;
                    }
                }

                if (type == 75 && wet)
                {
                    base.velocity.Y -= 0.2f;
                    if (base.velocity.Y < -2f)
                    {
                        base.velocity.Y = -2f;
                    }
                }

                if (collideX)
                {
                    base.velocity.X = oldVelocity.X * -0.4f;
                    if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 1f)
                    {
                        base.velocity.X = 1f;
                    }

                    if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -1f)
                    {
                        base.velocity.X = -1f;
                    }
                }

                if (collideY)
                {
                    base.velocity.Y = oldVelocity.Y * -0.25f;
                    if (base.velocity.Y > 0f && base.velocity.Y < 1f)
                    {
                        base.velocity.Y = 1f;
                    }

                    if (base.velocity.Y < 0f && base.velocity.Y > -1f)
                    {
                        base.velocity.Y = -1f;
                    }
                }

                var num337 = 2f;
                if (type == 75)
                {
                    num337 = 3f;
                }

                if (type == 253)
                {
                    num337 = 4f;
                }

                if (type == 490)
                {
                    num337 = 1.5f;
                }

                if (type == 330)
                {
                    alpha = 0;
                    num337 = 4f;
                    if (!flag18)
                    {
                        TargetClosest(true);
                    }
                    else if (timeLeft > 10)
                    {
                        timeLeft = 10;
                    }

                    if (base.direction < 0 && base.velocity.X > 0f)
                    {
                        base.velocity.X *= 0.9f;
                    }

                    if (base.direction > 0 && base.velocity.X < 0f)
                    {
                        base.velocity.X *= 0.9f;
                    }
                }

                if (base.direction == -1 && base.velocity.X > 0f - num337)
                {
                    base.velocity.X -= 0.1f;
                    if (base.velocity.X > num337)
                    {
                        base.velocity.X -= 0.1f;
                    }
                    else if (base.velocity.X > 0f)
                    {
                        base.velocity.X += 0.05f;
                    }

                    if (base.velocity.X < 0f - num337)
                    {
                        base.velocity.X = 0f - num337;
                    }
                }
                else if (base.direction == 1 && base.velocity.X < num337)
                {
                    base.velocity.X += 0.1f;
                    if (base.velocity.X < 0f - num337)
                    {
                        base.velocity.X += 0.1f;
                    }
                    else if (base.velocity.X < 0f)
                    {
                        base.velocity.X -= 0.05f;
                    }

                    if (base.velocity.X > num337)
                    {
                        base.velocity.X = num337;
                    }
                }

                num337 = ((type != 490) ? 1.5f : 1f);
                if (directionY == -1 && base.velocity.Y > 0f - num337)
                {
                    base.velocity.Y -= 0.04f;
                    if (base.velocity.Y > num337)
                    {
                        base.velocity.Y -= 0.05f;
                    }
                    else if (base.velocity.Y > 0f)
                    {
                        base.velocity.Y += 0.03f;
                    }

                    if (base.velocity.Y < 0f - num337)
                    {
                        base.velocity.Y = 0f - num337;
                    }
                }
                else if (directionY == 1 && base.velocity.Y < num337)
                {
                    base.velocity.Y += 0.04f;
                    if (base.velocity.Y < 0f - num337)
                    {
                        base.velocity.Y += 0.05f;
                    }
                    else if (base.velocity.Y < 0f)
                    {
                        base.velocity.Y -= 0.03f;
                    }

                    if (base.velocity.Y > num337)
                    {
                        base.velocity.Y = num337;
                    }
                }

                if (type == 122)
                {
                    Lighting.AddLight((int) base.position.X / 16, (int) base.position.Y / 16, 0.4f, 0f, 0.25f);
                }
            }
            else if (aiStyle == 23)
            {
                noGravity = true;
                noTileCollide = true;
                if (type == 83)
                {
                    Lighting.AddLight((int) ((base.position.X + (float) (base.width / 2)) / 16f),
                        (int) ((base.position.Y + (float) (base.height / 2)) / 16f), 0.2f, 0.05f, 0.3f);
                }
                else if (type == 179)
                {
                    Lighting.AddLight((int) ((base.position.X + (float) (base.width / 2)) / 16f),
                        (int) ((base.position.Y + (float) (base.height / 2)) / 16f), 0.3f, 0.15f, 0.05f);
                }
                else
                {
                    Lighting.AddLight((int) ((base.position.X + (float) (base.width / 2)) / 16f),
                        (int) ((base.position.Y + (float) (base.height / 2)) / 16f), 0.05f, 0.2f, 0.3f);
                }

                if (target < 0 || target == 255 || Main.player[target].dead)
                {
                    TargetClosest(true);
                }

                if (this.ai[0] == 0f)
                {
                    var num338 = 9f;
                    var vector34 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num339 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                   vector34.X;
                    var num340 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                   vector34.Y;
                    var num341 = (float) Math.Sqrt((double) (num339 * num339 + num340 * num340));
                    num341 = num338 / num341;
                    num339 *= num341;
                    num340 *= num341;
                    base.velocity.X = num339;
                    base.velocity.Y = num340;
                    rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) + 0.785f;
                    this.ai[0] = 1f;
                    this.ai[1] = 0f;
                    netUpdate = true;
                }
                else if (this.ai[0] == 1f)
                {
                    if (justHit)
                    {
                        this.ai[0] = 2f;
                        this.ai[1] = 0f;
                    }

                    base.velocity *= 0.99f;
                    this.ai[1] += 1f;
                    if (this.ai[1] >= 100f)
                    {
                        netUpdate = true;
                        this.ai[0] = 2f;
                        this.ai[1] = 0f;
                        base.velocity.X = 0f;
                        base.velocity.Y = 0f;
                    }
                }
                else
                {
                    if (justHit)
                    {
                        this.ai[0] = 2f;
                        this.ai[1] = 0f;
                    }

                    base.velocity *= 0.96f;
                    this.ai[1] += 1f;
                    var num342 = this.ai[1] / 120f;
                    num342 = 0.1f + num342 * 0.4f;
                    rotation += num342 * (float) base.direction;
                    if (this.ai[1] >= 120f)
                    {
                        netUpdate = true;
                        this.ai[0] = 0f;
                        this.ai[1] = 0f;
                    }
                }
            }
            else if (aiStyle == 24)
            {
                noGravity = true;
                if (this.ai[0] == 0f)
                {
                    noGravity = false;
                    TargetClosest(true);
                    if (Main.netMode != 1)
                    {
                        if (base.velocity.X != 0f || base.velocity.Y < 0f || (double) base.velocity.Y > 0.3)
                        {
                            this.ai[0] = 1f;
                            netUpdate = true;
                            base.direction = -base.direction;
                        }
                        else
                        {
                            var rectangle2 = new Rectangle((int) Main.player[target].position.X,
                                (int) Main.player[target].position.Y, Main.player[target].width,
                                Main.player[target].height);
                            if (new Rectangle((int) base.position.X - 100, (int) base.position.Y - 100,
                                    base.width + 200, base.height + 200).Intersects(rectangle2) || life < lifeMax)
                            {
                                this.ai[0] = 1f;
                                base.velocity.Y -= 6f;
                                netUpdate = true;
                                base.direction = -base.direction;
                            }
                        }
                    }
                }
                else if (!Main.player[target].dead)
                {
                    if (collideX)
                    {
                        base.direction *= -1;
                        base.velocity.X = oldVelocity.X * -0.5f;
                        if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 2f)
                        {
                            base.velocity.X = 2f;
                        }

                        if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -2f)
                        {
                            base.velocity.X = -2f;
                        }
                    }

                    if (collideY)
                    {
                        base.velocity.Y = oldVelocity.Y * -0.5f;
                        if (base.velocity.Y > 0f && base.velocity.Y < 1f)
                        {
                            base.velocity.Y = 1f;
                        }

                        if (base.velocity.Y < 0f && base.velocity.Y > -1f)
                        {
                            base.velocity.Y = -1f;
                        }
                    }

                    if (base.direction == -1 && base.velocity.X > -3f)
                    {
                        base.velocity.X -= 0.1f;
                        if (base.velocity.X > 3f)
                        {
                            base.velocity.X -= 0.1f;
                        }
                        else if (base.velocity.X > 0f)
                        {
                            base.velocity.X -= 0.05f;
                        }

                        if (base.velocity.X < -3f)
                        {
                            base.velocity.X = -3f;
                        }
                    }
                    else if (base.direction == 1 && base.velocity.X < 3f)
                    {
                        base.velocity.X += 0.1f;
                        if (base.velocity.X < -3f)
                        {
                            base.velocity.X += 0.1f;
                        }
                        else if (base.velocity.X < 0f)
                        {
                            base.velocity.X += 0.05f;
                        }

                        if (base.velocity.X > 3f)
                        {
                            base.velocity.X = 3f;
                        }
                    }

                    var num343 = (int) ((base.position.X + (float) (base.width / 2)) / 16f) + base.direction;
                    var num344 = (int) ((base.position.Y + (float) base.height) / 16f);
                    var flag24 = true;
                    var num345 = 15;
                    var flag25 = false;
                    for (var num346 = num344; num346 < num344 + num345; num346++)
                    {
                        if (Main.tile[num343, num346] == null)
                        {
                            var tile27 = Main.tile;
                            var num347 = num343;
                            var num348 = num346;
                            var tile28 = new Tile();
                            tile27[num347, num348] = tile28;
                        }

                        if ((Main.tile[num343, num346].nactive() && Main.tileSolid[Main.tile[num343, num346].type]) ||
                            Main.tile[num343, num346].liquid > 0)
                        {
                            if (num346 < num344 + 5)
                            {
                                flag25 = true;
                            }

                            flag24 = false;
                            break;
                        }
                    }

                    if (flag24)
                    {
                        base.velocity.Y += 0.05f;
                    }
                    else
                    {
                        base.velocity.Y -= 0.1f;
                    }

                    if (flag25)
                    {
                        base.velocity.Y -= 0.2f;
                    }

                    if (base.velocity.Y > 2f)
                    {
                        base.velocity.Y = 2f;
                    }

                    if (base.velocity.Y < -4f)
                    {
                        base.velocity.Y = -4f;
                    }
                }

                if (wet)
                {
                    this.ai[1] = 0f;
                    if (base.velocity.Y > 0f)
                    {
                        base.velocity.Y *= 0.95f;
                    }

                    base.velocity.Y -= 0.5f;
                    if (base.velocity.Y < -4f)
                    {
                        base.velocity.Y = -4f;
                    }

                    TargetClosest(true);
                }
            }
            else if (aiStyle == 25)
            {
                var flag26 = type == 341 && !Main.snowMoon;
                if (this.ai[3] == 0f)
                {
                    base.position.X += 8f;
                    if (base.position.Y / 16f > (float) (Main.maxTilesY - 200))
                    {
                        this.ai[3] = 3f;
                    }
                    else if ((double) (base.position.Y / 16f) > Main.worldSurface)
                    {
                        TargetClosest(true);
                        if (Main.player[target].ZoneSnow)
                        {
                            this.ai[3] = 4f;
                        }
                        else
                        {
                            this.ai[3] = 2f;
                        }
                    }
                    else
                    {
                        this.ai[3] = 1f;
                    }
                }

                if (type == 341)
                {
                    this.ai[3] = 1f;
                }

                if (this.ai[0] == 0f)
                {
                    if (!flag26)
                    {
                        TargetClosest(true);
                    }

                    if (Main.netMode != 1)
                    {
                        if (base.velocity.X != 0f || base.velocity.Y < 0f || (double) base.velocity.Y > 0.3)
                        {
                            this.ai[0] = 1f;
                            netUpdate = true;
                        }
                        else
                        {
                            var rectangle3 = new Rectangle((int) Main.player[target].position.X,
                                (int) Main.player[target].position.Y, Main.player[target].width,
                                Main.player[target].height);
                            if (new Rectangle((int) base.position.X - 100, (int) base.position.Y - 100,
                                    base.width + 200, base.height + 200).Intersects(rectangle3) || life < lifeMax)
                            {
                                this.ai[0] = 1f;
                                netUpdate = true;
                            }
                        }
                    }
                }
                else if (base.velocity.Y == 0f)
                {
                    this.ai[2] += 1f;
                    var num349 = 20;
                    if (this.ai[1] == 0f)
                    {
                        num349 = 12;
                    }

                    if (this.ai[2] < (float) num349)
                    {
                        base.velocity.X *= 0.9f;
                    }
                    else
                    {
                        this.ai[2] = 0f;
                        if (!flag26)
                        {
                            TargetClosest(true);
                        }

                        if (base.direction == 0)
                        {
                            base.direction = -1;
                        }

                        spriteDirection = base.direction;
                        this.ai[1] += 1f;
                        if (this.ai[1] == 2f)
                        {
                            base.velocity.X = (float) base.direction * 2.5f;
                            base.velocity.Y = -8f;
                            this.ai[1] = 0f;
                        }
                        else
                        {
                            base.velocity.X = (float) base.direction * 3.5f;
                            base.velocity.Y = -4f;
                        }

                        netUpdate = true;
                    }
                }
                else if (base.direction == 1 && base.velocity.X < 1f)
                {
                    base.velocity.X += 0.1f;
                }
                else if (base.direction == -1 && base.velocity.X > -1f)
                {
                    base.velocity.X -= 0.1f;
                }
            }
            else if (aiStyle == 26)
            {
                AI_026_Unicorns();
            }
            else if (aiStyle == 27)
            {
                if (base.position.X < 160f || base.position.X > (float) ((Main.maxTilesX - 10) * 16))
                {
                    active = false;
                }

                if (localAI[0] == 0f)
                {
                    localAI[0] = 1f;
                    Main.wofB = -1;
                    Main.wofT = -1;
                }

                this.ai[1] += 1f;
                if (this.ai[2] == 0f)
                {
                    if ((double) life < (double) lifeMax * 0.5)
                    {
                        this.ai[1] += 1f;
                    }

                    if ((double) life < (double) lifeMax * 0.2)
                    {
                        this.ai[1] += 1f;
                    }

                    if (this.ai[1] > 2700f)
                    {
                        this.ai[2] = 1f;
                    }
                }

                if (this.ai[2] > 0f && this.ai[1] > 60f)
                {
                    var num350 = 3;
                    if ((double) life < (double) lifeMax * 0.3)
                    {
                        num350++;
                    }

                    this.ai[2] += 1f;
                    this.ai[1] = 0f;
                    if (this.ai[2] > (float) num350)
                    {
                        this.ai[2] = 0f;
                    }

                    if (Main.netMode != 1)
                    {
                        var num351 = NewNPC((int) (base.position.X + (float) (base.width / 2)),
                            (int) (base.position.Y + (float) (base.height / 2) + 20f), 117, 1, 0f, 0f, 0f, 0f, 255);
                        Main.npc[num351].velocity.X = (float) (base.direction * 8);
                    }
                }

                localAI[3] += 1f;
                if (localAI[3] >= (float) (600 + Main.rand.Next(1000)))
                {
                    localAI[3] = (float) (-Main.rand.Next(200));
                    Main.PlaySound(4, (int) base.position.X, (int) base.position.Y, 10, 1f, 0f);
                }

                Main.wof = whoAmI;
                var num352 = (int) (base.position.X / 16f);
                var num353 = (int) ((base.position.X + (float) base.width) / 16f);
                var num354 = (int) ((base.position.Y + (float) (base.height / 2)) / 16f);
                var num355 = 0;
                var num356 = num354 + 7;
                while (num355 < 15 && num356 > Main.maxTilesY - 200)
                {
                    num356++;
                    for (var num357 = num352; num357 <= num353; num357++)
                    {
                        try
                        {
                            if (WorldGen.SolidTile(num357, num356) || Main.tile[num357, num356].liquid > 0)
                            {
                                num355++;
                            }
                        }
                        catch
                        {
                            num355 += 15;
                        }
                    }
                }

                num356 += 4;
                if (Main.wofB == -1)
                {
                    Main.wofB = num356 * 16;
                }
                else if (Main.wofB > num356 * 16)
                {
                    Main.wofB--;
                    if (Main.wofB < num356 * 16)
                    {
                        Main.wofB = num356 * 16;
                    }
                }
                else if (Main.wofB < num356 * 16)
                {
                    Main.wofB++;
                    if (Main.wofB > num356 * 16)
                    {
                        Main.wofB = num356 * 16;
                    }
                }

                num355 = 0;
                num356 = num354 - 7;
                while (num355 < 15 && num356 < Main.maxTilesY - 10)
                {
                    num356--;
                    for (var num358 = num352; num358 <= num353; num358++)
                    {
                        try
                        {
                            if (WorldGen.SolidTile(num358, num356) || Main.tile[num358, num356].liquid > 0)
                            {
                                num355++;
                            }
                        }
                        catch
                        {
                            num355 += 15;
                        }
                    }
                }

                num356 -= 4;
                if (Main.wofT == -1)
                {
                    Main.wofT = num356 * 16;
                }
                else if (Main.wofT > num356 * 16)
                {
                    Main.wofT--;
                    if (Main.wofT < num356 * 16)
                    {
                        Main.wofT = num356 * 16;
                    }
                }
                else if (Main.wofT < num356 * 16)
                {
                    Main.wofT++;
                    if (Main.wofT > num356 * 16)
                    {
                        Main.wofT = num356 * 16;
                    }
                }

                var num359 = (float) ((Main.wofB + Main.wofT) / 2 - base.height / 2);
                if (base.position.Y > num359 + 1f)
                {
                    base.velocity.Y = -1f;
                }
                else if (base.position.Y < num359 - 1f)
                {
                    base.velocity.Y = 1f;
                }

                base.velocity.Y = 0f;
                var num360 = (Main.maxTilesY - 180) * 16;
                if (num359 < (float) num360)
                {
                    num359 = (float) num360;
                }

                base.position.Y = num359;
                var num361 = 1.5f;
                if ((double) life < (double) lifeMax * 0.75)
                {
                    num361 += 0.25f;
                }

                if ((double) life < (double) lifeMax * 0.5)
                {
                    num361 += 0.4f;
                }

                if ((double) life < (double) lifeMax * 0.25)
                {
                    num361 += 0.5f;
                }

                if ((double) life < (double) lifeMax * 0.1)
                {
                    num361 += 0.6f;
                }

                if ((double) life < (double) lifeMax * 0.66 && Main.expertMode)
                {
                    num361 += 0.3f;
                }

                if ((double) life < (double) lifeMax * 0.33 && Main.expertMode)
                {
                    num361 += 0.3f;
                }

                if ((double) life < (double) lifeMax * 0.05 && Main.expertMode)
                {
                    num361 += 0.6f;
                }

                if ((double) life < (double) lifeMax * 0.035 && Main.expertMode)
                {
                    num361 += 0.6f;
                }

                if ((double) life < (double) lifeMax * 0.025 && Main.expertMode)
                {
                    num361 += 0.6f;
                }

                if (Main.expertMode)
                {
                    num361 *= 1.35f;
                    num361 += 0.35f;
                }

                if (base.velocity.X == 0f)
                {
                    TargetClosest(true);
                    base.velocity.X = (float) base.direction;
                }

                if (base.velocity.X < 0f)
                {
                    base.velocity.X = 0f - num361;
                    base.direction = -1;
                }
                else
                {
                    base.velocity.X = num361;
                    base.direction = 1;
                }

                spriteDirection = base.direction;
                var vector35 = new Vector2(base.position.X + (float) base.width * 0.5f,
                    base.position.Y + (float) base.height * 0.5f);
                var num362 = Main.player[target].position.X + (float) (Main.player[target].width / 2) - vector35.X;
                var num363 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) - vector35.Y;
                var num364 = (float) Math.Sqrt((double) (num362 * num362 + num363 * num363));
                num362 *= num364;
                num363 *= num364;
                if (base.direction > 0)
                {
                    if (Main.player[target].position.X + (float) (Main.player[target].width / 2) >
                        base.position.X + (float) (base.width / 2))
                    {
                        rotation = (float) Math.Atan2((double) (0f - num363), (double) (0f - num362)) + 3.14f;
                    }
                    else
                    {
                        rotation = 0f;
                    }
                }
                else if (Main.player[target].position.X + (float) (Main.player[target].width / 2) <
                         base.position.X + (float) (base.width / 2))
                {
                    rotation = (float) Math.Atan2((double) num363, (double) num362) + 3.14f;
                }
                else
                {
                    rotation = 0f;
                }

                if (Main.expertMode && Main.netMode != 1)
                {
                    var num365 = (int) (1f + (float) life / (float) lifeMax * 10f);
                    num365 *= num365;
                    if (num365 < 400)
                    {
                        num365 = (num365 * 19 + 400) / 20;
                    }

                    if (num365 < 60)
                    {
                        num365 = (num365 * 3 + 60) / 4;
                    }

                    if (num365 < 20)
                    {
                        num365 = (num365 + 20) / 2;
                    }

                    num365 = (int) ((double) num365 * 0.7);
                    if (Main.rand.Next(num365) == 0)
                    {
                        var num366 = 0;
                        var array = new float[10];
                        for (var num367 = 0; num367 < 200; num367++)
                        {
                            if (num366 < 10 && Main.npc[num367].active && Main.npc[num367].type == 115)
                            {
                                array[num366] = Main.npc[num367].ai[0];
                                num366++;
                            }
                        }

                        var maxValue = 1 + num366 * 2;
                        if (num366 < 10 && Main.rand.Next(maxValue) <= 1)
                        {
                            var num368 = -1;
                            for (var num369 = 0; num369 < 1000; num369++)
                            {
                                var num370 = Main.rand.Next(10);
                                var num371 = (float) num370 * 0.1f - 0.05f;
                                var flag27 = true;
                                for (var num372 = 0; num372 < num366; num372++)
                                {
                                    if (num371 == array[num372])
                                    {
                                        flag27 = false;
                                        break;
                                    }
                                }

                                if (flag27)
                                {
                                    num368 = num370;
                                    break;
                                }
                            }

                            if (num368 >= 0)
                            {
                                var num373 = NewNPC((int) base.position.X, (int) num359, 115, whoAmI, 0f, 0f, 0f, 0f,
                                    255);
                                Main.npc[num373].ai[0] = (float) num368 * 0.1f - 0.05f;
                            }
                        }
                    }
                }

                if (localAI[0] == 1f && Main.netMode != 1)
                {
                    localAI[0] = 2f;
                    num359 = (float) ((Main.wofB + Main.wofT) / 2);
                    num359 = (num359 + (float) Main.wofT) / 2f;
                    var num374 = NewNPC((int) base.position.X, (int) num359, 114, whoAmI, 0f, 0f, 0f, 0f, 255);
                    Main.npc[num374].ai[0] = 1f;
                    num359 = (float) ((Main.wofB + Main.wofT) / 2);
                    num359 = (num359 + (float) Main.wofB) / 2f;
                    num374 = NewNPC((int) base.position.X, (int) num359, 114, whoAmI, 0f, 0f, 0f, 0f, 255);
                    Main.npc[num374].ai[0] = -1f;
                    num359 = (float) ((Main.wofB + Main.wofT) / 2);
                    num359 = (num359 + (float) Main.wofB) / 2f;
                    for (var num375 = 0; num375 < 11; num375++)
                    {
                        num374 = NewNPC((int) base.position.X, (int) num359, 115, whoAmI, 0f, 0f, 0f, 0f, 255);
                        Main.npc[num374].ai[0] = (float) num375 * 0.1f - 0.05f;
                    }
                }
            }
            else if (aiStyle == 28)
            {
                if (Main.wof < 0)
                {
                    active = false;
                }
                else
                {
                    realLife = Main.wof;
                    if (Main.npc[Main.wof].life > 0)
                    {
                        life = Main.npc[Main.wof].life;
                    }

                    TargetClosest(true);
                    base.position.X = Main.npc[Main.wof].position.X;
                    base.direction = Main.npc[Main.wof].direction;
                    spriteDirection = base.direction;
                    var num376 = (float) ((Main.wofB + Main.wofT) / 2);
                    num376 = ((!(this.ai[0] > 0f))
                        ? ((num376 + (float) Main.wofB) / 2f)
                        : ((num376 + (float) Main.wofT) / 2f));
                    num376 -= (float) (base.height / 2);
                    if (base.position.Y > num376 + 1f)
                    {
                        base.velocity.Y = -1f;
                    }
                    else if (base.position.Y < num376 - 1f)
                    {
                        base.velocity.Y = 1f;
                    }
                    else
                    {
                        base.velocity.Y = 0f;
                        base.position.Y = num376;
                    }

                    if (base.velocity.Y > 5f)
                    {
                        base.velocity.Y = 5f;
                    }

                    if (base.velocity.Y < -5f)
                    {
                        base.velocity.Y = -5f;
                    }

                    var vector36 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num377 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                   vector36.X;
                    var num378 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                   vector36.Y;
                    var num379 = (float) Math.Sqrt((double) (num377 * num377 + num378 * num378));
                    num377 *= num379;
                    num378 *= num379;
                    var flag28 = true;
                    if (base.direction > 0)
                    {
                        if (Main.player[target].position.X + (float) (Main.player[target].width / 2) >
                            base.position.X + (float) (base.width / 2))
                        {
                            rotation = (float) Math.Atan2((double) (0f - num378), (double) (0f - num377)) + 3.14f;
                        }
                        else
                        {
                            rotation = 0f;
                            flag28 = false;
                        }
                    }
                    else if (Main.player[target].position.X + (float) (Main.player[target].width / 2) <
                             base.position.X + (float) (base.width / 2))
                    {
                        rotation = (float) Math.Atan2((double) num378, (double) num377) + 3.14f;
                    }
                    else
                    {
                        rotation = 0f;
                        flag28 = false;
                    }

                    if (Main.netMode != 1)
                    {
                        var num380 = 4;
                        localAI[1] += 1f;
                        if ((double) Main.npc[Main.wof].life < (double) Main.npc[Main.wof].lifeMax * 0.75)
                        {
                            localAI[1] += 1f;
                            num380++;
                        }

                        if ((double) Main.npc[Main.wof].life < (double) Main.npc[Main.wof].lifeMax * 0.5)
                        {
                            localAI[1] += 1f;
                            num380++;
                        }

                        if ((double) Main.npc[Main.wof].life < (double) Main.npc[Main.wof].lifeMax * 0.25)
                        {
                            localAI[1] += 1f;
                            num380 += 2;
                        }

                        if ((double) Main.npc[Main.wof].life < (double) Main.npc[Main.wof].lifeMax * 0.1)
                        {
                            localAI[1] += 2f;
                            num380 += 3;
                        }

                        if (Main.expertMode)
                        {
                            localAI[1] += 0.5f;
                            num380++;
                            if ((double) Main.npc[Main.wof].life < (double) Main.npc[Main.wof].lifeMax * 0.1)
                            {
                                localAI[1] += 2f;
                                num380 += 3;
                            }
                        }

                        if (localAI[2] == 0f)
                        {
                            if (localAI[1] > 600f)
                            {
                                localAI[2] = 1f;
                                localAI[1] = 0f;
                            }
                        }
                        else if (localAI[1] > 45f && Collision.CanHit(base.position, base.width, base.height,
                                     Main.player[target].position, Main.player[target].width,
                                     Main.player[target].height))
                        {
                            localAI[1] = 0f;
                            localAI[2] += 1f;
                            if (localAI[2] >= (float) num380)
                            {
                                localAI[2] = 0f;
                            }

                            if (flag28)
                            {
                                var num381 = 9f;
                                var num382 = 11;
                                var num383 = 83;
                                if ((double) Main.npc[Main.wof].life < (double) Main.npc[Main.wof].lifeMax * 0.5)
                                {
                                    num382++;
                                    num381 += 1f;
                                }

                                if ((double) Main.npc[Main.wof].life < (double) Main.npc[Main.wof].lifeMax * 0.25)
                                {
                                    num382++;
                                    num381 += 1f;
                                }

                                if ((double) Main.npc[Main.wof].life < (double) Main.npc[Main.wof].lifeMax * 0.1)
                                {
                                    num382 += 2;
                                    num381 += 2f;
                                }

                                vector36 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                    base.position.Y + (float) base.height * 0.5f);
                                num377 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                         vector36.X;
                                num378 = Main.player[target].position.Y + (float) Main.player[target].height * 0.5f -
                                         vector36.Y;
                                num379 = (float) Math.Sqrt((double) (num377 * num377 + num378 * num378));
                                num379 = num381 / num379;
                                num377 *= num379;
                                num378 *= num379;
                                vector36.X += num377;
                                vector36.Y += num378;
                                Projectile.NewProjectile(vector36.X, vector36.Y, num377, num378, num383, num382, 0f,
                                    Main.myPlayer, 0f, 0f);
                            }
                        }
                    }
                }
            }
            else if (aiStyle == 29)
            {
                if (justHit)
                {
                    this.ai[1] = 10f;
                }

                if (Main.wof < 0)
                {
                    active = false;
                }
                else
                {
                    TargetClosest(true);
                    var num384 = 0.1f;
                    var num385 = 300f;
                    if ((double) Main.npc[Main.wof].life < (double) Main.npc[Main.wof].lifeMax * 0.25)
                    {
                        damage = (int) (75f * Main.damageMultiplier);
                        defense = 40;
                        if (!Main.expertMode)
                        {
                            num385 = 900f;
                        }
                        else
                        {
                            num384 += 0.1f;
                        }
                    }
                    else if ((double) Main.npc[Main.wof].life < (double) Main.npc[Main.wof].lifeMax * 0.5)
                    {
                        damage = (int) (60f * Main.damageMultiplier);
                        defense = 30;
                        if (!Main.expertMode)
                        {
                            num385 = 700f;
                        }
                        else
                        {
                            num384 += 0.066f;
                        }
                    }
                    else if ((double) Main.npc[Main.wof].life < (double) Main.npc[Main.wof].lifeMax * 0.75)
                    {
                        damage = (int) (45f * Main.damageMultiplier);
                        defense = 20;
                        if (!Main.expertMode)
                        {
                            num385 = 500f;
                        }
                        else
                        {
                            num384 += 0.033f;
                        }
                    }

                    if (Main.expertMode)
                    {
                        defense = defDefense;
                        if (whoAmI % 4 == 0)
                        {
                            num385 *= 1.75f;
                        }

                        if (whoAmI % 4 == 1)
                        {
                            num385 *= 1.5f;
                        }

                        if (whoAmI % 4 == 2)
                        {
                            num385 *= 1.25f;
                        }

                        if (whoAmI % 3 == 0)
                        {
                            num385 *= 1.5f;
                        }

                        if (whoAmI % 3 == 1)
                        {
                            num385 *= 1.25f;
                        }

                        num385 *= 0.75f;
                    }

                    var num386 = Main.npc[Main.wof].position.X + (float) (Main.npc[Main.wof].width / 2);
                    var y3 = Main.npc[Main.wof].position.Y;
                    var num387 = (float) (Main.wofB - Main.wofT);
                    y3 = (float) Main.wofT + num387 * this.ai[0];
                    this.ai[2] += 1f;
                    if (this.ai[2] > 100f)
                    {
                        num385 = (float) (int) (num385 * 1.3f);
                        if (this.ai[2] > 200f)
                        {
                            this.ai[2] = 0f;
                        }
                    }

                    var vector37 = new Vector2(num386, y3);
                    var num388 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                   (float) (base.width / 2) - vector37.X;
                    var num389 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                   (float) (base.height / 2) - vector37.Y;
                    var num390 = (float) Math.Sqrt((double) (num388 * num388 + num389 * num389));
                    if (this.ai[1] == 0f)
                    {
                        if (num390 > num385)
                        {
                            num390 = num385 / num390;
                            num388 *= num390;
                            num389 *= num390;
                        }

                        if (base.position.X < num386 + num388)
                        {
                            base.velocity.X += num384;
                            if (base.velocity.X < 0f && num388 > 0f)
                            {
                                base.velocity.X += num384 * 2.5f;
                            }
                        }
                        else if (base.position.X > num386 + num388)
                        {
                            base.velocity.X -= num384;
                            if (base.velocity.X > 0f && num388 < 0f)
                            {
                                base.velocity.X -= num384 * 2.5f;
                            }
                        }

                        if (base.position.Y < y3 + num389)
                        {
                            base.velocity.Y += num384;
                            if (base.velocity.Y < 0f && num389 > 0f)
                            {
                                base.velocity.Y += num384 * 2.5f;
                            }
                        }
                        else if (base.position.Y > y3 + num389)
                        {
                            base.velocity.Y -= num384;
                            if (base.velocity.Y > 0f && num389 < 0f)
                            {
                                base.velocity.Y -= num384 * 2.5f;
                            }
                        }

                        var num391 = 4f;
                        if (Main.expertMode && Main.wof >= 0)
                        {
                            var num392 = 1.5f;
                            var num393 = (float) (Main.npc[Main.wof].life / Main.npc[Main.wof].lifeMax);
                            if ((double) num393 < 0.75)
                            {
                                num392 += 0.7f;
                            }

                            if ((double) num393 < 0.5)
                            {
                                num392 += 0.7f;
                            }

                            if ((double) num393 < 0.25)
                            {
                                num392 += 0.9f;
                            }

                            if ((double) num393 < 0.1)
                            {
                                num392 += 0.9f;
                            }

                            num392 *= 1.25f;
                            num392 += 0.3f;
                            num391 += num392 * 0.35f;
                            if (base.Center.X < Main.npc[Main.wof].Center.X && Main.npc[Main.wof].velocity.X > 0f)
                            {
                                num391 += 6f;
                            }

                            if (base.Center.X > Main.npc[Main.wof].Center.X && Main.npc[Main.wof].velocity.X < 0f)
                            {
                                num391 += 6f;
                            }
                        }

                        if (base.velocity.X > num391)
                        {
                            base.velocity.X = num391;
                        }

                        if (base.velocity.X < 0f - num391)
                        {
                            base.velocity.X = 0f - num391;
                        }

                        if (base.velocity.Y > num391)
                        {
                            base.velocity.Y = num391;
                        }

                        if (base.velocity.Y < 0f - num391)
                        {
                            base.velocity.Y = 0f - num391;
                        }
                    }
                    else if (this.ai[1] > 0f)
                    {
                        this.ai[1] -= 1f;
                    }
                    else
                    {
                        this.ai[1] = 0f;
                    }

                    if (num388 > 0f)
                    {
                        spriteDirection = 1;
                        rotation = (float) Math.Atan2((double) num389, (double) num388);
                    }

                    if (num388 < 0f)
                    {
                        spriteDirection = -1;
                        rotation = (float) Math.Atan2((double) num389, (double) num388) + 3.14f;
                    }

                    Lighting.AddLight((int) (base.position.X + (float) (base.width / 2)) / 16,
                        (int) (base.position.Y + (float) (base.height / 2)) / 16, 0.3f, 0.2f, 0.1f);
                }
            }
            else if (aiStyle == 30)
            {
                if (target < 0 || target == 255 || Main.player[target].dead || !Main.player[target].active)
                {
                    TargetClosest(true);
                }

                var dead2 = Main.player[target].dead;
                var num394 = base.position.X + (float) (base.width / 2) - Main.player[target].position.X -
                               (float) (Main.player[target].width / 2);
                var num395 = base.position.Y + (float) base.height - 59f - Main.player[target].position.Y -
                               (float) (Main.player[target].height / 2);
                var num396 = (float) Math.Atan2((double) num395, (double) num394) + 1.57f;
                if (num396 < 0f)
                {
                    num396 += 6.283f;
                }
                else if ((double) num396 > 6.283)
                {
                    num396 -= 6.283f;
                }

                var num397 = 0.1f;
                if (rotation < num396)
                {
                    if ((double) (num396 - rotation) > 3.1415)
                    {
                        rotation -= num397;
                    }
                    else
                    {
                        rotation += num397;
                    }
                }
                else if (rotation > num396)
                {
                    if ((double) (rotation - num396) > 3.1415)
                    {
                        rotation += num397;
                    }
                    else
                    {
                        rotation -= num397;
                    }
                }

                if (rotation > num396 - num397 && rotation < num396 + num397)
                {
                    rotation = num396;
                }

                if (rotation < 0f)
                {
                    rotation += 6.283f;
                }
                else if ((double) rotation > 6.283)
                {
                    rotation -= 6.283f;
                }

                if (rotation > num396 - num397 && rotation < num396 + num397)
                {
                    rotation = num396;
                }

                if (Main.rand.Next(5) == 0)
                {
                    var position41 = new Vector2(base.position.X, base.position.Y + (float) base.height * 0.25f);
                    var width38 = base.width;
                    var height36 = (int) ((float) base.height * 0.5f);
                    var x4 = base.velocity.X;
                    newColor = default(Color);
                    var num398 = Dust.NewDust(position41, width38, height36, 5, x4, 2f, 0, newColor, 1f);
                    Main.dust[num398].velocity.X *= 0.5f;
                    Main.dust[num398].velocity.Y *= 0.1f;
                }

                if (Main.netMode != 1 && !Main.dayTime && !dead2 && timeLeft < 10)
                {
                    for (var num399 = 0; num399 < 200; num399++)
                    {
                        if (num399 != whoAmI && Main.npc[num399].active &&
                            (Main.npc[num399].type == 125 || Main.npc[num399].type == 126) &&
                            Main.npc[num399].timeLeft - 1 > timeLeft)
                        {
                            timeLeft = Main.npc[num399].timeLeft - 1;
                        }
                    }
                }

                if (Main.dayTime || dead2)
                {
                    base.velocity.Y -= 0.04f;
                    if (timeLeft > 10)
                    {
                        timeLeft = 10;
                    }
                }
                else if (this.ai[0] == 0f)
                {
                    if (this.ai[1] == 0f)
                    {
                        var num400 = 7f;
                        var num401 = 0.1f;
                        if (Main.expertMode)
                        {
                            num400 = 8.25f;
                            num401 = 0.115f;
                        }

                        var num402 = 1;
                        if (base.position.X + (float) (base.width / 2) <
                            Main.player[target].position.X + (float) Main.player[target].width)
                        {
                            num402 = -1;
                        }

                        var vector38 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        var num403 = Main.player[target].position.X + (float) (Main.player[target].width / 2) +
                                       (float) (num402 * 300) - vector38.X;
                        var num404 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                       300f - vector38.Y;
                        var num405 = (float) Math.Sqrt((double) (num403 * num403 + num404 * num404));
                        var num406 = num405;
                        num405 = num400 / num405;
                        num403 *= num405;
                        num404 *= num405;
                        if (base.velocity.X < num403)
                        {
                            base.velocity.X += num401;
                            if (base.velocity.X < 0f && num403 > 0f)
                            {
                                base.velocity.X += num401;
                            }
                        }
                        else if (base.velocity.X > num403)
                        {
                            base.velocity.X -= num401;
                            if (base.velocity.X > 0f && num403 < 0f)
                            {
                                base.velocity.X -= num401;
                            }
                        }

                        if (base.velocity.Y < num404)
                        {
                            base.velocity.Y += num401;
                            if (base.velocity.Y < 0f && num404 > 0f)
                            {
                                base.velocity.Y += num401;
                            }
                        }
                        else if (base.velocity.Y > num404)
                        {
                            base.velocity.Y -= num401;
                            if (base.velocity.Y > 0f && num404 < 0f)
                            {
                                base.velocity.Y -= num401;
                            }
                        }

                        this.ai[2] += 1f;
                        if (this.ai[2] >= 600f)
                        {
                            this.ai[1] = 1f;
                            this.ai[2] = 0f;
                            this.ai[3] = 0f;
                            target = 255;
                            netUpdate = true;
                        }
                        else if (base.position.Y + (float) base.height < Main.player[target].position.Y &&
                                 num406 < 400f)
                        {
                            if (!Main.player[target].dead)
                            {
                                this.ai[3] += 1f;
                                if (Main.expertMode && (double) life < (double) lifeMax * 0.9)
                                {
                                    this.ai[3] += 0.3f;
                                }

                                if (Main.expertMode && (double) life < (double) lifeMax * 0.8)
                                {
                                    this.ai[3] += 0.3f;
                                }

                                if (Main.expertMode && (double) life < (double) lifeMax * 0.7)
                                {
                                    this.ai[3] += 0.3f;
                                }

                                if (Main.expertMode && (double) life < (double) lifeMax * 0.6)
                                {
                                    this.ai[3] += 0.3f;
                                }
                            }

                            if (this.ai[3] >= 60f)
                            {
                                this.ai[3] = 0f;
                                vector38 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                    base.position.Y + (float) base.height * 0.5f);
                                num403 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                         vector38.X;
                                num404 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                         vector38.Y;
                                if (Main.netMode != 1)
                                {
                                    var num407 = 9f;
                                    var num408 = 20;
                                    var num409 = 83;
                                    if (Main.expertMode)
                                    {
                                        num407 = 10.5f;
                                        num408 = 19;
                                    }

                                    num405 = (float) Math.Sqrt((double) (num403 * num403 + num404 * num404));
                                    num405 = num407 / num405;
                                    num403 *= num405;
                                    num404 *= num405;
                                    num403 += (float) Main.rand.Next(-40, 41) * 0.08f;
                                    num404 += (float) Main.rand.Next(-40, 41) * 0.08f;
                                    vector38.X += num403 * 15f;
                                    vector38.Y += num404 * 15f;
                                    Projectile.NewProjectile(vector38.X, vector38.Y, num403, num404, num409, num408, 0f,
                                        Main.myPlayer, 0f, 0f);
                                }
                            }
                        }
                    }
                    else if (this.ai[1] == 1f)
                    {
                        rotation = num396;
                        var num410 = 12f;
                        if (Main.expertMode)
                        {
                            num410 = 15f;
                        }

                        var vector39 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        var num411 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                       vector39.X;
                        var num412 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                       vector39.Y;
                        var num413 = (float) Math.Sqrt((double) (num411 * num411 + num412 * num412));
                        num413 = num410 / num413;
                        base.velocity.X = num411 * num413;
                        base.velocity.Y = num412 * num413;
                        this.ai[1] = 2f;
                    }
                    else if (this.ai[1] == 2f)
                    {
                        this.ai[2] += 1f;
                        if (this.ai[2] >= 25f)
                        {
                            base.velocity.X *= 0.96f;
                            base.velocity.Y *= 0.96f;
                            if ((double) base.velocity.X > -0.1 && (double) base.velocity.X < 0.1)
                            {
                                base.velocity.X = 0f;
                            }

                            if ((double) base.velocity.Y > -0.1 && (double) base.velocity.Y < 0.1)
                            {
                                base.velocity.Y = 0f;
                            }
                        }
                        else
                        {
                            rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) - 1.57f;
                        }

                        if (this.ai[2] >= 70f)
                        {
                            this.ai[3] += 1f;
                            this.ai[2] = 0f;
                            target = 255;
                            rotation = num396;
                            if (this.ai[3] >= 4f)
                            {
                                this.ai[1] = 0f;
                                this.ai[3] = 0f;
                            }
                            else
                            {
                                this.ai[1] = 1f;
                            }
                        }
                    }

                    if ((double) life < (double) lifeMax * 0.4)
                    {
                        this.ai[0] = 1f;
                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                        netUpdate = true;
                    }
                }
                else if (this.ai[0] == 1f || this.ai[0] == 2f)
                {
                    if (this.ai[0] == 1f)
                    {
                        this.ai[2] += 0.005f;
                        if ((double) this.ai[2] > 0.5)
                        {
                            this.ai[2] = 0.5f;
                        }
                    }
                    else
                    {
                        this.ai[2] -= 0.005f;
                        if (this.ai[2] < 0f)
                        {
                            this.ai[2] = 0f;
                        }
                    }

                    rotation += this.ai[2];
                    this.ai[1] += 1f;
                    if (this.ai[1] == 100f)
                    {
                        this.ai[0] += 1f;
                        this.ai[1] = 0f;
                        if (this.ai[0] == 3f)
                        {
                            this.ai[2] = 0f;
                        }
                        else
                        {
                            Main.PlaySound(3, (int) base.position.X, (int) base.position.Y, 1, 1f, 0f);
                            for (var num414 = 0; num414 < 2; num414++)
                            {
                                Gore.NewGore(base.position,
                                    new Vector2((float) Main.rand.Next(-30, 31) * 0.2f,
                                        (float) Main.rand.Next(-30, 31) * 0.2f), 143, 1f);
                                Gore.NewGore(base.position,
                                    new Vector2((float) Main.rand.Next(-30, 31) * 0.2f,
                                        (float) Main.rand.Next(-30, 31) * 0.2f), 7, 1f);
                                Gore.NewGore(base.position,
                                    new Vector2((float) Main.rand.Next(-30, 31) * 0.2f,
                                        (float) Main.rand.Next(-30, 31) * 0.2f), 6, 1f);
                            }

                            for (var num415 = 0; num415 < 20; num415++)
                            {
                                var position42 = base.position;
                                var width39 = base.width;
                                var height37 = base.height;
                                var speedX17 = (float) Main.rand.Next(-30, 31) * 0.2f;
                                var speedY17 = (float) Main.rand.Next(-30, 31) * 0.2f;
                                newColor = default(Color);
                                Dust.NewDust(position42, width39, height37, 5, speedX17, speedY17, 0, newColor, 1f);
                            }

                            Main.PlaySound(15, (int) base.position.X, (int) base.position.Y, 0, 1f, 0f);
                        }
                    }

                    var position43 = base.position;
                    var width40 = base.width;
                    var height38 = base.height;
                    var speedX18 = (float) Main.rand.Next(-30, 31) * 0.2f;
                    var speedY18 = (float) Main.rand.Next(-30, 31) * 0.2f;
                    newColor = default(Color);
                    Dust.NewDust(position43, width40, height38, 5, speedX18, speedY18, 0, newColor, 1f);
                    base.velocity.X *= 0.98f;
                    base.velocity.Y *= 0.98f;
                    if ((double) base.velocity.X > -0.1 && (double) base.velocity.X < 0.1)
                    {
                        base.velocity.X = 0f;
                    }

                    if ((double) base.velocity.Y > -0.1 && (double) base.velocity.Y < 0.1)
                    {
                        base.velocity.Y = 0f;
                    }
                }
                else
                {
                    damage = (int) ((double) defDamage * 1.5);
                    defense = defDefense + 10;
                    HitSound = SoundID.NPCHit4;
                    if (this.ai[1] == 0f)
                    {
                        var num416 = 8f;
                        var num417 = 0.15f;
                        if (Main.expertMode)
                        {
                            num416 = 9.5f;
                            num417 = 0.175f;
                        }

                        var vector40 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        var num418 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                       vector40.X;
                        var num419 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                       300f - vector40.Y;
                        var num420 = (float) Math.Sqrt((double) (num418 * num418 + num419 * num419));
                        num420 = num416 / num420;
                        num418 *= num420;
                        num419 *= num420;
                        if (base.velocity.X < num418)
                        {
                            base.velocity.X += num417;
                            if (base.velocity.X < 0f && num418 > 0f)
                            {
                                base.velocity.X += num417;
                            }
                        }
                        else if (base.velocity.X > num418)
                        {
                            base.velocity.X -= num417;
                            if (base.velocity.X > 0f && num418 < 0f)
                            {
                                base.velocity.X -= num417;
                            }
                        }

                        if (base.velocity.Y < num419)
                        {
                            base.velocity.Y += num417;
                            if (base.velocity.Y < 0f && num419 > 0f)
                            {
                                base.velocity.Y += num417;
                            }
                        }
                        else if (base.velocity.Y > num419)
                        {
                            base.velocity.Y -= num417;
                            if (base.velocity.Y > 0f && num419 < 0f)
                            {
                                base.velocity.Y -= num417;
                            }
                        }

                        this.ai[2] += 1f;
                        if (this.ai[2] >= 300f)
                        {
                            this.ai[1] = 1f;
                            this.ai[2] = 0f;
                            this.ai[3] = 0f;
                            TargetClosest(true);
                            netUpdate = true;
                        }

                        vector40 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        num418 = Main.player[target].position.X + (float) (Main.player[target].width / 2) - vector40.X;
                        num419 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) - vector40.Y;
                        rotation = (float) Math.Atan2((double) num419, (double) num418) - 1.57f;
                        if (Main.netMode != 1)
                        {
                            localAI[1] += 1f;
                            if ((double) life < (double) lifeMax * 0.75)
                            {
                                localAI[1] += 1f;
                            }

                            if ((double) life < (double) lifeMax * 0.5)
                            {
                                localAI[1] += 1f;
                            }

                            if ((double) life < (double) lifeMax * 0.25)
                            {
                                localAI[1] += 1f;
                            }

                            if ((double) life < (double) lifeMax * 0.1)
                            {
                                localAI[1] += 2f;
                            }

                            if (localAI[1] > 180f && Collision.CanHit(base.position, base.width, base.height,
                                    Main.player[target].position, Main.player[target].width,
                                    Main.player[target].height))
                            {
                                localAI[1] = 0f;
                                var num421 = 8.5f;
                                var num422 = 25;
                                var num423 = 100;
                                if (Main.expertMode)
                                {
                                    num421 = 10f;
                                    num422 = 23;
                                }

                                num420 = (float) Math.Sqrt((double) (num418 * num418 + num419 * num419));
                                num420 = num421 / num420;
                                num418 *= num420;
                                num419 *= num420;
                                vector40.X += num418 * 15f;
                                vector40.Y += num419 * 15f;
                                Projectile.NewProjectile(vector40.X, vector40.Y, num418, num419, num423, num422, 0f,
                                    Main.myPlayer, 0f, 0f);
                            }
                        }
                    }
                    else
                    {
                        var num424 = 1;
                        if (base.position.X + (float) (base.width / 2) <
                            Main.player[target].position.X + (float) Main.player[target].width)
                        {
                            num424 = -1;
                        }

                        var num425 = 8f;
                        var num426 = 0.2f;
                        if (Main.expertMode)
                        {
                            num425 = 9.5f;
                            num426 = 0.25f;
                        }

                        var vector41 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        var num427 = Main.player[target].position.X + (float) (Main.player[target].width / 2) +
                                       (float) (num424 * 340) - vector41.X;
                        var num428 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                       vector41.Y;
                        var num429 = (float) Math.Sqrt((double) (num427 * num427 + num428 * num428));
                        num429 = num425 / num429;
                        num427 *= num429;
                        num428 *= num429;
                        if (base.velocity.X < num427)
                        {
                            base.velocity.X += num426;
                            if (base.velocity.X < 0f && num427 > 0f)
                            {
                                base.velocity.X += num426;
                            }
                        }
                        else if (base.velocity.X > num427)
                        {
                            base.velocity.X -= num426;
                            if (base.velocity.X > 0f && num427 < 0f)
                            {
                                base.velocity.X -= num426;
                            }
                        }

                        if (base.velocity.Y < num428)
                        {
                            base.velocity.Y += num426;
                            if (base.velocity.Y < 0f && num428 > 0f)
                            {
                                base.velocity.Y += num426;
                            }
                        }
                        else if (base.velocity.Y > num428)
                        {
                            base.velocity.Y -= num426;
                            if (base.velocity.Y > 0f && num428 < 0f)
                            {
                                base.velocity.Y -= num426;
                            }
                        }

                        vector41 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        num427 = Main.player[target].position.X + (float) (Main.player[target].width / 2) - vector41.X;
                        num428 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) - vector41.Y;
                        rotation = (float) Math.Atan2((double) num428, (double) num427) - 1.57f;
                        if (Main.netMode != 1)
                        {
                            localAI[1] += 1f;
                            if ((double) life < (double) lifeMax * 0.75)
                            {
                                localAI[1] += 0.5f;
                            }

                            if ((double) life < (double) lifeMax * 0.5)
                            {
                                localAI[1] += 0.75f;
                            }

                            if ((double) life < (double) lifeMax * 0.25)
                            {
                                localAI[1] += 1f;
                            }

                            if ((double) life < (double) lifeMax * 0.1)
                            {
                                localAI[1] += 1.5f;
                            }

                            if (Main.expertMode)
                            {
                                localAI[1] += 1.5f;
                            }

                            if (localAI[1] > 60f && Collision.CanHit(base.position, base.width, base.height,
                                    Main.player[target].position, Main.player[target].width,
                                    Main.player[target].height))
                            {
                                localAI[1] = 0f;
                                var num430 = 9f;
                                var num431 = 18;
                                var num432 = 100;
                                if (Main.expertMode)
                                {
                                    num431 = 17;
                                }

                                num429 = (float) Math.Sqrt((double) (num427 * num427 + num428 * num428));
                                num429 = num430 / num429;
                                num427 *= num429;
                                num428 *= num429;
                                vector41.X += num427 * 15f;
                                vector41.Y += num428 * 15f;
                                Projectile.NewProjectile(vector41.X, vector41.Y, num427, num428, num432, num431, 0f,
                                    Main.myPlayer, 0f, 0f);
                            }
                        }

                        this.ai[2] += 1f;
                        if (this.ai[2] >= 180f)
                        {
                            this.ai[1] = 0f;
                            this.ai[2] = 0f;
                            this.ai[3] = 0f;
                            TargetClosest(true);
                            netUpdate = true;
                        }
                    }
                }
            }
            else if (aiStyle == 31)
            {
                if (target < 0 || target == 255 || Main.player[target].dead || !Main.player[target].active)
                {
                    TargetClosest(true);
                }

                var dead3 = Main.player[target].dead;
                var num433 = base.position.X + (float) (base.width / 2) - Main.player[target].position.X -
                               (float) (Main.player[target].width / 2);
                var num434 = base.position.Y + (float) base.height - 59f - Main.player[target].position.Y -
                               (float) (Main.player[target].height / 2);
                var num435 = (float) Math.Atan2((double) num434, (double) num433) + 1.57f;
                if (num435 < 0f)
                {
                    num435 += 6.283f;
                }
                else if ((double) num435 > 6.283)
                {
                    num435 -= 6.283f;
                }

                var num436 = 0.15f;
                if (rotation < num435)
                {
                    if ((double) (num435 - rotation) > 3.1415)
                    {
                        rotation -= num436;
                    }
                    else
                    {
                        rotation += num436;
                    }
                }
                else if (rotation > num435)
                {
                    if ((double) (rotation - num435) > 3.1415)
                    {
                        rotation += num436;
                    }
                    else
                    {
                        rotation -= num436;
                    }
                }

                if (rotation > num435 - num436 && rotation < num435 + num436)
                {
                    rotation = num435;
                }

                if (rotation < 0f)
                {
                    rotation += 6.283f;
                }
                else if ((double) rotation > 6.283)
                {
                    rotation -= 6.283f;
                }

                if (rotation > num435 - num436 && rotation < num435 + num436)
                {
                    rotation = num435;
                }

                if (Main.rand.Next(5) == 0)
                {
                    var position44 = new Vector2(base.position.X, base.position.Y + (float) base.height * 0.25f);
                    var width41 = base.width;
                    var height39 = (int) ((float) base.height * 0.5f);
                    var x5 = base.velocity.X;
                    newColor = default(Color);
                    var num437 = Dust.NewDust(position44, width41, height39, 5, x5, 2f, 0, newColor, 1f);
                    Main.dust[num437].velocity.X *= 0.5f;
                    Main.dust[num437].velocity.Y *= 0.1f;
                }

                if (Main.netMode != 1 && !Main.dayTime && !dead3 && timeLeft < 10)
                {
                    for (var num438 = 0; num438 < 200; num438++)
                    {
                        if (num438 != whoAmI && Main.npc[num438].active &&
                            (Main.npc[num438].type == 125 || Main.npc[num438].type == 126) &&
                            Main.npc[num438].timeLeft - 1 > timeLeft)
                        {
                            timeLeft = Main.npc[num438].timeLeft - 1;
                        }
                    }
                }

                if (Main.dayTime || dead3)
                {
                    base.velocity.Y -= 0.04f;
                    if (timeLeft > 10)
                    {
                        timeLeft = 10;
                    }
                }
                else if (this.ai[0] == 0f)
                {
                    if (this.ai[1] == 0f)
                    {
                        TargetClosest(true);
                        var num439 = 12f;
                        var num440 = 0.4f;
                        var num441 = 1;
                        if (base.position.X + (float) (base.width / 2) <
                            Main.player[target].position.X + (float) Main.player[target].width)
                        {
                            num441 = -1;
                        }

                        var vector42 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        var num442 = Main.player[target].position.X + (float) (Main.player[target].width / 2) +
                                       (float) (num441 * 400) - vector42.X;
                        var num443 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                       vector42.Y;
                        var num444 = (float) Math.Sqrt((double) (num442 * num442 + num443 * num443));
                        num444 = num439 / num444;
                        num442 *= num444;
                        num443 *= num444;
                        if (base.velocity.X < num442)
                        {
                            base.velocity.X += num440;
                            if (base.velocity.X < 0f && num442 > 0f)
                            {
                                base.velocity.X += num440;
                            }
                        }
                        else if (base.velocity.X > num442)
                        {
                            base.velocity.X -= num440;
                            if (base.velocity.X > 0f && num442 < 0f)
                            {
                                base.velocity.X -= num440;
                            }
                        }

                        if (base.velocity.Y < num443)
                        {
                            base.velocity.Y += num440;
                            if (base.velocity.Y < 0f && num443 > 0f)
                            {
                                base.velocity.Y += num440;
                            }
                        }
                        else if (base.velocity.Y > num443)
                        {
                            base.velocity.Y -= num440;
                            if (base.velocity.Y > 0f && num443 < 0f)
                            {
                                base.velocity.Y -= num440;
                            }
                        }

                        this.ai[2] += 1f;
                        if (this.ai[2] >= 600f)
                        {
                            this.ai[1] = 1f;
                            this.ai[2] = 0f;
                            this.ai[3] = 0f;
                            target = 255;
                            netUpdate = true;
                        }
                        else
                        {
                            if (!Main.player[target].dead)
                            {
                                this.ai[3] += 1f;
                                if (Main.expertMode && (double) life < (double) lifeMax * 0.8)
                                {
                                    this.ai[3] += 0.6f;
                                }
                            }

                            if (this.ai[3] >= 60f)
                            {
                                this.ai[3] = 0f;
                                vector42 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                    base.position.Y + (float) base.height * 0.5f);
                                num442 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                         vector42.X;
                                num443 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                         vector42.Y;
                                if (Main.netMode != 1)
                                {
                                    var num445 = 12f;
                                    var num446 = 25;
                                    var num447 = 96;
                                    if (Main.expertMode)
                                    {
                                        num445 = 14f;
                                        num446 = 22;
                                    }

                                    num444 = (float) Math.Sqrt((double) (num442 * num442 + num443 * num443));
                                    num444 = num445 / num444;
                                    num442 *= num444;
                                    num443 *= num444;
                                    num442 += (float) Main.rand.Next(-40, 41) * 0.05f;
                                    num443 += (float) Main.rand.Next(-40, 41) * 0.05f;
                                    vector42.X += num442 * 4f;
                                    vector42.Y += num443 * 4f;
                                    Projectile.NewProjectile(vector42.X, vector42.Y, num442, num443, num447, num446, 0f,
                                        Main.myPlayer, 0f, 0f);
                                }
                            }
                        }
                    }
                    else if (this.ai[1] == 1f)
                    {
                        rotation = num435;
                        var num448 = 13f;
                        if (Main.expertMode)
                        {
                            if ((double) life < (double) lifeMax * 0.9)
                            {
                                num448 += 0.5f;
                            }

                            if ((double) life < (double) lifeMax * 0.8)
                            {
                                num448 += 0.5f;
                            }

                            if ((double) life < (double) lifeMax * 0.7)
                            {
                                num448 += 0.55f;
                            }

                            if ((double) life < (double) lifeMax * 0.6)
                            {
                                num448 += 0.6f;
                            }

                            if ((double) life < (double) lifeMax * 0.5)
                            {
                                num448 += 0.65f;
                            }
                        }

                        var vector43 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        var num449 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                       vector43.X;
                        var num450 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                       vector43.Y;
                        var num451 = (float) Math.Sqrt((double) (num449 * num449 + num450 * num450));
                        num451 = num448 / num451;
                        base.velocity.X = num449 * num451;
                        base.velocity.Y = num450 * num451;
                        this.ai[1] = 2f;
                    }
                    else if (this.ai[1] == 2f)
                    {
                        this.ai[2] += 1f;
                        if (this.ai[2] >= 8f)
                        {
                            base.velocity.X *= 0.9f;
                            base.velocity.Y *= 0.9f;
                            if ((double) base.velocity.X > -0.1 && (double) base.velocity.X < 0.1)
                            {
                                base.velocity.X = 0f;
                            }

                            if ((double) base.velocity.Y > -0.1 && (double) base.velocity.Y < 0.1)
                            {
                                base.velocity.Y = 0f;
                            }
                        }
                        else
                        {
                            rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) - 1.57f;
                        }

                        if (this.ai[2] >= 42f)
                        {
                            this.ai[3] += 1f;
                            this.ai[2] = 0f;
                            target = 255;
                            rotation = num435;
                            if (this.ai[3] >= 10f)
                            {
                                this.ai[1] = 0f;
                                this.ai[3] = 0f;
                            }
                            else
                            {
                                this.ai[1] = 1f;
                            }
                        }
                    }

                    if ((double) life < (double) lifeMax * 0.4)
                    {
                        this.ai[0] = 1f;
                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                        netUpdate = true;
                    }
                }
                else if (this.ai[0] == 1f || this.ai[0] == 2f)
                {
                    if (this.ai[0] == 1f)
                    {
                        this.ai[2] += 0.005f;
                        if ((double) this.ai[2] > 0.5)
                        {
                            this.ai[2] = 0.5f;
                        }
                    }
                    else
                    {
                        this.ai[2] -= 0.005f;
                        if (this.ai[2] < 0f)
                        {
                            this.ai[2] = 0f;
                        }
                    }

                    rotation += this.ai[2];
                    this.ai[1] += 1f;
                    if (this.ai[1] == 100f)
                    {
                        this.ai[0] += 1f;
                        this.ai[1] = 0f;
                        if (this.ai[0] == 3f)
                        {
                            this.ai[2] = 0f;
                        }
                        else
                        {
                            Main.PlaySound(3, (int) base.position.X, (int) base.position.Y, 1, 1f, 0f);
                            for (var num452 = 0; num452 < 2; num452++)
                            {
                                Gore.NewGore(base.position,
                                    new Vector2((float) Main.rand.Next(-30, 31) * 0.2f,
                                        (float) Main.rand.Next(-30, 31) * 0.2f), 144, 1f);
                                Gore.NewGore(base.position,
                                    new Vector2((float) Main.rand.Next(-30, 31) * 0.2f,
                                        (float) Main.rand.Next(-30, 31) * 0.2f), 7, 1f);
                                Gore.NewGore(base.position,
                                    new Vector2((float) Main.rand.Next(-30, 31) * 0.2f,
                                        (float) Main.rand.Next(-30, 31) * 0.2f), 6, 1f);
                            }

                            for (var num453 = 0; num453 < 20; num453++)
                            {
                                var position45 = base.position;
                                var width42 = base.width;
                                var height40 = base.height;
                                var speedX19 = (float) Main.rand.Next(-30, 31) * 0.2f;
                                var speedY19 = (float) Main.rand.Next(-30, 31) * 0.2f;
                                newColor = default(Color);
                                Dust.NewDust(position45, width42, height40, 5, speedX19, speedY19, 0, newColor, 1f);
                            }

                            Main.PlaySound(15, (int) base.position.X, (int) base.position.Y, 0, 1f, 0f);
                        }
                    }

                    var position46 = base.position;
                    var width43 = base.width;
                    var height41 = base.height;
                    var speedX20 = (float) Main.rand.Next(-30, 31) * 0.2f;
                    var speedY20 = (float) Main.rand.Next(-30, 31) * 0.2f;
                    newColor = default(Color);
                    Dust.NewDust(position46, width43, height41, 5, speedX20, speedY20, 0, newColor, 1f);
                    base.velocity.X *= 0.98f;
                    base.velocity.Y *= 0.98f;
                    if ((double) base.velocity.X > -0.1 && (double) base.velocity.X < 0.1)
                    {
                        base.velocity.X = 0f;
                    }

                    if ((double) base.velocity.Y > -0.1 && (double) base.velocity.Y < 0.1)
                    {
                        base.velocity.Y = 0f;
                    }
                }
                else
                {
                    HitSound = SoundID.NPCHit4;
                    damage = (int) ((double) defDamage * 1.5);
                    defense = defDefense + 18;
                    if (this.ai[1] == 0f)
                    {
                        var num454 = 4f;
                        var num455 = 0.1f;
                        var num456 = 1;
                        if (base.position.X + (float) (base.width / 2) <
                            Main.player[target].position.X + (float) Main.player[target].width)
                        {
                            num456 = -1;
                        }

                        var vector44 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        var num457 = Main.player[target].position.X + (float) (Main.player[target].width / 2) +
                                       (float) (num456 * 180) - vector44.X;
                        var num458 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                       vector44.Y;
                        var num459 = (float) Math.Sqrt((double) (num457 * num457 + num458 * num458));
                        if (Main.expertMode)
                        {
                            if (num459 > 300f)
                            {
                                num454 += 0.5f;
                            }

                            if (num459 > 400f)
                            {
                                num454 += 0.5f;
                            }

                            if (num459 > 500f)
                            {
                                num454 += 0.55f;
                            }

                            if (num459 > 600f)
                            {
                                num454 += 0.55f;
                            }

                            if (num459 > 700f)
                            {
                                num454 += 0.6f;
                            }

                            if (num459 > 800f)
                            {
                                num454 += 0.6f;
                            }
                        }

                        num459 = num454 / num459;
                        num457 *= num459;
                        num458 *= num459;
                        if (base.velocity.X < num457)
                        {
                            base.velocity.X += num455;
                            if (base.velocity.X < 0f && num457 > 0f)
                            {
                                base.velocity.X += num455;
                            }
                        }
                        else if (base.velocity.X > num457)
                        {
                            base.velocity.X -= num455;
                            if (base.velocity.X > 0f && num457 < 0f)
                            {
                                base.velocity.X -= num455;
                            }
                        }

                        if (base.velocity.Y < num458)
                        {
                            base.velocity.Y += num455;
                            if (base.velocity.Y < 0f && num458 > 0f)
                            {
                                base.velocity.Y += num455;
                            }
                        }
                        else if (base.velocity.Y > num458)
                        {
                            base.velocity.Y -= num455;
                            if (base.velocity.Y > 0f && num458 < 0f)
                            {
                                base.velocity.Y -= num455;
                            }
                        }

                        this.ai[2] += 1f;
                        if (this.ai[2] >= 400f)
                        {
                            this.ai[1] = 1f;
                            this.ai[2] = 0f;
                            this.ai[3] = 0f;
                            target = 255;
                            netUpdate = true;
                        }

                        if (Collision.CanHit(base.position, base.width, base.height, Main.player[target].position,
                            Main.player[target].width, Main.player[target].height))
                        {
                            localAI[2] += 1f;
                            if (localAI[2] > 22f)
                            {
                                localAI[2] = 0f;
                                Main.PlaySound(SoundID.Item34, base.position);
                            }

                            if (Main.netMode != 1)
                            {
                                localAI[1] += 1f;
                                if ((double) life < (double) lifeMax * 0.75)
                                {
                                    localAI[1] += 1f;
                                }

                                if ((double) life < (double) lifeMax * 0.5)
                                {
                                    localAI[1] += 1f;
                                }

                                if ((double) life < (double) lifeMax * 0.25)
                                {
                                    localAI[1] += 1f;
                                }

                                if ((double) life < (double) lifeMax * 0.1)
                                {
                                    localAI[1] += 2f;
                                }

                                if (localAI[1] > 8f)
                                {
                                    localAI[1] = 0f;
                                    var num460 = 6f;
                                    var num461 = 30;
                                    if (Main.expertMode)
                                    {
                                        num461 = 27;
                                    }

                                    var num462 = 101;
                                    vector44 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                        base.position.Y + (float) base.height * 0.5f);
                                    num457 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                             vector44.X;
                                    num458 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                             vector44.Y;
                                    num459 = (float) Math.Sqrt((double) (num457 * num457 + num458 * num458));
                                    num459 = num460 / num459;
                                    num457 *= num459;
                                    num458 *= num459;
                                    num458 += (float) Main.rand.Next(-40, 41) * 0.01f;
                                    num457 += (float) Main.rand.Next(-40, 41) * 0.01f;
                                    num458 += base.velocity.Y * 0.5f;
                                    num457 += base.velocity.X * 0.5f;
                                    vector44.X -= num457 * 1f;
                                    vector44.Y -= num458 * 1f;
                                    Projectile.NewProjectile(vector44.X, vector44.Y, num457, num458, num462, num461, 0f,
                                        Main.myPlayer, 0f, 0f);
                                }
                            }
                        }
                    }
                    else if (this.ai[1] == 1f)
                    {
                        Main.PlaySound(15, (int) base.position.X, (int) base.position.Y, 0, 1f, 0f);
                        rotation = num435;
                        var num463 = 14f;
                        if (Main.expertMode)
                        {
                            num463 += 2.5f;
                        }

                        var vector45 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        var num464 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                       vector45.X;
                        var num465 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                       vector45.Y;
                        var num466 = (float) Math.Sqrt((double) (num464 * num464 + num465 * num465));
                        num466 = num463 / num466;
                        base.velocity.X = num464 * num466;
                        base.velocity.Y = num465 * num466;
                        this.ai[1] = 2f;
                    }
                    else if (this.ai[1] == 2f)
                    {
                        this.ai[2] += 1f;
                        if (Main.expertMode)
                        {
                            this.ai[2] += 0.5f;
                        }

                        if (this.ai[2] >= 50f)
                        {
                            base.velocity.X *= 0.93f;
                            base.velocity.Y *= 0.93f;
                            if ((double) base.velocity.X > -0.1 && (double) base.velocity.X < 0.1)
                            {
                                base.velocity.X = 0f;
                            }

                            if ((double) base.velocity.Y > -0.1 && (double) base.velocity.Y < 0.1)
                            {
                                base.velocity.Y = 0f;
                            }
                        }
                        else
                        {
                            rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) - 1.57f;
                        }

                        if (this.ai[2] >= 80f)
                        {
                            this.ai[3] += 1f;
                            this.ai[2] = 0f;
                            target = 255;
                            rotation = num435;
                            if (this.ai[3] >= 6f)
                            {
                                this.ai[1] = 0f;
                                this.ai[3] = 0f;
                            }
                            else
                            {
                                this.ai[1] = 1f;
                            }
                        }
                    }
                }
            }
            else if (aiStyle == 32)
            {
                damage = defDamage;
                defense = defDefense;
                if (this.ai[0] == 0f && Main.netMode != 1)
                {
                    TargetClosest(true);
                    this.ai[0] = 1f;
                    var num467 = NewNPC((int) (base.position.X + (float) (base.width / 2)),
                        (int) base.position.Y + base.height / 2, 128, whoAmI, 0f, 0f, 0f, 0f, 255);
                    Main.npc[num467].ai[0] = -1f;
                    Main.npc[num467].ai[1] = (float) whoAmI;
                    Main.npc[num467].target = target;
                    Main.npc[num467].netUpdate = true;
                    num467 = NewNPC((int) (base.position.X + (float) (base.width / 2)),
                        (int) base.position.Y + base.height / 2, 129, whoAmI, 0f, 0f, 0f, 0f, 255);
                    Main.npc[num467].ai[0] = 1f;
                    Main.npc[num467].ai[1] = (float) whoAmI;
                    Main.npc[num467].target = target;
                    Main.npc[num467].netUpdate = true;
                    num467 = NewNPC((int) (base.position.X + (float) (base.width / 2)),
                        (int) base.position.Y + base.height / 2, 130, whoAmI, 0f, 0f, 0f, 0f, 255);
                    Main.npc[num467].ai[0] = -1f;
                    Main.npc[num467].ai[1] = (float) whoAmI;
                    Main.npc[num467].target = target;
                    Main.npc[num467].ai[3] = 150f;
                    Main.npc[num467].netUpdate = true;
                    num467 = NewNPC((int) (base.position.X + (float) (base.width / 2)),
                        (int) base.position.Y + base.height / 2, 131, whoAmI, 0f, 0f, 0f, 0f, 255);
                    Main.npc[num467].ai[0] = 1f;
                    Main.npc[num467].ai[1] = (float) whoAmI;
                    Main.npc[num467].target = target;
                    Main.npc[num467].netUpdate = true;
                    Main.npc[num467].ai[3] = 150f;
                }

                if (Main.player[target].dead || Math.Abs(base.position.X - Main.player[target].position.X) > 6000f ||
                    Math.Abs(base.position.Y - Main.player[target].position.Y) > 6000f)
                {
                    TargetClosest(true);
                    if (Main.player[target].dead ||
                        Math.Abs(base.position.X - Main.player[target].position.X) > 6000f ||
                        Math.Abs(base.position.Y - Main.player[target].position.Y) > 6000f)
                    {
                        this.ai[1] = 3f;
                    }
                }

                if (Main.dayTime && this.ai[1] != 3f && this.ai[1] != 2f)
                {
                    this.ai[1] = 2f;
                    Main.PlaySound(15, (int) base.position.X, (int) base.position.Y, 0, 1f, 0f);
                }

                if (this.ai[1] == 0f)
                {
                    this.ai[2] += 1f;
                    if (this.ai[2] >= 600f)
                    {
                        this.ai[2] = 0f;
                        this.ai[1] = 1f;
                        TargetClosest(true);
                        netUpdate = true;
                    }

                    rotation = base.velocity.X / 15f;
                    if (base.position.Y > Main.player[target].position.Y - 200f)
                    {
                        if (base.velocity.Y > 0f)
                        {
                            base.velocity.Y *= 0.98f;
                        }

                        base.velocity.Y -= 0.1f;
                        if (base.velocity.Y > 2f)
                        {
                            base.velocity.Y = 2f;
                        }
                    }
                    else if (base.position.Y < Main.player[target].position.Y - 500f)
                    {
                        if (base.velocity.Y < 0f)
                        {
                            base.velocity.Y *= 0.98f;
                        }

                        base.velocity.Y += 0.1f;
                        if (base.velocity.Y < -2f)
                        {
                            base.velocity.Y = -2f;
                        }
                    }

                    if (base.position.X + (float) (base.width / 2) > Main.player[target].position.X +
                        (float) (Main.player[target].width / 2) + 100f)
                    {
                        if (base.velocity.X > 0f)
                        {
                            base.velocity.X *= 0.98f;
                        }

                        base.velocity.X -= 0.1f;
                        if (base.velocity.X > 8f)
                        {
                            base.velocity.X = 8f;
                        }
                    }

                    if (base.position.X + (float) (base.width / 2) < Main.player[target].position.X +
                        (float) (Main.player[target].width / 2) - 100f)
                    {
                        if (base.velocity.X < 0f)
                        {
                            base.velocity.X *= 0.98f;
                        }

                        base.velocity.X += 0.1f;
                        if (base.velocity.X < -8f)
                        {
                            base.velocity.X = -8f;
                        }
                    }
                }
                else if (this.ai[1] == 1f)
                {
                    defense *= 2;
                    damage *= 2;
                    this.ai[2] += 1f;
                    if (this.ai[2] == 2f)
                    {
                        Main.PlaySound(15, (int) base.position.X, (int) base.position.Y, 0, 1f, 0f);
                    }

                    if (this.ai[2] >= 400f)
                    {
                        this.ai[2] = 0f;
                        this.ai[1] = 0f;
                    }

                    rotation += (float) base.direction * 0.3f;
                    var vector46 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num468 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                   vector46.X;
                    var num469 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                   vector46.Y;
                    var num470 = (float) Math.Sqrt((double) (num468 * num468 + num469 * num469));
                    num470 = 2f / num470;
                    base.velocity.X = num468 * num470;
                    base.velocity.Y = num469 * num470;
                }
                else if (this.ai[1] == 2f)
                {
                    damage = 1000;
                    defense = 9999;
                    rotation += (float) base.direction * 0.3f;
                    var vector47 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num471 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                   vector47.X;
                    var num472 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                   vector47.Y;
                    var num473 = (float) Math.Sqrt((double) (num471 * num471 + num472 * num472));
                    var num474 = 10f;
                    num474 += num473 / 100f;
                    if (num474 < 8f)
                    {
                        num474 = 8f;
                    }

                    if (num474 > 32f)
                    {
                        num474 = 32f;
                    }

                    num473 = num474 / num473;
                    base.velocity.X = num471 * num473;
                    base.velocity.Y = num472 * num473;
                }
                else if (this.ai[1] == 3f)
                {
                    base.velocity.Y += 0.1f;
                    if (base.velocity.Y < 0f)
                    {
                        base.velocity.Y *= 0.95f;
                    }

                    base.velocity.X *= 0.95f;
                    if (timeLeft > 500)
                    {
                        timeLeft = 500;
                    }
                }
            }
            else if (aiStyle == 33)
            {
                var vector48 = new Vector2(base.position.X + (float) base.width * 0.5f,
                    base.position.Y + (float) base.height * 0.5f);
                var num475 = Main.npc[(int) this.ai[1]].position.X + (float) (Main.npc[(int) this.ai[1]].width / 2) -
                               200f * this.ai[0] - vector48.X;
                var num476 = Main.npc[(int) this.ai[1]].position.Y + 230f - vector48.Y;
                var num477 = (float) Math.Sqrt((double) (num475 * num475 + num476 * num476));
                if (this.ai[2] != 99f)
                {
                    if (num477 > 800f)
                    {
                        this.ai[2] = 99f;
                    }
                }
                else if (num477 < 400f)
                {
                    this.ai[2] = 0f;
                }

                spriteDirection = -(int) this.ai[0];
                if (!Main.npc[(int) this.ai[1]].active || Main.npc[(int) this.ai[1]].aiStyle != 32)
                {
                    this.ai[2] += 10f;
                    if (this.ai[2] > 50f || Main.netMode != 2)
                    {
                        life = -1;
                        HitEffect(0, 10.0);
                        active = false;
                    }
                }

                if (this.ai[2] == 99f)
                {
                    if (base.position.Y > Main.npc[(int) this.ai[1]].position.Y)
                    {
                        if (base.velocity.Y > 0f)
                        {
                            base.velocity.Y *= 0.96f;
                        }

                        base.velocity.Y -= 0.1f;
                        if (base.velocity.Y > 8f)
                        {
                            base.velocity.Y = 8f;
                        }
                    }
                    else if (base.position.Y < Main.npc[(int) this.ai[1]].position.Y)
                    {
                        if (base.velocity.Y < 0f)
                        {
                            base.velocity.Y *= 0.96f;
                        }

                        base.velocity.Y += 0.1f;
                        if (base.velocity.Y < -8f)
                        {
                            base.velocity.Y = -8f;
                        }
                    }

                    if (base.position.X + (float) (base.width / 2) > Main.npc[(int) this.ai[1]].position.X +
                        (float) (Main.npc[(int) this.ai[1]].width / 2))
                    {
                        if (base.velocity.X > 0f)
                        {
                            base.velocity.X *= 0.96f;
                        }

                        base.velocity.X -= 0.5f;
                        if (base.velocity.X > 12f)
                        {
                            base.velocity.X = 12f;
                        }
                    }

                    if (base.position.X + (float) (base.width / 2) < Main.npc[(int) this.ai[1]].position.X +
                        (float) (Main.npc[(int) this.ai[1]].width / 2))
                    {
                        if (base.velocity.X < 0f)
                        {
                            base.velocity.X *= 0.96f;
                        }

                        base.velocity.X += 0.5f;
                        if (base.velocity.X < -12f)
                        {
                            base.velocity.X = -12f;
                        }
                    }
                }
                else if (this.ai[2] == 0f || this.ai[2] == 3f)
                {
                    if (Main.npc[(int) this.ai[1]].ai[1] == 3f && timeLeft > 10)
                    {
                        timeLeft = 10;
                    }

                    if (Main.npc[(int) this.ai[1]].ai[1] != 0f)
                    {
                        TargetClosest(true);
                        if (Main.player[target].dead)
                        {
                            base.velocity.Y += 0.1f;
                            if (base.velocity.Y > 16f)
                            {
                                base.velocity.Y = 16f;
                            }
                        }
                        else
                        {
                            var vector49 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                base.position.Y + (float) base.height * 0.5f);
                            var num478 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                           vector49.X;
                            var num479 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                           vector49.Y;
                            var num480 = (float) Math.Sqrt((double) (num478 * num478 + num479 * num479));
                            num480 = 7f / num480;
                            num478 *= num480;
                            num479 *= num480;
                            rotation = (float) Math.Atan2((double) num479, (double) num478) - 1.57f;
                            if (base.velocity.X > num478)
                            {
                                if (base.velocity.X > 0f)
                                {
                                    base.velocity.X *= 0.97f;
                                }

                                base.velocity.X -= 0.05f;
                            }

                            if (base.velocity.X < num478)
                            {
                                if (base.velocity.X < 0f)
                                {
                                    base.velocity.X *= 0.97f;
                                }

                                base.velocity.X += 0.05f;
                            }

                            if (base.velocity.Y > num479)
                            {
                                if (base.velocity.Y > 0f)
                                {
                                    base.velocity.Y *= 0.97f;
                                }

                                base.velocity.Y -= 0.05f;
                            }

                            if (base.velocity.Y < num479)
                            {
                                if (base.velocity.Y < 0f)
                                {
                                    base.velocity.Y *= 0.97f;
                                }

                                base.velocity.Y += 0.05f;
                            }
                        }

                        this.ai[3] += 1f;
                        if (this.ai[3] >= 600f)
                        {
                            this.ai[2] = 0f;
                            this.ai[3] = 0f;
                            netUpdate = true;
                        }
                    }
                    else
                    {
                        this.ai[3] += 1f;
                        if (this.ai[3] >= 300f)
                        {
                            this.ai[2] += 1f;
                            this.ai[3] = 0f;
                            netUpdate = true;
                        }

                        if (base.position.Y > Main.npc[(int) this.ai[1]].position.Y + 320f)
                        {
                            if (base.velocity.Y > 0f)
                            {
                                base.velocity.Y *= 0.96f;
                            }

                            base.velocity.Y -= 0.04f;
                            if (base.velocity.Y > 3f)
                            {
                                base.velocity.Y = 3f;
                            }
                        }
                        else if (base.position.Y < Main.npc[(int) this.ai[1]].position.Y + 260f)
                        {
                            if (base.velocity.Y < 0f)
                            {
                                base.velocity.Y *= 0.96f;
                            }

                            base.velocity.Y += 0.04f;
                            if (base.velocity.Y < -3f)
                            {
                                base.velocity.Y = -3f;
                            }
                        }

                        if (base.position.X + (float) (base.width / 2) > Main.npc[(int) this.ai[1]].position.X +
                            (float) (Main.npc[(int) this.ai[1]].width / 2))
                        {
                            if (base.velocity.X > 0f)
                            {
                                base.velocity.X *= 0.96f;
                            }

                            base.velocity.X -= 0.3f;
                            if (base.velocity.X > 12f)
                            {
                                base.velocity.X = 12f;
                            }
                        }

                        if (base.position.X + (float) (base.width / 2) < Main.npc[(int) this.ai[1]].position.X +
                            (float) (Main.npc[(int) this.ai[1]].width / 2) - 250f)
                        {
                            if (base.velocity.X < 0f)
                            {
                                base.velocity.X *= 0.96f;
                            }

                            base.velocity.X += 0.3f;
                            if (base.velocity.X < -12f)
                            {
                                base.velocity.X = -12f;
                            }
                        }
                    }

                    var vector50 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num481 = Main.npc[(int) this.ai[1]].position.X +
                                   (float) (Main.npc[(int) this.ai[1]].width / 2) - 200f * this.ai[0] - vector50.X;
                    var num482 = Main.npc[(int) this.ai[1]].position.Y + 230f - vector50.Y;
                    Math.Sqrt((double) (num481 * num481 + num482 * num482));
                    rotation = (float) Math.Atan2((double) num482, (double) num481) + 1.57f;
                }
                else if (this.ai[2] == 1f)
                {
                    var vector51 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num483 = Main.npc[(int) this.ai[1]].position.X +
                                   (float) (Main.npc[(int) this.ai[1]].width / 2) - 200f * this.ai[0] - vector51.X;
                    var num484 = Main.npc[(int) this.ai[1]].position.Y + 230f - vector51.Y;
                    var num485 = (float) Math.Sqrt((double) (num483 * num483 + num484 * num484));
                    rotation = (float) Math.Atan2((double) num484, (double) num483) + 1.57f;
                    base.velocity.X *= 0.95f;
                    base.velocity.Y -= 0.1f;
                    if (base.velocity.Y < -8f)
                    {
                        base.velocity.Y = -8f;
                    }

                    if (base.position.Y < Main.npc[(int) this.ai[1]].position.Y - 200f)
                    {
                        TargetClosest(true);
                        this.ai[2] = 2f;
                        vector51 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        num483 = Main.player[target].position.X + (float) (Main.player[target].width / 2) - vector51.X;
                        num484 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) - vector51.Y;
                        num485 = (float) Math.Sqrt((double) (num483 * num483 + num484 * num484));
                        num485 = 22f / num485;
                        base.velocity.X = num483 * num485;
                        base.velocity.Y = num484 * num485;
                        netUpdate = true;
                    }
                }
                else if (this.ai[2] == 2f)
                {
                    if (base.position.Y > Main.player[target].position.Y || base.velocity.Y < 0f)
                    {
                        this.ai[2] = 3f;
                    }
                }
                else if (this.ai[2] == 4f)
                {
                    TargetClosest(true);
                    var vector52 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num486 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                   vector52.X;
                    var num487 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                   vector52.Y;
                    var num488 = (float) Math.Sqrt((double) (num486 * num486 + num487 * num487));
                    num488 = 7f / num488;
                    num486 *= num488;
                    num487 *= num488;
                    if (base.velocity.X > num486)
                    {
                        if (base.velocity.X > 0f)
                        {
                            base.velocity.X *= 0.97f;
                        }

                        base.velocity.X -= 0.05f;
                    }

                    if (base.velocity.X < num486)
                    {
                        if (base.velocity.X < 0f)
                        {
                            base.velocity.X *= 0.97f;
                        }

                        base.velocity.X += 0.05f;
                    }

                    if (base.velocity.Y > num487)
                    {
                        if (base.velocity.Y > 0f)
                        {
                            base.velocity.Y *= 0.97f;
                        }

                        base.velocity.Y -= 0.05f;
                    }

                    if (base.velocity.Y < num487)
                    {
                        if (base.velocity.Y < 0f)
                        {
                            base.velocity.Y *= 0.97f;
                        }

                        base.velocity.Y += 0.05f;
                    }

                    this.ai[3] += 1f;
                    if (this.ai[3] >= 600f)
                    {
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                        netUpdate = true;
                    }

                    vector52 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    num486 = Main.npc[(int) this.ai[1]].position.X + (float) (Main.npc[(int) this.ai[1]].width / 2) -
                             200f * this.ai[0] - vector52.X;
                    num487 = Main.npc[(int) this.ai[1]].position.Y + 230f - vector52.Y;
                    num488 = (float) Math.Sqrt((double) (num486 * num486 + num487 * num487));
                    rotation = (float) Math.Atan2((double) num487, (double) num486) + 1.57f;
                }
                else if (this.ai[2] == 5f &&
                         ((base.velocity.X > 0f && base.position.X + (float) (base.width / 2) >
                           Main.player[target].position.X + (float) (Main.player[target].width / 2)) ||
                          (base.velocity.X < 0f && base.position.X + (float) (base.width / 2) <
                           Main.player[target].position.X + (float) (Main.player[target].width / 2))))
                {
                    this.ai[2] = 0f;
                }
            }
            else if (aiStyle == 34)
            {
                spriteDirection = -(int) this.ai[0];
                var vector53 = new Vector2(base.position.X + (float) base.width * 0.5f,
                    base.position.Y + (float) base.height * 0.5f);
                var num489 = Main.npc[(int) this.ai[1]].position.X + (float) (Main.npc[(int) this.ai[1]].width / 2) -
                               200f * this.ai[0] - vector53.X;
                var num490 = Main.npc[(int) this.ai[1]].position.Y + 230f - vector53.Y;
                var num491 = (float) Math.Sqrt((double) (num489 * num489 + num490 * num490));
                if (this.ai[2] != 99f)
                {
                    if (num491 > 800f)
                    {
                        this.ai[2] = 99f;
                    }
                }
                else if (num491 < 400f)
                {
                    this.ai[2] = 0f;
                }

                if (!Main.npc[(int) this.ai[1]].active || Main.npc[(int) this.ai[1]].aiStyle != 32)
                {
                    this.ai[2] += 10f;
                    if (this.ai[2] > 50f || Main.netMode != 2)
                    {
                        life = -1;
                        HitEffect(0, 10.0);
                        active = false;
                    }
                }

                if (this.ai[2] == 99f)
                {
                    if (base.position.Y > Main.npc[(int) this.ai[1]].position.Y)
                    {
                        if (base.velocity.Y > 0f)
                        {
                            base.velocity.Y *= 0.96f;
                        }

                        base.velocity.Y -= 0.1f;
                        if (base.velocity.Y > 8f)
                        {
                            base.velocity.Y = 8f;
                        }
                    }
                    else if (base.position.Y < Main.npc[(int) this.ai[1]].position.Y)
                    {
                        if (base.velocity.Y < 0f)
                        {
                            base.velocity.Y *= 0.96f;
                        }

                        base.velocity.Y += 0.1f;
                        if (base.velocity.Y < -8f)
                        {
                            base.velocity.Y = -8f;
                        }
                    }

                    if (base.position.X + (float) (base.width / 2) > Main.npc[(int) this.ai[1]].position.X +
                        (float) (Main.npc[(int) this.ai[1]].width / 2))
                    {
                        if (base.velocity.X > 0f)
                        {
                            base.velocity.X *= 0.96f;
                        }

                        base.velocity.X -= 0.5f;
                        if (base.velocity.X > 12f)
                        {
                            base.velocity.X = 12f;
                        }
                    }

                    if (base.position.X + (float) (base.width / 2) < Main.npc[(int) this.ai[1]].position.X +
                        (float) (Main.npc[(int) this.ai[1]].width / 2))
                    {
                        if (base.velocity.X < 0f)
                        {
                            base.velocity.X *= 0.96f;
                        }

                        base.velocity.X += 0.5f;
                        if (base.velocity.X < -12f)
                        {
                            base.velocity.X = -12f;
                        }
                    }
                }
                else if (this.ai[2] == 0f || this.ai[2] == 3f)
                {
                    if (Main.npc[(int) this.ai[1]].ai[1] == 3f && timeLeft > 10)
                    {
                        timeLeft = 10;
                    }

                    if (Main.npc[(int) this.ai[1]].ai[1] != 0f)
                    {
                        TargetClosest(true);
                        TargetClosest(true);
                        if (Main.player[target].dead)
                        {
                            base.velocity.Y += 0.1f;
                            if (base.velocity.Y > 16f)
                            {
                                base.velocity.Y = 16f;
                            }
                        }
                        else
                        {
                            var vector54 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                base.position.Y + (float) base.height * 0.5f);
                            var num492 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                           vector54.X;
                            var num493 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                           vector54.Y;
                            var num494 = (float) Math.Sqrt((double) (num492 * num492 + num493 * num493));
                            num494 = 12f / num494;
                            num492 *= num494;
                            num493 *= num494;
                            rotation = (float) Math.Atan2((double) num493, (double) num492) - 1.57f;
                            if (!(Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < 2f))
                            {
                                base.velocity *= 0.97f;
                            }
                            else
                            {
                                rotation = (float) Math.Atan2((double) num493, (double) num492) - 1.57f;
                                base.velocity.X = num492;
                                base.velocity.Y = num493;
                                netUpdate = true;
                            }

                            this.ai[3] += 1f;
                            if (this.ai[3] >= 600f)
                            {
                                this.ai[2] = 0f;
                                this.ai[3] = 0f;
                                netUpdate = true;
                            }
                        }
                    }
                    else
                    {
                        this.ai[3] += 1f;
                        if (this.ai[3] >= 600f)
                        {
                            this.ai[2] += 1f;
                            this.ai[3] = 0f;
                            netUpdate = true;
                        }

                        if (base.position.Y > Main.npc[(int) this.ai[1]].position.Y + 300f)
                        {
                            if (base.velocity.Y > 0f)
                            {
                                base.velocity.Y *= 0.96f;
                            }

                            base.velocity.Y -= 0.1f;
                            if (base.velocity.Y > 3f)
                            {
                                base.velocity.Y = 3f;
                            }
                        }
                        else if (base.position.Y < Main.npc[(int) this.ai[1]].position.Y + 230f)
                        {
                            if (base.velocity.Y < 0f)
                            {
                                base.velocity.Y *= 0.96f;
                            }

                            base.velocity.Y += 0.1f;
                            if (base.velocity.Y < -3f)
                            {
                                base.velocity.Y = -3f;
                            }
                        }

                        if (base.position.X + (float) (base.width / 2) > Main.npc[(int) this.ai[1]].position.X +
                            (float) (Main.npc[(int) this.ai[1]].width / 2) + 250f)
                        {
                            if (base.velocity.X > 0f)
                            {
                                base.velocity.X *= 0.94f;
                            }

                            base.velocity.X -= 0.3f;
                            if (base.velocity.X > 9f)
                            {
                                base.velocity.X = 9f;
                            }
                        }

                        if (base.position.X + (float) (base.width / 2) < Main.npc[(int) this.ai[1]].position.X +
                            (float) (Main.npc[(int) this.ai[1]].width / 2))
                        {
                            if (base.velocity.X < 0f)
                            {
                                base.velocity.X *= 0.94f;
                            }

                            base.velocity.X += 0.2f;
                            if (base.velocity.X < -8f)
                            {
                                base.velocity.X = -8f;
                            }
                        }
                    }

                    var vector55 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num495 = Main.npc[(int) this.ai[1]].position.X +
                                   (float) (Main.npc[(int) this.ai[1]].width / 2) - 200f * this.ai[0] - vector55.X;
                    var num496 = Main.npc[(int) this.ai[1]].position.Y + 230f - vector55.Y;
                    Math.Sqrt((double) (num495 * num495 + num496 * num496));
                    rotation = (float) Math.Atan2((double) num496, (double) num495) + 1.57f;
                }
                else if (this.ai[2] == 1f)
                {
                    if (base.velocity.Y > 0f)
                    {
                        base.velocity.Y *= 0.9f;
                    }

                    var vector56 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num497 = Main.npc[(int) this.ai[1]].position.X +
                                   (float) (Main.npc[(int) this.ai[1]].width / 2) - 280f * this.ai[0] - vector56.X;
                    var num498 = Main.npc[(int) this.ai[1]].position.Y + 230f - vector56.Y;
                    var num499 = (float) Math.Sqrt((double) (num497 * num497 + num498 * num498));
                    rotation = (float) Math.Atan2((double) num498, (double) num497) + 1.57f;
                    base.velocity.X = (base.velocity.X * 5f + Main.npc[(int) this.ai[1]].velocity.X) / 6f;
                    base.velocity.X += 0.5f;
                    base.velocity.Y -= 0.5f;
                    if (base.velocity.Y < -9f)
                    {
                        base.velocity.Y = -9f;
                    }

                    if (base.position.Y < Main.npc[(int) this.ai[1]].position.Y - 280f)
                    {
                        TargetClosest(true);
                        this.ai[2] = 2f;
                        vector56 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        num497 = Main.player[target].position.X + (float) (Main.player[target].width / 2) - vector56.X;
                        num498 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) - vector56.Y;
                        num499 = (float) Math.Sqrt((double) (num497 * num497 + num498 * num498));
                        num499 = 20f / num499;
                        base.velocity.X = num497 * num499;
                        base.velocity.Y = num498 * num499;
                        netUpdate = true;
                    }
                }
                else if (this.ai[2] == 2f)
                {
                    if (base.position.Y > Main.player[target].position.Y || base.velocity.Y < 0f)
                    {
                        if (this.ai[3] >= 4f)
                        {
                            this.ai[2] = 3f;
                            this.ai[3] = 0f;
                        }
                        else
                        {
                            this.ai[2] = 1f;
                            this.ai[3] += 1f;
                        }
                    }
                }
                else if (this.ai[2] == 4f)
                {
                    var vector57 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num500 = Main.npc[(int) this.ai[1]].position.X +
                                   (float) (Main.npc[(int) this.ai[1]].width / 2) - 200f * this.ai[0] - vector57.X;
                    var num501 = Main.npc[(int) this.ai[1]].position.Y + 230f - vector57.Y;
                    var num502 = (float) Math.Sqrt((double) (num500 * num500 + num501 * num501));
                    rotation = (float) Math.Atan2((double) num501, (double) num500) + 1.57f;
                    base.velocity.Y = (base.velocity.Y * 5f + Main.npc[(int) this.ai[1]].velocity.Y) / 6f;
                    base.velocity.X += 0.5f;
                    if (base.velocity.X > 12f)
                    {
                        base.velocity.X = 12f;
                    }

                    if (base.position.X + (float) (base.width / 2) < Main.npc[(int) this.ai[1]].position.X +
                        (float) (Main.npc[(int) this.ai[1]].width / 2) - 500f ||
                        base.position.X + (float) (base.width / 2) > Main.npc[(int) this.ai[1]].position.X +
                        (float) (Main.npc[(int) this.ai[1]].width / 2) + 500f)
                    {
                        TargetClosest(true);
                        this.ai[2] = 5f;
                        vector57 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        num500 = Main.player[target].position.X + (float) (Main.player[target].width / 2) - vector57.X;
                        num501 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) - vector57.Y;
                        num502 = (float) Math.Sqrt((double) (num500 * num500 + num501 * num501));
                        num502 = 17f / num502;
                        base.velocity.X = num500 * num502;
                        base.velocity.Y = num501 * num502;
                        netUpdate = true;
                    }
                }
                else if (this.ai[2] == 5f && base.position.X + (float) (base.width / 2) <
                         Main.player[target].position.X + (float) (Main.player[target].width / 2) - 100f)
                {
                    if (this.ai[3] >= 4f)
                    {
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                    }
                    else
                    {
                        this.ai[2] = 4f;
                        this.ai[3] += 1f;
                    }
                }
            }
            else if (aiStyle == 35)
            {
                spriteDirection = -(int) this.ai[0];
                if (!Main.npc[(int) this.ai[1]].active || Main.npc[(int) this.ai[1]].aiStyle != 32)
                {
                    this.ai[2] += 10f;
                    if (this.ai[2] > 50f || Main.netMode != 2)
                    {
                        life = -1;
                        HitEffect(0, 10.0);
                        active = false;
                    }
                }

                if (this.ai[2] == 0f)
                {
                    if (Main.npc[(int) this.ai[1]].ai[1] == 3f && timeLeft > 10)
                    {
                        timeLeft = 10;
                    }

                    if (Main.npc[(int) this.ai[1]].ai[1] != 0f)
                    {
                        localAI[0] += 2f;
                        if (base.position.Y > Main.npc[(int) this.ai[1]].position.Y - 100f)
                        {
                            if (base.velocity.Y > 0f)
                            {
                                base.velocity.Y *= 0.96f;
                            }

                            base.velocity.Y -= 0.07f;
                            if (base.velocity.Y > 6f)
                            {
                                base.velocity.Y = 6f;
                            }
                        }
                        else if (base.position.Y < Main.npc[(int) this.ai[1]].position.Y - 100f)
                        {
                            if (base.velocity.Y < 0f)
                            {
                                base.velocity.Y *= 0.96f;
                            }

                            base.velocity.Y += 0.07f;
                            if (base.velocity.Y < -6f)
                            {
                                base.velocity.Y = -6f;
                            }
                        }

                        if (base.position.X + (float) (base.width / 2) > Main.npc[(int) this.ai[1]].position.X +
                            (float) (Main.npc[(int) this.ai[1]].width / 2) - 120f * this.ai[0])
                        {
                            if (base.velocity.X > 0f)
                            {
                                base.velocity.X *= 0.96f;
                            }

                            base.velocity.X -= 0.1f;
                            if (base.velocity.X > 8f)
                            {
                                base.velocity.X = 8f;
                            }
                        }

                        if (base.position.X + (float) (base.width / 2) < Main.npc[(int) this.ai[1]].position.X +
                            (float) (Main.npc[(int) this.ai[1]].width / 2) - 120f * this.ai[0])
                        {
                            if (base.velocity.X < 0f)
                            {
                                base.velocity.X *= 0.96f;
                            }

                            base.velocity.X += 0.1f;
                            if (base.velocity.X < -8f)
                            {
                                base.velocity.X = -8f;
                            }
                        }
                    }
                    else
                    {
                        this.ai[3] += 1f;
                        if (this.ai[3] >= 1100f)
                        {
                            localAI[0] = 0f;
                            this.ai[2] = 1f;
                            this.ai[3] = 0f;
                            netUpdate = true;
                        }

                        if (base.position.Y > Main.npc[(int) this.ai[1]].position.Y - 150f)
                        {
                            if (base.velocity.Y > 0f)
                            {
                                base.velocity.Y *= 0.96f;
                            }

                            base.velocity.Y -= 0.04f;
                            if (base.velocity.Y > 3f)
                            {
                                base.velocity.Y = 3f;
                            }
                        }
                        else if (base.position.Y < Main.npc[(int) this.ai[1]].position.Y - 150f)
                        {
                            if (base.velocity.Y < 0f)
                            {
                                base.velocity.Y *= 0.96f;
                            }

                            base.velocity.Y += 0.04f;
                            if (base.velocity.Y < -3f)
                            {
                                base.velocity.Y = -3f;
                            }
                        }

                        if (base.position.X + (float) (base.width / 2) > Main.npc[(int) this.ai[1]].position.X +
                            (float) (Main.npc[(int) this.ai[1]].width / 2) + 200f)
                        {
                            if (base.velocity.X > 0f)
                            {
                                base.velocity.X *= 0.96f;
                            }

                            base.velocity.X -= 0.2f;
                            if (base.velocity.X > 8f)
                            {
                                base.velocity.X = 8f;
                            }
                        }

                        if (base.position.X + (float) (base.width / 2) < Main.npc[(int) this.ai[1]].position.X +
                            (float) (Main.npc[(int) this.ai[1]].width / 2) + 160f)
                        {
                            if (base.velocity.X < 0f)
                            {
                                base.velocity.X *= 0.96f;
                            }

                            base.velocity.X += 0.2f;
                            if (base.velocity.X < -8f)
                            {
                                base.velocity.X = -8f;
                            }
                        }
                    }

                    var vector58 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num503 = Main.npc[(int) this.ai[1]].position.X +
                                   (float) (Main.npc[(int) this.ai[1]].width / 2) - 200f * this.ai[0] - vector58.X;
                    var num504 = Main.npc[(int) this.ai[1]].position.Y + 230f - vector58.Y;
                    var num505 = (float) Math.Sqrt((double) (num503 * num503 + num504 * num504));
                    rotation = (float) Math.Atan2((double) num504, (double) num503) + 1.57f;
                    if (Main.netMode != 1)
                    {
                        localAI[0] += 1f;
                        if (localAI[0] > 140f)
                        {
                            localAI[0] = 0f;
                            var num506 = 12f;
                            var num507 = 0;
                            var num508 = 102;
                            num505 = num506 / num505;
                            num503 = (0f - num503) * num505;
                            num504 = (0f - num504) * num505;
                            num503 += (float) Main.rand.Next(-40, 41) * 0.01f;
                            num504 += (float) Main.rand.Next(-40, 41) * 0.01f;
                            vector58.X += num503 * 4f;
                            vector58.Y += num504 * 4f;
                            Projectile.NewProjectile(vector58.X, vector58.Y, num503, num504, num508, num507, 0f,
                                Main.myPlayer, 0f, 0f);
                        }
                    }
                }
                else if (this.ai[2] == 1f)
                {
                    this.ai[3] += 1f;
                    if (this.ai[3] >= 300f)
                    {
                        localAI[0] = 0f;
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                        netUpdate = true;
                    }

                    var vector59 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num509 = Main.npc[(int) this.ai[1]].position.X +
                                   (float) (Main.npc[(int) this.ai[1]].width / 2) - vector59.X;
                    var num510 = Main.npc[(int) this.ai[1]].position.Y - vector59.Y;
                    num510 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) - 80f -
                             vector59.Y;
                    var num511 = (float) Math.Sqrt((double) (num509 * num509 + num510 * num510));
                    num511 = 6f / num511;
                    num509 *= num511;
                    num510 *= num511;
                    if (base.velocity.X > num509)
                    {
                        if (base.velocity.X > 0f)
                        {
                            base.velocity.X *= 0.9f;
                        }

                        base.velocity.X -= 0.04f;
                    }

                    if (base.velocity.X < num509)
                    {
                        if (base.velocity.X < 0f)
                        {
                            base.velocity.X *= 0.9f;
                        }

                        base.velocity.X += 0.04f;
                    }

                    if (base.velocity.Y > num510)
                    {
                        if (base.velocity.Y > 0f)
                        {
                            base.velocity.Y *= 0.9f;
                        }

                        base.velocity.Y -= 0.08f;
                    }

                    if (base.velocity.Y < num510)
                    {
                        if (base.velocity.Y < 0f)
                        {
                            base.velocity.Y *= 0.9f;
                        }

                        base.velocity.Y += 0.08f;
                    }

                    TargetClosest(true);
                    vector59 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    num509 = Main.player[target].position.X + (float) (Main.player[target].width / 2) - vector59.X;
                    num510 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) - vector59.Y;
                    num511 = (float) Math.Sqrt((double) (num509 * num509 + num510 * num510));
                    rotation = (float) Math.Atan2((double) num510, (double) num509) - 1.57f;
                    if (Main.netMode != 1)
                    {
                        localAI[0] += 1f;
                        if (localAI[0] > 40f)
                        {
                            localAI[0] = 0f;
                            var num512 = 10f;
                            var num513 = 0;
                            var num514 = 102;
                            num511 = num512 / num511;
                            num509 *= num511;
                            num510 *= num511;
                            num509 += (float) Main.rand.Next(-40, 41) * 0.01f;
                            num510 += (float) Main.rand.Next(-40, 41) * 0.01f;
                            vector59.X += num509 * 4f;
                            vector59.Y += num510 * 4f;
                            Projectile.NewProjectile(vector59.X, vector59.Y, num509, num510, num514, num513, 0f,
                                Main.myPlayer, 0f, 0f);
                        }
                    }
                }
            }
            else if (aiStyle == 36)
            {
                spriteDirection = -(int) this.ai[0];
                if (!Main.npc[(int) this.ai[1]].active || Main.npc[(int) this.ai[1]].aiStyle != 32)
                {
                    this.ai[2] += 10f;
                    if (this.ai[2] > 50f || Main.netMode != 2)
                    {
                        life = -1;
                        HitEffect(0, 10.0);
                        active = false;
                    }
                }

                if (this.ai[2] == 0f || this.ai[2] == 3f)
                {
                    if (Main.npc[(int) this.ai[1]].ai[1] == 3f && timeLeft > 10)
                    {
                        timeLeft = 10;
                    }

                    if (Main.npc[(int) this.ai[1]].ai[1] != 0f)
                    {
                        localAI[0] += 3f;
                        if (base.position.Y > Main.npc[(int) this.ai[1]].position.Y - 100f)
                        {
                            if (base.velocity.Y > 0f)
                            {
                                base.velocity.Y *= 0.96f;
                            }

                            base.velocity.Y -= 0.07f;
                            if (base.velocity.Y > 6f)
                            {
                                base.velocity.Y = 6f;
                            }
                        }
                        else if (base.position.Y < Main.npc[(int) this.ai[1]].position.Y - 100f)
                        {
                            if (base.velocity.Y < 0f)
                            {
                                base.velocity.Y *= 0.96f;
                            }

                            base.velocity.Y += 0.07f;
                            if (base.velocity.Y < -6f)
                            {
                                base.velocity.Y = -6f;
                            }
                        }

                        if (base.position.X + (float) (base.width / 2) > Main.npc[(int) this.ai[1]].position.X +
                            (float) (Main.npc[(int) this.ai[1]].width / 2) - 120f * this.ai[0])
                        {
                            if (base.velocity.X > 0f)
                            {
                                base.velocity.X *= 0.96f;
                            }

                            base.velocity.X -= 0.1f;
                            if (base.velocity.X > 8f)
                            {
                                base.velocity.X = 8f;
                            }
                        }

                        if (base.position.X + (float) (base.width / 2) < Main.npc[(int) this.ai[1]].position.X +
                            (float) (Main.npc[(int) this.ai[1]].width / 2) - 120f * this.ai[0])
                        {
                            if (base.velocity.X < 0f)
                            {
                                base.velocity.X *= 0.96f;
                            }

                            base.velocity.X += 0.1f;
                            if (base.velocity.X < -8f)
                            {
                                base.velocity.X = -8f;
                            }
                        }
                    }
                    else
                    {
                        this.ai[3] += 1f;
                        if (this.ai[3] >= 800f)
                        {
                            this.ai[2] += 1f;
                            this.ai[3] = 0f;
                            netUpdate = true;
                        }

                        if (base.position.Y > Main.npc[(int) this.ai[1]].position.Y - 100f)
                        {
                            if (base.velocity.Y > 0f)
                            {
                                base.velocity.Y *= 0.96f;
                            }

                            base.velocity.Y -= 0.1f;
                            if (base.velocity.Y > 3f)
                            {
                                base.velocity.Y = 3f;
                            }
                        }
                        else if (base.position.Y < Main.npc[(int) this.ai[1]].position.Y - 100f)
                        {
                            if (base.velocity.Y < 0f)
                            {
                                base.velocity.Y *= 0.96f;
                            }

                            base.velocity.Y += 0.1f;
                            if (base.velocity.Y < -3f)
                            {
                                base.velocity.Y = -3f;
                            }
                        }

                        if (base.position.X + (float) (base.width / 2) > Main.npc[(int) this.ai[1]].position.X +
                            (float) (Main.npc[(int) this.ai[1]].width / 2) - 180f * this.ai[0])
                        {
                            if (base.velocity.X > 0f)
                            {
                                base.velocity.X *= 0.96f;
                            }

                            base.velocity.X -= 0.14f;
                            if (base.velocity.X > 8f)
                            {
                                base.velocity.X = 8f;
                            }
                        }

                        if (base.position.X + (float) (base.width / 2) < Main.npc[(int) this.ai[1]].position.X +
                            (float) (Main.npc[(int) this.ai[1]].width / 2) - 180f * this.ai[0])
                        {
                            if (base.velocity.X < 0f)
                            {
                                base.velocity.X *= 0.96f;
                            }

                            base.velocity.X += 0.14f;
                            if (base.velocity.X < -8f)
                            {
                                base.velocity.X = -8f;
                            }
                        }
                    }

                    TargetClosest(true);
                    var vector60 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num515 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                   vector60.X;
                    var num516 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                   vector60.Y;
                    var num517 = (float) Math.Sqrt((double) (num515 * num515 + num516 * num516));
                    rotation = (float) Math.Atan2((double) num516, (double) num515) - 1.57f;
                    if (Main.netMode != 1)
                    {
                        localAI[0] += 1f;
                        if (localAI[0] > 200f)
                        {
                            localAI[0] = 0f;
                            var num518 = 8f;
                            var num519 = 25;
                            var num520 = 100;
                            num517 = num518 / num517;
                            num515 *= num517;
                            num516 *= num517;
                            num515 += (float) Main.rand.Next(-40, 41) * 0.05f;
                            num516 += (float) Main.rand.Next(-40, 41) * 0.05f;
                            vector60.X += num515 * 8f;
                            vector60.Y += num516 * 8f;
                            Projectile.NewProjectile(vector60.X, vector60.Y, num515, num516, num520, num519, 0f,
                                Main.myPlayer, 0f, 0f);
                        }
                    }
                }
                else if (this.ai[2] == 1f)
                {
                    this.ai[3] += 1f;
                    if (this.ai[3] >= 200f)
                    {
                        localAI[0] = 0f;
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                        netUpdate = true;
                    }

                    var vector61 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num521 = Main.player[target].position.X + (float) (Main.player[target].width / 2) - 350f -
                                   vector61.X;
                    var num522 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) - 20f -
                                   vector61.Y;
                    var num523 = (float) Math.Sqrt((double) (num521 * num521 + num522 * num522));
                    num523 = 7f / num523;
                    num521 *= num523;
                    num522 *= num523;
                    if (base.velocity.X > num521)
                    {
                        if (base.velocity.X > 0f)
                        {
                            base.velocity.X *= 0.9f;
                        }

                        base.velocity.X -= 0.1f;
                    }

                    if (base.velocity.X < num521)
                    {
                        if (base.velocity.X < 0f)
                        {
                            base.velocity.X *= 0.9f;
                        }

                        base.velocity.X += 0.1f;
                    }

                    if (base.velocity.Y > num522)
                    {
                        if (base.velocity.Y > 0f)
                        {
                            base.velocity.Y *= 0.9f;
                        }

                        base.velocity.Y -= 0.03f;
                    }

                    if (base.velocity.Y < num522)
                    {
                        if (base.velocity.Y < 0f)
                        {
                            base.velocity.Y *= 0.9f;
                        }

                        base.velocity.Y += 0.03f;
                    }

                    TargetClosest(true);
                    vector61 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    num521 = Main.player[target].position.X + (float) (Main.player[target].width / 2) - vector61.X;
                    num522 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) - vector61.Y;
                    num523 = (float) Math.Sqrt((double) (num521 * num521 + num522 * num522));
                    rotation = (float) Math.Atan2((double) num522, (double) num521) - 1.57f;
                    if (Main.netMode == 1)
                    {
                        localAI[0] += 1f;
                        if (localAI[0] > 80f)
                        {
                            localAI[0] = 0f;
                            var num524 = 10f;
                            var num525 = 25;
                            var num526 = 100;
                            num523 = num524 / num523;
                            num521 *= num523;
                            num522 *= num523;
                            num521 += (float) Main.rand.Next(-40, 41) * 0.05f;
                            num522 += (float) Main.rand.Next(-40, 41) * 0.05f;
                            vector61.X += num521 * 8f;
                            vector61.Y += num522 * 8f;
                            Projectile.NewProjectile(vector61.X, vector61.Y, num521, num522, num526, num525, 0f,
                                Main.myPlayer, 0f, 0f);
                        }
                    }
                }
            }
            else if (aiStyle == 37)
            {
                AI_037_Destroyer();
            }
            else if (aiStyle == 38)
            {
                var num527 = 4f;
                var num528 = 1f;
                if (type == 143)
                {
                    num527 = 3f;
                    num528 = 0.7f;
                }

                if (type == 145)
                {
                    num527 = 3.5f;
                    num528 = 0.8f;
                }

                if (type == 143)
                {
                    this.ai[2] += 1f;
                    if (this.ai[2] >= 120f)
                    {
                        this.ai[2] = 0f;
                        if (Main.netMode != 1)
                        {
                            var vector62 =
                                new Vector2(base.position.X + (float) base.width * 0.5f - (float) (base.direction * 12),
                                    base.position.Y + (float) base.height * 0.5f);
                            var speedX21 = (float) (12 * spriteDirection);
                            var speedY21 = 0f;
                            if (Main.netMode != 1)
                            {
                                var num529 = 25;
                                var num530 = 110;
                                var num531 = Projectile.NewProjectile(vector62.X, vector62.Y, speedX21, speedY21,
                                    num530, num529, 0f, Main.myPlayer, 0f, 0f);
                                Main.projectile[num531].ai[0] = 2f;
                                Main.projectile[num531].timeLeft = 300;
                                Main.projectile[num531].friendly = false;
                                NetMessage.SendData(27, -1, -1, null, num531, 0f, 0f, 0f, 0, 0, 0);
                                netUpdate = true;
                            }
                        }
                    }
                }

                if (type == 144 && this.ai[1] >= 3f)
                {
                    TargetClosest(true);
                    spriteDirection = base.direction;
                    if (base.velocity.Y == 0f)
                    {
                        base.velocity.X *= 0.9f;
                        this.ai[2] += 1f;
                        if ((double) base.velocity.X > -0.3 && (double) base.velocity.X < 0.3)
                        {
                            base.velocity.X = 0f;
                        }

                        if (this.ai[2] >= 200f)
                        {
                            this.ai[2] = 0f;
                            this.ai[1] = 0f;
                        }
                    }
                }
                else if (type == 145 && this.ai[1] >= 3f)
                {
                    TargetClosest(true);
                    if (base.velocity.Y == 0f)
                    {
                        base.velocity.X *= 0.9f;
                        this.ai[2] += 1f;
                        if ((double) base.velocity.X > -0.3 && (double) base.velocity.X < 0.3)
                        {
                            base.velocity.X = 0f;
                        }

                        if (this.ai[2] >= 16f)
                        {
                            this.ai[2] = 0f;
                            this.ai[1] = 0f;
                        }
                    }

                    if (base.velocity.X == 0f && base.velocity.Y == 0f && this.ai[2] == 8f)
                    {
                        var num532 = 10f;
                        var vector63 =
                            new Vector2(base.position.X + (float) base.width * 0.5f - (float) (base.direction * 12),
                                base.position.Y + (float) base.height * 0.25f);
                        var num533 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                       vector63.X;
                        var num534 = Main.player[target].position.Y - vector63.Y;
                        var num535 = (float) Math.Sqrt((double) (num533 * num533 + num534 * num534));
                        num535 = num532 / num535;
                        num533 *= num535;
                        num534 *= num535;
                        if (Main.netMode != 1)
                        {
                            var num536 = 35;
                            var num537 = 109;
                            var num538 = Projectile.NewProjectile(vector63.X, vector63.Y, num533, num534, num537,
                                num536, 0f, Main.myPlayer, 0f, 0f);
                            Main.projectile[num538].ai[0] = 2f;
                            Main.projectile[num538].timeLeft = 300;
                            Main.projectile[num538].friendly = false;
                            NetMessage.SendData(27, -1, -1, null, num538, 0f, 0f, 0f, 0, 0, 0);
                            netUpdate = true;
                        }
                    }
                }
                else
                {
                    if (base.velocity.Y == 0f)
                    {
                        if (localAI[2] == base.position.X)
                        {
                            base.direction *= -1;
                            this.ai[3] = 60f;
                        }

                        localAI[2] = base.position.X;
                        if (this.ai[3] == 0f)
                        {
                            TargetClosest(true);
                        }

                        this.ai[0] += 1f;
                        if (this.ai[0] > 2f)
                        {
                            this.ai[0] = 0f;
                            this.ai[1] += 1f;
                            base.velocity.Y = -8.2f;
                            base.velocity.X += (float) base.direction * num528 * 1.1f;
                        }
                        else
                        {
                            base.velocity.Y = -6f;
                            base.velocity.X += (float) base.direction * num528 * 0.9f;
                        }

                        spriteDirection = base.direction;
                    }

                    base.velocity.X += (float) base.direction * num528 * 0.01f;
                }

                if (this.ai[3] > 0f)
                {
                    this.ai[3] -= 1f;
                }

                if (base.velocity.X > num527 && base.direction > 0)
                {
                    base.velocity.X = 4f;
                }

                if (base.velocity.X < 0f - num527 && base.direction < 0)
                {
                    base.velocity.X = -4f;
                }
            }
            else if (aiStyle == 39)
            {
                if (target < 0 || Main.player[target].dead || base.direction == 0)
                {
                    TargetClosest(true);
                }

                var flag29 = true;
                var num539 = 0;
                if (base.velocity.X < 0f)
                {
                    num539 = -1;
                }

                if (base.velocity.X > 0f)
                {
                    num539 = 1;
                }

                var position47 = base.position;
                position47.X += base.velocity.X;
                var num540 =
                    (int) ((position47.X + (float) (base.width / 2) + (float) ((base.width / 2 + 1) * num539)) / 16f);
                var num541 = (int) ((position47.Y + (float) base.height - 1f) / 16f);
                if ((float) (num540 * 16) < position47.X + (float) base.width &&
                    (float) (num540 * 16 + 16) > position47.X &&
                    ((Main.tile[num540, num541].nactive() && !Main.tile[num540, num541].topSlope() &&
                      !Main.tile[num540, num541 - 1].topSlope() &&
                      ((Main.tileSolid[Main.tile[num540, num541].type] &&
                        !Main.tileSolidTop[Main.tile[num540, num541].type]) ||
                       (flag29 && Main.tileSolidTop[Main.tile[num540, num541].type] &&
                        (!Main.tileSolid[Main.tile[num540, num541 - 1].type] ||
                         !Main.tile[num540, num541 - 1].nactive()) && Main.tile[num540, num541].type != 16 &&
                        Main.tile[num540, num541].type != 18 && Main.tile[num540, num541].type != 134))) ||
                     (Main.tile[num540, num541 - 1].halfBrick() && Main.tile[num540, num541 - 1].nactive())) &&
                    (!Main.tile[num540, num541 - 1].nactive() || !Main.tileSolid[Main.tile[num540, num541 - 1].type] ||
                     Main.tileSolidTop[Main.tile[num540, num541 - 1].type] ||
                     (Main.tile[num540, num541 - 1].halfBrick() &&
                      (!Main.tile[num540, num541 - 4].nactive() ||
                       !Main.tileSolid[Main.tile[num540, num541 - 4].type] ||
                       Main.tileSolidTop[Main.tile[num540, num541 - 4].type]))) &&
                    (!Main.tile[num540, num541 - 2].nactive() || !Main.tileSolid[Main.tile[num540, num541 - 2].type] ||
                     Main.tileSolidTop[Main.tile[num540, num541 - 2].type]) &&
                    (!Main.tile[num540, num541 - 3].nactive() || !Main.tileSolid[Main.tile[num540, num541 - 3].type] ||
                     Main.tileSolidTop[Main.tile[num540, num541 - 3].type]) &&
                    (!Main.tile[num540 - num539, num541 - 3].nactive() ||
                     !Main.tileSolid[Main.tile[num540 - num539, num541 - 3].type] ||
                     Main.tileSolidTop[Main.tile[num540 - num539, num541 - 3].type]))
                {
                    var num542 = (float) (num541 * 16);
                    if (Main.tile[num540, num541].halfBrick())
                    {
                        num542 += 8f;
                    }

                    if (Main.tile[num540, num541 - 1].halfBrick())
                    {
                        num542 -= 8f;
                    }

                    if (num542 < position47.Y + (float) base.height)
                    {
                        var num543 = position47.Y + (float) base.height - num542;
                        if ((double) num543 <= 16.1)
                        {
                            gfxOffY += base.position.Y + (float) base.height - num542;
                            base.position.Y = num542 - (float) base.height;
                            if (num543 < 9f)
                            {
                                stepSpeed = 0.75f;
                            }
                            else
                            {
                                stepSpeed = 1.5f;
                            }
                        }
                    }
                }

                if (justHit && type != 417)
                {
                    this.ai[0] = 0f;
                    this.ai[1] = 0f;
                    TargetClosest(true);
                }

                if (type == 154 && Main.rand.Next(10) == 0)
                {
                    var position48 = new Vector2(base.position.X, base.position.Y);
                    var width44 = base.width;
                    var height42 = base.height;
                    var speedX22 = base.velocity.X * 0.5f;
                    var speedY22 = base.velocity.Y * 0.5f;
                    newColor = default(Color);
                    var num544 = Dust.NewDust(position48, width44, height42, 67, speedX22, speedY22, 90, newColor,
                        1.5f);
                    Main.dust[num544].noGravity = true;
                    Main.dust[num544].velocity *= 0.2f;
                }

                if (this.ai[0] == 0f)
                {
                    if (base.velocity.X < 0f)
                    {
                        base.direction = -1;
                    }
                    else if (base.velocity.X > 0f)
                    {
                        base.direction = 1;
                    }

                    spriteDirection = base.direction;
                    var vector64 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num545 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                   vector64.X;
                    var num546 = Main.player[target].position.Y - vector64.Y;
                    var num547 = (float) Math.Sqrt((double) (num545 * num545 + num546 * num546));
                    var flag30 = Collision.CanHit(base.position, base.width, base.height, Main.player[target].position,
                        Main.player[target].width, Main.player[target].height);
                    if (type >= 496 && type <= 497)
                    {
                        if (num547 > 200f && flag30)
                        {
                            this.ai[1] += 2f;
                        }

                        if (num547 > 600f && (flag30 || base.position.Y + (float) base.height >
                                              Main.player[target].position.Y - 200f))
                        {
                            this.ai[1] += 4f;
                        }
                    }
                    else
                    {
                        if (num547 > 200f && flag30)
                        {
                            this.ai[1] += 4f;
                        }

                        if (num547 > 600f && (flag30 || base.position.Y + (float) base.height >
                                              Main.player[target].position.Y - 200f))
                        {
                            this.ai[1] += 10f;
                        }

                        if (wet)
                        {
                            this.ai[1] = 1000f;
                        }
                    }

                    defense = defDefense;
                    damage = defDamage;
                    if (type >= 496 && type <= 497)
                    {
                        knockBackResist = 0.75f * Main.knockBackMultiplier;
                    }
                    else
                    {
                        knockBackResist = 0.3f * Main.knockBackMultiplier;
                    }

                    this.ai[1] += 1f;
                    if (this.ai[1] >= 400f)
                    {
                        this.ai[1] = 0f;
                        this.ai[0] = 1f;
                    }

                    if (!justHit && base.velocity.X != oldVelocity.X)
                    {
                        base.direction *= -1;
                    }

                    if (base.velocity.Y == 0f && Main.player[target].position.Y < base.position.Y + (float) base.height)
                    {
                        int num548;
                        int num549;
                        if (base.direction > 0)
                        {
                            num548 = (int) (((double) base.position.X + (double) base.width * 0.5) / 16.0);
                            num549 = num548 + 3;
                        }
                        else
                        {
                            num549 = (int) (((double) base.position.X + (double) base.width * 0.5) / 16.0);
                            num548 = num549 - 3;
                        }

                        var num550 = (int) ((base.position.Y + (float) base.height + 2f) / 16f) - 1;
                        var num551 = num550 + 4;
                        var flag31 = false;
                        for (var num552 = num548; num552 <= num549; num552++)
                        {
                            for (var num553 = num550; num553 <= num551; num553++)
                            {
                                if (Main.tile[num552, num553] != null && Main.tile[num552, num553].nactive() &&
                                    Main.tileSolid[Main.tile[num552, num553].type])
                                {
                                    flag31 = true;
                                }
                            }
                        }

                        if (!flag31)
                        {
                            base.direction *= -1;
                            base.velocity.X = 0.1f * (float) base.direction;
                        }
                    }

                    if (type >= 496 && type <= 497)
                    {
                        var num554 = 0.5f;
                        if (base.velocity.X < 0f - num554 || base.velocity.X > num554)
                        {
                            if (base.velocity.Y == 0f)
                            {
                                base.velocity *= 0.8f;
                            }
                        }
                        else if (base.velocity.X < num554 && base.direction == 1)
                        {
                            base.velocity.X += 0.07f;
                            if (base.velocity.X > num554)
                            {
                                base.velocity.X = num554;
                            }
                        }
                        else if (base.velocity.X > 0f - num554 && base.direction == -1)
                        {
                            base.velocity.X -= 0.07f;
                            if (base.velocity.X < 0f - num554)
                            {
                                base.velocity.X = 0f - num554;
                            }
                        }
                    }
                    else
                    {
                        var num555 = 1f;
                        if (num547 < 400f)
                        {
                            if (base.velocity.X < 0f - num555 || base.velocity.X > num555)
                            {
                                if (base.velocity.Y == 0f)
                                {
                                    base.velocity *= 0.8f;
                                }
                            }
                            else if (base.velocity.X < num555 && base.direction == 1)
                            {
                                base.velocity.X += 0.07f;
                                if (base.velocity.X > num555)
                                {
                                    base.velocity.X = num555;
                                }
                            }
                            else if (base.velocity.X > 0f - num555 && base.direction == -1)
                            {
                                base.velocity.X -= 0.07f;
                                if (base.velocity.X < 0f - num555)
                                {
                                    base.velocity.X = 0f - num555;
                                }
                            }
                        }
                        else if (base.velocity.X < -1.5f || base.velocity.X > 1.5f)
                        {
                            if (base.velocity.Y == 0f)
                            {
                                base.velocity *= 0.8f;
                            }
                        }
                        else if (base.velocity.X < 1.5f && base.direction == 1)
                        {
                            base.velocity.X += 0.07f;
                            if (base.velocity.X > 1.5f)
                            {
                                base.velocity.X = 1.5f;
                            }
                        }
                        else if (base.velocity.X > -1.5f && base.direction == -1)
                        {
                            base.velocity.X -= 0.07f;
                            if (base.velocity.X < -1.5f)
                            {
                                base.velocity.X = -1.5f;
                            }
                        }
                    }
                }
                else if (this.ai[0] == 1f)
                {
                    base.velocity.X *= 0.5f;
                    if (type >= 496 && type <= 497)
                    {
                        this.ai[1] += 0.5f;
                    }
                    else
                    {
                        this.ai[1] += 1f;
                    }

                    if (this.ai[1] >= 30f)
                    {
                        netUpdate = true;
                        TargetClosest(true);
                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                        this.ai[0] = 3f;
                        if (type == 417)
                        {
                            this.ai[0] = 6f;
                            this.ai[2] = (float) Main.rand.Next(2, 5);
                        }
                    }
                }
                else if (this.ai[0] == 3f)
                {
                    if (type == 154 && Main.rand.Next(3) < 2)
                    {
                        var position49 = new Vector2(base.position.X, base.position.Y);
                        var width45 = base.width;
                        var height43 = base.height;
                        var speedX23 = base.velocity.X * 0.5f;
                        var speedY23 = base.velocity.Y * 0.5f;
                        newColor = default(Color);
                        var num556 = Dust.NewDust(position49, width45, height43, 67, speedX23, speedY23, 90, newColor,
                            1.5f);
                        Main.dust[num556].noGravity = true;
                        Main.dust[num556].velocity *= 0.2f;
                    }

                    if (Main.expertMode)
                    {
                        if (type >= 496 && type <= 497)
                        {
                            damage = (int) ((double) defDamage * 1.5 * 0.9);
                        }
                        else
                        {
                            damage = (int) ((double) (defDamage * 2) * 0.9);
                        }
                    }
                    else if (type >= 496 && type <= 497)
                    {
                        damage = (int) ((double) defDamage * 1.5);
                    }
                    else
                    {
                        damage = defDamage * 2;
                    }

                    defense = defDefense * 2;
                    this.ai[1] += 1f;
                    if (this.ai[1] == 1f)
                    {
                        netUpdate = true;
                        TargetClosest(true);
                        this.ai[2] += 0.3f;
                        rotation += this.ai[2] * (float) base.direction;
                        this.ai[1] += 1f;
                        var flag32 = Collision.CanHit(base.position, base.width, base.height,
                            Main.player[target].position, Main.player[target].width, Main.player[target].height);
                        var num557 = 10f;
                        if (!flag32)
                        {
                            num557 = 6f;
                        }

                        if (type >= 496 && type <= 497)
                        {
                            num557 *= 0.75f;
                        }

                        var vector65 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        var num558 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                       vector65.X;
                        var num559 = Math.Abs(num558) * 0.2f;
                        if (directionY > 0)
                        {
                            num559 = 0f;
                        }

                        var num560 = Main.player[target].position.Y - vector65.Y - num559;
                        var num561 = (float) Math.Sqrt((double) (num558 * num558 + num560 * num560));
                        netUpdate = true;
                        num561 = num557 / num561;
                        num558 *= num561;
                        num560 *= num561;
                        if (!flag32)
                        {
                            num560 = -10f;
                        }

                        base.velocity.X = num558;
                        base.velocity.Y = num560;
                        this.ai[3] = base.velocity.X;
                    }
                    else
                    {
                        if (base.position.X + (float) base.width > Main.player[target].position.X &&
                            base.position.X < Main.player[target].position.X + (float) Main.player[target].width &&
                            base.position.Y < Main.player[target].position.Y + (float) Main.player[target].height)
                        {
                            base.velocity.X *= 0.8f;
                            this.ai[3] = 0f;
                            if (base.velocity.Y < 0f)
                            {
                                base.velocity.Y += 0.2f;
                            }
                        }

                        if (this.ai[3] != 0f)
                        {
                            base.velocity.X = this.ai[3];
                            base.velocity.Y -= 0.22f;
                        }

                        if (this.ai[1] >= 90f)
                        {
                            noGravity = false;
                            this.ai[1] = 0f;
                            this.ai[0] = 4f;
                        }
                    }

                    if (wet && directionY < 0)
                    {
                        base.velocity.Y -= 0.3f;
                    }

                    rotation += this.ai[2] * (float) base.direction;
                }
                else if (this.ai[0] == 4f)
                {
                    if (wet && directionY < 0)
                    {
                        base.velocity.Y -= 0.3f;
                    }

                    base.velocity.X *= 0.96f;
                    if (this.ai[2] > 0f)
                    {
                        this.ai[2] -= 0.01f;
                        rotation += this.ai[2] * (float) base.direction;
                    }
                    else if (base.velocity.Y >= 0f)
                    {
                        rotation = 0f;
                    }

                    if (this.ai[2] <= 0f && (base.velocity.Y == 0f || wet))
                    {
                        netUpdate = true;
                        rotation = 0f;
                        this.ai[2] = 0f;
                        this.ai[1] = 0f;
                        this.ai[0] = 5f;
                    }
                }
                else if (this.ai[0] == 6f)
                {
                    damage = (int) ((float) defDamage * (Main.expertMode ? 1.4f : 1.8f));
                    defense = defDefense * 2;
                    knockBackResist = 0f;
                    if (Main.rand.Next(3) < 2)
                    {
                        var position50 = base.Center - new Vector2(30f);
                        var speedX24 = base.velocity.X * 0.5f;
                        var speedY24 = base.velocity.Y * 0.5f;
                        newColor = default(Color);
                        var num562 = Dust.NewDust(position50, 60, 60, 6, speedX24, speedY24, 90, newColor, 1.5f);
                        Main.dust[num562].noGravity = true;
                        Main.dust[num562].velocity *= 0.2f;
                        Main.dust[num562].fadeIn = 1f;
                    }

                    this.ai[1] += 1f;
                    if (this.ai[3] > 0f)
                    {
                        if (this.ai[3] == 1f)
                        {
                            var vector66 = base.Center - new Vector2(50f);
                            for (var num563 = 0; num563 < 32; num563++)
                            {
                                var position51 = vector66;
                                newColor = default(Color);
                                var num564 = Dust.NewDust(position51, 100, 100, 6, 0f, 0f, 100, newColor, 2.5f);
                                Main.dust[num564].noGravity = true;
                                Main.dust[num564].velocity *= 3f;
                                var position52 = vector66;
                                newColor = default(Color);
                                num564 = Dust.NewDust(position52, 100, 100, 6, 0f, 0f, 100, newColor, 1.5f);
                                Main.dust[num564].velocity *= 2f;
                                Main.dust[num564].noGravity = true;
                            }

                            for (var num565 = 0; num565 < 4; num565++)
                            {
                                var position53 = vector66 + new Vector2((float) (50 * Main.rand.Next(100)) / 100f,
                                                         (float) (50 * Main.rand.Next(100)) / 100f) - Vector2.One * 10f;
                                vector16 = default(Vector2);
                                var num566 = Gore.NewGore(position53, vector16, Main.rand.Next(61, 64), 1f);
                                Main.gore[num566].velocity *= 0.3f;
                                Main.gore[num566].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
                                Main.gore[num566].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
                            }
                        }

                        for (var num567 = 0; num567 < 5; num567++)
                        {
                            var position54 = base.position;
                            var width46 = base.width;
                            var height44 = base.height;
                            newColor = default(Color);
                            var num568 = Dust.NewDust(position54, width46, height44, 31, 0f, 0f, 100, newColor, 1.5f);
                            Main.dust[num568].velocity = Main.dust[num568].velocity * Main.rand.NextFloat();
                        }

                        this.ai[3] += 1f;
                        if (this.ai[3] >= 10f)
                        {
                            this.ai[3] = 0f;
                        }
                    }

                    if (this.ai[1] == 1f)
                    {
                        netUpdate = true;
                        TargetClosest(true);
                        var flag33 = Collision.CanHit(base.position, base.width, base.height,
                            Main.player[target].position, Main.player[target].width, Main.player[target].height);
                        var num569 = 16f;
                        if (!flag33)
                        {
                            num569 = 10f;
                        }

                        var vector67 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        var num570 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                       vector67.X;
                        var num571 = Math.Abs(num570) * 0.2f;
                        if (directionY > 0)
                        {
                            num571 = 0f;
                        }

                        var num572 = Main.player[target].position.Y - vector67.Y - num571;
                        var num573 = (float) Math.Sqrt((double) (num570 * num570 + num572 * num572));
                        netUpdate = true;
                        num573 = num569 / num573;
                        num570 *= num573;
                        num572 *= num573;
                        if (!flag33)
                        {
                            num572 = -12f;
                        }

                        base.velocity.X = num570;
                        base.velocity.Y = num572;
                    }
                    else
                    {
                        if (base.position.X + (float) base.width > Main.player[target].position.X &&
                            base.position.X < Main.player[target].position.X + (float) Main.player[target].width &&
                            base.position.Y < Main.player[target].position.Y + (float) Main.player[target].height)
                        {
                            base.velocity.X *= 0.9f;
                            if (base.velocity.Y < 0f)
                            {
                                base.velocity.Y += 0.2f;
                            }
                        }

                        if (this.ai[2] == 0f || this.ai[1] >= 1200f)
                        {
                            this.ai[1] = 0f;
                            this.ai[0] = 5f;
                        }
                    }

                    if (wet && directionY < 0)
                    {
                        base.velocity.Y -= 0.3f;
                    }

                    rotation += MathHelper.Clamp(base.velocity.X / 10f * (float) base.direction, -0.314159274f,
                        0.314159274f);
                }
                else if (this.ai[0] == 5f)
                {
                    rotation = 0f;
                    base.velocity.X = 0f;
                    if (type >= 496 && type <= 497)
                    {
                        this.ai[1] += 0.5f;
                    }
                    else
                    {
                        this.ai[1] += 1f;
                    }

                    if (this.ai[1] >= 30f)
                    {
                        TargetClosest(true);
                        netUpdate = true;
                        this.ai[1] = 0f;
                        this.ai[0] = 0f;
                    }

                    if (wet)
                    {
                        this.ai[0] = 3f;
                        this.ai[1] = 0f;
                    }
                }
            }
            else if (aiStyle == 40)
            {
                if (target < 0 || target == 255 || Main.player[target].dead)
                {
                    TargetClosest(true);
                }

                var num574 = 2f;
                var num575 = 0.08f;
                if (type == 531)
                {
                    num574 = 4f;
                    num575 = 0.16f;
                }

                var vector68 = new Vector2(base.position.X + (float) base.width * 0.5f,
                    base.position.Y + (float) base.height * 0.5f);
                var num576 = Main.player[target].position.X + (float) (Main.player[target].width / 2);
                var num577 = Main.player[target].position.Y + (float) (Main.player[target].height / 2);
                num576 = (float) ((int) (num576 / 8f) * 8);
                num577 = (float) ((int) (num577 / 8f) * 8);
                vector68.X = (float) ((int) (vector68.X / 8f) * 8);
                vector68.Y = (float) ((int) (vector68.Y / 8f) * 8);
                num576 -= vector68.X;
                num577 -= vector68.Y;
                var num578 = (float) Math.Sqrt((double) (num576 * num576 + num577 * num577));
                if (num578 == 0f)
                {
                    num576 = base.velocity.X;
                    num577 = base.velocity.Y;
                }
                else
                {
                    num578 = num574 / num578;
                    num576 *= num578;
                    num577 *= num578;
                }

                if (Main.player[target].dead)
                {
                    num576 = (float) base.direction * num574 / 2f;
                    num577 = (0f - num574) / 2f;
                }

                spriteDirection = -1;
                if (!Collision.CanHit(base.position, base.width, base.height, Main.player[target].position,
                    Main.player[target].width, Main.player[target].height))
                {
                    this.ai[0] += 1f;
                    if (this.ai[0] > 0f)
                    {
                        base.velocity.Y += 0.023f;
                    }
                    else
                    {
                        base.velocity.Y -= 0.023f;
                    }

                    if (this.ai[0] < -100f || this.ai[0] > 100f)
                    {
                        base.velocity.X += 0.023f;
                    }
                    else
                    {
                        base.velocity.X -= 0.023f;
                    }

                    if (this.ai[0] > 200f)
                    {
                        this.ai[0] = -200f;
                    }

                    base.velocity.X += num576 * 0.007f;
                    base.velocity.Y += num577 * 0.007f;
                    rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X);
                    if ((double) base.velocity.X > 1.5)
                    {
                        base.velocity.X *= 0.9f;
                    }

                    if ((double) base.velocity.X < -1.5)
                    {
                        base.velocity.X *= 0.9f;
                    }

                    if ((double) base.velocity.Y > 1.5)
                    {
                        base.velocity.Y *= 0.9f;
                    }

                    if ((double) base.velocity.Y < -1.5)
                    {
                        base.velocity.Y *= 0.9f;
                    }

                    if (base.velocity.X > 3f)
                    {
                        base.velocity.X = 3f;
                    }

                    if (base.velocity.X < -3f)
                    {
                        base.velocity.X = -3f;
                    }

                    if (base.velocity.Y > 3f)
                    {
                        base.velocity.Y = 3f;
                    }

                    if (base.velocity.Y < -3f)
                    {
                        base.velocity.Y = -3f;
                    }
                }
                else
                {
                    if (base.velocity.X < num576)
                    {
                        base.velocity.X += num575;
                        if (base.velocity.X < 0f && num576 > 0f)
                        {
                            base.velocity.X += num575;
                        }
                    }
                    else if (base.velocity.X > num576)
                    {
                        base.velocity.X -= num575;
                        if (base.velocity.X > 0f && num576 < 0f)
                        {
                            base.velocity.X -= num575;
                        }
                    }

                    if (base.velocity.Y < num577)
                    {
                        base.velocity.Y += num575;
                        if (base.velocity.Y < 0f && num577 > 0f)
                        {
                            base.velocity.Y += num575;
                        }
                    }
                    else if (base.velocity.Y > num577)
                    {
                        base.velocity.Y -= num575;
                        if (base.velocity.Y > 0f && num577 < 0f)
                        {
                            base.velocity.Y -= num575;
                        }
                    }

                    rotation = (float) Math.Atan2((double) num577, (double) num576);
                }

                if (type == 531)
                {
                    rotation += 1.57079637f;
                }

                var num579 = 0.5f;
                if (collideX)
                {
                    netUpdate = true;
                    base.velocity.X = oldVelocity.X * (0f - num579);
                    if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 2f)
                    {
                        base.velocity.X = 2f;
                    }

                    if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -2f)
                    {
                        base.velocity.X = -2f;
                    }
                }

                if (collideY)
                {
                    netUpdate = true;
                    base.velocity.Y = oldVelocity.Y * (0f - num579);
                    if (base.velocity.Y > 0f && (double) base.velocity.Y < 1.5)
                    {
                        base.velocity.Y = 2f;
                    }

                    if (base.velocity.Y < 0f && (double) base.velocity.Y > -1.5)
                    {
                        base.velocity.Y = -2f;
                    }
                }

                if (((base.velocity.X > 0f && oldVelocity.X < 0f) || (base.velocity.X < 0f && oldVelocity.X > 0f) ||
                     (base.velocity.Y > 0f && oldVelocity.Y < 0f) || (base.velocity.Y < 0f && oldVelocity.Y > 0f)) &&
                    !justHit)
                {
                    netUpdate = true;
                }

                if (Main.netMode != 1)
                {
                    if (Main.netMode != 1 && Main.expertMode && target >= 0 && (type == 163 || type == 238) &&
                        Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
                    {
                        localAI[0] += 1f;
                        if (justHit)
                        {
                            localAI[0] -= (float) Main.rand.Next(20, 60);
                            if (localAI[0] < 0f)
                            {
                                localAI[0] = 0f;
                            }
                        }

                        if (localAI[0] > (float) Main.rand.Next(180, 900))
                        {
                            localAI[0] = 0f;
                            var vector69 = Main.player[target].Center - base.Center;
                            vector69.Normalize();
                            vector69 *= 8f;
                            Projectile.NewProjectile(base.Center.X, base.Center.Y, vector69.X, vector69.Y, 472, 18, 0f,
                                Main.myPlayer, 0f, 0f);
                        }
                    }

                    var num580 = (int) base.Center.X / 16;
                    var num581 = (int) base.Center.Y / 16;
                    var flag34 = false;
                    for (var num582 = num580 - 1; num582 <= num580 + 1; num582++)
                    {
                        for (var num583 = num581 - 1; num583 <= num581 + 1; num583++)
                        {
                            if (Main.tile[num582, num583] == null)
                            {
                                return;
                            }

                            if (Main.tile[num582, num583].wall > 0)
                            {
                                flag34 = true;
                            }
                        }
                    }

                    if (!flag34)
                    {
                        if (type == 237)
                        {
                            Transform(236);
                        }
                        else if (type == 238)
                        {
                            Transform(163);
                        }
                        else if (type == 240)
                        {
                            Transform(239);
                        }
                        else if (type == 531)
                        {
                            Transform(530);
                        }
                        else
                        {
                            Transform(164);
                        }
                    }
                }
            }
            else if (aiStyle == 41)
            {
                if (this.ai[2] > 1f)
                {
                    this.ai[2] -= 1f;
                }

                if (this.ai[2] == 0f)
                {
                    this.ai[0] = -100f;
                    this.ai[2] = 1f;
                    TargetClosest(true);
                    spriteDirection = base.direction;
                }

                if (type == 378)
                {
                    var value3 = new Vector2(-6f, -10f);
                    value3.X *= (float) spriteDirection;
                    if (this.ai[1] != 5f && Main.rand.Next(3) == 0)
                    {
                        var position55 = base.Center + value3 - Vector2.One * 5f;
                        newColor = default(Color);
                        var num584 = Dust.NewDust(position55, 4, 4, 6, 0f, 0f, 0, newColor, 1f);
                        Main.dust[num584].scale = 1.5f;
                        Main.dust[num584].noGravity = true;
                        Main.dust[num584].velocity =
                            Main.dust[num584].velocity * 0.25f + Vector2.Normalize(value3) * 1f;
                        var obj4 = Main.dust[num584];
                        var velocity = Main.dust[num584].velocity;
                        var radians = (double) (-1.57079637f * (float) base.direction);
                        vector16 = default(Vector2);
                        obj4.velocity = velocity.RotatedBy(radians, vector16);
                    }

                    if (this.ai[1] == 5f)
                    {
                        base.velocity = Vector2.Zero;
                        base.position.X += (float) (base.width / 2);
                        base.position.Y += (float) (base.height / 2);
                        base.width = 160;
                        base.height = 160;
                        base.position.X -= (float) (base.width / 2);
                        base.position.Y -= (float) (base.height / 2);
                        dontTakeDamage = true;
                        for (var num585 = 0; num585 < 8; num585++)
                        {
                            var position56 = new Vector2(base.position.X, base.position.Y);
                            var width47 = base.width;
                            var height45 = base.height;
                            newColor = default(Color);
                            Dust.NewDust(position56, width47, height45, 31, 0f, 0f, 100, newColor, 1.5f);
                        }

                        for (var num586 = 0; num586 < 32; num586++)
                        {
                            var position57 = new Vector2(base.position.X, base.position.Y);
                            var width48 = base.width;
                            var height46 = base.height;
                            newColor = default(Color);
                            var num587 = Dust.NewDust(position57, width48, height46, 6, 0f, 0f, 100, newColor, 2.5f);
                            Main.dust[num587].noGravity = true;
                            Main.dust[num587].velocity *= 3f;
                            var position58 = new Vector2(base.position.X, base.position.Y);
                            var width49 = base.width;
                            var height47 = base.height;
                            newColor = default(Color);
                            num587 = Dust.NewDust(position58, width49, height47, 6, 0f, 0f, 100, newColor, 1.5f);
                            Main.dust[num587].velocity *= 2f;
                            Main.dust[num587].noGravity = true;
                        }

                        for (var num588 = 0; num588 < 2; num588++)
                        {
                            var position59 = base.position +
                                                 new Vector2((float) (base.width * Main.rand.Next(100)) / 100f,
                                                     (float) (base.height * Main.rand.Next(100)) / 100f) -
                                                 Vector2.One * 10f;
                            vector16 = default(Vector2);
                            var num589 = Gore.NewGore(position59, vector16, Main.rand.Next(61, 64), 1f);
                            Main.gore[num589].velocity *= 0.3f;
                            Main.gore[num589].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
                            Main.gore[num589].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
                        }

                        if (this.ai[2] == 1f)
                        {
                            Main.PlaySound(SoundID.Item14, base.position);
                            life = -1;
                            HitEffect(0, 10.0);
                            active = false;
                        }

                        return;
                    }
                }

                if (type == 378 && this.ai[1] != 5f)
                {
                    if (wet || Vector2.Distance(base.Center, Main.player[target].Center) < 64f)
                    {
                        this.ai[1] = 5f;
                        this.ai[2] = 3f;
                        netUpdate = true;
                        return;
                    }
                }
                else if (wet && type != 177)
                {
                    if (collideX)
                    {
                        base.direction *= -base.direction;
                        spriteDirection = base.direction;
                    }

                    if (collideY)
                    {
                        TargetClosest(true);
                        if (oldVelocity.Y < 0f)
                        {
                            base.velocity.Y = 5f;
                        }
                        else
                        {
                            base.velocity.Y -= 2f;
                        }

                        spriteDirection = base.direction;
                    }

                    if (base.velocity.Y > 4f)
                    {
                        base.velocity.Y *= 0.95f;
                    }

                    base.velocity.Y -= 0.3f;
                    if (base.velocity.Y < -4f)
                    {
                        base.velocity.Y = -4f;
                    }
                }

                if (base.velocity.Y == 0f)
                {
                    if (this.ai[3] == base.position.X)
                    {
                        base.direction *= -1;
                        this.ai[2] = 300f;
                    }

                    this.ai[3] = 0f;
                    base.velocity.X *= 0.8f;
                    if ((double) base.velocity.X > -0.1 && (double) base.velocity.X < 0.1)
                    {
                        base.velocity.X = 0f;
                    }

                    if (type == 177)
                    {
                        this.ai[0] += 2f;
                    }
                    else
                    {
                        this.ai[0] += 5f;
                    }

                    var vector70 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num590 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                   vector70.X;
                    var num591 = Main.player[target].position.Y + (float) Main.player[target].height * 0.5f -
                                   vector70.Y;
                    var num592 = (float) Math.Sqrt((double) (num590 * num590 + num591 * num591));
                    var num593 = 400f / num592;
                    num593 = ((type != 177) ? (num593 * 10f) : (num593 * 5f));
                    if (num593 > 30f)
                    {
                        num593 = 30f;
                    }

                    this.ai[0] += (float) (int) num593;
                    if (this.ai[0] >= 0f)
                    {
                        netUpdate = true;
                        if (this.ai[2] == 1f)
                        {
                            TargetClosest(true);
                        }

                        if (type == 177)
                        {
                            if (this.ai[1] == 2f)
                            {
                                base.velocity.Y = -11.5f;
                                base.velocity.X += 2f * (float) base.direction;
                                if (num592 < 350f && num592 > 200f)
                                {
                                    base.velocity.X += (float) base.direction;
                                }

                                this.ai[0] = -200f;
                                this.ai[1] = 0f;
                                this.ai[3] = base.position.X;
                            }
                            else
                            {
                                base.velocity.Y = -7.5f;
                                base.velocity.X += (float) (4 * base.direction);
                                if (num592 < 350f && num592 > 200f)
                                {
                                    base.velocity.X += (float) base.direction;
                                }

                                this.ai[0] = -120f;
                                this.ai[1] += 1f;
                            }
                        }
                        else if (this.ai[1] == 3f)
                        {
                            base.velocity.Y = -9f;
                            base.velocity.X += (float) (3 * base.direction);
                            if (num592 < 350f && num592 > 200f)
                            {
                                base.velocity.X += (float) base.direction;
                            }

                            this.ai[0] = -200f;
                            this.ai[1] = 0f;
                            this.ai[3] = base.position.X;
                        }
                        else
                        {
                            base.velocity.Y = -5f;
                            base.velocity.X += (float) (5 * base.direction);
                            if (num592 < 350f && num592 > 200f)
                            {
                                base.velocity.X += (float) base.direction;
                            }

                            this.ai[0] = -120f;
                            this.ai[1] += 1f;
                        }
                    }
                    else if (this.ai[0] >= -30f)
                    {
                        aiAction = 1;
                    }

                    spriteDirection = base.direction;
                }
                else if (target < 255)
                {
                    if (type == 177)
                    {
                        var flag35 = false;
                        if (base.position.Y + (float) base.height < Main.player[target].position.Y &&
                            base.position.X + (float) base.width > Main.player[target].position.X && base.position.X <
                            Main.player[target].position.X + (float) Main.player[target].width)
                        {
                            flag35 = true;
                            base.velocity.X *= 0.92f;
                            if (base.velocity.Y < 0f)
                            {
                                base.velocity.Y *= 0.9f;
                                base.velocity.Y += 0.1f;
                            }
                        }

                        if (!flag35 && ((base.direction == 1 && base.velocity.X < 4f) ||
                                        (base.direction == -1 && base.velocity.X > -4f)))
                        {
                            if ((base.direction == -1 && (double) base.velocity.X < 0.1) ||
                                (base.direction == 1 && (double) base.velocity.X > -0.1))
                            {
                                base.velocity.X += 0.2f * (float) base.direction;
                            }
                            else
                            {
                                base.velocity.X *= 0.93f;
                            }
                        }
                    }
                    else if ((base.direction == 1 && base.velocity.X < 3f) ||
                             (base.direction == -1 && base.velocity.X > -3f))
                    {
                        if ((base.direction == -1 && (double) base.velocity.X < 0.1) ||
                            (base.direction == 1 && (double) base.velocity.X > -0.1))
                        {
                            base.velocity.X += 0.2f * (float) base.direction;
                        }
                        else
                        {
                            base.velocity.X *= 0.93f;
                        }
                    }
                }
            }
            else if (aiStyle == 42)
            {
                TargetClosest(true);
                if (this.ai[0] == 0f)
                {
                    if (target >= 0)
                    {
                        var vector71 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        var num594 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                       vector71.X;
                        var num595 = Main.player[target].position.Y - vector71.Y;
                        var num596 = (float) Math.Sqrt((double) (num594 * num594 + num595 * num595));
                        if (num596 < 200f && Collision.CanHit(base.position, base.width, base.height,
                                Main.player[target].position, Main.player[target].width, Main.player[target].height))
                        {
                            this.ai[0] = 1f;
                        }
                    }

                    if (base.velocity.X != 0f || base.velocity.Y < 0f || base.velocity.Y > 2f || life != lifeMax)
                    {
                        this.ai[0] = 1f;
                    }
                }
                else
                {
                    this.ai[0] += 1f;
                    if (this.ai[0] >= 21f)
                    {
                        this.ai[0] = 21f;
                        Transform(196);
                    }
                }
            }
            else if (aiStyle == 43)
            {
                var num597 = 0;
                for (var num598 = 0; num598 < 255; num598++)
                {
                    if (Main.player[num598].active && !Main.player[num598].dead &&
                        (base.Center - Main.player[num598].Center).Length() < 1000f)
                    {
                        num597++;
                    }
                }

                if (Main.expertMode)
                {
                    var num599 = (int) (20f * (1f - (float) life / (float) lifeMax));
                    defense = defDefense + num599;
                }

                if (target < 0 || target == 255 || Main.player[target].dead || !Main.player[target].active)
                {
                    TargetClosest(true);
                }

                if (Main.player[target].dead && Main.expertMode)
                {
                    if ((double) base.position.Y < Main.worldSurface * 16.0 + 2000.0)
                    {
                        base.velocity.Y += 0.04f;
                    }

                    if (base.position.X < (float) (Main.maxTilesX * 8))
                    {
                        base.velocity.X -= 0.04f;
                    }
                    else
                    {
                        base.velocity.X += 0.04f;
                    }

                    if (timeLeft > 10)
                    {
                        timeLeft = 10;
                    }
                }
                else if (this.ai[0] == -1f)
                {
                    if (Main.netMode != 1)
                    {
                        var num600 = this.ai[1];
                        int num601;
                        do
                        {
                            num601 = Main.rand.Next(3);
                            switch (num601)
                            {
                                case 1:
                                    num601 = 2;
                                    break;
                                case 2:
                                    num601 = 3;
                                    break;
                            }
                        } while ((float) num601 == num600);

                        this.ai[0] = (float) num601;
                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                    }
                }
                else if (this.ai[0] == 0f)
                {
                    var num602 = 2;
                    if (Main.expertMode)
                    {
                        if (life < lifeMax / 2)
                        {
                            num602++;
                        }

                        if (life < lifeMax / 3)
                        {
                            num602++;
                        }

                        if (life < lifeMax / 5)
                        {
                            num602++;
                        }
                    }

                    if (this.ai[1] > (float) (2 * num602) && this.ai[1] % 2f == 0f)
                    {
                        this.ai[0] = -1f;
                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                        netUpdate = true;
                    }
                    else if (this.ai[1] % 2f == 0f)
                    {
                        TargetClosest(true);
                        if (Math.Abs(base.position.Y + (float) (base.height / 2) -
                                     (Main.player[target].position.Y + (float) (Main.player[target].height / 2))) < 20f)
                        {
                            localAI[0] = 1f;
                            this.ai[1] += 1f;
                            this.ai[2] = 0f;
                            var num603 = 12f;
                            if (Main.expertMode)
                            {
                                num603 = 16f;
                                if ((double) life < (double) lifeMax * 0.75)
                                {
                                    num603 += 2f;
                                }

                                if ((double) life < (double) lifeMax * 0.5)
                                {
                                    num603 += 2f;
                                }

                                if ((double) life < (double) lifeMax * 0.25)
                                {
                                    num603 += 2f;
                                }

                                if ((double) life < (double) lifeMax * 0.1)
                                {
                                    num603 += 2f;
                                }
                            }

                            var vector72 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                base.position.Y + (float) base.height * 0.5f);
                            var num604 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                           vector72.X;
                            var num605 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                           vector72.Y;
                            var num606 = (float) Math.Sqrt((double) (num604 * num604 + num605 * num605));
                            num606 = num603 / num606;
                            base.velocity.X = num604 * num606;
                            base.velocity.Y = num605 * num606;
                            spriteDirection = base.direction;
                            Main.PlaySound(15, (int) base.position.X, (int) base.position.Y, 0, 1f, 0f);
                        }
                        else
                        {
                            localAI[0] = 0f;
                            var num607 = 12f;
                            var num608 = 0.15f;
                            if (Main.expertMode)
                            {
                                if ((double) life < (double) lifeMax * 0.75)
                                {
                                    num607 += 1f;
                                    num608 += 0.05f;
                                }

                                if ((double) life < (double) lifeMax * 0.5)
                                {
                                    num607 += 1f;
                                    num608 += 0.05f;
                                }

                                if ((double) life < (double) lifeMax * 0.25)
                                {
                                    num607 += 2f;
                                    num608 += 0.05f;
                                }

                                if ((double) life < (double) lifeMax * 0.1)
                                {
                                    num607 += 2f;
                                    num608 += 0.1f;
                                }
                            }

                            if (base.position.Y + (float) (base.height / 2) < Main.player[target].position.Y +
                                (float) (Main.player[target].height / 2))
                            {
                                base.velocity.Y += num608;
                            }
                            else
                            {
                                base.velocity.Y -= num608;
                            }

                            if (base.velocity.Y < -12f)
                            {
                                base.velocity.Y = 0f - num607;
                            }

                            if (base.velocity.Y > 12f)
                            {
                                base.velocity.Y = num607;
                            }

                            if (Math.Abs(base.position.X + (float) (base.width / 2) -
                                         (Main.player[target].position.X + (float) (Main.player[target].width / 2))) >
                                600f)
                            {
                                base.velocity.X += 0.15f * (float) base.direction;
                            }
                            else if (Math.Abs(base.position.X + (float) (base.width / 2) -
                                              (Main.player[target].position.X +
                                               (float) (Main.player[target].width / 2))) < 300f)
                            {
                                base.velocity.X -= 0.15f * (float) base.direction;
                            }
                            else
                            {
                                base.velocity.X *= 0.8f;
                            }

                            if (base.velocity.X < -16f)
                            {
                                base.velocity.X = -16f;
                            }

                            if (base.velocity.X > 16f)
                            {
                                base.velocity.X = 16f;
                            }

                            spriteDirection = base.direction;
                        }
                    }
                    else
                    {
                        if (base.velocity.X < 0f)
                        {
                            base.direction = -1;
                        }
                        else
                        {
                            base.direction = 1;
                        }

                        spriteDirection = base.direction;
                        var num609 = 600;
                        if (Main.expertMode)
                        {
                            if ((double) life < (double) lifeMax * 0.1)
                            {
                                num609 = 300;
                            }
                            else if ((double) life < (double) lifeMax * 0.25)
                            {
                                num609 = 450;
                            }
                            else if ((double) life < (double) lifeMax * 0.5)
                            {
                                num609 = 500;
                            }
                            else if ((double) life < (double) lifeMax * 0.75)
                            {
                                num609 = 550;
                            }
                        }

                        var num610 = 1;
                        if (base.position.X + (float) (base.width / 2) <
                            Main.player[target].position.X + (float) (Main.player[target].width / 2))
                        {
                            num610 = -1;
                        }

                        if (base.direction == num610 &&
                            Math.Abs(base.position.X + (float) (base.width / 2) -
                                     (Main.player[target].position.X + (float) (Main.player[target].width / 2))) >
                            (float) num609)
                        {
                            this.ai[2] = 1f;
                        }

                        if (this.ai[2] == 1f)
                        {
                            TargetClosest(true);
                            spriteDirection = base.direction;
                            localAI[0] = 0f;
                            base.velocity *= 0.9f;
                            var num611 = 0.1f;
                            if (Main.expertMode)
                            {
                                if (life < lifeMax / 2)
                                {
                                    base.velocity *= 0.9f;
                                    num611 += 0.05f;
                                }

                                if (life < lifeMax / 3)
                                {
                                    base.velocity *= 0.9f;
                                    num611 += 0.05f;
                                }

                                if (life < lifeMax / 5)
                                {
                                    base.velocity *= 0.9f;
                                    num611 += 0.05f;
                                }
                            }

                            if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < num611)
                            {
                                this.ai[2] = 0f;
                                this.ai[1] += 1f;
                            }
                        }
                        else
                        {
                            localAI[0] = 1f;
                        }
                    }
                }
                else if (this.ai[0] == 2f)
                {
                    TargetClosest(true);
                    spriteDirection = base.direction;
                    var num612 = 12f;
                    var num613 = 0.07f;
                    if (Main.expertMode)
                    {
                        num613 = 0.1f;
                    }

                    var vector73 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num614 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                   vector73.X;
                    var num615 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) - 200f -
                                   vector73.Y;
                    var num616 = (float) Math.Sqrt((double) (num614 * num614 + num615 * num615));
                    if (num616 < 200f)
                    {
                        this.ai[0] = 1f;
                        this.ai[1] = 0f;
                        netUpdate = true;
                    }
                    else
                    {
                        num616 = num612 / num616;
                        if (base.velocity.X < num614)
                        {
                            base.velocity.X += num613;
                            if (base.velocity.X < 0f && num614 > 0f)
                            {
                                base.velocity.X += num613;
                            }
                        }
                        else if (base.velocity.X > num614)
                        {
                            base.velocity.X -= num613;
                            if (base.velocity.X > 0f && num614 < 0f)
                            {
                                base.velocity.X -= num613;
                            }
                        }

                        if (base.velocity.Y < num615)
                        {
                            base.velocity.Y += num613;
                            if (base.velocity.Y < 0f && num615 > 0f)
                            {
                                base.velocity.Y += num613;
                            }
                        }
                        else if (base.velocity.Y > num615)
                        {
                            base.velocity.Y -= num613;
                            if (base.velocity.Y > 0f && num615 < 0f)
                            {
                                base.velocity.Y -= num613;
                            }
                        }
                    }
                }
                else if (this.ai[0] == 1f)
                {
                    localAI[0] = 0f;
                    TargetClosest(true);
                    var vector74 =
                        new Vector2(
                            base.position.X + (float) (base.width / 2) + (float) (Main.rand.Next(20) * base.direction),
                            base.position.Y + (float) base.height * 0.8f);
                    var vector75 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num617 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                   vector75.X;
                    var num618 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                   vector75.Y;
                    var num619 = (float) Math.Sqrt((double) (num617 * num617 + num618 * num618));
                    this.ai[1] += 1f;
                    if (Main.expertMode)
                    {
                        this.ai[1] += (float) (num597 / 2);
                        if ((double) life < (double) lifeMax * 0.75)
                        {
                            this.ai[1] += 0.25f;
                        }

                        if ((double) life < (double) lifeMax * 0.5)
                        {
                            this.ai[1] += 0.25f;
                        }

                        if ((double) life < (double) lifeMax * 0.25)
                        {
                            this.ai[1] += 0.25f;
                        }

                        if ((double) life < (double) lifeMax * 0.1)
                        {
                            this.ai[1] += 0.25f;
                        }
                    }

                    var flag36 = false;
                    if (this.ai[1] > 40f)
                    {
                        this.ai[1] = 0f;
                        this.ai[2] += 1f;
                        flag36 = true;
                    }

                    if (Collision.CanHit(vector74, 1, 1, Main.player[target].position, Main.player[target].width,
                            Main.player[target].height) && flag36)
                    {
                        Main.PlaySound(3, (int) base.position.X, (int) base.position.Y, 1, 1f, 0f);
                        if (Main.netMode != 1)
                        {
                            var num620 = Main.rand.Next(210, 212);
                            var num621 = NewNPC((int) vector74.X, (int) vector74.Y, num620, 0, 0f, 0f, 0f, 0f, 255);
                            Main.npc[num621].velocity.X = (float) Main.rand.Next(-200, 201) * 0.002f;
                            Main.npc[num621].velocity.Y = (float) Main.rand.Next(-200, 201) * 0.002f;
                            Main.npc[num621].localAI[0] = 60f;
                            Main.npc[num621].netUpdate = true;
                        }
                    }

                    if (!(num619 > 400f) && Collision.CanHit(new Vector2(vector74.X, vector74.Y - 30f), 1, 1,
                            Main.player[target].position, Main.player[target].width, Main.player[target].height))
                    {
                        base.velocity *= 0.9f;
                    }
                    else
                    {
                        var num622 = 14f;
                        var num623 = 0.1f;
                        vector75 = vector74;
                        num617 = Main.player[target].position.X + (float) (Main.player[target].width / 2) - vector75.X;
                        num618 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) - vector75.Y;
                        num619 = (float) Math.Sqrt((double) (num617 * num617 + num618 * num618));
                        num619 = num622 / num619;
                        if (base.velocity.X < num617)
                        {
                            base.velocity.X += num623;
                            if (base.velocity.X < 0f && num617 > 0f)
                            {
                                base.velocity.X += num623;
                            }
                        }
                        else if (base.velocity.X > num617)
                        {
                            base.velocity.X -= num623;
                            if (base.velocity.X > 0f && num617 < 0f)
                            {
                                base.velocity.X -= num623;
                            }
                        }

                        if (base.velocity.Y < num618)
                        {
                            base.velocity.Y += num623;
                            if (base.velocity.Y < 0f && num618 > 0f)
                            {
                                base.velocity.Y += num623;
                            }
                        }
                        else if (base.velocity.Y > num618)
                        {
                            base.velocity.Y -= num623;
                            if (base.velocity.Y > 0f && num618 < 0f)
                            {
                                base.velocity.Y -= num623;
                            }
                        }
                    }

                    spriteDirection = base.direction;
                    if (this.ai[2] > 5f)
                    {
                        this.ai[0] = -1f;
                        this.ai[1] = 1f;
                        netUpdate = true;
                    }
                }
                else if (this.ai[0] == 3f)
                {
                    var num624 = 4f;
                    var num625 = 0.05f;
                    if (Main.expertMode)
                    {
                        num625 = 0.075f;
                        num624 = 6f;
                    }

                    var vector76 =
                        new Vector2(
                            base.position.X + (float) (base.width / 2) + (float) (Main.rand.Next(20) * base.direction),
                            base.position.Y + (float) base.height * 0.8f);
                    var vector77 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num626 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                   vector77.X;
                    var num627 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) - 300f -
                                   vector77.Y;
                    var num628 = (float) Math.Sqrt((double) (num626 * num626 + num627 * num627));
                    this.ai[1] += 1f;
                    var flag37 = false;
                    if (Main.expertMode)
                    {
                        if ((double) life < (double) lifeMax * 0.1)
                        {
                            if (this.ai[1] % 15f == 14f)
                            {
                                flag37 = true;
                            }
                        }
                        else if (life < lifeMax / 3)
                        {
                            if (this.ai[1] % 25f == 24f)
                            {
                                flag37 = true;
                            }
                        }
                        else if (life < lifeMax / 2)
                        {
                            if (this.ai[1] % 30f == 29f)
                            {
                                flag37 = true;
                            }
                        }
                        else if (this.ai[1] % 35f == 34f)
                        {
                            flag37 = true;
                        }
                    }
                    else if (this.ai[1] % 40f == 39f)
                    {
                        flag37 = true;
                    }

                    if (flag37 && base.position.Y + (float) base.height < Main.player[target].position.Y &&
                        Collision.CanHit(vector76, 1, 1, Main.player[target].position, Main.player[target].width,
                            Main.player[target].height))
                    {
                        Main.PlaySound(SoundID.Item17, base.position);
                        if (Main.netMode != 1)
                        {
                            var num629 = 8f;
                            if (Main.expertMode)
                            {
                                num629 += 2f;
                            }

                            if (Main.expertMode && (double) life < (double) lifeMax * 0.1)
                            {
                                num629 += 3f;
                            }

                            var num630 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                           vector76.X + (float) Main.rand.Next(-80, 81);
                            var num631 = Main.player[target].position.Y + (float) Main.player[target].height * 0.5f -
                                           vector76.Y + (float) Main.rand.Next(-40, 41);
                            var num632 = (float) Math.Sqrt((double) (num630 * num630 + num631 * num631));
                            num632 = num629 / num632;
                            num630 *= num632;
                            num631 *= num632;
                            var num633 = 11;
                            var num634 = 55;
                            var num635 = Projectile.NewProjectile(vector76.X, vector76.Y, num630, num631, num634,
                                num633, 0f, Main.myPlayer, 0f, 0f);
                            Main.projectile[num635].timeLeft = 300;
                        }
                    }

                    if (!Collision.CanHit(new Vector2(vector76.X, vector76.Y - 30f), 1, 1, Main.player[target].position,
                        Main.player[target].width, Main.player[target].height))
                    {
                        num624 = 14f;
                        num625 = 0.1f;
                        vector77 = vector76;
                        num626 = Main.player[target].position.X + (float) (Main.player[target].width / 2) - vector77.X;
                        num627 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) - vector77.Y;
                        num628 = (float) Math.Sqrt((double) (num626 * num626 + num627 * num627));
                        num628 = num624 / num628;
                        if (base.velocity.X < num626)
                        {
                            base.velocity.X += num625;
                            if (base.velocity.X < 0f && num626 > 0f)
                            {
                                base.velocity.X += num625;
                            }
                        }
                        else if (base.velocity.X > num626)
                        {
                            base.velocity.X -= num625;
                            if (base.velocity.X > 0f && num626 < 0f)
                            {
                                base.velocity.X -= num625;
                            }
                        }

                        if (base.velocity.Y < num627)
                        {
                            base.velocity.Y += num625;
                            if (base.velocity.Y < 0f && num627 > 0f)
                            {
                                base.velocity.Y += num625;
                            }
                        }
                        else if (base.velocity.Y > num627)
                        {
                            base.velocity.Y -= num625;
                            if (base.velocity.Y > 0f && num627 < 0f)
                            {
                                base.velocity.Y -= num625;
                            }
                        }
                    }
                    else if (num628 > 100f)
                    {
                        TargetClosest(true);
                        spriteDirection = base.direction;
                        num628 = num624 / num628;
                        if (base.velocity.X < num626)
                        {
                            base.velocity.X += num625;
                            if (base.velocity.X < 0f && num626 > 0f)
                            {
                                base.velocity.X += num625 * 2f;
                            }
                        }
                        else if (base.velocity.X > num626)
                        {
                            base.velocity.X -= num625;
                            if (base.velocity.X > 0f && num626 < 0f)
                            {
                                base.velocity.X -= num625 * 2f;
                            }
                        }

                        if (base.velocity.Y < num627)
                        {
                            base.velocity.Y += num625;
                            if (base.velocity.Y < 0f && num627 > 0f)
                            {
                                base.velocity.Y += num625 * 2f;
                            }
                        }
                        else if (base.velocity.Y > num627)
                        {
                            base.velocity.Y -= num625;
                            if (base.velocity.Y > 0f && num627 < 0f)
                            {
                                base.velocity.Y -= num625 * 2f;
                            }
                        }
                    }

                    if (this.ai[1] > 800f)
                    {
                        this.ai[0] = -1f;
                        this.ai[1] = 3f;
                        netUpdate = true;
                    }
                }
            }
            else if (aiStyle == 44)
            {
                noGravity = true;
                if (collideX)
                {
                    if (oldVelocity.X > 0f)
                    {
                        base.direction = -1;
                    }
                    else
                    {
                        base.direction = 1;
                    }

                    base.velocity.X = (float) base.direction;
                }

                if (collideY)
                {
                    if (oldVelocity.Y > 0f)
                    {
                        directionY = -1;
                    }
                    else
                    {
                        directionY = 1;
                    }

                    base.velocity.Y = (float) directionY;
                }

                var num636 = target;
                var direction2 = base.direction;
                if (target == 255 || Main.player[target].wet || Main.player[target].dead ||
                    Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
                {
                    this.ai[0] = 90f;
                    TargetClosest(true);
                }
                else if (this.ai[0] > 0f)
                {
                    this.ai[0] -= 1f;
                    TargetClosest(true);
                }

                if (netUpdate && num636 == target && direction2 == base.direction)
                {
                    netUpdate = false;
                }

                var num637 = 0.05f;
                var num638 = 0.01f;
                var num639 = 3f;
                var num640 = 1f;
                var num641 = 30f;
                var num642 = 100f;
                var num643 = Math.Abs(base.position.X + (float) (base.width / 2) -
                                        (Main.player[target].position.X + (float) (Main.player[target].width / 2)));
                var num644 = Main.player[target].position.Y - (float) (base.height / 2);
                if (type == 509)
                {
                    num637 = 0.09f;
                    num638 = 0.03f;
                    num639 = 5f;
                    num640 = 2f;
                    num641 = 40f;
                    num642 = 150f;
                    num644 = Main.player[target].Center.Y - (float) (base.height / 2);
                    rotation = base.velocity.X * 0.1f;
                    for (var num645 = 0; num645 < 200; num645++)
                    {
                        if (num645 != whoAmI && Main.npc[num645].active && Main.npc[num645].type == type &&
                            Math.Abs(base.position.X - Main.npc[num645].position.X) +
                            Math.Abs(base.position.Y - Main.npc[num645].position.Y) < (float) base.width)
                        {
                            if (base.position.X < Main.npc[num645].position.X)
                            {
                                base.velocity.X -= 0.05f;
                            }
                            else
                            {
                                base.velocity.X += 0.05f;
                            }

                            if (base.position.Y < Main.npc[num645].position.Y)
                            {
                                base.velocity.Y -= 0.05f;
                            }
                            else
                            {
                                base.velocity.Y += 0.05f;
                            }
                        }
                    }
                }

                if (this.ai[0] <= 0f)
                {
                    num639 *= 0.8f;
                    num637 *= 0.7f;
                    num644 = base.Center.Y + (float) (directionY * 1000);
                    if (base.velocity.X < 0f)
                    {
                        base.direction = -1;
                    }
                    else if (base.velocity.X > 0f || base.direction == 0)
                    {
                        base.direction = 1;
                    }
                }

                if (num643 > num641)
                {
                    if (base.direction == -1 && base.velocity.X > 0f - num639)
                    {
                        base.velocity.X -= num637;
                        if (base.velocity.X > num639)
                        {
                            base.velocity.X -= num637;
                        }
                        else if (base.velocity.X > 0f)
                        {
                            base.velocity.X -= num637 / 2f;
                        }

                        if (base.velocity.X < 0f - num639)
                        {
                            base.velocity.X = 0f - num639;
                        }
                    }
                    else if (base.direction == 1 && base.velocity.X < num639)
                    {
                        base.velocity.X += num637;
                        if (base.velocity.X < 0f - num639)
                        {
                            base.velocity.X += num637;
                        }
                        else if (base.velocity.X < 0f)
                        {
                            base.velocity.X += num637 / 2f;
                        }

                        if (base.velocity.X > num639)
                        {
                            base.velocity.X = num639;
                        }
                    }
                }

                if (num643 > num642)
                {
                    num644 -= num642 / 2f;
                }

                if (base.position.Y < num644)
                {
                    base.velocity.Y += num638;
                    if (base.velocity.Y < 0f)
                    {
                        base.velocity.Y += num638;
                    }
                }
                else
                {
                    base.velocity.Y -= num638;
                    if (base.velocity.Y > 0f)
                    {
                        base.velocity.Y -= num638;
                    }
                }

                if (base.velocity.Y < 0f - num640)
                {
                    base.velocity.Y = 0f - num640;
                }

                if (base.velocity.Y > num640)
                {
                    base.velocity.Y = num640;
                }

                if (wet)
                {
                    if (base.velocity.Y > 0f)
                    {
                        base.velocity.Y *= 0.95f;
                    }

                    base.velocity.Y -= 0.5f;
                    if (base.velocity.Y < -4f)
                    {
                        base.velocity.Y = -4f;
                    }
                }
            }
            else if (aiStyle == 45)
            {
                golemBoss = whoAmI;
                if (localAI[0] == 0f && Main.netMode != 1)
                {
                    localAI[0] = 1f;
                    NewNPC((int) base.Center.X - 84, (int) base.Center.Y - 9, 247, 0, 0f, 0f, 0f, 0f, 255);
                    NewNPC((int) base.Center.X + 78, (int) base.Center.Y - 9, 248, 0, 0f, 0f, 0f, 0f, 255);
                    NewNPC((int) base.Center.X - 3, (int) base.Center.Y - 57, 246, 0, 0f, 0f, 0f, 0f, 255);
                }

                if (target >= 0 && Main.player[target].dead)
                {
                    TargetClosest(true);
                    if (Main.player[target].dead)
                    {
                        noTileCollide = true;
                    }
                }

                if (alpha > 0)
                {
                    alpha -= 10;
                    if (alpha < 0)
                    {
                        alpha = 0;
                    }

                    this.ai[1] = 0f;
                }

                var flag38 = false;
                var flag39 = false;
                var flag40 = false;
                dontTakeDamage = false;
                for (var num646 = 0; num646 < 200; num646++)
                {
                    if (Main.npc[num646].active && Main.npc[num646].type == 246)
                    {
                        flag38 = true;
                    }

                    if (Main.npc[num646].active && Main.npc[num646].type == 247)
                    {
                        flag39 = true;
                    }

                    if (Main.npc[num646].active && Main.npc[num646].type == 248)
                    {
                        flag40 = true;
                    }
                }

                dontTakeDamage = flag38;
                if (!flag39)
                {
                    var position60 = new Vector2(base.Center.X - 80f, base.Center.Y - 9f);
                    newColor = default(Color);
                    var num647 = Dust.NewDust(position60, 8, 8, 31, 0f, 0f, 100, newColor, 1f);
                    Main.dust[num647].alpha += Main.rand.Next(100);
                    Main.dust[num647].velocity *= 0.2f;
                    Main.dust[num647].velocity.Y -= 0.5f + (float) Main.rand.Next(10) * 0.1f;
                    Main.dust[num647].fadeIn = 0.5f + (float) Main.rand.Next(10) * 0.1f;
                    if (Main.rand.Next(10) == 0)
                    {
                        var position61 = new Vector2(base.Center.X - 80f, base.Center.Y - 9f);
                        newColor = default(Color);
                        num647 = Dust.NewDust(position61, 8, 8, 6, 0f, 0f, 0, newColor, 1f);
                        if (Main.rand.Next(20) != 0)
                        {
                            Main.dust[num647].noGravity = true;
                            Main.dust[num647].scale *= 1f + (float) Main.rand.Next(10) * 0.1f;
                            Main.dust[num647].velocity.Y -= 1f;
                        }
                    }
                }

                if (!flag40)
                {
                    var position62 = new Vector2(base.Center.X + 62f, base.Center.Y - 9f);
                    newColor = default(Color);
                    var num648 = Dust.NewDust(position62, 8, 8, 31, 0f, 0f, 100, newColor, 1f);
                    Main.dust[num648].alpha += Main.rand.Next(100);
                    Main.dust[num648].velocity *= 0.2f;
                    Main.dust[num648].velocity.Y -= 0.5f + (float) Main.rand.Next(10) * 0.1f;
                    Main.dust[num648].fadeIn = 0.5f + (float) Main.rand.Next(10) * 0.1f;
                    if (Main.rand.Next(10) == 0)
                    {
                        var position63 = new Vector2(base.Center.X + 62f, base.Center.Y - 9f);
                        newColor = default(Color);
                        num648 = Dust.NewDust(position63, 8, 8, 6, 0f, 0f, 0, newColor, 1f);
                        if (Main.rand.Next(20) != 0)
                        {
                            Main.dust[num648].noGravity = true;
                            Main.dust[num648].scale *= 1f + (float) Main.rand.Next(10) * 0.1f;
                            Main.dust[num648].velocity.Y -= 1f;
                        }
                    }
                }

                if (this.ai[0] == 0f)
                {
                    noTileCollide = false;
                    if (base.velocity.Y == 0f)
                    {
                        base.velocity.X *= 0.8f;
                        this.ai[1] += 1f;
                        if (this.ai[1] > 0f)
                        {
                            if (!flag39)
                            {
                                this.ai[1] += 2f;
                            }

                            if (!flag40)
                            {
                                this.ai[1] += 2f;
                            }

                            if (!flag38)
                            {
                                this.ai[1] += 2f;
                            }

                            if (life < lifeMax)
                            {
                                this.ai[1] += 1f;
                            }

                            if (life < lifeMax / 2)
                            {
                                this.ai[1] += 4f;
                            }

                            if (life < lifeMax / 3)
                            {
                                this.ai[1] += 8f;
                            }
                        }

                        if (this.ai[1] >= 300f)
                        {
                            this.ai[1] = -20f;
                            frameCounter = 0.0;
                        }
                        else if (this.ai[1] == -1f)
                        {
                            TargetClosest(true);
                            base.velocity.X = (float) (4 * base.direction);
                            base.velocity.Y = -12.1f;
                            this.ai[0] = 1f;
                            this.ai[1] = 0f;
                        }
                    }
                }
                else if (this.ai[0] == 1f)
                {
                    if (base.velocity.Y == 0f)
                    {
                        Main.PlaySound(SoundID.Item14, base.position);
                        this.ai[0] = 0f;
                        for (var num649 = (int) base.position.X - 20;
                            num649 < (int) base.position.X + base.width + 40;
                            num649 += 20)
                        {
                            for (var num650 = 0; num650 < 4; num650++)
                            {
                                var position64 = new Vector2(base.position.X - 20f,
                                    base.position.Y + (float) base.height);
                                var width50 = base.width + 20;
                                newColor = default(Color);
                                var num651 = Dust.NewDust(position64, width50, 4, 31, 0f, 0f, 100, newColor, 1.5f);
                                Main.dust[num651].velocity *= 0.2f;
                            }

                            var position65 = new Vector2((float) (num649 - 20),
                                base.position.Y + (float) base.height - 8f);
                            vector16 = default(Vector2);
                            var num652 = Gore.NewGore(position65, vector16, Main.rand.Next(61, 64), 1f);
                            Main.gore[num652].velocity *= 0.4f;
                        }
                    }
                    else
                    {
                        TargetClosest(true);
                        if (base.position.X < Main.player[target].position.X && base.position.X + (float) base.width >
                            Main.player[target].position.X + (float) Main.player[target].width)
                        {
                            base.velocity.X *= 0.9f;
                            base.velocity.Y += 0.2f;
                        }
                        else
                        {
                            if (base.direction < 0)
                            {
                                base.velocity.X -= 0.2f;
                            }
                            else if (base.direction > 0)
                            {
                                base.velocity.X += 0.2f;
                            }

                            var num653 = 3f;
                            if (life < lifeMax)
                            {
                                num653 += 1f;
                            }

                            if (life < lifeMax / 2)
                            {
                                num653 += 1f;
                            }

                            if (life < lifeMax / 4)
                            {
                                num653 += 1f;
                            }

                            if (base.velocity.X < 0f - num653)
                            {
                                base.velocity.X = 0f - num653;
                            }

                            if (base.velocity.X > num653)
                            {
                                base.velocity.X = num653;
                            }
                        }
                    }
                }

                if (target <= 0 || target == 255 || Main.player[target].dead)
                {
                    TargetClosest(true);
                }

                var num654 = 3000;
                if (Math.Abs(base.Center.X - Main.player[target].Center.X) +
                    Math.Abs(base.Center.Y - Main.player[target].Center.Y) > (float) num654)
                {
                    TargetClosest(true);
                    if (Math.Abs(base.Center.X - Main.player[target].Center.X) +
                        Math.Abs(base.Center.Y - Main.player[target].Center.Y) > (float) num654)
                    {
                        active = false;
                    }
                }
            }
            else if (aiStyle == 46)
            {
                noTileCollide = true;
                if (golemBoss < 0)
                {
                    StrikeNPCNoInteraction(9999, 0f, 0, false, false, false);
                }
                else
                {
                    var num655 = 12f;
                    var vector78 = new Vector2(base.Center.X, base.Center.Y);
                    var num656 = Main.npc[golemBoss].Center.X - vector78.X;
                    var num657 = Main.npc[golemBoss].Center.Y - vector78.Y;
                    num657 -= 57f;
                    num656 -= 3f;
                    var num658 = (float) Math.Sqrt((double) (num656 * num656 + num657 * num657));
                    if (num658 < 20f)
                    {
                        rotation = 0f;
                        base.velocity.X = num656;
                        base.velocity.Y = num657;
                    }
                    else
                    {
                        num658 = num655 / num658;
                        base.velocity.X = num656 * num658;
                        base.velocity.Y = num657 * num658;
                        rotation = base.velocity.X * 0.1f;
                    }

                    if (alpha > 0)
                    {
                        alpha -= 10;
                        if (alpha < 0)
                        {
                            alpha = 0;
                        }

                        this.ai[1] = 30f;
                    }

                    if (this.ai[0] == 0f)
                    {
                        this.ai[1] += 1f;
                        var num659 = 300;
                        if (this.ai[1] < 20f || this.ai[1] > (float) (num659 - 20))
                        {
                            localAI[0] = 1f;
                        }
                        else
                        {
                            localAI[0] = 0f;
                        }

                        if (this.ai[1] >= (float) num659)
                        {
                            TargetClosest(true);
                            this.ai[1] = 0f;
                            var vector79 = new Vector2(base.Center.X, base.Center.Y + 10f);
                            var num660 = 8f;
                            var num661 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                           vector79.X;
                            var num662 = Main.player[target].position.Y + (float) Main.player[target].height * 0.5f -
                                           vector79.Y;
                            var num663 = (float) Math.Sqrt((double) (num661 * num661 + num662 * num662));
                            num663 = num660 / num663;
                            num661 *= num663;
                            num662 *= num663;
                            var num664 = 18;
                            var num665 = 258;
                            if (Main.netMode != 1)
                            {
                                Projectile.NewProjectile(vector79.X, vector79.Y, num661, num662, num665, num664, 0f,
                                    Main.myPlayer, 0f, 0f);
                            }
                        }
                    }
                    else if (this.ai[0] == 1f)
                    {
                        TargetClosest(true);
                        var vector80 = new Vector2(base.Center.X, base.Center.Y + 10f);
                        if (Main.player[target].Center.X < base.Center.X - (float) base.width)
                        {
                            localAI[1] = -1f;
                            vector80.X -= 40f;
                        }
                        else if (Main.player[target].Center.X > base.Center.X + (float) base.width)
                        {
                            localAI[1] = 1f;
                            vector80.X += 40f;
                        }
                        else
                        {
                            localAI[1] = 0f;
                        }

                        this.ai[1] += 1f;
                        if ((double) life < (double) lifeMax * 0.4)
                        {
                            this.ai[1] += 1f;
                        }

                        if ((double) life < (double) lifeMax * 0.2)
                        {
                            this.ai[1] += 1f;
                        }

                        var num666 = 300;
                        if (this.ai[1] < 20f || this.ai[1] > (float) (num666 - 20))
                        {
                            localAI[0] = 1f;
                        }
                        else
                        {
                            localAI[0] = 0f;
                        }

                        if (this.ai[1] >= (float) num666)
                        {
                            TargetClosest(true);
                            this.ai[1] = 0f;
                            var num667 = 8f;
                            var num668 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                           vector80.X;
                            var num669 = Main.player[target].position.Y + (float) Main.player[target].height * 0.5f -
                                           vector80.Y;
                            var num670 = (float) Math.Sqrt((double) (num668 * num668 + num669 * num669));
                            num670 = num667 / num670;
                            num668 *= num670;
                            num669 *= num670;
                            var num671 = 24;
                            var num672 = 258;
                            if (Main.netMode != 1)
                            {
                                Projectile.NewProjectile(vector80.X, vector80.Y, num668, num669, num672, num671, 0f,
                                    Main.myPlayer, 0f, 0f);
                            }
                        }

                        this.ai[2] += 1f;
                        if (life < lifeMax / 3)
                        {
                            this.ai[2] += 1f;
                        }

                        if (life < lifeMax / 4)
                        {
                            this.ai[2] += 1f;
                        }

                        if (life < lifeMax / 5)
                        {
                            this.ai[2] += 1f;
                        }

                        if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
                        {
                            this.ai[2] += 4f;
                        }

                        if (this.ai[2] > (float) (60 + Main.rand.Next(600)))
                        {
                            this.ai[2] = 0f;
                            var num673 = 28;
                            var num674 = 259;
                            if (localAI[1] == 0f)
                            {
                                for (var num675 = 0; num675 < 2; num675++)
                                {
                                    vector80 = new Vector2(base.Center.X, base.Center.Y - 22f);
                                    if (num675 == 0)
                                    {
                                        vector80.X -= 18f;
                                    }
                                    else
                                    {
                                        vector80.X += 18f;
                                    }

                                    var num676 = 11f;
                                    var num677 = Main.player[target].position.X +
                                                   (float) Main.player[target].width * 0.5f - vector80.X;
                                    var num678 = Main.player[target].position.Y +
                                                   (float) Main.player[target].height * 0.5f - vector80.Y;
                                    var num679 = (float) Math.Sqrt((double) (num677 * num677 + num678 * num678));
                                    num679 = num676 / num679;
                                    num677 *= num679;
                                    num678 *= num679;
                                    vector80.X += num677 * 3f;
                                    vector80.Y += num678 * 3f;
                                    if (Main.netMode != 1)
                                    {
                                        var num680 = Projectile.NewProjectile(vector80.X, vector80.Y, num677, num678,
                                            num674, num673, 0f, Main.myPlayer, 0f, 0f);
                                        Main.projectile[num680].timeLeft = 300;
                                    }
                                }
                            }
                            else if (localAI[1] != 0f)
                            {
                                vector80 = new Vector2(base.Center.X, base.Center.Y - 22f);
                                if (localAI[1] == -1f)
                                {
                                    vector80.X -= 30f;
                                }
                                else if (localAI[1] == 1f)
                                {
                                    vector80.X += 30f;
                                }

                                var num681 = 12f;
                                var num682 = Main.player[target].position.X +
                                               (float) Main.player[target].width * 0.5f - vector80.X;
                                var num683 = Main.player[target].position.Y +
                                               (float) Main.player[target].height * 0.5f - vector80.Y;
                                var num684 = (float) Math.Sqrt((double) (num682 * num682 + num683 * num683));
                                num684 = num681 / num684;
                                num682 *= num684;
                                num683 *= num684;
                                vector80.X += num682 * 3f;
                                vector80.Y += num683 * 3f;
                                if (Main.netMode != 1)
                                {
                                    var num685 = Projectile.NewProjectile(vector80.X, vector80.Y, num682, num683,
                                        num674, num673, 0f, Main.myPlayer, 0f, 0f);
                                    Main.projectile[num685].timeLeft = 300;
                                }
                            }
                        }
                    }

                    if (life < lifeMax / 2)
                    {
                        this.ai[0] = 1f;
                    }
                    else
                    {
                        this.ai[0] = 0f;
                    }
                }
            }
            else if (aiStyle == 47)
            {
                if (golemBoss < 0)
                {
                    StrikeNPCNoInteraction(9999, 0f, 0, false, false, false);
                }
                else
                {
                    if (alpha > 0)
                    {
                        alpha -= 10;
                        if (alpha < 0)
                        {
                            alpha = 0;
                        }

                        this.ai[1] = 0f;
                    }

                    if (this.ai[0] == 0f)
                    {
                        noTileCollide = true;
                        var num686 = 14f;
                        if (life < lifeMax / 2)
                        {
                            num686 += 3f;
                        }

                        if (life < lifeMax / 4)
                        {
                            num686 += 3f;
                        }

                        if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax)
                        {
                            num686 += 8f;
                        }

                        var vector81 = new Vector2(base.Center.X, base.Center.Y);
                        var num687 = Main.npc[golemBoss].Center.X - vector81.X;
                        var num688 = Main.npc[golemBoss].Center.Y - vector81.Y;
                        num688 -= 9f;
                        num687 = ((type != 247) ? (num687 + 78f) : (num687 - 84f));
                        var num689 = (float) Math.Sqrt((double) (num687 * num687 + num688 * num688));
                        if (num689 < 12f + num686)
                        {
                            rotation = 0f;
                            base.velocity.X = num687;
                            base.velocity.Y = num688;
                            this.ai[1] += 1f;
                            if (life < lifeMax / 2)
                            {
                                this.ai[1] += 1f;
                            }

                            if (life < lifeMax / 4)
                            {
                                this.ai[1] += 1f;
                            }

                            if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax)
                            {
                                this.ai[1] += 10f;
                            }

                            if (this.ai[1] >= 60f)
                            {
                                TargetClosest(true);
                                if ((type == 247 && base.Center.X + 100f > Main.player[target].Center.X) ||
                                    (type == 248 && base.Center.X - 100f < Main.player[target].Center.X))
                                {
                                    this.ai[1] = 0f;
                                    this.ai[0] = 1f;
                                }
                                else
                                {
                                    this.ai[1] = 0f;
                                }
                            }
                        }
                        else
                        {
                            num689 = num686 / num689;
                            base.velocity.X = num687 * num689;
                            base.velocity.Y = num688 * num689;
                            rotation = (float) Math.Atan2((double) (0f - base.velocity.Y),
                                (double) (0f - base.velocity.X));
                            if (type == 247)
                            {
                                rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X);
                            }
                        }
                    }
                    else if (this.ai[0] == 1f)
                    {
                        noTileCollide = true;
                        collideX = false;
                        collideY = false;
                        var num690 = 12f;
                        if (life < lifeMax / 2)
                        {
                            num690 += 4f;
                        }

                        if (life < lifeMax / 4)
                        {
                            num690 += 4f;
                        }

                        if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax)
                        {
                            num690 += 10f;
                        }

                        var vector82 = new Vector2(base.Center.X, base.Center.Y);
                        var num691 = Main.player[target].Center.X - vector82.X;
                        var num692 = Main.player[target].Center.Y - vector82.Y;
                        var num693 = (float) Math.Sqrt((double) (num691 * num691 + num692 * num692));
                        num693 = num690 / num693;
                        base.velocity.X = num691 * num693;
                        base.velocity.Y = num692 * num693;
                        this.ai[0] = 2f;
                        rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X);
                        if (type == 247)
                        {
                            rotation = (float) Math.Atan2((double) (0f - base.velocity.Y),
                                (double) (0f - base.velocity.X));
                        }
                    }
                    else if (this.ai[0] == 2f)
                    {
                        if (Math.Abs(base.velocity.X) > Math.Abs(base.velocity.Y))
                        {
                            if (base.velocity.X > 0f && base.Center.X > Main.player[target].Center.X)
                            {
                                noTileCollide = false;
                            }

                            if (base.velocity.X < 0f && base.Center.X < Main.player[target].Center.X)
                            {
                                noTileCollide = false;
                            }
                        }
                        else
                        {
                            if (base.velocity.Y > 0f && base.Center.Y > Main.player[target].Center.Y)
                            {
                                noTileCollide = false;
                            }

                            if (base.velocity.Y < 0f && base.Center.Y < Main.player[target].Center.Y)
                            {
                                noTileCollide = false;
                            }
                        }

                        var vector83 = new Vector2(base.Center.X, base.Center.Y);
                        var num694 = Main.npc[golemBoss].Center.X - vector83.X;
                        var num695 = Main.npc[golemBoss].Center.Y - vector83.Y;
                        num694 += Main.npc[golemBoss].velocity.X;
                        num695 += Main.npc[golemBoss].velocity.Y;
                        num695 -= 9f;
                        num694 = ((type != 247) ? (num694 + 78f) : (num694 - 84f));
                        var num696 = (float) Math.Sqrt((double) (num694 * num694 + num695 * num695));
                        if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax)
                        {
                            knockBackResist = 0f;
                            if (num696 > 700f || collideX || collideY)
                            {
                                noTileCollide = true;
                                this.ai[0] = 0f;
                            }
                        }
                        else
                        {
                            var flag41 = justHit;
                            if (flag41)
                            {
                                for (var num697 = 0; num697 < 200; num697++)
                                {
                                    if (Main.npc[num697].active && Main.npc[num697].type == 246)
                                    {
                                        if (Main.npc[num697].life < Main.npc[num697].lifeMax / 2)
                                        {
                                            if (knockBackResist == 0f)
                                            {
                                                flag41 = false;
                                            }

                                            knockBackResist = 0f;
                                        }

                                        break;
                                    }
                                }
                            }

                            if (num696 > 600f || collideX || collideY || flag41)
                            {
                                noTileCollide = true;
                                this.ai[0] = 0f;
                            }
                        }
                    }
                    else if (this.ai[0] == 3f)
                    {
                        noTileCollide = true;
                        var num698 = 12f;
                        var num699 = 0.4f;
                        var vector84 = new Vector2(base.Center.X, base.Center.Y);
                        var num700 = Main.player[target].Center.X - vector84.X;
                        var num701 = Main.player[target].Center.Y - vector84.Y;
                        var num702 = (float) Math.Sqrt((double) (num700 * num700 + num701 * num701));
                        num702 = num698 / num702;
                        num700 *= num702;
                        num701 *= num702;
                        if (base.velocity.X < num700)
                        {
                            base.velocity.X += num699;
                            if (base.velocity.X < 0f && num700 > 0f)
                            {
                                base.velocity.X += num699 * 2f;
                            }
                        }
                        else if (base.velocity.X > num700)
                        {
                            base.velocity.X -= num699;
                            if (base.velocity.X > 0f && num700 < 0f)
                            {
                                base.velocity.X -= num699 * 2f;
                            }
                        }

                        if (base.velocity.Y < num701)
                        {
                            base.velocity.Y += num699;
                            if (base.velocity.Y < 0f && num701 > 0f)
                            {
                                base.velocity.Y += num699 * 2f;
                            }
                        }
                        else if (base.velocity.Y > num701)
                        {
                            base.velocity.Y -= num699;
                            if (base.velocity.Y > 0f && num701 < 0f)
                            {
                                base.velocity.Y -= num699 * 2f;
                            }
                        }

                        rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X);
                        if (type == 247)
                        {
                            rotation = (float) Math.Atan2((double) (0f - base.velocity.Y),
                                (double) (0f - base.velocity.X));
                        }
                    }
                }
            }
            else if (aiStyle == 48)
            {
                var flag42 = false;
                if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
                {
                    noTileCollide = true;
                    flag42 = true;
                }
                else
                {
                    noTileCollide = false;
                }

                if (golemBoss < 0)
                {
                    StrikeNPCNoInteraction(9999, 0f, 0, false, false, false);
                }
                else
                {
                    TargetClosest(true);
                    var num703 = 7f;
                    var num704 = 0.05f;
                    var vector85 = new Vector2(base.Center.X, base.Center.Y);
                    var num705 = Main.player[target].Center.X - vector85.X;
                    var num706 = Main.player[target].Center.Y - vector85.Y - 300f;
                    var num707 = (float) Math.Sqrt((double) (num705 * num705 + num706 * num706));
                    num707 = num703 / num707;
                    num705 *= num707;
                    num706 *= num707;
                    if (base.velocity.X < num705)
                    {
                        base.velocity.X += num704;
                        if (base.velocity.X < 0f && num705 > 0f)
                        {
                            base.velocity.X += num704;
                        }
                    }
                    else if (base.velocity.X > num705)
                    {
                        base.velocity.X -= num704;
                        if (base.velocity.X > 0f && num705 < 0f)
                        {
                            base.velocity.X -= num704;
                        }
                    }

                    if (base.velocity.Y < num706)
                    {
                        base.velocity.Y += num704;
                        if (base.velocity.Y < 0f && num706 > 0f)
                        {
                            base.velocity.Y += num704;
                        }
                    }
                    else if (base.velocity.Y > num706)
                    {
                        base.velocity.Y -= num704;
                        if (base.velocity.Y > 0f && num706 < 0f)
                        {
                            base.velocity.Y -= num704;
                        }
                    }

                    this.ai[1] += 1f;
                    if ((double) Main.npc[golemBoss].life < (double) Main.npc[golemBoss].lifeMax * 0.8)
                    {
                        this.ai[1] += 1f;
                    }

                    if ((double) Main.npc[golemBoss].life < (double) Main.npc[golemBoss].lifeMax * 0.6)
                    {
                        this.ai[1] += 1f;
                    }

                    if ((double) Main.npc[golemBoss].life < (double) Main.npc[golemBoss].lifeMax * 0.2)
                    {
                        this.ai[1] += 1f;
                    }

                    if ((double) Main.npc[golemBoss].life < (double) Main.npc[golemBoss].lifeMax * 0.1)
                    {
                        this.ai[1] += 1f;
                    }

                    var num708 = 360;
                    if (this.ai[1] < 20f || this.ai[1] > (float) (num708 - 20))
                    {
                        localAI[0] = 1f;
                    }
                    else
                    {
                        localAI[0] = 0f;
                    }

                    if (flag42)
                    {
                        this.ai[1] = 20f;
                    }

                    if (this.ai[1] >= (float) num708)
                    {
                        TargetClosest(true);
                        this.ai[1] = 0f;
                        var vector86 = new Vector2(base.Center.X, base.Center.Y - 10f);
                        var num709 = 8f;
                        var num710 = 20;
                        var num711 = 258;
                        var num712 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                       vector86.X;
                        var num713 = Main.player[target].position.Y + (float) Main.player[target].height * 0.5f -
                                       vector86.Y;
                        var num714 = (float) Math.Sqrt((double) (num712 * num712 + num713 * num713));
                        num714 = num709 / num714;
                        num712 *= num714;
                        num713 *= num714;
                        if (Main.netMode != 1)
                        {
                            Projectile.NewProjectile(vector86.X, vector86.Y, num712, num713, num711, num710, 0f,
                                Main.myPlayer, 0f, 0f);
                        }
                    }

                    this.ai[2] += 1f;
                    if ((double) Main.npc[golemBoss].life < (double) Main.npc[golemBoss].lifeMax / 1.25)
                    {
                        this.ai[2] += 1f;
                    }

                    if ((double) Main.npc[golemBoss].life < (double) Main.npc[golemBoss].lifeMax / 1.5)
                    {
                        this.ai[2] += 1f;
                    }

                    if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 2)
                    {
                        this.ai[2] += 1f;
                    }

                    if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 3)
                    {
                        this.ai[2] += 1f;
                    }

                    if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 4)
                    {
                        this.ai[2] += 1f;
                    }

                    if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 5)
                    {
                        this.ai[2] += 1f;
                    }

                    if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 6)
                    {
                        this.ai[2] += 1f;
                    }

                    if (!Collision.CanHit(Main.npc[golemBoss].Center, 1, 1, Main.player[target].Center, 1, 1))
                    {
                        this.ai[2] += 4f;
                    }

                    if (this.ai[2] > (float) (100 + Main.rand.Next(4800)))
                    {
                        this.ai[2] = 0f;
                        for (var num715 = 0; num715 < 2; num715++)
                        {
                            var vector87 = new Vector2(base.Center.X, base.Center.Y - 50f);
                            switch (num715)
                            {
                                case 0:
                                    vector87.X -= 14f;
                                    break;
                                case 1:
                                    vector87.X += 14f;
                                    break;
                            }

                            var num716 = 11f;
                            var num717 = 24;
                            var num718 = 259;
                            if ((double) Main.npc[golemBoss].life < (double) Main.npc[golemBoss].lifeMax * 0.5)
                            {
                                num717++;
                                num716 += 0.25f;
                            }

                            if ((double) Main.npc[golemBoss].life < (double) Main.npc[golemBoss].lifeMax * 0.4)
                            {
                                num717++;
                                num716 += 0.25f;
                            }

                            if ((double) Main.npc[golemBoss].life < (double) Main.npc[golemBoss].lifeMax * 0.3)
                            {
                                num717++;
                                num716 += 0.25f;
                            }

                            if ((double) Main.npc[golemBoss].life < (double) Main.npc[golemBoss].lifeMax * 0.2)
                            {
                                num717++;
                                num716 += 0.25f;
                            }

                            if ((double) Main.npc[golemBoss].life < (double) Main.npc[golemBoss].lifeMax * 0.1)
                            {
                                num717++;
                                num716 += 0.25f;
                            }

                            var num719 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                           vector87.X;
                            var num720 = Main.player[target].position.Y + (float) Main.player[target].height * 0.5f -
                                           vector87.Y;
                            var num721 = (float) Math.Sqrt((double) (num719 * num719 + num720 * num720));
                            num721 = num716 / num721;
                            num719 *= num721;
                            num720 *= num721;
                            vector87.X += num719 * 3f;
                            vector87.Y += num720 * 3f;
                            if (Main.netMode != 1)
                            {
                                var num722 = Projectile.NewProjectile(vector87.X, vector87.Y, num719, num720, num718,
                                    num717, 0f, Main.myPlayer, 0f, 0f);
                                Main.projectile[num722].timeLeft = 300;
                            }
                        }
                    }
                }
            }
            else if (aiStyle == 49)
            {
                noGravity = true;
                TargetClosest(true);
                var num723 = 4f;
                var num724 = 0.25f;
                var vector88 = new Vector2(base.Center.X, base.Center.Y);
                var num725 = Main.player[target].Center.X - vector88.X;
                var num726 = Main.player[target].Center.Y - vector88.Y - 200f;
                var num727 = (float) Math.Sqrt((double) (num725 * num725 + num726 * num726));
                if (num727 < 20f)
                {
                    num725 = base.velocity.X;
                    num726 = base.velocity.Y;
                }
                else
                {
                    num727 = num723 / num727;
                    num725 *= num727;
                    num726 *= num727;
                }

                if (base.velocity.X < num725)
                {
                    base.velocity.X += num724;
                    if (base.velocity.X < 0f && num725 > 0f)
                    {
                        base.velocity.X += num724 * 2f;
                    }
                }
                else if (base.velocity.X > num725)
                {
                    base.velocity.X -= num724;
                    if (base.velocity.X > 0f && num725 < 0f)
                    {
                        base.velocity.X -= num724 * 2f;
                    }
                }

                if (base.velocity.Y < num726)
                {
                    base.velocity.Y += num724;
                    if (base.velocity.Y < 0f && num726 > 0f)
                    {
                        base.velocity.Y += num724 * 2f;
                    }
                }
                else if (base.velocity.Y > num726)
                {
                    base.velocity.Y -= num724;
                    if (base.velocity.Y > 0f && num726 < 0f)
                    {
                        base.velocity.Y -= num724 * 2f;
                    }
                }

                if (base.position.X + (float) base.width > Main.player[target].position.X &&
                    base.position.X < Main.player[target].position.X + (float) Main.player[target].width &&
                    base.position.Y + (float) base.height < Main.player[target].position.Y &&
                    Collision.CanHit(base.position, base.width, base.height, Main.player[target].position,
                        Main.player[target].width, Main.player[target].height) && Main.netMode != 1)
                {
                    this.ai[0] += 1f;
                    if (this.ai[0] > 8f)
                    {
                        this.ai[0] = 0f;
                        var num728 = (int) (base.position.X + 10f + (float) Main.rand.Next(base.width - 20));
                        var num729 = (int) (base.position.Y + (float) base.height + 4f);
                        Projectile.NewProjectile((float) num728, (float) num729, 0f, 5f, 264, 20, 0f, Main.myPlayer, 0f,
                            0f);
                    }
                }
            }
            else if (aiStyle == 50)
            {
                if (timeLeft > 5)
                {
                    timeLeft = 5;
                }

                noTileCollide = true;
                base.velocity.Y += 0.02f;
                if (base.velocity.Y < 0f && !Main.expertMode)
                {
                    base.velocity.Y *= 0.99f;
                }

                if (base.velocity.Y > 1f)
                {
                    base.velocity.Y = 1f;
                }

                TargetClosest(true);
                if (base.position.X + (float) base.width < Main.player[target].position.X)
                {
                    if (base.velocity.X < 0f)
                    {
                        base.velocity.X *= 0.98f;
                    }

                    if (Main.expertMode && base.velocity.X < 0f)
                    {
                        base.velocity.X *= 0.98f;
                    }

                    base.velocity.X += 0.1f;
                    if (Main.expertMode)
                    {
                        base.velocity.X += 0.1f;
                    }
                }
                else if (base.position.X > Main.player[target].position.X + (float) Main.player[target].width)
                {
                    if (base.velocity.X > 0f)
                    {
                        base.velocity.X *= 0.98f;
                    }

                    if (Main.expertMode && base.velocity.X > 0f)
                    {
                        base.velocity.X *= 0.98f;
                    }

                    base.velocity.X -= 0.1f;
                    if (Main.expertMode)
                    {
                        base.velocity.X += 0.1f;
                    }
                }

                if (base.velocity.X > 5f || base.velocity.X < -5f)
                {
                    base.velocity.X *= 0.97f;
                }

                rotation = base.velocity.X * 0.2f;
            }
            else if (aiStyle == 51)
            {
                var flag43 = false;
                var flag44 = false;
                TargetClosest(true);
                if (Main.player[target].dead)
                {
                    flag44 = true;
                    flag43 = true;
                }

                if (Main.netMode != 1)
                {
                    var num730 = 6000;
                    if (Math.Abs(base.Center.X - Main.player[target].Center.X) +
                        Math.Abs(base.Center.Y - Main.player[target].Center.Y) > (float) num730)
                    {
                        active = false;
                        life = 0;
                        if (Main.netMode == 2)
                        {
                            NetMessage.SendData(23, -1, -1, null, whoAmI, 0f, 0f, 0f, 0, 0, 0);
                        }
                    }
                }

                plantBoss = whoAmI;
                if (localAI[0] == 0f && Main.netMode != 1)
                {
                    localAI[0] = 1f;
                    NewNPC((int) base.Center.X, (int) base.Center.Y, 263, whoAmI, 0f, 0f, 0f, 0f, 255);
                    NewNPC((int) base.Center.X, (int) base.Center.Y, 263, whoAmI, 0f, 0f, 0f, 0f, 255);
                    NewNPC((int) base.Center.X, (int) base.Center.Y, 263, whoAmI, 0f, 0f, 0f, 0f, 255);
                }

                var array2 = new int[3];
                var num731 = 0f;
                var num732 = 0f;
                var num733 = 0;
                for (var num734 = 0; num734 < 200; num734++)
                {
                    if (Main.npc[num734].active && Main.npc[num734].aiStyle == 52)
                    {
                        num731 += Main.npc[num734].Center.X;
                        num732 += Main.npc[num734].Center.Y;
                        array2[num733] = num734;
                        num733++;
                        if (num733 > 2)
                        {
                            break;
                        }
                    }
                }

                num731 /= (float) num733;
                num732 /= (float) num733;
                var num735 = 2.5f;
                var num736 = 0.025f;
                if (life < lifeMax / 2)
                {
                    num735 = 5f;
                    num736 = 0.05f;
                }

                if (life < lifeMax / 4)
                {
                    num735 = 7f;
                }

                if (!Main.player[target].ZoneJungle ||
                    (double) Main.player[target].position.Y < Main.worldSurface * 16.0 ||
                    Main.player[target].position.Y > (float) ((Main.maxTilesY - 200) * 16))
                {
                    flag43 = true;
                    num735 += 8f;
                    num736 = 0.15f;
                }

                if (Main.expertMode)
                {
                    num735 += 1f;
                    num735 *= 1.1f;
                    num736 += 0.01f;
                    num736 *= 1.1f;
                }

                var vector89 = new Vector2(num731, num732);
                var num737 = Main.player[target].Center.X - vector89.X;
                var num738 = Main.player[target].Center.Y - vector89.Y;
                if (flag44)
                {
                    num738 *= -1f;
                    num737 *= -1f;
                    num735 += 8f;
                }

                var num739 = (float) Math.Sqrt((double) (num737 * num737 + num738 * num738));
                var num740 = 500;
                if (flag43)
                {
                    num740 += 350;
                }

                if (Main.expertMode)
                {
                    num740 += 150;
                }

                if (num739 >= (float) num740)
                {
                    num739 = (float) num740 / num739;
                    num737 *= num739;
                    num738 *= num739;
                }

                num731 += num737;
                num732 += num738;
                vector89 = new Vector2(base.Center.X, base.Center.Y);
                num737 = num731 - vector89.X;
                num738 = num732 - vector89.Y;
                num739 = (float) Math.Sqrt((double) (num737 * num737 + num738 * num738));
                if (num739 < num735)
                {
                    num737 = base.velocity.X;
                    num738 = base.velocity.Y;
                }
                else
                {
                    num739 = num735 / num739;
                    num737 *= num739;
                    num738 *= num739;
                }

                if (base.velocity.X < num737)
                {
                    base.velocity.X += num736;
                    if (base.velocity.X < 0f && num737 > 0f)
                    {
                        base.velocity.X += num736 * 2f;
                    }
                }
                else if (base.velocity.X > num737)
                {
                    base.velocity.X -= num736;
                    if (base.velocity.X > 0f && num737 < 0f)
                    {
                        base.velocity.X -= num736 * 2f;
                    }
                }

                if (base.velocity.Y < num738)
                {
                    base.velocity.Y += num736;
                    if (base.velocity.Y < 0f && num738 > 0f)
                    {
                        base.velocity.Y += num736 * 2f;
                    }
                }
                else if (base.velocity.Y > num738)
                {
                    base.velocity.Y -= num736;
                    if (base.velocity.Y > 0f && num738 < 0f)
                    {
                        base.velocity.Y -= num736 * 2f;
                    }
                }

                var vector90 = new Vector2(base.Center.X, base.Center.Y);
                var num741 = Main.player[target].Center.X - vector90.X;
                var num742 = Main.player[target].Center.Y - vector90.Y;
                rotation = (float) Math.Atan2((double) num742, (double) num741) + 1.57f;
                if (life > lifeMax / 2)
                {
                    defense = 36;
                    damage = (int) (50f * Main.damageMultiplier);
                    if (flag43)
                    {
                        defense *= 2;
                        damage *= 2;
                    }

                    if (Main.netMode != 1)
                    {
                        localAI[1] += 1f;
                        if ((double) life < (double) lifeMax * 0.9)
                        {
                            localAI[1] += 1f;
                        }

                        if ((double) life < (double) lifeMax * 0.8)
                        {
                            localAI[1] += 1f;
                        }

                        if ((double) life < (double) lifeMax * 0.7)
                        {
                            localAI[1] += 1f;
                        }

                        if ((double) life < (double) lifeMax * 0.6)
                        {
                            localAI[1] += 1f;
                        }

                        if (flag43)
                        {
                            localAI[1] += 3f;
                        }

                        if (Main.expertMode)
                        {
                            localAI[1] += 1f;
                        }

                        if (Main.expertMode && justHit && Main.rand.Next(2) == 0)
                        {
                            localAI[3] = 1f;
                        }

                        if (localAI[1] > 80f)
                        {
                            localAI[1] = 0f;
                            var flag45 = Collision.CanHit(base.position, base.width, base.height,
                                Main.player[target].position, Main.player[target].width, Main.player[target].height);
                            if (localAI[3] > 0f)
                            {
                                flag45 = true;
                                localAI[3] = 0f;
                            }

                            if (flag45)
                            {
                                var vector91 = new Vector2(base.Center.X, base.Center.Y);
                                var num743 = 15f;
                                if (Main.expertMode)
                                {
                                    num743 = 17f;
                                }

                                var num744 = Main.player[target].position.X +
                                               (float) Main.player[target].width * 0.5f - vector91.X;
                                var num745 = Main.player[target].position.Y +
                                               (float) Main.player[target].height * 0.5f - vector91.Y;
                                var num746 = (float) Math.Sqrt((double) (num744 * num744 + num745 * num745));
                                num746 = num743 / num746;
                                num744 *= num746;
                                num745 *= num746;
                                var num747 = 22;
                                var num748 = 275;
                                var maxValue2 = 4;
                                var maxValue3 = 8;
                                if (Main.expertMode)
                                {
                                    maxValue2 = 2;
                                    maxValue3 = 6;
                                }

                                if ((double) life < (double) lifeMax * 0.8 && Main.rand.Next(maxValue2) == 0)
                                {
                                    num747 = 27;
                                    localAI[1] = -30f;
                                    num748 = 276;
                                }
                                else if ((double) life < (double) lifeMax * 0.8 && Main.rand.Next(maxValue3) == 0)
                                {
                                    num747 = 31;
                                    localAI[1] = -120f;
                                    num748 = 277;
                                }

                                if (flag43)
                                {
                                    num747 *= 2;
                                }

                                if (Main.expertMode)
                                {
                                    num747 = (int) ((double) num747 * 0.9);
                                }

                                vector91.X += num744 * 3f;
                                vector91.Y += num745 * 3f;
                                var num749 = Projectile.NewProjectile(vector91.X, vector91.Y, num744, num745, num748,
                                    num747, 0f, Main.myPlayer, 0f, 0f);
                                if (num748 != 277)
                                {
                                    Main.projectile[num749].timeLeft = 300;
                                }
                            }
                        }
                    }
                }
                else
                {
                    defense = 10;
                    damage = (int) (70f * Main.damageMultiplier);
                    if (flag43)
                    {
                        defense *= 4;
                        damage *= 2;
                    }

                    if (Main.netMode != 1)
                    {
                        if (localAI[0] == 1f)
                        {
                            localAI[0] = 2f;
                            for (var num750 = 0; num750 < 8; num750++)
                            {
                                NewNPC((int) base.Center.X, (int) base.Center.Y, 264, whoAmI, 0f, 0f, 0f, 0f, 255);
                            }

                            if (Main.expertMode)
                            {
                                for (var num751 = 0; num751 < 200; num751++)
                                {
                                    if (Main.npc[num751].active && Main.npc[num751].aiStyle == 52)
                                    {
                                        for (var num752 = 0; num752 < 3; num752++)
                                        {
                                            var num753 = NewNPC((int) base.Center.X, (int) base.Center.Y, 264, whoAmI,
                                                0f, 0f, 0f, 0f, 255);
                                            Main.npc[num753].ai[3] = (float) (num751 + 1);
                                        }
                                    }
                                }
                            }
                        }
                        else if (Main.expertMode && Main.rand.Next(60) == 0)
                        {
                            var num754 = 0;
                            for (var num755 = 0; num755 < 200; num755++)
                            {
                                if (Main.npc[num755].active && Main.npc[num755].type == 264 &&
                                    Main.npc[num755].ai[3] == 0f)
                                {
                                    num754++;
                                }
                            }

                            if (num754 < 8 && Main.rand.Next((num754 + 1) * 10) <= 1)
                            {
                                NewNPC((int) base.Center.X, (int) base.Center.Y, 264, whoAmI, 0f, 0f, 0f, 0f, 255);
                            }
                        }
                    }

                    if (localAI[2] == 0f)
                    {
                        Gore.NewGore(
                            new Vector2(base.position.X + (float) Main.rand.Next(base.width),
                                base.position.Y + (float) Main.rand.Next(base.height)), base.velocity, 378, scale);
                        Gore.NewGore(
                            new Vector2(base.position.X + (float) Main.rand.Next(base.width),
                                base.position.Y + (float) Main.rand.Next(base.height)), base.velocity, 379, scale);
                        Gore.NewGore(
                            new Vector2(base.position.X + (float) Main.rand.Next(base.width),
                                base.position.Y + (float) Main.rand.Next(base.height)), base.velocity, 380, scale);
                        localAI[2] = 1f;
                    }

                    localAI[1] += 1f;
                    if ((double) life < (double) lifeMax * 0.4)
                    {
                        localAI[1] += 1f;
                    }

                    if ((double) life < (double) lifeMax * 0.3)
                    {
                        localAI[1] += 1f;
                    }

                    if ((double) life < (double) lifeMax * 0.2)
                    {
                        localAI[1] += 1f;
                    }

                    if ((double) life < (double) lifeMax * 0.1)
                    {
                        localAI[1] += 1f;
                    }

                    if (localAI[1] >= 350f)
                    {
                        var num756 = 8f;
                        var vector92 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        var num757 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                       vector92.X + (float) Main.rand.Next(-10, 11);
                        var num758 = Math.Abs(num757 * 0.2f);
                        var num759 = Main.player[target].position.Y + (float) Main.player[target].height * 0.5f -
                                       vector92.Y + (float) Main.rand.Next(-10, 11);
                        if (num759 > 0f)
                        {
                            num758 = 0f;
                        }

                        num759 -= num758;
                        var num760 = (float) Math.Sqrt((double) (num757 * num757 + num759 * num759));
                        num760 = num756 / num760;
                        num757 *= num760;
                        num759 *= num760;
                        var num761 = NewNPC((int) base.Center.X, (int) base.Center.Y, 265, 0, 0f, 0f, 0f, 0f, 255);
                        Main.npc[num761].velocity.X = num757;
                        Main.npc[num761].velocity.Y = num759;
                        Main.npc[num761].netUpdate = true;
                        localAI[1] = 0f;
                    }
                }
            }
            else if (aiStyle == 52)
            {
                var flag46 = false;
                var flag47 = false;
                if (plantBoss < 0)
                {
                    StrikeNPCNoInteraction(9999, 0f, 0, false, false, false);
                    netUpdate = true;
                }
                else
                {
                    if (Main.player[Main.npc[plantBoss].target].dead)
                    {
                        flag47 = true;
                    }

                    if ((plantBoss != -1 && !Main.player[Main.npc[plantBoss].target].ZoneJungle) ||
                        (double) Main.player[Main.npc[plantBoss].target].position.Y < Main.worldSurface * 16.0 ||
                        Main.player[Main.npc[plantBoss].target].position.Y > (float) ((Main.maxTilesY - 200) * 16) ||
                        flag47)
                    {
                        localAI[0] -= 4f;
                        flag46 = true;
                    }

                    if (Main.netMode == 1)
                    {
                        if (this.ai[0] == 0f)
                        {
                            this.ai[0] = (float) (int) (base.Center.X / 16f);
                        }

                        if (this.ai[1] == 0f)
                        {
                            this.ai[1] = (float) (int) (base.Center.X / 16f);
                        }
                    }

                    if (Main.netMode != 1)
                    {
                        if (this.ai[0] == 0f || this.ai[1] == 0f)
                        {
                            localAI[0] = 0f;
                        }

                        localAI[0] -= 1f;
                        if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2)
                        {
                            localAI[0] -= 2f;
                        }

                        if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 4)
                        {
                            localAI[0] -= 2f;
                        }

                        if (flag46)
                        {
                            localAI[0] -= 6f;
                        }

                        if (!flag47 && localAI[0] <= 0f && this.ai[0] != 0f)
                        {
                            for (var num762 = 0; num762 < 200; num762++)
                            {
                                if (num762 != whoAmI && Main.npc[num762].active && Main.npc[num762].type == type &&
                                    (Main.npc[num762].velocity.X != 0f || Main.npc[num762].velocity.Y != 0f))
                                {
                                    localAI[0] = (float) Main.rand.Next(60, 300);
                                }
                            }
                        }

                        if (localAI[0] <= 0f)
                        {
                            localAI[0] = (float) Main.rand.Next(300, 600);
                            var flag48 = false;
                            var num763 = 0;
                            while (!flag48 && num763 <= 1000)
                            {
                                num763++;
                                var num764 = (int) (Main.player[Main.npc[plantBoss].target].Center.X / 16f);
                                var num765 = (int) (Main.player[Main.npc[plantBoss].target].Center.Y / 16f);
                                if (this.ai[0] == 0f)
                                {
                                    num764 = (int) ((Main.player[Main.npc[plantBoss].target].Center.X +
                                                     Main.npc[plantBoss].Center.X) / 32f);
                                    num765 = (int) ((Main.player[Main.npc[plantBoss].target].Center.Y +
                                                     Main.npc[plantBoss].Center.Y) / 32f);
                                }

                                if (flag47)
                                {
                                    num764 = (int) Main.npc[plantBoss].position.X / 16;
                                    num765 = (int) (Main.npc[plantBoss].position.Y + 400f) / 16;
                                }

                                var num766 = 20;
                                num766 += (int) (100f * ((float) num763 / 1000f));
                                var num767 = num764 + Main.rand.Next(-num766, num766 + 1);
                                var num768 = num765 + Main.rand.Next(-num766, num766 + 1);
                                if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2 &&
                                    Main.rand.Next(6) == 0)
                                {
                                    TargetClosest(true);
                                    var num769 = (int) (Main.player[target].Center.X / 16f);
                                    var num770 = (int) (Main.player[target].Center.Y / 16f);
                                    if (Main.tile[num769, num770].wall > 0)
                                    {
                                        num767 = num769;
                                        num768 = num770;
                                    }
                                }

                                try
                                {
                                    if (WorldGen.SolidTile(num767, num768) ||
                                        (Main.tile[num767, num768].wall > 0 &&
                                         (num763 > 500 || Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2)))
                                    {
                                        flag48 = true;
                                        this.ai[0] = (float) num767;
                                        this.ai[1] = (float) num768;
                                        netUpdate = true;
                                    }
                                }
                                catch
                                {
                                }
                            }
                        }
                    }

                    if (this.ai[0] > 0f && this.ai[1] > 0f)
                    {
                        var num771 = 6f;
                        if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2)
                        {
                            num771 = 8f;
                        }

                        if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 4)
                        {
                            num771 = 10f;
                        }

                        if (Main.expertMode)
                        {
                            num771 += 1f;
                        }

                        if (Main.expertMode && Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2)
                        {
                            num771 += 1f;
                        }

                        if (flag46)
                        {
                            num771 *= 2f;
                        }

                        if (flag47)
                        {
                            num771 *= 2f;
                        }

                        var vector93 = new Vector2(base.Center.X, base.Center.Y);
                        var num772 = this.ai[0] * 16f - 8f - vector93.X;
                        var num773 = this.ai[1] * 16f - 8f - vector93.Y;
                        var num774 = (float) Math.Sqrt((double) (num772 * num772 + num773 * num773));
                        if (num774 < 12f + num771)
                        {
                            base.velocity.X = num772;
                            base.velocity.Y = num773;
                        }
                        else
                        {
                            num774 = num771 / num774;
                            base.velocity.X = num772 * num774;
                            base.velocity.Y = num773 * num774;
                        }

                        var vector94 = new Vector2(base.Center.X, base.Center.Y);
                        var num775 = Main.npc[plantBoss].Center.X - vector94.X;
                        var num776 = Main.npc[plantBoss].Center.Y - vector94.Y;
                        rotation = (float) Math.Atan2((double) num776, (double) num775) - 1.57f;
                    }
                }
            }
            else if (aiStyle == 53)
            {
                if (plantBoss < 0)
                {
                    StrikeNPCNoInteraction(9999, 0f, 0, false, false, false);
                    netUpdate = true;
                }
                else
                {
                    var num777 = plantBoss;
                    if (this.ai[3] > 0f)
                    {
                        num777 = (int) this.ai[3] - 1;
                    }

                    if (Main.netMode != 1)
                    {
                        localAI[0] -= 1f;
                        if (localAI[0] <= 0f)
                        {
                            localAI[0] = (float) Main.rand.Next(120, 480);
                            this.ai[0] = (float) Main.rand.Next(-100, 101);
                            this.ai[1] = (float) Main.rand.Next(-100, 101);
                            netUpdate = true;
                        }
                    }

                    TargetClosest(true);
                    var num778 = 0.2f;
                    var num779 = 200f;
                    if ((double) Main.npc[plantBoss].life < (double) Main.npc[plantBoss].lifeMax * 0.25)
                    {
                        num779 += 100f;
                    }

                    if ((double) Main.npc[plantBoss].life < (double) Main.npc[plantBoss].lifeMax * 0.1)
                    {
                        num779 += 100f;
                    }

                    if (Main.expertMode)
                    {
                        var num780 = 1f - (float) life / (float) lifeMax;
                        num779 += num780 * 300f;
                        num778 += 0.3f;
                    }

                    if (!Main.npc[num777].active || plantBoss < 0)
                    {
                        active = false;
                    }
                    else
                    {
                        var num781 = Main.npc[num777].position.X + (float) (Main.npc[num777].width / 2);
                        var num782 = Main.npc[num777].position.Y + (float) (Main.npc[num777].height / 2);
                        var vector95 = new Vector2(num781, num782);
                        var num783 = num781 + this.ai[0];
                        var num784 = num782 + this.ai[1];
                        var num785 = num783 - vector95.X;
                        var num786 = num784 - vector95.Y;
                        var num787 = (float) Math.Sqrt((double) (num785 * num785 + num786 * num786));
                        num787 = num779 / num787;
                        num785 *= num787;
                        num786 *= num787;
                        if (base.position.X < num781 + num785)
                        {
                            base.velocity.X += num778;
                            if (base.velocity.X < 0f && num785 > 0f)
                            {
                                base.velocity.X *= 0.9f;
                            }
                        }
                        else if (base.position.X > num781 + num785)
                        {
                            base.velocity.X -= num778;
                            if (base.velocity.X > 0f && num785 < 0f)
                            {
                                base.velocity.X *= 0.9f;
                            }
                        }

                        if (base.position.Y < num782 + num786)
                        {
                            base.velocity.Y += num778;
                            if (base.velocity.Y < 0f && num786 > 0f)
                            {
                                base.velocity.Y *= 0.9f;
                            }
                        }
                        else if (base.position.Y > num782 + num786)
                        {
                            base.velocity.Y -= num778;
                            if (base.velocity.Y > 0f && num786 < 0f)
                            {
                                base.velocity.Y *= 0.9f;
                            }
                        }

                        if (base.velocity.X > 8f)
                        {
                            base.velocity.X = 8f;
                        }

                        if (base.velocity.X < -8f)
                        {
                            base.velocity.X = -8f;
                        }

                        if (base.velocity.Y > 8f)
                        {
                            base.velocity.Y = 8f;
                        }

                        if (base.velocity.Y < -8f)
                        {
                            base.velocity.Y = -8f;
                        }

                        if (num785 > 0f)
                        {
                            spriteDirection = 1;
                            rotation = (float) Math.Atan2((double) num786, (double) num785);
                        }

                        if (num785 < 0f)
                        {
                            spriteDirection = -1;
                            rotation = (float) Math.Atan2((double) num786, (double) num785) + 3.14f;
                        }
                    }
                }
            }
            else if (aiStyle == 54)
            {
                crimsonBoss = whoAmI;
                if (Main.netMode != 1 && localAI[0] == 0f)
                {
                    localAI[0] = 1f;
                    for (var num788 = 0; num788 < 20; num788++)
                    {
                        var x6 = base.Center.X;
                        var y4 = base.Center.Y;
                        x6 += (float) Main.rand.Next(-base.width, base.width);
                        y4 += (float) Main.rand.Next(-base.height, base.height);
                        var num789 = NewNPC((int) x6, (int) y4, 267, 0, 0f, 0f, 0f, 0f, 255);
                        Main.npc[num789].velocity = new Vector2((float) Main.rand.Next(-30, 31) * 0.1f,
                            (float) Main.rand.Next(-30, 31) * 0.1f);
                        Main.npc[num789].netUpdate = true;
                    }
                }

                if (Main.netMode != 1)
                {
                    TargetClosest(true);
                    var num790 = 6000;
                    if (Math.Abs(base.Center.X - Main.player[target].Center.X) +
                        Math.Abs(base.Center.Y - Main.player[target].Center.Y) > (float) num790)
                    {
                        active = false;
                        life = 0;
                        if (Main.netMode == 2)
                        {
                            NetMessage.SendData(23, -1, -1, null, whoAmI, 0f, 0f, 0f, 0, 0, 0);
                        }
                    }
                }

                if (this.ai[0] < 0f)
                {
                    if (localAI[2] == 0f)
                    {
                        Main.PlaySound(3, (int) base.position.X, (int) base.position.Y, 1, 1f, 0f);
                        localAI[2] = 1f;
                        Gore.NewGore(base.position,
                            new Vector2((float) Main.rand.Next(-30, 31) * 0.2f, (float) Main.rand.Next(-30, 31) * 0.2f),
                            392, 1f);
                        Gore.NewGore(base.position,
                            new Vector2((float) Main.rand.Next(-30, 31) * 0.2f, (float) Main.rand.Next(-30, 31) * 0.2f),
                            393, 1f);
                        Gore.NewGore(base.position,
                            new Vector2((float) Main.rand.Next(-30, 31) * 0.2f, (float) Main.rand.Next(-30, 31) * 0.2f),
                            394, 1f);
                        Gore.NewGore(base.position,
                            new Vector2((float) Main.rand.Next(-30, 31) * 0.2f, (float) Main.rand.Next(-30, 31) * 0.2f),
                            395, 1f);
                        for (var num791 = 0; num791 < 20; num791++)
                        {
                            var position66 = base.position;
                            var width51 = base.width;
                            var height48 = base.height;
                            var speedX25 = (float) Main.rand.Next(-30, 31) * 0.2f;
                            var speedY25 = (float) Main.rand.Next(-30, 31) * 0.2f;
                            newColor = default(Color);
                            Dust.NewDust(position66, width51, height48, 5, speedX25, speedY25, 0, newColor, 1f);
                        }

                        Main.PlaySound(15, (int) base.position.X, (int) base.position.Y, 0, 1f, 0f);
                    }

                    dontTakeDamage = false;
                    knockBackResist = 0.5f;
                    if (Main.expertMode)
                    {
                        knockBackResist *= Main.expertKnockBack;
                    }

                    TargetClosest(true);
                    var vector96 = new Vector2(base.Center.X, base.Center.Y);
                    var num792 = Main.player[target].Center.X - vector96.X;
                    var num793 = Main.player[target].Center.Y - vector96.Y;
                    var num794 = (float) Math.Sqrt((double) (num792 * num792 + num793 * num793));
                    var num795 = 8f;
                    num794 = num795 / num794;
                    num792 *= num794;
                    num793 *= num794;
                    base.velocity.X = (base.velocity.X * 50f + num792) / 51f;
                    base.velocity.Y = (base.velocity.Y * 50f + num793) / 51f;
                    if (this.ai[0] == -1f)
                    {
                        if (Main.netMode != 1)
                        {
                            localAI[1] += 1f;
                            if (justHit)
                            {
                                localAI[1] -= (float) Main.rand.Next(5);
                            }

                            var num796 = 60 + Main.rand.Next(120);
                            if (Main.netMode != 0)
                            {
                                num796 += Main.rand.Next(30, 90);
                            }

                            if (localAI[1] >= (float) num796)
                            {
                                localAI[1] = 0f;
                                TargetClosest(true);
                                var num797 = 0;
                                do
                                {
                                    num797++;
                                    var num798 = (int) Main.player[target].Center.X / 16;
                                    var num799 = (int) Main.player[target].Center.Y / 16;
                                    num798 = ((Main.rand.Next(2) != 0)
                                        ? (num798 - Main.rand.Next(7, 13))
                                        : (num798 + Main.rand.Next(7, 13)));
                                    num799 = ((Main.rand.Next(2) != 0)
                                        ? (num799 - Main.rand.Next(7, 13))
                                        : (num799 + Main.rand.Next(7, 13)));
                                    if (!WorldGen.SolidTile(num798, num799))
                                    {
                                        this.ai[3] = 0f;
                                        this.ai[0] = -2f;
                                        this.ai[1] = (float) num798;
                                        this.ai[2] = (float) num799;
                                        netUpdate = true;
                                        netSpam = 0;
                                        break;
                                    }
                                } while (num797 <= 100);
                            }
                        }
                    }
                    else if (this.ai[0] == -2f)
                    {
                        base.velocity *= 0.9f;
                        if (Main.netMode != 0)
                        {
                            this.ai[3] += 15f;
                        }
                        else
                        {
                            this.ai[3] += 25f;
                        }

                        if (this.ai[3] >= 255f)
                        {
                            this.ai[3] = 255f;
                            base.position.X = this.ai[1] * 16f - (float) (base.width / 2);
                            base.position.Y = this.ai[2] * 16f - (float) (base.height / 2);
                            Main.PlaySound(SoundID.Item8, base.Center);
                            this.ai[0] = -3f;
                            netUpdate = true;
                            netSpam = 0;
                        }

                        alpha = (int) this.ai[3];
                    }
                    else if (this.ai[0] == -3f)
                    {
                        if (Main.netMode != 0)
                        {
                            this.ai[3] -= 15f;
                        }
                        else
                        {
                            this.ai[3] -= 25f;
                        }

                        if (this.ai[3] <= 0f)
                        {
                            this.ai[3] = 0f;
                            this.ai[0] = -1f;
                            netUpdate = true;
                            netSpam = 0;
                        }

                        alpha = (int) this.ai[3];
                    }
                }
                else
                {
                    TargetClosest(true);
                    var vector97 = new Vector2(base.Center.X, base.Center.Y);
                    var num800 = Main.player[target].Center.X - vector97.X;
                    var num801 = Main.player[target].Center.Y - vector97.Y;
                    var num802 = (float) Math.Sqrt((double) (num800 * num800 + num801 * num801));
                    var num803 = 1f;
                    if (num802 < num803)
                    {
                        base.velocity.X = num800;
                        base.velocity.Y = num801;
                    }
                    else
                    {
                        num802 = num803 / num802;
                        base.velocity.X = num800 * num802;
                        base.velocity.Y = num801 * num802;
                    }

                    if (this.ai[0] == 0f)
                    {
                        if (Main.netMode != 1)
                        {
                            var num804 = 0;
                            for (var num805 = 0; num805 < 200; num805++)
                            {
                                if (Main.npc[num805].active && Main.npc[num805].type == 267)
                                {
                                    num804++;
                                }
                            }

                            if (num804 == 0)
                            {
                                this.ai[0] = -1f;
                                localAI[1] = 0f;
                                alpha = 0;
                                netUpdate = true;
                            }

                            localAI[1] += 1f;
                            if (localAI[1] >= (float) (120 + Main.rand.Next(300)))
                            {
                                localAI[1] = 0f;
                                TargetClosest(true);
                                var num806 = 0;
                                do
                                {
                                    num806++;
                                    var num807 = (int) Main.player[target].Center.X / 16;
                                    var num808 = (int) Main.player[target].Center.Y / 16;
                                    num807 += Main.rand.Next(-50, 51);
                                    num808 += Main.rand.Next(-50, 51);
                                    if (!WorldGen.SolidTile(num807, num808) &&
                                        Collision.CanHit(new Vector2((float) (num807 * 16), (float) (num808 * 16)), 1,
                                            1, Main.player[target].position, Main.player[target].width,
                                            Main.player[target].height))
                                    {
                                        this.ai[0] = 1f;
                                        this.ai[1] = (float) num807;
                                        this.ai[2] = (float) num808;
                                        netUpdate = true;
                                        break;
                                    }
                                } while (num806 <= 100);
                            }
                        }
                    }
                    else if (this.ai[0] == 1f)
                    {
                        alpha += 5;
                        if (alpha >= 255)
                        {
                            Main.PlaySound(SoundID.Item8, base.Center);
                            alpha = 255;
                            base.position.X = this.ai[1] * 16f - (float) (base.width / 2);
                            base.position.Y = this.ai[2] * 16f - (float) (base.height / 2);
                            this.ai[0] = 2f;
                        }
                    }
                    else if (this.ai[0] == 2f)
                    {
                        alpha -= 5;
                        if (alpha <= 0)
                        {
                            alpha = 0;
                            this.ai[0] = 0f;
                        }
                    }
                }

                if (Main.player[target].dead || !Main.player[target].ZoneCrimson)
                {
                    if (localAI[3] < 120f)
                    {
                        localAI[3] += 1f;
                    }

                    if (localAI[3] > 60f)
                    {
                        base.velocity.Y += (localAI[3] - 60f) * 0.25f;
                    }

                    this.ai[0] = 2f;
                    alpha = 10;
                }
                else if (localAI[3] > 0f)
                {
                    localAI[3] -= 1f;
                }
            }
            else if (aiStyle == 55)
            {
                if (crimsonBoss < 0)
                {
                    active = false;
                    netUpdate = true;
                }
                else if (this.ai[0] == 0f)
                {
                    var vector98 = new Vector2(base.Center.X, base.Center.Y);
                    var num809 = Main.npc[crimsonBoss].Center.X - vector98.X;
                    var num810 = Main.npc[crimsonBoss].Center.Y - vector98.Y;
                    var num811 = (float) Math.Sqrt((double) (num809 * num809 + num810 * num810));
                    if (num811 > 90f)
                    {
                        num811 = 8f / num811;
                        num809 *= num811;
                        num810 *= num811;
                        base.velocity.X = (base.velocity.X * 15f + num809) / 16f;
                        base.velocity.Y = (base.velocity.Y * 15f + num810) / 16f;
                    }
                    else
                    {
                        if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < 8f)
                        {
                            base.velocity.Y *= 1.05f;
                            base.velocity.X *= 1.05f;
                        }

                        if (Main.netMode != 1 &&
                            ((Main.expertMode && Main.rand.Next(100) == 0) || Main.rand.Next(200) == 0))
                        {
                            TargetClosest(true);
                            vector98 = new Vector2(base.Center.X, base.Center.Y);
                            num809 = Main.player[target].Center.X - vector98.X;
                            num810 = Main.player[target].Center.Y - vector98.Y;
                            num811 = (float) Math.Sqrt((double) (num809 * num809 + num810 * num810));
                            num811 = 8f / num811;
                            base.velocity.X = num809 * num811;
                            base.velocity.Y = num810 * num811;
                            this.ai[0] = 1f;
                            netUpdate = true;
                        }
                    }
                }
                else
                {
                    if (Main.expertMode)
                    {
                        var value4 = Main.player[target].Center - base.Center;
                        value4.Normalize();
                        value4 *= 9f;
                        base.velocity = (base.velocity * 99f + value4) / 100f;
                    }

                    var vector99 = new Vector2(base.Center.X, base.Center.Y);
                    var num812 = Main.npc[crimsonBoss].Center.X - vector99.X;
                    var num813 = Main.npc[crimsonBoss].Center.Y - vector99.Y;
                    var num814 = (float) Math.Sqrt((double) (num812 * num812 + num813 * num813));
                    if (num814 > 700f || justHit)
                    {
                        this.ai[0] = 0f;
                    }
                }
            }
            else if (aiStyle == 56)
            {
                TargetClosest(true);
                var vector100 = new Vector2(base.Center.X, base.Center.Y);
                var num815 = Main.player[target].Center.X - vector100.X;
                var num816 = Main.player[target].Center.Y - vector100.Y;
                var num817 = (float) Math.Sqrt((double) (num815 * num815 + num816 * num816));
                var num818 = 12f;
                num817 = num818 / num817;
                num815 *= num817;
                num816 *= num817;
                base.velocity.X = (base.velocity.X * 100f + num815) / 101f;
                base.velocity.Y = (base.velocity.Y * 100f + num816) / 101f;
                rotation = (float) Math.Atan2((double) num816, (double) num815) - 1.57f;
                var position67 = base.position;
                var width52 = base.width;
                var height49 = base.height;
                newColor = default(Color);
                var num819 = Dust.NewDust(position67, width52, height49, 180, 0f, 0f, 0, newColor, 1f);
                Main.dust[num819].velocity *= 0.1f;
                Main.dust[num819].scale = 1.3f;
                Main.dust[num819].noGravity = true;
            }
            else if (aiStyle == 57)
            {
                var num820 = 2f;
                noGravity = true;
                noTileCollide = true;
                if (!Main.dayTime)
                {
                    TargetClosest(true);
                }

                var flag49 = false;
                if ((double) life < (double) lifeMax * 0.75)
                {
                    num820 = 3f;
                }

                if ((double) life < (double) lifeMax * 0.5)
                {
                    num820 = 4f;
                }

                if (Main.dayTime)
                {
                    if (timeLeft > 10)
                    {
                        timeLeft = 10;
                    }

                    num820 = 8f;
                }
                else if (this.ai[0] == 0f)
                {
                    this.ai[1] += 1f;
                    if ((double) life < (double) lifeMax * 0.5)
                    {
                        this.ai[1] += 1f;
                    }

                    if ((double) life < (double) lifeMax * 0.25)
                    {
                        this.ai[1] += 1f;
                    }

                    if (this.ai[1] >= 300f && Main.netMode != 1)
                    {
                        this.ai[1] = 0f;
                        if ((double) life < (double) lifeMax * 0.25 && type != 344)
                        {
                            this.ai[0] = (float) Main.rand.Next(3, 5);
                        }
                        else
                        {
                            this.ai[0] = (float) Main.rand.Next(1, 3);
                        }

                        netUpdate = true;
                    }
                }
                else if (this.ai[0] == 1f)
                {
                    if (type == 344)
                    {
                        flag49 = true;
                        this.ai[1] += 1f;
                        if (this.ai[1] % 5f == 0f)
                        {
                            var vector101 =
                                new Vector2(base.position.X + 20f + (float) Main.rand.Next(base.width - 40),
                                    base.position.Y + 20f + (float) Main.rand.Next(base.height - 40));
                            var num821 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                           vector101.X;
                            var num822 = Main.player[target].position.Y - vector101.Y;
                            num821 += (float) Main.rand.Next(-50, 51);
                            num822 += (float) Main.rand.Next(-50, 51);
                            num822 -= Math.Abs(num821) * ((float) Main.rand.Next(0, 21) * 0.01f);
                            var num823 = (float) Math.Sqrt((double) (num821 * num821 + num822 * num822));
                            var num824 = 12.5f;
                            num823 = num824 / num823;
                            num821 *= num823;
                            num822 *= num823;
                            num821 *= 1f + (float) Main.rand.Next(-20, 21) * 0.02f;
                            num822 *= 1f + (float) Main.rand.Next(-20, 21) * 0.02f;
                            Projectile.NewProjectile(vector101.X, vector101.Y, num821, num822, 345, 43, 0f,
                                Main.myPlayer, (float) Main.rand.Next(0, 31), 0f);
                        }

                        if (this.ai[1] >= 180f)
                        {
                            this.ai[1] = 0f;
                            this.ai[0] = 0f;
                        }
                    }
                    else
                    {
                        flag49 = true;
                        this.ai[1] += 1f;
                        if (this.ai[1] % 15f == 0f)
                        {
                            var vector102 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                base.position.Y + (float) base.height * 0.5f + 30f);
                            var num825 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                           vector102.X;
                            var num826 = Main.player[target].position.Y - vector102.Y;
                            var num827 = (float) Math.Sqrt((double) (num825 * num825 + num826 * num826));
                            var num828 = 10f;
                            num827 = num828 / num827;
                            num825 *= num827;
                            num826 *= num827;
                            num825 *= 1f + (float) Main.rand.Next(-20, 21) * 0.01f;
                            num826 *= 1f + (float) Main.rand.Next(-20, 21) * 0.01f;
                            Projectile.NewProjectile(vector102.X, vector102.Y, num825, num826, 325, 50, 0f,
                                Main.myPlayer, 0f, 0f);
                        }

                        if (this.ai[1] >= 120f)
                        {
                            this.ai[1] = 0f;
                            this.ai[0] = 0f;
                        }
                    }
                }
                else if (this.ai[0] == 2f)
                {
                    if (type == 344)
                    {
                        flag49 = true;
                        this.ai[1] += 1f;
                        if (this.ai[1] > 60f && this.ai[1] < 240f && this.ai[1] % 15f == 0f)
                        {
                            var num829 = 4.5f;
                            var vector103 =
                                new Vector2(base.position.X + 20f + (float) Main.rand.Next(base.width - 40),
                                    base.position.Y + 60f + (float) Main.rand.Next(base.height - 80));
                            var num830 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                           vector103.X;
                            var num831 = Main.player[target].position.Y - vector103.Y;
                            num831 -= Math.Abs(num830) * 0.3f;
                            num829 += Math.Abs(num830) * 0.004f;
                            num830 += (float) Main.rand.Next(-50, 51);
                            num831 -= (float) Main.rand.Next(50, 201);
                            var num832 = (float) Math.Sqrt((double) (num830 * num830 + num831 * num831));
                            num832 = num829 / num832;
                            num830 *= num832;
                            num831 *= num832;
                            num830 *= 1f + (float) Main.rand.Next(-30, 31) * 0.01f;
                            num831 *= 1f + (float) Main.rand.Next(-30, 31) * 0.01f;
                            Projectile.NewProjectile(vector103.X, vector103.Y, num830, num831, 346, 57, 0f,
                                Main.myPlayer, 0f, (float) Main.rand.Next(2));
                        }

                        if (this.ai[1] >= 300f)
                        {
                            this.ai[1] = 0f;
                            this.ai[0] = 0f;
                        }
                    }
                    else
                    {
                        flag49 = true;
                        this.ai[1] += 1f;
                        if (this.ai[1] > 60f && this.ai[1] < 240f && this.ai[1] % 8f == 0f)
                        {
                            var num833 = 10f;
                            var vector104 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                base.position.Y + (float) base.height * 0.5f + 30f);
                            var num834 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                           vector104.X;
                            var num835 = Main.player[target].position.Y - vector104.Y;
                            num835 -= Math.Abs(num834) * 0.3f;
                            num833 += Math.Abs(num834) * 0.004f;
                            if (num833 > 14f)
                            {
                                num833 = 14f;
                            }

                            num834 += (float) Main.rand.Next(-50, 51);
                            num835 -= (float) Main.rand.Next(50, 201);
                            var num836 = (float) Math.Sqrt((double) (num834 * num834 + num835 * num835));
                            num836 = num833 / num836;
                            num834 *= num836;
                            num835 *= num836;
                            num834 *= 1f + (float) Main.rand.Next(-30, 31) * 0.01f;
                            num835 *= 1f + (float) Main.rand.Next(-30, 31) * 0.01f;
                            Projectile.NewProjectile(vector104.X, vector104.Y, num834, num835, Main.rand.Next(326, 329),
                                40, 0f, Main.myPlayer, 0f, 0f);
                        }

                        if (this.ai[1] >= 300f)
                        {
                            this.ai[1] = 0f;
                            this.ai[0] = 0f;
                        }
                    }
                }
                else if (this.ai[0] == 3f)
                {
                    num820 = 4f;
                    this.ai[1] += 1f;
                    if (this.ai[1] % 30f == 0f)
                    {
                        var vector105 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f + 30f);
                        var num837 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                       vector105.X;
                        var num838 = Main.player[target].position.Y - vector105.Y;
                        var num839 = (float) Math.Sqrt((double) (num837 * num837 + num838 * num838));
                        var num840 = 16f;
                        num839 = num840 / num839;
                        num837 *= num839;
                        num838 *= num839;
                        num837 *= 1f + (float) Main.rand.Next(-20, 21) * 0.001f;
                        num838 *= 1f + (float) Main.rand.Next(-20, 21) * 0.001f;
                        Projectile.NewProjectile(vector105.X, vector105.Y, num837, num838, 325, 75, 0f, Main.myPlayer,
                            0f, 0f);
                    }

                    if (this.ai[1] >= 120f)
                    {
                        this.ai[1] = 0f;
                        this.ai[0] = 0f;
                    }
                }
                else if (this.ai[0] == 4f)
                {
                    num820 = 4f;
                    this.ai[1] += 1f;
                    if (this.ai[1] % 10f == 0f)
                    {
                        var num841 = 12f;
                        var vector106 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f + 30f);
                        var num842 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                       vector106.X;
                        var num843 = Main.player[target].position.Y - vector106.Y;
                        num843 -= Math.Abs(num842) * 0.2f;
                        num841 += Math.Abs(num842) * 0.002f;
                        if (num841 > 16f)
                        {
                            num841 = 16f;
                        }

                        num842 += (float) Main.rand.Next(-50, 51);
                        num843 -= (float) Main.rand.Next(50, 201);
                        var num844 = (float) Math.Sqrt((double) (num842 * num842 + num843 * num843));
                        num844 = num841 / num844;
                        num842 *= num844;
                        num843 *= num844;
                        num842 *= 1f + (float) Main.rand.Next(-30, 31) * 0.005f;
                        num843 *= 1f + (float) Main.rand.Next(-30, 31) * 0.005f;
                        Projectile.NewProjectile(vector106.X, vector106.Y, num842, num843, Main.rand.Next(326, 329), 50,
                            0f, Main.myPlayer, 0f, 0f);
                    }

                    if (this.ai[1] >= 240f)
                    {
                        this.ai[1] = 0f;
                        this.ai[0] = 0f;
                    }
                }

                if (Math.Abs(base.Center.X - Main.player[target].Center.X) < 50f)
                {
                    flag49 = true;
                }

                if (flag49)
                {
                    base.velocity.X *= 0.9f;
                    if ((double) base.velocity.X > -0.1 && (double) base.velocity.X < 0.1)
                    {
                        base.velocity.X = 0f;
                    }
                }
                else
                {
                    if (base.direction > 0)
                    {
                        base.velocity.X = (base.velocity.X * 20f + num820) / 21f;
                    }

                    if (base.direction < 0)
                    {
                        base.velocity.X = (base.velocity.X * 20f - num820) / 21f;
                    }
                }

                var num845 = 80;
                var num846 = 20;
                var position68 = new Vector2(base.Center.X - (float) (num845 / 2),
                    base.position.Y + (float) base.height - (float) num846);
                var flag50 = false;
                if (base.position.X < Main.player[target].position.X &&
                    base.position.X + (float) base.width >
                    Main.player[target].position.X + (float) Main.player[target].width &&
                    base.position.Y + (float) base.height <
                    Main.player[target].position.Y + (float) Main.player[target].height - 16f)
                {
                    flag50 = true;
                }

                if (flag50)
                {
                    base.velocity.Y += 0.5f;
                }
                else if (Collision.SolidCollision(position68, num845, num846))
                {
                    if (base.velocity.Y > 0f)
                    {
                        base.velocity.Y = 0f;
                    }

                    if ((double) base.velocity.Y > -0.2)
                    {
                        base.velocity.Y -= 0.025f;
                    }
                    else
                    {
                        base.velocity.Y -= 0.2f;
                    }

                    if (base.velocity.Y < -4f)
                    {
                        base.velocity.Y = -4f;
                    }
                }
                else
                {
                    if (base.velocity.Y < 0f)
                    {
                        base.velocity.Y = 0f;
                    }

                    if ((double) base.velocity.Y < 0.1)
                    {
                        base.velocity.Y += 0.025f;
                    }
                    else
                    {
                        base.velocity.Y += 0.5f;
                    }
                }

                if (base.velocity.Y > 10f)
                {
                    base.velocity.Y = 10f;
                }
            }
            else if (aiStyle == 58)
            {
                localAI[0] += 1f;
                if (localAI[0] > 6f)
                {
                    localAI[0] = 0f;
                    localAI[1] += 1f;
                    if (localAI[1] > 4f)
                    {
                        localAI[1] = 0f;
                    }
                }

                if (Main.netMode != 1)
                {
                    localAI[2] += 1f;
                    if (localAI[2] > 300f)
                    {
                        this.ai[3] = (float) Main.rand.Next(3);
                        localAI[2] = 0f;
                    }
                    else if (this.ai[3] == 0f && localAI[2] % 30f == 0f && localAI[2] > 30f)
                    {
                        var num847 = 5f;
                        var vector107 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f + 30f);
                        if (!WorldGen.SolidTile((int) vector107.X / 16, (int) vector107.Y / 16))
                        {
                            var num848 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                           vector107.X;
                            var num849 = Main.player[target].position.Y - vector107.Y;
                            num848 += (float) Main.rand.Next(-50, 51);
                            num849 += (float) Main.rand.Next(50, 201);
                            num849 *= 0.2f;
                            var num850 = (float) Math.Sqrt((double) (num848 * num848 + num849 * num849));
                            num850 = num847 / num850;
                            num848 *= num850;
                            num849 *= num850;
                            num848 *= 1f + (float) Main.rand.Next(-30, 31) * 0.01f;
                            num849 *= 1f + (float) Main.rand.Next(-30, 31) * 0.01f;
                            Projectile.NewProjectile(vector107.X, vector107.Y, num848, num849, Main.rand.Next(326, 329),
                                40, 0f, Main.myPlayer, 0f, 0f);
                        }
                    }
                }

                if (this.ai[0] == 0f && Main.netMode != 1)
                {
                    TargetClosest(true);
                    this.ai[0] = 1f;
                    var num851 = NewNPC((int) (base.position.X + (float) (base.width / 2)),
                        (int) base.position.Y + base.height / 2, 328, whoAmI, 0f, 0f, 0f, 0f, 255);
                    Main.npc[num851].ai[0] = -1f;
                    Main.npc[num851].ai[1] = (float) whoAmI;
                    Main.npc[num851].target = target;
                    Main.npc[num851].netUpdate = true;
                    num851 = NewNPC((int) (base.position.X + (float) (base.width / 2)),
                        (int) base.position.Y + base.height / 2, 328, whoAmI, 0f, 0f, 0f, 0f, 255);
                    Main.npc[num851].ai[0] = 1f;
                    Main.npc[num851].ai[1] = (float) whoAmI;
                    Main.npc[num851].ai[3] = 150f;
                    Main.npc[num851].target = target;
                    Main.npc[num851].netUpdate = true;
                }

                if (Main.player[target].dead || Math.Abs(base.position.X - Main.player[target].position.X) > 2000f ||
                    Math.Abs(base.position.Y - Main.player[target].position.Y) > 2000f)
                {
                    TargetClosest(true);
                    if (Main.player[target].dead ||
                        Math.Abs(base.position.X - Main.player[target].position.X) > 2000f ||
                        Math.Abs(base.position.Y - Main.player[target].position.Y) > 2000f)
                    {
                        this.ai[1] = 2f;
                    }
                }

                if (Main.dayTime)
                {
                    base.velocity.Y += 0.3f;
                    base.velocity.X *= 0.9f;
                }
                else if (this.ai[1] == 0f)
                {
                    this.ai[2] += 1f;
                    if (this.ai[2] >= 300f)
                    {
                        if (this.ai[3] != 1f)
                        {
                            this.ai[1] = 0f;
                            this.ai[2] = 0f;
                        }
                        else
                        {
                            this.ai[2] = 0f;
                            this.ai[1] = 1f;
                            TargetClosest(true);
                            netUpdate = true;
                        }
                    }

                    var vector108 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num852 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                   vector108.X;
                    var num853 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) - 200f -
                                   vector108.Y;
                    var num854 = (float) Math.Sqrt((double) (num852 * num852 + num853 * num853));
                    var num855 = 6f;
                    if (this.ai[3] == 1f)
                    {
                        if (num854 > 900f)
                        {
                            num855 = 12f;
                        }
                        else if (num854 > 600f)
                        {
                            num855 = 10f;
                        }
                        else if (num854 > 300f)
                        {
                            num855 = 8f;
                        }
                    }

                    if (num854 > 50f)
                    {
                        num854 = num855 / num854;
                        base.velocity.X = (base.velocity.X * 14f + num852 * num854) / 15f;
                        base.velocity.Y = (base.velocity.Y * 14f + num853 * num854) / 15f;
                    }
                }
                else if (this.ai[1] == 1f)
                {
                    this.ai[2] += 1f;
                    if (this.ai[2] >= 600f || this.ai[3] != 1f)
                    {
                        this.ai[2] = 0f;
                        this.ai[1] = 0f;
                    }

                    var vector109 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num856 = Main.player[target].position.X + (float) (Main.player[target].width / 2) -
                                   vector109.X;
                    var num857 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                   vector109.Y;
                    var num858 = (float) Math.Sqrt((double) (num856 * num856 + num857 * num857));
                    num858 = 16f / num858;
                    base.velocity.X = (base.velocity.X * 49f + num856 * num858) / 50f;
                    base.velocity.Y = (base.velocity.Y * 49f + num857 * num858) / 50f;
                }
                else if (this.ai[1] == 2f)
                {
                    this.ai[1] = 3f;
                    base.velocity.Y += 0.1f;
                    if (base.velocity.Y < 0f)
                    {
                        base.velocity.Y *= 0.95f;
                    }

                    base.velocity.X *= 0.95f;
                    if (timeLeft > 500)
                    {
                        timeLeft = 500;
                    }
                }

                rotation = base.velocity.X * -0.02f;
            }
            else if (aiStyle == 59)
            {
                spriteDirection = -(int) this.ai[0];
                if (!Main.npc[(int) this.ai[1]].active || Main.npc[(int) this.ai[1]].aiStyle != 58)
                {
                    this.ai[2] += 10f;
                    if (this.ai[2] > 50f || Main.netMode != 2)
                    {
                        life = -1;
                        HitEffect(0, 10.0);
                        active = false;
                    }
                }

                if (Main.netMode != 1 && Main.npc[(int) this.ai[1]].ai[3] == 2f)
                {
                    localAI[1] += 1f;
                    if (localAI[1] > 90f)
                    {
                        localAI[1] = 0f;
                        var num859 = 0.01f;
                        var vector110 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f + 30f);
                        var num860 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                       vector110.X;
                        var num861 = Main.player[target].position.Y - vector110.Y;
                        var num862 = (float) Math.Sqrt((double) (num860 * num860 + num861 * num861));
                        num862 = num859 / num862;
                        num860 *= num862;
                        num861 *= num862;
                        Projectile.NewProjectile(base.Center.X, base.Center.Y, num860, num861, 329, 60, 0f,
                            Main.myPlayer, rotation, (float) spriteDirection);
                    }
                }

                if (Main.dayTime)
                {
                    base.velocity.Y += 0.3f;
                    base.velocity.X *= 0.9f;
                }
                else if (this.ai[2] == 0f || this.ai[2] == 3f)
                {
                    if (Main.npc[(int) this.ai[1]].ai[1] == 3f && timeLeft > 10)
                    {
                        timeLeft = 10;
                    }

                    this.ai[3] += 1f;
                    if (this.ai[3] >= 180f)
                    {
                        this.ai[2] += 1f;
                        this.ai[3] = 0f;
                        netUpdate = true;
                    }

                    var vector111 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num863 = (Main.player[target].Center.X + Main.npc[(int) this.ai[1]].Center.X) / 2f;
                    var num864 = (Main.player[target].Center.Y + Main.npc[(int) this.ai[1]].Center.Y) / 2f;
                    num863 += -170f * this.ai[0] - vector111.X;
                    num864 += 90f - vector111.Y;
                    var num865 = Math.Abs(Main.player[target].Center.X - Main.npc[(int) this.ai[1]].Center.X) +
                                   Math.Abs(Main.player[target].Center.Y - Main.npc[(int) this.ai[1]].Center.Y);
                    if (num865 > 700f)
                    {
                        num863 = Main.npc[(int) this.ai[1]].Center.X - 170f * this.ai[0] - vector111.X;
                        num864 = Main.npc[(int) this.ai[1]].Center.Y + 90f - vector111.Y;
                    }

                    var num866 = (float) Math.Sqrt((double) (num863 * num863 + num864 * num864));
                    var num867 = 6f;
                    if (num866 > 1000f)
                    {
                        num867 = 21f;
                    }
                    else if (num866 > 800f)
                    {
                        num867 = 18f;
                    }
                    else if (num866 > 600f)
                    {
                        num867 = 15f;
                    }
                    else if (num866 > 400f)
                    {
                        num867 = 12f;
                    }
                    else if (num866 > 200f)
                    {
                        num867 = 9f;
                    }

                    if (this.ai[0] < 0f && base.Center.X > Main.npc[(int) this.ai[1]].Center.X)
                    {
                        num863 -= 4f;
                    }

                    if (this.ai[0] > 0f && base.Center.X < Main.npc[(int) this.ai[1]].Center.X)
                    {
                        num863 += 4f;
                    }

                    num866 = num867 / num866;
                    base.velocity.X = (base.velocity.X * 14f + num863 * num866) / 15f;
                    base.velocity.Y = (base.velocity.Y * 14f + num864 * num866) / 15f;
                    num866 = (float) Math.Sqrt((double) (num863 * num863 + num864 * num864));
                    if (num866 > 20f)
                    {
                        rotation = (float) Math.Atan2((double) num864, (double) num863) + 1.57f;
                    }
                }
                else if (this.ai[2] == 1f)
                {
                    var vector112 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num868 = Main.npc[(int) this.ai[1]].position.X +
                                   (float) (Main.npc[(int) this.ai[1]].width / 2) - 200f * this.ai[0] - vector112.X;
                    var num869 = Main.npc[(int) this.ai[1]].position.Y + 230f - vector112.Y;
                    var num870 = (float) Math.Sqrt((double) (num868 * num868 + num869 * num869));
                    rotation = (float) Math.Atan2((double) num869, (double) num868) + 1.57f;
                    base.velocity.X *= 0.95f;
                    base.velocity.Y -= 0.3f;
                    if (base.velocity.Y < -14f)
                    {
                        base.velocity.Y = -14f;
                    }

                    if (base.position.Y < Main.npc[(int) this.ai[1]].position.Y - 200f)
                    {
                        TargetClosest(true);
                        this.ai[2] = 2f;
                        vector112 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        num868 = Main.player[target].position.X + (float) (Main.player[target].width / 2) - vector112.X;
                        num869 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                 vector112.Y;
                        num870 = (float) Math.Sqrt((double) (num868 * num868 + num869 * num869));
                        num870 = 18f / num870;
                        base.velocity.X = num868 * num870;
                        base.velocity.Y = num869 * num870;
                        netUpdate = true;
                    }
                }
                else if (this.ai[2] == 2f)
                {
                    var num871 = Math.Abs(base.Center.X - Main.npc[(int) this.ai[1]].Center.X) +
                                   Math.Abs(base.Center.Y - Main.npc[(int) this.ai[1]].Center.Y);
                    if (base.position.Y > Main.player[target].position.Y || base.velocity.Y < 0f || num871 > 800f)
                    {
                        this.ai[2] = 3f;
                    }
                }
                else if (this.ai[2] == 4f)
                {
                    var vector113 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    var num872 = Main.npc[(int) this.ai[1]].position.X +
                                   (float) (Main.npc[(int) this.ai[1]].width / 2) - 200f * this.ai[0] - vector113.X;
                    var num873 = Main.npc[(int) this.ai[1]].position.Y + 230f - vector113.Y;
                    var num874 = (float) Math.Sqrt((double) (num872 * num872 + num873 * num873));
                    rotation = (float) Math.Atan2((double) num873, (double) num872) + 1.57f;
                    base.velocity.Y *= 0.95f;
                    base.velocity.X += 0.3f * (0f - this.ai[0]);
                    if (base.velocity.X < -14f)
                    {
                        base.velocity.X = -14f;
                    }

                    if (base.velocity.X > 14f)
                    {
                        base.velocity.X = 14f;
                    }

                    if (base.position.X + (float) (base.width / 2) < Main.npc[(int) this.ai[1]].position.X +
                        (float) (Main.npc[(int) this.ai[1]].width / 2) - 500f ||
                        base.position.X + (float) (base.width / 2) > Main.npc[(int) this.ai[1]].position.X +
                        (float) (Main.npc[(int) this.ai[1]].width / 2) + 500f)
                    {
                        TargetClosest(true);
                        this.ai[2] = 5f;
                        vector113 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        num872 = Main.player[target].position.X + (float) (Main.player[target].width / 2) - vector113.X;
                        num873 = Main.player[target].position.Y + (float) (Main.player[target].height / 2) -
                                 vector113.Y;
                        num874 = (float) Math.Sqrt((double) (num872 * num872 + num873 * num873));
                        num874 = 17f / num874;
                        base.velocity.X = num872 * num874;
                        base.velocity.Y = num873 * num874;
                        netUpdate = true;
                    }
                }
                else if (this.ai[2] == 5f)
                {
                    var num875 = Math.Abs(base.Center.X - Main.npc[(int) this.ai[1]].Center.X) +
                                   Math.Abs(base.Center.Y - Main.npc[(int) this.ai[1]].Center.Y);
                    if ((base.velocity.X > 0f && base.position.X + (float) (base.width / 2) >
                         Main.player[target].position.X + (float) (Main.player[target].width / 2)) ||
                        (base.velocity.X < 0f && base.position.X + (float) (base.width / 2) <
                         Main.player[target].position.X + (float) (Main.player[target].width / 2)) || num875 > 800f)
                    {
                        this.ai[2] = 0f;
                    }
                }
            }
            else if (aiStyle == 60)
            {
                if (Main.dayTime)
                {
                    if (base.velocity.X > 0f)
                    {
                        base.velocity.X += 0.25f;
                    }
                    else
                    {
                        base.velocity.X -= 0.25f;
                    }

                    base.velocity.Y -= 0.1f;
                    rotation = base.velocity.X * 0.05f;
                }
                else if (this.ai[0] == 0f)
                {
                    if (this.ai[2] == 0f)
                    {
                        TargetClosest(true);
                        if (base.Center.X < Main.player[target].Center.X)
                        {
                            this.ai[2] = 1f;
                        }
                        else
                        {
                            this.ai[2] = -1f;
                        }
                    }

                    TargetClosest(true);
                    var num876 = 800;
                    var num877 = Math.Abs(base.Center.X - Main.player[target].Center.X);
                    if (base.Center.X < Main.player[target].Center.X && this.ai[2] < 0f && num877 > (float) num876)
                    {
                        this.ai[2] = 0f;
                    }

                    if (base.Center.X > Main.player[target].Center.X && this.ai[2] > 0f && num877 > (float) num876)
                    {
                        this.ai[2] = 0f;
                    }

                    var num878 = 0.45f;
                    var num879 = 7f;
                    if ((double) life < (double) lifeMax * 0.75)
                    {
                        num878 = 0.55f;
                        num879 = 8f;
                    }

                    if ((double) life < (double) lifeMax * 0.5)
                    {
                        num878 = 0.7f;
                        num879 = 10f;
                    }

                    if ((double) life < (double) lifeMax * 0.25)
                    {
                        num878 = 0.8f;
                        num879 = 11f;
                    }

                    base.velocity.X += this.ai[2] * num878;
                    if (base.velocity.X > num879)
                    {
                        base.velocity.X = num879;
                    }

                    if (base.velocity.X < 0f - num879)
                    {
                        base.velocity.X = 0f - num879;
                    }

                    var num880 = Main.player[target].position.Y - (base.position.Y + (float) base.height);
                    if (num880 < 150f)
                    {
                        base.velocity.Y -= 0.2f;
                    }

                    if (num880 > 200f)
                    {
                        base.velocity.Y += 0.2f;
                    }

                    if (base.velocity.Y > 8f)
                    {
                        base.velocity.Y = 8f;
                    }

                    if (base.velocity.Y < -8f)
                    {
                        base.velocity.Y = -8f;
                    }

                    rotation = base.velocity.X * 0.05f;
                    if ((num877 < 500f || this.ai[3] < 0f) && base.position.Y < Main.player[target].position.Y)
                    {
                        this.ai[3] += 1f;
                        var num881 = 13;
                        if ((double) life < (double) lifeMax * 0.75)
                        {
                            num881 = 12;
                        }

                        if ((double) life < (double) lifeMax * 0.5)
                        {
                            num881 = 11;
                        }

                        if ((double) life < (double) lifeMax * 0.25)
                        {
                            num881 = 10;
                        }

                        num881++;
                        if (this.ai[3] > (float) num881)
                        {
                            this.ai[3] = (float) (-num881);
                        }

                        if (this.ai[3] == 0f && Main.netMode != 1)
                        {
                            var vector114 = new Vector2(base.Center.X, base.Center.Y);
                            vector114.X += base.velocity.X * 7f;
                            var num882 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                           vector114.X;
                            var num883 = Main.player[target].Center.Y - vector114.Y;
                            var num884 = (float) Math.Sqrt((double) (num882 * num882 + num883 * num883));
                            var num885 = 6f;
                            if ((double) life < (double) lifeMax * 0.75)
                            {
                                num885 = 7f;
                            }

                            if ((double) life < (double) lifeMax * 0.5)
                            {
                                num885 = 8f;
                            }

                            if ((double) life < (double) lifeMax * 0.25)
                            {
                                num885 = 9f;
                            }

                            num884 = num885 / num884;
                            num882 *= num884;
                            num883 *= num884;
                            Projectile.NewProjectile(vector114.X, vector114.Y, num882, num883, 348, 42, 0f,
                                Main.myPlayer, 0f, 0f);
                        }
                    }
                    else if (this.ai[3] < 0f)
                    {
                        this.ai[3] += 1f;
                    }

                    if (Main.netMode != 1)
                    {
                        this.ai[1] += (float) Main.rand.Next(1, 4);
                        if (this.ai[1] > 800f && num877 < 600f)
                        {
                            this.ai[0] = -1f;
                        }
                    }
                }
                else if (this.ai[0] == 1f)
                {
                    TargetClosest(true);
                    var num886 = 0.15f;
                    var num887 = 7f;
                    if ((double) life < (double) lifeMax * 0.75)
                    {
                        num886 = 0.17f;
                        num887 = 8f;
                    }

                    if ((double) life < (double) lifeMax * 0.5)
                    {
                        num886 = 0.2f;
                        num887 = 9f;
                    }

                    if ((double) life < (double) lifeMax * 0.25)
                    {
                        num886 = 0.25f;
                        num887 = 10f;
                    }

                    num886 -= 0.05f;
                    num887 -= 1f;
                    if (base.Center.X < Main.player[target].Center.X)
                    {
                        base.velocity.X += num886;
                        if (base.velocity.X < 0f)
                        {
                            base.velocity.X *= 0.98f;
                        }
                    }

                    if (base.Center.X > Main.player[target].Center.X)
                    {
                        base.velocity.X -= num886;
                        if (base.velocity.X > 0f)
                        {
                            base.velocity.X *= 0.98f;
                        }
                    }

                    if (base.velocity.X > num887 || base.velocity.X < 0f - num887)
                    {
                        base.velocity.X *= 0.95f;
                    }

                    var num888 = Main.player[target].position.Y - (base.position.Y + (float) base.height);
                    if (num888 < 180f)
                    {
                        base.velocity.Y -= 0.1f;
                    }

                    if (num888 > 200f)
                    {
                        base.velocity.Y += 0.1f;
                    }

                    if (base.velocity.Y > 6f)
                    {
                        base.velocity.Y = 6f;
                    }

                    if (base.velocity.Y < -6f)
                    {
                        base.velocity.Y = -6f;
                    }

                    rotation = base.velocity.X * 0.01f;
                    if (Main.netMode != 1)
                    {
                        this.ai[3] += 1f;
                        var num889 = 15;
                        if ((double) life < (double) lifeMax * 0.75)
                        {
                            num889 = 14;
                        }

                        if ((double) life < (double) lifeMax * 0.5)
                        {
                            num889 = 12;
                        }

                        if ((double) life < (double) lifeMax * 0.25)
                        {
                            num889 = 10;
                        }

                        if ((double) life < (double) lifeMax * 0.1)
                        {
                            num889 = 8;
                        }

                        num889 += 3;
                        if (this.ai[3] >= (float) num889)
                        {
                            this.ai[3] = 0f;
                            var vector115 = new Vector2(base.Center.X, base.position.Y + (float) base.height - 14f);
                            var i2 = (int) (vector115.X / 16f);
                            var j2 = (int) (vector115.Y / 16f);
                            if (!WorldGen.SolidTile(i2, j2))
                            {
                                var num890 = base.velocity.Y;
                                if (num890 < 0f)
                                {
                                    num890 = 0f;
                                }

                                num890 += 3f;
                                var speedX26 = base.velocity.X * 0.25f;
                                Projectile.NewProjectile(vector115.X, vector115.Y, speedX26, num890, 349, 37, 0f,
                                    Main.myPlayer, (float) Main.rand.Next(5), 0f);
                            }
                        }
                    }

                    if (Main.netMode != 1)
                    {
                        this.ai[1] += (float) Main.rand.Next(1, 4);
                        if (this.ai[1] > 600f)
                        {
                            this.ai[0] = -1f;
                        }
                    }
                }
                else if (this.ai[0] == 2f)
                {
                    TargetClosest(true);
                    var vector116 = new Vector2(base.Center.X, base.Center.Y - 20f);
                    var num891 = (float) Main.rand.Next(-1000, 1001);
                    var num892 = (float) Main.rand.Next(-1000, 1001);
                    var num893 = (float) Math.Sqrt((double) (num891 * num891 + num892 * num892));
                    var num894 = 15f;
                    base.velocity *= 0.95f;
                    num893 = num894 / num893;
                    num891 *= num893;
                    num892 *= num893;
                    rotation += 0.2f;
                    vector116.X += num891 * 4f;
                    vector116.Y += num892 * 4f;
                    this.ai[3] += 1f;
                    var num895 = 7;
                    if ((double) life < (double) lifeMax * 0.75)
                    {
                        num895--;
                    }

                    if ((double) life < (double) lifeMax * 0.5)
                    {
                        num895 -= 2;
                    }

                    if ((double) life < (double) lifeMax * 0.25)
                    {
                        num895 -= 3;
                    }

                    if ((double) life < (double) lifeMax * 0.1)
                    {
                        num895 -= 4;
                    }

                    if (this.ai[3] > (float) num895)
                    {
                        this.ai[3] = 0f;
                        Projectile.NewProjectile(vector116.X, vector116.Y, num891, num892, 349, 35, 0f, Main.myPlayer,
                            0f, 0f);
                    }

                    if (Main.netMode != 1)
                    {
                        this.ai[1] += (float) Main.rand.Next(1, 4);
                        if (this.ai[1] > 500f)
                        {
                            this.ai[0] = -1f;
                        }
                    }
                }

                if (this.ai[0] == -1f)
                {
                    var num896 = Main.rand.Next(3);
                    TargetClosest(true);
                    if (Math.Abs(base.Center.X - Main.player[target].Center.X) > 1000f)
                    {
                        num896 = 0;
                    }

                    this.ai[0] = (float) num896;
                    this.ai[1] = 0f;
                    this.ai[2] = 0f;
                    this.ai[3] = 0f;
                }
            }
            else if (aiStyle == 61)
            {
                var num897 = 2f;
                noGravity = true;
                noTileCollide = true;
                if (!Main.dayTime)
                {
                    TargetClosest(true);
                }

                var flag51 = false;
                if ((double) life < (double) lifeMax * 0.75)
                {
                    num897 = 3f;
                }

                if ((double) life < (double) lifeMax * 0.5)
                {
                    num897 = 4f;
                }

                if ((double) life < (double) lifeMax * 0.25)
                {
                    num897 = 5f;
                }

                if (Main.dayTime)
                {
                    if (timeLeft > 10)
                    {
                        timeLeft = 10;
                    }

                    num897 = 8f;
                    if (base.velocity.X == 0f)
                    {
                        base.velocity.X = 0.1f;
                    }
                }
                else if (this.ai[0] == 0f)
                {
                    this.ai[1] += 1f;
                    if (this.ai[1] >= 300f && Main.netMode != 1)
                    {
                        TargetClosest(true);
                        this.ai[1] = 0f;
                        this.ai[0] = 1f;
                        netUpdate = true;
                    }
                }
                else if (this.ai[0] == 1f)
                {
                    this.ai[1] += 1f;
                    flag51 = true;
                    var num898 = 16;
                    if ((double) life < (double) lifeMax * 0.25)
                    {
                        num898 = 8;
                    }
                    else if ((double) life < (double) lifeMax * 0.5)
                    {
                        num898 = 11;
                    }
                    else if ((double) life < (double) lifeMax * 0.75)
                    {
                        num898 = 14;
                    }

                    if (this.ai[1] % (float) num898 == 0f)
                    {
                        var vector117 = new Vector2(base.Center.X + (float) (base.direction * 50),
                            base.Center.Y + (float) Main.rand.Next(15, 36));
                        var num899 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                       vector117.X;
                        var num900 = Main.player[target].Center.Y - vector117.Y;
                        num899 += (float) Main.rand.Next(-40, 41);
                        num900 += (float) Main.rand.Next(-40, 41);
                        var num901 = (float) Math.Sqrt((double) (num899 * num899 + num900 * num900));
                        var num902 = 15f;
                        num901 = num902 / num901;
                        num899 *= num901;
                        num900 *= num901;
                        num899 *= 1f + (float) Main.rand.Next(-20, 21) * 0.015f;
                        num900 *= 1f + (float) Main.rand.Next(-20, 21) * 0.015f;
                        Projectile.NewProjectile(vector117.X, vector117.Y, num899, num900, 180, 36, 0f, Main.myPlayer,
                            0f, 0f);
                    }

                    if (this.ai[1] > 240f)
                    {
                        this.ai[0] = 0f;
                        this.ai[1] = 0f;
                    }
                }

                if (Main.netMode != 1)
                {
                    var num903 = 600;
                    var num904 = 1200;
                    var num905 = 2700;
                    if ((double) life < (double) lifeMax * 0.25)
                    {
                        num903 = (int) ((double) num903 * 0.5);
                        num904 = (int) ((double) num904 * 0.5);
                        num905 = (int) ((double) num905 * 0.5);
                    }
                    else if ((double) life < (double) lifeMax * 0.5)
                    {
                        num903 = (int) ((double) num903 * 0.75);
                        num904 = (int) ((double) num904 * 0.75);
                        num905 = (int) ((double) num905 * 0.75);
                    }
                    else if ((double) life < (double) lifeMax * 0.75)
                    {
                        num903 = (int) ((double) num903 * 0.9);
                        num904 = (int) ((double) num904 * 0.9);
                        num905 = (int) ((double) num905 * 0.9);
                    }

                    if (Main.rand.Next(num903) == 0)
                    {
                        var vector118 = new Vector2(base.Center.X - (float) (base.direction * 24),
                            base.Center.Y - 64f);
                        var num906 = (float) (Main.rand.Next(1, 100) * base.direction);
                        var num907 = 1f;
                        var num908 = (float) Math.Sqrt((double) (num906 * num906 + num907 * num907));
                        var num909 = 1f;
                        num908 = num909 / num908;
                        num906 *= num908;
                        num907 *= num908;
                        Projectile.NewProjectile(vector118.X, vector118.Y, num906, num907, 352, 80, 0f, Main.myPlayer,
                            0f, 0f);
                    }

                    if (Main.rand.Next(num904) == 0)
                    {
                        localAI[1] = 1f;
                    }

                    if (localAI[1] >= 1f)
                    {
                        localAI[1] += 1f;
                        var num910 = 12;
                        if (localAI[1] % (float) num910 == 0f)
                        {
                            var vector119 = new Vector2(base.Center.X - (float) (base.direction * 24),
                                base.Center.Y - 64f);
                            var num911 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                           vector119.X;
                            var num912 = Main.player[target].Center.Y - vector119.Y;
                            num911 += (float) Main.rand.Next(-50, 51);
                            num912 += (float) Main.rand.Next(-50, 51);
                            var num913 = (float) Math.Sqrt((double) (num911 * num911 + num912 * num912));
                            var num914 = 12.5f;
                            num913 = num914 / num913;
                            num911 *= num913;
                            num912 *= num913;
                            num911 *= 1f + (float) Main.rand.Next(-20, 21) * 0.015f;
                            num912 *= 1f + (float) Main.rand.Next(-20, 21) * 0.015f;
                            Projectile.NewProjectile(vector119.X, vector119.Y, num911, num912, 350, 42, 0f,
                                Main.myPlayer, 0f, 0f);
                        }

                        if (localAI[1] >= 100f)
                        {
                            localAI[1] = 0f;
                        }
                    }

                    if (Main.rand.Next(num905) == 0)
                    {
                        localAI[2] = 2f;
                    }

                    if (localAI[2] > 0f)
                    {
                        localAI[2] += 1f;
                        var num915 = 9;
                        if (localAI[2] % (float) num915 == 0f)
                        {
                            var vector120 = new Vector2(base.Center.X - (float) (base.direction * 24),
                                base.Center.Y - 64f);
                            var num916 = (float) Main.rand.Next(-100, 101);
                            var num917 = -300f;
                            var num918 = (float) Math.Sqrt((double) (num916 * num916 + num917 * num917));
                            var num919 = 11f;
                            num918 = num919 / num918;
                            num916 *= num918;
                            num917 *= num918;
                            num916 *= 1f + (float) Main.rand.Next(-20, 21) * 0.01f;
                            num917 *= 1f + (float) Main.rand.Next(-20, 21) * 0.01f;
                            Projectile.NewProjectile(vector120.X, vector120.Y, num916, num917, 351, 50, 0f,
                                Main.myPlayer, 0f, 0f);
                        }

                        if (localAI[2] >= 100f)
                        {
                            localAI[2] = 0f;
                        }
                    }
                }

                if (Math.Abs(base.Center.X - Main.player[target].Center.X) < 50f)
                {
                    flag51 = true;
                }

                if (flag51)
                {
                    base.velocity.X *= 0.9f;
                    if ((double) base.velocity.X > -0.1 && (double) base.velocity.X < 0.1)
                    {
                        base.velocity.X = 0f;
                    }
                }
                else
                {
                    if (base.direction > 0)
                    {
                        base.velocity.X = (base.velocity.X * 20f + num897) / 21f;
                    }

                    if (base.direction < 0)
                    {
                        base.velocity.X = (base.velocity.X * 20f - num897) / 21f;
                    }
                }

                var num920 = 80;
                var num921 = 20;
                var position69 = new Vector2(base.Center.X - (float) (num920 / 2),
                    base.position.Y + (float) base.height - (float) num921);
                var flag52 = false;
                if (base.position.X < Main.player[target].position.X &&
                    base.position.X + (float) base.width >
                    Main.player[target].position.X + (float) Main.player[target].width &&
                    base.position.Y + (float) base.height <
                    Main.player[target].position.Y + (float) Main.player[target].height - 16f)
                {
                    flag52 = true;
                }

                if (flag52)
                {
                    base.velocity.Y += 0.5f;
                }
                else if (Collision.SolidCollision(position69, num920, num921))
                {
                    if (base.velocity.Y > 0f)
                    {
                        base.velocity.Y = 0f;
                    }

                    if ((double) base.velocity.Y > -0.2)
                    {
                        base.velocity.Y -= 0.025f;
                    }
                    else
                    {
                        base.velocity.Y -= 0.2f;
                    }

                    if (base.velocity.Y < -4f)
                    {
                        base.velocity.Y = -4f;
                    }
                }
                else
                {
                    if (base.velocity.Y < 0f)
                    {
                        base.velocity.Y = 0f;
                    }

                    if ((double) base.velocity.Y < 0.1)
                    {
                        base.velocity.Y += 0.025f;
                    }
                    else
                    {
                        base.velocity.Y += 0.5f;
                    }
                }

                if (base.velocity.Y > 10f)
                {
                    base.velocity.Y = 10f;
                }
            }
            else if (aiStyle == 62)
            {
                TargetClosest(true);
                rotation = Math.Abs(base.velocity.X) * (float) base.direction * 0.1f;
                spriteDirection = base.direction;
                var num922 = 7f;
                var vector121 = new Vector2(base.Center.X + (float) (base.direction * 20), base.Center.Y + 6f);
                var num923 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f - vector121.X;
                var num924 = Main.player[target].position.Y - vector121.Y;
                var num925 = (float) Math.Sqrt((double) (num923 * num923 + num924 * num924));
                var num926 = num922 / num925;
                num923 *= num926;
                num924 *= num926;
                var flag53 = Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1);
                if (Main.dayTime)
                {
                    var num927 = 60;
                    base.velocity.X = (base.velocity.X * (float) (num927 - 1) - num923) / (float) num927;
                    base.velocity.Y = (base.velocity.Y * (float) (num927 - 1) - num924) / (float) num927;
                    if (timeLeft > 10)
                    {
                        timeLeft = 10;
                    }
                }
                else if (num925 > 600f || !flag53)
                {
                    var num928 = 60;
                    base.velocity.X = (base.velocity.X * (float) (num928 - 1) + num923) / (float) num928;
                    base.velocity.Y = (base.velocity.Y * (float) (num928 - 1) + num924) / (float) num928;
                }
                else
                {
                    base.velocity *= 0.98f;
                    if (Math.Abs(base.velocity.X) < 1f && Math.Abs(base.velocity.Y) < 1f && Main.netMode != 1)
                    {
                        localAI[0] += 1f;
                        if (localAI[0] >= 15f)
                        {
                            localAI[0] = 0f;
                            num923 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f -
                                     vector121.X;
                            num924 = Main.player[target].Center.Y - vector121.Y;
                            num923 += (float) Main.rand.Next(-35, 36);
                            num924 += (float) Main.rand.Next(-35, 36);
                            num923 *= 1f + (float) Main.rand.Next(-20, 21) * 0.015f;
                            num924 *= 1f + (float) Main.rand.Next(-20, 21) * 0.015f;
                            num925 = (float) Math.Sqrt((double) (num923 * num923 + num924 * num924));
                            num922 = 10f;
                            num926 = num922 / num925;
                            num923 *= num926;
                            num924 *= num926;
                            num923 *= 1f + (float) Main.rand.Next(-20, 21) * 0.0125f;
                            num924 *= 1f + (float) Main.rand.Next(-20, 21) * 0.0125f;
                            Projectile.NewProjectile(vector121.X, vector121.Y, num923, num924, 180, 32, 0f,
                                Main.myPlayer, 0f, 0f);
                        }
                    }
                }
            }
            else if (aiStyle == 63)
            {
                TargetClosest(true);
                var num929 = 11f;
                var vector122 = new Vector2(base.Center.X + (float) (base.direction * 20), base.Center.Y + 6f);
                var num930 = Main.player[target].position.X + (float) Main.player[target].width * 0.5f - vector122.X;
                var num931 = Main.player[target].Center.Y - vector122.Y;
                var num932 = (float) Math.Sqrt((double) (num930 * num930 + num931 * num931));
                var num933 = num929 / num932;
                num930 *= num933;
                num931 *= num933;
                if (Main.dayTime)
                {
                    num930 = 0f - num930;
                    num931 = 0f - num931;
                }

                this.ai[0] -= 1f;
                if (num932 < 200f || this.ai[0] > 0f)
                {
                    if (num932 < 200f)
                    {
                        this.ai[0] = 20f;
                    }

                    if (base.velocity.X < 0f)
                    {
                        base.direction = -1;
                    }
                    else
                    {
                        base.direction = 1;
                    }

                    rotation += (float) base.direction * 0.3f;
                }
                else
                {
                    base.velocity.X = (base.velocity.X * 50f + num930) / 51f;
                    base.velocity.Y = (base.velocity.Y * 50f + num931) / 51f;
                    if (num932 < 350f)
                    {
                        base.velocity.X = (base.velocity.X * 10f + num930) / 11f;
                        base.velocity.Y = (base.velocity.Y * 10f + num931) / 11f;
                    }

                    if (num932 < 300f)
                    {
                        base.velocity.X = (base.velocity.X * 7f + num930) / 8f;
                        base.velocity.Y = (base.velocity.Y * 7f + num931) / 8f;
                    }

                    rotation = base.velocity.X * 0.15f;
                }
            }
            else if (aiStyle == 64)
            {
                var num934 = this.ai[0];
                var num935 = this.ai[1];
                if (Main.netMode != 1)
                {
                    localAI[0] -= 1f;
                    if (this.ai[3] == 0f)
                    {
                        this.ai[3] = (float) Main.rand.Next(75, 111) * 0.01f;
                    }

                    if (localAI[0] <= 0f)
                    {
                        TargetClosest(true);
                        localAI[0] = (float) Main.rand.Next(60, 180);
                        var num936 = Math.Abs(base.Center.X - Main.player[target].Center.X);
                        if (num936 > 700f && localAI[3] == 0f)
                        {
                            var num937 = (float) Main.rand.Next(50, 151) * 0.01f;
                            if (num936 > 1000f)
                            {
                                num937 = (float) Main.rand.Next(150, 201) * 0.01f;
                            }
                            else if (num936 > 850f)
                            {
                                num937 = (float) Main.rand.Next(100, 151) * 0.01f;
                            }

                            var num938 = base.direction * Main.rand.Next(100, 251);
                            var num939 = Main.rand.Next(-50, 51);
                            if (base.position.Y > Main.player[target].position.Y - 100f)
                            {
                                num939 -= Main.rand.Next(100, 251);
                            }

                            var num940 = num937 / (float) Math.Sqrt((double) (num938 * num938 + num939 * num939));
                            num934 = (float) num938 * num940;
                            num935 = (float) num939 * num940;
                        }
                        else
                        {
                            localAI[3] = 1f;
                            var num941 = (float) Main.rand.Next(5, 151) * 0.01f;
                            var num942 = Main.rand.Next(-100, 101);
                            var num943 = Main.rand.Next(-100, 101);
                            var num944 = num941 / (float) Math.Sqrt((double) (num942 * num942 + num943 * num943));
                            num934 = (float) num942 * num944;
                            num935 = (float) num943 * num944;
                        }

                        netUpdate = true;
                    }
                }

                scale = this.ai[3];
                if (localAI[2] > 0f)
                {
                    var i3 = (int) base.Center.X / 16;
                    var j3 = (int) base.Center.Y / 16;
                    if (localAI[2] > 3f)
                    {
                        if (type == 358)
                        {
                            Lighting.AddLight(i3, j3, 0.101249993f * scale, 0.21374999f * scale, 0.225f * scale);
                        }
                        else
                        {
                            Lighting.AddLight(i3, j3, 0.109500006f * scale, 0.15f * scale, 0.0615f * scale);
                        }
                    }

                    localAI[2] -= 1f;
                }
                else if (localAI[1] > 0f)
                {
                    localAI[1] -= 1f;
                }
                else
                {
                    localAI[1] = (float) Main.rand.Next(30, 180);
                    if (!Main.dayTime || (double) (base.position.Y / 16f) > Main.worldSurface + 10.0)
                    {
                        localAI[2] = (float) Main.rand.Next(10, 30);
                    }
                }

                var num945 = 80;
                base.velocity.X = (base.velocity.X * (float) (num945 - 1) + num934) / (float) num945;
                base.velocity.Y = (base.velocity.Y * (float) (num945 - 1) + num935) / (float) num945;
                if (base.velocity.Y > 0f)
                {
                    var num946 = 4;
                    var num947 = (int) base.Center.X / 16;
                    var num948 = (int) base.Center.Y / 16;
                    for (var num949 = num948; num949 < num948 + num946; num949++)
                    {
                        if (Main.tile[num947, num949] != null &&
                            ((Main.tile[num947, num949].nactive() && Main.tileSolid[Main.tile[num947, num949].type]) ||
                             Main.tile[num947, num949].liquid > 0))
                        {
                            num935 *= -1f;
                            if (base.velocity.Y > 0f)
                            {
                                base.velocity.Y *= 0.9f;
                            }
                        }
                    }
                }

                if (base.velocity.Y < 0f)
                {
                    var num950 = 30;
                    var flag54 = false;
                    var num951 = (int) base.Center.X / 16;
                    var num952 = (int) base.Center.Y / 16;
                    for (var num953 = num952; num953 < num952 + num950; num953++)
                    {
                        if (Main.tile[num951, num953] != null && Main.tile[num951, num953].nactive() &&
                            Main.tileSolid[Main.tile[num951, num953].type])
                        {
                            flag54 = true;
                        }
                    }

                    if (!flag54)
                    {
                        num935 *= -1f;
                        if (base.velocity.Y < 0f)
                        {
                            base.velocity.Y *= 0.9f;
                        }
                    }
                }

                if (collideX)
                {
                    num934 = ((!(base.velocity.X < 0f)) ? (0f - Math.Abs(num934)) : Math.Abs(num934));
                    base.velocity.X *= -0.2f;
                }

                if (base.velocity.X < 0f)
                {
                    base.direction = -1;
                }

                if (base.velocity.X > 0f)
                {
                    base.direction = 1;
                }

                this.ai[0] = num934;
                this.ai[1] = num935;
            }
            else if (aiStyle == 65)
            {
                var num954 = this.ai[0];
                var num955 = this.ai[1];
                if (Main.netMode != 1)
                {
                    if (this.ai[2] == 0f)
                    {
                        var num956 = 0;
                        var num957 = 4;
                        var num958 = 6;
                        var num959 = 3;
                        var num960 = 7;
                        var num961 = 2;
                        var num962 = 1;
                        var num963 = 5;
                        var num964 = Main.rand.Next(100);
                        num964 = ((num964 == 0)
                            ? num963
                            : ((num964 < 3)
                                ? num962
                                : ((num964 < 9)
                                    ? num961
                                    : ((num964 < 19)
                                        ? num960
                                        : ((num964 < 34)
                                            ? num959
                                            : ((num964 < 53) ? num958 : ((num964 >= 75) ? num956 : num957)))))));
                        this.ai[2] = (float) (1 + num964);
                    }

                    if (this.ai[3] == 0f)
                    {
                        this.ai[3] = (float) Main.rand.Next(75, 111) * 0.01f;
                    }

                    localAI[0] -= 1f;
                    if (localAI[0] <= 0f)
                    {
                        TargetClosest(true);
                        localAI[0] = (float) Main.rand.Next(90, 240);
                        var num965 = Math.Abs(base.Center.X - Main.player[target].Center.X);
                        if (num965 > 700f && localAI[3] == 0f)
                        {
                            var num966 = (float) Main.rand.Next(50, 151) * 0.01f;
                            if (num965 > 1000f)
                            {
                                num966 = (float) Main.rand.Next(150, 201) * 0.01f;
                            }
                            else if (num965 > 850f)
                            {
                                num966 = (float) Main.rand.Next(100, 151) * 0.01f;
                            }

                            var num967 = base.direction * Main.rand.Next(100, 251);
                            var num968 = Main.rand.Next(-50, 51);
                            if (base.position.Y > Main.player[target].position.Y - 100f)
                            {
                                num968 -= Main.rand.Next(100, 251);
                            }

                            var num969 = num966 / (float) Math.Sqrt((double) (num967 * num967 + num968 * num968));
                            num954 = (float) num967 * num969;
                            num955 = (float) num968 * num969;
                        }
                        else
                        {
                            localAI[3] = 1f;
                            var num970 = (float) Main.rand.Next(26, 301) * 0.01f;
                            var num971 = Main.rand.Next(-100, 101);
                            var num972 = Main.rand.Next(-100, 101);
                            var num973 = num970 / (float) Math.Sqrt((double) (num971 * num971 + num972 * num972));
                            num954 = (float) num971 * num973;
                            num955 = (float) num972 * num973;
                        }

                        netUpdate = true;
                    }
                }

                scale = this.ai[3];
                var num974 = 60;
                base.velocity.X = (base.velocity.X * (float) (num974 - 1) + num954) / (float) num974;
                base.velocity.Y = (base.velocity.Y * (float) (num974 - 1) + num955) / (float) num974;
                if (base.velocity.Y > 0f)
                {
                    var num975 = 3;
                    var num976 = (int) base.Center.X / 16;
                    var num977 = (int) base.Center.Y / 16;
                    for (var num978 = num977; num978 < num977 + num975; num978++)
                    {
                        if (Main.tile[num976, num978] != null &&
                            ((Main.tile[num976, num978].nactive() && Main.tileSolid[Main.tile[num976, num978].type]) ||
                             Main.tile[num976, num978].liquid > 0))
                        {
                            num955 *= -1f;
                            if (base.velocity.Y > 0f)
                            {
                                base.velocity.Y *= 0.9f;
                            }
                        }
                    }
                }

                if (base.velocity.Y < 0f)
                {
                    var num979 = 30;
                    var flag55 = false;
                    var num980 = (int) base.Center.X / 16;
                    var num981 = (int) base.Center.Y / 16;
                    for (var num982 = num981; num982 < num981 + num979; num982++)
                    {
                        if (Main.tile[num980, num982] != null && Main.tile[num980, num982].nactive() &&
                            Main.tileSolid[Main.tile[num980, num982].type])
                        {
                            flag55 = true;
                        }
                    }

                    if (!flag55)
                    {
                        num955 *= -1f;
                        if (base.velocity.Y < 0f)
                        {
                            base.velocity.Y *= 0.9f;
                        }
                    }
                }

                if (localAI[1] > 0f)
                {
                    localAI[1] -= 1f;
                }
                else
                {
                    localAI[1] = 15f;
                    var num983 = 0f;
                    var value5 = Vector2.Zero;
                    for (var num984 = 0; num984 < 200; num984++)
                    {
                        var nPC = Main.npc[num984];
                        if (nPC.active && nPC.damage > 0 && !nPC.friendly && nPC.Hitbox.Distance(base.Center) <= 100f)
                        {
                            num983 += 1f;
                            value5 += DirectionFrom(nPC.Center);
                        }
                    }

                    if (num983 > 0f)
                    {
                        value5 /= num983;
                        value5 *= 2f;
                        base.velocity += value5;
                        if (base.velocity.Length() > 16f)
                        {
                            base.velocity = base.velocity.SafeNormalize(Vector2.Zero) * 16f;
                        }
                    }
                }

                if (collideX)
                {
                    num954 = ((!(base.velocity.X < 0f)) ? (0f - Math.Abs(num954)) : Math.Abs(num954));
                    base.velocity.X *= -0.2f;
                }

                if (base.velocity.X < 0f)
                {
                    base.direction = -1;
                }

                if (base.velocity.X > 0f)
                {
                    base.direction = 1;
                }

                this.ai[0] = num954;
                this.ai[1] = num955;
                if (type == 356)
                {
                    catchItem = (short) (1994f + this.ai[2] - 1f);
                }
            }
            else if (aiStyle == 66)
            {
                if (type == 484)
                {
                    var num985 = (float) Main.rand.Next(90, 111) * 0.01f;
                    num985 *= (Main.essScale + 0.5f) / 2f;
                    Lighting.AddLight((int) ((base.position.X + (float) (base.width / 2)) / 16f),
                        (int) ((base.position.Y + (float) (base.height / 2)) / 16f), 0.3f * num985, 0.1f * num985,
                        0.25f * num985);
                }

                if (type == 357 || type == 448 || (type >= 484 && type <= 487))
                {
                    if (localAI[2] < 90f)
                    {
                        localAI[2] += 1f;
                    }
                    else
                    {
                        friendly = false;
                    }
                }

                if (base.velocity.Y == 0f)
                {
                    if (this.ai[0] == 1f)
                    {
                        if (base.direction == 0)
                        {
                            TargetClosest(true);
                        }

                        if (collideX)
                        {
                            base.direction *= -1;
                        }

                        var num986 = 0.2f;
                        if (type == 485)
                        {
                            num986 = 0.25f;
                        }

                        if (type == 486)
                        {
                            num986 = 0.325f;
                        }

                        if (type == 487)
                        {
                            num986 = 0.4f;
                        }

                        base.velocity.X = num986 * (float) base.direction;
                        if (type == 374)
                        {
                            base.velocity.X *= 3f;
                        }
                    }
                    else
                    {
                        base.velocity.X = 0f;
                    }

                    if (Main.netMode != 1)
                    {
                        localAI[1] -= 1f;
                        if (localAI[1] <= 0f)
                        {
                            if (this.ai[0] == 1f)
                            {
                                this.ai[0] = 0f;
                                localAI[1] = (float) Main.rand.Next(300, 900);
                            }
                            else
                            {
                                this.ai[0] = 1f;
                                localAI[1] = (float) Main.rand.Next(600, 1800);
                            }

                            netUpdate = true;
                        }
                    }
                }

                if (type == 374)
                {
                    spriteDirection = base.direction;
                    var flag56 = false;
                    for (var num987 = 0; num987 < 255; num987++)
                    {
                        var player = Main.player[num987];
                        if (player.active && !player.dead && !(Vector2.Distance(player.Center, base.Center) > 160f))
                        {
                            flag56 = true;
                            break;
                        }
                    }

                    var num988 = 90;
                    if (flag56 && this.ai[1] < (float) num988)
                    {
                        this.ai[1] += 1f;
                    }

                    if (this.ai[1] == (float) num988 && Main.netMode != 1)
                    {
                        base.position.Y += 16f;
                        Transform(375);
                        netUpdate = true;
                    }
                }
            }
            else if (aiStyle == 67)
            {
                if (type == 359)
                {
                    if (this.ai[3] != 0f)
                    {
                        scale = this.ai[3];
                        var num989 = (int) (12f * scale);
                        var num990 = (int) (12f * scale);
                        if (num989 != base.width)
                        {
                            base.position.X = base.position.X + (float) (base.width / 2) - (float) num989 - 2f;
                            base.width = num989;
                        }

                        if (num990 != base.height)
                        {
                            base.position.Y = base.position.Y + (float) base.height - (float) num990;
                            base.height = num990;
                        }
                    }

                    if (this.ai[3] == 0f && Main.netMode != 1)
                    {
                        this.ai[3] = (float) Main.rand.Next(80, 111) * 0.01f;
                        netUpdate = true;
                    }
                }

                if (type == 360)
                {
                    Lighting.AddLight((int) base.Center.X / 16, (int) base.Center.Y / 16, 0.1f, 0.2f, 0.7f);
                }

                var num991 = 0.3f;
                if (type == 360)
                {
                    num991 = 0.6f;
                }

                if (this.ai[0] == 0f)
                {
                    TargetClosest(true);
                    directionY = 1;
                    this.ai[0] = 1f;
                    if (base.direction > 0)
                    {
                        spriteDirection = 1;
                    }
                }

                var flag57 = false;
                if (Main.netMode != 1)
                {
                    if (this.ai[2] == 0f && Main.rand.Next(7200) == 0)
                    {
                        this.ai[2] = 2f;
                        netUpdate = true;
                    }

                    if (!collideX && !collideY)
                    {
                        localAI[3] += 1f;
                        if (localAI[3] > 5f)
                        {
                            this.ai[2] = 2f;
                            netUpdate = true;
                        }
                    }
                    else
                    {
                        localAI[3] = 0f;
                    }
                }

                if (this.ai[2] > 0f)
                {
                    this.ai[1] = 0f;
                    this.ai[0] = 1f;
                    directionY = 1;
                    if (base.velocity.Y > num991)
                    {
                        rotation += (float) base.direction * 0.1f;
                    }
                    else
                    {
                        rotation = 0f;
                    }

                    spriteDirection = base.direction;
                    base.velocity.X = num991 * (float) base.direction;
                    noGravity = false;
                    var num992 = (int) (base.Center.X + (float) (base.width / 2 * -base.direction)) / 16;
                    var num993 = (int) (base.position.Y + (float) base.height + 8f) / 16;
                    if (Main.tile[num992, num993] != null && !Main.tile[num992, num993].topSlope() && collideY)
                    {
                        this.ai[2] -= 1f;
                    }

                    num993 = (int) (base.position.Y + (float) base.height - 4f) / 16;
                    num992 = (int) (base.Center.X + (float) (base.width / 2 * base.direction)) / 16;
                    if (Main.tile[num992, num993] != null && Main.tile[num992, num993].bottomSlope())
                    {
                        base.direction *= -1;
                    }

                    if (collideX && base.velocity.Y == 0f)
                    {
                        flag57 = true;
                        this.ai[2] = 0f;
                        directionY = -1;
                        this.ai[1] = 1f;
                    }

                    if (base.velocity.Y == 0f)
                    {
                        if (localAI[1] == base.position.X)
                        {
                            localAI[2] += 1f;
                            if (localAI[2] > 10f)
                            {
                                base.direction = 1;
                                base.velocity.X = (float) base.direction * num991;
                                localAI[2] = 0f;
                            }
                        }
                        else
                        {
                            localAI[2] = 0f;
                            localAI[1] = base.position.X;
                        }
                    }
                }

                if (this.ai[2] == 0f)
                {
                    noGravity = true;
                    if (this.ai[1] == 0f)
                    {
                        if (collideY)
                        {
                            this.ai[0] = 2f;
                        }

                        if (!collideY && this.ai[0] == 2f)
                        {
                            base.direction = -base.direction;
                            this.ai[1] = 1f;
                            this.ai[0] = 1f;
                        }

                        if (collideX)
                        {
                            directionY = -directionY;
                            this.ai[1] = 1f;
                        }
                    }
                    else
                    {
                        if (collideX)
                        {
                            this.ai[0] = 2f;
                        }

                        if (!collideX && this.ai[0] == 2f)
                        {
                            directionY = -directionY;
                            this.ai[1] = 0f;
                            this.ai[0] = 1f;
                        }

                        if (collideY)
                        {
                            base.direction = -base.direction;
                            this.ai[1] = 0f;
                        }
                    }

                    if (!flag57)
                    {
                        var num994 = rotation;
                        if (directionY < 0)
                        {
                            if (base.direction < 0)
                            {
                                if (collideX)
                                {
                                    rotation = 1.57f;
                                    spriteDirection = -1;
                                }
                                else if (collideY)
                                {
                                    rotation = 3.14f;
                                    spriteDirection = 1;
                                }
                            }
                            else if (collideY)
                            {
                                rotation = 3.14f;
                                spriteDirection = -1;
                            }
                            else if (collideX)
                            {
                                rotation = 4.71f;
                                spriteDirection = 1;
                            }
                        }
                        else if (base.direction < 0)
                        {
                            if (collideY)
                            {
                                rotation = 0f;
                                spriteDirection = -1;
                            }
                            else if (collideX)
                            {
                                rotation = 1.57f;
                                spriteDirection = 1;
                            }
                        }
                        else if (collideX)
                        {
                            rotation = 4.71f;
                            spriteDirection = -1;
                        }
                        else if (collideY)
                        {
                            rotation = 0f;
                            spriteDirection = 1;
                        }

                        var num995 = rotation;
                        rotation = num994;
                        if ((double) rotation > 6.28)
                        {
                            rotation -= 6.28f;
                        }

                        if (rotation < 0f)
                        {
                            rotation += 6.28f;
                        }

                        var num996 = Math.Abs(rotation - num995);
                        var num997 = 0.1f;
                        if (rotation > num995)
                        {
                            if ((double) num996 > 3.14)
                            {
                                rotation += num997;
                            }
                            else
                            {
                                rotation -= num997;
                                if (rotation < num995)
                                {
                                    rotation = num995;
                                }
                            }
                        }

                        if (rotation < num995)
                        {
                            if ((double) num996 > 3.14)
                            {
                                rotation -= num997;
                            }
                            else
                            {
                                rotation += num997;
                                if (rotation > num995)
                                {
                                    rotation = num995;
                                }
                            }
                        }
                    }

                    base.velocity.X = num991 * (float) base.direction;
                    base.velocity.Y = num991 * (float) directionY;
                }
            }
            else if (aiStyle == 68)
            {
                noGravity = true;
                if (this.ai[0] == 0f)
                {
                    noGravity = false;
                    var direction3 = base.direction;
                    var num998 = target;
                    TargetClosest(true);
                    if (num998 >= 0 && direction3 != 0)
                    {
                        base.direction = direction3;
                    }

                    if (wet)
                    {
                        var num999 = 2f;
                        base.velocity.X = (base.velocity.X * 19f + num999 * (float) base.direction) / 20f;
                        var num1000 = (int) (base.Center.X + (float) ((base.width / 2 + 8) * base.direction)) / 16;
                        var num1001 = (int) (base.Center.Y / 16f);
                        var j4 = (int) (base.position.Y / 16f);
                        var num1002 = (int) ((base.position.Y + (float) base.height) / 16f);
                        if (Main.tile[num1000, num1001] == null)
                        {
                            var tile29 = Main.tile;
                            var num1003 = num1000;
                            var num1004 = num1001;
                            var tile30 = new Tile();
                            tile29[num1003, num1004] = tile30;
                        }

                        if (Main.tile[num1000, num1002] == null)
                        {
                            var tile31 = Main.tile;
                            var num1005 = num1000;
                            var num1006 = num1002;
                            var tile32 = new Tile();
                            tile31[num1005, num1006] = tile32;
                        }

                        if (WorldGen.SolidTile(num1000, num1001) || WorldGen.SolidTile(num1000, j4) ||
                            WorldGen.SolidTile(num1000, num1002) || Main.tile[num1000, num1002].liquid == 0)
                        {
                            base.direction *= -1;
                        }

                        spriteDirection = base.direction;
                        if (base.velocity.Y > 0f)
                        {
                            base.velocity.Y *= 0.5f;
                        }

                        noGravity = true;
                        num1000 = (int) (base.Center.X / 16f);
                        num1001 = (int) (base.Center.Y / 16f);
                        var num1007 = base.position.Y + (float) base.height;
                        if (Main.tile[num1000, num1001 - 1] == null)
                        {
                            var tile33 = Main.tile;
                            var num1008 = num1000;
                            var num1009 = num1001 - 1;
                            var tile34 = new Tile();
                            tile33[num1008, num1009] = tile34;
                        }

                        if (Main.tile[num1000, num1001] == null)
                        {
                            var tile35 = Main.tile;
                            var num1010 = num1000;
                            var num1011 = num1001;
                            var tile36 = new Tile();
                            tile35[num1010, num1011] = tile36;
                        }

                        if (Main.tile[num1000, num1001 + 1] == null)
                        {
                            var tile37 = Main.tile;
                            var num1012 = num1000;
                            var num1013 = num1001 + 1;
                            var tile38 = new Tile();
                            tile37[num1012, num1013] = tile38;
                        }

                        if (Main.tile[num1000, num1001 - 1].liquid > 0)
                        {
                            num1007 = (float) (num1001 * 16);
                            num1007 -= (float) ((int) Main.tile[num1000, num1001 - 1].liquid / 16);
                        }
                        else if (Main.tile[num1000, num1001].liquid > 0)
                        {
                            num1007 = (float) ((num1001 + 1) * 16);
                            num1007 -= (float) ((int) Main.tile[num1000, num1001].liquid / 16);
                        }
                        else if (Main.tile[num1000, num1001 + 1].liquid > 0)
                        {
                            num1007 = (float) ((num1001 + 2) * 16);
                            num1007 -= (float) ((int) Main.tile[num1000, num1001 + 1].liquid / 16);
                        }

                        num1007 -= 6f;
                        if (base.Center.Y > num1007)
                        {
                            base.velocity.Y -= 0.1f;
                            if (base.velocity.Y < -8f)
                            {
                                base.velocity.Y = -8f;
                            }

                            if (base.Center.Y + base.velocity.Y < num1007)
                            {
                                base.velocity.Y = num1007 - base.Center.Y;
                            }
                        }
                        else
                        {
                            base.velocity.Y = num1007 - base.Center.Y;
                        }
                    }

                    if (Main.netMode != 1)
                    {
                        if (!wet)
                        {
                            this.ai[0] = 1f;
                            netUpdate = true;
                            base.direction = -base.direction;
                        }
                        else
                        {
                            var rectangle4 = new Rectangle((int) Main.player[target].position.X,
                                (int) Main.player[target].position.Y, Main.player[target].width,
                                Main.player[target].height);
                            if (new Rectangle((int) base.position.X - 100, (int) base.position.Y - 100,
                                    base.width + 200, base.height + 200).Intersects(rectangle4) || life < lifeMax)
                            {
                                this.ai[0] = 1f;
                                base.velocity.Y -= 6f;
                                netUpdate = true;
                                base.direction = -base.direction;
                            }
                        }
                    }
                }
                else if (!Main.player[target].dead)
                {
                    var flag58 = false;
                    this.ai[1] += 1f;
                    if (this.ai[1] >= 300f)
                    {
                        flag58 = true;
                    }

                    if (flag58)
                    {
                        if (base.velocity.Y == 0f || collideY || wet)
                        {
                            base.velocity.X = 0f;
                            base.velocity.Y = 0f;
                            this.ai[0] = 0f;
                            this.ai[1] = 0f;
                            if (Main.netMode != 1)
                            {
                                if ((type == 363 || type == 365) && !wet)
                                {
                                    var direction4 = base.direction;
                                    Transform(type - 1);
                                    TargetClosest(true);
                                    base.direction = direction4;
                                    this.ai[0] = 0f;
                                    this.ai[1] = (float) (200 + Main.rand.Next(200));
                                }

                                netUpdate = true;
                            }
                        }
                        else
                        {
                            base.velocity.X *= 0.98f;
                            base.velocity.Y += 0.1f;
                            if (base.velocity.Y > 2f)
                            {
                                base.velocity.Y = 2f;
                            }
                        }
                    }
                    else
                    {
                        if (collideX)
                        {
                            base.direction *= -1;
                            base.velocity.X = oldVelocity.X * -0.5f;
                            if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 2f)
                            {
                                base.velocity.X = 2f;
                            }

                            if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -2f)
                            {
                                base.velocity.X = -2f;
                            }
                        }

                        if (collideY)
                        {
                            base.velocity.Y = oldVelocity.Y * -0.5f;
                            if (base.velocity.Y > 0f && base.velocity.Y < 1f)
                            {
                                base.velocity.Y = 1f;
                            }

                            if (base.velocity.Y < 0f && base.velocity.Y > -1f)
                            {
                                base.velocity.Y = -1f;
                            }
                        }

                        if (base.direction == -1 && base.velocity.X > -3f)
                        {
                            base.velocity.X -= 0.1f;
                            if (base.velocity.X > 3f)
                            {
                                base.velocity.X -= 0.1f;
                            }
                            else if (base.velocity.X > 0f)
                            {
                                base.velocity.X -= 0.05f;
                            }

                            if (base.velocity.X < -3f)
                            {
                                base.velocity.X = -3f;
                            }
                        }
                        else if (base.direction == 1 && base.velocity.X < 3f)
                        {
                            base.velocity.X += 0.1f;
                            if (base.velocity.X < -3f)
                            {
                                base.velocity.X += 0.1f;
                            }
                            else if (base.velocity.X < 0f)
                            {
                                base.velocity.X += 0.05f;
                            }

                            if (base.velocity.X > 3f)
                            {
                                base.velocity.X = 3f;
                            }
                        }

                        var num1014 = (int) ((base.position.X + (float) (base.width / 2)) / 16f) + base.direction;
                        var num1015 = (int) ((base.position.Y + (float) base.height) / 16f);
                        var flag59 = true;
                        var num1016 = 15;
                        var flag60 = false;
                        for (var num1017 = num1015; num1017 < num1015 + num1016; num1017++)
                        {
                            if (Main.tile[num1014, num1017] == null)
                            {
                                var tile39 = Main.tile;
                                var num1018 = num1014;
                                var num1019 = num1017;
                                var tile40 = new Tile();
                                tile39[num1018, num1019] = tile40;
                            }

                            if ((Main.tile[num1014, num1017].nactive() &&
                                 Main.tileSolid[Main.tile[num1014, num1017].type]) ||
                                Main.tile[num1014, num1017].liquid > 0)
                            {
                                if (num1017 < num1015 + 5)
                                {
                                    flag60 = true;
                                }

                                flag59 = false;
                                break;
                            }
                        }

                        if (flag59)
                        {
                            base.velocity.Y += 0.1f;
                        }
                        else
                        {
                            base.velocity.Y -= 0.1f;
                        }

                        if (flag60)
                        {
                            base.velocity.Y -= 0.2f;
                        }

                        if (base.velocity.Y > 3f)
                        {
                            base.velocity.Y = 3f;
                        }

                        if (base.velocity.Y < -4f)
                        {
                            base.velocity.Y = -4f;
                        }
                    }
                }
            }
            else if (aiStyle == 69)
            {
                AI_069_DukeFishron();
            }
            else if (aiStyle == 70)
            {
                if (target == 255)
                {
                    TargetClosest(true);
                    this.ai[3] = (float) Main.rand.Next(80, 121) / 100f;
                    var scaleFactor = (float) Main.rand.Next(165, 265) / 15f;
                    base.velocity =
                        Vector2.Normalize(Main.player[target].Center - base.Center +
                                          new Vector2((float) Main.rand.Next(-100, 101),
                                              (float) Main.rand.Next(-100, 101))) * scaleFactor;
                    netUpdate = true;
                }

                var vector123 = Vector2.Normalize(Main.player[target].Center - base.Center);
                base.velocity = (base.velocity * 40f + vector123 * 20f) / 41f;
                scale = this.ai[3];
                alpha -= 30;
                if (alpha < 50)
                {
                    alpha = 50;
                }

                alpha = 50;
                base.velocity.X =
                    (base.velocity.X * 50f + Main.windSpeed * 2f + (float) Main.rand.Next(-10, 11) * 0.1f) / 51f;
                base.velocity.Y = (base.velocity.Y * 50f + -0.25f + (float) Main.rand.Next(-10, 11) * 0.2f) / 51f;
                if (base.velocity.Y > 0f)
                {
                    base.velocity.Y -= 0.04f;
                }

                if (this.ai[0] == 0f)
                {
                    var num1020 = 40;
                    var rect = getRect();
                    rect.X -= num1020 + base.width / 2;
                    rect.Y -= num1020 + base.height / 2;
                    rect.Width += num1020 * 2;
                    rect.Height += num1020 * 2;
                    for (var num1021 = 0; num1021 < 255; num1021++)
                    {
                        var player2 = Main.player[num1021];
                        if (player2.active && !player2.dead && rect.Intersects(player2.getRect()))
                        {
                            this.ai[0] = 1f;
                            this.ai[1] = 4f;
                            netUpdate = true;
                            break;
                        }
                    }
                }

                if (this.ai[0] == 0f)
                {
                    this.ai[1] += 1f;
                    if (this.ai[1] >= 150f)
                    {
                        this.ai[0] = 1f;
                        this.ai[1] = 4f;
                    }
                }

                if (this.ai[0] == 1f)
                {
                    this.ai[1] -= 1f;
                    if (this.ai[1] <= 0f)
                    {
                        life = 0;
                        HitEffect(0, 10.0);
                        active = false;
                        return;
                    }
                }

                if (justHit || this.ai[0] == 1f)
                {
                    dontTakeDamage = true;
                    base.position = base.Center;
                    base.width = (base.height = 100);
                    base.position = new Vector2(base.position.X - (float) (base.width / 2),
                        base.position.Y - (float) (base.height / 2));
                    if (timeLeft > 3)
                    {
                        timeLeft = 3;
                    }
                }
            }
            else if (aiStyle == 71)
            {
                noTileCollide = true;
                var num1022 = 90;
                if (target < 0 || target == 255 || Main.player[target].dead)
                {
                    TargetClosest(false);
                    base.direction = 1;
                    netUpdate = true;
                }

                if (this.ai[0] == 0f)
                {
                    this.ai[1] += 1f;
                    var type2 = type;
                    noGravity = true;
                    dontTakeDamage = true;
                    base.velocity.Y = this.ai[3];
                    if (type == 373)
                    {
                        var num1023 = 0.104719758f;
                        var num1024 = this.ai[2];
                        var num1025 = (float) (Math.Cos((double) (num1023 * localAI[1])) - 0.5) * num1024;
                        base.position.X -= num1025 * (float) (-base.direction);
                        localAI[1] += 1f;
                        num1025 = (float) (Math.Cos((double) (num1023 * localAI[1])) - 0.5) * num1024;
                        base.position.X += num1025 * (float) (-base.direction);
                        if (Math.Abs(Math.Cos((double) (num1023 * localAI[1])) - 0.5) > 0.25)
                        {
                            spriteDirection = ((!(Math.Cos((double) (num1023 * localAI[1])) - 0.5 >= 0.0)) ? 1 : (-1));
                        }

                        rotation = base.velocity.Y * (float) spriteDirection * 0.1f;
                        if ((double) rotation < -0.2)
                        {
                            rotation = -0.2f;
                        }

                        if ((double) rotation > 0.2)
                        {
                            rotation = 0.2f;
                        }

                        alpha -= 6;
                        if (alpha < 0)
                        {
                            alpha = 0;
                        }
                    }

                    if (this.ai[1] >= (float) num1022)
                    {
                        this.ai[0] = 1f;
                        this.ai[1] = 0f;
                        if (!Collision.SolidCollision(base.position, base.width, base.height))
                        {
                            this.ai[1] = 1f;
                        }

                        Main.PlaySound(4, (int) base.Center.X, (int) base.Center.Y, 19, 1f, 0f);
                        TargetClosest(true);
                        spriteDirection = base.direction;
                        var vector124 = Main.player[target].Center - base.Center;
                        vector124.Normalize();
                        base.velocity = vector124 * 16f;
                        rotation = base.velocity.ToRotation();
                        if (base.direction == -1)
                        {
                            rotation += 3.14159274f;
                        }

                        netUpdate = true;
                    }
                }
                else if (this.ai[0] == 1f)
                {
                    noGravity = true;
                    if (!Collision.SolidCollision(base.position, base.width, base.height))
                    {
                        if (this.ai[1] < 1f)
                        {
                            this.ai[1] = 1f;
                        }
                    }
                    else
                    {
                        alpha -= 15;
                        if (alpha < 150)
                        {
                            alpha = 150;
                        }
                    }

                    if (this.ai[1] >= 1f)
                    {
                        alpha -= 60;
                        if (alpha < 0)
                        {
                            alpha = 0;
                        }

                        dontTakeDamage = false;
                        this.ai[1] += 1f;
                        if (Collision.SolidCollision(base.position, base.width, base.height))
                        {
                            if (DeathSound != null)
                            {
                                Main.PlaySound(DeathSound, base.position);
                            }

                            life = 0;
                            HitEffect(0, 10.0);
                            active = false;
                            return;
                        }
                    }

                    if (this.ai[1] >= 60f)
                    {
                        noGravity = false;
                    }

                    rotation = base.velocity.ToRotation();
                    if (base.direction == -1)
                    {
                        rotation += 3.14159274f;
                    }
                }
            }
            else if (aiStyle == 72)
            {
                if (type == 384)
                {
                    var num1026 = (int) this.ai[0];
                    if (Main.npc[num1026].active && Main.npc[num1026].type == 383)
                    {
                        base.velocity = Vector2.Zero;
                        base.position = Main.npc[num1026].Center;
                        base.position.X -= (float) (base.width / 2);
                        base.position.Y -= (float) (base.height / 2);
                        gfxOffY = Main.npc[num1026].gfxOffY;
                        Lighting.AddLight((int) base.Center.X / 16, (int) base.Center.Y / 16, 0.1f, 0.5f, 0.7f);
                    }
                    else
                    {
                        life = 0;
                        HitEffect(0, 10.0);
                        active = false;
                    }
                }
            }
            else if (aiStyle == 73)
            {
                TargetClosest(false);
                spriteDirection = base.direction;
                base.velocity.X *= 0.93f;
                if ((double) base.velocity.X > -0.1 && (double) base.velocity.X < 0.1)
                {
                    base.velocity.X = 0f;
                }

                if (type == 387)
                {
                    var num1027 = 120f;
                    var num1028 = 60f;
                    if (this.ai[1] < num1027)
                    {
                        this.ai[1] += 1f;
                        if (this.ai[1] > 60f)
                        {
                            var num1029 = (this.ai[1] - num1028) / (num1027 - num1028);
                            alpha = (int) ((1f - num1029) * 255f);
                        }
                        else
                        {
                            alpha = 255;
                        }

                        dontTakeDamage = true;
                        frameCounter = 0.0;
                        frame.Y = 0;
                        var num1030 = this.ai[1] / num1028;
                        var vector125 = new Vector2(0f, -30f);
                        var spinningpoint2 = vector125;
                        var radians2 = (double) (num1030 * 1.5f * 6.28318548f);
                        vector16 = default(Vector2);
                        vector125 = spinningpoint2.RotatedBy(radians2, vector16) * new Vector2(1f, 0.4f);
                        for (var num1031 = 0; num1031 < 4; num1031++)
                        {
                            var value6 = Vector2.Zero;
                            var scaleFactor2 = 1f;
                            if (num1031 == 0)
                            {
                                value6 = Vector2.UnitY * -15f;
                                scaleFactor2 = 0.15f;
                            }

                            if (num1031 == 1)
                            {
                                value6 = Vector2.UnitY * -5f;
                                scaleFactor2 = 0.3f;
                            }

                            if (num1031 == 2)
                            {
                                value6 = Vector2.UnitY * 5f;
                                scaleFactor2 = 0.6f;
                            }

                            if (num1031 == 3)
                            {
                                value6 = Vector2.UnitY * 20f;
                                scaleFactor2 = 0.45f;
                            }

                            var center4 = base.Center;
                            newColor = default(Color);
                            var num1032 = Dust.NewDust(center4, 0, 0, 226, 0f, 0f, 100, newColor, 0.5f);
                            Main.dust[num1032].noGravity = true;
                            Main.dust[num1032].position = base.Center + vector125 * scaleFactor2 + value6;
                            Main.dust[num1032].velocity = Vector2.Zero;
                            vector125 *= -1f;
                            var center5 = base.Center;
                            newColor = default(Color);
                            num1032 = Dust.NewDust(center5, 0, 0, 226, 0f, 0f, 100, newColor, 0.5f);
                            Main.dust[num1032].noGravity = true;
                            Main.dust[num1032].position = base.Center + vector125 * scaleFactor2 + value6;
                            Main.dust[num1032].velocity = Vector2.Zero;
                        }

                        Lighting.AddLight((int) base.Center.X / 16, (int) (base.Center.Y - 10f) / 16, 0.1f * num1030,
                            0.5f * num1030, 0.7f * num1030);
                        return;
                    }

                    Lighting.AddLight((int) base.Center.X / 16, (int) (base.Center.Y - 10f) / 16, 0.1f, 0.5f, 0.7f);
                    dontTakeDamage = false;
                }

                if (this.ai[0] < 60f)
                {
                    this.ai[0] += 1f;
                }

                if (justHit)
                {
                    this.ai[0] = -30f;
                }

                if (this.ai[0] == 60f)
                {
                    this.ai[0] = -120f;
                    var center6 = Main.player[target].Center;
                    var value7 = base.Center - Vector2.UnitY * 10f;
                    var vector126 = center6 - value7;
                    vector126.X += (float) Main.rand.Next(-100, 101);
                    vector126.Y += (float) Main.rand.Next(-100, 101);
                    vector126.X *= (float) Main.rand.Next(70, 131) * 0.01f;
                    vector126.Y *= (float) Main.rand.Next(70, 131) * 0.01f;
                    vector126.Normalize();
                    if (float.IsNaN(vector126.X) || float.IsNaN(vector126.Y))
                    {
                        vector126 = -Vector2.UnitY;
                    }

                    vector126 *= 14f;
                    var num1033 = 35;
                    if (Main.expertMode && type >= 381 && type <= 392)
                    {
                        num1033 = (int) ((double) num1033 * 0.8);
                    }

                    Projectile.NewProjectile(value7.X, value7.Y, vector126.X, vector126.Y, 435, num1033, 0f,
                        Main.myPlayer, 0f, 0f);
                }
            }
            else if (aiStyle == 74)
            {
                TargetClosest(false);
                rotation = base.velocity.ToRotation();
                if (Math.Sign(base.velocity.X) != 0)
                {
                    spriteDirection = -Math.Sign(base.velocity.X);
                }

                if (rotation < -1.57079637f)
                {
                    rotation += 3.14159274f;
                }

                if (rotation > 1.57079637f)
                {
                    rotation -= 3.14159274f;
                }

                if (type == 418)
                {
                    spriteDirection = Math.Sign(base.velocity.X);
                }

                var num1034 = 0.4f;
                var num1035 = 10f;
                var scaleFactor3 = 200f;
                var num1036 = 750f;
                var num1037 = 30f;
                var num1038 = 30f;
                var num1039 = 0.95f;
                var num1040 = 50;
                var scaleFactor4 = 14f;
                var num1041 = 30f;
                var num1042 = 100f;
                var num1043 = 20f;
                var num1044 = 0f;
                var num1045 = 7f;
                var flag61 = true;
                if (type == 418)
                {
                    num1034 = 0.3f;
                    num1035 = 8f;
                    scaleFactor3 = 300f;
                    num1036 = 800f;
                    num1037 = 60f;
                    num1038 = 5f;
                    num1039 = 0.8f;
                    num1040 = 0;
                    scaleFactor4 = 10f;
                    num1041 = 30f;
                    num1042 = 150f;
                    num1043 = 60f;
                    num1044 = 0.333333343f;
                    num1045 = 8f;
                    flag61 = false;
                }

                num1044 *= num1043;
                if (Main.expertMode)
                {
                    num1034 *= Main.expertKnockBack;
                }

                if (type == 388 && this.ai[0] != 3f)
                {
                    var position70 = base.position;
                    var width53 = base.width;
                    var height50 = base.height;
                    newColor = default(Color);
                    var num1046 = Dust.NewDust(position70, width53, height50, 226, 0f, 0f, 100, newColor, 0.5f);
                    Main.dust[num1046].noGravity = true;
                    Main.dust[num1046].velocity = base.velocity / 5f;
                    var vector127 = new Vector2(-10f, 10f);
                    if (spriteDirection == 1)
                    {
                        vector127.X *= -1f;
                    }

                    var spinningpoint3 = vector127;
                    var radians3 = (double) rotation;
                    vector16 = default(Vector2);
                    vector127 = spinningpoint3.RotatedBy(radians3, vector16);
                    Main.dust[num1046].position = base.Center + vector127;
                }

                if (type == 418)
                {
                    var num1047 = (this.ai[0] != 2f) ? 1 : 2;
                    var num1048 = (this.ai[0] == 2f) ? 30 : 20;
                    for (var num1049 = 0; num1049 < 2; num1049++)
                    {
                        if (Main.rand.Next(3) < num1047)
                        {
                            var position71 = base.Center - new Vector2((float) num1048);
                            var width54 = num1048 * 2;
                            var height51 = num1048 * 2;
                            var speedX27 = base.velocity.X * 0.5f;
                            var speedY26 = base.velocity.Y * 0.5f;
                            newColor = default(Color);
                            var num1050 = Dust.NewDust(position71, width54, height51, 6, speedX27, speedY26, 90,
                                newColor, 1.5f);
                            Main.dust[num1050].noGravity = true;
                            Main.dust[num1050].velocity *= 0.2f;
                            Main.dust[num1050].fadeIn = 1f;
                        }
                    }
                }

                if (this.ai[0] == 0f)
                {
                    knockBackResist = num1034;
                    var scaleFactor5 = num1035;
                    var center7 = base.Center;
                    var center8 = Main.player[target].Center;
                    var vector128 = center8 - center7;
                    var vector129 = vector128 - Vector2.UnitY * scaleFactor3;
                    var num1051 = vector128.Length();
                    vector128 = Vector2.Normalize(vector128) * scaleFactor5;
                    vector129 = Vector2.Normalize(vector129) * scaleFactor5;
                    var flag62 = Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1);
                    if (this.ai[3] >= 120f)
                    {
                        flag62 = true;
                    }

                    var num1052 = 8f;
                    flag62 = (flag62 && vector128.ToRotation() > 3.14159274f / num1052 &&
                              vector128.ToRotation() < 3.14159274f - 3.14159274f / num1052);
                    if (num1051 > num1036 || !flag62)
                    {
                        base.velocity.X = (base.velocity.X * (num1037 - 1f) + vector129.X) / num1037;
                        base.velocity.Y = (base.velocity.Y * (num1037 - 1f) + vector129.Y) / num1037;
                        if (!flag62)
                        {
                            this.ai[3] += 1f;
                            if (this.ai[3] == 120f)
                            {
                                netUpdate = true;
                            }
                        }
                        else
                        {
                            this.ai[3] = 0f;
                        }
                    }
                    else
                    {
                        this.ai[0] = 1f;
                        this.ai[2] = vector128.X;
                        this.ai[3] = vector128.Y;
                        netUpdate = true;
                    }
                }
                else if (this.ai[0] == 1f)
                {
                    knockBackResist = 0f;
                    base.velocity *= num1039;
                    this.ai[1] += 1f;
                    if (this.ai[1] >= num1038)
                    {
                        this.ai[0] = 2f;
                        this.ai[1] = 0f;
                        netUpdate = true;
                        var vector130 = new Vector2(this.ai[2], this.ai[3]) +
                                            new Vector2((float) Main.rand.Next(-num1040, num1040 + 1),
                                                (float) Main.rand.Next(-num1040, num1040 + 1)) * 0.04f;
                        vector130.Normalize();
                        vector130 = (base.velocity = vector130 * scaleFactor4);
                    }

                    if (type == 388 && Main.rand.Next(4) == 0)
                    {
                        var position72 = base.position;
                        var width55 = base.width;
                        var height52 = base.height;
                        newColor = default(Color);
                        var num1053 = Dust.NewDust(position72, width55, height52, 226, 0f, 0f, 100, newColor, 0.5f);
                        Main.dust[num1053].noGravity = true;
                        Main.dust[num1053].velocity *= 2f;
                        Main.dust[num1053].velocity = Main.dust[num1053].velocity / 2f +
                                                      Vector2.Normalize(Main.dust[num1053].position - base.Center);
                    }
                }
                else if (this.ai[0] == 2f)
                {
                    knockBackResist = 0f;
                    var num1054 = num1041;
                    this.ai[1] += 1f;
                    var flag63 = Vector2.Distance(base.Center, Main.player[target].Center) > num1042 &&
                                  base.Center.Y > Main.player[target].Center.Y;
                    if ((this.ai[1] >= num1054 && flag63) || base.velocity.Length() < num1045)
                    {
                        this.ai[0] = 0f;
                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                        base.velocity /= 2f;
                        netUpdate = true;
                        if (type == 418)
                        {
                            this.ai[1] = 45f;
                            this.ai[0] = 4f;
                        }
                    }
                    else
                    {
                        var center9 = base.Center;
                        var center10 = Main.player[target].Center;
                        var vec2 = center10 - center9;
                        vec2.Normalize();
                        if (vec2.HasNaNs())
                        {
                            vec2 = new Vector2((float) base.direction, 0f);
                        }

                        base.velocity = (base.velocity * (num1043 - 1f) + vec2 * (base.velocity.Length() + num1044)) /
                                        num1043;
                    }

                    if (flag61 && Collision.SolidCollision(base.position, base.width, base.height))
                    {
                        this.ai[0] = 3f;
                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                        netUpdate = true;
                    }
                }
                else if (this.ai[0] == 4f)
                {
                    this.ai[1] -= 3f;
                    if (this.ai[1] <= 0f)
                    {
                        this.ai[0] = 0f;
                        this.ai[1] = 0f;
                        netUpdate = true;
                    }

                    base.velocity *= 0.95f;
                }

                if (flag61 && this.ai[0] != 3f && Vector2.Distance(base.Center, Main.player[target].Center) < 64f)
                {
                    this.ai[0] = 3f;
                    this.ai[1] = 0f;
                    this.ai[2] = 0f;
                    this.ai[3] = 0f;
                    netUpdate = true;
                }

                if (this.ai[0] == 3f)
                {
                    base.position = base.Center;
                    base.width = (base.height = 192);
                    base.position.X -= (float) (base.width / 2);
                    base.position.Y -= (float) (base.height / 2);
                    base.velocity = Vector2.Zero;
                    damage = (int) (80f * Main.damageMultiplier);
                    alpha = 255;
                    Lighting.AddLight((int) base.Center.X / 16, (int) base.Center.Y / 16, 0.2f, 0.7f, 1.1f);
                    for (var num1055 = 0; num1055 < 10; num1055++)
                    {
                        var position73 = base.position;
                        var width56 = base.width;
                        var height53 = base.height;
                        newColor = default(Color);
                        var num1056 = Dust.NewDust(position73, width56, height53, 31, 0f, 0f, 100, newColor, 1.5f);
                        Main.dust[num1056].velocity *= 1.4f;
                        Main.dust[num1056].position =
                            ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() *
                            ((float) Main.rand.NextDouble() * 96f) + base.Center;
                    }

                    for (var num1057 = 0; num1057 < 40; num1057++)
                    {
                        var position74 = base.position;
                        var width57 = base.width;
                        var height54 = base.height;
                        newColor = default(Color);
                        var num1058 = Dust.NewDust(position74, width57, height54, 226, 0f, 0f, 100, newColor, 0.5f);
                        Main.dust[num1058].noGravity = true;
                        Main.dust[num1058].velocity *= 2f;
                        Main.dust[num1058].position =
                            ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() *
                            ((float) Main.rand.NextDouble() * 96f) + base.Center;
                        Main.dust[num1058].velocity = Main.dust[num1058].velocity / 2f +
                                                      Vector2.Normalize(Main.dust[num1058].position - base.Center);
                        if (Main.rand.Next(2) == 0)
                        {
                            var position75 = base.position;
                            var width58 = base.width;
                            var height55 = base.height;
                            newColor = default(Color);
                            num1058 = Dust.NewDust(position75, width58, height55, 226, 0f, 0f, 100, newColor, 0.9f);
                            Main.dust[num1058].noGravity = true;
                            Main.dust[num1058].velocity *= 1.2f;
                            Main.dust[num1058].position =
                                ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() *
                                ((float) Main.rand.NextDouble() * 96f) + base.Center;
                            Main.dust[num1058].velocity =
                                Main.dust[num1058].velocity / 2f +
                                Vector2.Normalize(Main.dust[num1058].position - base.Center);
                        }

                        if (Main.rand.Next(4) == 0)
                        {
                            var position76 = base.position;
                            var width59 = base.width;
                            var height56 = base.height;
                            newColor = default(Color);
                            num1058 = Dust.NewDust(position76, width59, height56, 226, 0f, 0f, 100, newColor, 0.7f);
                            Main.dust[num1058].velocity *= 1.2f;
                            Main.dust[num1058].position =
                                ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() *
                                ((float) Main.rand.NextDouble() * 96f) + base.Center;
                            Main.dust[num1058].velocity =
                                Main.dust[num1058].velocity / 2f +
                                Vector2.Normalize(Main.dust[num1058].position - base.Center);
                        }
                    }

                    this.ai[1] += 1f;
                    if (this.ai[1] >= 3f)
                    {
                        Main.PlaySound(SoundID.Item14, base.position);
                        life = 0;
                        HitEffect(0, 10.0);
                        active = false;
                    }
                }
            }
            else if (aiStyle == 75)
            {
                var num1059 = -1;
                var vector131 = Vector2.Zero;
                var num1060 = 0;
                if (type == 390)
                {
                    if (localAI[0] == 0f && Main.netMode != 1)
                    {
                        localAI[0] = 1f;
                        var num1061 = NewNPC((int) base.Center.X, (int) base.Center.Y, 391, whoAmI, 0f, 0f, 0f, 0f,
                            255);
                        this.ai[0] = (float) num1061;
                        netUpdate = true;
                    }

                    var num1062 = (int) this.ai[0];
                    if (Main.npc[num1062].active && Main.npc[num1062].type == 391)
                    {
                        if (timeLeft < 60)
                        {
                            timeLeft = 60;
                        }

                        num1059 = num1062;
                        vector131 = Vector2.UnitY * -14f;
                    }
                }

                if (type == 416)
                {
                    if (localAI[0] == 0f && Main.netMode != 1)
                    {
                        localAI[0] = 1f;
                        var num1063 = NewNPC((int) base.Center.X, (int) base.Center.Y, 415, whoAmI, 0f, 0f, 0f, 0f,
                            255);
                        this.ai[0] = (float) num1063;
                        netUpdate = true;
                    }

                    var num1064 = (int) this.ai[0];
                    if (Main.npc[num1064].active && Main.npc[num1064].type == 415)
                    {
                        if (timeLeft < 60)
                        {
                            timeLeft = 60;
                        }

                        num1059 = num1064;
                        vector131 = new Vector2((float) (-Main.npc[num1064].spriteDirection * 10), -30f);
                    }
                }
                else if (type == 392)
                {
                    var num1065 = (int) this.ai[0];
                    if (Main.npc[num1065].active && Main.npc[num1065].type == 395)
                    {
                        if (timeLeft < 60)
                        {
                            timeLeft = 60;
                        }

                        num1059 = num1065;
                        vector131 = Vector2.UnitY * 2f;
                        vector131 *= Main.npc[num1065].scale;
                        var num1066 = Main.npc[num1065].rotation;
                        var spinningpoint4 = vector131;
                        var radians4 = (double) num1066;
                        vector16 = default(Vector2);
                        vector131 = spinningpoint4.RotatedBy(radians4, vector16);
                        rotation = num1066;
                        if (Main.netMode != 1)
                        {
                            var flag64 = true;
                            if (Main.npc[num1065].ai[0] >= 1f || Main.npc[num1065].ai[0] < 0f)
                            {
                                flag64 = false;
                            }

                            if (flag64)
                            {
                                for (var num1067 = 0; num1067 < 2; num1067++)
                                {
                                    if (Main.npc[(int) localAI[num1067]].active &&
                                        Main.npc[(int) localAI[num1067]].type == 393)
                                    {
                                        flag64 = false;
                                    }
                                }

                                for (var num1068 = 2; num1068 < 4; num1068++)
                                {
                                    if (Main.npc[(int) localAI[num1068]].active &&
                                        Main.npc[(int) localAI[num1068]].type == 394)
                                    {
                                        flag64 = false;
                                    }
                                }
                            }

                            if (Main.npc[num1065].ai[3] % 200f == 0f && Main.npc[num1065].ai[0] != 1f)
                            {
                                for (var num1069 = 0; num1069 < 2; num1069++)
                                {
                                    if (Main.npc[(int) localAI[num1069]].active &&
                                        Main.npc[(int) localAI[num1069]].type == 393)
                                    {
                                        Main.npc[(int) localAI[num1069]].netUpdate = true;
                                    }
                                }

                                for (var num1070 = 2; num1070 < 4; num1070++)
                                {
                                    if (Main.npc[(int) localAI[num1070]].active &&
                                        Main.npc[(int) localAI[num1070]].type == 394)
                                    {
                                        Main.npc[(int) localAI[num1070]].netUpdate = true;
                                    }
                                }

                                netUpdate = true;
                            }

                            if (flag64)
                            {
                                Main.npc[num1065].ai[0] = 1f;
                                Main.npc[num1065].ai[1] = 0f;
                                Main.npc[num1065].ai[2] = 0f;
                                Main.npc[num1065].ai[3] = 0f;
                                Main.npc[num1065].netUpdate = true;
                            }
                        }
                    }
                }
                else if (type == 393)
                {
                    var num1071 = (int) this.ai[0];
                    if (Main.npc[num1071].active && Main.npc[num1071].type == 395)
                    {
                        if (timeLeft < 60)
                        {
                            timeLeft = 60;
                        }

                        num1059 = num1071;
                        vector131 = Vector2.UnitY * 29f + ((this.ai[1] == 1f) ? Vector2.UnitX : (-Vector2.UnitX)) * 60f;
                        vector131 *= Main.npc[num1071].scale;
                        var num1072 = Main.npc[num1071].rotation;
                        var spinningpoint5 = vector131;
                        var radians5 = (double) num1072;
                        vector16 = default(Vector2);
                        vector131 = spinningpoint5.RotatedBy(radians5, vector16);
                        rotation = num1072;
                    }
                }
                else if (type == 394)
                {
                    var num1073 = (int) this.ai[0];
                    if (Main.npc[num1073].active && Main.npc[num1073].type == 395)
                    {
                        if (timeLeft < 60)
                        {
                            timeLeft = 60;
                        }

                        num1059 = num1073;
                        vector131 = Vector2.UnitY * -13f +
                                    ((this.ai[1] == 1f) ? Vector2.UnitX : (-Vector2.UnitX)) * 49f;
                        vector131 *= Main.npc[num1073].scale;
                        var num1074 = Main.npc[num1073].rotation;
                        var spinningpoint6 = vector131;
                        var radians6 = (double) num1074;
                        vector16 = default(Vector2);
                        vector131 = spinningpoint6.RotatedBy(radians6, vector16);
                        rotation = num1074;
                        num1060 = ((this.ai[1] == 1f) ? 1 : (-1));
                    }
                }
                else if (type == 492)
                {
                    var num1075 = (int) this.ai[0];
                    if (Main.npc[num1075].active && Main.npc[num1075].type == 491)
                    {
                        if (timeLeft < 60)
                        {
                            timeLeft = 60;
                        }

                        num1059 = num1075;
                        vector131 = new Vector2(
                            (-122f + 68f * this.ai[1]) * (float) ((Main.npc[num1075].spriteDirection != 1) ? 1 : (-1)),
                            -6f);
                        vector131 *= Main.npc[num1075].scale;
                        var num1076 = Main.npc[num1075].rotation;
                        var spinningpoint7 = vector131;
                        var radians7 = (double) num1076;
                        vector16 = default(Vector2);
                        vector131 = spinningpoint7.RotatedBy(radians7, vector16);
                        rotation = num1076;
                    }
                }

                if (num1059 != -1)
                {
                    var nPC2 = Main.npc[num1059];
                    base.velocity = Vector2.Zero;
                    base.position = nPC2.Center;
                    base.position.X -= (float) (base.width / 2);
                    base.position.Y -= (float) (base.height / 2);
                    base.position += vector131;
                    gfxOffY = nPC2.gfxOffY;
                    base.direction = nPC2.direction;
                    if (num1060 == 0)
                    {
                        spriteDirection = nPC2.spriteDirection;
                    }
                    else
                    {
                        spriteDirection = num1060;
                    }

                    if (type == 390)
                    {
                        timeLeft = nPC2.timeLeft;
                        base.velocity = nPC2.velocity;
                        target = nPC2.target;
                        if (this.ai[1] < 60f)
                        {
                            this.ai[1] += 1f;
                        }

                        if (justHit)
                        {
                            this.ai[1] = -30f;
                        }

                        var num1077 = 438;
                        var num1078 = 30;
                        var scaleFactor6 = 7f;
                        if (Collision.CanHit(base.position, base.width, base.height, Main.player[target].position,
                            Main.player[target].width, Main.player[target].height))
                        {
                            var vector132 = Main.player[target].Center - base.Center;
                            var vector133 = Vector2.Normalize(vector132);
                            var num1079 = vector132.Length();
                            var num1080 = 700f;
                            if (type == 214)
                            {
                                num1080 = 550f;
                            }

                            if (type == 215)
                            {
                                num1080 = 800f;
                            }

                            if (num1079 < num1080)
                            {
                                if (this.ai[1] == 60f && Math.Sign(vector132.X) == base.direction)
                                {
                                    this.ai[1] = -60f;
                                    var center11 = Main.player[target].Center;
                                    var value8 = base.Center - Vector2.UnitY * 4f;
                                    var vector134 = center11 - value8;
                                    vector134.X += (float) Main.rand.Next(-50, 51);
                                    vector134.Y += (float) Main.rand.Next(-50, 51);
                                    vector134.X *= (float) Main.rand.Next(80, 121) * 0.01f;
                                    vector134.Y *= (float) Main.rand.Next(80, 121) * 0.01f;
                                    vector134.Normalize();
                                    if (float.IsNaN(vector134.X) || float.IsNaN(vector134.Y))
                                    {
                                        vector134 = -Vector2.UnitY;
                                    }

                                    vector134 *= scaleFactor6;
                                    Projectile.NewProjectile(value8.X, value8.Y, vector134.X, vector134.Y, num1077,
                                        num1078, 0f, Main.myPlayer, 0f, 0f);
                                    netUpdate = true;
                                }
                                else
                                {
                                    var num1081 = this.ai[2];
                                    base.velocity.X *= 0.5f;
                                    this.ai[2] = 3f;
                                    if (Math.Abs(vector133.Y) > Math.Abs(vector133.X) * 2f)
                                    {
                                        if (vector133.Y > 0f)
                                        {
                                            this.ai[2] = 1f;
                                        }
                                        else
                                        {
                                            this.ai[2] = 5f;
                                        }
                                    }
                                    else if (Math.Abs(vector133.X) > Math.Abs(vector133.Y) * 2f)
                                    {
                                        this.ai[2] = 3f;
                                    }
                                    else if (vector133.Y > 0f)
                                    {
                                        this.ai[2] = 2f;
                                    }
                                    else
                                    {
                                        this.ai[2] = 4f;
                                    }

                                    if (this.ai[2] != num1081)
                                    {
                                        netUpdate = true;
                                    }
                                }
                            }
                        }
                    }

                    if (type == 492)
                    {
                        timeLeft = nPC2.timeLeft;
                        base.velocity = nPC2.velocity;
                        if (this.ai[3] < 240f)
                        {
                            this.ai[3] += 1f;
                        }

                        if (this.ai[3] == 2f)
                        {
                            TargetClosest(false);
                        }

                        if (Collision.CanHit(base.position, base.width, base.height, Main.player[target].position,
                            Main.player[target].width, Main.player[target].height))
                        {
                            var vector135 = Main.player[target].Center - base.Center;
                            Vector2.Normalize(vector135);
                            if (this.ai[3] >= 240f)
                            {
                                this.ai[3] = 0f;
                                var center12 = Main.player[target].Center;
                                var center13 = base.Center;
                                var vector136 = Vector2.Normalize(center12 - center13);
                                if (float.IsNaN(vector136.X) || float.IsNaN(vector136.Y))
                                {
                                    vector136 = Vector2.UnitY;
                                }

                                vector136 *= 14f;
                                vector136 += Vector2.UnitY * -5f;
                                if (Main.netMode != 1)
                                {
                                    Projectile.NewProjectile(center13.X, center13.Y, vector136.X, vector136.Y, 240, 30,
                                        0f, Main.myPlayer, 0f, 0f);
                                }

                                netUpdate = true;
                            }
                            else
                            {
                                var num1082 = this.ai[2];
                                var array3 = new float[8];
                                for (var num1083 = 0; num1083 < array3.Length; num1083++)
                                {
                                    var array4 = array3;
                                    var num1084 = num1083;
                                    var center14 = base.Center;
                                    var unitY = Vector2.UnitY;
                                    var radians8 = (double) ((float) num1083 * -0.7853982f);
                                    vector16 = default(Vector2);
                                    array4[num1084] =
                                        Vector2.Distance(center14 + unitY.RotatedBy(radians8, vector16) * 50f,
                                            Main.player[target].Center);
                                }

                                var num1085 = 0;
                                for (var num1086 = 1; num1086 < array3.Length; num1086++)
                                {
                                    if (array3[num1085] > array3[num1086])
                                    {
                                        num1085 = num1086;
                                    }
                                }

                                this.ai[2] = (float) (num1085 + 1);
                                if (spriteDirection == 1)
                                {
                                    this.ai[2] = 9f - this.ai[2];
                                }

                                if (this.ai[2] != num1082)
                                {
                                    netUpdate = true;
                                }
                            }
                        }
                        else
                        {
                            if (this.ai[2] != 0f)
                            {
                                netUpdate = true;
                            }

                            this.ai[2] = 0f;
                        }
                    }

                    if (type == 394)
                    {
                        timeLeft = nPC2.timeLeft;
                        var num1087 = 50;
                        if (Main.expertMode)
                        {
                            num1087 = 37;
                        }

                        this.ai[3] = nPC2.ai[3];
                        var num1088 = 440f;
                        var num1089 = 140f;
                        if (this.ai[3] >= num1088 && this.ai[3] < num1088 + num1089)
                        {
                            var num1090 = this.ai[3] - num1088;
                            if (num1090 % 20f == 0f)
                            {
                                if (Main.netMode != 1)
                                {
                                    var vector137 = (float) num1060 * Vector2.UnitX;
                                    var spinningpoint8 = vector137;
                                    var radians9 = (Main.rand.NextDouble() - 0.5) * 0.78539818525314331;
                                    vector16 = default(Vector2);
                                    vector137 = spinningpoint8.RotatedBy(radians9, vector16);
                                    vector137 *= 8f;
                                    var vector138 = (float) num1060 * Vector2.UnitX * 36f + base.Center +
                                                        Vector2.UnitY * 8f;
                                    Projectile.NewProjectile(vector138.X, vector138.Y, vector137.X, vector137.Y, 448,
                                        num1087, 0f, Main.myPlayer, 0f, 20f);
                                }

                                Main.PlaySound(SoundID.Item39, base.Center);
                            }
                        }
                    }

                    if (type == 393)
                    {
                        timeLeft = nPC2.timeLeft;
                        var num1091 = 35;
                        if (Main.expertMode)
                        {
                            num1091 = 30;
                        }

                        this.ai[3] = nPC2.ai[3];
                        var num1092 = 280f;
                        var num1093 = 140f;
                        var flag65 = this.ai[3] >= num1092 && this.ai[3] < num1092 + num1093;
                        if (!flag65)
                        {
                            TargetClosest(false);
                            var player3 = Main.player[target];
                            var v = player3.Center - base.Center;
                            if (v.Y < 0f)
                            {
                                v.Y = 0f;
                            }

                            v.Normalize();
                            if (float.IsNaN(v.X) || float.IsNaN(v.Y))
                            {
                                v = Vector2.UnitY;
                            }

                            this.ai[2] = v.ToRotation();
                        }

                        if (flag65)
                        {
                            var num1094 = this.ai[3] - num1092;
                            if (num1094 % 6f == 0f)
                            {
                                if (Main.netMode != 1)
                                {
                                    var vector139 = this.ai[2].ToRotationVector2();
                                    var spinningpoint9 = vector139;
                                    var radians10 = (Main.rand.NextDouble() - 0.5) * 0.78539818525314331 / 3.0;
                                    vector16 = default(Vector2);
                                    vector139 = spinningpoint9.RotatedBy(radians10, vector16);
                                    vector139 *= 16f;
                                    var vector140 = base.Center + vector139 * 1f;
                                    Projectile.NewProjectile(vector140.X, vector140.Y, vector139.X, vector139.Y, 449,
                                        num1091, 0f, Main.myPlayer, 0f, 0f);
                                }

                                Main.PlaySound(SoundID.Item12, base.Center);
                            }
                        }
                    }

                    if (type == 392)
                    {
                        timeLeft = nPC2.timeLeft;
                        var num1095 = 70;
                        if (Main.expertMode)
                        {
                            num1095 = 50;
                        }

                        this.ai[3] = nPC2.ai[3];
                        var num1096 = 20f;
                        var num1097 = 240f;
                        if (this.ai[3] >= num1096 && this.ai[3] < num1096 + num1097 && nPC2.ai[0] == 0f)
                        {
                            var num1098 = this.ai[3] - num1096;
                            if (num1098 == 0f)
                            {
                                if (Main.netMode != 1)
                                {
                                    var center15 = base.Center;
                                    Projectile.NewProjectile(center15.X, center15.Y, 0f, 0f, 447, num1095, 0f,
                                        Main.myPlayer, (float) (whoAmI + 1), 0f);
                                }

                                Main.PlaySound(SoundID.Item12, base.Center);
                            }
                        }

                        var flag66 = false;
                        var maxValue4 = 1000;
                        var maxValue5 = 1000;
                        var num1099 = 450;
                        var num1100 = 30;
                        if (Main.expertMode)
                        {
                            num1100 = 25;
                        }

                        if (nPC2.ai[0] == 2f)
                        {
                            flag66 = true;
                            maxValue5 = 120;
                            maxValue4 = 120;
                        }

                        if (!flag66)
                        {
                            num1096 = 280f;
                            num1097 = 120f;
                            flag66 = (flag66 || (this.ai[3] >= num1096 && this.ai[3] < num1096 + num1097));
                            if (flag66)
                            {
                                maxValue5 = 90;
                                maxValue4 = 60;
                            }
                        }

                        if (!flag66)
                        {
                            num1096 = 440f;
                            num1097 = 140f;
                            flag66 = (flag66 || (this.ai[3] >= num1096 && this.ai[3] < num1096 + num1097));
                            if (flag66)
                            {
                                maxValue5 = 60;
                                maxValue4 = 90;
                            }
                        }

                        var flag67 = true;
                        var flag68 = true;
                        var flag69 = true;
                        var flag70 = true;
                        if (Main.npc[(int) localAI[0]].active && Main.npc[(int) localAI[0]].type == 393)
                        {
                            flag67 = false;
                        }

                        if (Main.npc[(int) localAI[1]].active && Main.npc[(int) localAI[1]].type == 393)
                        {
                            flag68 = false;
                        }

                        if (Main.npc[(int) localAI[2]].active && Main.npc[(int) localAI[2]].type == 394)
                        {
                            flag69 = false;
                        }

                        if (Main.npc[(int) localAI[3]].active && Main.npc[(int) localAI[3]].type == 394)
                        {
                            flag70 = false;
                        }

                        if (flag66)
                        {
                            var flag71 = true;
                            if (flag67 && Main.rand.Next(maxValue4) == 0)
                            {
                                if (Main.netMode != 1)
                                {
                                    var vector141 = new Vector2(-1f * (float) Main.rand.NextDouble() * 3f, 1f);
                                    var spinningpoint10 = vector141;
                                    var radians11 = (Main.rand.NextDouble() - 0.5) * 0.78539818525314331;
                                    vector16 = default(Vector2);
                                    vector141 = spinningpoint10.RotatedBy(radians11, vector16);
                                    vector141 *= 3f;
                                    var vector142 = -1f * Vector2.UnitX * (float) Main.rand.Next(50, 70) +
                                                        base.Center + Vector2.UnitY * (float) Main.rand.Next(30, 45);
                                    Projectile.NewProjectile(vector142.X, vector142.Y, vector141.X, vector141.Y,
                                        num1099, num1100, 0f, Main.myPlayer, 0f, 0f);
                                }

                                Main.PlaySound(SoundID.Item39, base.Center);
                            }

                            if (flag68 && Main.rand.Next(maxValue4) == 0)
                            {
                                if (Main.netMode != 1)
                                {
                                    var vector143 = new Vector2(1f * (float) Main.rand.NextDouble() * 3f, 1f);
                                    var spinningpoint11 = vector143;
                                    var radians12 = (Main.rand.NextDouble() - 0.5) * 0.78539818525314331;
                                    vector16 = default(Vector2);
                                    vector143 = spinningpoint11.RotatedBy(radians12, vector16);
                                    vector143 *= 3f;
                                    var vector144 = 1f * Vector2.UnitX * (float) Main.rand.Next(50, 70) +
                                                        base.Center + Vector2.UnitY * (float) Main.rand.Next(30, 45);
                                    Projectile.NewProjectile(vector144.X, vector144.Y, vector143.X, vector143.Y,
                                        num1099, num1100, 0f, Main.myPlayer, 0f, 0f);
                                }

                                Main.PlaySound(SoundID.Item39, base.Center);
                            }
                        }

                        if (flag66)
                        {
                            var flag72 = true;
                            if (flag69 && Main.rand.Next(maxValue5) == 0)
                            {
                                if (Main.netMode != 1)
                                {
                                    var vector145 = new Vector2(-1f * (float) Main.rand.NextDouble() * 2f, -1f);
                                    var spinningpoint12 = vector145;
                                    var radians13 = (Main.rand.NextDouble() - 0.5) * 0.78539818525314331;
                                    vector16 = default(Vector2);
                                    vector145 = spinningpoint12.RotatedBy(radians13, vector16);
                                    vector145 *= 3f;
                                    var vector146 = -1f * Vector2.UnitX * (float) Main.rand.Next(30, 60) +
                                                        base.Center + Vector2.UnitY * (float) Main.rand.Next(-30, -10);
                                    Projectile.NewProjectile(vector146.X, vector146.Y, vector145.X, vector145.Y,
                                        num1099, num1100, 0f, Main.myPlayer, 0f, 0f);
                                }

                                Main.PlaySound(SoundID.Item39, base.Center);
                            }

                            if (flag70 && Main.rand.Next(maxValue5) == 0)
                            {
                                if (Main.netMode != 1)
                                {
                                    var vector147 = new Vector2(1f * (float) Main.rand.NextDouble() * 2f, -1f);
                                    var spinningpoint13 = vector147;
                                    var radians14 = (Main.rand.NextDouble() - 0.5) * 0.78539818525314331;
                                    vector16 = default(Vector2);
                                    vector147 = spinningpoint13.RotatedBy(radians14, vector16);
                                    vector147 *= 3f;
                                    var vector148 = 1f * Vector2.UnitX * (float) Main.rand.Next(30, 60) +
                                                        base.Center + Vector2.UnitY * (float) Main.rand.Next(-30, -10);
                                    Projectile.NewProjectile(vector148.X, vector148.Y, vector147.X, vector147.Y,
                                        num1099, num1100, 0f, Main.myPlayer, 0f, 0f);
                                }

                                Main.PlaySound(SoundID.Item39, base.Center);
                            }
                        }

                        if (flag67 && Main.rand.Next(8) == 0)
                        {
                            var position77 = -1f * Vector2.UnitX * (float) Main.rand.Next(50, 70) + base.Center +
                                                 Vector2.UnitY * (float) Main.rand.Next(15, 30);
                            var num1101 = (Main.rand.Next(4) != 0) ? 31 : 228;
                            newColor = default(Color);
                            var num1102 = Dust.NewDust(position77, 4, 16, num1101, 0f, 0f, 100, newColor, 1.2f);
                            var obj6 = Main.dust[num1102];
                            var spinningpoint14 = new Vector2(-1f * (float) Main.rand.NextDouble() * 3f, 1f);
                            var radians15 = (Main.rand.NextDouble() - 0.5) * 0.78539818525314331;
                            vector16 = default(Vector2);
                            obj6.velocity = spinningpoint14.RotatedBy(radians15, vector16);
                            Main.dust[num1102].velocity *= 0.5f;
                            Main.dust[num1102].velocity.Y = 0f - Math.Abs(Main.dust[num1102].velocity.Y);
                        }

                        if (flag68 && Main.rand.Next(8) == 0)
                        {
                            var position78 = Vector2.UnitX * (float) Main.rand.Next(50, 70) + base.Center +
                                                 Vector2.UnitY * (float) Main.rand.Next(15, 30);
                            var num1103 = (Main.rand.Next(4) != 0) ? 31 : 228;
                            newColor = default(Color);
                            var num1104 = Dust.NewDust(position78, 4, 16, num1103, 0f, 0f, 100, newColor, 1.2f);
                            var obj7 = Main.dust[num1104];
                            var spinningpoint15 = new Vector2((float) Main.rand.NextDouble() * 3f, 1f);
                            var radians16 = (Main.rand.NextDouble() - 0.5) * 0.78539818525314331;
                            vector16 = default(Vector2);
                            obj7.velocity = spinningpoint15.RotatedBy(radians16, vector16);
                            Main.dust[num1104].velocity *= 0.5f;
                            Main.dust[num1104].velocity.Y = 0f - Math.Abs(Main.dust[num1104].velocity.Y);
                        }

                        if (flag69 && Main.rand.Next(8) == 0)
                        {
                            var position79 = -1f * Vector2.UnitX * (float) Main.rand.Next(30, 60) + base.Center +
                                                 Vector2.UnitY * (float) Main.rand.Next(-30, -10);
                            var num1105 = (Main.rand.Next(4) != 0) ? 31 : 228;
                            newColor = default(Color);
                            var num1106 = Dust.NewDust(position79, 4, 16, num1105, 0f, 0f, 100, newColor, 1.2f);
                            var obj8 = Main.dust[num1106];
                            var spinningpoint16 = new Vector2(-1f * (float) Main.rand.NextDouble() * 2f, 1f);
                            var radians17 = (Main.rand.NextDouble() - 0.5) * 0.78539818525314331;
                            vector16 = default(Vector2);
                            obj8.velocity = spinningpoint16.RotatedBy(radians17, vector16);
                            Main.dust[num1106].velocity *= 0.5f;
                            Main.dust[num1106].velocity.Y = 0f - Math.Abs(Main.dust[num1106].velocity.Y);
                        }

                        if (flag70 && Main.rand.Next(8) == 0)
                        {
                            var position80 = Vector2.UnitX * (float) Main.rand.Next(30, 60) + base.Center +
                                                 Vector2.UnitY * (float) Main.rand.Next(-30, -10);
                            var num1107 = (Main.rand.Next(4) != 0) ? 31 : 228;
                            newColor = default(Color);
                            var num1108 = Dust.NewDust(position80, 4, 16, num1107, 0f, 0f, 100, newColor, 1.2f);
                            var obj9 = Main.dust[num1108];
                            var spinningpoint17 = new Vector2((float) Main.rand.NextDouble() * 2f, 1f);
                            var radians18 = (Main.rand.NextDouble() - 0.5) * 0.78539818525314331;
                            vector16 = default(Vector2);
                            obj9.velocity = spinningpoint17.RotatedBy(radians18, vector16);
                            Main.dust[num1108].velocity *= 0.5f;
                            Main.dust[num1108].velocity.Y = 0f - Math.Abs(Main.dust[num1108].velocity.Y);
                        }
                    }
                }
                else if (type == 390)
                {
                    Transform(382);
                }
                else if (type == 416)
                {
                    Transform(518);
                }
                else
                {
                    life = 0;
                    HitEffect(0, 10.0);
                    active = false;
                }
            }
            else if (aiStyle == 76)
            {
                if (localAI[3] == 0f && Main.netMode != 1 && type == 395)
                {
                    localAI[3] = 1f;
                    var array5 = new int[4];
                    var num1109 = 0;
                    for (var num1110 = 0; num1110 < 2; num1110++)
                    {
                        var num1111 = NewNPC((int) base.Center.X + num1110 * 300 - 150, (int) base.Center.Y, 393,
                            whoAmI, 0f, 0f, 0f, 0f, 255);
                        Main.npc[num1111].ai[1] = (float) num1110;
                        Main.npc[num1111].netUpdate = true;
                        array5[num1109++] = num1111;
                    }

                    for (var num1113 = 0; num1113 < 2; num1113++)
                    {
                        var num1114 = NewNPC((int) base.Center.X + num1113 * 300 - 150, (int) base.Center.Y, 394,
                            whoAmI, 0f, 0f, 0f, 0f, 255);
                        Main.npc[num1114].ai[1] = (float) num1113;
                        Main.npc[num1114].netUpdate = true;
                        array5[num1109++] = num1114;
                    }

                    var num1116 = NewNPC((int) base.Center.X, (int) base.Center.Y, 392, whoAmI, 0f, 0f, 0f, 0f, 255);
                    Main.npc[num1116].ai[0] = (float) whoAmI;
                    Main.npc[num1116].netUpdate = true;
                    for (var num1117 = 0; num1117 < 4; num1117++)
                    {
                        Main.npc[array5[num1117]].ai[0] = (float) whoAmI;
                    }

                    for (var num1118 = 0; num1118 < 4; num1118++)
                    {
                        Main.npc[num1116].localAI[num1118] = (float) array5[num1118];
                    }
                }

                var center16 = base.Center;
                var player4 = Main.player[target];
                if (target < 0 || target == 255 || player4.dead || !player4.active)
                {
                    TargetClosest(true);
                    player4 = Main.player[target];
                    netUpdate = true;
                }

                if ((player4.dead || Vector2.Distance(player4.Center, center16) > 5600f) && this.ai[0] != 1f)
                {
                    if (this.ai[0] == 0f)
                    {
                        this.ai[0] = -1f;
                    }

                    if (this.ai[0] == 2f)
                    {
                        this.ai[0] = -2f;
                    }

                    netUpdate = true;
                }

                if (this.ai[0] == -1f || this.ai[0] == -2f)
                {
                    base.velocity.Y -= 0.4f;
                    if (timeLeft > 10)
                    {
                        timeLeft = 10;
                    }

                    if (!player4.dead)
                    {
                        timeLeft = 300;
                        if (this.ai[0] == -2f)
                        {
                            this.ai[0] = 2f;
                        }

                        if (this.ai[0] == 0f)
                        {
                            this.ai[0] = 0f;
                        }

                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                        netUpdate = true;
                    }
                }
                else if (this.ai[0] == 0f)
                {
                    var num1119 = 0;
                    var num1120 = 0;
                    if (this.ai[3] >= 580f)
                    {
                        num1119 = 0;
                    }
                    else if (this.ai[3] >= 440f)
                    {
                        num1119 = 5;
                    }
                    else if (this.ai[3] >= 420f)
                    {
                        num1119 = 4;
                    }
                    else if (this.ai[3] >= 280f)
                    {
                        num1119 = 3;
                    }
                    else if (this.ai[3] >= 260f)
                    {
                        num1119 = 2;
                    }
                    else if (this.ai[3] >= 20f)
                    {
                        num1119 = 1;
                    }

                    this.ai[3] += 1f;
                    if (this.ai[3] >= 600f)
                    {
                        this.ai[3] = 0f;
                    }

                    num1120 = num1119;
                    if (this.ai[3] >= 580f)
                    {
                        num1119 = 0;
                    }
                    else if (this.ai[3] >= 440f)
                    {
                        num1119 = 5;
                    }
                    else if (this.ai[3] >= 420f)
                    {
                        num1119 = 4;
                    }
                    else if (this.ai[3] >= 280f)
                    {
                        num1119 = 3;
                    }
                    else if (this.ai[3] >= 260f)
                    {
                        num1119 = 2;
                    }
                    else if (this.ai[3] >= 20f)
                    {
                        num1119 = 1;
                    }

                    if (num1119 != num1120)
                    {
                        if (num1119 == 0)
                        {
                            this.ai[2] = 0f;
                        }

                        if (num1119 == 1)
                        {
                            this.ai[2] = (float) ((Math.Sign((player4.Center - center16).X) == 1) ? 1 : (-1));
                        }

                        if (num1119 == 2)
                        {
                            this.ai[2] = 0f;
                        }

                        netUpdate = true;
                    }

                    if (num1119 == 0)
                    {
                        if (this.ai[2] == 0f)
                        {
                            this.ai[2] = (float) (-600 * Math.Sign((center16 - player4.Center).X));
                        }

                        var vector149 = player4.Center + new Vector2(this.ai[2], -250f) - center16;
                        if (vector149.Length() < 50f)
                        {
                            this.ai[3] = 19f;
                        }
                        else
                        {
                            vector149.Normalize();
                            base.velocity = Vector2.Lerp(base.velocity, vector149 * 16f, 0.1f);
                        }
                    }

                    if (num1119 == 1)
                    {
                        var num1121 = (int) base.Center.X / 16;
                        var num1122 = (int) (base.position.Y + (float) base.height) / 16;
                        var num1123 = 0;
                        if (!Main.tile[num1121, num1122].nactive() ||
                            !Main.tileSolid[Main.tile[num1121, num1122].type] ||
                            Main.tileSolidTop[Main.tile[num1121, num1122].type])
                        {
                            for (; num1123 < 150; num1123++)
                            {
                                if (num1122 + num1123 >= Main.maxTilesY)
                                {
                                    break;
                                }

                                var num1124 = num1122 + num1123;
                                if (Main.tile[num1121, num1124].nactive() &&
                                    Main.tileSolid[Main.tile[num1121, num1124].type] &&
                                    !Main.tileSolidTop[Main.tile[num1121, num1124].type])
                                {
                                    num1123--;
                                    break;
                                }
                            }
                        }
                        else
                        {
                            num1123 = 1;
                        }

                        var num1125 = (float) (num1123 * 16);
                        var num1126 = 250f;
                        if (num1125 < num1126)
                        {
                            var num1127 = -4f;
                            if (0f - num1127 > num1125)
                            {
                                num1127 = 0f - num1125;
                            }

                            base.velocity.Y = MathHelper.Lerp(base.velocity.Y, num1127, 0.05f);
                        }
                        else
                        {
                            base.velocity.Y *= 0.95f;
                        }

                        base.velocity.X = 3.5f * this.ai[2];
                    }

                    switch (num1119)
                    {
                        case 2:
                        {
                            if (this.ai[2] == 0f)
                            {
                                this.ai[2] = (float) (300 * Math.Sign((center16 - player4.Center).X));
                            }

                            var vector150 = player4.Center + new Vector2(this.ai[2], -170f) - center16;
                            var num1136 = (int) base.Center.X / 16;
                            var num1137 = (int) (base.position.Y + (float) base.height) / 16;
                            var num1138 = 0;
                            if (!Main.tile[num1136, num1137].nactive() ||
                                !Main.tileSolid[Main.tile[num1136, num1137].type] ||
                                Main.tileSolidTop[Main.tile[num1136, num1137].type])
                            {
                                for (; num1138 < 150; num1138++)
                                {
                                    if (num1137 + num1138 >= Main.maxTilesY)
                                    {
                                        break;
                                    }

                                    var num1139 = num1137 + num1138;
                                    if (Main.tile[num1136, num1139].nactive() &&
                                        Main.tileSolid[Main.tile[num1136, num1139].type] &&
                                        !Main.tileSolidTop[Main.tile[num1136, num1139].type])
                                    {
                                        num1138--;
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                num1138 = 1;
                            }

                            var num1140 = (float) (num1138 * 16);
                            var num1141 = 170f;
                            if (num1140 < num1141)
                            {
                                vector150.Y -= num1141 - num1140;
                            }

                            if (vector150.Length() < 70f)
                            {
                                this.ai[3] = 279f;
                            }
                            else
                            {
                                vector150.Normalize();
                                base.velocity = Vector2.Lerp(base.velocity, vector150 * 20f, 0.1f);
                            }

                            break;
                        }
                        case 3:
                        {
                            var num1128 = 0.85f;
                            var num1129 = (int) base.Center.X / 16;
                            var num1130 = (int) (base.position.Y + (float) base.height) / 16;
                            var num1131 = 0;
                            if (!Main.tile[num1129, num1130].nactive() ||
                                !Main.tileSolid[Main.tile[num1129, num1130].type] ||
                                Main.tileSolidTop[Main.tile[num1129, num1130].type])
                            {
                                for (; num1131 < 150; num1131++)
                                {
                                    if (num1130 + num1131 >= Main.maxTilesY)
                                    {
                                        break;
                                    }

                                    var num1132 = num1130 + num1131;
                                    if (Main.tile[num1129, num1132].nactive() &&
                                        Main.tileSolid[Main.tile[num1129, num1132].type] &&
                                        !Main.tileSolidTop[Main.tile[num1129, num1132].type])
                                    {
                                        num1131--;
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                num1131 = 1;
                            }

                            var num1133 = (float) (num1131 * 16);
                            var num1134 = 170f;
                            if (num1133 < num1134)
                            {
                                var num1135 = -4f;
                                if (0f - num1135 > num1133)
                                {
                                    num1135 = 0f - num1133;
                                }

                                base.velocity.Y = MathHelper.Lerp(base.velocity.Y, num1135, 0.05f);
                            }
                            else
                            {
                                base.velocity.Y *= num1128;
                            }

                            base.velocity.X *= num1128;
                            break;
                        }
                    }

                    switch (num1119)
                    {
                        case 4:
                        {
                            var vector151 = player4.Center + new Vector2(0f, -250f) - center16;
                            if (vector151.Length() < 50f)
                            {
                                this.ai[3] = 439f;
                            }
                            else
                            {
                                vector151.Normalize();
                                base.velocity = Vector2.Lerp(base.velocity, vector151 * 16f, 0.1f);
                            }

                            break;
                        }
                        case 5:
                            base.velocity *= 0.85f;
                            break;
                    }
                }
                else if (this.ai[0] == 1f)
                {
                    dontTakeDamage = false;
                    base.velocity *= 0.96f;
                    var num1142 = 150f;
                    this.ai[1] += 1f;
                    if (this.ai[1] >= num1142)
                    {
                        this.ai[0] = 2f;
                        this.ai[1] = 0f;
                        rotation = 0f;
                        netUpdate = true;
                    }
                    else if (this.ai[1] < 40f)
                    {
                        var unitY2 = Vector2.UnitY;
                        var radians19 = (double) (this.ai[1] / 40f * 6.28318548f);
                        vector16 = default(Vector2);
                        rotation = unitY2.RotatedBy(radians19, vector16).Y * 0.2f;
                    }
                    else if (this.ai[1] < 80f)
                    {
                        var unitY3 = Vector2.UnitY;
                        var radians20 = (double) (this.ai[1] / 20f * 6.28318548f);
                        vector16 = default(Vector2);
                        rotation = unitY3.RotatedBy(radians20, vector16).Y * 0.3f;
                    }
                    else if (this.ai[1] < 120f)
                    {
                        var unitY4 = Vector2.UnitY;
                        var radians21 = (double) (this.ai[1] / 10f * 6.28318548f);
                        vector16 = default(Vector2);
                        rotation = unitY4.RotatedBy(radians21, vector16).Y * 0.4f;
                    }
                    else
                    {
                        rotation = (this.ai[1] - 120f) / 30f * 6.28318548f;
                    }
                }
                else if (this.ai[0] == 2f)
                {
                    var num1143 = 100;
                    var num1144 = 3600f;
                    var num1145 = 120f;
                    var num1146 = 60f;
                    var num1147 = 0;
                    if (this.ai[3] % num1145 >= num1146)
                    {
                        num1147 = 1;
                    }

                    var num1148 = num1147;
                    num1147 = 0;
                    this.ai[3] += 1f;
                    if (this.ai[3] % num1145 >= num1146)
                    {
                        num1147 = 1;
                    }

                    if (num1147 != num1148)
                    {
                        if (num1147 == 1)
                        {
                            this.ai[2] = (float) ((Math.Sign((player4.Center - center16).X) == 1) ? 1 : (-1));
                            if (Main.netMode != 1)
                            {
                                var center17 = base.Center;
                                Projectile.NewProjectile(center17.X, center17.Y, 0f, 0f, 447, num1143, 0f,
                                    Main.myPlayer, (float) (whoAmI + 1), 0f);
                            }

                            Main.PlaySound(SoundID.Item12, base.Center);
                        }

                        netUpdate = true;
                    }

                    if (this.ai[3] >= num1144)
                    {
                        this.ai[0] = 2f;
                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                        netUpdate = true;
                    }
                    else if (num1147 == 0)
                    {
                        var vector152 = player4.Center + new Vector2(this.ai[2] * 350f, -250f) - center16;
                        vector152.Normalize();
                        base.velocity = Vector2.Lerp(base.velocity, vector152 * 16f, 0.1f);
                    }
                    else
                    {
                        var num1149 = (int) base.Center.X / 16;
                        var num1150 = (int) (base.position.Y + (float) base.height) / 16;
                        var num1151 = 0;
                        if (!Main.tile[num1149, num1150].nactive() ||
                            !Main.tileSolid[Main.tile[num1149, num1150].type] ||
                            Main.tileSolidTop[Main.tile[num1149, num1150].type])
                        {
                            for (; num1151 < 150; num1151++)
                            {
                                if (num1150 + num1151 >= Main.maxTilesY)
                                {
                                    break;
                                }

                                var num1152 = num1150 + num1151;
                                if (Main.tile[num1149, num1152].nactive() &&
                                    Main.tileSolid[Main.tile[num1149, num1152].type] &&
                                    !Main.tileSolidTop[Main.tile[num1149, num1152].type])
                                {
                                    num1151--;
                                    break;
                                }
                            }
                        }
                        else
                        {
                            num1151 = 1;
                        }

                        var num1153 = (float) (num1151 * 16);
                        var num1154 = 250f;
                        if (num1153 < num1154)
                        {
                            var num1155 = -4f;
                            if (0f - num1155 > num1153)
                            {
                                num1155 = 0f - num1153;
                            }

                            base.velocity.Y = MathHelper.Lerp(base.velocity.Y, num1155, 0.05f);
                        }
                        else
                        {
                            base.velocity.Y *= 0.95f;
                        }

                        base.velocity.X = 8f * this.ai[2];
                    }

                    rotation = 0f;
                }

                var flag73 = false;
                if (base.position.Y < -100f)
                {
                    flag73 = true;
                }

                if (base.position.X < -100f)
                {
                    flag73 = true;
                }

                if (base.position.Y > (float) (Main.maxTilesY * 16 + 100))
                {
                    flag73 = true;
                }

                if (base.position.X > (float) (Main.maxTilesX * 16 + 100))
                {
                    flag73 = true;
                }

                if (flag73)
                {
                    base.position = Vector2.Clamp(base.position, new Vector2(-100f),
                        new Vector2(100f) + new Vector2((float) Main.maxTilesX, (float) Main.maxTilesY) * 16f);
                    active = false;
                    netUpdate = true;
                }
            }
            else if (aiStyle == 77)
            {
                if (this.ai[0] != -1f && this.ai[0] != 2f && Main.rand.Next(200) == 0)
                {
                    Main.PlaySound(29, (int) base.Center.X, (int) base.Center.Y, Main.rand.Next(93, 100), 1f, 0f);
                }

                if (localAI[3] == 0f)
                {
                    netUpdate = true;
                    localAI[3] = 1f;
                    this.ai[0] = -1f;
                }

                if (this.ai[0] == -2f)
                {
                    dontTakeDamage = true;
                    this.ai[1] += 1f;
                    if (this.ai[1] == 30f)
                    {
                        Main.PlaySound(29, (int) base.Center.X, (int) base.Center.Y, 92, 1f, 0f);
                    }

                    if (this.ai[1] < 60f)
                    {
                        MoonlordDeathDrama.RequestLight(this.ai[1] / 30f, base.Center);
                    }

                    if (this.ai[1] == 60f)
                    {
                        this.ai[1] = 0f;
                        this.ai[0] = 0f;
                        if (Main.netMode != 1 && type == 398)
                        {
                            this.ai[2] = (float) Main.rand.Next(3);
                            this.ai[2] = 0f;
                            netUpdate = true;
                        }
                    }
                }

                if (this.ai[0] == -1f)
                {
                    dontTakeDamage = true;
                    this.ai[1] += 1f;
                    if (this.ai[1] == 30f)
                    {
                        Main.PlaySound(29, (int) base.Center.X, (int) base.Center.Y, 92, 1f, 0f);
                    }

                    if (this.ai[1] < 60f)
                    {
                        MoonlordDeathDrama.RequestLight(this.ai[1] / 30f, base.Center);
                    }

                    if (this.ai[1] == 60f)
                    {
                        this.ai[1] = 0f;
                        this.ai[0] = 0f;
                        if (Main.netMode != 1 && type == 398)
                        {
                            this.ai[2] = (float) Main.rand.Next(3);
                            this.ai[2] = 0f;
                            netUpdate = true;
                            var array6 = new int[3];
                            var num1156 = 0;
                            for (var num1157 = 0; num1157 < 2; num1157++)
                            {
                                var num1158 = NewNPC((int) base.Center.X + num1157 * 800 - 400,
                                    (int) base.Center.Y - 100, 397, whoAmI, 0f, 0f, 0f, 0f, 255);
                                Main.npc[num1158].ai[2] = (float) num1157;
                                Main.npc[num1158].netUpdate = true;
                                array6[num1156++] = num1158;
                            }

                            var num1160 = NewNPC((int) base.Center.X, (int) base.Center.Y - 400, 396, whoAmI, 0f, 0f,
                                0f, 0f, 255);
                            Main.npc[num1160].netUpdate = true;
                            array6[num1156++] = num1160;
                            for (var num1162 = 0; num1162 < 3; num1162++)
                            {
                                Main.npc[array6[num1162]].ai[3] = (float) whoAmI;
                            }

                            for (var num1163 = 0; num1163 < 3; num1163++)
                            {
                                localAI[num1163] = (float) array6[num1163];
                            }
                        }
                    }
                }

                if (this.ai[0] == 0f)
                {
                    dontTakeDamage = true;
                    TargetClosest(false);
                    var value9 = Main.player[target].Center - base.Center + new Vector2(0f, 130f);
                    if (value9.Length() > 20f)
                    {
                        var desiredVelocity = Vector2.Normalize(value9 - base.velocity) * 8f;
                        var velocity2 = base.velocity;
                        SimpleFlyMovement(desiredVelocity, 0.5f);
                        base.velocity = Vector2.Lerp(base.velocity, velocity2, 0.5f);
                    }

                    if (Main.netMode != 1)
                    {
                        var flag74 = false;
                        if (localAI[0] < 0f || localAI[1] < 0f || localAI[2] < 0f)
                        {
                            flag74 = true;
                        }
                        else if (!Main.npc[(int) localAI[0]].active || Main.npc[(int) localAI[0]].type != 397)
                        {
                            flag74 = true;
                        }
                        else if (!Main.npc[(int) localAI[1]].active || Main.npc[(int) localAI[1]].type != 397)
                        {
                            flag74 = true;
                        }
                        else if (!Main.npc[(int) localAI[2]].active || Main.npc[(int) localAI[2]].type != 396)
                        {
                            flag74 = true;
                        }

                        if (flag74)
                        {
                            life = 0;
                            HitEffect(0, 10.0);
                            active = false;
                        }

                        var flag75 = true;
                        if (Main.npc[(int) localAI[0]].ai[0] != -2f)
                        {
                            flag75 = false;
                        }

                        if (Main.npc[(int) localAI[1]].ai[0] != -2f)
                        {
                            flag75 = false;
                        }

                        if (Main.npc[(int) localAI[2]].ai[0] != -2f)
                        {
                            flag75 = false;
                        }

                        if (flag75)
                        {
                            this.ai[0] = 1f;
                            dontTakeDamage = false;
                            netUpdate = true;
                        }
                    }
                }
                else if (this.ai[0] == 1f)
                {
                    dontTakeDamage = false;
                    TargetClosest(false);
                    var value10 = Main.player[target].Center - base.Center + new Vector2(0f, 130f);
                    if (value10.Length() > 20f)
                    {
                        var desiredVelocity2 = Vector2.Normalize(value10 - base.velocity) * 8f;
                        var velocity3 = base.velocity;
                        SimpleFlyMovement(desiredVelocity2, 0.5f);
                        base.velocity = Vector2.Lerp(base.velocity, velocity3, 0.5f);
                    }
                }
                else if (this.ai[0] == 2f)
                {
                    dontTakeDamage = true;
                    base.velocity = Vector2.Lerp(value2: new Vector2((float) base.direction, -0.5f),
                        value1: base.velocity, amount: 0.98f);
                    this.ai[1] += 1f;
                    if (this.ai[1] < 60f)
                    {
                        MoonlordDeathDrama.RequestLight(this.ai[1] / 60f, base.Center);
                    }

                    if (this.ai[1] == 60f)
                    {
                        for (var num1164 = 0; num1164 < 1000; num1164++)
                        {
                            var projectile = Main.projectile[num1164];
                            if (projectile.active && (projectile.type == 456 || projectile.type == 462 ||
                                                      projectile.type == 455 || projectile.type == 452 ||
                                                      projectile.type == 454))
                            {
                                projectile.Kill();
                            }
                        }

                        for (var num1165 = 0; num1165 < 200; num1165++)
                        {
                            var nPC3 = Main.npc[num1165];
                            if (nPC3.active && nPC3.type == 400)
                            {
                                nPC3.HitEffect(0, 9999.0);
                                nPC3.active = false;
                            }
                        }
                    }

                    if (this.ai[1] % 3f == 0f && this.ai[1] < 580f && this.ai[1] > 60f)
                    {
                        var vector153 = Utils.RandomVector2(Main.rand, -1f, 1f);
                        if (vector153 != Vector2.Zero)
                        {
                            vector153.Normalize();
                        }

                        vector153 *= 20f + Main.rand.NextFloat() * 400f;
                        var flag76 = true;
                        var vector154 = base.Center + vector153;
                        var point5 = vector154.ToTileCoordinates();
                        if (!WorldGen.InWorld(point5.X, point5.Y, 0))
                        {
                            flag76 = false;
                        }

                        if (flag76 && WorldGen.SolidTile(point5.X, point5.Y))
                        {
                            flag76 = false;
                        }

                        var num1166 = (float) Main.rand.Next(6, 19);
                        var num1167 = 6.28318548f / num1166;
                        var num1168 = 6.28318548f * Main.rand.NextFloat();
                        var scaleFactor7 = 1f + Main.rand.NextFloat() * 2f;
                        var num1169 = 1f + Main.rand.NextFloat();
                        var fadeIn = 0.4f + Main.rand.NextFloat();
                        var num1170 = Utils.SelectRandom<int>(Main.rand, 31, 229);
                        if (flag76)
                        {
                            MoonlordDeathDrama.AddExplosion(vector154);
                            for (var num1171 = 0f; num1171 < num1166 * 2f; num1171 += 1f)
                            {
                                var dust = Main.dust;
                                var position81 = vector154;
                                newColor = default(Color);
                                var dust2 = dust[Dust.NewDust(position81, 0, 0, 229, 0f, 0f, 0, newColor, 1f)];
                                dust2.noGravity = true;
                                dust2.position = vector154;
                                var dust3 = dust2;
                                var unitY5 = Vector2.UnitY;
                                var radians22 = (double) (num1168 + num1167 * num1171);
                                vector16 = default(Vector2);
                                dust3.velocity = unitY5.RotatedBy(radians22, vector16) * scaleFactor7 *
                                                 (Main.rand.NextFloat() * 1.6f + 1.6f);
                                dust2.fadeIn = fadeIn;
                                dust2.scale = num1169;
                            }
                        }

                        for (var num1172 = 0f; num1172 < this.ai[1] / 60f; num1172 += 1f)
                        {
                            var vector155 = Utils.RandomVector2(Main.rand, -1f, 1f);
                            if (vector155 != Vector2.Zero)
                            {
                                vector155.Normalize();
                            }

                            vector155 *= 20f + Main.rand.NextFloat() * 800f;
                            var vector156 = base.Center + vector155;
                            var point6 = vector156.ToTileCoordinates();
                            var flag77 = true;
                            if (!WorldGen.InWorld(point6.X, point6.Y, 0))
                            {
                                flag77 = false;
                            }

                            if (flag77 && WorldGen.SolidTile(point6.X, point6.Y))
                            {
                                flag77 = false;
                            }

                            if (flag77)
                            {
                                var dust4 = Main.dust;
                                var position82 = vector156;
                                var num1173 = num1170;
                                newColor = default(Color);
                                var dust5 = dust4[Dust.NewDust(position82, 0, 0, num1173, 0f, 0f, 0, newColor, 1f)];
                                dust5.noGravity = true;
                                dust5.position = vector156;
                                dust5.velocity = -Vector2.UnitY * scaleFactor7 * (Main.rand.NextFloat() * 0.9f + 1.6f);
                                dust5.fadeIn = fadeIn;
                                dust5.scale = num1169;
                            }
                        }
                    }

                    if (this.ai[1] % 15f == 0f && this.ai[1] < 480f && this.ai[1] >= 90f && Main.netMode != 1)
                    {
                        var vector157 = Utils.RandomVector2(Main.rand, -1f, 1f);
                        if (vector157 != Vector2.Zero)
                        {
                            vector157.Normalize();
                        }

                        vector157 *= 20f + Main.rand.NextFloat() * 400f;
                        var flag78 = true;
                        var vec3 = base.Center + vector157;
                        var point7 = vec3.ToTileCoordinates();
                        if (!WorldGen.InWorld(point7.X, point7.Y, 0))
                        {
                            flag78 = false;
                        }

                        if (flag78 && WorldGen.SolidTile(point7.X, point7.Y))
                        {
                            flag78 = false;
                        }

                        if (flag78)
                        {
                            var num1174 = (float) (Main.rand.Next(4) < 2).ToDirectionInt() *
                                            (0.3926991f + 0.7853982f * Main.rand.NextFloat());
                            var spinningpoint18 = new Vector2(0f, (0f - Main.rand.NextFloat()) * 0.5f - 0.5f);
                            var radians23 = (double) num1174;
                            vector16 = default(Vector2);
                            var vector158 = spinningpoint18.RotatedBy(radians23, vector16) * 6f;
                            Projectile.NewProjectile(vec3.X, vec3.Y, vector158.X, vector158.Y, 622, 0, 0f,
                                Main.myPlayer, 0f, 0f);
                        }
                    }

                    if (this.ai[1] == 1f)
                    {
                        Main.PlaySound(SoundID.NPCDeath61, base.Center);
                    }

                    if (this.ai[1] >= 480f)
                    {
                        MoonlordDeathDrama.RequestLight((this.ai[1] - 480f) / 120f, base.Center);
                    }

                    if (this.ai[1] >= 600f)
                    {
                        life = 0;
                        HitEffect(0, 1337.0);
                        checkDead();
                        return;
                    }
                }
                else if (this.ai[0] == 3f)
                {
                    dontTakeDamage = true;
                    base.velocity = Vector2.Lerp(value2: new Vector2((float) base.direction, -0.5f),
                        value1: base.velocity, amount: 0.98f);
                    this.ai[1] += 1f;
                    if (this.ai[1] < 60f)
                    {
                        MoonlordDeathDrama.RequestLight(this.ai[1] / 40f, base.Center);
                    }

                    if (this.ai[1] == 40f)
                    {
                        for (var num1175 = 0; num1175 < 1000; num1175++)
                        {
                            var projectile2 = Main.projectile[num1175];
                            if (projectile2.active && (projectile2.type == 456 || projectile2.type == 462 ||
                                                       projectile2.type == 455 || projectile2.type == 452 ||
                                                       projectile2.type == 454))
                            {
                                projectile2.active = false;
                                if (Main.netMode != 1)
                                {
                                    NetMessage.SendData(27, -1, -1, null, num1175, 0f, 0f, 0f, 0, 0, 0);
                                }
                            }
                        }

                        for (var num1176 = 0; num1176 < 200; num1176++)
                        {
                            var nPC4 = Main.npc[num1176];
                            if (nPC4.active && nPC4.type == 400)
                            {
                                nPC4.active = false;
                                if (Main.netMode != 1)
                                {
                                    NetMessage.SendData(23, -1, -1, null, nPC4.whoAmI, 0f, 0f, 0f, 0, 0, 0);
                                }
                            }
                        }

                        for (var num1177 = 0; num1177 < 500; num1177++)
                        {
                            var gore = Main.gore[num1177];
                            if (gore.active && gore.type >= 619 && gore.type <= 622)
                            {
                                gore.active = false;
                            }
                        }
                    }

                    if (this.ai[1] >= 60f)
                    {
                        for (var num1178 = 0; num1178 < 200; num1178++)
                        {
                            var nPC5 = Main.npc[num1178];
                            if (nPC5.active && (nPC5.type == 400 || nPC5.type == 397 || nPC5.type == 396))
                            {
                                nPC5.active = false;
                                if (Main.netMode != 1)
                                {
                                    NetMessage.SendData(23, -1, -1, null, nPC5.whoAmI, 0f, 0f, 0f, 0, 0, 0);
                                }
                            }
                        }

                        active = false;
                        if (Main.netMode != 1)
                        {
                            NetMessage.SendData(23, -1, -1, null, whoAmI, 0f, 0f, 0f, 0, 0, 0);
                        }

                        LunarApocalypseIsUp = false;
                        if (Main.netMode == 2)
                        {
                            NetMessage.SendData(7, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
                        }

                        return;
                    }
                }

                var flag79 = false;
                if (this.ai[0] == -2f || this.ai[0] == -1f || this.ai[0] == -2f || this.ai[0] == 3f)
                {
                    flag79 = true;
                }

                if (Main.player[target].active && !Main.player[target].dead)
                {
                    flag79 = true;
                }

                if (!flag79)
                {
                    for (var num1179 = 0; num1179 < 255; num1179++)
                    {
                        if (Main.player[num1179].active && !Main.player[num1179].dead)
                        {
                            flag79 = true;
                            break;
                        }
                    }
                }

                if (!flag79)
                {
                    this.ai[0] = 3f;
                    this.ai[1] = 0f;
                    netUpdate = true;
                }

                if (this.ai[0] >= 0f && this.ai[0] < 2f && Main.netMode != 1 &&
                    Distance(Main.player[target].Center) > 2400f)
                {
                    this.ai[0] = -2f;
                    netUpdate = true;
                    var vector159 = Main.player[target].Center - Vector2.UnitY * 150f - base.Center;
                    base.position += vector159;
                    if (Main.npc[(int) localAI[0]].active)
                    {
                        Main.npc[(int) localAI[0]].position += vector159;
                        Main.npc[(int) localAI[0]].netUpdate = true;
                    }

                    if (Main.npc[(int) localAI[1]].active)
                    {
                        Main.npc[(int) localAI[1]].position += vector159;
                        Main.npc[(int) localAI[1]].netUpdate = true;
                    }

                    if (Main.npc[(int) localAI[2]].active)
                    {
                        Main.npc[(int) localAI[2]].position += vector159;
                        Main.npc[(int) localAI[2]].netUpdate = true;
                    }

                    for (var num1180 = 0; num1180 < 200; num1180++)
                    {
                        var nPC6 = Main.npc[num1180];
                        if (nPC6.active && nPC6.type == 400)
                        {
                            nPC6.position += vector159;
                            nPC6.netUpdate = true;
                        }
                    }
                }
            }
            else if (aiStyle == 78)
            {
                InitializeMoonLordAttacks();
                if (!Main.npc[(int) this.ai[3]].active || Main.npc[(int) this.ai[3]].type != 398)
                {
                    life = 0;
                    HitEffect(0, 10.0);
                    active = false;
                }

                var flag80 = this.ai[2] == 0f;
                var num1181 = (float) (-flag80.ToDirectionInt());
                spriteDirection = (int) num1181;
                dontTakeDamage = (frameCounter >= 21.0);
                var vector160 = new Vector2(30f, 66f);
                var num1182 = 0f;
                var num1183 = 0f;
                var flag81 = true;
                var num1184 = 0;
                if (this.ai[0] != -2f)
                {
                    var num1185 = this.ai[0];
                    this.ai[1] += 1f;
                    var num1186 = (int) Main.npc[(int) this.ai[3]].ai[2];
                    var num1187 = (!flag80) ? 1 : 0;
                    var num1188 = 0;
                    var num1189 = 0;
                    for (; num1188 < 5; num1188++)
                    {
                        num1183 = (float) MoonLordAttacksArray[num1186, num1187, 1, num1188];
                        if (!(num1183 + (float) num1189 <= this.ai[1]))
                        {
                            break;
                        }

                        num1189 += (int) num1183;
                    }

                    if (num1188 == 5)
                    {
                        num1188 = 0;
                        this.ai[1] = 0f;
                        num1183 = (float) MoonLordAttacksArray[num1186, num1187, 1, num1188];
                        num1189 = 0;
                    }

                    this.ai[0] = (float) MoonLordAttacksArray[num1186, num1187, 0, num1188];
                    num1182 = (float) ((int) this.ai[1] - num1189);
                    if (this.ai[0] != num1185)
                    {
                        netUpdate = true;
                    }
                }

                if (this.ai[0] == -2f)
                {
                    damage = 80;
                    num1184 = 0;
                    dontTakeDamage = true;
                    this.ai[1] += 1f;
                    if (this.ai[1] >= 32f)
                    {
                        this.ai[1] = 0f;
                    }

                    if (this.ai[1] < 0f)
                    {
                        this.ai[1] = 0f;
                    }

                    var center18 = Main.npc[(int) this.ai[3]].Center;
                    var value13 = center18 + new Vector2(350f * num1181, -100f);
                    var vector161 = value13 - base.Center;
                    if (vector161.Length() > 20f)
                    {
                        vector161.Normalize();
                        vector161 *= 6f;
                        var velocity4 = base.velocity;
                        if (vector161 != Vector2.Zero)
                        {
                            SimpleFlyMovement(vector161, 0.3f);
                        }

                        base.velocity = Vector2.Lerp(velocity4, base.velocity, 0.5f);
                    }
                }
                else if (this.ai[0] == 0f)
                {
                    num1184 = 3;
                    localAI[1] -= 0.05f;
                    if (localAI[1] < 0f)
                    {
                        localAI[1] = 0f;
                    }

                    var center19 = Main.npc[(int) this.ai[3]].Center;
                    var value14 = center19 + new Vector2(350f * num1181, -100f);
                    var vector162 = value14 - base.Center;
                    if (vector162.Length() > 20f)
                    {
                        vector162.Normalize();
                        vector162 *= 6f;
                        var velocity5 = base.velocity;
                        if (vector162 != Vector2.Zero)
                        {
                            SimpleFlyMovement(vector162, 0.3f);
                        }

                        base.velocity = Vector2.Lerp(velocity5, base.velocity, 0.5f);
                    }
                }
                else if (this.ai[0] == 1f)
                {
                    num1184 = 0;
                    var num1190 = 7;
                    var num1191 = 4;
                    if (num1182 >= (float) (num1190 * num1191 * 2))
                    {
                        localAI[1] -= 0.07f;
                        if (localAI[1] < 0f)
                        {
                            localAI[1] = 0f;
                        }
                    }
                    else if (num1182 >= (float) (num1190 * num1191))
                    {
                        localAI[1] += 0.05f;
                        if (localAI[1] > 0.75f)
                        {
                            localAI[1] = 0.75f;
                        }

                        var num1192 =
                            6.28318548f * (num1182 % (float) (num1190 * num1191)) / (float) (num1190 * num1191) -
                            1.57079637f;
                        localAI[0] = new Vector2((float) Math.Cos((double) num1192) * vector160.X,
                            (float) Math.Sin((double) num1192) * vector160.Y).ToRotation();
                        if (num1182 % (float) num1191 == 0f)
                        {
                            var value15 = new Vector2(1f * (0f - num1181), 3f);
                            var vector163 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(),
                                vector160 * localAI[1]);
                            var vector164 = base.Center + Vector2.Normalize(vector163) * vector160.Length() * 0.4f +
                                                value15;
                            var vector165 = Vector2.Normalize(vector163) * 8f;
                            var ai = (6.28318548f * (float) Main.rand.NextDouble() - 3.14159274f) / 30f +
                                       0.0174532924f * num1181;
                            Projectile.NewProjectile(vector164.X, vector164.Y, vector165.X, vector165.Y, 452, 30, 0f,
                                Main.myPlayer, 0f, ai);
                        }
                    }
                    else
                    {
                        localAI[1] += 0.02f;
                        if (localAI[1] > 0.75f)
                        {
                            localAI[1] = 0.75f;
                        }

                        var num1193 =
                            6.28318548f * (num1182 % (float) (num1190 * num1191)) / (float) (num1190 * num1191) -
                            1.57079637f;
                        localAI[0] = new Vector2((float) Math.Cos((double) num1193) * vector160.X,
                            (float) Math.Sin((double) num1193) * vector160.Y).ToRotation();
                    }
                }
                else if (this.ai[0] == 2f)
                {
                    localAI[1] -= 0.05f;
                    if (localAI[1] < 0f)
                    {
                        localAI[1] = 0f;
                    }

                    var center20 = Main.npc[(int) this.ai[3]].Center;
                    var value16 = new Vector2(220f * num1181, -60f) + center20;
                    value16 += new Vector2(num1181 * 100f, -50f);
                    var value17 = new Vector2(400f * num1181, -60f);
                    if (num1182 < 30f)
                    {
                        var vector166 = value16 - base.Center;
                        if (vector166 != Vector2.Zero)
                        {
                            var vector167 = vector166;
                            vector167.Normalize();
                            base.velocity = Vector2.SmoothStep(base.velocity,
                                vector167 * Math.Min(8f, vector166.Length()), 0.2f);
                        }
                    }
                    else if (num1182 < 210f)
                    {
                        num1184 = 1;
                        var num1194 = (int) num1182 - 30;
                        if (num1194 % 30 == 0 && Main.netMode != 1)
                        {
                            var vector168 = new Vector2(5f * num1181, -8f);
                            var num1195 = num1194 / 30;
                            vector168.X += ((float) num1195 - 3.5f) * num1181 * 3f;
                            vector168.Y += ((float) num1195 - 4.5f) * 1f;
                            vector168 *= 1.2f;
                            Projectile.NewProjectile(base.Center.X, base.Center.Y, vector168.X, vector168.Y, 454, 50,
                                1f, Main.myPlayer, 0f, (float) whoAmI);
                        }

                        var vector169 = Vector2.SmoothStep(value16, value16 + value17, (num1182 - 30f) / 180f) -
                                            base.Center;
                        if (vector169 != Vector2.Zero)
                        {
                            var vector170 = vector169;
                            vector170.Normalize();
                            base.velocity = Vector2.Lerp(base.velocity, vector170 * Math.Min(20f, vector169.Length()),
                                0.5f);
                        }
                    }
                    else if (num1182 < 282f)
                    {
                        num1184 = 0;
                        base.velocity *= 0.9f;
                    }
                    else if (num1182 < 287f)
                    {
                        num1184 = 1;
                        base.velocity *= 0.9f;
                    }
                    else if (num1182 < 292f)
                    {
                        num1184 = 2;
                        base.velocity *= 0.9f;
                    }
                    else if (num1182 < 300f)
                    {
                        num1184 = 3;
                        if (num1182 == 292f && Main.netMode != 1)
                        {
                            int num1196 = Player.FindClosest(base.position, base.width, base.height);
                            var vector171 =
                                Vector2.Normalize(Main.player[num1196].Center - (base.Center + Vector2.UnitY * -350f));
                            if (float.IsNaN(vector171.X) || float.IsNaN(vector171.Y))
                            {
                                vector171 = Vector2.UnitY;
                            }

                            vector171 *= 12f;
                            for (var num1197 = 0; num1197 < 1000; num1197++)
                            {
                                var projectile3 = Main.projectile[num1197];
                                if (projectile3.active && projectile3.type == 454 &&
                                    projectile3.ai[1] == (float) whoAmI && projectile3.ai[0] != -1f)
                                {
                                    projectile3.ai[0] = -1f;
                                    projectile3.velocity = vector171;
                                    projectile3.netUpdate = true;
                                }
                            }
                        }

                        var vector172 =
                            Vector2.SmoothStep(value16, value16 + value17, 1f - (num1182 - 270f) / 30f) - base.Center;
                        if (vector172 != Vector2.Zero)
                        {
                            var vector173 = vector172;
                            vector173.Normalize();
                            base.velocity = Vector2.Lerp(base.velocity, vector173 * Math.Min(14f, vector172.Length()),
                                0.1f);
                        }
                    }
                    else
                    {
                        num1184 = 3;
                        var vector174 = value16 - base.Center;
                        if (vector174 != Vector2.Zero)
                        {
                            var vector175 = vector174;
                            vector175.Normalize();
                            base.velocity = Vector2.SmoothStep(base.velocity,
                                vector175 * Math.Min(8f, vector174.Length()), 0.2f);
                        }
                    }
                }
                else if (this.ai[0] == 3f)
                {
                    if (num1182 == 0f)
                    {
                        TargetClosest(false);
                        netUpdate = true;
                    }

                    var v2 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
                    localAI[0] = localAI[0].AngleLerp(v2.ToRotation(), 0.5f);
                    localAI[1] += 0.05f;
                    if (localAI[1] > 1f)
                    {
                        localAI[1] = 1f;
                    }

                    if (num1182 == num1183 - 35f)
                    {
                        Main.PlaySound(4, (int) base.position.X, (int) base.position.Y, 6, 1f, 0f);
                    }

                    if ((num1182 == num1183 - 14f || num1182 == num1183 - 7f || num1182 == num1183) &&
                        Main.netMode != 1)
                    {
                        var vector176 =
                            Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), vector160 * localAI[1]);
                        var vector177 = Vector2.Normalize(v2) * 8f;
                        Projectile.NewProjectile(base.Center.X + vector176.X, base.Center.Y + vector176.Y, vector177.X,
                            vector177.Y, 462, 30, 0f, Main.myPlayer, 0f, 0f);
                    }
                }

                if (flag81)
                {
                    var center21 = Main.npc[(int) this.ai[3]].Center;
                    var value18 = new Vector2(220f * num1181, -60f) + center21;
                    var vector178 = value18 + new Vector2(num1181 * 110f, -150f);
                    var max = vector178 + new Vector2(num1181 * 370f, 150f);
                    if (vector178.X > max.X)
                    {
                        Utils.Swap(ref vector178.X, ref max.X);
                    }

                    if (vector178.Y > max.Y)
                    {
                        Utils.Swap(ref vector178.Y, ref max.Y);
                    }

                    var value19 = Vector2.Clamp(base.Center + base.velocity, vector178, max);
                    if (value19 != base.Center + base.velocity)
                    {
                        base.Center = value19 - base.velocity;
                    }
                }

                var num1198 = num1184 * 7;
                if ((double) num1198 > frameCounter)
                {
                    frameCounter += 1.0;
                }

                if ((double) num1198 < frameCounter)
                {
                    frameCounter -= 1.0;
                }

                if (frameCounter < 0.0)
                {
                    frameCounter = 0.0;
                }

                if (frameCounter > 21.0)
                {
                    frameCounter = 21.0;
                }

                var num1199 = 0;
                if (flag80)
                {
                    num1199 = 0;
                }

                switch (num1199)
                {
                    case 1:
                        if (this.ai[0] == 0f)
                        {
                            if ((this.ai[1] += 1f) >= 20f)
                            {
                                this.ai[1] = 0f;
                                this.ai[0] = 1f;
                                netUpdate = true;
                            }

                            base.velocity = Vector2.UnitX * 4f;
                        }
                        else if (this.ai[0] == 1f)
                        {
                            if ((this.ai[1] += 1f) >= 20f)
                            {
                                this.ai[1] = 0f;
                                this.ai[0] = 2f;
                                netUpdate = true;
                            }

                            base.velocity = Vector2.UnitX * -4f;
                        }
                        else if (this.ai[0] == 2f || this.ai[0] == 4f)
                        {
                            if ((this.ai[1] += 1f) >= 20f)
                            {
                                this.ai[1] = 0f;
                                this.ai[0] += 1f;
                                netUpdate = true;
                            }

                            base.velocity = Vector2.UnitY * -4f * (float) (flag80 ? 1 : (-1));
                        }
                        else if (this.ai[0] == 3f || this.ai[0] == 5f)
                        {
                            if ((this.ai[1] += 1f) >= 20f)
                            {
                                this.ai[1] = 0f;
                                this.ai[0] += 1f;
                                if (this.ai[0] == 6f)
                                {
                                    this.ai[0] = 0f;
                                }

                                netUpdate = true;
                            }

                            base.velocity = Vector2.UnitY * 4f * (float) (flag80 ? 1 : (-1));
                        }

                        break;
                    case 2:
                    {
                        new Vector2(30f, 66f);
                        TargetClosest(false);
                        var v3 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) -
                                     base.Center;
                        var num1200 = v3.Length() / 200f;
                        if (num1200 > 1f)
                        {
                            num1200 = 1f;
                        }

                        num1200 = 1f - num1200;
                        num1200 *= 2f;
                        if (num1200 > 1f)
                        {
                            num1200 = 1f;
                        }

                        localAI[0] = v3.ToRotation();
                        localAI[1] = num1200;
                        localAI[1] = 1f;
                        break;
                    }
                    case 3:
                    {
                        var num1205 = 7;
                        var num1206 = 4;
                        this.ai[1] += 1f;
                        if (this.ai[1] >= (float) (num1205 * num1206 * 10))
                        {
                            this.ai[1] = 0f;
                        }
                        else if (this.ai[1] >= (float) (num1205 * num1206))
                        {
                            localAI[1] -= 0.07f;
                            if (localAI[1] < 0f)
                            {
                                localAI[1] = 0f;
                            }
                        }
                        else
                        {
                            localAI[1] += 0.05f;
                            if (localAI[1] > 0.75f)
                            {
                                localAI[1] = 0.75f;
                            }

                            var num1207 =
                                6.28318548f * (this.ai[1] % (float) (num1205 * num1206)) / (float) (num1205 * num1206) -
                                1.57079637f;
                            localAI[0] = new Vector2((float) Math.Cos((double) num1207) * vector160.X,
                                (float) Math.Sin((double) num1207) * vector160.Y).ToRotation();
                            if (this.ai[1] % (float) num1206 == 0f)
                            {
                                var value22 = new Vector2(1f * (0f - num1181), 3f);
                                var vector187 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(),
                                    vector160 * localAI[1]);
                                var vector188 =
                                    base.Center + Vector2.Normalize(vector187) * vector160.Length() * 0.4f + value22;
                                var vector189 = Vector2.Normalize(vector187) * 8f;
                                var ai2 = (6.28318548f * (float) Main.rand.NextDouble() - 3.14159274f) / 30f +
                                            0.0174532924f * num1181;
                                Projectile.NewProjectile(vector188.X, vector188.Y, vector189.X, vector189.Y, 452, 5, 0f,
                                    Main.myPlayer, 0f, ai2);
                            }
                        }

                        break;
                    }
                    case 4:
                    {
                        var center22 = Main.npc[(int) this.ai[3]].Center;
                        var value20 = new Vector2(220f * num1181, -60f) + center22;
                        value20 += new Vector2(num1181 * 100f, -50f);
                        var value21 = new Vector2(400f * num1181, -60f);
                        this.ai[1] += 1f;
                        if (this.ai[1] < 30f)
                        {
                            var vector179 = value20 - base.Center;
                            if (vector179 != Vector2.Zero)
                            {
                                var vector180 = vector179;
                                vector180.Normalize();
                                base.velocity = Vector2.SmoothStep(base.velocity,
                                    vector180 * Math.Min(8f, vector179.Length()), 0.2f);
                            }
                        }
                        else if (this.ai[1] < 210f)
                        {
                            var num1201 = (int) this.ai[1] - 30;
                            if (num1201 % 30 == 0 && Main.netMode != 1)
                            {
                                var vector181 = new Vector2(5f * num1181, -8f);
                                var num1202 = num1201 / 30;
                                vector181.X += ((float) num1202 - 3.5f) * num1181 * 3f;
                                vector181.Y += ((float) num1202 - 4.5f) * 1f;
                                vector181 *= 1.2f;
                                Projectile.NewProjectile(base.Center.X, base.Center.Y, vector181.X, vector181.Y, 454, 1,
                                    1f, Main.myPlayer, 0f, (float) whoAmI);
                            }

                            var vector182 =
                                Vector2.SmoothStep(value20, value20 + value21, (this.ai[1] - 30f) / 180f) - base.Center;
                            if (vector182 != Vector2.Zero)
                            {
                                var vector183 = vector182;
                                vector183.Normalize();
                                base.velocity = Vector2.Lerp(base.velocity,
                                    vector183 * Math.Min(4f, vector182.Length()), 0.1f);
                            }
                        }
                        else if (this.ai[1] < 270f)
                        {
                            base.velocity *= 0.9f;
                        }
                        else if (this.ai[1] < 300f)
                        {
                            if (this.ai[1] == 270f && Main.netMode != 1)
                            {
                                int num1203 = Player.FindClosest(base.position, base.width, base.height);
                                var vector184 =
                                    Vector2.Normalize(Main.player[num1203].Center -
                                                      (base.Center + Vector2.UnitY * -350f));
                                if (float.IsNaN(vector184.X) || float.IsNaN(vector184.Y))
                                {
                                    vector184 = Vector2.UnitY;
                                }

                                vector184 *= 12f;
                                for (var num1204 = 0; num1204 < 1000; num1204++)
                                {
                                    var projectile4 = Main.projectile[num1204];
                                    if (projectile4.active && projectile4.type == 454 &&
                                        projectile4.ai[1] == (float) whoAmI && projectile4.ai[0] != -1f)
                                    {
                                        projectile4.ai[0] = -1f;
                                        projectile4.velocity = vector184;
                                        projectile4.netUpdate = true;
                                    }
                                }
                            }

                            var vector185 =
                                Vector2.SmoothStep(value20, value20 + value21, 1f - (this.ai[1] - 270f) / 30f) -
                                base.Center;
                            if (vector185 != Vector2.Zero)
                            {
                                var vector186 = vector185;
                                vector186.Normalize();
                                base.velocity = Vector2.Lerp(base.velocity,
                                    vector186 * Math.Min(14f, vector185.Length()), 0.1f);
                            }
                        }
                        else
                        {
                            this.ai[1] = 0f;
                        }

                        break;
                    }
                    case 5:
                        dontTakeDamage = true;
                        this.ai[1] += 1f;
                        if (this.ai[1] >= 40f)
                        {
                            this.ai[1] = 0f;
                        }

                        break;
                }
            }
            else if (aiStyle == 79)
            {
                if (!Main.npc[(int) this.ai[3]].active || Main.npc[(int) this.ai[3]].type != 398)
                {
                    life = 0;
                    HitEffect(0, 10.0);
                    active = false;
                }

                dontTakeDamage = (localAI[3] >= 15f);
                base.velocity = Vector2.Zero;
                base.Center = Main.npc[(int) this.ai[3]].Center + new Vector2(0f, -400f);
                var value23 = new Vector2(27f, 59f);
                var num1208 = 0f;
                var num1209 = 0f;
                var num1210 = 0;
                var num1211 = 0;
                if (this.ai[0] >= 0f)
                {
                    var num1212 = this.ai[0];
                    this.ai[1] += 1f;
                    var num1213 = (int) Main.npc[(int) this.ai[3]].ai[2];
                    var num1214 = 2;
                    var num1215 = 0;
                    var num1216 = 0;
                    for (; num1215 < 5; num1215++)
                    {
                        num1209 = (float) MoonLordAttacksArray[num1213, num1214, 1, num1215];
                        if (!(num1209 + (float) num1216 <= this.ai[1]))
                        {
                            break;
                        }

                        num1216 += (int) num1209;
                    }

                    if (num1215 == 5)
                    {
                        num1215 = 0;
                        this.ai[1] = 0f;
                        num1209 = (float) MoonLordAttacksArray[num1213, num1214, 1, num1215];
                        num1216 = 0;
                    }

                    this.ai[0] = (float) MoonLordAttacksArray[num1213, num1214, 0, num1215];
                    num1208 = (float) ((int) this.ai[1] - num1216);
                    if (this.ai[0] != num1212)
                    {
                        netUpdate = true;
                    }
                }

                if (this.ai[0] == -3f)
                {
                    damage = 0;
                    dontTakeDamage = true;
                    rotation = MathHelper.Lerp(rotation, 0.2617994f, 0.07f);
                    this.ai[1] += 1f;
                    if (this.ai[1] >= 32f)
                    {
                        this.ai[1] = 0f;
                    }

                    if (this.ai[1] < 0f)
                    {
                        this.ai[1] = 0f;
                    }

                    if (localAI[2] < 14f)
                    {
                        localAI[2] += 1f;
                    }
                }
                else if (this.ai[0] == -2f)
                {
                    if (Main.npc[(int) this.ai[3]].ai[0] == 2f)
                    {
                        this.ai[0] = -3f;
                        return;
                    }

                    damage = 80;
                    dontTakeDamage = true;
                    this.ai[1] += 1f;
                    if (this.ai[1] >= 32f)
                    {
                        this.ai[1] = 0f;
                    }

                    if (this.ai[1] < 0f)
                    {
                        this.ai[1] = 0f;
                    }

                    this.ai[2] += 1f;
                    if (this.ai[2] >= 555f)
                    {
                        this.ai[2] = 0f;
                    }

                    if (this.ai[2] >= 120f)
                    {
                        num1208 = this.ai[2] - 120f;
                        num1209 = 555f;
                        num1210 = 2;
                        var value24 = new Vector2(0f, 216f);
                        if (num1208 == 0f && Main.netMode != 1)
                        {
                            var value25 = base.Center + value24;
                            for (var num1217 = 0; num1217 < 255; num1217++)
                            {
                                var player5 = Main.player[num1217];
                                if (player5.active && !player5.dead &&
                                    Vector2.Distance(player5.Center, value25) <= 3000f)
                                {
                                    var value26 = Main.player[target].Center - value25;
                                    if (value26 != Vector2.Zero)
                                    {
                                        value26.Normalize();
                                    }

                                    Projectile.NewProjectile(value25.X, value25.Y, value26.X, value26.Y, 456, 0, 0f,
                                        Main.myPlayer, (float) (whoAmI + 1), (float) num1217);
                                }
                            }
                        }

                        if ((num1208 == 120f || num1208 == 180f || num1208 == 240f) && Main.netMode != 1)
                        {
                            for (var num1218 = 0; num1218 < 1000; num1218++)
                            {
                                var projectile5 = Main.projectile[num1218];
                                if (projectile5.active && projectile5.type == 456 &&
                                    Main.player[(int) projectile5.ai[1]].FindBuffIndex(145) != -1)
                                {
                                    var center23 = Main.player[target].Center;
                                    var num1219 = NewNPC((int) center23.X, (int) center23.Y, 401, 0, 0f, 0f, 0f, 0f,
                                        255);
                                    Main.npc[num1219].netUpdate = true;
                                    Main.npc[num1219].ai[0] = (float) (whoAmI + 1);
                                    Main.npc[num1219].ai[1] = (float) num1218;
                                }
                            }
                        }
                    }
                }
                else if (this.ai[0] == 0f)
                {
                    num1211 = 3;
                    TargetClosest(false);
                    var v4 = Main.player[target].Center - base.Center - new Vector2(0f, -22f);
                    var num1220 = v4.Length() / 500f;
                    if (num1220 > 1f)
                    {
                        num1220 = 1f;
                    }

                    num1220 = 1f - num1220;
                    num1220 *= 2f;
                    if (num1220 > 1f)
                    {
                        num1220 = 1f;
                    }

                    localAI[0] = v4.ToRotation();
                    localAI[1] = num1220;
                    localAI[2] = MathHelper.Lerp(localAI[2], 1f, 0.2f);
                }

                if (this.ai[0] == 1f)
                {
                    if (num1208 < 180f)
                    {
                        localAI[1] -= 0.05f;
                        if (localAI[1] < 0f)
                        {
                            localAI[1] = 0f;
                        }

                        if (num1208 >= 60f)
                        {
                            var center24 = base.Center;
                            var num1221 = 0;
                            if (num1208 >= 120f)
                            {
                                num1221 = 1;
                            }

                            for (var num1222 = 0; num1222 < 1 + num1221; num1222++)
                            {
                                var num1223 = 229;
                                var num1224 = 0.8f;
                                if (num1222 % 2 == 1)
                                {
                                    num1223 = 229;
                                    num1224 = 1.65f;
                                }

                                var vector190 =
                                    center24 + ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() *
                                    value23 / 2f;
                                var position83 = vector190 - Vector2.One * 8f;
                                var num1225 = num1223;
                                var speedX28 = base.velocity.X / 2f;
                                var speedY27 = base.velocity.Y / 2f;
                                newColor = default(Color);
                                var num1226 = Dust.NewDust(position83, 16, 16, num1225, speedX28, speedY27, 0, newColor,
                                    1f);
                                Main.dust[num1226].velocity =
                                    Vector2.Normalize(center24 - vector190) * 3.5f * (10f - (float) num1221 * 2f) / 10f;
                                Main.dust[num1226].noGravity = true;
                                Main.dust[num1226].scale = num1224;
                                Main.dust[num1226].customData = this;
                            }
                        }
                    }
                    else if (num1208 < num1209 - 15f)
                    {
                        if (num1208 == 180f && Main.netMode != 1)
                        {
                            TargetClosest(false);
                            var vector191 = Main.player[target].Center - base.Center;
                            vector191.Normalize();
                            var num1227 = -1f;
                            if (vector191.X < 0f)
                            {
                                num1227 = 1f;
                            }

                            var spinningpoint19 = vector191;
                            var radians24 = (double) ((0f - num1227) * 6.28318548f / 6f);
                            vector16 = default(Vector2);
                            vector191 = spinningpoint19.RotatedBy(radians24, vector16);
                            Projectile.NewProjectile(base.Center.X, base.Center.Y, vector191.X, vector191.Y, 455, 75,
                                0f, Main.myPlayer, num1227 * 6.28318548f / 540f, (float) whoAmI);
                            this.ai[2] = (vector191.ToRotation() + 9.424778f) * num1227;
                            netUpdate = true;
                        }

                        localAI[1] += 0.05f;
                        if (localAI[1] > 1f)
                        {
                            localAI[1] = 1f;
                        }

                        var num1228 = (float) (this.ai[2] >= 0f).ToDirectionInt();
                        var num1229 = this.ai[2];
                        if (num1229 < 0f)
                        {
                            num1229 *= -1f;
                        }

                        num1229 += -9.424778f;
                        num1229 += num1228 * 6.28318548f / 540f;
                        localAI[0] = num1229;
                        this.ai[2] = (num1229 + 9.424778f) * num1228;
                    }
                    else
                    {
                        localAI[1] -= 0.07f;
                        if (localAI[1] < 0f)
                        {
                            localAI[1] = 0f;
                        }

                        num1211 = 3;
                    }
                }
                else if (this.ai[0] == 2f)
                {
                    num1210 = 2;
                    num1211 = 3;
                    var value27 = new Vector2(0f, 216f);
                    if (num1208 == 0f && Main.netMode != 1)
                    {
                        var value28 = base.Center + value27;
                        for (var num1230 = 0; num1230 < 255; num1230++)
                        {
                            var player6 = Main.player[num1230];
                            if (player6.active && !player6.dead && Vector2.Distance(player6.Center, value28) <= 3000f)
                            {
                                var value29 = Main.player[target].Center - value28;
                                if (value29 != Vector2.Zero)
                                {
                                    value29.Normalize();
                                }

                                Projectile.NewProjectile(value28.X, value28.Y, value29.X, value29.Y, 456, 0, 0f,
                                    Main.myPlayer, (float) (whoAmI + 1), (float) num1230);
                            }
                        }
                    }

                    if ((num1208 == 120f || num1208 == 180f || num1208 == 240f) && Main.netMode != 1)
                    {
                        for (var num1231 = 0; num1231 < 1000; num1231++)
                        {
                            var projectile6 = Main.projectile[num1231];
                            if (projectile6.active && projectile6.type == 456 &&
                                Main.player[(int) projectile6.ai[1]].FindBuffIndex(145) != -1)
                            {
                                var center25 = Main.player[target].Center;
                                var num1232 = NewNPC((int) center25.X, (int) center25.Y, 401, 0, 0f, 0f, 0f, 0f, 255);
                                Main.npc[num1232].netUpdate = true;
                                Main.npc[num1232].ai[0] = (float) (whoAmI + 1);
                                Main.npc[num1232].ai[1] = (float) num1231;
                            }
                        }
                    }
                }
                else if (this.ai[0] == 3f)
                {
                    if (num1208 == 0f)
                    {
                        TargetClosest(false);
                        netUpdate = true;
                    }

                    var v5 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
                    localAI[0] = localAI[0].AngleLerp(v5.ToRotation(), 0.5f);
                    localAI[1] += 0.05f;
                    if (localAI[1] > 1f)
                    {
                        localAI[1] = 1f;
                    }

                    if (num1208 == num1209 - 35f)
                    {
                        Main.PlaySound(4, (int) base.position.X, (int) base.position.Y, 6, 1f, 0f);
                    }

                    if ((num1208 == num1209 - 14f || num1208 == num1209 - 7f || num1208 == num1209) &&
                        Main.netMode != 1)
                    {
                        var vector192 =
                            Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), value23 * localAI[1]);
                        var vector193 = Vector2.Normalize(v5) * 8f;
                        Projectile.NewProjectile(base.Center.X + vector192.X, base.Center.Y + vector192.Y, vector193.X,
                            vector193.Y, 462, 30, 0f, Main.myPlayer, 0f, 0f);
                    }
                }

                var num1233 = num1210 * 7;
                if ((float) num1233 > localAI[2])
                {
                    localAI[2] += 1f;
                }

                if ((float) num1233 < localAI[2])
                {
                    localAI[2] -= 1f;
                }

                if (localAI[2] < 0f)
                {
                    localAI[2] = 0f;
                }

                if (localAI[2] > 14f)
                {
                    localAI[2] = 14f;
                }

                var num1234 = num1211 * 5;
                if ((float) num1234 > localAI[3])
                {
                    localAI[3] += 1f;
                }

                if ((float) num1234 < localAI[3])
                {
                    localAI[3] -= 1f;
                }

                if (localAI[3] < 0f)
                {
                    localAI[2] = 0f;
                }

                if (localAI[3] > 15f)
                {
                    localAI[2] = 15f;
                }

                var num1235 = 0;
                if (num1235 == 1)
                {
                    new Vector2(27f, 59f);
                    TargetClosest(false);
                    var v6 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) -
                                 base.Center;
                    var num1236 = v6.Length() / 200f;
                    if (num1236 > 1f)
                    {
                        num1236 = 1f;
                    }

                    num1236 = 1f - num1236;
                    num1236 *= 2f;
                    if (num1236 > 1f)
                    {
                        num1236 = 1f;
                    }

                    localAI[0] = v6.ToRotation();
                    localAI[1] = num1236;
                    localAI[1] = 1f;
                }

                if (num1235 == 2)
                {
                    var vector194 = new Vector2(27f, 59f);
                    var num1237 = 6.28318548f * ((float) Main.time % 600f) / 600f;
                    localAI[0] = new Vector2((float) Math.Cos((double) num1237) * vector194.X,
                        (float) Math.Sin((double) num1237) * vector194.Y).ToRotation();
                    localAI[1] = 0.75f;
                    if (this.ai[1] == 0f)
                    {
                        var vector195 = num1237.ToRotationVector2();
                        vector195 = Vector2.One;
                        Projectile.NewProjectile(base.Center.X, base.Center.Y, vector195.X, vector195.Y, 455, 1, 0f,
                            Main.myPlayer, 0.0104719754f, (float) whoAmI);
                    }

                    this.ai[1] += 1f;
                    if (this.ai[1] >= 600f)
                    {
                        this.ai[1] = 0f;
                    }
                }

                if (num1235 == 3)
                {
                    var vector196 = new Vector2(0f, 216f);
                    if (this.ai[1] == 0f)
                    {
                        TargetClosest(false);
                        var vector197 = Main.player[target].Center - base.Center;
                        vector197.Normalize();
                        Projectile.NewProjectile(base.Center.X + vector196.X, base.Center.Y + vector196.Y, vector197.X,
                            vector197.Y, 456, 0, 0f, Main.myPlayer, (float) (whoAmI + 1), (float) target);
                    }

                    this.ai[1] += 1f;
                    if (this.ai[1] >= 600f)
                    {
                        this.ai[1] = 0f;
                    }
                }

                if (num1235 == 4)
                {
                    new Vector2(27f, 59f);
                    TargetClosest(false);
                    var v7 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
                    localAI[0] = localAI[0].AngleLerp(v7.ToRotation(), 0.5f);
                    localAI[1] = 1f;
                    this.ai[1] += 1f;
                    if (this.ai[1] == 55f)
                    {
                        Main.PlaySound(4, (int) base.position.X, (int) base.position.Y, 6, 1f, 0f);
                    }

                    if (this.ai[1] == 76f || this.ai[1] == 83f || this.ai[1] == 90f)
                    {
                        value23 = new Vector2(27f, 59f);
                        var vector198 =
                            Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), value23 * localAI[1]);
                        var vector199 = Vector2.Normalize(v7) * 8f;
                        Projectile.NewProjectile(base.Center.X + vector198.X, base.Center.Y + vector198.Y, vector199.X,
                            vector199.Y, 462, 5, 0f, Main.myPlayer, 0f, 0f);
                    }

                    if (this.ai[1] >= 90f)
                    {
                        this.ai[1] = 0f;
                    }
                }
            }
            else if (aiStyle == 80)
            {
                if (this.ai[0] == 0f)
                {
                    if (base.direction == 0)
                    {
                        TargetClosest(true);
                        netUpdate = true;
                    }

                    if (collideX)
                    {
                        base.direction = -base.direction;
                        netUpdate = true;
                    }

                    base.velocity.X = 3f * (float) base.direction;
                    var center26 = base.Center;
                    var point8 = center26.ToTileCoordinates();
                    var num1238 = 30;
                    if (WorldGen.InWorld(point8.X, point8.Y, 30))
                    {
                        for (var num1239 = 0; num1239 < 30; num1239++)
                        {
                            if (WorldGen.SolidTile(point8.X, point8.Y + num1239))
                            {
                                num1238 = num1239;
                                break;
                            }
                        }
                    }

                    if (num1238 < 15)
                    {
                        base.velocity.Y = Math.Max(base.velocity.Y - 0.05f, -3.5f);
                    }
                    else if (num1238 < 20)
                    {
                        base.velocity.Y *= 0.95f;
                    }
                    else
                    {
                        base.velocity.Y = Math.Min(base.velocity.Y + 0.05f, 1.5f);
                    }

                    float distanceToPlayer;
                    var num1240 = FindClosestPlayer(out distanceToPlayer);
                    if (num1240 == -1 || Main.player[num1240].dead)
                    {
                        return;
                    }

                    if (distanceToPlayer < 352f && Main.player[num1240].Center.Y > base.Center.Y)
                    {
                        this.ai[0] = 1f;
                        this.ai[1] = 0f;
                        netUpdate = true;
                    }
                }
                else if (this.ai[0] == 1f)
                {
                    this.ai[1] += 1f;
                    base.velocity *= 0.95f;
                    if (this.ai[1] >= 60f)
                    {
                        this.ai[1] = 0f;
                        this.ai[0] = 2f;
                        var num1241 = FindClosestPlayer();
                        if (num1241 != -1)
                        {
                            this.ai[3] = ((Main.player[num1241].Center.X > base.Center.X) ? (-1f) : 1f);
                        }
                        else
                        {
                            this.ai[3] = 1f;
                        }

                        netUpdate = true;
                    }
                }
                else if (this.ai[0] == 2f)
                {
                    noTileCollide = true;
                    this.ai[1] += 1f;
                    base.velocity.Y = Math.Max(base.velocity.Y - 0.1f, -10f);
                    base.velocity.X = Math.Min(base.velocity.X + this.ai[3] * 0.05f, 4f);
                    if ((base.position.Y < (float) (-base.height) || this.ai[1] >= 180f) && Main.netMode != 1)
                    {
                        Main.StartInvasion(4);
                        active = false;
                        netUpdate = true;
                    }
                }

                newColor = Color.SkyBlue;
                var vector200 = newColor.ToVector3();
                if (this.ai[0] == 2f)
                {
                    newColor = Color.Red;
                    vector200 = newColor.ToVector3();
                }

                vector200 *= 0.65f;
                Lighting.AddLight(base.Center, vector200);
            }
            else if (aiStyle == 81)
            {
                if (Main.rand.Next(420) == 0)
                {
                    Main.PlaySound(29, (int) base.Center.X, (int) base.Center.Y, Main.rand.Next(100, 101), 1f, 0f);
                }

                var value30 = new Vector2(30f);
                if (!Main.npc[(int) this.ai[3]].active || Main.npc[(int) this.ai[3]].type != 398)
                {
                    life = 0;
                    HitEffect(0, 10.0);
                    active = false;
                }

                var num1242 = 0f;
                var num1243 = 0f;
                var num1244 = this.ai[0];
                this.ai[1] += 1f;
                var num1245 = 0;
                var num1246 = 0;
                for (; num1245 < 10; num1245++)
                {
                    num1243 = (float) MoonLordAttacksArray2[1, num1245];
                    if (!(num1243 + (float) num1246 <= this.ai[1]))
                    {
                        break;
                    }

                    num1246 += (int) num1243;
                }

                if (num1245 == 10)
                {
                    num1245 = 0;
                    this.ai[1] = 0f;
                    num1243 = (float) MoonLordAttacksArray2[1, num1245];
                    num1246 = 0;
                }

                this.ai[0] = (float) MoonLordAttacksArray2[0, num1245];
                num1242 = (float) ((int) this.ai[1] - num1246);
                if (this.ai[0] != num1244)
                {
                    netUpdate = true;
                }

                if (this.ai[0] == -1f)
                {
                    this.ai[1] += 1f;
                    if (this.ai[1] > 180f)
                    {
                        this.ai[1] = 0f;
                    }

                    var num1247 = 1f;
                    if (this.ai[1] < 60f)
                    {
                        num1247 = 0.75f;
                        localAI[0] = 0f;
                        localAI[1] = (float) Math.Sin((double) (this.ai[1] * 6.28318548f / 15f)) * 0.35f;
                        if (localAI[1] < 0f)
                        {
                            localAI[0] = 3.14159274f;
                        }
                    }
                    else if (this.ai[1] < 120f)
                    {
                        num1247 = 1f;
                        if (localAI[1] < 0.5f)
                        {
                            localAI[1] += 0.025f;
                        }

                        localAI[0] += 0.209439516f;
                    }
                    else
                    {
                        num1247 = 1.15f;
                        localAI[1] -= 0.05f;
                        if (localAI[1] < 0f)
                        {
                            localAI[1] = 0f;
                        }
                    }

                    localAI[2] = MathHelper.Lerp(localAI[2], num1247, 0.3f);
                }

                if (this.ai[0] == 0f)
                {
                    TargetClosest(false);
                    var v8 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
                    localAI[0] = localAI[0].AngleLerp(v8.ToRotation(), 0.5f);
                    localAI[1] += 0.05f;
                    if (localAI[1] > 0.7f)
                    {
                        localAI[1] = 0.7f;
                    }

                    localAI[2] = MathHelper.Lerp(localAI[2], 1f, 0.2f);
                    var scaleFactor8 = 24f;
                    var center27 = base.Center;
                    var center28 = Main.player[target].Center;
                    var value31 = center28 - center27;
                    var vector201 = value31 - Vector2.UnitY * 200f;
                    vector201 = Vector2.Normalize(vector201) * scaleFactor8;
                    var num1248 = 30;
                    base.velocity.X = (base.velocity.X * (float) (num1248 - 1) + vector201.X) / (float) num1248;
                    base.velocity.Y = (base.velocity.Y * (float) (num1248 - 1) + vector201.Y) / (float) num1248;
                    var num1249 = 0.25f;
                    for (var num1250 = 0; num1250 < 200; num1250++)
                    {
                        if (num1250 != whoAmI && Main.npc[num1250].active && Main.npc[num1250].type == 400 &&
                            Vector2.Distance(base.Center, Main.npc[num1250].Center) < 150f)
                        {
                            if (base.position.X < Main.npc[num1250].position.X)
                            {
                                base.velocity.X -= num1249;
                            }
                            else
                            {
                                base.velocity.X += num1249;
                            }

                            if (base.position.Y < Main.npc[num1250].position.Y)
                            {
                                base.velocity.Y -= num1249;
                            }
                            else
                            {
                                base.velocity.Y += num1249;
                            }
                        }
                    }
                }
                else if (this.ai[0] == 1f)
                {
                    if (num1242 == 0f)
                    {
                        TargetClosest(false);
                        netUpdate = true;
                    }

                    base.velocity *= 0.95f;
                    if (base.velocity.Length() < 1f)
                    {
                        base.velocity = Vector2.Zero;
                    }

                    var v9 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
                    localAI[0] = localAI[0].AngleLerp(v9.ToRotation(), 0.5f);
                    localAI[1] += 0.05f;
                    if (localAI[1] > 1f)
                    {
                        localAI[1] = 1f;
                    }

                    if (num1242 < 20f)
                    {
                        localAI[2] = MathHelper.Lerp(localAI[2], 1.1f, 0.2f);
                    }
                    else
                    {
                        localAI[2] = MathHelper.Lerp(localAI[2], 0.4f, 0.2f);
                    }

                    if (num1242 == num1243 - 35f)
                    {
                        Main.PlaySound(4, (int) base.position.X, (int) base.position.Y, 6, 1f, 0f);
                    }

                    if ((num1242 == num1243 - 14f || num1242 == num1243 - 7f || num1242 == num1243) &&
                        Main.netMode != 1)
                    {
                        var vector202 =
                            Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), value30 * localAI[1]);
                        var vector203 = Vector2.Normalize(v9) * 8f;
                        Projectile.NewProjectile(base.Center.X + vector202.X, base.Center.Y + vector202.Y, vector203.X,
                            vector203.Y, 462, 35, 0f, Main.myPlayer, 0f, 0f);
                    }
                }
                else if (this.ai[0] == 2f)
                {
                    if (num1242 < 15f)
                    {
                        localAI[1] -= 0.07f;
                        if (localAI[1] < 0f)
                        {
                            localAI[1] = 0f;
                        }

                        localAI[2] = MathHelper.Lerp(localAI[2], 0.4f, 0.2f);
                        base.velocity *= 0.8f;
                        if (base.velocity.Length() < 1f)
                        {
                            base.velocity = Vector2.Zero;
                        }
                    }
                    else if (num1242 < 75f)
                    {
                        var num1251 = (num1242 - 15f) / 10f;
                        var num1252 = 0;
                        var num1253 = 0;
                        switch ((int) num1251)
                        {
                            case 0:
                                num1252 = 0;
                                num1253 = 2;
                                break;
                            case 1:
                                num1252 = 2;
                                num1253 = 5;
                                break;
                            case 2:
                                num1252 = 5;
                                num1253 = 3;
                                break;
                            case 3:
                                num1252 = 3;
                                num1253 = 1;
                                break;
                            case 4:
                                num1252 = 1;
                                num1253 = 4;
                                break;
                            case 5:
                                num1252 = 4;
                                num1253 = 0;
                                break;
                        }

                        var vector204 = Vector2.UnitY * -30f;
                        var spinningpoint20 = vector204;
                        var radians25 = (double) ((float) num1252 * 6.28318548f / 6f);
                        vector16 = default(Vector2);
                        var value32 = spinningpoint20.RotatedBy(radians25, vector16);
                        var spinningpoint21 = vector204;
                        var radians26 = (double) ((float) num1253 * 6.28318548f / 6f);
                        vector16 = default(Vector2);
                        var value33 = spinningpoint21.RotatedBy(radians26, vector16);
                        var vector205 = Vector2.Lerp(value32, value33, num1251 - (float) (int) num1251);
                        var value34 = vector205.Length() / 30f;
                        localAI[0] = vector205.ToRotation();
                        localAI[1] = MathHelper.Lerp(localAI[1], value34, 0.5f);
                        for (var num1254 = 0; num1254 < 2; num1254++)
                        {
                            var position84 = base.Center + vector205 - Vector2.One * 4f;
                            newColor = default(Color);
                            var num1255 = Dust.NewDust(position84, 0, 0, 229, 0f, 0f, 0, newColor, 1f);
                            Main.dust[num1255].velocity += vector205 / 15f;
                            Main.dust[num1255].noGravity = true;
                        }

                        if ((num1242 - 15f) % 10f == 0f && Main.netMode != 1)
                        {
                            var vec4 = Vector2.Normalize(vector205);
                            if (vec4.HasNaNs())
                            {
                                vec4 = Vector2.UnitY * -1f;
                            }

                            vec4 *= 4f;
                            Projectile.NewProjectile(base.Center.X + vector205.X, base.Center.Y + vector205.Y, vec4.X,
                                vec4.Y, 454, 55, 0f, Main.myPlayer, 30f, (float) whoAmI);
                        }
                    }
                    else if (num1242 < 105f)
                    {
                        localAI[0] = localAI[0].AngleLerp(this.ai[2] - 1.57079637f, 0.2f);
                        localAI[2] = MathHelper.Lerp(localAI[2], 0.75f, 0.2f);
                        if (num1242 == 75f)
                        {
                            TargetClosest(false);
                            netUpdate = true;
                            base.velocity = Vector2.UnitY * -7f;
                            for (var num1256 = 0; num1256 < 1000; num1256++)
                            {
                                var projectile7 = Main.projectile[num1256];
                                if (projectile7.active && projectile7.type == 454 &&
                                    projectile7.ai[1] == (float) whoAmI && projectile7.ai[0] != -1f)
                                {
                                    projectile7.velocity += base.velocity;
                                    projectile7.netUpdate = true;
                                }
                            }
                        }

                        base.velocity.Y *= 0.96f;
                        this.ai[2] = (Main.player[target].Center - base.Center).ToRotation() + 1.57079637f;
                        rotation = rotation.AngleTowards(this.ai[2], 0.104719758f);
                    }
                    else if (num1242 < 120f)
                    {
                        Main.PlaySound(29, (int) base.Center.X, (int) base.Center.Y, 102, 1f, 0f);
                        if (num1242 == 105f)
                        {
                            netUpdate = true;
                        }

                        var velocity6 = (this.ai[2] - 1.57079637f).ToRotationVector2() * 12f;
                        base.velocity = velocity6 * 2f;
                        for (var num1257 = 0; num1257 < 1000; num1257++)
                        {
                            var projectile8 = Main.projectile[num1257];
                            if (projectile8.active && projectile8.type == 454 && projectile8.ai[1] == (float) whoAmI &&
                                projectile8.ai[0] != -1f)
                            {
                                projectile8.ai[0] = -1f;
                                projectile8.velocity = velocity6;
                                projectile8.netUpdate = true;
                            }
                        }
                    }
                    else
                    {
                        base.velocity *= 0.92f;
                        rotation = rotation.AngleLerp(0f, 0.2f);
                    }
                }
                else if (this.ai[0] == 3f)
                {
                    if (num1242 < 15f)
                    {
                        localAI[1] -= 0.07f;
                        if (localAI[1] < 0f)
                        {
                            localAI[1] = 0f;
                        }

                        localAI[2] = MathHelper.Lerp(localAI[2], 0.4f, 0.2f);
                        base.velocity *= 0.9f;
                        if (base.velocity.Length() < 1f)
                        {
                            base.velocity = Vector2.Zero;
                        }
                    }
                    else if (num1242 < 45f)
                    {
                        localAI[0] = 0f;
                        localAI[1] = (float) Math.Sin((double) ((num1242 - 15f) * 6.28318548f / 15f)) * 0.5f;
                        if (localAI[1] < 0f)
                        {
                            localAI[0] = 3.14159274f;
                        }
                    }
                    else if (num1242 < 185f)
                    {
                        if (num1242 == 45f)
                        {
                            this.ai[2] = (float) (Main.rand.Next(2) == 0).ToDirectionInt() * 6.28318548f / 40f;
                            netUpdate = true;
                        }

                        if ((num1242 - 15f - 30f) % 40f == 0f)
                        {
                            this.ai[2] *= 0.95f;
                        }

                        localAI[0] += this.ai[2];
                        localAI[1] += 0.05f;
                        if (localAI[1] > 1f)
                        {
                            localAI[1] = 1f;
                        }

                        var vector206 = localAI[0].ToRotationVector2() * value30 * localAI[1];
                        var scaleFactor9 = MathHelper.Lerp(8f, 20f, (num1242 - 15f - 30f) / 140f);
                        base.velocity = Vector2.Normalize(vector206) * scaleFactor9;
                        rotation = rotation.AngleLerp(base.velocity.ToRotation() + 1.57079637f, 0.2f);
                        if ((num1242 - 15f - 30f) % 10f == 0f && Main.netMode != 1)
                        {
                            var vector207 = base.Center + Vector2.Normalize(vector206) * value30.Length() * 0.4f;
                            var vector208 = Vector2.Normalize(vector206) * 8f;
                            var ai3 = (6.28318548f * (float) Main.rand.NextDouble() - 3.14159274f) / 30f +
                                        0.0174532924f * this.ai[2];
                            Projectile.NewProjectile(vector207.X, vector207.Y, vector208.X, vector208.Y, 452, 35, 0f,
                                Main.myPlayer, 0f, ai3);
                        }
                    }
                    else
                    {
                        base.velocity *= 0.88f;
                        rotation = rotation.AngleLerp(0f, 0.2f);
                        localAI[1] -= 0.07f;
                        if (localAI[1] < 0f)
                        {
                            localAI[1] = 0f;
                        }

                        localAI[2] = MathHelper.Lerp(localAI[2], 1f, 0.2f);
                    }
                }
                else if (this.ai[0] == 4f)
                {
                    if (num1242 == 0f)
                    {
                        TargetClosest(false);
                        netUpdate = true;
                    }

                    if (num1242 < 180f)
                    {
                        localAI[2] = MathHelper.Lerp(localAI[2], 1f, 0.2f);
                        localAI[1] -= 0.05f;
                        if (localAI[1] < 0f)
                        {
                            localAI[1] = 0f;
                        }

                        base.velocity *= 0.95f;
                        if (base.velocity.Length() < 1f)
                        {
                            base.velocity = Vector2.Zero;
                        }

                        if (num1242 >= 60f)
                        {
                            var center29 = base.Center;
                            var num1258 = 0;
                            if (num1242 >= 120f)
                            {
                                num1258 = 1;
                            }

                            for (var num1259 = 0; num1259 < 1 + num1258; num1259++)
                            {
                                var num1260 = 229;
                                var num1261 = 0.8f;
                                if (num1259 % 2 == 1)
                                {
                                    num1260 = 229;
                                    num1261 = 1.65f;
                                }

                                var vector209 =
                                    center29 + ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() *
                                    value30 / 2f;
                                var position85 = vector209 - Vector2.One * 8f;
                                var num1262 = num1260;
                                var speedX29 = base.velocity.X / 2f;
                                var speedY28 = base.velocity.Y / 2f;
                                newColor = default(Color);
                                var num1263 = Dust.NewDust(position85, 16, 16, num1262, speedX29, speedY28, 0, newColor,
                                    1f);
                                Main.dust[num1263].velocity =
                                    Vector2.Normalize(center29 - vector209) * 3.5f * (10f - (float) num1258 * 2f) / 10f;
                                Main.dust[num1263].noGravity = true;
                                Main.dust[num1263].scale = num1261;
                                Main.dust[num1263].customData = this;
                            }
                        }
                    }
                    else if (num1242 < num1243 - 15f)
                    {
                        if (num1242 == 180f && Main.netMode != 1)
                        {
                            TargetClosest(false);
                            var vector210 = Main.player[target].Center - base.Center;
                            vector210.Normalize();
                            var num1264 = -1f;
                            if (vector210.X < 0f)
                            {
                                num1264 = 1f;
                            }

                            var spinningpoint22 = vector210;
                            var radians27 = (double) ((0f - num1264) * 6.28318548f / 6f);
                            vector16 = default(Vector2);
                            vector210 = spinningpoint22.RotatedBy(radians27, vector16);
                            Projectile.NewProjectile(base.Center.X, base.Center.Y, vector210.X, vector210.Y, 455, 50,
                                0f, Main.myPlayer, num1264 * 6.28318548f / 540f, (float) whoAmI);
                            this.ai[2] = (vector210.ToRotation() + 9.424778f) * num1264;
                            netUpdate = true;
                        }

                        localAI[1] += 0.05f;
                        if (localAI[1] > 1f)
                        {
                            localAI[1] = 1f;
                        }

                        var num1265 = (float) (this.ai[2] >= 0f).ToDirectionInt();
                        var num1266 = this.ai[2];
                        if (num1266 < 0f)
                        {
                            num1266 *= -1f;
                        }

                        num1266 += -9.424778f;
                        num1266 += num1265 * 6.28318548f / 540f;
                        localAI[0] = num1266;
                        this.ai[2] = (num1266 + 9.424778f) * num1265;
                    }
                    else
                    {
                        localAI[1] -= 0.07f;
                        if (localAI[1] < 0f)
                        {
                            localAI[1] = 0f;
                        }
                    }
                }
            }
            else if (aiStyle == 82)
            {
                var num1267 = 90f;
                var value35 = new Vector2(0f, 216f);
                var num1268 = (int) Math.Abs(this.ai[0]) - 1;
                var num1269 = (int) this.ai[1];
                if (!Main.npc[num1268].active || Main.npc[num1268].type != 396)
                {
                    life = 0;
                    HitEffect(0, 10.0);
                    active = false;
                }
                else
                {
                    this.ai[2] += 1f;
                    if (this.ai[2] >= num1267)
                    {
                        if (Main.netMode != 1)
                        {
                            var num1270 = (int) Main.npc[num1268].ai[3];
                            var num1271 = -1;
                            var num1272 = -1;
                            var num1273 = num1268;
                            for (var num1274 = 0; num1274 < 200; num1274++)
                            {
                                if (Main.npc[num1274].active && Main.npc[num1274].ai[3] == (float) num1270)
                                {
                                    if (num1271 == -1 && Main.npc[num1274].type == 397 && Main.npc[num1274].ai[2] == 0f)
                                    {
                                        num1271 = num1274;
                                    }

                                    if (num1272 == -1 && Main.npc[num1274].type == 397 && Main.npc[num1274].ai[2] == 1f)
                                    {
                                        num1272 = num1274;
                                    }

                                    if (num1271 != -1 && num1272 != -1 && num1273 != -1)
                                    {
                                        break;
                                    }
                                }
                            }

                            var num1275 = 1000;
                            var num1276 = Main.npc[num1270].lifeMax - Main.npc[num1270].life;
                            var num1277 = Main.npc[num1271].lifeMax - Main.npc[num1271].life;
                            var num1278 = Main.npc[num1272].lifeMax - Main.npc[num1272].life;
                            var num1279 = Main.npc[num1273].lifeMax - Main.npc[num1273].life;
                            if (num1279 > 0 && num1275 > 0)
                            {
                                var num1280 = num1279 - num1275;
                                if (num1280 > 0)
                                {
                                    num1280 = 0;
                                }

                                var num1281 = num1275 + num1280;
                                num1275 -= num1281;
                                Main.npc[num1273].life += num1281;
                                HealEffect(Utils.CenteredRectangle(Main.npc[num1273].Center, new Vector2(50f)), num1281,
                                    true);
                            }

                            if (num1276 > 0 && num1275 > 0)
                            {
                                var num1282 = num1276 - num1275;
                                if (num1282 > 0)
                                {
                                    num1282 = 0;
                                }

                                var num1283 = num1275 + num1282;
                                num1275 -= num1283;
                                Main.npc[num1270].life += num1283;
                                HealEffect(Utils.CenteredRectangle(Main.npc[num1270].Center, new Vector2(50f)), num1283,
                                    true);
                            }

                            if (num1277 > 0 && num1275 > 0)
                            {
                                var num1284 = num1277 - num1275;
                                if (num1284 > 0)
                                {
                                    num1284 = 0;
                                }

                                var num1285 = num1275 + num1284;
                                num1275 -= num1285;
                                Main.npc[num1271].life += num1285;
                                HealEffect(Utils.CenteredRectangle(Main.npc[num1271].Center, new Vector2(50f)), num1285,
                                    true);
                            }

                            if (num1278 > 0 && num1275 > 0)
                            {
                                var num1286 = num1278 - num1275;
                                if (num1286 > 0)
                                {
                                    num1286 = 0;
                                }

                                var num1287 = num1275 + num1286;
                                num1275 -= num1287;
                                Main.npc[num1272].life += num1287;
                                HealEffect(Utils.CenteredRectangle(Main.npc[num1272].Center, new Vector2(50f)), num1287,
                                    true);
                            }
                        }

                        life = 0;
                        HitEffect(0, 10.0);
                        active = false;
                    }
                    else
                    {
                        base.velocity = Vector2.Zero;
                        base.Center = Vector2.Lerp(Main.projectile[num1269].Center,
                            Main.npc[(int) Math.Abs(this.ai[0]) - 1].Center + value35, this.ai[2] / num1267);
                        var vector211 = Vector2.UnitY * (float) (-base.height) / 2f;
                        for (var num1288 = 0; num1288 < 6; num1288++)
                        {
                            var value36 = base.Center - Vector2.One * 4f;
                            var spinningpoint23 = vector211;
                            var radians28 = (double) ((float) num1288 * 6.28318548f / 6f);
                            vector16 = default(Vector2);
                            var position86 = value36 + spinningpoint23.RotatedBy(radians28, vector16);
                            newColor = default(Color);
                            var num1289 = Dust.NewDust(position86, 0, 0, 229, 0f, 0f, 0, newColor, 1f);
                            Main.dust[num1289].velocity = -Vector2.UnitY;
                            Main.dust[num1289].noGravity = true;
                            Main.dust[num1289].scale = 0.7f;
                            Main.dust[num1289].customData = this;
                        }

                        vector211 = Vector2.UnitY * (float) (-base.height) / 6f;
                        for (var num1290 = 0; num1290 < 3; num1290++)
                        {
                            var value37 = base.Center - Vector2.One * 4f;
                            var spinningpoint24 = vector211;
                            var radians29 = (double) ((float) num1290 * 6.28318548f / 6f);
                            vector16 = default(Vector2);
                            var position87 = value37 + spinningpoint24.RotatedBy(radians29, vector16);
                            newColor = default(Color);
                            var num1291 = Dust.NewDust(position87, 0, 0, 229, 0f, -2f, 0, newColor, 1f);
                            Main.dust[num1291].noGravity = true;
                            Main.dust[num1291].scale = 1.5f;
                            Main.dust[num1291].customData = this;
                        }
                    }
                }
            }
            else if (aiStyle == 83)
            {
                if (type == 437)
                {
                    if (localAI[3] == 0f && Main.netMode != 1)
                    {
                        localAI[3] = 1f;
                        netUpdate = true;
                        Point[] spawnPoints = null;
                        if (!CultistRitual.CheckFloor(base.Center, out spawnPoints))
                        {
                            life = 0;
                            HitEffect(0, 10.0);
                            active = false;
                            return;
                        }

                        var num1292 = 0;
                        var num1293 = 1;
                        for (var num1294 = 0; num1294 < 4; num1294++)
                        {
                            var num1295 = 0;
                            var flag82 = num1294 == 1 || num1294 == 2;
                            num1295 = ((!flag82) ? 379 : 438);
                            var num1296 = NewNPC(spawnPoints[num1294].X * 16 + 8, spawnPoints[num1294].Y * 16 - 48,
                                num1295, 0, 0f, 0f, 0f, 0f, 255);
                            if (flag82)
                            {
                                localAI[num1293++] = (float) (num1296 + 1);
                                Main.npc[num1296].ai[3] = (float) (-(whoAmI + 1));
                            }
                            else
                            {
                                this.ai[num1292++] = (float) (num1296 + 1);
                                Main.npc[num1296].ai[3] = (float) (-(whoAmI + 1));
                            }

                            Main.npc[num1296].netUpdate = true;
                        }
                    }

                    if (localAI[0] == 1f && Main.netMode != 1)
                    {
                        localAI[0] = 2f;
                        for (var num1299 = 0; num1299 < 2; num1299++)
                        {
                            Main.npc[(int) localAI[num1299 + 1] - 1].ai[1] = 1f;
                            Main.npc[(int) localAI[num1299 + 1] - 1].netUpdate = true;
                            Main.npc[(int) this.ai[num1299] - 1].ai[3] = 0f;
                            Main.npc[(int) this.ai[num1299] - 1].TargetClosest(true);
                            Main.npc[(int) this.ai[num1299] - 1].netUpdate = true;
                        }
                    }

                    if (this.ai[0] != -1f && Main.netMode != 1)
                    {
                        var flag83 = true;
                        for (var num1300 = 0; num1300 < 2; num1300++)
                        {
                            if (Main.npc[(int) localAI[num1300 + 1] - 1].active &&
                                Main.npc[(int) localAI[num1300 + 1] - 1].type == 438)
                            {
                                flag83 = false;
                            }

                            if (Main.npc[(int) this.ai[num1300] - 1].active &&
                                Main.npc[(int) this.ai[num1300] - 1].type == 379)
                            {
                                flag83 = false;
                            }
                        }

                        if (flag83)
                        {
                            this.ai[0] = -1f;
                            this.ai[1] = 0f;
                            this.ai[3] = 0f;
                            var num1301 = (int) base.Center.X / 16 + 11 * (Main.rand.Next(2) == 0).ToDirectionInt();
                            var num1302 = 0;
                            for (var num1303 = -5; num1303 < 12; num1303++)
                            {
                                var num1304 = num1301;
                                var num1305 = (int) base.Center.Y / 16 + num1303;
                                if (WorldGen.SolidTile(num1304, num1305) &&
                                    !Collision.SolidTiles(num1304 - 1, num1304 + 1, num1305 - 3, num1305 - 1))
                                {
                                    num1302 = num1305;
                                    break;
                                }

                                if (num1303 == 11)
                                {
                                    num1302 = num1305;
                                }
                            }

                            var num1306 = NewNPC(num1301 * 16 + 10, num1302 * 16 - 2, 439, 0, 0f, 0f, 0f, 0f, 255);
                            Main.npc[num1306].direction = (Main.npc[num1306].spriteDirection =
                                Math.Sign(base.Center.X - (float) (num1301 * 16) - 10f));
                            this.ai[2] = (float) num1306;
                            netUpdate = true;
                            CultistRitual.TabletDestroyed();
                        }
                    }

                    if (this.ai[0] == -1f)
                    {
                        this.ai[3] += 1f;
                        if (this.ai[3] > 300f)
                        {
                            life = 0;
                            HitEffect(0, 9999.0);
                            active = false;
                            if (Main.netMode != 1)
                            {
                                for (var num1307 = 0; num1307 < 6; num1307++)
                                {
                                    var num1308 = 3f + Main.rand.NextFloat() * 6f;
                                    var vector212 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                                    var center30 = base.Center;
                                    center30 += vector212 * 30f;
                                    Projectile.NewProjectile(center30.X, center30.Y, vector212.X * num1308,
                                        vector212.Y * num1308, 526, 0, 0f, Main.myPlayer,
                                        Main.npc[(int) this.ai[2]].Center.X, Main.npc[(int) this.ai[2]].Center.Y);
                                }

                                for (var num1309 = 0; num1309 < 20; num1309++)
                                {
                                    if (Main.rand.Next(2) != 0)
                                    {
                                        var num1310 = 3f + Main.rand.NextFloat() * 6f;
                                        var vector213 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                                        var center31 = base.Center;
                                        center31 += vector213 * 30f;
                                        var vector214 =
                                            base.Center + vector213 * (Main.rand.NextFloat() * 45f + 45f) +
                                            Vector2.UnitY * 20f;
                                        Projectile.NewProjectile(center31.X, center31.Y, vector213.X * num1310, -20f,
                                            526, 0, 0f, Main.myPlayer, vector214.X, vector214.Y);
                                    }
                                }
                            }
                        }
                        else if (this.ai[3] % 10f == 1f && this.ai[3] > 120f && Main.netMode != 1)
                        {
                            var num1311 = 3f + Main.rand.NextFloat() * 6f;
                            var vector215 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                            var center32 = base.Center;
                            center32 += vector215 * 25f;
                            Projectile.NewProjectile(center32.X, center32.Y, vector215.X * num1311,
                                vector215.Y * num1311, 526, 0, 0f, Main.myPlayer, Main.npc[(int) this.ai[2]].Center.X,
                                Main.npc[(int) this.ai[2]].Center.Y);
                        }
                    }
                }

                if (type == 438)
                {
                    base.velocity.X *= 0.93f;
                    if ((double) base.velocity.X > -0.1 && (double) base.velocity.X < 0.1)
                    {
                        base.velocity.X = 0f;
                    }

                    var num1312 = (int) (0f - this.ai[3] - 1f);
                    if (num1312 == -1)
                    {
                        life = 0;
                        HitEffect(0, 10.0);
                        active = false;
                        return;
                    }

                    var num1313 = Math.Sign(Main.npc[num1312].Center.X - base.Center.X);
                    if (num1313 != base.direction)
                    {
                        base.velocity.X = 0f;
                        base.direction = (spriteDirection = num1313);
                        netUpdate = true;
                    }

                    if (justHit && Main.netMode != 1 && Main.npc[num1312].localAI[0] == 0f)
                    {
                        Main.npc[num1312].localAI[0] = 1f;
                    }

                    if ((this.ai[0] += 1f) >= 300f)
                    {
                        this.ai[0] = 0f;
                        netUpdate = true;
                    }
                }

                if (type == 437)
                {
                    Lighting.AddLight(base.Center, 0.8f, 0.75f, 0.55f);
                }
            }
            else if (aiStyle == 84)
            {
                AI_084_LunaticCultist();
            }
            else if (aiStyle == 85)
            {
                noTileCollide = false;
                if (this.ai[0] == 0f)
                {
                    TargetClosest(true);
                    if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
                    {
                        this.ai[0] = 1f;
                    }
                    else
                    {
                        var vector216 = Main.player[target].Center - base.Center;
                        vector216.Y -= (float) (Main.player[target].height / 4);
                        var num1314 = vector216.Length();
                        if (num1314 > 800f)
                        {
                            this.ai[0] = 2f;
                        }
                        else
                        {
                            var center33 = base.Center;
                            center33.X = Main.player[target].Center.X;
                            var vector217 = center33 - base.Center;
                            if (vector217.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center33, 1, 1))
                            {
                                this.ai[0] = 3f;
                                this.ai[1] = center33.X;
                                this.ai[2] = center33.Y;
                                var center34 = base.Center;
                                center34.Y = Main.player[target].Center.Y;
                                if (vector217.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center34, 1, 1) &&
                                    Collision.CanHit(center34, 1, 1, Main.player[target].position, 1, 1))
                                {
                                    this.ai[0] = 3f;
                                    this.ai[1] = center34.X;
                                    this.ai[2] = center34.Y;
                                }
                            }
                            else
                            {
                                center33 = base.Center;
                                center33.Y = Main.player[target].Center.Y;
                                vector217 = center33 - base.Center;
                                if (vector217.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center33, 1, 1))
                                {
                                    this.ai[0] = 3f;
                                    this.ai[1] = center33.X;
                                    this.ai[2] = center33.Y;
                                }
                            }

                            if (this.ai[0] == 0f)
                            {
                                localAI[0] = 0f;
                                vector216.Normalize();
                                vector216 *= 0.5f;
                                base.velocity += vector216;
                                this.ai[0] = 4f;
                                this.ai[1] = 0f;
                            }
                        }
                    }
                }
                else if (this.ai[0] == 1f)
                {
                    rotation += (float) base.direction * 0.3f;
                    var value38 = Main.player[target].Center - base.Center;
                    if (type == 421)
                    {
                        value38 = Main.player[target].Top - base.Center;
                    }

                    var num1315 = value38.Length();
                    var num1316 = 5.5f;
                    num1316 += num1315 / 100f;
                    var num1317 = 50;
                    value38.Normalize();
                    value38 *= num1316;
                    base.velocity = (base.velocity * (float) (num1317 - 1) + value38) / (float) num1317;
                    if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
                    {
                        this.ai[0] = 0f;
                        this.ai[1] = 0f;
                    }

                    if (type == 421 && num1315 < 40f && Main.player[target].active && !Main.player[target].dead)
                    {
                        var flag84 = true;
                        for (var num1318 = 0; num1318 < 200; num1318++)
                        {
                            var nPC7 = Main.npc[num1318];
                            if (nPC7.active && nPC7.type == type && nPC7.ai[0] == 5f && nPC7.target == target)
                            {
                                flag84 = false;
                                break;
                            }
                        }

                        if (flag84)
                        {
                            base.Center = Main.player[target].Top;
                            base.velocity = Vector2.Zero;
                            this.ai[0] = 5f;
                            this.ai[1] = 0f;
                            netUpdate = true;
                        }
                    }
                }
                else if (this.ai[0] == 2f)
                {
                    rotation = base.velocity.X * 0.1f;
                    noTileCollide = true;
                    var value39 = Main.player[target].Center - base.Center;
                    var num1319 = value39.Length();
                    var scaleFactor10 = 3f;
                    var num1320 = 3;
                    value39.Normalize();
                    value39 *= scaleFactor10;
                    base.velocity = (base.velocity * (float) (num1320 - 1) + value39) / (float) num1320;
                    if (num1319 < 600f && !Collision.SolidCollision(base.position, base.width, base.height))
                    {
                        this.ai[0] = 0f;
                    }
                }
                else if (this.ai[0] == 3f)
                {
                    rotation = base.velocity.X * 0.1f;
                    var value40 = new Vector2(this.ai[1], this.ai[2]);
                    var value41 = value40 - base.Center;
                    var num1321 = value41.Length();
                    var num1322 = 2f;
                    var num1323 = 3f;
                    value41.Normalize();
                    value41 *= num1322;
                    base.velocity = (base.velocity * (num1323 - 1f) + value41) / num1323;
                    if (collideX || collideY)
                    {
                        this.ai[0] = 4f;
                        this.ai[1] = 0f;
                    }

                    if (num1321 < num1322 || num1321 > 800f ||
                        Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
                    {
                        this.ai[0] = 0f;
                    }
                }
                else if (this.ai[0] == 4f)
                {
                    rotation = base.velocity.X * 0.1f;
                    if (collideX)
                    {
                        base.velocity.X *= -0.8f;
                    }

                    if (collideY)
                    {
                        base.velocity.Y *= -0.8f;
                    }

                    Vector2 value42;
                    if (base.velocity.X == 0f && base.velocity.Y == 0f)
                    {
                        value42 = Main.player[target].Center - base.Center;
                        value42.Y -= (float) (Main.player[target].height / 4);
                        value42.Normalize();
                        base.velocity = value42 * 0.1f;
                    }

                    var scaleFactor11 = 2f;
                    var num1324 = 20f;
                    value42 = base.velocity;
                    value42.Normalize();
                    value42 *= scaleFactor11;
                    base.velocity = (base.velocity * (num1324 - 1f) + value42) / num1324;
                    this.ai[1] += 1f;
                    if (this.ai[1] > 180f)
                    {
                        this.ai[0] = 0f;
                        this.ai[1] = 0f;
                    }

                    if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
                    {
                        this.ai[0] = 0f;
                    }

                    localAI[0] += 1f;
                    if (localAI[0] >= 5f && !Collision.SolidCollision(base.position - new Vector2(10f, 10f),
                            base.width + 20, base.height + 20))
                    {
                        localAI[0] = 0f;
                        var center35 = base.Center;
                        center35.X = Main.player[target].Center.X;
                        if (Collision.CanHit(base.Center, 1, 1, center35, 1, 1) &&
                            Collision.CanHit(base.Center, 1, 1, center35, 1, 1) &&
                            Collision.CanHit(Main.player[target].Center, 1, 1, center35, 1, 1))
                        {
                            this.ai[0] = 3f;
                            this.ai[1] = center35.X;
                            this.ai[2] = center35.Y;
                        }
                        else
                        {
                            center35 = base.Center;
                            center35.Y = Main.player[target].Center.Y;
                            if (Collision.CanHit(base.Center, 1, 1, center35, 1, 1) &&
                                Collision.CanHit(Main.player[target].Center, 1, 1, center35, 1, 1))
                            {
                                this.ai[0] = 3f;
                                this.ai[1] = center35.X;
                                this.ai[2] = center35.Y;
                            }
                        }
                    }
                }
                else if (this.ai[0] == 5f)
                {
                    var player7 = Main.player[target];
                    if (!player7.active || player7.dead)
                    {
                        this.ai[0] = 0f;
                        this.ai[1] = 0f;
                        netUpdate = true;
                    }
                    else
                    {
                        base.Center = ((player7.gravDir == 1f) ? player7.Top : player7.Bottom) +
                                      new Vector2((float) (player7.direction * 4), 0f);
                        gfxOffY = player7.gfxOffY;
                        base.velocity = Vector2.Zero;
                        player7.AddBuff(163, 59, true);
                    }
                }

                if (type == 405)
                {
                    rotation = 0f;
                    for (var num1325 = 0; num1325 < 200; num1325++)
                    {
                        if (num1325 != whoAmI && Main.npc[num1325].active && Main.npc[num1325].type == type &&
                            Math.Abs(base.position.X - Main.npc[num1325].position.X) +
                            Math.Abs(base.position.Y - Main.npc[num1325].position.Y) < (float) base.width)
                        {
                            if (base.position.X < Main.npc[num1325].position.X)
                            {
                                base.velocity.X -= 0.05f;
                            }
                            else
                            {
                                base.velocity.X += 0.05f;
                            }

                            if (base.position.Y < Main.npc[num1325].position.Y)
                            {
                                base.velocity.Y -= 0.05f;
                            }
                            else
                            {
                                base.velocity.Y += 0.05f;
                            }
                        }
                    }
                }
                else if (type == 421)
                {
                    hide = (this.ai[0] == 5f);
                    rotation = base.velocity.X * 0.1f;
                    for (var num1326 = 0; num1326 < 200; num1326++)
                    {
                        if (num1326 != whoAmI && Main.npc[num1326].active && Main.npc[num1326].type == type &&
                            Math.Abs(base.position.X - Main.npc[num1326].position.X) +
                            Math.Abs(base.position.Y - Main.npc[num1326].position.Y) < (float) base.width)
                        {
                            if (base.position.X < Main.npc[num1326].position.X)
                            {
                                base.velocity.X -= 0.05f;
                            }
                            else
                            {
                                base.velocity.X += 0.05f;
                            }

                            if (base.position.Y < Main.npc[num1326].position.Y)
                            {
                                base.velocity.Y -= 0.05f;
                            }
                            else
                            {
                                base.velocity.Y += 0.05f;
                            }
                        }
                    }
                }
            }
            else if (aiStyle == 86)
            {
                if (alpha > 0)
                {
                    alpha -= 30;
                    if (alpha < 0)
                    {
                        alpha = 0;
                    }
                }

                noGravity = true;
                noTileCollide = true;
                knockBackResist = 0f;
                for (var num1327 = 0; num1327 < 200; num1327++)
                {
                    if (num1327 != whoAmI && Main.npc[num1327].active && Main.npc[num1327].type == type)
                    {
                        var vector218 = Main.npc[num1327].Center - base.Center;
                        if (vector218.Length() < 50f)
                        {
                            vector218.Normalize();
                            if (vector218.X == 0f && vector218.Y == 0f)
                            {
                                if (num1327 > whoAmI)
                                {
                                    vector218.X = 1f;
                                }
                                else
                                {
                                    vector218.X = -1f;
                                }
                            }

                            vector218 *= 0.4f;
                            base.velocity -= vector218;
                            Main.npc[num1327].velocity += vector218;
                        }
                    }
                }

                if (type == 472)
                {
                    var num1328 = 120f;
                    if (localAI[0] < num1328)
                    {
                        if (localAI[0] == 0f)
                        {
                            Main.PlaySound(SoundID.Item8, base.Center);
                            TargetClosest(true);
                            if (base.direction > 0)
                            {
                                base.velocity.X += 2f;
                            }
                            else
                            {
                                base.velocity.X -= 2f;
                            }

                            for (var num1329 = 0; num1329 < 20; num1329++)
                            {
                                var vector219 = base.Center;
                                vector219.Y -= 18f;
                                var value43 = new Vector2((float) Main.rand.Next(-100, 101),
                                    (float) Main.rand.Next(-100, 101));
                                value43.Normalize();
                                value43 *= (float) Main.rand.Next(0, 100) * 0.1f;
                                vector219 += value43;
                                value43.Normalize();
                                value43 *= (float) Main.rand.Next(50, 90) * 0.2f;
                                var position88 = vector219;
                                newColor = default(Color);
                                var num1330 = Dust.NewDust(position88, 1, 1, 27, 0f, 0f, 0, newColor, 1f);
                                Main.dust[num1330].velocity = -value43 * 0.3f;
                                Main.dust[num1330].alpha = 100;
                                if (Main.rand.Next(2) == 0)
                                {
                                    Main.dust[num1330].noGravity = true;
                                    Main.dust[num1330].scale += 0.3f;
                                }
                            }
                        }

                        localAI[0] += 1f;
                        var num1331 = 1f - localAI[0] / num1328;
                        var num1332 = num1331 * 20f;
                        for (var num1333 = 0; (float) num1333 < num1332; num1333++)
                        {
                            if (Main.rand.Next(5) == 0)
                            {
                                var position89 = base.position;
                                var width60 = base.width;
                                var height57 = base.height;
                                newColor = default(Color);
                                var num1334 = Dust.NewDust(position89, width60, height57, 27, 0f, 0f, 0, newColor, 1f);
                                Main.dust[num1334].alpha = 100;
                                Main.dust[num1334].velocity *= 0.3f;
                                Main.dust[num1334].velocity += base.velocity * 0.75f;
                                Main.dust[num1334].noGravity = true;
                            }
                        }
                    }
                }

                if (type == 521)
                {
                    var num1335 = 120f;
                    if (localAI[0] < num1335)
                    {
                        if (localAI[0] == 0f)
                        {
                            Main.PlaySound(SoundID.Item8, base.Center);
                            TargetClosest(true);
                            if (base.direction > 0)
                            {
                                base.velocity.X += 2f;
                            }
                            else
                            {
                                base.velocity.X -= 2f;
                            }
                        }

                        localAI[0] += 1f;
                        var num1336 = 10;
                        for (var num1337 = 0; num1337 < 2; num1337++)
                        {
                            var position90 = base.position - new Vector2((float) num1336);
                            var width61 = base.width + num1336 * 2;
                            var height58 = base.height + num1336 * 2;
                            newColor = default(Color);
                            var num1338 = Dust.NewDust(position90, width61, height58, 228, 0f, 0f, 100, newColor, 2f);
                            Main.dust[num1338].noGravity = true;
                            Main.dust[num1338].noLight = true;
                        }
                    }
                }

                if (this.ai[0] == 0f)
                {
                    TargetClosest(true);
                    this.ai[0] = 1f;
                    this.ai[1] = (float) base.direction;
                }
                else if (this.ai[0] == 1f)
                {
                    TargetClosest(true);
                    var num1339 = 0.3f;
                    var num1340 = 7f;
                    var num1341 = 4f;
                    var num1342 = 660f;
                    var num1343 = 4f;
                    if (type == 521)
                    {
                        num1339 = 0.7f;
                        num1340 = 14f;
                        num1342 = 500f;
                        num1341 = 6f;
                        num1343 = 3f;
                    }

                    base.velocity.X += this.ai[1] * num1339;
                    if (base.velocity.X > num1340)
                    {
                        base.velocity.X = num1340;
                    }

                    if (base.velocity.X < 0f - num1340)
                    {
                        base.velocity.X = 0f - num1340;
                    }

                    var num1344 = Main.player[target].Center.Y - base.Center.Y;
                    if (Math.Abs(num1344) > num1341)
                    {
                        num1343 = 15f;
                    }

                    if (num1344 > num1341)
                    {
                        num1344 = num1341;
                    }
                    else if (num1344 < 0f - num1341)
                    {
                        num1344 = 0f - num1341;
                    }

                    base.velocity.Y = (base.velocity.Y * (num1343 - 1f) + num1344) / num1343;
                    if ((this.ai[1] > 0f && Main.player[target].Center.X - base.Center.X < 0f - num1342) ||
                        (this.ai[1] < 0f && Main.player[target].Center.X - base.Center.X > num1342))
                    {
                        this.ai[0] = 2f;
                        this.ai[1] = 0f;
                        if (base.Center.Y + 20f > Main.player[target].Center.Y)
                        {
                            this.ai[1] = -1f;
                        }
                        else
                        {
                            this.ai[1] = 1f;
                        }
                    }
                }
                else if (this.ai[0] == 2f)
                {
                    var num1345 = 0.4f;
                    var num1346 = 0.95f;
                    var num1347 = 5f;
                    if (type == 521)
                    {
                        num1345 = 0.3f;
                        num1347 = 7f;
                        num1346 = 0.9f;
                    }

                    base.velocity.Y += this.ai[1] * num1345;
                    if (base.velocity.Length() > num1347)
                    {
                        base.velocity *= num1346;
                    }

                    if (base.velocity.X > -1f && base.velocity.X < 1f)
                    {
                        TargetClosest(true);
                        this.ai[0] = 3f;
                        this.ai[1] = (float) base.direction;
                    }
                }
                else if (this.ai[0] == 3f)
                {
                    var num1348 = 0.4f;
                    var num1349 = 0.2f;
                    var num1350 = 5f;
                    var num1351 = 0.95f;
                    if (type == 521)
                    {
                        num1348 = 0.6f;
                        num1349 = 0.3f;
                        num1350 = 7f;
                        num1351 = 0.9f;
                    }

                    base.velocity.X += this.ai[1] * num1348;
                    if (base.Center.Y > Main.player[target].Center.Y)
                    {
                        base.velocity.Y -= num1349;
                    }
                    else
                    {
                        base.velocity.Y += num1349;
                    }

                    if (base.velocity.Length() > num1350)
                    {
                        base.velocity *= num1351;
                    }

                    if (base.velocity.Y > -1f && base.velocity.Y < 1f)
                    {
                        TargetClosest(true);
                        this.ai[0] = 0f;
                        this.ai[1] = (float) base.direction;
                    }
                }

                if (type == 521)
                {
                    var num1352 = 10;
                    for (var num1353 = 0; num1353 < 1; num1353++)
                    {
                        var position91 = base.position - new Vector2((float) num1352);
                        var width62 = base.width + num1352 * 2;
                        var height59 = base.height + num1352 * 2;
                        newColor = default(Color);
                        var num1354 = Dust.NewDust(position91, width62, height59, 228, 0f, 0f, 100, newColor, 2f);
                        Main.dust[num1354].noGravity = true;
                        Main.dust[num1354].noLight = true;
                    }
                }
            }
            else if (aiStyle == 87)
            {
                knockBackResist = 0.2f * Main.knockBackMultiplier;
                dontTakeDamage = false;
                noTileCollide = false;
                noGravity = false;
                reflectingProjectiles = false;
                if (this.ai[0] != 7f && Main.player[target].dead)
                {
                    TargetClosest(true);
                    if (Main.player[target].dead)
                    {
                        this.ai[0] = 7f;
                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                    }
                }

                if (this.ai[0] == 0f)
                {
                    TargetClosest(true);
                    var vector220 = Main.player[target].Center - base.Center;
                    if (base.velocity.X != 0f || base.velocity.Y > 100f || justHit || vector220.Length() < 80f)
                    {
                        this.ai[0] = 1f;
                        this.ai[1] = 0f;
                    }
                }
                else if (this.ai[0] == 1f)
                {
                    this.ai[1] += 1f;
                    if (this.ai[1] > 36f)
                    {
                        this.ai[0] = 2f;
                        this.ai[1] = 0f;
                    }
                }
                else if (this.ai[0] == 2f)
                {
                    if ((Main.player[target].Center - base.Center).Length() > 600f)
                    {
                        this.ai[0] = 5f;
                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                    }

                    if (base.velocity.Y == 0f)
                    {
                        TargetClosest(true);
                        base.velocity.X *= 0.85f;
                        this.ai[1] += 1f;
                        var num1355 = 15f + 30f * ((float) life / (float) lifeMax);
                        var num1356 = 3f + 4f * (1f - (float) life / (float) lifeMax);
                        var num1357 = 4f;
                        if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
                        {
                            num1357 += 2f;
                        }

                        if (this.ai[1] > num1355)
                        {
                            this.ai[3] += 1f;
                            if (this.ai[3] >= 3f)
                            {
                                this.ai[3] = 0f;
                                num1357 *= 2f;
                                num1356 /= 2f;
                            }

                            this.ai[1] = 0f;
                            base.velocity.Y -= num1357;
                            base.velocity.X = num1356 * (float) base.direction;
                        }
                    }
                    else
                    {
                        knockBackResist = 0f;
                        base.velocity.X *= 0.99f;
                        if (base.direction < 0 && base.velocity.X > -1f)
                        {
                            base.velocity.X = -1f;
                        }

                        if (base.direction > 0 && base.velocity.X < 1f)
                        {
                            base.velocity.X = 1f;
                        }
                    }

                    this.ai[2] += 1f;
                    if ((double) this.ai[2] > 210.0 && base.velocity.Y == 0f && Main.netMode != 1)
                    {
                        switch (Main.rand.Next(3))
                        {
                            case 0:
                                this.ai[0] = 3f;
                                break;
                            case 1:
                                this.ai[0] = 4f;
                                noTileCollide = true;
                                base.velocity.Y = -8f;
                                break;
                            case 2:
                                this.ai[0] = 6f;
                                break;
                            default:
                                this.ai[0] = 2f;
                                break;
                        }

                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                    }
                }
                else if (this.ai[0] == 3f)
                {
                    base.velocity.X *= 0.85f;
                    dontTakeDamage = true;
                    this.ai[1] += 1f;
                    if (this.ai[1] >= 180f)
                    {
                        this.ai[0] = 2f;
                        this.ai[1] = 0f;
                    }

                    if (Main.expertMode)
                    {
                        ReflectProjectiles(base.Hitbox);
                        reflectingProjectiles = true;
                    }
                }
                else if (this.ai[0] == 4f)
                {
                    noTileCollide = true;
                    noGravity = true;
                    knockBackResist = 0f;
                    if (base.velocity.X < 0f)
                    {
                        base.direction = -1;
                    }
                    else
                    {
                        base.direction = 1;
                    }

                    spriteDirection = base.direction;
                    TargetClosest(true);
                    var center36 = Main.player[target].Center;
                    center36.Y -= 350f;
                    var vector221 = center36 - base.Center;
                    if (this.ai[2] == 1f)
                    {
                        this.ai[1] += 1f;
                        vector221 = Main.player[target].Center - base.Center;
                        vector221.Normalize();
                        vector221 *= 8f;
                        base.velocity = (base.velocity * 4f + vector221) / 5f;
                        if (this.ai[1] > 6f)
                        {
                            this.ai[1] = 0f;
                            this.ai[0] = 4.1f;
                            this.ai[2] = 0f;
                            base.velocity = vector221;
                        }
                    }
                    else if (Math.Abs(base.Center.X - Main.player[target].Center.X) < 40f &&
                             base.Center.Y < Main.player[target].Center.Y - 300f)
                    {
                        this.ai[1] = 0f;
                        this.ai[2] = 1f;
                    }
                    else
                    {
                        vector221.Normalize();
                        vector221 *= 12f;
                        base.velocity = (base.velocity * 5f + vector221) / 6f;
                    }
                }
                else if (this.ai[0] == 4.1f)
                {
                    knockBackResist = 0f;
                    if (this.ai[2] == 0f && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1) &&
                        !Collision.SolidCollision(base.position, base.width, base.height))
                    {
                        this.ai[2] = 1f;
                    }

                    if (base.position.Y + (float) base.height >= Main.player[target].position.Y ||
                        base.velocity.Y <= 0f)
                    {
                        this.ai[1] += 1f;
                        if (this.ai[1] > 10f)
                        {
                            this.ai[0] = 2f;
                            this.ai[1] = 0f;
                            this.ai[2] = 0f;
                            this.ai[3] = 0f;
                            if (Collision.SolidCollision(base.position, base.width, base.height))
                            {
                                this.ai[0] = 5f;
                            }
                        }
                    }
                    else if (this.ai[2] == 0f)
                    {
                        noTileCollide = true;
                        noGravity = true;
                        knockBackResist = 0f;
                    }

                    base.velocity.Y += 0.2f;
                    if (base.velocity.Y > 16f)
                    {
                        base.velocity.Y = 16f;
                    }
                }
                else if (this.ai[0] == 5f)
                {
                    if (base.velocity.X > 0f)
                    {
                        base.direction = 1;
                    }
                    else
                    {
                        base.direction = -1;
                    }

                    spriteDirection = base.direction;
                    noTileCollide = true;
                    noGravity = true;
                    knockBackResist = 0f;
                    var value44 = Main.player[target].Center - base.Center;
                    value44.Y -= 4f;
                    if (value44.Length() < 200f && !Collision.SolidCollision(base.position, base.width, base.height))
                    {
                        this.ai[0] = 2f;
                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                    }

                    if (value44.Length() > 10f)
                    {
                        value44.Normalize();
                        value44 *= 10f;
                    }

                    base.velocity = (base.velocity * 4f + value44) / 5f;
                }
                else if (this.ai[0] == 6f)
                {
                    knockBackResist = 0f;
                    if (base.velocity.Y == 0f)
                    {
                        TargetClosest(true);
                        base.velocity.X *= 0.8f;
                        this.ai[1] += 1f;
                        if (this.ai[1] > 5f)
                        {
                            this.ai[1] = 0f;
                            base.velocity.Y -= 4f;
                            if (Main.player[target].position.Y + (float) Main.player[target].height < base.Center.Y)
                            {
                                base.velocity.Y -= 1.25f;
                            }

                            if (Main.player[target].position.Y + (float) Main.player[target].height <
                                base.Center.Y - 40f)
                            {
                                base.velocity.Y -= 1.5f;
                            }

                            if (Main.player[target].position.Y + (float) Main.player[target].height <
                                base.Center.Y - 80f)
                            {
                                base.velocity.Y -= 1.75f;
                            }

                            if (Main.player[target].position.Y + (float) Main.player[target].height <
                                base.Center.Y - 120f)
                            {
                                base.velocity.Y -= 2f;
                            }

                            if (Main.player[target].position.Y + (float) Main.player[target].height <
                                base.Center.Y - 160f)
                            {
                                base.velocity.Y -= 2.25f;
                            }

                            if (Main.player[target].position.Y + (float) Main.player[target].height <
                                base.Center.Y - 200f)
                            {
                                base.velocity.Y -= 2.5f;
                            }

                            if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
                            {
                                base.velocity.Y -= 2f;
                            }

                            base.velocity.X = (float) (12 * base.direction);
                            this.ai[2] += 1f;
                        }
                    }
                    else
                    {
                        base.velocity.X *= 0.98f;
                        if (base.direction < 0 && base.velocity.X > -8f)
                        {
                            base.velocity.X = -8f;
                        }

                        if (base.direction > 0 && base.velocity.X < 8f)
                        {
                            base.velocity.X = 8f;
                        }
                    }

                    if (this.ai[2] >= 3f && base.velocity.Y == 0f)
                    {
                        this.ai[0] = 2f;
                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                    }
                }
                else if (this.ai[0] == 7f)
                {
                    damage = 0;
                    life = lifeMax;
                    defense = 9999;
                    noTileCollide = true;
                    alpha += 7;
                    if (alpha > 255)
                    {
                        alpha = 255;
                    }

                    base.velocity.X *= 0.98f;
                }
            }
            else if (aiStyle == 88)
            {
                var num1358 = 7;
                noTileCollide = false;
                noGravity = true;
                knockBackResist = 0.2f * Main.expertKnockBack;
                damage = defDamage;
                if (!Main.eclipse)
                {
                    this.ai[0] = -1f;
                }
                else if (target < 0 || Main.player[target].dead || !Main.player[target].active)
                {
                    TargetClosest(true);
                    var vector222 = Main.player[target].Center - base.Center;
                    if (Main.player[target].dead || vector222.Length() > 3000f)
                    {
                        this.ai[0] = -1f;
                    }
                }
                else
                {
                    var vector223 = Main.player[target].Center - base.Center;
                    if (this.ai[0] > 1f && vector223.Length() > 1000f)
                    {
                        this.ai[0] = 1f;
                    }
                }

                if (this.ai[0] == -1f)
                {
                    var value45 = new Vector2(0f, -8f);
                    base.velocity = (base.velocity * 9f + value45) / 10f;
                    noTileCollide = true;
                    dontTakeDamage = true;
                }
                else if (this.ai[0] == 0f)
                {
                    TargetClosest(true);
                    if (base.Center.X < Main.player[target].Center.X - 2f)
                    {
                        base.direction = 1;
                    }

                    if (base.Center.X > Main.player[target].Center.X + 2f)
                    {
                        base.direction = -1;
                    }

                    spriteDirection = base.direction;
                    rotation = (rotation * 9f + base.velocity.X * 0.1f) / 10f;
                    if (collideX)
                    {
                        base.velocity.X *= (0f - oldVelocity.X) * 0.5f;
                        if (base.velocity.X > 4f)
                        {
                            base.velocity.X = 4f;
                        }

                        if (base.velocity.X < -4f)
                        {
                            base.velocity.X = -4f;
                        }
                    }

                    if (collideY)
                    {
                        base.velocity.Y *= (0f - oldVelocity.Y) * 0.5f;
                        if (base.velocity.Y > 4f)
                        {
                            base.velocity.Y = 4f;
                        }

                        if (base.velocity.Y < -4f)
                        {
                            base.velocity.Y = -4f;
                        }
                    }

                    var value46 = Main.player[target].Center - base.Center;
                    value46.Y -= 200f;
                    if (value46.Length() > 800f)
                    {
                        this.ai[0] = 1f;
                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                    }
                    else if (value46.Length() > 80f)
                    {
                        var scaleFactor12 = 6f;
                        var num1359 = 30f;
                        value46.Normalize();
                        value46 *= scaleFactor12;
                        base.velocity = (base.velocity * (num1359 - 1f) + value46) / num1359;
                    }
                    else if (base.velocity.Length() > 2f)
                    {
                        base.velocity *= 0.95f;
                    }
                    else if (base.velocity.Length() < 1f)
                    {
                        base.velocity *= 1.05f;
                    }

                    this.ai[1] += 1f;
                    if (justHit)
                    {
                        this.ai[1] += (float) Main.rand.Next(10, 30);
                    }

                    if (this.ai[1] >= 180f && Main.netMode != 1)
                    {
                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                        netUpdate = true;
                        while (this.ai[0] == 0f)
                        {
                            var num1360 = Main.rand.Next(3);
                            if (num1360 != 0 || !Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
                            {
                                switch (num1360)
                                {
                                    case 1:
                                        this.ai[0] = 3f;
                                        break;
                                    case 2:
                                        if (CountNPCS(478) + CountNPCS(479) < num1358)
                                        {
                                            this.ai[0] = 4f;
                                        }

                                        break;
                                }
                            }
                            else
                            {
                                this.ai[0] = 2f;
                            }
                        }
                    }
                }
                else if (this.ai[0] == 1f)
                {
                    collideX = false;
                    collideY = false;
                    noTileCollide = true;
                    knockBackResist = 0f;
                    if (target < 0 || !Main.player[target].active || Main.player[target].dead)
                    {
                        TargetClosest(true);
                    }

                    if (base.velocity.X < 0f)
                    {
                        base.direction = -1;
                    }
                    else if (base.velocity.X > 0f)
                    {
                        base.direction = 1;
                    }

                    spriteDirection = base.direction;
                    rotation = (rotation * 9f + base.velocity.X * 0.08f) / 10f;
                    var value47 = Main.player[target].Center - base.Center;
                    if (value47.Length() < 300f && !Collision.SolidCollision(base.position, base.width, base.height))
                    {
                        this.ai[0] = 0f;
                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                    }

                    var scaleFactor13 = 7f + value47.Length() / 100f;
                    var num1361 = 25f;
                    value47.Normalize();
                    value47 *= scaleFactor13;
                    base.velocity = (base.velocity * (num1361 - 1f) + value47) / num1361;
                }
                else if (this.ai[0] == 2f)
                {
                    damage = (int) ((double) defDamage * 0.5);
                    knockBackResist = 0f;
                    if (target < 0 || !Main.player[target].active || Main.player[target].dead)
                    {
                        TargetClosest(true);
                        this.ai[0] = 0f;
                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                    }

                    if (Main.player[target].Center.X - 10f < base.Center.X)
                    {
                        base.direction = -1;
                    }
                    else if (Main.player[target].Center.X + 10f > base.Center.X)
                    {
                        base.direction = 1;
                    }

                    spriteDirection = base.direction;
                    rotation = (rotation * 4f + base.velocity.X * 0.1f) / 5f;
                    if (collideX)
                    {
                        base.velocity.X *= (0f - oldVelocity.X) * 0.5f;
                        if (base.velocity.X > 4f)
                        {
                            base.velocity.X = 4f;
                        }

                        if (base.velocity.X < -4f)
                        {
                            base.velocity.X = -4f;
                        }
                    }

                    if (collideY)
                    {
                        base.velocity.Y *= (0f - oldVelocity.Y) * 0.5f;
                        if (base.velocity.Y > 4f)
                        {
                            base.velocity.Y = 4f;
                        }

                        if (base.velocity.Y < -4f)
                        {
                            base.velocity.Y = -4f;
                        }
                    }

                    var value48 = Main.player[target].Center - base.Center;
                    value48.Y -= 20f;
                    this.ai[2] += 0.0222222228f;
                    if (Main.expertMode)
                    {
                        this.ai[2] += 0.0166666675f;
                    }

                    var scaleFactor14 = 4f + this.ai[2] + value48.Length() / 120f;
                    var num1362 = 20f;
                    value48.Normalize();
                    value48 *= scaleFactor14;
                    base.velocity = (base.velocity * (num1362 - 1f) + value48) / num1362;
                    this.ai[1] += 1f;
                    if (this.ai[1] > 240f || !Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
                    {
                        this.ai[0] = 0f;
                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                    }
                }
                else if (this.ai[0] == 3f)
                {
                    knockBackResist = 0f;
                    noTileCollide = true;
                    if (base.velocity.X < 0f)
                    {
                        base.direction = -1;
                    }
                    else
                    {
                        base.direction = 1;
                    }

                    spriteDirection = base.direction;
                    rotation = (rotation * 4f + base.velocity.X * 0.07f) / 5f;
                    var value49 = Main.player[target].Center - base.Center;
                    value49.Y -= 12f;
                    if (base.Center.X > Main.player[target].Center.X)
                    {
                        value49.X += 400f;
                    }
                    else
                    {
                        value49.X -= 400f;
                    }

                    if (Math.Abs(base.Center.X - Main.player[target].Center.X) > 350f &&
                        Math.Abs(base.Center.Y - Main.player[target].Center.Y) < 20f)
                    {
                        this.ai[0] = 3.1f;
                        this.ai[1] = 0f;
                    }

                    this.ai[1] += 0.0333333351f;
                    var scaleFactor15 = 8f + this.ai[1];
                    var num1363 = 4f;
                    value49.Normalize();
                    value49 *= scaleFactor15;
                    base.velocity = (base.velocity * (num1363 - 1f) + value49) / num1363;
                }
                else if (this.ai[0] == 3.1f)
                {
                    knockBackResist = 0f;
                    noTileCollide = true;
                    rotation = (rotation * 4f + base.velocity.X * 0.07f) / 5f;
                    var vector224 = Main.player[target].Center - base.Center;
                    vector224.Y -= 12f;
                    var scaleFactor16 = 16f;
                    var num1364 = 8f;
                    vector224.Normalize();
                    vector224 *= scaleFactor16;
                    base.velocity = (base.velocity * (num1364 - 1f) + vector224) / num1364;
                    if (base.velocity.X < 0f)
                    {
                        base.direction = -1;
                    }
                    else
                    {
                        base.direction = 1;
                    }

                    spriteDirection = base.direction;
                    this.ai[1] += 1f;
                    if (this.ai[1] > 10f)
                    {
                        base.velocity = vector224;
                        if (base.velocity.X < 0f)
                        {
                            base.direction = -1;
                        }
                        else
                        {
                            base.direction = 1;
                        }

                        this.ai[0] = 3.2f;
                        this.ai[1] = 0f;
                        this.ai[1] = (float) base.direction;
                    }
                }
                else if (this.ai[0] == 3.2f)
                {
                    damage = (int) ((double) defDamage * 1.3);
                    collideX = false;
                    collideY = false;
                    knockBackResist = 0f;
                    noTileCollide = true;
                    this.ai[2] += 0.0333333351f;
                    base.velocity.X = (16f + this.ai[2]) * this.ai[1];
                    if ((this.ai[1] > 0f && base.Center.X > Main.player[target].Center.X + 260f) ||
                        (this.ai[1] < 0f && base.Center.X < Main.player[target].Center.X - 260f))
                    {
                        if (!Collision.SolidCollision(base.position, base.width, base.height))
                        {
                            this.ai[0] = 0f;
                            this.ai[1] = 0f;
                            this.ai[2] = 0f;
                            this.ai[3] = 0f;
                        }
                        else if (Math.Abs(base.Center.X - Main.player[target].Center.X) > 800f)
                        {
                            this.ai[0] = 1f;
                            this.ai[1] = 0f;
                            this.ai[2] = 0f;
                            this.ai[3] = 0f;
                        }
                    }

                    rotation = (rotation * 4f + base.velocity.X * 0.07f) / 5f;
                }
                else if (this.ai[0] == 4f)
                {
                    this.ai[0] = 0f;
                    TargetClosest(true);
                    if (Main.netMode != 1)
                    {
                        this.ai[1] = -1f;
                        this.ai[2] = -1f;
                        for (var num1365 = 0; num1365 < 1000; num1365++)
                        {
                            var num1366 = (int) Main.player[target].Center.X / 16;
                            var num1367 = (int) Main.player[target].Center.Y / 16;
                            var num1368 = 30 + num1365 / 50;
                            var num1369 = 20 + num1365 / 75;
                            num1366 += Main.rand.Next(-num1368, num1368 + 1);
                            num1367 += Main.rand.Next(-num1369, num1369 + 1);
                            if (!WorldGen.SolidTile(num1366, num1367))
                            {
                                for (;
                                    !WorldGen.SolidTile(num1366, num1367) && (double) num1367 < Main.worldSurface;
                                    num1367++)
                                {
                                }

                                if ((new Vector2((float) (num1366 * 16 + 8), (float) (num1367 * 16 + 8)) -
                                     Main.player[target].Center).Length() < 600f)
                                {
                                    this.ai[0] = 4.1f;
                                    this.ai[1] = (float) num1366;
                                    this.ai[2] = (float) num1367;
                                    break;
                                }
                            }
                        }
                    }

                    netUpdate = true;
                }
                else if (this.ai[0] == 4.1f)
                {
                    if (base.velocity.X < -2f)
                    {
                        base.direction = -1;
                    }
                    else if (base.velocity.X > 2f)
                    {
                        base.direction = 1;
                    }

                    spriteDirection = base.direction;
                    rotation = (rotation * 9f + base.velocity.X * 0.1f) / 10f;
                    noTileCollide = true;
                    var num1370 = (int) this.ai[1];
                    var num1371 = (int) this.ai[2];
                    var x7 = (float) (num1370 * 16 + 8);
                    var y5 = (float) (num1371 * 16 - 20);
                    var vector225 = new Vector2(x7, y5);
                    vector225 -= base.Center;
                    var num1372 = 6f + vector225.Length() / 150f;
                    if (num1372 > 10f)
                    {
                        num1372 = 10f;
                    }

                    var num1373 = 10f;
                    if (vector225.Length() < 10f)
                    {
                        this.ai[0] = 4.2f;
                    }

                    vector225.Normalize();
                    vector225 *= num1372;
                    base.velocity = (base.velocity * (num1373 - 1f) + vector225) / num1373;
                }
                else if (this.ai[0] == 4.2f)
                {
                    rotation = (rotation * 9f + base.velocity.X * 0.1f) / 10f;
                    knockBackResist = 0f;
                    noTileCollide = true;
                    var num1374 = (int) this.ai[1];
                    var num1375 = (int) this.ai[2];
                    var x8 = (float) (num1374 * 16 + 8);
                    var y6 = (float) (num1375 * 16 - 20);
                    var vector226 = new Vector2(x8, y6);
                    vector226 -= base.Center;
                    var num1376 = 4f;
                    var num1377 = 2f;
                    if (Main.netMode != 1 && vector226.Length() < 4f)
                    {
                        var num1378 = 70;
                        if (Main.expertMode)
                        {
                            num1378 = (int) ((double) num1378 * 0.75);
                        }

                        this.ai[3] += 1f;
                        if (this.ai[3] == (float) num1378)
                        {
                            NewNPC(num1374 * 16 + 8, num1375 * 16, 478, whoAmI, 0f, 0f, 0f, 0f, 255);
                        }
                        else if (this.ai[3] == (float) (num1378 * 2))
                        {
                            this.ai[0] = 0f;
                            this.ai[1] = 0f;
                            this.ai[2] = 0f;
                            this.ai[3] = 0f;
                            if (CountNPCS(478) + CountNPCS(479) < num1358 && Main.rand.Next(3) != 0)
                            {
                                this.ai[0] = 4f;
                            }
                            else if (Collision.SolidCollision(base.position, base.width, base.height))
                            {
                                this.ai[0] = 1f;
                            }
                        }
                    }

                    if (vector226.Length() > num1376)
                    {
                        vector226.Normalize();
                        vector226 *= num1376;
                    }

                    base.velocity = (base.velocity * (num1377 - 1f) + vector226) / num1377;
                }
            }
            else if (aiStyle == 89)
            {
                if (base.velocity.Y == 0f)
                {
                    base.velocity.X *= 0.9f;
                    rotation += base.velocity.X * 0.02f;
                }
                else
                {
                    base.velocity.X *= 0.99f;
                    rotation += base.velocity.X * 0.04f;
                }

                var num1379 = 900;
                if (Main.expertMode)
                {
                    num1379 = 600;
                }

                if (justHit)
                {
                    this.ai[0] -= (float) Main.rand.Next(10, 21);
                    if (!Main.expertMode)
                    {
                        this.ai[0] -= (float) Main.rand.Next(10, 21);
                    }
                }

                this.ai[0] += 1f;
                if (this.ai[0] >= (float) num1379)
                {
                    Transform(479);
                }

                if (Main.netMode != 1 && base.velocity.Y == 0f && (double) Math.Abs(base.velocity.X) < 0.2 &&
                    (double) this.ai[0] >= (double) num1379 * 0.75)
                {
                    var num1380 = this.ai[0] - (float) num1379 * 0.75f;
                    num1380 /= (float) num1379 * 0.25f;
                    if ((float) Main.rand.Next(-10, 120) < num1380 * 100f)
                    {
                        base.velocity.Y -= (float) Main.rand.Next(20, 40) * 0.025f;
                        base.velocity.X += (float) Main.rand.Next(-20, 20) * 0.025f;
                        base.velocity *= 1f + num1380 * 2f;
                        netUpdate = true;
                    }
                }
            }
            else if (aiStyle == 90)
            {
                noTileCollide = false;
                knockBackResist = 0.4f * Main.knockBackMultiplier;
                noGravity = true;
                rotation = (rotation * 9f + base.velocity.X * 0.1f) / 10f;
                if (!Main.eclipse)
                {
                    if (timeLeft > 5)
                    {
                        timeLeft = 5;
                    }

                    base.velocity.Y -= 0.2f;
                    if (base.velocity.Y < -8f)
                    {
                        base.velocity.Y = -8f;
                    }

                    noTileCollide = true;
                }
                else
                {
                    if (this.ai[0] == 0f || this.ai[0] == 1f)
                    {
                        for (var num1381 = 0; num1381 < 200; num1381++)
                        {
                            if (num1381 != whoAmI && Main.npc[num1381].active && Main.npc[num1381].type == type)
                            {
                                var vector227 = Main.npc[num1381].Center - base.Center;
                                if (vector227.Length() < (float) (base.width + base.height))
                                {
                                    vector227.Normalize();
                                    vector227 *= -0.1f;
                                    base.velocity += vector227;
                                    Main.npc[num1381].velocity -= vector227;
                                }
                            }
                        }
                    }

                    if (target < 0 || Main.player[target].dead || !Main.player[target].active)
                    {
                        TargetClosest(true);
                        var vector228 = Main.player[target].Center - base.Center;
                        if (Main.player[target].dead || vector228.Length() > 3000f)
                        {
                            this.ai[0] = -1f;
                        }
                    }
                    else
                    {
                        var vector229 = Main.player[target].Center - base.Center;
                        if (this.ai[0] > 1f && vector229.Length() > 1000f)
                        {
                            this.ai[0] = 1f;
                        }
                    }

                    if (this.ai[0] == -1f)
                    {
                        var value50 = new Vector2(0f, -8f);
                        base.velocity = (base.velocity * 9f + value50) / 10f;
                        noTileCollide = true;
                        dontTakeDamage = true;
                    }
                    else if (this.ai[0] == 0f)
                    {
                        TargetClosest(true);
                        spriteDirection = base.direction;
                        if (collideX)
                        {
                            base.velocity.X *= (0f - oldVelocity.X) * 0.5f;
                            if (base.velocity.X > 4f)
                            {
                                base.velocity.X = 4f;
                            }

                            if (base.velocity.X < -4f)
                            {
                                base.velocity.X = -4f;
                            }
                        }

                        if (collideY)
                        {
                            base.velocity.Y *= (0f - oldVelocity.Y) * 0.5f;
                            if (base.velocity.Y > 4f)
                            {
                                base.velocity.Y = 4f;
                            }

                            if (base.velocity.Y < -4f)
                            {
                                base.velocity.Y = -4f;
                            }
                        }

                        var value51 = Main.player[target].Center - base.Center;
                        if (value51.Length() > 800f)
                        {
                            this.ai[0] = 1f;
                            this.ai[1] = 0f;
                            this.ai[2] = 0f;
                            this.ai[3] = 0f;
                        }
                        else if (value51.Length() > 200f)
                        {
                            var scaleFactor17 = 5.5f + value51.Length() / 100f + this.ai[1] / 15f;
                            var num1382 = 40f;
                            value51.Normalize();
                            value51 *= scaleFactor17;
                            base.velocity = (base.velocity * (num1382 - 1f) + value51) / num1382;
                        }
                        else if (base.velocity.Length() > 2f)
                        {
                            base.velocity *= 0.95f;
                        }
                        else if (base.velocity.Length() < 1f)
                        {
                            base.velocity *= 1.05f;
                        }

                        this.ai[1] += 1f;
                        if (this.ai[1] >= 90f)
                        {
                            this.ai[1] = 0f;
                            this.ai[0] = 2f;
                        }
                    }
                    else if (this.ai[0] == 1f)
                    {
                        collideX = false;
                        collideY = false;
                        noTileCollide = true;
                        knockBackResist = 0f;
                        if (target < 0 || !Main.player[target].active || Main.player[target].dead)
                        {
                            TargetClosest(true);
                        }

                        if (base.velocity.X < 0f)
                        {
                            base.direction = -1;
                        }
                        else if (base.velocity.X > 0f)
                        {
                            base.direction = 1;
                        }

                        spriteDirection = base.direction;
                        rotation = (rotation * 9f + base.velocity.X * 0.08f) / 10f;
                        var value52 = Main.player[target].Center - base.Center;
                        if (value52.Length() < 300f &&
                            !Collision.SolidCollision(base.position, base.width, base.height))
                        {
                            this.ai[0] = 0f;
                            this.ai[1] = 0f;
                            this.ai[2] = 0f;
                            this.ai[3] = 0f;
                        }

                        this.ai[2] += 0.0166666675f;
                        var scaleFactor18 = 5.5f + this.ai[2] + value52.Length() / 150f;
                        var num1383 = 35f;
                        value52.Normalize();
                        value52 *= scaleFactor18;
                        base.velocity = (base.velocity * (num1383 - 1f) + value52) / num1383;
                    }
                    else if (this.ai[0] == 2f)
                    {
                        if (base.velocity.X < 0f)
                        {
                            base.direction = -1;
                        }
                        else if (base.velocity.X > 0f)
                        {
                            base.direction = 1;
                        }

                        spriteDirection = base.direction;
                        rotation = (rotation * 7f + base.velocity.X * 0.1f) / 8f;
                        knockBackResist = 0f;
                        noTileCollide = true;
                        var vector230 = Main.player[target].Center - base.Center;
                        vector230.Y -= 8f;
                        var scaleFactor19 = 9f;
                        var num1384 = 8f;
                        vector230.Normalize();
                        vector230 *= scaleFactor19;
                        base.velocity = (base.velocity * (num1384 - 1f) + vector230) / num1384;
                        if (base.velocity.X < 0f)
                        {
                            base.direction = -1;
                        }
                        else
                        {
                            base.direction = 1;
                        }

                        spriteDirection = base.direction;
                        this.ai[1] += 1f;
                        if (this.ai[1] > 10f)
                        {
                            base.velocity = vector230;
                            if (base.velocity.X < 0f)
                            {
                                base.direction = -1;
                            }
                            else
                            {
                                base.direction = 1;
                            }

                            this.ai[0] = 2.1f;
                            this.ai[1] = 0f;
                        }
                    }
                    else if (this.ai[0] == 2.1f)
                    {
                        if (base.velocity.X < 0f)
                        {
                            base.direction = -1;
                        }
                        else if (base.velocity.X > 0f)
                        {
                            base.direction = 1;
                        }

                        spriteDirection = base.direction;
                        base.velocity *= 1.01f;
                        knockBackResist = 0f;
                        noTileCollide = true;
                        this.ai[1] += 1f;
                        var num1385 = 45;
                        if (this.ai[1] > (float) num1385)
                        {
                            if (!Collision.SolidCollision(base.position, base.width, base.height))
                            {
                                this.ai[0] = 0f;
                                this.ai[1] = 0f;
                                this.ai[2] = 0f;
                            }
                            else if (this.ai[1] > (float) (num1385 * 2))
                            {
                                this.ai[0] = 1f;
                                this.ai[1] = 0f;
                                this.ai[2] = 0f;
                            }
                        }
                    }
                }
            }
            else if (aiStyle == 91)
            {
                noGravity = true;
                noTileCollide = false;
                dontTakeDamage = false;
                if (justHit && Main.netMode != 1 && Main.expertMode && Main.rand.Next(6) == 0)
                {
                    netUpdate = true;
                    this.ai[0] = -1f;
                    this.ai[1] = 0f;
                }

                if (this.ai[0] == -1f)
                {
                    dontTakeDamage = true;
                    noGravity = false;
                    base.velocity.X *= 0.98f;
                    this.ai[1] += 1f;
                    if (this.ai[1] >= 120f)
                    {
                        this.ai[0] = (this.ai[1] = (this.ai[2] = (this.ai[3] = 0f)));
                    }
                }
                else if (this.ai[0] == 0f)
                {
                    TargetClosest(true);
                    if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
                    {
                        this.ai[0] = 1f;
                    }
                    else
                    {
                        var vector231 = Main.player[target].Center - base.Center;
                        vector231.Y -= (float) (Main.player[target].height / 4);
                        var num1386 = vector231.Length();
                        if (num1386 > 800f)
                        {
                            this.ai[0] = 2f;
                        }
                        else
                        {
                            var center37 = base.Center;
                            center37.X = Main.player[target].Center.X;
                            var vector232 = center37 - base.Center;
                            if (vector232.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center37, 1, 1))
                            {
                                this.ai[0] = 3f;
                                this.ai[1] = center37.X;
                                this.ai[2] = center37.Y;
                                var center38 = base.Center;
                                center38.Y = Main.player[target].Center.Y;
                                if (vector232.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center38, 1, 1) &&
                                    Collision.CanHit(center38, 1, 1, Main.player[target].position, 1, 1))
                                {
                                    this.ai[0] = 3f;
                                    this.ai[1] = center38.X;
                                    this.ai[2] = center38.Y;
                                }
                            }
                            else
                            {
                                center37 = base.Center;
                                center37.Y = Main.player[target].Center.Y;
                                vector232 = center37 - base.Center;
                                if (vector232.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center37, 1, 1))
                                {
                                    this.ai[0] = 3f;
                                    this.ai[1] = center37.X;
                                    this.ai[2] = center37.Y;
                                }
                            }

                            if (this.ai[0] == 0f)
                            {
                                localAI[0] = 0f;
                                vector231.Normalize();
                                vector231 *= 0.5f;
                                base.velocity += vector231;
                                this.ai[0] = 4f;
                                this.ai[1] = 0f;
                            }
                        }
                    }
                }
                else if (this.ai[0] == 1f)
                {
                    var value53 = Main.player[target].Center - base.Center;
                    var num1387 = value53.Length();
                    var num1388 = 2f;
                    num1388 += num1387 / 200f;
                    var num1389 = 50;
                    value53.Normalize();
                    value53 *= num1388;
                    base.velocity = (base.velocity * (float) (num1389 - 1) + value53) / (float) num1389;
                    if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
                    {
                        this.ai[0] = 0f;
                        this.ai[1] = 0f;
                    }
                }
                else if (this.ai[0] == 2f)
                {
                    noTileCollide = true;
                    var value54 = Main.player[target].Center - base.Center;
                    var num1390 = value54.Length();
                    var scaleFactor20 = 2f;
                    var num1391 = 4;
                    value54.Normalize();
                    value54 *= scaleFactor20;
                    base.velocity = (base.velocity * (float) (num1391 - 1) + value54) / (float) num1391;
                    if (num1390 < 600f && !Collision.SolidCollision(base.position, base.width, base.height))
                    {
                        this.ai[0] = 0f;
                    }
                }
                else if (this.ai[0] == 3f)
                {
                    var value55 = new Vector2(this.ai[1], this.ai[2]);
                    var value56 = value55 - base.Center;
                    var num1392 = value56.Length();
                    var num1393 = 1f;
                    var num1394 = 3f;
                    value56.Normalize();
                    value56 *= num1393;
                    base.velocity = (base.velocity * (num1394 - 1f) + value56) / num1394;
                    if (collideX || collideY)
                    {
                        this.ai[0] = 4f;
                        this.ai[1] = 0f;
                    }

                    if (num1392 < num1393 || num1392 > 800f ||
                        Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
                    {
                        this.ai[0] = 0f;
                    }
                }
                else if (this.ai[0] == 4f)
                {
                    if (collideX)
                    {
                        base.velocity.X *= -0.8f;
                    }

                    if (collideY)
                    {
                        base.velocity.Y *= -0.8f;
                    }

                    Vector2 value57;
                    if (base.velocity.X == 0f && base.velocity.Y == 0f)
                    {
                        value57 = Main.player[target].Center - base.Center;
                        value57.Y -= (float) (Main.player[target].height / 4);
                        value57.Normalize();
                        base.velocity = value57 * 0.1f;
                    }

                    var scaleFactor21 = 1.5f;
                    var num1395 = 20f;
                    value57 = base.velocity;
                    value57.Normalize();
                    value57 *= scaleFactor21;
                    base.velocity = (base.velocity * (num1395 - 1f) + value57) / num1395;
                    this.ai[1] += 1f;
                    if (this.ai[1] > 180f)
                    {
                        this.ai[0] = 0f;
                        this.ai[1] = 0f;
                    }

                    if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
                    {
                        this.ai[0] = 0f;
                    }

                    localAI[0] += 1f;
                    if (localAI[0] >= 5f && !Collision.SolidCollision(base.position - new Vector2(10f, 10f),
                            base.width + 20, base.height + 20))
                    {
                        localAI[0] = 0f;
                        var center39 = base.Center;
                        center39.X = Main.player[target].Center.X;
                        if (Collision.CanHit(base.Center, 1, 1, center39, 1, 1) &&
                            Collision.CanHit(base.Center, 1, 1, center39, 1, 1) &&
                            Collision.CanHit(Main.player[target].Center, 1, 1, center39, 1, 1))
                        {
                            this.ai[0] = 3f;
                            this.ai[1] = center39.X;
                            this.ai[2] = center39.Y;
                        }
                        else
                        {
                            center39 = base.Center;
                            center39.Y = Main.player[target].Center.Y;
                            if (Collision.CanHit(base.Center, 1, 1, center39, 1, 1) &&
                                Collision.CanHit(Main.player[target].Center, 1, 1, center39, 1, 1))
                            {
                                this.ai[0] = 3f;
                                this.ai[1] = center39.X;
                                this.ai[2] = center39.Y;
                            }
                        }
                    }
                }
            }
            else if (aiStyle == 92)
            {
                if (Main.rand.Next(20) == 0)
                {
                    switch (Main.rand.Next(15, 18))
                    {
                        case 15:
                            HitSound = SoundID.NPCHit15;
                            break;
                        case 16:
                            HitSound = SoundID.NPCHit16;
                            break;
                        case 17:
                            HitSound = SoundID.NPCHit17;
                            break;
                    }
                }

                if (Main.netMode != 1)
                {
                    var flag85 = false;
                    var num1396 = (int) this.ai[0];
                    var num1397 = (int) this.ai[1];
                    if (!flag85 && (!Main.tile[num1396, num1397].active() || Main.tile[num1396, num1397].type != 378))
                    {
                        flag85 = true;
                    }

                    if (!flag85 && (target == 255 || Main.player[target].dead ||
                                    Vector2.Distance(base.Center, Main.player[target].Center) > 160000f))
                    {
                        TargetClosest(false);
                        if (target == 255 || Main.player[target].dead ||
                            Vector2.Distance(base.Center, Main.player[target].Center) > 160000f)
                        {
                            flag85 = true;
                        }
                    }

                    if (flag85)
                    {
                        life = 0;
                        HitEffect(0, 10.0);
                        active = false;
                        var num1398 =
                            Terraria.GameContent.Tile_Entities.TETrainingDummy.Find((int) this.ai[0], (int) this.ai[1]);
                        if (num1398 != -1)
                        {
                            ((Terraria.GameContent.Tile_Entities.TETrainingDummy) TileEntity.ByID[num1398])
                                .Deactivate();
                        }
                    }
                }
            }
            else if (aiStyle == 93)
            {
                if (localAI[0] == 0f)
                {
                    localAI[0] = 1f;
                    for (var num1399 = 0; num1399 < 4; num1399++)
                    {
                        var num1400 = NewNPC((int) base.Center.X + num1399 * 40 - 150, (int) base.Center.Y, 492, whoAmI,
                            0f, 0f, 0f, 0f, 255);
                        Main.npc[num1400].netUpdate = true;
                        Main.npc[num1400].ai[0] = (float) whoAmI;
                        Main.npc[num1400].ai[1] = (float) num1399;
                        Main.npc[num1400].ai[3] = (float) (60 * num1399);
                        Main.npc[num1400].TargetClosest(false);
                        Main.npc[num1400].timeLeft = 600;
                        this.ai[num1399] = (float) num1400;
                    }
                }

                var flag86 = true;
                for (var num1401 = 0; num1401 < 4; num1401++)
                {
                    if (this.ai[num1401] >= 0f && (!Main.npc[(int) this.ai[num1401]].active ||
                                                   Main.npc[(int) this.ai[num1401]].type != 492))
                    {
                        this.ai[num1401] = -1f;
                        netUpdate = true;
                    }
                    else if (this.ai[num1401] >= 0f)
                    {
                        flag86 = false;
                    }
                }

                if (flag86)
                {
                    life = 0;
                    HitEffect(9999, 10.0);
                    checkDead();
                }
                else
                {
                    if (Main.netMode != 1 && Main.rand.Next(300) == 0)
                    {
                        var spinningpoint25 =
                            new Vector2((Main.rand.NextFloat() - 0.5f) * (float) (base.width - 70),
                                (Main.rand.NextFloat() - 0.5f) * 20f - (float) (base.height / 2) - 20f);
                        var radians30 = (double) rotation;
                        vector16 = default(Vector2);
                        var value58 = spinningpoint25.RotatedBy(radians30, vector16);
                        value58 += base.Center;
                        var num1402 = NewNPC((int) value58.X, (int) value58.Y,
                            Utils.SelectRandom<int>(Main.rand, 213, 215, 214, 212), 0, 0f, 0f, 0f, 0f, 255);
                        Main.npc[num1402].velocity =
                            new Vector2((Main.rand.NextFloat() - 0.5f) * 5f, -8.01f) + base.velocity;
                        Main.npc[num1402].netUpdate = true;
                        Main.npc[num1402].timeLeft = 600;
                    }

                    if ((localAI[3] += 1f) >= 64f)
                    {
                        localAI[3] = 0f;
                    }

                    TargetClosest(true);
                    var num1403 = (int) base.Center.X / 16 + Math.Sign(base.velocity.X) * 10;
                    var num1404 = (int) (base.position.Y + (float) base.height) / 16;
                    var num1405 = 0;
                    if (!Main.tile[num1403, num1404].nactive() || !Main.tileSolid[Main.tile[num1403, num1404].type] ||
                        Main.tileSolidTop[Main.tile[num1403, num1404].type])
                    {
                        for (; num1405 < 150; num1405++)
                        {
                            if (num1404 + num1405 >= Main.maxTilesY)
                            {
                                break;
                            }

                            var num1406 = num1404 + num1405;
                            if (Main.tile[num1403, num1406].nactive() &&
                                Main.tileSolid[Main.tile[num1403, num1406].type] &&
                                !Main.tileSolidTop[Main.tile[num1403, num1406].type])
                            {
                                num1405--;
                                break;
                            }
                        }
                    }
                    else
                    {
                        num1405 = 1;
                    }

                    var num1407 = (float) (num1405 * 16);
                    if (num1407 < 350f)
                    {
                        var num1408 = num1407 - 350f;
                        if (num1408 < -4f)
                        {
                            num1408 = -4f;
                        }

                        base.velocity.Y = MathHelper.Lerp(base.velocity.Y, num1408, 0.05f);
                    }
                    else if (num1407 > 450f)
                    {
                        var num1409 = num1407 - 350f;
                        if (num1409 > 4f)
                        {
                            num1409 = 4f;
                        }

                        base.velocity.Y = MathHelper.Lerp(base.velocity.Y, num1409, 0.05f);
                    }
                    else
                    {
                        base.velocity.Y *= 0.95f;
                    }

                    var num1410 = Main.player[target].Center.X - base.Center.X;
                    if (Math.Abs(num1410) >= 300f &&
                        (Math.Abs(base.velocity.X) < 6f || Math.Sign(base.velocity.X) != base.direction))
                    {
                        base.velocity.X += (float) base.direction * 0.06f;
                    }

                    rotation = base.velocity.X * 0.025f;
                    spriteDirection = -Math.Sign(base.velocity.X);
                    for (var num1411 = 0; num1411 < 2; num1411++)
                    {
                        if (Main.rand.Next(2) != 0)
                        {
                            var spinningpoint26 =
                                new Vector2((Main.rand.NextFloat() - 0.5f) * (float) (base.width - 70),
                                    (Main.rand.NextFloat() - 0.5f) * 20f + (float) (base.height / 2) + 10f);
                            var radians31 = (double) rotation;
                            vector16 = default(Vector2);
                            var value59 = spinningpoint26.RotatedBy(radians31, vector16);
                            var dust6 = Main.dust;
                            var center40 = base.Center;
                            newColor = default(Color);
                            var dust7 = dust6[Dust.NewDust(center40, 0, 0, 228, 0f, 0f, 0, newColor, 1f)];
                            dust7.position = base.Center + value59;
                            dust7.velocity = Vector2.Zero;
                            dust7.noGravity = true;
                            dust7.noLight = true;
                            dust7.fadeIn = 1.5f;
                            dust7.scale = 0.5f;
                        }
                    }
                }
            }
            else if (aiStyle == 94)
            {
                if (this.ai[2] == 1f)
                {
                    base.velocity = Vector2.UnitY * base.velocity.Length();
                    if (base.velocity.Y < 0.25f)
                    {
                        base.velocity.Y += 0.02f;
                    }

                    if (base.velocity.Y > 0.25f)
                    {
                        base.velocity.Y -= 0.02f;
                    }

                    dontTakeDamage = true;
                    this.ai[1] += 1f;
                    if (this.ai[1] > 120f)
                    {
                        Opacity = 1f - (this.ai[1] - 120f) / 60f;
                    }

                    var num1412 = 6;
                    switch (type)
                    {
                        case 517:
                            num1412 = 127;
                            break;
                        case 422:
                            num1412 = 229;
                            break;
                        case 507:
                            num1412 = 242;
                            break;
                        case 493:
                            num1412 = 135;
                            break;
                    }

                    if (Main.rand.Next(5) == 0 && this.ai[1] < 120f)
                    {
                        for (var num1413 = 0; num1413 < 3; num1413++)
                        {
                            var dust8 = Main.dust;
                            var left = base.Left;
                            var width63 = base.width;
                            var height60 = base.height / 2;
                            var num1414 = num1412;
                            newColor = default(Color);
                            var dust9 = dust8[Dust.NewDust(left, width63, height60, num1414, 0f, 0f, 0, newColor, 1f)];
                            dust9.position = base.Center + Vector2.UnitY.RotatedByRandom(4.1887903213500977) *
                                             new Vector2((float) base.width * 1.5f, (float) base.height * 1.1f) * 0.8f *
                                             (0.8f + Main.rand.NextFloat() * 0.2f);
                            dust9.velocity.X = 0f;
                            dust9.velocity.Y =
                                (0f - Math.Abs(dust9.velocity.Y - (float) num1413 + base.velocity.Y - 4f)) * 3f;
                            dust9.noGravity = true;
                            dust9.fadeIn = 1f;
                            dust9.scale = 1f + Main.rand.NextFloat() + (float) num1413 * 0.3f;
                        }
                    }

                    if (this.ai[1] < 150f)
                    {
                        for (var num1415 = 0; num1415 < 3; num1415++)
                        {
                            if (Main.rand.Next(4) == 0)
                            {
                                var dust10 = Main.dust;
                                var position92 =
                                    base.Top + new Vector2((float) (-base.width) * (0.33f - 0.11f * (float) num1415),
                                        -20f);
                                var width64 = (int) ((float) base.width * (0.66f - 0.22f * (float) num1415));
                                var num1416 = num1412;
                                newColor = default(Color);
                                var dust11 =
                                    dust10[Dust.NewDust(position92, width64, 20, num1416, 0f, 0f, 0, newColor, 1f)];
                                dust11.velocity.X = 0f;
                                dust11.velocity.Y =
                                    (0f - Math.Abs(dust11.velocity.Y - (float) num1415 + base.velocity.Y - 4f)) *
                                    (1f + this.ai[1] / 180f * 0.5f);
                                dust11.noGravity = true;
                                dust11.fadeIn = 1f;
                                dust11.scale = 1f + Main.rand.NextFloat() + (float) num1415 * 0.3f;
                            }
                        }
                    }

                    if (Main.rand.Next(5) == 0 && this.ai[1] < 150f)
                    {
                        for (var num1417 = 0; num1417 < 3; num1417++)
                        {
                            var vector233 = base.Center + Vector2.UnitY.RotatedByRandom(4.1887903213500977) *
                                                new Vector2((float) base.width, (float) base.height) * 0.7f *
                                                Main.rand.NextFloat();
                            var num1418 = 1f + Main.rand.NextFloat() * 2f + this.ai[1] / 180f * 4f;
                            for (var num1419 = 0; num1419 < 6; num1419++)
                            {
                                var dust12 = Main.dust;
                                var position93 = vector233;
                                var num1420 = num1412;
                                newColor = default(Color);
                                var dust13 = dust12[Dust.NewDust(position93, 4, 4, num1420, 0f, 0f, 0, newColor, 1f)];
                                dust13.position = vector233;
                                dust13.velocity.X *= num1418;
                                dust13.velocity.Y = (0f - Math.Abs(dust13.velocity.Y)) * num1418;
                                dust13.noGravity = true;
                                dust13.fadeIn = 1f;
                                dust13.scale = 1.5f + Main.rand.NextFloat() + (float) num1419 * 0.13f;
                            }

                            Main.PlaySound(3, vector233, Utils.SelectRandom<int>(Main.rand, 1, 18));
                        }
                    }

                    if (Main.rand.Next(3) != 0 && this.ai[1] < 150f)
                    {
                        var dust14 = Main.dust;
                        var left2 = base.Left;
                        var width65 = base.width;
                        var height61 = base.height / 2;
                        newColor = default(Color);
                        var dust15 = dust14[Dust.NewDust(left2, width65, height61, 241, 0f, 0f, 0, newColor, 1f)];
                        dust15.position = base.Center + Vector2.UnitY.RotatedByRandom(4.1887903213500977) *
                                          new Vector2((float) (base.width / 2), (float) (base.height / 2)) *
                                          (0.8f + Main.rand.NextFloat() * 0.2f);
                        dust15.velocity.X = 0f;
                        dust15.velocity.Y = Math.Abs(dust15.velocity.Y) * 0.25f;
                    }

                    if (this.ai[1] % 60f == 1f)
                    {
                        Main.PlaySound(4, base.Center, 22);
                    }

                    if (this.ai[1] >= 180f)
                    {
                        life = 0;
                        HitEffect(0, 1337.0);
                        checkDead();
                    }
                }
                else
                {
                    if (this.ai[3] > 0f)
                    {
                        var flag87 = dontTakeDamage;
                        switch (type)
                        {
                            case 517:
                                flag87 = (ShieldStrengthTowerSolar != 0);
                                break;
                            case 422:
                                flag87 = (ShieldStrengthTowerVortex != 0);
                                break;
                            case 507:
                                flag87 = (ShieldStrengthTowerNebula != 0);
                                break;
                            case 493:
                                flag87 = (ShieldStrengthTowerStardust != 0);
                                break;
                        }

                        if (flag87 != dontTakeDamage)
                        {
                            Main.PlaySound(SoundID.NPCDeath58, base.position);
                        }
                        else if (this.ai[3] == 1f)
                        {
                            Main.PlaySound(SoundID.NPCDeath3, base.position);
                        }

                        this.ai[3] += 1f;
                        if (this.ai[3] > 120f)
                        {
                            this.ai[3] = 0f;
                        }
                    }

                    switch (type)
                    {
                        case 517:
                            dontTakeDamage = (ShieldStrengthTowerSolar != 0);
                            break;
                        case 422:
                            dontTakeDamage = (ShieldStrengthTowerVortex != 0);
                            break;
                        case 507:
                            dontTakeDamage = (ShieldStrengthTowerNebula != 0);
                            break;
                        case 493:
                            dontTakeDamage = (ShieldStrengthTowerStardust != 0);
                            break;
                    }

                    TargetClosest(false);
                    if (Main.player[target].Distance(base.Center) > 2000f)
                    {
                        localAI[0] += 1f;
                    }

                    if (localAI[0] >= 60f && Main.netMode != 1)
                    {
                        localAI[0] = 0f;
                        netUpdate = true;
                        life = (int) MathHelper.Clamp((float) (life + 200), 0f, (float) lifeMax);
                    }
                    else
                    {
                        localAI[0] = 0f;
                    }

                    base.velocity = new Vector2(0f,
                        (float) Math.Sin((double) (6.28318548f * this.ai[0] / 300f)) * 0.5f);
                    if ((double) base.Bottom.Y > Main.worldSurface * 16.0 - 100.0)
                    {
                        base.position.Y = (float) Main.worldSurface * 16f - (float) base.height - 100f;
                    }

                    this.ai[0] += 1f;
                    if (this.ai[0] >= 300f)
                    {
                        this.ai[0] = 0f;
                        netUpdate = true;
                    }

                    if (type == 493)
                    {
                        if (Main.rand.Next(5) == 0)
                        {
                            var dust16 = Main.dust;
                            var left3 = base.Left;
                            var width66 = base.width;
                            var height62 = base.height / 2;
                            newColor = default(Color);
                            var dust17 = dust16[Dust.NewDust(left3, width66, height62, 241, 0f, 0f, 0, newColor, 1f)];
                            dust17.position = base.Center + Vector2.UnitY.RotatedByRandom(2.0943951606750488) *
                                              new Vector2((float) (base.width / 2), (float) (base.height / 2)) *
                                              (0.8f + Main.rand.NextFloat() * 0.2f);
                            dust17.velocity.X = 0f;
                            dust17.velocity.Y = Math.Abs(dust17.velocity.Y) * 0.25f;
                        }

                        for (var num1421 = 0; num1421 < 3; num1421++)
                        {
                            if (Main.rand.Next(5) == 0)
                            {
                                var dust18 = Main.dust;
                                var position94 =
                                    base.Top + new Vector2((float) (-base.width) * (0.33f - 0.11f * (float) num1421),
                                        -20f);
                                var width67 = (int) ((float) base.width * (0.66f - 0.22f * (float) num1421));
                                newColor = default(Color);
                                var dust19 =
                                    dust18[Dust.NewDust(position94, width67, 20, 135, 0f, 0f, 0, newColor, 1f)];
                                dust19.velocity.X = 0f;
                                dust19.velocity.Y =
                                    (0f - Math.Abs(dust19.velocity.Y - (float) num1421 + base.velocity.Y - 4f)) * 1f;
                                dust19.noGravity = true;
                                dust19.fadeIn = 1f;
                                dust19.scale = 1f + Main.rand.NextFloat() + (float) num1421 * 0.3f;
                            }
                        }

                        if (this.ai[1] > 0f)
                        {
                            this.ai[1] -= 1f;
                        }

                        if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[target].active &&
                            !Main.player[target].dead && Distance(Main.player[target].Center) < 1080f &&
                            Main.player[target].position.Y - base.position.Y < 400f)
                        {
                            var list = new List<int>();
                            if (CountNPCS(405) + CountNPCS(406) < 2)
                            {
                                list.Add(405);
                            }

                            if (CountNPCS(402) < 2)
                            {
                                list.Add(402);
                            }

                            if (CountNPCS(407) < 1)
                            {
                                list.Add(407);
                            }

                            if (list.Count > 0)
                            {
                                var num1422 = Utils.SelectRandom(Main.rand, list.ToArray());
                                this.ai[1] = (float) (30 * Main.rand.Next(5, 16));
                                var num1423 = Main.rand.Next(3, 6);
                                var num1424 = Main.rand.Next(0, 4);
                                var num1425 = 0;
                                var list2 = new List<Tuple<Vector2, int, int>>();
                                var list3 = new List<Vector2>();
                                list2.Add(Tuple.Create(base.Top - Vector2.UnitY * 120f, num1423, 0));
                                var num1426 = 0;
                                var num1427 = list2.Count;
                                while (list2.Count > 0)
                                {
                                    var item = list2[0].Item1;
                                    var num1428 = 1;
                                    var num1429 = 1;
                                    if (num1426 > 0 && num1424 > 0 && (Main.rand.Next(3) != 0 || num1426 == 1))
                                    {
                                        num1429 = Main.rand.Next(Math.Max(1, list2[0].Item2));
                                        num1428++;
                                        num1424--;
                                    }

                                    for (var num1430 = 0; num1430 < num1428; num1430++)
                                    {
                                        var num1431 = list2[0].Item3;
                                        if (num1426 == 0)
                                        {
                                            num1431 = Utils.SelectRandom<int>(Main.rand, -1, 1);
                                        }
                                        else if (num1430 == 1)
                                        {
                                            num1431 *= -1;
                                        }

                                        var num1432 = ((num1426 % 2 == 0) ? 0f : 3.14159274f) +
                                                        (0.5f - Main.rand.NextFloat()) * 0.7853982f +
                                                        (float) num1431 * 0.7853982f *
                                                        (float) (num1426 % 2 == 0).ToDirectionInt();
                                        var scaleFactor22 = 100f + 50f * Main.rand.NextFloat();
                                        var num1433 = list2[0].Item2;
                                        if (num1430 != 0)
                                        {
                                            num1433 = num1429;
                                        }

                                        if (num1426 == 0)
                                        {
                                            num1432 = (0.5f - Main.rand.NextFloat()) * 0.7853982f;
                                            scaleFactor22 = 100f + 100f * Main.rand.NextFloat();
                                        }

                                        var spinningpoint27 = -Vector2.UnitY;
                                        var radians32 = (double) num1432;
                                        vector16 = default(Vector2);
                                        var value60 =
                                            spinningpoint27.RotatedBy(radians32, vector16) * scaleFactor22;
                                        if (num1433 - 1 < 0)
                                        {
                                            value60 = Vector2.Zero;
                                        }

                                        num1425 = Projectile.NewProjectile(item.X, item.Y, value60.X, value60.Y, 540, 0,
                                            0f, Main.myPlayer, (float) (-num1426) * 10f,
                                            0.5f + Main.rand.NextFloat() * 0.5f);
                                        list3.Add(item + value60);
                                        if (num1426 < num1423 && list2[0].Item2 > 0)
                                        {
                                            list2.Add(Tuple.Create(item + value60, num1433 - 1, num1431));
                                        }
                                    }

                                    list2.Remove(list2[0]);
                                    if (--num1427 == 0)
                                    {
                                        num1427 = list2.Count;
                                        num1426++;
                                    }
                                }

                                Main.projectile[num1425].localAI[0] = (float) num1422;
                            }
                            else
                            {
                                this.ai[1] = 30f;
                            }
                        }
                    }

                    if (type == 507)
                    {
                        if (Main.rand.Next(5) == 0)
                        {
                            var dust20 = Main.dust;
                            var left4 = base.Left;
                            var width68 = base.width;
                            var height63 = base.height / 2;
                            newColor = default(Color);
                            var dust21 = dust20[Dust.NewDust(left4, width68, height63, 241, 0f, 0f, 0, newColor, 1f)];
                            dust21.position = base.Center + Vector2.UnitY.RotatedByRandom(2.0943951606750488) *
                                              new Vector2((float) (base.width / 2), (float) (base.height / 2)) *
                                              (0.8f + Main.rand.NextFloat() * 0.2f);
                            dust21.velocity.X = 0f;
                            dust21.velocity.Y = Math.Abs(dust21.velocity.Y) * 0.25f;
                        }

                        for (var num1434 = 0; num1434 < 3; num1434++)
                        {
                            if (Main.rand.Next(5) == 0)
                            {
                                var dust22 = Main.dust;
                                var position95 =
                                    base.Top + new Vector2((float) (-base.width) * (0.33f - 0.11f * (float) num1434),
                                        -20f);
                                var width69 = (int) ((float) base.width * (0.66f - 0.22f * (float) num1434));
                                newColor = default(Color);
                                var dust23 =
                                    dust22[Dust.NewDust(position95, width69, 20, 242, 0f, 0f, 0, newColor, 1f)];
                                dust23.velocity.X = 0f;
                                dust23.velocity.Y =
                                    (0f - Math.Abs(dust23.velocity.Y - (float) num1434 + base.velocity.Y - 4f)) * 1f;
                                dust23.noGravity = true;
                                dust23.fadeIn = 1f;
                                dust23.color = Color.Black;
                                dust23.scale = 1f + Main.rand.NextFloat() + (float) num1434 * 0.3f;
                            }
                        }
                    }

                    if (type == 422)
                    {
                        if (Main.rand.Next(5) == 0)
                        {
                            var dust24 = Main.dust;
                            var left5 = base.Left;
                            var width70 = base.width;
                            var height64 = base.height / 2;
                            newColor = default(Color);
                            var dust25 = dust24[Dust.NewDust(left5, width70, height64, 241, 0f, 0f, 0, newColor, 1f)];
                            dust25.position = base.Center + Vector2.UnitY.RotatedByRandom(2.0943951606750488) *
                                              new Vector2((float) (base.width / 2), (float) (base.height / 2)) *
                                              (0.8f + Main.rand.NextFloat() * 0.2f);
                            dust25.velocity.X = 0f;
                            dust25.velocity.Y = Math.Abs(dust25.velocity.Y) * 0.25f;
                        }

                        for (var num1435 = 0; num1435 < 3; num1435++)
                        {
                            if (Main.rand.Next(5) == 0)
                            {
                                var dust26 = Main.dust;
                                var position96 =
                                    base.Top + new Vector2((float) (-base.width) * (0.33f - 0.11f * (float) num1435),
                                        -20f);
                                var width71 = (int) ((float) base.width * (0.66f - 0.22f * (float) num1435));
                                newColor = default(Color);
                                var dust27 =
                                    dust26[Dust.NewDust(position96, width71, 20, 229, 0f, 0f, 0, newColor, 1f)];
                                dust27.velocity.X = 0f;
                                dust27.velocity.Y =
                                    (0f - Math.Abs(dust27.velocity.Y - (float) num1435 + base.velocity.Y - 4f)) * 1f;
                                dust27.noGravity = true;
                                dust27.fadeIn = 1f;
                                dust27.color = Color.Black;
                                dust27.scale = 1f + Main.rand.NextFloat() + (float) num1435 * 0.3f;
                            }
                        }

                        if (this.ai[1] > 0f)
                        {
                            this.ai[1] -= 1f;
                        }

                        if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[target].active &&
                            !Main.player[target].dead && Distance(Main.player[target].Center) < 3240f &&
                            !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
                        {
                            this.ai[1] = (float) (60 + Main.rand.Next(120));
                            var point9 = Main.player[target].Top.ToTileCoordinates();
                            var flag88 = CountNPCS(427) + CountNPCS(426) < 14;
                            for (var num1436 = 0; num1436 < 10; num1436++)
                            {
                                if (WorldGen.SolidTile(point9.X, point9.Y))
                                {
                                    break;
                                }

                                if (point9.Y <= 10)
                                {
                                    break;
                                }

                                point9.Y--;
                            }

                            if (flag88)
                            {
                                Projectile.NewProjectile((float) (point9.X * 16 + 8), (float) (point9.Y * 16 + 24), 0f,
                                    0f, 579, 0, 0f, Main.myPlayer, 0f, 0f);
                            }
                            else
                            {
                                Projectile.NewProjectile((float) (point9.X * 16 + 8), (float) (point9.Y * 16 + 17), 0f,
                                    0f, 578, 0, 1f, Main.myPlayer, 0f, 0f);
                            }
                        }

                        if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[target].active &&
                            !Main.player[target].dead && Distance(Main.player[target].Center) < 1080f &&
                            Main.player[target].position.Y - base.position.Y < 400f &&
                            CountNPCS(427) + CountNPCS(426) * 3 + CountNPCS(428) < 20)
                        {
                            this.ai[1] = (float) (420 + Main.rand.Next(360));
                            var point10 = base.Center.ToTileCoordinates();
                            var point11 = Main.player[target].Center.ToTileCoordinates();
                            var vector234 = Main.player[target].Center - base.Center;
                            var num1437 = 20;
                            var num1438 = 3;
                            var num1439 = 8;
                            var num1440 = 2;
                            var num1441 = 0;
                            var flag89 = false;
                            if (vector234.Length() > 2000f)
                            {
                                flag89 = true;
                            }

                            while (!flag89 && num1441 < 100)
                            {
                                num1441++;
                                var num1442 = Main.rand.Next(point11.X - num1437, point11.X + num1437 + 1);
                                var num1443 = Main.rand.Next(point11.Y - num1437, point11.Y + num1437 + 1);
                                if ((num1443 < point11.Y - num1439 || num1443 > point11.Y + num1439 ||
                                     num1442 < point11.X - num1439 || num1442 > point11.X + num1439) &&
                                    (num1443 < point10.Y - num1438 || num1443 > point10.Y + num1438 ||
                                     num1442 < point10.X - num1438 || num1442 > point10.X + num1438) &&
                                    !Main.tile[num1442, num1443].nactive())
                                {
                                    var flag90 = true;
                                    if (flag90 && Main.tile[num1442, num1443].lava())
                                    {
                                        flag90 = false;
                                    }

                                    if (flag90 && Collision.SolidTiles(num1442 - num1440, num1442 + num1440,
                                            num1443 - num1440, num1443 + num1440))
                                    {
                                        flag90 = false;
                                    }

                                    if (flag90 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center,
                                            0, 0))
                                    {
                                        flag90 = false;
                                    }

                                    if (flag90)
                                    {
                                        Projectile.NewProjectile((float) (num1442 * 16 + 8), (float) (num1443 * 16 + 8),
                                            0f, 0f, 579, 0, 0f, Main.myPlayer, 0f, 0f);
                                        flag89 = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    if (type == 517)
                    {
                        if (Main.rand.Next(5) == 0)
                        {
                            var dust28 = Main.dust;
                            var left6 = base.Left;
                            var width72 = base.width;
                            var height65 = base.height / 2;
                            newColor = default(Color);
                            var dust29 = dust28[Dust.NewDust(left6, width72, height65, 241, 0f, 0f, 0, newColor, 1f)];
                            dust29.position = base.Center + Vector2.UnitY.RotatedByRandom(2.0943951606750488) *
                                              new Vector2((float) (base.width / 2), (float) (base.height / 2)) *
                                              (0.8f + Main.rand.NextFloat() * 0.2f);
                            dust29.velocity.X = 0f;
                            dust29.velocity.Y = Math.Abs(dust29.velocity.Y) * 0.25f;
                        }

                        for (var num1444 = 0; num1444 < 3; num1444++)
                        {
                            if (Main.rand.Next(5) == 0)
                            {
                                var dust30 = Main.dust;
                                var position97 =
                                    base.Top + new Vector2((float) (-base.width) * (0.33f - 0.11f * (float) num1444),
                                        -20f);
                                var width73 = (int) ((float) base.width * (0.66f - 0.22f * (float) num1444));
                                newColor = default(Color);
                                var dust31 = dust30[Dust.NewDust(position97, width73, 20, 6, 0f, 0f, 0, newColor, 1f)];
                                dust31.velocity.X = 0f;
                                dust31.velocity.Y =
                                    (0f - Math.Abs(dust31.velocity.Y - (float) num1444 + base.velocity.Y - 4f)) * 1f;
                                dust31.noGravity = true;
                                dust31.fadeIn = 1f;
                                dust31.scale = 1f + Main.rand.NextFloat() + (float) num1444 * 0.3f;
                            }
                        }

                        if (this.ai[1] > 0f)
                        {
                            this.ai[1] -= 1f;
                        }

                        if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[target].active &&
                            !Main.player[target].dead && Distance(Main.player[target].Center) < 1080f &&
                            Main.player[target].position.Y - base.position.Y < 700f)
                        {
                            var vector235 = base.Top + new Vector2((float) (-base.width) * 0.33f, -20f) +
                                                new Vector2((float) base.width * 0.66f, 20f) *
                                                Utils.RandomVector2(Main.rand, 0f, 1f);
                            var velocity7 = -Vector2.UnitY.RotatedByRandom(0.78539818525314331) *
                                                (7f + Main.rand.NextFloat() * 5f);
                            var num1445 = NewNPC((int) vector235.X, (int) vector235.Y, 519, whoAmI, 0f, 0f, 0f, 0f,
                                255);
                            Main.npc[num1445].velocity = velocity7;
                            Main.npc[num1445].netUpdate = true;
                            this.ai[1] = 60f;
                        }
                    }
                }
            }
            else if (aiStyle == 95)
            {
                var num1446 = 300f;
                if (base.velocity.Length() > 4f)
                {
                    base.velocity *= 0.95f;
                }

                base.velocity *= 0.99f;
                this.ai[0] += 1f;
                scale = 1f + 0.3f * (this.ai[0] / num1446);
                if (this.ai[0] >= num1446)
                {
                    if (Main.netMode != 1)
                    {
                        Transform(405);
                    }
                }
                else
                {
                    rotation += base.velocity.X * 0.1f;
                    if (this.ai[0] > 20f)
                    {
                        var center41 = base.Center;
                        var num1447 = (int) (this.ai[0] / (num1446 / 2f));
                        for (var num1448 = 0; num1448 < num1447 + 1; num1448++)
                        {
                            if (Main.rand.Next(2) != 0)
                            {
                                var num1449 = 226;
                                var num1450 = 0.4f;
                                if (num1448 % 2 == 1)
                                {
                                    num1449 = 226;
                                    num1450 = 0.65f;
                                }

                                var vector236 =
                                    center41 + ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() *
                                    (12f - (float) (num1447 * 2));
                                var position98 = vector236 - Vector2.One * 12f;
                                var num1451 = num1449;
                                var speedX30 = base.velocity.X / 2f;
                                var speedY29 = base.velocity.Y / 2f;
                                newColor = default(Color);
                                var num1452 = Dust.NewDust(position98, 24, 24, num1451, speedX30, speedY29, 0, newColor,
                                    1f);
                                Main.dust[num1452].position -= new Vector2(2f);
                                Main.dust[num1452].velocity =
                                    Vector2.Normalize(center41 - vector236) * 1.5f * (10f - (float) num1447 * 2f) / 10f;
                                Main.dust[num1452].noGravity = true;
                                Main.dust[num1452].scale = num1450;
                                Main.dust[num1452].customData = this;
                            }
                        }
                    }
                }
            }
            else if (aiStyle == 96)
            {
                var num1453 = 5f;
                var moveSpeed = 0.15f;
                TargetClosest(true);
                var desiredVelocity3 = Main.player[target].Center - base.Center + new Vector2(0f, -250f);
                var num1454 = desiredVelocity3.Length();
                if (num1454 < 20f)
                {
                    desiredVelocity3 = base.velocity;
                }
                else if (num1454 < 40f)
                {
                    desiredVelocity3.Normalize();
                    desiredVelocity3 *= num1453 * 0.35f;
                }
                else if (num1454 < 80f)
                {
                    desiredVelocity3.Normalize();
                    desiredVelocity3 *= num1453 * 0.65f;
                }
                else
                {
                    desiredVelocity3.Normalize();
                    desiredVelocity3 *= num1453;
                }

                SimpleFlyMovement(desiredVelocity3, moveSpeed);
                rotation = base.velocity.X * 0.1f;
                if ((this.ai[0] += 1f) >= 70f)
                {
                    this.ai[0] = 0f;
                    if (Main.netMode != 1)
                    {
                        var vector237 = Vector2.Zero;
                        while (Math.Abs(vector237.X) < 1.5f)
                        {
                            vector237 = Vector2.UnitY.RotatedByRandom(1.5707963705062866) * new Vector2(5f, 3f);
                        }

                        Projectile.NewProjectile(base.Center.X, base.Center.Y, vector237.X, vector237.Y, 539, 60, 0f,
                            Main.myPlayer, 0f, (float) whoAmI);
                    }
                }
            }
            else if (aiStyle == 97)
            {
                var num1455 = 7f;
                var num1456 = 480;
                if (localAI[2] < 180f)
                {
                    localAI[2] += 1f;
                    if (Main.netMode != 1 && localAI[2] % 60f == 0f)
                    {
                        var vector238 = Vector2.Zero;
                        while (Math.Abs(vector238.X) < 1.5f)
                        {
                            vector238 = Vector2.UnitY.RotatedByRandom(1.5707963705062866) * new Vector2(4f, 2.5f);
                        }

                        Projectile.NewProjectile(base.Center.X, base.Center.Y, vector238.X, vector238.Y, 574, 0, 0f,
                            Main.myPlayer, 0f, (float) whoAmI);
                    }
                }

                if (localAI[1] == 1f)
                {
                    localAI[1] = 0f;
                    if (Main.rand.Next(4) == 0)
                    {
                        this.ai[0] = (float) num1456;
                    }
                }

                TargetClosest(true);
                rotation = Math.Abs(base.velocity.X) * (float) base.direction * 0.1f;
                spriteDirection = -base.direction;
                var value61 = base.Center + new Vector2((float) (base.direction * 20), 6f);
                var vector239 = Main.player[target].Center - value61;
                var flag91 = Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1);
                var flag92 = false;
                if (vector239.Length() > 400f || !flag91)
                {
                    var value62 = vector239;
                    if (value62.Length() > num1455)
                    {
                        value62.Normalize();
                        value62 *= num1455;
                    }

                    var num1457 = 30;
                    base.velocity = (base.velocity * (float) (num1457 - 1) + value62) / (float) num1457;
                }
                else
                {
                    base.velocity *= 0.98f;
                    flag92 = true;
                }

                if (this.ai[2] != 0f && this.ai[3] != 0f)
                {
                    Main.PlaySound(SoundID.Item8, base.Center);
                    for (var num1458 = 0; num1458 < 20; num1458++)
                    {
                        var position99 = base.position;
                        var width74 = base.width;
                        var height66 = base.height;
                        newColor = default(Color);
                        var num1459 = Dust.NewDust(position99, width74, height66, 242, 0f, 0f, 0, newColor, 1f);
                        Main.dust[num1459].velocity *= 3f;
                        Main.dust[num1459].noGravity = true;
                        Main.dust[num1459].scale = 2.5f;
                    }

                    base.Center = new Vector2(this.ai[2] * 16f, this.ai[3] * 16f);
                    base.velocity = Vector2.Zero;
                    this.ai[2] = 0f;
                    this.ai[3] = 0f;
                    Main.PlaySound(SoundID.Item8, base.Center);
                    for (var num1460 = 0; num1460 < 20; num1460++)
                    {
                        var position100 = base.position;
                        var width75 = base.width;
                        var height67 = base.height;
                        newColor = default(Color);
                        var num1461 = Dust.NewDust(position100, width75, height67, 242, 0f, 0f, 0, newColor, 1f);
                        Main.dust[num1461].velocity *= 3f;
                        Main.dust[num1461].noGravity = true;
                        Main.dust[num1461].scale = 2.5f;
                    }
                }

                this.ai[0] += 1f;
                if (this.ai[0] >= (float) num1456 && Main.netMode != 1)
                {
                    this.ai[0] = 0f;
                    var point12 = base.Center.ToTileCoordinates();
                    var point13 = Main.player[target].Center.ToTileCoordinates();
                    var num1462 = 20;
                    var num1463 = 3;
                    var num1464 = 10;
                    var num1465 = 1;
                    var num1466 = 0;
                    var flag93 = false;
                    if (vector239.Length() > 2000f)
                    {
                        flag93 = true;
                    }

                    while (!flag93 && num1466 < 100)
                    {
                        num1466++;
                        var num1467 = Main.rand.Next(point13.X - num1462, point13.X + num1462 + 1);
                        var num1468 = Main.rand.Next(point13.Y - num1462, point13.Y + num1462 + 1);
                        if ((num1468 < point13.Y - num1464 || num1468 > point13.Y + num1464 ||
                             num1467 < point13.X - num1464 || num1467 > point13.X + num1464) &&
                            (num1468 < point12.Y - num1463 || num1468 > point12.Y + num1463 ||
                             num1467 < point12.X - num1463 || num1467 > point12.X + num1463) &&
                            !Main.tile[num1467, num1468].nactive())
                        {
                            var flag94 = true;
                            if (flag94 && Main.tile[num1467, num1468].lava())
                            {
                                flag94 = false;
                            }

                            if (flag94 && Collision.SolidTiles(num1467 - num1465, num1467 + num1465, num1468 - num1465,
                                    num1468 + num1465))
                            {
                                flag94 = false;
                            }

                            if (flag94)
                            {
                                this.ai[1] = 20f;
                                this.ai[2] = (float) num1467;
                                this.ai[3] = (float) num1468;
                                flag93 = true;
                                break;
                            }
                        }
                    }

                    netUpdate = true;
                }

                if (flag92 && base.velocity.Length() < 2f && Main.netMode != 1)
                {
                    localAI[0] += 1f;
                    if (localAI[0] >= 13f)
                    {
                        return;
                    }
                }
            }
            else if (aiStyle == 98)
            {
                noTileCollide = false;
                if (this.ai[0] == 0f)
                {
                    TargetClosest(true);
                    this.ai[0] = 1f;
                    this.ai[1] = 0f;
                    this.ai[2] = 0f;
                    this.ai[3] = 0f;
                }

                var flag95 = Collision.CanHit(base.Center, 1, 1, Main.player[target].position, 1, 1);
                var flag96 = true;
                if (!flag95 || Main.player[target].dead)
                {
                    flag96 = false;
                }
                else
                {
                    var num1469 = (int) (Main.player[target].Center.X / 16f);
                    var num1470 = (int) (Main.player[target].Center.Y / 16f);
                    for (var num1471 = num1469 - 2; num1471 <= num1469 + 2; num1471++)
                    {
                        for (var num1472 = num1470; num1472 <= num1470 + 25; num1472++)
                        {
                            if (WorldGen.SolidTile2(num1471, num1472))
                            {
                                flag96 = false;
                            }
                        }
                    }
                }

                if (this.ai[0] < 0f)
                {
                    var vector240 = Main.player[target].Center - base.Center;
                    var num1473 = vector240.Length();
                    if (this.ai[0] == -1f)
                    {
                        vector240.Normalize();
                        if (vector240.HasNaNs())
                        {
                            vector240 = new Vector2((float) base.direction, 0f);
                        }

                        var num1474 = 8f + num1473 / 100f;
                        var num1475 = 12f;
                        if (Main.player[target].velocity.Length() > num1475)
                        {
                            num1475 = Main.player[target].velocity.Length();
                        }

                        if (num1474 > num1475)
                        {
                            num1474 = num1475;
                        }

                        vector240 *= num1474;
                        var num1476 = 10f;
                        base.velocity = (base.velocity * (num1476 - 1f) + vector240) / num1476;
                        for (var num1477 = 0; num1477 < 200; num1477++)
                        {
                            if (Main.npc[num1477].active && Main.npc[num1477].type == type && num1477 != whoAmI)
                            {
                                var vector241 = Main.npc[num1477].Center - base.Center;
                                if (vector241.Length() < 40f)
                                {
                                    vector241.Normalize();
                                    vector241 *= 1f;
                                    base.velocity -= vector241;
                                }
                            }
                        }

                        rotation += base.velocity.X * 0.03f;
                        if ((double) rotation < -6.2831)
                        {
                            rotation += 6.2831f;
                        }

                        if ((double) rotation > 6.2831)
                        {
                            rotation -= 6.2831f;
                        }

                        if (base.velocity.X > 0f)
                        {
                            base.direction = 1;
                        }
                        else if (base.velocity.X < 0f)
                        {
                            base.direction = -1;
                        }

                        spriteDirection = base.direction;
                    }

                    this.ai[1] += 1f;
                    if (this.ai[1] >= 60f && !flag96)
                    {
                        this.ai[0] = 0f;
                    }
                }
                else if (this.ai[0] == 2f)
                {
                    rotation *= 0.92f;
                    if ((double) Math.Abs(rotation) < 0.02)
                    {
                        rotation = 0f;
                    }

                    var num1478 = 300;
                    var num1479 = Math.Abs(base.Center.X - Main.player[target].Center.X);
                    if (num1479 < (float) num1478 &&
                        Collision.CanHit(base.Center, 1, 1, Main.player[target].position, 1, 1))
                    {
                        base.velocity.X *= 0.96f;
                        base.velocity.Y *= 0.96f;
                        this.ai[1] += 1f;
                        if (this.ai[1] == 20f)
                        {
                            if (Main.netMode != 1)
                            {
                                NewNPC((int) base.Center.X, (int) base.Center.Y + 26, 516, 0, 0f, 0f, 0f, 0f, target);
                            }
                        }
                        else if (this.ai[1] >= 30f)
                        {
                            this.ai[1] = 0f;
                        }

                        for (var num1480 = 0; num1480 < 200; num1480++)
                        {
                            if (Main.npc[num1480].active && Main.npc[num1480].type == type && num1480 != whoAmI)
                            {
                                var vector242 = Main.npc[num1480].Center - base.Center;
                                if (vector242.Length() < 100f)
                                {
                                    vector242.Normalize();
                                    vector242 *= 0.1f;
                                    base.velocity -= vector242;
                                }
                            }
                        }
                    }
                    else
                    {
                        this.ai[0] = 0f;
                    }

                    if (Main.player[target].Center.X < base.Center.X)
                    {
                        base.direction = -1;
                    }
                    else if (Main.player[target].Center.X > base.Center.X)
                    {
                        base.direction = 1;
                    }

                    spriteDirection = base.direction;
                }

                if (this.ai[0] == 1f)
                {
                    rotation *= 0.92f;
                    if ((double) Math.Abs(rotation) < 0.02)
                    {
                        rotation = 0f;
                    }

                    if (flag96)
                    {
                        this.ai[0] = -1f;
                        this.ai[1] = 0f;
                        this.ai[2] = 0f;
                        this.ai[3] = 0f;
                    }

                    var num1481 = 300;
                    for (var num1482 = 0; num1482 < 200; num1482++)
                    {
                        if (Main.npc[num1482].active && Main.npc[num1482].type == type && num1482 != whoAmI)
                        {
                            var vector243 = Main.npc[num1482].Center - base.Center;
                            if (vector243.Length() < 50f)
                            {
                                vector243.Normalize();
                                vector243 *= 0.1f;
                                base.velocity -= vector243;
                                base.velocity.X -= vector243.X * 1f;
                            }
                        }
                    }

                    var num1483 = 800;
                    var num1484 = Math.Abs(base.Center.X - Main.player[target].Center.X);
                    if (num1484 < (float) num1481 && flag95)
                    {
                        this.ai[0] = 2f;
                        this.ai[1] = 0f;
                    }
                    else
                    {
                        if (collideX)
                        {
                            base.velocity.X *= -0.5f;
                            this.ai[1] = 60f;
                            base.direction *= -1;
                        }

                        if (this.ai[1] > 0f)
                        {
                            this.ai[1] -= 1f;
                        }
                        else if (flag95)
                        {
                            if (base.Center.X > Main.player[target].Center.X)
                            {
                                base.direction = -1;
                            }
                            else
                            {
                                base.direction = 1;
                            }
                        }
                        else if (num1484 > (float) num1483)
                        {
                            if (base.Center.X > Main.player[target].Center.X)
                            {
                                base.direction = -1;
                            }
                            else
                            {
                                base.direction = 1;
                            }
                        }

                        var num1485 = 2f;
                        var num1486 = 0.1f;
                        if (base.velocity.X > num1485 || base.velocity.X < 0f - num1485)
                        {
                            if (Math.Abs(base.velocity.X) < num1485 + num1486 * 2f)
                            {
                                if (base.velocity.X < 0f)
                                {
                                    base.velocity.X = 0f - num1485;
                                }
                                else
                                {
                                    base.velocity.X = num1485;
                                }
                            }
                            else
                            {
                                base.velocity.X *= 0.99f;
                            }
                        }
                        else
                        {
                            base.velocity.X += (float) base.direction * num1486;
                        }

                        spriteDirection = base.direction;
                    }

                    if (collideY)
                    {
                        this.ai[2] = 60f;
                        directionY *= -1;
                        base.velocity.Y *= -0.5f;
                    }

                    if (this.ai[2] > 0f)
                    {
                        this.ai[2] -= 1f;
                    }
                    else
                    {
                        var num1487 = (int) (base.Center.Y / 16f);
                        var num1488 = (int) ((base.Center.X - 8f) / 16f);
                        var num1489 = 30;
                        var num1490 = 15;
                        var num1491 = 0;
                        for (var num1492 = num1487; num1492 < num1487 + num1489; num1492++)
                        {
                            for (var num1493 = num1488; num1493 <= num1488 + 1; num1493++)
                            {
                                if (WorldGen.SolidTile(num1493, num1492) || Main.tile[num1493, num1492].liquid > 0)
                                {
                                    num1491 = num1492 - num1487;
                                    break;
                                }
                            }

                            if (num1491 != 0)
                            {
                                break;
                            }
                        }

                        if (num1491 == 0)
                        {
                            directionY = 1;
                        }
                        else if (num1491 < num1490)
                        {
                            directionY = -1;
                        }
                    }

                    var num1494 = 2f;
                    var num1495 = 0.1f;
                    if (base.velocity.Y > num1494 || base.velocity.Y < 0f - num1494)
                    {
                        if (Math.Abs(base.velocity.Y) < num1494 + num1495 * 2f)
                        {
                            if (base.velocity.Y < 0f)
                            {
                                base.velocity.Y = 0f - num1494;
                            }
                            else
                            {
                                base.velocity.Y = num1494;
                            }
                        }
                        else
                        {
                            base.velocity.Y *= 0.99f;
                        }
                    }
                    else
                    {
                        base.velocity.Y += (float) directionY * num1495;
                    }
                }
            }
            else if (aiStyle == 99)
            {
                if (base.velocity.Y == 0f && this.ai[0] == 0f)
                {
                    this.ai[0] = 1f;
                    this.ai[1] = 0f;
                    netUpdate = true;
                }
                else if (this.ai[0] == 1f)
                {
                    base.velocity = Vector2.Zero;
                    base.position = oldPosition;
                    this.ai[1] += 1f;
                    if (this.ai[1] >= 5f)
                    {
                        HitEffect(0, 9999.0);
                        active = false;
                    }
                }
                else
                {
                    base.velocity.Y += 0.2f;
                    if (base.velocity.Y > 12f)
                    {
                        base.velocity.Y = 12f;
                    }

                    rotation = base.velocity.ToRotation() - 1.57079637f;
                    if (type == 519)
                    {
                        if (localAI[0] == 0f)
                        {
                            localAI[0] = 1f;
                            for (var num1496 = 0; num1496 < 13; num1496++)
                            {
                                var position101 = base.position;
                                var width76 = base.width;
                                var height68 = base.height;
                                var speedX31 = base.velocity.X * 0.5f;
                                var speedY30 = base.velocity.Y * 0.5f;
                                newColor = default(Color);
                                var num1497 = Dust.NewDust(position101, width76, height68, 6, speedX31, speedY30, 90,
                                    newColor, 2.5f);
                                Main.dust[num1497].noGravity = true;
                                Main.dust[num1497].fadeIn = 1f;
                                Main.dust[num1497].velocity *= 4f;
                                Main.dust[num1497].noLight = true;
                            }
                        }

                        for (var num1498 = 0; num1498 < 3; num1498++)
                        {
                            if (Main.rand.Next(3) < 2)
                            {
                                var position102 = base.position;
                                var width77 = base.width;
                                var height69 = base.height;
                                var speedX32 = base.velocity.X * 0.5f;
                                var speedY31 = base.velocity.Y * 0.5f;
                                newColor = default(Color);
                                var num1499 = Dust.NewDust(position102, width77, height69, 6, speedX32, speedY31, 90,
                                    newColor, 2.5f);
                                Main.dust[num1499].noGravity = true;
                                Main.dust[num1499].velocity *= 0.2f;
                                Main.dust[num1499].fadeIn = 1f;
                                if (Main.rand.Next(6) == 0)
                                {
                                    Main.dust[num1499].velocity *= 30f;
                                    Main.dust[num1499].noGravity = false;
                                    Main.dust[num1499].noLight = true;
                                }
                                else
                                {
                                    Main.dust[num1499].velocity =
                                        DirectionFrom(Main.dust[num1499].position) *
                                        Main.dust[num1499].velocity.Length();
                                }
                            }
                        }
                    }
                }
            }
            else if (aiStyle == 100)
            {
                if (base.velocity.Y == 0f && this.ai[0] >= 0f)
                {
                    this.ai[0] = -1f;
                    this.ai[1] = 0f;
                    netUpdate = true;
                }
                else if (this.ai[0] == -1f)
                {
                    base.velocity = Vector2.Zero;
                    base.position = oldPosition;
                    this.ai[1] += 1f;
                    if (this.ai[1] >= 5f)
                    {
                        HitEffect(0, 9999.0);
                        active = false;
                    }
                }
                else
                {
                    rotation = base.velocity.ToRotation() - 1.57079637f;
                    if (type == 522)
                    {
                        if (localAI[0] == 0f)
                        {
                            localAI[0] = 1f;
                            base.velocity.X = this.ai[2];
                            base.velocity.Y = this.ai[3];
                            for (var num1500 = 0; num1500 < 13; num1500++)
                            {
                                var position103 = base.position;
                                var width78 = base.width;
                                var height70 = base.height;
                                var speedX33 = base.velocity.X * 0.5f;
                                var speedY32 = base.velocity.Y * 0.5f;
                                newColor = default(Color);
                                var num1501 = Dust.NewDust(position103, width78, height70, 261, speedX33, speedY32, 90,
                                    newColor, 2.5f);
                                Main.dust[num1501].noGravity = true;
                                Main.dust[num1501].fadeIn = 1f;
                                Main.dust[num1501].velocity *= 4f;
                                Main.dust[num1501].noLight = true;
                            }
                        }

                        for (var num1502 = 0; num1502 < 2; num1502++)
                        {
                            if (Main.rand.Next(10 - (int) Math.Min(7f, base.velocity.Length())) < 1)
                            {
                                var position104 = base.position;
                                var width79 = base.width;
                                var height71 = base.height;
                                var speedX34 = base.velocity.X * 0.5f;
                                var speedY33 = base.velocity.Y * 0.5f;
                                newColor = default(Color);
                                var num1503 = Dust.NewDust(position104, width79, height71, 261, speedX34, speedY33, 90,
                                    newColor, 2.5f);
                                Main.dust[num1503].noGravity = true;
                                Main.dust[num1503].velocity *= 0.2f;
                                Main.dust[num1503].fadeIn = 0.4f;
                                if (Main.rand.Next(6) == 0)
                                {
                                    Main.dust[num1503].velocity *= 5f;
                                    Main.dust[num1503].noLight = true;
                                }
                                else
                                {
                                    Main.dust[num1503].velocity =
                                        DirectionFrom(Main.dust[num1503].position) *
                                        Main.dust[num1503].velocity.Length();
                                }
                            }
                        }

                        dontTakeDamage = (this.ai[0] >= 0f && this.ai[0] <= 20f);
                        if (this.ai[0] >= 0f)
                        {
                            this.ai[0] += 1f;
                            if (this.ai[0] > 60f)
                            {
                                var velocity8 = base.velocity;
                                var radians33 = (double) this.ai[1];
                                vector16 = default(Vector2);
                                base.velocity = velocity8.RotatedBy(radians33, vector16);
                            }

                            if (this.ai[0] > 120f)
                            {
                                base.velocity *= 0.98f;
                            }

                            if (base.velocity.Length() < 0.2f)
                            {
                                base.velocity = Vector2.Zero;
                            }
                        }
                    }
                }
            }
            else if (aiStyle == 101)
            {
                var num1504 = 420f;
                var num1505 = 120f;
                var num1506 = 1;
                var value63 = 0f;
                var value64 = 1f;
                var num1507 = 4f;
                var flag97 = !(this.ai[1] >= 0f) || !Main.npc[(int) this.ai[0]].active;
                if (Main.npc[(int) this.ai[0]].type == 439)
                {
                    if (Main.npc[(int) this.ai[0]].life < Main.npc[(int) this.ai[0]].lifeMax / 2)
                    {
                        num1506 = 2;
                    }

                    if (Main.npc[(int) this.ai[0]].life < Main.npc[(int) this.ai[0]].lifeMax / 4)
                    {
                        num1506 = 3;
                    }
                }
                else
                {
                    flag97 = true;
                }

                this.ai[1] += (float) num1506;
                var num1508 = this.ai[1] / num1505;
                num1508 = MathHelper.Clamp(num1508, 0f, 1f);
                base.position = base.Center;
                scale = MathHelper.Lerp(value63, value64, num1508);
                base.Center = base.position;
                alpha = (int) (255f - num1508 * 255f);
                if (Main.rand.Next(6) == 0)
                {
                    var vector244 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                    var dust32 = Main.dust;
                    var position105 = base.Center - vector244 * 20f;
                    newColor = default(Color);
                    var dust33 = dust32[Dust.NewDust(position105, 0, 0, 27, 0f, 0f, 0, newColor, 1f)];
                    dust33.noGravity = true;
                    dust33.position = base.Center - vector244 * (float) Main.rand.Next(10, 21) * scale;
                    var dust34 = dust33;
                    var spinningpoint28 = vector244;
                    vector16 = default(Vector2);
                    dust34.velocity = spinningpoint28.RotatedBy(1.5707963705062866, vector16) * 4f;
                    dust33.scale = 0.5f + Main.rand.NextFloat();
                    dust33.fadeIn = 0.5f;
                }

                if (Main.rand.Next(6) == 0)
                {
                    var vector245 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                    var dust35 = Main.dust;
                    var position106 = base.Center - vector245 * 30f;
                    newColor = default(Color);
                    var dust36 = dust35[Dust.NewDust(position106, 0, 0, 240, 0f, 0f, 0, newColor, 1f)];
                    dust36.noGravity = true;
                    dust36.position = base.Center - vector245 * 20f * scale;
                    var dust37 = dust36;
                    var spinningpoint29 = vector245;
                    vector16 = default(Vector2);
                    dust37.velocity = spinningpoint29.RotatedBy(-1.5707963705062866, vector16) * 2f;
                    dust36.scale = 0.5f + Main.rand.NextFloat();
                    dust36.fadeIn = 0.5f;
                }

                if (Main.rand.Next(6) == 0)
                {
                    var vector246 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                    var dust38 = Main.dust;
                    var position107 = base.Center - vector246 * 30f;
                    newColor = default(Color);
                    var dust39 = dust38[Dust.NewDust(position107, 0, 0, 240, 0f, 0f, 0, newColor, 1f)];
                    dust39.position = base.Center - vector246 * 20f * scale;
                    dust39.velocity = Vector2.Zero;
                    dust39.scale = 0.5f + Main.rand.NextFloat();
                    dust39.fadeIn = 0.5f;
                    dust39.noLight = true;
                }

                localAI[0] += 0.05235988f;
                var array7 = localAI;
                var unitY6 = Vector2.UnitY;
                var radians34 = (double) (this.ai[1] * 6.28318548f / 60f);
                vector16 = default(Vector2);
                array7[1] = 0.25f + unitY6.RotatedBy(radians34, vector16).Y * 0.25f;
                if (this.ai[1] >= num1504)
                {
                    flag97 = true;
                    if (Main.netMode != 1)
                    {
                        for (var num1509 = 0; num1509 < 4; num1509++)
                        {
                            var spinningpoint30 = new Vector2(0f, 0f - num1507);
                            var radians35 = (double) (1.57079637f * (float) num1509);
                            vector16 = default(Vector2);
                            var vector247 = spinningpoint30.RotatedBy(radians35, vector16);
                            Projectile.NewProjectile(base.Center.X, base.Center.Y, vector247.X, vector247.Y, 593,
                                damage, 0f, Main.myPlayer, 0f, 0f);
                        }
                    }
                }

                if (flag97)
                {
                    HitEffect(0, 9999.0);
                    active = false;
                }
            }
            else if (aiStyle == 102)
            {
                var flag98 = false;
                var flag99 = false;
                var flag100 = true;
                var flag101 = false;
                var num1510 = 4;
                var num1511 = 3;
                var num1512 = 0;
                var num1513 = 0.2f;
                var num1514 = 2f;
                var num1515 = -0.2f;
                var num1516 = -4f;
                var flag102 = true;
                var num1517 = 2f;
                var num1518 = 0.1f;
                var num1519 = 1f;
                var num1520 = 0.04f;
                var flag103 = false;
                var num1521 = 0.96f;
                var flag104 = true;
                if (type == 541)
                {
                    flag102 = false;
                    rotation = base.velocity.X * 0.04f;
                    spriteDirection = ((base.direction > 0) ? 1 : (-1));
                    num1512 = 3;
                    num1515 = -0.1f;
                    num1513 = 0.1f;
                    var num1522 = (float) life / (float) lifeMax;
                    num1517 += (1f - num1522) * 2f;
                    num1518 += (1f - num1522) * 0.02f;
                    if (num1522 < 0.5f)
                    {
                        knockBackResist = 0f;
                    }

                    var vector248 = base.BottomLeft + new Vector2(0f, -12f);
                    var bottomRight = base.BottomRight;
                    var value65 = new Vector2((float) (-spriteDirection * 10), -4f);
                    var color = new Color(222, 108, 48) * 0.7f;
                    var num1523 = -0.3f + MathHelper.Max(base.velocity.Y * 2f, 0f);
                    for (var num1524 = 0; num1524 < 2; num1524++)
                    {
                        if (Main.rand.Next(2) != 0)
                        {
                            var dust40 = Main.dust;
                            var bottom2 = base.Bottom;
                            newColor = default(Color);
                            var dust41 = dust40[Dust.NewDust(bottom2, 0, 0, 268, 0f, 0f, 0, newColor, 1f)];
                            dust41.position =
                                new Vector2(MathHelper.Lerp(vector248.X, bottomRight.X, Main.rand.NextFloat()),
                                    MathHelper.Lerp(vector248.Y, bottomRight.Y, Main.rand.NextFloat())) + value65;
                            if (num1524 == 1)
                            {
                                dust41.position = base.Bottom + Utils.RandomVector2(Main.rand, -6f, 6f);
                            }

                            dust41.color = color;
                            dust41.scale = 0.8f;
                            dust41.velocity.Y += num1523;
                            dust41.velocity.X += (float) spriteDirection * 0.2f;
                        }
                    }

                    localAI[2] = 0f;
                    if (this.ai[0] < 0f)
                    {
                        this.ai[0] = MathHelper.Min(this.ai[0] + 1f, 0f);
                    }

                    if (this.ai[0] > 0f)
                    {
                        flag104 = false;
                        flag103 = true;
                        this.ai[0] += 1f;
                        if (this.ai[0] >= 135f)
                        {
                            this.ai[0] = -300f;
                            netUpdate = true;
                        }

                        var vector259 = base.Center + Vector2.UnitX * (float) base.direction * 200f;
                        var vector249 = base.Center + Vector2.UnitX * (float) base.direction * 50f -
                                            Vector2.UnitY * 6f;
                        if (this.ai[0] == 54f && Main.netMode != 1)
                        {
                            var list4 = new List<Point>();
                            var vec5 = Main.player[target].Center +
                                           new Vector2(Main.player[target].velocity.X * 30f, 0f);
                            var point14 = vec5.ToTileCoordinates();
                            List<Point>.Enumerator enumerator;
                            for (var num1525 = 0; num1525 < 1000; num1525++)
                            {
                                if (list4.Count >= 3)
                                {
                                    break;
                                }

                                var flag105 = false;
                                var num1526 = Main.rand.Next(point14.X - 30, point14.X + 30 + 1);
                                enumerator = list4.GetEnumerator();
                                try
                                {
                                    while (enumerator.MoveNext())
                                    {
                                        var current = enumerator.Current;
                                        if (Math.Abs(current.X - num1526) < 10)
                                        {
                                            flag105 = true;
                                            break;
                                        }
                                    }
                                }
                                finally
                                {
                                    ((IDisposable) enumerator).Dispose();
                                }

                                if (!flag105)
                                {
                                    var startY = point14.Y - 20;
                                    Collision.ExpandVertically(num1526, startY, out var _, out var bottomY, 1, 51);
                                    if (StrayMethods.CanSpawnSandstormHostile(
                                        new Vector2((float) num1526, (float) (bottomY - 15)) * 16f, 15, 15))
                                    {
                                        list4.Add(new Point(num1526, bottomY - 15));
                                    }
                                }
                            }

                            enumerator = list4.GetEnumerator();
                            try
                            {
                                while (enumerator.MoveNext())
                                {
                                    var current2 = enumerator.Current;
                                    Projectile.NewProjectile((float) (current2.X * 16), (float) (current2.Y * 16), 0f,
                                        0f, 658, 0, 0f, Main.myPlayer, 0f, 0f);
                                }
                            }
                            finally
                            {
                                ((IDisposable) enumerator).Dispose();
                            }
                        }

                        new Vector2(0.9f, 2f);
                        if (this.ai[0] < 114f && this.ai[0] > 0f)
                        {
                            var list5 = new List<Vector2>();
                            for (var num1527 = 0; num1527 < 1000; num1527++)
                            {
                                var projectile9 = Main.projectile[num1527];
                                if (projectile9.active && projectile9.type == 658)
                                {
                                    list5.Add(projectile9.Center);
                                }
                            }

                            var value66 = new Vector2(0f, 1500f);
                            var num1528 = (this.ai[0] - 54f) / 30f;
                            if (num1528 < 0.95f && num1528 >= 0f)
                            {
                                foreach (var item2 in list5)
                                {
                                    var value67 = Vector2.CatmullRom(vector249 + value66, vector249, item2,
                                        item2 + value66, num1528);
                                    var value68 = Vector2.CatmullRom(vector249 + value66, vector249, item2,
                                        item2 + value66, num1528 + 0.05f);
                                    var num1529 = num1528;
                                    if (num1529 > 0.5f)
                                    {
                                        num1529 = 1f - num1529;
                                    }

                                    var num1530 = 2f;
                                    if (Vector2.Distance(value67, value68) > 5f)
                                    {
                                        num1530 = 3f;
                                    }

                                    if (Vector2.Distance(value67, value68) > 10f)
                                    {
                                        num1530 = 4f;
                                    }

                                    for (var num1531 = 0f; num1531 < num1530; num1531 += 1f)
                                    {
                                        var dust42 = Main.dust;
                                        var position108 = vector249;
                                        newColor = default(Color);
                                        var dust43 =
                                            dust42[Dust.NewDust(position108, 0, 0, 269, 0f, 0f, 0, newColor, 1f)];
                                        dust43.position =
                                            Vector2.Lerp(value67, value68, num1531 / num1530) +
                                            Utils.RandomVector2(Main.rand, -2f, 2f);
                                        dust43.noLight = true;
                                        dust43.scale = 0.3f + num1528;
                                    }
                                }
                            }
                        }

                        var num1570 = this.ai[0];
                    }

                    if (this.ai[0] == 0f)
                    {
                        this.ai[0] = 1f;
                        netUpdate = true;
                        flag103 = true;
                    }
                }

                if (justHit)
                {
                    localAI[2] = 0f;
                }

                if (!flag99)
                {
                    if (localAI[2] >= 0f)
                    {
                        var num1532 = 16f;
                        var flag106 = false;
                        var flag107 = false;
                        if (base.position.X > localAI[0] - num1532 && base.position.X < localAI[0] + num1532)
                        {
                            flag106 = true;
                        }
                        else if ((base.velocity.X < 0f && base.direction > 0) ||
                                 (base.velocity.X > 0f && base.direction < 0))
                        {
                            flag106 = true;
                            num1532 += 24f;
                        }

                        if (base.position.Y > localAI[1] - num1532 && base.position.Y < localAI[1] + num1532)
                        {
                            flag107 = true;
                        }

                        if (flag106 && flag107)
                        {
                            localAI[2] += 1f;
                            if (localAI[2] >= 30f && num1532 == 16f)
                            {
                                flag98 = true;
                            }

                            if (localAI[2] >= 60f)
                            {
                                localAI[2] = -180f;
                                base.direction *= -1;
                                base.velocity.X *= -1f;
                                collideX = false;
                            }
                        }
                        else
                        {
                            localAI[0] = base.position.X;
                            localAI[1] = base.position.Y;
                            localAI[2] = 0f;
                        }

                        if (flag104)
                        {
                            TargetClosest(true);
                        }
                    }
                    else
                    {
                        localAI[2] += 1f;
                        base.direction = ((Main.player[target].Center.X > base.Center.X) ? 1 : (-1));
                    }
                }

                var num1533 = (int) ((base.position.X + (float) (base.width / 2)) / 16f) + base.direction * 2;
                var num1534 = (int) ((base.position.Y + (float) base.height) / 16f);
                var num1535 = (int) base.Bottom.Y / 16;
                var num1536 = (int) base.Bottom.X / 16;
                if (flag103)
                {
                    base.velocity *= num1521;
                }
                else
                {
                    for (var num1537 = num1534; num1537 < num1534 + num1510; num1537++)
                    {
                        if (Main.tile[num1533, num1537] == null)
                        {
                            var tile41 = Main.tile;
                            var num1538 = num1533;
                            var num1539 = num1537;
                            var tile42 = new Tile();
                            tile41[num1538, num1539] = tile42;
                        }

                        if ((Main.tile[num1533, num1537].nactive() &&
                             Main.tileSolid[Main.tile[num1533, num1537].type]) ||
                            Main.tile[num1533, num1537].liquid > 0)
                        {
                            if (num1537 <= num1534 + 1)
                            {
                                flag101 = true;
                            }

                            flag100 = false;
                            break;
                        }
                    }

                    for (var num1540 = num1535; num1540 < num1535 + num1512; num1540++)
                    {
                        if (Main.tile[num1536, num1540] == null)
                        {
                            var tile43 = Main.tile;
                            var num1541 = num1536;
                            var num1542 = num1540;
                            var tile44 = new Tile();
                            tile43[num1541, num1542] = tile44;
                        }

                        if ((Main.tile[num1536, num1540].nactive() &&
                             Main.tileSolid[Main.tile[num1536, num1540].type]) ||
                            Main.tile[num1536, num1540].liquid > 0)
                        {
                            flag101 = true;
                            flag100 = false;
                            break;
                        }
                    }

                    if (flag102)
                    {
                        for (var num1543 = num1534 - num1511; num1543 < num1534; num1543++)
                        {
                            if (Main.tile[num1533, num1543] == null)
                            {
                                var tile45 = Main.tile;
                                var num1544 = num1533;
                                var num1545 = num1543;
                                var tile46 = new Tile();
                                tile45[num1544, num1545] = tile46;
                            }

                            if ((Main.tile[num1533, num1543].nactive() &&
                                 Main.tileSolid[Main.tile[num1533, num1543].type]) ||
                                Main.tile[num1533, num1543].liquid > 0)
                            {
                                flag101 = false;
                                flag98 = true;
                                break;
                            }
                        }
                    }

                    if (flag98)
                    {
                        flag101 = false;
                        flag100 = true;
                    }

                    if (flag100)
                    {
                        base.velocity.Y += num1513;
                        if (base.velocity.Y > num1514)
                        {
                            base.velocity.Y = num1514;
                        }
                    }
                    else
                    {
                        if ((directionY < 0 && base.velocity.Y > 0f) || flag101)
                        {
                            base.velocity.Y += num1515;
                        }

                        if (base.velocity.Y < num1516)
                        {
                            base.velocity.Y = num1516;
                        }
                    }

                    if (collideX)
                    {
                        base.velocity.X = oldVelocity.X * -0.4f;
                        if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 1f)
                        {
                            base.velocity.X = 1f;
                        }

                        if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -1f)
                        {
                            base.velocity.X = -1f;
                        }
                    }

                    if (collideY)
                    {
                        base.velocity.Y = oldVelocity.Y * -0.25f;
                        if (base.velocity.Y > 0f && base.velocity.Y < 1f)
                        {
                            base.velocity.Y = 1f;
                        }

                        if (base.velocity.Y < 0f && base.velocity.Y > -1f)
                        {
                            base.velocity.Y = -1f;
                        }
                    }

                    if (base.direction == -1 && base.velocity.X > 0f - num1517)
                    {
                        base.velocity.X -= num1518;
                        if (base.velocity.X > num1517)
                        {
                            base.velocity.X -= num1518;
                        }
                        else if (base.velocity.X > 0f)
                        {
                            base.velocity.X += num1518 / 2f;
                        }

                        if (base.velocity.X < 0f - num1517)
                        {
                            base.velocity.X = 0f - num1517;
                        }
                    }
                    else if (base.direction == 1 && base.velocity.X < num1517)
                    {
                        base.velocity.X += num1518;
                        if (base.velocity.X < 0f - num1517)
                        {
                            base.velocity.X += num1518;
                        }
                        else if (base.velocity.X < 0f)
                        {
                            base.velocity.X -= num1518 / 2f;
                        }

                        if (base.velocity.X > num1517)
                        {
                            base.velocity.X = num1517;
                        }
                    }

                    if (directionY == -1 && base.velocity.Y > 0f - num1519)
                    {
                        base.velocity.Y -= num1520;
                        if (base.velocity.Y > num1519)
                        {
                            base.velocity.Y -= num1520 * 1.25f;
                        }
                        else if (base.velocity.Y > 0f)
                        {
                            base.velocity.Y += num1520 * 0.75f;
                        }

                        if (base.velocity.Y < 0f - num1519)
                        {
                            base.velocity.Y = 0f - num1517;
                        }
                    }
                    else if (directionY == 1 && base.velocity.Y < num1519)
                    {
                        base.velocity.Y += num1520;
                        if (base.velocity.Y < 0f - num1519)
                        {
                            base.velocity.Y += num1520 * 1.25f;
                        }
                        else if (base.velocity.Y < 0f)
                        {
                            base.velocity.Y -= num1520 * 0.75f;
                        }

                        if (base.velocity.Y > num1519)
                        {
                            base.velocity.Y = num1519;
                        }
                    }
                }
            }
            else if (aiStyle == 103)
            {
                if (base.direction == 0)
                {
                    TargetClosest(true);
                }

                var flag108 = true;
                var pt = base.Center.ToTileCoordinates();
                var tileSafely = Framing.GetTileSafely(pt);
                flag108 = (tileSafely.nactive() && (TileID.Sets.Conversion.Sand[tileSafely.type] ||
                                                    TileID.Sets.Conversion.Sandstone[tileSafely.type] ||
                                                    TileID.Sets.Conversion.HardenedSand[tileSafely.type]));
                flag108 |= wet;
                var flag109 = false;
                TargetClosest(false);
                var vector250 = targetRect.Center.ToVector2();
                if (Main.player[target].velocity.Y > -0.1f && !Main.player[target].dead && Distance(vector250) > 150f)
                {
                    flag109 = true;
                }

                if (localAI[0] == -1f && !flag108)
                {
                    localAI[0] = 20f;
                }

                if (localAI[0] > 0f)
                {
                    localAI[0] -= 1f;
                }

                if (flag108)
                {
                    if (soundDelay == 0)
                    {
                        var num1546 = Distance(vector250) / 40f;
                        if (num1546 < 10f)
                        {
                            num1546 = 10f;
                        }

                        if (num1546 > 20f)
                        {
                            num1546 = 20f;
                        }

                        soundDelay = (int) num1546;
                        Main.PlaySound(15, base.Center, 4);
                    }

                    var num1571 = this.ai[1];
                    var flag110 = false;
                    pt = (base.Center + new Vector2(0f, 24f)).ToTileCoordinates();
                    tileSafely = Framing.GetTileSafely(pt.X, pt.Y - 2);
                    if (tileSafely.nactive() && (TileID.Sets.Conversion.Sand[tileSafely.type] ||
                                                 TileID.Sets.Conversion.Sandstone[tileSafely.type] ||
                                                 TileID.Sets.Conversion.HardenedSand[tileSafely.type]))
                    {
                        flag110 = true;
                    }

                    this.ai[1] = (float) flag110.ToInt();
                    if (this.ai[2] < 30f)
                    {
                        this.ai[2] += 1f;
                    }

                    if (flag109)
                    {
                        TargetClosest(true);
                        base.velocity.X += (float) base.direction * 0.15f;
                        base.velocity.Y += (float) directionY * 0.15f;
                        if (base.velocity.X > 5f)
                        {
                            base.velocity.X = 5f;
                        }

                        if (base.velocity.X < -5f)
                        {
                            base.velocity.X = -5f;
                        }

                        if (base.velocity.Y > 3f)
                        {
                            base.velocity.Y = 3f;
                        }

                        if (base.velocity.Y < -3f)
                        {
                            base.velocity.Y = -3f;
                        }

                        var center42 = base.Center;
                        var vector251 = base.velocity.SafeNormalize(Vector2.Zero);
                        vector16 = base.Size;
                        var vec6 = center42 + vector251 * vector16.Length() / 2f + base.velocity;
                        pt = vec6.ToTileCoordinates();
                        tileSafely = Framing.GetTileSafely(pt);
                        var flag111 = tileSafely.nactive() &&
                                       (TileID.Sets.Conversion.Sand[tileSafely.type] ||
                                        TileID.Sets.Conversion.Sandstone[tileSafely.type] ||
                                        TileID.Sets.Conversion.HardenedSand[tileSafely.type]);
                        if (!flag111 && wet)
                        {
                            flag111 = (tileSafely.liquid > 0);
                        }

                        if (!flag111 && Math.Sign(base.velocity.X) == base.direction && Distance(vector250) < 400f &&
                            (this.ai[2] >= 30f || this.ai[2] < 0f))
                        {
                            if (localAI[0] == 0f)
                            {
                                Main.PlaySound(14, base.Center, 542);
                                localAI[0] = -1f;
                            }

                            this.ai[2] = -30f;
                            var vector252 = DirectionTo(vector250 + new Vector2(0f, -80f));
                            base.velocity = vector252 * 12f;
                        }
                    }
                    else
                    {
                        if (collideX)
                        {
                            base.velocity.X *= -1f;
                            base.direction *= -1;
                            netUpdate = true;
                        }

                        if (collideY)
                        {
                            netUpdate = true;
                            base.velocity.Y *= -1f;
                            directionY = Math.Sign(base.velocity.Y);
                            this.ai[0] = (float) directionY;
                        }

                        var num1547 = 6f;
                        base.velocity.X += (float) base.direction * 0.1f;
                        if (base.velocity.X < 0f - num1547 || base.velocity.X > num1547)
                        {
                            base.velocity.X *= 0.95f;
                        }

                        if (flag110)
                        {
                            this.ai[0] = -1f;
                        }
                        else
                        {
                            this.ai[0] = 1f;
                        }

                        var num1548 = 0.06f;
                        var num1549 = 0.01f;
                        if (this.ai[0] == -1f)
                        {
                            base.velocity.Y -= num1549;
                            if (base.velocity.Y < 0f - num1548)
                            {
                                this.ai[0] = 1f;
                            }
                        }
                        else
                        {
                            base.velocity.Y += num1549;
                            if (base.velocity.Y > num1548)
                            {
                                this.ai[0] = -1f;
                            }
                        }

                        if (base.velocity.Y > 0.4f || base.velocity.Y < -0.4f)
                        {
                            base.velocity.Y *= 0.95f;
                        }
                    }
                }
                else
                {
                    if (base.velocity.Y == 0f)
                    {
                        if (flag109)
                        {
                            TargetClosest(true);
                        }

                        var num1550 = 1f;
                        base.velocity.X += (float) base.direction * 0.1f;
                        if (base.velocity.X < 0f - num1550 || base.velocity.X > num1550)
                        {
                            base.velocity.X *= 0.95f;
                        }
                    }

                    base.velocity.Y += 0.3f;
                    if (base.velocity.Y > 10f)
                    {
                        base.velocity.Y = 10f;
                    }

                    this.ai[0] = 1f;
                }

                rotation = base.velocity.Y * (float) base.direction * 0.1f;
                if (rotation < -0.2f)
                {
                    rotation = -0.2f;
                }

                if (rotation > 0.2f)
                {
                    rotation = 0.2f;
                }
            }
            else if (aiStyle == 104)
            {
                active = false;
            }
            else if (aiStyle == 105)
            {
                if (alpha == 0)
                {
                    Lighting.AddLight(base.Center, 1.3f, 0.5f, 1.5f);
                }

                if (this.ai[1] == 0f)
                {
                    if (this.ai[0] > 0f)
                    {
                        this.ai[0] -= 1f;
                    }

                    if (this.ai[0] == 0f)
                    {
                        this.ai[0] = 180f;
                        netUpdate = true;
                        if (localAI[0] == 0f)
                        {
                            StrayMethods.CheckArenaScore(base.Bottom, out var xLeftEnd, out var xRightEnd, 5, 10);
                            localAI[0] = 1f;
                            xLeftEnd.X += 2;
                            xRightEnd.X -= 2;
                            var num1551 = NewNPC(xLeftEnd.X, xLeftEnd.Y, 549, 0, 0f, 0f, 0f, 0f, 255);
                            Main.npc[num1551].Bottom = xLeftEnd.ToWorldCoordinates(8f, 16f);
                            num1551 = NewNPC(xRightEnd.X, xRightEnd.Y, 549, 0, 0f, 0f, 0f, 0f, 255);
                            Main.npc[num1551].Bottom = xRightEnd.ToWorldCoordinates(8f, 16f);
                            if (Main.netMode != 1)
                            {
                                DD2Event.FindArenaHitbox();
                            }
                        }
                    }
                }
                else if (this.ai[1] == 2f)
                {
                    dontTakeDamageFromHostiles = true;
                    life = lifeMax;
                    if (this.ai[0] == 3f)
                    {
                        Main.PlayTrackedSound(SoundID.DD2_WinScene, base.Center);
                        for (var num1552 = 0; num1552 < 200; num1552++)
                        {
                            var nPC8 = Main.npc[num1552];
                            if (nPC8.active && nPC8.type == 549)
                            {
                                nPC8.ai[1] = 1f;
                                nPC8.ai[0] = 0f;
                                nPC8.netUpdate = true;
                            }
                        }

                        if (Main.netMode != 1)
                        {
                            Projectile.NewProjectile(base.Center - Vector2.UnitY * 40f, Vector2.Zero, 713, 0, 0f,
                                Main.myPlayer, 0f, 0f);
                        }
                    }

                    this.ai[0] += 1f;
                    noGravity = true;
                    if (this.ai[0] <= 120f)
                    {
                        var num1553 = this.ai[0] / 120f;
                        base.velocity.Y = (float) Math.Cos((double) (num1553 * 6.28318548f)) * 0.25f - 0.25f;
                    }
                    else
                    {
                        base.velocity.Y = 0f;
                    }

                    var num1554 = Utils.InverseLerp(480f, 570f, this.ai[0], true);
                    if (num1554 != 0f)
                    {
                        MoonlordDeathDrama.RequestLight(num1554, base.Center);
                    }

                    if (this.ai[0] >= 600f)
                    {
                        DD2Event.StopInvasion(true);
                        dontTakeDamage = false;
                        life = 0;
                        checkDead();
                        netUpdate = true;
                    }

                    if (true)
                    {
                        var value69 = base.Center + new Vector2(0f, -20f);
                        var num1555 = 0.99f;
                        if (this.ai[0] >= 60f)
                        {
                            num1555 = 0.79f;
                        }

                        if (this.ai[0] >= 120f)
                        {
                            num1555 = 0.58f;
                        }

                        if (this.ai[0] >= 180f)
                        {
                            num1555 = 0.43f;
                        }

                        if (this.ai[0] >= 240f)
                        {
                            num1555 = 0.33f;
                        }

                        if (this.ai[0] >= 540f)
                        {
                            num1555 = 1f;
                        }

                        for (var num1556 = 0; num1556 < 9; num1556++)
                        {
                            if (!(Main.rand.NextFloat() < num1555))
                            {
                                var num1557 = Main.rand.NextFloat() * 6.28318548f;
                                var num1558 = Main.rand.NextFloat();
                                var vector253 = value69 + num1557.ToRotationVector2() * (110f + 600f * num1558);
                                var vector254 = (num1557 - 3.14159274f).ToRotationVector2() *
                                                    (14f + 0f * Main.rand.NextFloat() + 8f * num1558);
                                var position109 = vector253;
                                Vector2? velocity9 = vector254;
                                newColor = default(Color);
                                var dust44 = Dust.NewDustPerfect(position109, 264, velocity9, 0, newColor, 1f);
                                dust44.scale = 0.9f;
                                dust44.fadeIn = 1.15f + num1558 * 0.3f;
                                dust44.color = new Color(1f, 1f, 1f, num1555) * (1f - num1555);
                                dust44.noGravity = true;
                                dust44.noLight = true;
                            }
                        }
                    }

                    if (this.ai[0] == 100f || this.ai[0] == 160f || this.ai[0] == 220f || this.ai[0] == 280f ||
                        this.ai[0] == 340f || this.ai[0] == 370f || this.ai[0] == 400f || this.ai[0] == 430f ||
                        this.ai[0] == 460f || this.ai[0] == 500f || this.ai[0] == 520f || this.ai[0] == 540f)
                    {
                        Main.rand.NextFloat();
                        var num1559 = 120f;
                        for (var num1560 = 0; (float) num1560 < num1559; num1560++)
                        {
                            var num1561 = (float) num1560 / num1559 * 6.28318548f;
                            var num1562 = Main.rand.NextFloat();
                            var vector255 = base.Center + new Vector2(0f, -20f) +
                                                num1561.ToRotationVector2() * (810f - this.ai[0]);
                            var vector256 = (num1561 - 3.14159274f).ToRotationVector2() *
                                                (14f + 5f * (this.ai[0] / 600f) + 8f * num1562);
                            var position110 = vector255;
                            Vector2? velocity10 = vector256;
                            newColor = default(Color);
                            var dust45 = Dust.NewDustPerfect(position110, 264, velocity10, 0, newColor, 1f);
                            dust45.scale = 0.9f;
                            dust45.fadeIn = 1.15f + num1562 * 0.3f;
                            dust45.color = new Color(1f, 1f, 1f, 0f);
                            dust45.noGravity = true;
                            dust45.noLight = true;
                        }
                    }
                }
                else if (this.ai[1] == 1f)
                {
                    dontTakeDamageFromHostiles = true;
                    life = lifeMax;
                    if (this.ai[0] == 0f)
                    {
                        for (var num1563 = 0; num1563 < 200; num1563++)
                        {
                            var nPC9 = Main.npc[num1563];
                            if (nPC9.active && nPC9.type == 549)
                            {
                                nPC9.ai[1] = 1f;
                                nPC9.ai[0] = 0f;
                                nPC9.netUpdate = true;
                            }
                        }

                        if (Main.netMode != 1)
                        {
                            DD2Event.ReportLoss();
                            Projectile.NewProjectile(base.Center - Vector2.UnitY * 40f, Vector2.Zero, 672, 0, 0f,
                                Main.myPlayer, 0f, 0f);
                        }
                    }

                    this.ai[0] += 1f;
                    var num1564 = Utils.InverseLerp(480f, 600f, this.ai[0], true);
                    if (num1564 != 0f)
                    {
                        MoonlordDeathDrama.RequestLight(num1564, base.Center);
                    }

                    var num1565 = 96f;
                    if (this.ai[0] < num1565)
                    {
                        base.velocity.Y = MathHelper.Lerp(0f, -1f, this.ai[0] / num1565);
                    }

                    if (this.ai[0] >= num1565)
                    {
                        alpha += 50;
                        if (alpha > 255)
                        {
                            alpha = 255;
                        }
                    }

                    if (true)
                    {
                        var value70 = base.Center + new Vector2(0f,
                                              MathHelper.Lerp(0f, -70f, Utils.InverseLerp(0f, 300f, this.ai[0], true)));
                        var num1566 = 0.99f;
                        if (this.ai[0] >= 60f)
                        {
                            num1566 = 0.79f;
                        }

                        if (this.ai[0] >= 120f)
                        {
                            num1566 = 0.58f;
                        }

                        if (this.ai[0] >= 180f)
                        {
                            num1566 = 0.23f;
                        }

                        if (this.ai[0] >= 240f)
                        {
                            num1566 = 0.35f;
                        }

                        if (this.ai[0] >= 300f)
                        {
                            num1566 = 0.6f;
                        }

                        if (this.ai[0] >= 360f)
                        {
                            num1566 = 0.98f;
                        }

                        if (this.ai[0] >= 420f)
                        {
                            num1566 = 0.995f;
                        }

                        if (this.ai[0] >= 450f)
                        {
                            num1566 = 1f;
                        }

                        for (var num1567 = 0; num1567 < 12; num1567++)
                        {
                            if (!(Main.rand.NextFloat() < num1566))
                            {
                                var num1568 = Main.rand.NextFloat() * 6.28318548f;
                                var num1569 = Main.rand.NextFloat();
                                var vector257 = value70 + num1568.ToRotationVector2() * (70f + 600f * num1569);
                                var vector258 = (num1568 - 1.57079637f - 0.3926991f).ToRotationVector2() *
                                                    (12f + 9f * Main.rand.NextFloat() + 4f * num1569);
                                var position111 = vector257;
                                Vector2? velocity11 = vector258;
                                newColor = default(Color);
                                var dust46 = Dust.NewDustPerfect(position111, 240, velocity11, 0, newColor, 1f);
                                dust46.scale = 0.8f;
                                dust46.fadeIn = 0.95f + num1569 * 0.3f;
                                dust46.noGravity = true;
                            }
                        }
                    }

                    if (this.ai[0] >= 600f)
                    {
                        DD2Event.StopInvasion(false);
                        Terraria.Graphics.Effects.Filters.Scene.Deactivate("CrystalDestructionVortex");
                        Terraria.Graphics.Effects.Filters.Scene.Deactivate("CrystalDestructionColor");
                        Terraria.Graphics.Effects.Filters.Scene.Deactivate("CrystalWin");
                        dontTakeDamage = false;
                        life = 0;
                        checkDead();
                        netUpdate = true;
                    }
                }
            }
            else if (aiStyle == 106)
            {
                if (alpha == 0)
                {
                    Lighting.AddLight(base.Center, 0.5f, 0.1f, 0.3f);
                }

                SlotId val;
                if (this.ai[1] == 0f)
                {
                    if (localAI[0] == 0f)
                    {
                        Main.PlayTrackedSound(SoundID.DD2_EtherianPortalOpen, base.Center);
                        var array8 = localAI;
                        val = SlotId.Invalid;
                        array8[3] = val.ToFloat();
                    }

                    if (localAI[0] > 150f)
                    {
                        var activeSound = Main.GetActiveSound(SlotId.FromFloat(localAI[3]));
                        if (activeSound == null)
                        {
                            var array9 = localAI;
                            val = Main.PlayTrackedSound(SoundID.DD2_EtherianPortalIdleLoop, base.Center);
                            array9[3] = val.ToFloat();
                        }
                    }

                    if (!DD2Event.EnemySpawningIsOnHold)
                    {
                        this.ai[0] += 1f;
                    }

                    if (this.ai[0] >= (float) DD2Event.LaneSpawnRate)
                    {
                        if (this.ai[0] >= (float) (DD2Event.LaneSpawnRate * 3))
                        {
                            this.ai[0] = 0f;
                        }

                        netUpdate = true;
                        if (Main.netMode != 1 && (int) this.ai[0] % DD2Event.LaneSpawnRate == 0)
                        {
                            DD2Event.SpawnMonsterFromGate(base.Bottom);
                            if (DD2Event.EnemySpawningIsOnHold)
                            {
                                this.ai[0] += 1f;
                            }
                        }
                    }

                    localAI[0] += 1f;
                    if (localAI[0] > 180f)
                    {
                        localAI[0] = 180f;
                    }

                    if (Main.netMode != 1 && localAI[0] >= 180f)
                    {
                        if (AnyNPCs(548))
                        {
                            dontTakeDamage = true;
                        }
                        else
                        {
                            this.ai[1] = 1f;
                            this.ai[0] = 0f;
                            dontTakeDamage = true;
                        }
                    }
                }
                else if (this.ai[1] == 1f)
                {
                    this.ai[0] += 1f;
                    scale = MathHelper.Lerp(1f, 0.05f, Utils.InverseLerp(500f, 600f, this.ai[0], true));
                    var activeSound2 = Main.GetActiveSound(SlotId.FromFloat(localAI[3]));
                    if (activeSound2 == null)
                    {
                        var array10 = localAI;
                        val = Main.PlayTrackedSound(SoundID.DD2_EtherianPortalIdleLoop, base.Center);
                        array10[3] = val.ToFloat();
                    }

                    activeSound2 = Main.GetActiveSound(SlotId.FromFloat(localAI[3]));
                    if (activeSound2 != null)
                    {
                        activeSound2.Volume = scale;
                    }

                    if (this.ai[0] >= 550f)
                    {
                        dontTakeDamage = false;
                        life = 0;
                        checkDead();
                        netUpdate = true;
                        activeSound2?.Stop();
                    }
                }
            }
            else if (aiStyle == 107)
            {
                AI_107_ImprovedWalkers();
            }
            else if (aiStyle == 108)
            {
                AI_108_DivingFlyer();
            }
            else if (aiStyle == 109)
            {
                AI_109_DarkMage();
            }
            else if (aiStyle == 110)
            {
                AI_110_Betsy();
            }
            else if (aiStyle == 111)
            {
                AI_111_DD2LightningBug();
            }
        }


        private void AI_069_DukeFishron()
        {
            var expertMode = Main.expertMode;
            var num1 = expertMode ? 0.6f * Main.damageMultiplier : 1f;
            var flag1 = (double) this.life <= (double) this.lifeMax * 0.5;
            var flag2 = expertMode && (double) this.life <= (double) this.lifeMax * 0.15;
            var flag3 = (double) this.ai[0] > 4.0;
            var flag4 = (double) this.ai[0] > 9.0;
            var flag5 = (double) this.ai[3] < 10.0;
            if (flag4)
            {
                this.damage = (int) ((double) this.defDamage * 1.10000002384186 * (double) num1);
                this.defense = 0;
            }
            else if (flag3)
            {
                this.damage = (int) ((double) this.defDamage * 1.20000004768372 * (double) num1);
                this.defense = (int) ((double) this.defDefense * 0.800000011920929);
            }
            else
            {
                this.damage = this.defDamage;
                this.defense = this.defDefense;
            }

            var num2 = expertMode ? 40 : 60;
            var moveSpeed = expertMode ? 0.55f : 0.45f;
            var num3 = expertMode ? 8.5f : 7.5f;
            if (flag4)
            {
                moveSpeed = 0.7f;
                num3 = 12f;
                num2 = 30;
            }
            else if (flag3 && flag5)
            {
                moveSpeed = expertMode ? 0.6f : 0.5f;
                num3 = expertMode ? 10f : 8f;
                num2 = expertMode ? 40 : 20;
            }
            else if (flag5 && !flag3 && !flag4)
                num2 = 30;

            var num4 = expertMode ? 28 : 30;
            var num5 = expertMode ? 17f : 16f;
            if (flag4)
            {
                num4 = 25;
                num5 = 27f;
            }
            else if (flag5 && flag3)
            {
                num4 = expertMode ? 27 : 30;
                if (expertMode)
                    num5 = 21f;
            }

            var num6 = 80;
            var num7 = 4;
            var num8 = 0.3f;
            var num9 = 5f;
            var num10 = 90;
            var num11 = 180;
            var num12 = 180;
            var num13 = 30;
            var num14 = 120;
            var num15 = 4;
            var num16 = 6f;
            var num17 = 20f;
            var num18 = 6.283185f / (float) (num14 / 2);
            var num19 = 75;
            var vector2_1 = this.Center;
            var player = Main.player[this.target];
            if (this.target < 0 || this.target == (int) byte.MaxValue || (player.dead || !player.active))
            {
                this.TargetClosest(true);
                player = Main.player[this.target];
                this.netUpdate = true;
            }

            if (player.dead || (double) Vector2.Distance(player.Center, vector2_1) > 5600.0)
            {
                this.velocity.Y -= 0.4f;
                if (this.timeLeft > 10)
                    this.timeLeft = 10;
                this.ai[0] = (double) this.ai[0] <= 4.0 ? 0.0f : 5f;
                this.ai[2] = 0.0f;
            }

            if ((double) player.position.Y < 800.0 || (double) player.position.Y > Main.worldSurface * 16.0 ||
                (double) player.position.X > 6400.0 &&
                (double) player.position.X < (double) (Main.maxTilesX * 16 - 6400))
            {
                num2 = 20;
                this.damage = this.defDamage * 2;
                this.defense = this.defDefense * 2;
                this.ai[3] = 0.0f;
                num5 += 6f;
            }

            if ((double) this.localAI[0] == 0.0)
            {
                this.localAI[0] = 1f;
                this.alpha = (int) byte.MaxValue;
                this.rotation = 0.0f;
                if (Main.netMode != 1)
                {
                    this.ai[0] = -1f;
                    this.netUpdate = true;
                }
            }

            var num20 = (float) Math.Atan2((double) player.Center.Y - (double) vector2_1.Y,
                (double) player.Center.X - (double) vector2_1.X);
            if (this.spriteDirection == 1)
                num20 += 3.141593f;
            if ((double) num20 < 0.0)
                num20 += 6.283185f;
            if ((double) num20 > 6.28318548202515)
                num20 -= 6.283185f;
            if ((double) this.ai[0] == -1.0)
                num20 = 0.0f;
            if ((double) this.ai[0] == 3.0)
                num20 = 0.0f;
            if ((double) this.ai[0] == 4.0)
                num20 = 0.0f;
            if ((double) this.ai[0] == 8.0)
                num20 = 0.0f;
            var num21 = 0.04f;
            if ((double) this.ai[0] == 1.0 || (double) this.ai[0] == 6.0)
                num21 = 0.0f;
            if ((double) this.ai[0] == 7.0)
                num21 = 0.0f;
            if ((double) this.ai[0] == 3.0)
                num21 = 0.01f;
            if ((double) this.ai[0] == 4.0)
                num21 = 0.01f;
            if ((double) this.ai[0] == 8.0)
                num21 = 0.01f;
            if ((double) this.rotation < (double) num20)
            {
                if ((double) num20 - (double) this.rotation > Math.PI)
                    this.rotation -= num21;
                else
                    this.rotation += num21;
            }

            if ((double) this.rotation > (double) num20)
            {
                if ((double) this.rotation - (double) num20 > Math.PI)
                    this.rotation += num21;
                else
                    this.rotation -= num21;
            }

            if ((double) this.rotation > (double) num20 - (double) num21 &&
                (double) this.rotation < (double) num20 + (double) num21)
                this.rotation = num20;
            if ((double) this.rotation < 0.0)
                this.rotation += 6.283185f;
            if ((double) this.rotation > 6.28318548202515)
                this.rotation -= 6.283185f;
            if ((double) this.rotation > (double) num20 - (double) num21 &&
                (double) this.rotation < (double) num20 + (double) num21)
                this.rotation = num20;
            if ((double) this.ai[0] != -1.0 && (double) this.ai[0] < 9.0)
            {
                if (Collision.SolidCollision(this.position, this.width, this.height))
                    this.alpha += 15;
                else
                    this.alpha -= 15;
                if (this.alpha < 0)
                    this.alpha = 0;
                if (this.alpha > 150)
                    this.alpha = 150;
            }

            if ((double) this.ai[0] == -1.0)
            {
                var npc = this;
                npc.velocity = npc.velocity * 0.98f;
                var num22 = Math.Sign(player.Center.X - vector2_1.X);
                if (num22 != 0)
                {
                    this.direction = num22;
                    this.spriteDirection = -this.direction;
                }

                if ((double) this.ai[2] > 20.0)
                {
                    this.velocity.Y = -2f;
                    this.alpha -= 5;
                    if (Collision.SolidCollision(this.position, this.width, this.height))
                        this.alpha += 15;
                    if (this.alpha < 0)
                        this.alpha = 0;
                    if (this.alpha > 150)
                        this.alpha = 150;
                }

                if ((double) this.ai[2] == (double) (num10 - 30))
                {
                    var num23 = 36;
                    for (var index1 = 0; index1 < num23; ++index1)
                    {
                        var vector2_2 =
                            (Vector2.Normalize(this.velocity) *
                             new Vector2((float) this.width / 2f, (float) this.height) * 0.75f * 0.5f)
                            .RotatedBy((double) (index1 - (num23 / 2 - 1)) * 6.28318548202515 / (double) num23,
                                new Vector2()) + this.Center;
                        var vector2_3 = vector2_2 - this.Center;
                        var index2 = Dust.NewDust(vector2_2 + vector2_3, 0, 0, 172, vector2_3.X * 2f, vector2_3.Y * 2f,
                            100, new Color(), 1.4f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].noLight = true;
                        Main.dust[index2].velocity = Vector2.Normalize(vector2_3) * 3f;
                    }

                    Main.PlaySound(29, (int) vector2_1.X, (int) vector2_1.Y, 20, 1f, 0.0f);
                }

                ++this.ai[2];
                if ((double) this.ai[2] < (double) num19)
                    return;
                this.ai[0] = 0.0f;
                this.ai[1] = 0.0f;
                this.ai[2] = 0.0f;
                this.netUpdate = true;
            }
            else if ((double) this.ai[0] == 0.0 && !player.dead)
            {
                if ((double) this.ai[1] == 0.0)
                    this.ai[1] = (float) (300 * Math.Sign((vector2_1 - player.Center).X));
                var vector2_2 =
                    Vector2.Normalize(player.Center + new Vector2(this.ai[1], -200f) - vector2_1 - this.velocity) *
                    num3;
                if ((double) this.velocity.X < (double) vector2_2.X)
                {
                    this.velocity.X += moveSpeed;
                    if ((double) this.velocity.X < 0.0 && (double) vector2_2.X > 0.0)
                        this.velocity.X += moveSpeed;
                }
                else if ((double) this.velocity.X > (double) vector2_2.X)
                {
                    this.velocity.X -= moveSpeed;
                    if ((double) this.velocity.X > 0.0 && (double) vector2_2.X < 0.0)
                        this.velocity.X -= moveSpeed;
                }

                if ((double) this.velocity.Y < (double) vector2_2.Y)
                {
                    this.velocity.Y += moveSpeed;
                    if ((double) this.velocity.Y < 0.0 && (double) vector2_2.Y > 0.0)
                        this.velocity.Y += moveSpeed;
                }
                else if ((double) this.velocity.Y > (double) vector2_2.Y)
                {
                    this.velocity.Y -= moveSpeed;
                    if ((double) this.velocity.Y > 0.0 && (double) vector2_2.Y < 0.0)
                        this.velocity.Y -= moveSpeed;
                }

                var num22 = Math.Sign(player.Center.X - vector2_1.X);
                if (num22 != 0)
                {
                    if ((double) this.ai[2] == 0.0 && num22 != this.direction)
                        this.rotation += 3.141593f;
                    this.direction = num22;
                    if (this.spriteDirection != -this.direction)
                        this.rotation += 3.141593f;
                    this.spriteDirection = -this.direction;
                }

                ++this.ai[2];
                if ((double) this.ai[2] < (double) num2)
                    return;
                var num23 = 0;
                switch ((int) this.ai[3])
                {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                        num23 = 1;
                        break;
                    case 10:
                        this.ai[3] = 1f;
                        num23 = 2;
                        break;
                    case 11:
                        this.ai[3] = 0.0f;
                        num23 = 3;
                        break;
                }

                if (flag1)
                    num23 = 4;
                switch (num23)
                {
                    case 1:
                        this.ai[0] = 1f;
                        this.ai[1] = 0.0f;
                        this.ai[2] = 0.0f;
                        this.velocity = Vector2.Normalize(player.Center - vector2_1) * num5;
                        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
                        if (num22 != 0)
                        {
                            this.direction = num22;
                            if (this.spriteDirection == 1)
                                this.rotation += 3.141593f;
                            this.spriteDirection = -this.direction;
                            break;
                        }

                        break;
                    case 2:
                        this.ai[0] = 2f;
                        this.ai[1] = 0.0f;
                        this.ai[2] = 0.0f;
                        break;
                    case 3:
                        this.ai[0] = 3f;
                        this.ai[1] = 0.0f;
                        this.ai[2] = 0.0f;
                        break;
                    case 4:
                        this.ai[0] = 4f;
                        this.ai[1] = 0.0f;
                        this.ai[2] = 0.0f;
                        break;
                }

                this.netUpdate = true;
            }
            else if ((double) this.ai[0] == 1.0)
            {
                var num22 = 7;
                for (var index1 = 0; index1 < num22; ++index1)
                {
                    var vector2_2 =
                        (Vector2.Normalize(this.velocity) *
                         new Vector2((float) (this.width + 50) / 2f, (float) this.height) * 0.75f)
                        .RotatedBy((double) (index1 - (num22 / 2 - 1)) * Math.PI / (double) num22, new Vector2()) +
                        vector2_1;
                    var vector2_3 =
                        ((float) (Main.rand.NextDouble() * 3.14159274101257) - 1.570796f).ToRotationVector2() *
                        (float) Main.rand.Next(3, 8);
                    var index2 = Dust.NewDust(vector2_2 + vector2_3, 0, 0, 172, vector2_3.X * 2f, vector2_3.Y * 2f, 100,
                        new Color(), 1.4f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].noLight = true;
                    Main.dust[index2].velocity /= 4f;
                    Main.dust[index2].velocity -= this.velocity;
                }

                ++this.ai[2];
                if ((double) this.ai[2] < (double) num4)
                    return;
                this.ai[0] = 0.0f;
                this.ai[1] = 0.0f;
                this.ai[2] = 0.0f;
                this.ai[3] += 2f;
                this.netUpdate = true;
            }
            else if ((double) this.ai[0] == 2.0)
            {
                if ((double) this.ai[1] == 0.0)
                    this.ai[1] = (float) (300 * Math.Sign((vector2_1 - player.Center).X));
                var vector2_2 =
                    Vector2.Normalize(player.Center + new Vector2(this.ai[1], -200f) - vector2_1 - this.velocity) *
                    num9;
                if ((double) this.velocity.X < (double) vector2_2.X)
                {
                    this.velocity.X += num8;
                    if ((double) this.velocity.X < 0.0 && (double) vector2_2.X > 0.0)
                        this.velocity.X += num8;
                }
                else if ((double) this.velocity.X > (double) vector2_2.X)
                {
                    this.velocity.X -= num8;
                    if ((double) this.velocity.X > 0.0 && (double) vector2_2.X < 0.0)
                        this.velocity.X -= num8;
                }

                if ((double) this.velocity.Y < (double) vector2_2.Y)
                {
                    this.velocity.Y += num8;
                    if ((double) this.velocity.Y < 0.0 && (double) vector2_2.Y > 0.0)
                        this.velocity.Y += num8;
                }
                else if ((double) this.velocity.Y > (double) vector2_2.Y)
                {
                    this.velocity.Y -= num8;
                    if ((double) this.velocity.Y > 0.0 && (double) vector2_2.Y < 0.0)
                        this.velocity.Y -= num8;
                }

                if ((double) this.ai[2] == 0.0)
                    Main.PlaySound(29, (int) vector2_1.X, (int) vector2_1.Y, 20, 1f, 0.0f);
                if ((double) this.ai[2] % (double) num7 == 0.0)
                {
                    Main.PlaySound(4, (int) this.Center.X, (int) this.Center.Y, 19, 1f, 0.0f);
                    if (Main.netMode != 1)
                    {
                        var vector2_3 =
                            Vector2.Normalize(player.Center - vector2_1) * (float) (this.width + 20) / 2f + vector2_1;
                        NPC.NewNPC((int) vector2_3.X, (int) vector2_3.Y + 45, 371, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                            (int) byte.MaxValue);
                    }
                }

                var num22 = Math.Sign(player.Center.X - vector2_1.X);
                if (num22 != 0)
                {
                    this.direction = num22;
                    if (this.spriteDirection != -this.direction)
                        this.rotation += 3.141593f;
                    this.spriteDirection = -this.direction;
                }

                ++this.ai[2];
                if ((double) this.ai[2] < (double) num6)
                    return;
                this.ai[0] = 0.0f;
                this.ai[1] = 0.0f;
                this.ai[2] = 0.0f;
                this.netUpdate = true;
            }
            else if ((double) this.ai[0] == 3.0)
            {
                var npc = this;
                npc.velocity = npc.velocity * 0.98f;
                this.velocity.Y = MathHelper.Lerp(this.velocity.Y, 0.0f, 0.02f);
                if ((double) this.ai[2] == (double) (num10 - 30))
                    Main.PlaySound(29, (int) vector2_1.X, (int) vector2_1.Y, 9, 1f, 0.0f);
                if (Main.netMode != 1 && (double) this.ai[2] == (double) (num10 - 30))
                {
                    var vector2_2 = this.rotation.ToRotationVector2() * (Vector2.UnitX * (float) this.direction) *
                                        (float) (this.width + 20) / 2f + vector2_1;
                    Projectile.NewProjectile(vector2_2.X, vector2_2.Y, (float) (this.direction * 2), 8f, 385, 0, 0.0f,
                        Main.myPlayer, 0.0f, 0.0f);
                    Projectile.NewProjectile(vector2_2.X, vector2_2.Y, (float) (-this.direction * 2), 8f, 385, 0, 0.0f,
                        Main.myPlayer, 0.0f, 0.0f);
                }

                ++this.ai[2];
                if ((double) this.ai[2] < (double) num10)
                    return;
                this.ai[0] = 0.0f;
                this.ai[1] = 0.0f;
                this.ai[2] = 0.0f;
                this.netUpdate = true;
            }
            else if ((double) this.ai[0] == 4.0)
            {
                var npc = this;
                npc.velocity = npc.velocity * 0.98f;
                this.velocity.Y = MathHelper.Lerp(this.velocity.Y, 0.0f, 0.02f);
                if ((double) this.ai[2] == (double) (num11 - 60))
                    Main.PlaySound(29, (int) vector2_1.X, (int) vector2_1.Y, 20, 1f, 0.0f);
                ++this.ai[2];
                if ((double) this.ai[2] < (double) num11)
                    return;
                this.ai[0] = 5f;
                this.ai[1] = 0.0f;
                this.ai[2] = 0.0f;
                this.ai[3] = 0.0f;
                this.netUpdate = true;
            }
            else if ((double) this.ai[0] == 5.0 && !player.dead)
            {
                if ((double) this.ai[1] == 0.0)
                    this.ai[1] = (float) (300 * Math.Sign((vector2_1 - player.Center).X));
                var vector2_2 =
                    Vector2.Normalize(player.Center + new Vector2(this.ai[1], -200f) - vector2_1 - this.velocity) *
                    num3;
                if ((double) this.velocity.X < (double) vector2_2.X)
                {
                    this.velocity.X += moveSpeed;
                    if ((double) this.velocity.X < 0.0 && (double) vector2_2.X > 0.0)
                        this.velocity.X += moveSpeed;
                }
                else if ((double) this.velocity.X > (double) vector2_2.X)
                {
                    this.velocity.X -= moveSpeed;
                    if ((double) this.velocity.X > 0.0 && (double) vector2_2.X < 0.0)
                        this.velocity.X -= moveSpeed;
                }

                if ((double) this.velocity.Y < (double) vector2_2.Y)
                {
                    this.velocity.Y += moveSpeed;
                    if ((double) this.velocity.Y < 0.0 && (double) vector2_2.Y > 0.0)
                        this.velocity.Y += moveSpeed;
                }
                else if ((double) this.velocity.Y > (double) vector2_2.Y)
                {
                    this.velocity.Y -= moveSpeed;
                    if ((double) this.velocity.Y > 0.0 && (double) vector2_2.Y < 0.0)
                        this.velocity.Y -= moveSpeed;
                }

                var num22 = Math.Sign(player.Center.X - vector2_1.X);
                if (num22 != 0)
                {
                    if ((double) this.ai[2] == 0.0 && num22 != this.direction)
                        this.rotation += 3.141593f;
                    this.direction = num22;
                    if (this.spriteDirection != -this.direction)
                        this.rotation += 3.141593f;
                    this.spriteDirection = -this.direction;
                }

                ++this.ai[2];
                if ((double) this.ai[2] < (double) num2)
                    return;
                var num23 = 0;
                switch ((int) this.ai[3])
                {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        num23 = 1;
                        break;
                    case 6:
                        this.ai[3] = 1f;
                        num23 = 2;
                        break;
                    case 7:
                        this.ai[3] = 0.0f;
                        num23 = 3;
                        break;
                }

                if (flag2)
                    num23 = 4;
                switch (num23)
                {
                    case 1:
                        this.ai[0] = 6f;
                        this.ai[1] = 0.0f;
                        this.ai[2] = 0.0f;
                        this.velocity = Vector2.Normalize(player.Center - vector2_1) * num5;
                        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
                        if (num22 != 0)
                        {
                            this.direction = num22;
                            if (this.spriteDirection == 1)
                                this.rotation += 3.141593f;
                            this.spriteDirection = -this.direction;
                            break;
                        }

                        break;
                    case 2:
                        this.velocity = Vector2.Normalize(player.Center - vector2_1) * num17;
                        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
                        if (num22 != 0)
                        {
                            this.direction = num22;
                            if (this.spriteDirection == 1)
                                this.rotation += 3.141593f;
                            this.spriteDirection = -this.direction;
                        }

                        this.ai[0] = 7f;
                        this.ai[1] = 0.0f;
                        this.ai[2] = 0.0f;
                        break;
                    case 3:
                        this.ai[0] = 8f;
                        this.ai[1] = 0.0f;
                        this.ai[2] = 0.0f;
                        break;
                    case 4:
                        this.ai[0] = 9f;
                        this.ai[1] = 0.0f;
                        this.ai[2] = 0.0f;
                        break;
                }

                this.netUpdate = true;
            }
            else if ((double) this.ai[0] == 6.0)
            {
                var num22 = 7;
                for (var index1 = 0; index1 < num22; ++index1)
                {
                    var vector2_2 =
                        (Vector2.Normalize(this.velocity) *
                         new Vector2((float) (this.width + 50) / 2f, (float) this.height) * 0.75f)
                        .RotatedBy((double) (index1 - (num22 / 2 - 1)) * Math.PI / (double) num22, new Vector2()) +
                        vector2_1;
                    var vector2_3 =
                        ((float) (Main.rand.NextDouble() * 3.14159274101257) - 1.570796f).ToRotationVector2() *
                        (float) Main.rand.Next(3, 8);
                    var index2 = Dust.NewDust(vector2_2 + vector2_3, 0, 0, 172, vector2_3.X * 2f, vector2_3.Y * 2f, 100,
                        new Color(), 1.4f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].noLight = true;
                    Main.dust[index2].velocity /= 4f;
                    Main.dust[index2].velocity -= this.velocity;
                }

                ++this.ai[2];
                if ((double) this.ai[2] < (double) num4)
                    return;
                this.ai[0] = 5f;
                this.ai[1] = 0.0f;
                this.ai[2] = 0.0f;
                this.ai[3] += 2f;
                this.netUpdate = true;
            }
            else if ((double) this.ai[0] == 7.0)
            {
                if ((double) this.ai[2] == 0.0)
                    Main.PlaySound(29, (int) vector2_1.X, (int) vector2_1.Y, 20, 1f, 0.0f);
                if ((double) this.ai[2] % (double) num15 == 0.0)
                {
                    Main.PlaySound(4, (int) this.Center.X, (int) this.Center.Y, 19, 1f, 0.0f);
                    if (Main.netMode != 1)
                    {
                        var vector2_2 = Vector2.Normalize(this.velocity) * (float) (this.width + 20) / 2f +
                                            vector2_1;
                        var index = NPC.NewNPC((int) vector2_2.X, (int) vector2_2.Y + 45, 371, 0, 0.0f, 0.0f, 0.0f,
                            0.0f, (int) byte.MaxValue);
                        Main.npc[index].target = this.target;
                        Main.npc[index].velocity =
                            Vector2.Normalize(this.velocity).RotatedBy(1.57079637050629 * (double) this.direction,
                                new Vector2()) * num16;
                        Main.npc[index].netUpdate = true;
                        Main.npc[index].ai[3] = (float) Main.rand.Next(80, 121) / 100f;
                    }
                }

                this.velocity = this.velocity.RotatedBy(-(double) num18 * (double) this.direction, new Vector2());
                this.rotation -= num18 * (float) this.direction;
                ++this.ai[2];
                if ((double) this.ai[2] < (double) num14)
                    return;
                this.ai[0] = 5f;
                this.ai[1] = 0.0f;
                this.ai[2] = 0.0f;
                this.netUpdate = true;
            }
            else if ((double) this.ai[0] == 8.0)
            {
                var npc = this;
                npc.velocity = npc.velocity * 0.98f;
                this.velocity.Y = MathHelper.Lerp(this.velocity.Y, 0.0f, 0.02f);
                if ((double) this.ai[2] == (double) (num10 - 30))
                    Main.PlaySound(29, (int) vector2_1.X, (int) vector2_1.Y, 20, 1f, 0.0f);
                if (Main.netMode != 1 && (double) this.ai[2] == (double) (num10 - 30))
                    Projectile.NewProjectile(vector2_1.X, vector2_1.Y, 0.0f, 0.0f, 385, 0, 0.0f, Main.myPlayer, 1f,
                        (float) (this.target + 1));
                ++this.ai[2];
                if ((double) this.ai[2] < (double) num10)
                    return;
                this.ai[0] = 5f;
                this.ai[1] = 0.0f;
                this.ai[2] = 0.0f;
                this.netUpdate = true;
            }
            else if ((double) this.ai[0] == 9.0)
            {
                if ((double) this.ai[2] < (double) (num12 - 90))
                {
                    if (Collision.SolidCollision(this.position, this.width, this.height))
                        this.alpha += 15;
                    else
                        this.alpha -= 15;
                    if (this.alpha < 0)
                        this.alpha = 0;
                    if (this.alpha > 150)
                        this.alpha = 150;
                }
                else if (this.alpha < (int) byte.MaxValue)
                {
                    this.alpha += 4;
                    if (this.alpha > (int) byte.MaxValue)
                        this.alpha = (int) byte.MaxValue;
                }

                var npc = this;
                npc.velocity = npc.velocity * 0.98f;
                this.velocity.Y = MathHelper.Lerp(this.velocity.Y, 0.0f, 0.02f);
                if ((double) this.ai[2] == (double) (num12 - 60))
                    Main.PlaySound(29, (int) vector2_1.X, (int) vector2_1.Y, 20, 1f, 0.0f);
                ++this.ai[2];
                if ((double) this.ai[2] < (double) num12)
                    return;
                this.ai[0] = 10f;
                this.ai[1] = 0.0f;
                this.ai[2] = 0.0f;
                this.ai[3] = 0.0f;
                this.netUpdate = true;
            }
            else if ((double) this.ai[0] == 10.0 && !player.dead)
            {
                this.dontTakeDamage = false;
                this.chaseable = false;
                if (this.alpha < (int) byte.MaxValue)
                {
                    this.alpha += 25;
                    if (this.alpha > (int) byte.MaxValue)
                        this.alpha = (int) byte.MaxValue;
                }

                if ((double) this.ai[1] == 0.0)
                    this.ai[1] = (float) (360 * Math.Sign((vector2_1 - player.Center).X));
                this.SimpleFlyMovement(
                    Vector2.Normalize(player.Center + new Vector2(this.ai[1], -200f) - vector2_1 - this.velocity) *
                    num3, moveSpeed);
                var num22 = Math.Sign(player.Center.X - vector2_1.X);
                if (num22 != 0)
                {
                    if ((double) this.ai[2] == 0.0 && num22 != this.direction)
                    {
                        this.rotation += 3.141593f;
                        for (var index = 0; index < this.oldPos.Length; ++index)
                            this.oldPos[index] = Vector2.Zero;
                    }

                    this.direction = num22;
                    if (this.spriteDirection != -this.direction)
                        this.rotation += 3.141593f;
                    this.spriteDirection = -this.direction;
                }

                ++this.ai[2];
                if ((double) this.ai[2] < (double) num2)
                    return;
                var num23 = 0;
                switch ((int) this.ai[3])
                {
                    case 0:
                    case 2:
                    case 3:
                    case 5:
                    case 6:
                    case 7:
                        num23 = 1;
                        break;
                    case 1:
                    case 4:
                    case 8:
                        num23 = 2;
                        break;
                }

                switch (num23)
                {
                    case 1:
                        this.ai[0] = 11f;
                        this.ai[1] = 0.0f;
                        this.ai[2] = 0.0f;
                        this.velocity = Vector2.Normalize(player.Center - vector2_1) * num5;
                        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
                        if (num22 != 0)
                        {
                            this.direction = num22;
                            if (this.spriteDirection == 1)
                                this.rotation += 3.141593f;
                            this.spriteDirection = -this.direction;
                            break;
                        }

                        break;
                    case 2:
                        this.ai[0] = 12f;
                        this.ai[1] = 0.0f;
                        this.ai[2] = 0.0f;
                        break;
                    case 3:
                        this.ai[0] = 13f;
                        this.ai[1] = 0.0f;
                        this.ai[2] = 0.0f;
                        break;
                }

                this.netUpdate = true;
            }
            else if ((double) this.ai[0] == 11.0)
            {
                this.dontTakeDamage = false;
                this.chaseable = true;
                this.alpha -= 25;
                if (this.alpha < 0)
                    this.alpha = 0;
                var num22 = 7;
                for (var index1 = 0; index1 < num22; ++index1)
                {
                    var vector2_2 =
                        (Vector2.Normalize(this.velocity) *
                         new Vector2((float) (this.width + 50) / 2f, (float) this.height) * 0.75f)
                        .RotatedBy((double) (index1 - (num22 / 2 - 1)) * Math.PI / (double) num22, new Vector2()) +
                        vector2_1;
                    var vector2_3 =
                        ((float) (Main.rand.NextDouble() * 3.14159274101257) - 1.570796f).ToRotationVector2() *
                        (float) Main.rand.Next(3, 8);
                    var index2 = Dust.NewDust(vector2_2 + vector2_3, 0, 0, 172, vector2_3.X * 2f, vector2_3.Y * 2f, 100,
                        new Color(), 1.4f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].noLight = true;
                    Main.dust[index2].velocity /= 4f;
                    Main.dust[index2].velocity -= this.velocity;
                }

                ++this.ai[2];
                if ((double) this.ai[2] < (double) num4)
                    return;
                this.ai[0] = 10f;
                this.ai[1] = 0.0f;
                this.ai[2] = 0.0f;
                ++this.ai[3];
                this.netUpdate = true;
            }
            else if ((double) this.ai[0] == 12.0)
            {
                this.dontTakeDamage = true;
                this.chaseable = false;
                if (this.alpha < (int) byte.MaxValue)
                {
                    this.alpha += 17;
                    if (this.alpha > (int) byte.MaxValue)
                        this.alpha = (int) byte.MaxValue;
                }

                var npc = this;
                npc.velocity = npc.velocity * 0.98f;
                this.velocity.Y = MathHelper.Lerp(this.velocity.Y, 0.0f, 0.02f);
                if ((double) this.ai[2] == (double) (num13 / 2))
                    Main.PlaySound(29, (int) vector2_1.X, (int) vector2_1.Y, 20, 1f, 0.0f);
                if (Main.netMode != 1 && (double) this.ai[2] == (double) (num13 / 2))
                {
                    if ((double) this.ai[1] == 0.0)
                        this.ai[1] = (float) (300 * Math.Sign((vector2_1 - player.Center).X));
                    vector2_1 = this.Center = player.Center + new Vector2(-this.ai[1], -200f);
                    var num22 = Math.Sign(player.Center.X - vector2_1.X);
                    if (num22 != 0)
                    {
                        if ((double) this.ai[2] == 0.0 && num22 != this.direction)
                        {
                            this.rotation += 3.141593f;
                            for (var index = 0; index < this.oldPos.Length; ++index)
                                this.oldPos[index] = Vector2.Zero;
                        }

                        this.direction = num22;
                        if (this.spriteDirection != -this.direction)
                            this.rotation += 3.141593f;
                        this.spriteDirection = -this.direction;
                    }
                }

                ++this.ai[2];
                if ((double) this.ai[2] < (double) num13)
                    return;
                this.ai[0] = 10f;
                this.ai[1] = 0.0f;
                this.ai[2] = 0.0f;
                ++this.ai[3];
                if ((double) this.ai[3] >= 9.0)
                    this.ai[3] = 0.0f;
                this.netUpdate = true;
            }
            else
            {
                if ((double) this.ai[0] != 13.0)
                    return;
                if ((double) this.ai[2] == 0.0)
                    Main.PlaySound(29, (int) vector2_1.X, (int) vector2_1.Y, 20, 1f, 0.0f);
                this.velocity = this.velocity.RotatedBy(-(double) num18 * (double) this.direction, new Vector2());
                this.rotation -= num18 * (float) this.direction;
                ++this.ai[2];
                if ((double) this.ai[2] < (double) num14)
                    return;
                this.ai[0] = 10f;
                this.ai[1] = 0.0f;
                this.ai[2] = 0.0f;
                ++this.ai[3];
                this.netUpdate = true;
            }
        }

        private void AI_037_Destroyer()
        {
            if ((double) this.ai[3] > 0.0)
                this.realLife = (int) this.ai[3];
            if (this.target < 0 || this.target == (int) byte.MaxValue || Main.player[this.target].dead)
                this.TargetClosest(true);
            if (this.type >= 134 && this.type <= 136)
            {
                var num = (double) this.velocity.Length();
                if (this.type == 134 || this.type != 134 && Main.npc[(int) this.ai[1]].alpha < 128)
                {
                    if (this.alpha != 0)
                    {
                        for (var index1 = 0; index1 < 2; ++index1)
                        {
                            var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                                this.height, 182, 0.0f, 0.0f, 100, new Color(), 2f);
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].noLight = true;
                        }
                    }

                    this.alpha -= 42;
                    if (this.alpha < 0)
                        this.alpha = 0;
                }
            }

            if (this.type > 134)
            {
                var flag = false;
                if ((double) this.ai[1] <= 0.0)
                    flag = true;
                else if (Main.npc[(int) this.ai[1]].life <= 0)
                    flag = true;
                if (flag)
                {
                    this.life = 0;
                    this.HitEffect(0, 10.0);
                    this.checkDead();
                }
            }

            if (Main.netMode != 1)
            {
                if ((double) this.ai[0] == 0.0 && this.type == 134)
                {
                    this.ai[3] = (float) this.whoAmI;
                    this.realLife = this.whoAmI;
                    var index1 = this.whoAmI;
                    var num = 80;
                    for (var index2 = 0; index2 <= num; ++index2)
                    {
                        var Type = 135;
                        if (index2 == num)
                            Type = 136;
                        var number = NPC.NewNPC((int) ((double) this.position.X + (double) (this.width / 2)),
                            (int) ((double) this.position.Y + (double) this.height), Type, this.whoAmI, 0.0f, 0.0f,
                            0.0f, 0.0f, (int) byte.MaxValue);
                        Main.npc[number].ai[3] = (float) this.whoAmI;
                        Main.npc[number].realLife = this.whoAmI;
                        Main.npc[number].ai[1] = (float) index1;
                        Main.npc[index1].ai[0] = (float) number;
                        NetMessage.SendData(23, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                        index1 = number;
                    }
                }

                if (this.type == 135)
                {
                    this.localAI[0] += (float) Main.rand.Next(4);
                    if ((double) this.localAI[0] >= (double) Main.rand.Next(1400, 26000))
                    {
                        this.localAI[0] = 0.0f;
                        this.TargetClosest(true);
                        if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position,
                            Main.player[this.target].width, Main.player[this.target].height))
                        {
                            var num1 = 8f;
                            var vector2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                                this.position.Y + (float) (this.height / 2));
                            var num2 = Main.player[this.target].position.X +
                                         (float) Main.player[this.target].width * 0.5f - vector2.X +
                                         (float) Main.rand.Next(-20, 21);
                            var num3 = Main.player[this.target].position.Y +
                                         (float) Main.player[this.target].height * 0.5f - vector2.Y +
                                         (float) Main.rand.Next(-20, 21);
                            var num4 =
                                (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
                            var num5 = num1 / num4;
                            var num6 = num2 * num5;
                            var num7 = num3 * num5;
                            var SpeedX = num6 + (float) Main.rand.Next(-20, 21) * 0.05f;
                            var SpeedY = num7 + (float) Main.rand.Next(-20, 21) * 0.05f;
                            var Damage = 22;
                            if (Main.expertMode)
                                Damage = 18;
                            var Type = 100;
                            vector2.X += SpeedX * 5f;
                            vector2.Y += SpeedY * 5f;
                            var index = Projectile.NewProjectile(vector2.X, vector2.Y, SpeedX, SpeedY, Type, Damage,
                                0.0f, Main.myPlayer, 0.0f, 0.0f);
                            Main.projectile[index].timeLeft = 300;
                            this.netUpdate = true;
                        }
                    }
                }
            }

            var num8 = (int) ((double) this.position.X / 16.0) - 1;
            var num9 = (int) (((double) this.position.X + (double) this.width) / 16.0) + 2;
            var num10 = (int) ((double) this.position.Y / 16.0) - 1;
            var num11 = (int) (((double) this.position.Y + (double) this.height) / 16.0) + 2;
            if (num8 < 0)
                num8 = 0;
            if (num9 > Main.maxTilesX)
                num9 = Main.maxTilesX;
            if (num10 < 0)
                num10 = 0;
            if (num11 > Main.maxTilesY)
                num11 = Main.maxTilesY;
            var flag1 = false;
            if (!flag1)
            {
                for (var index1 = num8; index1 < num9; ++index1)
                {
                    for (var index2 = num10; index2 < num11; ++index2)
                    {
                        if (Main.tile[index1, index2] != null &&
                            (Main.tile[index1, index2].nactive() &&
                             (Main.tileSolid[(int) Main.tile[index1, index2].type] ||
                              Main.tileSolidTop[(int) Main.tile[index1, index2].type] &&
                              Main.tile[index1, index2].frameY == (short) 0) ||
                             Main.tile[index1, index2].liquid > (byte) 64))
                        {
                            Vector2 vector2;
                            vector2.X = (float) (index1 * 16);
                            vector2.Y = (float) (index2 * 16);
                            if ((double) this.position.X + (double) this.width > (double) vector2.X &&
                                (double) this.position.X < (double) vector2.X + 16.0 &&
                                ((double) this.position.Y + (double) this.height > (double) vector2.Y &&
                                 (double) this.position.Y < (double) vector2.Y + 16.0))
                            {
                                flag1 = true;
                                break;
                            }
                        }
                    }
                }
            }

            if (!flag1)
            {
                if (this.type != 135 || (double) this.ai[2] != 1.0)
                    Lighting.AddLight((int) (((double) this.position.X + (double) (this.width / 2)) / 16.0),
                        (int) (((double) this.position.Y + (double) (this.height / 2)) / 16.0), 0.3f, 0.1f, 0.05f);
                this.localAI[1] = 1f;
                if (this.type == 134)
                {
                    var rectangle1 =
                        new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width,
                            this.height);
                    var num1 = 1000;
                    var flag2 = true;
                    if ((double) this.position.Y > (double) Main.player[this.target].position.Y)
                    {
                        for (var index = 0; index < (int) byte.MaxValue; ++index)
                        {
                            if (Main.player[index].active)
                            {
                                var rectangle2 =
                                    new Microsoft.Xna.Framework.Rectangle((int) Main.player[index].position.X - num1,
                                        (int) Main.player[index].position.Y - num1, num1 * 2, num1 * 2);
                                if (rectangle1.Intersects(rectangle2))
                                {
                                    flag2 = false;
                                    break;
                                }
                            }
                        }

                        if (flag2)
                            flag1 = true;
                    }
                }
            }
            else
                this.localAI[1] = 0.0f;

            var num12 = 16f;
            if (Main.dayTime || Main.player[this.target].dead)
            {
                flag1 = false;
                ++this.velocity.Y;
                if ((double) this.position.Y > Main.worldSurface * 16.0)
                {
                    ++this.velocity.Y;
                    num12 = 32f;
                }

                if ((double) this.position.Y > Main.rockLayer * 16.0)
                {
                    for (var index = 0; index < 200; ++index)
                    {
                        if (Main.npc[index].aiStyle == this.aiStyle)
                            Main.npc[index].active = false;
                    }
                }
            }

            var num13 = 0.1f;
            var num14 = 0.15f;
            var vector2_1 = new Vector2(this.position.X + (float) this.width * 0.5f,
                this.position.Y + (float) this.height * 0.5f);
            var num15 = Main.player[this.target].position.X + (float) (Main.player[this.target].width / 2);
            var num16 = Main.player[this.target].position.Y + (float) (Main.player[this.target].height / 2);
            var num17 = (float) ((int) ((double) num15 / 16.0) * 16);
            var num18 = (float) ((int) ((double) num16 / 16.0) * 16);
            vector2_1.X = (float) ((int) ((double) vector2_1.X / 16.0) * 16);
            vector2_1.Y = (float) ((int) ((double) vector2_1.Y / 16.0) * 16);
            var num19 = num17 - vector2_1.X;
            var num20 = num18 - vector2_1.Y;
            var num21 = (float) Math.Sqrt((double) num19 * (double) num19 + (double) num20 * (double) num20);
            if ((double) this.ai[1] > 0.0)
            {
                if ((double) this.ai[1] < (double) Main.npc.Length)
                {
                    try
                    {
                        var vector2_2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                            this.position.Y + (float) this.height * 0.5f);
                        num19 = Main.npc[(int) this.ai[1]].position.X + (float) (Main.npc[(int) this.ai[1]].width / 2) -
                                vector2_2.X;
                        num20 = Main.npc[(int) this.ai[1]].position.Y +
                                (float) (Main.npc[(int) this.ai[1]].height / 2) - vector2_2.Y;
                    }
                    catch
                    {
                    }

                    this.rotation = (float) Math.Atan2((double) num20, (double) num19) + 1.57f;
                    var num1 = (float) Math.Sqrt((double) num19 * (double) num19 + (double) num20 * (double) num20);
                    var num2 = (int) (44.0 * (double) this.scale);
                    var num3 = (num1 - (float) num2) / num1;
                    var num4 = num19 * num3;
                    var num5 = num20 * num3;
                    this.velocity = Vector2.Zero;
                    this.position.X += num4;
                    this.position.Y += num5;
                    return;
                }
            }

            if (!flag1)
            {
                this.TargetClosest(true);
                this.velocity.Y += 0.15f;
                if ((double) this.velocity.Y > (double) num12)
                    this.velocity.Y = num12;
                if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < (double) num12 * 0.4)
                {
                    if ((double) this.velocity.X < 0.0)
                        this.velocity.X -= num13 * 1.1f;
                    else
                        this.velocity.X += num13 * 1.1f;
                }
                else if ((double) this.velocity.Y == (double) num12)
                {
                    if ((double) this.velocity.X < (double) num19)
                        this.velocity.X += num13;
                    else if ((double) this.velocity.X > (double) num19)
                        this.velocity.X -= num13;
                }
                else if ((double) this.velocity.Y > 4.0)
                {
                    if ((double) this.velocity.X < 0.0)
                        this.velocity.X += num13 * 0.9f;
                    else
                        this.velocity.X -= num13 * 0.9f;
                }
            }
            else
            {
                if (this.soundDelay == 0)
                {
                    var num1 = num21 / 40f;
                    if ((double) num1 < 10.0)
                        num1 = 10f;
                    if ((double) num1 > 20.0)
                        num1 = 20f;
                    this.soundDelay = (int) num1;
                    Main.PlaySound(15, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                }

                var num2 = (float) Math.Sqrt((double) num19 * (double) num19 + (double) num20 * (double) num20);
                var num3 = Math.Abs(num19);
                var num4 = Math.Abs(num20);
                var num5 = num12 / num2;
                var num6 = num19 * num5;
                var num7 = num20 * num5;
                if (((double) this.velocity.X > 0.0 && (double) num6 > 0.0 ||
                     (double) this.velocity.X < 0.0 && (double) num6 < 0.0) &&
                    ((double) this.velocity.Y > 0.0 && (double) num7 > 0.0 ||
                     (double) this.velocity.Y < 0.0 && (double) num7 < 0.0))
                {
                    if ((double) this.velocity.X < (double) num6)
                        this.velocity.X += num14;
                    else if ((double) this.velocity.X > (double) num6)
                        this.velocity.X -= num14;
                    if ((double) this.velocity.Y < (double) num7)
                        this.velocity.Y += num14;
                    else if ((double) this.velocity.Y > (double) num7)
                        this.velocity.Y -= num14;
                }

                if ((double) this.velocity.X > 0.0 && (double) num6 > 0.0 ||
                    (double) this.velocity.X < 0.0 && (double) num6 < 0.0 ||
                    ((double) this.velocity.Y > 0.0 && (double) num7 > 0.0 ||
                     (double) this.velocity.Y < 0.0 && (double) num7 < 0.0))
                {
                    if ((double) this.velocity.X < (double) num6)
                        this.velocity.X += num13;
                    else if ((double) this.velocity.X > (double) num6)
                        this.velocity.X -= num13;
                    if ((double) this.velocity.Y < (double) num7)
                        this.velocity.Y += num13;
                    else if ((double) this.velocity.Y > (double) num7)
                        this.velocity.Y -= num13;
                    if ((double) Math.Abs(num7) < (double) num12 * 0.2 &&
                        ((double) this.velocity.X > 0.0 && (double) num6 < 0.0 ||
                         (double) this.velocity.X < 0.0 && (double) num6 > 0.0))
                    {
                        if ((double) this.velocity.Y > 0.0)
                            this.velocity.Y += num13 * 2f;
                        else
                            this.velocity.Y -= num13 * 2f;
                    }

                    if ((double) Math.Abs(num6) < (double) num12 * 0.2 &&
                        ((double) this.velocity.Y > 0.0 && (double) num7 < 0.0 ||
                         (double) this.velocity.Y < 0.0 && (double) num7 > 0.0))
                    {
                        if ((double) this.velocity.X > 0.0)
                            this.velocity.X += num13 * 2f;
                        else
                            this.velocity.X -= num13 * 2f;
                    }
                }
                else if ((double) num3 > (double) num4)
                {
                    if ((double) this.velocity.X < (double) num6)
                        this.velocity.X += num13 * 1.1f;
                    else if ((double) this.velocity.X > (double) num6)
                        this.velocity.X -= num13 * 1.1f;
                    if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < (double) num12 * 0.5)
                    {
                        if ((double) this.velocity.Y > 0.0)
                            this.velocity.Y += num13;
                        else
                            this.velocity.Y -= num13;
                    }
                }
                else
                {
                    if ((double) this.velocity.Y < (double) num7)
                        this.velocity.Y += num13 * 1.1f;
                    else if ((double) this.velocity.Y > (double) num7)
                        this.velocity.Y -= num13 * 1.1f;
                    if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < (double) num12 * 0.5)
                    {
                        if ((double) this.velocity.X > 0.0)
                            this.velocity.X += num13;
                        else
                            this.velocity.X -= num13;
                    }
                }
            }

            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
            if (this.type != 134)
                return;
            if (flag1)
            {
                if ((double) this.localAI[0] != 1.0)
                    this.netUpdate = true;
                this.localAI[0] = 1f;
            }
            else
            {
                if ((double) this.localAI[0] != 0.0)
                    this.netUpdate = true;
                this.localAI[0] = 0.0f;
            }

            if (((double) this.velocity.X <= 0.0 || (double) this.oldVelocity.X >= 0.0) &&
                ((double) this.velocity.X >= 0.0 || (double) this.oldVelocity.X <= 0.0) &&
                (((double) this.velocity.Y <= 0.0 || (double) this.oldVelocity.Y >= 0.0) &&
                 ((double) this.velocity.Y >= 0.0 || (double) this.oldVelocity.Y <= 0.0)) || this.justHit)
                return;
            this.netUpdate = true;
        }

        private void AI_005_EaterOfSouls()
        {
            if (this.target < 0 || this.target == (int) byte.MaxValue || Main.player[this.target].dead)
                this.TargetClosest(true);
            var num1 = 6f;
            var num2 = 0.05f;
            if (this.type == 6 || this.type == 173)
            {
                num1 = 4f;
                num2 = 0.02f;
                if (this.type == 6 && Main.expertMode)
                    num2 = 0.035f;
            }
            else if (this.type == 94)
            {
                num1 = 4.2f;
                num2 = 0.022f;
            }
            else if (this.type == 252)
            {
                if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position,
                    Main.player[this.target].width, Main.player[this.target].height))
                {
                    num1 = 6f;
                    num2 = 0.1f;
                }
                else
                {
                    num2 = 0.01f;
                    num1 = 2f;
                }
            }
            else if (this.type == 42 || this.type >= 231 && this.type <= 235)
            {
                var num3 = 3.5f;
                var num4 = 0.021f;
                if (this.type == 231)
                {
                    num3 = 3f;
                    num4 = 0.017f;
                }

                num1 = num3 * (1f - this.scale);
                num2 = num4 * (1f - this.scale);
            }
            else if (this.type == 205)
            {
                num1 = 3.25f;
                num2 = 0.018f;
            }
            else if (this.type == 176)
            {
                num1 = 4f;
                num2 = 0.017f;
            }
            else if (this.type == 23)
            {
                num1 = 1f;
                num2 = 0.03f;
            }
            else if (this.type == 5)
            {
                num1 = 5f;
                num2 = 0.03f;
            }
            else if (this.type == 210 || this.type == 211)
            {
                ++this.localAI[0];
                var num3 = (float) (((double) this.localAI[0] - 60.0) / 60.0);
                if ((double) num3 > 1.0)
                {
                    num3 = 1f;
                }
                else
                {
                    if ((double) this.velocity.X > 6.0)
                        this.velocity.X = 6f;
                    if ((double) this.velocity.X < -6.0)
                        this.velocity.X = -6f;
                    if ((double) this.velocity.Y > 6.0)
                        this.velocity.Y = 6f;
                    if ((double) this.velocity.Y < -6.0)
                        this.velocity.Y = -6f;
                }

                num1 = 5f;
                num2 = 0.1f * num3;
            }

            var vector2_1 = new Vector2(this.position.X + (float) this.width * 0.5f,
                this.position.Y + (float) this.height * 0.5f);
            var num5 = Main.player[this.target].position.X + (float) (Main.player[this.target].width / 2);
            var num6 = Main.player[this.target].position.Y + (float) (Main.player[this.target].height / 2);
            var num7 = (float) ((int) ((double) num5 / 8.0) * 8);
            var num8 = (float) ((int) ((double) num6 / 8.0) * 8);
            vector2_1.X = (float) ((int) ((double) vector2_1.X / 8.0) * 8);
            vector2_1.Y = (float) ((int) ((double) vector2_1.Y / 8.0) * 8);
            var num9 = num7 - vector2_1.X;
            var num10 = num8 - vector2_1.Y;
            var num11 = (float) Math.Sqrt((double) num9 * (double) num9 + (double) num10 * (double) num10);
            var num12 = num11;
            var flag = false;
            if ((double) num11 > 600.0)
                flag = true;
            float SpeedX1;
            float SpeedY1;
            if ((double) num11 == 0.0)
            {
                SpeedX1 = this.velocity.X;
                SpeedY1 = this.velocity.Y;
            }
            else
            {
                var num3 = num1 / num11;
                SpeedX1 = num9 * num3;
                SpeedY1 = num10 * num3;
            }

            if (this.type == 6 || this.type == 42 || (this.type == 94 || this.type == 139) ||
                (this.type == 173 || this.type == 176 || (this.type == 205 || this.type == 210)) ||
                (this.type == 211 || this.type >= 231 && this.type <= 235))
            {
                if ((double) num12 > 100.0 || this.type == 42 || (this.type == 94 || this.type == 176) ||
                    (this.type == 210 || this.type == 211 || this.type >= 231 && this.type <= 235))
                {
                    ++this.ai[0];
                    if ((double) this.ai[0] > 0.0)
                        this.velocity.Y += 23f / 1000f;
                    else
                        this.velocity.Y -= 23f / 1000f;
                    if ((double) this.ai[0] < -100.0 || (double) this.ai[0] > 100.0)
                        this.velocity.X += 23f / 1000f;
                    else
                        this.velocity.X -= 23f / 1000f;
                    if ((double) this.ai[0] > 200.0)
                        this.ai[0] = -200f;
                }

                if ((double) num12 < 150.0 && (this.type == 6 || this.type == 94 || this.type == 173))
                {
                    this.velocity.X += SpeedX1 * 0.007f;
                    this.velocity.Y += SpeedY1 * 0.007f;
                }
            }

            if (Main.player[this.target].dead)
            {
                SpeedX1 = (float) ((double) this.direction * (double) num1 / 2.0);
                SpeedY1 = (float) (-(double) num1 / 2.0);
            }

            if ((double) this.velocity.X < (double) SpeedX1)
            {
                this.velocity.X += num2;
                if (this.type != 173 && this.type != 6 && this.type != 42 &&
                    ((this.type < 231 || this.type > 235) && (this.type != 94 && this.type != 139)) &&
                    ((double) this.velocity.X < 0.0 && (double) SpeedX1 > 0.0))
                    this.velocity.X += num2;
            }
            else if ((double) this.velocity.X > (double) SpeedX1)
            {
                this.velocity.X -= num2;
                if (this.type != 173 && this.type != 6 && this.type != 42 &&
                    ((this.type < 231 || this.type > 235) && (this.type != 94 && this.type != 139)) &&
                    ((double) this.velocity.X > 0.0 && (double) SpeedX1 < 0.0))
                    this.velocity.X -= num2;
            }

            if ((double) this.velocity.Y < (double) SpeedY1)
            {
                this.velocity.Y += num2;
                if (this.type != 173 && this.type != 6 && this.type != 42 &&
                    ((this.type < 231 || this.type > 235) && (this.type != 94 && this.type != 139)) &&
                    ((double) this.velocity.Y < 0.0 && (double) SpeedY1 > 0.0))
                    this.velocity.Y += num2;
            }
            else if ((double) this.velocity.Y > (double) SpeedY1)
            {
                this.velocity.Y -= num2;
                if (this.type != 173 && this.type != 6 && this.type != 42 &&
                    ((this.type < 231 || this.type > 235) && (this.type != 94 && this.type != 139)) &&
                    ((double) this.velocity.Y > 0.0 && (double) SpeedY1 < 0.0))
                    this.velocity.Y -= num2;
            }

            if (this.type == 23)
            {
                if ((double) SpeedX1 > 0.0)
                {
                    this.spriteDirection = 1;
                    this.rotation = (float) Math.Atan2((double) SpeedY1, (double) SpeedX1);
                }
                else if ((double) SpeedX1 < 0.0)
                {
                    this.spriteDirection = -1;
                    this.rotation = (float) Math.Atan2((double) SpeedY1, (double) SpeedX1) + 3.14f;
                }
            }
            else if (this.type == 139)
            {
                ++this.localAI[0];
                if (this.justHit)
                    this.localAI[0] = 0.0f;
                if (Main.netMode != 1 && (double) this.localAI[0] >= 120.0)
                {
                    this.localAI[0] = 0.0f;
                    if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position,
                        Main.player[this.target].width, Main.player[this.target].height))
                    {
                        var Damage = 25;
                        if (Main.expertMode)
                            Damage = 22;
                        var Type = 84;
                        Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX1, SpeedY1, Type, Damage, 0.0f,
                            Main.myPlayer, 0.0f, 0.0f);
                    }
                }

                if (!WorldGen.SolidTile(((int) this.position.X + this.width / 2) / 16,
                    ((int) this.position.Y + this.height / 2) / 16))
                    Lighting.AddLight((int) (((double) this.position.X + (double) (this.width / 2)) / 16.0),
                        (int) (((double) this.position.Y + (double) (this.height / 2)) / 16.0), 0.3f, 0.1f, 0.05f);
                if ((double) SpeedX1 > 0.0)
                {
                    this.spriteDirection = 1;
                    this.rotation = (float) Math.Atan2((double) SpeedY1, (double) SpeedX1);
                }

                if ((double) SpeedX1 < 0.0)
                {
                    this.spriteDirection = -1;
                    this.rotation = (float) Math.Atan2((double) SpeedY1, (double) SpeedX1) + 3.14f;
                }
            }
            else if (this.type == 6 || this.type == 94 || this.type == 173)
                this.rotation = (float) Math.Atan2((double) SpeedY1, (double) SpeedX1) - 1.57f;
            else if (this.type == 42 || this.type == 176 || this.type == 205 || this.type >= 231 && this.type <= 235)
            {
                if ((double) this.velocity.X > 0.0)
                    this.spriteDirection = 1;
                if ((double) this.velocity.X < 0.0)
                    this.spriteDirection = -1;
                this.rotation = this.velocity.X * 0.1f;
            }
            else
                this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) - 1.57f;

            if (this.type == 6 || this.type == 23 || (this.type == 42 || this.type == 94) ||
                (this.type == 139 || this.type == 173 || (this.type == 176 || this.type == 205)) ||
                (this.type == 210 || this.type == 211 || this.type >= 231 && this.type <= 235))
            {
                var num3 = 0.7f;
                if (this.type == 6 || this.type == 173)
                    num3 = 0.4f;
                if (this.collideX)
                {
                    this.netUpdate = true;
                    this.velocity.X = this.oldVelocity.X * -num3;
                    if (this.direction == -1 && (double) this.velocity.X > 0.0 && (double) this.velocity.X < 2.0)
                        this.velocity.X = 2f;
                    if (this.direction == 1 && (double) this.velocity.X < 0.0 && (double) this.velocity.X > -2.0)
                        this.velocity.X = -2f;
                }

                if (this.collideY)
                {
                    this.netUpdate = true;
                    this.velocity.Y = this.oldVelocity.Y * -num3;
                    if ((double) this.velocity.Y > 0.0 && (double) this.velocity.Y < 1.5)
                        this.velocity.Y = 2f;
                    if ((double) this.velocity.Y < 0.0 && (double) this.velocity.Y > -1.5)
                        this.velocity.Y = -2f;
                }

                if (this.type == 23)
                {
                    var index = Dust.NewDust(
                        new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y), this.width,
                        this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, new Color(), 2f);
                    Main.dust[index].noGravity = true;
                    Main.dust[index].velocity.X *= 0.3f;
                    Main.dust[index].velocity.Y *= 0.3f;
                }
                else if (this.type != 42 && this.type != 139 && (this.type != 176 && this.type != 205) &&
                         (this.type != 210 && this.type != 211 && this.type != 252) &&
                         ((this.type < 231 || this.type > 235) && Main.rand.Next(20) == 0))
                {
                    var Type = 18;
                    if (this.type == 173)
                        Type = 5;
                    var index = Dust.NewDust(
                        new Vector2(this.position.X, this.position.Y + (float) this.height * 0.25f), this.width,
                        (int) ((double) this.height * 0.5), Type, this.velocity.X, 2f, 75, this.color, this.scale);
                    Main.dust[index].velocity.X *= 0.5f;
                    Main.dust[index].velocity.Y *= 0.1f;
                }
            }
            else if (this.type != 252 && Main.rand.Next(40) == 0)
            {
                var index = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float) this.height * 0.25f),
                    this.width, (int) ((double) this.height * 0.5), 5, this.velocity.X, 2f, 0, new Color(), 1f);
                Main.dust[index].velocity.X *= 0.5f;
                Main.dust[index].velocity.Y *= 0.1f;
            }

            if ((this.type == 6 || this.type == 94 || this.type == 173) && this.wet)
            {
                if ((double) this.velocity.Y > 0.0)
                    this.velocity.Y *= 0.95f;
                this.velocity.Y -= 0.3f;
                if ((double) this.velocity.Y < -2.0)
                    this.velocity.Y = -2f;
            }

            if (this.type == 205 && this.wet)
            {
                if ((double) this.velocity.Y > 0.0)
                    this.velocity.Y *= 0.95f;
                this.velocity.Y -= 0.5f;
                if ((double) this.velocity.Y < -4.0)
                    this.velocity.Y = -4f;
                this.TargetClosest(true);
            }

            if (this.type == 42 || this.type == 176 || this.type >= 231 && this.type <= 235)
            {
                if (this.wet)
                {
                    if ((double) this.velocity.Y > 0.0)
                        this.velocity.Y *= 0.95f;
                    this.velocity.Y -= 0.5f;
                    if ((double) this.velocity.Y < -4.0)
                        this.velocity.Y = -4f;
                    this.TargetClosest(true);
                }

                if ((double) this.ai[1] == 101.0)
                {
                    Main.PlaySound(SoundID.Item17, this.position);
                    this.ai[1] = 0.0f;
                }

                if (Main.netMode != 1)
                {
                    this.ai[1] += (float) Main.rand.Next(5, 20) * 0.1f * this.scale;
                    if (this.type == 176)
                        this.ai[1] += (float) Main.rand.Next(5, 20) * 0.1f * this.scale;
                    if ((double) Main.player[this.target].stealth == 0.0 && Main.player[this.target].itemAnimation == 0)
                        this.ai[1] = 0.0f;
                    if ((double) this.ai[1] >= 130.0)
                    {
                        if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position,
                            Main.player[this.target].width, Main.player[this.target].height))
                        {
                            var num3 = 8f;
                            var vector2_2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                                this.position.Y + (float) (this.height / 2));
                            var num4 = Main.player[this.target].position.X +
                                         (float) Main.player[this.target].width * 0.5f - vector2_2.X +
                                         (float) Main.rand.Next(-20, 21);
                            var num13 = Main.player[this.target].position.Y +
                                          (float) Main.player[this.target].height * 0.5f - vector2_2.Y +
                                          (float) Main.rand.Next(-20, 21);
                            if ((double) num4 < 0.0 && (double) this.velocity.X < 0.0 ||
                                (double) num4 > 0.0 && (double) this.velocity.X > 0.0)
                            {
                                var num14 =
                                    (float) Math.Sqrt((double) num4 * (double) num4 + (double) num13 * (double) num13);
                                var num15 = num3 / num14;
                                var SpeedX2 = num4 * num15;
                                var SpeedY2 = num13 * num15;
                                var Damage = (int) (10.0 * (double) this.scale);
                                if (this.type == 176)
                                    Damage = (int) (30.0 * (double) this.scale);
                                var Type = 55;
                                var index = Projectile.NewProjectile(vector2_2.X, vector2_2.Y, SpeedX2, SpeedY2, Type,
                                    Damage, 0.0f, Main.myPlayer, 0.0f, 0.0f);
                                Main.projectile[index].timeLeft = 300;
                                this.ai[1] = 101f;
                                this.netUpdate = true;
                            }
                            else
                                this.ai[1] = 0.0f;
                        }
                        else
                            this.ai[1] = 0.0f;
                    }
                }
            }

            if (this.type == 139 && flag)
            {
                if ((double) this.velocity.X > 0.0 && (double) SpeedX1 > 0.0 ||
                    (double) this.velocity.X < 0.0 && (double) SpeedX1 < 0.0)
                {
                    if ((double) Math.Abs(this.velocity.X) < 12.0)
                        this.velocity.X *= 1.05f;
                }
                else
                    this.velocity.X *= 0.9f;
            }

            if (Main.netMode != 1 && this.type == 94 && !Main.player[this.target].dead)
            {
                if (this.justHit)
                    this.localAI[0] = 0.0f;
                ++this.localAI[0];
                if ((double) this.localAI[0] == 180.0)
                {
                    if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position,
                        Main.player[this.target].width, Main.player[this.target].height))
                        NPC.NewNPC(
                            (int) ((double) this.position.X + (double) (this.width / 2) + (double) this.velocity.X),
                            (int) ((double) this.position.Y + (double) (this.height / 2) + (double) this.velocity.Y),
                            112, 0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
                    this.localAI[0] = 0.0f;
                }
            }

            if (Main.dayTime && this.type != 173 && (this.type != 6 && this.type != 23) &&
                (this.type != 42 && this.type != 94 && (this.type != 176 && this.type != 205)) &&
                (this.type != 210 && this.type != 211 && this.type != 252 && (this.type < 231 || this.type > 235)) ||
                Main.player[this.target].dead)
            {
                this.velocity.Y -= num2 * 2f;
                if (this.timeLeft > 10)
                    this.timeLeft = 10;
            }

            if (((double) this.velocity.X <= 0.0 || (double) this.oldVelocity.X >= 0.0) &&
                ((double) this.velocity.X >= 0.0 || (double) this.oldVelocity.X <= 0.0) &&
                (((double) this.velocity.Y <= 0.0 || (double) this.oldVelocity.Y >= 0.0) &&
                 ((double) this.velocity.Y >= 0.0 || (double) this.oldVelocity.Y <= 0.0)) || this.justHit)
                return;
            this.netUpdate = true;
        }

        private void AI_006_Worms()
        {
            if (this.type == 117 && (double) this.localAI[1] == 0.0)
            {
                this.localAI[1] = 1f;
                Main.PlaySound(SoundID.NPCDeath13, this.position);
                var num = 1;
                if ((double) this.velocity.X < 0.0)
                    num = -1;
                for (var index = 0; index < 20; ++index)
                    Dust.NewDust(new Vector2(this.position.X - 20f, this.position.Y - 20f), this.width + 40,
                        this.height + 40, 5, (float) (num * 8), -1f, 0, new Color(), 1f);
            }

            if (this.type == 454 && (double) this.localAI[3] == 0.0)
            {
                Main.PlaySound(SoundID.Item119, this.position);
                this.localAI[3] = 1f;
            }

            if (this.type >= 454 && this.type <= 459)
            {
                this.dontTakeDamage = this.alpha > 0;
                if (this.type == 454 || this.type != 454 && Main.npc[(int) this.ai[1]].alpha < 85)
                {
                    if (this.dontTakeDamage)
                    {
                        for (var index1 = 0; index1 < 2; ++index1)
                        {
                            var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                                this.height, 228, 0.0f, 0.0f, 100, new Color(), 2f);
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].noLight = true;
                        }
                    }

                    this.alpha -= 42;
                    if (this.alpha < 0)
                        this.alpha = 0;
                }
            }
            else if (this.type == 402 && (double) this.ai[1] == 0.0)
            {
                this.ai[1] = (float) Main.rand.Next(-2, 0);
                this.netUpdate = true;
            }

            if (Main.netMode != 1 && Main.expertMode)
            {
                if (this.type == 14 && (double) this.position.Y / 16.0 < Main.worldSurface)
                {
                    if (Main.rand.Next(900) == 0)
                    {
                        this.TargetClosest(true);
                        if (Collision.CanHitLine(this.Center, 1, 1, Main.player[this.target].Center, 1, 1))
                            NPC.NewNPC(
                                (int) ((double) this.position.X + (double) (this.width / 2) + (double) this.velocity.X),
                                (int) ((double) this.position.Y + (double) (this.height / 2) +
                                       (double) this.velocity.Y), 112, 0, 0.0f, 1f, 0.0f, 0.0f, (int) byte.MaxValue);
                    }
                }
                else if (this.type == 13)
                {
                    var maxValue = 90 + (int) ((double) this.life / (double) this.lifeMax * 60.0 * 5.0);
                    if (Main.rand.Next(maxValue) == 0)
                    {
                        this.TargetClosest(true);
                        if (Collision.CanHitLine(this.Center, 1, 1, Main.player[this.target].Center, 1, 1))
                            NPC.NewNPC(
                                (int) ((double) this.position.X + (double) (this.width / 2) + (double) this.velocity.X),
                                (int) ((double) this.position.Y + (double) (this.height / 2) +
                                       (double) this.velocity.Y), 112, 0, 0.0f, 1f, 0.0f, 0.0f, (int) byte.MaxValue);
                    }
                }
            }

            var flag1 = false;
            var num1 = 0.2f;
            switch (this.type)
            {
                case 10:
                case 39:
                case 95:
                case 117:
                case 510:
                    flag1 = true;
                    break;
                case 513:
                    flag1 = !Main.player[this.target].ZoneUndergroundDesert;
                    num1 = 0.1f;
                    break;
            }

            if (this.type >= 13 && this.type <= 15)
                this.realLife = -1;
            else if ((double) this.ai[3] > 0.0)
                this.realLife = (int) this.ai[3];
            if (this.target < 0 || this.target == (int) byte.MaxValue || Main.player[this.target].dead ||
                flag1 && (double) Main.player[this.target].position.Y < Main.worldSurface * 16.0)
                this.TargetClosest(true);
            if (Main.player[this.target].dead ||
                flag1 && (double) Main.player[this.target].position.Y < Main.worldSurface * 16.0)
            {
                if (this.timeLeft > 300)
                    this.timeLeft = 300;
                if (flag1)
                    this.velocity.Y += num1;
            }

            if (Main.netMode != 1)
            {
                if (this.type == 87 && (double) this.ai[0] == 0.0)
                {
                    this.ai[3] = (float) this.whoAmI;
                    this.realLife = this.whoAmI;
                    var index1 = this.whoAmI;
                    for (var index2 = 0; index2 < 14; ++index2)
                    {
                        var Type = 89;
                        if (index2 == 1 || index2 == 8)
                        {
                            Type = 88;
                        }
                        else
                        {
                            switch (index2)
                            {
                                case 11:
                                    Type = 90;
                                    break;
                                case 12:
                                    Type = 91;
                                    break;
                                case 13:
                                    Type = 92;
                                    break;
                            }
                        }

                        var number = NPC.NewNPC((int) ((double) this.position.X + (double) (this.width / 2)),
                            (int) ((double) this.position.Y + (double) this.height), Type, this.whoAmI, 0.0f, 0.0f,
                            0.0f, 0.0f, (int) byte.MaxValue);
                        Main.npc[number].ai[3] = (float) this.whoAmI;
                        Main.npc[number].realLife = this.whoAmI;
                        Main.npc[number].ai[1] = (float) index1;
                        Main.npc[index1].ai[0] = (float) number;
                        NetMessage.SendData(23, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                        index1 = number;
                    }
                }

                if (this.type == 454 && (double) this.ai[0] == 0.0)
                {
                    this.ai[3] = (float) this.whoAmI;
                    this.realLife = this.whoAmI;
                    var index1 = this.whoAmI;
                    for (var index2 = 0; index2 < 30; ++index2)
                    {
                        var Type = 456;
                        if ((index2 - 2) % 4 == 0 && index2 < 26)
                        {
                            Type = 455;
                        }
                        else
                        {
                            switch (index2)
                            {
                                case 27:
                                    Type = 457;
                                    break;
                                case 28:
                                    Type = 458;
                                    break;
                                case 29:
                                    Type = 459;
                                    break;
                            }
                        }

                        var number = NPC.NewNPC((int) ((double) this.position.X + (double) (this.width / 2)),
                            (int) ((double) this.position.Y + (double) this.height), Type, this.whoAmI, 0.0f, 0.0f,
                            0.0f, 0.0f, (int) byte.MaxValue);
                        Main.npc[number].ai[3] = (float) this.whoAmI;
                        Main.npc[number].realLife = this.whoAmI;
                        Main.npc[number].ai[1] = (float) index1;
                        Main.npc[index1].ai[0] = (float) number;
                        NetMessage.SendData(23, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                        index1 = number;
                    }
                }

                if (this.type == 513 && (double) this.ai[0] == 0.0)
                {
                    this.ai[3] = (float) this.whoAmI;
                    this.realLife = this.whoAmI;
                    var index1 = this.whoAmI;
                    var num2 = Main.rand.Next(6, 10);
                    for (var index2 = 0; index2 < num2; ++index2)
                    {
                        var Type = 514;
                        if (index2 == num2 - 1)
                            Type = 515;
                        var number = NPC.NewNPC((int) ((double) this.position.X + (double) (this.width / 2)),
                            (int) ((double) this.position.Y + (double) this.height), Type, this.whoAmI, 0.0f, 0.0f,
                            0.0f, 0.0f, (int) byte.MaxValue);
                        Main.npc[number].ai[3] = (float) this.whoAmI;
                        Main.npc[number].realLife = this.whoAmI;
                        Main.npc[number].ai[1] = (float) index1;
                        Main.npc[index1].ai[0] = (float) number;
                        NetMessage.SendData(23, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                        index1 = number;
                    }
                }

                if (this.type == 510 && (double) this.ai[0] == 0.0)
                {
                    this.ai[3] = (float) this.whoAmI;
                    this.realLife = this.whoAmI;
                    var index1 = this.whoAmI;
                    var num2 = Main.rand.Next(12, 21);
                    for (var index2 = 0; index2 < num2; ++index2)
                    {
                        var Type = 511;
                        if (index2 == num2 - 1)
                            Type = 512;
                        var number = NPC.NewNPC((int) ((double) this.position.X + (double) (this.width / 2)),
                            (int) ((double) this.position.Y + (double) this.height), Type, this.whoAmI, 0.0f, 0.0f,
                            0.0f, 0.0f, (int) byte.MaxValue);
                        Main.npc[number].ai[3] = (float) this.whoAmI;
                        Main.npc[number].realLife = this.whoAmI;
                        Main.npc[number].ai[1] = (float) index1;
                        Main.npc[index1].ai[0] = (float) number;
                        NetMessage.SendData(23, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                        index1 = number;
                    }
                }
                else if ((this.type == 7 || this.type == 8 || (this.type == 10 || this.type == 11) ||
                          (this.type == 13 || this.type == 14 || (this.type == 39 || this.type == 40)) ||
                          (this.type == 95 || this.type == 96 || (this.type == 98 || this.type == 99) ||
                           (this.type == 117 || this.type == 118))) && (double) this.ai[0] == 0.0)
                {
                    if (this.type == 7 || this.type == 10 || (this.type == 13 || this.type == 39) ||
                        (this.type == 95 || this.type == 98 || this.type == 117))
                    {
                        if (this.type < 13 || this.type > 15)
                        {
                            this.ai[3] = (float) this.whoAmI;
                            this.realLife = this.whoAmI;
                        }

                        this.ai[2] = (float) Main.rand.Next(8, 13);
                        if (this.type == 10)
                            this.ai[2] = (float) Main.rand.Next(4, 7);
                        if (this.type == 13)
                        {
                            this.ai[2] = (float) Main.rand.Next(45, 56);
                            if (Main.expertMode)
                                this.ai[2] = (float) (int) ((double) this.ai[2] * 1.10000002384186);
                        }

                        if (this.type == 39)
                            this.ai[2] = (float) Main.rand.Next(12, 19);
                        if (this.type == 95)
                            this.ai[2] = (float) Main.rand.Next(6, 12);
                        if (this.type == 98)
                            this.ai[2] = (float) Main.rand.Next(20, 26);
                        if (this.type == 117)
                            this.ai[2] = (float) Main.rand.Next(3, 6);
                        this.ai[0] = (float) NPC.NewNPC((int) ((double) this.position.X + (double) (this.width / 2)),
                            (int) ((double) this.position.Y + (double) this.height), this.type + 1, this.whoAmI, 0.0f,
                            0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
                    }
                    else
                        this.ai[0] =
                            this.type != 8 && this.type != 11 && (this.type != 14 && this.type != 40) &&
                            (this.type != 96 && this.type != 99 && this.type != 118) || (double) this.ai[2] <= 0.0
                                ? (float) NPC.NewNPC((int) ((double) this.position.X + (double) (this.width / 2)),
                                    (int) ((double) this.position.Y + (double) this.height), this.type + 1, this.whoAmI,
                                    0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue)
                                : (float) NPC.NewNPC((int) ((double) this.position.X + (double) (this.width / 2)),
                                    (int) ((double) this.position.Y + (double) this.height), this.type, this.whoAmI,
                                    0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);

                    if (this.type < 13 || this.type > 15)
                    {
                        Main.npc[(int) this.ai[0]].ai[3] = this.ai[3];
                        Main.npc[(int) this.ai[0]].realLife = this.realLife;
                    }

                    Main.npc[(int) this.ai[0]].ai[1] = (float) this.whoAmI;
                    Main.npc[(int) this.ai[0]].ai[2] = this.ai[2] - 1f;
                    this.netUpdate = true;
                }

                if (this.type == 412 && (double) this.ai[0] == 0.0)
                {
                    this.ai[3] = (float) this.whoAmI;
                    this.realLife = this.whoAmI;
                    var index1 = this.whoAmI;
                    var num2 = 30;
                    for (var index2 = 0; index2 < num2; ++index2)
                    {
                        var Type = 413;
                        if (index2 == num2 - 1)
                            Type = 414;
                        var number = NPC.NewNPC((int) ((double) this.position.X + (double) (this.width / 2)),
                            (int) ((double) this.position.Y + (double) this.height), Type, this.whoAmI, 0.0f, 0.0f,
                            0.0f, 0.0f, (int) byte.MaxValue);
                        Main.npc[number].ai[3] = (float) this.whoAmI;
                        Main.npc[number].realLife = this.whoAmI;
                        Main.npc[number].ai[1] = (float) index1;
                        Main.npc[index1].ai[0] = (float) number;
                        NetMessage.SendData(23, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                        index1 = number;
                    }
                }

                switch (this.type)
                {
                    case 8:
                    case 9:
                    case 11:
                    case 12:
                    case 40:
                    case 41:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 96:
                    case 97:
                    case 99:
                    case 100:
                    case 118:
                    case 119:
                    case 413:
                    case 414:
                    case 455:
                    case 456:
                    case 457:
                    case 458:
                    case 459:
                    case 511:
                    case 512:
                    case 514:
                    case 515:
                        if (!Main.npc[(int) this.ai[1]].active || Main.npc[(int) this.ai[1]].aiStyle != this.aiStyle)
                        {
                            this.life = 0;
                            this.HitEffect(0, 10.0);
                            this.active = false;
                            NetMessage.SendData(28, -1, -1, (NetworkText) null, this.whoAmI, -1f, 0.0f, 0.0f, 0, 0, 0);
                            break;
                        }

                        break;
                }

                switch (this.type)
                {
                    case 7:
                    case 8:
                    case 10:
                    case 11:
                    case 39:
                    case 40:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 95:
                    case 96:
                    case 98:
                    case 99:
                    case 117:
                    case 118:
                    case 412:
                    case 413:
                    case 454:
                    case 455:
                    case 456:
                    case 457:
                    case 458:
                    case 510:
                    case 511:
                    case 513:
                    case 514:
                        if (!Main.npc[(int) this.ai[0]].active || Main.npc[(int) this.ai[0]].aiStyle != this.aiStyle)
                        {
                            this.life = 0;
                            this.HitEffect(0, 10.0);
                            this.active = false;
                            NetMessage.SendData(28, -1, -1, (NetworkText) null, this.whoAmI, -1f, 0.0f, 0.0f, 0, 0, 0);
                            break;
                        }

                        break;
                }

                if (this.type == 13 || this.type == 14 || this.type == 15)
                {
                    if (!Main.npc[(int) this.ai[1]].active && !Main.npc[(int) this.ai[0]].active)
                    {
                        this.life = 0;
                        this.HitEffect(0, 10.0);
                        this.checkDead();
                        this.active = false;
                        NetMessage.SendData(28, -1, -1, (NetworkText) null, this.whoAmI, -1f, 0.0f, 0.0f, 0, 0, 0);
                    }

                    if (this.type == 13 && !Main.npc[(int) this.ai[0]].active)
                    {
                        this.life = 0;
                        this.HitEffect(0, 10.0);
                        this.checkDead();
                        this.active = false;
                        NetMessage.SendData(28, -1, -1, (NetworkText) null, this.whoAmI, -1f, 0.0f, 0.0f, 0, 0, 0);
                    }

                    if (this.type == 15 && !Main.npc[(int) this.ai[1]].active)
                    {
                        this.life = 0;
                        this.HitEffect(0, 10.0);
                        this.checkDead();
                        this.active = false;
                        NetMessage.SendData(28, -1, -1, (NetworkText) null, this.whoAmI, -1f, 0.0f, 0.0f, 0, 0, 0);
                    }

                    if (this.type == 14 && (!Main.npc[(int) this.ai[1]].active ||
                                            Main.npc[(int) this.ai[1]].aiStyle != this.aiStyle))
                    {
                        this.type = 13;
                        var whoAmI = this.whoAmI;
                        var num2 = (float) this.life / (float) this.lifeMax;
                        var num3 = this.ai[0];
                        this.SetDefaultsKeepPlayerInteraction(this.type);
                        this.life = (int) ((double) this.lifeMax * (double) num2);
                        this.ai[0] = num3;
                        this.TargetClosest(true);
                        this.netUpdate = true;
                        this.whoAmI = whoAmI;
                    }

                    if (this.type == 14 && (!Main.npc[(int) this.ai[0]].active ||
                                            Main.npc[(int) this.ai[0]].aiStyle != this.aiStyle))
                    {
                        var whoAmI = this.whoAmI;
                        var num2 = (float) this.life / (float) this.lifeMax;
                        var num3 = this.ai[1];
                        this.SetDefaultsKeepPlayerInteraction(this.type);
                        this.life = (int) ((double) this.lifeMax * (double) num2);
                        this.ai[1] = num3;
                        this.TargetClosest(true);
                        this.netUpdate = true;
                        this.whoAmI = whoAmI;
                    }
                }

                if (!this.active && Main.netMode == 2)
                    NetMessage.SendData(28, -1, -1, (NetworkText) null, this.whoAmI, -1f, 0.0f, 0.0f, 0, 0, 0);
            }

            var num4 = (int) ((double) this.position.X / 16.0) - 1;
            var num5 = (int) (((double) this.position.X + (double) this.width) / 16.0) + 2;
            var num6 = (int) ((double) this.position.Y / 16.0) - 1;
            var num7 = (int) (((double) this.position.Y + (double) this.height) / 16.0) + 2;
            if (num4 < 0)
                num4 = 0;
            if (num5 > Main.maxTilesX)
                num5 = Main.maxTilesX;
            if (num6 < 0)
                num6 = 0;
            if (num7 > Main.maxTilesY)
                num7 = Main.maxTilesY;
            var flag2 = false;
            if (this.type >= 87 && this.type <= 92)
                flag2 = true;
            if (this.type >= 454 && this.type <= 459)
                flag2 = true;
            if (this.type == 402 && (double) this.ai[1] == -1.0)
                flag2 = true;
            if (this.type >= 412 && this.type <= 414)
                flag2 = true;
            if (!flag2)
            {
                for (var i = num4; i < num5; ++i)
                {
                    for (var j = num6; j < num7; ++j)
                    {
                        if (Main.tile[i, j] != null &&
                            (Main.tile[i, j].nactive() &&
                             (Main.tileSolid[(int) Main.tile[i, j].type] ||
                              Main.tileSolidTop[(int) Main.tile[i, j].type] && Main.tile[i, j].frameY == (short) 0) ||
                             Main.tile[i, j].liquid > (byte) 64))
                        {
                            Vector2 vector2;
                            vector2.X = (float) (i * 16);
                            vector2.Y = (float) (j * 16);
                            if ((double) this.position.X + (double) this.width > (double) vector2.X &&
                                (double) this.position.X < (double) vector2.X + 16.0 &&
                                ((double) this.position.Y + (double) this.height > (double) vector2.Y &&
                                 (double) this.position.Y < (double) vector2.Y + 16.0))
                            {
                                flag2 = true;
                                if (Main.rand.Next(100) == 0 && this.type != 117 && Main.tile[i, j].nactive())
                                    WorldGen.KillTile(i, j, true, true, false);
                            }
                        }
                    }
                }
            }

            if (!flag2 && (this.type == 7 || this.type == 10 || (this.type == 13 || this.type == 39) ||
                           (this.type == 95 || this.type == 98 || (this.type == 117 || this.type == 375)) ||
                           (this.type == 454 || this.type == 510 || this.type == 513)))
            {
                var rectangle1 =
                    new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width,
                        this.height);
                var num2 = 1000;
                var flag3 = true;
                for (var index = 0; index < (int) byte.MaxValue; ++index)
                {
                    if (Main.player[index].active)
                    {
                        var rectangle2 =
                            new Microsoft.Xna.Framework.Rectangle((int) Main.player[index].position.X - num2,
                                (int) Main.player[index].position.Y - num2, num2 * 2, num2 * 2);
                        if (rectangle1.Intersects(rectangle2))
                        {
                            flag3 = false;
                            break;
                        }
                    }
                }

                if (flag3)
                    flag2 = true;
            }

            if (this.type >= 87 && this.type <= 92 || this.type >= 454 && this.type <= 459)
            {
                if ((double) this.velocity.X < 0.0)
                    this.spriteDirection = 1;
                else if ((double) this.velocity.X > 0.0)
                    this.spriteDirection = -1;
            }

            if (this.type == 414)
            {
                if (this.justHit)
                    this.localAI[3] = 3f;
                if ((double) this.localAI[2] > 0.0)
                {
                    this.localAI[2] -= 16f;
                    if ((double) this.localAI[2] == 0.0)
                        this.localAI[2] = (float) sbyte.MinValue;
                }
                else if ((double) this.localAI[2] < 0.0)
                    this.localAI[2] += 16f;
                else if ((double) this.localAI[3] > 0.0)
                {
                    this.localAI[2] = 128f;
                    --this.localAI[3];
                }
            }

            if (this.type == 412)
            {
                var vector2_1 = this.Center + (this.rotation - 1.570796f).ToRotationVector2() * 8f;
                var vector2_2 = this.rotation.ToRotationVector2() * 16f;
                var dust1 =
                    Main.dust[
                        Dust.NewDust(vector2_1 + vector2_2, 0, 0, 6, this.velocity.X, this.velocity.Y, 100,
                            Color.Transparent, (float) (1.0 + (double) Main.rand.NextFloat() * 3.0))];
                dust1.noGravity = true;
                dust1.noLight = true;
                dust1.position -= new Vector2(4f);
                dust1.fadeIn = 1f;
                dust1.velocity = Vector2.Zero;
                var dust2 =
                    Main.dust[
                        Dust.NewDust(vector2_1 - vector2_2, 0, 0, 6, this.velocity.X, this.velocity.Y, 100,
                            Color.Transparent, (float) (1.0 + (double) Main.rand.NextFloat() * 3.0))];
                dust2.noGravity = true;
                dust2.noLight = true;
                dust2.position -= new Vector2(4f);
                dust2.fadeIn = 1f;
                dust2.velocity = Vector2.Zero;
            }

            var num8 = 8f;
            var num9 = 0.07f;
            if (this.type == 95)
            {
                num8 = 5.5f;
                num9 = 0.045f;
            }

            if (this.type == 10)
            {
                num8 = 6f;
                num9 = 0.05f;
            }

            if (this.type == 513)
            {
                num8 = 7f;
                num9 = 0.1f;
            }

            if (this.type == 13)
            {
                num8 = 10f;
                num9 = 0.07f;
                if (Main.expertMode)
                {
                    num8 = 12f;
                    num9 = 0.15f;
                }
            }

            if (this.type == 510)
            {
                if (!Main.player[this.target].dead && Main.player[this.target].ZoneSandstorm)
                {
                    num8 = 16f;
                    num9 = 0.35f;
                }
                else
                {
                    num8 = 10f;
                    num9 = 0.25f;
                }
            }

            if (this.type == 87)
            {
                num8 = 11f;
                num9 = 0.25f;
            }

            if (this.type == 375)
            {
                num8 = 6f;
                num9 = 0.15f;
            }

            if (this.type == 454)
            {
                num8 = 20f;
                num9 = 0.55f;
            }

            if (this.type == 402)
            {
                num8 = 6f;
                num9 = 0.2f;
            }

            if (this.type == 117 && Main.wof >= 0)
            {
                var num2 = (float) Main.npc[Main.wof].life / (float) Main.npc[Main.wof].lifeMax;
                if ((double) num2 < 0.5)
                {
                    ++num8;
                    num9 += 0.1f;
                }

                if ((double) num2 < 0.25)
                {
                    ++num8;
                    num9 += 0.1f;
                }

                if ((double) num2 < 0.1)
                {
                    num8 += 2f;
                    num9 += 0.1f;
                }
            }

            var vector2_3 = new Vector2(this.position.X + (float) this.width * 0.5f,
                this.position.Y + (float) this.height * 0.5f);
            var num10 = Main.player[this.target].position.X + (float) (Main.player[this.target].width / 2);
            var num11 = Main.player[this.target].position.Y + (float) (Main.player[this.target].height / 2);
            if (this.type == 412)
            {
                num8 = 10f;
                num9 = 0.3f;
                var num2 = -1;
                var num3 = (int) ((double) Main.player[this.target].Center.X / 16.0);
                var num12 = (int) ((double) Main.player[this.target].Center.Y / 16.0);
                for (var i = num3 - 2; i <= num3 + 2; ++i)
                {
                    for (var j = num12; j <= num12 + 15; ++j)
                    {
                        if (WorldGen.SolidTile2(i, j))
                        {
                            num2 = j;
                            break;
                        }
                    }

                    if (num2 > 0)
                        break;
                }

                if (num2 > 0)
                {
                    num2 *= 16;
                    var num13 = (float) (num2 - 800);
                    if ((double) Main.player[this.target].position.Y > (double) num13)
                    {
                        num11 = num13;
                        if ((double) Math.Abs(this.Center.X - Main.player[this.target].Center.X) < 500.0)
                            num10 = (double) this.velocity.X <= 0.0
                                ? Main.player[this.target].Center.X - 600f
                                : Main.player[this.target].Center.X + 600f;
                    }
                }
                else
                {
                    num8 = 14f;
                    num9 = 0.5f;
                }

                var num14 = num8 * 1.3f;
                var num15 = num8 * 0.7f;
                var num16 = this.velocity.Length();
                if ((double) num16 > 0.0)
                {
                    if ((double) num16 > (double) num14)
                    {
                        this.velocity.Normalize();
                        var npc = this;
                        npc.velocity = npc.velocity * num14;
                    }
                    else if ((double) num16 < (double) num15)
                    {
                        this.velocity.Normalize();
                        var npc = this;
                        npc.velocity = npc.velocity * num15;
                    }
                }

                if (num2 > 0)
                {
                    for (var index = 0; index < 200; ++index)
                    {
                        if (Main.npc[index].active && Main.npc[index].type == this.type && index != this.whoAmI)
                        {
                            var vector2_1 = Main.npc[index].Center - this.Center;
                            if ((double) vector2_1.Length() < 400.0)
                            {
                                vector2_1.Normalize();
                                var vector2_2 = vector2_1 * 1000f;
                                num10 -= vector2_2.X;
                                num11 -= vector2_2.Y;
                            }
                        }
                    }
                }
                else
                {
                    for (var index = 0; index < 200; ++index)
                    {
                        if (Main.npc[index].active && Main.npc[index].type == this.type && index != this.whoAmI)
                        {
                            var vector2_1 = Main.npc[index].Center - this.Center;
                            if ((double) vector2_1.Length() < 60.0)
                            {
                                vector2_1.Normalize();
                                var vector2_2 = vector2_1 * 200f;
                                num10 -= vector2_2.X;
                                num11 -= vector2_2.Y;
                            }
                        }
                    }
                }
            }

            var num17 = (float) ((int) ((double) num10 / 16.0) * 16);
            var num18 = (float) ((int) ((double) num11 / 16.0) * 16);
            vector2_3.X = (float) ((int) ((double) vector2_3.X / 16.0) * 16);
            vector2_3.Y = (float) ((int) ((double) vector2_3.Y / 16.0) * 16);
            var num19 = num17 - vector2_3.X;
            var num20 = num18 - vector2_3.Y;
            if (this.type == 375)
            {
                num19 *= -1f;
                num20 *= -1f;
            }

            var num21 = (float) Math.Sqrt((double) num19 * (double) num19 + (double) num20 * (double) num20);
            if ((double) this.ai[1] > 0.0)
            {
                if ((double) this.ai[1] < (double) Main.npc.Length)
                {
                    try
                    {
                        vector2_3 = new Vector2(this.position.X + (float) this.width * 0.5f,
                            this.position.Y + (float) this.height * 0.5f);
                        num19 = Main.npc[(int) this.ai[1]].position.X + (float) (Main.npc[(int) this.ai[1]].width / 2) -
                                vector2_3.X;
                        num20 = Main.npc[(int) this.ai[1]].position.Y +
                                (float) (Main.npc[(int) this.ai[1]].height / 2) - vector2_3.Y;
                    }
                    catch
                    {
                    }

                    this.rotation = (float) Math.Atan2((double) num20, (double) num19) + 1.57f;
                    var num2 = (float) Math.Sqrt((double) num19 * (double) num19 + (double) num20 * (double) num20);
                    var num3 = this.width;
                    if (this.type >= 87 && this.type <= 92)
                        num3 = 42;
                    if (this.type >= 454 && this.type <= 459)
                        num3 = 36;
                    if (this.type >= 13 && this.type <= 15)
                        num3 = (int) ((double) num3 * (double) this.scale);
                    if (this.type >= 412 && this.type <= 414)
                        num3 += 6;
                    var num12 = (num2 - (float) num3) / num2;
                    var num13 = num19 * num12;
                    var num14 = num20 * num12;
                    this.velocity = Vector2.Zero;
                    this.position.X += num13;
                    this.position.Y += num14;
                    if (this.type >= 87 && this.type <= 92)
                    {
                        if ((double) num13 < 0.0)
                            this.spriteDirection = 1;
                        else if ((double) num13 > 0.0)
                            this.spriteDirection = -1;
                    }

                    if (this.type < 454 || this.type > 459)
                        return;
                    if ((double) num13 < 0.0)
                    {
                        this.spriteDirection = 1;
                        return;
                    }

                    if ((double) num13 <= 0.0)
                        return;
                    this.spriteDirection = -1;
                    return;
                }
            }

            if (!flag2)
            {
                this.TargetClosest(true);
                this.velocity.Y += 0.11f;
                if ((double) this.velocity.Y > (double) num8)
                    this.velocity.Y = num8;
                if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < (double) num8 * 0.4)
                {
                    if ((double) this.velocity.X < 0.0)
                        this.velocity.X -= num9 * 1.1f;
                    else
                        this.velocity.X += num9 * 1.1f;
                }
                else if ((double) this.velocity.Y == (double) num8)
                {
                    if ((double) this.velocity.X < (double) num19)
                        this.velocity.X += num9;
                    else if ((double) this.velocity.X > (double) num19)
                        this.velocity.X -= num9;
                }
                else if ((double) this.velocity.Y > 4.0)
                {
                    if ((double) this.velocity.X < 0.0)
                        this.velocity.X += num9 * 0.9f;
                    else
                        this.velocity.X -= num9 * 0.9f;
                }
            }
            else
            {
                if (this.type != 87 && this.type != 117 && (this.type != 454 && this.type != 412) &&
                    this.soundDelay == 0)
                {
                    var num2 = num21 / 40f;
                    if ((double) num2 < 10.0)
                        num2 = 10f;
                    if ((double) num2 > 20.0)
                        num2 = 20f;
                    this.soundDelay = (int) num2;
                    Main.PlaySound(15, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                }

                var num3 = (float) Math.Sqrt((double) num19 * (double) num19 + (double) num20 * (double) num20);
                var num12 = Math.Abs(num19);
                var num13 = Math.Abs(num20);
                var num14 = num8 / num3;
                var num15 = num19 * num14;
                var num16 = num20 * num14;
                var flag3 = false;
                if ((this.type == 7 || this.type == 13) &&
                    (!Main.player[this.target].ZoneCorrupt && !Main.player[this.target].ZoneCrimson ||
                     Main.player[this.target].dead))
                    flag3 = true;
                if (this.type == 513 && (double) Main.player[this.target].position.Y < Main.worldSurface * 16.0 &&
                    (!Main.player[this.target].ZoneSandstorm && !Main.player[this.target].ZoneUndergroundDesert) ||
                    Main.player[this.target].dead)
                    flag3 = true;
                if (this.type == 510 && (double) Main.player[this.target].position.Y < Main.worldSurface * 16.0 &&
                    (!Main.player[this.target].ZoneSandstorm && !Main.player[this.target].ZoneUndergroundDesert) ||
                    Main.player[this.target].dead)
                    flag3 = true;
                if (flag3)
                {
                    var flag4 = true;
                    for (var index = 0; index < (int) byte.MaxValue; ++index)
                    {
                        if (Main.player[index].active && !Main.player[index].dead && Main.player[index].ZoneCorrupt)
                            flag4 = false;
                    }

                    if (flag4)
                    {
                        if (Main.netMode != 1 && (double) this.position.Y / 16.0 >
                            (Main.rockLayer + (double) Main.maxTilesY) / 2.0)
                        {
                            this.active = false;
                            int num2;
                            for (var number = (int) this.ai[0];
                                number > 0 && number < 200 &&
                                (Main.npc[number].active && Main.npc[number].aiStyle == this.aiStyle);
                                number = num2)
                            {
                                num2 = (int) Main.npc[number].ai[0];
                                Main.npc[number].active = false;
                                this.life = 0;
                                if (Main.netMode == 2)
                                    NetMessage.SendData(23, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0,
                                        0);
                            }

                            if (Main.netMode == 2)
                                NetMessage.SendData(23, -1, -1, (NetworkText) null, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0,
                                    0);
                        }

                        num15 = 0.0f;
                        num16 = num8;
                    }
                }

                var flag5 = false;
                if (this.type == 87)
                {
                    if (((double) this.velocity.X > 0.0 && (double) num15 < 0.0 ||
                         (double) this.velocity.X < 0.0 && (double) num15 > 0.0 ||
                         ((double) this.velocity.Y > 0.0 && (double) num16 < 0.0 ||
                          (double) this.velocity.Y < 0.0 && (double) num16 > 0.0)) &&
                        ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) >
                         (double) num9 / 2.0 && (double) num3 < 300.0))
                    {
                        flag5 = true;
                        if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < (double) num8)
                        {
                            var npc = this;
                            npc.velocity = npc.velocity * 1.1f;
                        }
                    }

                    if ((double) this.position.Y > (double) Main.player[this.target].position.Y ||
                        (double) Main.player[this.target].position.Y / 16.0 > Main.worldSurface ||
                        Main.player[this.target].dead)
                    {
                        flag5 = true;
                        if ((double) Math.Abs(this.velocity.X) < (double) num8 / 2.0)
                        {
                            if ((double) this.velocity.X == 0.0)
                                this.velocity.X -= (float) this.direction;
                            this.velocity.X *= 1.1f;
                        }
                        else if ((double) this.velocity.Y > -(double) num8)
                            this.velocity.Y -= num9;
                    }
                }

                if (this.type == 454)
                {
                    if (((double) this.velocity.X > 0.0 && (double) num15 < 0.0 ||
                         (double) this.velocity.X < 0.0 && (double) num15 > 0.0 ||
                         ((double) this.velocity.Y > 0.0 && (double) num16 < 0.0 ||
                          (double) this.velocity.Y < 0.0 && (double) num16 > 0.0)) &&
                        ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) >
                         (double) num9 / 2.0 && (double) num3 < 300.0))
                    {
                        flag5 = true;
                        if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < (double) num8)
                        {
                            var npc = this;
                            npc.velocity = npc.velocity * 1.1f;
                        }
                    }

                    if ((double) this.position.Y > (double) Main.player[this.target].position.Y ||
                        Main.player[this.target].dead)
                    {
                        flag5 = true;
                        if ((double) Math.Abs(this.velocity.X) < (double) num8 / 2.0)
                        {
                            if ((double) this.velocity.X == 0.0)
                                this.velocity.X -= (float) this.direction;
                            this.velocity.X *= 1.1f;
                        }
                        else if ((double) this.velocity.Y > -(double) num8)
                            this.velocity.Y -= num9;
                    }
                }

                if (!flag5)
                {
                    if ((double) this.velocity.X > 0.0 && (double) num15 > 0.0 ||
                        (double) this.velocity.X < 0.0 && (double) num15 < 0.0 ||
                        ((double) this.velocity.Y > 0.0 && (double) num16 > 0.0 ||
                         (double) this.velocity.Y < 0.0 && (double) num16 < 0.0))
                    {
                        if ((double) this.velocity.X < (double) num15)
                            this.velocity.X += num9;
                        else if ((double) this.velocity.X > (double) num15)
                            this.velocity.X -= num9;
                        if ((double) this.velocity.Y < (double) num16)
                            this.velocity.Y += num9;
                        else if ((double) this.velocity.Y > (double) num16)
                            this.velocity.Y -= num9;
                        if ((double) Math.Abs(num16) < (double) num8 * 0.2 &&
                            ((double) this.velocity.X > 0.0 && (double) num15 < 0.0 ||
                             (double) this.velocity.X < 0.0 && (double) num15 > 0.0))
                        {
                            if ((double) this.velocity.Y > 0.0)
                                this.velocity.Y += num9 * 2f;
                            else
                                this.velocity.Y -= num9 * 2f;
                        }

                        if ((double) Math.Abs(num15) < (double) num8 * 0.2 &&
                            ((double) this.velocity.Y > 0.0 && (double) num16 < 0.0 ||
                             (double) this.velocity.Y < 0.0 && (double) num16 > 0.0))
                        {
                            if ((double) this.velocity.X > 0.0)
                                this.velocity.X += num9 * 2f;
                            else
                                this.velocity.X -= num9 * 2f;
                        }
                    }
                    else if ((double) num12 > (double) num13)
                    {
                        if ((double) this.velocity.X < (double) num15)
                            this.velocity.X += num9 * 1.1f;
                        else if ((double) this.velocity.X > (double) num15)
                            this.velocity.X -= num9 * 1.1f;
                        if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) <
                            (double) num8 * 0.5)
                        {
                            if ((double) this.velocity.Y > 0.0)
                                this.velocity.Y += num9;
                            else
                                this.velocity.Y -= num9;
                        }
                    }
                    else
                    {
                        if ((double) this.velocity.Y < (double) num16)
                            this.velocity.Y += num9 * 1.1f;
                        else if ((double) this.velocity.Y > (double) num16)
                            this.velocity.Y -= num9 * 1.1f;
                        if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) <
                            (double) num8 * 0.5)
                        {
                            if ((double) this.velocity.X > 0.0)
                                this.velocity.X += num9;
                            else
                                this.velocity.X -= num9;
                        }
                    }
                }
            }

            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
            if (this.type == 7 || this.type == 10 || (this.type == 13 || this.type == 39) ||
                (this.type == 95 || this.type == 98 || (this.type == 117 || this.type == 510)) || this.type == 513)
            {
                if (flag2)
                {
                    if ((double) this.localAI[0] != 1.0)
                        this.netUpdate = true;
                    this.localAI[0] = 1f;
                }
                else
                {
                    if ((double) this.localAI[0] != 0.0)
                        this.netUpdate = true;
                    this.localAI[0] = 0.0f;
                }

                if (((double) this.velocity.X > 0.0 && (double) this.oldVelocity.X < 0.0 ||
                     (double) this.velocity.X < 0.0 && (double) this.oldVelocity.X > 0.0 ||
                     ((double) this.velocity.Y > 0.0 && (double) this.oldVelocity.Y < 0.0 ||
                      (double) this.velocity.Y < 0.0 && (double) this.oldVelocity.Y > 0.0)) && !this.justHit)
                    this.netUpdate = true;
            }

            if (this.type != 454)
                return;
            var num22 = Vector2.Distance(Main.player[this.target].Center, this.Center);
            var num23 = 0;
            if ((double) Vector2.Normalize(Main.player[this.target].Center - this.Center).ToRotation()
                    .AngleTowards(this.velocity.ToRotation(), 1.570796f) == (double) this.velocity.ToRotation() &&
                (double) num22 < 350.0)
                num23 = 4;
            if ((double) num23 > this.frameCounter)
                ++this.frameCounter;
            if ((double) num23 < this.frameCounter)
                --this.frameCounter;
            if (this.frameCounter < 0.0)
                this.frameCounter = 0.0;
            if (this.frameCounter <= 4.0)
                return;
            this.frameCounter = 4.0;
        }

        private void AI_002_FloatingEye()
        {
            if ((this.type == 170 || this.type == 171 || this.type == 180) && Main.rand.Next(1000) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, 9, 1f, 0.0f);
            this.noGravity = true;
            if (!this.noTileCollide)
            {
                if (this.collideX)
                {
                    this.velocity.X = this.oldVelocity.X * -0.5f;
                    if (this.direction == -1 && (double) this.velocity.X > 0.0 && (double) this.velocity.X < 2.0)
                        this.velocity.X = 2f;
                    if (this.direction == 1 && (double) this.velocity.X < 0.0 && (double) this.velocity.X > -2.0)
                        this.velocity.X = -2f;
                }

                if (this.collideY)
                {
                    this.velocity.Y = this.oldVelocity.Y * -0.5f;
                    if ((double) this.velocity.Y > 0.0 && (double) this.velocity.Y < 1.0)
                        this.velocity.Y = 1f;
                    if ((double) this.velocity.Y < 0.0 && (double) this.velocity.Y > -1.0)
                        this.velocity.Y = -1f;
                }
            }

            if (Main.dayTime && (double) this.position.Y <= Main.worldSurface * 16.0 &&
                (this.type == 2 || this.type == 133 || (this.type == 190 || this.type == 191) ||
                 (this.type == 192 || this.type == 193 || (this.type == 194 || this.type == 317)) || this.type == 318))
            {
                if (this.timeLeft > 10)
                    this.timeLeft = 10;
                this.directionY = -1;
                if ((double) this.velocity.Y > 0.0)
                    this.direction = 1;
                this.direction = -1;
                if ((double) this.velocity.X > 0.0)
                    this.direction = 1;
            }
            else
                this.TargetClosest(true);

            if (this.type == 170 || this.type == 171 || this.type == 180)
            {
                if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position,
                    Main.player[this.target].width, Main.player[this.target].height))
                {
                    if ((double) this.ai[1] > 0.0 && !Collision.SolidCollision(this.position, this.width, this.height))
                    {
                        this.ai[1] = 0.0f;
                        this.ai[0] = 0.0f;
                        this.netUpdate = true;
                    }
                }
                else if ((double) this.ai[1] == 0.0)
                    ++this.ai[0];

                if ((double) this.ai[0] >= 300.0)
                {
                    this.ai[1] = 1f;
                    this.ai[0] = 0.0f;
                    this.netUpdate = true;
                }

                if ((double) this.ai[1] == 0.0)
                {
                    this.alpha = 0;
                    this.noTileCollide = false;
                }
                else
                {
                    this.wet = false;
                    this.alpha = 200;
                    this.noTileCollide = true;
                }

                this.rotation = this.velocity.Y * 0.1f * (float) this.direction;
                this.TargetClosest(true);
                if (this.direction == -1 && (double) this.velocity.X > -4.0 && (double) this.position.X >
                    (double) Main.player[this.target].position.X + (double) Main.player[this.target].width)
                {
                    this.velocity.X -= 0.08f;
                    if ((double) this.velocity.X > 4.0)
                        this.velocity.X -= 0.04f;
                    else if ((double) this.velocity.X > 0.0)
                        this.velocity.X -= 0.2f;
                    if ((double) this.velocity.X < -4.0)
                        this.velocity.X = -4f;
                }
                else if (this.direction == 1 && (double) this.velocity.X < 4.0 &&
                         (double) this.position.X + (double) this.width < (double) Main.player[this.target].position.X)
                {
                    this.velocity.X += 0.08f;
                    if ((double) this.velocity.X < -4.0)
                        this.velocity.X += 0.04f;
                    else if ((double) this.velocity.X < 0.0)
                        this.velocity.X += 0.2f;
                    if ((double) this.velocity.X > 4.0)
                        this.velocity.X = 4f;
                }

                if (this.directionY == -1 && (double) this.velocity.Y > -2.5 && (double) this.position.Y >
                    (double) Main.player[this.target].position.Y + (double) Main.player[this.target].height)
                {
                    this.velocity.Y -= 0.1f;
                    if ((double) this.velocity.Y > 2.5)
                        this.velocity.Y -= 0.05f;
                    else if ((double) this.velocity.Y > 0.0)
                        this.velocity.Y -= 0.15f;
                    if ((double) this.velocity.Y < -2.5)
                        this.velocity.Y = -2.5f;
                }
                else if (this.directionY == 1 && (double) this.velocity.Y < 2.5 &&
                         (double) this.position.Y + (double) this.height < (double) Main.player[this.target].position.Y)
                {
                    this.velocity.Y += 0.1f;
                    if ((double) this.velocity.Y < -2.5)
                        this.velocity.Y += 0.05f;
                    else if ((double) this.velocity.Y < 0.0)
                        this.velocity.Y += 0.15f;
                    if ((double) this.velocity.Y > 2.5)
                        this.velocity.Y = 2.5f;
                }
            }
            else if (this.type == 116)
            {
                this.TargetClosest(true);
                Lighting.AddLight((int) ((double) this.position.X + (double) (this.width / 2)) / 16,
                    (int) ((double) this.position.Y + (double) (this.height / 2)) / 16, 0.3f, 0.2f, 0.1f);
                if (this.direction == -1 && (double) this.velocity.X > -6.0)
                {
                    this.velocity.X -= 0.1f;
                    if ((double) this.velocity.X > 6.0)
                        this.velocity.X -= 0.1f;
                    else if ((double) this.velocity.X > 0.0)
                        this.velocity.X -= 0.2f;
                    if ((double) this.velocity.X < -6.0)
                        this.velocity.X = -6f;
                }
                else if (this.direction == 1 && (double) this.velocity.X < 6.0)
                {
                    this.velocity.X += 0.1f;
                    if ((double) this.velocity.X < -6.0)
                        this.velocity.X += 0.1f;
                    else if ((double) this.velocity.X < 0.0)
                        this.velocity.X += 0.2f;
                    if ((double) this.velocity.X > 6.0)
                        this.velocity.X = 6f;
                }

                if (this.directionY == -1 && (double) this.velocity.Y > -2.5)
                {
                    this.velocity.Y -= 0.04f;
                    if ((double) this.velocity.Y > 2.5)
                        this.velocity.Y -= 0.05f;
                    else if ((double) this.velocity.Y > 0.0)
                        this.velocity.Y -= 0.15f;
                    if ((double) this.velocity.Y < -2.5)
                        this.velocity.Y = -2.5f;
                }
                else if (this.directionY == 1 && (double) this.velocity.Y < 1.5)
                {
                    this.velocity.Y += 0.04f;
                    if ((double) this.velocity.Y < -2.5)
                        this.velocity.Y += 0.05f;
                    else if ((double) this.velocity.Y < 0.0)
                        this.velocity.Y += 0.15f;
                    if ((double) this.velocity.Y > 2.5)
                        this.velocity.Y = 2.5f;
                }

                if (Main.rand.Next(40) == 0)
                {
                    var index = Dust.NewDust(
                        new Vector2(this.position.X, this.position.Y + (float) this.height * 0.25f), this.width,
                        (int) ((double) this.height * 0.5), 5, this.velocity.X, 2f, 0, new Color(), 1f);
                    Main.dust[index].velocity.X *= 0.5f;
                    Main.dust[index].velocity.Y *= 0.1f;
                }
            }
            else if (this.type == 133)
            {
                if ((double) this.life < (double) this.lifeMax * 0.5)
                {
                    if (this.direction == -1 && (double) this.velocity.X > -6.0)
                    {
                        this.velocity.X -= 0.1f;
                        if ((double) this.velocity.X > 6.0)
                            this.velocity.X -= 0.1f;
                        else if ((double) this.velocity.X > 0.0)
                            this.velocity.X += 0.05f;
                        if ((double) this.velocity.X < -6.0)
                            this.velocity.X = -6f;
                    }
                    else if (this.direction == 1 && (double) this.velocity.X < 6.0)
                    {
                        this.velocity.X += 0.1f;
                        if ((double) this.velocity.X < -6.0)
                            this.velocity.X += 0.1f;
                        else if ((double) this.velocity.X < 0.0)
                            this.velocity.X -= 0.05f;
                        if ((double) this.velocity.X > 6.0)
                            this.velocity.X = 6f;
                    }

                    if (this.directionY == -1 && (double) this.velocity.Y > -4.0)
                    {
                        this.velocity.Y -= 0.1f;
                        if ((double) this.velocity.Y > 4.0)
                            this.velocity.Y -= 0.1f;
                        else if ((double) this.velocity.Y > 0.0)
                            this.velocity.Y += 0.05f;
                        if ((double) this.velocity.Y < -4.0)
                            this.velocity.Y = -4f;
                    }
                    else if (this.directionY == 1 && (double) this.velocity.Y < 4.0)
                    {
                        this.velocity.Y += 0.1f;
                        if ((double) this.velocity.Y < -4.0)
                            this.velocity.Y += 0.1f;
                        else if ((double) this.velocity.Y < 0.0)
                            this.velocity.Y -= 0.05f;
                        if ((double) this.velocity.Y > 4.0)
                            this.velocity.Y = 4f;
                    }
                }
                else
                {
                    if (this.direction == -1 && (double) this.velocity.X > -4.0)
                    {
                        this.velocity.X -= 0.1f;
                        if ((double) this.velocity.X > 4.0)
                            this.velocity.X -= 0.1f;
                        else if ((double) this.velocity.X > 0.0)
                            this.velocity.X += 0.05f;
                        if ((double) this.velocity.X < -4.0)
                            this.velocity.X = -4f;
                    }
                    else if (this.direction == 1 && (double) this.velocity.X < 4.0)
                    {
                        this.velocity.X += 0.1f;
                        if ((double) this.velocity.X < -4.0)
                            this.velocity.X += 0.1f;
                        else if ((double) this.velocity.X < 0.0)
                            this.velocity.X -= 0.05f;
                        if ((double) this.velocity.X > 4.0)
                            this.velocity.X = 4f;
                    }

                    if (this.directionY == -1 && (double) this.velocity.Y > -1.5)
                    {
                        this.velocity.Y -= 0.04f;
                        if ((double) this.velocity.Y > 1.5)
                            this.velocity.Y -= 0.05f;
                        else if ((double) this.velocity.Y > 0.0)
                            this.velocity.Y += 0.03f;
                        if ((double) this.velocity.Y < -1.5)
                            this.velocity.Y = -1.5f;
                    }
                    else if (this.directionY == 1 && (double) this.velocity.Y < 1.5)
                    {
                        this.velocity.Y += 0.04f;
                        if ((double) this.velocity.Y < -1.5)
                            this.velocity.Y += 0.05f;
                        else if ((double) this.velocity.Y < 0.0)
                            this.velocity.Y -= 0.03f;
                        if ((double) this.velocity.Y > 1.5)
                            this.velocity.Y = 1.5f;
                    }
                }
            }
            else
            {
                var num1 = 4f;
                var num2 = 1.5f;
                var num3 = num1 * (float) (1.0 + (1.0 - (double) this.scale));
                var num4 = num2 * (float) (1.0 + (1.0 - (double) this.scale));
                if (this.direction == -1 && (double) this.velocity.X > -(double) num3)
                {
                    this.velocity.X -= 0.1f;
                    if ((double) this.velocity.X > (double) num3)
                        this.velocity.X -= 0.1f;
                    else if ((double) this.velocity.X > 0.0)
                        this.velocity.X += 0.05f;
                    if ((double) this.velocity.X < -(double) num3)
                        this.velocity.X = -num3;
                }
                else if (this.direction == 1 && (double) this.velocity.X < (double) num3)
                {
                    this.velocity.X += 0.1f;
                    if ((double) this.velocity.X < -(double) num3)
                        this.velocity.X += 0.1f;
                    else if ((double) this.velocity.X < 0.0)
                        this.velocity.X -= 0.05f;
                    if ((double) this.velocity.X > (double) num3)
                        this.velocity.X = num3;
                }

                if (this.directionY == -1 && (double) this.velocity.Y > -(double) num4)
                {
                    this.velocity.Y -= 0.04f;
                    if ((double) this.velocity.Y > (double) num4)
                        this.velocity.Y -= 0.05f;
                    else if ((double) this.velocity.Y > 0.0)
                        this.velocity.Y += 0.03f;
                    if ((double) this.velocity.Y < -(double) num4)
                        this.velocity.Y = -num4;
                }
                else if (this.directionY == 1 && (double) this.velocity.Y < (double) num4)
                {
                    this.velocity.Y += 0.04f;
                    if ((double) this.velocity.Y < -(double) num4)
                        this.velocity.Y += 0.05f;
                    else if ((double) this.velocity.Y < 0.0)
                        this.velocity.Y -= 0.03f;
                    if ((double) this.velocity.Y > (double) num4)
                        this.velocity.Y = num4;
                }
            }

            if ((this.type == 2 || this.type == 133 || (this.type == 190 || this.type == 191) ||
                 (this.type == 192 || this.type == 193 || this.type == 194)) && Main.rand.Next(40) == 0)
            {
                var index = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float) this.height * 0.25f),
                    this.width, (int) ((double) this.height * 0.5), 5, this.velocity.X, 2f, 0, new Color(), 1f);
                Main.dust[index].velocity.X *= 0.5f;
                Main.dust[index].velocity.Y *= 0.1f;
            }

            if (!this.wet || this.type == 170 || (this.type == 171 || this.type == 172))
                return;
            if ((double) this.velocity.Y > 0.0)
                this.velocity.Y *= 0.95f;
            this.velocity.Y -= 0.5f;
            if ((double) this.velocity.Y < -4.0)
                this.velocity.Y = -4f;
            this.TargetClosest(true);
        }

        private void AI_007_TownEntities()
        {
            var maxValue1 = 300;
            var flag1 = Main.raining;
            if (!Main.dayTime)
                flag1 = true;
            if (Main.eclipse)
                flag1 = true;
            if (Main.slimeRain)
                flag1 = true;
            var num1 = 1f;
            this.defense = !Main.expertMode
                ? (this.dryadWard ? this.defDefense + 6 : this.defDefense)
                : (this.dryadWard ? this.defDefense + 10 : this.defDefense);
            if (this.townNPC || this.type == 453)
            {
                if (NPC.downedBoss1)
                {
                    num1 += 0.1f;
                    this.defense += 3;
                }

                if (NPC.downedBoss2)
                {
                    num1 += 0.1f;
                    this.defense += 3;
                }

                if (NPC.downedBoss3)
                {
                    num1 += 0.1f;
                    this.defense += 3;
                }

                if (NPC.downedQueenBee)
                {
                    num1 += 0.1f;
                    this.defense += 3;
                }

                if (Main.hardMode)
                {
                    num1 += 0.4f;
                    this.defense += 12;
                }

                if (NPC.downedMechBoss1)
                {
                    num1 += 0.15f;
                    this.defense += 6;
                }

                if (NPC.downedMechBoss2)
                {
                    num1 += 0.15f;
                    this.defense += 6;
                }

                if (NPC.downedMechBoss3)
                {
                    num1 += 0.15f;
                    this.defense += 6;
                }

                if (NPC.downedPlantBoss)
                {
                    num1 += 0.15f;
                    this.defense += 8;
                }

                if (NPC.downedGolemBoss)
                {
                    num1 += 0.15f;
                    this.defense += 8;
                }

                if (NPC.downedAncientCultist)
                {
                    num1 += 0.15f;
                    this.defense += 8;
                }
            }

            if (this.type == 142 && Main.netMode != 1 && !Main.xMas)
            {
                this.StrikeNPCNoInteraction(9999, 0.0f, 0, false, false, false);
                if (Main.netMode == 2)
                    NetMessage.SendData(28, -1, -1, (NetworkText) null, this.whoAmI, 9999f, 0.0f, 0.0f, 0, 0, 0);
            }

            if ((this.type == 148 || this.type == 149) && (double) this.localAI[0] == 0.0)
                this.localAI[0] = (float) Main.rand.Next(1, 5);
            if (this.type == 124)
            {
                var flag2 = false;
                for (var index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].type == 582 &&
                        (double) Main.projectile[index].ai[1] == (double) this.whoAmI)
                    {
                        flag2 = true;
                        break;
                    }
                }

                this.localAI[0] = (float) flag2.ToInt();
            }

            if ((this.type == 362 || this.type == 364) && Main.netMode != 1 &&
                ((double) this.velocity.Y > 4.0 || (double) this.velocity.Y < -4.0 || this.wet))
            {
                var direction = this.direction;
                this.Transform(this.type + 1);
                this.TargetClosest(true);
                this.direction = direction;
                this.netUpdate = true;
            }
            else
            {
                switch (this.type)
                {
                    case 107:
                        NPC.savedGoblin = true;
                        break;
                    case 108:
                        NPC.savedWizard = true;
                        break;
                    case 124:
                        NPC.savedMech = true;
                        break;
                    case 353:
                        NPC.savedStylist = true;
                        break;
                    case 369:
                        NPC.savedAngler = true;
                        break;
                    case 441:
                        NPC.savedTaxCollector = true;
                        break;
                    case 550:
                        NPC.savedBartender = true;
                        break;
                }

                if (this.type >= 0 && this.type < 580 &&
                    (NPCID.Sets.TownCritter[this.type] && this.target == (int) byte.MaxValue))
                {
                    this.TargetClosest(true);
                    if ((double) this.position.X < (double) Main.player[this.target].position.X)
                    {
                        this.direction = 1;
                        this.spriteDirection = this.direction;
                    }

                    if ((double) this.position.X > (double) Main.player[this.target].position.X)
                    {
                        this.direction = -1;
                        this.spriteDirection = this.direction;
                    }

                    if (this.homeTileX == -1)
                        this.homeTileX = (int) (((double) this.position.X + (double) (this.width / 2)) / 16.0);
                }
                else if (this.homeTileX == -1 && this.homeTileY == -1 && (double) this.velocity.Y == 0.0)
                {
                    this.homeTileX = (int) this.Center.X / 16;
                    this.homeTileY = (int) ((double) this.position.Y + (double) this.height + 4.0) / 16;
                }

                var flag2 = false;
                var homeTileY = this.homeTileY;
                if (this.type == 441)
                    NPC.taxCollector = true;
                this.directionY = -1;
                if (this.direction == 0)
                    this.direction = 1;
                for (var index = 0; index < (int) byte.MaxValue; ++index)
                {
                    if (Main.player[index].active && Main.player[index].talkNPC == this.whoAmI)
                    {
                        flag2 = true;
                        if ((double) this.ai[0] != 0.0)
                            this.netUpdate = true;
                        this.ai[0] = 0.0f;
                        this.ai[1] = 300f;
                        this.localAI[3] = 100f;
                        if ((double) Main.player[index].position.X + (double) (Main.player[index].width / 2) <
                            (double) this.position.X + (double) (this.width / 2))
                            this.direction = -1;
                        else
                            this.direction = 1;
                    }
                }

                if ((double) this.ai[3] == 1.0)
                {
                    this.life = -1;
                    this.HitEffect(0, 10.0);
                    this.active = false;
                    this.netUpdate = true;
                    if (this.type != 37)
                        return;
                    Main.PlaySound(15, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
                }
                else
                {
                    if (this.type == 37 && Main.netMode != 1)
                    {
                        this.homeless = false;
                        this.homeTileX = Main.dungeonX;
                        this.homeTileY = Main.dungeonY;
                        if (NPC.downedBoss3)
                        {
                            this.ai[3] = 1f;
                            this.netUpdate = true;
                        }
                    }

                    if (Main.netMode != 1 && this.homeTileY > 0)
                    {
                        while (!WorldGen.SolidTile(this.homeTileX, homeTileY) && homeTileY < Main.maxTilesY - 20)
                            ++homeTileY;
                    }

                    if (this.type == 368)
                    {
                        this.homeless = true;
                        if (!Main.dayTime)
                        {
                            this.homeTileX = (int) ((double) this.Center.X / 16.0);
                            this.homeTileY = (int) ((double) this.position.Y + (double) this.height + 2.0) / 16;
                            if (!flag2 && (double) this.ai[0] == 0.0)
                            {
                                this.ai[0] = 1f;
                                this.ai[1] = 200f;
                            }

                            flag1 = false;
                        }
                    }

                    if (this.type == 369 && this.homeless && this.wet)
                    {
                        if ((double) this.Center.X / 16.0 < 380.0 ||
                            (double) this.Center.X / 16.0 > (double) (Main.maxTilesX - 380))
                        {
                            this.homeTileX = Main.spawnTileX;
                            this.homeTileY = Main.spawnTileY;
                            this.ai[0] = 1f;
                            this.ai[1] = 200f;
                        }

                        if ((double) this.position.X / 16.0 < 200.0)
                            this.direction = 1;
                        else if ((double) this.position.X / 16.0 > (double) (Main.maxTilesX - 200))
                            this.direction = -1;
                    }

                    var x = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
                    var y = (int) ((double) this.position.Y + (double) this.height + 1.0) / 16;
                    if (!WorldGen.InWorld(x, y, 0) || Main.tile[x, y] == null)
                        return;
                    if (!this.homeless && Main.netMode != 1 && this.townNPC &&
                        ((flag1 || Main.tileDungeon[(int) Main.tile[x, y].type]) &&
                         (x != this.homeTileX || y != homeTileY)))
                    {
                        var flag3 = true;
                        for (var index1 = 0; index1 < 2; ++index1)
                        {
                            var rectangle = new Microsoft.Xna.Framework.Rectangle(
                                (int) ((double) this.position.X + (double) (this.width / 2) -
                                       (double) (NPC.sWidth / 2) - (double) NPC.safeRangeX),
                                (int) ((double) this.position.Y + (double) (this.height / 2) -
                                       (double) (NPC.sHeight / 2) - (double) NPC.safeRangeY),
                                NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
                            if (index1 == 1)
                                rectangle = new Microsoft.Xna.Framework.Rectangle(
                                    this.homeTileX * 16 + 8 - NPC.sWidth / 2 - NPC.safeRangeX,
                                    homeTileY * 16 + 8 - NPC.sHeight / 2 - NPC.safeRangeY,
                                    NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
                            for (var index2 = 0; index2 < (int) byte.MaxValue; ++index2)
                            {
                                if (Main.player[index2].active &&
                                    new Microsoft.Xna.Framework.Rectangle((int) Main.player[index2].position.X,
                                        (int) Main.player[index2].position.Y, Main.player[index2].width,
                                        Main.player[index2].height).Intersects(rectangle))
                                {
                                    flag3 = false;
                                    break;
                                }

                                if (!flag3)
                                    break;
                            }
                        }

                        if (flag3)
                        {
                            if (this.type == 37 || !Collision.SolidTiles(this.homeTileX - 1, this.homeTileX + 1,
                                    homeTileY - 3, homeTileY - 1))
                            {
                                this.velocity.X = 0.0f;
                                this.velocity.Y = 0.0f;
                                this.position.X = (float) (this.homeTileX * 16 + 8 - this.width / 2);
                                this.position.Y = (float) (homeTileY * 16 - this.height) - 0.1f;
                                this.netUpdate = true;
                            }
                            else
                            {
                                this.homeless = true;
                                WorldGen.QuickFindHome(this.whoAmI);
                            }
                        }
                    }

                    var flag4 = this.type == 300 || this.type == 447;
                    var num2 = 200f;
                    if (NPCID.Sets.DangerDetectRange[this.type] != -1)
                        num2 = (float) NPCID.Sets.DangerDetectRange[this.type];
                    var flag5 = false;
                    var flag6 = false;
                    var num3 = -1f;
                    var num4 = -1f;
                    var num5 = 0;
                    var index3 = -1;
                    var index4 = -1;
                    if (Main.netMode != 1 && !flag2)
                    {
                        for (var index1 = 0; index1 < 200; ++index1)
                        {
                            if (Main.npc[index1].active && !Main.npc[index1].friendly &&
                                (Main.npc[index1].damage > 0 &&
                                 (double) Main.npc[index1].Distance(this.Center) < (double) num2) &&
                                (this.type != 453 || !NPCID.Sets.Skeletons.Contains(Main.npc[index1].netID)))
                            {
                                flag5 = true;
                                var num6 = Main.npc[index1].Center.X - this.Center.X;
                                if ((double) num6 < 0.0 && ((double) num3 == -1.0 || (double) num6 > (double) num3))
                                {
                                    num3 = num6;
                                    index3 = index1;
                                }

                                if ((double) num6 > 0.0 && ((double) num4 == -1.0 || (double) num6 < (double) num4))
                                {
                                    num4 = num6;
                                    index4 = index1;
                                }
                            }
                        }

                        if (flag5)
                        {
                            num5 = (double) num3 != -1.0
                                ? ((double) num4 != -1.0 ? ((double) num4 < -(double) num3).ToDirectionInt() : -1)
                                : 1;
                            var num6 = 0.0f;
                            if ((double) num3 != -1.0)
                                num6 = -num3;
                            if ((double) num6 == 0.0 || (double) num4 < (double) num6 && (double) num4 > 0.0)
                                num6 = num4;
                            if ((double) this.ai[0] == 8.0)
                            {
                                if (this.direction == -num5)
                                {
                                    this.ai[0] = 1f;
                                    this.ai[1] = (float) (300 + Main.rand.Next(300));
                                    this.ai[2] = 0.0f;
                                    this.localAI[3] = 0.0f;
                                    this.netUpdate = true;
                                }
                            }
                            else if ((double) this.ai[0] != 10.0 && (double) this.ai[0] != 12.0 &&
                                     ((double) this.ai[0] != 13.0 && (double) this.ai[0] != 14.0) &&
                                     (double) this.ai[0] != 15.0)
                            {
                                if (NPCID.Sets.PrettySafe[this.type] != -1 &&
                                    (double) NPCID.Sets.PrettySafe[this.type] < (double) num6)
                                {
                                    flag5 = false;
                                    flag6 = true;
                                }
                                else if ((double) this.ai[0] != 1.0)
                                {
                                    if ((double) this.ai[0] == 3.0 || (double) this.ai[0] == 4.0 ||
                                        (double) this.ai[0] == 16.0 || (double) this.ai[0] == 17.0)
                                    {
                                        var npc = Main.npc[(int) this.ai[2]];
                                        if (npc.active)
                                        {
                                            npc.ai[0] = 1f;
                                            npc.ai[1] = (float) (120 + Main.rand.Next(120));
                                            npc.ai[2] = 0.0f;
                                            npc.localAI[3] = 0.0f;
                                            npc.direction = -num5;
                                            npc.netUpdate = true;
                                        }
                                    }

                                    this.ai[0] = 1f;
                                    this.ai[1] = (float) (120 + Main.rand.Next(120));
                                    this.ai[2] = 0.0f;
                                    this.localAI[3] = 0.0f;
                                    this.direction = -num5;
                                    this.netUpdate = true;
                                }
                                else if ((double) this.ai[0] == 1.0 && this.direction != -num5)
                                {
                                    this.direction = -num5;
                                    this.netUpdate = true;
                                }
                            }
                        }
                    }

                    if ((double) this.ai[0] == 0.0)
                    {
                        if ((double) this.localAI[3] > 0.0)
                            --this.localAI[3];
                        if (flag1 && !flag2 && !NPCID.Sets.TownCritter[this.type])
                        {
                            if (Main.netMode != 1)
                            {
                                if (x == this.homeTileX && y == homeTileY)
                                {
                                    if ((double) this.velocity.X != 0.0)
                                        this.netUpdate = true;
                                    if ((double) this.velocity.X > 0.100000001490116)
                                        this.velocity.X -= 0.1f;
                                    else if ((double) this.velocity.X < -0.100000001490116)
                                        this.velocity.X += 0.1f;
                                    else
                                        this.velocity.X = 0.0f;
                                }
                                else
                                {
                                    if (x > this.homeTileX)
                                        this.direction = -1;
                                    else
                                        this.direction = 1;
                                    this.ai[0] = 1f;
                                    this.ai[1] = (float) (200 + Main.rand.Next(200));
                                    this.ai[2] = 0.0f;
                                    this.localAI[3] = 0.0f;
                                    this.netUpdate = true;
                                }
                            }
                        }
                        else
                        {
                            if (flag4)
                                this.velocity.X *= 0.5f;
                            if ((double) this.velocity.X > 0.100000001490116)
                                this.velocity.X -= 0.1f;
                            else if ((double) this.velocity.X < -0.100000001490116)
                                this.velocity.X += 0.1f;
                            else
                                this.velocity.X = 0.0f;
                            if (Main.netMode != 1)
                            {
                                if ((double) this.ai[1] > 0.0)
                                    --this.ai[1];
                                if ((double) this.ai[1] <= 0.0)
                                {
                                    this.ai[0] = 1f;
                                    this.ai[1] = (float) (200 + Main.rand.Next(300));
                                    this.ai[2] = 0.0f;
                                    if (NPCID.Sets.TownCritter[this.type])
                                        this.ai[1] += (float) Main.rand.Next(200, 400);
                                    this.localAI[3] = 0.0f;
                                    this.netUpdate = true;
                                }
                            }
                        }

                        if (Main.netMode != 1 && (!flag1 || x == this.homeTileX && y == homeTileY))
                        {
                            if (x < this.homeTileX - 25 || x > this.homeTileX + 25)
                            {
                                if ((double) this.localAI[3] == 0.0)
                                {
                                    if (x < this.homeTileX - 50 && this.direction == -1)
                                    {
                                        this.direction = 1;
                                        this.netUpdate = true;
                                    }
                                    else if (x > this.homeTileX + 50 && this.direction == 1)
                                    {
                                        this.direction = -1;
                                        this.netUpdate = true;
                                    }
                                }
                            }
                            else if (Main.rand.Next(80) == 0 && (double) this.localAI[3] == 0.0)
                            {
                                this.localAI[3] = 200f;
                                this.direction *= -1;
                                this.netUpdate = true;
                            }
                        }
                    }
                    else if ((double) this.ai[0] == 1.0)
                    {
                        if (Main.netMode != 1 && flag1 && (x == this.homeTileX && y == this.homeTileY) &&
                            !NPCID.Sets.TownCritter[this.type])
                        {
                            this.ai[0] = 0.0f;
                            this.ai[1] = (float) (200 + Main.rand.Next(200));
                            this.localAI[3] = 60f;
                            this.netUpdate = true;
                        }
                        else
                        {
                            var flag3 = Collision.DrownCollision(this.position, this.width, this.height, 1f);
                            if (!flag3)
                            {
                                if (Main.netMode != 1 && !this.homeless &&
                                    !Main.tileDungeon[(int) Main.tile[x, y].type] &&
                                    (x < this.homeTileX - 35 || x > this.homeTileX + 35))
                                {
                                    if ((double) this.position.X < (double) (this.homeTileX * 16) &&
                                        this.direction == -1)
                                        this.ai[1] -= 5f;
                                    else if ((double) this.position.X > (double) (this.homeTileX * 16) &&
                                             this.direction == 1)
                                        this.ai[1] -= 5f;
                                }

                                --this.ai[1];
                            }

                            if ((double) this.ai[1] <= 0.0)
                            {
                                this.ai[0] = 0.0f;
                                this.ai[1] = (float) (300 + Main.rand.Next(300));
                                this.ai[2] = 0.0f;
                                if (NPCID.Sets.TownCritter[this.type])
                                    this.ai[1] -= (float) Main.rand.Next(100);
                                else
                                    this.ai[1] += (float) Main.rand.Next(900);
                                this.localAI[3] = 60f;
                                this.netUpdate = true;
                            }

                            if (this.closeDoor &&
                                (((double) this.position.X + (double) (this.width / 2)) / 16.0 >
                                 (double) (this.doorX + 2) ||
                                 ((double) this.position.X + (double) (this.width / 2)) / 16.0 <
                                 (double) (this.doorX - 2)))
                            {
                                var tileSafely = Framing.GetTileSafely(this.doorX, this.doorY);
                                if (tileSafely.type == (ushort) 11)
                                {
                                    if (WorldGen.CloseDoor(this.doorX, this.doorY, false))
                                    {
                                        this.closeDoor = false;
                                        NetMessage.SendData(19, -1, -1, (NetworkText) null, 1, (float) this.doorX,
                                            (float) this.doorY, (float) this.direction, 0, 0, 0);
                                    }

                                    if (((double) this.position.X + (double) (this.width / 2)) / 16.0 >
                                        (double) (this.doorX + 4) ||
                                        ((double) this.position.X + (double) (this.width / 2)) / 16.0 <
                                        (double) (this.doorX - 4) ||
                                        (((double) this.position.Y + (double) (this.height / 2)) / 16.0 >
                                         (double) (this.doorY + 4) ||
                                         ((double) this.position.Y + (double) (this.height / 2)) / 16.0 <
                                         (double) (this.doorY - 4)))
                                        this.closeDoor = false;
                                }
                                else if (tileSafely.type == (ushort) 389)
                                {
                                    if (WorldGen.ShiftTallGate(this.doorX, this.doorY, true))
                                    {
                                        this.closeDoor = false;
                                        NetMessage.SendData(19, -1, -1, (NetworkText) null, 5, (float) this.doorX,
                                            (float) this.doorY, 0.0f, 0, 0, 0);
                                    }

                                    if (((double) this.position.X + (double) (this.width / 2)) / 16.0 >
                                        (double) (this.doorX + 4) ||
                                        ((double) this.position.X + (double) (this.width / 2)) / 16.0 <
                                        (double) (this.doorX - 4) ||
                                        (((double) this.position.Y + (double) (this.height / 2)) / 16.0 >
                                         (double) (this.doorY + 4) ||
                                         ((double) this.position.Y + (double) (this.height / 2)) / 16.0 <
                                         (double) (this.doorY - 4)))
                                        this.closeDoor = false;
                                }
                                else
                                    this.closeDoor = false;
                            }

                            var num6 = 1f;
                            var num7 = 0.07f;
                            if (this.type == 299 || this.type == 539 || this.type == 538)
                                num6 = 1.5f;
                            if (flag4)
                            {
                                num6 = 2f;
                                num7 = 1f;
                            }

                            if (this.friendly && (flag5 || flag3))
                            {
                                num6 = 1.5f + (float) (1.0 - (double) this.life / (double) this.lifeMax) * 0.9f;
                                num7 = 0.1f;
                            }

                            if ((double) this.velocity.X < -(double) num6 || (double) this.velocity.X > (double) num6)
                            {
                                if ((double) this.velocity.Y == 0.0)
                                {
                                    var npc = this;
                                    npc.velocity = npc.velocity * 0.8f;
                                }
                            }
                            else if ((double) this.velocity.X < (double) num6 && this.direction == 1)
                            {
                                this.velocity.X += num7;
                                if ((double) this.velocity.X > (double) num6)
                                    this.velocity.X = num6;
                            }
                            else if ((double) this.velocity.X > -(double) num6 && this.direction == -1)
                            {
                                this.velocity.X -= num7;
                                if ((double) this.velocity.X > (double) num6)
                                    this.velocity.X = num6;
                            }

                            var holdsMatching = true;
                            if ((double) (this.homeTileY * 16 - 32) > (double) this.position.Y)
                                holdsMatching = false;
                            if (this.direction == 1 && (double) this.position.Y + (double) (this.width / 2) >
                                (double) (this.homeTileX * 16) || this.direction == -1 &&
                                (double) this.position.Y + (double) (this.width / 2) < (double) (this.homeTileX * 16))
                                holdsMatching = true;
                            if ((double) this.velocity.Y == 0.0)
                                Collision.StepDown(ref this.position, ref this.velocity, this.width, this.height,
                                    ref this.stepSpeed, ref this.gfxOffY, 1, false);
                            if ((double) this.velocity.Y >= 0.0)
                                Collision.StepUp(ref this.position, ref this.velocity, this.width, this.height,
                                    ref this.stepSpeed, ref this.gfxOffY, 1, holdsMatching, 1);
                            if ((double) this.velocity.Y == 0.0)
                            {
                                var num8 = (int) (((double) this.position.X + (double) (this.width / 2) +
                                                   (double) (15 * this.direction)) / 16.0);
                                var j = (int) (((double) this.position.Y + (double) this.height - 16.0) / 16.0);
                                var flag7 = false;
                                var flag8 = true;
                                var flag9 = x >= this.homeTileX - 35 && x <= this.homeTileX + 35;
                                if (this.townNPC && (double) this.ai[1] < 30.0)
                                {
                                    flag7 = !Utils.PlotTileLine(this.Top, this.Bottom, (float) this.width,
                                        new Utils.PerLinePoint(DelegateMethods.SearchAvoidedByNPCs));
                                    if (!flag7)
                                    {
                                        var hitbox = this.Hitbox;
                                        hitbox.X -= 20;
                                        hitbox.Width += 40;
                                        for (var index1 = 0; index1 < 200; ++index1)
                                        {
                                            if (Main.npc[index1].active && Main.npc[index1].friendly &&
                                                (index1 != this.whoAmI &&
                                                 (double) Main.npc[index1].velocity.X == 0.0) &&
                                                hitbox.Intersects(Main.npc[index1].Hitbox))
                                            {
                                                flag7 = true;
                                                break;
                                            }
                                        }
                                    }
                                }

                                if (!flag7 && flag3)
                                    flag7 = true;
                                if (flag8 && (NPCID.Sets.TownCritter[this.type] ||
                                              !flag9 && this.direction == Math.Sign(this.homeTileX - x)))
                                    flag8 = false;
                                if (flag8)
                                {
                                    var num9 = 0;
                                    for (var index1 = -1; index1 <= 4; ++index1)
                                    {
                                        var tileSafely =
                                            Framing.GetTileSafely(num8 - this.direction * num9, j + index1);
                                        if (tileSafely.lava() && tileSafely.liquid > (byte) 0)
                                        {
                                            flag8 = true;
                                            break;
                                        }

                                        if (tileSafely.nactive() && Main.tileSolid[(int) tileSafely.type])
                                        {
                                            flag8 = false;
                                            break;
                                        }
                                    }
                                }

                                if (!flag8 && this.wet)
                                {
                                    var flag10 = flag3;
                                    var flag11 = false;
                                    if (!flag10)
                                        flag11 = Collision.DrownCollision(
                                            this.position + new Vector2((float) (this.width * this.direction), 0.0f),
                                            this.width, this.height, 1f);
                                    if ((flag11 || Collision.DrownCollision(
                                             this.position + new Vector2((float) (this.width * this.direction),
                                                 (float) (this.height * 2 - 16 - (flag10 ? 16 : 0))), this.width,
                                             16 + (flag10 ? 16 : 0), 1f)) && (double) this.localAI[3] <= 0.0)
                                    {
                                        flag8 = true;
                                        this.localAI[3] = 600f;
                                    }
                                }

                                if ((double) this.position.X == (double) this.localAI[3])
                                {
                                    this.direction *= -1;
                                    this.netUpdate = true;
                                    this.localAI[3] = 600f;
                                }

                                if (flag3)
                                {
                                    if ((double) this.localAI[3] > 0.0)
                                        --this.localAI[3];
                                }
                                else
                                    this.localAI[3] = -1f;

                                var tileSafely1 = Framing.GetTileSafely(num8, j);
                                var tileSafely2 = Framing.GetTileSafely(num8, j - 1);
                                var tileSafely3 = Framing.GetTileSafely(num8, j - 2);
                                if (this.townNPC && tileSafely3.nactive() &&
                                    (tileSafely3.type == (ushort) 10 || tileSafely3.type == (ushort) 388) &&
                                    (Main.rand.Next(10) == 0 || flag1))
                                {
                                    if (Main.netMode != 1)
                                    {
                                        if (WorldGen.OpenDoor(num8, j - 2, this.direction))
                                        {
                                            this.closeDoor = true;
                                            this.doorX = num8;
                                            this.doorY = j - 2;
                                            NetMessage.SendData(19, -1, -1, (NetworkText) null, 0, (float) num8,
                                                (float) (j - 2), (float) this.direction, 0, 0, 0);
                                            this.netUpdate = true;
                                            this.ai[1] += 80f;
                                        }
                                        else if (WorldGen.OpenDoor(num8, j - 2, -this.direction))
                                        {
                                            this.closeDoor = true;
                                            this.doorX = num8;
                                            this.doorY = j - 2;
                                            NetMessage.SendData(19, -1, -1, (NetworkText) null, 0, (float) num8,
                                                (float) (j - 2), (float) -this.direction, 0, 0, 0);
                                            this.netUpdate = true;
                                            this.ai[1] += 80f;
                                        }
                                        else if (WorldGen.ShiftTallGate(num8, j - 2, false))
                                        {
                                            this.closeDoor = true;
                                            this.doorX = num8;
                                            this.doorY = j - 2;
                                            NetMessage.SendData(19, -1, -1, (NetworkText) null, 4, (float) num8,
                                                (float) (j - 2), 0.0f, 0, 0, 0);
                                            this.netUpdate = true;
                                            this.ai[1] += 80f;
                                        }
                                        else
                                        {
                                            this.direction *= -1;
                                            this.netUpdate = true;
                                        }
                                    }
                                }
                                else
                                {
                                    if ((double) this.velocity.X < 0.0 && this.spriteDirection == -1 ||
                                        (double) this.velocity.X > 0.0 && this.spriteDirection == 1)
                                    {
                                        if (tileSafely3.nactive() && Main.tileSolid[(int) tileSafely3.type] &&
                                            !Main.tileSolidTop[(int) tileSafely3.type])
                                        {
                                            if (!Collision.SolidTilesVersatile(num8 - this.direction * 2,
                                                    num8 - this.direction, j - 5, j - 1) &&
                                                !Collision.SolidTiles(num8, num8, j - 5, j - 3))
                                            {
                                                this.velocity.Y = -6f;
                                                this.netUpdate = true;
                                            }
                                            else if (flag4)
                                            {
                                                if (WorldGen.SolidTile(
                                                    (int) ((double) this.Center.X / 16.0) + this.direction,
                                                    (int) ((double) this.Center.Y / 16.0)))
                                                {
                                                    this.direction *= -1;
                                                    this.velocity.X *= 0.0f;
                                                    this.netUpdate = true;
                                                }
                                            }
                                            else if (flag5)
                                            {
                                                flag7 = false;
                                                this.velocity.X = 0.0f;
                                                this.direction *= -1;
                                                this.netUpdate = true;
                                                this.ai[0] = 8f;
                                                this.ai[1] = 240f;
                                            }
                                            else
                                            {
                                                this.direction *= -1;
                                                this.netUpdate = true;
                                            }
                                        }
                                        else if (tileSafely2.nactive() && Main.tileSolid[(int) tileSafely2.type] &&
                                                 !Main.tileSolidTop[(int) tileSafely2.type])
                                        {
                                            if (!Collision.SolidTilesVersatile(num8 - this.direction * 2,
                                                    num8 - this.direction, j - 4, j - 1) &&
                                                !Collision.SolidTiles(num8, num8, j - 4, j - 2))
                                            {
                                                this.velocity.Y = -5f;
                                                this.netUpdate = true;
                                            }
                                            else if (flag5)
                                            {
                                                flag7 = false;
                                                this.velocity.X = 0.0f;
                                                this.direction *= -1;
                                                this.netUpdate = true;
                                                this.ai[0] = 8f;
                                                this.ai[1] = 240f;
                                            }
                                            else
                                            {
                                                this.direction *= -1;
                                                this.netUpdate = true;
                                            }
                                        }
                                        else if ((double) this.position.Y + (double) this.height - (double) (j * 16) >
                                                 20.0 && tileSafely1.nactive() &&
                                                 (Main.tileSolid[(int) tileSafely1.type] && !tileSafely1.topSlope()))
                                        {
                                            if (!Collision.SolidTilesVersatile(num8 - this.direction * 2, num8, j - 3,
                                                j - 1))
                                            {
                                                this.velocity.Y = -4.4f;
                                                this.netUpdate = true;
                                            }
                                            else if (flag5)
                                            {
                                                flag7 = false;
                                                this.velocity.X = 0.0f;
                                                this.direction *= -1;
                                                this.netUpdate = true;
                                                this.ai[0] = 8f;
                                                this.ai[1] = 240f;
                                            }
                                            else
                                            {
                                                this.direction *= -1;
                                                this.netUpdate = true;
                                            }
                                        }
                                        else if (flag8)
                                        {
                                            this.direction *= -1;
                                            this.velocity.X *= -1f;
                                            this.netUpdate = true;
                                            if (flag5)
                                            {
                                                flag7 = false;
                                                this.velocity.X = 0.0f;
                                                this.ai[0] = 8f;
                                                this.ai[1] = 240f;
                                            }
                                        }

                                        if (flag7)
                                        {
                                            this.ai[1] = 90f;
                                            this.netUpdate = true;
                                        }

                                        if ((double) this.velocity.Y < 0.0)
                                            this.localAI[3] = this.position.X;
                                    }

                                    if ((double) this.velocity.Y < 0.0 && this.wet)
                                        this.velocity.Y *= 1.2f;
                                    if ((double) this.velocity.Y < 0.0 && NPCID.Sets.TownCritter[this.type] && !flag4)
                                        this.velocity.Y *= 1.2f;
                                }
                            }
                        }
                    }
                    else if ((double) this.ai[0] == 2.0 || (double) this.ai[0] == 11.0)
                    {
                        if (Main.netMode != 1)
                        {
                            --this.localAI[3];
                            if (Main.rand.Next(60) == 0 && (double) this.localAI[3] == 0.0)
                            {
                                this.localAI[3] = 60f;
                                this.direction *= -1;
                                this.netUpdate = true;
                            }
                        }

                        --this.ai[1];
                        this.velocity.X *= 0.8f;
                        if ((double) this.ai[1] <= 0.0)
                        {
                            this.localAI[3] = 40f;
                            this.ai[0] = 0.0f;
                            this.ai[1] = (float) (60 + Main.rand.Next(60));
                            this.netUpdate = true;
                        }
                    }
                    else if ((double) this.ai[0] == 3.0 || (double) this.ai[0] == 4.0 ||
                             ((double) this.ai[0] == 5.0 || (double) this.ai[0] == 8.0) ||
                             ((double) this.ai[0] == 9.0 || (double) this.ai[0] == 16.0 || (double) this.ai[0] == 17.0))
                    {
                        this.velocity.X *= 0.8f;
                        --this.ai[1];
                        if ((double) this.ai[0] == 8.0 && (double) this.ai[1] < 60.0 && flag5)
                        {
                            this.ai[1] = 180f;
                            this.netUpdate = true;
                        }

                        if ((double) this.ai[0] == 5.0)
                        {
                            var tileCoordinates = this.Center.ToTileCoordinates();
                            if (Main.tile[tileCoordinates.X, tileCoordinates.Y].type != (ushort) 15)
                                this.ai[1] = 0.0f;
                        }

                        if ((double) this.ai[1] <= 0.0)
                        {
                            this.ai[0] = 0.0f;
                            this.ai[1] = (float) (60 + Main.rand.Next(60));
                            this.ai[2] = 0.0f;
                            this.localAI[3] = (float) (30 + Main.rand.Next(60));
                            this.netUpdate = true;
                        }
                    }
                    else if ((double) this.ai[0] == 6.0 || (double) this.ai[0] == 7.0 || (double) this.ai[0] == 18.0)
                    {
                        if ((double) this.ai[0] == 18.0 &&
                            ((double) this.localAI[3] < 1.0 || (double) this.localAI[3] > 2.0))
                            this.localAI[3] = 2f;
                        this.velocity.X *= 0.8f;
                        --this.ai[1];
                        var index1 = (int) this.ai[2];
                        if (index1 < 0 || index1 > (int) byte.MaxValue ||
                            (!Main.player[index1].active || Main.player[index1].dead) ||
                            ((double) Main.player[index1].Distance(this.Center) > 200.0 ||
                             !Collision.CanHitLine(this.Top, 0, 0, Main.player[index1].Top, 0, 0)))
                            this.ai[1] = 0.0f;
                        if ((double) this.ai[1] > 0.0)
                        {
                            var num6 = (double) this.Center.X < (double) Main.player[index1].Center.X ? 1 : -1;
                            if (num6 != this.direction)
                                this.netUpdate = true;
                            this.direction = num6;
                        }
                        else
                        {
                            this.ai[0] = 0.0f;
                            this.ai[1] = (float) (60 + Main.rand.Next(60));
                            this.ai[2] = 0.0f;
                            this.localAI[3] = (float) (30 + Main.rand.Next(60));
                            this.netUpdate = true;
                        }
                    }
                    else if ((double) this.ai[0] == 10.0)
                    {
                        var Type = 0;
                        var num6 = 0;
                        var KnockBack = 0.0f;
                        var num7 = 0.0f;
                        var num8 = 0;
                        var num9 = 0;
                        var maxValue2 = 0;
                        var num10 = 0.0f;
                        var num11 = (float) NPCID.Sets.DangerDetectRange[this.type];
                        var max = 0.0f;
                        if ((double) NPCID.Sets.AttackTime[this.type] == (double) this.ai[1])
                        {
                            this.frameCounter = 0.0;
                            this.localAI[3] = 0.0f;
                        }

                        if (this.type == 38)
                        {
                            Type = 30;
                            num7 = 6f;
                            num6 = 20;
                            num8 = 10;
                            num9 = 180;
                            maxValue2 = 120;
                            num10 = 16f;
                            KnockBack = 7f;
                        }
                        else if (this.type == 550)
                        {
                            Type = 669;
                            num7 = 6f;
                            num6 = 24;
                            num8 = 10;
                            num9 = 120;
                            maxValue2 = 60;
                            num10 = 16f;
                            KnockBack = 9f;
                        }
                        else if (this.type == 208)
                        {
                            Type = 588;
                            num7 = 6f;
                            num6 = 30;
                            num8 = 10;
                            num9 = 60;
                            maxValue2 = 120;
                            num10 = 16f;
                            KnockBack = 6f;
                        }
                        else if (this.type == 17)
                        {
                            Type = 48;
                            num7 = 9f;
                            num6 = 12;
                            num8 = 10;
                            num9 = 60;
                            maxValue2 = 60;
                            num10 = 16f;
                            KnockBack = 1.5f;
                        }
                        else if (this.type == 369)
                        {
                            Type = 520;
                            num7 = 12f;
                            num6 = 10;
                            num8 = 10;
                            num9 = 0;
                            maxValue2 = 1;
                            num10 = 16f;
                            KnockBack = 3f;
                        }
                        else if (this.type == 453)
                        {
                            Type = 21;
                            num7 = 14f;
                            num6 = 14;
                            num8 = 10;
                            num9 = 0;
                            maxValue2 = 1;
                            num10 = 16f;
                            KnockBack = 3f;
                        }
                        else if (this.type == 107)
                        {
                            Type = 24;
                            num7 = 5f;
                            num6 = 15;
                            num8 = 10;
                            num9 = 60;
                            maxValue2 = 60;
                            num10 = 16f;
                            KnockBack = 1f;
                        }
                        else if (this.type == 124)
                        {
                            Type = 582;
                            num7 = 10f;
                            num6 = 11;
                            num8 = 1;
                            num9 = 30;
                            maxValue2 = 30;
                            KnockBack = 3.5f;
                        }
                        else if (this.type == 18)
                        {
                            Type = 583;
                            num7 = 8f;
                            num6 = 8;
                            num8 = 1;
                            num9 = 15;
                            maxValue2 = 10;
                            KnockBack = 2f;
                            num10 = 10f;
                        }
                        else if (this.type == 142)
                        {
                            Type = 589;
                            num7 = 7f;
                            num6 = 22;
                            num8 = 1;
                            num9 = 10;
                            maxValue2 = 1;
                            KnockBack = 2f;
                            num10 = 10f;
                        }

                        if (Main.expertMode)
                            num6 = (int) ((double) num6 * (double) Main.expertNPCDamage);
                        var Damage = (int) ((double) num6 * (double) num1);
                        this.velocity.X *= 0.8f;
                        --this.ai[1];
                        ++this.localAI[3];
                        if ((double) this.localAI[3] == (double) num8 && Main.netMode != 1)
                        {
                            var vec = -Vector2.UnitY;
                            if (num5 == 1 && this.spriteDirection == 1 && index4 != -1)
                                vec = this.DirectionTo(Main.npc[index4].Center + new Vector2(0.0f,
                                                           -num10 * MathHelper.Clamp(
                                                               this.Distance(Main.npc[index4].Center) / num11, 0.0f,
                                                               1f)));
                            if (num5 == -1 && this.spriteDirection == -1 && index3 != -1)
                                vec = this.DirectionTo(Main.npc[index3].Center + new Vector2(0.0f,
                                                           -num10 * MathHelper.Clamp(
                                                               this.Distance(Main.npc[index3].Center) / num11, 0.0f,
                                                               1f)));
                            if (vec.HasNaNs() || Math.Sign(vec.X) != this.spriteDirection)
                                vec = new Vector2((float) this.spriteDirection, -1f);
                            var vector2 = vec * num7 + Utils.RandomVector2(Main.rand, -max, max);
                            var index1 = this.type != 124
                                ? (this.type != 142
                                    ? Projectile.NewProjectile(this.Center.X + (float) (this.spriteDirection * 16),
                                        this.Center.Y - 2f, vector2.X, vector2.Y, Type, Damage, KnockBack,
                                        Main.myPlayer, 0.0f, 0.0f)
                                    : Projectile.NewProjectile(this.Center.X + (float) (this.spriteDirection * 16),
                                        this.Center.Y - 2f, vector2.X, vector2.Y, Type, Damage, KnockBack,
                                        Main.myPlayer, 0.0f, (float) Main.rand.Next(5)))
                                : Projectile.NewProjectile(this.Center.X + (float) (this.spriteDirection * 16),
                                    this.Center.Y - 2f, vector2.X, vector2.Y, Type, Damage, KnockBack, Main.myPlayer,
                                    0.0f, (float) this.whoAmI);
                            Main.projectile[index1].npcProj = true;
                            Main.projectile[index1].noDropItem = true;
                        }

                        if ((double) this.ai[1] <= 0.0)
                        {
                            this.ai[0] = (double) this.localAI[2] != 8.0 || !flag5 ? 0.0f : 8f;
                            this.ai[1] = (float) (num9 + Main.rand.Next(maxValue2));
                            this.ai[2] = 0.0f;
                            this.localAI[1] = this.localAI[3] = (float) (num9 / 2 + Main.rand.Next(maxValue2));
                            this.netUpdate = true;
                        }
                    }
                    else if ((double) this.ai[0] == 12.0)
                    {
                        var Type = 0;
                        var num6 = 0;
                        var num7 = 0.0f;
                        var num8 = 0;
                        var num9 = 0;
                        var maxValue2 = 0;
                        var KnockBack = 0.0f;
                        var num10 = 0;
                        var flag3 = false;
                        var max = 0.0f;
                        if ((double) NPCID.Sets.AttackTime[this.type] == (double) this.ai[1])
                        {
                            this.frameCounter = 0.0;
                            this.localAI[3] = 0.0f;
                        }

                        var index1 = -1;
                        if (num5 == 1 && this.spriteDirection == 1)
                            index1 = index4;
                        if (num5 == -1 && this.spriteDirection == -1)
                            index1 = index3;
                        if (this.type == 19)
                        {
                            Type = 14;
                            num7 = 13f;
                            num6 = 24;
                            num9 = 14;
                            maxValue2 = 4;
                            KnockBack = 3f;
                            num8 = 1;
                            max = 0.5f;
                            if ((double) NPCID.Sets.AttackTime[this.type] == (double) this.ai[1])
                            {
                                this.frameCounter = 0.0;
                                this.localAI[3] = 0.0f;
                            }

                            if (Main.hardMode)
                            {
                                num6 = 15;
                                if ((double) this.localAI[3] > (double) num8)
                                {
                                    num8 = 10;
                                    flag3 = true;
                                }

                                if ((double) this.localAI[3] > (double) num8)
                                {
                                    num8 = 20;
                                    flag3 = true;
                                }

                                if ((double) this.localAI[3] > (double) num8)
                                {
                                    num8 = 30;
                                    flag3 = true;
                                }
                            }
                        }
                        else if (this.type == 227)
                        {
                            Type = 587;
                            num7 = 10f;
                            num6 = 8;
                            num9 = 10;
                            maxValue2 = 1;
                            KnockBack = 1.75f;
                            num8 = 1;
                            max = 0.5f;
                            if ((double) this.localAI[3] > (double) num8)
                            {
                                num8 = 12;
                                flag3 = true;
                            }

                            if ((double) this.localAI[3] > (double) num8)
                            {
                                num8 = 24;
                                flag3 = true;
                            }

                            if (Main.hardMode)
                                num6 += 2;
                        }
                        else if (this.type == 368)
                        {
                            Type = 14;
                            num7 = 13f;
                            num6 = 24;
                            num9 = 12;
                            maxValue2 = 5;
                            KnockBack = 2f;
                            num8 = 1;
                            max = 0.2f;
                            if (Main.hardMode)
                            {
                                num6 = 30;
                                Type = 357;
                            }
                        }
                        else if (this.type == 22)
                        {
                            num7 = 10f;
                            num6 = 8;
                            num8 = 1;
                            if (Main.hardMode)
                            {
                                Type = 2;
                                num9 = 15;
                                maxValue2 = 10;
                                num6 += 6;
                            }
                            else
                            {
                                Type = 1;
                                num9 = 30;
                                maxValue2 = 20;
                            }

                            KnockBack = 2.75f;
                            num10 = 4;
                            max = 0.7f;
                        }
                        else if (this.type == 228)
                        {
                            Type = 267;
                            num7 = 14f;
                            num6 = 20;
                            num8 = 1;
                            num9 = 10;
                            maxValue2 = 1;
                            KnockBack = 3f;
                            num10 = 6;
                            max = 0.4f;
                        }
                        else if (this.type == 178)
                        {
                            Type = 242;
                            num7 = 13f;
                            num6 = 15;
                            num9 = 10;
                            maxValue2 = 1;
                            KnockBack = 2f;
                            num8 = 1;
                            if ((double) this.localAI[3] > (double) num8)
                            {
                                num8 = 8;
                                flag3 = true;
                            }

                            if ((double) this.localAI[3] > (double) num8)
                            {
                                num8 = 16;
                                flag3 = true;
                            }

                            max = 0.3f;
                        }
                        else if (this.type == 229)
                        {
                            Type = 14;
                            num7 = 14f;
                            num6 = 24;
                            num9 = 10;
                            maxValue2 = 1;
                            KnockBack = 2f;
                            num8 = 1;
                            max = 0.7f;
                            if ((double) this.localAI[3] > (double) num8)
                            {
                                num8 = 16;
                                flag3 = true;
                            }

                            if ((double) this.localAI[3] > (double) num8)
                            {
                                num8 = 24;
                                flag3 = true;
                            }

                            if ((double) this.localAI[3] > (double) num8)
                            {
                                num8 = 32;
                                flag3 = true;
                            }

                            if ((double) this.localAI[3] > (double) num8)
                            {
                                num8 = 40;
                                flag3 = true;
                            }

                            if ((double) this.localAI[3] > (double) num8)
                            {
                                num8 = 48;
                                flag3 = true;
                            }

                            if ((double) this.localAI[3] == 0.0 && index1 != -1 &&
                                (double) this.Distance(Main.npc[index1].Center) <
                                (double) NPCID.Sets.PrettySafe[this.type])
                            {
                                max = 0.1f;
                                Type = 162;
                                num6 = 50;
                                KnockBack = 10f;
                                num7 = 24f;
                            }
                        }
                        else if (this.type == 209)
                        {
                            Type = Utils.SelectRandom<int>(Main.rand, new int[3]
                            {
                                134,
                                133,
                                135
                            });
                            num8 = 1;
                            switch (Type)
                            {
                                case 133:
                                    num7 = 10f;
                                    num6 = 25;
                                    num9 = 10;
                                    maxValue2 = 1;
                                    KnockBack = 6f;
                                    max = 0.2f;
                                    break;
                                case 134:
                                    num7 = 13f;
                                    num6 = 20;
                                    num9 = 20;
                                    maxValue2 = 10;
                                    KnockBack = 4f;
                                    max = 0.1f;
                                    break;
                                case 135:
                                    num7 = 12f;
                                    num6 = 30;
                                    num9 = 30;
                                    maxValue2 = 10;
                                    KnockBack = 7f;
                                    max = 0.2f;
                                    break;
                            }
                        }

                        if (Main.expertMode)
                            num6 = (int) ((double) num6 * (double) Main.expertNPCDamage);
                        var Damage = (int) ((double) num6 * (double) num1);
                        this.velocity.X *= 0.8f;
                        --this.ai[1];
                        ++this.localAI[3];
                        if ((double) this.localAI[3] == (double) num8 && Main.netMode != 1)
                        {
                            var vec = Vector2.Zero;
                            if (index1 != -1)
                                vec = this.DirectionTo(Main.npc[index1].Center + new Vector2(0.0f, (float) -num10));
                            if (vec.HasNaNs() || Math.Sign(vec.X) != this.spriteDirection)
                                vec = new Vector2((float) this.spriteDirection, 0.0f);
                            var vector2 = vec * num7 + Utils.RandomVector2(Main.rand, -max, max);
                            var index2 = this.type != 227
                                ? Projectile.NewProjectile(this.Center.X + (float) (this.spriteDirection * 16),
                                    this.Center.Y - 2f, vector2.X, vector2.Y, Type, Damage, KnockBack, Main.myPlayer,
                                    0.0f, 0.0f)
                                : Projectile.NewProjectile(this.Center.X + (float) (this.spriteDirection * 16),
                                    this.Center.Y - 2f, vector2.X, vector2.Y, Type, Damage, KnockBack, Main.myPlayer,
                                    0.0f, (float) Main.rand.Next(12) / 6f);
                            Main.projectile[index2].npcProj = true;
                            Main.projectile[index2].noDropItem = true;
                        }

                        if ((double) this.localAI[3] == (double) num8 && flag3 && index1 != -1)
                        {
                            var vector2 = this.DirectionTo(Main.npc[index1].Center);
                            if ((double) vector2.Y <= 0.5 && (double) vector2.Y >= -0.5)
                                this.ai[2] = vector2.Y;
                        }

                        if ((double) this.ai[1] <= 0.0)
                        {
                            this.ai[0] = (double) this.localAI[2] != 8.0 || !flag5 ? 0.0f : 8f;
                            this.ai[1] = (float) (num9 + Main.rand.Next(maxValue2));
                            this.ai[2] = 0.0f;
                            this.localAI[1] = this.localAI[3] = (float) (num9 / 2 + Main.rand.Next(maxValue2));
                            this.netUpdate = true;
                        }
                    }
                    else if ((double) this.ai[0] == 13.0)
                    {
                        this.velocity.X *= 0.8f;
                        if ((double) NPCID.Sets.AttackTime[this.type] == (double) this.ai[1])
                            this.frameCounter = 0.0;
                        --this.ai[1];
                        ++this.localAI[3];
                        if ((double) this.localAI[3] == 1.0 && Main.netMode != 1)
                        {
                            var vec = this.DirectionTo(Main.npc[(int) this.ai[2]].Center + new Vector2(0.0f, -20f));
                            if (vec.HasNaNs() || Math.Sign(vec.X) == -this.spriteDirection)
                                vec = new Vector2((float) this.spriteDirection, -1f);
                            var vector2 = vec * 8f;
                            var index1 = Projectile.NewProjectile(this.Center.X + (float) (this.spriteDirection * 16),
                                this.Center.Y - 2f, vector2.X, vector2.Y, 584, 0, 0.0f, Main.myPlayer, this.ai[2],
                                0.0f);
                            Main.projectile[index1].npcProj = true;
                            Main.projectile[index1].noDropItem = true;
                        }

                        if ((double) this.ai[1] <= 0.0)
                        {
                            this.ai[0] = 0.0f;
                            this.ai[1] = (float) (10 + Main.rand.Next(10));
                            this.ai[2] = 0.0f;
                            this.localAI[3] = (float) (5 + Main.rand.Next(10));
                            this.netUpdate = true;
                        }
                    }
                    else if ((double) this.ai[0] == 14.0)
                    {
                        var Type = 0;
                        var num6 = 0;
                        var num7 = 0.0f;
                        var num8 = 0;
                        var num9 = 0;
                        var maxValue2 = 0;
                        var KnockBack = 0.0f;
                        var num10 = 0.0f;
                        var num11 = (float) NPCID.Sets.DangerDetectRange[this.type];
                        var num12 = 1f;
                        var max = 0.0f;
                        if ((double) NPCID.Sets.AttackTime[this.type] == (double) this.ai[1])
                        {
                            this.frameCounter = 0.0;
                            this.localAI[3] = 0.0f;
                        }

                        var index1 = -1;
                        if (num5 == 1 && this.spriteDirection == 1)
                            index1 = index4;
                        if (num5 == -1 && this.spriteDirection == -1)
                            index1 = index3;
                        if (this.type == 54)
                        {
                            Type = 585;
                            num7 = 10f;
                            num6 = 16;
                            num8 = 30;
                            num9 = 20;
                            maxValue2 = 15;
                            KnockBack = 2f;
                            max = 1f;
                        }
                        else if (this.type == 108)
                        {
                            Type = 15;
                            num7 = 6f;
                            num6 = 18;
                            num8 = 15;
                            num9 = 15;
                            maxValue2 = 5;
                            KnockBack = 3f;
                            num10 = 20f;
                        }
                        else if (this.type == 160)
                        {
                            Type = 590;
                            num6 = 40;
                            num8 = 15;
                            num9 = 10;
                            maxValue2 = 1;
                            KnockBack = 3f;
                            while ((double) this.localAI[3] > (double) num8)
                                num8 += 15;
                        }
                        else if (this.type == 20)
                        {
                            Type = 586;
                            num8 = 24;
                            num9 = 10;
                            maxValue2 = 1;
                            KnockBack = 3f;
                        }

                        if (Main.expertMode)
                            num6 = (int) ((double) num6 * (double) Main.expertNPCDamage);
                        var Damage = (int) ((double) num6 * (double) num1);
                        this.velocity.X *= 0.8f;
                        --this.ai[1];
                        ++this.localAI[3];
                        if ((double) this.localAI[3] == (double) num8 && Main.netMode != 1)
                        {
                            var vec = Vector2.Zero;
                            if (index1 != -1)
                                vec = this.DirectionTo(Main.npc[index1].Center + new Vector2(0.0f,
                                                           -num10 * MathHelper.Clamp(
                                                               this.Distance(Main.npc[index1].Center) / num11, 0.0f,
                                                               1f)));
                            if (vec.HasNaNs() || Math.Sign(vec.X) != this.spriteDirection)
                                vec = new Vector2((float) this.spriteDirection, 0.0f);
                            var vector2_1 = vec * num7 + Utils.RandomVector2(Main.rand, -max, max);
                            if (this.type == 108)
                            {
                                var num13 = Utils.SelectRandom<int>(Main.rand, new int[7]
                                {
                                    1,
                                    1,
                                    1,
                                    1,
                                    2,
                                    2,
                                    3
                                });
                                for (var index2 = 0; index2 < num13; ++index2)
                                {
                                    var vector2_2 = Utils.RandomVector2(Main.rand, -3.4f, 3.4f);
                                    var index5 = Projectile.NewProjectile(
                                        this.Center.X + (float) (this.spriteDirection * 16), this.Center.Y - 2f,
                                        vector2_1.X + vector2_2.X, vector2_1.Y + vector2_2.Y, Type, Damage, KnockBack,
                                        Main.myPlayer, 0.0f, 0.0f);
                                    Main.projectile[index5].npcProj = true;
                                    Main.projectile[index5].noDropItem = true;
                                }
                            }
                            else if (this.type == 160)
                            {
                                if (index1 != -1)
                                {
                                    var vector2_2 = Main.npc[index1].position - Main.npc[index1].Size * 2f +
                                                        Main.npc[index1].Size *
                                                        Utils.RandomVector2(Main.rand, 0.0f, 1f) * 5f;
                                    for (var index2 = 10;
                                        index2 > 0 && WorldGen.SolidTile(Framing.GetTileSafely((int) vector2_2.X / 16,
                                            (int) vector2_2.Y / 16));
                                        vector2_2 = Main.npc[index1].position - Main.npc[index1].Size * 2f +
                                                    Main.npc[index1].Size * Utils.RandomVector2(Main.rand, 0.0f, 1f) *
                                                    5f)
                                        --index2;
                                    var index5 = Projectile.NewProjectile(vector2_2.X, vector2_2.Y, 0.0f, 0.0f, Type,
                                        Damage, KnockBack, Main.myPlayer, 0.0f, 0.0f);
                                    Main.projectile[index5].npcProj = true;
                                    Main.projectile[index5].noDropItem = true;
                                }
                            }
                            else if (this.type == 20)
                            {
                                var index2 = Projectile.NewProjectile(
                                    this.Center.X + (float) (this.spriteDirection * 16), this.Center.Y - 2f,
                                    vector2_1.X, vector2_1.Y, Type, Damage, KnockBack, Main.myPlayer, 0.0f,
                                    (float) this.whoAmI);
                                Main.projectile[index2].npcProj = true;
                                Main.projectile[index2].noDropItem = true;
                            }
                            else
                            {
                                var index2 = Projectile.NewProjectile(
                                    this.Center.X + (float) (this.spriteDirection * 16), this.Center.Y - 2f,
                                    vector2_1.X, vector2_1.Y, Type, Damage, KnockBack, Main.myPlayer, 0.0f, 0.0f);
                                Main.projectile[index2].npcProj = true;
                                Main.projectile[index2].noDropItem = true;
                            }
                        }

                        if ((double) num12 > 0.0)
                        {
                            var vector3 = NPCID.Sets.MagicAuraColor[this.type].ToVector3() * num12;
                            Lighting.AddLight(this.Center, vector3.X, vector3.Y, vector3.Z);
                        }

                        if ((double) this.ai[1] <= 0.0)
                        {
                            this.ai[0] = (double) this.localAI[2] != 8.0 || !flag5 ? 0.0f : 8f;
                            this.ai[1] = (float) (num9 + Main.rand.Next(maxValue2));
                            this.ai[2] = 0.0f;
                            this.localAI[1] = this.localAI[3] = (float) (num9 / 2 + Main.rand.Next(maxValue2));
                            this.netUpdate = true;
                        }
                    }
                    else if ((double) this.ai[0] == 15.0)
                    {
                        var num6 = 0;
                        var maxValue2 = 0;
                        if ((double) NPCID.Sets.AttackTime[this.type] == (double) this.ai[1])
                        {
                            this.frameCounter = 0.0;
                            this.localAI[3] = 0.0f;
                        }

                        var num7 = 0;
                        var num8 = 0.0f;
                        var num9 = 0;
                        var num10 = 0;
                        if (num5 == 1)
                        {
                            var spriteDirection1 = this.spriteDirection;
                        }

                        if (num5 == -1)
                        {
                            var spriteDirection2 = this.spriteDirection;
                        }

                        if (this.type == 207)
                        {
                            num7 = 11;
                            num9 = num10 = 32;
                            num6 = 12;
                            maxValue2 = 6;
                            num8 = 4.25f;
                        }
                        else if (this.type == 441)
                        {
                            num7 = 9;
                            num9 = num10 = 28;
                            num6 = 9;
                            maxValue2 = 3;
                            num8 = 3.5f;
                        }
                        else if (this.type == 353)
                        {
                            num7 = 10;
                            num9 = num10 = 32;
                            num6 = 15;
                            maxValue2 = 8;
                            num8 = 5f;
                        }

                        if (Main.expertMode)
                            num7 = (int) ((double) num7 * (double) Main.expertNPCDamage);
                        var Damage = (int) ((double) num7 * (double) num1);
                        this.velocity.X *= 0.8f;
                        --this.ai[1];
                        if (Main.netMode != 1)
                        {
                            var swingStats = this.GetSwingStats(NPCID.Sets.AttackTime[this.type] * 2,
                                (int) this.ai[1], this.spriteDirection, num9, num10);
                            var itemRectangle =
                                new Microsoft.Xna.Framework.Rectangle((int) swingStats.Item1.X,
                                    (int) swingStats.Item1.Y, num9, num10);
                            if (this.spriteDirection == -1)
                                itemRectangle.X -= num9;
                            itemRectangle.Y -= num10;
                            this.TweakSwingStats(NPCID.Sets.AttackTime[this.type] * 2, (int) this.ai[1],
                                this.spriteDirection, ref itemRectangle);
                            var player = Main.myPlayer;
                            for (var number = 0; number < 200; ++number)
                            {
                                var npc = Main.npc[number];
                                if (npc.active && npc.immune[player] == 0 && (!npc.dontTakeDamage && !npc.friendly) &&
                                    (npc.damage > 0 && itemRectangle.Intersects(npc.Hitbox) &&
                                     (npc.noTileCollide || Collision.CanHit(this.position, this.width, this.height,
                                          npc.position, npc.width, npc.height))))
                                {
                                    npc.StrikeNPCNoInteraction(Damage, num8, this.spriteDirection, false, false, false);
                                    if (Main.netMode != 0)
                                        NetMessage.SendData(28, -1, -1, (NetworkText) null, number, (float) Damage,
                                            num8, (float) this.spriteDirection, 0, 0, 0);
                                    npc.netUpdate = true;
                                    npc.immune[player] = (int) this.ai[1] + 2;
                                }
                            }
                        }

                        if ((double) this.ai[1] <= 0.0)
                        {
                            var flag3 = false;
                            if (flag5)
                            {
                                if (!Collision.CanHit(this.Center, 0, 0,
                                        this.Center + Vector2.UnitX * (float) -num5 * 32f, 0, 0) ||
                                    (double) this.localAI[2] == 8.0)
                                    flag3 = true;
                                if (flag3)
                                {
                                    var num11 = NPCID.Sets.AttackTime[this.type];
                                    var index1 = num5 == 1 ? index4 : index3;
                                    var index2 = num5 == 1 ? index3 : index4;
                                    if (index1 != -1 && !Collision.CanHit(this.Center, 0, 0, Main.npc[index1].Center, 0,
                                            0))
                                        index1 = index2 == -1 || !Collision.CanHit(this.Center, 0, 0,
                                                     Main.npc[index2].Center, 0, 0)
                                            ? -1
                                            : index2;
                                    if (index1 != -1)
                                    {
                                        this.ai[0] = 15f;
                                        this.ai[1] = (float) num11;
                                        this.ai[2] = 0.0f;
                                        this.localAI[3] = 0.0f;
                                        this.direction = (double) this.position.X < (double) Main.npc[index1].position.X
                                            ? 1
                                            : -1;
                                        this.netUpdate = true;
                                    }
                                    else
                                        flag3 = false;
                                }
                            }

                            if (!flag3)
                            {
                                this.ai[0] = (double) this.localAI[2] != 8.0 || !flag5 ? 0.0f : 8f;
                                this.ai[1] = (float) (num6 + Main.rand.Next(maxValue2));
                                this.ai[2] = 0.0f;
                                this.localAI[1] = this.localAI[3] = (float) (num6 / 2 + Main.rand.Next(maxValue2));
                                this.netUpdate = true;
                            }
                        }
                    }

                    if (Main.netMode == 1 || !this.townNPC && this.type != 453 || flag2)
                        return;
                    var flag12 = (double) this.ai[0] < 2.0 && !flag5;
                    var flag13 = ((double) this.ai[0] < 2.0 || (double) this.ai[0] == 8.0) && (flag5 || flag6);
                    if ((double) this.localAI[1] > 0.0)
                        --this.localAI[1];
                    if ((double) this.localAI[1] > 0.0)
                        flag13 = false;
                    if (flag13 && this.type == 124 && (double) this.localAI[0] == 1.0)
                        flag13 = false;
                    if (flag13 && this.type == 20)
                    {
                        flag13 = false;
                        for (var index1 = 0; index1 < 200; ++index1)
                        {
                            var npc = Main.npc[index1];
                            if (npc.active && npc.townNPC &&
                                ((double) this.Distance(npc.Center) <= 1200.0 && npc.FindBuffIndex(165) == -1))
                            {
                                flag13 = true;
                                break;
                            }
                        }
                    }

                    if (flag12 && (double) this.ai[0] == 0.0 &&
                        ((double) this.velocity.Y == 0.0 && Main.rand.Next(300) == 0))
                    {
                        var num6 = 420;
                        var num7 = Main.rand.Next(2) != 0 ? num6 * Main.rand.Next(1, 3) : num6 * Main.rand.Next(1, 4);
                        var num8 = 100;
                        var num9 = 20;
                        for (var index1 = 0; index1 < 200; ++index1)
                        {
                            var npc = Main.npc[index1];
                            var flag3 = (double) npc.ai[0] == 1.0 && npc.closeDoor ||
                                         (double) npc.ai[0] == 1.0 && (double) npc.ai[1] > 200.0 ||
                                         (double) npc.ai[0] > 1.0;
                            if (npc != this && npc.active && (npc.CanTalk && !flag3) &&
                                ((double) npc.Distance(this.Center) < (double) num8 &&
                                 (double) npc.Distance(this.Center) > (double) num9 &&
                                 Collision.CanHit(this.Center, 0, 0, npc.Center, 0, 0)))
                            {
                                var directionInt =
                                    ((double) this.position.X < (double) npc.position.X).ToDirectionInt();
                                this.ai[0] = 3f;
                                this.ai[1] = (float) num7;
                                this.ai[2] = (float) index1;
                                this.direction = directionInt;
                                this.netUpdate = true;
                                npc.ai[0] = 4f;
                                npc.ai[1] = (float) num7;
                                npc.ai[2] = (float) this.whoAmI;
                                npc.direction = -directionInt;
                                npc.netUpdate = true;
                                break;
                            }
                        }
                    }
                    else if (flag12 && (double) this.ai[0] == 0.0 &&
                             ((double) this.velocity.Y == 0.0 && Main.rand.Next(1800) == 0))
                    {
                        var num6 = 420;
                        var num7 = Main.rand.Next(2) != 0 ? num6 * Main.rand.Next(1, 3) : num6 * Main.rand.Next(1, 4);
                        var num8 = 100;
                        var num9 = 20;
                        for (var index1 = 0; index1 < 200; ++index1)
                        {
                            var npc = Main.npc[index1];
                            var flag3 = (double) npc.ai[0] == 1.0 && npc.closeDoor ||
                                         (double) npc.ai[0] == 1.0 && (double) npc.ai[1] > 200.0 ||
                                         (double) npc.ai[0] > 1.0;
                            if (npc != this && npc.active && (npc.CanTalk && !flag3) &&
                                ((double) npc.Distance(this.Center) < (double) num8 &&
                                 (double) npc.Distance(this.Center) > (double) num9 &&
                                 Collision.CanHit(this.Center, 0, 0, npc.Center, 0, 0)))
                            {
                                var directionInt =
                                    ((double) this.position.X < (double) npc.position.X).ToDirectionInt();
                                this.ai[0] = 16f;
                                this.ai[1] = (float) num7;
                                this.ai[2] = (float) index1;
                                this.localAI[2] = (float) Main.rand.Next(4);
                                this.localAI[3] = (float) Main.rand.Next(3 - (int) this.localAI[2]);
                                this.direction = directionInt;
                                this.netUpdate = true;
                                npc.ai[0] = 17f;
                                npc.ai[1] = (float) num7;
                                npc.ai[2] = (float) this.whoAmI;
                                npc.localAI[2] = 0.0f;
                                npc.localAI[3] = 0.0f;
                                npc.direction = -directionInt;
                                npc.netUpdate = true;
                                break;
                            }
                        }
                    }
                    else if (flag12 && (double) this.ai[0] == 0.0 &&
                             ((double) this.velocity.Y == 0.0 && Main.rand.Next(1200) == 0) &&
                             (this.type == 208 || BirthdayParty.PartyIsUp &&
                              NPCID.Sets.AttackType[this.type] == NPCID.Sets.AttackType[208]))
                    {
                        var num6 = 300;
                        var num7 = 150;
                        for (var index1 = 0; index1 < (int) byte.MaxValue; ++index1)
                        {
                            var player = Main.player[index1];
                            if (player.active && !player.dead &&
                                ((double) player.Distance(this.Center) < (double) num7 &&
                                 Collision.CanHitLine(this.Top, 0, 0, player.Top, 0, 0)))
                            {
                                var directionInt = ((double) this.position.X < (double) player.position.X)
                                    .ToDirectionInt();
                                this.ai[0] = 6f;
                                this.ai[1] = (float) num6;
                                this.ai[2] = (float) index1;
                                this.direction = directionInt;
                                this.netUpdate = true;
                                break;
                            }
                        }
                    }
                    else if (flag12 && (double) this.ai[0] == 0.0 &&
                             ((double) this.velocity.Y == 0.0 && Main.rand.Next(600) == 0) && this.type == 550)
                    {
                        var num6 = 300;
                        var num7 = 150;
                        for (var index1 = 0; index1 < (int) byte.MaxValue; ++index1)
                        {
                            var player = Main.player[index1];
                            if (player.active && !player.dead &&
                                ((double) player.Distance(this.Center) < (double) num7 &&
                                 Collision.CanHitLine(this.Top, 0, 0, player.Top, 0, 0)))
                            {
                                var directionInt = ((double) this.position.X < (double) player.position.X)
                                    .ToDirectionInt();
                                this.ai[0] = 18f;
                                this.ai[1] = (float) num6;
                                this.ai[2] = (float) index1;
                                this.direction = directionInt;
                                this.netUpdate = true;
                                break;
                            }
                        }
                    }
                    else if (flag12 && (double) this.ai[0] == 0.0 &&
                             ((double) this.velocity.Y == 0.0 && Main.rand.Next(1800) == 0))
                    {
                        this.ai[0] = 2f;
                        this.ai[1] = (float) (45 * Main.rand.Next(1, 2));
                        this.netUpdate = true;
                    }
                    else if (flag12 && (double) this.ai[0] == 0.0 &&
                             ((double) this.velocity.Y == 0.0 && Main.rand.Next(600) == 0) &&
                             (this.type == 229 && !flag6))
                    {
                        this.ai[0] = 11f;
                        this.ai[1] = (float) (30 * Main.rand.Next(1, 4));
                        this.netUpdate = true;
                    }
                    else if (flag12 && (double) this.ai[0] == 0.0 &&
                             ((double) this.velocity.Y == 0.0 && Main.rand.Next(1200) == 0))
                    {
                        var num6 = 220;
                        var num7 = 150;
                        for (var index1 = 0; index1 < (int) byte.MaxValue; ++index1)
                        {
                            var player = Main.player[index1];
                            if (player.active && !player.dead &&
                                ((double) player.Distance(this.Center) < (double) num7 &&
                                 Collision.CanHitLine(this.Top, 0, 0, player.Top, 0, 0)))
                            {
                                var directionInt = ((double) this.position.X < (double) player.position.X)
                                    .ToDirectionInt();
                                this.ai[0] = 7f;
                                this.ai[1] = (float) num6;
                                this.ai[2] = (float) index1;
                                this.direction = directionInt;
                                this.netUpdate = true;
                                break;
                            }
                        }
                    }
                    else if (flag12 && (double) this.ai[0] == 1.0 &&
                             ((double) this.velocity.Y == 0.0 && Main.rand.Next(maxValue1) == 0))
                    {
                        var tileCoordinates = this.Center.ToTileCoordinates();
                        var flag3 = WorldGen.InWorld(tileCoordinates.X, tileCoordinates.Y, 1);
                        if (flag3)
                        {
                            for (var index1 = 0; index1 < 200; ++index1)
                            {
                                if (Main.npc[index1].active && Main.npc[index1].aiStyle == 7 &&
                                    (Main.npc[index1].townNPC && (double) Main.npc[index1].ai[0] == 5.0) &&
                                    Main.npc[index1].Center.ToTileCoordinates() == tileCoordinates)
                                {
                                    flag3 = false;
                                    break;
                                }
                            }
                        }

                        if (flag3)
                        {
                            var tile = Main.tile[tileCoordinates.X, tileCoordinates.Y];
                            var flag7 = tile.type == (ushort) 15;
                            if (flag7 && tile.frameY == (short) 1080)
                                flag7 = false;
                            if (flag7)
                            {
                                this.ai[0] = 5f;
                                this.ai[1] = (float) (900 + Main.rand.Next(10800));
                                this.direction = tile.frameX == (short) 0 ? -1 : 1;
                                this.Bottom = new Vector2((float) (tileCoordinates.X * 16 + 8 + 2 * this.direction),
                                    (float) (tileCoordinates.Y * 16 + 32));
                                this.velocity = Vector2.Zero;
                                this.localAI[3] = 0.0f;
                                this.netUpdate = true;
                            }
                        }
                    }
                    else if (flag12 && (double) this.ai[0] == 1.0 &&
                             ((double) this.velocity.Y == 0.0 && Main.rand.Next(600) == 0) &&
                             Utils.PlotTileLine(this.Top, this.Bottom, (float) this.width,
                                 new Utils.PerLinePoint(DelegateMethods.SearchAvoidedByNPCs)))
                    {
                        var tileCoordinates = (this.Center + new Vector2((float) (this.direction * 10), 0.0f))
                            .ToTileCoordinates();
                        var flag3 = WorldGen.InWorld(tileCoordinates.X, tileCoordinates.Y, 1);
                        if (flag3)
                        {
                            var tileSafely = Framing.GetTileSafely(tileCoordinates.X, tileCoordinates.Y);
                            if (!tileSafely.nactive() || !TileID.Sets.InteractibleByNPCs[(int) tileSafely.type])
                                flag3 = false;
                        }

                        if (flag3)
                        {
                            this.ai[0] = 9f;
                            this.ai[1] = (float) (40 + Main.rand.Next(90));
                            this.velocity = Vector2.Zero;
                            this.localAI[3] = 0.0f;
                            this.netUpdate = true;
                        }
                    }

                    if ((double) this.ai[0] < 2.0 && (double) this.velocity.Y == 0.0 && this.type == 18)
                    {
                        var index1 = -1;
                        for (var index2 = 0; index2 < 200; ++index2)
                        {
                            var npc = Main.npc[index2];
                            if (npc.active && npc.townNPC && npc.life != npc.lifeMax &&
                                ((index1 == -1 || npc.lifeMax - npc.life >
                                  Main.npc[index1].lifeMax - Main.npc[index1].life) &&
                                 (Collision.CanHitLine(this.position, this.width, this.height, npc.position, npc.width,
                                      npc.height) && (double) this.Distance(npc.Center) < 500.0)))
                                index1 = index2;
                        }

                        if (index1 != -1)
                        {
                            this.ai[0] = 13f;
                            this.ai[1] = 34f;
                            this.ai[2] = (float) index1;
                            this.localAI[3] = 0.0f;
                            this.direction = (double) this.position.X < (double) Main.npc[index1].position.X ? 1 : -1;
                            this.netUpdate = true;
                        }
                    }

                    if (flag13 && (double) this.velocity.Y == 0.0 &&
                        (NPCID.Sets.AttackType[this.type] == 0 && NPCID.Sets.AttackAverageChance[this.type] > 0) &&
                        Main.rand.Next(NPCID.Sets.AttackAverageChance[this.type] * 2) == 0)
                    {
                        var num6 = NPCID.Sets.AttackTime[this.type];
                        var index1 = num5 == 1 ? index4 : index3;
                        var index2 = num5 == 1 ? index3 : index4;
                        if (index1 != -1 && !Collision.CanHit(this.Center, 0, 0, Main.npc[index1].Center, 0, 0))
                            index1 = index2 == -1 || !Collision.CanHit(this.Center, 0, 0, Main.npc[index2].Center, 0, 0)
                                ? -1
                                : index2;
                        if (index1 != -1)
                        {
                            this.localAI[2] = this.ai[0];
                            this.ai[0] = 10f;
                            this.ai[1] = (float) num6;
                            this.ai[2] = 0.0f;
                            this.localAI[3] = 0.0f;
                            this.direction = (double) this.position.X < (double) Main.npc[index1].position.X ? 1 : -1;
                            this.netUpdate = true;
                        }
                    }
                    else if (flag13 && (double) this.velocity.Y == 0.0 &&
                             (NPCID.Sets.AttackType[this.type] == 1 && NPCID.Sets.AttackAverageChance[this.type] > 0) &&
                             Main.rand.Next(NPCID.Sets.AttackAverageChance[this.type] * 2) == 0)
                    {
                        var num6 = NPCID.Sets.AttackTime[this.type];
                        var index1 = num5 == 1 ? index4 : index3;
                        var index2 = num5 == 1 ? index3 : index4;
                        if (index1 != -1 && !Collision.CanHitLine(this.Center, 0, 0, Main.npc[index1].Center, 0, 0))
                            index1 = index2 == -1 ||
                                     !Collision.CanHitLine(this.Center, 0, 0, Main.npc[index2].Center, 0, 0)
                                ? -1
                                : index2;
                        if (index1 != -1)
                        {
                            var vector2 = this.DirectionTo(Main.npc[index1].Center);
                            if ((double) vector2.Y <= 0.5 && (double) vector2.Y >= -0.5)
                            {
                                this.localAI[2] = this.ai[0];
                                this.ai[0] = 12f;
                                this.ai[1] = (float) num6;
                                this.ai[2] = vector2.Y;
                                this.localAI[3] = 0.0f;
                                this.direction = (double) this.position.X < (double) Main.npc[index1].position.X
                                    ? 1
                                    : -1;
                                this.netUpdate = true;
                            }
                        }
                    }

                    if (flag13 && (double) this.velocity.Y == 0.0 &&
                        (NPCID.Sets.AttackType[this.type] == 2 && NPCID.Sets.AttackAverageChance[this.type] > 0) &&
                        Main.rand.Next(NPCID.Sets.AttackAverageChance[this.type] * 2) == 0)
                    {
                        var num6 = NPCID.Sets.AttackTime[this.type];
                        var index1 = num5 == 1 ? index4 : index3;
                        var index2 = num5 == 1 ? index3 : index4;
                        if (index1 != -1 && !Collision.CanHitLine(this.Center, 0, 0, Main.npc[index1].Center, 0, 0))
                            index1 = index2 == -1 ||
                                     !Collision.CanHitLine(this.Center, 0, 0, Main.npc[index2].Center, 0, 0)
                                ? -1
                                : index2;
                        if (index1 != -1)
                        {
                            this.localAI[2] = this.ai[0];
                            this.ai[0] = 14f;
                            this.ai[1] = (float) num6;
                            this.ai[2] = 0.0f;
                            this.localAI[3] = 0.0f;
                            this.direction = (double) this.position.X < (double) Main.npc[index1].position.X ? 1 : -1;
                            this.netUpdate = true;
                        }
                        else if (this.type == 20)
                        {
                            this.localAI[2] = this.ai[0];
                            this.ai[0] = 14f;
                            this.ai[1] = (float) num6;
                            this.ai[2] = 0.0f;
                            this.localAI[3] = 0.0f;
                            this.netUpdate = true;
                        }
                    }

                    if (!flag13 || (double) this.velocity.Y != 0.0 ||
                        (NPCID.Sets.AttackType[this.type] != 3 || NPCID.Sets.AttackAverageChance[this.type] <= 0) ||
                        Main.rand.Next(NPCID.Sets.AttackAverageChance[this.type] * 2) != 0)
                        return;
                    var num14 = NPCID.Sets.AttackTime[this.type];
                    var index6 = num5 == 1 ? index4 : index3;
                    var index7 = num5 == 1 ? index3 : index4;
                    if (index6 != -1 && !Collision.CanHit(this.Center, 0, 0, Main.npc[index6].Center, 0, 0))
                        index6 = index7 == -1 || !Collision.CanHit(this.Center, 0, 0, Main.npc[index7].Center, 0, 0)
                            ? -1
                            : index7;
                    if (index6 == -1)
                        return;
                    this.localAI[2] = this.ai[0];
                    this.ai[0] = 15f;
                    this.ai[1] = (float) num14;
                    this.ai[2] = 0.0f;
                    this.localAI[3] = 0.0f;
                    this.direction = (double) this.position.X < (double) Main.npc[index6].position.X ? 1 : -1;
                    this.netUpdate = true;
                }
            }
        }

        private void AI_003_Fighters()
        {
            if (this.type == 466)
            {
                var num = 200;
                if ((double) this.ai[2] == 0.0)
                {
                    this.alpha = num;
                    this.TargetClosest(true);
                    if (!Main.player[this.target].dead &&
                        (double) (Main.player[this.target].Center - this.Center).Length() < 170.0)
                        this.ai[2] = -16f;
                    if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y >= 0.0 &&
                        ((double) this.velocity.Y <= 2.0 && !this.justHit))
                        return;
                    this.ai[2] = -16f;
                    return;
                }

                if ((double) this.ai[2] < 0.0)
                {
                    if (this.alpha > 0)
                    {
                        this.alpha -= num / 16;
                        if (this.alpha < 0)
                            this.alpha = 0;
                    }

                    ++this.ai[2];
                    if ((double) this.ai[2] != 0.0)
                        return;
                    this.ai[2] = 1f;
                    this.velocity.X = (float) (this.direction * 2);
                    return;
                }

                this.alpha = 0;
            }

            if (this.type == 166)
            {
                if (Main.netMode != 1 && Main.rand.Next(240) == 0)
                {
                    this.ai[2] = (float) Main.rand.Next(-480, -60);
                    this.netUpdate = true;
                }

                if ((double) this.ai[2] < 0.0)
                {
                    this.TargetClosest(true);
                    if (this.justHit)
                        this.ai[2] = 0.0f;
                    if (Collision.CanHit(this.Center, 1, 1, Main.player[this.target].Center, 1, 1))
                        this.ai[2] = 0.0f;
                }

                if ((double) this.ai[2] < 0.0)
                {
                    this.velocity.X *= 0.9f;
                    if ((double) this.velocity.X > -0.1 && (double) this.velocity.X < 0.1)
                        this.velocity.X = 0.0f;
                    ++this.ai[2];
                    if ((double) this.ai[2] != 0.0)
                        return;
                    this.velocity.X = (float) this.direction * 0.1f;
                    return;
                }
            }

            if (this.type == 461)
            {
                if (this.wet)
                {
                    this.knockBackResist = 0.0f;
                    this.ai[3] = -0.10101f;
                    this.noGravity = true;
                    var center = this.Center;
                    this.width = 34;
                    this.height = 24;
                    this.position.X = center.X - (float) (this.width / 2);
                    this.position.Y = center.Y - (float) (this.height / 2);
                    this.TargetClosest(true);
                    if (this.collideX)
                        this.velocity.X = -this.oldVelocity.X;
                    if ((double) this.velocity.X < 0.0)
                        this.direction = -1;
                    if ((double) this.velocity.X > 0.0)
                        this.direction = 1;
                    if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].Center, 1, 1))
                    {
                        var vector2 = Main.player[this.target].Center - this.Center;
                        vector2.Normalize();
                        this.velocity = (this.velocity * 19f + vector2 * 5f) / 20f;
                        return;
                    }

                    var num = 5f;
                    if ((double) this.velocity.Y > 0.0)
                        num = 3f;
                    if ((double) this.velocity.Y < 0.0)
                        num = 8f;
                    var vector2_1 = new Vector2((float) this.direction, -1f);
                    vector2_1.Normalize();
                    vector2_1 *= num;
                    if ((double) num < 5.0)
                    {
                        this.velocity = (this.velocity * 24f + vector2_1) / 25f;
                        return;
                    }

                    this.velocity = (this.velocity * 9f + vector2_1) / 10f;
                    return;
                }

                this.knockBackResist = 0.4f * Main.knockBackMultiplier;
                this.noGravity = false;
                var center1 = this.Center;
                this.width = 18;
                this.height = 40;
                this.position.X = center1.X - (float) (this.width / 2);
                this.position.Y = center1.Y - (float) (this.height / 2);
                if ((double) this.ai[3] == -0.101010002195835)
                {
                    this.ai[3] = 0.0f;
                    var num = this.velocity.Length() * 2f;
                    if ((double) num > 10.0)
                        num = 10f;
                    this.velocity.Normalize();
                    var npc = this;
                    npc.velocity = npc.velocity * num;
                    if ((double) this.velocity.X < 0.0)
                        this.direction = -1;
                    if ((double) this.velocity.X > 0.0)
                        this.direction = 1;
                    this.spriteDirection = this.direction;
                }
            }

            if (this.type == 379 || this.type == 380)
            {
                if ((double) this.ai[3] < 0.0)
                {
                    this.damage = 0;
                    this.velocity.X *= 0.93f;
                    if ((double) this.velocity.X > -0.1 && (double) this.velocity.X < 0.1)
                        this.velocity.X = 0.0f;
                    var index = (int) (-(double) this.ai[3] - 1.0);
                    var num = Math.Sign(Main.npc[index].Center.X - this.Center.X);
                    if (num != this.direction)
                    {
                        this.velocity.X = 0.0f;
                        this.direction = num;
                        this.netUpdate = true;
                    }

                    if (this.justHit && Main.netMode != 1 && (double) Main.npc[index].localAI[0] == 0.0)
                        Main.npc[index].localAI[0] = 1f;
                    if ((double) this.ai[0] < 1000.0)
                        this.ai[0] = 1000f;
                    if ((double) ++this.ai[0] < 1300.0)
                        return;
                    this.ai[0] = 1000f;
                    this.netUpdate = true;
                    return;
                }

                if ((double) this.ai[0] >= 1000.0)
                    this.ai[0] = 0.0f;
                this.damage = this.defDamage;
            }

            if (this.type == 383 && (double) this.ai[2] == 0.0 &&
                ((double) this.localAI[0] == 0.0 && Main.netMode != 1))
            {
                var index = NPC.NewNPC((int) this.Center.X, (int) this.Center.Y, 384, this.whoAmI, 0.0f, 0.0f, 0.0f,
                    0.0f, (int) byte.MaxValue);
                this.ai[2] = (float) (index + 1);
                this.localAI[0] = -1f;
                this.netUpdate = true;
                Main.npc[index].ai[0] = (float) this.whoAmI;
                Main.npc[index].netUpdate = true;
            }

            if (this.type == 383)
            {
                var index = (int) this.ai[2] - 1;
                if (index != -1 && Main.npc[index].active && Main.npc[index].type == 384)
                {
                    this.dontTakeDamage = true;
                }
                else
                {
                    this.dontTakeDamage = false;
                    this.ai[2] = 0.0f;
                    if ((double) this.localAI[0] == -1.0)
                        this.localAI[0] = 180f;
                    if ((double) this.localAI[0] > 0.0)
                        --this.localAI[0];
                }
            }

            if (this.type == 482)
            {
                var num1 = 300;
                var num2 = 120;
                this.dontTakeDamage = false;
                if ((double) this.ai[2] < 0.0)
                {
                    this.dontTakeDamage = true;
                    ++this.ai[2];
                    this.velocity.X *= 0.9f;
                    if ((double) Math.Abs(this.velocity.X) < 0.001)
                        this.velocity.X = 1f / 1000f * (float) this.direction;
                    if ((double) Math.Abs(this.velocity.Y) > 1.0)
                        this.ai[2] += 10f;
                    if ((double) this.ai[2] < 0.0)
                        return;
                    this.netUpdate = true;
                    this.velocity.X += (float) this.direction * 0.3f;
                    return;
                }

                if ((double) this.ai[2] < (double) num1)
                {
                    if (this.justHit)
                        this.ai[2] += 15f;
                    ++this.ai[2];
                }
                else if ((double) this.velocity.Y == 0.0)
                {
                    this.ai[2] = (float) -num2;
                    this.netUpdate = true;
                }
            }

            if (this.type == 480)
            {
                var num1 = 180;
                var num2 = 300;
                var num3 = 180;
                var num4 = 60;
                var num5 = 20;
                if (this.life < this.lifeMax / 3)
                {
                    num1 = 120;
                    num2 = 240;
                    num3 = 240;
                    num4 = 90;
                }

                if ((double) this.ai[2] > 0.0)
                    --this.ai[2];
                else if ((double) this.ai[2] == 0.0)
                {
                    if (((double) Main.player[this.target].Center.X < (double) this.Center.X && this.direction < 0 ||
                         (double) Main.player[this.target].Center.X > (double) this.Center.X && this.direction > 0) &&
                        ((double) this.velocity.Y == 0.0 &&
                         (double) this.Distance(Main.player[this.target].Center) < 900.0 &&
                         Collision.CanHit(this.Center, 1, 1, Main.player[this.target].Center, 1, 1)))
                    {
                        this.ai[2] = (float) (-num3 - num5);
                        this.netUpdate = true;
                    }
                }
                else
                {
                    if ((double) this.ai[2] < 0.0 && (double) this.ai[2] < (double) -num3)
                    {
                        this.velocity.X *= 0.9f;
                        if ((double) this.velocity.Y < -2.0 || (double) this.velocity.Y > 4.0 || this.justHit)
                        {
                            this.ai[2] = (float) num1;
                        }
                        else
                        {
                            ++this.ai[2];
                            if ((double) this.ai[2] == 0.0)
                                this.ai[2] = (float) num2;
                        }

                        var num6 = this.ai[2] + (float) num3 + (float) num5;
                        if ((double) num6 == 1.0)
                            Main.PlaySound(4, (int) this.position.X, (int) this.position.Y, 17, 1f, 0.0f);
                        if ((double) num6 < (double) num5)
                        {
                            var Position = this.Top + new Vector2((float) (this.spriteDirection * 6), 6f);
                            var num7 = MathHelper.Lerp(20f, 30f, (float) (((double) num6 * 3.0 + 50.0) / 182.0));
                            var num8 = (double) Main.rand.NextFloat();
                            for (var num9 = 0.0f; (double) num9 < 2.0; ++num9)
                            {
                                var vector2 = Vector2.UnitY.RotatedByRandom(6.28318548202515) *
                                                  (float) ((double) Main.rand.NextFloat() * 0.5 + 0.5);
                                var dust = Main.dust[
                                    Dust.NewDust(Position, 0, 0, 228, 0.0f, 0.0f, 0, new Color(), 1f)];
                                dust.position = Position + vector2 * num7;
                                dust.noGravity = true;
                                dust.velocity = vector2 * 2f;
                                dust.scale = (float) (0.5 + (double) Main.rand.NextFloat() * 0.5);
                            }
                        }

                        Lighting.AddLight(this.Center, 0.9f, 0.75f, 0.1f);
                        return;
                    }

                    if ((double) this.ai[2] < 0.0 && (double) this.ai[2] >= (double) -num3)
                    {
                        Lighting.AddLight(this.Center, 0.9f, 0.75f, 0.1f);
                        this.velocity.X *= 0.9f;
                        if ((double) this.velocity.Y < -2.0 || (double) this.velocity.Y > 4.0 || this.justHit)
                        {
                            this.ai[2] = (float) num1;
                        }
                        else
                        {
                            ++this.ai[2];
                            if ((double) this.ai[2] == 0.0)
                                this.ai[2] = (float) num2;
                        }

                        var num6 = this.ai[2] + (float) num3;
                        if ((double) num6 < 180.0 && (Main.rand.Next(3) == 0 || (double) this.ai[2] % 3.0 == 0.0))
                        {
                            var Position = this.Top + new Vector2((float) (this.spriteDirection * 10), 10f);
                            var num7 = MathHelper.Lerp(20f, 30f, (float) (((double) num6 * 3.0 + 50.0) / 182.0));
                            var num8 = (double) Main.rand.NextFloat();
                            for (var num9 = 0.0f; (double) num9 < 1.0; ++num9)
                            {
                                var vector2 = Vector2.UnitY.RotatedByRandom(6.28318548202515) *
                                                  (float) ((double) Main.rand.NextFloat() * 0.5 + 0.5);
                                var dust = Main.dust[
                                    Dust.NewDust(Position, 0, 0, 228, 0.0f, 0.0f, 0, new Color(), 1f)];
                                dust.position = Position + vector2 * num7;
                                dust.noGravity = true;
                                dust.velocity = vector2 * 4f;
                                dust.scale = 0.5f + Main.rand.NextFloat();
                            }
                        }

                        if (Main.netMode == 2)
                            return;
                        var player1 = Main.player[Main.myPlayer];
                        var player2 = Main.myPlayer;
                        if (player1.dead || !player1.active || player1.FindBuffIndex(156) != -1)
                            return;
                        var vector2_1 = player1.Center - this.Center;
                        if ((double) vector2_1.Length() >= 700.0)
                            return;
                        var flag = (double) vector2_1.Length() < 30.0;
                        if (!flag)
                        {
                            var x = 0.7853982f.ToRotationVector2().X;
                            var vector2_2 = Vector2.Normalize(vector2_1);
                            if ((double) vector2_2.X > (double) x || (double) vector2_2.X < -(double) x)
                                flag = true;
                        }

                        if (((double) player1.Center.X >= (double) this.Center.X || this.direction >= 0 ||
                             player1.direction <= 0) &&
                            ((double) player1.Center.X <= (double) this.Center.X || this.direction <= 0 ||
                             player1.direction >= 0) || !flag ||
                            !Collision.CanHitLine(this.Center, 1, 1, player1.Center, 1, 1) &&
                            !Collision.CanHitLine(this.Center - Vector2.UnitY * 16f, 1, 1, player1.Center, 1, 1) &&
                            !Collision.CanHitLine(this.Center + Vector2.UnitY * 8f, 1, 1, player1.Center, 1, 1))
                            return;
                        player1.AddBuff(156, num4 + (int) this.ai[2] * -1, true);
                        return;
                    }
                }
            }

            if (this.type == 471)
            {
                if ((double) this.ai[3] < 0.0)
                {
                    this.knockBackResist = 0.0f;
                    this.defense = (int) ((double) this.defDefense * 1.1);
                    this.noGravity = true;
                    this.noTileCollide = true;
                    if ((double) this.velocity.X < 0.0)
                        this.direction = -1;
                    else if ((double) this.velocity.X > 0.0)
                        this.direction = 1;
                    this.rotation = this.velocity.X * 0.1f;
                    if (Main.netMode != 1)
                    {
                        ++this.localAI[3];
                        if ((double) this.localAI[3] > (double) Main.rand.Next(20, 180))
                        {
                            this.localAI[3] = 0.0f;
                            var vector2 = this.Center + this.velocity;
                            NPC.NewNPC((int) vector2.X, (int) vector2.Y, 30, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                (int) byte.MaxValue);
                        }
                    }
                }
                else
                {
                    this.localAI[3] = 0.0f;
                    this.knockBackResist = 0.35f * Main.knockBackMultiplier;
                    this.rotation *= 0.9f;
                    this.defense = this.defDefense;
                    this.noGravity = false;
                    this.noTileCollide = false;
                }

                if ((double) this.ai[3] == 1.0)
                {
                    this.knockBackResist = 0.0f;
                    this.defense += 10;
                }

                if ((double) this.ai[3] == -1.0)
                {
                    this.TargetClosest(true);
                    var num1 = 8f;
                    var num2 = 40f;
                    var vector2_1 = Main.player[this.target].Center - this.Center;
                    var num3 = vector2_1.Length();
                    var num4 = num1 + num3 / 200f;
                    vector2_1.Normalize();
                    var vector2_2 = vector2_1 * num4;
                    this.velocity = (this.velocity * (num2 - 1f) + vector2_2) / num2;
                    if ((double) num3 >= 500.0 || Collision.SolidCollision(this.position, this.width, this.height))
                        return;
                    this.ai[3] = 0.0f;
                    this.ai[2] = 0.0f;
                    return;
                }

                if ((double) this.ai[3] == -2.0)
                {
                    this.velocity.Y -= 0.2f;
                    if ((double) this.velocity.Y < -10.0)
                        this.velocity.Y = -10f;
                    if ((double) Main.player[this.target].Center.Y - (double) this.Center.Y > 200.0)
                    {
                        this.TargetClosest(true);
                        this.ai[3] = -3f;
                        this.ai[2] = (double) Main.player[this.target].Center.X <= (double) this.Center.X ? -1f : 1f;
                    }

                    this.velocity.X *= 0.99f;
                    return;
                }

                if ((double) this.ai[3] == -3.0)
                {
                    if (this.direction == 0)
                        this.TargetClosest(true);
                    if ((double) this.ai[2] == 0.0)
                        this.ai[2] = (float) this.direction;
                    this.velocity.Y *= 0.9f;
                    this.velocity.X += this.ai[2] * 0.3f;
                    if ((double) this.velocity.X > 10.0)
                        this.velocity.X = 10f;
                    if ((double) this.velocity.X < -10.0)
                        this.velocity.X = -10f;
                    var num = Main.player[this.target].Center.X - this.Center.X;
                    if ((double) this.ai[2] < 0.0 && (double) num > 300.0 ||
                        (double) this.ai[2] > 0.0 && (double) num < -300.0)
                    {
                        this.ai[3] = -4f;
                        this.ai[2] = 0.0f;
                        return;
                    }

                    if ((double) Math.Abs(num) <= 800.0)
                        return;
                    this.ai[3] = -1f;
                    this.ai[2] = 0.0f;
                    return;
                }

                if ((double) this.ai[3] == -4.0)
                {
                    ++this.ai[2];
                    this.velocity.Y += 0.1f;
                    if ((double) this.velocity.Length() > 4.0)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * 0.9f;
                    }

                    var index1 = (int) this.Center.X / 16;
                    var index2 = (int) ((double) this.position.Y + (double) this.height + 12.0) / 16;
                    var flag = false;
                    for (var index3 = index1 - 1; index3 <= index1 + 1; ++index3)
                    {
                        if (Main.tile[index3, index2] == null)
                            Main.tile[index1, index2] = new Tile();
                        if (Main.tile[index3, index2].active() && Main.tileSolid[(int) Main.tile[index3, index2].type])
                            flag = true;
                    }

                    if (flag && !Collision.SolidCollision(this.position, this.width, this.height))
                    {
                        this.ai[3] = 0.0f;
                        this.ai[2] = 0.0f;
                    }
                    else if ((double) this.ai[2] > 300.0 ||
                             (double) this.Center.Y > (double) Main.player[this.target].Center.Y + 200.0)
                    {
                        this.ai[3] = -1f;
                        this.ai[2] = 0.0f;
                    }
                }
                else
                {
                    if ((double) this.ai[3] == 1.0)
                    {
                        var center = this.Center;
                        center.Y -= 70f;
                        this.velocity.X *= 0.8f;
                        ++this.ai[2];
                        if ((double) this.ai[2] == 60.0)
                        {
                            if (Main.netMode != 1)
                                NPC.NewNPC((int) center.X, (int) center.Y + 18, 472, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                        }
                        else if ((double) this.ai[2] >= 90.0)
                        {
                            this.ai[3] = -2f;
                            this.ai[2] = 0.0f;
                        }

                        for (var index1 = 0; index1 < 2; ++index1)
                        {
                            var vector2_1 = center;
                            var vector2_2 = new Vector2((float) Main.rand.Next(-100, 101),
                                (float) Main.rand.Next(-100, 101));
                            vector2_2.Normalize();
                            vector2_2 *= (float) Main.rand.Next(0, 100) * 0.1f;
                            var Position = vector2_1 + vector2_2;
                            vector2_2.Normalize();
                            vector2_2 *= (float) Main.rand.Next(50, 90) * 0.1f;
                            var index2 = Dust.NewDust(Position, 1, 1, 27, 0.0f, 0.0f, 0, new Color(), 1f);
                            Main.dust[index2].velocity = -vector2_2 * 0.3f;
                            Main.dust[index2].alpha = 100;
                            if (Main.rand.Next(2) == 0)
                            {
                                Main.dust[index2].noGravity = true;
                                Main.dust[index2].scale += 0.3f;
                            }
                        }

                        return;
                    }

                    ++this.ai[2];
                    var num = 10;
                    if ((double) this.velocity.Y == 0.0 && NPC.CountNPCS(472) < num)
                    {
                        if ((double) this.ai[2] >= 180.0)
                        {
                            this.ai[2] = 0.0f;
                            this.ai[3] = 1f;
                        }
                    }
                    else
                    {
                        if (NPC.CountNPCS(472) >= num)
                            ++this.ai[2];
                        if ((double) this.ai[2] >= 360.0)
                        {
                            this.ai[2] = 0.0f;
                            this.ai[3] = -2f;
                            this.velocity.Y -= 3f;
                        }
                    }

                    if (this.target >= 0 && !Main.player[this.target].dead &&
                        (double) (Main.player[this.target].Center - this.Center).Length() > 800.0)
                    {
                        this.ai[3] = -1f;
                        this.ai[2] = 0.0f;
                    }
                }

                if (Main.player[this.target].dead)
                {
                    this.TargetClosest(true);
                    if (Main.player[this.target].dead && this.timeLeft > 1)
                        this.timeLeft = 1;
                }
            }

            if (this.type == 419)
            {
                this.reflectingProjectiles = false;
                this.takenDamageMultiplier = 1f;
                var num1 = 6;
                var num2 = 10;
                var num3 = 16f;
                if ((double) this.ai[2] > 0.0)
                    --this.ai[2];
                if ((double) this.ai[2] == 0.0)
                {
                    if (((double) Main.player[this.target].Center.X < (double) this.Center.X && this.direction < 0 ||
                         (double) Main.player[this.target].Center.X > (double) this.Center.X && this.direction > 0) &&
                        Collision.CanHit(this.Center, 1, 1, Main.player[this.target].Center, 1, 1))
                    {
                        this.ai[2] = -1f;
                        this.netUpdate = true;
                        this.TargetClosest(true);
                    }
                }
                else
                {
                    if ((double) this.ai[2] < 0.0 && (double) this.ai[2] > (double) -num1)
                    {
                        --this.ai[2];
                        this.velocity.X *= 0.9f;
                        return;
                    }

                    if ((double) this.ai[2] == (double) -num1)
                    {
                        --this.ai[2];
                        this.TargetClosest(true);
                        var vec = this.DirectionTo(Main.player[this.target].Top + new Vector2(0.0f, -30f));
                        if (vec.HasNaNs())
                            vec = Vector2.Normalize(new Vector2((float) this.spriteDirection, -1f));
                        this.velocity = vec * num3;
                        this.netUpdate = true;
                        return;
                    }

                    if ((double) this.ai[2] < (double) -num1)
                    {
                        --this.ai[2];
                        if ((double) this.velocity.Y == 0.0)
                            this.ai[2] = 60f;
                        else if ((double) this.ai[2] < (double) (-num1 - num2))
                        {
                            this.velocity.Y += 0.15f;
                            if ((double) this.velocity.Y > 24.0)
                                this.velocity.Y = 24f;
                        }

                        this.reflectingProjectiles = true;
                        this.takenDamageMultiplier = 3f;
                        if (!this.justHit)
                            return;
                        this.ai[2] = 60f;
                        this.netUpdate = true;
                        return;
                    }
                }
            }

            if (this.type == 415)
            {
                var num1 = 42;
                var num2 = 18;
                if (this.justHit)
                {
                    this.ai[2] = 120f;
                    this.netUpdate = true;
                }

                if ((double) this.ai[2] > 0.0)
                    --this.ai[2];
                if ((double) this.ai[2] == 0.0)
                {
                    var num3 = 0;
                    for (var index = 0; index < 200; ++index)
                    {
                        if (Main.npc[index].active && Main.npc[index].type == 516)
                            ++num3;
                    }

                    if (num3 > 6)
                        this.ai[2] = 90f;
                    else if (
                        ((double) Main.player[this.target].Center.X < (double) this.Center.X && this.direction < 0 ||
                         (double) Main.player[this.target].Center.X > (double) this.Center.X && this.direction > 0) &&
                        Collision.CanHit(this.Center, 1, 1, Main.player[this.target].Center, 1, 1))
                    {
                        this.ai[2] = -1f;
                        this.netUpdate = true;
                        this.TargetClosest(true);
                    }
                }
                else if ((double) this.ai[2] < 0.0 && (double) this.ai[2] > (double) -num1)
                {
                    --this.ai[2];
                    if ((double) this.ai[2] == (double) -num1)
                        this.ai[2] = (float) (180 + 30 * Main.rand.Next(10));
                    this.velocity.X *= 0.8f;
                    if ((double) this.ai[2] != (double) -num2 && (double) this.ai[2] != (double) (-num2 - 8) &&
                        (double) this.ai[2] != (double) (-num2 - 16))
                        return;
                    for (var index = 0; index < 20; ++index)
                    {
                        var Position = this.Center + Vector2.UnitX * (float) this.spriteDirection * 40f;
                        var dust = Main.dust[Dust.NewDust(Position, 0, 0, 259, 0.0f, 0.0f, 0, new Color(), 1f)];
                        var vector2 = Vector2.UnitY.RotatedByRandom(6.28318548202515);
                        dust.position = Position + vector2 * 4f;
                        dust.velocity = vector2 * 2f +
                                        Vector2.UnitX * Main.rand.NextFloat() * (float) this.spriteDirection * 3f;
                        dust.scale = (float) (0.300000011920929 + (double) vector2.X * (double) -this.spriteDirection);
                        dust.fadeIn = 0.7f;
                        dust.noGravity = true;
                    }

                    if ((double) this.velocity.X > -0.5 && (double) this.velocity.X < 0.5)
                        this.velocity.X = 0.0f;
                    if (Main.netMode == 1)
                        return;
                    NPC.NewNPC((int) this.Center.X + this.spriteDirection * 45, (int) this.Center.Y + 8, 516, 0, 0.0f,
                        0.0f, 0.0f, 0.0f, this.target);
                    return;
                }
            }

            if (this.type == 428)
            {
                ++this.localAI[0];
                if ((double) this.localAI[0] >= 300.0)
                {
                    var startX = (int) this.Center.X / 16 - 1;
                    var startY = (int) this.Center.Y / 16 - 1;
                    if (!Collision.SolidTiles(startX, startX + 2, startY, startY + 1) && Main.netMode != 1)
                    {
                        this.Transform(427);
                        this.life = this.lifeMax;
                        this.localAI[0] = 0.0f;
                        return;
                    }
                }

                var maxValue = (double) this.localAI[0] >= 60.0
                    ? ((double) this.localAI[0] >= 120.0
                        ? ((double) this.localAI[0] >= 180.0
                            ? ((double) this.localAI[0] >= 240.0 ? ((double) this.localAI[0] >= 300.0 ? 1 : 1) : 2)
                            : 4)
                        : 8)
                    : 16;
                if (Main.rand.Next(maxValue) == 0)
                {
                    var dust = Main.dust[
                        Dust.NewDust(this.position, this.width, this.height, 229, 0.0f, 0.0f, 0, new Color(), 1f)];
                    dust.noGravity = true;
                    dust.scale = 1f;
                    dust.noLight = true;
                    dust.velocity = this.DirectionFrom(dust.position) * dust.velocity.Length();
                    dust.position -= dust.velocity * 5f;
                    dust.position.X += (float) (this.direction * 6);
                    dust.position.Y += 4f;
                }
            }

            if (this.type == 427)
            {
                ++this.localAI[0];
                this.localAI[0] += Math.Abs(this.velocity.X) / 2f;
                if ((double) this.localAI[0] >= 1200.0 && Main.netMode != 1)
                {
                    var startX = (int) this.Center.X / 16 - 2;
                    var startY = (int) this.Center.Y / 16 - 3;
                    if (!Collision.SolidTiles(startX, startX + 4, startY, startY + 4))
                    {
                        this.Transform(426);
                        this.life = this.lifeMax;
                        this.localAI[0] = 0.0f;
                        return;
                    }
                }

                var maxValue = (double) this.localAI[0] >= 360.0
                    ? ((double) this.localAI[0] >= 720.0
                        ? ((double) this.localAI[0] >= 1080.0
                            ? ((double) this.localAI[0] >= 1440.0 ? ((double) this.localAI[0] >= 1800.0 ? 1 : 1) : 2)
                            : 6)
                        : 16)
                    : 32;
                if (Main.rand.Next(maxValue) == 0)
                {
                    var dust = Main.dust[
                        Dust.NewDust(this.position, this.width, this.height, 229, 0.0f, 0.0f, 0, new Color(), 1f)];
                    dust.noGravity = true;
                    dust.scale = 1f;
                    dust.noLight = true;
                }
            }

            var flag1 = false;
            if ((double) this.velocity.X == 0.0)
                flag1 = true;
            if (this.justHit)
                flag1 = false;
            if (Main.netMode != 1 && this.type == 198 && (double) this.life <= (double) this.lifeMax * 0.55)
                this.Transform(199);
            if (Main.netMode != 1 && this.type == 348 && (double) this.life <= (double) this.lifeMax * 0.55)
                this.Transform(349);
            var num10 = 60;
            if (this.type == 120)
            {
                num10 = 180;
                if ((double) this.ai[3] == -120.0)
                {
                    var npc = this;
                    npc.velocity = npc.velocity * 0.0f;
                    this.ai[3] = 0.0f;
                    Main.PlaySound(SoundID.Item8, this.position);
                    var vector2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                        this.position.Y + (float) this.height * 0.5f);
                    var num1 = this.oldPos[2].X + (float) this.width * 0.5f - vector2.X;
                    var num2 = this.oldPos[2].Y + (float) this.height * 0.5f - vector2.Y;
                    var num3 = 2f / (float) Math.Sqrt((double) num1 * (double) num1 + (double) num2 * (double) num2);
                    var SpeedX = num1 * num3;
                    var SpeedY = num2 * num3;
                    for (var index1 = 0; index1 < 20; ++index1)
                    {
                        var index2 = Dust.NewDust(this.position, this.width, this.height, 71, SpeedX, SpeedY, 200,
                            new Color(), 2f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity.X *= 2f;
                    }

                    for (var index1 = 0; index1 < 20; ++index1)
                    {
                        var index2 = Dust.NewDust(this.oldPos[2], this.width, this.height, 71, -SpeedX, -SpeedY, 200,
                            new Color(), 2f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity.X *= 2f;
                    }
                }
            }

            var flag2 = false;
            var flag3 = true;
            if (this.type == 343 || this.type == 47 || (this.type == 67 || this.type == 109) ||
                (this.type == 110 || this.type == 111 || (this.type == 120 || this.type == 163)) ||
                (this.type == 164 || this.type == 239 || (this.type == 168 || this.type == 199) ||
                 (this.type == 206 || this.type == 214 || (this.type == 215 || this.type == 216))) ||
                (this.type == 217 || this.type == 218 || (this.type == 219 || this.type == 220) ||
                 (this.type == 226 || this.type == 243 || (this.type == 251 || this.type == 257)) ||
                 (this.type == 258 || this.type == 290 || (this.type == 291 || this.type == 292) ||
                  (this.type == 293 || this.type == 305 || (this.type == 306 || this.type == 307)))) ||
                (this.type == 308 || this.type == 309 || (this.type == 348 || this.type == 349) ||
                 (this.type == 350 || this.type == 351 || this.type == 379) ||
                 (this.type >= 430 && this.type <= 436 || (this.type == 380 || this.type == 381) ||
                  (this.type == 382 || this.type == 383 || (this.type == 386 || this.type == 391))) ||
                 (this.type >= 449 && this.type <= 452 || (this.type == 466 || this.type == 464) ||
                  (this.type == 166 || this.type == 469 || (this.type == 468 || this.type == 471)) ||
                  (this.type == 470 || this.type == 480 || (this.type == 481 || this.type == 482) ||
                   (this.type == 411 || this.type == 424 || this.type == 409)))) ||
                (this.type >= 494 && this.type <= 506 || (this.type == 425 || this.type == 427) ||
                 (this.type == 426 || this.type == 428 || (this.type == 508 || this.type == 415)) ||
                 (this.type == 419 || this.type == 520 || this.type >= 524 && this.type <= 527 ||
                  (this.type == 528 || this.type == 529 || (this.type == 530 || this.type == 532)))))
                flag3 = false;
            var flag4 = false;
            switch (this.type)
            {
                case 425:
                case 471:
                    flag4 = true;
                    break;
            }

            var flag5 = true;
            switch (this.type)
            {
                case 110:
                case 111:
                case 206:
                case 214:
                case 215:
                case 216:
                case 291:
                case 292:
                case 293:
                case 350:
                case 379:
                case 380:
                case 381:
                case 382:
                case 409:
                case 411:
                case 424:
                case 426:
                case 466:
                case 498:
                case 499:
                case 500:
                case 501:
                case 502:
                case 503:
                case 504:
                case 505:
                case 506:
                case 520:
                    if ((double) this.ai[2] > 0.0)
                    {
                        flag5 = false;
                        break;
                    }

                    break;
            }

            if (!flag4 && flag5)
            {
                if ((double) this.velocity.Y == 0.0 && ((double) this.velocity.X > 0.0 && this.direction < 0 ||
                                                        (double) this.velocity.X < 0.0 && this.direction > 0))
                    flag2 = true;
                if ((double) this.position.X == (double) this.oldPosition.X || (double) this.ai[3] >= (double) num10 ||
                    flag2)
                    ++this.ai[3];
                else if ((double) Math.Abs(this.velocity.X) > 0.9 && (double) this.ai[3] > 0.0)
                    --this.ai[3];
                if ((double) this.ai[3] > (double) (num10 * 10))
                    this.ai[3] = 0.0f;
                if (this.justHit)
                    this.ai[3] = 0.0f;
                if ((double) this.ai[3] == (double) num10)
                    this.netUpdate = true;
            }

            if (this.type == 463 && Main.netMode != 1)
            {
                if ((double) this.localAI[3] > 0.0)
                    --this.localAI[3];
                if (this.justHit && (double) this.localAI[3] <= 0.0 && Main.rand.Next(3) == 0)
                {
                    this.localAI[3] = 30f;
                    var length = Main.rand.Next(3, 6);
                    var numArray = new int[length];
                    var maxValue = 0;
                    for (var index = 0; index < (int) byte.MaxValue; ++index)
                    {
                        if (Main.player[index].active && !Main.player[index].dead && Collision.CanHitLine(this.position,
                                this.width, this.height, Main.player[index].position, Main.player[index].width,
                                Main.player[index].height))
                        {
                            numArray[maxValue] = index;
                            ++maxValue;
                            if (maxValue == length)
                                break;
                        }
                    }

                    if (maxValue > 1)
                    {
                        for (var index1 = 0; index1 < 100; ++index1)
                        {
                            var index2 = Main.rand.Next(maxValue);
                            var index3 = index2;
                            while (index3 == index2)
                                index3 = Main.rand.Next(maxValue);
                            var num1 = numArray[index2];
                            numArray[index2] = numArray[index3];
                            numArray[index3] = num1;
                        }
                    }

                    var vector2_1 = new Vector2(-1f, -1f);
                    for (var index = 0; index < maxValue; ++index)
                    {
                        var vector2_2 = Main.npc[numArray[index]].Center - this.Center;
                        vector2_2.Normalize();
                        vector2_1 += vector2_2;
                    }

                    vector2_1.Normalize();
                    for (var index = 0; index < length; ++index)
                    {
                        var num1 = (float) Main.rand.Next(8, 13);
                        var vector2_2 = new Vector2((float) Main.rand.Next(-100, 101),
                            (float) Main.rand.Next(-100, 101));
                        vector2_2.Normalize();
                        if (maxValue > 0)
                        {
                            vector2_2 += vector2_1;
                            vector2_2.Normalize();
                        }

                        vector2_2 *= num1;
                        if (maxValue > 0)
                        {
                            --maxValue;
                            vector2_2 = Main.player[numArray[maxValue]].Center - this.Center;
                            vector2_2.Normalize();
                            vector2_2 *= num1;
                        }

                        Projectile.NewProjectile(this.Center.X, this.position.Y + (float) (this.width / 4), vector2_2.X,
                            vector2_2.Y, 498, (int) ((double) this.damage * 0.15), 1f, (int) byte.MaxValue, 0.0f, 0.0f);
                    }
                }
            }

            if (this.type == 460)
                this.knockBackResist =
                    (double) this.velocity.Y < -(double) NPC.gravity || (double) this.velocity.Y > (double) NPC.gravity
                        ? 0.0f
                        : 0.25f * Main.knockBackMultiplier;
            if (this.type == 469)
            {
                this.knockBackResist = 0.45f * Main.knockBackMultiplier;
                if ((double) this.ai[2] == 1.0)
                    this.knockBackResist = 0.0f;
                var flag6 = false;
                var num1 = (int) this.Center.X / 16;
                var num2 = (int) this.Center.Y / 16;
                for (var index1 = num1 - 1; index1 <= num1 + 1; ++index1)
                {
                    for (var index2 = num2 - 1; index2 <= num2 + 1; ++index2)
                    {
                        if (Main.tile[index1, index2] != null && Main.tile[index1, index2].wall > (byte) 0)
                        {
                            flag6 = true;
                            break;
                        }
                    }

                    if (flag6)
                        break;
                }

                if ((double) this.ai[2] == 0.0 && flag6)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        this.velocity.Y = -4.6f;
                        this.velocity.X *= 1.3f;
                    }
                    else if ((double) this.velocity.Y > 0.0)
                        this.ai[2] = 1f;
                }

                if (flag6 && (double) this.ai[2] == 1.0 &&
                    Collision.CanHit(this.Center, 1, 1, Main.player[this.target].Center, 1, 1))
                {
                    var vector2 = Main.player[this.target].Center - this.Center;
                    var num3 = vector2.Length();
                    vector2.Normalize();
                    this.velocity = (this.velocity * 29f + vector2 * (float) (4.5 + (double) num3 / 300.0)) / 30f;
                    this.noGravity = true;
                    this.ai[2] = 1f;
                    return;
                }

                this.noGravity = false;
                this.ai[2] = 0.0f;
            }

            if (this.type == 462 && (double) this.velocity.Y == 0.0 &&
                ((double) (Main.player[this.target].Center - this.Center).Length() < 150.0 &&
                 (double) Math.Abs(this.velocity.X) > 3.0 &&
                 ((double) this.velocity.X < 0.0 &&
                  (double) this.Center.X > (double) Main.player[this.target].Center.X ||
                  (double) this.velocity.X > 0.0 &&
                  (double) this.Center.X < (double) Main.player[this.target].Center.X)))
            {
                this.velocity.X *= 1.75f;
                this.velocity.Y -= 4.5f;
                if ((double) this.Center.Y - (double) Main.player[this.target].Center.Y > 20.0)
                    this.velocity.Y -= 0.5f;
                if ((double) this.Center.Y - (double) Main.player[this.target].Center.Y > 40.0)
                    --this.velocity.Y;
                if ((double) this.Center.Y - (double) Main.player[this.target].Center.Y > 80.0)
                    this.velocity.Y -= 1.5f;
                if ((double) this.Center.Y - (double) Main.player[this.target].Center.Y > 100.0)
                    this.velocity.Y -= 1.5f;
                if ((double) Math.Abs(this.velocity.X) > 7.0)
                {
                    if ((double) this.velocity.X < 0.0)
                        this.velocity.X = -7f;
                    else
                        this.velocity.X = 7f;
                }
            }

            if ((double) this.ai[3] < (double) num10 && (Main.eclipse || !Main.dayTime ||
                                                         (double) this.position.Y > Main.worldSurface * 16.0 ||
                                                         Main.invasionType == 1 &&
                                                         (this.type == 343 || this.type == 350) ||
                                                         Main.invasionType == 1 &&
                                                         (this.type == 26 || this.type == 27 ||
                                                          (this.type == 28 || this.type == 111) || this.type == 471) ||
                                                         (this.type == 73 ||
                                                          Main.invasionType == 3 && this.type >= 212 &&
                                                          this.type <= 216 ||
                                                          Main.invasionType == 4 &&
                                                          (this.type == 381 || this.type == 382 ||
                                                           (this.type == 383 || this.type == 385) ||
                                                           (this.type == 386 || this.type == 389 ||
                                                            (this.type == 391 || this.type == 520)))) ||
                                                         (this.type == 31 || this.type == 294 ||
                                                          (this.type == 295 || this.type == 296) ||
                                                          (this.type == 47 || this.type == 67 ||
                                                           (this.type == 77 || this.type == 78)) ||
                                                          (this.type == 79 || this.type == 80 ||
                                                           (this.type == 110 || this.type == 120) ||
                                                           (this.type == 168 || this.type == 181 ||
                                                            (this.type == 185 || this.type == 198))) ||
                                                          (this.type == 199 || this.type == 206 ||
                                                           (this.type == 217 || this.type == 218) ||
                                                           (this.type == 219 || this.type == 220 ||
                                                            (this.type == 239 || this.type == 243)) ||
                                                           (this.type == 254 || this.type == (int) byte.MaxValue ||
                                                            (this.type == 257 || this.type == 258) ||
                                                            (this.type == 291 || this.type == 292 ||
                                                             (this.type == 293 || this.type == 379)))) ||
                                                          (this.type == 380 || this.type == 464 ||
                                                           (this.type == 470 || this.type == 424) ||
                                                           this.type == 411 &&
                                                           ((double) this.ai[1] >= 180.0 ||
                                                            (double) this.ai[1] < 90.0) ||
                                                           (this.type == 409 || this.type == 425 ||
                                                            (this.type == 429 || this.type == 427) ||
                                                            (this.type == 428 || this.type == 508 ||
                                                             (this.type == 415 || this.type == 419))) ||
                                                           (this.type >= 524 && this.type <= 527 ||
                                                            (this.type == 528 || this.type == 529) ||
                                                            (this.type == 530 || this.type == 532))))))
            {
                if ((this.type == 3 || this.type == 331 || (this.type == 332 || this.type == 21) ||
                     (this.type >= 449 && this.type <= 452 || (this.type == 31 || this.type == 294)) ||
                     (this.type == 295 || this.type == 296 || (this.type == 77 || this.type == 110) ||
                      (this.type == 132 || this.type == 167 || (this.type == 161 || this.type == 162))) ||
                     (this.type == 186 || this.type == 187 || (this.type == 188 || this.type == 189) ||
                      (this.type == 197 || this.type == 200 || (this.type == 201 || this.type == 202)) ||
                      (this.type == 203 || this.type == 223 || (this.type == 291 || this.type == 292) ||
                       (this.type == 293 || this.type == 320 || (this.type == 321 || this.type == 319)))) ||
                     this.type == 481) && Main.rand.Next(1000) == 0)
                    Main.PlaySound(14, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                if (this.type == 489 && Main.rand.Next(800) == 0)
                    Main.PlaySound(14, (int) this.position.X, (int) this.position.Y, this.type, 1f, 0.0f);
                if ((this.type == 78 || this.type == 79 || this.type == 80) && Main.rand.Next(500) == 0)
                    Main.PlaySound(26, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                if (this.type == 159 && Main.rand.Next(500) == 0)
                    Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, 7, 1f, 0.0f);
                if (this.type == 162 && Main.rand.Next(500) == 0)
                    Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, 6, 1f, 0.0f);
                if (this.type == 181 && Main.rand.Next(500) == 0)
                    Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, 8, 1f, 0.0f);
                if (this.type >= 269 && this.type <= 280 && Main.rand.Next(1000) == 0)
                    Main.PlaySound(14, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                this.TargetClosest(true);
            }
            else if ((double) this.ai[2] <= 0.0 || this.type != 110 && this.type != 111 &&
                     (this.type != 206 && this.type != 216) &&
                     (this.type != 214 && this.type != 215 && (this.type != 291 && this.type != 292)) &&
                     (this.type != 293 && this.type != 350 && (this.type != 381 && this.type != 382) &&
                      (this.type != 383 && this.type != 385 && (this.type != 386 && this.type != 389))) &&
                     (this.type != 391 && this.type != 469 && (this.type != 166 && this.type != 466) &&
                      (this.type != 471 && this.type != 411 && (this.type != 409 && this.type != 424)) &&
                      (this.type != 425 && this.type != 426 && (this.type != 415 && this.type != 419) &&
                       this.type != 520)))
            {
                if (Main.dayTime && (double) this.position.Y / 16.0 < Main.worldSurface && this.timeLeft > 10)
                    this.timeLeft = 10;
                if ((double) this.velocity.X == 0.0)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        ++this.ai[0];
                        if ((double) this.ai[0] >= 2.0)
                        {
                            this.direction *= -1;
                            this.spriteDirection = this.direction;
                            this.ai[0] = 0.0f;
                        }
                    }
                }
                else
                    this.ai[0] = 0.0f;

                if (this.direction == 0)
                    this.direction = 1;
            }

            if (this.type == 159 || this.type == 349)
            {
                if (this.type == 159 && ((double) this.velocity.X > 0.0 && this.direction < 0 ||
                                         (double) this.velocity.X < 0.0 && this.direction > 0))
                    this.velocity.X *= 0.95f;
                if ((double) this.velocity.X < -6.0 || (double) this.velocity.X > 6.0)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * 0.8f;
                    }
                }
                else if ((double) this.velocity.X < 6.0 && this.direction == 1)
                {
                    if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X < 0.0)
                        this.velocity.X *= 0.99f;
                    this.velocity.X += 0.07f;
                    if ((double) this.velocity.X > 6.0)
                        this.velocity.X = 6f;
                }
                else if ((double) this.velocity.X > -6.0 && this.direction == -1)
                {
                    if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X > 0.0)
                        this.velocity.X *= 0.99f;
                    this.velocity.X -= 0.07f;
                    if ((double) this.velocity.X < -6.0)
                        this.velocity.X = -6f;
                }
            }
            else if (this.type == 199)
            {
                if ((double) this.velocity.X < -4.0 || (double) this.velocity.X > 4.0)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * 0.8f;
                    }
                }
                else if ((double) this.velocity.X < 4.0 && this.direction == 1)
                {
                    if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X < 0.0)
                        this.velocity.X *= 0.8f;
                    this.velocity.X += 0.1f;
                    if ((double) this.velocity.X > 4.0)
                        this.velocity.X = 4f;
                }
                else if ((double) this.velocity.X > -4.0 && this.direction == -1)
                {
                    if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X > 0.0)
                        this.velocity.X *= 0.8f;
                    this.velocity.X -= 0.1f;
                    if ((double) this.velocity.X < -4.0)
                        this.velocity.X = -4f;
                }
            }
            else if (this.type == 120 || this.type == 166 || (this.type == 213 || this.type == 258) ||
                     (this.type == 528 || this.type == 529))
            {
                if ((double) this.velocity.X < -3.0 || (double) this.velocity.X > 3.0)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * 0.8f;
                    }
                }
                else if ((double) this.velocity.X < 3.0 && this.direction == 1)
                {
                    if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X < 0.0)
                        this.velocity.X *= 0.99f;
                    this.velocity.X += 0.07f;
                    if ((double) this.velocity.X > 3.0)
                        this.velocity.X = 3f;
                }
                else if ((double) this.velocity.X > -3.0 && this.direction == -1)
                {
                    if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X > 0.0)
                        this.velocity.X *= 0.99f;
                    this.velocity.X -= 0.07f;
                    if ((double) this.velocity.X < -3.0)
                        this.velocity.X = -3f;
                }
            }
            else if (this.type == 461 || this.type == 27 || (this.type == 77 || this.type == 104) ||
                     (this.type == 163 || this.type == 162 || (this.type == 196 || this.type == 197)) ||
                     (this.type == 212 || this.type == 257 || (this.type == 326 || this.type == 343) ||
                      (this.type == 348 || this.type == 351 || this.type >= 524 && this.type <= 527)) ||
                     this.type == 530)
            {
                if ((double) this.velocity.X < -2.0 || (double) this.velocity.X > 2.0)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * 0.8f;
                    }
                }
                else if ((double) this.velocity.X < 2.0 && this.direction == 1)
                {
                    this.velocity.X += 0.07f;
                    if ((double) this.velocity.X > 2.0)
                        this.velocity.X = 2f;
                }
                else if ((double) this.velocity.X > -2.0 && this.direction == -1)
                {
                    this.velocity.X -= 0.07f;
                    if ((double) this.velocity.X < -2.0)
                        this.velocity.X = -2f;
                }
            }
            else if (this.type == 109)
            {
                if ((double) this.velocity.X < -2.0 || (double) this.velocity.X > 2.0)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * 0.8f;
                    }
                }
                else if ((double) this.velocity.X < 2.0 && this.direction == 1)
                {
                    this.velocity.X += 0.04f;
                    if ((double) this.velocity.X > 2.0)
                        this.velocity.X = 2f;
                }
                else if ((double) this.velocity.X > -2.0 && this.direction == -1)
                {
                    this.velocity.X -= 0.04f;
                    if ((double) this.velocity.X < -2.0)
                        this.velocity.X = -2f;
                }
            }
            else if (this.type == 21 || this.type == 26 || (this.type == 31 || this.type == 294) ||
                     (this.type == 295 || this.type == 296 || (this.type == 47 || this.type == 73)) ||
                     (this.type == 140 || this.type == 164 || (this.type == 239 || this.type == 167) ||
                      (this.type == 168 || this.type == 185 || (this.type == 198 || this.type == 201))) ||
                     (this.type == 202 || this.type == 203 || (this.type == 217 || this.type == 218) ||
                      (this.type == 219 || this.type == 226 || (this.type == 181 || this.type == 254)) ||
                      (this.type == 338 || this.type == 339 || (this.type == 340 || this.type == 342) ||
                       (this.type == 385 || this.type == 389 || (this.type == 462 || this.type == 463)))) ||
                     (this.type == 466 || this.type == 464 || (this.type == 469 || this.type == 470) ||
                      (this.type == 480 || this.type == 482 || (this.type == 425 || this.type == 429))))
            {
                var num1 = 1.5f;
                if (this.type == 294)
                    num1 = 2f;
                else if (this.type == 295)
                    num1 = 1.75f;
                else if (this.type == 296)
                    num1 = 1.25f;
                else if (this.type == 201)
                    num1 = 1.1f;
                else if (this.type == 202)
                    num1 = 0.9f;
                else if (this.type == 203)
                    num1 = 1.2f;
                else if (this.type == 338)
                    num1 = 1.75f;
                else if (this.type == 339)
                    num1 = 1.25f;
                else if (this.type == 340)
                    num1 = 2f;
                else if (this.type == 385)
                    num1 = 1.8f;
                else if (this.type == 389)
                    num1 = 2.25f;
                else if (this.type == 462)
                    num1 = 4f;
                else if (this.type == 463)
                    num1 = 0.75f;
                else if (this.type == 466)
                    num1 = 3.75f;
                else if (this.type == 469)
                    num1 = 3.25f;
                else if (this.type == 480)
                    num1 = (float) (1.5 + (1.0 - (double) this.life / (double) this.lifeMax) * 2.0);
                else if (this.type == 425)
                    num1 = 6f;
                else if (this.type == 429)
                    num1 = 4f;
                if (this.type == 21 || this.type == 201 || (this.type == 202 || this.type == 203) || this.type == 342)
                    num1 *= (float) (1.0 + (1.0 - (double) this.scale));
                if ((double) this.velocity.X < -(double) num1 || (double) this.velocity.X > (double) num1)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * 0.8f;
                    }
                }
                else if ((double) this.velocity.X < (double) num1 && this.direction == 1)
                {
                    if (this.type == 466 && (double) this.velocity.X < -2.0)
                        this.velocity.X *= 0.9f;
                    this.velocity.X += 0.07f;
                    if ((double) this.velocity.X > (double) num1)
                        this.velocity.X = num1;
                }
                else if ((double) this.velocity.X > -(double) num1 && this.direction == -1)
                {
                    if (this.type == 466 && (double) this.velocity.X > 2.0)
                        this.velocity.X *= 0.9f;
                    this.velocity.X -= 0.07f;
                    if ((double) this.velocity.X < -(double) num1)
                        this.velocity.X = -num1;
                }

                if ((double) this.velocity.Y == 0.0 && this.type == 462 &&
                    (this.direction > 0 && (double) this.velocity.X < 0.0 ||
                     this.direction < 0 && (double) this.velocity.X > 0.0))
                    this.velocity.X *= 0.9f;
            }
            else if (this.type >= 269 && this.type <= 280)
            {
                var num1 = 1.5f;
                if (this.type == 269)
                    num1 = 2f;
                if (this.type == 270)
                    num1 = 1f;
                if (this.type == 271)
                    num1 = 1.5f;
                if (this.type == 272)
                    num1 = 3f;
                if (this.type == 273)
                    num1 = 1.25f;
                if (this.type == 274)
                    num1 = 3f;
                if (this.type == 275)
                    num1 = 3.25f;
                if (this.type == 276)
                    num1 = 2f;
                if (this.type == 277)
                    num1 = 2.75f;
                if (this.type == 278)
                    num1 = 1.8f;
                if (this.type == 279)
                    num1 = 1.3f;
                if (this.type == 280)
                    num1 = 2.5f;
                var num2 = num1 * (float) (1.0 + (1.0 - (double) this.scale));
                if ((double) this.velocity.X < -(double) num2 || (double) this.velocity.X > (double) num2)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * 0.8f;
                    }
                }
                else if ((double) this.velocity.X < (double) num2 && this.direction == 1)
                {
                    this.velocity.X += 0.07f;
                    if ((double) this.velocity.X > (double) num2)
                        this.velocity.X = num2;
                }
                else if ((double) this.velocity.X > -(double) num2 && this.direction == -1)
                {
                    this.velocity.X -= 0.07f;
                    if ((double) this.velocity.X < -(double) num2)
                        this.velocity.X = -num2;
                }
            }
            else if (this.type >= 305 && this.type <= 314)
            {
                var num1 = 1.5f;
                if (this.type == 305 || this.type == 310)
                    num1 = 2f;
                if (this.type == 306 || this.type == 311)
                    num1 = 1.25f;
                if (this.type == 307 || this.type == 312)
                    num1 = 2.25f;
                if (this.type == 308 || this.type == 313)
                    num1 = 1.5f;
                if (this.type == 309 || this.type == 314)
                    num1 = 1f;
                if (this.type < 310)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        this.velocity.X *= 0.85f;
                        if ((double) this.velocity.X > -0.3 && (double) this.velocity.X < 0.3)
                        {
                            this.velocity.Y = -7f;
                            this.velocity.X = num1 * (float) this.direction;
                        }
                    }
                    else if (this.spriteDirection == this.direction)
                        this.velocity.X =
                            (float) (((double) this.velocity.X * 10.0 + (double) num1 * (double) this.direction) /
                                     11.0);
                }
                else if ((double) this.velocity.X < -(double) num1 || (double) this.velocity.X > (double) num1)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * 0.8f;
                    }
                }
                else if ((double) this.velocity.X < (double) num1 && this.direction == 1)
                {
                    this.velocity.X += 0.07f;
                    if ((double) this.velocity.X > (double) num1)
                        this.velocity.X = num1;
                }
                else if ((double) this.velocity.X > -(double) num1 && this.direction == -1)
                {
                    this.velocity.X -= 0.07f;
                    if ((double) this.velocity.X < -(double) num1)
                        this.velocity.X = -num1;
                }
            }
            else if (this.type == 67 || this.type == 220 || this.type == 428)
            {
                if ((double) this.velocity.X < -0.5 || (double) this.velocity.X > 0.5)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * 0.7f;
                    }
                }
                else if ((double) this.velocity.X < 0.5 && this.direction == 1)
                {
                    this.velocity.X += 0.03f;
                    if ((double) this.velocity.X > 0.5)
                        this.velocity.X = 0.5f;
                }
                else if ((double) this.velocity.X > -0.5 && this.direction == -1)
                {
                    this.velocity.X -= 0.03f;
                    if ((double) this.velocity.X < -0.5)
                        this.velocity.X = -0.5f;
                }
            }
            else if (this.type == 78 || this.type == 79 || this.type == 80)
            {
                var num1 = 1f;
                var num2 = 0.05f;
                if (this.life < this.lifeMax / 2)
                {
                    num1 = 2f;
                    num2 = 0.1f;
                }

                if (this.type == 79)
                    num1 *= 1.5f;
                if ((double) this.velocity.X < -(double) num1 || (double) this.velocity.X > (double) num1)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * 0.7f;
                    }
                }
                else if ((double) this.velocity.X < (double) num1 && this.direction == 1)
                {
                    this.velocity.X += num2;
                    if ((double) this.velocity.X > (double) num1)
                        this.velocity.X = num1;
                }
                else if ((double) this.velocity.X > -(double) num1 && this.direction == -1)
                {
                    this.velocity.X -= num2;
                    if ((double) this.velocity.X < -(double) num1)
                        this.velocity.X = -num1;
                }
            }
            else if (this.type == 287)
            {
                var num1 = 5f;
                var num2 = 0.2f;
                if ((double) this.velocity.X < -(double) num1 || (double) this.velocity.X > (double) num1)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * 0.7f;
                    }
                }
                else if ((double) this.velocity.X < (double) num1 && this.direction == 1)
                {
                    this.velocity.X += num2;
                    if ((double) this.velocity.X > (double) num1)
                        this.velocity.X = num1;
                }
                else if ((double) this.velocity.X > -(double) num1 && this.direction == -1)
                {
                    this.velocity.X -= num2;
                    if ((double) this.velocity.X < -(double) num1)
                        this.velocity.X = -num1;
                }
            }
            else if (this.type == 243)
            {
                var num1 = 1f;
                var num2 = 0.07f;
                var num3 = num1 + (float) ((1.0 - (double) this.life / (double) this.lifeMax) * 1.5);
                var num4 = num2 + (float) ((1.0 - (double) this.life / (double) this.lifeMax) * 0.150000005960464);
                if ((double) this.velocity.X < -(double) num3 || (double) this.velocity.X > (double) num3)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * 0.7f;
                    }
                }
                else if ((double) this.velocity.X < (double) num3 && this.direction == 1)
                {
                    this.velocity.X += num4;
                    if ((double) this.velocity.X > (double) num3)
                        this.velocity.X = num3;
                }
                else if ((double) this.velocity.X > -(double) num3 && this.direction == -1)
                {
                    this.velocity.X -= num4;
                    if ((double) this.velocity.X < -(double) num3)
                        this.velocity.X = -num3;
                }
            }
            else if (this.type == 251)
            {
                var num1 = 1f;
                var num2 = 0.08f;
                var num3 = num1 + (float) ((1.0 - (double) this.life / (double) this.lifeMax) * 2.0);
                var num4 = num2 + (float) ((1.0 - (double) this.life / (double) this.lifeMax) * 0.200000002980232);
                if ((double) this.velocity.X < -(double) num3 || (double) this.velocity.X > (double) num3)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * 0.7f;
                    }
                }
                else if ((double) this.velocity.X < (double) num3 && this.direction == 1)
                {
                    this.velocity.X += num4;
                    if ((double) this.velocity.X > (double) num3)
                        this.velocity.X = num3;
                }
                else if ((double) this.velocity.X > -(double) num3 && this.direction == -1)
                {
                    this.velocity.X -= num4;
                    if ((double) this.velocity.X < -(double) num3)
                        this.velocity.X = -num3;
                }
            }
            else if (this.type == 386)
            {
                if ((double) this.ai[2] > 0.0)
                {
                    if ((double) this.velocity.Y == 0.0)
                        this.velocity.X *= 0.8f;
                }
                else
                {
                    var num1 = 0.15f;
                    var num2 = 1.5f;
                    if ((double) this.velocity.X < -(double) num2 || (double) this.velocity.X > (double) num2)
                    {
                        if ((double) this.velocity.Y == 0.0)
                        {
                            var npc = this;
                            npc.velocity = npc.velocity * 0.7f;
                        }
                    }
                    else if ((double) this.velocity.X < (double) num2 && this.direction == 1)
                    {
                        this.velocity.X += num1;
                        if ((double) this.velocity.X > (double) num2)
                            this.velocity.X = num2;
                    }
                    else if ((double) this.velocity.X > -(double) num2 && this.direction == -1)
                    {
                        this.velocity.X -= num1;
                        if ((double) this.velocity.X < -(double) num2)
                            this.velocity.X = -num2;
                    }
                }
            }
            else if (this.type == 460)
            {
                var num1 = 3f;
                var num2 = 0.1f;
                if ((double) Math.Abs(this.velocity.X) > 2.0)
                    num2 *= 0.8f;
                if ((double) Math.Abs(this.velocity.X) > 2.5)
                    num2 *= 0.8f;
                if ((double) Math.Abs(this.velocity.X) > 3.0)
                    num2 *= 0.8f;
                if ((double) Math.Abs(this.velocity.X) > 3.5)
                    num2 *= 0.8f;
                if ((double) Math.Abs(this.velocity.X) > 4.0)
                    num2 *= 0.8f;
                if ((double) Math.Abs(this.velocity.X) > 4.5)
                    num2 *= 0.8f;
                if ((double) Math.Abs(this.velocity.X) > 5.0)
                    num2 *= 0.8f;
                if ((double) Math.Abs(this.velocity.X) > 5.5)
                    num2 *= 0.8f;
                var num3 = num1 + (float) ((1.0 - (double) this.life / (double) this.lifeMax) * 3.0);
                if ((double) this.velocity.X < -(double) num3 || (double) this.velocity.X > (double) num3)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * 0.7f;
                    }
                }
                else if ((double) this.velocity.X < (double) num3 && this.direction == 1)
                {
                    if ((double) this.velocity.X < 0.0)
                        this.velocity.X *= 0.93f;
                    this.velocity.X += num2;
                    if ((double) this.velocity.X > (double) num3)
                        this.velocity.X = num3;
                }
                else if ((double) this.velocity.X > -(double) num3 && this.direction == -1)
                {
                    if ((double) this.velocity.X > 0.0)
                        this.velocity.X *= 0.93f;
                    this.velocity.X -= num2;
                    if ((double) this.velocity.X < -(double) num3)
                        this.velocity.X = -num3;
                }
            }
            else if (this.type == 508)
            {
                var num1 = 2.5f;
                var num2 = 40f;
                var num3 = Math.Abs(this.velocity.X);
                if ((double) num3 > 2.75)
                {
                    num1 = 3.5f;
                    num2 += 80f;
                }
                else if ((double) num3 > 2.25)
                {
                    num1 = 3f;
                    num2 += 60f;
                }

                if ((double) Math.Abs(this.velocity.Y) < 0.5)
                {
                    if ((double) this.velocity.X > 0.0 && this.direction < 0)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * 0.9f;
                    }

                    if ((double) this.velocity.X < 0.0 && this.direction > 0)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * 0.9f;
                    }
                }

                if ((double) Math.Abs(this.velocity.Y) > (double) NPC.gravity)
                    num2 *= 3f;
                if ((double) this.velocity.X <= 0.0 && this.direction < 0)
                    this.velocity.X = (float) (((double) this.velocity.X * (double) num2 - (double) num1) /
                                               ((double) num2 + 1.0));
                else if ((double) this.velocity.X >= 0.0 && this.direction > 0)
                    this.velocity.X = (float) (((double) this.velocity.X * (double) num2 + (double) num1) /
                                               ((double) num2 + 1.0));
                else if ((double) Math.Abs(this.Center.X - Main.player[this.target].Center.X) > 20.0 &&
                         (double) Math.Abs(this.velocity.Y) <= (double) NPC.gravity)
                {
                    this.velocity.X *= 0.99f;
                    this.velocity.X += (float) this.direction * 0.025f;
                }
            }
            else if (this.type == 391 || this.type == 427 || (this.type == 415 || this.type == 419) ||
                     (this.type == 518 || this.type == 532))
            {
                var num1 = 5f;
                var num2 = 0.25f;
                var num3 = 0.7f;
                if (this.type == 427)
                {
                    num1 = 6f;
                    num2 = 0.2f;
                    num3 = 0.8f;
                }
                else if (this.type == 415)
                {
                    num1 = 4f;
                    num2 = 0.1f;
                    num3 = 0.95f;
                }
                else if (this.type == 419)
                {
                    num1 = 6f;
                    num2 = 0.15f;
                    num3 = 0.85f;
                }
                else if (this.type == 518)
                {
                    num1 = 5f;
                    num2 = 0.1f;
                    num3 = 0.95f;
                }
                else if (this.type == 532)
                {
                    num1 = 5f;
                    num2 = 0.15f;
                    num3 = 0.98f;
                }

                if ((double) this.velocity.X < -(double) num1 || (double) this.velocity.X > (double) num1)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * num3;
                    }
                }
                else if ((double) this.velocity.X < (double) num1 && this.direction == 1)
                {
                    this.velocity.X += num2;
                    if ((double) this.velocity.X > (double) num1)
                        this.velocity.X = num1;
                }
                else if ((double) this.velocity.X > -(double) num1 && this.direction == -1)
                {
                    this.velocity.X -= num2;
                    if ((double) this.velocity.X < -(double) num1)
                        this.velocity.X = -num1;
                }
            }
            else if (this.type >= 430 && this.type <= 436 || (this.type == 494 || this.type == 495))
            {
                if ((double) this.ai[2] == 0.0)
                {
                    this.damage = this.defDamage;
                    var num1 = 1f * (float) (1.0 + (1.0 - (double) this.scale));
                    if ((double) this.velocity.X < -(double) num1 || (double) this.velocity.X > (double) num1)
                    {
                        if ((double) this.velocity.Y == 0.0)
                        {
                            var npc = this;
                            npc.velocity = npc.velocity * 0.8f;
                        }
                    }
                    else if ((double) this.velocity.X < (double) num1 && this.direction == 1)
                    {
                        this.velocity.X += 0.07f;
                        if ((double) this.velocity.X > (double) num1)
                            this.velocity.X = num1;
                    }
                    else if ((double) this.velocity.X > -(double) num1 && this.direction == -1)
                    {
                        this.velocity.X -= 0.07f;
                        if ((double) this.velocity.X < -(double) num1)
                            this.velocity.X = -num1;
                    }

                    if ((double) this.velocity.Y == 0.0 &&
                        (!Main.dayTime || (double) this.position.Y > Main.worldSurface * 16.0) &&
                        !Main.player[this.target].dead)
                    {
                        var vector2 = this.Center - Main.player[this.target].Center;
                        var num2 = 50;
                        if (this.type >= 494 && this.type <= 495)
                            num2 = 42;
                        if ((double) vector2.Length() < (double) num2 &&
                            Collision.CanHit(this.Center, 1, 1, Main.player[this.target].Center, 1, 1))
                        {
                            this.velocity.X *= 0.7f;
                            this.ai[2] = 1f;
                        }
                    }
                }
                else
                {
                    this.damage = (int) ((double) this.defDamage * 1.5);
                    this.ai[3] = 1f;
                    this.velocity.X *= 0.9f;
                    if ((double) Math.Abs(this.velocity.X) < 0.1)
                        this.velocity.X = 0.0f;
                    ++this.ai[2];
                    if ((double) this.ai[2] >= 20.0 || (double) this.velocity.Y != 0.0 ||
                        Main.dayTime && (double) this.position.Y < Main.worldSurface * 16.0)
                        this.ai[2] = 0.0f;
                }
            }
            else if (this.type != 110 && this.type != 111 && (this.type != 206 && this.type != 214) &&
                     (this.type != 215 && this.type != 216 && (this.type != 290 && this.type != 291)) &&
                     (this.type != 292 && this.type != 293 && (this.type != 350 && this.type != 379) &&
                      (this.type != 380 && this.type != 381 && this.type != 382)) &&
                     ((this.type < 449 || this.type > 452) && (this.type != 468 && this.type != 481) &&
                      (this.type != 411 && this.type != 409 && (this.type < 498 || this.type > 506)) &&
                      (this.type != 424 && this.type != 426 && this.type != 520)))
            {
                var num1 = 1f;
                if (this.type == 186)
                    num1 = 1.1f;
                if (this.type == 187)
                    num1 = 0.9f;
                if (this.type == 188)
                    num1 = 1.2f;
                if (this.type == 189)
                    num1 = 0.8f;
                if (this.type == 132)
                    num1 = 0.95f;
                if (this.type == 200)
                    num1 = 0.87f;
                if (this.type == 223)
                    num1 = 1.05f;
                if (this.type == 489)
                {
                    var num2 = (Main.player[this.target].Center - this.Center).Length() * (1f / 400f);
                    if ((double) num2 > 1.5)
                        num2 = 1.5f;
                    num1 = (!Main.expertMode ? 2.5f - num2 : 3f - num2) * 0.8f;
                }

                if (this.type == 489 || this.type == 3 || (this.type == 132 || this.type == 186) ||
                    (this.type == 187 || this.type == 188 || (this.type == 189 || this.type == 200)) ||
                    (this.type == 223 || this.type == 331 || this.type == 332))
                    num1 *= (float) (1.0 + (1.0 - (double) this.scale));
                if ((double) this.velocity.X < -(double) num1 || (double) this.velocity.X > (double) num1)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * 0.8f;
                    }
                }
                else if ((double) this.velocity.X < (double) num1 && this.direction == 1)
                {
                    this.velocity.X += 0.07f;
                    if ((double) this.velocity.X > (double) num1)
                        this.velocity.X = num1;
                }
                else if ((double) this.velocity.X > -(double) num1 && this.direction == -1)
                {
                    this.velocity.X -= 0.07f;
                    if ((double) this.velocity.X < -(double) num1)
                        this.velocity.X = -num1;
                }
            }

            if (this.type >= 277 && this.type <= 280)
                Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.2f, 0.1f, 0.0f);
            else if (this.type == 520)
                Lighting.AddLight(this.Top + new Vector2(0.0f, 20f), 0.3f, 0.3f, 0.7f);
            else if (this.type == 525)
                Lighting.AddLight(this.Top + new Vector2(0.0f, 15f), new Vector3(0.7f, 1f, 0.2f) * 0.5f);
            else if (this.type == 526)
                Lighting.AddLight(this.Top + new Vector2(0.0f, 15f), new Vector3(1f, 1f, 0.5f) * 0.4f);
            else if (this.type == 527)
                Lighting.AddLight(this.Top + new Vector2(0.0f, 15f), new Vector3(0.6f, 0.3f, 1f) * 0.4f);
            else if (this.type == 415)
            {
                this.hide = false;
                for (var index = 0; index < 200; ++index)
                {
                    if (Main.npc[index].active && Main.npc[index].type == 416 &&
                        (double) Main.npc[index].ai[0] == (double) this.whoAmI)
                    {
                        this.hide = true;
                        break;
                    }
                }
            }
            else if (this.type == 258)
            {
                if ((double) this.velocity.Y != 0.0)
                {
                    this.TargetClosest(true);
                    this.spriteDirection = this.direction;
                    if ((double) Main.player[this.target].Center.X < (double) this.position.X &&
                        (double) this.velocity.X > 0.0)
                        this.velocity.X *= 0.95f;
                    else if ((double) Main.player[this.target].Center.X >
                             (double) this.position.X + (double) this.width && (double) this.velocity.X < 0.0)
                        this.velocity.X *= 0.95f;
                    if ((double) Main.player[this.target].Center.X < (double) this.position.X &&
                        (double) this.velocity.X > -5.0)
                        this.velocity.X -= 0.1f;
                    else if ((double) Main.player[this.target].Center.X >
                             (double) this.position.X + (double) this.width && (double) this.velocity.X < 5.0)
                        this.velocity.X += 0.1f;
                }
                else if ((double) Main.player[this.target].Center.Y + 50.0 < (double) this.position.Y &&
                         Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position,
                             Main.player[this.target].width, Main.player[this.target].height))
                    this.velocity.Y = -7f;
            }
            else if (this.type == 425)
            {
                if ((double) this.velocity.Y == 0.0)
                    this.ai[2] = 0.0f;
                if ((double) this.velocity.Y != 0.0 && (double) this.ai[2] == 1.0)
                {
                    this.TargetClosest(true);
                    this.spriteDirection = -this.direction;
                    if (Collision.CanHit(this.Center, 0, 0, Main.player[this.target].Center, 0, 0))
                    {
                        var num1 = Main.player[this.target].Center.X - (float) (this.direction * 400) - this.Center.X;
                        var num2 = Main.player[this.target].Bottom.Y - this.Bottom.Y;
                        if ((double) num1 < 0.0 && (double) this.velocity.X > 0.0)
                            this.velocity.X *= 0.9f;
                        else if ((double) num1 > 0.0 && (double) this.velocity.X < 0.0)
                            this.velocity.X *= 0.9f;
                        if ((double) num1 < 0.0 && (double) this.velocity.X > -5.0)
                            this.velocity.X -= 0.1f;
                        else if ((double) num1 > 0.0 && (double) this.velocity.X < 5.0)
                            this.velocity.X += 0.1f;
                        if ((double) this.velocity.X > 6.0)
                            this.velocity.X = 6f;
                        if ((double) this.velocity.X < -6.0)
                            this.velocity.X = -6f;
                        if ((double) num2 < -20.0 && (double) this.velocity.Y > 0.0)
                            this.velocity.Y *= 0.8f;
                        else if ((double) num2 > 20.0 && (double) this.velocity.Y < 0.0)
                            this.velocity.Y *= 0.8f;
                        if ((double) num2 < -20.0 && (double) this.velocity.Y > -5.0)
                            this.velocity.Y -= 0.3f;
                        else if ((double) num2 > 20.0 && (double) this.velocity.Y < 5.0)
                            this.velocity.Y += 0.3f;
                    }

                    if (Main.rand.Next(3) == 0)
                    {
                        var Position = this.Center + new Vector2((float) (this.direction * -14), -8f) -
                                           Vector2.One * 4f;
                        var vector2 = new Vector2((float) (this.direction * -6), 12f) * 0.2f +
                                          Utils.RandomVector2(Main.rand, -1f, 1f) * 0.1f;
                        var dust = Main.dust[
                            Dust.NewDust(Position, 8, 8, 229, vector2.X, vector2.Y, 100, Color.Transparent,
                                (float) (1.0 + (double) Main.rand.NextFloat() * 0.5))];
                        dust.noGravity = true;
                        dust.velocity = vector2;
                        dust.customData = (object) this;
                    }

                    for (var index = 0; index < 200; ++index)
                    {
                        if (index != this.whoAmI && Main.npc[index].active &&
                            (Main.npc[index].type == this.type &&
                             (double) Math.Abs(this.position.X - Main.npc[index].position.X) +
                             (double) Math.Abs(this.position.Y - Main.npc[index].position.Y) < (double) this.width))
                        {
                            if ((double) this.position.X < (double) Main.npc[index].position.X)
                                this.velocity.X -= 0.05f;
                            else
                                this.velocity.X += 0.05f;
                            if ((double) this.position.Y < (double) Main.npc[index].position.Y)
                                this.velocity.Y -= 0.05f;
                            else
                                this.velocity.Y += 0.05f;
                        }
                    }
                }
                else if ((double) Main.player[this.target].Center.Y + 100.0 < (double) this.position.Y &&
                         Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position,
                             Main.player[this.target].width, Main.player[this.target].height))
                {
                    this.velocity.Y = -5f;
                    this.ai[2] = 1f;
                }

                if (Main.netMode != 1)
                {
                    ++this.localAI[2];
                    if ((double) this.localAI[2] >= (double) (360 + Main.rand.Next(360)) &&
                        (double) this.Distance(Main.player[this.target].Center) < 400.0 &&
                        ((double) Math.Abs(this.DirectionTo(Main.player[this.target].Center).Y) < 0.5 &&
                         Collision.CanHitLine(this.Center, 0, 0, Main.player[this.target].Center, 0, 0)))
                    {
                        this.localAI[2] = 0.0f;
                        var vector2_1 = this.Center + new Vector2((float) (this.direction * 30), 2f);
                        var vec = this.DirectionTo(Main.player[this.target].Center) * 7f;
                        if (vec.HasNaNs())
                            vec = new Vector2((float) (this.direction * 8), 0.0f);
                        var Damage = Main.expertMode ? 50 : 75;
                        for (var index = 0; index < 4; ++index)
                        {
                            var vector2_2 = vec + Utils.RandomVector2(Main.rand, -0.8f, 0.8f);
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_2.X, vector2_2.Y, 577, Damage,
                                1f, Main.myPlayer, 0.0f, 0.0f);
                        }
                    }
                }
            }
            else if (this.type == 427)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    this.ai[2] = 0.0f;
                    this.rotation = 0.0f;
                }
                else
                    this.rotation = this.velocity.X * 0.1f;

                if ((double) this.velocity.Y != 0.0 && (double) this.ai[2] == 1.0)
                {
                    this.TargetClosest(true);
                    this.spriteDirection = -this.direction;
                    if (Collision.CanHit(this.Center, 0, 0, Main.player[this.target].Center, 0, 0))
                    {
                        var num1 = Main.player[this.target].Center.X - this.Center.X;
                        var num2 = Main.player[this.target].Center.Y - this.Center.Y;
                        if ((double) num1 < 0.0 && (double) this.velocity.X > 0.0)
                            this.velocity.X *= 0.98f;
                        else if ((double) num1 > 0.0 && (double) this.velocity.X < 0.0)
                            this.velocity.X *= 0.98f;
                        if ((double) num1 < -20.0 && (double) this.velocity.X > -6.0)
                            this.velocity.X -= 0.015f;
                        else if ((double) num1 > 20.0 && (double) this.velocity.X < 6.0)
                            this.velocity.X += 0.015f;
                        if ((double) this.velocity.X > 6.0)
                            this.velocity.X = 6f;
                        if ((double) this.velocity.X < -6.0)
                            this.velocity.X = -6f;
                        if ((double) num2 < -20.0 && (double) this.velocity.Y > 0.0)
                            this.velocity.Y *= 0.98f;
                        else if ((double) num2 > 20.0 && (double) this.velocity.Y < 0.0)
                            this.velocity.Y *= 0.98f;
                        if ((double) num2 < -20.0 && (double) this.velocity.Y > -6.0)
                            this.velocity.Y -= 0.15f;
                        else if ((double) num2 > 20.0 && (double) this.velocity.Y < 6.0)
                            this.velocity.Y += 0.15f;
                    }

                    for (var index = 0; index < 200; ++index)
                    {
                        if (index != this.whoAmI && Main.npc[index].active &&
                            (Main.npc[index].type == this.type &&
                             (double) Math.Abs(this.position.X - Main.npc[index].position.X) +
                             (double) Math.Abs(this.position.Y - Main.npc[index].position.Y) < (double) this.width))
                        {
                            if ((double) this.position.X < (double) Main.npc[index].position.X)
                                this.velocity.X -= 0.05f;
                            else
                                this.velocity.X += 0.05f;
                            if ((double) this.position.Y < (double) Main.npc[index].position.Y)
                                this.velocity.Y -= 0.05f;
                            else
                                this.velocity.Y += 0.05f;
                        }
                    }
                }
                else if ((double) Main.player[this.target].Center.Y + 100.0 < (double) this.position.Y &&
                         Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position,
                             Main.player[this.target].width, Main.player[this.target].height))
                {
                    this.velocity.Y = -5f;
                    this.ai[2] = 1f;
                }
            }
            else if (this.type == 426)
            {
                if ((double) this.ai[1] > 0.0 && (double) this.velocity.Y > 0.0)
                {
                    this.velocity.Y *= 0.85f;
                    if ((double) this.velocity.Y == 0.0)
                        this.velocity.Y = -0.4f;
                }

                if ((double) this.velocity.Y != 0.0)
                {
                    this.TargetClosest(true);
                    this.spriteDirection = this.direction;
                    if (Collision.CanHit(this.Center, 0, 0, Main.player[this.target].Center, 0, 0))
                    {
                        var num1 = Main.player[this.target].Center.X - (float) (this.direction * 300) - this.Center.X;
                        if ((double) num1 < 40.0 && (double) this.velocity.X > 0.0)
                            this.velocity.X *= 0.98f;
                        else if ((double) num1 > 40.0 && (double) this.velocity.X < 0.0)
                            this.velocity.X *= 0.98f;
                        if ((double) num1 < 40.0 && (double) this.velocity.X > -5.0)
                            this.velocity.X -= 0.2f;
                        else if ((double) num1 > 40.0 && (double) this.velocity.X < 5.0)
                            this.velocity.X += 0.2f;
                        if ((double) this.velocity.X > 6.0)
                            this.velocity.X = 6f;
                        if ((double) this.velocity.X < -6.0)
                            this.velocity.X = -6f;
                    }
                }
                else if ((double) Main.player[this.target].Center.Y + 100.0 < (double) this.position.Y &&
                         Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position,
                             Main.player[this.target].width, Main.player[this.target].height))
                    this.velocity.Y = -6f;

                for (var index = 0; index < 200; ++index)
                {
                    if (index != this.whoAmI && Main.npc[index].active &&
                        (Main.npc[index].type == this.type &&
                         (double) Math.Abs(this.position.X - Main.npc[index].position.X) +
                         (double) Math.Abs(this.position.Y - Main.npc[index].position.Y) < (double) this.width))
                    {
                        if ((double) this.position.X < (double) Main.npc[index].position.X)
                            this.velocity.X -= 0.1f;
                        else
                            this.velocity.X += 0.1f;
                        if ((double) this.position.Y < (double) Main.npc[index].position.Y)
                            this.velocity.Y -= 0.1f;
                        else
                            this.velocity.Y += 0.1f;
                    }
                }

                if (Main.rand.Next(6) == 0 && (double) this.ai[1] <= 20.0)
                {
                    var dust = Main.dust[
                        Dust.NewDust(this.Center + new Vector2(this.spriteDirection == 1 ? 8f : -20f, -20f), 8, 8, 229,
                            this.velocity.X, this.velocity.Y, 100, new Color(), 1f)];
                    dust.velocity = dust.velocity / 4f + this.velocity / 2f;
                    dust.scale = 0.6f;
                    dust.noLight = true;
                }

                if ((double) this.ai[1] >= 57.0)
                {
                    var Type = Utils.SelectRandom<int>(Main.rand, new int[2]
                    {
                        161,
                        229
                    });
                    var dust = Main.dust[
                        Dust.NewDust(this.Center + new Vector2(this.spriteDirection == 1 ? 8f : -20f, -20f), 8, 8, Type,
                            this.velocity.X, this.velocity.Y, 100, new Color(), 1f)];
                    dust.velocity = dust.velocity / 4f + this.DirectionTo(Main.player[this.target].Top);
                    dust.scale = 1.2f;
                    dust.noLight = true;
                }

                if (Main.rand.Next(6) == 0)
                {
                    var dust = Main.dust[Dust.NewDust(this.Center, 2, 2, 229, 0.0f, 0.0f, 0, new Color(), 1f)];
                    dust.position = this.Center + new Vector2(this.spriteDirection == 1 ? 26f : -26f, 24f);
                    dust.velocity.X = 0.0f;
                    if ((double) dust.velocity.Y < 0.0)
                        dust.velocity.Y = 0.0f;
                    dust.noGravity = true;
                    dust.scale = 1f;
                    dust.noLight = true;
                }
            }
            else if (this.type == 185)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    this.rotation = 0.0f;
                    this.localAI[0] = 0.0f;
                }
                else if ((double) this.localAI[0] == 1.0)
                    this.rotation += this.velocity.X * 0.05f;
            }
            else if (this.type == 428)
            {
                if ((double) this.velocity.Y == 0.0)
                    this.rotation = 0.0f;
                else
                    this.rotation += this.velocity.X * 0.08f;
            }

            if (this.type == 159 && Main.netMode != 1)
            {
                var vector2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                    this.position.Y + (float) this.height * 0.5f);
                var num1 = Main.player[this.target].position.X + (float) Main.player[this.target].width * 0.5f -
                             vector2.X;
                var num2 = Main.player[this.target].position.Y + (float) Main.player[this.target].height * 0.5f -
                             vector2.Y;
                if (Math.Sqrt((double) num1 * (double) num1 + (double) num2 * (double) num2) > 300.0)
                    this.Transform(158);
            }

            if (this.type == 164 && Main.netMode != 1 && (double) this.velocity.Y == 0.0)
            {
                var num1 = (int) this.Center.X / 16;
                var num2 = (int) this.Center.Y / 16;
                var flag6 = false;
                for (var index1 = num1 - 1; index1 <= num1 + 1; ++index1)
                {
                    for (var index2 = num2 - 1; index2 <= num2 + 1; ++index2)
                    {
                        if (Main.tile[index1, index2].wall > (byte) 0)
                            flag6 = true;
                    }
                }

                if (flag6)
                    this.Transform(165);
            }

            if (this.type == 239 && Main.netMode != 1 && (double) this.velocity.Y == 0.0)
            {
                var num1 = (int) this.Center.X / 16;
                var num2 = (int) this.Center.Y / 16;
                var flag6 = false;
                for (var index1 = num1 - 1; index1 <= num1 + 1; ++index1)
                {
                    for (var index2 = num2 - 1; index2 <= num2 + 1; ++index2)
                    {
                        if (Main.tile[index1, index2].wall > (byte) 0)
                            flag6 = true;
                    }
                }

                if (flag6)
                    this.Transform(240);
            }

            if (this.type == 530 && Main.netMode != 1 && (double) this.velocity.Y == 0.0)
            {
                var num1 = (int) this.Center.X / 16;
                var num2 = (int) this.Center.Y / 16;
                var flag6 = false;
                for (var index1 = num1 - 1; index1 <= num1 + 1; ++index1)
                {
                    for (var index2 = num2 - 1; index2 <= num2 + 1; ++index2)
                    {
                        if (Main.tile[index1, index2].wall > (byte) 0)
                            flag6 = true;
                    }
                }

                if (flag6)
                    this.Transform(531);
            }

            if (Main.netMode != 1 && Main.expertMode && this.target >= 0 &&
                ((this.type == 163 || this.type == 238) &&
                 Collision.CanHit(this.Center, 1, 1, Main.player[this.target].Center, 1, 1)))
            {
                ++this.localAI[0];
                if (this.justHit)
                {
                    this.localAI[0] -= (float) Main.rand.Next(20, 60);
                    if ((double) this.localAI[0] < 0.0)
                        this.localAI[0] = 0.0f;
                }

                if ((double) this.localAI[0] > (double) Main.rand.Next(180, 900))
                {
                    this.localAI[0] = 0.0f;
                    var vector2 = Main.player[this.target].Center - this.Center;
                    vector2.Normalize();
                    vector2 *= 8f;
                    Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2.X, vector2.Y, 472, 18, 0.0f,
                        Main.myPlayer, 0.0f, 0.0f);
                }
            }

            if (this.type == 163 && Main.netMode != 1 && (double) this.velocity.Y == 0.0)
            {
                var num1 = (int) this.Center.X / 16;
                var num2 = (int) this.Center.Y / 16;
                var flag6 = false;
                for (var index1 = num1 - 1; index1 <= num1 + 1; ++index1)
                {
                    for (var index2 = num2 - 1; index2 <= num2 + 1; ++index2)
                    {
                        if (Main.tile[index1, index2].wall > (byte) 0)
                            flag6 = true;
                    }
                }

                if (flag6)
                    this.Transform(238);
            }

            if (this.type == 236 && Main.netMode != 1 && (double) this.velocity.Y == 0.0)
            {
                var num1 = (int) this.Center.X / 16;
                var num2 = (int) this.Center.Y / 16;
                var flag6 = false;
                for (var index1 = num1 - 1; index1 <= num1 + 1; ++index1)
                {
                    for (var index2 = num2 - 1; index2 <= num2 + 1; ++index2)
                    {
                        if (Main.tile[index1, index2].wall > (byte) 0)
                            flag6 = true;
                    }
                }

                if (flag6)
                    this.Transform(237);
            }

            if (this.type == 243)
            {
                if (this.justHit && Main.rand.Next(3) == 0)
                    this.ai[2] -= (float) Main.rand.Next(30);
                if ((double) this.ai[2] < 0.0)
                    this.ai[2] = 0.0f;
                if (this.confused)
                    this.ai[2] = 0.0f;
                ++this.ai[2];
                var num1 = (float) Main.rand.Next(30, 900) * ((float) this.life / (float) this.lifeMax) + 30f;
                if (Main.netMode != 1 && (double) this.ai[2] >= (double) num1 &&
                    ((double) this.velocity.Y == 0.0 && !Main.player[this.target].dead) &&
                    !Main.player[this.target].frozen &&
                    ((this.direction > 0 && (double) this.Center.X < (double) Main.player[this.target].Center.X ||
                      this.direction < 0 && (double) this.Center.X > (double) Main.player[this.target].Center.X) &&
                     Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position,
                         Main.player[this.target].width, Main.player[this.target].height)))
                {
                    var num2 = 15f;
                    var vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + 20f);
                    vector2.X += (float) (10 * this.direction);
                    var num3 = Main.player[this.target].position.X + (float) Main.player[this.target].width * 0.5f -
                                 vector2.X;
                    var num4 = Main.player[this.target].position.Y + (float) Main.player[this.target].height * 0.5f -
                                 vector2.Y;
                    var num5 = num3 + (float) Main.rand.Next(-40, 41);
                    var num6 = num4 + (float) Main.rand.Next(-40, 41);
                    var num7 = (float) Math.Sqrt((double) num5 * (double) num5 + (double) num6 * (double) num6);
                    this.netUpdate = true;
                    var num8 = num2 / num7;
                    var SpeedX = num5 * num8;
                    var SpeedY = num6 * num8;
                    var Damage = 32;
                    var Type = 257;
                    vector2.X += SpeedX * 3f;
                    vector2.Y += SpeedY * 3f;
                    Projectile.NewProjectile(vector2.X, vector2.Y, SpeedX, SpeedY, Type, Damage, 0.0f, Main.myPlayer,
                        0.0f, 0.0f);
                    this.ai[2] = 0.0f;
                }
            }

            if (this.type == 251)
            {
                if (this.justHit)
                    this.ai[2] -= (float) Main.rand.Next(30);
                if ((double) this.ai[2] < 0.0)
                    this.ai[2] = 0.0f;
                if (this.confused)
                    this.ai[2] = 0.0f;
                ++this.ai[2];
                var num1 = (float) Main.rand.Next(60, 1800) * ((float) this.life / (float) this.lifeMax) + 15f;
                if (Main.netMode != 1 && (double) this.ai[2] >= (double) num1 &&
                    ((double) this.velocity.Y == 0.0 && !Main.player[this.target].dead) &&
                    !Main.player[this.target].frozen &&
                    ((this.direction > 0 && (double) this.Center.X < (double) Main.player[this.target].Center.X ||
                      this.direction < 0 && (double) this.Center.X > (double) Main.player[this.target].Center.X) &&
                     Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position,
                         Main.player[this.target].width, Main.player[this.target].height)))
                {
                    var num2 = 15f;
                    var vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + 12f);
                    vector2.X += (float) (6 * this.direction);
                    var num3 = Main.player[this.target].position.X + (float) Main.player[this.target].width * 0.5f -
                                 vector2.X;
                    var num4 = Main.player[this.target].position.Y + (float) Main.player[this.target].height * 0.5f -
                                 vector2.Y;
                    var num5 = num3 + (float) Main.rand.Next(-40, 41);
                    var num6 = num4 + (float) Main.rand.Next(-30, 0);
                    var num7 = (float) Math.Sqrt((double) num5 * (double) num5 + (double) num6 * (double) num6);
                    this.netUpdate = true;
                    var num8 = num2 / num7;
                    var SpeedX = num5 * num8;
                    var SpeedY = num6 * num8;
                    var Damage = 30;
                    var Type = 83;
                    vector2.X += SpeedX * 3f;
                    vector2.Y += SpeedY * 3f;
                    Projectile.NewProjectile(vector2.X, vector2.Y, SpeedX, SpeedY, Type, Damage, 0.0f, Main.myPlayer,
                        0.0f, 0.0f);
                    this.ai[2] = 0.0f;
                }
            }

            if (this.type == 386)
            {
                if (this.confused)
                {
                    this.ai[2] = -60f;
                }
                else
                {
                    if ((double) this.ai[2] < 60.0)
                        ++this.ai[2];
                    if ((double) this.ai[2] > 0.0 && NPC.CountNPCS(387) >= 4 * NPC.CountNPCS(386))
                        this.ai[2] = 0.0f;
                    if (this.justHit)
                        this.ai[2] = -30f;
                    if ((double) this.ai[2] == 30.0)
                    {
                        var num1 = (int) this.position.X / 16;
                        var num2 = (int) this.position.Y / 16;
                        var num3 = (int) this.position.X / 16;
                        var num4 = (int) this.position.Y / 16;
                        var num5 = 5;
                        var num6 = 0;
                        var flag6 = false;
                        var num7 = 2;
                        var num8 = 0;
                        while (!flag6 && num6 < 100)
                        {
                            ++num6;
                            var index1 = Main.rand.Next(num1 - num5, num1 + num5);
                            for (var index2 = Main.rand.Next(num2 - num5, num2 + num5); index2 < num2 + num5; ++index2)
                            {
                                if ((index2 < num2 - num7 || index2 > num2 + num7 ||
                                     (index1 < num1 - num7 || index1 > num1 + num7)) &&
                                    (index2 < num4 - num8 || index2 > num4 + num8 ||
                                     (index1 < num3 - num8 || index1 > num3 + num8)) &&
                                    Main.tile[index1, index2].nactive())
                                {
                                    var flag7 = true;
                                    if (Main.tile[index1, index2 - 1].lava())
                                        flag7 = false;
                                    if (flag7 && Main.tileSolid[(int) Main.tile[index1, index2].type] &&
                                        !Collision.SolidTiles(index1 - 1, index1 + 1, index2 - 4, index2 - 1))
                                    {
                                        var index3 = NPC.NewNPC(index1 * 16 - this.width / 2, index2 * 16, 387, 0, 0.0f,
                                            0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
                                        Main.npc[index3].position.Y = (float) (index2 * 16 - Main.npc[index3].height);
                                        flag6 = true;
                                        this.netUpdate = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    if ((double) this.ai[2] == 60.0)
                        this.ai[2] = -120f;
                }
            }

            if (this.type == 389)
            {
                if (this.confused)
                {
                    this.ai[2] = -60f;
                }
                else
                {
                    if ((double) this.ai[2] < 20.0)
                        ++this.ai[2];
                    if (this.justHit)
                        this.ai[2] = -30f;
                    if ((double) this.ai[2] == 20.0 && Main.netMode != 1)
                    {
                        this.ai[2] = (float) (Main.rand.Next(3) * -10 - 10);
                        Projectile.NewProjectile(this.Center.X, this.Center.Y + 8f, (float) (this.direction * 6), 0.0f,
                            437, 25, 1f, Main.myPlayer, 0.0f, 0.0f);
                    }
                }
            }

            if (this.type == 110 || this.type == 111 || (this.type == 206 || this.type == 214) ||
                (this.type == 215 || this.type == 216 || (this.type == 290 || this.type == 291)) ||
                (this.type == 292 || this.type == 293 || (this.type == 350 || this.type == 379) ||
                 (this.type == 380 || this.type == 381 || this.type == 382)) || (this.type >= 449 && this.type <= 452 ||
                                                                                 (this.type == 468 ||
                                                                                  this.type == 481) ||
                                                                                 (this.type == 411 ||
                                                                                  this.type == 409 ||
                                                                                  this.type >= 498 && this.type <= 506
                                                                                 ) || (this.type == 424 ||
                                                                                       this.type == 426 ||
                                                                                       this.type == 520)))
            {
                var flag6 = this.type == 381 || this.type == 382 || this.type == 520;
                var flag7 = this.type == 426;
                var flag8 = true;
                var num1 = -1;
                var num2 = -1;
                if (this.type == 411)
                {
                    flag6 = true;
                    num1 = 90;
                    num2 = 90;
                    if ((double) this.ai[1] <= 150.0)
                        flag8 = false;
                }

                if (this.confused)
                {
                    this.ai[2] = 0.0f;
                }
                else
                {
                    if ((double) this.ai[1] > 0.0)
                        --this.ai[1];
                    if (this.justHit)
                    {
                        this.ai[1] = 30f;
                        this.ai[2] = 0.0f;
                    }

                    var num3 = 70;
                    if (this.type == 379 || this.type == 380)
                        num3 = 80;
                    if (this.type == 381 || this.type == 382)
                        num3 = 80;
                    if (this.type == 520)
                        num3 = 15;
                    if (this.type == 350)
                        num3 = 110;
                    if (this.type == 291)
                        num3 = 200;
                    if (this.type == 292)
                        num3 = 120;
                    if (this.type == 293)
                        num3 = 90;
                    if (this.type == 111)
                        num3 = 180;
                    if (this.type == 206)
                        num3 = 50;
                    if (this.type == 481)
                        num3 = 100;
                    if (this.type == 214)
                        num3 = 40;
                    if (this.type == 215)
                        num3 = 80;
                    if (this.type == 290)
                        num3 = 30;
                    if (this.type == 411)
                        num3 = 300;
                    if (this.type == 409)
                        num3 = 60;
                    if (this.type == 424)
                        num3 = 180;
                    if (this.type == 426)
                        num3 = 60;
                    var flag9 = false;
                    if (this.type == 216)
                    {
                        if ((double) this.localAI[2] >= 20.0)
                            flag9 = true;
                        num3 = !flag9 ? 8 : 60;
                    }

                    var num4 = num3 / 2;
                    if (this.type == 424)
                        num4 = num3 - 1;
                    if (this.type == 426)
                        num4 = num3 - 1;
                    if ((double) this.ai[2] > 0.0)
                    {
                        if (flag8)
                            this.TargetClosest(true);
                        if ((double) this.ai[1] == (double) num4)
                        {
                            if (this.type == 216)
                                ++this.localAI[2];
                            var num5 = 11f;
                            if (this.type == 111)
                                num5 = 9f;
                            if (this.type == 206)
                                num5 = 7f;
                            if (this.type == 290)
                                num5 = 9f;
                            if (this.type == 293)
                                num5 = 4f;
                            if (this.type == 214)
                                num5 = 14f;
                            if (this.type == 215)
                                num5 = 16f;
                            if (this.type == 382)
                                num5 = 7f;
                            if (this.type == 520)
                                num5 = 8f;
                            if (this.type == 409)
                                num5 = 4f;
                            if (this.type >= 449 && this.type <= 452)
                                num5 = 7f;
                            if (this.type == 481)
                                num5 = 8f;
                            if (this.type == 468)
                                num5 = 7.5f;
                            if (this.type == 411)
                                num5 = 1f;
                            if (this.type >= 498 && this.type <= 506)
                                num5 = 7f;
                            var vector2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                                this.position.Y + (float) this.height * 0.5f);
                            if (this.type == 481)
                                vector2.Y -= 14f;
                            if (this.type == 206)
                                vector2.Y -= 10f;
                            if (this.type == 290)
                                vector2.Y -= 10f;
                            if (this.type == 381 || this.type == 382)
                                vector2.Y += 6f;
                            if (this.type == 520)
                                vector2.Y = this.position.Y + 20f;
                            if (this.type >= 498 && this.type <= 506)
                                vector2.Y -= 8f;
                            if (this.type == 426)
                                vector2 += new Vector2((float) (this.spriteDirection * 2), -12f);
                            var num6 = Main.player[this.target].position.X +
                                         (float) Main.player[this.target].width * 0.5f - vector2.X;
                            var num7 = Math.Abs(num6) * 0.1f;
                            if (this.type == 291 || this.type == 292)
                                num7 = 0.0f;
                            if (this.type == 215)
                                num7 = Math.Abs(num6) * 0.08f;
                            if (this.type == 214 || this.type == 216 && !flag9)
                                num7 = 0.0f;
                            if (this.type == 381 || this.type == 382 || this.type == 520)
                                num7 = 0.0f;
                            if (this.type >= 449 && this.type <= 452)
                                num7 = (float) ((double) Math.Abs(num6) * (double) Main.rand.Next(10, 50) *
                                                0.00999999977648258);
                            if (this.type == 468)
                                num7 = (float) ((double) Math.Abs(num6) * (double) Main.rand.Next(10, 50) *
                                                0.00999999977648258);
                            if (this.type == 481)
                                num7 = (float) ((double) Math.Abs(num6) * (double) Main.rand.Next(-10, 11) *
                                                0.00350000010803342);
                            if (this.type >= 498 && this.type <= 506)
                                num7 = (float) ((double) Math.Abs(num6) * (double) Main.rand.Next(1, 11) *
                                                (1.0 / 400.0));
                            var num8 = Main.player[this.target].position.Y +
                                         (float) Main.player[this.target].height * 0.5f - vector2.Y - num7;
                            if (this.type == 291)
                            {
                                num6 += (float) Main.rand.Next(-40, 41) * 0.2f;
                                num8 += (float) Main.rand.Next(-40, 41) * 0.2f;
                            }
                            else if (this.type == 381 || this.type == 382 || this.type == 520)
                            {
                                var num9 = num6 + (float) Main.rand.Next(-100, 101) * 0.4f;
                                var num11 = num8 + (float) Main.rand.Next(-100, 101) * 0.4f;
                                num6 = num9 * ((float) Main.rand.Next(85, 116) * 0.01f);
                                num8 = num11 * ((float) Main.rand.Next(85, 116) * 0.01f);
                                if (this.type == 520)
                                {
                                    var num12 = num6 + (float) Main.rand.Next(-100, 101) * 0.6f;
                                    var num13 = num8 + (float) Main.rand.Next(-100, 101) * 0.6f;
                                    num6 = num12 * ((float) Main.rand.Next(85, 116) * 0.015f);
                                    num8 = num13 * ((float) Main.rand.Next(85, 116) * 0.015f);
                                }
                            }
                            else if (this.type == 481)
                            {
                                num6 += (float) Main.rand.Next(-40, 41) * 0.4f;
                                num8 += (float) Main.rand.Next(-40, 41) * 0.4f;
                            }
                            else if (this.type >= 498 && this.type <= 506)
                            {
                                num6 += (float) Main.rand.Next(-40, 41) * 0.3f;
                                num8 += (float) Main.rand.Next(-40, 41) * 0.3f;
                            }
                            else if (this.type != 292)
                            {
                                num6 += (float) Main.rand.Next(-40, 41);
                                num8 += (float) Main.rand.Next(-40, 41);
                            }

                            var num14 =
                                (float) Math.Sqrt((double) num6 * (double) num6 + (double) num8 * (double) num8);
                            this.netUpdate = true;
                            var num15 = num5 / num14;
                            var num16 = num6 * num15;
                            var SpeedY = num8 * num15;
                            var Damage = 35;
                            var Type = 82;
                            if (this.type == 111)
                                Damage = 11;
                            if (this.type == 206)
                                Damage = 37;
                            if (this.type == 379 || this.type == 380)
                                Damage = 40;
                            if (this.type == 350)
                                Damage = 45;
                            if (this.type == 468)
                                Damage = 50;
                            if (this.type == 111)
                                Type = 81;
                            if (this.type == 379 || this.type == 380)
                                Type = 81;
                            if (this.type == 381)
                            {
                                Type = 436;
                                Damage = 24;
                            }

                            if (this.type == 382)
                            {
                                Type = 438;
                                Damage = 30;
                            }

                            if (this.type == 520)
                            {
                                Type = 592;
                                Damage = 35;
                            }

                            if (this.type >= 449 && this.type <= 452)
                            {
                                Type = 471;
                                Damage = 20;
                            }

                            if (this.type >= 498 && this.type <= 506)
                            {
                                Type = 572;
                                Damage = 14;
                            }

                            if (this.type == 481)
                            {
                                Type = 508;
                                Damage = 18;
                            }

                            if (this.type == 206)
                                Type = 177;
                            if (this.type == 468)
                                Type = 501;
                            if (this.type == 411)
                            {
                                Type = 537;
                                Damage = Main.expertMode ? 45 : 60;
                            }

                            if (this.type == 424)
                            {
                                Type = 573;
                                Damage = Main.expertMode ? 45 : 60;
                            }

                            if (this.type == 426)
                            {
                                Type = 581;
                                Damage = Main.expertMode ? 45 : 60;
                            }

                            if (this.type == 291)
                            {
                                Type = 302;
                                Damage = 100;
                            }

                            if (this.type == 290)
                            {
                                Type = 300;
                                Damage = 60;
                            }

                            if (this.type == 293)
                            {
                                Type = 303;
                                Damage = 60;
                            }

                            if (this.type == 214)
                            {
                                Type = 180;
                                Damage = 25;
                            }

                            if (this.type == 215)
                            {
                                Type = 82;
                                Damage = 40;
                            }

                            if (this.type == 292)
                            {
                                Damage = 50;
                                Type = 180;
                            }

                            if (this.type == 216)
                            {
                                Type = 180;
                                Damage = 30;
                                if (flag9)
                                {
                                    Damage = 100;
                                    Type = 240;
                                    this.localAI[2] = 0.0f;
                                }
                            }

                            vector2.X += num16;
                            vector2.Y += SpeedY;
                            if (Main.expertMode && this.type == 290)
                                Damage = (int) ((double) Damage * 0.75);
                            if (Main.expertMode && this.type >= 381 && this.type <= 392)
                                Damage = (int) ((double) Damage * 0.8);
                            if (Main.netMode != 1)
                            {
                                if (this.type == 292)
                                {
                                    for (var index = 0; index < 4; ++index)
                                    {
                                        var num9 = Main.player[this.target].position.X +
                                                     (float) Main.player[this.target].width * 0.5f - vector2.X;
                                        var num11 = Main.player[this.target].position.Y +
                                                      (float) Main.player[this.target].height * 0.5f - vector2.Y;
                                        var num12 =
                                            12f / (float) Math.Sqrt(
                                                (double) num9 * (double) num9 + (double) num11 * (double) num11);
                                        float num13;
                                        var num17 = num13 = num9 + (float) Main.rand.Next(-40, 41);
                                        float num18;
                                        var num19 = num18 = num11 + (float) Main.rand.Next(-40, 41);
                                        num16 = num17 * num12;
                                        SpeedY = num19 * num12;
                                        Projectile.NewProjectile(vector2.X, vector2.Y, num16, SpeedY, Type, Damage,
                                            0.0f, Main.myPlayer, 0.0f, 0.0f);
                                    }
                                }
                                else if (this.type == 411)
                                    Projectile.NewProjectile(vector2.X, vector2.Y, num16, SpeedY, Type, Damage, 0.0f,
                                        Main.myPlayer, 0.0f, (float) this.whoAmI);
                                else if (this.type == 424)
                                {
                                    for (var index = 0; index < 4; ++index)
                                        Projectile.NewProjectile(this.Center.X - (float) (this.spriteDirection * 4),
                                            this.Center.Y + 6f, (float) (2 * index - 3) * 0.15f,
                                            (float) ((double) -Main.rand.Next(0, 3) * 0.200000002980232 -
                                                     0.100000001490116), Type, Damage, 0.0f, Main.myPlayer, 0.0f,
                                            (float) this.whoAmI);
                                }
                                else if (this.type == 409)
                                {
                                    var index = NPC.NewNPC((int) this.Center.X, (int) this.Center.Y, 410, this.whoAmI,
                                        0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
                                    Main.npc[index].velocity = new Vector2(num16, SpeedY - 6f);
                                }
                                else
                                    Projectile.NewProjectile(vector2.X, vector2.Y, num16, SpeedY, Type, Damage, 0.0f,
                                        Main.myPlayer, 0.0f, 0.0f);
                            }

                            this.ai[2] = (double) Math.Abs(SpeedY) <= (double) Math.Abs(num16) * 2.0
                                ? ((double) Math.Abs(num16) <= (double) Math.Abs(SpeedY) * 2.0
                                    ? ((double) SpeedY <= 0.0 ? 4f : 2f)
                                    : 3f)
                                : ((double) SpeedY <= 0.0 ? 5f : 1f);
                        }

                        if ((double) this.velocity.Y != 0.0 && !flag7 || (double) this.ai[1] <= 0.0)
                        {
                            this.ai[2] = 0.0f;
                            this.ai[1] = 0.0f;
                        }
                        else if (!flag6 || num1 != -1 && (double) this.ai[1] >= (double) num1 &&
                                 (double) this.ai[1] < (double) (num1 + num2) &&
                                 (!flag7 || (double) this.velocity.Y == 0.0))
                        {
                            this.velocity.X *= 0.9f;
                            this.spriteDirection = this.direction;
                        }
                    }

                    if (this.type == 468 && !Main.eclipse)
                        flag6 = true;
                    else if (((double) this.ai[2] <= 0.0 || flag6) && ((double) this.velocity.Y == 0.0 || flag7) &&
                             ((double) this.ai[1] <= 0.0 && !Main.player[this.target].dead))
                    {
                        var flag10 = Collision.CanHit(this.position, this.width, this.height,
                            Main.player[this.target].position, Main.player[this.target].width,
                            Main.player[this.target].height);
                        if (this.type == 520)
                            flag10 = Collision.CanHitLine(this.Top + new Vector2(0.0f, 20f), 0, 0,
                                Main.player[this.target].position, Main.player[this.target].width,
                                Main.player[this.target].height);
                        if ((double) Main.player[this.target].stealth == 0.0 &&
                            Main.player[this.target].itemAnimation == 0)
                            flag10 = false;
                        if (flag10)
                        {
                            var num5 = 10f;
                            var vector2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                                this.position.Y + (float) this.height * 0.5f);
                            var num6 = Main.player[this.target].position.X +
                                         (float) Main.player[this.target].width * 0.5f - vector2.X;
                            var num7 = Math.Abs(num6) * 0.1f;
                            var num8 = Main.player[this.target].position.Y +
                                         (float) Main.player[this.target].height * 0.5f - vector2.Y - num7;
                            var num9 = num6 + (float) Main.rand.Next(-40, 41);
                            var num11 = num8 + (float) Main.rand.Next(-40, 41);
                            var num12 =
                                (float) Math.Sqrt((double) num9 * (double) num9 + (double) num11 * (double) num11);
                            var num13 = 700f;
                            if (this.type == 214)
                                num13 = 550f;
                            if (this.type == 215)
                                num13 = 800f;
                            if (this.type >= 498 && this.type <= 506)
                                num13 = 190f;
                            if (this.type >= 449 && this.type <= 452)
                                num13 = 200f;
                            if (this.type == 481)
                                num13 = 400f;
                            if (this.type == 468)
                                num13 = 400f;
                            if ((double) num12 < (double) num13)
                            {
                                this.netUpdate = true;
                                this.velocity.X *= 0.5f;
                                var num14 = num5 / num12;
                                var num15 = num9 * num14;
                                var num16 = num11 * num14;
                                this.ai[2] = 3f;
                                this.ai[1] = (float) num3;
                                this.ai[2] = (double) Math.Abs(num16) <= (double) Math.Abs(num15) * 2.0
                                    ? ((double) Math.Abs(num15) <= (double) Math.Abs(num16) * 2.0
                                        ? ((double) num16 <= 0.0 ? 4f : 2f)
                                        : 3f)
                                    : ((double) num16 <= 0.0 ? 5f : 1f);
                            }
                        }
                    }

                    if ((double) this.ai[2] <= 0.0 || flag6 &&
                        (num1 == -1 || (double) this.ai[1] < (double) num1 ||
                         (double) this.ai[1] >= (double) (num1 + num2)))
                    {
                        var num5 = 1f;
                        var num6 = 0.07f;
                        var num7 = 0.8f;
                        if (this.type == 214)
                        {
                            num5 = 2f;
                            num6 = 0.09f;
                        }
                        else if (this.type == 215)
                        {
                            num5 = 1.5f;
                            num6 = 0.08f;
                        }
                        else if (this.type == 381 || this.type == 382)
                        {
                            num5 = 2f;
                            num6 = 0.5f;
                        }
                        else if (this.type == 520)
                        {
                            num5 = 4f;
                            num6 = 1f;
                            num7 = 0.7f;
                        }
                        else if (this.type == 411)
                        {
                            num5 = 2f;
                            num6 = 0.5f;
                        }
                        else if (this.type == 409)
                        {
                            num5 = 2f;
                            num6 = 0.5f;
                        }

                        var flag10 = false;
                        if ((this.type == 381 || this.type == 382) &&
                            ((double) Vector2.Distance(this.Center, Main.player[this.target].Center) < 300.0 &&
                             Collision.CanHitLine(this.Center, 0, 0, Main.player[this.target].Center, 0, 0)))
                        {
                            flag10 = true;
                            this.ai[3] = 0.0f;
                        }

                        if (this.type == 520 &&
                            (double) Vector2.Distance(this.Center, Main.player[this.target].Center) < 400.0 &&
                            Collision.CanHitLine(this.Center, 0, 0, Main.player[this.target].Center, 0, 0))
                        {
                            flag10 = true;
                            this.ai[3] = 0.0f;
                        }

                        if ((double) this.velocity.X < -(double) num5 || (double) this.velocity.X > (double) num5 ||
                            flag10)
                        {
                            if ((double) this.velocity.Y == 0.0)
                            {
                                var npc = this;
                                npc.velocity = npc.velocity * num7;
                            }
                        }
                        else if ((double) this.velocity.X < (double) num5 && this.direction == 1)
                        {
                            this.velocity.X += num6;
                            if ((double) this.velocity.X > (double) num5)
                                this.velocity.X = num5;
                        }
                        else if ((double) this.velocity.X > -(double) num5 && this.direction == -1)
                        {
                            this.velocity.X -= num6;
                            if ((double) this.velocity.X < -(double) num5)
                                this.velocity.X = -num5;
                        }
                    }

                    if (this.type == 520)
                    {
                        ++this.localAI[2];
                        if ((double) this.localAI[2] >= 6.0)
                        {
                            this.localAI[2] = 0.0f;
                            this.localAI[3] = Main.player[this.target].DirectionFrom(this.Top + new Vector2(0.0f, 20f))
                                .ToRotation();
                        }
                    }
                }
            }

            if (this.type == 109 && Main.netMode != 1 && !Main.player[this.target].dead)
            {
                if (this.justHit)
                    this.ai[2] = 0.0f;
                ++this.ai[2];
                if ((double) this.ai[2] > 450.0)
                {
                    var vector2 =
                        new Vector2(this.position.X + (float) this.width * 0.5f - (float) (this.direction * 24),
                            this.position.Y + 4f);
                    var num1 = 3 * this.direction;
                    var num2 = -5;
                    var index = Projectile.NewProjectile(vector2.X, vector2.Y, (float) num1, (float) num2, 75, 0, 0.0f,
                        Main.myPlayer, 0.0f, 0.0f);
                    Main.projectile[index].timeLeft = 300;
                    this.ai[2] = 0.0f;
                }
            }

            var flag11 = false;
            if ((double) this.velocity.Y == 0.0)
            {
                var index1 = (int) ((double) this.position.Y + (double) this.height + 7.0) / 16;
                var num1 = (int) this.position.X / 16;
                var num2 = (int) ((double) this.position.X + (double) this.width) / 16;
                for (var index2 = num1; index2 <= num2; ++index2)
                {
                    if (Main.tile[index2, index1] == null)
                        return;
                    if (Main.tile[index2, index1].nactive() && Main.tileSolid[(int) Main.tile[index2, index1].type])
                    {
                        flag11 = true;
                        break;
                    }
                }
            }

            if (this.type == 428)
                flag11 = false;
            if ((double) this.velocity.Y >= 0.0)
            {
                var num1 = 0;
                if ((double) this.velocity.X < 0.0)
                    num1 = -1;
                if ((double) this.velocity.X > 0.0)
                    num1 = 1;
                var position = this.position;
                position.X += this.velocity.X;
                var index1 = (int) (((double) position.X + (double) (this.width / 2) +
                                     (double) ((this.width / 2 + 1) * num1)) / 16.0);
                var index2 = (int) (((double) position.Y + (double) this.height - 1.0) / 16.0);
                if (Main.tile[index1, index2] == null)
                    Main.tile[index1, index2] = new Tile();
                if (Main.tile[index1, index2 - 1] == null)
                    Main.tile[index1, index2 - 1] = new Tile();
                if (Main.tile[index1, index2 - 2] == null)
                    Main.tile[index1, index2 - 2] = new Tile();
                if (Main.tile[index1, index2 - 3] == null)
                    Main.tile[index1, index2 - 3] = new Tile();
                if (Main.tile[index1, index2 + 1] == null)
                    Main.tile[index1, index2 + 1] = new Tile();
                if (Main.tile[index1 - num1, index2 - 3] == null)
                    Main.tile[index1 - num1, index2 - 3] = new Tile();
                if ((double) (index1 * 16) < (double) position.X + (double) this.width &&
                    (double) (index1 * 16 + 16) > (double) position.X &&
                    (Main.tile[index1, index2].nactive() && !Main.tile[index1, index2].topSlope() &&
                     (!Main.tile[index1, index2 - 1].topSlope() &&
                      Main.tileSolid[(int) Main.tile[index1, index2].type]) &&
                     !Main.tileSolidTop[(int) Main.tile[index1, index2].type] ||
                     Main.tile[index1, index2 - 1].halfBrick() && Main.tile[index1, index2 - 1].nactive()) &&
                    ((!Main.tile[index1, index2 - 1].nactive() ||
                      !Main.tileSolid[(int) Main.tile[index1, index2 - 1].type] ||
                      Main.tileSolidTop[(int) Main.tile[index1, index2 - 1].type] ||
                      Main.tile[index1, index2 - 1].halfBrick() &&
                      (!Main.tile[index1, index2 - 4].nactive() ||
                       !Main.tileSolid[(int) Main.tile[index1, index2 - 4].type] ||
                       Main.tileSolidTop[(int) Main.tile[index1, index2 - 4].type])) &&
                     ((!Main.tile[index1, index2 - 2].nactive() ||
                       !Main.tileSolid[(int) Main.tile[index1, index2 - 2].type] ||
                       Main.tileSolidTop[(int) Main.tile[index1, index2 - 2].type]) &&
                      (!Main.tile[index1, index2 - 3].nactive() ||
                       !Main.tileSolid[(int) Main.tile[index1, index2 - 3].type] ||
                       Main.tileSolidTop[(int) Main.tile[index1, index2 - 3].type]) &&
                      (!Main.tile[index1 - num1, index2 - 3].nactive() ||
                       !Main.tileSolid[(int) Main.tile[index1 - num1, index2 - 3].type]))))
                {
                    var num2 = (float) (index2 * 16);
                    if (Main.tile[index1, index2].halfBrick())
                        num2 += 8f;
                    if (Main.tile[index1, index2 - 1].halfBrick())
                        num2 -= 8f;
                    if ((double) num2 < (double) position.Y + (double) this.height)
                    {
                        var num3 = position.Y + (float) this.height - num2;
                        var num4 = 16.1f;
                        if (this.type == 163 || this.type == 164 || (this.type == 236 || this.type == 239) ||
                            this.type == 530)
                            num4 += 8f;
                        if ((double) num3 <= (double) num4)
                        {
                            this.gfxOffY += this.position.Y + (float) this.height - num2;
                            this.position.Y = num2 - (float) this.height;
                            this.stepSpeed = (double) num3 >= 9.0 ? 2f : 1f;
                        }
                    }
                }
            }

            if (flag11)
            {
                var index1 =
                    (int) (((double) this.position.X + (double) (this.width / 2) + (double) (15 * this.direction)) /
                           16.0);
                var index2 = (int) (((double) this.position.Y + (double) this.height - 15.0) / 16.0);
                if (this.type == 109 || this.type == 163 || (this.type == 164 || this.type == 199) ||
                    (this.type == 236 || this.type == 239 || (this.type == 257 || this.type == 258)) ||
                    (this.type == 290 || this.type == 391 || (this.type == 425 || this.type == 427) ||
                     (this.type == 426 || this.type == 508 || (this.type == 415 || this.type == 530))) ||
                    this.type == 532)
                    index1 = (int) (((double) this.position.X + (double) (this.width / 2) +
                                     (double) ((this.width / 2 + 16) * this.direction)) / 16.0);
                if (Main.tile[index1, index2] == null)
                    Main.tile[index1, index2] = new Tile();
                if (Main.tile[index1, index2 - 1] == null)
                    Main.tile[index1, index2 - 1] = new Tile();
                if (Main.tile[index1, index2 - 2] == null)
                    Main.tile[index1, index2 - 2] = new Tile();
                if (Main.tile[index1, index2 - 3] == null)
                    Main.tile[index1, index2 - 3] = new Tile();
                if (Main.tile[index1, index2 + 1] == null)
                    Main.tile[index1, index2 + 1] = new Tile();
                if (Main.tile[index1 + this.direction, index2 - 1] == null)
                    Main.tile[index1 + this.direction, index2 - 1] = new Tile();
                if (Main.tile[index1 + this.direction, index2 + 1] == null)
                    Main.tile[index1 + this.direction, index2 + 1] = new Tile();
                if (Main.tile[index1 - this.direction, index2 + 1] == null)
                    Main.tile[index1 - this.direction, index2 + 1] = new Tile();
                Main.tile[index1, index2 + 1].halfBrick();
                if (Main.tile[index1, index2 - 1].nactive() &&
                    (Main.tile[index1, index2 - 1].type == (ushort) 10 ||
                     Main.tile[index1, index2 - 1].type == (ushort) 388) && flag3)
                {
                    ++this.ai[2];
                    this.ai[3] = 0.0f;
                    if ((double) this.ai[2] >= 60.0)
                    {
                        if (!Main.bloodMoon && (this.type == 3 || this.type == 331 ||
                                                (this.type == 332 || this.type == 132) ||
                                                (this.type == 161 || this.type == 186 ||
                                                 (this.type == 187 || this.type == 188)) ||
                                                (this.type == 189 || this.type == 200 ||
                                                 (this.type == 223 || this.type == 320) ||
                                                 (this.type == 321 || this.type == 319))))
                            this.ai[1] = 0.0f;
                        this.velocity.X = 0.5f * (float) -this.direction;
                        var num1 = 5;
                        if (Main.tile[index1, index2 - 1].type == (ushort) 388)
                            num1 = 2;
                        this.ai[1] += (float) num1;
                        if (this.type == 27)
                            ++this.ai[1];
                        if (this.type == 31 || this.type == 294 || (this.type == 295 || this.type == 296))
                            this.ai[1] += 6f;
                        this.ai[2] = 0.0f;
                        var flag6 = false;
                        if ((double) this.ai[1] >= 10.0)
                        {
                            flag6 = true;
                            this.ai[1] = 10f;
                        }

                        if (this.type == 460)
                            flag6 = true;
                        WorldGen.KillTile(index1, index2 - 1, true, false, false);
                        if ((Main.netMode != 1 || !flag6) && (flag6 && Main.netMode != 1))
                        {
                            if (this.type == 26)
                            {
                                WorldGen.KillTile(index1, index2 - 1, false, false, false);
                                if (Main.netMode == 2)
                                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) index1,
                                        (float) (index2 - 1), 0.0f, 0, 0, 0);
                            }
                            else
                            {
                                if (Main.tile[index1, index2 - 1].type == (ushort) 10)
                                {
                                    var flag7 = WorldGen.OpenDoor(index1, index2 - 1, this.direction);
                                    if (!flag7)
                                    {
                                        this.ai[3] = (float) num10;
                                        this.netUpdate = true;
                                    }

                                    if (Main.netMode == 2 && flag7)
                                        NetMessage.SendData(19, -1, -1, (NetworkText) null, 0, (float) index1,
                                            (float) (index2 - 1), (float) this.direction, 0, 0, 0);
                                }

                                if (Main.tile[index1, index2 - 1].type == (ushort) 388)
                                {
                                    var flag7 = WorldGen.ShiftTallGate(index1, index2 - 1, false);
                                    if (!flag7)
                                    {
                                        this.ai[3] = (float) num10;
                                        this.netUpdate = true;
                                    }

                                    if (Main.netMode == 2 && flag7)
                                        NetMessage.SendData(19, -1, -1, (NetworkText) null, 4, (float) index1,
                                            (float) (index2 - 1), 0.0f, 0, 0, 0);
                                }
                            }
                        }
                    }
                }
                else
                {
                    var spriteDirection = this.spriteDirection;
                    if (this.type == 425)
                        spriteDirection *= -1;
                    if ((double) this.velocity.X < 0.0 && spriteDirection == -1 ||
                        (double) this.velocity.X > 0.0 && spriteDirection == 1)
                    {
                        if (this.height >= 32 && Main.tile[index1, index2 - 2].nactive() &&
                            Main.tileSolid[(int) Main.tile[index1, index2 - 2].type])
                        {
                            if (Main.tile[index1, index2 - 3].nactive() &&
                                Main.tileSolid[(int) Main.tile[index1, index2 - 3].type])
                            {
                                this.velocity.Y = -8f;
                                this.netUpdate = true;
                            }
                            else
                            {
                                this.velocity.Y = -7f;
                                this.netUpdate = true;
                            }
                        }
                        else if (Main.tile[index1, index2 - 1].nactive() &&
                                 Main.tileSolid[(int) Main.tile[index1, index2 - 1].type])
                        {
                            this.velocity.Y = -6f;
                            this.netUpdate = true;
                        }
                        else if ((double) this.position.Y + (double) this.height - (double) (index2 * 16) > 20.0 &&
                                 Main.tile[index1, index2].nactive() &&
                                 (!Main.tile[index1, index2].topSlope() &&
                                  Main.tileSolid[(int) Main.tile[index1, index2].type]))
                        {
                            this.velocity.Y = -5f;
                            this.netUpdate = true;
                        }
                        else if (this.directionY < 0 && this.type != 67 &&
                                 (!Main.tile[index1, index2 + 1].nactive() ||
                                  !Main.tileSolid[(int) Main.tile[index1, index2 + 1].type]) &&
                                 (!Main.tile[index1 + this.direction, index2 + 1].nactive() ||
                                  !Main.tileSolid[(int) Main.tile[index1 + this.direction, index2 + 1].type]))
                        {
                            this.velocity.Y = -8f;
                            this.velocity.X *= 1.5f;
                            this.netUpdate = true;
                        }
                        else if (flag3)
                        {
                            this.ai[1] = 0.0f;
                            this.ai[2] = 0.0f;
                        }

                        if ((double) this.velocity.Y == 0.0 && flag1 && (double) this.ai[3] == 1.0)
                            this.velocity.Y = -5f;
                    }

                    if ((this.type == 31 || this.type == 294 || (this.type == 295 || this.type == 296) ||
                         (this.type == 47 || this.type == 77 || (this.type == 104 || this.type == 168)) ||
                         (this.type == 196 || this.type == 385 || (this.type == 389 || this.type == 464) ||
                          (this.type == 470 || this.type >= 524 && this.type <= 527))) &&
                        ((double) this.velocity.Y == 0.0 &&
                         (double) Math.Abs((float) ((double) this.position.X + (double) (this.width / 2) -
                                                    ((double) Main.player[this.target].position.X +
                                                     (double) (Main.player[this.target].width / 2)))) < 100.0 &&
                         (double) Math.Abs((float) ((double) this.position.Y + (double) (this.height / 2) -
                                                    ((double) Main.player[this.target].position.Y +
                                                     (double) (Main.player[this.target].height / 2)))) < 50.0 &&
                         (this.direction > 0 && (double) this.velocity.X >= 1.0 ||
                          this.direction < 0 && (double) this.velocity.X <= -1.0)))
                    {
                        this.velocity.X *= 2f;
                        if ((double) this.velocity.X > 3.0)
                            this.velocity.X = 3f;
                        if ((double) this.velocity.X < -3.0)
                            this.velocity.X = -3f;
                        this.velocity.Y = -4f;
                        this.netUpdate = true;
                    }

                    if (this.type == 120 && (double) this.velocity.Y < 0.0)
                        this.velocity.Y *= 1.1f;
                    if (this.type == 287 && (double) this.velocity.Y == 0.0 &&
                        ((double) Math.Abs((float) ((double) this.position.X + (double) (this.width / 2) -
                                                    ((double) Main.player[this.target].position.X +
                                                     (double) (Main.player[this.target].width / 2)))) < 150.0 &&
                         (double) Math.Abs((float) ((double) this.position.Y + (double) (this.height / 2) -
                                                    ((double) Main.player[this.target].position.Y +
                                                     (double) (Main.player[this.target].height / 2)))) < 50.0) &&
                        (this.direction > 0 && (double) this.velocity.X >= 1.0 ||
                         this.direction < 0 && (double) this.velocity.X <= -1.0))
                    {
                        this.velocity.X = (float) (8 * this.direction);
                        this.velocity.Y = -4f;
                        this.netUpdate = true;
                    }

                    if (this.type == 287 && (double) this.velocity.Y < 0.0)
                    {
                        this.velocity.X *= 1.2f;
                        this.velocity.Y *= 1.1f;
                    }

                    if (this.type == 460 && (double) this.velocity.Y < 0.0)
                    {
                        this.velocity.X *= 1.3f;
                        this.velocity.Y *= 1.1f;
                    }
                }
            }
            else if (flag3)
            {
                this.ai[1] = 0.0f;
                this.ai[2] = 0.0f;
            }

            if (Main.netMode == 1 || this.type != 120 || (double) this.ai[3] < (double) num10)
                return;
            var num20 = (int) Main.player[this.target].position.X / 16;
            var num21 = (int) Main.player[this.target].position.Y / 16;
            var num22 = (int) this.position.X / 16;
            var num23 = (int) this.position.Y / 16;
            var num24 = 20;
            var num25 = 0;
            var flag12 = false;
            if ((double) Math.Abs(this.position.X - Main.player[this.target].position.X) +
                (double) Math.Abs(this.position.Y - Main.player[this.target].position.Y) > 2000.0)
            {
                num25 = 100;
                flag12 = true;
            }

            while (!flag12 && num25 < 100)
            {
                ++num25;
                var index1 = Main.rand.Next(num20 - num24, num20 + num24);
                for (var index2 = Main.rand.Next(num21 - num24, num21 + num24); index2 < num21 + num24; ++index2)
                {
                    if ((index2 < num21 - 4 || index2 > num21 + 4 || (index1 < num20 - 4 || index1 > num20 + 4)) &&
                        (index2 < num23 - 1 || index2 > num23 + 1 || (index1 < num22 - 1 || index1 > num22 + 1)) &&
                        Main.tile[index1, index2].nactive())
                    {
                        var flag6 = true;
                        if (this.type == 32 && Main.tile[index1, index2 - 1].wall == (byte) 0)
                            flag6 = false;
                        else if (Main.tile[index1, index2 - 1].lava())
                            flag6 = false;
                        if (flag6 && Main.tileSolid[(int) Main.tile[index1, index2].type] &&
                            !Collision.SolidTiles(index1 - 1, index1 + 1, index2 - 4, index2 - 1))
                        {
                            this.position.X = (float) (index1 * 16 - this.width / 2);
                            this.position.Y = (float) (index2 * 16 - this.height);
                            this.netUpdate = true;
                            this.ai[3] = -120f;
                        }
                    }
                }
            }
        }

        private void AI_001_Slimes()
        {
            if (this.type == 1 &&
                ((double) this.ai[1] == 1.0 || (double) this.ai[1] == 2.0 || (double) this.ai[1] == 3.0))
                this.ai[1] = -1f;
            if (this.type == 1 && (double) this.ai[1] == 0.0 && (Main.netMode != 1 && (double) this.value > 0.0))
            {
                this.ai[1] = -1f;
                if (Main.rand.Next(20) == 0)
                {
                    int num;
                    switch (Main.rand.Next(4))
                    {
                        case 0:
                            switch (Main.rand.Next(7))
                            {
                                case 0:
                                    num = 290;
                                    break;
                                case 1:
                                    num = 292;
                                    break;
                                case 2:
                                    num = 296;
                                    break;
                                case 3:
                                    num = 2322;
                                    break;
                                default:
                                    num = Main.netMode == 0 || Main.rand.Next(2) != 0 ? 2350 : 2997;
                                    break;
                            }

                            break;
                        case 1:
                            switch (Main.rand.Next(4))
                            {
                                case 0:
                                    num = 8;
                                    break;
                                case 1:
                                    num = 166;
                                    break;
                                case 2:
                                    num = 965;
                                    break;
                                default:
                                    num = 58;
                                    break;
                            }

                            break;
                        case 2:
                            num = Main.rand.Next(2) != 0 ? Main.rand.Next(699, 703) : Main.rand.Next(11, 15);
                            break;
                        default:
                            switch (Main.rand.Next(3))
                            {
                                case 0:
                                    num = 71;
                                    break;
                                case 1:
                                    num = 72;
                                    break;
                                default:
                                    num = 73;
                                    break;
                            }

                            break;
                    }

                    this.ai[1] = (float) num;
                    this.netUpdate = true;
                }
            }

            if (this.type == 244)
            {
                Lighting.AddLight((int) (((double) this.position.X + (double) (this.width / 2)) / 16.0),
                    (int) (((double) this.position.Y + (double) (this.height / 2)) / 16.0),
                    (float) Main.DiscoR / (float) byte.MaxValue * 1f, (float) Main.DiscoG / (float) byte.MaxValue * 1f,
                    (float) Main.DiscoB / (float) byte.MaxValue * 1f);
                this.color.R = (byte) Main.DiscoR;
                this.color.G = (byte) Main.DiscoG;
                this.color.B = (byte) Main.DiscoB;
                this.color.A = (byte) 100;
                this.alpha = 175;
            }

            var flag = false;
            if (!Main.dayTime || this.life != this.lifeMax ||
                ((double) this.position.Y > Main.worldSurface * 16.0 || Main.slimeRain))
                flag = true;
            if (this.type == 81)
            {
                flag = true;
                if (Main.rand.Next(30) == 0)
                {
                    var index = Dust.NewDust(this.position, this.width, this.height, 14, 0.0f, 0.0f, this.alpha,
                        this.color, 1f);
                    Main.dust[index].velocity *= 0.3f;
                }
            }

            if ((this.type == 377 || this.type == 446) &&
                (this.target != (int) byte.MaxValue && !Main.player[this.target].dead) &&
                (double) Vector2.Distance(this.Center, Main.player[this.target].Center) <= 200.0)
                flag = true;
            if (this.type == 183)
                flag = true;
            if (this.type == 304)
                flag = true;
            if (this.type == 244)
            {
                flag = true;
                this.ai[0] += 2f;
            }

            if (this.type == 147 && Main.rand.Next(10) == 0)
            {
                var index = Dust.NewDust(this.position, this.width, this.height, 76, 0.0f, 0.0f, 0, new Color(), 1f);
                Main.dust[index].noGravity = true;
                Main.dust[index].velocity *= 0.1f;
            }

            if (this.type == 184)
            {
                if (Main.rand.Next(8) == 0)
                {
                    var index = Dust.NewDust(this.position - this.velocity, this.width, this.height, 76, 0.0f, 0.0f, 0,
                        new Color(), 1f);
                    Main.dust[index].noGravity = true;
                    Main.dust[index].velocity *= 0.15f;
                }

                flag = true;
                if ((double) this.localAI[0] > 0.0)
                    --this.localAI[0];
                if (!this.wet && !Main.player[this.target].npcTypeNoAggro[this.type])
                {
                    var vector2_1 = new Vector2(this.position.X + (float) this.width * 0.5f,
                        this.position.Y + (float) this.height * 0.5f);
                    var num1 = Main.player[this.target].position.X + (float) Main.player[this.target].width * 0.5f -
                                 vector2_1.X;
                    var num2 = Main.player[this.target].position.Y - vector2_1.Y;
                    var num3 = (float) Math.Sqrt((double) num1 * (double) num1 + (double) num2 * (double) num2);
                    if (Main.expertMode && (double) num3 < 120.0 &&
                        (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position,
                             Main.player[this.target].width, Main.player[this.target].height) &&
                         (double) this.velocity.Y == 0.0))
                    {
                        this.ai[0] = -40f;
                        if ((double) this.velocity.Y == 0.0)
                            this.velocity.X *= 0.9f;
                        if (Main.netMode != 1 && (double) this.localAI[0] == 0.0)
                        {
                            for (var index = 0; index < 5; ++index)
                            {
                                var vector2_2 = new Vector2((float) (index - 2), -4f);
                                vector2_2.X *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00499999988824129);
                                vector2_2.Y *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00499999988824129);
                                vector2_2.Normalize();
                                vector2_2 *= (float) (4.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_2.X, vector2_2.Y, 174, 9,
                                    0.0f, Main.myPlayer, 0.0f, 0.0f);
                                this.localAI[0] = 30f;
                            }
                        }
                    }
                    else if ((double) num3 < 200.0 &&
                             Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position,
                                 Main.player[this.target].width, Main.player[this.target].height) &&
                             (double) this.velocity.Y == 0.0)
                    {
                        this.ai[0] = -40f;
                        if ((double) this.velocity.Y == 0.0)
                            this.velocity.X *= 0.9f;
                        if (Main.netMode != 1 && (double) this.localAI[0] == 0.0)
                        {
                            var num4 = Main.player[this.target].position.Y - vector2_1.Y -
                                         (float) Main.rand.Next(0, 200);
                            var num5 =
                                4.5f / (float) Math.Sqrt((double) num1 * (double) num1 + (double) num4 * (double) num4);
                            var SpeedX = num1 * num5;
                            var SpeedY = num4 * num5;
                            this.localAI[0] = 50f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, 174, 9, 0.0f,
                                Main.myPlayer, 0.0f, 0.0f);
                        }
                    }
                }
            }

            if (this.type == 535)
            {
                flag = true;
                if ((double) this.localAI[0] > 0.0)
                    --this.localAI[0];
                if (!this.wet && !Main.player[this.target].npcTypeNoAggro[this.type])
                {
                    var vector2_1 = new Vector2(this.position.X + (float) this.width * 0.5f,
                        this.position.Y + (float) this.height * 0.5f);
                    var num1 = Main.player[this.target].position.X + (float) Main.player[this.target].width * 0.5f -
                                 vector2_1.X;
                    var num2 = Main.player[this.target].position.Y - vector2_1.Y;
                    var num3 = (float) Math.Sqrt((double) num1 * (double) num1 + (double) num2 * (double) num2);
                    if (Main.expertMode && (double) num3 < 120.0 &&
                        (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position,
                             Main.player[this.target].width, Main.player[this.target].height) &&
                         (double) this.velocity.Y == 0.0))
                    {
                        this.ai[0] = -40f;
                        if ((double) this.velocity.Y == 0.0)
                            this.velocity.X *= 0.9f;
                        if (Main.netMode != 1 && (double) this.localAI[0] == 0.0)
                        {
                            for (var index = 0; index < 5; ++index)
                            {
                                var vector2_2 = new Vector2((float) (index - 2), -4f);
                                vector2_2.X *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00499999988824129);
                                vector2_2.Y *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00499999988824129);
                                vector2_2.Normalize();
                                vector2_2 *= (float) (4.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_2.X, vector2_2.Y, 605, 9,
                                    0.0f, Main.myPlayer, 0.0f, 0.0f);
                                this.localAI[0] = 30f;
                            }
                        }
                    }
                    else if ((double) num3 < 200.0 &&
                             Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position,
                                 Main.player[this.target].width, Main.player[this.target].height) &&
                             (double) this.velocity.Y == 0.0)
                    {
                        this.ai[0] = -40f;
                        if ((double) this.velocity.Y == 0.0)
                            this.velocity.X *= 0.9f;
                        if (Main.netMode != 1 && (double) this.localAI[0] == 0.0)
                        {
                            var num4 = Main.player[this.target].position.Y - vector2_1.Y -
                                         (float) Main.rand.Next(0, 200);
                            var num5 =
                                4.5f / (float) Math.Sqrt((double) num1 * (double) num1 + (double) num4 * (double) num4);
                            var SpeedX = num1 * num5;
                            var SpeedY = num4 * num5;
                            this.localAI[0] = 50f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, 605, 9, 0.0f,
                                Main.myPlayer, 0.0f, 0.0f);
                        }
                    }
                }
            }

            if (this.type == 204)
            {
                flag = true;
                if ((double) this.localAI[0] > 0.0)
                    --this.localAI[0];
                if (!this.wet && !Main.player[this.target].npcTypeNoAggro[this.type])
                {
                    var vector2_1 = new Vector2(this.position.X + (float) this.width * 0.5f,
                        this.position.Y + (float) this.height * 0.5f);
                    var num1 = Main.player[this.target].position.X + (float) Main.player[this.target].width * 0.5f -
                                 vector2_1.X;
                    var num2 = Main.player[this.target].position.Y - vector2_1.Y;
                    var num3 = (float) Math.Sqrt((double) num1 * (double) num1 + (double) num2 * (double) num2);
                    if (Main.expertMode && (double) num3 < 200.0 &&
                        (Collision.CanHit(new Vector2(this.position.X, this.position.Y - 20f), this.width,
                             this.height + 20, Main.player[this.target].position, Main.player[this.target].width,
                             Main.player[this.target].height) && (double) this.velocity.Y == 0.0))
                    {
                        this.ai[0] = -40f;
                        if ((double) this.velocity.Y == 0.0)
                            this.velocity.X *= 0.9f;
                        if (Main.netMode != 1 && (double) this.localAI[0] == 0.0)
                        {
                            for (var index = 0; index < 5; ++index)
                            {
                                var vector2_2 = new Vector2((float) (index - 2), -2f);
                                vector2_2.X *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.0199999995529652);
                                vector2_2.Y *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.0199999995529652);
                                vector2_2.Normalize();
                                vector2_2 *= (float) (3.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_2.X, vector2_2.Y, 176, 13,
                                    0.0f, Main.myPlayer, 0.0f, 0.0f);
                                this.localAI[0] = 80f;
                            }
                        }
                    }

                    if ((double) num3 < 400.0 && Collision.CanHit(new Vector2(this.position.X, this.position.Y - 20f),
                            this.width, this.height + 20, Main.player[this.target].position,
                            Main.player[this.target].width, Main.player[this.target].height) &&
                        (double) this.velocity.Y == 0.0)
                    {
                        this.ai[0] = -80f;
                        if ((double) this.velocity.Y == 0.0)
                            this.velocity.X *= 0.9f;
                        if (Main.netMode != 1 && (double) this.localAI[0] == 0.0)
                        {
                            var num4 = Main.player[this.target].position.Y - vector2_1.Y -
                                         (float) Main.rand.Next(-30, 20) - num3 * 0.05f;
                            var num5 = Main.player[this.target].position.X - vector2_1.X -
                                         (float) Main.rand.Next(-20, 20);
                            var num6 =
                                7f / (float) Math.Sqrt((double) num5 * (double) num5 + (double) num4 * (double) num4);
                            var SpeedX = num5 * num6;
                            var SpeedY = num4 * num6;
                            this.localAI[0] = 65f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, 176, 13, 0.0f,
                                Main.myPlayer, 0.0f, 0.0f);
                        }
                    }
                }
            }

            if (this.type == 377 || this.type == 446)
            {
                if ((double) this.localAI[2] < 90.0)
                    ++this.localAI[2];
                else
                    this.friendly = false;
            }

            if (this.type == 59)
            {
                Lighting.AddLight((int) (((double) this.position.X + (double) (this.width / 2)) / 16.0),
                    (int) (((double) this.position.Y + (double) (this.height / 2)) / 16.0), 1f, 0.3f, 0.1f);
                var index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                    this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, new Color(), 1.7f);
                Main.dust[index].noGravity = true;
            }

            if ((double) this.ai[2] > 1.0)
                --this.ai[2];
            if (this.wet)
            {
                if (this.collideY)
                    this.velocity.Y = -2f;
                if ((double) this.velocity.Y < 0.0 && (double) this.ai[3] == (double) this.position.X)
                {
                    this.direction *= -1;
                    this.ai[2] = 200f;
                }

                if ((double) this.velocity.Y > 0.0)
                    this.ai[3] = this.position.X;
                if (this.type == 59)
                {
                    if ((double) this.velocity.Y > 2.0)
                        this.velocity.Y *= 0.9f;
                    else if (this.directionY < 0)
                        this.velocity.Y -= 0.8f;
                    this.velocity.Y -= 0.5f;
                    if ((double) this.velocity.Y < -10.0)
                        this.velocity.Y = -10f;
                }
                else
                {
                    if ((double) this.velocity.Y > 2.0)
                        this.velocity.Y *= 0.9f;
                    this.velocity.Y -= 0.5f;
                    if ((double) this.velocity.Y < -4.0)
                        this.velocity.Y = -4f;
                }

                if ((double) this.ai[2] == 1.0 && flag)
                    this.TargetClosest(true);
            }

            this.aiAction = 0;
            if ((double) this.ai[2] == 0.0)
            {
                this.ai[0] = -100f;
                this.ai[2] = 1f;
                this.TargetClosest(true);
            }

            if ((double) this.velocity.Y == 0.0)
            {
                if (this.collideY && (double) this.oldVelocity.Y != 0.0 &&
                    Collision.SolidCollision(this.position, this.width, this.height))
                    this.position.X -= this.velocity.X + (float) this.direction;
                if ((double) this.ai[3] == (double) this.position.X)
                {
                    this.direction *= -1;
                    this.ai[2] = 200f;
                }

                this.ai[3] = 0.0f;
                this.velocity.X *= 0.8f;
                if ((double) this.velocity.X > -0.1 && (double) this.velocity.X < 0.1)
                    this.velocity.X = 0.0f;
                if (flag)
                    ++this.ai[0];
                ++this.ai[0];
                if (this.type == 59)
                    this.ai[0] += 2f;
                if (this.type == 71)
                    this.ai[0] += 3f;
                if (this.type == 138)
                    this.ai[0] += 2f;
                if (this.type == 183)
                    ++this.ai[0];
                if (this.type == 304)
                    this.ai[0] += (float) ((1 - this.life / this.lifeMax) * 10);
                if (this.type == 377 || this.type == 446)
                    this.ai[0] += 3f;
                if (this.type == 81)
                {
                    if ((double) this.scale >= 0.0)
                        this.ai[0] += 4f;
                    else
                        ++this.ai[0];
                }

                var num = 0;
                if ((double) this.ai[0] >= 0.0)
                    num = 1;
                if ((double) this.ai[0] >= -1000.0 && (double) this.ai[0] <= -500.0)
                    num = 2;
                if ((double) this.ai[0] >= -2000.0 && (double) this.ai[0] <= -1500.0)
                    num = 3;
                if (num > 0)
                {
                    this.netUpdate = true;
                    if (flag && (double) this.ai[2] == 1.0)
                        this.TargetClosest(true);
                    if (num == 3)
                    {
                        this.velocity.Y = -8f;
                        if (this.type == 59)
                            this.velocity.Y -= 2f;
                        this.velocity.X += (float) (3 * this.direction);
                        if (this.type == 59)
                            this.velocity.X += 0.5f * (float) this.direction;
                        this.ai[0] = -200f;
                        this.ai[3] = this.position.X;
                    }
                    else
                    {
                        this.velocity.Y = -6f;
                        this.velocity.X += (float) (2 * this.direction);
                        if (this.type == 59)
                            this.velocity.X += (float) (2 * this.direction);
                        this.ai[0] = -120f;
                        if (num == 1)
                            this.ai[0] -= 1000f;
                        else
                            this.ai[0] -= 2000f;
                    }

                    if (this.type == 141)
                    {
                        this.velocity.Y *= 1.3f;
                        this.velocity.X *= 1.2f;
                    }

                    if (this.type != 377 && this.type != 446)
                        return;
                    this.velocity.Y *= 0.9f;
                    this.velocity.X *= 0.6f;
                    if (!flag)
                        return;
                    this.direction = -this.direction;
                    this.velocity.X *= -1f;
                }
                else
                {
                    if ((double) this.ai[0] < -30.0)
                        return;
                    this.aiAction = 1;
                }
            }
            else
            {
                if (this.target >= (int) byte.MaxValue || (this.direction != 1 || (double) this.velocity.X >= 3.0) &&
                    (this.direction != -1 || (double) this.velocity.X <= -3.0))
                    return;
                if (this.collideX && (double) Math.Abs(this.velocity.X) == 0.200000002980232)
                    this.position.X -= 1.4f * (float) this.direction;
                if (this.collideY && (double) this.oldVelocity.Y != 0.0 &&
                    Collision.SolidCollision(this.position, this.width, this.height))
                    this.position.X -= this.velocity.X + (float) this.direction;
                if (this.direction == -1 && (double) this.velocity.X < 0.01 ||
                    this.direction == 1 && (double) this.velocity.X > -0.01)
                    this.velocity.X += 0.2f * (float) this.direction;
                else
                    this.velocity.X *= 0.93f;
            }
        }

        private void AI_110_Betsy()
        {
            NPCUtils.TargetClosestBetsy(this, false, new Vector2?());
            var targetData = this.GetTargetData(true);
            var num1 = -1;
            var num2 = 1f;
            var Damage1 = 35;
            var Damage2 = 35;
            var num3 = 10f;
            var moveSpeed = 0.45f;
            var num4 = 7.5f;
            var num5 = 30f;
            var num6 = 30f;
            var num7 = 23f;
            var num8 = 600f;
            var num9 = 12f;
            var num10 = 40f;
            var num11 = 80f;
            var num12 = num10 + num11;
            var num13 = 1500f;
            var num14 = 60f;
            var num15 = 13f;
            var amount = 0.03333334f;
            var num16 = 12f;
            var num17 = 10;
            var num18 = 6 * num17;
            var num19 = 60f;
            var num20 = num14 + (float) num18 + num19;
            var num21 = 60f;
            var num22 = (float) (6.28318548202515 * (1.0 / (double) num21));
            var num23 = 0.1f;
            var num24 = 32f;
            var num25 = 90f;
            var num26 = 20f;
            var num27 = (double) this.ai[0];
            if ((double) this.ai[0] == 0.0)
            {
                if ((double) ++this.ai[1] >= (double) num3)
                {
                    this.ai[1] = 0.0f;
                    this.ai[0] = 1f;
                    this.ai[2] = 0.0f;
                    this.netUpdate = true;
                }
            }
            else if ((double) this.ai[0] == 1.0)
            {
                if ((double) this.ai[2] == 0.0)
                    this.ai[2] = (double) this.Center.X < (double) targetData.Center.X ? 1f : -1f;
                this.SimpleFlyMovement(
                    this.DirectionTo(targetData.Center + new Vector2((float) (-(double) this.ai[2] * 300.0), -200f)) *
                    num4, moveSpeed);
                this.direction = this.spriteDirection = (double) this.Center.X < (double) targetData.Center.X ? 1 : -1;
                if ((double) ++this.ai[1] >= (double) num5)
                {
                    var num28 = 1;
                    if ((double) this.ai[3] == 5.0 && Main.rand.Next(3) == 0)
                        ++this.ai[3];
                    switch ((int) this.ai[3])
                    {
                        case 0:
                        case 1:
                        case 3:
                            num28 = 2;
                            break;
                        case 2:
                            num28 = 3;
                            break;
                        case 4:
                            num28 = 4;
                            break;
                        case 5:
                            num28 = 5;
                            break;
                        case 6:
                            num28 = 3;
                            break;
                        case 7:
                            num28 = 6;
                            break;
                    }

                    this.ai[0] = (float) num28;
                    this.ai[1] = 0.0f;
                    this.ai[2] = 0.0f;
                    ++this.ai[3];
                    this.netUpdate = true;
                    if ((double) this.ai[3] >= 8.0)
                        this.ai[3] = 0.0f;
                    switch (num28)
                    {
                        case 2:
                            var v1 = this.DirectionTo(targetData.Center);
                            this.spriteDirection = (double) v1.X > 0.0 ? 1 : -1;
                            this.rotation = v1.ToRotation();
                            if (this.spriteDirection == -1)
                                this.rotation += 3.141593f;
                            this.velocity = v1 * num7;
                            break;
                        case 3:
                            var vector2 =
                                new Vector2((double) targetData.Center.X > (double) this.Center.X ? 1f : -1f, 0.0f);
                            this.spriteDirection = (double) vector2.X > 0.0 ? 1 : -1;
                            this.velocity = vector2 * -2f;
                            break;
                        case 5:
                            var v2 = this.DirectionTo(targetData.Center);
                            this.spriteDirection = (double) v2.X > 0.0 ? 1 : -1;
                            this.rotation = v2.ToRotation();
                            if (this.spriteDirection == -1)
                                this.rotation += 3.141593f;
                            this.velocity = v2 * num24;
                            break;
                    }
                }
            }
            else if ((double) this.ai[0] == 2.0)
            {
                if ((double) this.ai[1] == 0.0)
                    Main.PlayTrackedSound((SoundStyle) SoundID.DD2_BetsyWindAttack, this.Center);
                if ((double) ++this.ai[1] >= (double) num6)
                {
                    this.ai[0] = 1f;
                    this.ai[1] = 0.0f;
                    this.ai[2] = 0.0f;
                }
            }
            else if ((double) this.ai[0] == 3.0)
            {
                var activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[2]));
                if (activeSound != null)
                    activeSound.Position = this.Center;
                ++this.ai[1];
                var num28 = (double) this.Center.X < (double) targetData.Center.X ? 1 : -1;
                this.ai[2] = (float) num28;
                if ((double) this.ai[1] < (double) num10)
                {
                    var vector2_1 = targetData.Center + new Vector2((float) num28 * -num8, -250f);
                    var vector2_2 = this.DirectionTo(vector2_1) * num9;
                    if ((double) this.Distance(vector2_1) < (double) num9)
                    {
                        this.Center = vector2_1;
                    }
                    else
                    {
                        var npc = this;
                        npc.position = npc.position + vector2_2;
                    }

                    if ((double) Vector2.Distance(vector2_1, this.Center) < 16.0)
                        this.ai[1] = num10 - 1f;
                    num2 = 1.5f;
                }

                if ((double) this.ai[1] == (double) num10)
                {
                    var num29 = (double) targetData.Center.X > (double) this.Center.X ? 1 : -1;
                    this.velocity = new Vector2((float) num29, 0.0f) * 10f;
                    this.direction = this.spriteDirection = num29;
                    if (Main.netMode != 1)
                        Projectile.NewProjectile(this.Center, this.velocity, 687, Damage1, 0.0f, Main.myPlayer, 0.0f,
                            (float) this.whoAmI);
                    var localAi = this.localAI;
                    var index = 2;
                    //Fix By GScience
                    localAi[index] = Main.PlayTrackedSound((SoundStyle) SoundID.DD2_BetsyFlameBreath, this.Center)
                        .ToFloat();
                }

                if ((double) this.ai[1] >= (double) num10)
                {
                    num2 = 1.5f;
                    if ((double) Math.Abs(targetData.Center.X - this.Center.X) > 550.0 &&
                        (double) Math.Abs(this.velocity.X) < 20.0)
                        this.velocity.X += (float) Math.Sign(this.velocity.X) * 0.5f;
                }

                if ((double) this.ai[1] >= (double) num12)
                {
                    this.ai[0] = 1f;
                    this.ai[1] = 0.0f;
                    this.ai[2] = 0.0f;
                }
            }
            else if ((double) this.ai[0] == 4.0)
            {
                var num28 = (double) this.Center.X < (double) targetData.Center.X ? 1 : -1;
                this.ai[2] = (float) num28;
                if ((double) this.ai[1] < (double) num14)
                {
                    var Destination = targetData.Center + new Vector2((float) num28 * -num13, -350f);
                    this.velocity = Vector2.Lerp(this.velocity, this.DirectionTo(Destination) * num15, amount);
                    this.direction = this.spriteDirection =
                        (double) this.Center.X < (double) targetData.Center.X ? 1 : -1;
                    if ((double) Vector2.Distance(Destination, this.Center) < 16.0)
                        this.ai[1] = num14 - 1f;
                    num2 = 1.5f;
                }
                else if ((double) this.ai[1] == (double) num14)
                {
                    var v = this.DirectionTo(targetData.Center);
                    v.Y *= 0.25f;
                    v = v.SafeNormalize(Vector2.UnitX * (float) this.direction);
                    this.spriteDirection = (double) v.X > 0.0 ? 1 : -1;
                    this.rotation = v.ToRotation();
                    if (this.spriteDirection == -1)
                        this.rotation += 3.141593f;
                    this.velocity = v * num16;
                }
                else
                {
                    this.position.X += this.DirectionTo(targetData.Center).X * 7f;
                    this.position.Y += this.DirectionTo(targetData.Center + new Vector2(0.0f, -400f)).Y * 6f;
                    if ((double) this.ai[1] <= (double) num20 - (double) num19)
                        num2 = 1.5f;
                    var position = this.Center +
                                       new Vector2((110f + 30f) * (float) this.direction, 20f).RotatedBy(
                                           (double) this.rotation, new Vector2());
                    var num29 = (int) ((double) this.ai[1] - (double) num14 + 1.0);
                    if (num29 <= num18 && num29 % num17 == 0 && Main.netMode != 1)
                        Projectile.NewProjectile(position, this.velocity, 686, Damage2, 0.0f, Main.myPlayer, 0.0f,
                            0.0f);
                }

                if ((double) this.ai[1] > (double) num20 - (double) num19)
                    this.velocity.Y -= 0.1f;
                ++this.ai[1];
                if ((double) this.ai[1] >= (double) num20)
                {
                    this.ai[0] = 1f;
                    this.ai[1] = 0.0f;
                    this.ai[2] = 0.0f;
                }
            }
            else if ((double) this.ai[0] == 5.0)
            {
                this.velocity = this.velocity.RotatedBy(-(double) num22 * (double) this.direction, new Vector2());
                this.position.Y -= num23;
                var npc1 = this;
                npc1.position = npc1.position + this.DirectionTo(targetData.Center) * 10f;
                this.rotation -= num22 * (float) this.direction;
                num2 *= 0.7f;
                if ((double) this.ai[1] == 1.0)
                    Main.PlayTrackedSound((SoundStyle) SoundID.DD2_BetsyFlyingCircleAttack, this.Center);
                if ((double) ++this.ai[1] >= (double) num21)
                {
                    this.ai[0] = 1f;
                    this.ai[1] = 0.0f;
                    this.ai[2] = 0.0f;
                    var npc2 = this;
                    npc2.velocity = npc2.velocity / 2f;
                }
            }
            else if ((double) this.ai[0] == 6.0)
            {
                if ((double) this.ai[1] == 0.0)
                {
                    this.SimpleFlyMovement(this.DirectionTo(targetData.Center + new Vector2(0.0f, -200f)) * num4 * 2f,
                        moveSpeed * 2f);
                    this.direction = this.spriteDirection =
                        (double) this.Center.X < (double) targetData.Center.X ? 1 : -1;
                    ++this.ai[2];
                    if ((double) this.Distance(targetData.Center) < 350.0 || (double) this.ai[2] >= 180.0)
                    {
                        this.ai[1] = 1f;
                        this.netUpdate = true;
                    }
                }
                else
                {
                    if ((double) this.ai[1] == 1.0)
                        Main.PlayTrackedSound((SoundStyle) SoundID.DD2_BetsyScream);
                    if ((double) this.ai[1] < (double) num26)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * 0.95f;
                    }
                    else
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * 0.98f;
                    }

                    if ((double) this.ai[1] == (double) num26)
                    {
                        if ((double) this.velocity.Y > 0.0)
                            this.velocity.Y /= 3f;
                        this.velocity.Y -= 3f;
                    }

                    num2 *= 0.85f;
                    if ((double) this.ai[1] == 20.0 || (double) this.ai[1] == 25.0 || (double) this.ai[1] == 30.0)
                    {
                        var tileCoordinates = this.Center.ToTileCoordinates();
                        var num28 = 30;
                        var num29 = 35;
                        var num30 = 4;
                        for (var i = tileCoordinates.X - num28; i <= tileCoordinates.X + num28; ++i)
                        {
                            var flag1 = false;
                            for (var j = tileCoordinates.Y - num29 / 3; j < tileCoordinates.Y + num29; ++j)
                            {
                                var tileSafely = Framing.GetTileSafely(i, j);
                                var flag2 = tileSafely.active() && Main.tileSolid[(int) tileSafely.type] &&
                                             !Main.tileFrameImportant[(int) tileSafely.type];
                                if (flag1 && flag2)
                                {
                                    var tileDustAmount = WorldGen.KillTile_GetTileDustAmount(true, tileSafely);
                                    for (var index = 0; index < tileDustAmount; ++index)
                                    {
                                        var dust = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
                                        dust.velocity.Y -= (float) (3.0 + (double) num30 * 1.5);
                                        dust.velocity.Y *= Main.rand.NextFloat();
                                        dust.scale += (float) num30 * 0.03f;
                                    }

                                    for (var index = 0; index < tileDustAmount - 1; ++index)
                                    {
                                        var dust = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
                                        dust.velocity.Y -= 1f + (float) num30;
                                        dust.velocity.Y *= Main.rand.NextFloat();
                                    }

                                    if (tileDustAmount > 0 && Main.rand.Next(3) != 0)
                                    {
                                        var num31 = (float) (Math.Abs(tileCoordinates.X - i) / (num28 / 2));
                                        var gore = Gore.NewGoreDirect(this.position, Vector2.Zero,
                                            61 + Main.rand.Next(3),
                                            (float) (1.0 - (double) num30 * 0.150000005960464 + (double) num31 * 0.5));
                                        gore.velocity.Y -=
                                            (float) (0.100000001490116 + (double) num30 * 0.5 +
                                                     (double) num31 * (double) num30 * 1.0);
                                        gore.velocity.Y *= Main.rand.NextFloat();
                                        gore.position = new Vector2((float) (i * 16 + 20), (float) (j * 16 + 20));
                                    }
                                }

                                flag1 = !flag2;
                            }
                        }
                    }

                    var flag = (double) this.ai[1] == 20.0 || (double) this.ai[1] == 45.0 ||
                                (double) this.ai[1] == 70.0;
                    if (NPC.CountNPCS(560) > 4)
                        flag = false;
                    if (flag && Main.netMode != 1)
                    {
                        for (var index = 0; index < 1; ++index)
                        {
                            var vector2 = this.Center + (6.283185f * Main.rand.NextFloat()).ToRotationVector2() *
                                              new Vector2(2f, 1f) * 300f *
                                              (float) (0.600000023841858 +
                                                       (double) Main.rand.NextFloat() * 0.400000005960464);
                            if ((double) Vector2.Distance(vector2, targetData.Center) > 100.0)
                            {
                                var point = vector2.ToPoint();
                                NPC.NewNPC(point.X, point.Y, 560, this.whoAmI, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                                Main.PlayTrackedSound((SoundStyle) SoundID.DD2_BetsySummon, vector2);
                            }
                        }

                        var npcList = new List<NPC>();
                        for (var index = 0; index < 200; ++index)
                        {
                            var npc = Main.npc[index];
                            if (npc.active && npc.type == 549)
                                npcList.Add(npc);
                        }

                        if (npcList.Count > 0)
                        {
                            for (var index = 0; index < 3; ++index)
                            {
                                var npc = npcList[Main.rand.Next(npcList.Count)];
                                var point = npc.Center.ToPoint();
                                NPC.NewNPC(point.X, point.Y, 560, 0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
                                Main.PlayTrackedSound((SoundStyle) SoundID.DD2_BetsySummon, npc.Center);
                            }
                        }
                    }

                    ++this.ai[1];
                }

                if ((double) this.ai[1] >= (double) num25)
                {
                    this.ai[0] = 1f;
                    this.ai[1] = 0.0f;
                    this.ai[2] = 0.0f;
                }
            }

            this.localAI[0] += num2;
            if ((double) this.localAI[0] >= 36.0)
                this.localAI[0] = 0.0f;
            if (num1 != -1)
                this.localAI[0] = (float) (num1 * 4);
            if ((double) ++this.localAI[1] >= 60.0)
                this.localAI[1] = 0.0f;
            var targetAngle = this.DirectionTo(targetData.Center).ToRotation();
            var maxChange = 0.04f;
            switch (this.ai[0])
            {
                case 2f:
                case 5f:
                    maxChange = 0.0f;
                    break;
                case 3f:
                    maxChange = 0.01f;
                    targetAngle = 0.0f;
                    if (this.spriteDirection == -1)
                        targetAngle -= 3.141593f;
                    if ((double) this.ai[1] >= (double) num10)
                    {
                        targetAngle += (float) ((double) this.spriteDirection * 3.14159274101257 / 12.0);
                        maxChange = 0.05f;
                        break;
                    }

                    break;
                case 4f:
                    maxChange = 0.01f;
                    targetAngle = 3.141593f;
                    if (this.spriteDirection == 1)
                    {
                        targetAngle += 3.141593f;
                        break;
                    }

                    break;
                case 6f:
                    maxChange = 0.02f;
                    targetAngle = 0.0f;
                    if (this.spriteDirection == -1)
                    {
                        targetAngle -= 3.141593f;
                        break;
                    }

                    break;
            }

            if (this.spriteDirection == -1)
                targetAngle += 3.141593f;
            if ((double) maxChange != 0.0)
                this.rotation = this.rotation.AngleTowards(targetAngle, maxChange);
            if (Main.GetActiveSound(SlotId.FromFloat(this.localAI[2])) != null)
                return;
            var localAi1 = this.localAI;
            var index1 = 2;
            //Fix By GScience
            localAi1[index1] = SlotId.Invalid.ToFloat();
        }

        private void AI_026_Unicorns()
        {
            var num1 = 30;
            var num2 = 10;
            var flag1 = false;
            var flag2 = false;
            var flag3 = false;
            if ((double) this.velocity.Y == 0.0 && ((double) this.velocity.X > 0.0 && this.direction < 0 ||
                                                    (double) this.velocity.X < 0.0 && this.direction > 0))
            {
                flag2 = true;
                ++this.ai[3];
            }

            if (this.type == 546)
            {
                num2 = 4;
                var flag4 = (double) this.velocity.Y == 0.0;
                for (var index = 0; index < 200; ++index)
                {
                    if (index != this.whoAmI && Main.npc[index].active &&
                        (Main.npc[index].type == this.type &&
                         (double) Math.Abs(this.position.X - Main.npc[index].position.X) +
                         (double) Math.Abs(this.position.Y - Main.npc[index].position.Y) < (double) this.width))
                    {
                        if ((double) this.position.X < (double) Main.npc[index].position.X)
                            this.velocity.X -= 0.05f;
                        else
                            this.velocity.X += 0.05f;
                        if ((double) this.position.Y < (double) Main.npc[index].position.Y)
                            this.velocity.Y -= 0.05f;
                        else
                            this.velocity.Y += 0.05f;
                    }
                }

                if (flag4)
                    this.velocity.Y = 0.0f;
            }

            if ((double) this.position.X == (double) this.oldPosition.X || (double) this.ai[3] >= (double) num1 ||
                flag2)
            {
                ++this.ai[3];
                flag3 = true;
            }
            else if ((double) this.ai[3] > 0.0)
                --this.ai[3];

            if ((double) this.ai[3] > (double) (num1 * num2))
                this.ai[3] = 0.0f;
            if (this.justHit)
                this.ai[3] = 0.0f;
            if ((double) this.ai[3] == (double) num1)
                this.netUpdate = true;
            var vector2_1 = new Vector2(this.position.X + (float) this.width * 0.5f,
                this.position.Y + (float) this.height * 0.5f);
            var num3 = Main.player[this.target].position.X + (float) Main.player[this.target].width * 0.5f -
                         vector2_1.X;
            var num4 = Main.player[this.target].position.Y - vector2_1.Y;
            var num5 = (float) Math.Sqrt((double) num3 * (double) num3 + (double) num4 * (double) num4);
            if ((double) num5 < 200.0 && !flag3)
                this.ai[3] = 0.0f;
            if (this.type == 410)
            {
                ++this.ai[1];
                var flag4 = (double) this.ai[1] >= 240.0;
                if (!flag4 && (double) this.velocity.Y == 0.0)
                {
                    for (var index = 0; index < (int) byte.MaxValue; ++index)
                    {
                        if (Main.player[index].active && !Main.player[index].dead &&
                            ((double) Main.player[index].Distance(this.Center) < 800.0 &&
                             (double) Main.player[index].Center.Y < (double) this.Center.Y) &&
                            (double) Math.Abs(Main.player[index].Center.X - this.Center.X) < 20.0)
                        {
                            flag4 = true;
                            break;
                        }
                    }
                }

                if (flag4 && Main.netMode != 1)
                {
                    for (var index = 0; index < 3; ++index)
                        Projectile.NewProjectile(this.Center.X, this.Center.Y,
                            (float) (((double) Main.rand.NextFloat() - 0.5) * 2.0),
                            (float) (-4.0 - 10.0 * (double) Main.rand.NextFloat()), 538, 50, 0.0f, Main.myPlayer, 0.0f,
                            0.0f);
                    this.HitEffect(9999, 10.0);
                    this.active = false;
                    return;
                }
            }
            else if (this.type == 423)
            {
                if ((double) this.ai[2] == 1.0)
                {
                    ++this.ai[1];
                    this.velocity.X *= 0.7f;
                    if ((double) this.ai[1] < 30.0)
                    {
                        var Position = this.Center + Vector2.UnitX * (float) this.spriteDirection * -20f;
                        var dust = Main.dust[Dust.NewDust(Position, 0, 0, 242, 0.0f, 0.0f, 0, new Color(), 1f)];
                        var vector2_2 = Vector2.UnitY.RotatedByRandom(6.28318548202515);
                        dust.position = Position + vector2_2 * 20f;
                        dust.velocity = -vector2_2 * 2f;
                        dust.scale = (float) (0.5 + (double) vector2_2.X * (double) -this.spriteDirection);
                        dust.fadeIn = 1f;
                        dust.noGravity = true;
                    }
                    else if ((double) this.ai[1] == 30.0)
                    {
                        for (var index = 0; index < 20; ++index)
                        {
                            var Position = this.Center + Vector2.UnitX * (float) this.spriteDirection * -20f;
                            var dust = Main.dust[Dust.NewDust(Position, 0, 0, 242, 0.0f, 0.0f, 0, new Color(), 1f)];
                            var vector2_2 = Vector2.UnitY.RotatedByRandom(6.28318548202515);
                            dust.position = Position + vector2_2 * 4f;
                            dust.velocity = vector2_2 * 4f + Vector2.UnitX * Main.rand.NextFloat() *
                                            (float) this.spriteDirection * -5f;
                            dust.scale = (float) (0.5 + (double) vector2_2.X * (double) -this.spriteDirection);
                            dust.fadeIn = 1f;
                            dust.noGravity = true;
                        }
                    }

                    if ((double) this.velocity.X > -0.5 && (double) this.velocity.X < 0.5)
                        this.velocity.X = 0.0f;
                    if ((double) this.ai[1] == 30.0 && Main.netMode != 1)
                        Projectile.NewProjectile(this.Center.X + (float) (this.spriteDirection * -20), this.Center.Y,
                            (float) (this.spriteDirection * -7), 0.0f, 575, Main.expertMode ? 35 : 50, 0.0f,
                            Main.myPlayer, (float) this.target, 0.0f);
                    if ((double) this.ai[1] >= 60.0)
                    {
                        this.ai[1] = (float) -Main.rand.Next(320, 601);
                        this.ai[2] = 0.0f;
                    }
                }
                else
                {
                    ++this.ai[1];
                    if ((double) this.ai[1] >= 180.0 && (double) num5 < 500.0 && (double) this.velocity.Y == 0.0)
                    {
                        flag1 = true;
                        this.ai[1] = 0.0f;
                        this.ai[2] = 1f;
                        this.netUpdate = true;
                    }
                    else if ((double) this.velocity.Y == 0.0 && (double) num5 < 100.0 &&
                             (double) Math.Abs(this.velocity.X) > 3.0 &&
                             ((double) this.Center.X < (double) Main.player[this.target].Center.X &&
                              (double) this.velocity.X > 0.0 ||
                              (double) this.Center.X > (double) Main.player[this.target].Center.X &&
                              (double) this.velocity.X < 0.0))
                        this.velocity.Y -= 4f;
                }
            }
            else if (this.type == 155 || this.type == 329)
            {
                if ((double) this.velocity.Y == 0.0 && (double) num5 < 100.0 &&
                    (double) Math.Abs(this.velocity.X) > 3.0 &&
                    ((double) this.position.X + (double) (this.width / 2) <
                     (double) Main.player[this.target].position.X + (double) (Main.player[this.target].width / 2) &&
                     (double) this.velocity.X > 0.0 ||
                     (double) this.position.X + (double) (this.width / 2) >
                     (double) Main.player[this.target].position.X + (double) (Main.player[this.target].width / 2) &&
                     (double) this.velocity.X < 0.0))
                    this.velocity.Y -= 4f;
            }
            else if (this.type == 546 && (double) this.velocity.Y == 0.0 && (double) Math.Abs(this.velocity.X) > 3.0 &&
                     ((double) this.Center.X < (double) Main.player[this.target].Center.X &&
                      (double) this.velocity.X > 0.0 ||
                      (double) this.Center.X > (double) Main.player[this.target].Center.X &&
                      (double) this.velocity.X < 0.0))
            {
                this.velocity.Y -= 4f;
                Main.PlaySound(3, this.Center, 11);
            }

            if ((double) this.ai[3] < (double) num1)
            {
                if ((this.type == 329 || this.type == 315) && !Main.pumpkinMoon)
                {
                    if (this.timeLeft > 10)
                        this.timeLeft = 10;
                }
                else
                    this.TargetClosest(true);
            }
            else
            {
                if ((double) this.velocity.X == 0.0)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        ++this.ai[0];
                        if ((double) this.ai[0] >= 2.0)
                        {
                            this.direction *= -1;
                            this.spriteDirection = this.direction;
                            this.ai[0] = 0.0f;
                        }
                    }
                }
                else
                    this.ai[0] = 0.0f;

                this.directionY = -1;
                if (this.direction == 0)
                    this.direction = 1;
            }

            var num6 = 6f;
            var num7 = 0.07f;
            if (!flag1 && ((double) this.velocity.Y == 0.0 || this.wet ||
                           (double) this.velocity.X <= 0.0 && this.direction < 0 ||
                           (double) this.velocity.X >= 0.0 && this.direction > 0))
            {
                if (this.type == 155)
                {
                    if ((double) this.velocity.X > 0.0 && this.direction < 0)
                        this.velocity.X *= 0.95f;
                    if ((double) this.velocity.X < 0.0 && this.direction > 0)
                        this.velocity.X *= 0.95f;
                }
                else if (this.type == 329)
                {
                    if ((double) this.velocity.X > 0.0 && this.direction < 0)
                        this.velocity.X *= 0.9f;
                    if ((double) this.velocity.X < 0.0 && this.direction > 0)
                        this.velocity.X *= 0.9f;
                    if (this.direction > 0 && (double) this.velocity.X < 3.0)
                        this.velocity.X += 0.1f;
                    if (this.direction < 0 && (double) this.velocity.X > -3.0)
                        this.velocity.X -= 0.1f;
                }
                else if (this.type == 315)
                {
                    if ((double) this.velocity.X > 0.0 && this.direction < 0)
                        this.velocity.X *= 0.95f;
                    if ((double) this.velocity.X < 0.0 && this.direction > 0)
                        this.velocity.X *= 0.95f;
                    if ((double) this.velocity.X < -(double) num6 || (double) this.velocity.X > (double) num6)
                    {
                        if ((double) this.velocity.Y == 0.0)
                        {
                            var npc = this;
                            npc.velocity = npc.velocity * 0.8f;
                        }
                    }
                    else if ((double) this.velocity.X < (double) num6 && this.direction == 1)
                    {
                        this.velocity.X += 0.07f;
                        if ((double) this.velocity.X > (double) num6)
                            this.velocity.X = num6;
                    }
                    else if ((double) this.velocity.X > -(double) num6 && this.direction == -1)
                    {
                        this.velocity.X -= 0.07f;
                        if ((double) this.velocity.X < -(double) num6)
                            this.velocity.X = -num6;
                    }
                }
                else if (this.type == 410)
                {
                    if (Math.Sign(this.velocity.X) != this.direction)
                        this.velocity.X *= 0.9f;
                    num6 = 6f;
                    num7 = 0.2f;
                }
                else if (this.type == 423)
                {
                    if (Math.Sign(this.velocity.X) != this.direction)
                        this.velocity.X *= 0.85f;
                    num6 = 10f;
                    num7 = 0.2f;
                }
                else if (this.type == 546)
                {
                    if (Math.Sign(this.velocity.X) != this.direction)
                        this.velocity.X *= 0.92f;
                    var num8 = MathHelper.Lerp(0.6f, 1f, Math.Abs(Main.windSpeedSet)) *
                                 (float) Math.Sign(Main.windSpeedSet);
                    if (!Main.player[this.target].ZoneSandstorm)
                        num8 = 0.0f;
                    num6 = (float) (5.0 + (double) num8 * (double) this.direction * 4.0);
                    num7 = 0.2f;
                }

                if ((double) this.velocity.X < -(double) num6 || (double) this.velocity.X > (double) num6)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * 0.8f;
                    }
                }
                else if ((double) this.velocity.X < (double) num6 && this.direction == 1)
                {
                    this.velocity.X += num7;
                    if ((double) this.velocity.X > (double) num6)
                        this.velocity.X = num6;
                }
                else if ((double) this.velocity.X > -(double) num6 && this.direction == -1)
                {
                    this.velocity.X -= num7;
                    if ((double) this.velocity.X < -(double) num6)
                        this.velocity.X = -num6;
                }
            }

            if ((double) this.velocity.Y >= 0.0)
            {
                var num8 = 0;
                if ((double) this.velocity.X < 0.0)
                    num8 = -1;
                if ((double) this.velocity.X > 0.0)
                    num8 = 1;
                var position = this.position;
                position.X += this.velocity.X;
                var index1 = (int) (((double) position.X + (double) (this.width / 2) +
                                     (double) ((this.width / 2 + 1) * num8)) / 16.0);
                var index2 = (int) (((double) position.Y + (double) this.height - 1.0) / 16.0);
                if (Main.tile[index1, index2] == null)
                    Main.tile[index1, index2] = new Tile();
                if (Main.tile[index1, index2 - 1] == null)
                    Main.tile[index1, index2 - 1] = new Tile();
                if (Main.tile[index1, index2 - 2] == null)
                    Main.tile[index1, index2 - 2] = new Tile();
                if (Main.tile[index1, index2 - 3] == null)
                    Main.tile[index1, index2 - 3] = new Tile();
                if (Main.tile[index1, index2 + 1] == null)
                    Main.tile[index1, index2 + 1] = new Tile();
                if ((double) (index1 * 16) < (double) position.X + (double) this.width &&
                    (double) (index1 * 16 + 16) > (double) position.X &&
                    (Main.tile[index1, index2].nactive() && !Main.tile[index1, index2].topSlope() &&
                     (!Main.tile[index1, index2 - 1].topSlope() &&
                      Main.tileSolid[(int) Main.tile[index1, index2].type]) &&
                     !Main.tileSolidTop[(int) Main.tile[index1, index2].type] ||
                     Main.tile[index1, index2 - 1].halfBrick() && Main.tile[index1, index2 - 1].nactive()) &&
                    ((!Main.tile[index1, index2 - 1].nactive() ||
                      !Main.tileSolid[(int) Main.tile[index1, index2 - 1].type] ||
                      Main.tileSolidTop[(int) Main.tile[index1, index2 - 1].type] ||
                      Main.tile[index1, index2 - 1].halfBrick() &&
                      (!Main.tile[index1, index2 - 4].nactive() ||
                       !Main.tileSolid[(int) Main.tile[index1, index2 - 4].type] ||
                       Main.tileSolidTop[(int) Main.tile[index1, index2 - 4].type])) &&
                     ((!Main.tile[index1, index2 - 2].nactive() ||
                       !Main.tileSolid[(int) Main.tile[index1, index2 - 2].type] ||
                       Main.tileSolidTop[(int) Main.tile[index1, index2 - 2].type]) &&
                      (!Main.tile[index1, index2 - 3].nactive() ||
                       !Main.tileSolid[(int) Main.tile[index1, index2 - 3].type] ||
                       Main.tileSolidTop[(int) Main.tile[index1, index2 - 3].type]) &&
                      (!Main.tile[index1 - num8, index2 - 3].nactive() ||
                       !Main.tileSolid[(int) Main.tile[index1 - num8, index2 - 3].type]))))
                {
                    var num9 = (float) (index2 * 16);
                    if (Main.tile[index1, index2].halfBrick())
                        num9 += 8f;
                    if (Main.tile[index1, index2 - 1].halfBrick())
                        num9 -= 8f;
                    if ((double) num9 < (double) position.Y + (double) this.height)
                    {
                        var num10 = position.Y + (float) this.height - num9;
                        if ((double) num10 <= 16.1)
                        {
                            this.gfxOffY += this.position.Y + (float) this.height - num9;
                            this.position.Y = num9 - (float) this.height;
                            this.stepSpeed = (double) num10 >= 9.0 ? 2f : 1f;
                        }
                    }
                }
            }

            if ((double) this.velocity.Y == 0.0)
            {
                var index1 = (int) (((double) this.position.X + (double) (this.width / 2) +
                                     (double) ((this.width / 2 + 2) * this.direction) +
                                     (double) this.velocity.X * 5.0) / 16.0);
                var index2 = (int) (((double) this.position.Y + (double) this.height - 15.0) / 16.0);
                if (Main.tile[index1, index2] == null)
                    Main.tile[index1, index2] = new Tile();
                if (Main.tile[index1, index2 - 1] == null)
                    Main.tile[index1, index2 - 1] = new Tile();
                if (Main.tile[index1, index2 - 2] == null)
                    Main.tile[index1, index2 - 2] = new Tile();
                if (Main.tile[index1, index2 - 3] == null)
                    Main.tile[index1, index2 - 3] = new Tile();
                if (Main.tile[index1, index2 + 1] == null)
                    Main.tile[index1, index2 + 1] = new Tile();
                if (Main.tile[index1 + this.direction, index2 - 1] == null)
                    Main.tile[index1 + this.direction, index2 - 1] = new Tile();
                if (Main.tile[index1 + this.direction, index2 + 1] == null)
                    Main.tile[index1 + this.direction, index2 + 1] = new Tile();
                if (Main.tile[index1 - this.direction, index2 + 1] == null)
                    Main.tile[index1 - this.direction, index2 + 1] = new Tile();
                var spriteDirection = this.spriteDirection;
                if (this.type == 423 || this.type == 410 || this.type == 546)
                    spriteDirection *= -1;
                if ((double) this.velocity.X < 0.0 && spriteDirection == -1 ||
                    (double) this.velocity.X > 0.0 && spriteDirection == 1)
                {
                    var flag4 = this.type == 410 || this.type == 423;
                    var num8 = 3f;
                    if (Main.tile[index1, index2 - 2].nactive() &&
                        Main.tileSolid[(int) Main.tile[index1, index2 - 2].type])
                    {
                        if (Main.tile[index1, index2 - 3].nactive() &&
                            Main.tileSolid[(int) Main.tile[index1, index2 - 3].type])
                        {
                            this.velocity.Y = -8.5f;
                            this.netUpdate = true;
                        }
                        else
                        {
                            this.velocity.Y = -7.5f;
                            this.netUpdate = true;
                        }
                    }
                    else if (Main.tile[index1, index2 - 1].nactive() && !Main.tile[index1, index2 - 1].topSlope() &&
                             Main.tileSolid[(int) Main.tile[index1, index2 - 1].type])
                    {
                        this.velocity.Y = -7f;
                        this.netUpdate = true;
                    }
                    else if ((double) this.position.Y + (double) this.height - (double) (index2 * 16) > 20.0 &&
                             Main.tile[index1, index2].nactive() &&
                             (!Main.tile[index1, index2].topSlope() &&
                              Main.tileSolid[(int) Main.tile[index1, index2].type]))
                    {
                        this.velocity.Y = -6f;
                        this.netUpdate = true;
                    }
                    else if ((this.directionY < 0 || (double) Math.Abs(this.velocity.X) > (double) num8) &&
                             (!flag4 || !Main.tile[index1, index2 + 1].nactive() ||
                              !Main.tileSolid[(int) Main.tile[index1, index2 + 1].type]) &&
                             ((!Main.tile[index1, index2 + 2].nactive() ||
                               !Main.tileSolid[(int) Main.tile[index1, index2 + 2].type]) &&
                              (!Main.tile[index1 + this.direction, index2 + 3].nactive() ||
                               !Main.tileSolid[(int) Main.tile[index1 + this.direction, index2 + 3].type])))
                    {
                        this.velocity.Y = -8f;
                        this.netUpdate = true;
                    }
                }
            }

            if (this.type == 423 && (double) Math.Abs(this.velocity.X) >= (double) num6 * 0.949999988079071)
            {
                var hitbox = this.Hitbox;
                for (var index = 0; index < 2; ++index)
                {
                    if (Main.rand.Next(3) == 0)
                    {
                        var dust = Main.dust[
                            Dust.NewDust(hitbox.TopLeft(), hitbox.Width, hitbox.Height, 242, 0.0f, 0.0f, 0, new Color(),
                                1f)];
                        dust.velocity = Vector2.Zero;
                        dust.noGravity = true;
                        dust.fadeIn = 1f;
                        dust.scale = 0.5f + Main.rand.NextFloat();
                    }
                }
            }

            if (this.type != 546)
                return;
            this.rotation += this.velocity.X * 0.05f;
            this.spriteDirection = -this.direction;
        }

        private void AI_107_ImprovedWalkers()
        {
            var flag1 = (double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0 && !this.justHit;
            var flag2 = false;
            var flag3 = false;
            var flag4 = false;
            var num1 = 32;
            var num2 = 15;
            var num3 = 9f;
            var flag5 = false;
            var num4 = 40f;
            var num5 = 30;
            var num6 = 0;
            var flag6 = false;
            var flag7 = true;
            var num7 = 0.9f;
            var flag8 = false;
            var flag9 = false;
            var flag10 = false;
            var flag11 = false;
            var flag12 = false;
            var flag13 = false;
            var flag14 = false;
            var flag15 = true;
            var num8 = 70;
            var num9 = num8 / 2;
            var num10 = 11f;
            var vector2_1 = Vector2.Zero;
            var Damage = 1;
            var Type = 81;
            var num11 = 700f;
            var num12 = 0.0f;
            var num13 = 0.1f;
            var nullable = new Vector2?();
            var max1 = 0.5f;
            var num14 = 1;
            var num15 = 1f;
            var flag16 = false;
            var flag17 = true;
            var flag18 = false;
            var num16 = 30;
            var flag19 = false;
            var flag20 = false;
            var flag21 = false;
            var flag22 = false;
            var legacySoundStyle = (LegacySoundStyle) null;
            var maxValue1 = 0;
            var flag23 = false;
            var max2 = 1f;
            var num17 = 0.07f;
            var num18 = 0.8f;
            var num19 = (float) (this.width / 2 + 6);
            var flag24 = this.directionY < 0;
            var flag25 = false;
            var num20 = 1;
            var flag26 = false;
            var num21 = 0.025f;
            var targetData = this.GetTargetData(true);
            if (targetData.Type == NPCTargetType.NPC && Main.npc[this.TranslatedTargetIndex].type == 548 &&
                Main.npc[this.TranslatedTargetIndex].dontTakeDamageFromHostiles)
            {
                NPCUtils.TargetClosestOldOnesInvasion(this, true, new Vector2?());
                targetData = this.GetTargetData(true);
            }

            if (!targetData.Invalid)
                flag2 = !Collision.CanHit(this.Center, 0, 0, targetData.Center, 0, 0) &&
                        (this.direction == Math.Sign(targetData.Center.X - this.Center.X) || this.noGravity &&
                         (double) this.Distance(targetData.Center) > 50.0 &&
                         (double) this.Center.Y > (double) targetData.Center.Y);
            var flag27 = flag2 & (double) this.ai[0] <= 0.0;
            if (flag27)
            {
                if ((double) this.velocity.Y == 0.0 || (double) Math.Abs(targetData.Center.Y - this.Center.Y) > 800.0)
                {
                    this.noGravity = true;
                    this.noTileCollide = true;
                }
            }
            else
            {
                this.noGravity = false;
                this.noTileCollide = false;
            }

            var flag28 = NPCID.Sets.FighterUsesDD2PortalAppearEffect[this.type];
            var flag29 = true;
            Vector2 size;
            switch (this.type)
            {
                case 552:
                case 553:
                case 554:
                    legacySoundStyle = SoundID.DD2_GoblinScream;
                    maxValue1 = 1000;
                    flag5 = true;
                    flag20 = DD2Event.EnemiesShouldChasePlayers;
                    if (this.type == 553)
                    {
                        num17 += 0.01f;
                        max2 += 0.2f;
                    }

                    if (this.type == 554)
                    {
                        num17 += 0.02f;
                        max2 += 0.4f;
                    }

                    if ((double) this.localAI[3] < 60.0)
                    {
                        num17 = (float) (0.00999999977648258 + (double) this.localAI[3] / 60.0 * 0.0500000007450581);
                        break;
                    }

                    break;
                case 555:
                case 556:
                case 557:
                    maxValue1 = 800;
                    legacySoundStyle = SoundID.DD2_GoblinBomberScream;
                    var flag30 = (double) this.localAI[3] >= 60.0;
                    flag20 = DD2Event.EnemiesShouldChasePlayers;
                    flag23 = true;
                    flag12 = true;
                    flag15 = (double) this.ai[1] > 18.0;
                    num8 = 42;
                    num9 = 18;
                    Type = 681;
                    Damage = 10;
                    vector2_1.Y -= 14f;
                    num13 = 0.4f;
                    max1 = 0.5f;
                    num11 = 280f;
                    num10 = 6f;
                    if (!flag30)
                    {
                        num11 = 1f;
                        num17 = (float) (0.00999999977648258 + (double) this.localAI[3] / 60.0 * 0.0500000007450581);
                    }

                    if (this.type == 555)
                    {
                        max2 = 0.88f;
                        max1 = 0.6f;
                        Damage = Main.expertMode ? 15 : 20;
                    }

                    if (this.type == 555)
                    {
                        max2 = 0.88f;
                        max1 = 0.6f;
                        Damage = Main.expertMode ? 25 : 30;
                    }

                    if (this.type == 557)
                    {
                        max2 = 1.12f;
                        max1 = 0.4f;
                        Damage = Main.expertMode ? 35 : 40;
                    }

                    if ((double) this.ai[1] == (double) num9)
                    {
                        Main.PlayTrackedSound((SoundStyle) SoundID.DD2_GoblinBomberThrow, this.Center);
                        break;
                    }

                    break;
                case 561:
                case 562:
                case 563:
                    var flag31 = (double) this.localAI[3] >= 60.0;
                    if ((double) this.ai[1] == 82.0)
                    {
                        Main.PlayTrackedSound((SoundStyle) SoundID.DD2_JavelinThrowersAttack, this.Center);
                        maxValue1 = 7;
                        legacySoundStyle = SoundID.DD2_JavelinThrowersTaunt;
                    }

                    flag20 = DD2Event.EnemiesShouldChasePlayers;
                    flag23 = true;
                    flag12 = true;
                    flag15 = (double) this.ai[1] > 82.0;
                    num8 = 90;
                    num9 = 82;
                    Type = 662;
                    if (this.type == 563)
                        Type = 685;
                    vector2_1.Y -= 14f;
                    num13 = 0.0f;
                    max1 = 0.5f;
                    num11 = 600f;
                    num10 = 13f;
                    if (!flag31)
                    {
                        num11 = 1f;
                        num17 = (float) (0.00999999977648258 + (double) this.localAI[3] / 60.0 * 0.0500000007450581);
                    }

                    if (this.type == 561)
                    {
                        max2 = 0.88f;
                        max1 = 0.6f;
                        Damage = Main.expertMode ? 10 : 15;
                        num10 = 11.5f;
                        num11 -= 100f;
                    }

                    if (this.type == 562)
                    {
                        max2 = 0.94f;
                        max1 = 0.5f;
                        Damage = Main.expertMode ? 20 : 30;
                        num10 = 12.2f;
                        num11 -= 50f;
                    }

                    if (this.type == 563)
                    {
                        max2 = 1f;
                        max1 = 0.4f;
                        Damage = Main.expertMode ? 30 : 45;
                        break;
                    }

                    break;
                case 566:
                case 567:
                    DelegateMethods.v3_1 = new Vector3(0.3f, 0.05f, 0.45f) * 1.5f;
                    Utils.PlotTileLine(this.Top, this.Bottom, (float) this.width,
                        new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
                    flag20 = DD2Event.EnemiesShouldChasePlayers;
                    var flag32 = (double) this.localAI[3] >= 120.0;
                    if (!flag32)
                        num17 = 0.0f;
                    if (flag32)
                    {
                        this.dontTakeDamage = false;
                        break;
                    }

                    this.dontTakeDamage = true;
                    this.velocity.X = 0.0f;
                    flag23 = true;
                    flag19 = true;
                    this.ai[3] = 0.0f;
                    if ((double) this.localAI[3] == 0.0)
                        this.alpha = (int) byte.MaxValue;
                    ++this.localAI[3];
                    var num22 = this.localAI[3];
                    if ((double) num22 >= 110.0)
                    {
                        this.alpha -= 26;
                        if (this.alpha < 0)
                            this.alpha = 0;
                    }

                    if ((double) num22 >= 100.0)
                    {
                        var num23 = (int) this.localAI[3] / 20;
                        size = this.Size;
                        var num24 = size.Length() / 2f / 20f;
                        var maxValue2 = 5;
                        for (var index = 0; index < num23 * 2; ++index)
                        {
                            if (Main.rand.Next(maxValue2) == 0)
                            {
                                var dust = Dust.NewDustDirect(this.position, this.width, this.height, 236,
                                    this.velocity.X * 1f, 0.0f, 0, new Color(), 1f);
                                dust.scale = 1f;
                                dust.fadeIn = 0.3f;
                                dust.velocity =
                                    new Vector2(Main.rand.NextFloatDirection() * 1f, -dust.velocity.Length()) * 1.25f *
                                    num24;
                            }
                        }
                    }
                    else
                    {
                        var num23 = (int) this.localAI[3] / 10;
                        size = this.Size;
                        var num24 = size.Length() / 2f / 20f;
                        var maxValue2 = 5;
                        for (var index = 0; (double) index < (double) num23 * 1.29999995231628; ++index)
                        {
                            if (Main.rand.Next(maxValue2) == 0)
                            {
                                var dust = Dust.NewDustDirect(
                                    this.position + new Vector2((float) (-this.width / 2), 8f), this.width + this.width,
                                    this.height, 27, this.velocity.X * 1f, 0.0f, 100, new Color(), 1f);
                                dust.scale = 1.1f;
                                dust.fadeIn = 0.1f;
                                dust.velocity =
                                    new Vector2(Main.rand.NextFloatDirection() * 0.1f, -dust.velocity.Length()) *
                                    1.05f * num24 * Main.rand.NextFloat();
                                dust.velocity.Y *= Utils.InverseLerp((float) this.width * 0.75f, 0.0f,
                                    Math.Abs(dust.position.X - this.Center.X), true);
                            }
                        }
                    }

                    if ((double) num22 > 100.0 && (int) num22 % 4 == 0)
                    {
                        Gore.NewGoreDirect(this.Left, new Vector2(0.0f, -3f), Utils.SelectRandom<int>(Main.rand,
                            new int[2]
                            {
                                971,
                                972
                            }), 0.85f).velocity.X *= 0.8f;
                        break;
                    }

                    break;
                case 568:
                case 569:
                    num5 = 110;
                    num17 = 0.16f;
                    num18 = 0.7f;
                    max2 = 1.4f;
                    flag5 = true;
                    num4 = 600f;
                    flag20 = DD2Event.EnemiesShouldChasePlayers;
                    if ((double) this.localAI[3] < 60.0)
                        num17 = (float) (0.00999999977648258 + (double) this.localAI[3] / 60.0 * 0.0500000007450581);
                    SlotId slotId1;
                    if ((double) this.ai[0] == 0.0)
                    {
                        var localAi = this.localAI;
                        var index = 1;
                        //Fix By GScience
                        localAi[index] = SlotId.Invalid.ToFloat();
                    }

                    if ((double) this.ai[0] == 1.0)
                    {
                        this.HitSound = SoundID.DD2_WitherBeastCrystalImpact;
                        ++this.ai[0];
                        if (Main.rand.Next(10) == 0)
                        {
                            var dust = Dust.NewDustDirect(this.TopLeft, this.width, this.height, 271, 0.0f, -3f, 0,
                                Color.Transparent, 0.6f);
                            dust.velocity.X /= 2f;
                            dust.noGravity = true;
                            dust.fadeIn = 1.5f;
                            dust.position.Y += 4f;
                        }

                        var activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
                        if (activeSound == null)
                        {
                            var localAi = this.localAI;
                            var index = 1;
                            //Fix By GScience
                            localAi[index] =
                                Main.PlayTrackedSound((SoundStyle) SoundID.DD2_WitherBeastAuraPulse, this.Center)
                                    .ToFloat();
                        }
                        else
                            activeSound.Position = this.Center;

                        ++this.localAI[0];
                        if ((double) this.localAI[0] > 60.0 && Main.rand.Next(10) == 0)
                        {
                            var vector2_2 = this.Center + (Main.rand.NextFloat() * 6.283185f).ToRotationVector2() *
                                                400f * (float) (0.300000011920929 +
                                                                0.699999988079071 * (double) Main.rand.NextFloat());
                            var tileCoordinates = vector2_2.ToTileCoordinates();
                            if (!WorldGen.SolidTile(tileCoordinates.X, tileCoordinates.Y))
                            {
                                var dust = Dust.NewDustPerfect(vector2_2, 27, new Vector2?(new Vector2(0.0f, -3f)), 0,
                                    new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue,
                                        (int) sbyte.MaxValue), 1.5f);
                                dust.velocity = this.DirectionTo(dust.position) * dust.velocity.Length();
                                dust.fadeIn = 1.5f;
                            }
                        }

                        if (Main.netMode != 2)
                        {
                            var player = Main.player[Main.myPlayer];
                            if (!player.dead && player.active &&
                                (double) (player.Center - this.Center).Length() < 400.0)
                                player.AddBuff(195, 3, false);
                        }

                        if ((double) this.ai[1] > 0.0)
                            --this.ai[1];
                        if ((double) this.ai[1] <= 0.0)
                        {
                            this.ai[1] = 60f;
                            if (Main.netMode != 1)
                            {
                                var healAmount = this.lifeMax / 20;
                                if (healAmount > this.lifeMax - this.life)
                                    healAmount = this.lifeMax - this.life;
                                if (healAmount > 0)
                                {
                                    this.life += healAmount;
                                    this.HealEffect(healAmount, true);
                                    this.netUpdate = true;
                                    break;
                                }

                                break;
                            }

                            break;
                        }

                        break;
                    }

                    break;
                case 570:
                case 571:
                    flag20 = DD2Event.EnemiesShouldChasePlayers;
                    flag23 = true;
                    flag12 = true;
                    flag15 = (double) this.ai[1] > 40.0;
                    num8 = 60;
                    num9 = 40;
                    if (this.type == 571 && (double) this.ai[1] > 10.0 &&
                        ((double) this.ai[1] <= 40.0 && (int) this.ai[1] % 6 == 0))
                        num9 = (int) this.ai[1] - 1;
                    if (this.type == 570 && (double) this.ai[1] > 10.0 &&
                        ((double) this.ai[1] <= 40.0 && (int) this.ai[1] % 9 == 0))
                        num9 = (int) this.ai[1] - 1;
                    Type = 671;
                    vector2_1.X += (float) (22 * this.direction);
                    num13 = 0.15f;
                    max1 = 1.5f;
                    num11 = 600f;
                    num10 = 13f;
                    num14 = 1;
                    num15 = 0.0f;
                    if (this.type == 570)
                        max1 = 2.5f;
                    Damage = Main.expertMode ? 25 : 35;
                    if (this.type == 571)
                        Damage = Main.expertMode ? 45 : 60;
                    max2 = 0.77f;
                    if ((double) this.ai[0] > 0.0)
                    {
                        if ((double) this.ai[1] == 40.0)
                            Main.PlayTrackedSound((SoundStyle) SoundID.DD2_DrakinShot, this.Center);
                        else if ((double) this.ai[1] == 60.0)
                            Main.PlayTrackedSound((SoundStyle) SoundID.DD2_DrakinBreathIn, this.Center);
                    }

                    if ((double) this.localAI[3] < 60.0)
                    {
                        num11 = 1f;
                        num17 = (float) (0.00999999977648258 + (double) this.localAI[3] / 60.0 * 0.0500000007450581);
                        break;
                    }

                    break;
                case 572:
                case 573:
                    SlotId slotId2;
                    if ((double) this.localAI[3] == 0.0)
                    {
                        var localAi1 = this.localAI;
                        var index1 = 0;
                        //Fix By GScience
                        localAi1[index1] = SlotId.Invalid.ToFloat();
                        var localAi2 = this.localAI;
                        var index2 = 1;
                        //Fix By GScience
                        localAi2[index2] = SlotId.Invalid.ToFloat();
                    }

                    flag20 = DD2Event.EnemiesShouldChasePlayers;
                    if ((double) this.ai[1] == 2.0)
                    {
                        Main.GetActiveSound(SlotId.FromFloat(this.localAI[0]))?.Stop();
                        Main.GetActiveSound(SlotId.FromFloat(this.localAI[1]))?.Stop();
                        this.position = this.Center;
                        this.width = this.height = 192;
                        this.Center = this.position;
                        this.velocity = Vector2.Zero;
                        this.damage = (int) (80.0 * (double) Main.damageMultiplier);
                        this.alpha = (int) byte.MaxValue;
                        for (var index1 = 0; index1 < 4; ++index1)
                        {
                            var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                                this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                            Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                         (float) Main.rand.NextDouble() * (float) this.width / 2f;
                        }

                        for (var index1 = 0; index1 < 20; ++index1)
                        {
                            var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                                this.height, 6, 0.0f, 0.0f, 200, new Color(), 3.7f);
                            Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                         (float) Main.rand.NextDouble() * (float) this.width / 2f;
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].velocity *= 3f;
                            var index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                                this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
                            Main.dust[index3].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                         (float) Main.rand.NextDouble() * (float) this.width / 4f;
                            Main.dust[index3].velocity *= 2f;
                            Main.dust[index3].noGravity = true;
                            Main.dust[index3].fadeIn = 2.5f;
                        }

                        for (var index1 = 0; index1 < 6; ++index1)
                        {
                            var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                                this.height, 6, 0.0f, 0.0f, 0, new Color(), 2.7f);
                            Main.dust[index2].position =
                                this.Center +
                                Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                    .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                                (float) this.width / 2f;
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].velocity *= 3f;
                        }

                        for (var index1 = 0; index1 < 12; ++index1)
                        {
                            var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                                this.height, 31, 0.0f, 0.0f, 0, new Color(), 1.5f);
                            Main.dust[index2].position =
                                this.Center +
                                Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                    .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                                (float) this.width / 2f;
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].velocity *= 3f;
                        }

                        for (var index1 = 0; index1 < 5; ++index1)
                        {
                            var index2 =
                                Gore.NewGore(
                                    this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f,
                                        (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f,
                                    new Vector2(), Main.rand.Next(61, 64), 1f);
                            Main.gore[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                         (float) Main.rand.NextDouble() * (float) this.width / 2f;
                            Main.gore[index2].velocity *= 0.3f;
                            Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
                            Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
                        }

                        ++this.ai[0];
                        if ((double) this.ai[0] < 3.0)
                            return;
                        Main.PlayTrackedSound((SoundStyle) SoundID.DD2_KoboldExplosion, this.Center);
                        this.life = 0;
                        this.HitEffect(0, 10.0);
                        this.active = false;
                        return;
                    }

                    if ((double) this.ai[0] > 0.0 && (double) this.ai[1] == 0.0 && this.life > 0)
                    {
                        //Fix By GScience
                        if (!SlotId.FromFloat(this.localAI[0]).IsValid)
                        {
                            var localAi = this.localAI;
                            var index = 0;
                            //Fix By GScience
                            localAi[index] = Main.PlayTrackedSound((SoundStyle) SoundID.DD2_KoboldIgnite, this.Center)
                                .ToFloat();
                        }

                        ++this.localAI[2];
                        if ((double) this.localAI[2] == 30.0)
                        {
                            var localAi1 = this.localAI;
                            var index1 = 0;
                            //Fix By GScience
                            localAi1[index1] =
                                Main.PlayTrackedSound((SoundStyle) SoundID.DD2_KoboldIgniteLoop, this.Center).ToFloat();
                            var localAi2 = this.localAI;
                            var index2 = 1;
                            //Fix By GScience
                            localAi2[index2] =
                                Main.PlayTrackedSound((SoundStyle) SoundID.DD2_KoboldScreamChargeLoop, this.Center)
                                    .ToFloat();
                        }
                    }

                    if ((double) this.ai[0] > 0.0 && (double) this.ai[1] == 1.0)
                    {
                        this.ai[0] = 0.0f;
                        this.ai[1] = 2f;
                        this.netUpdate = true;
                        return;
                    }

                    max2 = 0.88f;
                    if ((double) this.ai[0] == 1.0)
                        this.ai[1] = 1f;
                    if ((double) this.ai[0] == 0.0 && (double) this.ai[1] == 1.0)
                    {
                        var activeSound1 = Main.GetActiveSound(SlotId.FromFloat(this.localAI[0]));
                        if (activeSound1 == null)
                        {
                            var localAi = this.localAI;
                            var index = 0;
                            //Fix By GScience
                            localAi[index] =
                                Main.PlayTrackedSound((SoundStyle) SoundID.DD2_KoboldIgniteLoop, this.Center).ToFloat();
                        }
                        else
                            activeSound1.Position = this.Center;

                        var activeSound2 = Main.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
                        if (activeSound2 == null)
                        {
                            var localAi = this.localAI;
                            var index = 1;
                            //Fix By GScience
                            localAi[index] =
                                Main.PlayTrackedSound((SoundStyle) SoundID.DD2_KoboldScreamChargeLoop, this.Center)
                                    .ToFloat();
                        }
                        else
                            activeSound2.Position = this.Center;
                    }

                    if ((double) this.ai[1] > 0.0 && (double) this.ai[0] == 0.0)
                    {
                        flag5 = true;
                        num5 = 40;
                        num4 = 64f;
                        num17 = 0.3f;
                        max2 = 4f;
                        var Position = this.Center + new Vector2((float) (this.spriteDirection * 12), 0.0f);
                        if (Main.rand.Next(6) == 0)
                        {
                            var dust = Dust.NewDustDirect(Position, 1, 1, 213, (float) Main.rand.Next(-2, 3),
                                (float) Main.rand.Next(-2, 3), 100,
                                new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0), 1f);
                            dust.noGravity = true;
                            dust.fadeIn = (float) ((double) dust.scale + 1.0 +
                                                   0.00999999977648258 * (double) Main.rand.Next(0, 51));
                            dust.velocity *= 0.3f;
                            dust.velocity.X += (float) -this.spriteDirection * 1.2f;
                            dust.velocity.Y += -3.5f;
                            dust.velocity.X += this.velocity.X;
                        }

                        if (Main.rand.Next(12) == 0)
                        {
                            var dust = Dust.NewDustPerfect(Position, 6, new Vector2?(this.velocity), 100, new Color(),
                                1f);
                            dust.noGravity = true;
                            dust.velocity.Y -= 1f + Main.rand.NextFloat();
                            dust.scale = 1.1f;
                            dust.fadeIn = 0.5f;
                            dust.customData = (object) this;
                        }
                    }
                    else
                    {
                        flag5 = true;
                        num5 = 40;
                        num4 = 700f;
                    }

                    if ((double) this.localAI[3] < 60.0)
                    {
                        num17 = (float) (0.00999999977648258 + (double) this.localAI[3] / 60.0 * 0.0500000007450581);
                        break;
                    }

                    break;
                case 576:
                case 577:
                    maxValue1 = 700;
                    legacySoundStyle = SoundID.DD2_OgreRoar;
                    num19 -= 32f;
                    flag5 = true;
                    num6 = 60;
                    num4 = 130f;
                    num5 = 44;
                    flag20 = DD2Event.EnemiesShouldChasePlayers;
                    num7 = 0.7f;
                    if ((double) this.localAI[0] > 0.0)
                        --this.localAI[0];
                    if ((double) this.ai[0] <= 0.0)
                    {
                        var num23 = this.ai[1];
                        var num24 = this.Distance(targetData.Center);
                        if ((double) this.localAI[3] >= 60.0)
                        {
                            if ((double) num24 <= (double) num4 + 300.0 && (double) this.localAI[0] <= 0.0)
                                this.ai[1] = 2f;
                            else if ((double) num24 > (double) num4 + 30.0)
                                this.ai[1] = 1f;
                            else if ((double) num24 <= (double) num4)
                            {
                                this.ai[1] = 0.0f;
                                if ((double) num23 == 1.0)
                                    this.ai[0] = 0.0f;
                            }
                        }

                        if ((double) num23 != (double) this.ai[1])
                            this.netUpdate = true;
                    }
                    else if ((double) this.ai[1] == 2.0)
                        this.localAI[0] = 300f;

                    switch ((int) this.ai[1])
                    {
                        case 0:
                            num5 = 44;
                            if ((double) this.ai[0] == 40.0)
                            {
                                Main.PlayTrackedSound((SoundStyle) SoundID.DD2_OgreAttack, this.Center);
                                break;
                            }

                            break;
                        case 1:
                            flag3 = true;
                            num5 = 90;
                            num4 = 1000f;
                            num6 = 240;
                            Damage = this.type != 576 ? (Main.expertMode ? 30 : 40) : (Main.expertMode ? 30 : 40);
                            flag15 = false;
                            vector2_1 = new Vector2((float) (this.direction * 30), -70f);
                            Type = 676;
                            if ((double) this.ai[0] == 80.0)
                            {
                                Main.PlayTrackedSound((SoundStyle) SoundID.DD2_OgreSpit, this.Center);
                                break;
                            }

                            break;
                        case 2:
                            num5 = 90;
                            num4 = 250f;
                            flag4 = true;
                            Damage = this.type != 576 ? (Main.expertMode ? 40 : 60) : (Main.expertMode ? 40 : 60);
                            num9 = 36;
                            num1 = 56;
                            num2 = 41;
                            num3 = 13f;
                            flag3 = true;
                            Type = 683;
                            flag15 = false;
                            vector2_1 = new Vector2((float) (-this.direction * 20), (float) (this.height / 2 - 1));
                            if ((double) this.ai[0] == 40.0)
                            {
                                Main.PlayTrackedSound((SoundStyle) SoundID.DD2_OgreGroundPound, this.Center);
                                break;
                            }

                            break;
                    }

                    if ((double) this.ai[0] < (double) -num6)
                    {
                        this.ai[0] = (float) -num6;
                        break;
                    }

                    break;
            }

            if (flag26)
            {
                var flag33 = (double) this.velocity.Y == 0.0;
                for (var index = 0; index < 200; ++index)
                {
                    if (index != this.whoAmI && Main.npc[index].active &&
                        (Main.npc[index].type == this.type &&
                         (double) Math.Abs(this.position.X - Main.npc[index].position.X) +
                         (double) Math.Abs(this.position.Y - Main.npc[index].position.Y) < (double) this.width))
                    {
                        if ((double) this.position.X < (double) Main.npc[index].position.X)
                            this.velocity.X -= num21;
                        else
                            this.velocity.X += num21;
                        if ((double) this.position.Y < (double) Main.npc[index].position.Y)
                            this.velocity.Y -= num21;
                        else
                            this.velocity.Y += num21;
                    }
                }

                if (flag33)
                    this.velocity.Y = 0.0f;
            }

            if (flag28)
            {
                if ((double) this.localAI[3] == 0.0)
                    this.alpha = (int) byte.MaxValue;
                if ((double) this.localAI[3] == 30.0)
                    Main.PlayTrackedSound((SoundStyle) SoundID.DD2_EtherianPortalSpawnEnemy, this.Center);
                if ((double) this.localAI[3] < 60.0)
                {
                    ++this.localAI[3];
                    this.alpha -= 5;
                    if (this.alpha < 0)
                        this.alpha = 0;
                    var num23 = (int) this.localAI[3] / 10;
                    size = this.Size;
                    var num24 = size.Length() / 2f / 20f;
                    var maxValue2 = 5;
                    if (this.type == 576 || this.type == 577)
                        maxValue2 = 1;
                    for (var index = 0; index < num23; ++index)
                    {
                        if (Main.rand.Next(maxValue2) == 0)
                        {
                            var dust = Dust.NewDustDirect(this.position, this.width, this.height, 27,
                                this.velocity.X * 1f, 0.0f, 100, new Color(), 1f);
                            dust.scale = 0.55f;
                            dust.fadeIn = 0.7f;
                            dust.velocity *= 0.1f * num24;
                            dust.velocity += this.velocity;
                        }
                    }
                }
            }

            var flag34 = false;
            if ((flag12 || flag5) && (double) this.ai[0] > 0.0)
                flag17 = false;
            if (flag12 && (double) this.ai[1] > 0.0)
                flag21 = true;
            if (flag5 && (double) this.ai[0] > 0.0)
                flag21 = true;
            if (flag5)
            {
                if ((double) this.ai[0] < 0.0)
                {
                    ++this.ai[0];
                    flag1 = false;
                }

                if ((double) this.ai[0] == 0.0 && ((double) this.velocity.Y == 0.0 || flag6) &&
                    targetData.Type != NPCTargetType.None &&
                    ((Collision.CanHit(this.position, this.width, this.height, targetData.Position, targetData.Width,
                          targetData.Height) ||
                      Collision.CanHitLine(this.position, this.width, this.height, targetData.Position,
                          targetData.Width, targetData.Height)) &&
                     (double) (targetData.Center - this.Center).Length() < (double) num4))
                {
                    this.ai[0] = (float) num5;
                    this.netUpdate = true;
                }

                if ((double) this.ai[0] > 0.0)
                {
                    this.spriteDirection = this.direction * num20;
                    if (flag7)
                    {
                        this.velocity.X *= num7;
                        flag23 = true;
                        flag19 = true;
                        this.ai[3] = 0.0f;
                    }

                    --this.ai[0];
                    if ((double) this.ai[0] == 0.0)
                        this.ai[0] = (float) -num6;
                }
            }

            if (flag3 && (double) this.ai[0] > 0.0)
            {
                if (flag15)
                {
                    NPCUtils.TargetClosestOldOnesInvasion(this, true, new Vector2?());
                    targetData = this.GetTargetData(true);
                }

                if ((double) this.ai[0] == (double) num9)
                {
                    var vector2_2 = this.Center + vector2_1;
                    var v = targetData.Center - vector2_2;
                    v.Y -= Math.Abs(v.X) * num13;
                    var vector2_3 = v.SafeNormalize(-Vector2.UnitY) * num10;
                    for (var index = 0; index < num14; ++index)
                    {
                        var vector2_4 = vector2_3;
                        var vector2_5 = vector2_2;
                        var velocity = !nullable.HasValue
                            ? vector2_4 + Utils.RandomVector2(Main.rand, -max1, max1)
                            : vector2_4 + nullable.Value;
                        var position = vector2_5 + vector2_3 * num15;
                        if (Main.netMode != 1)
                            Projectile.NewProjectile(position, velocity, Type, Damage, 0.0f, Main.myPlayer, 0.0f, 0.0f);
                    }
                }
            }

            if (flag4 && (double) this.ai[0] > 0.0)
            {
                if ((double) this.velocity.Y != 0.0 && (double) this.ai[0] < (double) num2)
                    this.ai[0] = (float) num2;
                if ((double) this.ai[0] == (double) num1)
                    this.velocity.Y = -num3;
            }

            if (!flag16 && flag17)
            {
                if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X * (double) this.direction < 0.0)
                    flag18 = true;
                if ((double) this.position.X == (double) this.oldPosition.X || (double) this.ai[3] >= (double) num16 ||
                    flag18)
                    ++this.ai[3];
                else if ((double) Math.Abs(this.velocity.X) > 0.899999976158142 && (double) this.ai[3] > 0.0)
                    --this.ai[3];
                if ((double) this.ai[3] > (double) (num16 * 10))
                    this.ai[3] = 0.0f;
                if (this.justHit && !flag29)
                    this.ai[3] = 0.0f;
                if ((double) this.ai[3] == (double) num16)
                {
                    this.netUpdate = true;
                    if (flag29)
                    {
                        this.noGravity = true;
                        this.noTileCollide = true;
                        this.position.X += (float) (this.direction * this.width * 2);
                        var num23 = 20;
                        size = this.Size;
                        var num24 = size.Length() / 2f / 20f;
                        var maxValue2 = 5;
                        if (this.type == 576 || this.type == 577)
                            maxValue2 = 1;
                        for (var index = 0; index < num23; ++index)
                        {
                            if (Main.rand.Next(maxValue2) == 0)
                            {
                                var dust = Dust.NewDustDirect(this.position, this.width, this.height, 27,
                                    this.velocity.X * 1f, 0.0f, 100, new Color(), 1f);
                                dust.scale = 0.55f;
                                dust.fadeIn = 0.7f;
                                dust.velocity *= 3f * num24;
                                dust.noGravity = true;
                                dust.fadeIn = 1.5f;
                                dust.velocity *= 3f;
                            }
                        }

                        return;
                    }
                }
            }

            if (!flag19)
            {
                if ((double) this.ai[3] < (double) num16 && flag20)
                {
                    if (maxValue1 > 0 && Main.rand.Next(maxValue1) == 0)
                        Main.PlayTrackedSound((SoundStyle) legacySoundStyle, this.Center);
                    NPCUtils.TargetClosestOldOnesInvasion(this, true, new Vector2?());
                    targetData = this.GetTargetData(true);
                }
                else if (!flag21)
                {
                    if (flag22 && this.timeLeft > 10)
                        this.timeLeft = 10;
                    if ((double) this.velocity.X == 0.0)
                    {
                        if ((double) this.velocity.Y == 0.0)
                        {
                            ++this.ai[2];
                            if ((double) this.ai[2] >= 2.0)
                            {
                                this.direction *= -1;
                                this.spriteDirection = this.direction * num20;
                                this.ai[2] = 0.0f;
                            }
                        }
                    }
                    else
                        this.ai[2] = 0.0f;

                    if (this.direction == 0)
                        this.direction = 1;
                }
            }

            if (!flag23)
            {
                if ((double) this.velocity.X < -(double) max2 || (double) this.velocity.X > (double) max2)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        var npc = this;
                        npc.velocity = npc.velocity * num18;
                    }
                }
                else if ((double) this.velocity.X < (double) max2 && this.direction == 1 ||
                         (double) this.velocity.X > -(double) max2 && this.direction == -1)
                    this.velocity.X = MathHelper.Clamp(this.velocity.X + num17 * (float) this.direction, -max2, max2);
            }

            if (flag12)
            {
                if (this.confused)
                {
                    this.ai[0] = 0.0f;
                }
                else
                {
                    if ((double) this.ai[1] > 0.0)
                        --this.ai[1];
                    if (this.justHit)
                    {
                        this.ai[1] = 30f;
                        this.ai[0] = 0.0f;
                    }

                    if ((double) this.ai[0] > 0.0)
                    {
                        if (flag15)
                        {
                            NPCUtils.TargetClosestOldOnesInvasion(this, true, new Vector2?());
                            targetData = this.GetTargetData(true);
                        }

                        if ((double) this.ai[1] == (double) num9)
                        {
                            var vector2_2 = this.Center + vector2_1;
                            var v = targetData.Center - vector2_2;
                            v.Y -= Math.Abs(v.X) * num13;
                            var vector2_3 = v.SafeNormalize(-Vector2.UnitY) * num10;
                            for (var index = 0; index < num14; ++index)
                            {
                                var vector2_4 = vector2_2;
                                var vector2_5 = vector2_3;
                                var velocity = !nullable.HasValue
                                    ? vector2_5 + Utils.RandomVector2(Main.rand, -max1, max1)
                                    : vector2_5 + nullable.Value;
                                var position = vector2_4 + velocity * num15;
                                if (Main.netMode != 1)
                                    Projectile.NewProjectile(position, velocity, Type, Damage, 0.0f, Main.myPlayer,
                                        0.0f, 0.0f);
                            }

                            this.ai[0] = (double) Math.Abs(vector2_3.Y) <= (double) Math.Abs(vector2_3.X) * 2.0
                                ? ((double) Math.Abs(vector2_3.X) <= (double) Math.Abs(vector2_3.Y) * 2.0
                                    ? ((double) vector2_3.Y > 0.0 ? 2f : 4f)
                                    : 3f)
                                : ((double) vector2_3.Y > 0.0 ? 1f : 5f);
                        }

                        if ((double) this.velocity.Y != 0.0 && !flag14 || (double) this.ai[1] <= 0.0)
                        {
                            this.ai[0] = 0.0f;
                            this.ai[1] = 0.0f;
                        }
                        else if (!flag13)
                        {
                            this.velocity.X *= 0.9f;
                            this.spriteDirection = this.direction * num20;
                        }
                    }

                    if (((double) this.ai[0] <= 0.0 || flag13) && ((double) this.velocity.Y == 0.0 || flag14) &&
                        ((double) this.ai[1] <= 0.0 && targetData.Type != NPCTargetType.None &&
                         Collision.CanHit(this.position, this.width, this.height, targetData.Position, targetData.Width,
                             targetData.Height)))
                    {
                        var vector2_2 = targetData.Center - this.Center;
                        if ((double) vector2_2.Length() < (double) num11)
                        {
                            this.netUpdate = true;
                            this.velocity.X *= 0.5f;
                            this.ai[0] = 3f;
                            this.ai[1] = (float) num8;
                            this.ai[0] = (double) Math.Abs(vector2_2.Y) <= (double) Math.Abs(vector2_2.X) * 2.0
                                ? ((double) Math.Abs(vector2_2.X) <= (double) Math.Abs(vector2_2.Y) * 2.0
                                    ? ((double) vector2_2.Y > 0.0 ? 2f : 4f)
                                    : 3f)
                                : ((double) vector2_2.Y > 0.0 ? 1f : 5f);
                        }
                    }

                    if ((double) this.ai[0] <= 0.0 || flag13)
                    {
                        var flag33 = (double) this.Distance(targetData.Center) < (double) num12;
                        if (flag33 && Collision.CanHitLine(this.position, this.width, this.height, targetData.Position,
                                targetData.Width, targetData.Height))
                            this.ai[3] = 0.0f;
                        if ((double) this.velocity.X < -(double) max2 || (double) this.velocity.X > (double) max2 ||
                            flag33)
                        {
                            if ((double) this.velocity.Y == 0.0)
                                this.velocity.X *= num18;
                        }
                        else if ((double) this.velocity.X < (double) max2 && this.direction == 1 ||
                                 (double) this.velocity.X > -(double) max2 && this.direction == -1)
                            this.velocity.X = MathHelper.Clamp(this.velocity.X + num17 * (float) this.direction, -max2,
                                max2);
                    }
                }
            }

            if ((double) this.velocity.Y == 0.0)
            {
                var index1 = (int) ((double) this.Bottom.Y + 7.0) / 16;
                var num23 = (int) this.Left.X / 16;
                var num24 = (int) this.Right.X / 16;
                int index2;
                for (var index3 = num23; index3 <= num24; index3 = index2 + 1)
                {
                    index2 = Utils.Clamp<int>(index3, 0, Main.maxTilesX);
                    index1 = Utils.Clamp<int>(index1, 0, Main.maxTilesY);
                    var tile = Main.tile[index2, index1];
                    if (tile == null)
                        return;
                    if (tile.nactive() && Main.tileSolid[(int) tile.type])
                    {
                        flag34 = true;
                        break;
                    }
                }
            }

            var tileCoordinates1 = this.Center.ToTileCoordinates();
            if (WorldGen.InWorld(tileCoordinates1.X, tileCoordinates1.Y, 5) && !this.noGravity)
            {
                Vector2 cPosition;
                int cWidth;
                int cHeight;
                this.GetTileCollisionParameters(out cPosition, out cWidth, out cHeight);
                var vector2_2 = this.position - cPosition;
                Collision.StepUp(ref cPosition, ref this.velocity, cWidth, cHeight, ref this.stepSpeed,
                    ref this.gfxOffY, 1, false, 0);
                this.position = cPosition + vector2_2;
            }

            if (flag34)
            {
                var index = (int) ((double) this.Center.X + (double) num19 * (double) this.direction) / 16;
                var j = ((int) this.Bottom.Y - 15) / 16;
                var flag33 = (double) this.position.Y + (double) this.height - (double) (j * 16) > 20.0;
                var tileSafely1 = Framing.GetTileSafely(index + this.direction, j + 1);
                var tileSafely2 = Framing.GetTileSafely(index, j + 1);
                var tileSafely3 = Framing.GetTileSafely(index, j);
                var tileSafely4 = Framing.GetTileSafely(index, j - 1);
                var tileSafely5 = Framing.GetTileSafely(index, j - 2);
                var tileSafely6 = Framing.GetTileSafely(index, j - 3);
                if (flag8 && tileSafely4.nactive() &&
                    (tileSafely4.type == (ushort) 10 || tileSafely4.type == (ushort) 388))
                {
                    ++this.ai[0];
                    this.ai[3] = 0.0f;
                    if ((double) this.ai[0] >= 60.0)
                    {
                        if (flag9)
                            this.ai[1] = 0.0f;
                        var num23 = 5;
                        if (Main.tile[index, j - 1].type == (ushort) 388)
                            num23 = 2;
                        this.velocity.X = 0.5f * (float) -this.direction;
                        this.ai[1] += (float) num23;
                        var flag35 = false;
                        if ((double) this.ai[1] >= 10.0)
                        {
                            flag35 = true;
                            this.ai[1] = 10f;
                        }

                        if (flag10)
                            flag35 = true;
                        WorldGen.KillTile(index, j - 1, true, false, false);
                        if (Main.netMode != 1 && flag35)
                        {
                            if (flag11)
                            {
                                WorldGen.KillTile(index, j - 1, false, false, false);
                                if (Main.netMode == 2)
                                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) index,
                                        (float) (j - 1), 0.0f, 0, 0, 0);
                            }
                            else
                            {
                                if (tileSafely4.type == (ushort) 10)
                                {
                                    var flag36 = WorldGen.OpenDoor(index, j - 1, this.direction);
                                    if (!flag36)
                                    {
                                        this.ai[3] = (float) num16;
                                        this.netUpdate = true;
                                    }

                                    if (Main.netMode == 2 && flag36)
                                        NetMessage.SendData(19, -1, -1, (NetworkText) null, 0, (float) index,
                                            (float) (j - 1), (float) this.direction, 0, 0, 0);
                                }

                                if (tileSafely4.type == (ushort) 388)
                                {
                                    var flag36 = WorldGen.ShiftTallGate(index, j - 1, false);
                                    if (!flag36)
                                    {
                                        this.ai[3] = (float) num16;
                                        this.netUpdate = true;
                                    }

                                    if (Main.netMode == 2 && flag36)
                                        NetMessage.SendData(19, -1, -1, (NetworkText) null, 4, (float) index,
                                            (float) (j - 1), (float) this.direction, 0, 0, 0);
                                }
                            }
                        }
                    }
                }
                else
                {
                    if ((double) this.velocity.X * (double) (this.spriteDirection * num20) > 0.0)
                    {
                        if (this.height >= 32 && tileSafely5.nactive() && Main.tileSolid[(int) tileSafely5.type])
                        {
                            this.netUpdate = true;
                            this.velocity.Y = -7f;
                            if (tileSafely6.nactive() && Main.tileSolid[(int) tileSafely6.type])
                                this.velocity.Y = -8f;
                        }
                        else if (tileSafely4.nactive() && Main.tileSolid[(int) tileSafely4.type])
                        {
                            this.velocity.Y = -6f;
                            this.netUpdate = true;
                        }
                        else if (flag33 && tileSafely3.nactive() &&
                                 (!tileSafely3.topSlope() && Main.tileSolid[(int) tileSafely3.type]))
                        {
                            this.velocity.Y = -5f;
                            this.netUpdate = true;
                        }
                        else if (flag24 && (!tileSafely2.nactive() || !Main.tileSolid[(int) tileSafely2.type]) &&
                                 (!tileSafely1.nactive() || !Main.tileSolid[(int) tileSafely1.type]))
                        {
                            this.velocity.X *= 1.5f;
                            this.velocity.Y = -8f;
                            this.netUpdate = true;
                        }
                        else if (flag8)
                        {
                            this.ai[0] = 0.0f;
                            this.ai[1] = 0.0f;
                        }

                        if ((double) this.velocity.Y == 0.0 && flag1 && (double) this.ai[3] == 1.0)
                        {
                            this.velocity.Y = -5f;
                            this.netUpdate = true;
                        }
                    }

                    if (flag25 && (double) this.velocity.Y == 0.0 &&
                        ((double) Math.Abs(targetData.Center.X - this.Center.X) < 100.0 &&
                         (double) Math.Abs(targetData.Center.Y - this.Center.Y) < 50.0) &&
                        ((double) Math.Abs(this.velocity.X) >= 1.0 &&
                         (double) this.velocity.X * (double) this.direction > 0.0))
                    {
                        this.velocity.X = MathHelper.Clamp(this.velocity.X * 2f, -3f, 3f);
                        this.velocity.Y = -4f;
                        this.netAlways = true;
                    }
                }
            }
            else if (flag8)
            {
                this.ai[0] = 0.0f;
                this.ai[1] = 0.0f;
            }

            if (!flag27 || !this.noTileCollide)
                return;
            if (flag28)
            {
                if (this.alpha < 60)
                    this.alpha += 20;
                this.localAI[3] = 40f;
            }

            var flag37 = (double) this.velocity.Y == 0.0;
            if ((double) Math.Abs(this.Center.X - targetData.Center.X) > 200.0)
            {
                this.spriteDirection = this.direction = (double) targetData.Center.X > (double) this.Center.X ? 1 : -1;
                this.velocity.X = MathHelper.Lerp(this.velocity.X, (float) this.direction, 0.05f);
            }

            var Width = 80;
            var height = this.height;
            var Position1 = new Vector2(this.Center.X - (float) (Width / 2),
                this.position.Y + (float) this.height - (float) height);
            var flag38 = false;
            if ((double) this.position.Y + (double) this.height <
                (double) targetData.Position.Y + (double) targetData.Height - 16.0)
                flag38 = true;
            if (flag38)
                this.velocity.Y += 0.5f;
            else if (Collision.SolidCollision(Position1, Width, height) ||
                     (double) targetData.Center.Y - (double) this.Center.Y < -100.0)
            {
                if ((double) this.velocity.Y > 0.0)
                    this.velocity.Y = 0.0f;
                if ((double) this.velocity.Y > -0.2)
                    this.velocity.Y -= 0.025f;
                else
                    this.velocity.Y -= 0.2f;
                if ((double) this.velocity.Y < -4.0)
                    this.velocity.Y = -4f;
            }
            else
            {
                if ((double) this.velocity.Y < 0.0)
                    this.velocity.Y = 0.0f;
                if ((double) this.velocity.Y < 0.1)
                    this.velocity.Y += 0.025f;
                else
                    this.velocity.Y += 0.5f;
            }

            if ((double) this.velocity.Y > 10.0)
                this.velocity.Y = 10f;
            if (!flag37)
                return;
            this.velocity.Y = 0.0f;
        }

        private void AI_084_LunaticCultist()
        {
            if ((double) this.ai[0] != -1.0 && Main.rand.Next(1000) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(88, 92), 1f, 0.0f);
            var expertMode = Main.expertMode;
            var flag1 = this.life <= this.lifeMax / 2;
            var num1 = 120;
            var Damage1 = 35;
            if (expertMode)
            {
                num1 = 90;
                Damage1 = 25;
            }

            var num2 = 18;
            var num3 = 3;
            var Damage2 = 30;
            if (expertMode)
            {
                num2 = 12;
                num3 = 4;
                Damage2 = 20;
            }

            var num4 = 80;
            var Damage3 = 45;
            if (expertMode)
            {
                num4 = 40;
                Damage3 = 30;
            }

            var num5 = 20;
            var num6 = 2;
            if (expertMode)
            {
                num5 = 30;
                num6 = 2;
            }

            var num7 = 20;
            var num8 = 3;
            var flag2 = this.type == 439;
            var flag3 = false;
            var flag4 = false;
            if (flag1)
                this.defense = (int) ((double) this.defDefense * 0.649999976158142);
            if (!flag2)
            {
                if ((double) this.ai[3] < 0.0 || !Main.npc[(int) this.ai[3]].active ||
                    Main.npc[(int) this.ai[3]].type != 439)
                {
                    this.life = 0;
                    this.HitEffect(0, 10.0);
                    this.active = false;
                    return;
                }

                this.ai[0] = Main.npc[(int) this.ai[3]].ai[0];
                this.ai[1] = Main.npc[(int) this.ai[3]].ai[1];
                if ((double) this.ai[0] == 5.0)
                {
                    if (this.justHit)
                    {
                        this.life = 0;
                        this.HitEffect(0, 10.0);
                        this.active = false;
                        if (Main.netMode != 1)
                            NetMessage.SendData(23, -1, -1, (NetworkText) null, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                        var npc = Main.npc[(int) this.ai[3]];
                        npc.ai[0] = 6f;
                        npc.ai[1] = 0.0f;
                        npc.netUpdate = true;
                    }
                }
                else
                {
                    flag3 = true;
                    flag4 = true;
                }
            }
            else if ((double) this.ai[0] == 5.0 && (double) this.ai[1] >= 120.0 &&
                     ((double) this.ai[1] < 420.0 && this.justHit))
            {
                this.ai[0] = 0.0f;
                this.ai[1] = 0.0f;
                ++this.ai[3];
                this.velocity = Vector2.Zero;
                this.netUpdate = true;
                var intList = new List<int>();
                for (var index = 0; index < 200; ++index)
                {
                    if (Main.npc[index].active && Main.npc[index].type == 440 &&
                        (double) Main.npc[index].ai[3] == (double) this.whoAmI)
                        intList.Add(index);
                }

                var num9 = 10;
                if (Main.expertMode)
                    num9 = 3;
                foreach (var number in intList)
                {
                    var npc = Main.npc[number];
                    if ((double) npc.localAI[1] == (double) this.localAI[1] && num9 > 0)
                    {
                        --num9;
                        npc.life = 0;
                        npc.HitEffect(0, 10.0);
                        npc.active = false;
                        if (Main.netMode != 1)
                            NetMessage.SendData(23, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    }
                    else if (num9 > 0)
                    {
                        --num9;
                        npc.life = 0;
                        npc.HitEffect(0, 10.0);
                        npc.active = false;
                    }
                }

                Main.projectile[(int) this.ai[2]].ai[1] = -1f;
                Main.projectile[(int) this.ai[2]].netUpdate = true;
            }

            var center1 = this.Center;
            var player = Main.player[this.target];
            if (this.target < 0 || this.target == (int) byte.MaxValue || (player.dead || !player.active))
            {
                this.TargetClosest(false);
                player = Main.player[this.target];
                this.netUpdate = true;
            }

            if (player.dead || (double) Vector2.Distance(player.Center, center1) > 5600.0)
            {
                this.life = 0;
                this.HitEffect(0, 10.0);
                this.active = false;
                if (Main.netMode != 1)
                    NetMessage.SendData(28, -1, -1, (NetworkText) null, this.whoAmI, -1f, 0.0f, 0.0f, 0, 0, 0);
                new List<int>() {this.whoAmI};
                for (var index = 0; index < 200; ++index)
                {
                    if (Main.npc[index].active && Main.npc[index].type == 440 &&
                        (double) Main.npc[index].ai[3] == (double) this.whoAmI)
                    {
                        Main.npc[index].life = 0;
                        Main.npc[index].HitEffect(0, 10.0);
                        Main.npc[index].active = false;
                        if (Main.netMode != 1)
                            NetMessage.SendData(28, -1, -1, (NetworkText) null, this.whoAmI, -1f, 0.0f, 0.0f, 0, 0, 0);
                    }
                }
            }

            var num10 = this.ai[3];
            if ((double) this.localAI[0] == 0.0)
            {
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, 89, 1f, 0.0f);
                this.localAI[0] = 1f;
                this.alpha = (int) byte.MaxValue;
                this.rotation = 0.0f;
                if (Main.netMode != 1)
                {
                    this.ai[0] = -1f;
                    this.netUpdate = true;
                }
            }

            if ((double) this.ai[0] == -1.0)
            {
                this.alpha -= 5;
                if (this.alpha < 0)
                    this.alpha = 0;
                ++this.ai[1];
                if ((double) this.ai[1] >= 420.0)
                {
                    this.ai[0] = 0.0f;
                    this.ai[1] = 0.0f;
                    this.netUpdate = true;
                }
                else if ((double) this.ai[1] > 360.0)
                {
                    var npc = this;
                    npc.velocity = npc.velocity * 0.95f;
                    if ((double) this.localAI[2] != 13.0)
                        Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, 105, 1f, 0.0f);
                    this.localAI[2] = 13f;
                }
                else if ((double) this.ai[1] > 300.0)
                {
                    this.velocity = -Vector2.UnitY;
                    this.localAI[2] = 10f;
                }
                else
                    this.localAI[2] = (double) this.ai[1] <= 120.0 ? 0.0f : 1f;

                flag3 = true;
                flag4 = true;
            }

            if ((double) this.ai[0] == 0.0)
            {
                if ((double) this.ai[1] == 0.0)
                    this.TargetClosest(false);
                this.localAI[2] = 10f;
                var num9 = Math.Sign(player.Center.X - center1.X);
                if (num9 != 0)
                    this.direction = this.spriteDirection = num9;
                ++this.ai[1];
                if ((double) this.ai[1] >= 40.0 && flag2)
                {
                    var num11 = 0;
                    if (flag1)
                    {
                        switch ((int) this.ai[3])
                        {
                            case 0:
                                num11 = 0;
                                break;
                            case 1:
                                num11 = 1;
                                break;
                            case 2:
                                num11 = 0;
                                break;
                            case 3:
                                num11 = 5;
                                break;
                            case 4:
                                num11 = 0;
                                break;
                            case 5:
                                num11 = 3;
                                break;
                            case 6:
                                num11 = 0;
                                break;
                            case 7:
                                num11 = 5;
                                break;
                            case 8:
                                num11 = 0;
                                break;
                            case 9:
                                num11 = 2;
                                break;
                            case 10:
                                num11 = 0;
                                break;
                            case 11:
                                num11 = 3;
                                break;
                            case 12:
                                num11 = 0;
                                break;
                            case 13:
                                num11 = 4;
                                this.ai[3] = -1f;
                                break;
                            default:
                                this.ai[3] = -1f;
                                break;
                        }
                    }
                    else
                    {
                        switch ((int) this.ai[3])
                        {
                            case 0:
                                num11 = 0;
                                break;
                            case 1:
                                num11 = 1;
                                break;
                            case 2:
                                num11 = 0;
                                break;
                            case 3:
                                num11 = 2;
                                break;
                            case 4:
                                num11 = 0;
                                break;
                            case 5:
                                num11 = 3;
                                break;
                            case 6:
                                num11 = 0;
                                break;
                            case 7:
                                num11 = 1;
                                break;
                            case 8:
                                num11 = 0;
                                break;
                            case 9:
                                num11 = 2;
                                break;
                            case 10:
                                num11 = 0;
                                break;
                            case 11:
                                num11 = 4;
                                this.ai[3] = -1f;
                                break;
                            default:
                                this.ai[3] = -1f;
                                break;
                        }
                    }

                    var maxValue = 6;
                    if (this.life < this.lifeMax / 3)
                        maxValue = 4;
                    if (this.life < this.lifeMax / 4)
                        maxValue = 3;
                    if (expertMode && flag1 && (Main.rand.Next(maxValue) == 0 && num11 != 0) &&
                        (num11 != 4 && num11 != 5 && NPC.CountNPCS(523) < 10))
                        num11 = 6;
                    if (num11 == 0)
                    {
                        var num12 =
                            (float) Math.Ceiling(
                                (double) (player.Center + new Vector2(0.0f, -100f) - center1).Length() / 50.0);
                        if ((double) num12 == 0.0)
                            num12 = 1f;
                        var intList = new List<int>();
                        var num13 = 0;
                        intList.Add(this.whoAmI);
                        for (var index = 0; index < 200; ++index)
                        {
                            if (Main.npc[index].active && Main.npc[index].type == 440 &&
                                (double) Main.npc[index].ai[3] == (double) this.whoAmI)
                                intList.Add(index);
                        }

                        var flag5 = intList.Count % 2 == 0;
                        foreach (var index in intList)
                        {
                            var npc1 = Main.npc[index];
                            var center2 = npc1.Center;
                            var num14 =
                                (float) ((double) ((num13 + flag5.ToInt() + 1) / 2) * 6.28318548202515 *
                                         0.400000005960464) / (float) intList.Count;
                            if (num13 % 2 == 1)
                                num14 *= -1f;
                            if (intList.Count == 1)
                                num14 = 0.0f;
                            var vector2_1 = new Vector2(0.0f, -1f).RotatedBy((double) num14, new Vector2()) *
                                                new Vector2(300f, 200f);
                            var vector2_2 = player.Center + vector2_1 - center2;
                            npc1.ai[0] = 1f;
                            npc1.ai[1] = num12 * 2f;
                            npc1.velocity = vector2_2 / num12;
                            if (this.whoAmI >= npc1.whoAmI)
                            {
                                var npc2 = npc1;
                                npc2.position = npc2.position - npc1.velocity;
                            }

                            npc1.netUpdate = true;
                            ++num13;
                        }
                    }

                    if (num11 == 1)
                    {
                        this.ai[0] = 3f;
                        this.ai[1] = 0.0f;
                    }
                    else if (num11 == 2)
                    {
                        this.ai[0] = 2f;
                        this.ai[1] = 0.0f;
                    }
                    else if (num11 == 3)
                    {
                        this.ai[0] = 4f;
                        this.ai[1] = 0.0f;
                    }
                    else if (num11 == 4)
                    {
                        this.ai[0] = 5f;
                        this.ai[1] = 0.0f;
                    }

                    if (num11 == 5)
                    {
                        this.ai[0] = 7f;
                        this.ai[1] = 0.0f;
                    }

                    if (num11 == 6)
                    {
                        this.ai[0] = 8f;
                        this.ai[1] = 0.0f;
                    }

                    this.netUpdate = true;
                }
            }
            else if ((double) this.ai[0] == 1.0)
            {
                flag3 = true;
                this.localAI[2] = 10f;
                if ((double) (int) this.ai[1] % 2.0 != 0.0 && (double) this.ai[1] != 1.0)
                {
                    var npc = this;
                    npc.position = npc.position - this.velocity;
                }

                --this.ai[1];
                if ((double) this.ai[1] <= 0.0)
                {
                    this.ai[0] = 0.0f;
                    this.ai[1] = 0.0f;
                    ++this.ai[3];
                    this.velocity = Vector2.Zero;
                    this.netUpdate = true;
                }
            }
            else if ((double) this.ai[0] == 2.0)
            {
                this.localAI[2] = 11f;
                var vec1 = Vector2.Normalize(player.Center - center1);
                if (vec1.HasNaNs())
                    vec1 = new Vector2((float) this.direction, 0.0f);
                if ((double) this.ai[1] >= 4.0 && flag2 && (int) ((double) this.ai[1] - 4.0) % num1 == 0)
                {
                    if (Main.netMode != 1)
                    {
                        var intList = new List<int>();
                        for (var index = 0; index < 200; ++index)
                        {
                            if (Main.npc[index].active && Main.npc[index].type == 440 &&
                                (double) Main.npc[index].ai[3] == (double) this.whoAmI)
                                intList.Add(index);
                        }

                        foreach (var index1 in intList)
                        {
                            var npc = Main.npc[index1];
                            var center2 = npc.Center;
                            var num9 = Math.Sign(player.Center.X - center2.X);
                            if (num9 != 0)
                                npc.direction = npc.spriteDirection = num9;
                            if (Main.netMode != 1)
                            {
                                var vec2 = Vector2.Normalize(player.Center - center2 + player.velocity * 20f);
                                if (vec2.HasNaNs())
                                    vec2 = new Vector2((float) this.direction, 0.0f);
                                var vector2_1 = center2 + new Vector2((float) (this.direction * 30), 12f);
                                for (var index2 = 0; index2 < 1; ++index2)
                                {
                                    var vector2_2 =
                                        (vec2 * (float) (6.0 + Main.rand.NextDouble() * 4.0)).RotatedByRandom(
                                            0.523598790168762);
                                    Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_2.X, vector2_2.Y, 468,
                                        18, 0.0f, Main.myPlayer, 0.0f, 0.0f);
                                }
                            }
                        }
                    }

                    if (Main.netMode != 1)
                    {
                        var vec2 = Vector2.Normalize(player.Center - center1 + player.velocity * 20f);
                        if (vec2.HasNaNs())
                            vec2 = new Vector2((float) this.direction, 0.0f);
                        var vector2_1 = this.Center + new Vector2((float) (this.direction * 30), 12f);
                        for (var index = 0; index < 1; ++index)
                        {
                            var vector2_2 = vec2 * 4f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_2.X, vector2_2.Y, 464, Damage1,
                                0.0f, Main.myPlayer, 0.0f, 1f);
                        }
                    }
                }

                ++this.ai[1];
                if ((double) this.ai[1] >= (double) (4 + num1))
                {
                    this.ai[0] = 0.0f;
                    this.ai[1] = 0.0f;
                    ++this.ai[3];
                    this.velocity = Vector2.Zero;
                    this.netUpdate = true;
                }
            }
            else if ((double) this.ai[0] == 3.0)
            {
                this.localAI[2] = 11f;
                var vec1 = Vector2.Normalize(player.Center - center1);
                if (vec1.HasNaNs())
                    vec1 = new Vector2((float) this.direction, 0.0f);
                if ((double) this.ai[1] >= 4.0 && flag2 && (int) ((double) this.ai[1] - 4.0) % num2 == 0)
                {
                    if ((int) ((double) this.ai[1] - 4.0) / num2 == 2)
                    {
                        var intList = new List<int>();
                        for (var index = 0; index < 200; ++index)
                        {
                            if (Main.npc[index].active && Main.npc[index].type == 440 &&
                                (double) Main.npc[index].ai[3] == (double) this.whoAmI)
                                intList.Add(index);
                        }

                        if (Main.netMode != 1)
                        {
                            foreach (var index1 in intList)
                            {
                                var npc = Main.npc[index1];
                                var center2 = npc.Center;
                                var num9 = Math.Sign(player.Center.X - center2.X);
                                if (num9 != 0)
                                    npc.direction = npc.spriteDirection = num9;
                                if (Main.netMode != 1)
                                {
                                    var vec2 = Vector2.Normalize(player.Center - center2 + player.velocity * 20f);
                                    if (vec2.HasNaNs())
                                        vec2 = new Vector2((float) this.direction, 0.0f);
                                    var vector2_1 = center2 + new Vector2((float) (this.direction * 30), 12f);
                                    for (var index2 = 0; index2 < 1; ++index2)
                                    {
                                        var vector2_2 =
                                            (vec2 * (float) (6.0 + Main.rand.NextDouble() * 4.0)).RotatedByRandom(
                                                0.523598790168762);
                                        Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_2.X, vector2_2.Y,
                                            468, 18, 0.0f, Main.myPlayer, 0.0f, 0.0f);
                                    }
                                }
                            }
                        }
                    }

                    var num11 = Math.Sign(player.Center.X - center1.X);
                    if (num11 != 0)
                        this.direction = this.spriteDirection = num11;
                    if (Main.netMode != 1)
                    {
                        var vec2 = Vector2.Normalize(player.Center - center1 + player.velocity * 20f);
                        if (vec2.HasNaNs())
                            vec2 = new Vector2((float) this.direction, 0.0f);
                        var vector2_1 = this.Center + new Vector2((float) (this.direction * 30), 12f);
                        for (var index = 0; index < 1; ++index)
                        {
                            var vector2_2 =
                                (vec2 * (float) (6.0 + Main.rand.NextDouble() * 4.0))
                                .RotatedByRandom(0.523598790168762);
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_2.X, vector2_2.Y, 467, Damage2,
                                0.0f, Main.myPlayer, 0.0f, 0.0f);
                        }
                    }
                }

                ++this.ai[1];
                if ((double) this.ai[1] >= (double) (4 + num2 * num3))
                {
                    this.ai[0] = 0.0f;
                    this.ai[1] = 0.0f;
                    ++this.ai[3];
                    this.velocity = Vector2.Zero;
                    this.netUpdate = true;
                }
            }
            else if ((double) this.ai[0] == 4.0)
            {
                this.localAI[2] = !flag2 ? 11f : 12f;
                if ((double) this.ai[1] == 20.0 && flag2 && Main.netMode != 1)
                {
                    var intList = new List<int>();
                    for (var index = 0; index < 200; ++index)
                    {
                        if (Main.npc[index].active && Main.npc[index].type == 440 &&
                            (double) Main.npc[index].ai[3] == (double) this.whoAmI)
                            intList.Add(index);
                    }

                    foreach (var index1 in intList)
                    {
                        var npc = Main.npc[index1];
                        var center2 = npc.Center;
                        var num9 = Math.Sign(player.Center.X - center2.X);
                        if (num9 != 0)
                            npc.direction = npc.spriteDirection = num9;
                        if (Main.netMode != 1)
                        {
                            var vec = Vector2.Normalize(player.Center - center2 + player.velocity * 20f);
                            if (vec.HasNaNs())
                                vec = new Vector2((float) this.direction, 0.0f);
                            var vector2_1 = center2 + new Vector2((float) (this.direction * 30), 12f);
                            for (var index2 = 0; index2 < 1; ++index2)
                            {
                                var vector2_2 =
                                    (vec * (float) (6.0 + Main.rand.NextDouble() * 4.0)).RotatedByRandom(
                                        0.523598790168762);
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_2.X, vector2_2.Y, 468, 18,
                                    0.0f, Main.myPlayer, 0.0f, 0.0f);
                            }
                        }
                    }

                    if ((int) ((double) this.ai[1] - 20.0) % num4 == 0)
                        Projectile.NewProjectile(this.Center.X, this.Center.Y - 100f, 0.0f, 0.0f, 465, Damage3, 0.0f,
                            Main.myPlayer, 0.0f, 0.0f);
                }

                ++this.ai[1];
                if ((double) this.ai[1] >= (double) (20 + num4))
                {
                    this.ai[0] = 0.0f;
                    this.ai[1] = 0.0f;
                    ++this.ai[3];
                    this.velocity = Vector2.Zero;
                    this.netUpdate = true;
                }
            }
            else if ((double) this.ai[0] == 5.0)
            {
                this.localAI[2] = 10f;
                var vec = Vector2.Normalize(player.Center - center1);
                if (vec.HasNaNs())
                    vec = new Vector2((float) this.direction, 0.0f);
                if ((double) this.ai[1] >= 0.0 && (double) this.ai[1] < 30.0)
                {
                    flag3 = true;
                    flag4 = true;
                    this.alpha = (int) (((double) this.ai[1] - 0.0) / 30.0 * (double) byte.MaxValue);
                }
                else if ((double) this.ai[1] >= 30.0 && (double) this.ai[1] < 90.0)
                {
                    if ((double) this.ai[1] == 30.0 && Main.netMode != 1 && flag2)
                    {
                        ++this.localAI[1];
                        var spinningpoint = new Vector2(180f, 0.0f);
                        var intList = new List<int>();
                        for (var index = 0; index < 200; ++index)
                        {
                            if (Main.npc[index].active && Main.npc[index].type == 440 &&
                                (double) Main.npc[index].ai[3] == (double) this.whoAmI)
                                intList.Add(index);
                        }

                        var num9 = 6 - intList.Count;
                        if (num9 > 2)
                            num9 = 2;
                        var length = intList.Count + num9 + 1;
                        var numArray = new float[length];
                        for (var index = 0; index < numArray.Length; ++index)
                            numArray[index] =
                                Vector2.Distance(
                                    this.Center + spinningpoint.RotatedBy(
                                        (double) index * 6.28318548202515 / (double) length - 1.57079637050629,
                                        new Vector2()), player.Center);
                        var index1 = 0;
                        for (var index2 = 1; index2 < numArray.Length; ++index2)
                        {
                            if ((double) numArray[index1] > (double) numArray[index2])
                                index1 = index2;
                        }

                        var num11 = index1 >= length / 2 ? index1 - length / 2 : index1 + length / 2;
                        var num12 = num9;
                        for (var index2 = 0; index2 < numArray.Length; ++index2)
                        {
                            if (num11 != index2)
                            {
                                var vector2 = this.Center + spinningpoint.RotatedBy(
                                                      (double) index2 * 6.28318548202515 / (double) length -
                                                      1.57079637050629, new Vector2());
                                if (num12-- > 0)
                                {
                                    var index3 = NPC.NewNPC((int) vector2.X, (int) vector2.Y + this.height / 2, 440,
                                        this.whoAmI, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
                                    Main.npc[index3].ai[3] = (float) this.whoAmI;
                                    Main.npc[index3].netUpdate = true;
                                    Main.npc[index3].localAI[1] = this.localAI[1];
                                }
                                else
                                {
                                    var number = intList[-num12 - 1];
                                    Main.npc[number].Center = vector2;
                                    NetMessage.SendData(23, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0,
                                        0);
                                }
                            }
                        }

                        this.ai[2] = (float) Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 490, 0,
                            0.0f, Main.myPlayer, 0.0f, (float) this.whoAmI);
                        var npc = this;
                        npc.Center = npc.Center + spinningpoint.RotatedBy(
                                         (double) num11 * 6.28318548202515 / (double) length - 1.57079637050629,
                                         new Vector2());
                        this.netUpdate = true;
                        intList.Clear();
                    }

                    flag3 = true;
                    flag4 = true;
                    this.alpha = (int) byte.MaxValue;
                    if (flag2)
                    {
                        var vector2 = Main.projectile[(int) this.ai[2]].Center - this.Center;
                        if (vector2 == Vector2.Zero)
                            vector2 = -Vector2.UnitY;
                        vector2.Normalize();
                        this.localAI[2] = (double) Math.Abs(vector2.Y) >= 0.769999980926514
                            ? ((double) vector2.Y >= 0.0 ? 10f : 12f)
                            : 11f;
                        var num9 = Math.Sign(vector2.X);
                        if (num9 != 0)
                            this.direction = this.spriteDirection = num9;
                    }
                    else
                    {
                        var vector2 = Main.projectile[(int) Main.npc[(int) this.ai[3]].ai[2]].Center - this.Center;
                        if (vector2 == Vector2.Zero)
                            vector2 = -Vector2.UnitY;
                        vector2.Normalize();
                        this.localAI[2] = (double) Math.Abs(vector2.Y) >= 0.769999980926514
                            ? ((double) vector2.Y >= 0.0 ? 10f : 12f)
                            : 11f;
                        var num9 = Math.Sign(vector2.X);
                        if (num9 != 0)
                            this.direction = this.spriteDirection = num9;
                    }
                }
                else if ((double) this.ai[1] >= 90.0 && (double) this.ai[1] < 120.0)
                {
                    flag3 = true;
                    flag4 = true;
                    this.alpha = (int) byte.MaxValue -
                                 (int) (((double) this.ai[1] - 90.0) / 30.0 * (double) byte.MaxValue);
                }
                else if ((double) this.ai[1] >= 120.0 && (double) this.ai[1] < 420.0)
                {
                    flag4 = true;
                    this.alpha = 0;
                    if (flag2)
                    {
                        var vector2 = Main.projectile[(int) this.ai[2]].Center - this.Center;
                        if (vector2 == Vector2.Zero)
                            vector2 = -Vector2.UnitY;
                        vector2.Normalize();
                        this.localAI[2] = (double) Math.Abs(vector2.Y) >= 0.769999980926514
                            ? ((double) vector2.Y >= 0.0 ? 10f : 12f)
                            : 11f;
                        var num9 = Math.Sign(vector2.X);
                        if (num9 != 0)
                            this.direction = this.spriteDirection = num9;
                    }
                    else
                    {
                        var vector2 = Main.projectile[(int) Main.npc[(int) this.ai[3]].ai[2]].Center - this.Center;
                        if (vector2 == Vector2.Zero)
                            vector2 = -Vector2.UnitY;
                        vector2.Normalize();
                        this.localAI[2] = (double) Math.Abs(vector2.Y) >= 0.769999980926514
                            ? ((double) vector2.Y >= 0.0 ? 10f : 12f)
                            : 11f;
                        var num9 = Math.Sign(vector2.X);
                        if (num9 != 0)
                            this.direction = this.spriteDirection = num9;
                    }
                }

                ++this.ai[1];
                if ((double) this.ai[1] >= 420.0)
                {
                    flag4 = true;
                    this.ai[0] = 0.0f;
                    this.ai[1] = 0.0f;
                    ++this.ai[3];
                    this.velocity = Vector2.Zero;
                    this.netUpdate = true;
                }
            }
            else if ((double) this.ai[0] == 6.0)
            {
                this.localAI[2] = 13f;
                ++this.ai[1];
                if ((double) this.ai[1] >= 120.0)
                {
                    this.ai[0] = 0.0f;
                    this.ai[1] = 0.0f;
                    ++this.ai[3];
                    this.velocity = Vector2.Zero;
                    this.netUpdate = true;
                }
            }
            else if ((double) this.ai[0] == 7.0)
            {
                this.localAI[2] = 11f;
                var vec1 = Vector2.Normalize(player.Center - center1);
                if (vec1.HasNaNs())
                    vec1 = new Vector2((float) this.direction, 0.0f);
                if ((double) this.ai[1] >= 4.0 && flag2 && (int) ((double) this.ai[1] - 4.0) % num5 == 0)
                {
                    if ((int) ((double) this.ai[1] - 4.0) / num5 == 2)
                    {
                        var intList = new List<int>();
                        for (var index = 0; index < 200; ++index)
                        {
                            if (Main.npc[index].active && Main.npc[index].type == 440 &&
                                (double) Main.npc[index].ai[3] == (double) this.whoAmI)
                                intList.Add(index);
                        }

                        foreach (var index1 in intList)
                        {
                            var npc = Main.npc[index1];
                            var center2 = npc.Center;
                            var num9 = Math.Sign(player.Center.X - center2.X);
                            if (num9 != 0)
                                npc.direction = npc.spriteDirection = num9;
                            if (Main.netMode != 1)
                            {
                                var vec2 = Vector2.Normalize(player.Center - center2 + player.velocity * 20f);
                                if (vec2.HasNaNs())
                                    vec2 = new Vector2((float) this.direction, 0.0f);
                                var vector2_1 = center2 + new Vector2((float) (this.direction * 30), 12f);
                                for (var index2 = 0; (double) index2 < 5.0; ++index2)
                                {
                                    var vector2_2 =
                                        (vec2 * (float) (6.0 + Main.rand.NextDouble() * 4.0)).RotatedByRandom(
                                            1.25663709640503);
                                    Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_2.X, vector2_2.Y, 468,
                                        18, 0.0f, Main.myPlayer, 0.0f, 0.0f);
                                }
                            }
                        }
                    }

                    var num11 = Math.Sign(player.Center.X - center1.X);
                    if (num11 != 0)
                        this.direction = this.spriteDirection = num11;
                    if (Main.netMode != 1)
                    {
                        var vec2 = Vector2.Normalize(player.Center - center1 + player.velocity * 20f);
                        if (vec2.HasNaNs())
                            vec2 = new Vector2((float) this.direction, 0.0f);
                        var vector2 = this.Center + new Vector2((float) (this.direction * 30), 12f);
                        var num9 = 8f;
                        var num12 = 0.2513274f;
                        for (var index1 = 0; (double) index1 < 5.0; ++index1)
                        {
                            var spinningpoint = vec2 * num9;
                            spinningpoint = spinningpoint.RotatedBy(
                                (double) num12 * (double) index1 - (1.25663709640503 - (double) num12) / 2.0,
                                new Vector2());
                            var ai1 = (float) (((double) Main.rand.NextFloat() - 0.5) * 0.300000011920929 *
                                                 6.28318548202515 / 60.0);
                            var index2 = NPC.NewNPC((int) vector2.X, (int) vector2.Y + 7, 522, 0, 0.0f, ai1,
                                spinningpoint.X, spinningpoint.Y, (int) byte.MaxValue);
                            Main.npc[index2].velocity = spinningpoint;
                        }
                    }
                }

                ++this.ai[1];
                if ((double) this.ai[1] >= (double) (4 + num5 * num6))
                {
                    this.ai[0] = 0.0f;
                    this.ai[1] = 0.0f;
                    ++this.ai[3];
                    this.velocity = Vector2.Zero;
                    this.netUpdate = true;
                }
            }
            else if ((double) this.ai[0] == 8.0)
            {
                this.localAI[2] = 13f;
                if ((double) this.ai[1] >= 4.0 && flag2 && (int) ((double) this.ai[1] - 4.0) % num7 == 0)
                {
                    var intList = new List<int>();
                    for (var index = 0; index < 200; ++index)
                    {
                        if (Main.npc[index].active && Main.npc[index].type == 440 &&
                            (double) Main.npc[index].ai[3] == (double) this.whoAmI)
                            intList.Add(index);
                    }

                    var num9 = intList.Count + 1;
                    if (num9 > 3)
                        num9 = 3;
                    var num11 = Math.Sign(player.Center.X - center1.X);
                    if (num11 != 0)
                        this.direction = this.spriteDirection = num11;
                    if (Main.netMode != 1)
                    {
                        for (var index1 = 0; index1 < num9; ++index1)
                        {
                            var tileCoordinates1 = this.Center.ToTileCoordinates();
                            var tileCoordinates2 = Main.player[this.target].Center.ToTileCoordinates();
                            var vector2 = Main.player[this.target].Center - this.Center;
                            var num12 = 20;
                            var num13 = 3;
                            var num14 = 7;
                            var num15 = 2;
                            var num16 = 0;
                            var flag5 = false;
                            if ((double) vector2.Length() > 2000.0)
                                flag5 = true;
                            while (!flag5 && num16 < 100)
                            {
                                ++num16;
                                var index2 = Main.rand.Next(tileCoordinates2.X - num12, tileCoordinates2.X + num12 + 1);
                                var index3 = Main.rand.Next(tileCoordinates2.Y - num12, tileCoordinates2.Y + num12 + 1);
                                if ((index3 < tileCoordinates2.Y - num14 || index3 > tileCoordinates2.Y + num14 ||
                                     (index2 < tileCoordinates2.X - num14 || index2 > tileCoordinates2.X + num14)) &&
                                    (index3 < tileCoordinates1.Y - num13 || index3 > tileCoordinates1.Y + num13 ||
                                     (index2 < tileCoordinates1.X - num13 || index2 > tileCoordinates1.X + num13)) &&
                                    !Main.tile[index2, index3].nactive())
                                {
                                    var flag6 = true;
                                    if (flag6 && Collision.SolidTiles(index2 - num15, index2 + num15, index3 - num15,
                                            index3 + num15))
                                        flag6 = false;
                                    if (flag6)
                                    {
                                        NPC.NewNPC(index2 * 16 + 8, index3 * 16 + 8, 523, 0, (float) this.whoAmI, 0.0f,
                                            0.0f, 0.0f, (int) byte.MaxValue);
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }

                ++this.ai[1];
                if ((double) this.ai[1] >= (double) (4 + num7 * num8))
                {
                    this.ai[0] = 0.0f;
                    this.ai[1] = 0.0f;
                    ++this.ai[3];
                    this.velocity = Vector2.Zero;
                    this.netUpdate = true;
                }
            }

            if (!flag2)
                this.ai[3] = num10;
            this.dontTakeDamage = flag3;
            this.chaseable = !flag4;
        }

        private void AI_108_DivingFlyer()
        {
            this.rotation = this.velocity.ToRotation();
            var num1 = 0.4f;
            var num2 = 10f;
            var num3 = 200f;
            var num4 = 750f;
            var num5 = 30f;
            var num6 = 30f;
            var num7 = 0.95f;
            var num8 = 50;
            var num9 = 14f;
            var num10 = 30f;
            var num11 = 100f;
            var num12 = 20f;
            var num13 = 0.0f;
            var num14 = 7f;
            var flag1 = true;
            var flag2 = true;
            var num15 = 120;
            var flag3 = false;
            var flag4 = false;
            var num16 = 0.05f;
            var num17 = 0.0f;
            var flag5 = false;
            switch (this.type)
            {
                case 558:
                case 559:
                case 560:
                    flag4 = true;
                    num1 = 0.7f;
                    if (this.type == 559)
                        num1 = 0.5f;
                    if (this.type == 560)
                        num1 = 0.2f;
                    num2 = 3f;
                    num3 = 400f;
                    num4 = 500f;
                    num5 = 90f;
                    num6 = 20f;
                    num7 = 0.95f;
                    num8 = 0;
                    num9 = 8f;
                    num10 = 30f;
                    num11 = 150f;
                    num12 = 60f;
                    num13 = 0.05f;
                    num14 = 6f;
                    flag2 = false;
                    flag5 = true;
                    break;
                case 574:
                case 575:
                    flag4 = true;
                    num1 = 0.6f;
                    if (this.type == 575)
                        num1 = 0.4f;
                    num2 = 4f;
                    num3 = 400f;
                    num4 = 500f;
                    num5 = 90f;
                    num6 = 30f;
                    num7 = 0.95f;
                    num8 = 3;
                    num9 = 8f;
                    num10 = 30f;
                    num11 = 150f;
                    num12 = 10f;
                    num13 = 0.05f;
                    num14 = 0.0f;
                    num17 = -0.1f;
                    flag3 = true;
                    flag5 = true;
                    break;
            }

            NPCUtils.TargetClosestOldOnesInvasion(this, true, new Vector2?());
            var targetData = this.GetTargetData(true);
            if (flag5)
            {
                if ((double) this.localAI[0] == 0.0)
                    this.alpha = (int) byte.MaxValue;
                if ((double) this.localAI[0] == 30.0)
                    Main.PlayTrackedSound((SoundStyle) SoundID.DD2_EtherianPortalSpawnEnemy, this.Center);
                if ((double) this.localAI[0] < 60.0)
                {
                    ++this.localAI[0];
                    this.alpha -= 5;
                    if (this.alpha < 0)
                        this.alpha = 0;
                    var num18 = (int) this.localAI[0] / 10;
                    var num19 = this.Size.Length() / 2f / 20f;
                    var maxValue = 5;
                    if (this.type == 576 || this.type == 577)
                        maxValue = 1;
                    for (var index = 0; index < num18; ++index)
                    {
                        if (Main.rand.Next(maxValue) == 0)
                        {
                            var dust = Dust.NewDustDirect(this.position, this.width, this.height, 27,
                                this.velocity.X * 1f, 0.0f, 100, new Color(), 1f);
                            dust.scale = 0.55f;
                            dust.fadeIn = 0.7f;
                            dust.velocity *= 0.1f * num19;
                            dust.velocity += this.velocity;
                        }
                    }
                }
            }

            if (flag4)
            {
                for (var index = 0; index < 200; ++index)
                {
                    if (index != this.whoAmI && Main.npc[index].active &&
                        (Main.npc[index].type == this.type &&
                         (double) Math.Abs(this.position.X - Main.npc[index].position.X) +
                         (double) Math.Abs(this.position.Y - Main.npc[index].position.Y) < (double) this.width))
                    {
                        if ((double) this.position.X < (double) Main.npc[index].position.X)
                            this.velocity.X -= num16;
                        else
                            this.velocity.X += num16;
                        if ((double) this.position.Y < (double) Main.npc[index].position.Y)
                            this.velocity.Y -= num16;
                        else
                            this.velocity.Y += num16;
                    }
                }
            }

            if (Math.Sign(this.velocity.X) != 0)
                this.spriteDirection = -Math.Sign(this.velocity.X);
            if ((double) this.rotation < -1.57079637050629)
                this.rotation += 3.141593f;
            if ((double) this.rotation > 1.57079637050629)
                this.rotation -= 3.141593f;
            var num20 = num13 * num12;
            if (Main.expertMode)
                num1 *= Main.expertKnockBack;
            SlotId slotId1;
            if ((double) this.ai[0] == 0.0)
            {
                this.knockBackResist = num1;
                var num18 = num2;
                var center = this.Center;
                var vector2_1 = targetData.Center - center;
                var vector2_2 = vector2_1 - Vector2.UnitY * num3;
                var num19 = vector2_1.Length();
                var v = Vector2.Normalize(vector2_1) * num18;
                var vector2_3 = Vector2.Normalize(vector2_2) * num18;
                var flag6 = Collision.CanHit(this.Center, 1, 1, targetData.Center, 1, 1);
                if ((double) this.ai[3] >= (double) num15)
                    flag6 = true;
                var num21 = 8f;
                var flag7 = flag6 && (double) v.ToRotation() > 3.14159274101257 / (double) num21 &&
                             (double) v.ToRotation() < 3.14159274101257 - 3.14159274101257 / (double) num21;
                if ((double) num19 > (double) num4 || !flag7)
                {
                    this.velocity.X = (this.velocity.X * (num5 - 1f) + vector2_3.X) / num5;
                    this.velocity.Y = (this.velocity.Y * (num5 - 1f) + vector2_3.Y) / num5;
                    if (!flag7)
                    {
                        ++this.ai[3];
                        if ((double) this.ai[3] == (double) num15)
                            this.netUpdate = true;
                    }
                    else
                        this.ai[3] = 0.0f;
                }
                else
                {
                    this.ai[0] = 1f;
                    this.ai[2] = v.X;
                    this.ai[3] = v.Y;
                    this.netUpdate = true;
                }
            }
            else if ((double) this.ai[0] == 1.0)
            {
                this.knockBackResist = 0.0f;
                var npc = this;
                npc.velocity = npc.velocity * num7;
                this.velocity.Y += num17;
                ++this.ai[1];
                if ((double) this.ai[1] == (double) num6)
                {
                    if (this.type == 558 || this.type == 559 || this.type == 560)
                    {
                        var localAi1 = this.localAI;
                        var index1 = 1;
                        //Fix By GScience
                        localAi1[index1] = Main.PlayTrackedSound((SoundStyle) SoundID.DD2_WyvernDiveDown, this.Center)
                            .ToFloat();
                        if (Main.rand.Next(5) == 0)
                        {
                            var localAi2 = this.localAI;
                            var index2 = 2;
                            //Fix By GScience
                            localAi2[index2] = Main.PlayTrackedSound((SoundStyle) SoundID.DD2_WyvernScream, this.Center)
                                .ToFloat();
                        }
                    }
                    else if (this.type == 574 || this.type == 575)
                    {
                        var localAi = this.localAI;
                        var index = 1;
                        //Fix By GScience
                        localAi[index] =
                            Main.PlayTrackedSound((SoundStyle) SoundID.DD2_KoboldFlyerChargeScream, this.Center)
                                .ToFloat();
                        Main.PlayTrackedSound((SoundStyle) SoundID.DD2_KoboldIgnite, this.Center);
                    }
                }

                if ((double) this.ai[1] >= (double) num6)
                {
                    this.ai[0] = 2f;
                    this.ai[1] = 0.0f;
                    this.netUpdate = true;
                    var vector2 = new Vector2(this.ai[2], this.ai[3]) +
                                      new Vector2((float) Main.rand.Next(-num8, num8 + 1),
                                          (float) Main.rand.Next(-num8, num8 + 1)) * 0.04f;
                    vector2.Normalize();
                    this.velocity = vector2 * num9;
                }
            }
            else if ((double) this.ai[0] == 2.0)
            {
                if ((double) this.ai[1] >= 20.0 && (this.type == 574 || this.type == 575))
                {
                    var activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[2]));
                    if (activeSound == null)
                    {
                        var localAi = this.localAI;
                        var index = 2;
                        //Fix By GScience
                        localAi[index] = Main.PlayTrackedSound((SoundStyle) SoundID.DD2_KoboldIgniteLoop, this.Center)
                            .ToFloat();
                    }
                    else
                        activeSound.Position = this.Center;
                }

                this.knockBackResist = 0.0f;
                var num19 = num10;
                ++this.ai[1];
                var flag6 = (double) Vector2.Distance(this.Center, targetData.Center) > (double) num11 &&
                             (double) this.Center.Y > (double) targetData.Center.Y;
                if (flag3)
                    flag6 = false;
                if ((double) this.ai[1] >= (double) num19 && flag6 || (double) this.velocity.Length() < (double) num14)
                {
                    this.ai[0] = 0.0f;
                    this.ai[1] = 0.0f;
                    this.ai[2] = 0.0f;
                    this.ai[3] = 0.0f;
                    var npc = this;
                    npc.velocity = npc.velocity / 2f;
                    this.netUpdate = true;
                    if (flag1)
                    {
                        this.ai[1] = 45f;
                        this.ai[0] = 4f;
                    }
                }
                else
                {
                    var center = this.Center;
                    var vec = targetData.Center - center;
                    vec.Normalize();
                    if (vec.HasNaNs())
                        vec = new Vector2((float) this.direction, 0.0f);
                    this.velocity = (this.velocity * (num12 - 1f) + vec * (this.velocity.Length() + num20)) / num12;
                }

                if (flag2 && Collision.SolidCollision(this.position, this.width, this.height))
                {
                    this.ai[0] = 3f;
                    this.ai[1] = 0.0f;
                    this.ai[2] = 0.0f;
                    this.ai[3] = 0.0f;
                    this.netUpdate = true;
                }
            }
            else if ((double) this.ai[0] == 4.0)
            {
                this.ai[1] -= 3f;
                if ((double) this.ai[1] <= 0.0)
                {
                    this.ai[0] = 0.0f;
                    this.ai[1] = 0.0f;
                    this.netUpdate = true;
                }

                var npc = this;
                npc.velocity = npc.velocity * 0.95f;
            }

            var activeSound1 = Main.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
            if (activeSound1 != null)
            {
                activeSound1.Position = this.Center;
            }
            else
            {
                var localAi = this.localAI;
                var index = 1;
                //Fix By GScience
                localAi[index] = SlotId.Invalid.ToFloat();
            }

            if (this.type == 558 || this.type == 559 || this.type == 560)
            {
                var activeSound2 = Main.GetActiveSound(SlotId.FromFloat(this.localAI[2]));
                if (activeSound2 != null)
                {
                    activeSound2.Position = this.Center;
                }
                else
                {
                    var localAi = this.localAI;
                    var index = 2;
                    //Fix By GScience
                    localAi[index] = SlotId.Invalid.ToFloat();
                }
            }

            if (flag2 && (double) this.ai[0] != 3.0 && (double) Vector2.Distance(this.Center, targetData.Center) < 64.0)
            {
                this.ai[0] = 3f;
                this.ai[1] = 0.0f;
                this.ai[2] = 0.0f;
                this.ai[3] = 0.0f;
                this.netUpdate = true;
            }

            if ((double) this.ai[0] != 3.0)
                return;
            this.position = this.Center;
            this.width = this.height = 192;
            this.position.X -= (float) (this.width / 2);
            this.position.Y -= (float) (this.height / 2);
            this.velocity = Vector2.Zero;
            this.damage = (int) (80.0 * (double) Main.damageMultiplier);
            this.alpha = (int) byte.MaxValue;
            if ((double) this.ai[1] == 0.0 && (this.type == 574 || this.type == 575))
            {
                for (var index1 = 0; index1 < 4; ++index1)
                {
                    var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                }

                for (var index1 = 0; index1 < 20; ++index1)
                {
                    var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                        0.0f, 0.0f, 200, new Color(), 3.7f);
                    Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                    var index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                        0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index3].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 4f;
                    Main.dust[index3].velocity *= 2f;
                    Main.dust[index3].noGravity = true;
                    Main.dust[index3].fadeIn = 2.5f;
                }

                for (var index1 = 0; index1 < 6; ++index1)
                {
                    var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                        0.0f, 0.0f, 0, new Color(), 2.7f);
                    Main.dust[index2].position = this.Center +
                                                 Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                                     .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                                                 (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                }

                for (var index1 = 0; index1 < 12; ++index1)
                {
                    var index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        31, 0.0f, 0.0f, 0, new Color(), 1.5f);
                    Main.dust[index2].position = this.Center +
                                                 Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                                     .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                                                 (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                }

                for (var index1 = 0; index1 < 5; ++index1)
                {
                    var index2 =
                        Gore.NewGore(
                            this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f,
                                (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                    Main.gore[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    Main.gore[index2].velocity *= 0.3f;
                    Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
                    Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
                }
            }

            ++this.ai[1];
            if ((double) this.ai[1] < 3.0)
                return;
            Main.PlaySound(SoundID.Item14, this.position);
            this.life = 0;
            this.HitEffect(0, 10.0);
            this.active = false;
        }

        private void AI_109_DarkMage()
        {
            var flag1 = false;
            var flag2 = false;
            var flag3 = true;
            var flag4 = false;
            var num1 = 4;
            var num2 = 3;
            var num3 = 0;
            var num4 = 0.2f;
            var num5 = 2f;
            var num6 = -0.2f;
            var num7 = -4f;
            var flag5 = true;
            var num8 = 2f;
            var num9 = 0.1f;
            var num10 = 1f;
            var num11 = 0.04f;
            var flag6 = false;
            var num12 = 0.96f;
            var flag7 = true;
            var targetData = this.GetTargetData(true);
            if (this.type == 564 || this.type == 565)
            {
                flag5 = false;
                this.rotation = this.velocity.X * 0.04f;
                this.spriteDirection = this.direction > 0 ? 1 : -1;
                num3 = 2;
                num6 = -0.05f;
                num7 = -0.4f;
                num4 = 0.05f;
                num5 = 0.2f;
                num10 = 0.5f;
                num11 = 0.02f;
                num8 = 0.5f;
                num9 = 0.1f;
                this.localAI[2] = 0.0f;
                DelegateMethods.v3_1 = new Vector3(0.3f, 0.05f, 0.45f) * 1.5f;
                Utils.PlotTileLine(this.Top, this.Bottom, (float) this.width,
                    new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
                if ((double) this.ai[0] < 0.0)
                    this.ai[0] = MathHelper.Min(this.ai[0] + 1f, 0.0f);
                if ((double) this.ai[0] > 0.0)
                {
                    flag7 = false;
                    flag6 = true;
                    num12 = 0.9f;
                    --this.ai[0];
                    if ((double) this.ai[0] == 80.0 && (double) this.ai[1] == 2.0)
                        Main.PlayTrackedSound((SoundStyle) SoundID.DD2_DarkMageSummonSkeleton, this.Center);
                    if ((double) this.ai[1] == 2.0 && (double) this.ai[0] == 64.0 && Main.netMode != 1)
                    {
                        Projectile.NewProjectile(this.Center + new Vector2((float) (this.direction * 24), -40f),
                            Vector2.Zero, 673, 0, 0.0f, Main.myPlayer, 0.0f, 0.0f);
                        DD2Event.RaiseGoblins(this.Center);
                    }

                    if ((double) this.ai[1] == 0.0 && (double) this.ai[0] == 32.0)
                    {
                        var velocity =
                            (targetData.Center - (this.Center + new Vector2((float) (this.direction * 10), -16f)))
                            .SafeNormalize(Vector2.UnitY) * 14f;
                        this.direction = (double) velocity.X > 0.0 ? 1 : -1;
                        if (Main.netMode != 1)
                            Projectile.NewProjectile(this.Center + new Vector2((float) (this.direction * 10), -16f),
                                velocity, 675, 40, 0.0f, Main.myPlayer, 0.0f, 0.0f);
                    }

                    if ((double) this.ai[0] == 126.0 && (double) this.ai[1] == 1.0)
                        Main.PlayTrackedSound((SoundStyle) SoundID.DD2_DarkMageCastHeal, this.Center);
                    if ((double) this.ai[1] == 1.0 && Main.netMode != 1 &&
                        ((double) this.ai[0] == 40.0 || (double) this.ai[0] == 48.0 || (double) this.ai[0] == 56.0))
                    {
                        Point result;
                        if (WorldUtils.Find(
                            new Vector2(this.Center.X + (float) (this.direction * 240), this.Center.Y)
                                .ToTileCoordinates(),
                            Searches.Chain((GenSearch) new Searches.Down(50), (GenCondition) new Conditions.IsSolid()),
                            out result))
                            Projectile.NewProjectile(result.ToWorldCoordinates(8f, 0.0f), Vector2.Zero, 674, 0, 0.0f,
                                Main.myPlayer, 0.0f, 0.0f);
                    }

                    if ((double) this.ai[0] <= 0.0)
                    {
                        var num13 = this.ai[1];
                        ++this.ai[1];
                        if ((double) this.ai[1] >= 3.0)
                            this.ai[1] = 0.0f;
                        this.ai[0] = -120f;
                        if ((double) num13 == 0.0)
                            this.ai[0] = -20f;
                        this.netUpdate = true;
                    }
                }

                if ((double) this.ai[0] == 0.0 && (double) this.localAI[3] >= 60.0)
                {
                    var flag8 = false;
                    var minimum = this.Center + new Vector2(-600f, -200f);
                    var maximum = this.Center + new Vector2(600f, 200f);
                    var num13 = 0;
                    for (var index = 0; index < 200; ++index)
                    {
                        var npc = Main.npc[index];
                        if (npc.active && npc.lifeMax != npc.life &&
                            (npc.Center.Between(minimum, maximum) && ++num13 >= 2))
                        {
                            flag8 = true;
                            break;
                        }
                    }

                    if (!flag8)
                        this.ai[1] = 2f;
                    if ((double) this.ai[1] == 2.0 && !DD2Event.CanRaiseGoblinsHere(this.Center))
                        this.ai[1] = 0.0f;
                    var flag9 = true;
                    if ((double) this.ai[1] == 0.0 && ((double) this.Distance(targetData.Center) >= 1000.0 ||
                                                       !Collision.CanHitLine(this.Center, 0, 0, targetData.Center, 0,
                                                           0)))
                        flag9 = false;
                    if (flag9)
                    {
                        switch ((int) this.ai[1])
                        {
                            case 0:
                                this.ai[0] = 97f;
                                break;
                            case 1:
                                this.ai[0] = (float) sbyte.MaxValue;
                                break;
                            case 2:
                                this.ai[0] = 183f;
                                break;
                        }

                        this.netUpdate = true;
                        flag6 = true;
                    }
                }

                if ((double) this.localAI[3] == 0.0)
                    this.alpha = (int) byte.MaxValue;
                if ((double) this.localAI[3] == 30.0)
                    Main.PlayTrackedSound((SoundStyle) SoundID.DD2_EtherianPortalSpawnEnemy, this.Center);
                if ((double) this.localAI[3] < 60.0)
                {
                    ++this.localAI[3];
                    this.alpha -= 5;
                    if (this.alpha < 0)
                        this.alpha = 0;
                    var num13 = (int) this.localAI[3] / 10;
                    var num14 = this.Size.Length() / 2f / 20f;
                    var maxValue = 5;
                    if (this.type == 576 || this.type == 577)
                        maxValue = 1;
                    for (var index = 0; index < num13; ++index)
                    {
                        if (Main.rand.Next(maxValue) == 0)
                        {
                            var dust = Dust.NewDustDirect(this.position, this.width, this.height, 27,
                                this.velocity.X * 1f, 0.0f, 100, new Color(), 1f);
                            dust.scale = 0.55f;
                            dust.fadeIn = 0.7f;
                            dust.velocity *= 0.1f * num14;
                            dust.velocity += this.velocity;
                        }
                    }
                }
            }

            if (this.justHit)
                this.localAI[2] = 0.0f;
            if (!flag2)
            {
                if ((double) this.localAI[2] >= 0.0)
                {
                    var num13 = 16f;
                    var flag8 = false;
                    var flag9 = false;
                    if ((double) this.position.X > (double) this.localAI[0] - (double) num13 &&
                        (double) this.position.X < (double) this.localAI[0] + (double) num13)
                        flag8 = true;
                    else if ((double) this.velocity.X < 0.0 && this.direction > 0 ||
                             (double) this.velocity.X > 0.0 && this.direction < 0)
                    {
                        flag8 = true;
                        num13 += 24f;
                    }

                    if ((double) this.position.Y > (double) this.localAI[1] - (double) num13 &&
                        (double) this.position.Y < (double) this.localAI[1] + (double) num13)
                        flag9 = true;
                    if (flag8 && flag9)
                    {
                        ++this.localAI[2];
                        if ((double) this.localAI[2] >= 30.0 && (double) num13 == 16.0)
                            flag1 = true;
                        if ((double) this.localAI[2] >= 60.0)
                        {
                            this.localAI[2] = -180f;
                            this.direction *= -1;
                            this.velocity.X *= -1f;
                            this.collideX = false;
                        }
                    }
                    else
                    {
                        this.localAI[0] = this.position.X;
                        this.localAI[1] = this.position.Y;
                        this.localAI[2] = 0.0f;
                    }

                    if (flag7)
                        NPCUtils.TargetClosestOldOnesInvasion(this, true, new Vector2?());
                }
                else
                {
                    ++this.localAI[2];
                    this.direction = (double) targetData.Center.X > (double) this.Center.X ? 1 : -1;
                }
            }

            var index1 = (int) (((double) this.position.X + (double) (this.width / 2)) / 16.0) + this.direction * 2;
            var num15 = (int) (((double) this.position.Y + (double) this.height) / 16.0);
            var num16 = (int) this.Bottom.Y / 16;
            var index2 = (int) this.Bottom.X / 16;
            if (flag6)
            {
                var npc = this;
                npc.velocity = npc.velocity * num12;
            }
            else
            {
                for (var index3 = num15; index3 < num15 + num1; ++index3)
                {
                    if (Main.tile[index1, index3] == null)
                        Main.tile[index1, index3] = new Tile();
                    if (Main.tile[index1, index3].nactive() && Main.tileSolid[(int) Main.tile[index1, index3].type] ||
                        Main.tile[index1, index3].liquid > (byte) 0)
                    {
                        if (index3 <= num15 + 1)
                            flag4 = true;
                        flag3 = false;
                        break;
                    }
                }

                for (var index3 = num16; index3 < num16 + num3; ++index3)
                {
                    if (Main.tile[index2, index3] == null)
                        Main.tile[index2, index3] = new Tile();
                    if (Main.tile[index2, index3].nactive() && Main.tileSolid[(int) Main.tile[index2, index3].type] ||
                        Main.tile[index2, index3].liquid > (byte) 0)
                    {
                        flag4 = true;
                        flag3 = false;
                        break;
                    }
                }

                if (flag5)
                {
                    for (var index3 = num15 - num2; index3 < num15; ++index3)
                    {
                        if (Main.tile[index1, index3] == null)
                            Main.tile[index1, index3] = new Tile();
                        if (Main.tile[index1, index3].nactive() &&
                            Main.tileSolid[(int) Main.tile[index1, index3].type] ||
                            Main.tile[index1, index3].liquid > (byte) 0)
                        {
                            flag4 = false;
                            flag1 = true;
                            break;
                        }
                    }
                }

                if (flag1)
                {
                    flag4 = false;
                    flag3 = true;
                }

                if (flag3)
                {
                    this.velocity.Y += num4;
                    if ((double) this.velocity.Y > (double) num5)
                        this.velocity.Y = num5;
                }
                else
                {
                    if (this.directionY < 0 && (double) this.velocity.Y > 0.0 || flag4)
                        this.velocity.Y += num6;
                    if ((double) this.velocity.Y < (double) num7)
                        this.velocity.Y = num7;
                }

                if (this.collideX)
                {
                    this.velocity.X = this.oldVelocity.X * -0.4f;
                    if (this.direction == -1 && (double) this.velocity.X > 0.0 && (double) this.velocity.X < 1.0)
                        this.velocity.X = 1f;
                    if (this.direction == 1 && (double) this.velocity.X < 0.0 && (double) this.velocity.X > -1.0)
                        this.velocity.X = -1f;
                }

                if (this.collideY)
                {
                    this.velocity.Y = this.oldVelocity.Y * -0.25f;
                    if ((double) this.velocity.Y > 0.0 && (double) this.velocity.Y < 1.0)
                        this.velocity.Y = 1f;
                    if ((double) this.velocity.Y < 0.0 && (double) this.velocity.Y > -1.0)
                        this.velocity.Y = -1f;
                }

                if (this.direction == -1 && (double) this.velocity.X > -(double) num8)
                {
                    this.velocity.X -= num9;
                    if ((double) this.velocity.X > (double) num8)
                        this.velocity.X -= num9;
                    else if ((double) this.velocity.X > 0.0)
                        this.velocity.X += num9 / 2f;
                    if ((double) this.velocity.X < -(double) num8)
                        this.velocity.X = -num8;
                }
                else if (this.direction == 1 && (double) this.velocity.X < (double) num8)
                {
                    this.velocity.X += num9;
                    if ((double) this.velocity.X < -(double) num8)
                        this.velocity.X += num9;
                    else if ((double) this.velocity.X < 0.0)
                        this.velocity.X -= num9 / 2f;
                    if ((double) this.velocity.X > (double) num8)
                        this.velocity.X = num8;
                }

                if (this.directionY == -1 && (double) this.velocity.Y > -(double) num10)
                {
                    this.velocity.Y -= num11;
                    if ((double) this.velocity.Y > (double) num10)
                        this.velocity.Y -= num11 * 1.25f;
                    else if ((double) this.velocity.Y > 0.0)
                        this.velocity.Y += num11 * 0.75f;
                    if ((double) this.velocity.Y >= -(double) num10)
                        return;
                    this.velocity.Y = -num8;
                }
                else
                {
                    if (this.directionY != 1 || (double) this.velocity.Y >= (double) num10)
                        return;
                    this.velocity.Y += num11;
                    if ((double) this.velocity.Y < -(double) num10)
                        this.velocity.Y += num11 * 1.25f;
                    else if ((double) this.velocity.Y < 0.0)
                        this.velocity.Y -= num11 * 0.75f;
                    if ((double) this.velocity.Y <= (double) num10)
                        return;
                    this.velocity.Y = num10;
                }
            }
        }

        private void AI_111_DD2LightningBug()
        {
            var flag1 = true;
            var num1 = 7f;
            var num2 = 60f;
            var num3 = 60f;
            var num4 = 1f;
            var num5 = 0.96f;
            var num6 = 30;
            var num7 = 20;
            var num8 = 200f;
            var Damage = 40;
            var Type = 438;
            var num9 = 10f;
            var num10 = 100f;
            var flag2 = false;
            var num11 = 0.05f;
            var center = this.Center;
            NPCUtils.TargetClosestOldOnesInvasion(this, true, new Vector2?());
            var targetData = this.GetTargetData(true);
            var flag3 = false;
            if (this.type == 578)
            {
                num1 = 4f;
                num2 = 20f;
                num3 = 20f;
                flag3 = true;
                flag2 = true;
                num11 = 0.1f;
                Type = 682;
                Damage = 10;
                num9 = 10f;
                num10 = 50f;
                num6 = 5;
                num7 = 30;
                center += new Vector2((float) (-this.spriteDirection * 20), 10f);
                if (Main.rand.Next(15) == 0)
                {
                    var position = this.position;
                    if (this.direction == -1)
                        position.X += (float) (this.width / 2);
                    var dust = Dust.NewDustDirect(position, this.width / 2, this.height, 272, 0.0f, 0.0f, 0,
                        new Color(), 1f);
                    dust.scale = 0.65f;
                    dust.velocity.Y -= 0.8f;
                    if ((double) dust.velocity.X * (double) this.direction > 0.0)
                        dust.velocity.X *= -1f;
                    if ((double) dust.velocity.Y > 0.0)
                        dust.velocity *= -0.5f;
                }

                if (Main.rand.Next(80) == 0)
                {
                    var rotationVector2 = (Main.rand.NextFloat() * 6.283185f).ToRotationVector2();
                    var dust1 = Dust.NewDustPerfect(this.Center, 272, new Vector2?(rotationVector2), 0, new Color(),
                        1f);
                    dust1.velocity *= 1.1f;
                    dust1.noGravity = true;
                    dust1.customData = (object) this;
                    var dust2 = Dust.NewDustPerfect(this.Center, 272, new Vector2?(rotationVector2), 0, new Color(),
                        1f);
                    dust2.velocity *= 1.5f;
                    dust2.noGravity = true;
                    dust2.customData = (object) this;
                }
            }

            if (flag3)
            {
                if ((double) this.localAI[1] == 0.0)
                    this.alpha = (int) byte.MaxValue;
                if ((double) this.localAI[1] == 30.0)
                    Main.PlayTrackedSound((SoundStyle) SoundID.DD2_EtherianPortalSpawnEnemy, this.Center);
                if ((double) this.localAI[1] < 60.0)
                {
                    ++this.localAI[1];
                    this.alpha -= 5;
                    if (this.alpha < 0)
                        this.alpha = 0;
                    var num12 = (int) this.localAI[1] / 10;
                    var num13 = this.Size.Length() / 2f / 20f;
                    var maxValue = 5;
                    if (this.type == 576 || this.type == 577)
                        maxValue = 1;
                    for (var index = 0; index < num12; ++index)
                    {
                        if (Main.rand.Next(maxValue) == 0)
                        {
                            var dust = Dust.NewDustDirect(this.position, this.width, this.height, 27,
                                this.velocity.X * 1f, 0.0f, 100, new Color(), 1f);
                            dust.scale = 0.55f;
                            dust.fadeIn = 0.7f;
                            dust.velocity *= 0.1f * num13;
                            dust.velocity += this.velocity;
                        }
                    }
                }
            }

            if (flag2)
            {
                for (var index = 0; index < 200; ++index)
                {
                    if (index != this.whoAmI && Main.npc[index].active &&
                        (Main.npc[index].type == this.type &&
                         (double) Math.Abs(this.position.X - Main.npc[index].position.X) +
                         (double) Math.Abs(this.position.Y - Main.npc[index].position.Y) < (double) this.width))
                    {
                        if ((double) this.position.X < (double) Main.npc[index].position.X)
                            this.velocity.X -= num11;
                        else
                            this.velocity.X += num11;
                        if ((double) this.position.Y < (double) Main.npc[index].position.Y)
                            this.velocity.Y -= num11;
                        else
                            this.velocity.Y += num11;
                    }
                }
            }

            this.rotation = (float) ((double) Math.Abs(this.velocity.X) * (double) this.direction * 0.100000001490116);
            this.spriteDirection = this.direction;
            var position1 = center;
            var v = targetData.Center - position1;
            var vector2 = v.SafeNormalize(Vector2.UnitY) * num1;
            var flag4 = Collision.CanHit(this.Center, 1, 1, targetData.Center, 1, 1);
            if ((double) this.localAI[0] < 0.0)
                ++this.localAI[0];
            if (!flag1)
            {
                this.velocity = (this.velocity * (num2 - 1f) + vector2) / num2;
                if (this.timeLeft <= 10)
                    return;
                this.timeLeft = 10;
            }
            else if ((double) v.Length() > (double) num8 || !flag4)
                this.velocity = (this.velocity * (num3 - 1f) + vector2) / num3;
            else if ((double) v.Y < (double) num10)
            {
                this.velocity.Y -= 0.03f;
            }
            else
            {
                if ((double) this.localAI[0] < 0.0)
                    return;
                var npc = this;
                npc.velocity = npc.velocity * num5;
                if ((double) this.velocity.Length() >= (double) num4 || Main.netMode == 1)
                    return;
                ++this.localAI[0];
                if ((double) this.localAI[0] < (double) num6)
                    return;
                this.localAI[0] = (float) -num7;
                this.direction = this.spriteDirection = (double) vector2.X > 0.0 ? 1 : -1;
                vector2 = v + Utils.RandomVector2(Main.rand, -25f, 25f);
                vector2.X *= (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.00499999988824129);
                vector2.Y *= (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.00499999988824129);
                vector2 = vector2.SafeNormalize(Vector2.UnitY) * num9;
                vector2.X *= (float) (1.0 + (double) Main.rand.Next(-20, 21) * (1.0 / 160.0));
                vector2.Y *= (float) (1.0 + (double) Main.rand.Next(-20, 21) * (1.0 / 160.0));
                Projectile.NewProjectile(position1, vector2, Type, Damage, 0.0f, Main.myPlayer, 0.0f, 0.0f);
            }
        }

        public void ReflectProjectiles(Microsoft.Xna.Framework.Rectangle myRect)
        {
            for (var i = 0; i < 1000; ++i)
            {
                if (Main.projectile[i].active && Main.projectile[i].CanReflect())
                {
                    var hitbox = Main.projectile[i].Hitbox;
                    if (myRect.Intersects(hitbox))
                        this.ReflectProjectile(i);
                }
            }
        }

        public void ReflectProjectile(int i)
        {
            if (this.HitSound != null)
                Main.PlaySound(this.HitSound, Main.projectile[i].position);
            for (var index1 = 0; index1 < 3; ++index1)
            {
                var index2 = Dust.NewDust(Main.projectile[i].position, Main.projectile[i].width,
                    Main.projectile[i].height, 31, 0.0f, 0.0f, 0, new Color(), 1f);
                Main.dust[index2].velocity *= 0.3f;
            }

            Main.projectile[i].hostile = true;
            Main.projectile[i].friendly = false;
            var vector2_1 = Main.player[Main.projectile[i].owner].Center - Main.projectile[i].Center;
            vector2_1.Normalize();
            var vector2_2 = vector2_1 * Main.projectile[i].oldVelocity.Length();
            Main.projectile[i].velocity =
                new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            Main.projectile[i].velocity.Normalize();
            var projectile1 = Main.projectile[i];
            projectile1.velocity = projectile1.velocity * vector2_2.Length();
            var projectile2 = Main.projectile[i];
            projectile2.velocity = projectile2.velocity + vector2_2 * 20f;
            Main.projectile[i].velocity.Normalize();
            var projectile3 = Main.projectile[i];
            projectile3.velocity = projectile3.velocity * vector2_2.Length();
            Main.projectile[i].damage /= 2;
            Main.projectile[i].penetrate = 1;
        }

        public int GetShootingFrame(float circleY)
        {
            var num = -4;
            if ((double) circleY < -0.300000011920929)
                num = 1;
            if ((double) circleY < -0.100000001490116)
                num = 0;
            if ((double) circleY > 0.100000001490116)
                num = 2;
            if ((double) circleY > 0.300000011920929)
                num = 3;
            if (this.type == 228 || this.type == 229 || (this.type == 209 || this.type == 22) || this.type == 368)
            {
                if (num == -4)
                    num = 1;
                if ((double) circleY >= -0.100000001490116)
                    ++num;
            }

            return num;
        }

        public Tuple<Vector2, float> GetSwingStats(int swingMax, int swingCurrent, int aimDir, int itemWidth,
            int itemHeight)
        {
            var zero = Vector2.Zero;
            if ((double) swingCurrent < (double) swingMax * 0.333)
            {
                var num = 10f;
                if (itemWidth > 32)
                    num = 14f;
                if (itemWidth >= 52)
                    num = 24f;
                if (itemWidth >= 64)
                    num = 28f;
                if (itemWidth >= 92)
                    num = 38f;
                zero.X = this.Center.X + ((float) itemWidth * 0.5f - num) * (float) aimDir;
                zero.Y = this.position.Y + 24f;
            }
            else if ((double) swingCurrent < (double) swingMax * 0.666)
            {
                var num1 = 10f;
                if (itemWidth > 32)
                    num1 = 18f;
                if (itemWidth >= 52)
                    num1 = 24f;
                if (itemWidth >= 64)
                    num1 = 28f;
                if (itemWidth >= 92)
                    num1 = 38f;
                zero.X = this.Center.X + ((float) itemWidth * 0.5f - num1) * (float) aimDir;
                var num2 = 10f;
                if (itemHeight > 32)
                    num2 = 8f;
                if (itemHeight > 52)
                    num2 = 12f;
                if (itemHeight > 64)
                    num2 = 14f;
                zero.Y = this.position.Y + num2;
            }
            else
            {
                var num1 = 6f;
                if (itemWidth > 32)
                    num1 = 14f;
                if (itemWidth >= 48)
                    num1 = 18f;
                if (itemWidth >= 52)
                    num1 = 24f;
                if (itemWidth >= 64)
                    num1 = 28f;
                if (itemWidth >= 92)
                    num1 = 38f;
                zero.X = this.Center.X - ((float) itemWidth * 0.5f - num1) * (float) aimDir;
                var num2 = 10f;
                if (itemHeight > 32)
                    num2 = 10f;
                if (itemHeight > 52)
                    num2 = 12f;
                if (itemHeight > 64)
                    num2 = 14f;
                zero.Y = this.position.Y + num2;
            }

            var num3 = (float) (((double) swingCurrent / (double) swingMax - 0.5) * (double) -aimDir * 3.5 -
                                  (double) aimDir * 0.300000011920929);
            return Tuple.Create<Vector2, float>(zero, num3);
        }

        public void TweakSwingStats(int swingMax, int swingCurrent, int aimDir,
            ref Microsoft.Xna.Framework.Rectangle itemRectangle)
        {
            if ((double) swingCurrent < (double) swingMax * 0.333)
            {
                if (aimDir == -1)
                    itemRectangle.X -= (int) ((double) itemRectangle.Width * 1.4 - (double) itemRectangle.Width);
                itemRectangle.Width = (int) ((double) itemRectangle.Width * 1.4);
                itemRectangle.Y += (int) ((double) itemRectangle.Height * 0.5);
                itemRectangle.Height = (int) ((double) itemRectangle.Height * 1.1);
            }
            else
            {
                if ((double) swingCurrent < (double) swingMax * 0.666)
                    return;
                if (aimDir == 1)
                    itemRectangle.X -= (int) ((double) itemRectangle.Width * 1.2);
                itemRectangle.Width *= 2;
                itemRectangle.Y -= (int) ((double) itemRectangle.Height * 1.4 - (double) itemRectangle.Height);
                itemRectangle.Height = (int) ((double) itemRectangle.Height * 1.4);
            }
        }

        public bool UsesPartyHat()
        {
            if (this.frame.Height > 0 && this.townNPC && (BirthdayParty.PartyIsUp && this.type != 441))
                return this.type != 37;
            return false;
        }

        public PartyHatColor GetPartyHatColor()
        {
            if (!this.UsesPartyHat() || string.IsNullOrEmpty(this.GivenOrTypeName))
                return PartyHatColor.None;
            var num1 = this.GivenOrTypeName.Length + (int) this.GivenOrTypeName[0];
            var moonPhase = Main.moonPhase;
            if (Main.dayTime)
                --moonPhase;
            var num2 = num1 + this.whoAmI + moonPhase * (this.whoAmI % 2 == 0).ToDirectionInt();
            if (num2 < 0)
                num2 += 5;
            return (PartyHatColor) (num2 % 5);
        }

        public void FindFrame()
        {
            var num1 = 1;
            if (!Main.dedServ)
            {
                if (!Main.NPCLoaded[this.type] || Main.npcTexture[this.type] == null)
                    return;
                num1 = Main.npcTexture[this.type].Height / Main.npcFrameCount[this.type];
            }

            var num2 = 0;
            if (this.aiAction == 0)
                num2 = (double) this.velocity.Y >= 0.0
                    ? ((double) this.velocity.Y <= 0.0 ? ((double) this.velocity.X == 0.0 ? 0 : 1) : 3)
                    : 2;
            else if (this.aiAction == 1)
                num2 = 4;
            if (this.type == 568 || this.type == 569)
            {
                if ((double) this.ai[0] > 0.0)
                {
                    var num3 = this.frame.Y / this.frame.Height;
                    this.spriteDirection = this.direction;
                    if (num3 < 5 || num3 > 16)
                        this.frameCounter = 0.0;
                    var num4 = 7;
                    ++this.frameCounter;
                    var num5 = 0;
                    int num6;
                    if (this.frameCounter >= (double) (5 * (num6 = num5 + 1)))
                        num4 = 8;
                    int num7;
                    if (this.frameCounter >= (double) (5 * (num7 = num6 + 1)))
                        num4 = 9;
                    int num8;
                    if (this.frameCounter >= (double) (5 * (num8 = num7 + 1)))
                        num4 = 10;
                    int num9;
                    if (this.frameCounter >= (double) (5 * (num9 = num8 + 1)))
                        num4 = 7;
                    int num10;
                    if (this.frameCounter >= (double) (5 * (num10 = num9 + 1)))
                        num4 = 8;
                    int num11;
                    if (this.frameCounter >= (double) (5 * (num11 = num10 + 1)))
                        num4 = 9;
                    int num12;
                    if (this.frameCounter >= (double) (5 * (num12 = num11 + 1)))
                        num4 = 10;
                    int num13;
                    if (this.frameCounter >= (double) (5 * (num13 = num12 + 1)))
                        num4 = 7;
                    int num14;
                    if (this.frameCounter >= (double) (5 * (num14 = num13 + 1)))
                        num4 = 8;
                    int num15;
                    if (this.frameCounter >= (double) (5 * (num15 = num14 + 1)))
                        num4 = 9;
                    int num16;
                    if (this.frameCounter >= (double) (5 * (num16 = num15 + 1)))
                        num4 = 10;
                    int num17;
                    if (this.frameCounter >= (double) (5 * (num17 = num16 + 1)))
                        num4 = 7;
                    int num18;
                    if (this.frameCounter >= (double) (5 * (num18 = num17 + 1)))
                        num4 = 8;
                    int num19;
                    if (this.frameCounter >= (double) (5 * (num19 = num18 + 1)))
                        num4 = 9;
                    int num20;
                    if (this.frameCounter >= (double) (5 * (num20 = num19 + 1)))
                        num4 = 10;
                    int num21;
                    if (this.frameCounter >= (double) (5 * (num21 = num20 + 1)))
                        num4 = 7;
                    int num22;
                    if (this.frameCounter >= (double) (5 * (num22 = num21 + 1)))
                        num4 = 8;
                    int num23;
                    if (this.frameCounter >= (double) (5 * (num23 = num22 + 1)))
                        num4 = 9;
                    int num24;
                    if (this.frameCounter >= (double) (5 * (num24 = num23 + 1)))
                        num4 = 10;
                    int num25;
                    if (this.frameCounter >= (double) (5 * (num25 = num24 + 1)))
                        num4 = 7;
                    int num26;
                    if (this.frameCounter >= (double) (5 * (num26 = num25 + 1)))
                        num4 = 8;
                    int num27;
                    if (this.frameCounter >= (double) (5 * (num27 = num26 + 1)))
                        num4 = 9;
                    int num28;
                    if (this.frameCounter >= (double) (5 * (num28 = num27 + 1)))
                        num4 = 10;
                    int num29;
                    if (this.frameCounter >= (double) (5 * (num29 = num28 + 1)))
                        num4 = 11;
                    int num30;
                    if (this.frameCounter >= (double) (5 * (num30 = num29 + 1)))
                        num4 = 12;
                    int num31;
                    if (this.frameCounter >= (double) (5 * (num31 = num30 + 1)))
                        num4 = 13;
                    int num32;
                    if (this.frameCounter >= (double) (5 * (num32 = num31 + 1)))
                        num4 = 14;
                    if (this.frameCounter >= 270.0)
                    {
                        num4 = 14;
                        this.frameCounter -= 10.0;
                    }

                    this.frame.Y = num1 * num4;
                }
                else
                {
                    if ((double) this.velocity.Y == 0.0)
                        this.spriteDirection = this.direction;
                    if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 ||
                        this.direction == 1 && (double) this.velocity.X < 0.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = num1 * 4;
                    }
                    else if ((double) this.velocity.X == 0.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = num1 * 6;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X);
                        if (this.frameCounter >= 56.0 || this.frameCounter < 0.0)
                            this.frameCounter = 0.0;
                        this.frame.Y = num1 * (int) (this.frameCounter / 8.0);
                    }
                }
            }
            else if (this.type == 551)
            {
                var num3 = this.frame.Y / num1;
                int num4;
                if ((double) this.ai[0] == 4.0)
                {
                    var num5 = 60f;
                    var num6 = 6 * 10;
                    if (num3 < 5)
                        this.frameCounter = 0.0;
                    num4 = 5;
                    this.frameCounter = (double) (int) this.ai[1];
                    var num7 = 0;
                    int num8;
                    if (this.frameCounter >= (double) (5 * (num8 = num7 + 1)))
                        num4 = 6;
                    num8 = 0;
                    if (this.frameCounter >= (double) num5 - 6.0)
                        num4 = 7;
                    if (this.frameCounter >= (double) num5 - 3.0)
                        num4 = 8;
                    if (this.frameCounter >= (double) num5)
                        num4 = 9 + (int) this.frameCounter / 3 % 2;
                    var num9 = 0;
                    if (this.frameCounter >= (double) num5 + (double) num6 + 3.0)
                        num4 = 8;
                    int num10;
                    if (this.frameCounter >= (double) num5 + (double) num6 + 3.0 + (double) (5 * (num10 = num9 + 1)))
                        num4 = 7;
                    if (this.frameCounter >= (double) num5 + (double) num6 + 3.0 + (double) (5 * (num8 = num10 + 1)))
                        num4 = 0;
                }
                else if ((double) this.ai[0] == 3.0)
                {
                    var num5 = 40f;
                    var num6 = 80f;
                    var num7 = num5 + num6;
                    var num8 = 25f;
                    if (num3 < 5)
                        this.frameCounter = 0.0;
                    num4 = 5;
                    this.frameCounter = (double) (int) this.ai[1];
                    var num9 = 0;
                    int num10;
                    if (this.frameCounter >= (double) (5 * (num10 = num9 + 1)))
                        num4 = 6;
                    num10 = 0;
                    if (this.frameCounter >= (double) num5 - 6.0)
                        num4 = 7;
                    if (this.frameCounter >= (double) num5 - 3.0)
                        num4 = 8;
                    if (this.frameCounter >= (double) num5)
                        num4 = 9 + (int) this.frameCounter / 3 % 2;
                    var num11 = 0;
                    if (this.frameCounter >= (double) num7 - (double) num8 + 3.0)
                        num4 = 8;
                    int num12;
                    if (this.frameCounter >= (double) num7 - (double) num8 + 3.0 + (double) (5 * (num12 = num11 + 1)))
                        num4 = 7;
                    if (this.frameCounter >= (double) num7 - (double) num8 + 3.0 + (double) (5 * (num10 = num12 + 1)))
                        num4 = 0;
                }
                else if ((double) this.ai[0] == 5.0)
                    num4 = 3;
                else if ((double) this.ai[0] == 6.0)
                {
                    if (num3 > 4)
                        this.frameCounter = 0.0;
                    num4 = 1;
                    this.frameCounter = (double) (int) this.ai[1];
                    var num5 = 0;
                    int num6;
                    if (this.frameCounter >= (double) (8 * (num6 = num5 + 1)))
                        num4 = 2;
                    int num7;
                    if (this.frameCounter >= (double) (8 * (num7 = num6 + 1)))
                        num4 = 3;
                    int num8;
                    if (this.frameCounter >= (double) (8 * (num8 = num7 + 1)))
                        num4 = 4;
                    int num9;
                    if (this.frameCounter >= (double) (8 * (num9 = num8 + 1)))
                        num4 = 3;
                    int num10;
                    if (this.frameCounter >= (double) (8 * (num10 = num9 + 1)))
                        num4 = 4;
                    int num11;
                    if (this.frameCounter >= (double) (8 * (num11 = num10 + 1)))
                        num4 = 3;
                    int num12;
                    if (this.frameCounter >= (double) (8 * (num12 = num11 + 1)))
                        num4 = 2;
                    int num13;
                    if (this.frameCounter >= (double) (8 * (num13 = num12 + 1)))
                        num4 = 1;
                    int num14;
                    if (this.frameCounter >= (double) (8 * (num14 = num13 + 1)))
                        num4 = 0;
                }
                else
                    num4 = 0;

                this.frame.Y = num1 * num4;
            }

            if (this.type == 552 || this.type == 553 || this.type == 554)
            {
                if ((double) this.ai[0] > 0.0)
                {
                    this.spriteDirection = this.direction;
                    if (this.frame.Y < num1 * 10 || this.frame.Y > num1 * 13 || (double) this.ai[1] == 29.0)
                    {
                        this.frame.Y = num1 * 10;
                        this.frameCounter = 0.0;
                    }

                    if (++this.frameCounter >= 6.0 && this.frame.Y < num1 * 13)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                    }
                }
                else
                {
                    if ((double) this.velocity.Y == 0.0)
                        this.spriteDirection = this.direction;
                    if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 ||
                        this.direction == 1 && (double) this.velocity.X < 0.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = num1 * 8;
                    }
                    else if ((double) this.velocity.X == 0.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = num1 * 9;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X);
                        if (this.frameCounter >= 64.0 || this.frameCounter < 0.0)
                            this.frameCounter = 0.0;
                        this.frame.Y = num1 * (int) (this.frameCounter / 8.0);
                    }
                }
            }

            if (this.type == 572 || this.type == 573)
            {
                if ((double) this.ai[0] > 0.0 && (double) this.ai[1] == 0.0)
                {
                    this.spriteDirection = this.direction;
                    if (this.frame.Y != num1 * 8 || this.frameCounter > 2.0)
                    {
                        this.frame.Y = num1 * 8;
                        this.frameCounter = 0.0;
                    }

                    if (this.frameCounter == 0.0)
                    {
                        this.frameCounter = 1.0;
                        EmoteBubble.NewBubble(3, new WorldUIAnchor((Entity) this), 60);
                    }
                }
                else if ((double) this.ai[1] == 1.0)
                {
                    if ((double) this.velocity.Y == 0.0)
                        this.spriteDirection = this.direction;
                    if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 ||
                        this.direction == 1 && (double) this.velocity.X < 0.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = num1 * 17;
                    }
                    else if ((double) this.velocity.X == 0.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = num1 * 8;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X);
                        if (this.frameCounter >= 64.0 || this.frameCounter < 0.0)
                            this.frameCounter = 0.0;
                        this.frame.Y = num1 * ((int) (this.frameCounter / 8.0) + 8);
                    }
                }
                else
                {
                    if ((double) this.velocity.Y == 0.0)
                        this.spriteDirection = this.direction;
                    if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 ||
                        this.direction == 1 && (double) this.velocity.X < 0.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = num1 * 16;
                    }
                    else if ((double) this.velocity.X == 0.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = 0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X);
                        if (this.frameCounter >= 64.0 || this.frameCounter < 0.0)
                            this.frameCounter = 0.0;
                        this.frame.Y = num1 * (int) (this.frameCounter / 8.0);
                    }
                }
            }

            if (this.type == 566 || this.type == 567)
            {
                if ((double) this.velocity.Y == 0.0)
                    this.spriteDirection = this.direction;
                if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 ||
                    this.direction == 1 && (double) this.velocity.X < 0.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * 8;
                }
                else if ((double) this.velocity.X == 0.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = 0;
                }
                else
                {
                    this.frameCounter += (double) Math.Abs(this.velocity.X);
                    if (this.frameCounter >= 64.0 || this.frameCounter < 0.0)
                        this.frameCounter = 0.0;
                    this.frame.Y = num1 * (int) (this.frameCounter / 8.0);
                }
            }

            if (this.type == 576 || this.type == 577)
            {
                var num3 = this.frame.Y;
                this.frame.Width = 80;
                if ((double) this.ai[0] > 0.0 && (double) this.ai[1] == 0.0)
                {
                    this.spriteDirection = this.direction;
                    if (num3 < 11 || num3 > 20)
                    {
                        num3 = 11;
                        this.frameCounter = 0.0;
                    }

                    var num4 = 4;
                    if (num3 == 13 || num3 == 19)
                        num4 = 8;
                    if (num3 == 14 || num3 == 18)
                        num4 = 2;
                    if (++this.frameCounter >= (double) num4 && num3 < 20)
                    {
                        this.frameCounter = 0.0;
                        ++num3;
                    }
                }
                else if ((double) this.ai[0] > 0.0 && (double) this.ai[1] == 2.0)
                {
                    this.spriteDirection = this.direction;
                    if (num3 < 37 || num3 > 47)
                    {
                        num3 = 39;
                        this.frameCounter = 0.0;
                    }

                    var num4 = 5;
                    if (num3 == 42)
                        num4 = 6;
                    if (num3 == 45)
                        num4 = 8;
                    if (num3 == 46)
                        num4 = 4;
                    if (num3 == 47)
                        num4 = 26;
                    if (num3 == 37 || num3 == 38)
                        num4 = 7;
                    var flag = true;
                    if (num3 == 46 && (double) this.velocity.Y != 0.0)
                        flag = false;
                    if (num3 == 38)
                        flag = false;
                    if (flag)
                        ++this.frameCounter;
                    if (this.frameCounter >= (double) num4)
                    {
                        if (num3 < 47)
                        {
                            this.frameCounter = 0.0;
                            ++num3;
                        }
                        else
                        {
                            num3 = 37;
                            this.frameCounter = 0.0;
                        }
                    }
                }
                else if ((double) this.ai[0] > 0.0 && (double) this.ai[1] == 1.0)
                {
                    this.spriteDirection = this.direction;
                    if (num3 < 21 || num3 > 38)
                    {
                        num3 = 21;
                        this.frameCounter = 0.0;
                    }

                    if (++this.frameCounter >= 5.0 && num3 < 38)
                    {
                        this.frameCounter = 0.0;
                        ++num3;
                    }
                }
                else
                {
                    if ((double) this.velocity.Y == 0.0)
                        this.spriteDirection = this.direction;
                    if ((double) this.velocity.Y != 0.0)
                    {
                        this.frameCounter = 0.0;
                        num3 = 43;
                    }
                    else if ((double) this.velocity.X == 0.0)
                    {
                        this.frameCounter = 0.0;
                        num3 = 0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X);
                        if (this.frameCounter >= 60.0 || this.frameCounter < 0.0)
                            this.frameCounter = 0.0;
                        num3 = 1 + (int) (this.frameCounter / 6.0);
                    }
                }

                this.frame.Y = num3;
            }

            if (this.type == 570 || this.type == 571)
            {
                if ((double) this.ai[1] > 0.0 && (double) this.ai[0] > 0.0)
                {
                    this.spriteDirection = this.direction;
                    if (this.frame.Y < num1 * 10 || this.frame.Y > num1 * 15 || (double) this.ai[1] == 59.0)
                    {
                        this.frame.Y = num1 * 10;
                        this.frameCounter = 0.0;
                    }

                    var num3 = 5;
                    if (this.frame.Y == num1 * 14)
                        num3 = 35;
                    if (++this.frameCounter >= (double) num3 && this.frame.Y < num1 * 15)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                    }
                }
                else
                {
                    if ((double) this.velocity.Y == 0.0)
                        this.spriteDirection = this.direction;
                    if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 ||
                        this.direction == 1 && (double) this.velocity.X < 0.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = num1;
                    }
                    else if ((double) this.velocity.X == 0.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = num1 * 9;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X);
                        if (this.frameCounter >= 64.0 || this.frameCounter < 0.0)
                            this.frameCounter = 0.0;
                        this.frame.Y = num1 * (int) (this.frameCounter / 8.0 + 2.0);
                    }
                }
            }

            if (this.type == 561 || this.type == 562 || this.type == 563)
            {
                if (this.justHit)
                    this.justHit = this.justHit;
                if ((double) this.ai[1] > 0.0 && (double) this.ai[0] > 0.0)
                {
                    this.spriteDirection = this.direction;
                    if (this.frame.Y < num1 * 10 || this.frame.Y > num1 * 13 || (double) this.ai[1] == 89.0)
                    {
                        this.frame.Y = num1 * 10;
                        this.frameCounter = 0.0;
                    }

                    if (++this.frameCounter >= 6.0 && this.frame.Y < num1 * 13)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                    }
                }
                else
                {
                    if ((double) this.velocity.Y == 0.0)
                        this.spriteDirection = this.direction;
                    if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 ||
                        this.direction == 1 && (double) this.velocity.X < 0.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = num1 * 8;
                    }
                    else if ((double) this.velocity.X == 0.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = num1 * 9;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X);
                        if (this.frameCounter >= 64.0 || this.frameCounter < 0.0)
                            this.frameCounter = 0.0;
                        this.frame.Y = num1 * (int) (this.frameCounter / 8.0);
                    }
                }
            }

            if (this.type == 555 || this.type == 556 || this.type == 557)
            {
                if ((double) this.ai[1] > 0.0 && (double) this.ai[0] > 0.0)
                {
                    this.spriteDirection = this.direction;
                    if (this.frame.Y < num1 * 10 || this.frame.Y > num1 * 16 || (double) this.ai[1] == 41.0)
                    {
                        this.frame.Y = num1 * 10;
                        this.frameCounter = 0.0;
                    }

                    if (++this.frameCounter >= 6.0 && this.frame.Y < num1 * 16)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                    }
                }
                else
                {
                    if ((double) this.velocity.Y == 0.0)
                        this.spriteDirection = this.direction;
                    if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 ||
                        this.direction == 1 && (double) this.velocity.X < 0.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = num1;
                    }
                    else if ((double) this.velocity.X == 0.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = 0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X);
                        if (this.frameCounter >= 64.0 || this.frameCounter < 0.0)
                            this.frameCounter = 0.0;
                        this.frame.Y = num1 * ((int) (this.frameCounter / 8.0) + 2);
                    }
                }
            }

            if (this.type == 558 || this.type == 559 || this.type == 560)
            {
                if ((double) this.velocity.X > 0.0)
                    this.spriteDirection = 1;
                if ((double) this.velocity.X < 0.0)
                    this.spriteDirection = -1;
                var num3 = this.velocity.ToRotation();
                if ((double) this.velocity.X < 0.0)
                    num3 += 3.141593f;
                if ((double) this.ai[0] != 2.0)
                    num3 = this.velocity.X * 0.1f;
                this.rotation = num3;
                if ((double) this.ai[0] == 2.0)
                    this.frame.Y = num1 * 4;
                else if (++this.frameCounter >= 6.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                    if (this.frame.Y >= num1 * 4)
                        this.frame.Y = 0;
                }
            }

            if (this.type == 578)
            {
                this.rotation = this.velocity.X * 0.1f;
                if (++this.frameCounter >= 4.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                    if (this.frame.Y >= num1 * 4)
                        this.frame.Y = 0;
                }
            }

            if (this.type == 574 || this.type == 575)
            {
                if ((double) this.velocity.X > 0.0)
                    this.spriteDirection = 1;
                if ((double) this.velocity.X < 0.0)
                    this.spriteDirection = -1;
                var rotation = this.velocity.ToRotation();
                if ((double) this.velocity.X < 0.0)
                    rotation += 3.141593f;
                this.rotation = this.rotation.AngleTowards(rotation, 0.02f);
                if ((double) this.ai[0] != 0.0)
                {
                    if (this.frame.Y < num1 * 2)
                    {
                        this.frame.Y = num1 * 2;
                        this.frameCounter = 0.0;
                    }

                    var num3 = 4;
                    if (this.frame.Y >= num1 * 5)
                        num3 = 8;
                    var Position = this.Center +
                                       new Vector2((float) (56 * this.spriteDirection), -30f).RotatedBy(
                                           (double) this.rotation, new Vector2());
                    if (++this.frameCounter >= (double) num3 && this.frame.Y < num1 * 9)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                        if (this.frame.Y == num1 * 9)
                        {
                            for (var index = 0; index < 8; ++index)
                            {
                                var dust = Dust.NewDustDirect(Position, 0, 0, 6, 0.0f, 0.0f, 100, new Color(), 1f);
                                dust.velocity *= 3f;
                                dust.scale = 0.6f;
                                dust.fadeIn = 1.2f;
                                dust.noGravity = true;
                                dust.noLight = true;
                            }
                        }
                    }

                    if (this.frame.Y >= num1 * 9 && (double) this.ai[0] < 3.0)
                    {
                        var vector2_1 = Position;
                        var vector2_2 = Position + (this.oldPos[3] - this.position);
                        var maxValue = 5;
                        if (this.frameCounter > 60.0)
                            maxValue = 4;
                        if (this.frameCounter > 180.0)
                            maxValue = 3;
                        if (this.frameCounter > 300.0)
                            maxValue = 2;
                        if (this.frameCounter > 600.0)
                            maxValue = 1;
                        for (var index = 0; index < 2; ++index)
                        {
                            if (Main.rand.Next(maxValue) == 0)
                            {
                                var dust = Dust.NewDustDirect(
                                    Vector2.Lerp(vector2_2, vector2_1,
                                        (float) ((double) index / 10.0 + 0.100000001490116)), 0, 0, 6, 0.0f, 0.0f, 50,
                                    new Color(), 1f);
                                dust.scale = 0.3f;
                                dust.fadeIn = 1.5f;
                                dust.noGravity = true;
                                dust.noLight = true;
                            }
                        }
                    }
                }
                else if (++this.frameCounter >= 6.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                    if (this.frame.Y >= num1 * 2)
                        this.frame.Y = 0;
                }
            }

            if (this.type == 549)
            {
                this.spriteDirection = 1;
                this.rotation = 0.0f;
                if (++this.frameCounter >= 6.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                    if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
                        this.frame.Y = 0;
                }
            }

            if (this.type == 564 || this.type == 565)
            {
                var y = this.frame.Y;
                this.frame.Width = 80;
                this.frame.Height = 80;
                int num3;
                if ((double) this.ai[0] > 0.0 && (double) this.ai[1] == 0.0)
                {
                    this.spriteDirection = this.direction;
                    if (y < 5 || y > 13)
                        this.frameCounter = 0.0;
                    num3 = 5;
                    ++this.frameCounter;
                    var num4 = 0;
                    int num5;
                    if (this.frameCounter >= (double) (7 * (num5 = num4 + 1)))
                        num3 = 6;
                    int num6;
                    if (this.frameCounter >= (double) (7 * (num6 = num5 + 1)))
                        num3 = 7;
                    int num7;
                    if (this.frameCounter >= (double) (7 * (num7 = num6 + 1)))
                        num3 = 5;
                    int num8;
                    if (this.frameCounter >= (double) (7 * (num8 = num7 + 1)))
                        num3 = 6;
                    int num9;
                    if (this.frameCounter >= (double) (7 * (num9 = num8 + 1)))
                        num3 = 7;
                    int num10;
                    if (this.frameCounter >= (double) (7 * (num10 = num9 + 1)))
                        num3 = 5;
                    int num11;
                    if (this.frameCounter >= (double) (7 * (num11 = num10 + 1)))
                        num3 = 6;
                    int num12;
                    if (this.frameCounter >= (double) (7 * (num12 = num11 + 1)))
                        num3 = 7;
                    int num13;
                    if (this.frameCounter >= (double) (7 * (num13 = num12 + 1)))
                        num3 = 8;
                    int num14;
                    if (this.frameCounter >= (double) (7 * (num14 = num13 + 1)))
                        num3 = 9;
                    int num15;
                    if (this.frameCounter >= (double) (7 * (num15 = num14 + 1)))
                        num3 = 10;
                    int num16;
                    if (this.frameCounter >= (double) (7 * (num16 = num15 + 1)))
                        num3 = 11;
                    int num17;
                    if (this.frameCounter >= (double) (7 * (num17 = num16 + 1)))
                        num3 = 12;
                    int num18;
                    if (this.frameCounter >= (double) (7 * (num18 = num17 + 1)))
                    {
                        num3 = 5;
                        this.frameCounter = 0.0;
                    }
                }
                else if ((double) this.ai[0] > 0.0 && (double) this.ai[1] == 1.0)
                {
                    this.spriteDirection = this.direction;
                    if (y < 13 || y > 25)
                        this.frameCounter = 0.0;
                    num3 = 13;
                    ++this.frameCounter;
                    var num4 = 0;
                    int num5;
                    if (this.frameCounter >= (double) (8 * (num5 = num4 + 1)))
                        num3 = 14;
                    int num6;
                    if (this.frameCounter >= (double) (8 * (num6 = num5 + 1)))
                        num3 = 15;
                    int num7;
                    if (this.frameCounter >= (double) (8 * (num7 = num6 + 1)))
                        num3 = 16;
                    int num8;
                    if (this.frameCounter >= (double) (8 * (num8 = num7 + 1)))
                        num3 = 17;
                    int num9;
                    if (this.frameCounter >= (double) (8 * (num9 = num8 + 1)))
                        num3 = 18;
                    int num10;
                    if (this.frameCounter >= (double) (8 * (num10 = num9 + 1)))
                        num3 = 19;
                    int num11;
                    if (this.frameCounter >= (double) (8 * (num11 = num10 + 1)))
                        num3 = 20;
                    int num12;
                    if (this.frameCounter >= (double) (8 * (num12 = num11 + 1)))
                        num3 = 18;
                    int num13;
                    if (this.frameCounter >= (double) (8 * (num13 = num12 + 1)))
                        num3 = 19;
                    int num14;
                    if (this.frameCounter >= (double) (8 * (num14 = num13 + 1)))
                        num3 = 20;
                    int num15;
                    if (this.frameCounter >= (double) (8 * (num15 = num14 + 1)))
                        num3 = 21;
                    int num16;
                    if (this.frameCounter >= (double) (8 * (num16 = num15 + 1)))
                        num3 = 22;
                    int num17;
                    if (this.frameCounter >= (double) (8 * (num17 = num16 + 1)))
                        num3 = 23;
                    int num18;
                    if (this.frameCounter >= (double) (8 * (num18 = num17 + 1)))
                        num3 = 24;
                    int num19;
                    if (this.frameCounter >= (double) (8 * (num19 = num18 + 1)))
                        num3 = 25;
                    int num20;
                    if (this.frameCounter >= (double) (8 * (num20 = num19 + 1)))
                    {
                        num3 = 14;
                        this.frameCounter = 0.0;
                    }
                }
                else if ((double) this.ai[0] > 0.0 && (double) this.ai[1] == 2.0)
                {
                    this.spriteDirection = this.direction;
                    if (y < 26 || y > 40)
                        this.frameCounter = 0.0;
                    num3 = 26;
                    ++this.frameCounter;
                    var num4 = 0;
                    int num5;
                    if (this.frameCounter >= (double) (8 * (num5 = num4 + 1)))
                        num3 = 27;
                    int num6;
                    if (this.frameCounter >= (double) (8 * (num6 = num5 + 1)))
                        num3 = 28;
                    int num7;
                    if (this.frameCounter >= (double) (8 * (num7 = num6 + 1)))
                        num3 = 29;
                    int num8;
                    if (this.frameCounter >= (double) (8 * (num8 = num7 + 1)))
                        num3 = 26;
                    int num9;
                    if (this.frameCounter >= (double) (8 * (num9 = num8 + 1)))
                        num3 = 27;
                    int num10;
                    if (this.frameCounter >= (double) (8 * (num10 = num9 + 1)))
                        num3 = 28;
                    int num11;
                    if (this.frameCounter >= (double) (8 * (num11 = num10 + 1)))
                        num3 = 29;
                    int num12;
                    if (this.frameCounter >= (double) (8 * (num12 = num11 + 1)))
                        num3 = 26;
                    int num13;
                    if (this.frameCounter >= (double) (8 * (num13 = num12 + 1)))
                        num3 = 27;
                    int num14;
                    if (this.frameCounter >= (double) (8 * (num14 = num13 + 1)))
                        num3 = 28;
                    int num15;
                    if (this.frameCounter >= (double) (8 * (num15 = num14 + 1)))
                        num3 = 29;
                    int num16;
                    if (this.frameCounter >= (double) (8 * (num16 = num15 + 1)))
                        num3 = 30;
                    int num17;
                    if (this.frameCounter >= (double) (8 * (num17 = num16 + 1)))
                        num3 = 31;
                    int num18;
                    if (this.frameCounter >= (double) (8 * (num18 = num17 + 1)))
                        num3 = 32;
                    int num19;
                    if (this.frameCounter >= (double) (8 * (num19 = num18 + 1)))
                        num3 = 33;
                    int num20;
                    if (this.frameCounter >= (double) (8 * (num20 = num19 + 1)))
                        num3 = 34;
                    int num21;
                    if (this.frameCounter >= (double) (8 * (num21 = num20 + 1)))
                        num3 = 35;
                    int num22;
                    if (this.frameCounter >= (double) (8 * (num22 = num21 + 1)))
                        num3 = 36;
                    int num23;
                    if (this.frameCounter >= (double) (8 * (num23 = num22 + 1)))
                        num3 = 37;
                    int num24;
                    if (this.frameCounter >= (double) (8 * (num24 = num23 + 1)))
                        num3 = 38;
                    int num25;
                    if (this.frameCounter >= (double) (8 * (num25 = num24 + 1)))
                        num3 = 39;
                    int num26;
                    if (this.frameCounter >= (double) (8 * (num26 = num25 + 1)))
                        num3 = 40;
                    int num27;
                    if (this.frameCounter >= (double) (8 * (num27 = num26 + 1)))
                    {
                        num3 = 26;
                        this.frameCounter = 0.0;
                    }
                }
                else
                {
                    this.frameCounter = this.frameCounter + (double) this.velocity.Length() * 0.100000001490116 + 1.0;
                    if (this.frameCounter >= 40.0 || this.frameCounter < 0.0)
                        this.frameCounter = 0.0;
                    num3 = (int) (this.frameCounter / 8.0);
                }

                this.frame.Y = num3;
            }

            if (this.type == 338 || this.type == 339 || (this.type == 340 || this.type == 17) ||
                (this.type == 18 || this.type == 19 || (this.type == 20 || this.type == 22)) ||
                (this.type == 142 || this.type == 353 || (this.type == 178 || this.type == 38) ||
                 (this.type == 26 || this.type == 27 || (this.type == 28 || this.type == 31))) ||
                (this.type == 294 || this.type == 295 || (this.type == 296 || this.type == 21) ||
                 (this.type == 44 || this.type == 54 || (this.type == 37 || this.type == 73)) ||
                 (this.type == 77 || this.type == 78 || (this.type == 79 || this.type == 80) ||
                  (this.type == 104 || this.type == 107 || (this.type == 108 || this.type == 120)))) ||
                (this.type == 124 || this.type == 140 || (this.type == 159 || this.type == 160) ||
                 (this.type == 167 || this.type == 181 || (this.type == 185 || this.type == 196)) ||
                 (this.type == 197 || this.type == 198 || (this.type == 201 || this.type == 202) ||
                  (this.type == 203 || this.type == 207 || (this.type == 208 || this.type == 209))) ||
                 (this.type == 212 || this.type == 213 || (this.type == 227 || this.type == 228) ||
                  (this.type == 229 || this.type == 287 || this.type >= 310 && this.type <= 314) ||
                  (this.type >= 322 && this.type <= 324 || (this.type == 326 || this.type == 368) ||
                   (this.type == 369 || this.type == 453 || (this.type == 460 || this.type == 462))))) ||
                (this.type == 463 || this.type == 489 || (this.type == 441 || this.type == 534) || this.type == 550))
            {
                var num3 = this.townNPC || this.type == 453 ? NPCID.Sets.ExtraFramesCount[this.type] : 0;
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    var num4 = Main.npcFrameCount[this.type] - NPCID.Sets.AttackFrameCount[this.type];
                    if ((double) this.ai[0] == 2.0)
                    {
                        ++this.frameCounter;
                        if (this.frame.Y / num1 == num4 - 1 && this.frameCounter >= 5.0)
                        {
                            this.frame.Y = 0;
                            this.frameCounter = 0.0;
                        }
                        else if (this.frame.Y / num1 == 0 && this.frameCounter >= 40.0)
                        {
                            this.frame.Y = num1 * (num4 - 1);
                            this.frameCounter = 0.0;
                        }
                        else if (this.frame.Y != 0 && this.frame.Y != num1 * (num4 - 1))
                        {
                            this.frame.Y = 0;
                            this.frameCounter = 0.0;
                        }
                    }
                    else if ((double) this.ai[0] == 11.0)
                    {
                        ++this.frameCounter;
                        if (this.frame.Y / num1 == num4 - 1 && this.frameCounter >= 20.0)
                        {
                            if (this.frameCounter == 20.0)
                            {
                                var num5 = Main.rand.Next(4);
                                for (var index1 = 0; index1 < 3 + num5; ++index1)
                                {
                                    var index2 =
                                        Dust.NewDust(
                                            this.Center + Vector2.UnitX * (float) -this.direction * 8f -
                                            Vector2.One * 5f + Vector2.UnitY * 8f, 3, 6, 216, (float) -this.direction,
                                            1f, 0, new Color(), 1f);
                                    Main.dust[index2].velocity /= 2f;
                                    Main.dust[index2].scale = 0.8f;
                                }

                                if (Main.rand.Next(30) == 0)
                                {
                                    var index = Gore.NewGore(this.Center + Vector2.UnitX * (float) -this.direction * 8f,
                                        Vector2.Zero, Main.rand.Next(580, 583), 1f);
                                    Main.gore[index].velocity /= 2f;
                                    Main.gore[index].velocity.Y = Math.Abs(Main.gore[index].velocity.Y);
                                    Main.gore[index].velocity.X =
                                        -Math.Abs(Main.gore[index].velocity.X) * (float) this.direction;
                                }
                            }

                            if (this.frameCounter >= 40.0 && Main.rand.Next(20) == 0)
                            {
                                this.frame.Y = 0;
                                this.frameCounter = 0.0;
                            }
                        }
                        else if (this.frame.Y / num1 == 0 && this.frameCounter >= 20.0)
                        {
                            this.frame.Y = num1 * (num4 - 1);
                            this.frameCounter = 0.0;
                            if (Main.netMode != 1)
                                EmoteBubble.NewBubble(89, new WorldUIAnchor((Entity) this), 30);
                        }
                        else if (this.frame.Y != 0 && this.frame.Y != num1 * (num4 - 1))
                        {
                            this.frame.Y = 0;
                            this.frameCounter = 0.0;
                        }
                    }
                    else if ((double) this.ai[0] == 5.0)
                    {
                        this.frame.Y = num1 * (num4 - 3);
                        this.frameCounter = 0.0;
                    }
                    else if ((double) this.ai[0] == 6.0)
                    {
                        ++this.frameCounter;
                        var num5 = this.frame.Y / num1;
                        switch (num4 - num5)
                        {
                            case 1:
                            case 2:
                            case 4:
                            case 5:
                                var num6 = this.frameCounter >= 10.0
                                    ? (this.frameCounter >= 16.0
                                        ? (this.frameCounter >= 46.0
                                            ? (this.frameCounter >= 60.0
                                                ? (this.frameCounter >= 66.0
                                                    ? (this.frameCounter >= 72.0
                                                        ? (this.frameCounter >= 102.0
                                                            ? (this.frameCounter >= 108.0
                                                                ? (this.frameCounter >= 114.0
                                                                    ? (this.frameCounter >= 120.0
                                                                        ? (this.frameCounter >= 150.0
                                                                            ? (this.frameCounter >= 156.0
                                                                                ? (this.frameCounter >= 162.0
                                                                                    ? (this.frameCounter >= 168.0
                                                                                        ? (this.frameCounter >= 198.0
                                                                                            ? (this.frameCounter >=
                                                                                               204.0
                                                                                                ? (this.frameCounter >=
                                                                                                   210.0
                                                                                                    ? (
                                                                                                        this
                                                                                                            .frameCounter >=
                                                                                                        216.0
                                                                                                            ? (
                                                                                                                this
                                                                                                                    .frameCounter >=
                                                                                                                246.0
                                                                                                                    ? (
                                                                                                                        this
                                                                                                                            .frameCounter >=
                                                                                                                        252.0
                                                                                                                            ? (
                                                                                                                                this
                                                                                                                                    .frameCounter >=
                                                                                                                                258.0
                                                                                                                                    ? (
                                                                                                                                        this
                                                                                                                                            .frameCounter >=
                                                                                                                                        264.0
                                                                                                                                            ? (
                                                                                                                                                this
                                                                                                                                                    .frameCounter >=
                                                                                                                                                294.0
                                                                                                                                                    ? (
                                                                                                                                                        this
                                                                                                                                                            .frameCounter >=
                                                                                                                                                        300.0
                                                                                                                                                            ? 0
                                                                                                                                                            : num4 -
                                                                                                                                                              5)
                                                                                                                                                    : num4 -
                                                                                                                                                      4)
                                                                                                                                            : num4 -
                                                                                                                                              5)
                                                                                                                                    : 0
                                                                                                                            )
                                                                                                                            : num4 -
                                                                                                                              5)
                                                                                                                    : num4 -
                                                                                                                      4)
                                                                                                            : num4 - 5)
                                                                                                    : 0)
                                                                                                : num4 - 5)
                                                                                            : num4 - 4)
                                                                                        : num4 - 5)
                                                                                    : 0)
                                                                                : num4 - 5)
                                                                            : num4 - 4)
                                                                        : num4 - 5)
                                                                    : 0)
                                                                : num4 - 5)
                                                            : num4 - 4)
                                                        : num4 - 5)
                                                    : 0)
                                                : num4 - 5)
                                            : num4 - 4)
                                        : num4 - 5)
                                    : 0;
                                if (num6 == num4 - 4 && num5 == num4 - 5)
                                {
                                    var Position = this.Center + new Vector2((float) (10 * this.direction), -4f);
                                    for (var index1 = 0; index1 < 8; ++index1)
                                    {
                                        var Type = Main.rand.Next(139, 143);
                                        var index2 = Dust.NewDust(Position, 0, 0, Type,
                                            this.velocity.X + (float) this.direction, this.velocity.Y - 2.5f, 0,
                                            new Color(), 1.2f);
                                        Main.dust[index2].velocity.X += (float) this.direction * 1.5f;
                                        Main.dust[index2].position -= new Vector2(4f);
                                        Main.dust[index2].velocity *= 2f;
                                        Main.dust[index2].scale =
                                            (float) (0.699999988079071 +
                                                     (double) Main.rand.NextFloat() * 0.300000011920929);
                                    }
                                }

                                this.frame.Y = num1 * num6;
                                if (this.frameCounter >= 300.0)
                                {
                                    this.frameCounter = 0.0;
                                    break;
                                }

                                break;
                            default:
                                if (num5 != 0)
                                {
                                    this.frame.Y = 0;
                                    this.frameCounter = 0.0;
                                    goto case 1;
                                }
                                else
                                    goto case 1;
                        }
                    }
                    else if ((double) this.ai[0] == 7.0)
                    {
                        ++this.frameCounter;
                        var num5 = this.frame.Y / num1;
                        switch (num4 - num5)
                        {
                            case 1:
                            case 2:
                            case 4:
                            case 5:
                                var num6 = 0;
                                if (this.frameCounter < 16.0)
                                    num6 = 0;
                                else if (this.frameCounter == 16.0 && Main.netMode != 1)
                                    EmoteBubble.NewBubbleNPC(new WorldUIAnchor((Entity) this), 112,
                                        (WorldUIAnchor) null);
                                else if (this.frameCounter < 128.0)
                                    num6 = this.frameCounter % 16.0 < 8.0 ? num4 - 2 : 0;
                                else if (this.frameCounter < 160.0)
                                    num6 = 0;
                                else if (this.frameCounter == 160.0 && Main.netMode != 1)
                                    EmoteBubble.NewBubbleNPC(new WorldUIAnchor((Entity) this), 60,
                                        (WorldUIAnchor) null);
                                else
                                    num6 = this.frameCounter >= 220.0
                                        ? 0
                                        : (this.frameCounter % 12.0 < 6.0 ? num4 - 2 : 0);
                                this.frame.Y = num1 * num6;
                                if (this.frameCounter >= 220.0)
                                {
                                    this.frameCounter = 0.0;
                                    break;
                                }

                                break;
                            default:
                                if (num5 != 0)
                                {
                                    this.frame.Y = 0;
                                    this.frameCounter = 0.0;
                                    goto case 1;
                                }
                                else
                                    goto case 1;
                        }
                    }
                    else if ((double) this.ai[0] == 9.0)
                    {
                        ++this.frameCounter;
                        var num5 = this.frame.Y / num1;
                        switch (num4 - num5)
                        {
                            case 1:
                            case 2:
                            case 4:
                            case 5:
                                var num6 = this.frameCounter >= 10.0
                                    ? (this.frameCounter >= 16.0 ? num4 - 4 : num4 - 5)
                                    : 0;
                                if ((double) this.ai[1] < 16.0)
                                    num6 = num4 - 5;
                                if ((double) this.ai[1] < 10.0)
                                    num6 = 0;
                                this.frame.Y = num1 * num6;
                                break;
                            default:
                                if (num5 != 0)
                                {
                                    this.frame.Y = 0;
                                    this.frameCounter = 0.0;
                                    goto case 1;
                                }
                                else
                                    goto case 1;
                        }
                    }
                    else if ((double) this.ai[0] == 18.0)
                    {
                        ++this.frameCounter;
                        var num5 = this.frame.Y / num1;
                        switch (num4 - num5)
                        {
                            case 1:
                            case 2:
                            case 4:
                            case 5:
                                var num6 = 0;
                                num6 = this.frameCounter >= 10.0
                                    ? (this.frameCounter >= 16.0 ? num4 - 2 : num4 - 1)
                                    : 0;
                                if ((double) this.ai[1] < 16.0)
                                    num6 = num4 - 1;
                                if ((double) this.ai[1] < 10.0)
                                    num6 = 0;
                                var num7 = Main.npcFrameCount[this.type] - 2;
                                this.frame.Y = num1 * num7;
                                break;
                            default:
                                if (num5 != 0)
                                {
                                    this.frame.Y = 0;
                                    this.frameCounter = 0.0;
                                    goto case 1;
                                }
                                else
                                    goto case 1;
                        }
                    }
                    else if ((double) this.ai[0] == 10.0 || (double) this.ai[0] == 13.0)
                    {
                        ++this.frameCounter;
                        var num5 = this.frame.Y / num1;
                        switch (num5 - num4)
                        {
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                var num6 = 10;
                                var num7 = 6;
                                var num8 = this.frameCounter >= (double) num6
                                    ? (this.frameCounter >= (double) (num6 + num7)
                                        ? (this.frameCounter >= (double) (num6 + num7 * 2)
                                            ? (this.frameCounter >= (double) (num6 + num7 * 3)
                                                ? (this.frameCounter >= (double) (num6 + num7 * 4) ? 0 : num4 + 3)
                                                : num4 + 2)
                                            : num4 + 1)
                                        : num4)
                                    : 0;
                                this.frame.Y = num1 * num8;
                                break;
                            default:
                                if (num5 != 0)
                                {
                                    this.frame.Y = 0;
                                    this.frameCounter = 0.0;
                                    goto case 0;
                                }
                                else
                                    goto case 0;
                        }
                    }
                    else if ((double) this.ai[0] == 15.0)
                    {
                        ++this.frameCounter;
                        var num5 = this.frame.Y / num1;
                        switch (num5 - num4)
                        {
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                var num6 = this.ai[1] / (float) NPCID.Sets.AttackTime[this.type];
                                var num7 = (double) num6 <= 0.649999976158142
                                    ? ((double) num6 <= 0.5
                                        ? ((double) num6 <= 0.349999994039536
                                            ? ((double) num6 <= 0.0 ? 0 : num4 + 3)
                                            : num4 + 2)
                                        : num4 + 1)
                                    : num4;
                                this.frame.Y = num1 * num7;
                                break;
                            default:
                                if (num5 != 0)
                                {
                                    this.frame.Y = 0;
                                    this.frameCounter = 0.0;
                                    goto case 0;
                                }
                                else
                                    goto case 0;
                        }
                    }
                    else if ((double) this.ai[0] == 12.0)
                    {
                        ++this.frameCounter;
                        var num5 = this.frame.Y / num1;
                        switch (num5 - num4)
                        {
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                                var num6 = num4 + this.GetShootingFrame(this.ai[2]);
                                this.frame.Y = num1 * num6;
                                break;
                            default:
                                if (num5 != 0)
                                {
                                    this.frame.Y = 0;
                                    this.frameCounter = 0.0;
                                    goto case 0;
                                }
                                else
                                    goto case 0;
                        }
                    }
                    else if ((double) this.ai[0] == 14.0)
                    {
                        ++this.frameCounter;
                        var num5 = this.frame.Y / num1;
                        switch (num5 - num4)
                        {
                            case 0:
                            case 1:
                                var num6 = 12;
                                var num7 = this.frameCounter % (double) num6 * 2.0 < (double) num6 ? num4 : num4 + 1;
                                this.frame.Y = num1 * num7;
                                break;
                            default:
                                if (num5 != 0)
                                {
                                    this.frame.Y = 0;
                                    this.frameCounter = 0.0;
                                    goto case 0;
                                }
                                else
                                    goto case 0;
                        }
                    }
                    else if ((double) this.ai[0] == 3.0 || (double) this.ai[0] == 4.0)
                    {
                        ++this.frameCounter;
                        var num5 = this.frame.Y / num1;
                        switch (num4 - num5)
                        {
                            case 1:
                            case 2:
                            case 4:
                            case 5:
                                var flag = (double) this.ai[0] == 3.0;
                                var num6 = 0;
                                var num7 = 0;
                                var time1 = -1;
                                var time2 = -1;
                                if (this.frameCounter < 10.0)
                                    num6 = 0;
                                else if (this.frameCounter < 16.0)
                                    num6 = num4 - 5;
                                else if (this.frameCounter < 46.0)
                                    num6 = num4 - 4;
                                else if (this.frameCounter < 60.0)
                                    num6 = num4 - 5;
                                else if (this.frameCounter < 216.0)
                                    num6 = 0;
                                else if (this.frameCounter == 216.0 && Main.netMode != 1)
                                    time1 = 70;
                                else if (this.frameCounter < 286.0)
                                    num6 = this.frameCounter % 12.0 < 6.0 ? num4 - 2 : 0;
                                else if (this.frameCounter < 320.0)
                                    num6 = 0;
                                else if (this.frameCounter == 320.0 && Main.netMode != 1)
                                    time1 = 100;
                                else
                                    num6 = this.frameCounter >= 420.0
                                        ? 0
                                        : (this.frameCounter % 16.0 < 8.0 ? num4 - 2 : 0);
                                if (this.frameCounter < 70.0)
                                    num7 = 0;
                                else if (this.frameCounter == 70.0 && Main.netMode != 1)
                                    time2 = 90;
                                else
                                    num7 = this.frameCounter >= 160.0
                                        ? (this.frameCounter >= 166.0
                                            ? (this.frameCounter >= 186.0
                                                ? (this.frameCounter >= 200.0
                                                    ? (this.frameCounter >= 320.0
                                                        ? (this.frameCounter >= 326.0 ? 0 : num4 - 1)
                                                        : 0)
                                                    : num4 - 5)
                                                : num4 - 4)
                                            : num4 - 5)
                                        : (this.frameCounter % 16.0 < 8.0 ? num4 - 2 : 0);
                                if (flag)
                                {
                                    if (time1 != -1)
                                        EmoteBubble.NewBubbleNPC(new WorldUIAnchor((Entity) this), time1,
                                            new WorldUIAnchor((Entity) Main.npc[(int) this.ai[2]]));
                                    if (time2 != -1)
                                        EmoteBubble.NewBubbleNPC(new WorldUIAnchor((Entity) Main.npc[(int) this.ai[2]]),
                                            time2, new WorldUIAnchor((Entity) this));
                                }

                                this.frame.Y = num1 * (flag ? num6 : num7);
                                if (this.frameCounter >= 420.0)
                                {
                                    this.frameCounter = 0.0;
                                    break;
                                }

                                break;
                            default:
                                if (num5 != 0)
                                {
                                    this.frame.Y = 0;
                                    this.frameCounter = 0.0;
                                    goto case 1;
                                }
                                else
                                    goto case 1;
                        }
                    }
                    else if ((double) this.ai[0] == 16.0 || (double) this.ai[0] == 17.0)
                    {
                        ++this.frameCounter;
                        var num5 = this.frame.Y / num1;
                        switch (num4 - num5)
                        {
                            case 1:
                            case 2:
                            case 4:
                            case 5:
                                var flag = (double) this.ai[0] == 16.0;
                                var num6 = 0;
                                var time = -1;
                                if (this.frameCounter < 10.0)
                                    num6 = 0;
                                else if (this.frameCounter < 16.0)
                                    num6 = num4 - 5;
                                else if (this.frameCounter < 22.0)
                                    num6 = num4 - 4;
                                else if (this.frameCounter < 28.0)
                                    num6 = num4 - 5;
                                else if (this.frameCounter < 34.0)
                                    num6 = num4 - 4;
                                else if (this.frameCounter < 40.0)
                                    num6 = num4 - 5;
                                else if (this.frameCounter == 40.0 && Main.netMode != 1)
                                    time = 45;
                                else if (this.frameCounter < 70.0)
                                    num6 = num4 - 4;
                                else if (this.frameCounter < 76.0)
                                    num6 = num4 - 5;
                                else if (this.frameCounter < 82.0)
                                    num6 = num4 - 4;
                                else if (this.frameCounter < 88.0)
                                    num6 = num4 - 5;
                                else if (this.frameCounter < 94.0)
                                    num6 = num4 - 4;
                                else if (this.frameCounter < 100.0)
                                    num6 = num4 - 5;
                                else if (this.frameCounter == 100.0 && Main.netMode != 1)
                                    time = 45;
                                else if (this.frameCounter < 130.0)
                                    num6 = num4 - 4;
                                else if (this.frameCounter < 136.0)
                                    num6 = num4 - 5;
                                else if (this.frameCounter < 142.0)
                                    num6 = num4 - 4;
                                else if (this.frameCounter < 148.0)
                                    num6 = num4 - 5;
                                else if (this.frameCounter < 154.0)
                                    num6 = num4 - 4;
                                else if (this.frameCounter < 160.0)
                                    num6 = num4 - 5;
                                else if (this.frameCounter == 160.0 && Main.netMode != 1)
                                    time = 75;
                                else
                                    num6 = this.frameCounter >= 220.0
                                        ? (this.frameCounter >= 226.0 ? 0 : num4 - 5)
                                        : num4 - 4;
                                if (flag && time != -1)
                                {
                                    var num7 = (int) this.localAI[2];
                                    var num8 = (int) this.localAI[3];
                                    var num9 = (int) Main.npc[(int) this.ai[2]].localAI[3];
                                    var num10 = (int) Main.npc[(int) this.ai[2]].localAI[2];
                                    var num11 = 3 - num7 - num8;
                                    var num12 = 0;
                                    if (this.frameCounter == 40.0)
                                        num12 = 1;
                                    if (this.frameCounter == 100.0)
                                        num12 = 2;
                                    if (this.frameCounter == 160.0)
                                        num12 = 3;
                                    var num13 = 3 - num12;
                                    var num14 = -1;
                                    var num15 = 0;
                                    while (num14 < 0 && ++num15 < 100)
                                    {
                                        num14 = Main.rand.Next(2);
                                        if (num14 == 0 && num10 >= num8)
                                            num14 = -1;
                                        if (num14 == 1 && num9 >= num7)
                                            num14 = -1;
                                        if (num14 == -1 && num13 <= num11)
                                            num14 = 2;
                                    }

                                    if (num14 == 0)
                                    {
                                        ++Main.npc[(int) this.ai[2]].localAI[3];
                                        ++num9;
                                    }

                                    if (num14 == 1)
                                    {
                                        ++Main.npc[(int) this.ai[2]].localAI[2];
                                        ++num10;
                                    }

                                    var emoticon1 = Utils.SelectRandom<int>(Main.rand, new int[3]
                                    {
                                        38,
                                        37,
                                        36
                                    });
                                    var emoticon2 = emoticon1;
                                    if (num14 == 0)
                                    {
                                        switch (emoticon1)
                                        {
                                            case 36:
                                                emoticon2 = 38;
                                                break;
                                            case 37:
                                                emoticon2 = 36;
                                                break;
                                            case 38:
                                                emoticon2 = 37;
                                                break;
                                        }
                                    }
                                    else if (num14 == 1)
                                    {
                                        switch (emoticon1)
                                        {
                                            case 36:
                                                emoticon2 = 37;
                                                break;
                                            case 37:
                                                emoticon2 = 38;
                                                break;
                                            case 38:
                                                emoticon2 = 36;
                                                break;
                                        }
                                    }

                                    if (num13 == 0)
                                    {
                                        if (num9 >= 2)
                                            emoticon1 -= 3;
                                        if (num10 >= 2)
                                            emoticon2 -= 3;
                                    }

                                    EmoteBubble.NewBubble(emoticon1, new WorldUIAnchor((Entity) this), time);
                                    EmoteBubble.NewBubble(emoticon2,
                                        new WorldUIAnchor((Entity) Main.npc[(int) this.ai[2]]), time);
                                }

                                this.frame.Y = num1 * (flag ? num6 : num6);
                                if (this.frameCounter >= 420.0)
                                {
                                    this.frameCounter = 0.0;
                                    break;
                                }

                                break;
                            default:
                                if (num5 != 0)
                                {
                                    this.frame.Y = 0;
                                    this.frameCounter = 0.0;
                                    goto case 1;
                                }
                                else
                                    goto case 1;
                        }
                    }
                    else if ((double) this.velocity.X == 0.0)
                    {
                        if (this.type == 140 || this.type == 287 || this.type == 489)
                        {
                            this.frame.Y = num1;
                            this.frameCounter = 0.0;
                        }
                        else
                        {
                            this.frame.Y = 0;
                            this.frameCounter = 0.0;
                        }
                    }
                    else
                    {
                        var num5 = 6;
                        if (this.type == 534)
                            num5 = 12;
                        if (this.type == 489)
                        {
                            num5 = 8;
                            this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
                            this.frameCounter += 0.5;
                        }
                        else
                        {
                            this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
                            ++this.frameCounter;
                        }

                        if (this.type == 462)
                            num5 = 9;
                        if (this.frameCounter > (double) num5)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 >= Main.npcFrameCount[this.type] - num3)
                            this.frame.Y = num1 * 2;
                    }
                }
                else if (this.type == 462)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = (double) this.velocity.Y >= 0.0 ? num1 * 2 : num1;
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1;
                    if (this.type == 489 || this.type == 21 || (this.type == 31 || this.type == 294) ||
                        (this.type == 326 || this.type == 295 || (this.type == 296 || this.type == 44)) ||
                        (this.type == 77 || this.type == 78 || (this.type == 79 || this.type == 80) ||
                         (this.type == 120 || this.type == 140 || (this.type == 159 || this.type == 167))) ||
                        (this.type == 197 || this.type == 201 || (this.type == 202 || this.type == 203) ||
                         (this.type == 287 || this.type >= 322 && this.type <= 324)))
                        this.frame.Y = 0;
                    if (this.type == 181)
                        this.frame.Y = num1 * 14;
                }
            }

            if (this.type >= 494 && this.type <= 495)
            {
                if ((double) this.ai[2] > 0.0)
                {
                    if ((double) this.ai[2] < 7.0)
                        this.frame.Y = num1 * 5;
                    else if ((double) this.ai[2] < 14.0)
                        this.frame.Y = num1 * 6;
                    else if ((double) this.ai[2] < 20.0)
                        this.frame.Y = num1 * 7;
                }
                else
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        if (this.direction == 1)
                            this.spriteDirection = 1;
                        if (this.direction == -1)
                            this.spriteDirection = -1;
                    }

                    if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 ||
                        this.direction == 1 && (double) this.velocity.X < 0.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = (double) this.velocity.Y >= 0.0 ? num1 * 3 : num1 * 2;
                    }
                    else if ((double) this.velocity.X == 0.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = 0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X);
                        if (this.frameCounter < 8.0)
                            this.frame.Y = 0;
                        else if (this.frameCounter < 16.0)
                            this.frame.Y = num1;
                        else if (this.frameCounter < 24.0)
                            this.frame.Y = num1 * 2;
                        else if (this.frameCounter < 32.0)
                            this.frame.Y = num1 * 3;
                        else if (this.frameCounter < 39.0)
                        {
                            this.frame.Y = num1 * 4;
                        }
                        else
                        {
                            this.frame.Y = num1 * 4;
                            this.frameCounter = 0.0;
                        }
                    }
                }
            }

            if (this.type == 541)
            {
                if ((double) this.ai[0] > 0.0)
                {
                    var num3 = this.ai[0];
                    this.frame.Y = (double) num3 >= 6.0
                        ? ((double) num3 >= 105.0
                            ? ((double) num3 >= 114.0
                                ? ((double) num3 >= 135.0
                                    ? num1
                                    : num1 * (int) (((double) num3 - 99.0 - 15.0) / 7.0 + 10.0))
                                : num1 * 9)
                            : num1 * (int) ((double) num3 / 8.0 % 4.0 + 5.0))
                        : num1 * 4;
                }
                else
                {
                    this.frameCounter = this.frameCounter + (double) this.velocity.Length() * 0.100000001490116 + 1.0;
                    if (this.frameCounter >= 8.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y >= num1 * 4)
                        this.frame.Y = 0;
                }
            }

            if (this.type >= 498 && this.type <= 506)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.ai[2] > 0.0)
                    {
                        this.spriteDirection = this.direction;
                        this.frame.Y = (double) this.ai[1] >= 12.0
                            ? ((double) this.ai[1] >= 34.0 ? num1 * 8 : num1 * 9)
                            : num1 * 8;
                        this.frameCounter = 0.0;
                    }
                    else if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = 0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
                        if (this.frameCounter > 4.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y > num1 * 7)
                            this.frame.Y = 0;
                    }
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * 10;
                }
            }
            else if (this.type >= 524 && this.type <= 527)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction != 0)
                        this.spriteDirection = this.direction;
                    if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = 0;
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X);
                        ++this.frameCounter;
                        if (this.frameCounter > 9.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                            this.frame.Y = num1 * 2;
                    }
                }
                else
                {
                    this.frame.Y = num1;
                    this.frameCounter = 0.0;
                }
            }
            else if (this.type >= 528 && this.type <= 529)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction != 0)
                        this.spriteDirection = this.direction;
                    if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = 0;
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X);
                        ++this.frameCounter;
                        if (this.frameCounter > 9.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 >= Main.npcFrameCount[this.type] - 1)
                            this.frame.Y = num1;
                    }
                }
                else
                {
                    this.frame.Y = num1 * (Main.npcFrameCount[this.type] - 1);
                    this.frameCounter = 0.0;
                }
            }
            else if (this.type == 533)
            {
                if ((double) this.velocity.Y == 0.0 && this.direction != 0)
                    this.spriteDirection = this.direction;
                ++this.frameCounter;
                if (this.frameCounter >= 48.0)
                    this.frameCounter = 0.0;
                this.frame.Y = (int) (this.frameCounter / 6.0) * num1;
                if ((double) this.ai[1] > 0.0)
                    this.frame.Y += num1 * 8;
            }

            if (this.type >= 496 && this.type <= 497)
            {
                if ((double) this.ai[0] == 0.0)
                {
                    this.rotation = 0.0f;
                    if ((double) this.velocity.Y == 0.0)
                        this.spriteDirection = this.direction;
                    else if ((double) this.velocity.Y < 0.0)
                        this.frameCounter = 0.0;
                    this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.10000002384186;
                    if (this.frameCounter < 6.0)
                        this.frame.Y = 0;
                    else if (this.frameCounter < 12.0)
                        this.frame.Y = num1;
                    else if (this.frameCounter < 18.0)
                        this.frame.Y = num1 * 2;
                    else if (this.frameCounter < 24.0)
                        this.frame.Y = num1 * 3;
                    else
                        this.frameCounter = 0.0;
                }
                else if ((double) this.ai[0] == 1.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = (double) this.ai[1] >= 10.0
                        ? ((double) this.ai[1] >= 20.0 ? num1 * 6 : num1 * 5)
                        : num1 * 4;
                }
                else if ((double) this.ai[0] == 5.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = (double) this.ai[1] >= 10.0
                        ? ((double) this.ai[1] >= 20.0 ? num1 * 3 : num1 * 11)
                        : num1 * 10;
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * 7;
                }
            }
            else if (this.aiStyle == 39 && this.type != 417)
            {
                if ((double) this.ai[0] == 0.0)
                {
                    this.rotation = 0.0f;
                    if ((double) this.velocity.Y == 0.0)
                        this.spriteDirection = this.direction;
                    else if ((double) this.velocity.Y < 0.0)
                        this.frameCounter = 0.0;
                    this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.10000002384186;
                    if (this.frameCounter < 6.0)
                        this.frame.Y = 0;
                    else if (this.frameCounter < 12.0)
                        this.frame.Y = num1;
                    else if (this.frameCounter < 18.0)
                        this.frame.Y = num1 * 2;
                    else if (this.frameCounter < 24.0)
                        this.frame.Y = num1 * 3;
                    else if (this.frameCounter < 32.0)
                        this.frame.Y = num1 * 4;
                    else
                        this.frameCounter = 0.0;
                }
                else if ((double) this.ai[0] == 1.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = (double) this.ai[1] >= 10.0
                        ? ((double) this.ai[1] >= 20.0 ? num1 * 7 : num1 * 6)
                        : num1 * 5;
                }
                else if ((double) this.ai[0] == 5.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = (double) this.ai[1] >= 10.0
                        ? ((double) this.ai[1] >= 20.0 ? num1 * 5 : num1 * 6)
                        : num1 * 7;
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * 7;
                }
            }
            else if (this.type == 508 || this.type == 532)
            {
                if ((double) this.velocity.Y != 0.0)
                    this.frame.Y = num1;
                else if ((double) this.velocity.X == 0.0)
                {
                    this.frame.Y = 0;
                }
                else
                {
                    if (this.direction < 0 && (double) this.velocity.X < 0.0)
                        this.spriteDirection = -1;
                    if (this.direction > 0 && (double) this.velocity.X > 0.0)
                        this.spriteDirection = 1;
                    if (this.frame.Y / num1 < 2)
                        this.frame.Y = num1 * 2;
                    this.frameCounter += 1.0 + (double) Math.Abs(this.velocity.X) / 2.0;
                    if (this.frameCounter > 6.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                        this.frame.Y = num1 * 2;
                }
            }
            else if (this.type == 509)
            {
                if ((double) this.velocity.X > 0.0 && this.direction > 0 ||
                    (double) this.velocity.X < 0.0 && this.direction < 0)
                    this.spriteDirection = this.direction;
                if (++this.frameCounter >= 3.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y += num1;
                    if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                        this.frame.Y = 0;
                }
            }

            if (this.type == 415)
            {
                if ((double) this.ai[2] < 0.0)
                {
                    if (this.frame.Y / num1 != 8 && this.frame.Y / num1 != 9 && this.frame.Y / num1 != 0)
                        this.frameCounter = 0.0;
                    ++this.frameCounter;
                    var num3 = 0;
                    var num4 = 18;
                    var num5 = 4;
                    if (this.frameCounter > (double) (num4 - num5 * 2))
                        num3 = 8 + (int) this.frameCounter / 4 % 2;
                    if (this.frameCounter > (double) (num4 + num5 * 6))
                    {
                        num3 = 0;
                        this.frameCounter = 0.0;
                    }

                    this.frame.Y = num1 * num3;
                }
                else if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction != 0)
                        this.spriteDirection = this.direction;
                    if (this.frame.Y < num1 * 2)
                        this.frame.Y = num1 * 2;
                    this.frameCounter += (double) Math.Abs(this.velocity.X) * 0.5;
                    if (this.frameCounter >= 8.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y / num1 >= Main.npcFrameCount[this.type] - 2)
                        this.frame.Y = num1 * 2;
                    if ((double) this.velocity.X == 0.0)
                        this.frame.Y = 0;
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1;
                }
            }

            if (this.type == 416)
            {
                var index = (int) this.ai[0];
                if (Main.npc[index].active && Main.npc[index].type == 415 && Main.npcTexture[415] != null)
                    this.frame.Y = Main.npc[index].frame.Y / (Main.npcTexture[415].Height / Main.npcFrameCount[415]) *
                                   num1;
            }
            else if (this.type == 417)
            {
                if ((double) this.ai[0] == 0.0)
                {
                    this.rotation = 0.0f;
                    if ((double) this.velocity.Y == 0.0)
                        this.spriteDirection = this.direction;
                    else if ((double) this.velocity.Y < 0.0)
                        this.frameCounter = 0.0;
                    this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.10000002384186;
                    this.frame.Y = (int) (this.frameCounter / 6.0) * num1;
                    if (this.frameCounter >= 48.0)
                        this.frameCounter = 0.0;
                }
                else if ((double) this.ai[0] == 1.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * (9 + (int) ((double) this.ai[1] / 6.0));
                }
                else if ((double) this.ai[0] == 5.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * (13 - (int) ((double) this.ai[1] / 6.0));
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * 14;
                }
            }
            else if (this.type == 518)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction != 0)
                        this.spriteDirection = this.direction;
                    if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = 0;
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
                        ++this.frameCounter;
                        if (this.frameCounter > 6.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                            this.frame.Y = num1 * 2;
                    }
                }
                else
                {
                    this.frame.Y = num1;
                    this.frameCounter = 0.0;
                }
            }
            else if (this.type == 419)
            {
                if ((double) this.ai[2] < 0.0)
                {
                    var num3 = 1;
                    if (this.direction != 0)
                        this.spriteDirection = this.direction;
                    if (this.frame.Y / num1 >= 9)
                    {
                        this.frame.Y = num1 * 2;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y / num1 < 2)
                    {
                        this.frame.Y = num1 * 2;
                        this.frameCounter = 0.0;
                    }

                    ++this.frameCounter;
                    if (this.frameCounter >= (double) (num3 * 4 + 6))
                        this.frameCounter = 8.0;
                    this.frame.Y = this.frameCounter >= 6.0
                        ? num1 * (int) (4.0 + (this.frameCounter - 6.0) / (double) num3)
                        : num1 * (int) (2.0 + this.frameCounter / 3.0);
                }
                else if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction != 0)
                        this.spriteDirection = this.direction;
                    if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = 0;
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
                        ++this.frameCounter;
                        if (this.frameCounter > 6.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                            this.frame.Y = num1 * 9;
                        if (this.frame.Y / num1 < 9)
                            this.frame.Y = num1 * 9;
                    }
                }
                else
                {
                    this.frame.Y = num1;
                    this.frameCounter = 0.0;
                }
            }
            else if (this.type == 425)
            {
                if (this.direction != 0)
                    this.spriteDirection = -this.direction;
                if ((double) this.ai[2] == 1.0)
                {
                    ++this.frameCounter;
                    if (this.frameCounter >= 3.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y > num1 * 12 || this.frame.Y < num1 * 10)
                        this.frame.Y = num1 * 10;
                }
                else if ((double) this.velocity.Y != 0.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1;
                }
                else if ((double) this.velocity.X == 0.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = 0;
                }
                else
                {
                    this.frameCounter += (double) Math.Abs(this.velocity.X);
                    if (this.frameCounter >= 8.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y > num1 * 9 || this.frame.Y < num1 * 2)
                        this.frame.Y = num1 * 2;
                }
            }
            else if (this.type == 427)
            {
                if (this.direction != 0)
                    this.spriteDirection = this.direction;
                if ((double) this.velocity.Y != 0.0)
                {
                    ++this.frameCounter;
                    if (this.frameCounter >= 2.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y >= num1 * 9 || this.frame.Y < num1 * 6)
                        this.frame.Y = num1 * 6;
                }
                else if ((double) this.velocity.X == 0.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = 0;
                }
                else
                {
                    this.frameCounter += (double) Math.Abs(this.velocity.X);
                    if (this.frameCounter >= 8.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y > num1 * 5 || this.frame.Y < num1)
                        this.frame.Y = num1;
                }
            }
            else if (this.type == 426)
            {
                if (this.direction != 0)
                    this.spriteDirection = this.direction;
                if ((double) this.ai[1] >= 45.0)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        this.frame.Y = num1 * 8;
                    }
                    else
                    {
                        ++this.frameCounter;
                        if (this.frameCounter >= 2.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y >= num1 * 15 || this.frame.Y < num1 * 12)
                            this.frame.Y = num1 * 12;
                    }
                }
                else if ((double) this.velocity.Y != 0.0)
                {
                    ++this.frameCounter;
                    if (this.frameCounter >= 2.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y >= num1 * 12 || this.frame.Y < num1 * 9)
                        this.frame.Y = num1 * 9;
                }
                else if ((double) this.velocity.X == 0.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = 0;
                }
                else
                {
                    this.frameCounter += (double) Math.Abs(this.velocity.X);
                    if (this.frameCounter >= 10.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y > num1 * 7 || this.frame.Y < num1)
                        this.frame.Y = num1;
                }
            }
            else if (this.type == 429)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction != 0)
                        this.spriteDirection = this.direction;
                    if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = 0;
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
                        ++this.frameCounter;
                        if (this.frameCounter > 6.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                            this.frame.Y = num1 * 2;
                    }
                }
                else
                {
                    this.frame.Y = num1;
                    this.frameCounter = 0.0;
                }
            }
            else if (this.type == 428)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction != 0)
                        this.spriteDirection = this.direction;
                    if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = 0;
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
                        if (++this.frameCounter > 10.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 >= Main.npcFrameCount[this.type] - 1)
                            this.frame.Y = 0;
                    }
                }
                else if (this.frame.Y / num1 != 4)
                {
                    if (this.frameCounter > 0.0)
                        this.frameCounter = 0.0;
                    if (--this.frameCounter < -10.0 || (double) this.velocity.Y > 0.600000023841858)
                    {
                        this.frame.Y = num1 * 4;
                        this.frameCounter = 0.0;
                    }
                }
            }
            else if (this.type == 423)
            {
                if ((double) this.ai[2] == 1.0)
                {
                    var num3 = 2;
                    if ((double) this.ai[1] >= 30.0 && (double) this.ai[1] < 45.0)
                        num3 = 3;
                    this.frame.Y = num3 * num1;
                }
                else if ((double) this.velocity.Y != 0.0)
                    this.frame.Y = num1;
                else if ((double) this.velocity.X == 0.0)
                {
                    this.frame.Y = 0;
                }
                else
                {
                    if ((double) this.velocity.X != 0.0)
                        this.spriteDirection = Math.Sign(-this.velocity.X);
                    if (this.frame.Y / num1 < 4)
                        this.frame.Y = num1 * 4;
                    this.frameCounter += 1.0 + (double) Math.Abs(this.velocity.X) / 2.0;
                    if (this.frameCounter > 6.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                        this.frame.Y = num1 * 4;
                }
            }
            else if (this.type == 421)
            {
                if ((double) this.ai[0] == 5.0)
                    ++this.frameCounter;
                if (++this.frameCounter >= 5.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y += num1;
                    if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                        this.frame.Y = 0;
                }
            }

            if (this.type == 424)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction != 0)
                        this.spriteDirection = -this.direction;
                    if ((double) this.ai[2] > 0.0)
                    {
                        this.frame.Y = num1 * ((double) this.ai[1] > 90.0
                                           ? Main.npcFrameCount[this.type] - 2
                                           : Main.npcFrameCount[this.type] - 1);
                        this.frameCounter = 0.0;
                    }
                    else if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = 0;
                    }
                    else
                    {
                        if (this.frame.Y < num1 * 2)
                            this.frame.Y = num1 * 2;
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
                        this.frameCounter += (double) this.velocity.X * 1.29999995231628;
                        if (this.frameCounter > 6.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 >= Main.npcFrameCount[this.type] - 2)
                            this.frame.Y = num1 * 2;
                    }
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1;
                }
            }
            else if (this.type == 420 && ++this.frameCounter >= 5.0)
            {
                this.frameCounter = 0.0;
                this.frame.Y += num1;
                if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                    this.frame.Y = 0;
            }

            if (this.type == 411)
            {
                if ((double) this.ai[1] >= 90.0 && (double) this.ai[1] < 180.0)
                {
                    this.spriteDirection = -this.direction;
                    this.frame.Y = num1 * (Main.npcFrameCount[this.type] - 1);
                    this.frameCounter = 0.0;
                }
                else if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction != 0)
                        this.spriteDirection = -this.direction;
                    if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = 0;
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
                        ++this.frameCounter;
                        if (this.frameCounter > 6.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 >= Main.npcFrameCount[this.type] - 1)
                            this.frame.Y = num1 * 2;
                    }
                }
                else
                {
                    this.frame.Y = num1;
                    this.frameCounter = 0.0;
                }
            }
            else if (this.type == 409)
            {
                if ((double) this.velocity.Y == 0.0 && (double) this.ai[1] <= 30.0 && (double) this.ai[1] > 0.0)
                {
                    this.frame.Y = num1 * (Main.npcFrameCount[this.type] - 1);
                    this.frameCounter = 0.0;
                }
                else
                {
                    if ((double) this.velocity.Y == 0.0)
                        this.spriteDirection = this.direction;
                    if (++this.frameCounter >= 6.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                        if (this.frame.Y / num1 >= Main.npcFrameCount[this.type] - 2)
                            this.frame.Y = 0;
                    }
                }
            }
            else if (this.type == 410)
            {
                this.frameCounter += (double) Math.Abs(this.velocity.X);
                if (this.frameCounter >= 10.0)
                {
                    this.frameCounter -= 10.0;
                    this.frame.Y += num1;
                    if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                        this.frame.Y = 0;
                }
            }
            else if (this.type == 407)
            {
                if (++this.frameCounter >= 6.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y += num1;
                    if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                        this.frame.Y = 0;
                }
            }
            else if ((this.type == 405 || this.type == 406) && ++this.frameCounter >= 4.0)
            {
                this.frameCounter = 0.0;
                this.frame.Y += num1;
                if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                    this.frame.Y = 0;
            }

            if (this.type == 516)
            {
                if ((double) this.localAI[1] == 0.0)
                {
                    this.localAI[1] = 1f;
                    this.frame.Y = num1 * Main.rand.Next(3);
                    this.frameCounter += (double) Main.rand.Next(3);
                }

                ++this.frameCounter;
                if (this.frameCounter > 3.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y += num1;
                    if (this.frame.Y > num1 * 3)
                        this.frame.Y = 0;
                }
            }

            if (this.type == 418)
            {
                if ((double) this.ai[0] == 0.0 || (double) this.ai[0] == 1.0 || (double) this.ai[0] == -1.0)
                {
                    ++this.frameCounter;
                    if (this.frameCounter > 6.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                    }

                    if (this.frame.Y > num1 * 4)
                        this.frame.Y = 0;
                }
                else if ((double) this.ai[0] == 2.0)
                    this.frame.Y = (double) this.ai[1] >= 10.0
                        ? ((double) this.ai[1] >= 20.0 ? num1 * 7 : num1 * 6)
                        : num1 * 5;
                else if ((double) this.ai[0] == -2.0)
                {
                    ++this.frameCounter;
                    if (this.frameCounter > 12.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                    }

                    if (this.frame.Y > num1 * 7)
                        this.frame.Y = num1 * 5;
                }
            }

            if (this.type == 1 || this.type == 537 || (this.type == 16 || this.type == 59) ||
                (this.type == 71 || this.type == 81 || (this.type == 138 || this.type == 147)) ||
                (this.type == 183 || this.type == 184 || (this.type == 204 || this.type == 225) ||
                 (this.type == 302 || this.type == 304 || this.type >= 333 && this.type <= 336)) || this.type == 535)
            {
                if (this.type == 302 || this.type == 304)
                    this.spriteDirection = this.direction;
                ++this.frameCounter;
                if (num2 > 0)
                    ++this.frameCounter;
                if (num2 == 4)
                    ++this.frameCounter;
                if (this.frameCounter >= 8.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
                    this.frame.Y = 0;
            }

            if (this.type == 488)
            {
                var num3 = (int) this.localAI[1];
                if (Framing.GetTileSafely((int) this.ai[0], (int) this.ai[1]).frameX >= (short) 36)
                    num3 *= -1;
                if ((double) this.localAI[0] > 24.0)
                    this.localAI[0] = 24f;
                if ((double) this.localAI[0] > 0.0)
                    --this.localAI[0];
                if ((double) this.localAI[0] < 0.0)
                    this.localAI[0] = 0.0f;
                var num4 = num3 == -1 ? 4 : 6;
                var num5 = (int) this.localAI[0] / num4;
                if ((double) this.localAI[0] % (double) num4 != 0.0)
                    ++num5;
                if (num5 != 0 && num3 == 1)
                    num5 += 5;
                this.frame.Y = num5 * num1;
            }

            if (this.type >= 430 && this.type <= 436)
            {
                if ((double) this.ai[2] > 0.0)
                {
                    this.frame.Y = (double) this.ai[2] >= 5.0
                        ? ((double) this.ai[2] >= 10.0 ? ((double) this.ai[2] >= 15.0 ? num1 * 6 : num1 * 5) : num1 * 4)
                        : num1 * 3;
                }
                else
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        if (this.direction == 1)
                            this.spriteDirection = 1;
                        if (this.direction == -1)
                            this.spriteDirection = -1;
                    }

                    if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 ||
                        this.direction == 1 && (double) this.velocity.X < 0.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = num1 * 2;
                    }
                    else if ((double) this.velocity.X == 0.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = 0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X);
                        if (this.frameCounter < 8.0)
                            this.frame.Y = 0;
                        else if (this.frameCounter < 16.0)
                            this.frame.Y = num1;
                        else if (this.frameCounter < 24.0)
                            this.frame.Y = num1 * 2;
                        else if (this.frameCounter < 32.0)
                            this.frame.Y = num1;
                        else
                            this.frameCounter = 0.0;
                    }
                }
            }

            if (this.type == 454)
            {
                var num3 = (int) (this.frameCounter / 2.0);
                this.frame.Y = num1 * num3;
            }

            if (this.type == 377 || this.type == 446)
            {
                this.frame.Y = (double) this.velocity.Y == 0.0 ? 0 : num1;
                this.spriteDirection = this.direction;
            }

            if (this.type == 378)
            {
                if ((double) this.velocity.Y != 0.0 && this.frame.Y < num1 * 2)
                    this.frame.Y += num1 * 2;
                if ((double) this.velocity.Y == 0.0 && this.frame.Y > num1 * 2)
                    this.frame.Y -= num1 * 2;
                ++this.frameCounter;
                if (this.frameCounter >= 6.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y += num1;
                    if ((double) this.velocity.Y != 0.0 && this.frame.Y >= num1 * 4)
                        this.frame.Y = num1 * 2;
                    if ((double) this.velocity.Y == 0.0 && this.frame.Y >= num1 * 2)
                        this.frame.Y = 0;
                }
            }

            if (this.type == 376)
            {
                ++this.frameCounter;
                if (this.frameCounter > 30.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y += num1;
                    if (this.frame.Y >= num1 * 2)
                        this.frame.Y = 0;
                }
            }

            if (this.type == 375)
            {
                ++this.frameCounter;
                if (this.frameCounter > 4.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y += num1;
                    if (this.frame.Y >= num1 * 4)
                        this.frame.Y = 0;
                }
            }

            if (this.type == 374)
            {
                this.localAI[0] = -2f;
                if ((double) this.velocity.Y == 0.0)
                {
                    this.rotation = 0.0f;
                    if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = 0;
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        ++this.frameCounter;
                        if (this.frameCounter > 6.0)
                        {
                            this.frameCounter = 0.0;
                            this.frame.Y += num1;
                            if (this.frame.Y >= num1 * 4)
                                this.frame.Y = num1;
                        }
                    }
                }
                else
                {
                    this.rotation += (float) this.direction * 0.1f;
                    ++this.frameCounter;
                    if (this.frameCounter > 3.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                        if (this.frame.Y >= num1 * 4)
                            this.frame.Y = num1;
                    }
                }
            }

            if (this.type == 492)
                this.frame.Y = num1 * (int) this.ai[2];
            if (this.type == 473 || this.type == 474 || (this.type == 475 || this.type == 476))
            {
                if ((double) this.velocity.Y == 0.0)
                    this.spriteDirection = this.direction;
                if ((double) this.ai[0] == 0.0 || (double) this.ai[0] == 7.0)
                {
                    this.rotation = 0.0f;
                    this.frameCounter = 0.0;
                    this.frame.Y = 0;
                }
                else if ((double) this.ai[0] == 1.0)
                {
                    this.rotation = 0.0f;
                    this.frameCounter = 0.0;
                    var num3 = 6;
                    this.frame.Y = (double) this.ai[1] >= (double) num3
                        ? ((double) this.ai[1] >= (double) (num3 * 2)
                            ? ((double) this.ai[1] >= (double) (num3 * 3)
                                ? ((double) this.ai[1] >= (double) (num3 * 4)
                                    ? ((double) this.ai[1] >= (double) (num3 * 5) ? num1 * 6 : num1 * 5)
                                    : num1 * 4)
                                : num1 * 3)
                            : num1 * 2)
                        : num1;
                }
                else if ((double) this.ai[0] == 2.0 || (double) this.ai[0] == 6.0)
                {
                    this.rotation = 0.0f;
                    if ((double) this.velocity.Y == 0.0)
                    {
                        var num3 = 6;
                        ++this.frameCounter;
                        if (this.frame.Y < num1 * 7)
                            this.frame.Y = num1 * 12;
                        if (this.frame.Y < num1 * 10)
                        {
                            if (this.frameCounter > 8.0)
                            {
                                this.frame.Y += num1;
                                this.frameCounter = 0.0;
                                if (this.frame.Y == num1 * 10)
                                    this.frameCounter = (double) (num3 * 2);
                            }
                        }
                        else if (this.frameCounter < (double) num3)
                            this.frame.Y = num1 * 12;
                        else if (this.frameCounter < (double) (num3 * 2))
                            this.frame.Y = num1 * 11;
                        else if (this.frameCounter < (double) (num3 * 3))
                        {
                            this.frame.Y = num1 * 10;
                        }
                        else
                        {
                            this.frame.Y = num1 * 11;
                            if (this.frameCounter >= (double) (num3 * 4 - 1))
                                this.frameCounter = 0.0;
                        }
                    }
                    else
                    {
                        this.frame.Y = num1 * 13;
                        this.frameCounter = 0.0;
                    }
                }
                else if ((double) this.ai[0] == 3.0)
                {
                    this.rotation = 0.0f;
                    ++this.frameCounter;
                    if (this.frameCounter > 6.0)
                    {
                        this.frameCounter = 0.0;
                        if (this.frame.Y > num1 * 7)
                            this.frame.Y -= num1;
                    }
                }
                else if ((double) this.ai[0] == 4.0 || (double) this.ai[0] == 5.0)
                {
                    if ((double) this.ai[0] == 4.0 && (double) this.ai[2] == 1.0)
                        this.rotation = 0.0f;
                    this.frame.Y = num1 * 13;
                    this.frameCounter = 0.0;
                }
                else if ((double) this.ai[0] == 4.09999990463257)
                {
                    this.rotation = 0.0f;
                    if (this.frame.Y > num1 * 6)
                        this.frameCounter = 0.0;
                    ++this.frameCounter;
                    var num3 = 4;
                    if (this.frameCounter < (double) num3)
                        this.frame.Y = num1 * 6;
                    else if (this.frameCounter < (double) (num3 * 2))
                        this.frame.Y = num1 * 5;
                    else if (this.frameCounter < (double) (num3 * 3))
                        this.frame.Y = num1 * 4;
                    else if (this.frameCounter < (double) (num3 * 4))
                        this.frame.Y = num1 * 3;
                    else if (this.frameCounter < (double) (num3 * 5))
                    {
                        this.frame.Y = num1 * 4;
                    }
                    else
                    {
                        this.frame.Y = num1 * 5;
                        if (this.frameCounter >= (double) (num3 * 6 - 1))
                            this.frameCounter = 0.0;
                    }
                }
            }

            if (this.type == 477)
            {
                this.frameCounter += (double) this.velocity.Length() / 4.0;
                ++this.frameCounter;
                if (this.frameCounter >= 6.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y += num1;
                }

                if (this.frame.Y / num1 > 5)
                    this.frame.Y = 0;
            }

            if (this.type == 479)
            {
                ++this.frameCounter;
                var num3 = 4;
                if (this.frameCounter < (double) num3)
                    this.frame.Y = 0;
                else if (this.frameCounter < (double) (num3 * 2))
                    this.frame.Y = num1;
                else if (this.frameCounter < (double) (num3 * 3))
                    this.frame.Y = num1 * 2;
                else if (this.frameCounter < (double) (num3 * 4 - 1))
                    this.frame.Y = num1;
                else
                    this.frameCounter = 0.0;
            }

            if (this.type == 472)
            {
                if ((double) this.velocity.X < 0.0)
                    this.direction = -1;
                else
                    this.direction = 1;
                if (this.direction == 1)
                    this.spriteDirection = 1;
                if (this.direction == -1)
                    this.spriteDirection = -1;
                this.rotation = (float) Math.Atan2((double) this.velocity.Y * (double) this.direction,
                    (double) this.velocity.X * (double) this.direction);
                ++this.frameCounter;
                if (this.frameCounter > 4.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y / num1 >= 6)
                    this.frame.Y = 0;
            }

            if (this.type >= 449 && this.type <= 452)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.ai[2] > 0.0)
                    {
                        this.spriteDirection = this.direction;
                        var num3 = 0;
                        if ((double) this.ai[1] < 22.0)
                            num3 = -14;
                        else if ((double) this.ai[1] < 28.0)
                            num3 = 3;
                        else if ((double) this.ai[1] < 34.0)
                            num3 = 2;
                        else if ((double) this.ai[1] < 40.0)
                            num3 = 1;
                        this.frame.Y = num1 * (15 + num3);
                        this.frameCounter = 0.0;
                    }
                    else if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = num1;
                    }
                    else
                    {
                        if (this.frame.Y < num1 * 2)
                            this.frame.Y = num1 * 2;
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
                        if (this.frameCounter > 6.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 >= 15)
                            this.frame.Y = num1 * 2;
                    }
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = 0;
                }
            }

            if (this.type == 481)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.ai[2] > 0.0)
                    {
                        this.spriteDirection = this.direction;
                        var num3 = 0;
                        if ((double) this.ai[1] < 22.0)
                            num3 = -14;
                        else if ((double) this.ai[1] < 28.0)
                            num3 = 3;
                        else if ((double) this.ai[1] < 34.0)
                            num3 = 2;
                        else if ((double) this.ai[1] < 40.0)
                            num3 = 1;
                        this.frame.Y = num1 * (15 + num3);
                        this.frameCounter = 0.0;
                    }
                    else if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = num1;
                    }
                    else
                    {
                        if (this.frame.Y < num1 * 2)
                            this.frame.Y = num1 * 2;
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
                        if (this.frameCounter > 6.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 >= 15)
                            this.frame.Y = num1 * 2;
                    }
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = 0;
                }
            }

            if (this.type == 468)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.ai[2] > 0.0)
                    {
                        this.spriteDirection = this.direction;
                        var num3 = 0;
                        if ((double) this.ai[1] < 22.0)
                            num3 = -15;
                        else if ((double) this.ai[1] < 28.0)
                            num3 = 3;
                        else if ((double) this.ai[1] < 34.0)
                            num3 = 2;
                        else if ((double) this.ai[1] < 40.0)
                            num3 = 1;
                        this.frame.Y = num1 * (15 + num3);
                        this.frameCounter = 0.0;
                    }
                    else if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = 0;
                    }
                    else
                    {
                        if (this.frame.Y < num1 * 2)
                            this.frame.Y = num1 * 2;
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
                        if (this.frameCounter > 6.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 >= 15)
                            this.frame.Y = num1 * 2;
                    }
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1;
                }
            }

            if (this.type == 379 || this.type == 380)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.ai[2] > 0.0)
                    {
                        this.spriteDirection = this.direction;
                        this.frame.Y = num1 * ((int) this.ai[2] - 1 + 2);
                        this.frameCounter = 0.0;
                    }
                    else if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = 0;
                    }
                    else
                    {
                        if (this.frame.Y < num1 * 7)
                            this.frame.Y = num1 * 7;
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
                        if (this.frameCounter > 6.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                            this.frame.Y = num1 * 7;
                    }
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1;
                }
            }

            if (this.type == 381 || this.type == 382 || (this.type == 383 || this.type == 385) || this.type == 389)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    this.spriteDirection = this.direction;
                    if (this.frame.Y < num1 * 2)
                        this.frame.Y = num1 * 2;
                    if (this.type == 389 || this.type == 385)
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.2;
                    else
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
                    if (this.frameCounter > 6.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                        this.frame.Y = num1 * 2;
                    if ((double) this.velocity.X == 0.0)
                        this.frame.Y = 0;
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1;
                }
            }

            if (this.type == 387)
            {
                if ((double) this.ai[0] > 0.0)
                {
                    ++this.frameCounter;
                    if ((double) this.ai[0] >= 20.0)
                        ++this.frameCounter;
                    if ((double) this.ai[0] >= 40.0)
                        ++this.frameCounter;
                    if (this.frameCounter >= 10.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                        if (this.frame.Y >= num1 * 2)
                            this.frame.Y = 0;
                    }
                }
                else
                {
                    ++this.frameCounter;
                    if (this.frameCounter >= 15.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                        if (this.frame.Y >= num1 * 2)
                            this.frame.Y = 0;
                    }
                }
            }

            if (this.type == 386)
            {
                if ((double) this.ai[2] > 0.0)
                {
                    var num3 = (int) this.ai[2] / 12;
                    this.frame.Y = num1 * (9 + num3 % 2);
                }
                else if ((double) this.velocity.Y == 0.0)
                {
                    this.spriteDirection = this.direction;
                    if (this.frame.Y < num1 * 2)
                        this.frame.Y = num1 * 2;
                    this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
                    if (this.frameCounter > 6.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y / num1 >= 9)
                        this.frame.Y = num1 * 2;
                    if ((double) this.velocity.X == 0.0)
                        this.frame.Y = 0;
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1;
                }
            }

            if (this.type == 388)
            {
                ++this.frameCounter;
                if (this.frameCounter >= 6.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y += num1;
                    if (this.frame.Y >= num1 * 2)
                        this.frame.Y = 0;
                }
            }

            if (this.type == 391)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = -1;
                    if (this.direction == -1)
                        this.spriteDirection = 1;
                    if (this.frame.Y < num1)
                        this.frame.Y = num1;
                    this.frameCounter += (double) Math.Abs(this.velocity.X) * 0.5;
                    if (this.frameCounter > 6.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                        this.frame.Y = num1;
                    if ((double) this.velocity.X == 0.0)
                        this.frame.Y = 0;
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = 0;
                }
            }

            if (this.type == 390)
            {
                if (this.direction != 0)
                    this.spriteDirection = -this.direction;
                this.frame.Y = (double) this.ai[2] <= 0.0 ? num1 * 2 : num1 * ((int) this.ai[2] - 1);
            }

            if (this.type == 393)
            {
                var rotationVector2 = this.ai[2].ToRotationVector2();
                var num3 = (double) rotationVector2.Y <= (double) Math.Abs(rotationVector2.X) * 2.0
                    ? ((double) rotationVector2.Y <= (double) Math.Abs(rotationVector2.X) * 1.5
                        ? ((double) Math.Abs(rotationVector2.X) <= (double) rotationVector2.Y * 2.0
                            ? ((double) Math.Abs(rotationVector2.X) <= (double) rotationVector2.Y * 1.5
                                ? ((double) rotationVector2.X > 0.0 ? 6 : 2)
                                : ((double) rotationVector2.X > 0.0 ? 7 : 1))
                            : ((double) rotationVector2.X > 0.0 ? 8 : 0))
                        : ((double) rotationVector2.X > 0.0 ? 5 : 3))
                    : 4;
                this.frame.Y = num1 * num3;
                var num4 = 280f;
                var num5 = 140f;
                if ((double) this.ai[3] >= (double) num4 && (double) this.ai[3] < (double) num4 + (double) num5 &&
                    (int) this.ai[3] % 6 <= 2)
                    this.frame.Y += num1 * 9;
            }

            if (this.type == 394)
            {
                var num3 = (int) this.ai[3] - 300;
                if (num3 >= 120)
                {
                    var num4 = num3 - 120;
                    this.frame.Y = num4 < 160
                        ? (num4 < 20 ? num1 * (4 + num4 / 5) : num1 * (num4 / 4 % 4))
                        : num1 * (7 - (num4 - 160) / 5);
                }
                else
                    this.frame.Y = num1 * 4;
            }

            if (this.type == 395)
            {
                var num3 = 20f;
                var num4 = 240f;
                var flag = (double) this.ai[3] >= (double) num3 && (double) this.ai[3] < (double) num3 + (double) num4;
                ++this.frameCounter;
                if (this.frameCounter >= 66.0)
                    this.frameCounter = 0.0;
                if (flag)
                {
                    ++this.frameCounter;
                    if (this.frameCounter >= 54.0 || this.frameCounter < 36.0)
                        this.frameCounter = 36.0;
                }

                var num5 = (int) this.frameCounter % 66 / 6;
                this.frame.Y = num1 * num5;
            }

            if (this.type == 392)
            {
                var num3 = 20f;
                var num4 = 240f;
                var flag = (double) this.ai[3] >= (double) num3 && (double) this.ai[3] < (double) num3 + (double) num4;
                ++this.frameCounter;
                if (flag)
                    ++this.frameCounter;
                if (this.frameCounter >= 12.0)
                    this.frameCounter = 0.0;
                var num5 = (int) this.frameCounter % 12 / 3;
                this.frame.Y = num1 * num5;
            }

            if (this.type == 399)
            {
                this.frameCounter = (this.frameCounter + 0.25) % 4.0 + ((double) this.ai[0] == 0.0 ? 0.0 : 4.0);
                this.frame.Y = num1 * (int) this.frameCounter;
            }
            else if (this.type == 520)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    this.spriteDirection = this.direction;
                    this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
                    if (this.frameCounter > 6.0)
                    {
                        if ((double) Math.Abs(this.velocity.X) < 0.200000002980232)
                        {
                            this.frame.Y = 0;
                            this.frameCounter = 0.0;
                        }
                        else
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }
                    }

                    if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                        this.frame.Y = num1;
                    if ((double) this.velocity.X == 0.0)
                        this.frame.Y = 0;
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1;
                }
            }

            if (this.type == 398)
            {
                if ((double) this.ai[0] <= 0.0)
                {
                    this.frame.Y = 0;
                }
                else
                {
                    if (this.frame.Y == 0)
                    {
                        Gore.NewGore(this.position + new Vector2(-10f, -15f), this.velocity, 619, 1f);
                        Gore.NewGore(this.position + new Vector2(10f, -15f), this.velocity, 620, 1f);
                        Gore.NewGore(this.position + new Vector2(-10f, 15f), this.velocity, 621, 1f);
                        Gore.NewGore(this.position + new Vector2(10f, 15f), this.velocity, 622, 1f);
                        for (var index = 0; index < 50; ++index)
                        {
                            this.frame.Y = num1;
                            Dust.NewDust(this.position, this.width, this.height, 209, 0.0f, 0.0f, 0, new Color(), 1f);
                        }
                    }

                    ++this.frameCounter;
                    if (this.frameCounter >= 30.0)
                        this.frameCounter = 6.0;
                    var num3 = (int) this.frameCounter % 30 / 6;
                    this.frame.Y = num1 * num3;
                }
            }

            if (this.type == 397)
            {
                var num3 = (int) this.frameCounter / 7;
                this.frame.Y = num1 * num3;
            }

            if (this.type == 400)
            {
                ++this.frameCounter;
                if ((double) this.ai[0] == 0.0 || (double) this.ai[0] == 3.0)
                    ++this.frameCounter;
                if (this.frameCounter >= 16.0)
                    this.frameCounter = 0.0;
                var num3 = (int) this.frameCounter % 16 / 4;
                this.frame.Y = num1 * num3;
            }

            if (this.type == 437)
            {
                ++this.frameCounter;
                if (this.frameCounter >= 20.0)
                    this.frameCounter = 0.0;
                var num3 = (int) this.frameCounter % 20 / 5;
                this.frame.Y = num1 * num3;
            }

            if (this.type == 438)
            {
                ++this.frameCounter;
                if ((double) this.ai[1] == 1.0)
                    ++this.frameCounter;
                if (this.frameCounter >= 49.0)
                    this.frameCounter = 0.0;
                var num3 = (int) this.frameCounter % 49 / 7;
                if (num3 >= 4)
                    num3 = 6 - num3;
                this.frame.Y = num1 * num3;
            }

            if (this.type == 439 || this.type == 440)
            {
                switch ((int) this.localAI[2])
                {
                    case 0:
                        if (this.frameCounter >= 15.0)
                        {
                            this.frameCounter = 0.0;
                            this.frame.Y = 0;
                            break;
                        }

                        if (this.frame.Y != 0)
                        {
                            this.frame.Y = ((int) this.frameCounter / 5 + 4) * num1;
                            break;
                        }

                        break;
                    case 1:
                        if (this.frameCounter >= 15.0)
                        {
                            this.frameCounter = 0.0;
                            this.frame.Y = num1;
                            break;
                        }

                        if (this.frame.Y != num1)
                        {
                            this.frame.Y = ((int) this.frameCounter / 5 + 10) * num1;
                            break;
                        }

                        break;
                    case 2:
                        if (this.frameCounter >= 15.0)
                        {
                            this.frameCounter = 0.0;
                            this.frame.Y = num1 * 2;
                            break;
                        }

                        if (this.frame.Y != num1 * 2)
                        {
                            this.frame.Y = ((int) this.frameCounter / 5 + 7) * num1;
                            break;
                        }

                        break;
                    case 10:
                        if (this.frameCounter >= 15.0)
                            this.frameCounter = 0.0;
                        this.frame.Y = ((int) this.frameCounter / 5 + 4) * num1;
                        break;
                    case 11:
                        if (this.frameCounter >= 15.0)
                            this.frameCounter = 0.0;
                        this.frame.Y = ((int) this.frameCounter / 5 + 10) * num1;
                        break;
                    case 12:
                        if (this.frameCounter >= 15.0)
                            this.frameCounter = 0.0;
                        this.frame.Y = ((int) this.frameCounter / 5 + 7) * num1;
                        break;
                    case 13:
                        if (this.frameCounter >= 15.0)
                            this.frameCounter = 0.0;
                        this.frame.Y = ((int) this.frameCounter / 5 + 13) * num1;
                        break;
                }

                ++this.frameCounter;
            }

            if (this.type == 521)
            {
                if ((double) this.velocity.X < 0.0)
                    this.direction = -1;
                else
                    this.direction = 1;
                if (this.direction != 0)
                    this.spriteDirection = this.direction;
                this.rotation = (float) Math.Atan2((double) this.velocity.Y * (double) this.spriteDirection,
                                    (double) this.velocity.X * (double) this.spriteDirection) + this.velocity.X * 0.1f;
                if (++this.frameCounter >= 5.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                    if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                        this.frame.Y = 0;
                }
            }

            if (this.type == 523 && ++this.frameCounter >= 6.0)
            {
                this.frame.Y += num1;
                this.frameCounter = 0.0;
                if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                    this.frame.Y = 0;
            }

            if (this.type == 371 || this.type == 372 || this.type == 373)
                this.frame.Y = num1;
            if (this.type == 370)
            {
                if ((double) this.ai[0] == 0.0 || (double) this.ai[0] == 5.0)
                {
                    var num3 = 5;
                    if ((double) this.ai[0] == 5.0)
                        num3 = 4;
                    ++this.frameCounter;
                    if (this.frameCounter > (double) num3)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                    }

                    if (this.frame.Y >= num1 * 6)
                        this.frame.Y = 0;
                }

                if ((double) this.ai[0] == 1.0 || (double) this.ai[0] == 6.0)
                    this.frame.Y = (double) this.ai[2] >= 10.0 ? num1 * 7 : num1 * 6;
                if ((double) this.ai[0] == 2.0 || (double) this.ai[0] == 7.0)
                    this.frame.Y = (double) this.ai[2] >= 10.0 ? num1 * 7 : num1 * 6;
                if ((double) this.ai[0] == 3.0 || (double) this.ai[0] == 8.0 || (double) this.ai[0] == -1.0)
                {
                    var num3 = 90;
                    if ((double) this.ai[2] < (double) (num3 - 30) || (double) this.ai[2] > (double) (num3 - 10))
                    {
                        ++this.frameCounter;
                        if (this.frameCounter > 5.0)
                        {
                            this.frameCounter = 0.0;
                            this.frame.Y += num1;
                        }

                        if (this.frame.Y >= num1 * 6)
                            this.frame.Y = 0;
                    }
                    else
                    {
                        this.frame.Y = num1 * 6;
                        if ((double) this.ai[2] > (double) (num3 - 20) && (double) this.ai[2] < (double) (num3 - 15))
                            this.frame.Y = num1 * 7;
                    }
                }

                if ((double) this.ai[0] == 4.0 || (double) this.ai[0] == 9.0)
                {
                    var num3 = 180;
                    if ((double) this.ai[2] < (double) (num3 - 60) || (double) this.ai[2] > (double) (num3 - 20))
                    {
                        ++this.frameCounter;
                        if (this.frameCounter > 5.0)
                        {
                            this.frameCounter = 0.0;
                            this.frame.Y += num1;
                        }

                        if (this.frame.Y >= num1 * 6)
                            this.frame.Y = 0;
                    }
                    else
                    {
                        this.frame.Y = num1 * 6;
                        if ((double) this.ai[2] > (double) (num3 - 50) && (double) this.ai[2] < (double) (num3 - 25))
                            this.frame.Y = num1 * 7;
                    }
                }
            }

            if (this.type == 359 || this.type == 360)
            {
                if ((double) this.velocity.Y > 1.0)
                {
                    ++this.frameCounter;
                    var num3 = 6;
                    if (this.frameCounter < (double) num3)
                    {
                        this.frame.Y = num1 * 4;
                    }
                    else
                    {
                        this.frame.Y = num1 * 5;
                        if (this.frameCounter >= (double) (num3 * 2 - 1))
                            this.frameCounter = 0.0;
                    }
                }
                else
                {
                    ++this.frameCounter;
                    var num3 = 10;
                    if (this.frameCounter < (double) num3)
                        this.frame.Y = 0;
                    else if (this.frameCounter < (double) (num3 * 2))
                        this.frame.Y = num1;
                    else if (this.frameCounter < (double) (num3 * 3))
                        this.frame.Y = num1 * 2;
                    else if (this.frameCounter < (double) (num3 * 4))
                        this.frame.Y = num1 * 3;
                    else if (this.frameCounter < (double) (num3 * 5))
                    {
                        this.frame.Y = num1 * 2;
                    }
                    else
                    {
                        this.frame.Y = num1;
                        if (this.frameCounter >= (double) (num3 * 6 - 1))
                            this.frameCounter = 0.0;
                    }
                }
            }

            if (this.type == 327)
            {
                if ((double) this.ai[3] == 0.0)
                {
                    if (this.frame.Y > num1 * 5)
                        ++this.frameCounter;
                    else if (this.frame.Y > 0)
                        --this.frameCounter;
                }
                else if ((double) this.ai[3] == 1.0)
                {
                    if (this.frame.Y > num1 * 10)
                        ++this.frameCounter;
                    else if (this.frame.Y > num1 * 4)
                        --this.frameCounter;
                    else if (this.frame.Y < num1 * 4)
                        ++this.frameCounter;
                }
                else if ((double) this.ai[3] == 2.0)
                {
                    if (this.frame.Y < num1 * 2)
                        --this.frameCounter;
                    else if (this.frame.Y > num1 * 8)
                        --this.frameCounter;
                    else if (this.frame.Y < num1 * 8)
                        ++this.frameCounter;
                }

                if (this.frameCounter > 6.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y += num1;
                    if (this.frame.Y > num1 * 11)
                        this.frame.Y = 0;
                }

                if (this.frameCounter < 0.0)
                {
                    this.frameCounter = 6.0;
                    this.frame.Y -= num1;
                    if (this.frame.Y < 0)
                        this.frame.Y = num1 * 11;
                }
            }

            if (this.type == 347)
            {
                ++this.frameCounter;
                if (this.frameCounter > 1.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y > num1 * 3)
                    this.frame.Y = 0;
            }

            if (this.type == 346)
            {
                if ((double) this.ai[0] == 1.0)
                {
                    this.spriteDirection = this.direction;
                    ++this.frameCounter;
                    if (this.frameCounter > 2.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y > num1 * 8)
                        this.frame.Y = num1 * 6;
                    if (this.frame.Y < num1 * 6)
                        this.frame.Y = num1 * 6;
                }
                else if ((double) this.velocity.X == 0.0)
                {
                    ref var local = ref this.frame;
                    local.Y = local.Y;
                    this.frameCounter = 0.0;
                }
                else
                {
                    this.spriteDirection = this.direction;
                    ++this.frameCounter;
                    this.frameCounter += (double) Math.Abs(this.velocity.X) / 2.0;
                    if (this.frameCounter > 4.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y > num1 * 5)
                        this.frame.Y = num1;
                    if (this.frame.Y < num1)
                        this.frame.Y = num1;
                }
            }

            if (this.type == 352)
            {
                ++this.frameCounter;
                if (this.frameCounter > 3.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y > num1 * 5)
                    this.frame.Y = 0;
            }

            if (this.type == 345)
            {
                if ((double) this.ai[0] == 0.0)
                    this.frame.Y = (double) this.ai[3] < 0.0 ? ((double) this.velocity.X >= 0.0 ? num1 * 2 : num1) : 0;
                else if ((double) this.ai[0] == 1.0)
                {
                    ++this.frameCounter;
                    if (this.frameCounter > 5.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                    }

                    if (this.frame.Y > num1 * 4)
                        this.frame.Y = num1 * 3;
                    if (this.frame.Y < num1 * 3)
                        this.frame.Y = num1 * 3;
                }
                else if ((double) this.ai[0] == 2.0)
                    this.frame.Y = num1 * 5;
            }

            if (this.type == 344)
            {
                if ((double) this.velocity.X == 0.0)
                {
                    ++this.frameCounter;
                    if (this.frameCounter > 2.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                    }

                    if (this.frame.Y > num1 * 9)
                        this.frame.Y = 0;
                }
                else
                {
                    ++this.frameCounter;
                    if (this.frameCounter > 3.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                    }

                    if (this.frame.Y > num1 * 9)
                        this.frame.Y = 0;
                }
            }

            if (this.type == 325)
            {
                if ((double) this.velocity.X == 0.0)
                {
                    ++this.frameCounter;
                    if (this.frameCounter > 4.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                    }

                    if (this.frame.Y > num1 * 4)
                        this.frame.Y = 0;
                }
                else
                {
                    ++this.frameCounter;
                    if (this.frameCounter > 4.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                    }

                    if (this.frame.Y < num1 * 5)
                        this.frame.Y = num1 * 5;
                    if (this.frame.Y > num1 * 9)
                        this.frame.Y = num1 * 5;
                }
            }

            if (this.type == 490)
            {
                this.rotation = this.velocity.X * 0.15f;
                ++this.frameCounter;
                if (this.frameCounter > 6.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y += num1;
                }

                if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
                    this.frame.Y = 0;
            }
            else if (this.type == 266)
            {
                ++this.frameCounter;
                if (this.frameCounter > 6.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y += num1;
                }

                if ((double) this.ai[0] >= 0.0)
                {
                    if (this.frame.Y > num1 * 3)
                        this.frame.Y = 0;
                }
                else
                {
                    if (this.frame.Y < num1 * 4)
                        this.frame.Y = num1 * 4;
                    if (this.frame.Y > num1 * 7)
                        this.frame.Y = num1 * 4;
                }
            }
            else if (this.type == 262)
            {
                ++this.frameCounter;
                if (this.frameCounter > 6.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y += num1;
                }

                if (this.life > this.lifeMax / 2)
                {
                    if (this.frame.Y > num1 * 3)
                        this.frame.Y = 0;
                }
                else
                {
                    if (this.frame.Y < num1 * 4)
                        this.frame.Y = num1 * 4;
                    if (this.frame.Y > num1 * 7)
                        this.frame.Y = num1 * 4;
                }
            }
            else if (this.type >= 305 && this.type <= 309)
            {
                if ((double) this.velocity.Y == 0.0)
                    this.spriteDirection = this.direction;
                this.frame.Y = (double) this.velocity.Y >= -3.0
                    ? ((double) this.velocity.Y > 0.0 ? ((double) this.velocity.Y >= 2.0 ? num1 : num1 * 3) : 0)
                    : num1 * 5;
                this.rotation = this.velocity.X * 0.1f;
            }
            else if (this.type == 263)
            {
                if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
                {
                    if (this.frame.Y > 0)
                    {
                        ++this.frameCounter;
                        if (this.frameCounter > 4.0)
                        {
                            this.frameCounter = 0.0;
                            this.frame.Y -= num1;
                        }
                    }
                }
                else if (this.frame.Y < 2)
                {
                    ++this.frameCounter;
                    if (this.frameCounter > 4.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                    }
                }
            }
            else if (this.type == 244)
            {
                ++this.frameCounter;
                if (num2 > 0)
                    ++this.frameCounter;
                if (num2 == 4)
                    ++this.frameCounter;
                if (this.frameCounter >= 8.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
                    this.frame.Y = 0;
            }
            else if (this.type == 289)
            {
                ++this.frameCounter;
                if (this.frameCounter < 2.0)
                    this.frame.Y = 0;
                else if (this.frameCounter < 3.0)
                {
                    this.frame.Y = num1;
                }
                else
                {
                    this.frame.Y = num1 * 2;
                    this.frameCounter = 0.0;
                }

                if ((double) this.ai[3] == 1.0)
                    this.frame.Y += num1 * 3;
            }
            else if (this.type == 288)
            {
                ++this.frameCounter;
                if (this.frameCounter >= 6.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
                    this.frame.Y = 0;
            }
            else if (this.type == 355 || this.type == 358)
            {
                this.spriteDirection = this.direction;
                ++this.frameCounter;
                if (this.frameCounter < 4.0)
                {
                    this.frame.Y = 0;
                }
                else
                {
                    this.frame.Y = num1;
                    if (this.frameCounter >= 7.0)
                        this.frameCounter = 0.0;
                }

                if ((double) this.localAI[2] <= 0.0)
                    this.frame.Y += num1 * 2;
            }
            else if (this.type == 356 || this.type == 444)
            {
                var num3 = 7;
                this.rotation = this.velocity.X * 0.3f;
                this.spriteDirection = this.direction;
                this.frameCounter = this.frameCounter + 1.0 +
                                    ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) / 2.0;
                if (this.frameCounter < (double) num3)
                    this.frame.Y = 0;
                else if (this.frameCounter < (double) (num3 * 2))
                    this.frame.Y = num1;
                else if (this.frameCounter < (double) (num3 * 3))
                {
                    this.frame.Y = num1 * 2;
                }
                else
                {
                    this.frame.Y = num1;
                    if (this.frameCounter >= (double) (num3 * 4 - 1))
                        this.frameCounter = 0.0;
                }

                if (this.type != 444)
                    this.frame.Y += (int) ((double) (num1 * 3) * ((double) this.ai[2] - 1.0));
            }
            else if (this.type == 357 || this.type == 448 || this.type == 484)
            {
                this.localAI[0] = -2f;
                if ((double) this.velocity.Y == 0.0)
                {
                    this.rotation = 0.0f;
                    if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = num1;
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        ++this.frameCounter;
                        if (this.frameCounter > 12.0)
                        {
                            this.frameCounter = 0.0;
                            this.frame.Y += num1;
                            if (this.frame.Y > num1)
                                this.frame.Y = 0;
                        }
                    }
                }
                else
                {
                    this.rotation += (float) this.direction * 0.1f;
                    this.frame.Y = num1;
                }

                var x = (int) this.Center.X / 16;
                var y = (int) this.position.Y / 16;
                if (WorldGen.InWorld(x, y, 0) && Main.tile[x, y] != null)
                {
                    if (Main.tile[x, y].slope() == (byte) 0)
                        ++y;
                    if (Main.tile[x, y].slope() == (byte) 1)
                    {
                        this.rotation = 0.785f;
                        this.localAI[0] = 0.0f;
                    }
                    else if (Main.tile[x, y].slope() == (byte) 2)
                    {
                        this.rotation = -0.785f;
                        this.localAI[0] = 0.0f;
                    }
                }
            }
            else if (this.type >= 485 && this.type <= 487)
            {
                this.spriteDirection = this.direction;
                this.localAI[0] = -2f;
                if ((double) this.velocity.Y == 0.0)
                {
                    this.rotation = 0.0f;
                    if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = num1;
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X * 5f);
                        if (this.frameCounter > 10.0)
                        {
                            this.frameCounter = 0.0;
                            this.frame.Y += num1;
                            if (this.frame.Y > num1 * 3)
                                this.frame.Y = 0;
                        }
                    }
                }
                else
                {
                    this.rotation += (float) this.direction * 0.1f;
                    this.frame.Y = num1;
                }

                var index1 = (int) this.Center.X / 16;
                var index2 = (int) this.position.Y / 16;
                if (Main.tile[index1, index2] != null)
                {
                    if (Main.tile[index1, index2].slope() == (byte) 0)
                        ++index2;
                    if (Main.tile[index1, index2].slope() == (byte) 1)
                    {
                        this.rotation = 0.785f;
                        this.localAI[0] = 0.0f;
                    }
                    else if (Main.tile[index1, index2].slope() == (byte) 2)
                    {
                        this.rotation = -0.785f;
                        this.localAI[0] = 0.0f;
                    }
                }
            }
            else if (this.type == 250 || this.type == 264 || this.type == 268)
            {
                ++this.frameCounter;
                if (this.frameCounter >= 6.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
                    this.frame.Y = 0;
            }
            else if (this.type == 245)
            {
                if ((double) this.ai[0] == 0.0)
                    this.frame.Y = (double) this.ai[1] >= -16.0
                        ? ((double) this.ai[1] >= -12.0
                            ? ((double) this.ai[1] >= -8.0
                                ? ((double) this.ai[1] >= -4.0 ? ((double) this.ai[1] >= 0.0 ? 0 : num1 * 4) : num1 * 3)
                                : num1 * 2)
                            : num1)
                        : 0;
                else if ((double) this.ai[0] == 1.0)
                    this.frame.Y = 1;
            }
            else if (this.type == 246)
            {
                if ((double) this.ai[0] == 0.0)
                    this.frame.Y = (double) this.localAI[0] != 1.0 ? 0 : num1;
                else if ((double) this.ai[0] == 1.0)
                {
                    this.frame.Y = (double) this.localAI[0] != 1.0 ? 0 : num1;
                    if ((double) this.localAI[1] == -1.0)
                        this.frame.Y += num1 * 4;
                    if ((double) this.localAI[1] == 1.0)
                        this.frame.Y += num1 * 2;
                }
            }
            else if (this.type == 249)
                this.frame.Y = (double) this.localAI[0] != 1.0 ? 0 : num1;
            else if (this.type == 141)
            {
                this.spriteDirection = this.direction;
                if ((double) this.velocity.Y != 0.0)
                {
                    this.frame.Y = num1 * 2;
                }
                else
                {
                    ++this.frameCounter;
                    if (this.frameCounter >= 8.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y > num1)
                        this.frame.Y = 0;
                }
            }
            else if (this.type == 243)
            {
                if (this.frameCounter < 0.0)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        ++this.frameCounter;
                        if (this.frameCounter < -12.0)
                        {
                            if (this.frame.Y > num1 * 9)
                                this.frame.Y = num1 * 11;
                        }
                        else if (this.frameCounter < -6.0)
                        {
                            if (this.frame.Y > num1 * 9)
                                this.frame.Y = num1 * 12;
                        }
                        else if (this.frameCounter < 0.0)
                        {
                            this.frameCounter = 0.0;
                            if (this.frame.Y > num1 * 9)
                                this.frame.Y = num1 * 11;
                        }
                    }
                    else
                    {
                        this.frameCounter = -18.0;
                        this.frame.Y = (double) this.velocity.Y >= 0.0 ? num1 * 13 : num1 * 14;
                    }
                }
                else
                {
                    this.spriteDirection = this.direction;
                    this.frameCounter += (double) Math.Abs(this.velocity.X * 1.1f);
                    if (this.frameCounter >= 6.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                        if (this.frame.Y > num1 * 9)
                            this.frame.Y = 0;
                    }

                    if ((double) this.velocity.Y < -2.0 || (double) this.velocity.Y > 5.0)
                        this.frameCounter = -18.0;
                }
            }
            else if (this.type == 222)
            {
                ++this.frameCounter;
                if ((double) this.localAI[0] == 1.0)
                {
                    if (this.frameCounter > 4.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y >= num1 * 4)
                        this.frame.Y = 0;
                }
                else
                {
                    if (this.frameCounter > 4.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y < num1 * 4)
                        this.frame.Y = num1 * 4;
                    if (this.frame.Y >= num1 * 12)
                        this.frame.Y = num1 * 4;
                }
            }
            else if (this.type == 164 || this.type == 239 || this.type == 530)
            {
                if ((double) this.velocity.Y != 0.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = (double) this.velocity.Y >= 0.0 ? 0 : num1 * 4;
                }
                else
                {
                    this.spriteDirection = this.direction;
                    this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.10000002384186;
                    if (this.frameCounter < 6.0)
                        this.frame.Y = num1;
                    else if (this.frameCounter < 12.0)
                        this.frame.Y = num1 * 2;
                    else if (this.frameCounter < 18.0)
                        this.frame.Y = num1 * 3;
                    else
                        this.frameCounter = 0.0;
                }
            }
            else if (this.type == 236)
            {
                if ((double) this.velocity.Y == 0.0)
                    this.spriteDirection = this.direction;
                else
                    this.frame.Y = 0;
                this.frameCounter += (double) Math.Abs(this.velocity.X);
                if (this.frameCounter > 6.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y > num1 || (double) this.velocity.Y != 0.0)
                    this.frame.Y = 0;
            }
            else if (this.type == 165 || this.type == 237 || (this.type == 238 || this.type == 240) || this.type == 531)
            {
                var num3 = 0.5f;
                if (this.type == 531)
                    num3 = 0.4f;
                this.frameCounter += ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) *
                                     (double) num3;
                if (this.frameCounter < 6.0)
                    this.frame.Y = 0;
                else if (this.frameCounter < 12.0)
                    this.frame.Y = num1;
                else if (this.frameCounter < 18.0)
                    this.frame.Y = num1 * 2;
                else if (this.frameCounter < 24.0)
                    this.frame.Y = num1 * 3;
                else
                    this.frameCounter = 0.0;
            }
            else if (this.type == 195)
                this.frame.Y = (double) this.ai[0] >= 3.0
                    ? ((double) this.ai[0] >= 6.0
                        ? ((double) this.ai[0] >= 9.0
                            ? ((double) this.ai[0] >= 12.0
                                ? ((double) this.ai[0] >= 15.0 ? num1 * 5 : num1 * 4)
                                : num1 * 3)
                            : num1 * 2)
                        : num1)
                    : 0;
            else if (this.type == 174)
                this.frame.Y = (double) this.velocity.Y != 0.0
                    ? ((double) this.velocity.Y >= -1.5
                        ? ((double) this.velocity.Y <= 1.5 ? num1 * 2 : num1 * 3)
                        : num1)
                    : 0;
            else if (this.type == 177)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    ++this.frameCounter;
                    if (this.frameCounter >= 10.0)
                    {
                        this.frameCounter = 30.0;
                        this.frame.Y = 0;
                    }
                    else
                        this.frame.Y = num1;
                }
                else if ((double) this.velocity.Y < 0.0)
                {
                    this.frame.Y = num1 * 2;
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * 2;
                }
            }
            else if (this.type == 163)
            {
                if ((double) this.velocity.Y != 0.0)
                {
                    this.frameCounter = -12.0;
                    this.frame.Y = (double) this.velocity.Y >= 0.0 ? num1 * 6 : num1 * 5;
                }
                else
                {
                    this.spriteDirection = this.direction;
                    this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.10000002384186;
                    if (this.frameCounter < -6.0)
                        this.frame.Y = num1 * 6;
                    else if (this.frameCounter < 0.0)
                        this.frame.Y = num1 * 7;
                    else if (this.frameCounter < 6.0)
                        this.frame.Y = num1;
                    else if (this.frameCounter < 12.0)
                        this.frame.Y = num1 * 2;
                    else if (this.frameCounter < 18.0)
                        this.frame.Y = num1 * 3;
                    else
                        this.frameCounter = 0.0;
                }
            }
            else if (this.type == 143)
            {
                if ((double) this.velocity.Y > 0.0)
                    ++this.frameCounter;
                else if ((double) this.velocity.Y < 0.0)
                    --this.frameCounter;
                if (this.frameCounter < 6.0)
                    this.frame.Y = num1;
                else if (this.frameCounter < 12.0)
                    this.frame.Y = num1 * 2;
                else if (this.frameCounter < 18.0)
                    this.frame.Y = num1 * 3;
                if (this.frameCounter < 0.0)
                    this.frameCounter = 0.0;
                if (this.frameCounter > 17.0)
                    this.frameCounter = 17.0;
            }
            else if (this.type == 144)
            {
                if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
                {
                    ++this.localAI[3];
                    if ((double) this.localAI[3] < 6.0)
                        this.frame.Y = 0;
                    else if ((double) this.localAI[3] < 12.0)
                        this.frame.Y = num1;
                    if ((double) this.localAI[3] >= 11.0)
                        this.localAI[3] = 0.0f;
                }
                else
                {
                    if ((double) this.velocity.Y > 0.0)
                        ++this.frameCounter;
                    else if ((double) this.velocity.Y < 0.0)
                        --this.frameCounter;
                    if (this.frameCounter < 6.0)
                        this.frame.Y = num1 * 2;
                    else if (this.frameCounter < 12.0)
                        this.frame.Y = num1 * 3;
                    else if (this.frameCounter < 18.0)
                        this.frame.Y = num1 * 4;
                    if (this.frameCounter < 0.0)
                        this.frameCounter = 0.0;
                    if (this.frameCounter > 17.0)
                        this.frameCounter = 17.0;
                }
            }
            else if (this.type == 145)
            {
                if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
                {
                    if ((double) this.ai[2] < 4.0)
                        this.frame.Y = 0;
                    else if ((double) this.ai[2] < 8.0)
                        this.frame.Y = num1;
                    else if ((double) this.ai[2] < 12.0)
                        this.frame.Y = num1 * 2;
                    else if ((double) this.ai[2] < 16.0)
                        this.frame.Y = num1 * 3;
                }
                else
                {
                    if ((double) this.velocity.Y > 0.0)
                        ++this.frameCounter;
                    else if ((double) this.velocity.Y < 0.0)
                        --this.frameCounter;
                    if (this.frameCounter < 6.0)
                        this.frame.Y = num1 * 4;
                    else if (this.frameCounter < 12.0)
                        this.frame.Y = num1 * 5;
                    else if (this.frameCounter < 18.0)
                        this.frame.Y = num1 * 6;
                    if (this.frameCounter < 0.0)
                        this.frameCounter = 0.0;
                    if (this.frameCounter > 17.0)
                        this.frameCounter = 17.0;
                }
            }
            else if (this.type == 50)
            {
                if ((double) this.velocity.Y != 0.0)
                {
                    if (this.frame.Y < num1 * 4)
                    {
                        this.frame.Y = num1 * 4;
                        this.frameCounter = 0.0;
                    }

                    if (++this.frameCounter >= 4.0)
                        this.frame.Y = num1 * 5;
                }
                else
                {
                    if (this.frame.Y >= num1 * 5)
                    {
                        this.frame.Y = num1 * 4;
                        this.frameCounter = 0.0;
                    }

                    ++this.frameCounter;
                    if (num2 > 0)
                        ++this.frameCounter;
                    if (num2 == 4)
                        ++this.frameCounter;
                    if (this.frameCounter >= 8.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                        if (this.frame.Y >= num1 * 4)
                            this.frame.Y = 0;
                    }
                }
            }
            else if (this.type == 170 || this.type == 171 || this.type == 180)
            {
                this.spriteDirection = this.direction;
                ++this.frameCounter;
                if (this.frameCounter >= 4.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y >= num1 * 14)
                    this.frame.Y = 0;
            }
            else if (this.type == 135)
                this.frame.Y = (double) this.ai[2] != 0.0 ? num1 : 0;
            else if (this.type == 85 || this.type == 341)
            {
                if ((double) this.ai[0] == 0.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = 0;
                }
                else
                {
                    var num3 = 3;
                    if ((double) this.velocity.Y == 0.0)
                        --this.frameCounter;
                    else
                        ++this.frameCounter;
                    if (this.frameCounter < 0.0)
                        this.frameCounter = 0.0;
                    if (this.frameCounter > (double) (num3 * 4))
                        this.frameCounter = (double) (num3 * 4);
                    if (this.frameCounter < (double) num3)
                        this.frame.Y = num1;
                    else if (this.frameCounter < (double) (num3 * 2))
                        this.frame.Y = num1 * 2;
                    else if (this.frameCounter < (double) (num3 * 3))
                        this.frame.Y = num1 * 3;
                    else if (this.frameCounter < (double) (num3 * 4))
                        this.frame.Y = num1 * 4;
                    else if (this.frameCounter < (double) (num3 * 5))
                        this.frame.Y = num1 * 5;
                    else if (this.frameCounter < (double) (num3 * 6))
                        this.frame.Y = num1 * 4;
                    else if (this.frameCounter < (double) (num3 * 7))
                    {
                        this.frame.Y = num1 * 3;
                    }
                    else
                    {
                        this.frame.Y = num1 * 2;
                        if (this.frameCounter >= (double) (num3 * 8))
                            this.frameCounter = (double) num3;
                    }
                }

                if ((double) this.ai[3] == 2.0)
                    this.frame.Y += num1 * 6;
                else if ((double) this.ai[3] == 3.0)
                    this.frame.Y += num1 * 12;
                else if ((double) this.ai[3] == 4.0)
                    this.frame.Y += num1 * 18;
            }
            else if (this.type == 113 || this.type == 114)
            {
                if ((double) this.ai[2] == 0.0)
                {
                    ++this.frameCounter;
                    if (this.frameCounter >= 12.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
                        this.frame.Y = 0;
                }
                else
                {
                    this.frame.Y = 0;
                    this.frameCounter = -60.0;
                }
            }
            else if (this.type == 61)
            {
                this.spriteDirection = this.direction;
                this.rotation = this.velocity.X * 0.1f;
                if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
                {
                    this.frame.Y = 0;
                    this.frameCounter = 0.0;
                }
                else
                {
                    ++this.frameCounter;
                    if (this.frameCounter < 4.0)
                    {
                        this.frame.Y = num1;
                    }
                    else
                    {
                        this.frame.Y = num1 * 2;
                        if (this.frameCounter >= 7.0)
                            this.frameCounter = 0.0;
                    }
                }
            }
            else if (this.type == 252 || this.type == 301)
            {
                if (this.type == 301)
                {
                    if ((double) this.velocity.Y == 0.0)
                    {
                        this.spriteDirection = -this.direction;
                    }
                    else
                    {
                        if ((double) this.velocity.X > 0.5)
                            this.spriteDirection = -1;
                        if ((double) this.velocity.X < -0.5)
                            this.spriteDirection = 1;
                    }
                }
                else
                {
                    if ((double) this.velocity.X > 0.5)
                        this.spriteDirection = 1;
                    if ((double) this.velocity.X < -0.5)
                        this.spriteDirection = -1;
                }

                this.rotation = this.velocity.X * 0.1f;
                if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
                {
                    this.frame.Y = 0;
                    this.frameCounter = 0.0;
                }
                else
                {
                    ++this.frameCounter;
                    if (this.frameCounter > 4.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                    }

                    if (this.frame.Y > num1 * 4 || this.frame.Y == 0)
                        this.frame.Y = num1;
                }
            }
            else if (this.type == 122)
            {
                this.spriteDirection = this.direction;
                this.rotation = this.velocity.X * 0.05f;
                if ((double) this.ai[3] > 0.0)
                {
                    var num3 = (int) ((double) this.ai[3] / 8.0);
                    this.frameCounter = 0.0;
                    this.frame.Y = (num3 + 3) * num1;
                }
                else
                {
                    ++this.frameCounter;
                    if (this.frameCounter >= 8.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y >= num1 * 3)
                        this.frame.Y = 0;
                }
            }
            else if (this.type == 74 || this.type == 297 || (this.type == 298 || this.type == 442))
            {
                this.spriteDirection = this.direction;
                this.rotation = this.velocity.X * 0.1f;
                if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
                {
                    this.frame.Y = num1 * 4;
                    this.frameCounter = 0.0;
                }
                else
                {
                    ++this.frameCounter;
                    if (this.frameCounter >= 4.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
                        this.frame.Y = 0;
                }
            }
            else if (this.type == 362 || this.type == 364)
            {
                this.spriteDirection = this.direction;
                if ((double) this.velocity.X == 0.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = 0;
                }
                else
                {
                    ++this.frameCounter;
                    if (this.frameCounter >= 4.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y >= num1 * 10)
                        this.frame.Y = num1 * 3;
                    if (this.frame.Y < num1 * 3)
                        this.frame.Y = num1 * 3;
                }
            }
            else if (this.type == 363 || this.type == 365)
            {
                this.spriteDirection = this.direction;
                if (this.wet)
                {
                    ++this.frameCounter;
                    if (this.frameCounter >= 8.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y > num1 * 2)
                        this.frame.Y = num1;
                    if (this.frame.Y < num1)
                        this.frame.Y = num1;
                    this.rotation = 0.0f;
                }
                else if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
                {
                    this.frame.Y = num1;
                    this.frameCounter = 0.0;
                    this.rotation = 0.0f;
                }
                else
                {
                    this.rotation = this.velocity.X * 0.1f;
                    ++this.frameCounter;
                    if (this.frameCounter >= 4.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
                        this.frame.Y = num1 * 11;
                    if (this.frame.Y < num1 * 11)
                        this.frame.Y = num1 * 11;
                }
            }
            else if (this.type == 62 || this.type == 66)
            {
                this.spriteDirection = this.direction;
                this.rotation = this.velocity.X * 0.1f;
                ++this.frameCounter;
                if (this.frameCounter < 6.0)
                {
                    this.frame.Y = 0;
                }
                else
                {
                    this.frame.Y = num1;
                    if (this.frameCounter >= 11.0)
                        this.frameCounter = 0.0;
                }
            }
            else if (this.type == 156)
            {
                this.spriteDirection = this.direction;
                this.rotation = this.velocity.X * 0.1f;
                ++this.frameCounter;
                if (this.frameCounter >= 20.0)
                    this.frameCounter = 0.0;
                this.frame.Y = (int) this.frameCounter / 4 * num1;
            }
            else if (this.type == 63 || this.type == 64 || (this.type == 103 || this.type == 242) || this.type == 256)
            {
                if ((this.type == 63 || this.type == 64 || (this.type == 103 || this.type == 242)) &&
                    (double) this.ai[1] == 1.0)
                {
                    ++this.frameCounter;
                    if (this.frameCounter > 4.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                    }

                    if (this.frame.Y > num1 * 6)
                        this.frame.Y = num1 * 4;
                    if (this.frame.Y >= num1 * 4)
                        return;
                    this.frame.Y = num1 * 4;
                    return;
                }

                ++this.frameCounter;
                if (this.frameCounter < 6.0)
                    this.frame.Y = 0;
                else if (this.frameCounter < 12.0)
                    this.frame.Y = num1;
                else if (this.frameCounter < 18.0)
                {
                    this.frame.Y = num1 * 2;
                }
                else
                {
                    this.frame.Y = num1 * 3;
                    if (this.frameCounter >= 23.0)
                        this.frameCounter = 0.0;
                }
            }
            else if (this.type == 221)
            {
                if ((double) this.localAI[2] == 1.0)
                {
                    if ((double) this.localAI[0] == 1.0)
                    {
                        this.frame.Y = 0;
                        this.localAI[0] = 0.0f;
                    }

                    ++this.frameCounter;
                    if (this.frameCounter >= 8.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
                        this.frame.Y = num1 * Main.npcFrameCount[this.type] - num1;
                }
                else
                {
                    ++this.frameCounter;
                    if (this.frameCounter >= 13.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
                        this.frame.Y = 0;
                }
            }
            else if (this.type == 2 || this.type == 23 || (this.type == 121 || this.type == 169) ||
                     (this.type == 190 || this.type == 191 || (this.type == 192 || this.type == 193)) ||
                     (this.type == 194 || this.type == 317 || this.type == 318))
            {
                if (this.type == 2 || this.type == 190 || (this.type == 191 || this.type == 192) ||
                    (this.type == 193 || this.type == 194 || (this.type == 317 || this.type == 318)))
                {
                    if ((double) this.velocity.X > 0.0)
                    {
                        this.spriteDirection = 1;
                        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
                    }

                    if ((double) this.velocity.X < 0.0)
                    {
                        this.spriteDirection = -1;
                        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 3.14f;
                    }
                }
                else if (this.type == 2 || this.type == 121)
                {
                    if ((double) this.velocity.X > 0.0)
                        this.spriteDirection = 1;
                    if ((double) this.velocity.X < 0.0)
                        this.spriteDirection = -1;
                    this.rotation = this.velocity.X * 0.1f;
                }

                ++this.frameCounter;
                if (this.frameCounter >= 8.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
                    this.frame.Y = 0;
            }
            else if (this.type == 133)
            {
                if ((double) this.velocity.X > 0.0)
                {
                    this.spriteDirection = 1;
                    this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
                }

                if ((double) this.velocity.X < 0.0)
                {
                    this.spriteDirection = -1;
                    this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 3.14f;
                }

                ++this.frameCounter;
                this.frame.Y = this.frameCounter < 8.0 ? 0 : num1;
                if (this.frameCounter >= 16.0)
                {
                    this.frame.Y = 0;
                    this.frameCounter = 0.0;
                }

                if ((double) this.life < (double) this.lifeMax * 0.5)
                    this.frame.Y += num1 * 2;
            }
            else if (this.type == 116)
            {
                if ((double) this.velocity.X > 0.0)
                {
                    this.spriteDirection = 1;
                    this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
                }

                if ((double) this.velocity.X < 0.0)
                {
                    this.spriteDirection = -1;
                    this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 3.14f;
                }

                ++this.frameCounter;
                if (this.frameCounter >= 5.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
                    this.frame.Y = 0;
            }
            else if (this.type == 75)
            {
                this.spriteDirection = (double) this.velocity.X <= 0.0 ? -1 : 1;
                this.rotation = this.velocity.X * 0.1f;
                ++this.frameCounter;
                if (this.frameCounter >= 4.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
                    this.frame.Y = 0;
            }
            else if (this.type == 157)
            {
                this.spriteDirection = this.direction;
                ++this.frameCounter;
                if (!this.wet)
                    ++this.frameCounter;
                var num3 = 5;
                if (this.frameCounter < (double) num3)
                    this.frame.Y = 0;
                else if (this.frameCounter < (double) (num3 * 2))
                    this.frame.Y = num1;
                else if (this.frameCounter < (double) (num3 * 3))
                    this.frame.Y = num1 * 2;
                else if (this.frameCounter < (double) (num3 * 4))
                    this.frame.Y = num1;
                else if (this.frameCounter < (double) (num3 * 5))
                    this.frame.Y = num1 * 3;
                else if (this.frameCounter < (double) (num3 * 6))
                    this.frame.Y = num1 * 4;
                else if (this.frameCounter < (double) (num3 * 7))
                    this.frame.Y = num1 * 5;
                else if (this.frameCounter < (double) (num3 * 8))
                    this.frame.Y = num1 * 4;
                else
                    this.frameCounter = 0.0;
            }
            else if (this.type == 55 || this.type == 57 || (this.type == 58 || this.type == 102) ||
                     (this.type == 241 || this.type == 465))
            {
                this.spriteDirection = this.direction;
                ++this.frameCounter;
                if (this.wet)
                {
                    if (this.frameCounter < 6.0)
                        this.frame.Y = 0;
                    else if (this.frameCounter < 12.0)
                        this.frame.Y = num1;
                    else if (this.frameCounter < 18.0)
                        this.frame.Y = num1 * 2;
                    else if (this.frameCounter < 24.0)
                        this.frame.Y = num1 * 3;
                    else
                        this.frameCounter = 0.0;
                }
                else if (this.frameCounter < 6.0)
                    this.frame.Y = num1 * 4;
                else if (this.frameCounter < 12.0)
                    this.frame.Y = num1 * 5;
                else
                    this.frameCounter = 0.0;
            }
            else if (this.type == 69)
            {
                if ((double) this.ai[0] < 190.0)
                {
                    ++this.frameCounter;
                    if (this.frameCounter >= 6.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                        if (this.frame.Y / num1 >= Main.npcFrameCount[this.type] - 1)
                            this.frame.Y = 0;
                    }
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * (Main.npcFrameCount[this.type] - 1);
                }
            }
            else if (this.type == 155)
            {
                if ((double) this.velocity.Y > 0.0)
                {
                    this.frame.Y = num1 * 4;
                    this.frameCounter = 0.0;
                }
                else if ((double) this.velocity.Y < 0.0)
                {
                    this.frame.Y = num1 * 6;
                    this.frameCounter = 0.0;
                }
                else
                {
                    this.spriteDirection = this.direction;
                    this.frameCounter += (double) Math.Abs(this.velocity.X) * 0.400000005960464;
                    if (this.direction > 0 && (double) this.velocity.X < 0.0 ||
                        this.direction < 0 && (double) this.velocity.X > 0.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = 0;
                    }
                    else if (this.frameCounter < 8.0)
                        this.frame.Y = num1 * 3;
                    else if (this.frameCounter < 16.0)
                        this.frame.Y = num1 * 6;
                    else if (this.frameCounter < 24.0)
                        this.frame.Y = num1 * 4;
                    else if (this.frameCounter < 32.0)
                        this.frame.Y = num1 * 5;
                    else
                        this.frameCounter = 0.0;
                }
            }
            else if (this.type == 329)
            {
                if ((double) this.velocity.Y > 0.0)
                {
                    this.frame.Y = num1 * 3;
                    this.frameCounter = 0.0;
                }
                else if ((double) this.velocity.Y < 0.0)
                {
                    this.frame.Y = num1 * 2;
                    this.frameCounter = 0.0;
                }
                else
                {
                    this.spriteDirection = this.direction;
                    this.frameCounter += (double) Math.Abs(this.velocity.X) * 0.400000005960464;
                    if (this.frameCounter > 4.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                        if (this.frame.Y < num1 * 2)
                            this.frame.Y = num1 * 2;
                        if (this.frame.Y > num1 * 9)
                            this.frame.Y = num1 * 2;
                    }
                }
            }
            else if (this.type == 86)
            {
                if ((double) this.velocity.Y == 0.0 || this.wet)
                    this.spriteDirection = (double) this.velocity.X >= -2.0
                        ? ((double) this.velocity.X <= 2.0 ? this.direction : 1)
                        : -1;
                if ((double) this.velocity.Y != 0.0)
                {
                    this.frame.Y = num1 * 15;
                    this.frameCounter = 0.0;
                }
                else if ((double) this.velocity.X == 0.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = 0;
                }
                else if ((double) Math.Abs(this.velocity.X) < 3.0)
                {
                    this.frameCounter += (double) Math.Abs(this.velocity.X);
                    if (this.frameCounter >= 6.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                        if (this.frame.Y / num1 >= 9)
                            this.frame.Y = num1;
                        if (this.frame.Y / num1 <= 0)
                            this.frame.Y = num1;
                    }
                }
                else
                {
                    this.frameCounter += (double) Math.Abs(this.velocity.X);
                    if (this.frameCounter >= 10.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                        if (this.frame.Y / num1 >= 15)
                            this.frame.Y = num1 * 9;
                        if (this.frame.Y / num1 <= 8)
                            this.frame.Y = num1 * 9;
                    }
                }
            }
            else if (this.type == 315)
            {
                if ((double) this.velocity.Y == 0.0 || this.wet)
                    this.spriteDirection = (double) this.velocity.X >= -1.0
                        ? ((double) this.velocity.X <= 1.0 ? this.direction : 1)
                        : -1;
                if ((double) this.velocity.Y != 0.0)
                {
                    this.frame.Y = 0;
                    this.frameCounter = 0.0;
                }
                else
                {
                    this.frameCounter += (double) Math.Abs(this.velocity.X);
                    if (this.frameCounter >= 8.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                        if (this.frame.Y / num1 > 10)
                            this.frame.Y = num1;
                    }
                }
            }
            else if (this.type == (int) sbyte.MaxValue)
            {
                if ((double) this.ai[1] == 0.0)
                {
                    ++this.frameCounter;
                    if (this.frameCounter >= 12.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                        if (this.frame.Y / num1 >= 2)
                            this.frame.Y = 0;
                    }
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * 2;
                }
            }
            else if (this.type == 129)
            {
                if ((double) this.velocity.Y == 0.0)
                    this.spriteDirection = this.direction;
                ++this.frameCounter;
                if (this.frameCounter >= 2.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y += num1;
                    if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                        this.frame.Y = 0;
                }
            }
            else if (this.type == 130)
            {
                if ((double) this.velocity.Y == 0.0)
                    this.spriteDirection = this.direction;
                ++this.frameCounter;
                if (this.frameCounter >= 8.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y += num1;
                    if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                        this.frame.Y = 0;
                }
            }
            else if (this.type == 67 || this.type == 217 || (this.type == 218 || this.type == 219))
            {
                if ((double) this.velocity.Y == 0.0)
                    this.spriteDirection = this.direction;
                ++this.frameCounter;
                if (this.frameCounter >= 6.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y += num1;
                    if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                        this.frame.Y = 0;
                }
            }
            else if (this.type == 220)
            {
                if ((double) this.velocity.Y == 0.0)
                    this.spriteDirection = this.direction;
                ++this.frameCounter;
                if (this.frameCounter >= 10.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y += num1;
                    if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                        this.frame.Y = 0;
                }
            }
            else if (this.type == 109)
            {
                if ((double) this.velocity.Y == 0.0 && ((double) this.velocity.X <= 0.0 && this.direction < 0 ||
                                                        (double) this.velocity.X >= 0.0 && this.direction > 0))
                    this.spriteDirection = this.direction;
                this.frameCounter += (double) Math.Abs(this.velocity.X);
                if (this.frameCounter >= 7.0)
                {
                    this.frameCounter -= 7.0;
                    this.frame.Y += num1;
                    if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                        this.frame.Y = 0;
                }
            }
            else if (this.type == 83 || this.type == 84 || this.type == 179)
            {
                if ((double) this.ai[0] == 2.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = 0;
                }
                else
                {
                    ++this.frameCounter;
                    if (this.frameCounter >= 4.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y += num1;
                        if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                            this.frame.Y = 0;
                    }
                }
            }
            else if (this.type == 72)
            {
                ++this.frameCounter;
                if (this.frameCounter >= 3.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y += num1;
                    if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
                        this.frame.Y = 0;
                }
            }
            else if (this.type == 65)
            {
                this.spriteDirection = this.direction;
                ++this.frameCounter;
                if (this.wet && this.type == 65)
                {
                    if (this.frameCounter < 6.0)
                        this.frame.Y = 0;
                    else if (this.frameCounter < 12.0)
                        this.frame.Y = num1;
                    else if (this.frameCounter < 18.0)
                        this.frame.Y = num1 * 2;
                    else if (this.frameCounter < 24.0)
                        this.frame.Y = num1 * 3;
                    else
                        this.frameCounter = 0.0;
                }
            }
            else if (this.type >= 542 && this.type <= 545)
            {
                this.spriteDirection = this.direction;
                ++this.frameCounter;
                if (this.frameCounter >= 16.0)
                    this.frameCounter = 0.0;
                this.frame.Y = num1 * (int) (this.frameCounter / 4.0);
            }
            else if (this.type == 224)
            {
                if ((double) this.velocity.X > 0.0)
                {
                    this.spriteDirection = 1;
                    this.rotation = this.velocity.Y * 0.2f;
                }

                if ((double) this.velocity.X < 0.0)
                {
                    this.spriteDirection = -1;
                    this.rotation = (float) (-(double) this.velocity.Y * 0.200000002980232);
                }

                ++this.frameCounter;
                if (this.frameCounter >= 6.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y >= num1 * 4)
                    this.frame.Y = 0;
            }
            else if (this.type == 150 || this.type == 151 || (this.type == 152 || this.type == 158) || this.type == 226)
            {
                if ((double) this.velocity.X > 0.0)
                    this.spriteDirection = 1;
                if ((double) this.velocity.X < 0.0)
                    this.spriteDirection = -1;
                this.rotation = this.velocity.X * 0.1f;
                ++this.frameCounter;
                if (this.frameCounter >= 6.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y >= num1 * 4)
                    this.frame.Y = 0;
            }
            else if (this.type == 48 || this.type == 49 || (this.type == 51 || this.type == 60) ||
                     (this.type == 82 || this.type == 93 || (this.type == 137 || this.type == 182)) ||
                     (this.type == 210 || this.type == 211 || (this.type == 253 || this.type == 316)))
            {
                if ((double) this.velocity.X > 0.0)
                    this.spriteDirection = 1;
                if ((double) this.velocity.X < 0.0)
                    this.spriteDirection = -1;
                this.rotation = this.velocity.X * 0.1f;
                if (this.type == 210 || this.type == 211)
                {
                    ++this.frameCounter;
                    this.rotation = this.velocity.X * 0.2f;
                }

                ++this.frameCounter;
                if (this.frameCounter >= 6.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
                    this.frame.Y = 0;
            }
            else if (this.type == 330)
            {
                if ((double) this.velocity.X > 0.0)
                    this.spriteDirection = 1;
                if ((double) this.velocity.X < 0.0)
                    this.spriteDirection = -1;
                this.rotation = this.velocity.X * 0.15f;
                ++this.frameCounter;
                if (this.frameCounter >= 8.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
                    this.frame.Y = 0;
            }
            else if (this.type == 42 || this.type >= 231 && this.type <= 235)
            {
                ++this.frameCounter;
                if (this.frameCounter < 2.0)
                    this.frame.Y = 0;
                else if (this.frameCounter < 4.0)
                    this.frame.Y = num1;
                else if (this.frameCounter < 6.0)
                    this.frame.Y = num1 * 2;
                else if (this.frameCounter < 8.0)
                    this.frame.Y = num1;
                else
                    this.frameCounter = 0.0;
            }
            else if (this.type == 205)
            {
                this.frameCounter += 0.5;
                if (this.frameCounter < 2.0)
                    this.frame.Y = 0;
                else if (this.frameCounter < 4.0)
                    this.frame.Y = num1;
                else if (this.frameCounter < 6.0)
                    this.frame.Y = num1 * 2;
                else if (this.frameCounter < 8.0)
                    this.frame.Y = num1;
                else
                    this.frameCounter = 0.0;
            }
            else if (this.type == 176)
            {
                ++this.frameCounter;
                if (this.frameCounter > 4.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y > num1)
                    this.frame.Y = 0;
            }
            else if (this.type == 43 || this.type == 56 || this.type == 175)
            {
                ++this.frameCounter;
                if (this.frameCounter < 6.0)
                    this.frame.Y = 0;
                else if (this.frameCounter < 12.0)
                    this.frame.Y = num1;
                else if (this.frameCounter < 18.0)
                    this.frame.Y = num1 * 2;
                else if (this.frameCounter < 24.0)
                    this.frame.Y = num1;
                if (this.frameCounter == 23.0)
                    this.frameCounter = 0.0;
            }
            else if (this.type == 115)
            {
                ++this.frameCounter;
                if (this.frameCounter < 3.0)
                    this.frame.Y = 0;
                else if (this.frameCounter < 6.0)
                    this.frame.Y = num1;
                else if (this.frameCounter < 12.0)
                    this.frame.Y = num1 * 2;
                else if (this.frameCounter < 15.0)
                    this.frame.Y = num1;
                if (this.frameCounter == 15.0)
                    this.frameCounter = 0.0;
            }
            else if (this.type == 101)
            {
                ++this.frameCounter;
                if (this.frameCounter > 6.0)
                {
                    this.frame.Y += num1 * 2;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y > num1 * 2)
                    this.frame.Y = 0;
            }

            if (this.type == 199)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                }

                if (this.frame.Y < num1 * 3)
                {
                    ++this.frameCounter;
                    if (this.frameCounter <= 6.0)
                        return;
                    this.frameCounter = 0.0;
                    this.frame.Y += num1;
                }
                else
                {
                    if ((double) this.velocity.Y != 0.0)
                        return;
                    this.frameCounter += (double) Math.Abs(this.velocity.X);
                    if (this.frameCounter <= 12.0)
                        return;
                    this.frameCounter = 0.0;
                    this.frame.Y += num1;
                    if (this.frame.Y <= num1 * 7)
                        return;
                    this.frame.Y = num1 * 3;
                }
            }
            else if (this.type == 467)
            {
                if ((double) this.ai[0] == 1.0)
                {
                    ++this.frameCounter;
                    if (this.frameCounter <= 4.0)
                        return;
                    this.frameCounter = 0.0;
                    if (this.frame.Y >= num1 * 6)
                        return;
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }
                else
                {
                    ++this.frameCounter;
                    if (this.frameCounter <= 4.0)
                        return;
                    this.frameCounter = 0.0;
                    if (this.frame.Y > num1 * 3)
                        this.frame.Y = num1 * 3;
                    if (this.frame.Y <= 0)
                        return;
                    this.frame.Y -= num1;
                    this.frameCounter = 0.0;
                }
            }
            else if (this.type == 480)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.ai[2] < 0.0)
                    {
                        ++this.frameCounter;
                        if (this.frameCounter > 3.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y >= Main.npcFrameCount[this.type] * num1)
                        {
                            this.frame.Y = num1 * 21;
                        }
                        else
                        {
                            if (this.frame.Y >= num1 * 21)
                                return;
                            this.frame.Y = num1 * 21;
                        }
                    }
                    else if ((double) this.velocity.X == 0.0)
                    {
                        ++this.frameCounter;
                        if (this.frameCounter > 4.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 <= 7)
                            return;
                        this.frame.Y = 0;
                    }
                    else
                    {
                        this.frameCounter += 1.0 + (double) Math.Abs(this.velocity.X);
                        if (this.frameCounter > 6.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 >= Main.npcFrameCount[this.type] - 4)
                        {
                            this.frame.Y = num1 * 10;
                        }
                        else
                        {
                            if (this.frame.Y / num1 >= 10)
                                return;
                            this.frame.Y = num1 * 10;
                        }
                    }
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * 8;
                }
            }
            else if (this.type == 483)
            {
                if ((double) this.ai[0] == -1.0)
                {
                    ++this.frameCounter;
                    if (this.frameCounter > 4.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y > num1 * 21)
                        this.frame.Y = num1 * 21;
                    else if (this.frame.Y < num1 * 13)
                        this.frame.Y = num1 * 13;
                    this.rotation += this.velocity.X * 0.2f;
                }
                else
                {
                    ++this.frameCounter;
                    if (this.frameCounter > 4.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y > num1 * 11)
                        this.frame.Y = 0;
                    this.rotation = this.velocity.X * 0.1f;
                }
            }
            else if (this.type == 482)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.ai[2] < 0.0)
                    {
                        ++this.frameCounter;
                        if (this.frameCounter > 3.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y >= Main.npcFrameCount[this.type] * num1)
                        {
                            this.frame.Y = num1 * 11;
                        }
                        else
                        {
                            if (this.frame.Y >= num1 * 11)
                                return;
                            this.frame.Y = num1 * 11;
                        }
                    }
                    else if ((double) this.velocity.X == 0.0)
                    {
                        ++this.frameCounter;
                        this.frame.Y = 0;
                    }
                    else
                    {
                        this.frameCounter += 0.200000002980232 + (double) Math.Abs(this.velocity.X);
                        if (this.frameCounter > 8.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 >= Main.npcFrameCount[this.type] - 10)
                        {
                            this.frame.Y = num1 * 2;
                        }
                        else
                        {
                            if (this.frame.Y / num1 >= 2)
                                return;
                            this.frame.Y = num1 * 2;
                        }
                    }
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1;
                }
            }
            else if (this.type == 461)
            {
                if (this.wet)
                {
                    if ((double) this.velocity.X < 0.0)
                        this.direction = -1;
                    if ((double) this.velocity.X > 0.0)
                        this.direction = 1;
                    if (this.spriteDirection != this.direction)
                    {
                        this.rotation *= -1f;
                        this.spriteDirection = this.direction;
                    }

                    var num3 = (float) Math.Atan2((double) this.velocity.Y * (double) this.direction,
                        (double) this.velocity.X * (double) this.direction);
                    if ((double) Math.Abs(this.rotation - num3) >= 3.14)
                    {
                        if ((double) num3 < (double) this.rotation)
                            this.rotation -= 6.28f;
                        else
                            this.rotation += 6.28f;
                    }

                    this.rotation = (float) (((double) this.rotation * 4.0 + (double) num3) / 5.0);
                    this.frameCounter += (double) Math.Abs(this.velocity.Length());
                    ++this.frameCounter;
                    if (this.frameCounter > 8.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y / num1 > 20)
                    {
                        this.frame.Y = num1 * 16;
                    }
                    else
                    {
                        if (this.frame.Y / num1 >= 16)
                            return;
                        this.frame.Y = num1 * 19;
                    }
                }
                else
                {
                    if ((double) this.rotation > 3.14)
                        this.rotation -= 6.28f;
                    if ((double) this.rotation > -0.01 && (double) this.rotation < 0.01)
                        this.rotation = 0.0f;
                    else
                        this.rotation *= 0.9f;
                    if ((double) this.velocity.Y == 0.0)
                    {
                        if (this.direction == 1)
                            this.spriteDirection = 1;
                        if (this.direction == -1)
                            this.spriteDirection = -1;
                        if ((double) this.velocity.X == 0.0)
                        {
                            this.frame.Y = 0;
                            this.frameCounter = 0.0;
                        }
                        else
                        {
                            this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
                            ++this.frameCounter;
                            if (this.frameCounter > 6.0)
                            {
                                this.frame.Y += num1;
                                this.frameCounter = 0.0;
                            }

                            if (this.frame.Y / num1 <= 15)
                                return;
                            this.frame.Y = num1 * 2;
                        }
                    }
                    else
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = num1;
                    }
                }
            }
            else if (this.type == 466)
            {
                if ((double) this.ai[2] <= 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.ai[2] == 0.0)
                        this.frame.Y = 0;
                    else if ((double) this.ai[2] < -8.0)
                        this.frame.Y = num1;
                    else
                        this.frame.Y = num1 * 2;
                }
                else if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = num1 * 2;
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
                        ++this.frameCounter;
                        if (this.frameCounter > 7.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 > 17)
                            this.frame.Y = num1 * 4;
                        if (this.frame.Y / num1 >= 4)
                            return;
                        this.frame.Y = num1 * 4;
                    }
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * 3;
                }
            }
            else if (this.type == 471)
            {
                var flag = false;
                if ((double) this.ai[3] < 0.0)
                    flag = true;
                if (flag)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    this.frameCounter += (double) Math.Abs(this.velocity.Length()) * 0.5;
                    ++this.frameCounter;
                    if (this.frameCounter < 6.0)
                        this.frame.Y = num1 * 17;
                    else if (this.frameCounter < 12.0)
                        this.frame.Y = num1 * 18;
                    else if (this.frameCounter < 18.0)
                        this.frame.Y = num1 * 19;
                    else if (this.frameCounter < 23.0)
                    {
                        this.frame.Y = num1 * 18;
                    }
                    else
                    {
                        this.frame.Y = num1 * 18;
                        this.frameCounter = 0.0;
                    }
                }
                else if ((double) this.ai[3] == 1.0)
                {
                    this.frame.Y = num1 * 16;
                    this.frameCounter = 0.0;
                }
                else if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = 0;
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
                        ++this.frameCounter;
                        if (this.frameCounter > 7.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 > 15)
                            this.frame.Y = num1 * 2;
                        if (this.frame.Y / num1 >= 2)
                            return;
                        this.frame.Y = num1 * 2;
                    }
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1;
                }
            }
            else if (this.type == 166)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.velocity.X == 0.0)
                    {
                        this.frameCounter += 2.0;
                        if (this.frameCounter > 7.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 <= 5)
                            return;
                        this.frame.Y = 0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X);
                        ++this.frameCounter;
                        if (this.frameCounter > 9.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 > 12)
                            this.frame.Y = num1 * 7;
                        if (this.frame.Y / num1 >= 7)
                            return;
                        this.frame.Y = num1 * 7;
                    }
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * 6;
                }
            }
            else if (this.type == 469)
            {
                if ((double) this.ai[2] == 1.0)
                {
                    this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
                    if ((double) this.velocity.X < 0.0)
                        this.direction = -1;
                    if ((double) this.velocity.X > 0.0)
                        this.direction = 1;
                    this.spriteDirection = this.direction;
                    this.frameCounter += (double) Math.Abs(this.velocity.Length());
                    if (this.frameCounter > 11.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y / num1 > 5)
                        this.frame.Y = num1 * 2;
                    if (this.frame.Y / num1 >= 2)
                        return;
                    this.frame.Y = num1 * 2;
                }
                else
                {
                    this.rotation = 0.0f;
                    if ((double) this.velocity.Y == 0.0)
                    {
                        if (this.direction == 1)
                            this.spriteDirection = 1;
                        if (this.direction == -1)
                            this.spriteDirection = -1;
                        if ((double) this.velocity.X == 0.0)
                        {
                            this.frameCounter = 0.0;
                            this.frame.Y = 0;
                        }
                        else
                        {
                            this.frameCounter += (double) Math.Abs(this.velocity.X);
                            ++this.frameCounter;
                            if (this.frameCounter > 9.0)
                            {
                                this.frame.Y += num1;
                                this.frameCounter = 0.0;
                            }

                            if (this.frame.Y / num1 > 11)
                                this.frame.Y = num1 * 6;
                            if (this.frame.Y / num1 >= 6)
                                return;
                            this.frame.Y = num1 * 6;
                        }
                    }
                    else
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = num1;
                    }
                }
            }
            else if (this.type == 351)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = 0;
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
                        ++this.frameCounter;
                        if (this.frameCounter > 8.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 < Main.npcFrameCount[this.type])
                            return;
                        this.frame.Y = num1 * 2;
                    }
                }
                else
                {
                    this.frame.Y = (double) this.velocity.Y >= 0.0 ? num1 : num1;
                    this.frameCounter = 0.0;
                }
            }
            else if (this.type == 343)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = num1 * 2;
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
                        ++this.frameCounter;
                        if (this.frameCounter > 6.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 < Main.npcFrameCount[this.type])
                            return;
                        this.frame.Y = num1 * 2;
                    }
                }
                else
                {
                    this.frame.Y = (double) this.velocity.Y >= 0.0 ? num1 : 0;
                    this.frameCounter = 0.0;
                }
            }
            else if (this.type >= 269 && this.type <= 280)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.velocity.X == 0.0)
                    {
                        if (this.type == 140)
                        {
                            this.frame.Y = num1;
                            this.frameCounter = 0.0;
                        }
                        else
                        {
                            this.frame.Y = 0;
                            this.frameCounter = 0.0;
                        }
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
                        ++this.frameCounter;
                        if (this.frameCounter > 6.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 < Main.npcFrameCount[this.type])
                            return;
                        this.frame.Y = num1 * 2;
                    }
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = 0;
                }
            }
            else if (this.type == 230)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    this.rotation = 0.0f;
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = 0;
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
                        ++this.frameCounter;
                        if (this.frameCounter > 10.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 < Main.npcFrameCount[this.type])
                            return;
                        this.frame.Y = 0;
                    }
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = 0;
                    if ((double) this.velocity.Y <= 4.0)
                        return;
                    this.rotation -= this.velocity.Y * 0.01f;
                }
            }
            else if (this.type == 290)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.ai[2] > 0.0)
                    {
                        if ((double) this.ai[1] < 10.0)
                            this.frame.Y = num1 * 11;
                        else if ((double) this.ai[1] < 20.0)
                            this.frame.Y = num1 * 10;
                        else
                            this.frame.Y = num1 * 9;
                    }
                    else if ((double) this.velocity.X == 0.0)
                    {
                        this.frameCounter = 0.0;
                        this.frame.Y = 0;
                    }
                    else
                    {
                        if (this.frame.Y < num1 * 2)
                            this.frame.Y = num1 * 2;
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
                        if (this.frameCounter > 6.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y <= num1 * 8)
                            return;
                        this.frame.Y = num1 * 2;
                    }
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1;
                }
            }
            else if (this.type == 110 || this.type == 214 || (this.type == 215 || this.type == 216) ||
                     (this.type == 291 || this.type == 292 || this.type == 293))
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.ai[2] > 0.0)
                    {
                        this.spriteDirection = this.direction;
                        this.frame.Y = num1 * (int) this.ai[2];
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        if (this.frame.Y < num1 * 6)
                            this.frame.Y = num1 * 6;
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
                        this.frameCounter += (double) this.velocity.X;
                        if (this.frameCounter > 6.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 < Main.npcFrameCount[this.type])
                            return;
                        this.frame.Y = num1 * 6;
                    }
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = 0;
                }
            }
            else if (this.type == 206)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.ai[2] > 0.0)
                    {
                        this.spriteDirection = this.direction;
                        this.frame.Y = num1 * (int) this.ai[2];
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        if (this.frame.Y < num1 * 6)
                            this.frame.Y = num1 * 6;
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
                        this.frameCounter += (double) this.velocity.X;
                        if (this.frameCounter > 6.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 < Main.npcFrameCount[this.type])
                            return;
                        this.frame.Y = num1 * 6;
                    }
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = 0;
                }
            }
            else if (this.type == 350)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.ai[2] > 0.0)
                    {
                        this.spriteDirection = this.direction;
                        this.frame.Y = num1 * ((int) this.ai[2] - 1);
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        if (this.frame.Y < num1 * 7)
                            this.frame.Y = num1 * 7;
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
                        this.frameCounter += (double) this.velocity.X * 1.29999995231628;
                        if (this.frameCounter > 4.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 < Main.npcFrameCount[this.type])
                            return;
                        this.frame.Y = num1 * 7;
                    }
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * 5;
                }
            }
            else if (this.type == 111)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.ai[2] > 0.0)
                    {
                        this.spriteDirection = this.direction;
                        this.frame.Y = num1 * ((int) this.ai[2] - 1);
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        if (this.frame.Y < num1 * 7)
                            this.frame.Y = num1 * 7;
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
                        this.frameCounter += (double) this.velocity.X * 1.29999995231628;
                        if (this.frameCounter > 6.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 < Main.npcFrameCount[this.type])
                            return;
                        this.frame.Y = num1 * 7;
                    }
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * 6;
                }
            }
            else if (this.type == 257)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                }

                if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 ||
                    this.direction == 1 && (double) this.velocity.X < 0.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * 4;
                }
                else if ((double) this.velocity.X == 0.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = 0;
                }
                else
                {
                    this.frameCounter += (double) Math.Abs(this.velocity.X);
                    if (this.frameCounter < 8.0)
                        this.frame.Y = 0;
                    else if (this.frameCounter < 16.0)
                        this.frame.Y = num1;
                    else if (this.frameCounter < 24.0)
                        this.frame.Y = num1 * 2;
                    else if (this.frameCounter < 32.0)
                        this.frame.Y = num1 * 3;
                    else
                        this.frameCounter = 0.0;
                }
            }
            else if (this.type == 258)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                }

                if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 ||
                    this.direction == 1 && (double) this.velocity.X < 0.0)
                {
                    ++this.frameCounter;
                    if (this.frameCounter > 1.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y <= num1 * 5 && this.frame.Y >= num1 * 3)
                        return;
                    this.frame.Y = num1 * 3;
                }
                else if ((double) this.velocity.X == 0.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = 0;
                }
                else
                {
                    this.frameCounter += (double) Math.Abs(this.velocity.X);
                    if (this.frameCounter < 8.0)
                        this.frame.Y = 0;
                    else if (this.frameCounter < 16.0)
                        this.frame.Y = num1;
                    else if (this.frameCounter < 24.0)
                        this.frame.Y = num1 * 2;
                    else
                        this.frameCounter = 0.0;
                }
            }
            else if (this.type == 348)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                }

                if ((double) this.velocity.Y != 0.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * 8;
                }
                else if ((double) this.velocity.X == 0.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = 0;
                }
                else
                {
                    this.frameCounter += (double) Math.Abs(this.velocity.X);
                    ++this.frameCounter;
                    if (this.frameCounter > 6.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y <= num1 * 7)
                        return;
                    this.frame.Y = num1;
                }
            }
            else if (this.type == 349)
            {
                ++this.frameCounter;
                if (this.frameCounter > 3.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y <= num1 * 7)
                    return;
                this.frame.Y = 0;
            }
            else if (this.type == 3 || this.type == 342 || (this.type == 331 || this.type == 332) ||
                     (this.type == 52 || this.type == 53 || (this.type == 536 || this.type == 132)) ||
                     (this.type == 161 || this.type == 162 || (this.type == 186 || this.type == 187) ||
                      (this.type == 188 || this.type == 189 || (this.type == 200 || this.type == 223))) ||
                     (this.type == 251 || this.type == 254 || this.type == (int) byte.MaxValue ||
                      this.type >= 319 && this.type <= 321))
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                }

                if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 ||
                    this.direction == 1 && (double) this.velocity.X < 0.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * 2;
                }
                else if ((double) this.velocity.X == 0.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = 0;
                }
                else
                {
                    this.frameCounter += (double) Math.Abs(this.velocity.X);
                    if (this.frameCounter < 8.0)
                        this.frame.Y = 0;
                    else if (this.frameCounter < 16.0)
                        this.frame.Y = num1;
                    else if (this.frameCounter < 24.0)
                        this.frame.Y = num1 * 2;
                    else if (this.frameCounter < 32.0)
                        this.frame.Y = num1;
                    else
                        this.frameCounter = 0.0;
                }
            }
            else if (this.type == 148 || this.type == 149 || (this.type == 168 || this.type == 470))
            {
                var num3 = 0;
                if ((double) this.localAI[0] == 2.0)
                    num3 = 3;
                if ((double) this.localAI[0] == 3.0)
                    num3 = 6;
                if ((double) this.localAI[0] == 4.0)
                    num3 = 9;
                var num4 = num3 * num1;
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = num4;
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
                        if (this.frameCounter < 6.0)
                            this.frame.Y = num4;
                        else if (this.frameCounter < 12.0)
                            this.frame.Y = num1 + num4;
                        else if (this.frameCounter < 15.0)
                        {
                            this.frame.Y = num1 * 2 + num4;
                        }
                        else
                        {
                            this.frameCounter = 0.0;
                            this.frame.Y = num1 * 2 + num4;
                        }
                    }
                }
                else if ((double) this.velocity.Y < 0.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * 2 + num4;
                }
                else
                {
                    if ((double) this.velocity.Y <= 0.0)
                        return;
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * 2 + num4;
                }
            }
            else if (this.type == 299 || this.type == 538 || this.type == 539)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = 0;
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 0.5;
                        ++this.frameCounter;
                        if (this.frameCounter > 6.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 < Main.npcFrameCount[this.type] - 1)
                            return;
                        this.frame.Y = num1;
                    }
                }
                else if ((double) this.velocity.Y < 0.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * 2;
                }
                else
                {
                    if ((double) this.velocity.Y <= 0.0)
                        return;
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * 4;
                }
            }
            else if (this.type == 300 || this.type == 447)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.velocity.X == 0.0)
                    {
                        ++this.frameCounter;
                        if (this.frameCounter > 8.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 <= 1)
                            return;
                        this.frame.Y = 0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 0.5;
                        ++this.frameCounter;
                        if (this.frameCounter > 6.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 < Main.npcFrameCount[this.type])
                            return;
                        this.frame.Y = num1 * 2;
                    }
                }
                else
                {
                    this.frameCounter += (double) Math.Abs(this.velocity.X) * 0.5;
                    ++this.frameCounter;
                    if (this.frameCounter > 6.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y / num1 < Main.npcFrameCount[this.type])
                        return;
                    this.frame.Y = num1 * 2;
                }
            }
            else if (this.type == 361 || this.type == 445)
            {
                this.spriteDirection = this.direction;
                if ((double) this.velocity.Y == 0.0)
                {
                    if ((double) this.velocity.X == 0.0)
                    {
                        ++this.frameCounter;
                        if (this.frameCounter > 6.0)
                        {
                            this.frameCounter = 0.0;
                            this.frame.Y += num1;
                        }

                        if (this.frame.Y <= num1 * 5)
                            return;
                        this.frame.Y = 0;
                    }
                    else
                    {
                        ++this.frameCounter;
                        var num3 = 6;
                        if (this.frameCounter < (double) num3)
                            this.frame.Y = 0;
                        else if (this.frameCounter < (double) (num3 * 2))
                            this.frame.Y = num1 * 6;
                        else if (this.frameCounter < (double) (num3 * 3))
                        {
                            this.frame.Y = num1 * 8;
                        }
                        else
                        {
                            this.frame.Y = num1 * 9;
                            if (this.frameCounter < (double) (num3 * 4 - 1))
                                return;
                            this.frameCounter = 0.0;
                        }
                    }
                }
                else if ((double) this.velocity.Y > 0.0)
                    this.frame.Y = num1 * 9;
                else
                    this.frame.Y = num1 * 8;
            }
            else if (this.type == 366 || this.type == 367)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                }

                if ((double) this.velocity.X == 0.0)
                {
                    this.frame.Y = 0;
                    this.frameCounter = 0.0;
                }
                else
                {
                    this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
                    ++this.frameCounter;
                    if (this.frameCounter > 6.0)
                    {
                        this.frame.Y += num1;
                        this.frameCounter = 0.0;
                    }

                    if (this.frame.Y / num1 < Main.npcFrameCount[this.type])
                        return;
                    this.frame.Y = 0;
                }
            }
            else if (this.type == 46 || this.type == 47 || (this.type == 303 || this.type == 337) ||
                     (this.type == 443 || this.type == 464 || this.type == 540))
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                    if ((double) this.velocity.X == 0.0)
                    {
                        this.frame.Y = 0;
                        this.frameCounter = 0.0;
                    }
                    else
                    {
                        this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
                        ++this.frameCounter;
                        if (this.frameCounter > 6.0)
                        {
                            this.frame.Y += num1;
                            this.frameCounter = 0.0;
                        }

                        if (this.frame.Y / num1 < Main.npcFrameCount[this.type])
                            return;
                        this.frame.Y = 0;
                    }
                }
                else if ((double) this.velocity.Y < 0.0)
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * 4;
                }
                else
                {
                    if ((double) this.velocity.Y <= 0.0)
                        return;
                    this.frameCounter = 0.0;
                    this.frame.Y = num1 * 6;
                }
            }
            else if (this.type == 4 || this.type == 125 || this.type == 126)
            {
                ++this.frameCounter;
                if (this.frameCounter < 7.0)
                    this.frame.Y = 0;
                else if (this.frameCounter < 14.0)
                    this.frame.Y = num1;
                else if (this.frameCounter < 21.0)
                {
                    this.frame.Y = num1 * 2;
                }
                else
                {
                    this.frameCounter = 0.0;
                    this.frame.Y = 0;
                }

                if ((double) this.ai[0] <= 1.0)
                    return;
                this.frame.Y += num1 * 3;
            }
            else if (this.type == 5)
            {
                ++this.frameCounter;
                if (this.frameCounter >= 8.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y < num1 * Main.npcFrameCount[this.type])
                    return;
                this.frame.Y = 0;
            }
            else if (this.type == 94)
            {
                ++this.frameCounter;
                if (this.frameCounter < 6.0)
                    this.frame.Y = 0;
                else if (this.frameCounter < 12.0)
                    this.frame.Y = num1;
                else if (this.frameCounter < 18.0)
                {
                    this.frame.Y = num1 * 2;
                }
                else
                {
                    this.frame.Y = num1;
                    if (this.frameCounter < 23.0)
                        return;
                    this.frameCounter = 0.0;
                }
            }
            else if (this.type == 6 || this.type == 173)
            {
                ++this.frameCounter;
                if (this.frameCounter >= 8.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y < num1 * Main.npcFrameCount[this.type])
                    return;
                this.frame.Y = 0;
            }
            else if (this.type == 24)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                }

                if ((double) this.ai[1] > 0.0)
                {
                    if (this.frame.Y < 4)
                        this.frameCounter = 0.0;
                    ++this.frameCounter;
                    if (this.frameCounter <= 4.0)
                        this.frame.Y = num1 * 4;
                    else if (this.frameCounter <= 8.0)
                        this.frame.Y = num1 * 5;
                    else if (this.frameCounter <= 12.0)
                        this.frame.Y = num1 * 6;
                    else if (this.frameCounter <= 16.0)
                        this.frame.Y = num1 * 7;
                    else if (this.frameCounter <= 20.0)
                    {
                        this.frame.Y = num1 * 8;
                    }
                    else
                    {
                        this.frame.Y = num1 * 9;
                        this.frameCounter = 100.0;
                    }
                }
                else
                {
                    ++this.frameCounter;
                    if (this.frameCounter <= 4.0)
                        this.frame.Y = 0;
                    else if (this.frameCounter <= 8.0)
                        this.frame.Y = num1;
                    else if (this.frameCounter <= 12.0)
                    {
                        this.frame.Y = num1 * 2;
                    }
                    else
                    {
                        this.frame.Y = num1 * 3;
                        if (this.frameCounter < 16.0)
                            return;
                        this.frameCounter = 0.0;
                    }
                }
            }
            else if (this.type == 29 || this.type == 32 || (this.type == 45 || this.type == 172) ||
                     this.type >= 281 && this.type <= 286)
            {
                if ((double) this.velocity.Y == 0.0)
                {
                    if (this.direction == 1)
                        this.spriteDirection = 1;
                    if (this.direction == -1)
                        this.spriteDirection = -1;
                }

                this.frame.Y = 0;
                if ((double) this.velocity.Y != 0.0)
                {
                    this.frame.Y += num1;
                }
                else
                {
                    if ((double) this.ai[1] <= 0.0)
                        return;
                    this.frame.Y += num1 * 2;
                }
            }
            else
            {
                if (this.type != 34)
                    return;
                ++this.frameCounter;
                if (this.frameCounter >= 4.0)
                {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                }

                if (this.frame.Y < num1 * Main.npcFrameCount[this.type])
                    return;
                this.frame.Y = 0;
            }
        }

        public void SimpleFlyMovement(Vector2 desiredVelocity, float moveSpeed)
        {
            if ((double) this.velocity.X < (double) desiredVelocity.X)
            {
                this.velocity.X += moveSpeed;
                if ((double) this.velocity.X < 0.0 && (double) desiredVelocity.X > 0.0)
                    this.velocity.X += moveSpeed;
            }
            else if ((double) this.velocity.X > (double) desiredVelocity.X)
            {
                this.velocity.X -= moveSpeed;
                if ((double) this.velocity.X > 0.0 && (double) desiredVelocity.X < 0.0)
                    this.velocity.X -= moveSpeed;
            }

            if ((double) this.velocity.Y < (double) desiredVelocity.Y)
            {
                this.velocity.Y += moveSpeed;
                if ((double) this.velocity.Y >= 0.0 || (double) desiredVelocity.Y <= 0.0)
                    return;
                this.velocity.Y += moveSpeed;
            }
            else
            {
                if ((double) this.velocity.Y <= (double) desiredVelocity.Y)
                    return;
                this.velocity.Y -= moveSpeed;
                if ((double) this.velocity.Y <= 0.0 || (double) desiredVelocity.Y >= 0.0)
                    return;
                this.velocity.Y -= moveSpeed;
            }
        }

        public void HealEffect(int healAmount, bool broadcast = true)
        {
            var index = CombatText.NewText(
                new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width,
                    this.height), CombatText.HealLife, healAmount, false, false);
            if (!broadcast || Main.netMode != 2 || index == 100)
                return;
            var combatText = Main.combatText[index];
            NetMessage.SendData(81, -1, -1, (NetworkText) null, (int) combatText.color.PackedValue,
                combatText.position.X, combatText.position.Y, (float) healAmount, 0, 0, 0);
        }

        public static void HealEffect(Microsoft.Xna.Framework.Rectangle r, int healAmount, bool broadcast = true)
        {
            var index = CombatText.NewText(r, CombatText.HealLife, healAmount, false, false);
            if (!broadcast || Main.netMode != 2 || index == 100)
                return;
            var combatText = Main.combatText[index];
            NetMessage.SendData(81, -1, -1, (NetworkText) null, (int) combatText.color.PackedValue,
                combatText.position.X, combatText.position.Y, (float) healAmount, 0, 0, 0);
        }

        public int FindClosestPlayer()
        {
            float distanceToPlayer;
            return this.FindClosestPlayer(out distanceToPlayer);
        }

        public int FindClosestPlayer(out float distanceToPlayer)
        {
            var center = this.Center;
            var num1 = float.MaxValue;
            var num2 = -1;
            for (var index = 0; index < (int) byte.MaxValue; ++index)
            {
                var player = Main.player[index];
                if (player.active && !player.dead && !player.ghost)
                {
                    var num3 = Vector2.DistanceSquared(center, player.Center);
                    if ((double) num3 < (double) num1)
                    {
                        num1 = num3;
                        num2 = index;
                    }
                }
            }

            if (num2 < 0)
            {
                for (var index = 0; index < (int) byte.MaxValue; ++index)
                {
                    var player = Main.player[index];
                    if (player.active)
                    {
                        var num3 = Vector2.DistanceSquared(center, player.Center);
                        if ((double) num3 < (double) num1)
                        {
                            num1 = num3;
                            num2 = index;
                        }
                    }
                }
            }

            distanceToPlayer = (float) Math.Sqrt((double) num1);
            return num2;
        }

        public void BigMimicSpawnSmoke()
        {
            if (Main.netMode == 2)
            {
                NetMessage.SendData(51, -1, -1, (NetworkText) null, this.whoAmI, 4f, 0.0f, 0.0f, 0, 0, 0);
            }
            else
            {
                for (var index1 = 0; index1 < 20; ++index1)
                {
                    var index2 = Dust.NewDust(this.position, this.width, this.height, 54, 0.0f, 0.0f, 50, new Color(),
                        1.5f);
                    Main.dust[index2].velocity *= 2f;
                    Main.dust[index2].noGravity = true;
                }

                for (var index1 = 0; index1 < 3; ++index1)
                {
                    for (var index2 = 0; index2 < 2; ++index2)
                    {
                        var index3 = Gore.NewGore(
                            new Vector2(
                                (float) ((double) this.position.X + (double) (this.width * index1) * 0.449999988079071 -
                                         20.0),
                                (float) ((double) this.position.Y + (double) (this.height * index2) * 0.5 + 10.0)),
                            new Vector2(0.0f, 0.0f), 99, 1.1f);
                        Main.gore[index3].velocity *= 0.3f;
                    }
                }
            }
        }

        public static bool BigMimicSummonCheck(int x, int y)
        {
            if (Main.netMode == 1 || !Main.hardMode)
                return false;
            var chest1 = Chest.FindChest(x, y);
            if (chest1 < 0)
                return false;
            var num1 = 0;
            var num2 = 0;
            var num3 = 0;
            for (var index = 0; index < 40; ++index)
            {
                var type = Main.tile[Main.chest[chest1].x, Main.chest[chest1].y].type;
                var num4 = (int) Main.tile[Main.chest[chest1].x, Main.chest[chest1].y].frameX / 36;
                if (TileID.Sets.BasicChest[(int) type] && (type != (ushort) 21 || num4 < 5 || num4 > 6) &&
                    (Main.chest[chest1].item[index] != null && Main.chest[chest1].item[index].type > 0))
                {
                    if (Main.chest[chest1].item[index].type == 3092)
                        num1 += Main.chest[chest1].item[index].stack;
                    else if (Main.chest[chest1].item[index].type == 3091)
                        num2 += Main.chest[chest1].item[index].stack;
                    else
                        ++num3;
                }
            }

            if (num3 == 0 && num1 + num2 == 1)
            {
                if (num1 != 1)
                    ;
                if (TileID.Sets.BasicChest[(int) Main.tile[x, y].type])
                {
                    if ((int) Main.tile[x, y].frameX % 36 != 0)
                        --x;
                    if ((int) Main.tile[x, y].frameY % 36 != 0)
                        --y;
                    var chest2 = Chest.FindChest(x, y);
                    for (var index1 = x; index1 <= x + 1; ++index1)
                    {
                        for (var index2 = y; index2 <= y + 1; ++index2)
                        {
                            if (TileID.Sets.BasicChest[(int) Main.tile[index1, index2].type])
                                Main.tile[index1, index2].active(false);
                        }
                    }

                    for (var index = 0; index < 40; ++index)
                        Main.chest[chest1].item[index] = new Item();
                    Chest.DestroyChest(x, y);
                    var number = 1;
                    if (Main.tile[x, y].type == (ushort) 467)
                        number = 5;
                    NetMessage.SendData(34, -1, -1, (NetworkText) null, number, (float) x, (float) y, 0.0f, chest2, 0,
                        0);
                    NetMessage.SendTileSquare(-1, x, y, 3, TileChangeType.None);
                }

                var Type = 475;
                if (num2 == 1)
                    Type = !WorldGen.crimson ? 473 : 474;
                var number1 = NPC.NewNPC(x * 16 + 16, y * 16 + 32, Type, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                    (int) byte.MaxValue);
                Main.npc[number1].whoAmI = number1;
                NetMessage.SendData(23, -1, -1, (NetworkText) null, number1, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                Main.npc[number1].BigMimicSpawnSmoke();
            }

            return false;
        }

        public bool ShouldFaceTarget(ref NPCUtils.TargetSearchResults searchResults,
            NPCUtils.TargetType? overrideTargetType = null)
        {
            var nearestTargetType = searchResults.NearestTargetType;
            if (overrideTargetType.HasValue)
                nearestTargetType = overrideTargetType.Value;
            switch (nearestTargetType)
            {
                case NPCUtils.TargetType.NPC:
                case NPCUtils.TargetType.TankPet:
                    return true;
                case NPCUtils.TargetType.Player:
                    var flag = true;
                    var nearestTankOwner = searchResults.NearestTankOwner;
                    if (nearestTankOwner.dead || nearestTankOwner.npcTypeNoAggro[this.type] && this.direction != 0)
                        flag = false;
                    if (flag)
                    {
                        var num = (float) ((double) (nearestTankOwner.width + nearestTankOwner.height + this.width +
                                                       this.height) / 4.0 + 800.0);
                        if (nearestTankOwner.itemAnimation == 0 && nearestTankOwner.aggro < 0 &&
                            ((double) searchResults.NearestTankDistance > (double) num && this.oldTarget >= 0))
                            return this.oldTarget >= (int) byte.MaxValue;
                        return true;
                    }

                    break;
            }

            return false;
        }

        public void FaceTarget()
        {
            this.direction = (double) this.targetRect.Center.X < (double) this.Center.X ? -1 : 1;
            this.directionY = (double) this.targetRect.Center.Y < (double) this.Center.Y ? -1 : 1;
        }

        public void TargetClosestUpgraded(bool faceTarget = true, Vector2? checkPosition = null)
        {
            var index1 = -1;
            var index2 = -1;
            var index3 = -1;
            var center = this.Center;
            if (checkPosition.HasValue)
                center = checkPosition.Value;
            var flag1 = this.direction == 0;
            var num1 = 9999999f;
            for (var index4 = 0; index4 < (int) byte.MaxValue; ++index4)
            {
                var player = Main.player[index4];
                if (player.active && !player.dead && !player.ghost)
                {
                    var num2 = Vector2.Distance(center, player.Center) - (float) player.aggro;
                    var flag2 = player.npcTypeNoAggro[this.type];
                    if (flag2 && !flag1)
                        num2 += 1000f;
                    if ((double) num2 < (double) num1)
                    {
                        index1 = index4;
                        index2 = -1;
                        num1 = num2;
                    }

                    if (player.tankPet >= 0 && !flag2)
                    {
                        var num3 = Vector2.Distance(center, Main.projectile[player.tankPet].Center) - 200f;
                        if ((double) num3 < (double) num1 && (double) num3 < 200.0 && Collision.CanHit(this.Center, 0,
                                0, Main.projectile[player.tankPet].Center, 0, 0))
                        {
                            index2 = player.tankPet;
                            num1 = num3;
                        }
                    }
                }
            }

            for (var index4 = 0; index4 < 200; ++index4)
            {
                var npc = Main.npc[index4];
                if (npc.active && npc.type == 548)
                {
                    var num2 = Vector2.Distance(center, npc.Center);
                    if ((double) num1 > (double) num2)
                    {
                        index3 = index4;
                        index1 = -1;
                        index2 = -1;
                        num1 = num2;
                    }
                }
            }

            if ((double) num1 == 9999999.0)
                return;
            if (index3 >= 0)
            {
                this.target = Main.npc[index3].WhoAmIToTargettingIndex;
                this.targetRect = Main.npc[index3].Hitbox;
                this.direction = (double) this.targetRect.Center.X < (double) this.Center.X ? -1 : 1;
                this.directionY = (double) this.targetRect.Center.Y < (double) this.Center.Y ? -1 : 1;
            }
            else if (index2 >= 0)
            {
                this.target = Main.projectile[index2].owner;
                this.targetRect = Main.projectile[index2].Hitbox;
                this.direction = (double) this.targetRect.Center.X < (double) this.Center.X ? -1 : 1;
                this.directionY = (double) this.targetRect.Center.Y < (double) this.Center.Y ? -1 : 1;
            }
            else
            {
                if (index1 < 0 || index1 >= (int) byte.MaxValue)
                    index1 = 0;
                var player = Main.player[index1];
                this.targetRect = player.Hitbox;
                this.target = index1;
                if (player.dead || player.npcTypeNoAggro[this.type] && !flag1)
                    faceTarget = false;
                if (!faceTarget)
                    return;
                var num2 = (float) ((double) (player.width + player.height + this.width + this.height) / 4.0 + 800.0);
                var num3 = num1 - (float) player.aggro;
                if (player.itemAnimation == 0 && player.aggro < 0 &&
                    ((double) num3 > (double) num2 && this.oldTarget >= 0) && this.oldTarget < (int) byte.MaxValue)
                    return;
                this.direction = (double) this.targetRect.Center.X < (double) this.Center.X ? -1 : 1;
                this.directionY = (double) this.targetRect.Center.Y < (double) this.Center.Y ? -1 : 1;
            }
        }

        public void TargetClosest(bool faceTarget = true)
        {
            var num1 = 0.0f;
            var num2 = 0.0f;
            var flag = false;
            var num3 = -1;
            for (var index = 0; index < (int) byte.MaxValue; ++index)
            {
                if (Main.player[index].active && !Main.player[index].dead && !Main.player[index].ghost)
                {
                    var num4 =
                        Math.Abs(Main.player[index].position.X + (float) (Main.player[index].width / 2) -
                                 this.position.X + (float) (this.width / 2)) +
                        Math.Abs(Main.player[index].position.Y + (float) (Main.player[index].height / 2) -
                                 this.position.Y + (float) (this.height / 2)) - (float) Main.player[index].aggro;
                    if (Main.player[index].npcTypeNoAggro[this.type] && this.direction != 0)
                        num4 += 1000f;
                    if (!flag || (double) num4 < (double) num1)
                    {
                        flag = true;
                        num3 = -1;
                        num2 = Math.Abs(Main.player[index].position.X + (float) (Main.player[index].width / 2) -
                                        this.position.X + (float) (this.width / 2)) +
                               Math.Abs(Main.player[index].position.Y + (float) (Main.player[index].height / 2) -
                                        this.position.Y + (float) (this.height / 2));
                        num1 = num4;
                        this.target = index;
                    }

                    if (Main.player[index].tankPet >= 0 && !Main.player[index].npcTypeNoAggro[this.type])
                    {
                        var tankPet = Main.player[index].tankPet;
                        var num5 =
                            Math.Abs(Main.projectile[tankPet].position.X +
                                     (float) (Main.projectile[tankPet].width / 2) - this.position.X +
                                     (float) (this.width / 2)) +
                            Math.Abs(Main.projectile[tankPet].position.Y +
                                     (float) (Main.projectile[tankPet].height / 2) - this.position.Y +
                                     (float) (this.height / 2)) - 200f;
                        if ((double) num5 < (double) num1 && (double) num5 < 200.0 &&
                            Collision.CanHit(this.Center, 1, 1, Main.projectile[tankPet].Center, 1, 1))
                            num3 = tankPet;
                    }
                }
            }

            if (num3 >= 0)
            {
                var index = num3;
                this.targetRect = new Microsoft.Xna.Framework.Rectangle((int) Main.projectile[index].position.X,
                    (int) Main.projectile[index].position.Y, Main.projectile[index].width,
                    Main.projectile[index].height);
                this.direction = 1;
                if ((double) (this.targetRect.X + this.targetRect.Width / 2) <
                    (double) this.position.X + (double) (this.width / 2))
                    this.direction = -1;
                this.directionY = 1;
                if ((double) (this.targetRect.Y + this.targetRect.Height / 2) <
                    (double) this.position.Y + (double) (this.height / 2))
                    this.directionY = -1;
            }
            else
            {
                if (this.target < 0 || this.target >= (int) byte.MaxValue)
                    this.target = 0;
                this.targetRect = new Microsoft.Xna.Framework.Rectangle((int) Main.player[this.target].position.X,
                    (int) Main.player[this.target].position.Y, Main.player[this.target].width,
                    Main.player[this.target].height);
                if (Main.player[this.target].dead)
                    faceTarget = false;
                if (Main.player[this.target].npcTypeNoAggro[this.type] && this.direction != 0)
                    faceTarget = false;
                if (faceTarget)
                {
                    var num4 = num2 - (float) Main.player[this.target].aggro;
                    var num5 = (float) ((Main.player[this.target].height + Main.player[this.target].width +
                                           this.height + this.width) / 4 + 750 + 50);
                    if (Main.player[this.target].itemAnimation != 0 || Main.player[this.target].aggro >= 0 ||
                        ((double) num4 <= (double) num5 || this.oldTarget < 0) || this.oldTarget > 254)
                    {
                        this.direction = 1;
                        if ((double) (this.targetRect.X + this.targetRect.Width / 2) <
                            (double) this.position.X + (double) (this.width / 2))
                            this.direction = -1;
                        this.directionY = 1;
                        if ((double) (this.targetRect.Y + this.targetRect.Height / 2) <
                            (double) this.position.Y + (double) (this.height / 2))
                            this.directionY = -1;
                    }
                }
            }

            if (this.confused)
                this.direction *= -1;
            if (this.direction == this.oldDirection && this.directionY == this.oldDirectionY &&
                this.target == this.oldTarget || (this.collideX || this.collideY))
                return;
            this.netUpdate = true;
        }

        public void CheckActive()
        {
            if (!this.active)
                return;
            switch (this.type)
            {
                case 8:
                    return;
                case 9:
                    return;
                case 11:
                    return;
                case 12:
                    return;
                case 14:
                    return;
                case 15:
                    return;
                case 40:
                    return;
                case 41:
                    return;
                case 88:
                    return;
                case 89:
                    return;
                case 90:
                    return;
                case 91:
                    return;
                case 92:
                    return;
                case 96:
                    return;
                case 97:
                    return;
                case 99:
                    return;
                case 100:
                    return;
                case 113:
                    return;
                case 114:
                    return;
                case 115:
                    return;
                case 118:
                    return;
                case 119:
                    return;
                case 134:
                    return;
                case 135:
                    return;
                case 136:
                    return;
                case 139:
                    if (NPC.npcsFoundForCheckActive[134])
                        return;
                    break;
                case 246:
                    return;
                case 247:
                    return;
                case 248:
                    return;
                case 249:
                    return;
                case 263:
                    return;
                case 267:
                    return;
                case 328:
                    return;
                case 379:
                    return;
                case 380:
                    return;
                case 396:
                    return;
                case 397:
                    return;
                case 398:
                    return;
                case 400:
                    return;
                case 422:
                    return;
                case 437:
                    return;
                case 438:
                    return;
                case 439:
                    return;
                case 440:
                    return;
                case 488:
                    return;
                case 493:
                    return;
                case 507:
                    return;
                case 517:
                    return;
                case 548:
                    return;
                case 549:
                    return;
                case 551:
                    return;
                case 552:
                case 553:
                case 554:
                case 555:
                case 556:
                case 557:
                case 558:
                case 559:
                case 560:
                case 561:
                case 562:
                case 563:
                case 566:
                case 567:
                case 568:
                case 569:
                case 570:
                case 571:
                case 572:
                case 573:
                case 574:
                case 575:
                case 576:
                case 577:
                case 578:
                    if (NPC.npcsFoundForCheckActive[548])
                        return;
                    break;
                case 564:
                    return;
                case 565:
                    return;
            }

            if (this.townNPC)
            {
                var rectangle = new Microsoft.Xna.Framework.Rectangle(
                    (int) ((double) this.position.X + (double) (this.width / 2) - (double) NPC.townRangeX),
                    (int) ((double) this.position.Y + (double) (this.height / 2) - (double) NPC.townRangeY),
                    NPC.townRangeX * 2, NPC.townRangeY * 2);
                for (var index = 0; index < (int) byte.MaxValue; ++index)
                {
                    if (Main.player[index].active && rectangle.Intersects(
                            new Microsoft.Xna.Framework.Rectangle((int) Main.player[index].position.X,
                                (int) Main.player[index].position.Y, Main.player[index].width,
                                Main.player[index].height)))
                        Main.player[index].townNPCs += this.npcSlots;
                }
            }
            else
            {
                var flag = false;
                var rectangle1 = new Microsoft.Xna.Framework.Rectangle(
                    (int) ((double) this.position.X + (double) (this.width / 2) - (double) NPC.activeRangeX),
                    (int) ((double) this.position.Y + (double) (this.height / 2) - (double) NPC.activeRangeY),
                    NPC.activeRangeX * 2, NPC.activeRangeY * 2);
                var rectangle2 = new Microsoft.Xna.Framework.Rectangle(
                    (int) ((double) this.position.X + (double) (this.width / 2) - (double) NPC.sWidth * 0.5 -
                           (double) this.width),
                    (int) ((double) this.position.Y + (double) (this.height / 2) - (double) NPC.sHeight * 0.5 -
                           (double) this.height), NPC.sWidth + this.width * 2, NPC.sHeight + this.height * 2);
                for (var index = 0; index < (int) byte.MaxValue; ++index)
                {
                    if (Main.player[index].active)
                    {
                        if (rectangle1.Intersects(new Microsoft.Xna.Framework.Rectangle(
                            (int) Main.player[index].position.X, (int) Main.player[index].position.Y,
                            Main.player[index].width, Main.player[index].height)))
                        {
                            flag = true;
                            if (this.type != 25 && this.type != 30 &&
                                (this.type != 33 && this.releaseOwner == (short) byte.MaxValue) && this.lifeMax > 0)
                            {
                                if (Main.slimeRain && Main.slimeRainNPC[this.type])
                                    Main.player[index].activeNPCs += this.npcSlots * Main.slimeRainNPCSlots;
                                else
                                    Main.player[index].activeNPCs += this.npcSlots;
                            }
                        }

                        if (rectangle2.Intersects(new Microsoft.Xna.Framework.Rectangle(
                            (int) Main.player[index].position.X, (int) Main.player[index].position.Y,
                            Main.player[index].width, Main.player[index].height)))
                            this.timeLeft = NPC.activeTime;
                        if (this.boss)
                            flag = true;
                        switch (this.type)
                        {
                            case 7:
                            case 10:
                            case 13:
                            case 35:
                            case 36:
                            case 39:
                            case 87:
                            case (int) sbyte.MaxValue:
                            case 128:
                            case 129:
                            case 130:
                            case 131:
                            case 392:
                            case 393:
                            case 394:
                            case 491:
                            case 492:
                                flag = true;
                                continue;
                            case 399:
                                if ((double) this.ai[0] == 2.0 || (double) this.ai[0] == 1.0)
                                    this.timeLeft = NPC.activeTime;
                                flag = true;
                                continue;
                            default:
                                continue;
                        }
                    }
                }

                --this.timeLeft;
                if (this.timeLeft <= 0)
                    flag = false;
                if (flag || Main.netMode == 1)
                    return;
                NPC.noSpawnCycle = true;
                this.active = false;
                if (Main.netMode == 2)
                {
                    this.netSkip = -1;
                    this.life = 0;
                    NetMessage.SendData(23, -1, -1, (NetworkText) null, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                }

                if (this.aiStyle != 6)
                    return;
                for (var number = (int) this.ai[0]; number > 0; number = (int) Main.npc[number].ai[0])
                {
                    if (Main.npc[number].active)
                    {
                        Main.npc[number].active = false;
                        if (Main.netMode == 2)
                        {
                            Main.npc[number].life = 0;
                            Main.npc[number].netSkip = -1;
                            NetMessage.SendData(23, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                        }
                    }
                }
            }
        }

        public void checkDead()
        {
            if (!this.active || this.realLife >= 0 && this.realLife != this.whoAmI || this.life > 0)
                return;
            if (this.type == 397 || this.type == 396)
            {
                if ((double) this.ai[0] == -2.0)
                    return;
                this.ai[0] = -2f;
                this.life = this.lifeMax;
                this.netUpdate = true;
                this.dontTakeDamage = true;
                if (Main.netMode == 1)
                    return;
                var index = NPC.NewNPC((int) this.Center.X, (int) this.Center.Y, 400, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                    (int) byte.MaxValue);
                Main.npc[index].ai[3] = this.ai[3];
                Main.npc[index].netUpdate = true;
            }
            else if (this.type == 398 && (double) this.ai[0] != 2.0)
            {
                this.ai[0] = 2f;
                this.life = this.lifeMax;
                this.netUpdate = true;
                this.dontTakeDamage = true;
            }
            else if ((this.type == 517 || this.type == 422 || (this.type == 507 || this.type == 493)) &&
                     (double) this.ai[2] != 1.0)
            {
                this.ai[2] = 1f;
                this.ai[1] = 0.0f;
                this.life = this.lifeMax;
                this.dontTakeDamage = true;
                this.netUpdate = true;
            }
            else if (this.type == 548 && (double) this.ai[1] != 1.0)
            {
                this.ai[1] = 1f;
                this.ai[0] = 0.0f;
                this.life = this.lifeMax;
                this.dontTakeDamageFromHostiles = true;
                this.netUpdate = true;
            }
            else
            {
                NPC.noSpawnCycle = true;
                if (this.townNPC && this.type != 37 && this.type != 453)
                {
                    var fullNetName = this.GetFullNetName();
                    var text =
                        NetworkText.FromKey(Lang.misc[this.type == 369 ? 36 : 19].Key, (object) fullNetName);
                    switch (Main.netMode)
                    {
                        case 0:
                            Main.NewText(text.ToString(), byte.MaxValue, (byte) 25, (byte) 25, false);
                            break;
                        case 2:
                            NetMessage.BroadcastChatMessage(text, new Color((int) byte.MaxValue, 25, 25), -1);
                            break;
                    }
                }

                if (Main.netMode != 1 && !Main.dayTime && (this.type == 54 && !NPC.AnyNPCs(35)))
                {
                    for (var index = 0; index < (int) byte.MaxValue; ++index)
                    {
                        if (Main.player[index].active && !Main.player[index].dead && Main.player[index].killClothier)
                        {
                            NPC.SpawnSkeletron();
                            break;
                        }
                    }
                }

                if (this.townNPC && Main.netMode != 1 && (this.homeless && WorldGen.prioritizedTownNPC == this.type))
                    WorldGen.prioritizedTownNPC = 0;
                if (this.DeathSound != null)
                    Main.PlaySound(this.DeathSound, this.position);
                if (this.type == 13 || this.type == 14 || this.type == 15)
                {
                    var flag = true;
                    for (var index = 0; index < 200; ++index)
                    {
                        if (index != this.whoAmI && Main.npc[index].active &&
                            (Main.npc[index].type == 13 || Main.npc[index].type == 14 || Main.npc[index].type == 15))
                        {
                            flag = false;
                            break;
                        }
                    }

                    if (flag)
                    {
                        this.boss = true;
                        this.NPCLoot();
                    }
                    else
                        this.NPCLoot();
                }
                else if (this.type == 134)
                {
                    var position1 = this.position;
                    var center = Main.player[this.target].Center;
                    var num1 = 1E+08f;
                    var position2 = this.position;
                    for (var index = 0; index < 200; ++index)
                    {
                        if (Main.npc[index].active && (Main.npc[index].type == 134 || Main.npc[index].type == 135 ||
                                                       Main.npc[index].type == 136))
                        {
                            var num2 = Math.Abs(Main.npc[index].Center.X - center.X) +
                                         Math.Abs(Main.npc[index].Center.Y - center.Y);
                            if ((double) num2 < (double) num1)
                            {
                                num1 = num2;
                                position2 = Main.npc[index].position;
                            }
                        }
                    }

                    this.position = position2;
                    this.NPCLoot();
                    this.position = position1;
                }
                else
                    this.NPCLoot();

                this.active = false;
                DD2Event.CheckProgress(this.type);
                this.CheckProgressFrostMoon();
                this.CheckProgressPumpkinMoon();
                var num3 = 0;
                switch (this.type)
                {
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 111:
                    case 471:
                        num3 = 1;
                        break;
                    case 143:
                    case 144:
                    case 145:
                        num3 = 2;
                        break;
                    case 212:
                    case 213:
                    case 214:
                    case 215:
                    case 216:
                    case 491:
                        num3 = 3;
                        break;
                    case 381:
                    case 382:
                    case 383:
                    case 385:
                    case 386:
                    case 388:
                    case 389:
                    case 390:
                    case 391:
                    case 395:
                        num3 = 4;
                        break;
                }

                if (num3 == 0 || num3 != Main.invasionType)
                    return;
                var num4 = 1;
                switch (this.type)
                {
                    case 216:
                        num4 = 5;
                        break;
                    case 395:
                        num4 = 10;
                        break;
                    case 471:
                        num4 = 10;
                        break;
                    case 491:
                        num4 = 10;
                        break;
                }

                Main.invasionSize -= num4;
                if (Main.invasionSize < 0)
                    Main.invasionSize = 0;
                if (Main.netMode != 1)
                    Main.ReportInvasionProgress(Main.invasionSizeStart - Main.invasionSize, Main.invasionSizeStart,
                        num3 + 3, 0);
                if (Main.netMode != 2)
                    return;
                NetMessage.SendData(78, -1, -1, (NetworkText) null, Main.invasionProgress,
                    (float) Main.invasionProgressMax, (float) Main.invasionProgressIcon, 0.0f, 0, 0, 0);
            }
        }

        private void CheckProgressFrostMoon()
        {
            if (!Main.snowMoon)
                return;
            var text = NetworkText.Empty;
            var numArray = new int[21]
            {
                0,
                25,
                15,
                10,
                30,
                100,
                160,
                180,
                200,
                250,
                300,
                375,
                450,
                525,
                675,
                850,
                1025,
                1325,
                1550,
                2000,
                0
            };
            var progressMax = numArray[NPC.waveNumber];
            switch (NPC.waveNumber)
            {
                case 1:
                    text = Lang.GetInvasionWaveText(2, (short) 338, (short) 350);
                    break;
                case 2:
                    text = Lang.GetInvasionWaveText(3, (short) 338, (short) 350, (short) 342, (short) 348);
                    break;
                case 3:
                    text = Lang.GetInvasionWaveText(4, (short) 344, (short) 338, (short) 350, (short) 342);
                    break;
                case 4:
                    text = Lang.GetInvasionWaveText(5, (short) 344, (short) 338, (short) 350, (short) 348);
                    break;
                case 5:
                    text = Lang.GetInvasionWaveText(6, (short) 344, (short) 350, (short) 348, (short) 347);
                    break;
                case 6:
                    text = Lang.GetInvasionWaveText(7, (short) 346, (short) 342, (short) 350, (short) 338);
                    break;
                case 7:
                    text = Lang.GetInvasionWaveText(8, (short) 346, (short) 347, (short) 350, (short) 348, (short) 351);
                    break;
                case 8:
                    text = Lang.GetInvasionWaveText(9, (short) 346, (short) 344, (short) 348, (short) 347, (short) 342);
                    break;
                case 9:
                    text = Lang.GetInvasionWaveText(10, (short) 346, (short) 344, (short) 351, (short) 338,
                        (short) 347);
                    break;
                case 10:
                    text = Lang.GetInvasionWaveText(11, (short) 345, (short) 352, (short) 338, (short) 342);
                    break;
                case 11:
                    text = Lang.GetInvasionWaveText(12, (short) 345, (short) 344, (short) 342, (short) 343,
                        (short) 338);
                    break;
                case 12:
                    text = Lang.GetInvasionWaveText(13, (short) 345, (short) 346, (short) 342, (short) 352, (short) 343,
                        (short) 347);
                    break;
                case 13:
                    text = Lang.GetInvasionWaveText(14, (short) 345, (short) 346, (short) 344, (short) 343,
                        (short) 351);
                    break;
                case 14:
                    text = Lang.GetInvasionWaveText(15, (short) 345, (short) 346, (short) 344, (short) 343,
                        (short) 347);
                    break;
                case 15:
                    text = Lang.GetInvasionWaveText(16, (short) 345, (short) 346, (short) 344, (short) 343,
                        (short) 352);
                    break;
                case 16:
                    text = Lang.GetInvasionWaveText(17, (short) 345, (short) 346, (short) 344, (short) 343, (short) 351,
                        (short) 347);
                    break;
                case 17:
                    text = Lang.GetInvasionWaveText(18, (short) 345, (short) 346, (short) 344, (short) 343, (short) 348,
                        (short) 351);
                    break;
                case 18:
                    text = Lang.GetInvasionWaveText(19, (short) 345, (short) 346, (short) 344, (short) 343);
                    break;
                case 19:
                    text = Lang.GetInvasionWaveText(-1, (short) 345, (short) 346, (short) 344);
                    break;
            }

            var num = 0.0f;
            switch (this.type)
            {
                case 338:
                case 339:
                case 340:
                    num = 1f;
                    break;
                case 341:
                    num = 20f;
                    break;
                case 342:
                    num = 2f;
                    break;
                case 343:
                    num = 18f;
                    break;
                case 344:
                    num = 50f;
                    break;
                case 345:
                    num = 150f;
                    break;
                case 346:
                    num = 100f;
                    break;
                case 347:
                    num = 8f;
                    break;
                case 348:
                case 349:
                    num = 4f;
                    break;
                case 350:
                    num = 3f;
                    break;
            }

            if (Main.expertMode)
                num *= 2f;
            var waveKills = NPC.waveKills;
            NPC.waveKills += num;
            if ((double) NPC.waveKills >= (double) progressMax && progressMax != 0)
            {
                NPC.waveKills = 0.0f;
                ++NPC.waveNumber;
                progressMax = numArray[NPC.waveNumber];
                if (text != NetworkText.Empty)
                {
                    switch (Main.netMode)
                    {
                        case 0:
                            Main.NewText(text.ToString(), (byte) 175, (byte) 75, byte.MaxValue, false);
                            break;
                        case 2:
                            NetMessage.BroadcastChatMessage(text, new Color(175, 75, (int) byte.MaxValue), -1);
                            break;
                    }

                    if (NPC.waveNumber == 15)
                        AchievementsHelper.NotifyProgressionEvent(14);
                }
            }

            if ((double) NPC.waveKills == (double) waveKills || (double) num == 0.0)
                return;
            if (Main.netMode != 1)
                Main.ReportInvasionProgress((int) NPC.waveKills, progressMax, 1, NPC.waveNumber);
            if (Main.netMode != 2)
                return;
            NetMessage.SendData(78, -1, -1, (NetworkText) null, Main.invasionProgress, (float) Main.invasionProgressMax,
                1f, (float) NPC.waveNumber, 0, 0, 0);
        }

        private void CheckProgressPumpkinMoon()
        {
            if (!Main.pumpkinMoon)
                return;
            var text = NetworkText.Empty;
            var numArray = new int[16]
            {
                0,
                25,
                40,
                50,
                80,
                100,
                160,
                180,
                200,
                250,
                300,
                375,
                450,
                525,
                675,
                0
            };
            var progressMax = numArray[NPC.waveNumber];
            switch (NPC.waveNumber)
            {
                case 1:
                    text = Lang.GetInvasionWaveText(2, (short) 305, (short) 326);
                    break;
                case 2:
                    text = Lang.GetInvasionWaveText(3, (short) 305, (short) 326, (short) 329);
                    break;
                case 3:
                    text = Lang.GetInvasionWaveText(4, (short) 305, (short) 326, (short) 329, (short) 325);
                    break;
                case 4:
                    text = Lang.GetInvasionWaveText(5, (short) 305, (short) 326, (short) 329, (short) 330, (short) 325);
                    break;
                case 5:
                    text = Lang.GetInvasionWaveText(6, (short) 326, (short) 329, (short) 330, (short) 325);
                    break;
                case 6:
                    text = Lang.GetInvasionWaveText(7, (short) 305, (short) 329, (short) 330, (short) 327);
                    break;
                case 7:
                    text = Lang.GetInvasionWaveText(8, (short) 326, (short) 329, (short) 330, (short) 327);
                    break;
                case 8:
                    text = Lang.GetInvasionWaveText(9, (short) 305, (short) 315, (short) 325, (short) 327);
                    break;
                case 9:
                    text = Lang.GetInvasionWaveText(10, (short) 326, (short) 329, (short) 330, (short) 315, (short) 325,
                        (short) 327);
                    break;
                case 10:
                    text = Lang.GetInvasionWaveText(11, (short) 305, (short) 326, (short) 329, (short) 330, (short) 315,
                        (short) 325, (short) 327);
                    break;
                case 11:
                    text = Lang.GetInvasionWaveText(12, (short) 326, (short) 329, (short) 330, (short) 315, (short) 325,
                        (short) 327);
                    break;
                case 12:
                    text = Lang.GetInvasionWaveText(13, (short) 329, (short) 330, (short) 315, (short) 325,
                        (short) 327);
                    break;
                case 13:
                    text = Lang.GetInvasionWaveText(14, (short) 315, (short) 325, (short) 327);
                    break;
                case 14:
                    text = Lang.GetInvasionWaveText(-1, (short) 325, (short) 327);
                    break;
            }

            var num = 0.0f;
            switch (this.type)
            {
                case 305:
                case 306:
                case 307:
                case 308:
                case 309:
                case 310:
                case 311:
                case 312:
                case 313:
                case 314:
                    num = 1f;
                    break;
                case 315:
                    num = 25f;
                    break;
                case 325:
                    num = 75f;
                    break;
                case 326:
                    num = 2f;
                    break;
                case 327:
                    num = 150f;
                    break;
                case 329:
                    num = 4f;
                    break;
                case 330:
                    num = 8f;
                    break;
            }

            if (Main.expertMode)
                num *= 2f;
            var waveKills = NPC.waveKills;
            NPC.waveKills += num;
            if ((double) NPC.waveKills >= (double) progressMax && progressMax != 0)
            {
                NPC.waveKills = 0.0f;
                ++NPC.waveNumber;
                progressMax = numArray[NPC.waveNumber];
                if (text != NetworkText.Empty)
                {
                    switch (Main.netMode)
                    {
                        case 0:
                            Main.NewText(text.ToString(), (byte) 175, (byte) 75, byte.MaxValue, false);
                            break;
                        case 2:
                            NetMessage.BroadcastChatMessage(text, new Color(175, 75, (int) byte.MaxValue), -1);
                            break;
                    }

                    if (NPC.waveNumber == 15)
                        AchievementsHelper.NotifyProgressionEvent(15);
                }
            }

            if ((double) NPC.waveKills == (double) waveKills || (double) num == 0.0)
                return;
            if (Main.netMode != 1)
                Main.ReportInvasionProgress((int) NPC.waveKills, progressMax, 2, NPC.waveNumber);
            if (Main.netMode != 2)
                return;
            NetMessage.SendData(78, -1, -1, (NetworkText) null, Main.invasionProgress, (float) Main.invasionProgressMax,
                2f, (float) NPC.waveNumber, 0, 0, 0);
        }

        public static void ResetKillCount()
        {
            for (var index = 0; index < 580; ++index)
                NPC.killCount[index] = 0;
        }

        public bool AnyInteractions()
        {
            if (Main.netMode == 0)
            {
                if (this.playerInteraction[Main.myPlayer])
                    return true;
            }
            else
            {
                for (var index = 0; index < (int) byte.MaxValue; ++index)
                {
                    if (this.playerInteraction[index])
                        return true;
                }
            }

            return false;
        }

        public void NPCLoot()
        {
            if (Main.netMode == 1 || this.type >= 580)
                return;
            var flag1 = NPC.downedMechBoss1 && NPC.downedMechBoss2 && NPC.downedMechBoss3;
            switch (this.type)
            {
                case 13:
                case 14:
                case 15:
                    if (this.boss)
                    {
                        AchievementsHelper.NotifyNPCKilled(this);
                        break;
                    }

                    break;
                case 125:
                case 126:
                    if (!NPC.AnyNPCs(this.type == 126 ? 125 : 126))
                    {
                        AchievementsHelper.NotifyNPCKilled(this);
                        AchievementsHelper.CheckMechaMayhem(this.type);
                        break;
                    }

                    break;
                case (int) sbyte.MaxValue:
                case 134:
                    AchievementsHelper.CheckMechaMayhem(this.type);
                    AchievementsHelper.NotifyNPCKilled(this);
                    break;
                default:
                    AchievementsHelper.NotifyNPCKilled(this);
                    break;
            }

            var index1 = Item.NPCtoBanner(this.BannerID());
            if (index1 > 0 && !NPCID.Sets.ExcludedFromDeathTally[this.type])
            {
                if (this.realLife < 0 ? this.AnyInteractions() : Main.npc[this.realLife].AnyInteractions())
                {
                    ++NPC.killCount[index1];
                    if (Main.netMode == 2)
                        NetMessage.SendData(83, -1, -1, (NetworkText) null, index1, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    var num = ItemID.Sets.KillsToBanner[Item.BannerToItem(index1)];
                    if (NPC.killCount[index1] % num == 0 && index1 > 0)
                    {
                        var npc = Item.BannerToNPC(index1);
                        new NPC().SetDefaults(npc, -1f);
                        var index2 = this.lastInteraction;
                        if (!Main.player[index2].active || Main.player[index2].dead)
                            index2 = this.FindClosestPlayer();
                        var text = NetworkText.FromKey("Game.EnemiesDefeatedAnnouncement",
                            (object) NPC.killCount[index1], (object) NetworkText.FromKey(Lang.GetNPCName(npc).Key));
                        if (index2 >= 0 && index2 < (int) byte.MaxValue)
                            text = NetworkText.FromKey("Game.EnemiesDefeatedByAnnouncement",
                                (object) Main.player[index2].name, (object) NPC.killCount[index1],
                                (object) NetworkText.FromKey(Lang.GetNPCName(npc).Key));
                        switch (Main.netMode)
                        {
                            case 0:
                                Main.NewText(text.ToString(), (byte) 250, (byte) 250, (byte) 0, false);
                                break;
                            case 2:
                                NetMessage.BroadcastChatMessage(text, new Color(250, 250, 0), -1);
                                break;
                        }

                        var Type = Item.BannerToItem(index1);
                        var position = this.position;
                        if (index2 >= 0 && index2 < (int) byte.MaxValue)
                            position = Main.player[index2].position;
                        Item.NewItem((int) position.X, (int) position.Y, this.width, this.height, Type, 1, false, 0,
                            false, false);
                    }
                }
            }

            if (this.type == 23 && Main.hardMode ||
                this.SpawnedFromStatue && NPCID.Sets.NoEarlymodeLootWhenSpawnedFromStatue[this.type] &&
                !Main.hardMode || this.SpawnedFromStatue &&
                (double) NPCID.Sets.StatueSpawnedDropRarity[this.type] != -1.0 &&
                ((double) Main.rand.NextFloat() >= (double) NPCID.Sets.StatueSpawnedDropRarity[this.type] ||
                 !this.AnyInteractions()))
                return;
            if ((this.type == 170 || this.type == 180 || this.type == 171) && Main.rand.Next(3) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3532, 1, false, 0,
                    false, false);
            switch (this.type)
            {
                case 75:
                case 80:
                case 84:
                case 86:
                case 120:
                case 122:
                case 137:
                case 138:
                case 171:
                case 244:
                case 475:
                    var maxValue1 = Main.expertMode ? 150 : 200;
                    if (Main.rand.Next(maxValue1) == 0)
                    {
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3260, 1,
                            false, 0, false, false);
                        break;
                    }

                    break;
            }

            if (Main.slimeRain && Main.slimeRainNPC[this.type] && !NPC.AnyNPCs(50))
            {
                var num = 150;
                if (NPC.downedSlimeKing)
                    num /= 2;
                ++Main.slimeRainKillCount;
                if (Main.slimeRainKillCount >= num)
                {
                    NPC.SpawnOnPlayer(this.FindClosestPlayer(), 50);
                    Main.slimeRainKillCount = -num / 2;
                }
            }

            if (!Main.player[(int) Player.FindClosest(this.position, this.width, this.height)].ZoneDungeon)
            {
                var flag2 = false;
                if (Main.expertMode && Main.rand.Next(5) == 0)
                    flag2 = true;
                else if (Main.rand.Next(5) == 0)
                    flag2 = true;
                if (this.boss)
                    flag2 = false;
                switch (this.type)
                {
                    case 13:
                    case 14:
                    case 15:
                        flag2 = false;
                        break;
                }

                if (Main.hardMode && this.lifeMax > 1 && (this.damage > 0 && !this.friendly) &&
                    ((double) this.position.Y > Main.rockLayer * 16.0 && flag2 &&
                     (this.type != 121 && (double) this.value > 0.0)))
                {
                    if (Main.player[(int) Player.FindClosest(this.position, this.width, this.height)].ZoneCorrupt ||
                        Main.player[(int) Player.FindClosest(this.position, this.width, this.height)].ZoneCrimson)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 521, 1,
                            false, 0, false, false);
                    if (Main.player[(int) Player.FindClosest(this.position, this.width, this.height)].ZoneHoly)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 520, 1,
                            false, 0, false, false);
                }
            }

            if (this.type == 1 && (double) this.ai[1] > 0.0)
            {
                var Type = (int) this.ai[1];
                if (Type > 0 && Type < 3930)
                {
                    var Stack = 1;
                    switch (Type)
                    {
                        case 8:
                            Stack = Main.rand.Next(5, 11);
                            break;
                        case 166:
                            Stack = Main.rand.Next(2, 7);
                            break;
                        case 965:
                            Stack = Main.rand.Next(20, 46);
                            break;
                        default:
                            if (Type >= 11 && Type <= 14 || Type >= 699 && Type <= 702)
                            {
                                Stack = Main.rand.Next(3, 9);
                                if (Main.rand.Next(2) == 0)
                                {
                                    Stack += 5;
                                    break;
                                }

                                break;
                            }

                            switch (Type)
                            {
                                case 71:
                                    Stack = Main.rand.Next(50, 100);
                                    break;
                                case 72:
                                    Stack = Main.rand.Next(20, 100);
                                    break;
                                case 73:
                                    Stack = Main.rand.Next(1, 3);
                                    break;
                            }

                            break;
                    }

                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, Type, Stack,
                        false, 0, false, false);
                }
            }

            if (this.type == 22 && this.GivenOrTypeName == "Andrew")
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 867, 1, false, 0,
                    false, false);
            if (this.type == 353 && Main.rand.Next(8) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3352, 1, false, 0,
                    false, false);
            if (this.type == 441 && Main.rand.Next(8) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3351, 1, false, 0,
                    false, false);
            if (this.type == 227 && Main.rand.Next(10) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3350, 1, false, 0,
                    false, false);
            if (this.type == 550 && Main.rand.Next(6) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3821, 1, false, 0,
                    false, false);
            if (this.type == 208 && Main.rand.Next(4) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3548,
                    Main.rand.Next(30, 61), false, 0, false, false);
            if (this.type == 207 && Main.rand.Next(8) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3349, 1, false, 0,
                    false, false);
            if (Main.hardMode && (double) this.value > 0.0)
            {
                if (!NPC.downedMechBoss1 && Main.rand.Next(2500) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 556, 1, false,
                        0, false, false);
                else if (!NPC.downedMechBoss2 && Main.rand.Next(2500) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 544, 1, false,
                        0, false, false);
                else if (!NPC.downedMechBoss3 && Main.rand.Next(2500) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 557, 1, false,
                        0, false, false);
            }

            if (Main.halloween && (double) this.value > 0.0 && ((double) this.value < 500.0 && this.damage < 40) &&
                this.defense < 20)
            {
                if (Main.rand.Next(2000) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1825, 1, false,
                        0, false, false);
                else if (Main.rand.Next(2000) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1827, 1, false,
                        0, false, false);
            }

            if (Main.hardMode && (double) this.value > 0.0)
            {
                if (Main.rand.Next(2500) == 0 &&
                    Main.player[(int) Player.FindClosest(this.position, this.width, this.height)].ZoneJungle)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1533, 1, false,
                        0, false, false);
                if (Main.rand.Next(2500) == 0 &&
                    Main.player[(int) Player.FindClosest(this.position, this.width, this.height)].ZoneCorrupt)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1534, 1, false,
                        0, false, false);
                if (Main.rand.Next(2500) == 0 &&
                    Main.player[(int) Player.FindClosest(this.position, this.width, this.height)].ZoneCrimson)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1535, 1, false,
                        0, false, false);
                if (Main.rand.Next(2500) == 0 &&
                    Main.player[(int) Player.FindClosest(this.position, this.width, this.height)].ZoneHoly)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1536, 1, false,
                        0, false, false);
                if (Main.rand.Next(2500) == 0 &&
                    Main.player[(int) Player.FindClosest(this.position, this.width, this.height)].ZoneSnow)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1537, 1, false,
                        0, false, false);
            }

            if (DD2Event.Ongoing)
            {
                switch (this.type)
                {
                    case 552:
                    case 553:
                    case 554:
                        DD2Event.AnnounceGoblinDeath(this);
                        if (DD2Event.ShouldDropCrystals())
                        {
                            Item.NewItem(this.position, this.Size, 3822, 1, false, 0, false, false);
                            break;
                        }

                        break;
                    case 555:
                    case 556:
                    case 557:
                    case 561:
                    case 562:
                    case 563:
                    case 570:
                    case 571:
                    case 572:
                    case 573:
                        if (DD2Event.ShouldDropCrystals())
                        {
                            Item.NewItem(this.position, this.Size, 3822, 1, false, 0, false, false);
                            break;
                        }

                        break;
                    case 558:
                    case 559:
                    case 560:
                    case 568:
                    case 569:
                        if (DD2Event.ShouldDropCrystals())
                        {
                            Item.NewItem(this.position, this.Size, 3822, 1, false, 0, false, false);
                            break;
                        }

                        break;
                    case 564:
                        if (Main.rand.Next(7) == 0)
                            Item.NewItem(this.position, this.Size, 3864, 1, false, 0, false, false);
                        if (Main.rand.Next(5) == 0)
                        {
                            if (Main.rand.Next(2) == 0)
                                Item.NewItem(this.position, this.Size, 3815, 4, false, 0, false, false);
                            else
                                Item.NewItem(this.position, this.Size, 3814, 1, false, 0, false, false);
                        }

                        if (Main.rand.Next(Main.expertMode ? 2 : 3) == 0)
                            Item.NewItem(this.position, this.Size, (int) Utils.SelectRandom<short>(Main.rand,
                                new short[2]
                                {
                                    (short) 3857,
                                    (short) 3855
                                }), 1, false, 0, false, false);
                        if (DD2Event.ShouldDropCrystals())
                        {
                            Item.NewItem(this.position, this.Size, 3822, 1, false, 0, false, false);
                            break;
                        }

                        break;
                    case 565:
                        if (Main.rand.Next(14) == 0)
                            Item.NewItem(this.position, this.Size, 3864, 1, false, 0, false, false);
                        if (Main.rand.Next(10) == 0)
                        {
                            if (Main.rand.Next(2) == 0)
                                Item.NewItem(this.position, this.Size, 3815, 4, false, 0, false, false);
                            else
                                Item.NewItem(this.position, this.Size, 3814, 1, false, 0, false, false);
                        }

                        if (Main.rand.Next(6) == 0)
                            Item.NewItem(this.position, this.Size, (int) Utils.SelectRandom<short>(Main.rand,
                                new short[2]
                                {
                                    (short) 3857,
                                    (short) 3855
                                }), 1, false, 0, false, false);
                        if (DD2Event.ShouldDropCrystals())
                        {
                            Item.NewItem(this.position, this.Size, 3822, 1, false, 0, false, false);
                            break;
                        }

                        break;
                    case 574:
                    case 575:
                    case 578:
                        if (DD2Event.ShouldDropCrystals())
                        {
                            Item.NewItem(this.position, this.Size, 3822, 1, false, 0, false, false);
                            break;
                        }

                        break;
                    case 576:
                        if (Main.rand.Next(7) == 0)
                            Item.NewItem(this.position, this.Size, 3865, 1, false, 0, false, false);
                        if (Main.rand.Next(Main.expertMode ? 2 : 3) == 0)
                            Item.NewItem(this.position, this.Size, (int) Utils.SelectRandom<short>(Main.rand,
                                new short[4]
                                {
                                    (short) 3809,
                                    (short) 3811,
                                    (short) 3810,
                                    (short) 3812
                                }), 1, false, 0, false, false);
                        if (Main.rand.Next(Main.expertMode ? 2 : 3) == 0)
                            Item.NewItem(this.position, this.Size, (int) Utils.SelectRandom<short>(Main.rand,
                                new short[5]
                                {
                                    (short) 3852,
                                    (short) 3854,
                                    (short) 3823,
                                    (short) 3835,
                                    (short) 3836
                                }), 1, false, 0, false, false);
                        if (Main.rand.Next(Main.expertMode ? 4 : 5) == 0)
                            Item.NewItem(this.position, this.Size, 3856, 1, false, 0, false, false);
                        if (DD2Event.ShouldDropCrystals())
                        {
                            Item.NewItem(this.position, this.Size, 3822, 1, false, 0, false, false);
                            break;
                        }

                        break;
                    case 577:
                        if (Main.rand.Next(14) == 0)
                            Item.NewItem(this.position, this.Size, 3865, 1, false, 0, false, false);
                        if (Main.rand.Next(6) == 0)
                            Item.NewItem(this.position, this.Size, (int) Utils.SelectRandom<short>(Main.rand,
                                new short[4]
                                {
                                    (short) 3809,
                                    (short) 3811,
                                    (short) 3810,
                                    (short) 3812
                                }), 1, false, 0, false, false);
                        if (Main.rand.Next(6) == 0)
                            Item.NewItem(this.position, this.Size, (int) Utils.SelectRandom<short>(Main.rand,
                                new short[5]
                                {
                                    (short) 3852,
                                    (short) 3854,
                                    (short) 3823,
                                    (short) 3835,
                                    (short) 3836
                                }), 1, false, 0, false, false);
                        if (Main.rand.Next(10) == 0)
                            Item.NewItem(this.position, this.Size, 3856, 1, false, 0, false, false);
                        if (DD2Event.ShouldDropCrystals())
                        {
                            Item.NewItem(this.position, this.Size, 3822, 1, false, 0, false, false);
                            break;
                        }

                        break;
                }
            }

            if (this.type == 68)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1169, 1, false, 0,
                    false, false);
            if (Main.snowMoon)
            {
                var waveNumber = NPC.waveNumber;
                if (Main.expertMode)
                    waveNumber += 7;
                var maxValue2 = (int) ((double) (30 - waveNumber) / 2.5);
                if (Main.expertMode)
                    maxValue2 -= 2;
                if (maxValue2 < 1)
                    maxValue2 = 1;
                if (this.type == 344)
                    NPC.downedChristmasTree = true;
                if (this.type == 345)
                    NPC.downedChristmasIceQueen = true;
                if (this.type == 346)
                    NPC.downedChristmasSantank = true;
                if ((this.type == 344 || this.type == 345 || this.type == 346) &&
                    (Main.rand.Next(maxValue2) == 0 && waveNumber >= 15))
                {
                    var maxValue3 = 4;
                    if (waveNumber == 16)
                        maxValue3 = 4;
                    if (waveNumber == 17)
                        maxValue3 = 3;
                    if (waveNumber == 18)
                        maxValue3 = 3;
                    if (waveNumber == 19)
                        maxValue3 = 2;
                    if (waveNumber >= 20)
                        maxValue3 = 2;
                    if (Main.expertMode && Main.rand.Next(3) == 0)
                        --maxValue3;
                    if (Main.rand.Next(maxValue3) == 0)
                    {
                        if (this.type == 344)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1962, 1,
                                false, 0, false, false);
                        if (this.type == 345)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1960, 1,
                                false, 0, false, false);
                        if (this.type == 346)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1961, 1,
                                false, 0, false, false);
                    }
                }

                if (Main.rand.Next(maxValue2) == 0)
                {
                    if (this.type == 344)
                    {
                        var num = Main.rand.Next(3);
                        if (Main.rand.Next(15) == 0)
                        {
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1871, 1,
                                false, -1, false, false);
                        }
                        else
                        {
                            if (num == 0)
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                                    1916, 1, false, 0, false, false);
                            if (num == 1)
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                                    1928, 1, false, -1, false, false);
                            if (num == 2)
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                                    1930, 1, false, -1, false, false);
                        }
                    }

                    if (this.type == 346)
                    {
                        var num = Main.rand.Next(2);
                        if (num == 0)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1910, 1,
                                false, -1, false, false);
                        if (num == 1)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1929, 1,
                                false, -1, false, false);
                    }

                    if (this.type == 345)
                    {
                        if (NPC.waveNumber >= 15 && Main.rand.Next(30) == 0)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1914, 1,
                                false, 0, false, false);
                        else if (Main.rand.Next(15) == 0)
                        {
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1959, 1,
                                false, 0, false, false);
                        }
                        else
                        {
                            var num = Main.rand.Next(3);
                            if (num == 0)
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                                    1931, 1, false, -1, false, false);
                            if (num == 1)
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                                    1946, 1, false, -1, false, false);
                            if (num == 2)
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                                    1947, 1, false, -1, false, false);
                        }
                    }
                }
            }

            if (this.type == 341)
            {
                var num = Main.rand.Next(5, 11);
                for (var index2 = 0; index2 < num; ++index2)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 58, 1, false, 0,
                        false, false);
                if (Main.xMas)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1869, 1, false,
                        0, false, false);
            }

            if (this.type >= 338 && this.type <= 340 && Main.rand.Next(5) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 58, 1, false, 0,
                    false, false);
            if (this.type >= 338 && this.type <= 340 && Main.rand.Next(200) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                    1943 + Main.rand.Next(3), 1, false, 0, false, false);
            if (this.type == 342 && Main.rand.Next(3) != 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 58, 1, false, 0,
                    false, false);
            if (Main.pumpkinMoon)
            {
                if (this.type == 325)
                    NPC.downedHalloweenTree = true;
                if (this.type == 327)
                    NPC.downedHalloweenKing = true;
                var waveNumber = NPC.waveNumber;
                if (Main.expertMode)
                    waveNumber += 6;
                var maxValue2 = (int) ((double) (17 - waveNumber) / 1.25);
                if (Main.expertMode)
                    --maxValue2;
                if (maxValue2 < 1)
                    maxValue2 = 1;
                if (waveNumber >= 15)
                {
                    if (this.type == 325)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1855, 1,
                            false, 0, false, false);
                    if (this.type == 327)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1856, 1,
                            false, 0, false, false);
                }

                if (Main.rand.Next(maxValue2) == 0)
                {
                    if (this.type == 315 && Main.rand.Next(20) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1857, 1,
                            false, 0, false, false);
                    if (this.type >= 305 && this.type <= 314 && Main.rand.Next(10) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            Main.rand.Next(1788, 1791), 1, false, 0, false, false);
                    if (this.type == 325)
                    {
                        var num = Main.rand.Next(5);
                        if (num == 0)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1829, 1,
                                false, 0, false, false);
                        if (num == 1)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1831, 1,
                                false, 0, false, false);
                        if (num == 2)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1835, 1,
                                false, -1, false, false);
                        if (num == 2)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1836,
                                Main.rand.Next(30, 61), false, 0, false, false);
                        if (num == 3)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1837, 1,
                                false, 0, false, false);
                        if (num == 4)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1845, 1,
                                false, -1, false, false);
                    }

                    if (this.type == 327)
                    {
                        var num = Main.rand.Next(7);
                        if (num == 0)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1782, 1,
                                false, -1, false, false);
                        if (num == 0)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1783,
                                Main.rand.Next(50, 101), false, 0, false, false);
                        if (num == 1)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1784, 1,
                                false, -1, false, false);
                        if (num == 1)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1785,
                                Main.rand.Next(25, 51), false, 0, false, false);
                        if (num == 2)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1811, 1,
                                false, 0, false, false);
                        if (num == 3)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1826, 1,
                                false, -1, false, false);
                        if (num == 4)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1801, 1,
                                false, -1, false, false);
                        if (num == 5)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1802, 1,
                                false, -1, false, false);
                        if (num == 6)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1798, 1,
                                false, 0, false, false);
                    }
                }
            }

            if (this.type == 325)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1729,
                    Main.rand.Next(30, 51), false, 0, false, false);
            if (this.type == 326)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1729,
                    Main.rand.Next(1, 5), false, 0, false, false);
            if (this.type >= 305 && this.type <= 314 && Main.rand.Next(4) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 58, 1, false, 0,
                    false, false);
            if (this.type == 326 && Main.rand.Next(6) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 58, 1, false, 0,
                    false, false);
            if (this.type == 329 && Main.rand.Next(4) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 58, 1, false, 0,
                    false, false);
            if (this.type == 330 && Main.rand.Next(4) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 58, 1, false, 0,
                    false, false);
            if (this.type == 315)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 58, 1, false, 0,
                    false, false);
            if (Main.halloween && this.lifeMax > 1 && (this.damage > 0 && !this.friendly) &&
                (this.type != 121 && this.type != 23 && ((double) this.value > 0.0 && Main.rand.Next(80) == 0)))
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1774, 1, false, 0,
                    false, false);
            if (Main.xMas && this.lifeMax > 1 && (this.damage > 0 && !this.friendly) &&
                (this.type != 121 && (double) this.value > 0.0 && Main.rand.Next(13) == 0))
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1869, 1, false, 0,
                    false, false);
            if (this.lifeMax > 5 && (double) this.value > 0.0 && (!this.friendly && Main.hardMode) &&
                ((double) this.position.Y / 16.0 > (double) (Main.maxTilesY - 200) && Main.rand.Next(50) == 0))
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2701,
                    Main.rand.Next(20, 51), false, 0, false, false);
            if (this.type == 325 || this.type == 327 || (this.type == 344 || this.type == 345) || this.type == 346)
            {
                var num = Main.rand.Next(6) + 6;
                for (var index2 = 0; index2 < num; ++index2)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 58, 1, false, 0,
                        false, false);
            }

            if (this.type == 156 && Main.rand.Next(75) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1518, 1, false, 0,
                    false, false);
            if (this.type == 243 && Main.rand.Next(3) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1519, 1, false, 0,
                    false, false);
            if (this.type >= 269 && this.type <= 280 && Main.rand.Next(450) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1517, 1, false, 0,
                    false, false);
            if ((this.type == 158 || this.type == 159) && Main.rand.Next(40) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1520, 1, false, 0,
                    false, false);
            if (this.type == 176 && Main.rand.Next(150) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1521, 1, false, 0,
                    false, false);
            if (this.type == 48 && Main.rand.Next(200) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1516, 1, false, 0,
                    false, false);
            if (this.type == 205 && Main.rand.Next(2) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1611, 1, false, 0,
                    false, false);
            if (this.type == 483 || this.type == 482)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3086,
                    Main.rand.Next(5, 11), false, -1, false, false);
            if (!Main.hardMode && Main.rand.Next(100) == 0 && (this.HasPlayerTarget && this.lifeMax > 5) &&
                (!this.friendly && Main.rand.Next(4) == 0 &&
                 ((double) this.position.Y / 16.0 > (double) (Main.maxTilesY - 350) && NPC.downedBoss3)))
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3282, 1, false, -1,
                    false, false);
            if (Main.hardMode && this.HasPlayerTarget &&
                (Main.player[this.target].ZoneSnow && Main.rand.Next(300) == 0) &&
                (this.HasPlayerTarget && this.lifeMax > 5 && (!this.friendly && (double) this.value > 0.0)))
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3289, 1, false, -1,
                    false, false);
            else if (Main.hardMode && Main.rand.Next(200) == 0 && (this.HasPlayerTarget && this.lifeMax > 5) &&
                     (!this.friendly && (double) this.value > 0.0))
            {
                if (Main.player[this.target].ZoneJungle && NPC.downedMechBossAny)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3286, 1, false,
                        -1, false, false);
                else if (Main.player[this.target].ZoneDungeon && NPC.downedPlantBoss && Main.rand.Next(2) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3291, 1, false,
                        -1, false, false);
                else if ((double) this.position.Y / 16.0 > (Main.rockLayer + (double) Main.maxTilesY) / 2.0 &&
                         !Main.player[this.target].ZoneDungeon && Main.rand.Next(2) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3290, 1, false,
                        -1, false, false);
            }

            var num1 = 1;
            if (Main.expertMode && Main.rand.Next(2) == 0)
                num1 = 2;
            for (var index2 = 0; index2 < num1; ++index2)
            {
                if (this.type == 461 && Main.rand.Next(50) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 497, 1, false,
                        -1, false, false);
                if ((this.type == 159 || this.type == 158) && Main.rand.Next(35) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 900, 1, false,
                        -1, false, false);
                if (this.type == 251 && Main.rand.Next(15) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1311, 1, false,
                        -1, false, false);
                if (NPC.downedMechBoss1 && NPC.downedMechBoss2 && NPC.downedMechBoss3)
                {
                    if (this.type == 477)
                    {
                        if (Main.rand.Next(20) == 0 && NPC.downedPlantBoss)
                        {
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2770, 1,
                                false, -1, false, false);
                            ++index2;
                        }

                        if (Main.rand.Next(4) == 0)
                        {
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1570, 1,
                                false, -1, false, false);
                            ++index2;
                        }
                        else if (Main.rand.Next(3) == 0 && NPC.downedPlantBoss)
                        {
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3292, 1,
                                false, -1, false, false);
                            ++index2;
                        }
                    }

                    if (this.type == 253 && Main.rand.Next(40) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1327, 1,
                            false, -1, false, false);
                }

                if (NPC.downedPlantBoss)
                {
                    if (this.type == 460 && Main.rand.Next(40) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3098, 1,
                            false, -1, false, false);
                    if (this.type == 468 && Main.rand.Next(40) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3105, 1,
                            false, -1, false, false);
                    if (this.type == 466 && Main.rand.Next(40) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3106, 1,
                            false, -1, false, false);
                    if (this.type == 467 && Main.rand.Next(40) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3249, 1,
                            false, -1, false, false);
                    if (this.type == 463 && Main.rand.Next(25) == 0)
                    {
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3107, 1,
                            false, -1, false, false);
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3108,
                            Main.rand.Next(100, 201), false, -1, false, false);
                    }
                }
            }

            if (Main.bloodMoon && Main.hardMode && (Main.rand.Next(1000) == 0 && (double) this.value > 0.0))
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1314, 1, false, -1,
                    false, false);
            if (this.type == 77 && Main.rand.Next(150) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 723, 1, false, -1,
                    false, false);
            if (Main.rand.Next(100) == 0 || Main.expertMode && Main.rand.Next(100) == 0)
            {
                var Type1 = -1;
                var Type2 = -1;
                switch (this.type)
                {
                    case 34:
                    case 83:
                    case 84:
                    case 179:
                        Type1 = 891;
                        break;
                    case 42:
                    case 141:
                    case 176:
                    case 231:
                    case 232:
                    case 233:
                    case 234:
                    case 235:
                        Type1 = 887;
                        break;
                    case 75:
                        Type1 = Main.rand.Next(2) != 0 ? 890 : 889;
                        if (Main.rand.Next(100) == 0)
                        {
                            Type2 = Type1 != 889 ? 889 : 890;
                            break;
                        }

                        break;
                    case 77:
                    case 273:
                    case 274:
                    case 275:
                    case 276:
                        Type1 = 886;
                        break;
                    case 78:
                    case 82:
                        Type1 = 889;
                        break;
                    case 79:
                        Type1 = Main.rand.Next(2) != 0 ? 890 : 888;
                        if (Main.rand.Next(100) == 0)
                        {
                            Type2 = Type1 != 888 ? 888 : 890;
                            break;
                        }

                        break;
                    case 80:
                    case 93:
                    case 109:
                        Type1 = 893;
                        break;
                    case 81:
                        Type1 = 888;
                        break;
                    case 94:
                    case 182:
                        Type1 = 892;
                        break;
                    case 102:
                    case 104:
                    case 269:
                    case 270:
                    case 271:
                    case 272:
                        Type1 = 885;
                        break;
                    case 103:
                        Type1 = 890;
                        break;
                    case 480:
                        Type1 = 3781;
                        break;
                }

                if (Type1 != -1)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, Type1, 1, false,
                        -1, false, false);
                if (Type2 != -1)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, Type2, 1, false,
                        -1, false, false);
            }

            var num2 = 1;
            if (Main.expertMode && Main.rand.Next(2) == 0)
                num2 = 2;
            for (var index2 = 0; index2 < num2; ++index2)
            {
                if (this.type == 290)
                {
                    if (Main.rand.Next(15) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1513, 1,
                            false, -1, false, false);
                    else if (Main.rand.Next(10) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 938, 1,
                            false, -1, false, false);
                }

                if (this.type == 287 && Main.rand.Next(6) == 0)
                {
                    if (Main.rand.Next(2) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 963, 1,
                            false, -1, false, false);
                    else
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 977, 1,
                            false, -1, false, false);
                }

                if (this.type == 291)
                {
                    if (Main.rand.Next(12) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1300, 1,
                            false, -1, false, false);
                    else if (Main.rand.Next(12) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1254, 1,
                            false, -1, false, false);
                }

                if (this.type == 292)
                {
                    if (Main.rand.Next(12) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1514, 1,
                            false, -1, false, false);
                    else if (Main.rand.Next(12) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 679, 1,
                            false, -1, false, false);
                }

                if (this.type == 293 && Main.rand.Next(18) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 759, 1, false,
                        -1, false, false);
                if ((this.type == 281 || this.type == 282) && Main.rand.Next(20) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1446, 1, false,
                        -1, false, false);
                if ((this.type == 283 || this.type == 284) && Main.rand.Next(20) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1444, 1, false,
                        -1, false, false);
                if ((this.type == 285 || this.type == 286) && Main.rand.Next(20) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1445, 1, false,
                        -1, false, false);
                if (this.type >= 269 && this.type <= 280)
                {
                    if (Main.rand.Next(400) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1183, 1,
                            false, -1, false, false);
                    else if (Main.rand.Next(300) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1266, 1,
                            false, -1, false, false);
                    else if (Main.rand.Next(200) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 671, 1,
                            false, -1, false, false);
                }
            }

            if (this.lifeMax > 100 && this.type != 288 && ((double) this.value > 0.0 && this.HasPlayerTarget) &&
                (Main.hardMode && NPC.downedPlantBoss && Main.player[this.target].ZoneDungeon))
            {
                var maxValue2 = 13;
                if (Main.expertMode)
                    maxValue2 = 9;
                if (Main.rand.Next(maxValue2) == 0 &&
                    Main.wallDungeon[(int) Main.tile[(int) this.Center.X / 16, (int) this.Center.Y / 16].wall])
                    NPC.NewNPC((int) this.Center.X, (int) this.Center.Y, 288, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                        (int) byte.MaxValue);
            }

            if (this.type == 288)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1508,
                    Main.rand.Next(1, 3), false, -1, false, false);
            if (this.type == 156 && Main.rand.Next(30) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 683, 1, false, -1,
                    false, false);
            if ((this.type == 195 || this.type == 196) && (Main.expertMode || Main.rand.Next(2) == 0))
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3102, 1, false, -1,
                    false, false);
            if (this.type == 245)
            {
                if (Main.expertMode)
                {
                    this.DropBossBags();
                }
                else
                {
                    if (Main.rand.Next(7) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2110, 1,
                            false, -1, false, false);
                    switch (Main.rand.Next(8))
                    {
                        case 0:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1258, 1,
                                false, -1, false, false);
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1261,
                                Main.rand.Next(60, 100), false, 0, false, false);
                            break;
                        case 1:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1122, 1,
                                false, -1, false, false);
                            break;
                        case 2:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 899, 1,
                                false, -1, false, false);
                            break;
                        case 3:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1248, 1,
                                false, -1, false, false);
                            break;
                        case 4:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1294, 1,
                                false, -1, false, false);
                            break;
                        case 5:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1295, 1,
                                false, -1, false, false);
                            break;
                        case 6:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1296, 1,
                                false, -1, false, false);
                            break;
                        case 7:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1297, 1,
                                false, -1, false, false);
                            break;
                    }

                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2218,
                        Main.rand.Next(4, 9), false, -1, false, false);
                }

                NPC.downedGolemBoss = true;
            }

            if (this.type == 471 && (Main.expertMode || Main.rand.Next(2) == 0))
            {
                if (Main.rand.Next(3) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3052, 1, false,
                        -1, false, false);
                else if (Main.rand.Next(2) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3053, 1, false,
                        -1, false, false);
                else
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3054, 1, false,
                        -1, false, false);
            }

            if (this.type == 268)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1332,
                    Main.rand.Next(2, 6), false, 0, false, false);
            if (this.type == 370)
            {
                NPC.downedFishron = true;
                if (Main.expertMode)
                {
                    this.DropBossBags();
                }
                else
                {
                    if (Main.rand.Next(7) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2588, 1,
                            false, -1, false, false);
                    if (Main.rand.Next(15) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2609, 1,
                            false, -1, false, false);
                    switch (Main.rand.Next(5))
                    {
                        case 0:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2611, 1,
                                false, -1, false, false);
                            break;
                        case 1:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2624, 1,
                                false, -1, false, false);
                            break;
                        case 2:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2622, 1,
                                false, -1, false, false);
                            break;
                        case 3:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2621, 1,
                                false, -1, false, false);
                            break;
                        case 4:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2623, 1,
                                false, -1, false, false);
                            break;
                    }
                }
            }

            if (this.type == 109 && !NPC.downedClown)
            {
                NPC.downedClown = true;
                if (Main.netMode == 2)
                    NetMessage.SendData(7, -1, -1, (NetworkText) null, 0, 0.0f, 0.0f, 0.0f, 0, 0, 0);
            }

            if (this.type == 153 && Main.rand.Next(17) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1328, 1, false, -1,
                    false, false);
            if (this.type == 120 && Main.rand.Next(500) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1326, 1, false, -1,
                    false, false);
            if (this.type == 49 && Main.rand.Next(250) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1325, 1, false, -1,
                    false, false);
            if (this.type == 185 && Main.rand.Next(150) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 951, 1, false, -1,
                    false, false);
            if (this.type == 44 && Main.rand.Next(50) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1320, 1, false, -1,
                    false, false);
            if (this.type == 44 && Main.rand.Next(20) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 88, 1, false, -1,
                    false, false);
            if (this.type == 110 && Main.rand.Next(80) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1321, 1, false, -1,
                    false, false);
            if (this.type == 60 && Main.rand.Next(150) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1322, 1, false, -1,
                    false, false);
            if (this.type == 151 && Main.rand.Next(50) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1322, 1, false, -1,
                    false, false);
            if (this.type == 24 && Main.rand.Next(50) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1323, 1, false, -1,
                    false, false);
            if (this.type == 109 && Main.rand.Next(30) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1324,
                    Main.rand.Next(1, 5), false, -1, false, false);
            if (this.type == 163 || this.type == 238)
            {
                if (Main.rand.Next(40) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1308, 1, false,
                        -1, false, false);
                if (Main.expertMode)
                {
                    if (Main.rand.Next(3) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2607,
                            Main.rand.Next(2, 4), false, 0, false, false);
                    else if (Main.rand.Next(2) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2607,
                            Main.rand.Next(1, 4), false, 0, false, false);
                    else
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2607, 1,
                            false, 0, false, false);
                }
                else if (Main.rand.Next(4) != 0)
                {
                    if (Main.rand.Next(3) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2607,
                            Main.rand.Next(1, 4), false, 0, false, false);
                    else if (Main.rand.Next(2) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2607,
                            Main.rand.Next(1, 3), false, 0, false, false);
                    else
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2607, 1,
                            false, 0, false, false);
                }
            }

            if (Main.hardMode && (this.type == 197 || this.type == 206 || (this.type == 169 || this.type == 154)) &&
                Main.rand.Next(180) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1306, 1, false, -1,
                    false, false);
            if (this.type == 244)
            {
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 23,
                    Main.rand.Next(1, 6), false, 0, false, false);
                if (Main.rand.Next(2) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 23,
                        Main.rand.Next(1, 6), false, 0, false, false);
                if (Main.rand.Next(2) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 23,
                        Main.rand.Next(1, 6), false, 0, false, false);
                if (Main.rand.Next(2) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 23,
                        Main.rand.Next(1, 6), false, 0, false, false);
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 662,
                    Main.rand.Next(30, 60), false, 0, false, false);
            }

            if (this.type == 250 && Main.rand.Next(15) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1244, 1, false, -1,
                    false, false);
            if (this.type == 172)
            {
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 754, 1, false, -1,
                    false, false);
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 755, 1, false, -1,
                    false, false);
            }

            if (this.type == 110 && Main.rand.Next(200) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 682, 1, false, -1,
                    false, false);
            if (this.type == 154 && Main.rand.Next(100) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1253, 1, false, -1,
                    false, false);
            if ((this.type == 169 || this.type == 206) && Main.rand.Next(50) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 726, 1, false, -1,
                    false, false);
            if (this.type == 243)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2161, 1, false, -1,
                    false, false);
            if (this.type == 480 && Main.rand.Next(50) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3269, 1, false, -1,
                    false, false);
            if (this.type == 198 || this.type == 199 || this.type == 226)
            {
                if (Main.rand.Next(1000) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1172, 1, false,
                        -1, false, false);
                if (Main.rand.Next(50) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1293, 1, false,
                        -1, false, false);
                if (Main.rand.Next(7) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2766,
                        Main.rand.Next(1, 3), false, -1, false, false);
            }

            if (this.type == 78 || this.type == 79 || this.type == 80)
            {
                if (Main.rand.Next(75) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 870, 1, false,
                        -1, false, false);
                if (Main.rand.Next(75) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 871, 1, false,
                        -1, false, false);
                if (Main.rand.Next(75) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 872, 1, false,
                        -1, false, false);
            }

            if (this.type == 473)
            {
                switch (Main.rand.Next(5))
                {
                    case 0:
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3008, 1,
                            false, -1, false, false);
                        break;
                    case 1:
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3014, 1,
                            false, -1, false, false);
                        break;
                    case 2:
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3012, 1,
                            false, -1, false, false);
                        break;
                    case 3:
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3015, 1,
                            false, -1, false, false);
                        break;
                    case 4:
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3023, 1,
                            false, -1, false, false);
                        break;
                }
            }
            else if (this.type == 474)
            {
                switch (Main.rand.Next(5))
                {
                    case 0:
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3006, 1,
                            false, -1, false, false);
                        break;
                    case 1:
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3007, 1,
                            false, -1, false, false);
                        break;
                    case 2:
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3013, 1,
                            false, -1, false, false);
                        break;
                    case 3:
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3016, 1,
                            false, -1, false, false);
                        break;
                    case 4:
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3020, 1,
                            false, -1, false, false);
                        break;
                }
            }
            else if (this.type == 475)
            {
                switch (Main.rand.Next(4))
                {
                    case 0:
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3029, 1,
                            false, -1, false, false);
                        break;
                    case 1:
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3030, 1,
                            false, -1, false, false);
                        break;
                    case 2:
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3051, 1,
                            false, -1, false, false);
                        break;
                    case 3:
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3022, 1,
                            false, -1, false, false);
                        break;
                }
            }
            else
            {
                var type = this.type;
            }

            if (this.type == 473 || this.type == 474 || (this.type == 475 || this.type == 476))
            {
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 499,
                    Main.rand.Next(5, 11), false, -1, false, false);
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 500,
                    Main.rand.Next(5, 16), false, -1, false, false);
            }

            if (this.type == 85 && (double) this.value > 0.0)
            {
                if ((double) this.ai[3] == 4.0)
                {
                    if (Main.rand.Next(20) == 0)
                    {
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1312, 1,
                            false, -1, false, false);
                    }
                    else
                    {
                        switch (Main.rand.Next(3))
                        {
                            case 0:
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 676,
                                    1, false, -1, false, false);
                                break;
                            case 1:
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 725,
                                    1, false, -1, false, false);
                                break;
                            case 2:
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                                    1264, 1, false, -1, false, false);
                                break;
                        }
                    }
                }
                else
                {
                    switch (Main.rand.Next(6))
                    {
                        case 0:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 437, 1,
                                false, -1, false, false);
                            break;
                        case 1:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 517, 1,
                                false, -1, false, false);
                            break;
                        case 2:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 535, 1,
                                false, -1, false, false);
                            break;
                        case 3:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 536, 1,
                                false, -1, false, false);
                            break;
                        case 4:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 532, 1,
                                false, -1, false, false);
                            break;
                        default:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 554, 1,
                                false, -1, false, false);
                            break;
                    }
                }
            }

            if (this.type == 87)
            {
                if (Main.expertMode)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 575,
                        Main.rand.Next(5, 11) * 2, false, 0, false, false);
                else
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 575,
                        Main.rand.Next(5, 11), false, 0, false, false);
            }

            if (this.type >= 212 && this.type <= 215)
            {
                if (Main.rand.Next(8000) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 905, 1, false,
                        -1, false, false);
                if (Main.rand.Next(4000) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 855, 1, false,
                        -1, false, false);
                if (Main.rand.Next(2000) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 854, 1, false,
                        -1, false, false);
                if (Main.rand.Next(2000) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2584, 1, false,
                        -1, false, false);
                if (Main.rand.Next(1000) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3033, 1, false,
                        -1, false, false);
                if (Main.rand.Next(200) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 672, 1, false,
                        -1, false, false);
                if (Main.rand.Next(500) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1277, 1, false,
                        0, false, false);
                if (Main.rand.Next(500) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1278, 1, false,
                        0, false, false);
                if (Main.rand.Next(500) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1279, 1, false,
                        0, false, false);
                if (Main.rand.Next(500) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1280, 1, false,
                        0, false, false);
                if (Main.rand.Next(300) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1704, 1, false,
                        0, false, false);
                if (Main.rand.Next(300) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1705, 1, false,
                        0, false, false);
                if (Main.rand.Next(300) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1710, 1, false,
                        0, false, false);
                if (Main.rand.Next(300) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1716, 1, false,
                        0, false, false);
                if (Main.rand.Next(300) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1720, 1, false,
                        0, false, false);
                if (Main.rand.Next(300) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2379, 1, false,
                        0, false, false);
                if (Main.rand.Next(300) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2389, 1, false,
                        0, false, false);
                if (Main.rand.Next(300) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2405, 1, false,
                        0, false, false);
                if (Main.rand.Next(300) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2843, 1, false,
                        0, false, false);
                if (Main.rand.Next(300) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3885, 1, false,
                        0, false, false);
                if (Main.rand.Next(300) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2663, 1, false,
                        0, false, false);
                if (Main.rand.Next(150) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3904,
                        Main.rand.Next(6, 11) * 5, false, 0, false, false);
                if (Main.rand.Next(300) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3910, 1, false,
                        0, false, false);
                if (Main.rand.Next(300) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2238, 1, false,
                        0, false, false);
                if (Main.rand.Next(300) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2133, 1, false,
                        0, false, false);
                if (Main.rand.Next(300) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2137, 1, false,
                        0, false, false);
                if (Main.rand.Next(300) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2143, 1, false,
                        0, false, false);
                if (Main.rand.Next(300) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2147, 1, false,
                        0, false, false);
                if (Main.rand.Next(300) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2151, 1, false,
                        0, false, false);
                if (Main.rand.Next(300) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2155, 1, false,
                        0, false, false);
                if (Main.rand.Next(500) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3263, 1, false,
                        0, false, false);
                if (Main.rand.Next(500) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3264, 1, false,
                        0, false, false);
                if (Main.rand.Next(500) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3265, 1, false,
                        0, false, false);
            }
            else if (this.type == 216)
            {
                if (Main.rand.Next(2000) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 905, 1, false,
                        -1, false, false);
                if (Main.rand.Next(1000) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 855, 1, false,
                        -1, false, false);
                if (Main.rand.Next(500) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 854, 1, false,
                        -1, false, false);
                if (Main.rand.Next(500) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2584, 1, false,
                        -1, false, false);
                if (Main.rand.Next(250) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3033, 1, false,
                        -1, false, false);
                if (Main.rand.Next(50) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 672, 1, false,
                        -1, false, false);
            }
            else if (this.type == 491)
            {
                if (Main.rand.Next(400) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 905, 1, false,
                        -1, false, false);
                else if (Main.rand.Next(200) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 855, 1, false,
                        -1, false, false);
                else if (Main.rand.Next(100) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 854, 1, false,
                        -1, false, false);
                else if (Main.rand.Next(100) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2584, 1, false,
                        -1, false, false);
                else if (Main.rand.Next(50) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3033, 1, false,
                        -1, false, false);
                else if (Main.rand.Next(10) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 672, 1, false,
                        -1, false, false);
            }

            if ((this.type == 161 || this.type == 431) && Main.rand.Next(50) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                    803 + Main.rand.Next(3), 1, false, 0, false, false);
            if (this.type == 217)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1115, 1, false, -1,
                    false, false);
            if (this.type == 218)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1116, 1, false, -1,
                    false, false);
            if (this.type == 219)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1117, 1, false, -1,
                    false, false);
            if (this.type == 220)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1118, 1, false, -1,
                    false, false);
            if (this.type == 221)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1119, 1, false, -1,
                    false, false);
            if (this.type == 167 && Main.rand.Next(50) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 879, 1, false, -1,
                    false, false);
            if (this.type == 143 || this.type == 144 || this.type == 145)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 593,
                    Main.rand.Next(5, 11), false, 0, false, false);
            if (this.type == 79)
            {
                if (Main.rand.Next(10) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 527, 1, false,
                        0, false, false);
            }
            else if (this.type == 80 && Main.rand.Next(10) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 528, 1, false, 0,
                    false, false);

            if (this.type == 524 && Main.rand.Next(10) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3794,
                    Main.rand.Next(1, 4), false, 0, false, false);
            if (this.type == 525)
            {
                if (Main.rand.Next(10) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3794, 1, false,
                        0, false, false);
                if (Main.rand.Next(3) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 522,
                        Main.rand.Next(1, 4), false, 0, false, false);
                if (Main.rand.Next(15) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 527, 1, false,
                        0, false, false);
            }

            if (this.type == 526)
            {
                if (Main.rand.Next(10) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3794, 1, false,
                        0, false, false);
                if (Main.rand.Next(3) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1332,
                        Main.rand.Next(1, 4), false, 0, false, false);
                if (Main.rand.Next(15) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 527, 1, false,
                        0, false, false);
            }

            if (this.type == 527)
            {
                if (Main.rand.Next(10) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3794, 1, false,
                        0, false, false);
                if (Main.rand.Next(15) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 528, 1, false,
                        0, false, false);
            }

            if (this.type == 532)
            {
                if (Main.rand.Next(3) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3380, 1, false,
                        0, false, false);
                if (Main.rand.Next(50) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3771, 1, false,
                        0, false, false);
            }

            if (this.type == 528)
            {
                if (Main.rand.Next(25) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2802, 1, false,
                        0, false, false);
                if (Main.rand.Next(60) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        3784 + Main.rand.Next(3), 1, false, 0, false, false);
            }
            else if (this.type == 529)
            {
                if (Main.rand.Next(25) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2801, 1, false,
                        0, false, false);
                if (Main.rand.Next(40) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        3784 + Main.rand.Next(3), 1, false, 0, false, false);
            }

            if ((this.type == 49 || this.type == 51 || (this.type == 150 || this.type == 93)) &&
                Main.rand.Next(100) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 18, 1, false, -1,
                    false, false);
            if ((this.type == 16 || this.type == 185 || (this.type == 167 || this.type == 197)) &&
                Main.rand.Next(50) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 393, 1, false, -1,
                    false, false);
            if (this.type == 58 && Main.rand.Next(75) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 393, 1, false, -1,
                    false, false);
            if (this.type >= 494 && this.type <= 506)
            {
                if (Main.rand.Next(80) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 18, 1, false,
                        -1, false, false);
                else if (Main.rand.Next(80) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 393, 1, false,
                        -1, false, false);
                else if (Main.rand.Next(25) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3285, 1, false,
                        -1, false, false);
            }

            if (this.type == 21 || this.type == 201 || (this.type == 202 || this.type == 203) ||
                (this.type == 322 || this.type == 323 || this.type == 324) || this.type >= 449 && this.type <= 452)
            {
                if (Main.rand.Next(100) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 954, 1, false,
                        -1, false, false);
                else if (Main.rand.Next(200) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 955, 1, false,
                        -1, false, false);
                else if (Main.rand.Next(200) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1166, 1, false,
                        -1, false, false);
                else if (Main.rand.Next(500) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1274, 1, false,
                        -1, false, false);
            }
            else if (this.type == 6)
            {
                if (Main.rand.Next(175) == 0)
                {
                    switch (Main.rand.Next(3))
                    {
                        case 0:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 956, 1,
                                false, -1, false, false);
                            break;
                        case 1:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 957, 1,
                                false, -1, false, false);
                            break;
                        default:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 958, 1,
                                false, -1, false, false);
                            break;
                    }
                }
            }
            else if (this.type == 42 || this.type == 43 || this.type >= 231 && this.type <= 235)
            {
                if (Main.rand.Next(100) == 0)
                {
                    switch (Main.rand.Next(3))
                    {
                        case 0:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 960, 1,
                                false, -1, false, false);
                            break;
                        case 1:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 961, 1,
                                false, -1, false, false);
                            break;
                        default:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 962, 1,
                                false, -1, false, false);
                            break;
                    }
                }
            }
            else if (this.type == 31 || this.type == 32 || (this.type == 294 || this.type == 295) || this.type == 296)
            {
                if (Main.rand.Next(450) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 959, 1, false,
                        -1, false, false);
                if (Main.rand.Next(300) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1307, 1, false,
                        -1, false, false);
            }

            if ((this.type == 174 || this.type == 179 || (this.type == 182 || this.type == 183)) &&
                Main.rand.Next(200) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 996, 1, false, 0,
                    false, false);
            if (this.type == 101 || this.type == 98)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 522,
                    Main.rand.Next(2, 6), false, 0, false, false);
            if (this.type == 86)
            {
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 526, 1, false, 0,
                    false, false);
                if (Main.rand.Next(100) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 856, 1, false,
                        0, false, false);
            }

            if (this.type == 186 || this.type == 432)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 40,
                    Main.rand.Next(1, 10), false, 0, false, false);
            if (this.type == 225)
            {
                if (Main.rand.Next(45) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1243, 1, false,
                        0, false, false);
                else
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 23,
                        Main.rand.Next(2, 7), false, 0, false, false);
            }

            if (this.type == 537)
            {
                var Stack = Main.rand.Next(1, 3);
                if (Main.expertMode)
                {
                    if (this.netID == -7)
                        ++Stack;
                    if (this.netID == -8 || this.netID == -9)
                        Stack += Main.rand.Next(2);
                }

                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 23, Stack, false, 0,
                    false, false);
                var maxValue2 = 8000;
                if (Main.expertMode)
                    maxValue2 = (int) ((double) maxValue2 * 0.7);
                if (Main.rand.Next(maxValue2) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1309, 1, false,
                        -1, false, false);
            }

            if (this.type >= 333 && this.type <= 336 && Main.rand.Next(20) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1906, 1, false, 0,
                    false, false);
            if (this.netID == -4)
            {
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3111,
                    Main.rand.Next(25, 51), false, 0, false, false);
                var maxValue2 = 100;
                if (Main.expertMode)
                    maxValue2 = (int) ((double) maxValue2 * 0.7);
                if (Main.rand.Next(maxValue2) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1309, 1, false,
                        -1, false, false);
            }
            else if (this.type == 1 || this.type == 16 || (this.type == 138 || this.type == 141) ||
                     (this.type == 147 || this.type == 184 || (this.type == 187 || this.type == 204)) ||
                     (this.type == 302 || this.type >= 333 && this.type <= 336 || this.type == 535))
            {
                var Stack = Main.rand.Next(1, 3);
                if (Main.expertMode)
                {
                    if (this.netID == -7)
                        ++Stack;
                    if (this.netID == -8 || this.netID == -9)
                        Stack += Main.rand.Next(2);
                }

                var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 23,
                    Stack, false, 0, false, false);
                if (this.netID <= 1 && this.netID != -1 && (this.netID != -2 && this.netID != -5) && this.netID != -6)
                {
                    Main.item[number].color = this.color;
                    NetMessage.SendData(88, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }

                var maxValue2 = 10000;
                if (Main.expertMode)
                    maxValue2 = (int) ((double) maxValue2 * 0.7);
                if (Main.rand.Next(maxValue2) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1309, 1, false,
                        -1, false, false);
            }

            if (this.type == 75)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 501,
                    Main.rand.Next(1, 4), false, 0, false, false);
            if (this.type == 81 || this.type == 183)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 23,
                    Main.rand.Next(2, 5), false, 0, false, false);
            if (this.type == 122)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 23,
                    Main.rand.Next(5, 11), false, 0, false, false);
            if (this.type == 71)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 327, 1, false, 0,
                    false, false);
            if (this.type == 2 || this.type == 317 || (this.type == 318 || this.type == 190) ||
                (this.type == 191 || this.type == 192 || (this.type == 193 || this.type == 194)) || this.type == 133)
            {
                if (Main.rand.Next(3) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 38, 1, false, 0,
                        false, false);
                else if (Main.rand.Next(100) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 236, 1, false,
                        0, false, false);
            }

            if (this.type == 104 && Main.rand.Next(60) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 485, 1, false, -1,
                    false, false);
            if (this.type == 58)
            {
                if (Main.rand.Next(250) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 263, 1, false,
                        0, false, false);
                else if (Main.rand.Next(30) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 118, 1, false,
                        0, false, false);
            }

            if (this.type == 102 && Main.rand.Next(250) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 263, 1, false, 0,
                    false, false);
            if (this.type == 3 || this.type == 331 || (this.type == 332 || this.type == 132) ||
                (this.type == 161 || this.type == 186 || (this.type == 187 || this.type == 188)) ||
                (this.type == 189 || this.type == 200 || (this.type == 223 || this.type == 319) ||
                 (this.type == 320 || this.type == 321 || this.type >= 430 && this.type <= 436)))
            {
                if (Main.rand.Next(50) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 216, 1, false,
                        -1, false, false);
                if (Main.rand.Next(250) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1304, 1, false,
                        -1, false, false);
            }

            if ((this.type == 489 || this.type == 490) && (Main.expertMode || Main.rand.Next(2) == 0))
            {
                if (Main.rand.Next(75) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3212, 1, false,
                        -1, false, false);
                if (Main.rand.Next(100) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3213, 1, false,
                        -1, false, false);
            }

            if (this.type == 223 && Main.rand.Next(20) == 0)
            {
                if (Main.rand.Next(2) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1135, 1, false,
                        -1, false, false);
                else
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1136, 1, false,
                        -1, false, false);
            }

            if (this.type == 66)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 267, 1, false, 0,
                    false, false);
            if ((this.type == 62 || this.type == 66) && Main.rand.Next(35) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 272, 1, false, -1,
                    false, false);
            if ((double) this.value > 0.0 && Main.hardMode &&
                (double) this.position.Y / 16.0 < Main.worldSurface + 10.0 &&
                (((double) this.Center.X / 16.0 < 380.0 ||
                  (double) this.Center.X / 16.0 > (double) (Main.maxTilesX - 380)) && Main.rand.Next(100) == 0))
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1315, 1, false, 0,
                    false, false);
            if (this.type == 52)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 251, 1, false, 0,
                    false, false);
            if (this.type == 53)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 239, 1, false, 0,
                    false, false);
            if (this.type == 536)
            {
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3478, 1, false, 0,
                    false, false);
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3479, 1, false, 0,
                    false, false);
            }

            if (this.type == 54)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 260, 1, false, 0,
                    false, false);
            if (this.type == 368)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2222, 1, false, 0,
                    false, false);
            if ((this.type == 69 || this.type == 509 || this.type == 508) && Main.rand.Next(3) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 323,
                    Main.rand.Next(1, 3), false, 0, false, false);
            if (this.type == 508 && Main.rand.Next(50) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3772, 1, false, 0,
                    false, false);
            if (this.type == 73)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 362,
                    Main.rand.Next(1, 3), false, 0, false, false);
            if ((this.type == 483 || this.type == 482) && Main.rand.Next(30) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3109, 1, false, 0,
                    false, false);
            if ((this.type == 6 || this.type == 94) && Main.rand.Next(3) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 68, 1, false, 0,
                    false, false);
            if ((this.type == 181 || this.type == 173 || (this.type == 239 || this.type == 182) || this.type == 240) &&
                Main.rand.Next(3) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1330, 1, false, 0,
                    false, false);
            if (this.type == 7 || this.type == 8 || this.type == 9)
            {
                if (Main.rand.Next(3) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 68,
                        Main.rand.Next(1, 3), false, 0, false, false);
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 69,
                    Main.rand.Next(3, 9), false, 0, false, false);
            }

            if ((this.type == 10 || this.type == 11 || (this.type == 12 || this.type == 95) ||
                 (this.type == 96 || this.type == 97)) &&
                (Main.rand.Next(50) == 0 || Main.expertMode && Main.rand.Next(50) == 0))
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 215, 1, false, 0,
                    false, false);
            if ((this.type == 47 || this.type == 464) && Main.rand.Next(75) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 243, 1, false, 0,
                    false, false);
            if ((this.type == 168 || this.type == 470) && Main.rand.Next(50) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                    (int) Utils.SelectRandom<short>(Main.rand, new short[3]
                    {
                        (short) 3757,
                        (short) 3758,
                        (short) 3759
                    }), 1, false, 0, false, false);
            if (this.type == 533)
            {
                if (Main.rand.Next(40) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3795, 1, false,
                        0, false, false);
                else if (Main.rand.Next(30) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3770, 1, false,
                        0, false, false);
            }

            if (this.type == 551)
            {
                if (Main.expertMode)
                {
                    this.DropBossBags();
                }
                else
                {
                    switch (Main.rand.Next(4))
                    {
                        case 0:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3859, 1,
                                false, -1, false, false);
                            break;
                        case 1:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3827, 1,
                                false, -1, false, false);
                            break;
                        case 2:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3870, 1,
                                false, -1, false, false);
                            break;
                        default:
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3858, 1,
                                false, -1, false, false);
                            break;
                    }

                    if (Main.rand.Next(7) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3863, 1,
                            false, -1, false, false);
                    if (Main.rand.Next(4) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3883, 1,
                            false, -1, false, false);
                }
            }

            if (this.type == 4)
            {
                if (Main.expertMode)
                {
                    this.DropBossBags();
                }
                else
                {
                    if (Main.rand.Next(7) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2112, 1,
                            false, -1, false, false);
                    if (Main.rand.Next(40) == 0 || Main.expertMode && Main.rand.Next(20) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1299, 1,
                            false, 0, false, false);
                    if (Main.expertMode)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3097, 1,
                            false, -1, false, false);
                    var num3 = 1;
                    if (Main.expertMode)
                        num3 = 2;
                    for (var index2 = 0; index2 < num3; ++index2)
                    {
                        if (WorldGen.crimson)
                        {
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 880,
                                Main.rand.Next(20) + 10, false, 0, false, false);
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 880,
                                Main.rand.Next(20) + 10, false, 0, false, false);
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 880,
                                Main.rand.Next(20) + 10, false, 0, false, false);
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2171,
                                Main.rand.Next(3) + 1, false, 0, false, false);
                        }
                        else
                        {
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 47,
                                Main.rand.Next(30) + 20, false, 0, false, false);
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 56,
                                Main.rand.Next(20) + 10, false, 0, false, false);
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 56,
                                Main.rand.Next(20) + 10, false, 0, false, false);
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 56,
                                Main.rand.Next(20) + 10, false, 0, false, false);
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 59,
                                Main.rand.Next(3) + 1, false, 0, false, false);
                        }
                    }
                }
            }

            if (this.type == 266)
            {
                if (Main.expertMode)
                {
                    this.DropBossBags();
                }
                else
                {
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 880,
                        Main.rand.Next(20, 46), false, 0, false, false);
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 880,
                        Main.rand.Next(20, 46), false, 0, false, false);
                    if (Main.expertMode)
                    {
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 880,
                            Main.rand.Next(30, 51), false, 0, false, false);
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 880,
                            Main.rand.Next(30, 51), false, 0, false, false);
                    }

                    if (Main.rand.Next(7) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2104, 1,
                            false, -1, false, false);
                    if (Main.rand.Next(20) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3060, 1,
                            false, 0, false, false);
                    if (Main.expertMode)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3223, 1,
                            false, 0, false, false);
                }
            }

            if (this.type == 267 && NPC.AnyNPCs(266))
            {
                var Stack1 = Main.rand.Next(2, 6);
                if (Main.rand.Next(3) != 0)
                {
                    if (Main.expertMode)
                        Stack1 += Main.rand.Next(2, 6);
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1329, Stack1,
                        false, 0, false, false);
                }

                if (Main.rand.Next(3) != 0)
                {
                    var Stack2 = Main.rand.Next(5, 13);
                    if (Main.expertMode)
                        Stack2 += Main.rand.Next(6, 14);
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 880, Stack2,
                        false, 0, false, false);
                }

                if (Main.rand.Next(2) == 0 &&
                    Main.player[(int) Player.FindClosest(this.position, this.width, this.height)].statLife < Main
                        .player[(int) Player.FindClosest(this.position, this.width, this.height)].statLifeMax2)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 58, 1, false, 0,
                        false, false);
            }

            if (this.type == 13 || this.type == 14 || this.type == 15)
            {
                var Stack = Main.rand.Next(1, 3);
                if (Main.rand.Next(2) == 0)
                {
                    if (Main.expertMode)
                        ++Stack;
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 86, Stack,
                        false, 0, false, false);
                }

                if (Main.rand.Next(2) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 56,
                        Main.rand.Next(2, 6), false, 0, false, false);
                if (this.boss)
                {
                    if (Main.expertMode)
                    {
                        this.DropBossBags();
                    }
                    else
                    {
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 56,
                            Main.rand.Next(10, 30), false, 0, false, false);
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 56,
                            Main.rand.Next(10, 31), false, 0, false, false);
                        if (Main.expertMode)
                        {
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 56,
                                Main.rand.Next(10, 30), false, 0, false, false);
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 56,
                                Main.rand.Next(10, 31), false, 0, false, false);
                        }

                        if (Main.expertMode)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3224, 1,
                                false, 0, false, false);
                        if (Main.rand.Next(20) == 0)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 994, 1,
                                false, 0, false, false);
                        if (Main.rand.Next(7) == 0)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2111, 1,
                                false, -1, false, false);
                    }
                }

                if (Main.rand.Next(4) == 0 &&
                    Main.player[(int) Player.FindClosest(this.position, this.width, this.height)].statLife < Main
                        .player[(int) Player.FindClosest(this.position, this.width, this.height)].statLifeMax2)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 58, 1, false, 0,
                        false, false);
            }

            if (this.type == 222)
            {
                if (Main.expertMode)
                {
                    this.DropBossBags();
                }
                else
                {
                    if (Main.rand.Next(7) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2108, 1,
                            false, -1, false, false);
                    var Type1 = Main.rand.Next(3);
                    switch (Type1)
                    {
                        case 0:
                            Type1 = 1121;
                            break;
                        case 1:
                            Type1 = 1123;
                            break;
                        case 2:
                            Type1 = 2888;
                            break;
                    }

                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, Type1, 1, false,
                        -1, false, false);
                    if (Main.expertMode)
                    {
                        var Type2 = Main.rand.Next(3);
                        switch (Type2)
                        {
                            case 0:
                                Type2 = 1121;
                                break;
                            case 1:
                                Type2 = 1123;
                                break;
                            case 2:
                                Type2 = 2888;
                                break;
                        }

                        while (Type2 == Type1)
                        {
                            Type2 = Main.rand.Next(3);
                            switch (Type2)
                            {
                                case 0:
                                    Type2 = 1121;
                                    continue;
                                case 1:
                                    Type2 = 1123;
                                    continue;
                                case 2:
                                    Type2 = 2888;
                                    continue;
                                default:
                                    continue;
                            }
                        }

                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, Type2, 1,
                            false, -1, false, false);
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1132, 1,
                            false, -1, false, false);
                    }
                    else if (Main.rand.Next(3) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1132, 1,
                            false, -1, false, false);

                    if (Main.expertMode && Main.rand.Next(15) == 0 || Main.rand.Next(15) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1170, 1,
                            false, 0, false, false);
                    if (Main.expertMode && Main.rand.Next(20) == 0 || Main.rand.Next(20) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2502, 1,
                            false, 0, false, false);
                    if (Main.expertMode)
                    {
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1129, 1,
                            false, 0, false, false);
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            Main.rand.Next(842, 845), 1, false, 0, false, false);
                    }
                    else if (Main.rand.Next(3) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1129, 1,
                            false, 0, false, false);
                    else if (Main.rand.Next(2) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            Main.rand.Next(842, 845), 1, false, 0, false, false);

                    if (Main.rand.Next(4) != 0 || Main.expertMode)
                    {
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1130,
                            Main.rand.Next(10, 30), false, 0, false, false);
                        if (Main.expertMode)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1130,
                                Main.rand.Next(10, 30), false, 0, false, false);
                    }

                    if (Main.expertMode)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2431,
                            Main.rand.Next(44, 67), false, 0, false, false);
                    else
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2431,
                            Main.rand.Next(16, 27), false, 0, false, false);
                }

                NPC.downedQueenBee = true;
                if (Main.netMode == 2)
                    NetMessage.SendData(7, -1, -1, (NetworkText) null, 0, 0.0f, 0.0f, 0.0f, 0, 0, 0);
            }

            if (this.type == 35)
            {
                if (Main.expertMode)
                    this.DropBossBags();
                else if (Main.rand.Next(7) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1281, 1, false,
                        -1, false, false);
                else if (Main.rand.Next(7) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1273, 1, false,
                        -1, false, false);
                else if (Main.rand.Next(7) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1313, 1, false,
                        -1, false, false);
            }

            if (this.type == 113)
            {
                if (Main.expertMode)
                {
                    this.DropBossBags();
                }
                else
                {
                    if (Main.rand.Next(7) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2105, 1,
                            false, -1, false, false);
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 367, 1, false,
                        -1, false, false);
                    if (Main.expertMode)
                    {
                        var num3 = Main.rand.Next(4);
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            num3 != 3 ? 489 + num3 : 2998, 1, false, -1, false, false);
                        switch (Main.rand.Next(3))
                        {
                            case 0:
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 514,
                                    1, false, -1, false, false);
                                break;
                            case 1:
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 426,
                                    1, false, -1, false, false);
                                break;
                            case 2:
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 434,
                                    1, false, -1, false, false);
                                break;
                        }
                    }
                    else if (Main.rand.Next(2) == 0)
                    {
                        var num3 = Main.rand.Next(4);
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            num3 != 3 ? 489 + num3 : 2998, 1, false, -1, false, false);
                    }
                    else
                    {
                        switch (Main.rand.Next(3))
                        {
                            case 0:
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 514,
                                    1, false, -1, false, false);
                                break;
                            case 1:
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 426,
                                    1, false, -1, false, false);
                                break;
                            case 2:
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 434,
                                    1, false, -1, false, false);
                                break;
                        }
                    }
                }

                if (Main.netMode != 1)
                {
                    var num3 = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
                    var num4 = (int) ((double) this.position.Y + (double) (this.height / 2)) / 16;
                    var num5 = this.width / 2 / 16 + 1;
                    for (var index2 = num3 - num5; index2 <= num3 + num5; ++index2)
                    {
                        for (var index3 = num4 - num5; index3 <= num4 + num5; ++index3)
                        {
                            if ((index2 == num3 - num5 || index2 == num3 + num5 ||
                                 (index3 == num4 - num5 || index3 == num4 + num5)) &&
                                !Main.tile[index2, index3].active())
                            {
                                Main.tile[index2, index3].type = WorldGen.crimson ? (ushort) 347 : (ushort) 140;
                                Main.tile[index2, index3].active(true);
                            }

                            Main.tile[index2, index3].lava(false);
                            Main.tile[index2, index3].liquid = (byte) 0;
                            if (Main.netMode == 2)
                                NetMessage.SendTileSquare(-1, index2, index3, 1, TileChangeType.None);
                            else
                                WorldGen.SquareTileFrame(index2, index3, true);
                        }
                    }
                }
            }

            if (this.type == 439)
            {
                NPC.downedAncientCultist = true;
                if (Main.rand.Next(7) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3372, 1, false,
                        -1, false, false);
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3549, 1, false, -1,
                    false, false);
                WorldGen.TriggerLunarApocalypse();
            }

            if (this.type == 398)
            {
                NPC.downedMoonlord = true;
                NPC.LunarApocalypseIsUp = false;
                if (Main.expertMode)
                {
                    this.DropBossBags();
                }
                else
                {
                    if (Main.rand.Next(7) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3373, 1,
                            false, -1, false, false);
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3384, 1, false,
                        -1, false, false);
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3460,
                        Main.rand.Next(70, 91), false, -1, false, false);
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        Utils.SelectRandom<int>(Main.rand, new int[9]
                        {
                            3063,
                            3389,
                            3065,
                            1553,
                            3546,
                            3541,
                            3570,
                            3571,
                            3569
                        }), 1, false, -1, false, false);
                }
            }

            switch (this.type)
            {
                case 402:
                case 405:
                case 407:
                case 409:
                case 411:
                    if ((this.type != 406 || Main.rand.Next(3) == 0) && NPC.ShieldStrengthTowerStardust > 0)
                    {
                        Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 629, 0, 0.0f, Main.myPlayer,
                            (float) NPC.FindFirstNPC(493), 0.0f);
                        break;
                    }

                    break;
                case 412:
                case 413:
                case 414:
                case 415:
                case 416:
                case 417:
                case 418:
                case 419:
                case 518:
                    if (NPC.ShieldStrengthTowerSolar > 0)
                    {
                        Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 629, 0, 0.0f, Main.myPlayer,
                            (float) NPC.FindFirstNPC(517), 0.0f);
                        break;
                    }

                    break;
                case 420:
                case 421:
                case 423:
                case 424:
                    if (NPC.ShieldStrengthTowerNebula > 0)
                    {
                        Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 629, 0, 0.0f, Main.myPlayer,
                            (float) NPC.FindFirstNPC(507), 0.0f);
                        break;
                    }

                    break;
                case 422:
                    var num6 = Main.rand.Next(25, 41) / 2;
                    if (Main.expertMode)
                        num6 = (int) ((double) num6 * 1.5);
                    for (var index2 = 0; index2 < num6; ++index2)
                        Item.NewItem((int) this.position.X + Main.rand.Next(this.width),
                            (int) this.position.Y + Main.rand.Next(this.height), 2, 2, 3456, Main.rand.Next(1, 4),
                            false, 0, false, false);
                    NPC.downedTowerVortex = true;
                    NPC.TowerActiveVortex = false;
                    WorldGen.UpdateLunarApocalypse();
                    WorldGen.MessageLunarApocalypse();
                    break;
                case 425:
                case 426:
                case 427:
                case 429:
                    if (NPC.ShieldStrengthTowerVortex > 0)
                    {
                        Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 629, 0, 0.0f, Main.myPlayer,
                            (float) NPC.FindFirstNPC(422), 0.0f);
                        break;
                    }

                    break;
                case 493:
                    var num7 = Main.rand.Next(25, 41) / 2;
                    if (Main.expertMode)
                        num7 = (int) ((double) num7 * 1.5);
                    for (var index2 = 0; index2 < num7; ++index2)
                        Item.NewItem((int) this.position.X + Main.rand.Next(this.width),
                            (int) this.position.Y + Main.rand.Next(this.height), 2, 2, 3459, Main.rand.Next(1, 4),
                            false, 0, false, false);
                    NPC.downedTowerStardust = true;
                    NPC.TowerActiveStardust = false;
                    WorldGen.UpdateLunarApocalypse();
                    WorldGen.MessageLunarApocalypse();
                    break;
                case 507:
                    var num8 = Main.rand.Next(25, 41) / 2;
                    if (Main.expertMode)
                        num8 = (int) ((double) num8 * 1.5);
                    for (var index2 = 0; index2 < num8; ++index2)
                        Item.NewItem((int) this.position.X + Main.rand.Next(this.width),
                            (int) this.position.Y + Main.rand.Next(this.height), 2, 2, 3457, Main.rand.Next(1, 4),
                            false, 0, false, false);
                    NPC.downedTowerNebula = true;
                    NPC.TowerActiveNebula = false;
                    WorldGen.UpdateLunarApocalypse();
                    WorldGen.MessageLunarApocalypse();
                    break;
                case 517:
                    var num9 = Main.rand.Next(25, 41) / 2;
                    if (Main.expertMode)
                        num9 = (int) ((double) num9 * 1.5);
                    for (var index2 = 0; index2 < num9; ++index2)
                        Item.NewItem((int) this.position.X + Main.rand.Next(this.width),
                            (int) this.position.Y + Main.rand.Next(this.height), 2, 2, 3458, Main.rand.Next(1, 4),
                            false, 0, false, false);
                    NPC.downedTowerSolar = true;
                    NPC.TowerActiveSolar = false;
                    WorldGen.UpdateLunarApocalypse();
                    WorldGen.MessageLunarApocalypse();
                    break;
            }

            switch (this.type)
            {
                case 381:
                case 382:
                case 383:
                case 385:
                case 386:
                case 389:
                case 390:
                case 520:
                    if (Main.rand.Next(8) == 0)
                    {
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2860,
                            Main.rand.Next(8, 21), false, 0, false, false);
                        break;
                    }

                    break;
            }

            switch (this.type)
            {
                case 383:
                case 386:
                case 389:
                    if (Main.rand.Next(200) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2806, 1,
                            false, 0, false, false);
                    if (Main.rand.Next(200) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2807, 1,
                            false, 0, false, false);
                    if (Main.rand.Next(200) == 0)
                    {
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2808, 1,
                            false, 0, false, false);
                        break;
                    }

                    break;
            }

            switch (this.type)
            {
                case 381:
                case 382:
                case 385:
                case 390:
                    if (Main.rand.Next(200) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2803, 1,
                            false, 0, false, false);
                    if (Main.rand.Next(200) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2804, 1,
                            false, 0, false, false);
                    if (Main.rand.Next(200) == 0)
                    {
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2805, 1,
                            false, 0, false, false);
                        break;
                    }

                    break;
            }

            if (this.type == 395)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                    Utils.SelectRandom<int>(Main.rand, new int[9]
                    {
                        2797,
                        2749,
                        2795,
                        2798,
                        2796,
                        2882,
                        2880,
                        2769,
                        2800
                    }), 1, false, 0, false, false);
            if (this.type == 390 && Main.rand.Next(100) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2771, 1, false, 0,
                    false, false);
            if ((this.type == 116 || this.type == 117 || (this.type == 118 || this.type == 119)) &&
                (!Main.expertMode || Main.rand.Next(5) == 0))
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 58, 1, false, 0,
                    false, false);
            if (this.type == 139 && Main.rand.Next(2) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 58, 1, false, 0,
                    false, false);
            if (this.type == 63 || this.type == 64 || this.type == 103)
            {
                if (Main.rand.Next(100) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1303, 1, false,
                        -1, false, false);
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 282,
                    Main.rand.Next(1, 5), false, 0, false, false);
            }

            if (this.type == 481 && Main.rand.Next(2) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3094,
                    Main.rand.Next(40, 81), false, 0, false, false);
            if (this.type == 481 && Main.rand.Next(20) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                    3187 + Main.rand.Next(3), 1, false, 0, false, false);
            if (this.type == 21 || this.type == 44 || (this.type == 167 || this.type == 201) ||
                (this.type == 202 || this.type == 481 || (this.type == 203 || this.type == 322)) ||
                (this.type == 323 || this.type == 324 || this.type >= 449 && this.type <= 452))
            {
                if (Main.rand.Next(25) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 118, 1, false,
                        0, false, false);
                else if (this.type == 44)
                {
                    if (Main.rand.Next(20) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            Main.rand.Next(410, 412), 1, false, 0, false, false);
                    else
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 166,
                            Main.rand.Next(1, 4), false, 0, false, false);
                }
            }

            if (this.type == 45)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 238, 1, false, 0,
                    false, false);
            if (this.type == 50)
            {
                if (Main.slimeRain)
                {
                    Main.StopSlimeRain(true);
                    AchievementsHelper.NotifyProgressionEvent(16);
                }

                if (Main.expertMode)
                {
                    this.DropBossBags();
                }
                else
                {
                    if (Main.rand.Next(4) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2430, 1,
                            false, 0, false, false);
                    if (Main.rand.Next(7) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2493, 1,
                            false, -1, false, false);
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        Main.rand.Next(256, 259), 1, false, 0, false, false);
                    Main.rand.Next(2);
                    if (Main.rand.Next(3) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2585, 1,
                            false, 0, false, false);
                    else
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2610, 1,
                            false, 0, false, false);
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 998, 1, false,
                        0, false, false);
                }

                NPC.downedSlimeKing = true;
                if (Main.netMode == 2)
                    NetMessage.SendData(7, -1, -1, (NetworkText) null, 0, 0.0f, 0.0f, 0.0f, 0, 0, 0);
            }

            if (this.type == 23 && Main.rand.Next(50) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 116, 1, false, 0,
                    false, false);
            if (this.type == 24 && Main.rand.Next(250) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 244, 1, false, 0,
                    false, false);
            if (this.type == 31 || this.type == 32 || this.type == 34)
            {
                if (Main.rand.Next(250) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 932, 1, false,
                        0, false, false);
                else if (Main.rand.Next(100) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3095, 1, false,
                        0, false, false);
                else if (Main.rand.Next(65) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 327, 1, false,
                        0, false, false);
                else if (!Main.expertMode)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 154,
                        Main.rand.Next(1, 4), false, 0, false, false);
                if (Main.expertMode)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 154,
                        Main.rand.Next(2, 7), false, 0, false, false);
            }

            if (this.type == 26 || this.type == 27 || (this.type == 28 || this.type == 29) || this.type == 111)
            {
                if (Main.rand.Next(200) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 160, 1, false,
                        0, false, false);
                else if (Main.rand.Next(2) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 161,
                        Main.rand.Next(1, 6), false, 0, false, false);
            }

            if (this.type == 175 && Main.rand.Next(100) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1265, 1, false, -1,
                    false, false);
            if ((this.type == 42 || this.type >= 231 && this.type <= 235) &&
                (Main.expertMode || Main.rand.Next(3) != 0))
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 209, 1, false, 0,
                    false, false);
            if (this.type == 204 && (Main.expertMode || Main.rand.Next(2) == 0))
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 209, 1, false, 0,
                    false, false);
            if (this.type == 43 && (Main.expertMode || Main.rand.Next(2) == 0))
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 210, 1, false, 0,
                    false, false);
            if (this.type == 65)
            {
                if (Main.rand.Next(50) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 268, 1, false,
                        0, false, false);
                else
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 319, 1, false,
                        0, false, false);
            }

            if (this.type == 48 && Main.rand.Next(2) == 0)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 320, 1, false, 0,
                    false, false);
            if (this.type == 541)
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3783, 1, false, 0,
                    false, false);
            if (this.type == 542 && Main.rand.Next(8) == 0)
            {
                var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 319, 1,
                    false, 0, false, false);
                Main.item[number].color = new Color(189, 148, 96, (int) byte.MaxValue);
                NetMessage.SendData(88, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }

            if (this.type == 543 || this.type == 544)
            {
                if (Main.rand.Next(25) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 527, 1, false,
                        0, false, false);
                if (Main.rand.Next(8) == 0)
                {
                    var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        319, 1, false, 0, false, false);
                    Main.item[number].color = this.type != 544
                        ? new Color(112, 85, 89, (int) byte.MaxValue)
                        : new Color(145, 27, 40, (int) byte.MaxValue);
                    NetMessage.SendData(88, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
            }

            if (this.type == 545)
            {
                if (Main.rand.Next(25) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 528, 1, false,
                        0, false, false);
                if (Main.rand.Next(8) == 0)
                {
                    var number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                        319, 1, false, 0, false, false);
                    Main.item[number].color = new Color(158, 113, 164, (int) byte.MaxValue);
                    NetMessage.SendData(88, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
            }

            if (this.type == 125 || this.type == 126)
            {
                var Type = 125;
                if (this.type == 125)
                    Type = 126;
                if (!NPC.AnyNPCs(Type))
                {
                    if (Main.expertMode)
                    {
                        this.DropBossBags();
                    }
                    else
                    {
                        if (Main.rand.Next(7) == 0)
                            Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2106, 1,
                                false, -1, false, false);
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 549,
                            Main.rand.Next(25, 41), false, 0, false, false);
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1225,
                            Main.rand.Next(15, 31), false, 0, false, false);
                    }
                }
                else
                {
                    this.value = 0.0f;
                    this.boss = false;
                }
            }
            else if (Main.expertMode)
            {
                if (this.type == (int) sbyte.MaxValue || this.type == 134)
                    this.DropBossBags();
            }
            else if (this.type == (int) sbyte.MaxValue)
            {
                if (Main.rand.Next(7) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2107, 1, false,
                        -1, false, false);
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 547,
                    Main.rand.Next(25, 41), false, 0, false, false);
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1225,
                    Main.rand.Next(15, 31), false, 0, false, false);
            }
            else if (this.type == 134)
            {
                if (Main.rand.Next(7) == 0)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2113, 1, false,
                        -1, false, false);
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 548,
                    Main.rand.Next(25, 41), false, 0, false, false);
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1225,
                    Main.rand.Next(15, 31), false, 0, false, false);
            }

            if (this.type == 262)
            {
                if (Main.expertMode)
                {
                    this.DropBossBags();
                }
                else
                {
                    if (Main.rand.Next(7) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2109, 1,
                            false, -1, false, false);
                    if (Main.expertMode)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1141,
                            Main.rand.Next(2, 4), false, -1, false, false);
                    else
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1141, 1,
                            false, -1, false, false);
                    if (Main.rand.Next(20) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1182, 1,
                            false, -1, false, false);
                    if (Main.rand.Next(50) == 0 || Main.expertMode && Main.rand.Next(50) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1305, 1,
                            false, -1, false, false);
                    if (Main.rand.Next(4) == 0 || Main.expertMode)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1157, 1,
                            false, -1, false, false);
                    if (Main.rand.Next(10) == 0)
                        Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3021, 1,
                            false, -1, false, false);
                    var num3 = 1;
                    if (Main.expertMode)
                        num3 = 2;
                    var num4 = 0;
                    for (var index2 = 0; index2 < num3; ++index2)
                    {
                        var num5 = Main.rand.Next(7);
                        if (!NPC.downedPlantBoss)
                            num5 = 0;
                        if (index2 == 0)
                        {
                            num4 = num5;
                        }
                        else
                        {
                            while (num4 == num5)
                                num5 = Main.rand.Next(7);
                        }

                        switch (num5)
                        {
                            case 0:
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 758,
                                    1, false, -1, false, false);
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 771,
                                    Main.rand.Next(50, 150), false, 0, false, false);
                                break;
                            case 1:
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                                    1255, 1, false, -1, false, false);
                                break;
                            case 2:
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 788,
                                    1, false, -1, false, false);
                                break;
                            case 3:
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                                    1178, 1, false, -1, false, false);
                                break;
                            case 4:
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                                    1259, 1, false, -1, false, false);
                                break;
                            case 5:
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                                    1155, 1, false, -1, false, false);
                                break;
                            case 6:
                                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                                    3018, 1, false, -1, false, false);
                                break;
                        }
                    }
                }

                var downedPlantBoss = NPC.downedPlantBoss;
                NPC.downedPlantBoss = true;
                if (!downedPlantBoss)
                {
                    switch (Main.netMode)
                    {
                        case 0:
                            Main.NewText(Lang.misc[33].Value, (byte) 50, byte.MaxValue, (byte) 130, false);
                            break;
                        case 2:
                            NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[33].Key),
                                new Color(50, (int) byte.MaxValue, 130), -1);
                            break;
                    }
                }
            }

            if ((this.boss || this.type == 125 || (this.type == 126 || this.type == 491) ||
                 (this.type == 551 || this.type == 576 || (this.type == 577 || this.type == 564)) ||
                 this.type == 565) && Main.rand.Next(10) == 0)
            {
                if (this.type == 4)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1360, 1, false,
                        0, false, false);
                if (this.type == 13 || this.type == 14 || this.type == 15)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1361, 1, false,
                        0, false, false);
                if (this.type == 266)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1362, 1, false,
                        0, false, false);
                if (this.type == 35)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1363, 1, false,
                        0, false, false);
                if (this.type == 222)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1364, 1, false,
                        0, false, false);
                if (this.type == 113)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1365, 1, false,
                        0, false, false);
                if (this.type == 134)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1366, 1, false,
                        0, false, false);
                if (this.type == (int) sbyte.MaxValue)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1367, 1, false,
                        0, false, false);
                if (this.type == 125)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1368, 1, false,
                        0, false, false);
                if (this.type == 126)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1369, 1, false,
                        0, false, false);
                if (this.type == 262)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1370, 1, false,
                        0, false, false);
                if (this.type == 245)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 1371, 1, false,
                        0, false, false);
                if (this.type == 50)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2489, 1, false,
                        0, false, false);
                if (this.type == 370)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2589, 1, false,
                        0, false, false);
                if (this.type == 439)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3357, 1, false,
                        0, false, false);
                if (this.type == 491)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3359, 1, false,
                        0, false, false);
                if (this.type == 395)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3358, 1, false,
                        0, false, false);
                if (this.type == 398)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3595, 1, false,
                        0, false, false);
                if (this.type == 551)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3866, 1, false,
                        0, false, false);
                if (this.type == 564 || this.type == 565)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3867, 1, false,
                        0, false, false);
                if (this.type == 576 || this.type == 577)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3868, 1, false,
                        0, false, false);
            }

            if (this.boss)
            {
                if (this.type == 4)
                    NPC.downedBoss1 = true;
                else if (this.type == 13 || this.type == 14 || this.type == 15)
                    NPC.downedBoss2 = true;
                else if (this.type == 266)
                    NPC.downedBoss2 = true;
                else if (this.type == 35)
                    NPC.downedBoss3 = true;
                if (this.type == (int) sbyte.MaxValue)
                {
                    NPC.downedMechBoss3 = true;
                    NPC.downedMechBossAny = true;
                }

                if (this.type == 134)
                {
                    NPC.downedMechBoss1 = true;
                    NPC.downedMechBossAny = true;
                }

                var typeName = this.TypeName;
                var Stack = Main.rand.Next(5, 16);
                var Type = 28;
                if (this.type == 113)
                    Type = 188;
                else if (this.type == 222)
                    Type = 1134;
                else if (this.type > 113 && this.type < 222)
                    Type = 499;
                else if (this.type == 245 || this.type == 262)
                    Type = 499;
                else if (this.type == 370)
                    Type = 499;
                else if (this.type == 395)
                    Type = 499;
                else if (this.type == 439)
                    Type = 499;
                else if (this.type == 398)
                    Type = 499;
                Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, Type, Stack, false,
                    0, false, false);
                var num3 = Main.rand.Next(5) + 5;
                for (var index2 = 0; index2 < num3; ++index2)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 58, 1, false, 0,
                        false, false);
                if (this.type == 125 || this.type == 126)
                {
                    NPC.downedMechBoss2 = true;
                    NPC.downedMechBossAny = true;
                    switch (Main.netMode)
                    {
                        case 0:
                            Main.NewText(
                                Language.GetTextValue("Announcement.HasBeenDefeated_Plural",
                                    (object) Language.GetTextValue("Enemies.TheTwins")), (byte) 175, (byte) 75,
                                byte.MaxValue, false);
                            break;
                        case 2:
                            NetMessage.BroadcastChatMessage(
                                NetworkText.FromKey("Announcement.HasBeenDefeated_Plural",
                                    (object) NetworkText.FromKey("Enemies.TheTwins")),
                                new Color(175, 75, (int) byte.MaxValue), -1);
                            break;
                    }
                }
                else if (this.type == 398)
                {
                    switch (Main.netMode)
                    {
                        case 0:
                            Main.NewText(
                                Language.GetTextValue("Announcement.HasBeenDefeated_Single",
                                    (object) Language.GetTextValue("Enemies.MoonLord")), (byte) 175, (byte) 75,
                                byte.MaxValue, false);
                            break;
                        case 2:
                            NetMessage.BroadcastChatMessage(
                                NetworkText.FromKey("Announcement.HasBeenDefeated_Single",
                                    (object) NetworkText.FromKey("Enemies.MoonLord")),
                                new Color(175, 75, (int) byte.MaxValue), -1);
                            break;
                    }
                }
                else
                {
                    switch (Main.netMode)
                    {
                        case 0:
                            Main.NewText(
                                Language.GetTextValue("Announcement.HasBeenDefeated_Single", (object) typeName),
                                (byte) 175, (byte) 75, byte.MaxValue, false);
                            break;
                        case 2:
                            NetMessage.BroadcastChatMessage(
                                NetworkText.FromKey("Announcement.HasBeenDefeated_Single",
                                    (object) this.GetTypeNetName()), new Color(175, 75, (int) byte.MaxValue), -1);
                            break;
                    }
                }

                if (this.type == 113 && Main.netMode != 1)
                {
                    var hardMode = Main.hardMode;
                    WorldGen.StartHardmode();
                    if (NPC.downedMechBoss1 && NPC.downedMechBoss2 && (NPC.downedMechBoss3 && !hardMode))
                    {
                        if (Main.netMode == 0)
                            Main.NewText(Lang.misc[32].Value, (byte) 50, byte.MaxValue, (byte) 130, false);
                        else if (Main.netMode == 2)
                            NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[32].Key),
                                new Color(50, (int) byte.MaxValue, 130), -1);
                    }
                }

                if (Main.netMode == 2)
                    NetMessage.SendData(7, -1, -1, (NetworkText) null, 0, 0.0f, 0.0f, 0.0f, 0, 0, 0);
            }

            if (!flag1 && NPC.downedMechBoss1 && (NPC.downedMechBoss2 && NPC.downedMechBoss3) && Main.hardMode)
            {
                switch (Main.netMode)
                {
                    case 0:
                        Main.NewText(Lang.misc[32].Value, (byte) 50, byte.MaxValue, (byte) 130, false);
                        break;
                    case 2:
                        NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[32].Key),
                            new Color(50, (int) byte.MaxValue, 130), -1);
                        break;
                }
            }

            if (this.type != 16 && this.type != 81 && (this.type != 121 && Main.rand.Next(6) == 0) &&
                (this.lifeMax > 1 && this.damage > 0))
            {
                var closest = (int) Player.FindClosest(this.position, this.width, this.height);
                if (Main.rand.Next(2) == 0 && Main.player[closest].statMana < Main.player[closest].statManaMax2)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 184, 1, false,
                        0, false, false);
                else if (Main.rand.Next(2) == 0 && Main.player[closest].statLife < Main.player[closest].statLifeMax2)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 58, 1, false, 0,
                        false, false);
            }

            if (this.type != 16 && this.type != 81 && (this.type != 121 && Main.rand.Next(2) == 0) &&
                (this.lifeMax > 1 && this.damage > 0))
            {
                var closest = (int) Player.FindClosest(this.position, this.width, this.height);
                if (Main.player[closest].statMana < Main.player[closest].statManaMax2)
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 184, 1, false,
                        0, false, false);
            }

            var num10 = this.value;
            if (this.midas)
                num10 *= (float) (1.0 + (double) Main.rand.Next(10, 50) * 0.00999999977648258);
            var num11 = num10 * (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.00999999977648258);
            if (Main.rand.Next(5) == 0)
                num11 *= (float) (1.0 + (double) Main.rand.Next(5, 11) * 0.00999999977648258);
            if (Main.rand.Next(10) == 0)
                num11 *= (float) (1.0 + (double) Main.rand.Next(10, 21) * 0.00999999977648258);
            if (Main.rand.Next(15) == 0)
                num11 *= (float) (1.0 + (double) Main.rand.Next(15, 31) * 0.00999999977648258);
            if (Main.rand.Next(20) == 0)
                num11 *= (float) (1.0 + (double) Main.rand.Next(20, 41) * 0.00999999977648258);
            var num12 = num11 + this.extraValue;
            while ((int) num12 > 0)
            {
                if ((double) num12 > 1000000.0)
                {
                    var Stack = (int) ((double) num12 / 1000000.0);
                    if (Stack > 50 && Main.rand.Next(5) == 0)
                        Stack /= Main.rand.Next(3) + 1;
                    if (Main.rand.Next(5) == 0)
                        Stack /= Main.rand.Next(3) + 1;
                    num12 -= (float) (1000000 * Stack);
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 74, Stack,
                        false, 0, false, false);
                }
                else if ((double) num12 > 10000.0)
                {
                    var Stack = (int) ((double) num12 / 10000.0);
                    if (Stack > 50 && Main.rand.Next(5) == 0)
                        Stack /= Main.rand.Next(3) + 1;
                    if (Main.rand.Next(5) == 0)
                        Stack /= Main.rand.Next(3) + 1;
                    num12 -= (float) (10000 * Stack);
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 73, Stack,
                        false, 0, false, false);
                }
                else if ((double) num12 > 100.0)
                {
                    var Stack = (int) ((double) num12 / 100.0);
                    if (Stack > 50 && Main.rand.Next(5) == 0)
                        Stack /= Main.rand.Next(3) + 1;
                    if (Main.rand.Next(5) == 0)
                        Stack /= Main.rand.Next(3) + 1;
                    num12 -= (float) (100 * Stack);
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 72, Stack,
                        false, 0, false, false);
                }
                else
                {
                    var Stack = (int) num12;
                    if (Stack > 50 && Main.rand.Next(5) == 0)
                        Stack /= Main.rand.Next(3) + 1;
                    if (Main.rand.Next(5) == 0)
                        Stack /= Main.rand.Next(4) + 1;
                    if (Stack < 1)
                        Stack = 1;
                    num12 -= (float) Stack;
                    Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 71, Stack,
                        false, 0, false, false);
                }
            }
        }

        public static void CatchNPC(int i, int who = -1)
        {
            if (!Main.npc[i].active)
                return;
            if (Main.netMode == 1)
            {
                Main.npc[i].active = false;
                NetMessage.SendData(70, -1, -1, (NetworkText) null, i, (float) who, 0.0f, 0.0f, 0, 0, 0);
            }
            else
            {
                if (Main.npc[i].catchItem <= (short) 0)
                    return;
                if (Main.npc[i].SpawnedFromStatue)
                {
                    var position = Main.npc[i].Center - new Vector2(20f);
                    Utils.PoofOfSmoke(position);
                    Main.npc[i].active = false;
                    NetMessage.SendData(23, -1, -1, (NetworkText) null, i, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    NetMessage.SendData(106, -1, -1, (NetworkText) null, (int) position.X, position.Y, 0.0f, 0.0f, 0, 0,
                        0);
                }
                else
                {
                    new Item().SetDefaults((int) Main.npc[i].catchItem, false);
                    Item.NewItem((int) Main.player[who].Center.X, (int) Main.player[who].Center.Y, 0, 0,
                        (int) Main.npc[i].catchItem, 1, false, 0, true, false);
                    Main.npc[i].active = false;
                    NetMessage.SendData(23, -1, -1, (NetworkText) null, i, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                }
            }
        }

        public void DropBossBags()
        {
            var itemType = -1;
            if (this.type == 50)
                itemType = 3318;
            if (this.type == 4)
                itemType = 3319;
            if (this.type >= 13 && this.type <= 15)
                itemType = 3320;
            if (this.type == 266)
                itemType = 3321;
            if (this.type == 222)
                itemType = 3322;
            if (this.type == 35)
                itemType = 3323;
            if (this.type == 113)
                itemType = 3324;
            if (this.type == 134)
                itemType = 3325;
            if (this.type == 125 || this.type == 126)
                itemType = 3326;
            if (this.type == (int) sbyte.MaxValue)
                itemType = 3327;
            if (this.type == 262)
                itemType = 3328;
            if (this.type == 245)
                itemType = 3329;
            if (this.type == 370)
                itemType = 3330;
            if (this.type == 439)
                itemType = 3331;
            if (this.type == 398)
                itemType = 3332;
            if (this.type == 551)
                itemType = 3860;
            this.DropItemInstanced(this.position, this.Size, itemType, 1, true);
        }

        public void DropItemInstanced(Vector2 Position, Vector2 HitboxSize, int itemType, int itemStack = 1,
            bool interactionRequired = true)
        {
            if (itemType <= 0)
                return;
            switch (Main.netMode)
            {
                case 0:
                    Item.NewItem((int) Position.X, (int) Position.Y, (int) HitboxSize.X, (int) HitboxSize.Y, itemType,
                        itemStack, false, 0, false, false);
                    break;
                case 2:
                    var number = Item.NewItem((int) Position.X, (int) Position.Y, (int) HitboxSize.X,
                        (int) HitboxSize.Y, itemType, itemStack, true, 0, false, false);
                    Main.itemLockoutTime[number] = 54000;
                    for (var remoteClient = 0; remoteClient < (int) byte.MaxValue; ++remoteClient)
                    {
                        if ((this.playerInteraction[remoteClient] || !interactionRequired) &&
                            Main.player[remoteClient].active)
                            NetMessage.SendData(90, remoteClient, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0,
                                0, 0);
                    }

                    Main.item[number].active = false;
                    break;
            }

            this.value = 0.0f;
        }

        public void PlayerInteraction(int player)
        {
            if (this.realLife < 0 ? this.playerInteraction[player] : Main.npc[this.realLife].playerInteraction[player])
                return;
            if (this.type == 13 || this.type == 14 || this.type == 15)
            {
                for (var index = 0; index < 200; ++index)
                {
                    if (index != this.whoAmI && Main.npc[index].active &&
                        (Main.npc[index].type == 13 || Main.npc[index].type == 14 || Main.npc[index].type == 15))
                        Main.npc[index].ApplyInteraction(player);
                }
            }

            if (this.type == 134 || this.type == 135 || this.type == 136)
            {
                for (var index = 0; index < 200; ++index)
                {
                    if (index != this.whoAmI && Main.npc[index].active &&
                        (Main.npc[index].type == 134 || Main.npc[index].type == 135 || Main.npc[index].type == 136))
                        Main.npc[index].ApplyInteraction(player);
                }
            }

            if (this.type == 35 || this.type == 36)
            {
                for (var index = 0; index < 200; ++index)
                {
                    if (index != this.whoAmI && Main.npc[index].active &&
                        (Main.npc[index].type == 35 || Main.npc[index].type == 36))
                        Main.npc[index].ApplyInteraction(player);
                }
            }

            if (this.type == 113 || this.type == 114)
            {
                for (var index = 0; index < 200; ++index)
                {
                    if (index != this.whoAmI && Main.npc[index].active &&
                        (Main.npc[index].type == 113 || Main.npc[index].type == 114))
                        Main.npc[index].ApplyInteraction(player);
                }
            }

            if (this.type >= (int) sbyte.MaxValue && this.type <= 131)
            {
                for (var index = 0; index < 200; ++index)
                {
                    if (index != this.whoAmI && Main.npc[index].active &&
                        (Main.npc[index].type >= (int) sbyte.MaxValue && Main.npc[index].type <= 131))
                        Main.npc[index].ApplyInteraction(player);
                }
            }

            if (this.type >= 245 && this.type <= 249)
            {
                for (var index = 0; index < 200; ++index)
                {
                    if (index != this.whoAmI && Main.npc[index].active &&
                        (Main.npc[index].type >= 245 && Main.npc[index].type <= 249))
                        Main.npc[index].ApplyInteraction(player);
                }
            }

            if ((this.type == 396 || this.type == 397) &&
                (Main.npc[(int) this.ai[3]].active && Main.npc[(int) this.ai[3]].type == 398))
                Main.npc[(int) this.ai[3]].ApplyInteraction(player);
            if ((this.type == 393 || this.type == 394) &&
                (Main.npc[(int) this.ai[0]].active && Main.npc[(int) this.ai[0]].type == 395))
                Main.npc[(int) this.ai[0]].ApplyInteraction(player);
            if (this.type == 492 && Main.npc[(int) this.ai[0]].active && Main.npc[(int) this.ai[0]].type == 491)
                Main.npc[(int) this.ai[0]].ApplyInteraction(player);
            this.ApplyInteraction(player);
        }

        public void ApplyInteraction(int player)
        {
            if (this.realLife >= 0)
                Main.npc[this.realLife].playerInteraction[player] = true;
            else
                this.playerInteraction[player] = true;
            if (player >= (int) byte.MaxValue)
                return;
            if (this.realLife >= 0)
                Main.npc[this.realLife].lastInteraction = player;
            else
                this.lastInteraction = player;
        }

        public static bool CanReleaseNPCs(int who)
        {
            var num1 = 0.7f;
            if (Main.netMode != 1)
                num1 += 0.05f;
            var num2 = 0;
            var num3 = 0;
            for (var index = 0; index < 200; ++index)
            {
                if (Main.npc[index].active)
                {
                    ++num3;
                    if ((int) Main.npc[index].releaseOwner == who)
                        ++num2;
                }
            }

            var num4 = 0;
            for (var index = 0; index < (int) byte.MaxValue; ++index)
            {
                if (Main.player[index].active)
                    ++num4;
            }

            var num5 = (int) (200.0 * (double) num1 / (double) num4);
            return (double) num3 < 200.0 * (double) num1 && num2 < num5;
        }

        public static void ReleaseNPC(int x, int y, int Type, int Style, int who)
        {
            if (Main.netMode == 1)
            {
                NetMessage.SendData(71, -1, -1, (NetworkText) null, x, (float) y, (float) Type, (float) Style, 0, 0, 0);
            }
            else
            {
                if (Type < 0 || Type >= 580 || (!Main.npcCatchable[Type] || !NPC.CanReleaseNPCs(who)))
                    return;
                if (Type == 148)
                {
                    var Type1 = Type + Main.rand.Next(2);
                    var index = NPC.NewNPC(x, y, Type1, 0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
                    Main.npc[index].releaseOwner = (short) who;
                }
                else
                {
                    var index = NPC.NewNPC(x, y, Type, 0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
                    if (Type == 356)
                        Main.npc[index].ai[2] = (float) Style;
                    Main.npc[index].releaseOwner = (short) who;
                }
            }
        }

        public static void SlimeRainSpawns(int plr)
        {
            var checkScreenHeight = Main.LogicCheckScreenHeight;
            var checkScreenWidth = Main.LogicCheckScreenWidth;
            var num1 = 15f;
            var player = Main.player[plr];
            if ((double) player.position.Y > Main.worldSurface * 16.0 + (double) (checkScreenHeight / 2) ||
                (double) player.activeNPCs > (double) num1)
                return;
            var maxValue1 = 45 + (int) (450.0 * (double) (player.activeNPCs / num1));
            if (Main.expertMode)
                maxValue1 = (int) ((double) maxValue1 * 0.85);
            if (Main.rand.Next(maxValue1) != 0)
                return;
            var minValue1 = (int) ((double) player.Center.X - (double) checkScreenWidth);
            var maxValue2 = minValue1 + checkScreenWidth * 2;
            var minValue2 = (int) ((double) player.Center.Y - (double) checkScreenHeight * 1.5);
            var maxValue3 = (int) ((double) player.Center.Y - (double) checkScreenHeight * 0.75);
            var num2 = Main.rand.Next(minValue1, maxValue2);
            var num3 = Main.rand.Next(minValue2, maxValue3);
            var index1 = num2 / 16;
            var index2 = num3 / 16;
            if (index1 < 10 || index1 > Main.maxTilesX + 10 ||
                ((double) index2 < Main.worldSurface * 0.3 || (double) index2 > Main.worldSurface) ||
                (Collision.SolidTiles(index1 - 3, index1 + 3, index2 - 5, index2 + 2) ||
                 Main.wallHouse[(int) Main.tile[index1, index2].wall]))
                return;
            var index3 = NPC.NewNPC(index1 * 16 + 8, index2 * 16, 1, 0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
            if (Main.rand.Next(200) == 0)
                Main.npc[index3].SetDefaults(-4, -1f);
            else if (Main.expertMode)
            {
                if (Main.rand.Next(7) == 0)
                {
                    Main.npc[index3].SetDefaults(-7, -1f);
                }
                else
                {
                    if (Main.rand.Next(3) != 0)
                        return;
                    Main.npc[index3].SetDefaults(-3, -1f);
                }
            }
            else if (Main.rand.Next(10) == 0)
            {
                Main.npc[index3].SetDefaults(-7, -1f);
            }
            else
            {
                if (Main.rand.Next(5) >= 2)
                    return;
                Main.npc[index3].SetDefaults(-3, -1f);
            }
        }

        public static bool Spawning_SandstoneCheck(int x, int y)
        {
            if (!WorldGen.InWorld(x, y, 10))
                return false;
            var num = 0;
            for (var index1 = 0; index1 < 8; ++index1)
            {
                var tile1 = Main.tile[x, y + index1];
                if (tile1.active() && TileID.Sets.Conversion.Sand[(int) tile1.type])
                {
                    ++num;
                    for (var index2 = 1; index2 <= 4; ++index2)
                    {
                        var tile2 = Main.tile[x + index2, y + index1];
                        if (tile2.active() && TileID.Sets.Conversion.Sand[(int) tile2.type])
                            ++num;
                        else
                            break;
                    }

                    for (var index2 = 1; index2 <= 4; ++index2)
                    {
                        var tile2 = Main.tile[x - index2, y + index1];
                        if (tile2.active() && TileID.Sets.Conversion.Sand[(int) tile2.type])
                            ++num;
                        else
                            break;
                    }
                }
                else
                    break;
            }

            return num >= 40;
        }

        public static void SpawnNPC()
        {
            if (NPC.noSpawnCycle)
            {
                NPC.noSpawnCycle = false;
            }
            else
            {
                var flag1 = false;
                var flag2 = false;
                var index1 = 0;
                var y = 0;
                var num1 = 0;
                var num2 = 0;
                for (var index2 = 0; index2 < (int) byte.MaxValue; ++index2)
                {
                    if (Main.player[index2].active)
                        ++num2;
                }

                for (var plr = 0; plr < (int) byte.MaxValue; ++plr)
                {
                    if (Main.player[plr].active && !Main.player[plr].dead)
                    {
                        if (Main.slimeRain)
                            NPC.SlimeRainSpawns(plr);
                        var flag3 = false;
                        var flag4 = false;
                        var flag5 = false;
                        var flag6 = false;
                        var flag7 = false;
                        var flag8 = false;
                        var flag9 = false;
                        var flag10 = false;
                        var flag11 = false;
                        var flag12 = false;
                        var flag13 = NPC.downedPlantBoss && Main.hardMode;
                        if (Main.player[plr].active && Main.invasionType > 0 &&
                            (Main.invasionDelay == 0 && Main.invasionSize > 0) && (double) Main.player[plr].position.Y <
                            Main.worldSurface * 16.0 + (double) NPC.sHeight)
                        {
                            var num3 = 3000;
                            if ((double) Main.player[plr].position.X > Main.invasionX * 16.0 - (double) num3 &&
                                (double) Main.player[plr].position.X < Main.invasionX * 16.0 + (double) num3)
                                flag5 = true;
                            else if (Main.invasionX >= (double) (Main.maxTilesX / 2 - 5) &&
                                     Main.invasionX <= (double) (Main.maxTilesX / 2 + 5))
                            {
                                for (var index2 = 0; index2 < 200; ++index2)
                                {
                                    if (Main.npc[index2].townNPC &&
                                        (double) Math.Abs(Main.player[plr].position.X - Main.npc[index2].Center.X) <
                                        (double) num3)
                                    {
                                        if (Main.rand.Next(3) == 0)
                                        {
                                            flag5 = true;
                                            break;
                                        }

                                        break;
                                    }
                                }
                            }
                        }

                        if (Main.player[plr].ZoneTowerSolar || Main.player[plr].ZoneTowerNebula ||
                            (Main.player[plr].ZoneTowerVortex || Main.player[plr].ZoneTowerStardust))
                            flag5 = true;
                        var flag14 = false;
                        NPC.spawnRate = NPC.defaultSpawnRate;
                        NPC.maxSpawns = NPC.defaultMaxSpawns;
                        if (Main.hardMode)
                        {
                            NPC.spawnRate = (int) ((double) NPC.defaultSpawnRate * 0.9);
                            NPC.maxSpawns = NPC.defaultMaxSpawns + 1;
                        }

                        if ((double) Main.player[plr].position.Y > (double) ((Main.maxTilesY - 200) * 16))
                            NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 2.0);
                        else if ((double) Main.player[plr].position.Y > Main.rockLayer * 16.0 + (double) NPC.sHeight)
                        {
                            NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.4);
                            NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.89999997615814);
                        }
                        else if ((double) Main.player[plr].position.Y > Main.worldSurface * 16.0 + (double) NPC.sHeight)
                        {
                            if (Main.hardMode)
                            {
                                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.45);
                                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.79999995231628);
                            }
                            else
                            {
                                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.5);
                                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.70000004768372);
                            }
                        }
                        else if (!Main.dayTime)
                        {
                            NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.6);
                            NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.29999995231628);
                            if (Main.bloodMoon)
                            {
                                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.3);
                                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.79999995231628);
                            }

                            if ((Main.pumpkinMoon || Main.snowMoon) &&
                                (double) Main.player[plr].position.Y < Main.worldSurface * 16.0)
                            {
                                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.2);
                                NPC.maxSpawns *= 2;
                            }
                        }
                        else if (Main.dayTime && Main.eclipse)
                        {
                            NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.2);
                            NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.89999997615814);
                        }

                        if (Main.player[plr].ZoneSnow &&
                            (double) Main.player[plr].position.Y / 16.0 < Main.worldSurface)
                        {
                            NPC.maxSpawns =
                                (int) ((double) NPC.maxSpawns + (double) NPC.maxSpawns * (double) Main.cloudAlpha);
                            NPC.spawnRate =
                                (int) ((double) NPC.spawnRate * (1.0 - (double) Main.cloudAlpha + 1.0) / 2.0);
                        }

                        if (Main.player[plr].ZoneDungeon)
                        {
                            NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.4);
                            NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.70000004768372);
                        }
                        else if (Main.player[plr].ZoneSandstorm)
                        {
                            NPC.spawnRate = (int) ((double) NPC.spawnRate *
                                                   (Main.hardMode ? 0.400000005960464 : 0.899999976158142));
                            NPC.maxSpawns = (int) ((double) NPC.maxSpawns * (Main.hardMode ? 1.5 : 1.20000004768372));
                        }
                        else if (Main.player[plr].ZoneUndergroundDesert)
                        {
                            NPC.spawnRate = (int) ((double) NPC.spawnRate *
                                                   (Main.hardMode ? 0.200000002980232 : 0.300000011920929));
                            NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 2.0);
                        }
                        else if (Main.player[plr].ZoneJungle)
                        {
                            NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.4);
                            NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.5);
                        }
                        else if (Main.player[plr].ZoneCorrupt || Main.player[plr].ZoneCrimson)
                        {
                            NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.65);
                            NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.29999995231628);
                        }
                        else if (Main.player[plr].ZoneMeteor)
                        {
                            NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.4);
                            NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.10000002384186);
                        }

                        if (Main.player[plr].ZoneHoly && (double) Main.player[plr].position.Y >
                            Main.rockLayer * 16.0 + (double) NPC.sHeight)
                        {
                            NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.65);
                            NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.29999995231628);
                        }

                        if (Main.wof >= 0 && (double) Main.player[plr].position.Y >
                            (double) ((Main.maxTilesY - 200) * 16))
                        {
                            NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.300000011920929);
                            NPC.spawnRate *= 3;
                        }

                        if ((double) Main.player[plr].activeNPCs < (double) NPC.maxSpawns * 0.2)
                            NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.600000023841858);
                        else if ((double) Main.player[plr].activeNPCs < (double) NPC.maxSpawns * 0.4)
                            NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.699999988079071);
                        else if ((double) Main.player[plr].activeNPCs < (double) NPC.maxSpawns * 0.6)
                            NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.800000011920929);
                        else if ((double) Main.player[plr].activeNPCs < (double) NPC.maxSpawns * 0.8)
                            NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.899999976158142);
                        if ((double) Main.player[plr].position.Y / 16.0 > (Main.worldSurface + Main.rockLayer) / 2.0 ||
                            Main.player[plr].ZoneCorrupt || Main.player[plr].ZoneCrimson)
                        {
                            if ((double) Main.player[plr].activeNPCs < (double) NPC.maxSpawns * 0.2)
                                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.699999988079071);
                            else if ((double) Main.player[plr].activeNPCs < (double) NPC.maxSpawns * 0.4)
                                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.899999976158142);
                        }

                        if (Main.player[plr].calmed)
                        {
                            NPC.spawnRate = (int) ((double) NPC.spawnRate * 1.29999995231628);
                            NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.699999988079071);
                        }

                        if (Main.player[plr].sunflower)
                        {
                            NPC.spawnRate = (int) ((double) NPC.spawnRate * 1.20000004768372);
                            NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.800000011920929);
                        }

                        if (Main.player[plr].enemySpawns)
                        {
                            NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.5);
                            NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 2.0);
                        }

                        if (Main.player[plr].ZoneWaterCandle ||
                            Main.player[plr].inventory[Main.player[plr].selectedItem].type == 148)
                        {
                            if (!Main.player[plr].ZonePeaceCandle &&
                                Main.player[plr].inventory[Main.player[plr].selectedItem].type != 3117)
                            {
                                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.75);
                                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.5);
                            }
                        }
                        else if (Main.player[plr].ZonePeaceCandle ||
                                 Main.player[plr].inventory[Main.player[plr].selectedItem].type == 3117)
                        {
                            NPC.spawnRate = (int) ((double) NPC.spawnRate * 1.3);
                            NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.699999988079071);
                        }

                        if (Main.player[plr].ZoneWaterCandle && (double) Main.player[plr].position.Y / 16.0 <
                            Main.worldSurface * 0.349999994039536)
                            NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.5);
                        if ((double) NPC.spawnRate < (double) NPC.defaultSpawnRate * 0.1)
                            NPC.spawnRate = (int) ((double) NPC.defaultSpawnRate * 0.1);
                        if (NPC.maxSpawns > NPC.defaultMaxSpawns * 3)
                            NPC.maxSpawns = NPC.defaultMaxSpawns * 3;
                        if ((Main.pumpkinMoon || Main.snowMoon) &&
                            (double) Main.player[plr].position.Y < Main.worldSurface * 16.0)
                        {
                            NPC.maxSpawns = (int) ((double) NPC.defaultMaxSpawns * (2.0 + 0.3 * (double) num2));
                            NPC.spawnRate = 20;
                        }

                        if (DD2Event.Ongoing && Main.player[plr].ZoneOldOneArmy)
                        {
                            NPC.maxSpawns = NPC.defaultMaxSpawns;
                            NPC.spawnRate = NPC.defaultSpawnRate;
                        }

                        if (flag5)
                        {
                            NPC.maxSpawns = (int) ((double) NPC.defaultMaxSpawns * (2.0 + 0.3 * (double) num2));
                            NPC.spawnRate = 20;
                        }

                        if (Main.player[plr].ZoneDungeon && !NPC.downedBoss3)
                            NPC.spawnRate = 10;
                        if (!flag5 && (!Main.bloodMoon && !Main.pumpkinMoon && !Main.snowMoon || Main.dayTime) &&
                            ((!Main.eclipse || !Main.dayTime) &&
                             (!Main.player[plr].ZoneDungeon && !Main.player[plr].ZoneCorrupt) &&
                             (!Main.player[plr].ZoneCrimson && !Main.player[plr].ZoneMeteor &&
                              !Main.player[plr].ZoneOldOneArmy)))
                        {
                            if ((double) Main.player[plr].Center.Y / 16.0 > (double) (Main.maxTilesY - 200))
                            {
                                if ((double) Main.player[plr].townNPCs == 1.0)
                                {
                                    if (Main.rand.Next(2) == 0)
                                        flag4 = true;
                                    if (Main.rand.Next(10) == 0)
                                    {
                                        flag11 = true;
                                        NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.5);
                                    }
                                    else
                                        NPC.spawnRate = (int) ((double) NPC.spawnRate * 1.25);
                                }
                                else if ((double) Main.player[plr].townNPCs == 2.0)
                                {
                                    if (Main.rand.Next(4) != 0)
                                        flag4 = true;
                                    if (Main.rand.Next(5) == 0)
                                    {
                                        flag11 = true;
                                        NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.5);
                                    }
                                    else
                                        NPC.spawnRate = (int) ((double) NPC.spawnRate * 1.5);
                                }
                                else if ((double) Main.player[plr].townNPCs >= 3.0)
                                {
                                    if (Main.rand.Next(10) != 0)
                                        flag4 = true;
                                    if (Main.rand.Next(3) == 0)
                                    {
                                        flag11 = true;
                                        NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.5);
                                    }
                                    else
                                        NPC.spawnRate = (int) ((double) NPC.spawnRate * 2.0);
                                }
                            }
                            else if ((double) Main.player[plr].townNPCs == 1.0)
                            {
                                flag4 = true;
                                if (Main.rand.Next(3) == 1)
                                {
                                    flag11 = true;
                                    NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.6);
                                }
                                else
                                    NPC.spawnRate = (int) ((double) NPC.spawnRate * 2.0);
                            }
                            else if ((double) Main.player[plr].townNPCs == 2.0)
                            {
                                flag4 = true;
                                if (Main.rand.Next(3) != 0)
                                {
                                    flag11 = true;
                                    NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.6);
                                }
                                else
                                    NPC.spawnRate = (int) ((double) NPC.spawnRate * 3.0);
                            }
                            else if ((double) Main.player[plr].townNPCs >= 3.0)
                            {
                                flag4 = true;
                                if (!Main.expertMode || Main.rand.Next(30) != 0)
                                    flag11 = true;
                                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.6);
                            }
                        }

                        var index3 =
                            (int) ((double) Main.player[plr].position.X + (double) (Main.player[plr].width / 2)) / 16;
                        var index4 =
                            (int) ((double) Main.player[plr].position.Y + (double) (Main.player[plr].height / 2)) / 16;
                        if (Main.wallHouse[(int) Main.tile[index3, index4].wall])
                            flag4 = true;
                        if (Main.tile[index3, index4].wall == (byte) 87)
                            flag3 = true;
                        var flag15 = false;
                        if (Main.player[plr].active && !Main.player[plr].dead &&
                            ((double) Main.player[plr].activeNPCs < (double) NPC.maxSpawns &&
                             Main.rand.Next(NPC.spawnRate) == 0))
                        {
                            NPC.spawnRangeX = (int) ((double) (NPC.sWidth / 16) * 0.7);
                            NPC.spawnRangeY = (int) ((double) (NPC.sHeight / 16) * 0.7);
                            NPC.safeRangeX = (int) ((double) (NPC.sWidth / 16) * 0.52);
                            NPC.safeRangeY = (int) ((double) (NPC.sHeight / 16) * 0.52);
                            if (Main.player[plr].inventory[Main.player[plr].selectedItem].type == 1254 ||
                                Main.player[plr].inventory[Main.player[plr].selectedItem].type == 1299 ||
                                Main.player[plr].scope)
                            {
                                var num3 = 1.5f;
                                if (Main.player[plr].inventory[Main.player[plr].selectedItem].type == 1254 &&
                                    Main.player[plr].scope)
                                    num3 = 1.25f;
                                else if (Main.player[plr].inventory[Main.player[plr].selectedItem].type == 1254)
                                    num3 = 1.5f;
                                else if (Main.player[plr].inventory[Main.player[plr].selectedItem].type == 1299)
                                    num3 = 1.5f;
                                else if (Main.player[plr].scope)
                                    num3 = 2f;
                                NPC.spawnRangeX += (int) ((double) (NPC.sWidth / 16) * 0.5 / (double) num3);
                                NPC.spawnRangeY += (int) ((double) (NPC.sHeight / 16) * 0.5 / (double) num3);
                                NPC.safeRangeX += (int) ((double) (NPC.sWidth / 16) * 0.5 / (double) num3);
                                NPC.safeRangeY += (int) ((double) (NPC.sHeight / 16) * 0.5 / (double) num3);
                            }

                            var minValue1 = (int) ((double) Main.player[plr].position.X / 16.0) - NPC.spawnRangeX;
                            var maxValue1 = (int) ((double) Main.player[plr].position.X / 16.0) + NPC.spawnRangeX;
                            var minValue2 = (int) ((double) Main.player[plr].position.Y / 16.0) - NPC.spawnRangeY;
                            var maxValue2 = (int) ((double) Main.player[plr].position.Y / 16.0) + NPC.spawnRangeY;
                            var num4 = (int) ((double) Main.player[plr].position.X / 16.0) - NPC.safeRangeX;
                            var num5 = (int) ((double) Main.player[plr].position.X / 16.0) + NPC.safeRangeX;
                            var num6 = (int) ((double) Main.player[plr].position.Y / 16.0) - NPC.safeRangeY;
                            var num7 = (int) ((double) Main.player[plr].position.Y / 16.0) + NPC.safeRangeY;
                            if (minValue1 < 0)
                                minValue1 = 0;
                            if (maxValue1 > Main.maxTilesX)
                                maxValue1 = Main.maxTilesX;
                            if (minValue2 < 0)
                                minValue2 = 0;
                            if (maxValue2 > Main.maxTilesY)
                                maxValue2 = Main.maxTilesY;
                            for (var index2 = 0; index2 < 50; ++index2)
                            {
                                var index5 = Main.rand.Next(minValue1, maxValue1);
                                var index6 = Main.rand.Next(minValue2, maxValue2);
                                if (!Main.tile[index5, index6].nactive() ||
                                    !Main.tileSolid[(int) Main.tile[index5, index6].type])
                                {
                                    if (!Main.wallHouse[(int) Main.tile[index5, index6].wall])
                                    {
                                        if (!flag5 && (double) index6 < Main.worldSurface * 0.349999994039536 &&
                                            !flag11 && ((double) index5 < (double) Main.maxTilesX * 0.45 ||
                                                        (double) index5 > (double) Main.maxTilesX * 0.55 ||
                                                        Main.hardMode))
                                        {
                                            num1 = (int) Main.tile[index5, index6].type;
                                            index1 = index5;
                                            y = index6;
                                            flag14 = true;
                                            flag2 = true;
                                        }
                                        else if (!flag5 && (double) index6 < Main.worldSurface * 0.449999988079071 &&
                                                 (!flag11 && Main.hardMode) && Main.rand.Next(10) == 0)
                                        {
                                            num1 = (int) Main.tile[index5, index6].type;
                                            index1 = index5;
                                            y = index6;
                                            flag14 = true;
                                            flag2 = true;
                                        }
                                        else
                                        {
                                            for (var index7 = index6; index7 < Main.maxTilesY; ++index7)
                                            {
                                                if (Main.tile[index5, index7].nactive() &&
                                                    Main.tileSolid[(int) Main.tile[index5, index7].type])
                                                {
                                                    if (index5 < num4 || index5 > num5 ||
                                                        (index7 < num6 || index7 > num7))
                                                    {
                                                        num1 = (int) Main.tile[index5, index7].type;
                                                        index1 = index5;
                                                        y = index7;
                                                        flag14 = true;
                                                        break;
                                                    }

                                                    break;
                                                }
                                            }
                                        }

                                        if (flag14)
                                        {
                                            var num3 = index1 - NPC.spawnSpaceX / 2;
                                            var num8 = index1 + NPC.spawnSpaceX / 2;
                                            var num9 = y - NPC.spawnSpaceY;
                                            var num10 = y;
                                            if (num3 < 0)
                                                flag14 = false;
                                            if (num8 > Main.maxTilesX)
                                                flag14 = false;
                                            if (num9 < 0)
                                                flag14 = false;
                                            if (num10 > Main.maxTilesY)
                                                flag14 = false;
                                            if (flag14)
                                            {
                                                for (var index7 = num3; index7 < num8; ++index7)
                                                {
                                                    for (var index8 = num9; index8 < num10; ++index8)
                                                    {
                                                        if (Main.tile[index7, index8].nactive() &&
                                                            Main.tileSolid[(int) Main.tile[index7, index8].type])
                                                        {
                                                            flag14 = false;
                                                            break;
                                                        }

                                                        if (Main.tile[index7, index8].lava())
                                                        {
                                                            flag14 = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }

                                            if (index1 >= num4 && index1 <= num5)
                                                flag15 = true;
                                        }
                                    }
                                    else
                                        continue;
                                }

                                if (flag14 || flag14)
                                    break;
                            }
                        }

                        if (flag14)
                        {
                            var rectangle1 =
                                new Microsoft.Xna.Framework.Rectangle(index1 * 16, y * 16, 16, 16);
                            for (var index2 = 0; index2 < (int) byte.MaxValue; ++index2)
                            {
                                if (Main.player[index2].active)
                                {
                                    var rectangle2 =
                                        new Microsoft.Xna.Framework.Rectangle(
                                            (int) ((double) Main.player[index2].position.X +
                                                   (double) (Main.player[index2].width / 2) -
                                                   (double) (NPC.sWidth / 2) - (double) NPC.safeRangeX),
                                            (int) ((double) Main.player[index2].position.Y +
                                                   (double) (Main.player[index2].height / 2) -
                                                   (double) (NPC.sHeight / 2) - (double) NPC.safeRangeY),
                                            NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
                                    if (rectangle1.Intersects(rectangle2))
                                        flag14 = false;
                                }
                            }
                        }

                        if (flag14)
                        {
                            if (Main.player[plr].ZoneDungeon &&
                                (!Main.tileDungeon[(int) Main.tile[index1, y].type] ||
                                 Main.tile[index1, y - 1].wall == (byte) 0))
                                flag14 = false;
                            if (Main.tile[index1, y - 1].liquid > (byte) 0 &&
                                Main.tile[index1, y - 2].liquid > (byte) 0 && !Main.tile[index1, y - 1].lava())
                            {
                                if (Main.tile[index1, y - 1].honey())
                                    flag7 = true;
                                else
                                    flag6 = true;
                            }

                            var index2 = (int) Main.player[plr].Center.X / 16;
                            var index5 = (int) ((double) Main.player[plr].Bottom.Y + 8.0) / 16;
                            if (Main.tile[index1, y].type == (ushort) 367)
                                flag9 = true;
                            else if (Main.tile[index1, y].type == (ushort) 368)
                                flag8 = true;
                            else if (Main.tile[index2, index5].type == (ushort) 367)
                                flag9 = true;
                            else if (Main.tile[index2, index5].type == (ushort) 368)
                            {
                                flag8 = true;
                            }
                            else
                            {
                                var num3 = Main.rand.Next(20, 31);
                                var num4 = Main.rand.Next(1, 4);
                                if (index1 - num3 < 0)
                                    num3 = index1;
                                if (y - num3 < 0)
                                    num3 = y;
                                if (index1 + num3 >= Main.maxTilesX)
                                    num3 = Main.maxTilesX - index1 - 1;
                                if (y + num3 >= Main.maxTilesY)
                                    num3 = Main.maxTilesY - y - 1;
                                var index6 = index1 - num3;
                                while (index6 <= index1 + num3)
                                {
                                    var num5 = Main.rand.Next(1, 4);
                                    var index7 = y - num3;
                                    while (index7 <= y + num3)
                                    {
                                        if (Main.tile[index6, index7].type == (ushort) 367)
                                            flag9 = true;
                                        if (Main.tile[index6, index7].type == (ushort) 368)
                                            flag8 = true;
                                        index7 += num5;
                                    }

                                    index6 += num4;
                                }

                                var num6 = Main.rand.Next(30, 61);
                                var num7 = Main.rand.Next(3, 7);
                                if (index2 - num6 < 0)
                                    num6 = index2;
                                if (index5 - num6 < 0)
                                    num6 = index5;
                                if (index2 + num6 >= Main.maxTilesX)
                                    num6 = Main.maxTilesX - index2 - 2;
                                if (index5 + num6 >= Main.maxTilesY)
                                    num6 = Main.maxTilesY - index5 - 2;
                                var index8 = index2 - num6;
                                while (index8 <= index2 + num6)
                                {
                                    var num5 = Main.rand.Next(3, 7);
                                    var index7 = index5 - num6;
                                    while (index7 <= index5 + num6)
                                    {
                                        if (Main.tile[index8, index7].type == (ushort) 367)
                                            flag9 = true;
                                        if (Main.tile[index8, index7].type == (ushort) 368)
                                            flag8 = true;
                                        index7 += num5;
                                    }

                                    index8 += num7;
                                }
                            }
                        }

                        if (flag7)
                            flag14 = false;
                        if (flag14)
                        {
                            if ((double) y > Main.rockLayer && y < Main.maxTilesY - 200 &&
                                (!Main.player[plr].ZoneDungeon && !flag5))
                            {
                                if (Main.rand.Next(3) == 0)
                                {
                                    var num3 = Main.rand.Next(5, 15);
                                    if (index1 - num3 >= 0 && index1 + num3 < Main.maxTilesX)
                                    {
                                        for (var index2 = index1 - num3; index2 < index1 + num3; ++index2)
                                        {
                                            for (var index5 = y - num3; index5 < y + num3; ++index5)
                                            {
                                                if (Main.tile[index2, index5].wall == (byte) 62)
                                                    flag10 = true;
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    var index2 = (int) Main.player[plr].position.X / 16;
                                    var index5 = (int) Main.player[plr].position.Y / 16;
                                    if (Main.tile[index2, index5].wall == (byte) 62)
                                        flag10 = true;
                                }
                            }

                            if ((double) y < Main.rockLayer && y > 200 && (!Main.player[plr].ZoneDungeon && !flag5))
                            {
                                if (Main.rand.Next(3) == 0)
                                {
                                    var num3 = Main.rand.Next(5, 15);
                                    if (index1 - num3 >= 0 && index1 + num3 < Main.maxTilesX)
                                    {
                                        for (var index2 = index1 - num3; index2 < index1 + num3; ++index2)
                                        {
                                            for (var index5 = y - num3; index5 < y + num3; ++index5)
                                            {
                                                if (WallID.Sets.Conversion.Sandstone[
                                                        (int) Main.tile[index2, index5].wall] ||
                                                    WallID.Sets.Conversion.HardenedSand[
                                                        (int) Main.tile[index2, index5].wall])
                                                    flag12 = true;
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    var index2 = (int) Main.player[plr].position.X / 16;
                                    var index5 = (int) Main.player[plr].position.Y / 16;
                                    if (WallID.Sets.Conversion.Sandstone[(int) Main.tile[index2, index5].wall] ||
                                        WallID.Sets.Conversion.HardenedSand[(int) Main.tile[index2, index5].wall])
                                        flag12 = true;
                                }
                            }

                            flag1 = false;
                            var type = (int) Main.tile[index1, y].type;
                            var newNPC = 200;
                            if (Main.player[plr].ZoneTowerNebula)
                            {
                                var flag16 = true;
                                var Type = 0;
                                while (flag16)
                                {
                                    Type = Utils.SelectRandom<int>(Main.rand, new int[12]
                                    {
                                        424,
                                        424,
                                        424,
                                        423,
                                        423,
                                        423,
                                        421,
                                        421,
                                        421,
                                        421,
                                        421,
                                        420
                                    });
                                    flag16 = false;
                                    if (Type == 424 && NPC.CountNPCS(Type) >= 2)
                                        flag16 = true;
                                    if (Type == 423 && NPC.CountNPCS(Type) >= 3)
                                        flag16 = true;
                                    if (Type == 420 && NPC.CountNPCS(Type) >= 2)
                                        flag16 = true;
                                }

                                if (Type != 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, Type, 1, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                            }
                            else if (Main.player[plr].ZoneTowerVortex)
                            {
                                var flag16 = true;
                                var Type = 0;
                                while (flag16)
                                {
                                    Type = Utils.SelectRandom<int>(Main.rand, new int[9]
                                    {
                                        429,
                                        429,
                                        429,
                                        429,
                                        427,
                                        427,
                                        425,
                                        425,
                                        426
                                    });
                                    flag16 = false;
                                    if (Type == 425 && NPC.CountNPCS(Type) >= 3)
                                        flag16 = true;
                                    if (Type == 426 && NPC.CountNPCS(Type) >= 3)
                                        flag16 = true;
                                    if (Type == 429 && NPC.CountNPCS(Type) >= 4)
                                        flag16 = true;
                                }

                                if (Type != 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, Type, 1, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                            }
                            else if (Main.player[plr].ZoneTowerStardust)
                            {
                                var Type = Utils.SelectRandom<int>(Main.rand, new int[8]
                                {
                                    411,
                                    411,
                                    411,
                                    409,
                                    409,
                                    407,
                                    402,
                                    405
                                });
                                if (Type != 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, Type, 1, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                            }
                            else if (Main.player[plr].ZoneTowerSolar)
                            {
                                var flag16 = true;
                                var Type = 0;
                                while (flag16)
                                {
                                    Type = Utils.SelectRandom<int>(Main.rand, new int[7]
                                    {
                                        518,
                                        419,
                                        418,
                                        412,
                                        417,
                                        416,
                                        415
                                    });
                                    flag16 = false;
                                    if (Type == 415 && NPC.CountNPCS(Type) >= 2)
                                        flag16 = true;
                                    if (Type == 416 && NPC.CountNPCS(Type) >= 1)
                                        flag16 = true;
                                    if (Type == 518 && NPC.CountNPCS(Type) >= 2)
                                        flag16 = true;
                                    if (Type == 412 && NPC.CountNPCS(Type) >= 1)
                                        flag16 = true;
                                }

                                if (Type != 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, Type, 1, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                            }
                            else if (flag2)
                            {
                                var maxValue1 = 8;
                                var maxValue2 = 30;
                                var flag16 =
                                    (double) Math.Abs(index1 - Main.maxTilesX / 2) / (double) (Main.maxTilesX / 2) >
                                    0.330000013113022 &&
                                    (Main.wallLight[(int) Main.tile[index3, index4].wall] ||
                                     Main.tile[index3, index4].wall == (byte) 73);
                                if (flag16 && NPC.AnyDanger())
                                    flag16 = false;
                                if (Main.player[plr].ZoneWaterCandle)
                                {
                                    maxValue1 = 3;
                                    maxValue2 = 10;
                                }

                                if (flag5 && Main.invasionType == 4)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 388, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (flag16 && Main.hardMode && NPC.downedGolemBoss &&
                                         (!NPC.downedMartians && Main.rand.Next(maxValue1) == 0 ||
                                          Main.rand.Next(maxValue2) == 0) && !NPC.AnyNPCs(399))
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 399, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (flag16 && Main.hardMode && NPC.downedGolemBoss &&
                                         (!NPC.downedMartians && Main.rand.Next(maxValue1) == 0 ||
                                          Main.rand.Next(maxValue2) == 0) &&
                                         (!NPC.AnyNPCs(399) &&
                                          (Main.player[plr].inventory[Main.player[plr].selectedItem].type == 148 ||
                                           Main.player[plr].ZoneWaterCandle)))
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 399, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.hardMode && !NPC.AnyNPCs(87) && (!flag4 && Main.rand.Next(10) == 0))
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 87, 1, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.hardMode && !NPC.AnyNPCs(87) && (!flag4 && Main.rand.Next(10) == 0) &&
                                         (Main.player[plr].inventory[Main.player[plr].selectedItem].type == 148 ||
                                          Main.player[plr].ZoneWaterCandle))
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 87, 1, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 48, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                            }
                            else if (flag5)
                            {
                                switch (Main.invasionType)
                                {
                                    case 1:
                                        if (Main.hardMode && !NPC.AnyNPCs(471) && Main.rand.Next(30) == 0)
                                        {
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 471, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            break;
                                        }

                                        if (Main.rand.Next(9) == 0)
                                        {
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 29, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            break;
                                        }

                                        if (Main.rand.Next(5) == 0)
                                        {
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 26, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            break;
                                        }

                                        if (Main.rand.Next(3) == 0)
                                        {
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 111, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            break;
                                        }

                                        if (Main.rand.Next(3) == 0)
                                        {
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 27, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            break;
                                        }

                                        NPC.NewNPC(index1 * 16 + 8, y * 16, 28, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                        break;
                                    case 2:
                                        if (Main.rand.Next(7) == 0)
                                        {
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 145, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            break;
                                        }

                                        if (Main.rand.Next(3) == 0)
                                        {
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 143, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            break;
                                        }

                                        NPC.NewNPC(index1 * 16 + 8, y * 16, 144, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                        break;
                                    case 3:
                                        if (Main.invasionSize < Main.invasionSizeStart / 2 && Main.rand.Next(20) == 0 &&
                                            (!NPC.AnyNPCs(491) && !Collision.SolidTiles(index1 - 20, index1 + 20,
                                                 y - 40, y - 10)))
                                        {
                                            NPC.NewNPC(index1 * 16 + 8, (y - 10) * 16, 491, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            break;
                                        }

                                        if (Main.rand.Next(30) == 0 && !NPC.AnyNPCs(216))
                                        {
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 216, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            break;
                                        }

                                        if (Main.rand.Next(11) == 0)
                                        {
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 215, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            break;
                                        }

                                        if (Main.rand.Next(9) == 0)
                                        {
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 252, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            break;
                                        }

                                        if (Main.rand.Next(7) == 0)
                                        {
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 214, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            break;
                                        }

                                        if (Main.rand.Next(3) == 0)
                                        {
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 213, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            break;
                                        }

                                        NPC.NewNPC(index1 * 16 + 8, y * 16, 212, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                        break;
                                    case 4:
                                        var Type1 = 0;
                                        var num4 = Main.rand.Next(7);
                                        if (Main.invasionSize <= 100 && Main.rand.Next(10) == 0 && !NPC.AnyNPCs(395))
                                            Type1 = 395;
                                        else if (num4 >= 6)
                                        {
                                            if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(395))
                                            {
                                                Type1 = 395;
                                            }
                                            else
                                            {
                                                var num3 = Main.rand.Next(2);
                                                if (num3 == 0)
                                                    Type1 = 390;
                                                if (num3 == 1)
                                                    Type1 = 386;
                                            }
                                        }
                                        else if (num4 >= 4)
                                        {
                                            var num3 = Main.rand.Next(5);
                                            Type1 = num3 >= 2 ? (num3 >= 4 ? 388 : 381) : 382;
                                        }
                                        else
                                        {
                                            var num3 = Main.rand.Next(4);
                                            if (num3 == 3)
                                            {
                                                if (!NPC.AnyNPCs(520))
                                                    Type1 = 520;
                                                else
                                                    num3 = Main.rand.Next(3);
                                            }

                                            if (num3 == 0)
                                                Type1 = 385;
                                            if (num3 == 1)
                                                Type1 = 389;
                                            if (num3 == 2)
                                                Type1 = 383;
                                        }

                                        if (Type1 != 0)
                                        {
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, Type1, 1, 0.0f, 0.0f, 0.0f,
                                                0.0f, (int) byte.MaxValue);
                                            break;
                                        }

                                        break;
                                }
                            }
                            else if (!NPC.savedBartender && DD2Event.ReadyToFindBartender &&
                                     (!NPC.AnyNPCs(579) && Main.rand.Next(80) == 0) && !flag6)
                                NPC.NewNPC(index1 * 16 + 8, y * 16, 579, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if (Main.tile[index1, y].wall == (byte) 62 || flag10)
                            {
                                if (Main.tile[index1, y].wall == (byte) 62 && Main.rand.Next(8) == 0 &&
                                    (!flag6 && (double) y >= Main.rockLayer) &&
                                    (y < Main.maxTilesY - 210 && !NPC.savedStylist && !NPC.AnyNPCs(354)))
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 354, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.hardMode)
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 163, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 164, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                            }
                            else if ((WallID.Sets.Conversion.HardenedSand[(int) Main.tile[index1, y].wall] ||
                                      WallID.Sets.Conversion.Sandstone[(int) Main.tile[index1, y].wall] || flag12) &&
                                     WorldGen.checkUnderground(index1, y))
                            {
                                if (Main.hardMode && Main.rand.Next(33) == 0 &&
                                    (!flag4 && (double) y > Main.worldSurface + 100.0))
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 510, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.rand.Next(22) == 0 && !flag4 && (double) y > Main.worldSurface + 100.0)
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 513, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.hardMode && Main.rand.Next(5) != 0)
                                {
                                    var intList = new List<int>();
                                    if (Main.player[plr].ZoneCorrupt)
                                    {
                                        intList.Add(525);
                                        intList.Add(525);
                                    }

                                    if (Main.player[plr].ZoneCrimson)
                                    {
                                        intList.Add(526);
                                        intList.Add(526);
                                    }

                                    if (Main.player[plr].ZoneHoly)
                                    {
                                        intList.Add(527);
                                        intList.Add(527);
                                    }

                                    if (intList.Count == 0)
                                    {
                                        intList.Add(524);
                                        intList.Add(524);
                                    }

                                    if (Main.player[plr].ZoneCorrupt || Main.player[plr].ZoneCrimson)
                                    {
                                        intList.Add(533);
                                        intList.Add(529);
                                    }
                                    else
                                    {
                                        intList.Add(530);
                                        intList.Add(528);
                                    }

                                    intList.Add(532);
                                    var Type2 = Utils.SelectRandom<int>(Main.rand, intList.ToArray());
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, Type2, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                    intList.Clear();
                                }
                                else
                                {
                                    var Type2 = Utils.SelectRandom<int>(Main.rand, new int[5]
                                    {
                                        69,
                                        508,
                                        508,
                                        508,
                                        509
                                    });
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, Type2, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                }
                            }
                            else if (Main.hardMode && flag6 && (Main.player[plr].ZoneJungle && Main.rand.Next(3) != 0))
                                NPC.NewNPC(index1 * 16 + 8, y * 16, 157, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if (Main.hardMode && flag6 && (Main.player[plr].ZoneCrimson && Main.rand.Next(3) != 0))
                                NPC.NewNPC(index1 * 16 + 8, y * 16, 242, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if (Main.hardMode && flag6 && (Main.player[plr].ZoneCrimson && Main.rand.Next(3) != 0))
                                NPC.NewNPC(index1 * 16 + 8, y * 16, 241, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if (flag6 && (index1 < 250 || index1 > Main.maxTilesX - 250) &&
                                     (Main.tileSand[type] && (double) y < Main.rockLayer))
                            {
                                var flag16 = false;
                                if (!NPC.savedAngler && !NPC.AnyNPCs(376))
                                {
                                    var num3 = -1;
                                    for (var j = y - 1; j > y - 50; --j)
                                    {
                                        if (Main.tile[index1, j].liquid == (byte) 0 && !WorldGen.SolidTile(index1, j) &&
                                            (!WorldGen.SolidTile(index1, j + 1) && !WorldGen.SolidTile(index1, j + 2)))
                                        {
                                            num3 = j + 2;
                                            break;
                                        }
                                    }

                                    if (num3 > y)
                                        num3 = y;
                                    if (num3 > 0 && !flag15)
                                    {
                                        NPC.NewNPC(index1 * 16 + 8, num3 * 16, 376, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                        flag16 = true;
                                    }
                                }

                                if (!flag16)
                                {
                                    if (Main.rand.Next(60) == 0)
                                        NPC.NewNPC(index1 * 16 + 8, y * 16, 220, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    else if (Main.rand.Next(25) == 0)
                                        NPC.NewNPC(index1 * 16 + 8, y * 16, 221, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    else if (Main.rand.Next(8) == 0)
                                        NPC.NewNPC(index1 * 16 + 8, y * 16, 65, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    else if (Main.rand.Next(3) == 0)
                                        NPC.NewNPC(index1 * 16 + 8, y * 16, 67, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    else
                                        NPC.NewNPC(index1 * 16 + 8, y * 16, 64, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                }
                            }
                            else if (!flag6 && !NPC.savedAngler && !NPC.AnyNPCs(376) &&
                                     ((index1 < 340 || index1 > Main.maxTilesX - 340) &&
                                      (Main.tileSand[type] && (double) y < Main.worldSurface)))
                                NPC.NewNPC(index1 * 16 + 8, y * 16, 376, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if (flag6 && ((double) y > Main.rockLayer && Main.rand.Next(2) == 0 || type == 60))
                            {
                                if (Main.hardMode && Main.rand.Next(3) > 0)
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 102, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 58, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                            }
                            else if (flag6 && (double) y > Main.worldSurface && Main.rand.Next(3) == 0)
                            {
                                if (Main.hardMode)
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 103, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 63, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                            }
                            else if (flag6 && Main.rand.Next(4) == 0)
                            {
                                if (Main.player[plr].ZoneCorrupt)
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 57, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if ((double) y < Main.worldSurface && y > 50 &&
                                         (Main.rand.Next(3) != 0 && Main.dayTime))
                                {
                                    var num3 = -1;
                                    for (var j = y - 1; j > y - 50; --j)
                                    {
                                        if (Main.tile[index1, j].liquid == (byte) 0 && !WorldGen.SolidTile(index1, j) &&
                                            (!WorldGen.SolidTile(index1, j + 1) && !WorldGen.SolidTile(index1, j + 2)))
                                        {
                                            num3 = j + 2;
                                            break;
                                        }
                                    }

                                    if (num3 > y)
                                        num3 = y;
                                    if (num3 > 0 && !flag15)
                                    {
                                        if (Main.rand.Next(2) == 0)
                                            NPC.NewNPC(index1 * 16 + 8, num3 * 16, 362, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                        else
                                            NPC.NewNPC(index1 * 16 + 8, num3 * 16, 364, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                    }
                                    else
                                        NPC.NewNPC(index1 * 16 + 8, y * 16, 55, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                }
                                else
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 55, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                            }
                            else if (NPC.downedGoblins && Main.rand.Next(20) == 0 &&
                                     (!flag6 && (double) y >= Main.rockLayer) &&
                                     (y < Main.maxTilesY - 210 && !NPC.savedGoblin && !NPC.AnyNPCs(105)))
                                NPC.NewNPC(index1 * 16 + 8, y * 16, 105, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if (Main.hardMode && Main.rand.Next(20) == 0 &&
                                     (!flag6 && (double) y >= Main.rockLayer) &&
                                     (y < Main.maxTilesY - 210 && !NPC.savedWizard && !NPC.AnyNPCs(106)))
                                NPC.NewNPC(index1 * 16 + 8, y * 16, 106, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if (flag11)
                            {
                                if (flag6)
                                {
                                    if ((double) y < Main.worldSurface && y > 50 &&
                                        (Main.rand.Next(3) != 0 && Main.dayTime))
                                    {
                                        var num3 = -1;
                                        for (var j = y - 1; j > y - 50; --j)
                                        {
                                            if (Main.tile[index1, j].liquid == (byte) 0 &&
                                                !WorldGen.SolidTile(index1, j) &&
                                                (!WorldGen.SolidTile(index1, j + 1) &&
                                                 !WorldGen.SolidTile(index1, j + 2)))
                                            {
                                                num3 = j + 2;
                                                break;
                                            }
                                        }

                                        if (num3 > y)
                                            num3 = y;
                                        if (num3 > 0 && !flag15)
                                        {
                                            if (Main.rand.Next(2) == 0)
                                                NPC.NewNPC(index1 * 16 + 8, num3 * 16, 362, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                            else
                                                NPC.NewNPC(index1 * 16 + 8, num3 * 16, 364, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                        }
                                        else
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 55, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                    }
                                    else
                                        NPC.NewNPC(index1 * 16 + 8, y * 16, 55, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                }
                                else
                                {
                                    switch (type)
                                    {
                                        case 2:
                                        case 109:
                                            if (Main.raining)
                                            {
                                                if (Main.rand.Next(NPC.goldCritterChance) == 0)
                                                {
                                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 448, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                        (int) byte.MaxValue);
                                                    break;
                                                }

                                                if (Main.rand.Next(3) != 0)
                                                {
                                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 357, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                        (int) byte.MaxValue);
                                                    break;
                                                }

                                                NPC.NewNPC(index1 * 16 + 8, y * 16, 230, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                                break;
                                            }

                                            if (!Main.dayTime && Main.rand.Next(NPC.fireFlyFriendly) == 0 &&
                                                (double) y <= Main.worldSurface)
                                            {
                                                var Type2 = 355;
                                                if (type == 109)
                                                    Type2 = 358;
                                                NPC.NewNPC(index1 * 16 + 8, y * 16, Type2, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                                if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
                                                    NPC.NewNPC(index1 * 16 + 8 - 16, y * 16, Type2, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue);
                                                if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
                                                    NPC.NewNPC(index1 * 16 + 8 + 16, y * 16, Type2, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue);
                                                if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
                                                    NPC.NewNPC(index1 * 16 + 8, y * 16 - 16, Type2, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue);
                                                if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
                                                {
                                                    NPC.NewNPC(index1 * 16 + 8, y * 16 + 16, Type2, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue);
                                                    break;
                                                }

                                                break;
                                            }

                                            if (Main.dayTime && Main.time < 18000.0 &&
                                                (Main.rand.Next(3) != 0 && (double) y <= Main.worldSurface))
                                            {
                                                var num3 = Main.rand.Next(4);
                                                if (Main.rand.Next(NPC.goldCritterChance) == 0)
                                                {
                                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 442, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                        (int) byte.MaxValue);
                                                    break;
                                                }

                                                switch (num3)
                                                {
                                                    case 0:
                                                        NPC.NewNPC(index1 * 16 + 8, y * 16, 297, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue);
                                                        break;
                                                    case 1:
                                                        NPC.NewNPC(index1 * 16 + 8, y * 16, 298, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue);
                                                        break;
                                                    default:
                                                        NPC.NewNPC(index1 * 16 + 8, y * 16, 74, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue);
                                                        break;
                                                }
                                            }
                                            else
                                            {
                                                if (Main.dayTime && Main.rand.Next(NPC.butterflyChance) == 0 &&
                                                    (double) y <= Main.worldSurface)
                                                {
                                                    if (Main.rand.Next(NPC.goldCritterChance) == 0)
                                                        NPC.NewNPC(index1 * 16 + 8, y * 16, 444, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue);
                                                    else
                                                        NPC.NewNPC(index1 * 16 + 8, y * 16, 356, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue);
                                                    if (Main.rand.Next(4) == 0)
                                                        NPC.NewNPC(index1 * 16 + 8 - 16, y * 16, 356, 0, 0.0f, 0.0f,
                                                            0.0f, 0.0f, (int) byte.MaxValue);
                                                    if (Main.rand.Next(4) == 0)
                                                    {
                                                        NPC.NewNPC(index1 * 16 + 8 + 16, y * 16, 356, 0, 0.0f, 0.0f,
                                                            0.0f, 0.0f, (int) byte.MaxValue);
                                                        break;
                                                    }

                                                    break;
                                                }

                                                if (Main.rand.Next(2) == 0 && (double) y <= Main.worldSurface)
                                                {
                                                    var num3 = Main.rand.Next(4);
                                                    if (Main.rand.Next(NPC.goldCritterChance) == 0)
                                                    {
                                                        NPC.NewNPC(index1 * 16 + 8, y * 16, 442, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue);
                                                        break;
                                                    }

                                                    switch (num3)
                                                    {
                                                        case 0:
                                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 297, 0, 0.0f, 0.0f,
                                                                0.0f, 0.0f, (int) byte.MaxValue);
                                                            break;
                                                        case 1:
                                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 298, 0, 0.0f, 0.0f,
                                                                0.0f, 0.0f, (int) byte.MaxValue);
                                                            break;
                                                        default:
                                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 74, 0, 0.0f, 0.0f, 0.0f,
                                                                0.0f, (int) byte.MaxValue);
                                                            break;
                                                    }
                                                }
                                                else
                                                {
                                                    if (type == 53)
                                                    {
                                                        NPC.NewNPC(index1 * 16 + 8, y * 16, Main.rand.Next(366, 368), 0,
                                                            0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
                                                        break;
                                                    }

                                                    if (Main.rand.Next(NPC.goldCritterChance) == 0)
                                                    {
                                                        NPC.NewNPC(index1 * 16 + 8, y * 16, 443, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue);
                                                        break;
                                                    }

                                                    if (Main.rand.Next(NPC.goldCritterChance) == 0 &&
                                                        (double) y <= Main.worldSurface)
                                                    {
                                                        NPC.NewNPC(index1 * 16 + 8, y * 16, 539, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue);
                                                        break;
                                                    }

                                                    if (Main.halloween && Main.rand.Next(3) != 0)
                                                    {
                                                        NPC.NewNPC(index1 * 16 + 8, y * 16, 303, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue);
                                                        break;
                                                    }

                                                    if (Main.xMas && Main.rand.Next(3) != 0)
                                                    {
                                                        NPC.NewNPC(index1 * 16 + 8, y * 16, 337, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue);
                                                        break;
                                                    }

                                                    if (BirthdayParty.PartyIsUp && Main.rand.Next(3) != 0)
                                                    {
                                                        NPC.NewNPC(index1 * 16 + 8, y * 16, 540, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue);
                                                        break;
                                                    }

                                                    if (Main.rand.Next(3) == 0 && (double) y <= Main.worldSurface)
                                                    {
                                                        NPC.NewNPC(index1 * 16 + 8, y * 16,
                                                            (int) Utils.SelectRandom<short>(Main.rand, new short[2]
                                                            {
                                                                (short) 299,
                                                                (short) 538
                                                            }), 0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
                                                        break;
                                                    }

                                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 46, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                        (int) byte.MaxValue);
                                                    break;
                                                }
                                            }

                                            break;
                                        case 60:
                                            if (Main.rand.Next(NPC.goldCritterChance) == 0)
                                            {
                                                NPC.NewNPC(index1 * 16 + 8, y * 16, 445, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                                break;
                                            }

                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 361, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            break;
                                        case 147:
                                        case 161:
                                            if (Main.rand.Next(2) == 0)
                                            {
                                                NPC.NewNPC(index1 * 16 + 8, y * 16, 148, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                                break;
                                            }

                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 149, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            break;
                                        default:
                                            if ((double) y <= Main.worldSurface)
                                                return;
                                            goto case 2;
                                    }
                                }
                            }
                            else if (Main.player[plr].ZoneDungeon)
                            {
                                var num3 = 0;
                                if (Main.tile[index1, y].wall == (byte) 94 || Main.tile[index1, y].wall == (byte) 96 ||
                                    Main.tile[index1, y].wall == (byte) 98)
                                    num3 = 1;
                                if (Main.tile[index1, y].wall == (byte) 95 || Main.tile[index1, y].wall == (byte) 97 ||
                                    Main.tile[index1, y].wall == (byte) 99)
                                    num3 = 2;
                                if (Main.rand.Next(7) == 0)
                                    num3 = Main.rand.Next(3);
                                if (!NPC.downedBoss3)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 68, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (!NPC.savedMech && Main.rand.Next(5) == 0 && (!flag6 && !NPC.AnyNPCs(123)) &&
                                         (double) y > Main.rockLayer)
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 123, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (flag13 && Main.rand.Next(30) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 287, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (flag13 && num3 == 0 && Main.rand.Next(15) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 293, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (flag13 && num3 == 1 && Main.rand.Next(15) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 291, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (flag13 && num3 == 2 && Main.rand.Next(15) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 292, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (flag13 && !NPC.AnyNPCs(290) && (num3 == 0 && Main.rand.Next(35) == 0))
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 290, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (flag13 && (num3 == 1 || num3 == 2) && Main.rand.Next(30) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 289, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (flag13 && Main.rand.Next(20) == 0)
                                {
                                    var num5 = 281;
                                    if (num3 == 0)
                                        num5 += 2;
                                    if (num3 == 2)
                                        num5 += 4;
                                    var Type2 = num5 + Main.rand.Next(2);
                                    if (!NPC.AnyNPCs(Type2))
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, Type2, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                }
                                else if (flag13 && Main.rand.Next(3) != 0)
                                {
                                    var num5 = 269;
                                    if (num3 == 0)
                                        num5 += 4;
                                    if (num3 == 2)
                                        num5 += 8;
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, num5 + Main.rand.Next(4), 0, 0.0f,
                                        0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
                                }
                                else if (Main.rand.Next(37) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 71, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (num3 == 1 && Main.rand.Next(4) == 0 && !NPC.NearSpikeBall(index1, y))
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 70, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (num3 == 2 && Main.rand.Next(15) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 72, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (num3 == 0 && Main.rand.Next(9) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 34, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.rand.Next(7) == 0)
                                {
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 32, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                }
                                else
                                {
                                    switch (Main.rand.Next(5))
                                    {
                                        case 0:
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 294, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            break;
                                        case 1:
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 295, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            break;
                                        case 2:
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 296, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            break;
                                        default:
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 31, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            if (Main.rand.Next(4) == 0)
                                            {
                                                Main.npc[newNPC].SetDefaults(-14, -1f);
                                                break;
                                            }

                                            if (Main.rand.Next(5) == 0)
                                            {
                                                Main.npc[newNPC].SetDefaults(-13, -1f);
                                                break;
                                            }

                                            break;
                                    }
                                }
                            }
                            else if (Main.player[plr].ZoneMeteor)
                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 23, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if (DD2Event.Ongoing && Main.player[plr].ZoneOldOneArmy)
                                DD2Event.SpawnNPC(ref newNPC);
                            else if ((double) y <= Main.worldSurface && !Main.dayTime && Main.snowMoon)
                            {
                                var waveNumber = NPC.waveNumber;
                                if (Main.rand.Next(30) == 0 && NPC.CountNPCS(341) < 4)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 341, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (waveNumber >= 20)
                                {
                                    switch (Main.rand.Next(3))
                                    {
                                        case 0:
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 345, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            break;
                                        case 1:
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 346, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            break;
                                        default:
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 344, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            break;
                                    }
                                }
                                else if (waveNumber >= 19)
                                    newNPC = Main.rand.Next(10) != 0 || NPC.CountNPCS(345) >= 4
                                        ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(346) >= 5
                                            ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(344) >= 7
                                                ? NPC.NewNPC(index1 * 16 + 8, y * 16, 343, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue)
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 344, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue))
                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 346, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue))
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 345, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                else if (waveNumber >= 18)
                                    newNPC = Main.rand.Next(10) != 0 || NPC.CountNPCS(345) >= 3
                                        ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(346) >= 4
                                            ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(344) >= 6
                                                ? (Main.rand.Next(3) != 0
                                                    ? (Main.rand.Next(3) != 0
                                                        ? NPC.NewNPC(index1 * 16 + 8, y * 16, 343, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue)
                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 351, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue))
                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 348, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 344, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue))
                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 346, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue))
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 345, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                else if (waveNumber >= 17)
                                    newNPC = Main.rand.Next(10) != 0 || NPC.CountNPCS(345) >= 2
                                        ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(346) >= 3
                                            ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(344) >= 5
                                                ? (Main.rand.Next(4) != 0
                                                    ? (Main.rand.Next(2) != 0
                                                        ? NPC.NewNPC(index1 * 16 + 8, y * 16, 343, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue)
                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 351, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue))
                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 347, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 344, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue))
                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 346, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue))
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 345, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                else if (waveNumber >= 16)
                                    newNPC = Main.rand.Next(10) != 0 || NPC.CountNPCS(345) >= 2
                                        ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(346) >= 2
                                            ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(344) >= 4
                                                ? (Main.rand.Next(2) != 0
                                                    ? NPC.NewNPC(index1 * 16 + 8, y * 16, 343, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue)
                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 352, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 344, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue))
                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 346, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue))
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 345, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                else if (waveNumber >= 15)
                                    newNPC = Main.rand.Next(10) != 0 || NPC.AnyNPCs(345)
                                        ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(346) >= 2
                                            ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(344) >= 3
                                                ? (Main.rand.Next(3) != 0
                                                    ? NPC.NewNPC(index1 * 16 + 8, y * 16, 343, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue)
                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 347, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 344, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue))
                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 346, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue))
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 345, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                else if (waveNumber == 14)
                                {
                                    if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(345))
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 345, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    else if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(346))
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 346, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    else if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(344))
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 344, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    else if (Main.rand.Next(3) == 0)
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 343, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                }
                                else
                                    newNPC = waveNumber != 13
                                        ? (waveNumber != 12
                                            ? (waveNumber != 11
                                                ? (waveNumber != 10
                                                    ? (waveNumber != 9
                                                        ? (waveNumber != 8
                                                            ? (waveNumber != 7
                                                                ? (waveNumber != 6
                                                                    ? (waveNumber != 5
                                                                        ? (waveNumber != 4
                                                                            ? (waveNumber != 3
                                                                                ? (waveNumber != 2
                                                                                    ? (Main.rand.Next(3) != 0
                                                                                        ? NPC.NewNPC(index1 * 16 + 8,
                                                                                            y * 16,
                                                                                            Main.rand.Next(338, 341), 0,
                                                                                            0.0f, 0.0f, 0.0f, 0.0f,
                                                                                            (int) byte.MaxValue)
                                                                                        : NPC.NewNPC(index1 * 16 + 8,
                                                                                            y * 16, 342, 0, 0.0f, 0.0f,
                                                                                            0.0f, 0.0f,
                                                                                            (int) byte.MaxValue))
                                                                                    : (Main.rand.Next(3) != 0
                                                                                        ? NPC.NewNPC(index1 * 16 + 8,
                                                                                            y * 16,
                                                                                            Main.rand.Next(338, 341), 0,
                                                                                            0.0f, 0.0f, 0.0f, 0.0f,
                                                                                            (int) byte.MaxValue)
                                                                                        : NPC.NewNPC(index1 * 16 + 8,
                                                                                            y * 16, 350, 0, 0.0f, 0.0f,
                                                                                            0.0f, 0.0f,
                                                                                            (int) byte.MaxValue)))
                                                                                : (Main.rand.Next(8) != 0
                                                                                    ? (Main.rand.Next(4) != 0
                                                                                        ? (Main.rand.Next(3) != 0
                                                                                            ? NPC.NewNPC(
                                                                                                index1 * 16 + 8, y * 16,
                                                                                                Main.rand.Next(338,
                                                                                                    341), 0, 0.0f, 0.0f,
                                                                                                0.0f, 0.0f,
                                                                                                (int) byte.MaxValue)
                                                                                            : NPC.NewNPC(
                                                                                                index1 * 16 + 8, y * 16,
                                                                                                342, 0, 0.0f, 0.0f,
                                                                                                0.0f, 0.0f,
                                                                                                (int) byte.MaxValue))
                                                                                        : NPC.NewNPC(index1 * 16 + 8,
                                                                                            y * 16, 350, 0, 0.0f, 0.0f,
                                                                                            0.0f, 0.0f,
                                                                                            (int) byte.MaxValue))
                                                                                    : NPC.NewNPC(index1 * 16 + 8,
                                                                                        y * 16, 348, 0, 0.0f, 0.0f,
                                                                                        0.0f, 0.0f, (int) byte.MaxValue)
                                                                                ))
                                                                            : (Main.rand.Next(10) != 0 ||
                                                                               NPC.AnyNPCs(344)
                                                                                ? (Main.rand.Next(4) != 0
                                                                                    ? (Main.rand.Next(3) != 0
                                                                                        ? NPC.NewNPC(index1 * 16 + 8,
                                                                                            y * 16,
                                                                                            Main.rand.Next(338, 341), 0,
                                                                                            0.0f, 0.0f, 0.0f, 0.0f,
                                                                                            (int) byte.MaxValue)
                                                                                        : NPC.NewNPC(index1 * 16 + 8,
                                                                                            y * 16, 342, 0, 0.0f, 0.0f,
                                                                                            0.0f, 0.0f,
                                                                                            (int) byte.MaxValue))
                                                                                    : NPC.NewNPC(index1 * 16 + 8,
                                                                                        y * 16, 350, 0, 0.0f, 0.0f,
                                                                                        0.0f, 0.0f, (int) byte.MaxValue)
                                                                                )
                                                                                : NPC.NewNPC(index1 * 16 + 8, y * 16,
                                                                                    344, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                                                    (int) byte.MaxValue)))
                                                                        : (Main.rand.Next(10) != 0 || NPC.AnyNPCs(344)
                                                                            ? (Main.rand.Next(4) != 0
                                                                                ? (Main.rand.Next(8) != 0
                                                                                    ? NPC.NewNPC(index1 * 16 + 8,
                                                                                        y * 16,
                                                                                        Main.rand.Next(338, 341), 0,
                                                                                        0.0f, 0.0f, 0.0f, 0.0f,
                                                                                        (int) byte.MaxValue)
                                                                                    : NPC.NewNPC(index1 * 16 + 8,
                                                                                        y * 16, 348, 0, 0.0f, 0.0f,
                                                                                        0.0f, 0.0f, (int) byte.MaxValue)
                                                                                )
                                                                                : NPC.NewNPC(index1 * 16 + 8, y * 16,
                                                                                    350, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                                                    (int) byte.MaxValue))
                                                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 344,
                                                                                0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                                                (int) byte.MaxValue)))
                                                                    : (Main.rand.Next(10) != 0 ||
                                                                       NPC.CountNPCS(344) >= 2
                                                                        ? (Main.rand.Next(4) != 0
                                                                            ? (Main.rand.Next(2) != 0
                                                                                ? NPC.NewNPC(index1 * 16 + 8, y * 16,
                                                                                    350, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                                                    (int) byte.MaxValue)
                                                                                : NPC.NewNPC(index1 * 16 + 8, y * 16,
                                                                                    348, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                                                    (int) byte.MaxValue))
                                                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 347,
                                                                                0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                                                (int) byte.MaxValue))
                                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 344, 0,
                                                                            0.0f, 0.0f, 0.0f, 0.0f,
                                                                            (int) byte.MaxValue)))
                                                                : (Main.rand.Next(10) != 0 || NPC.AnyNPCs(346)
                                                                    ? (Main.rand.Next(3) != 0
                                                                        ? (Main.rand.Next(4) != 0
                                                                            ? NPC.NewNPC(index1 * 16 + 8, y * 16,
                                                                                Main.rand.Next(338, 341), 0, 0.0f, 0.0f,
                                                                                0.0f, 0.0f, (int) byte.MaxValue)
                                                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 350,
                                                                                0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                                                (int) byte.MaxValue))
                                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 342, 0,
                                                                            0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue)
                                                                    )
                                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 346, 0, 0.0f,
                                                                        0.0f, 0.0f, 0.0f, (int) byte.MaxValue)))
                                                            : (Main.rand.Next(10) != 0 || NPC.AnyNPCs(346)
                                                                ? (Main.rand.Next(8) != 0
                                                                    ? (Main.rand.Next(3) != 0
                                                                        ? (Main.rand.Next(3) != 0
                                                                            ? NPC.NewNPC(index1 * 16 + 8, y * 16, 350,
                                                                                0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                                                (int) byte.MaxValue)
                                                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 347,
                                                                                0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                                                (int) byte.MaxValue))
                                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 348, 0,
                                                                            0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue)
                                                                    )
                                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 351, 0, 0.0f,
                                                                        0.0f, 0.0f, 0.0f, (int) byte.MaxValue))
                                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 346, 0, 0.0f,
                                                                    0.0f, 0.0f, 0.0f, (int) byte.MaxValue)))
                                                        : (Main.rand.Next(10) != 0 || NPC.AnyNPCs(346)
                                                            ? (Main.rand.Next(10) != 0 || NPC.AnyNPCs(344)
                                                                ? (Main.rand.Next(2) != 0
                                                                    ? (Main.rand.Next(3) != 0
                                                                        ? NPC.NewNPC(index1 * 16 + 8, y * 16, 342, 0,
                                                                            0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue)
                                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 347, 0,
                                                                            0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue)
                                                                    )
                                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 348, 0, 0.0f,
                                                                        0.0f, 0.0f, 0.0f, (int) byte.MaxValue))
                                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 344, 0, 0.0f,
                                                                    0.0f, 0.0f, 0.0f, (int) byte.MaxValue))
                                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 346, 0, 0.0f, 0.0f,
                                                                0.0f, 0.0f, (int) byte.MaxValue)))
                                                    : (Main.rand.Next(10) != 0 || NPC.AnyNPCs(346)
                                                        ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(344) >= 2
                                                            ? (Main.rand.Next(6) != 0
                                                                ? (Main.rand.Next(3) != 0
                                                                    ? (Main.rand.Next(3) != 0
                                                                        ? NPC.NewNPC(index1 * 16 + 8, y * 16,
                                                                            Main.rand.Next(338, 341), 0, 0.0f, 0.0f,
                                                                            0.0f, 0.0f, (int) byte.MaxValue)
                                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 347, 0,
                                                                            0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue)
                                                                    )
                                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 348, 0, 0.0f,
                                                                        0.0f, 0.0f, 0.0f, (int) byte.MaxValue))
                                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 351, 0, 0.0f,
                                                                    0.0f, 0.0f, 0.0f, (int) byte.MaxValue))
                                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 344, 0, 0.0f, 0.0f,
                                                                0.0f, 0.0f, (int) byte.MaxValue))
                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 346, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue)))
                                                : (Main.rand.Next(10) != 0 || NPC.AnyNPCs(345)
                                                    ? (Main.rand.Next(6) != 0
                                                        ? (Main.rand.Next(2) != 0
                                                            ? NPC.NewNPC(index1 * 16 + 8, y * 16,
                                                                Main.rand.Next(338, 341), 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                                (int) byte.MaxValue)
                                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 342, 0, 0.0f, 0.0f,
                                                                0.0f, 0.0f, (int) byte.MaxValue))
                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 352, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue))
                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 345, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue)))
                                            : (Main.rand.Next(10) != 0 || NPC.AnyNPCs(345)
                                                ? (Main.rand.Next(10) != 0 || NPC.AnyNPCs(344)
                                                    ? (Main.rand.Next(8) != 0
                                                        ? (Main.rand.Next(3) != 0
                                                            ? NPC.NewNPC(index1 * 16 + 8, y * 16,
                                                                Main.rand.Next(338, 341), 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                                (int) byte.MaxValue)
                                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 342, 0, 0.0f, 0.0f,
                                                                0.0f, 0.0f, (int) byte.MaxValue))
                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 343, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue))
                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 344, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 345, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue)))
                                        : (Main.rand.Next(10) != 0 || NPC.AnyNPCs(345)
                                            ? (Main.rand.Next(10) != 0 || NPC.AnyNPCs(346)
                                                ? (Main.rand.Next(3) != 0
                                                    ? (Main.rand.Next(6) != 0
                                                        ? (Main.rand.Next(3) != 0
                                                            ? NPC.NewNPC(index1 * 16 + 8, y * 16, 347, 0, 0.0f, 0.0f,
                                                                0.0f, 0.0f, (int) byte.MaxValue)
                                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 342, 0, 0.0f, 0.0f,
                                                                0.0f, 0.0f, (int) byte.MaxValue))
                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 343, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue))
                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 352, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 346, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue))
                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 345, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue));
                            }
                            else if ((double) y <= Main.worldSurface && !Main.dayTime && Main.pumpkinMoon)
                            {
                                var waveNumber = NPC.waveNumber;
                                int num3;
                                if (NPC.waveNumber >= 15)
                                {
                                    newNPC = Main.rand.Next(2) != 0
                                        ? NPC.NewNPC(index1 * 16 + 8, y * 16, 325, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue)
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 327, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                }
                                else
                                {
                                    switch (waveNumber)
                                    {
                                        case 2:
                                            newNPC = Main.rand.Next(3) != 0
                                                ? NPC.NewNPC(index1 * 16 + 8, y * 16, Main.rand.Next(305, 315), 0, 0.0f,
                                                    0.0f, 0.0f, 0.0f, (int) byte.MaxValue)
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 326, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                            break;
                                        case 3:
                                            newNPC = Main.rand.Next(6) != 0
                                                ? (Main.rand.Next(3) != 0
                                                    ? NPC.NewNPC(index1 * 16 + 8, y * 16, Main.rand.Next(305, 315), 0,
                                                        0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue)
                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 326, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 329, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                            break;
                                        case 4:
                                            newNPC = Main.rand.Next(10) != 0 || NPC.AnyNPCs(325)
                                                ? (Main.rand.Next(10) != 0
                                                    ? (Main.rand.Next(2) != 0
                                                        ? NPC.NewNPC(index1 * 16 + 8, y * 16, Main.rand.Next(305, 315),
                                                            0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue)
                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 326, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue))
                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 329, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 325, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                            break;
                                        case 5:
                                            newNPC = Main.rand.Next(10) != 0 || NPC.AnyNPCs(325)
                                                ? (Main.rand.Next(8) != 0
                                                    ? (Main.rand.Next(5) != 0
                                                        ? (Main.rand.Next(2) != 0
                                                            ? NPC.NewNPC(index1 * 16 + 8, y * 16,
                                                                Main.rand.Next(305, 315), 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                                (int) byte.MaxValue)
                                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 326, 0, 0.0f, 0.0f,
                                                                0.0f, 0.0f, (int) byte.MaxValue))
                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 329, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue))
                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 330, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 325, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                            break;
                                        case 6:
                                            newNPC = Main.rand.Next(7) != 0 || NPC.CountNPCS(325) >= 2
                                                ? (Main.rand.Next(6) != 0
                                                    ? (Main.rand.Next(3) != 0
                                                        ? NPC.NewNPC(index1 * 16 + 8, y * 16, 326, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue)
                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 329, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue))
                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 330, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 325, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                            break;
                                        case 7:
                                            newNPC = Main.rand.Next(10) != 0 || NPC.AnyNPCs(327)
                                                ? (Main.rand.Next(8) != 0
                                                    ? (Main.rand.Next(5) != 0
                                                        ? NPC.NewNPC(index1 * 16 + 8, y * 16, Main.rand.Next(305, 315),
                                                            0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue)
                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 329, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue))
                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 330, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 327, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                            break;
                                        case 8:
                                            newNPC = Main.rand.Next(10) != 0 || NPC.AnyNPCs(327)
                                                ? (Main.rand.Next(5) != 0
                                                    ? (Main.rand.Next(3) != 0
                                                        ? NPC.NewNPC(index1 * 16 + 8, y * 16, 326, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue)
                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 329, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue))
                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 330, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 327, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                            break;
                                        case 9:
                                            newNPC = Main.rand.Next(8) != 0 || NPC.AnyNPCs(327)
                                                ? (Main.rand.Next(8) != 0 || NPC.AnyNPCs(325)
                                                    ? (Main.rand.Next(10) != 0 || NPC.AnyNPCs(315)
                                                        ? NPC.NewNPC(index1 * 16 + 8, y * 16, Main.rand.Next(305, 315),
                                                            0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue)
                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 315, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue))
                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 325, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 327, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                            break;
                                        case 10:
                                            newNPC = Main.rand.Next(10) != 0 || NPC.AnyNPCs(327)
                                                ? (Main.rand.Next(10) != 0 || NPC.AnyNPCs(325)
                                                    ? (Main.rand.Next(10) != 0 || NPC.AnyNPCs(315)
                                                        ? (Main.rand.Next(8) != 0
                                                            ? (Main.rand.Next(5) != 0
                                                                ? NPC.NewNPC(index1 * 16 + 8, y * 16, 326, 0, 0.0f,
                                                                    0.0f, 0.0f, 0.0f, (int) byte.MaxValue)
                                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 329, 0, 0.0f,
                                                                    0.0f, 0.0f, 0.0f, (int) byte.MaxValue))
                                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 330, 0, 0.0f, 0.0f,
                                                                0.0f, 0.0f, (int) byte.MaxValue))
                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 315, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue))
                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 325, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 327, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                            break;
                                        case 11:
                                            if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(327))
                                                num3 = NPC.NewNPC(index1 * 16 + 8, y * 16, 327, 0, 0.0f, 0.0f, 0.0f,
                                                    0.0f, (int) byte.MaxValue);
                                            newNPC = Main.rand.Next(7) != 0 || NPC.CountNPCS(325) >= 2
                                                ? (Main.rand.Next(10) != 0 || NPC.AnyNPCs(315)
                                                    ? (Main.rand.Next(10) != 0
                                                        ? (Main.rand.Next(7) != 0
                                                            ? (Main.rand.Next(3) != 0
                                                                ? NPC.NewNPC(index1 * 16 + 8, y * 16,
                                                                    Main.rand.Next(305, 315), 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                                    (int) byte.MaxValue)
                                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 326, 0, 0.0f,
                                                                    0.0f, 0.0f, 0.0f, (int) byte.MaxValue))
                                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 329, 0, 0.0f, 0.0f,
                                                                0.0f, 0.0f, (int) byte.MaxValue))
                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 330, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue))
                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 315, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 325, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                            break;
                                        case 12:
                                            if (Main.rand.Next(7) == 0 && NPC.CountNPCS(327) < 2)
                                                num3 = NPC.NewNPC(index1 * 16 + 8, y * 16, 327, 0, 0.0f, 0.0f, 0.0f,
                                                    0.0f, (int) byte.MaxValue);
                                            newNPC = Main.rand.Next(7) != 0 || NPC.CountNPCS(325) >= 2
                                                ? (Main.rand.Next(7) != 0 || NPC.CountNPCS(315) >= 2
                                                    ? (Main.rand.Next(7) != 0
                                                        ? (Main.rand.Next(5) != 0
                                                            ? NPC.NewNPC(index1 * 16 + 8, y * 16, 326, 0, 0.0f, 0.0f,
                                                                0.0f, 0.0f, (int) byte.MaxValue)
                                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 329, 0, 0.0f, 0.0f,
                                                                0.0f, 0.0f, (int) byte.MaxValue))
                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 330, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue))
                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 315, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 325, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                            break;
                                        case 13:
                                            if (Main.rand.Next(7) == 0 && NPC.CountNPCS(327) < 2)
                                                num3 = NPC.NewNPC(index1 * 16 + 8, y * 16, 327, 0, 0.0f, 0.0f, 0.0f,
                                                    0.0f, (int) byte.MaxValue);
                                            newNPC = Main.rand.Next(5) != 0 || NPC.CountNPCS(325) >= 3
                                                ? (Main.rand.Next(5) != 0 || NPC.CountNPCS(315) >= 3
                                                    ? (Main.rand.Next(3) != 0
                                                        ? NPC.NewNPC(index1 * 16 + 8, y * 16, 329, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue)
                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 330, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue))
                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 315, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 325, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                            break;
                                        case 14:
                                            newNPC = Main.rand.Next(5) != 0 || NPC.CountNPCS(327) >= 3
                                                ? (Main.rand.Next(5) != 0 || NPC.CountNPCS(325) >= 3
                                                    ? NPC.NewNPC(index1 * 16 + 8, y * 16, 315, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue)
                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 325, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 327, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                            break;
                                        default:
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, Main.rand.Next(305, 315), 0,
                                                0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
                                            break;
                                    }
                                }
                            }
                            else if ((double) y <= Main.worldSurface && Main.dayTime && Main.eclipse)
                            {
                                var flag16 = false;
                                if (NPC.downedMechBoss1 && NPC.downedMechBoss2 && NPC.downedMechBoss3)
                                    flag16 = true;
                                newNPC = !flag16 || Main.rand.Next(80) != 0 || NPC.AnyNPCs(477)
                                    ? (Main.rand.Next(50) != 0 || NPC.AnyNPCs(251)
                                        ? (!NPC.downedPlantBoss || Main.rand.Next(5) != 0 || NPC.AnyNPCs(466)
                                            ? (!NPC.downedPlantBoss || Main.rand.Next(20) != 0 || NPC.AnyNPCs(463)
                                                ? (
                                                    !NPC.downedPlantBoss || Main.rand.Next(20) != 0 ||
                                                    NPC.CountNPCS(467) >= 2
                                                        ? (Main.rand.Next(15) != 0
                                                            ? (!flag16 || Main.rand.Next(13) != 0
                                                                ? (Main.rand.Next(8) != 0
                                                                    ? (!NPC.downedPlantBoss || Main.rand.Next(7) != 0
                                                                        ? (!NPC.downedPlantBoss ||
                                                                           Main.rand.Next(5) != 0
                                                                            ? (Main.rand.Next(4) != 0
                                                                                ? (Main.rand.Next(3) != 0
                                                                                    ? (Main.rand.Next(2) != 0
                                                                                        ? NPC.NewNPC(index1 * 16 + 8,
                                                                                            y * 16, 166, 0, 0.0f, 0.0f,
                                                                                            0.0f, 0.0f,
                                                                                            (int) byte.MaxValue)
                                                                                        : NPC.NewNPC(index1 * 16 + 8,
                                                                                            y * 16, 462, 0, 0.0f, 0.0f,
                                                                                            0.0f, 0.0f,
                                                                                            (int) byte.MaxValue))
                                                                                    : NPC.NewNPC(index1 * 16 + 8,
                                                                                        y * 16, 461, 0, 0.0f, 0.0f,
                                                                                        0.0f, 0.0f, (int) byte.MaxValue)
                                                                                )
                                                                                : NPC.NewNPC(index1 * 16 + 8, y * 16,
                                                                                    162, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                                                    (int) byte.MaxValue))
                                                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 460,
                                                                                0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                                                (int) byte.MaxValue))
                                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 468, 0,
                                                                            0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue)
                                                                    )
                                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 469, 0, 0.0f,
                                                                        0.0f, 0.0f, 0.0f, (int) byte.MaxValue))
                                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 253, 0, 0.0f,
                                                                    0.0f, 0.0f, 0.0f, (int) byte.MaxValue))
                                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 159, 0, 0.0f, 0.0f,
                                                                0.0f, 0.0f, (int) byte.MaxValue))
                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 467, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 463, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue))
                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 466, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue))
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 251, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue))
                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 477, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                            }
                            else if (Main.hardMode && num1 == 70 && flag6)
                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 256, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if (num1 == 70 && (double) y <= Main.worldSurface && Main.rand.Next(3) != 0)
                            {
                                if (!Main.hardMode && Main.rand.Next(6) == 0 || Main.rand.Next(12) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 360, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.rand.Next(3) == 0)
                                {
                                    if (Main.rand.Next(4) == 0)
                                    {
                                        if (Main.hardMode && Main.rand.Next(3) != 0)
                                        {
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 260, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            Main.npc[newNPC].ai[0] = (float) index1;
                                            Main.npc[newNPC].ai[1] = (float) y;
                                            Main.npc[newNPC].netUpdate = true;
                                        }
                                        else
                                        {
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 259, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            Main.npc[newNPC].ai[0] = (float) index1;
                                            Main.npc[newNPC].ai[1] = (float) y;
                                            Main.npc[newNPC].netUpdate = true;
                                        }
                                    }
                                    else
                                        newNPC = Main.rand.Next(2) != 0
                                            ? NPC.NewNPC(index1 * 16 + 8, y * 16, 258, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue)
                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 257, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                }
                                else
                                    newNPC = Main.rand.Next(2) != 0
                                        ? NPC.NewNPC(index1 * 16 + 8, y * 16, (int) byte.MaxValue, 0, 0.0f, 0.0f, 0.0f,
                                            0.0f, (int) byte.MaxValue)
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 254, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                            }
                            else if (num1 == 70 && Main.hardMode &&
                                     ((double) y >= Main.worldSurface && Main.rand.Next(3) != 0))
                            {
                                if (Main.hardMode && Main.rand.Next(5) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 374, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (!Main.hardMode && Main.rand.Next(4) == 0 || Main.rand.Next(8) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 360, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.rand.Next(4) == 0)
                                {
                                    if (Main.hardMode && Main.rand.Next(3) != 0)
                                    {
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 260, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                        Main.npc[newNPC].ai[0] = (float) index1;
                                        Main.npc[newNPC].ai[1] = (float) y;
                                        Main.npc[newNPC].netUpdate = true;
                                    }
                                    else
                                    {
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 259, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                        Main.npc[newNPC].ai[0] = (float) index1;
                                        Main.npc[newNPC].ai[1] = (float) y;
                                        Main.npc[newNPC].netUpdate = true;
                                    }
                                }
                                else
                                    newNPC = Main.rand.Next(2) != 0
                                        ? NPC.NewNPC(index1 * 16 + 8, y * 16, 258, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue)
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 257, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                            }
                            else if (Main.player[plr].ZoneCorrupt && Main.rand.Next(65) == 0 && !flag4)
                                newNPC = !Main.hardMode || Main.rand.Next(4) == 0
                                    ? NPC.NewNPC(index1 * 16 + 8, y * 16, 7, 1, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue)
                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 98, 1, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                            else if (Main.hardMode && (double) y > Main.worldSurface && Main.rand.Next(75) == 0)
                                newNPC = Main.rand.Next(2) != 0 || !Main.player[plr].ZoneCorrupt || NPC.AnyNPCs(473)
                                    ? (Main.rand.Next(2) != 0 || !Main.player[plr].ZoneCrimson || NPC.AnyNPCs(474)
                                        ? (Main.rand.Next(2) != 0 || !Main.player[plr].ZoneHoly || NPC.AnyNPCs(475)
                                            ? NPC.NewNPC(index1 * 16 + 8, y * 16, 85, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue)
                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 475, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue))
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 474, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue))
                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 473, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                            else if (Main.hardMode && Main.tile[index1, y - 1].wall == (byte) 2 &&
                                     Main.rand.Next(20) == 0)
                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 85, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if (Main.hardMode && (double) y <= Main.worldSurface && !Main.dayTime &&
                                     (Main.rand.Next(20) == 0 || Main.rand.Next(5) == 0 && Main.moonPhase == 4))
                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 82, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if (Main.hardMode && Main.halloween &&
                                     ((double) y <= Main.worldSurface && !Main.dayTime) && Main.rand.Next(10) == 0)
                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 304, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if (type == 60 && Main.rand.Next(500) == 0 && !Main.dayTime)
                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 52, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if (type == 60 && (double) y > Main.worldSurface && Main.rand.Next(60) == 0)
                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 219, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if ((double) y > Main.worldSurface && y < Main.maxTilesY - 210 &&
                                     (!Main.player[plr].ZoneSnow && !Main.player[plr].ZoneCrimson) &&
                                     (!Main.player[plr].ZoneCorrupt && !Main.player[plr].ZoneJungle &&
                                      (!Main.player[plr].ZoneHoly && Main.rand.Next(8) == 0)))
                            {
                                if (Main.rand.Next(NPC.goldCritterChance) == 0)
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 448, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 357, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                            }
                            else if ((double) y > Main.worldSurface && y < Main.maxTilesY - 210 &&
                                     (!Main.player[plr].ZoneSnow && !Main.player[plr].ZoneCrimson) &&
                                     (!Main.player[plr].ZoneCorrupt && !Main.player[plr].ZoneJungle &&
                                      (!Main.player[plr].ZoneHoly && Main.rand.Next(13) == 0)))
                            {
                                if (Main.rand.Next(NPC.goldCritterChance) == 0)
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 447, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 300, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                            }
                            else if ((double) y > Main.worldSurface &&
                                     (double) y < (Main.rockLayer + (double) Main.maxTilesY) / 2.0 &&
                                     (!Main.player[plr].ZoneSnow && !Main.player[plr].ZoneCrimson) &&
                                     (!Main.player[plr].ZoneCorrupt && !Main.player[plr].ZoneHoly &&
                                      Main.rand.Next(13) == 0))
                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 359, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if ((double) y < Main.worldSurface && Main.player[plr].ZoneJungle &&
                                     Main.rand.Next(9) == 0)
                            {
                                if (Main.rand.Next(NPC.goldCritterChance) == 0)
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 445, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 361, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                            }
                            else if (type == 60 && Main.hardMode && Main.rand.Next(3) != 0)
                            {
                                if ((double) y < Main.worldSurface && !Main.dayTime && Main.rand.Next(3) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 152, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if ((double) y < Main.worldSurface && Main.dayTime && Main.rand.Next(4) != 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 177, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if ((double) y > Main.worldSurface && Main.rand.Next(100) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 205, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if ((double) y > Main.worldSurface && Main.rand.Next(5) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 236, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if ((double) y > Main.worldSurface && Main.rand.Next(4) != 0)
                                {
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 176, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                    if (Main.rand.Next(10) == 0)
                                        Main.npc[newNPC].SetDefaults(-18, -1f);
                                    if (Main.rand.Next(10) == 0)
                                        Main.npc[newNPC].SetDefaults(-19, -1f);
                                    if (Main.rand.Next(10) == 0)
                                        Main.npc[newNPC].SetDefaults(-20, -1f);
                                    if (Main.rand.Next(10) == 0)
                                        Main.npc[newNPC].SetDefaults(-21, -1f);
                                }
                                else if (Main.rand.Next(3) == 0)
                                {
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 175, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                    Main.npc[newNPC].ai[0] = (float) index1;
                                    Main.npc[newNPC].ai[1] = (float) y;
                                    Main.npc[newNPC].netUpdate = true;
                                }
                                else
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 153, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                            }
                            else if (type == 226 && flag3)
                                newNPC = Main.rand.Next(3) != 0
                                    ? NPC.NewNPC(index1 * 16 + 8, y * 16, 198, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue)
                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 226, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                            else if (type == 60 && (double) y > (Main.worldSurface + Main.rockLayer) / 2.0)
                            {
                                if (Main.rand.Next(4) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 204, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.rand.Next(4) == 0)
                                {
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 43, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                    Main.npc[newNPC].ai[0] = (float) index1;
                                    Main.npc[newNPC].ai[1] = (float) y;
                                    Main.npc[newNPC].netUpdate = true;
                                }
                                else
                                {
                                    switch (Main.rand.Next(8))
                                    {
                                        case 0:
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 231, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            if (Main.rand.Next(4) == 0)
                                            {
                                                Main.npc[newNPC].SetDefaults(-56, -1f);
                                                break;
                                            }

                                            if (Main.rand.Next(4) == 0)
                                            {
                                                Main.npc[newNPC].SetDefaults(-57, -1f);
                                                break;
                                            }

                                            break;
                                        case 1:
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 232, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            if (Main.rand.Next(4) == 0)
                                            {
                                                Main.npc[newNPC].SetDefaults(-58, -1f);
                                                break;
                                            }

                                            if (Main.rand.Next(4) == 0)
                                            {
                                                Main.npc[newNPC].SetDefaults(-59, -1f);
                                                break;
                                            }

                                            break;
                                        case 2:
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 233, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            if (Main.rand.Next(4) == 0)
                                            {
                                                Main.npc[newNPC].SetDefaults(-60, -1f);
                                                break;
                                            }

                                            if (Main.rand.Next(4) == 0)
                                            {
                                                Main.npc[newNPC].SetDefaults(-61, -1f);
                                                break;
                                            }

                                            break;
                                        case 3:
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 234, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            if (Main.rand.Next(4) == 0)
                                            {
                                                Main.npc[newNPC].SetDefaults(-62, -1f);
                                                break;
                                            }

                                            if (Main.rand.Next(4) == 0)
                                            {
                                                Main.npc[newNPC].SetDefaults(-63, -1f);
                                                break;
                                            }

                                            break;
                                        case 4:
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 235, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            if (Main.rand.Next(4) == 0)
                                            {
                                                Main.npc[newNPC].SetDefaults(-64, -1f);
                                                break;
                                            }

                                            if (Main.rand.Next(4) == 0)
                                            {
                                                Main.npc[newNPC].SetDefaults(-65, -1f);
                                                break;
                                            }

                                            break;
                                        default:
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 42, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            if (Main.rand.Next(4) == 0)
                                            {
                                                Main.npc[newNPC].SetDefaults(-16, -1f);
                                                break;
                                            }

                                            if (Main.rand.Next(4) == 0)
                                            {
                                                Main.npc[newNPC].SetDefaults(-17, -1f);
                                                break;
                                            }

                                            break;
                                    }
                                }
                            }
                            else if (type == 60 && Main.rand.Next(4) == 0)
                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 51, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if (type == 60 && Main.rand.Next(8) == 0)
                            {
                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 56, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                                Main.npc[newNPC].ai[0] = (float) index1;
                                Main.npc[newNPC].ai[1] = (float) y;
                                Main.npc[newNPC].netUpdate = true;
                            }
                            else if (Sandstorm.Happening && Main.player[plr].ZoneSandstorm &&
                                     (TileID.Sets.Conversion.Sand[type] && NPC.Spawning_SandstoneCheck(index1, y)))
                            {
                                if (!NPC.downedBoss1 && !Main.hardMode)
                                    newNPC = Main.rand.Next(2) != 0
                                        ? (Main.rand.Next(2) != 0
                                            ? (Main.rand.Next(2) != 0
                                                ? NPC.NewNPC(index1 * 16 + 8, y * 16, 69, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue)
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 61, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue))
                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 508, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue))
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 546, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                else if (Main.hardMode && Main.rand.Next(20) == 0 && !NPC.AnyNPCs(541))
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 541, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.hardMode && !flag4 && (Main.rand.Next(3) == 0 && NPC.CountNPCS(510) < 4))
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, (y + 10) * 16, 510, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.hardMode && !flag4 && Main.rand.Next(2) == 0)
                                {
                                    var Type2 = 542;
                                    if (TileID.Sets.Corrupt[type])
                                        Type2 = 543;
                                    if (TileID.Sets.Crimson[type])
                                        Type2 = 544;
                                    if (TileID.Sets.Hallow[type])
                                        Type2 = 545;
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, Type2, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                }
                                else
                                    newNPC = !Main.hardMode || type != 53 || Main.rand.Next(3) != 0
                                        ? (!Main.hardMode || type != 112 && type != 234 || Main.rand.Next(3) != 0
                                            ? (!Main.hardMode || type != 116 || Main.rand.Next(3) != 0
                                                ? (Main.rand.Next(2) != 0
                                                    ? (Main.rand.Next(2) != 0
                                                        ? NPC.NewNPC(index1 * 16 + 8, y * 16, 509, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue)
                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 508, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue))
                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 546, 0, 0.0f, 0.0f, 0.0f,
                                                        0.0f, (int) byte.MaxValue))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 80, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue))
                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 79, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue))
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 78, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                            }
                            else if (Main.hardMode && type == 53 && Main.rand.Next(3) == 0)
                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 78, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if (Main.hardMode && (type == 112 || type == 234) && Main.rand.Next(2) == 0)
                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 79, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if (Main.hardMode && type == 116 && Main.rand.Next(2) == 0)
                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 80, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if (Main.hardMode && !flag6 && (double) y < Main.rockLayer &&
                                     (type == 116 || type == 117 || (type == 109 || type == 164)))
                                newNPC = Main.dayTime || Main.rand.Next(2) != 0
                                    ? (Main.rand.Next(10) == 0 ||
                                       Main.player[plr].ZoneWaterCandle && Main.rand.Next(10) == 0
                                        ? NPC.NewNPC(index1 * 16 + 8, y * 16, 86, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue)
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 75, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue))
                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 122, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                            else if (!flag4 && Main.hardMode && (Main.rand.Next(50) == 0 && !flag6) &&
                                     (double) y >= Main.rockLayer &&
                                     (type == 116 || type == 117 || (type == 109 || type == 164)))
                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 84, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if (type == 204 && Main.player[plr].ZoneCrimson || (type == 199 || type == 200) ||
                                     (type == 203 || type == 234))
                            {
                                if (Main.hardMode && (double) y >= Main.rockLayer && (Main.rand.Next(5) == 0 && !flag4))
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 182, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.hardMode && (double) y >= Main.rockLayer && Main.rand.Next(2) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 268, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.hardMode && Main.rand.Next(3) == 0)
                                {
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 183, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                    if (Main.rand.Next(3) == 0)
                                        Main.npc[newNPC].SetDefaults(-24, -1f);
                                    else if (Main.rand.Next(3) == 0)
                                        Main.npc[newNPC].SetDefaults(-25, -1f);
                                }
                                else if (Main.hardMode && (double) y >= Main.rockLayer &&
                                         (Main.rand.Next(40) == 0 && !flag4))
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 179, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.hardMode && (Main.rand.Next(2) == 0 || (double) y > Main.worldSurface))
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 174, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.tile[index1, y].wall > (byte) 0 && Main.rand.Next(4) != 0 ||
                                         Main.rand.Next(8) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 239, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.rand.Next(2) == 0)
                                {
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 181, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                }
                                else
                                {
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 173, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                    if (Main.rand.Next(3) == 0)
                                        Main.npc[newNPC].SetDefaults(-22, -1f);
                                    else if (Main.rand.Next(3) == 0)
                                        Main.npc[newNPC].SetDefaults(-23, -1f);
                                }
                            }
                            else if (type == 22 && Main.player[plr].ZoneCorrupt || (type == 23 || type == 25) ||
                                     (type == 112 || type == 163))
                            {
                                if (Main.hardMode && (double) y >= Main.rockLayer && Main.rand.Next(3) == 0)
                                {
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 101, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                    Main.npc[newNPC].ai[0] = (float) index1;
                                    Main.npc[newNPC].ai[1] = (float) y;
                                    Main.npc[newNPC].netUpdate = true;
                                }
                                else if (Main.hardMode && Main.rand.Next(3) == 0)
                                    newNPC = Main.rand.Next(3) != 0
                                        ? NPC.NewNPC(index1 * 16 + 8, y * 16, 81, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue)
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 121, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                else if (Main.hardMode && (double) y >= Main.rockLayer &&
                                         (Main.rand.Next(40) == 0 && !flag4))
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 83, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.hardMode && (Main.rand.Next(2) == 0 || (double) y > Main.rockLayer))
                                {
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 94, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                }
                                else
                                {
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 6, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                    if (Main.rand.Next(3) == 0)
                                        Main.npc[newNPC].SetDefaults(-11, -1f);
                                    else if (Main.rand.Next(3) == 0)
                                        Main.npc[newNPC].SetDefaults(-12, -1f);
                                }
                            }
                            else if ((double) y <= Main.worldSurface)
                            {
                                var flag16 =
                                    (double) Math.Abs(index1 - Main.maxTilesX / 2) / (double) (Main.maxTilesX / 2) >
                                    0.330000013113022;
                                if (flag16 && NPC.AnyDanger())
                                    flag16 = false;
                                if (Main.player[plr].ZoneSnow && Main.hardMode &&
                                    ((double) Main.cloudAlpha > 0.0 && !NPC.AnyNPCs(243)) && Main.rand.Next(20) == 0)
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 243, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.player[plr].ZoneHoly && Main.hardMode &&
                                         ((double) Main.cloudAlpha > 0.0 && !NPC.AnyNPCs(244)) &&
                                         Main.rand.Next(20) == 0)
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 244, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (!Main.player[plr].ZoneSnow && Main.hardMode &&
                                         ((double) Main.cloudAlpha > 0.0 && NPC.CountNPCS(250) < 2) &&
                                         Main.rand.Next(10) == 0)
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 250, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (flag16 && Main.hardMode && NPC.downedGolemBoss &&
                                         (!NPC.downedMartians && Main.rand.Next(100) == 0 ||
                                          Main.rand.Next(400) == 0) && !NPC.AnyNPCs(399))
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 399, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.dayTime)
                                {
                                    var num3 = Math.Abs(index1 - Main.spawnTileX);
                                    if (num3 < Main.maxTilesX / 3 && Main.rand.Next(15) == 0 &&
                                        (type == 2 || type == 109 || (type == 147 || type == 161)))
                                    {
                                        if (type == 147 || type == 161)
                                        {
                                            if (Main.rand.Next(2) == 0)
                                                NPC.NewNPC(index1 * 16 + 8, y * 16, 148, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                            else
                                                NPC.NewNPC(index1 * 16 + 8, y * 16, 149, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                        }
                                        else if (Main.dayTime && Main.rand.Next(NPC.butterflyChance) == 0 &&
                                                 (double) y <= Main.worldSurface)
                                        {
                                            if (Main.rand.Next(NPC.goldCritterChance) == 0)
                                                NPC.NewNPC(index1 * 16 + 8, y * 16, 444, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                            else
                                                NPC.NewNPC(index1 * 16 + 8, y * 16, 356, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                            if (Main.rand.Next(4) == 0)
                                                NPC.NewNPC(index1 * 16 + 8 - 16, y * 16, 356, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                            if (Main.rand.Next(4) == 0)
                                                NPC.NewNPC(index1 * 16 + 8 + 16, y * 16, 356, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue);
                                        }
                                        else if (Main.rand.Next(NPC.goldCritterChance) == 0)
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 443, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                        else if (Main.rand.Next(NPC.goldCritterChance) == 0 &&
                                                 (double) y <= Main.worldSurface)
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 539, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                        else if (Main.halloween && Main.rand.Next(3) != 0)
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 303, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                        else if (Main.xMas && Main.rand.Next(3) != 0)
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 337, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                        else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) != 0)
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 540, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                        else if (Main.rand.Next(3) == 0 && (double) y <= Main.worldSurface)
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, (int) Utils.SelectRandom<short>(
                                                Main.rand, new short[2]
                                                {
                                                    (short) 299,
                                                    (short) 538
                                                }), 0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
                                        else
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 46, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                    }
                                    else if (num3 < Main.maxTilesX / 3 && Main.rand.Next(15) == 0 && type == 53)
                                        NPC.NewNPC(index1 * 16 + 8, y * 16, Main.rand.Next(366, 368), 0, 0.0f, 0.0f,
                                            0.0f, 0.0f, (int) byte.MaxValue);
                                    else if (num3 < Main.maxTilesX / 3 && Main.dayTime && Main.time < 18000.0 &&
                                             ((type == 2 || type == 109) &&
                                              (Main.rand.Next(4) == 0 && (double) y <= Main.worldSurface)) &&
                                             NPC.CountNPCS(74) + NPC.CountNPCS(297) + NPC.CountNPCS(298) < 6)
                                    {
                                        var num5 = Main.rand.Next(4);
                                        if (Main.rand.Next(NPC.goldCritterChance) == 0)
                                        {
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 442, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                        }
                                        else
                                        {
                                            switch (num5)
                                            {
                                                case 0:
                                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 297, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                        (int) byte.MaxValue);
                                                    break;
                                                case 1:
                                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 298, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                        (int) byte.MaxValue);
                                                    break;
                                                default:
                                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 74, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                        (int) byte.MaxValue);
                                                    break;
                                            }
                                        }
                                    }
                                    else if (num3 < Main.maxTilesX / 3 && Main.rand.Next(15) == 0 &&
                                             (type == 2 || type == 109 || type == 147))
                                    {
                                        var num5 = Main.rand.Next(4);
                                        if (Main.rand.Next(NPC.goldCritterChance) == 0)
                                        {
                                            NPC.NewNPC(index1 * 16 + 8, y * 16, 442, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                        }
                                        else
                                        {
                                            switch (num5)
                                            {
                                                case 0:
                                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 297, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                        (int) byte.MaxValue);
                                                    break;
                                                case 1:
                                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 298, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                        (int) byte.MaxValue);
                                                    break;
                                                default:
                                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 74, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                        (int) byte.MaxValue);
                                                    break;
                                            }
                                        }
                                    }
                                    else if (num3 > Main.maxTilesX / 3 && type == 2 &&
                                             (Main.rand.Next(300) == 0 && !NPC.AnyNPCs(50)))
                                        NPC.SpawnOnPlayer(plr, 50);
                                    else if (type == 53 && Main.rand.Next(5) == 0 &&
                                             (NPC.Spawning_SandstoneCheck(index1, y) && !flag6))
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 69, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    else if (type == 53 && Main.rand.Next(3) == 0 && !flag6)
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 537, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    else if (type == 53 && !flag6)
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 61, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    else if (num3 > Main.maxTilesX / 3 &&
                                             (Main.rand.Next(15) == 0 || !NPC.downedGoblins &&
                                              WorldGen.shadowOrbSmashed && Main.rand.Next(7) == 0))
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 73, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    else if (Main.raining && Main.rand.Next(3) == 0)
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 224, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    else if (Main.raining && Main.rand.Next(2) == 0)
                                    {
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 225, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    }
                                    else
                                    {
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 1, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                        switch (type)
                                        {
                                            case 60:
                                                Main.npc[newNPC].SetDefaults(-10, -1f);
                                                break;
                                            case 147:
                                            case 161:
                                                Main.npc[newNPC].SetDefaults(147, -1f);
                                                break;
                                            default:
                                                if (Main.halloween && Main.rand.Next(3) != 0)
                                                {
                                                    Main.npc[newNPC].SetDefaults(302, -1f);
                                                    break;
                                                }

                                                if (Main.xMas && Main.rand.Next(3) != 0)
                                                {
                                                    Main.npc[newNPC].SetDefaults(Main.rand.Next(333, 337), -1f);
                                                    break;
                                                }

                                                if (Main.rand.Next(3) == 0 || num3 < 200 && !Main.expertMode)
                                                {
                                                    Main.npc[newNPC].SetDefaults(-3, -1f);
                                                    break;
                                                }

                                                if (Main.rand.Next(10) == 0 && (num3 > 400 || Main.expertMode))
                                                {
                                                    Main.npc[newNPC].SetDefaults(-7, -1f);
                                                    break;
                                                }

                                                break;
                                        }
                                    }
                                }
                                else if ((num1 == 2 || num1 == 109) &&
                                         (Main.rand.Next(NPC.fireFlyChance) == 0 && (double) y <= Main.worldSurface))
                                {
                                    var Type2 = 355;
                                    if (type == 109)
                                        Type2 = 358;
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, Type2, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                    if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
                                        NPC.NewNPC(index1 * 16 + 8 - 16, y * 16, Type2, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
                                        NPC.NewNPC(index1 * 16 + 8 + 16, y * 16, Type2, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
                                        NPC.NewNPC(index1 * 16 + 8, y * 16 - 16, Type2, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
                                        NPC.NewNPC(index1 * 16 + 8, y * 16 + 16, Type2, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                }
                                else if (Main.rand.Next(10) == 0 && Main.halloween)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 301, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.rand.Next(6) == 0 || Main.moonPhase == 4 && Main.rand.Next(2) == 0)
                                {
                                    if (Main.hardMode && Main.rand.Next(3) == 0)
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 133, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    else if (Main.halloween && Main.rand.Next(2) == 0)
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, Main.rand.Next(317, 319), 0, 0.0f,
                                            0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
                                    else if (Main.rand.Next(2) == 0)
                                    {
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 2, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                        if (Main.rand.Next(4) == 0)
                                            Main.npc[newNPC].SetDefaults(-43, -1f);
                                    }
                                    else
                                    {
                                        switch (Main.rand.Next(5))
                                        {
                                            case 0:
                                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 190, 0, 0.0f, 0.0f, 0.0f,
                                                    0.0f, (int) byte.MaxValue);
                                                if (Main.rand.Next(3) == 0)
                                                {
                                                    Main.npc[newNPC].SetDefaults(-38, -1f);
                                                    break;
                                                }

                                                break;
                                            case 1:
                                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 191, 0, 0.0f, 0.0f, 0.0f,
                                                    0.0f, (int) byte.MaxValue);
                                                if (Main.rand.Next(3) == 0)
                                                {
                                                    Main.npc[newNPC].SetDefaults(-39, -1f);
                                                    break;
                                                }

                                                break;
                                            case 2:
                                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 192, 0, 0.0f, 0.0f, 0.0f,
                                                    0.0f, (int) byte.MaxValue);
                                                if (Main.rand.Next(3) == 0)
                                                {
                                                    Main.npc[newNPC].SetDefaults(-40, -1f);
                                                    break;
                                                }

                                                break;
                                            case 3:
                                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 193, 0, 0.0f, 0.0f, 0.0f,
                                                    0.0f, (int) byte.MaxValue);
                                                if (Main.rand.Next(3) == 0)
                                                {
                                                    Main.npc[newNPC].SetDefaults(-41, -1f);
                                                    break;
                                                }

                                                break;
                                            case 4:
                                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 194, 0, 0.0f, 0.0f, 0.0f,
                                                    0.0f, (int) byte.MaxValue);
                                                if (Main.rand.Next(3) == 0)
                                                {
                                                    Main.npc[newNPC].SetDefaults(-42, -1f);
                                                    break;
                                                }

                                                break;
                                        }
                                    }
                                }
                                else if (Main.hardMode && Main.rand.Next(50) == 0 &&
                                         (Main.bloodMoon && !NPC.AnyNPCs(109)))
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 109, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.rand.Next(250) == 0 && Main.bloodMoon)
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 53, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.rand.Next(250) == 0 && Main.bloodMoon)
                                    NPC.NewNPC(index1 * 16 + 8, y * 16, 536, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.moonPhase == 0 && Main.hardMode && Main.rand.Next(3) != 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 104, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.hardMode && Main.rand.Next(3) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 140, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.bloodMoon && Main.rand.Next(5) < 2)
                                    newNPC = Main.rand.Next(2) != 0
                                        ? NPC.NewNPC(index1 * 16 + 8, y * 16, 490, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue)
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 489, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                else if (num1 == 147 || num1 == 161 || (num1 == 163 || num1 == 164) || num1 == 162)
                                    newNPC = !Main.hardMode || Main.rand.Next(4) != 0
                                        ? (!Main.hardMode || Main.rand.Next(3) != 0
                                            ? (!Main.expertMode || Main.rand.Next(2) != 0
                                                ? NPC.NewNPC(index1 * 16 + 8, y * 16, 161, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue)
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 431, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue))
                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 155, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue))
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 169, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                else if (Main.raining && Main.rand.Next(2) == 0)
                                {
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 223, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                    if (Main.rand.Next(3) == 0)
                                    {
                                        if (Main.rand.Next(2) == 0)
                                            Main.npc[newNPC].SetDefaults(-54, -1f);
                                        else
                                            Main.npc[newNPC].SetDefaults(-55, -1f);
                                    }
                                }
                                else
                                {
                                    var num3 = Main.rand.Next(7);
                                    if (Main.halloween && Main.rand.Next(2) == 0)
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, Main.rand.Next(319, 322), 0, 0.0f,
                                            0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
                                    else if (Main.xMas && Main.rand.Next(2) == 0)
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, Main.rand.Next(331, 333), 0, 0.0f,
                                            0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
                                    else if (num3 == 0 && Main.expertMode && Main.rand.Next(3) == 0)
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 430, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    else if (num3 == 2 && Main.expertMode && Main.rand.Next(3) == 0)
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 432, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    else if (num3 == 3 && Main.expertMode && Main.rand.Next(3) == 0)
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 433, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    else if (num3 == 4 && Main.expertMode && Main.rand.Next(3) == 0)
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 434, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    else if (num3 == 5 && Main.expertMode && Main.rand.Next(3) == 0)
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 435, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    else if (num3 == 6 && Main.expertMode && Main.rand.Next(3) == 0)
                                    {
                                        newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 436, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                    }
                                    else
                                    {
                                        switch (num3)
                                        {
                                            case 0:
                                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 3, 0, 0.0f, 0.0f, 0.0f,
                                                    0.0f, (int) byte.MaxValue);
                                                if (Main.rand.Next(3) == 0)
                                                {
                                                    if (Main.rand.Next(2) == 0)
                                                    {
                                                        Main.npc[newNPC].SetDefaults(-26, -1f);
                                                        break;
                                                    }

                                                    Main.npc[newNPC].SetDefaults(-27, -1f);
                                                    break;
                                                }

                                                break;
                                            case 1:
                                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 132, 0, 0.0f, 0.0f, 0.0f,
                                                    0.0f, (int) byte.MaxValue);
                                                if (Main.rand.Next(3) == 0)
                                                {
                                                    if (Main.rand.Next(2) == 0)
                                                    {
                                                        Main.npc[newNPC].SetDefaults(-28, -1f);
                                                        break;
                                                    }

                                                    Main.npc[newNPC].SetDefaults(-29, -1f);
                                                    break;
                                                }

                                                break;
                                            case 2:
                                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 186, 0, 0.0f, 0.0f, 0.0f,
                                                    0.0f, (int) byte.MaxValue);
                                                if (Main.rand.Next(3) == 0)
                                                {
                                                    if (Main.rand.Next(2) == 0)
                                                    {
                                                        Main.npc[newNPC].SetDefaults(-30, -1f);
                                                        break;
                                                    }

                                                    Main.npc[newNPC].SetDefaults(-31, -1f);
                                                    break;
                                                }

                                                break;
                                            case 3:
                                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 187, 0, 0.0f, 0.0f, 0.0f,
                                                    0.0f, (int) byte.MaxValue);
                                                if (Main.rand.Next(3) == 0)
                                                {
                                                    if (Main.rand.Next(2) == 0)
                                                    {
                                                        Main.npc[newNPC].SetDefaults(-32, -1f);
                                                        break;
                                                    }

                                                    Main.npc[newNPC].SetDefaults(-33, -1f);
                                                    break;
                                                }

                                                break;
                                            case 4:
                                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 188, 0, 0.0f, 0.0f, 0.0f,
                                                    0.0f, (int) byte.MaxValue);
                                                if (Main.rand.Next(3) == 0)
                                                {
                                                    if (Main.rand.Next(2) == 0)
                                                    {
                                                        Main.npc[newNPC].SetDefaults(-34, -1f);
                                                        break;
                                                    }

                                                    Main.npc[newNPC].SetDefaults(-35, -1f);
                                                    break;
                                                }

                                                break;
                                            case 5:
                                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 189, 0, 0.0f, 0.0f, 0.0f,
                                                    0.0f, (int) byte.MaxValue);
                                                if (Main.rand.Next(3) == 0)
                                                {
                                                    if (Main.rand.Next(2) == 0)
                                                    {
                                                        Main.npc[newNPC].SetDefaults(-36, -1f);
                                                        break;
                                                    }

                                                    Main.npc[newNPC].SetDefaults(-37, -1f);
                                                    break;
                                                }

                                                break;
                                            case 6:
                                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 200, 0, 0.0f, 0.0f, 0.0f,
                                                    0.0f, (int) byte.MaxValue);
                                                if (Main.rand.Next(3) == 0)
                                                {
                                                    if (Main.rand.Next(2) == 0)
                                                    {
                                                        Main.npc[newNPC].SetDefaults(-44, -1f);
                                                        break;
                                                    }

                                                    Main.npc[newNPC].SetDefaults(-45, -1f);
                                                    break;
                                                }

                                                break;
                                        }
                                    }
                                }
                            }
                            else if ((double) y <= Main.rockLayer)
                            {
                                if (!flag4 && Main.rand.Next(50) == 0 && !Main.player[plr].ZoneSnow)
                                    newNPC = !Main.hardMode
                                        ? (!Main.player[plr].ZoneSnow
                                            ? NPC.NewNPC(index1 * 16 + 8, y * 16, 10, 1, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue)
                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 185, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue))
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 95, 1, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                else if (Main.hardMode && Main.rand.Next(3) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 140, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.hardMode && Main.rand.Next(4) != 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 141, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (type == 147 || type == 161 || Main.player[plr].ZoneSnow)
                                {
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 147, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                }
                                else
                                {
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 1, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                    if (Main.rand.Next(5) == 0)
                                        Main.npc[newNPC].SetDefaults(-9, -1f);
                                    else if (Main.rand.Next(2) == 0)
                                        Main.npc[newNPC].SetDefaults(1, -1f);
                                    else
                                        Main.npc[newNPC].SetDefaults(-8, -1f);
                                }
                            }
                            else if (y > Main.maxTilesY - 190)
                                newNPC =
                                    !Main.hardMode || NPC.savedTaxCollector ||
                                    (Main.rand.Next(20) != 0 || NPC.AnyNPCs(534))
                                        ? (Main.rand.Next(40) != 0 || NPC.AnyNPCs(39)
                                            ? (Main.rand.Next(14) != 0
                                                ? (Main.rand.Next(7) != 0
                                                    ? (Main.rand.Next(3) != 0
                                                        ? (!Main.hardMode || !NPC.downedMechBossAny ||
                                                           Main.rand.Next(5) == 0
                                                            ? NPC.NewNPC(index1 * 16 + 8, y * 16, 60, 0, 0.0f, 0.0f,
                                                                0.0f, 0.0f, (int) byte.MaxValue)
                                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 151, 0, 0.0f, 0.0f,
                                                                0.0f, 0.0f, (int) byte.MaxValue))
                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 59, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue))
                                                    : (Main.rand.Next(7) != 0
                                                        ? (!Main.hardMode || !NPC.downedMechBossAny ||
                                                           Main.rand.Next(5) == 0
                                                            ? NPC.NewNPC(index1 * 16 + 8, y * 16, 62, 0, 0.0f, 0.0f,
                                                                0.0f, 0.0f, (int) byte.MaxValue)
                                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 156, 0, 0.0f, 0.0f,
                                                                0.0f, 0.0f, (int) byte.MaxValue))
                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 66, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue)))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 24, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue))
                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 39, 1, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue))
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 534, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                            else if (Main.rand.Next(60) == 0)
                                newNPC = !Main.player[plr].ZoneSnow
                                    ? NPC.NewNPC(index1 * 16 + 8, y * 16, 217, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue)
                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 218, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                            else if ((type == 116 || type == 117 || type == 164) &&
                                     (Main.hardMode && !flag4 && Main.rand.Next(8) == 0))
                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 120, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if ((num1 == 147 || num1 == 161 || (num1 == 162 || num1 == 163) || num1 == 164) &&
                                     (!flag4 && Main.hardMode &&
                                      (Main.player[plr].ZoneCorrupt && Main.rand.Next(30) == 0)))
                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 170, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if ((num1 == 147 || num1 == 161 || (num1 == 162 || num1 == 163) || num1 == 164) &&
                                     (!flag4 && Main.hardMode &&
                                      (Main.player[plr].ZoneHoly && Main.rand.Next(30) == 0)))
                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 171, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if ((num1 == 147 || num1 == 161 || (num1 == 162 || num1 == 163) || num1 == 164) &&
                                     (!flag4 && Main.hardMode &&
                                      (Main.player[plr].ZoneCrimson && Main.rand.Next(30) == 0)))
                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 180, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if (Main.hardMode && Main.player[plr].ZoneSnow && Main.rand.Next(10) == 0)
                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 154, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if (!flag4 && Main.rand.Next(100) == 0 && !Main.player[plr].ZoneHoly)
                                newNPC = !Main.hardMode
                                    ? (!Main.player[plr].ZoneSnow
                                        ? NPC.NewNPC(index1 * 16 + 8, y * 16, 10, 1, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue)
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 185, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue))
                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 95, 1, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                            else if (Main.player[plr].ZoneSnow && Main.rand.Next(20) == 0)
                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 185, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                            else if (!Main.hardMode && Main.rand.Next(10) == 0)
                            {
                                if (Main.player[plr].ZoneSnow)
                                    Main.npc[newNPC].SetDefaults(184, -1f);
                                else
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 16, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                            }
                            else if (!Main.hardMode && Main.rand.Next(4) == 0)
                            {
                                newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 1, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                    (int) byte.MaxValue);
                                if (Main.player[plr].ZoneJungle)
                                    Main.npc[newNPC].SetDefaults(-10, -1f);
                                else if (Main.player[plr].ZoneSnow)
                                    Main.npc[newNPC].SetDefaults(184, -1f);
                                else
                                    Main.npc[newNPC].SetDefaults(-6, -1f);
                            }
                            else if (Main.rand.Next(2) == 0)
                            {
                                if (Main.rand.Next(35) == 0 && NPC.CountNPCS(453) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 453, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (!Main.hardMode && Main.rand.Next(80) == 0 || Main.rand.Next(200) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 195, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.hardMode &&
                                         (double) y > (Main.rockLayer + (double) Main.maxTilesY) / 2.0 &&
                                         Main.rand.Next(300) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 172, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if ((double) y > (Main.rockLayer + (double) Main.maxTilesY) / 2.0 &&
                                         (Main.rand.Next(200) == 0 || Main.rand.Next(50) == 0 &&
                                          Main.player[plr].armor[1].type >= 1282 &&
                                          (Main.player[plr].armor[1].type <= 1287 &&
                                           Main.player[plr].armor[0].type != 238)))
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 45, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (flag9 && Main.rand.Next(4) != 0)
                                    newNPC = Main.rand.Next(6) == 0 || NPC.AnyNPCs(480) || !Main.hardMode
                                        ? NPC.NewNPC(index1 * 16 + 8, y * 16, 481, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue)
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 480, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                else if (flag8 && Main.rand.Next(5) != 0)
                                    newNPC = Main.rand.Next(6) == 0 || NPC.AnyNPCs(483)
                                        ? NPC.NewNPC(index1 * 16 + 8, y * 16, 482, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue)
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 483, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                else if (Main.hardMode && Main.rand.Next(10) != 0)
                                {
                                    if (Main.rand.Next(2) == 0)
                                    {
                                        if (Main.player[plr].ZoneSnow)
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 197, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                        else if (Main.halloween && Main.rand.Next(5) == 0)
                                        {
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 316, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                        }
                                        else
                                        {
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 77, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            if ((double) y > (Main.rockLayer + (double) Main.maxTilesY) / 2.0 &&
                                                Main.rand.Next(5) == 0)
                                                Main.npc[newNPC].SetDefaults(-15, -1f);
                                        }
                                    }
                                    else
                                        newNPC = !Main.player[plr].ZoneSnow
                                            ? NPC.NewNPC(index1 * 16 + 8, y * 16, 110, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue)
                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 206, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                }
                                else if (Main.rand.Next(20) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 44, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (num1 == 147 || num1 == 161 || num1 == 162)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 167, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.player[plr].ZoneSnow)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 185, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);
                                else if (Main.rand.Next(3) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16,
                                        NPC.cavernMonsterType[Main.rand.Next(2), Main.rand.Next(3)], 0, 0.0f, 0.0f,
                                        0.0f, 0.0f, (int) byte.MaxValue);
                                else if (Main.halloween && Main.rand.Next(2) == 0)
                                    newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, Main.rand.Next(322, 325), 0, 0.0f,
                                        0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
                                else if (Main.expertMode && Main.rand.Next(3) == 0)
                                {
                                    var num3 = Main.rand.Next(4);
                                    newNPC = num3 != 0
                                        ? (num3 != 0
                                            ? (num3 != 0
                                                ? NPC.NewNPC(index1 * 16 + 8, y * 16, 452, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue)
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 451, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue))
                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 450, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue))
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 449, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue);
                                }
                                else
                                {
                                    switch (Main.rand.Next(4))
                                    {
                                        case 0:
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 21, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            if (Main.rand.Next(3) == 0)
                                            {
                                                if (Main.rand.Next(2) == 0)
                                                {
                                                    Main.npc[newNPC].SetDefaults(-47, -1f);
                                                    break;
                                                }

                                                Main.npc[newNPC].SetDefaults(-46, -1f);
                                                break;
                                            }

                                            break;
                                        case 1:
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 201, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            if (Main.rand.Next(3) == 0)
                                            {
                                                if (Main.rand.Next(2) == 0)
                                                {
                                                    Main.npc[newNPC].SetDefaults(-49, -1f);
                                                    break;
                                                }

                                                Main.npc[newNPC].SetDefaults(-48, -1f);
                                                break;
                                            }

                                            break;
                                        case 2:
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 202, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            if (Main.rand.Next(3) == 0)
                                            {
                                                if (Main.rand.Next(2) == 0)
                                                {
                                                    Main.npc[newNPC].SetDefaults(-51, -1f);
                                                    break;
                                                }

                                                Main.npc[newNPC].SetDefaults(-50, -1f);
                                                break;
                                            }

                                            break;
                                        case 3:
                                            newNPC = NPC.NewNPC(index1 * 16 + 8, y * 16, 203, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue);
                                            if (Main.rand.Next(3) == 0)
                                            {
                                                if (Main.rand.Next(2) == 0)
                                                {
                                                    Main.npc[newNPC].SetDefaults(-53, -1f);
                                                    break;
                                                }

                                                Main.npc[newNPC].SetDefaults(-52, -1f);
                                                break;
                                            }

                                            break;
                                    }
                                }
                            }
                            else
                                newNPC = !Main.hardMode || !(Main.player[plr].ZoneHoly & Main.rand.Next(2) == 0)
                                    ? (!Main.player[plr].ZoneJungle
                                        ? (!Main.hardMode || !Main.player[plr].ZoneHoly
                                            ? (!Main.hardMode || Main.rand.Next(6) <= 0
                                                ? (num1 == 147 || num1 == 161 || num1 == 162
                                                    ? (!Main.hardMode
                                                        ? NPC.NewNPC(index1 * 16 + 8, y * 16, 150, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue)
                                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 169, 0, 0.0f, 0.0f, 0.0f,
                                                            0.0f, (int) byte.MaxValue))
                                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 49, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                        (int) byte.MaxValue))
                                                : NPC.NewNPC(index1 * 16 + 8, y * 16, 93, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                    (int) byte.MaxValue))
                                            : NPC.NewNPC(index1 * 16 + 8, y * 16, 137, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                                (int) byte.MaxValue))
                                        : NPC.NewNPC(index1 * 16 + 8, y * 16, 51, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                            (int) byte.MaxValue))
                                    : NPC.NewNPC(index1 * 16 + 8, y * 16, 138, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                                        (int) byte.MaxValue);

                            if (Main.npc[newNPC].type == 1 && Main.rand.Next(180) == 0)
                                Main.npc[newNPC].SetDefaults(-4, -1f);
                            if (Main.netMode != 2 || newNPC >= 200)
                                break;
                            NetMessage.SendData(23, -1, -1, (NetworkText) null, newNPC, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                            break;
                        }
                    }
                }
            }
        }

        public static bool AnyDanger()
        {
            var flag = false;
            if (NPC.MoonLordCountdown > 0)
                flag = true;
            if (Main.invasionType > 0)
                flag = true;
            if (!flag)
            {
                for (var index = 0; index < 200; ++index)
                {
                    if (Main.npc[index].active &&
                        (Main.npc[index].boss || NPCID.Sets.TechnicallyABoss[Main.npc[index].type]))
                        flag = true;
                }
            }

            return flag;
        }

        public static bool AnyoneNearCultists()
        {
            var firstNpc = NPC.FindFirstNPC(437);
            if (firstNpc == -1)
                return false;
            var rectangle =
                Utils.CenteredRectangle(Main.npc[firstNpc].Center, new Vector2(2500f, 1500f));
            var r = new Microsoft.Xna.Framework.Rectangle(0, 0, 2500, 1500);
            var vector2 = r.Size() / 2f;
            for (var index = 0; index < (int) byte.MaxValue; ++index)
            {
                if (Main.player[index].active)
                {
                    r.X = (int) Main.player[index].Center.X - (int) vector2.X;
                    r.Y = (int) Main.player[index].Center.Y - (int) vector2.Y;
                    if (rectangle.Intersects(r))
                        return true;
                }
            }

            return false;
        }

        public static void SpawnWOF(Vector2 pos)
        {
            if ((double) pos.Y / 16.0 < (double) (Main.maxTilesY - 205) || Main.wof >= 0 || Main.netMode == 1)
                return;
            var closest = (int) Player.FindClosest(pos, 16, 16);
            var num1 = 1;
            if ((double) pos.X / 16.0 > (double) (Main.maxTilesX / 2))
                num1 = -1;
            var flag = false;
            var x = (int) pos.X;
            while (!flag)
            {
                flag = true;
                for (var index = 0; index < (int) byte.MaxValue; ++index)
                {
                    if (Main.player[index].active && (double) Main.player[index].position.X > (double) (x - 1200) &&
                        (double) Main.player[index].position.X < (double) (x + 1200))
                    {
                        x -= num1 * 16;
                        flag = false;
                    }
                }

                if (x / 16 < 20 || x / 16 > Main.maxTilesX - 20)
                    flag = true;
            }

            var y = (int) pos.Y;
            var i = x / 16;
            var num2 = y / 16;
            var num3 = 0;
            try
            {
                for (; WorldGen.SolidTile(i, num2 - num3) || Main.tile[i, num2 - num3].liquid >= (byte) 100; ++num3)
                {
                    if (!WorldGen.SolidTile(i, num2 + num3) && Main.tile[i, num2 + num3].liquid < (byte) 100)
                    {
                        num2 += num3;
                        goto label_20;
                    }
                }

                num2 -= num3;
            }
            catch
            {
            }

            label_20:
            if (num2 < Main.maxTilesY - 180)
                num2 = Main.maxTilesY - 180;
            var Y = num2 * 16;
            var index1 = NPC.NewNPC(x, Y, 113, 0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
            if (Main.netMode == 0)
            {
                Main.NewText(Language.GetTextValue("Announcement.HasAwoken", (object) Main.npc[index1].TypeName),
                    (byte) 175, (byte) 75, byte.MaxValue, false);
            }
            else
            {
                if (Main.netMode != 2)
                    return;
                NetMessage.BroadcastChatMessage(
                    NetworkText.FromKey("Announcement.HasAwoken", (object) Main.npc[index1].GetTypeNetName()),
                    new Color(175, 75, (int) byte.MaxValue), -1);
            }
        }

        public static void SpawnSkeletron()
        {
            var flag1 = true;
            var flag2 = false;
            var vector2 = Vector2.Zero;
            var num1 = 0;
            var num2 = 0;
            for (var index = 0; index < 200; ++index)
            {
                if (Main.npc[index].active && Main.npc[index].type == 35)
                {
                    flag1 = false;
                    break;
                }
            }

            for (var number = 0; number < 200; ++number)
            {
                if (Main.npc[number].active)
                {
                    if (Main.npc[number].type == 37)
                    {
                        flag2 = true;
                        Main.npc[number].ai[3] = 1f;
                        vector2 = Main.npc[number].position;
                        num1 = Main.npc[number].width;
                        num2 = Main.npc[number].height;
                        if (Main.netMode == 2)
                            NetMessage.SendData(23, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    }
                    else if (Main.npc[number].type == 54)
                    {
                        flag2 = true;
                        vector2 = Main.npc[number].position;
                        num1 = Main.npc[number].width;
                        num2 = Main.npc[number].height;
                    }
                }
            }

            if (!flag1 || !flag2)
                return;
            var index1 = NPC.NewNPC((int) vector2.X + num1 / 2, (int) vector2.Y + num2 / 2, 35, 0, 0.0f, 0.0f, 0.0f,
                0.0f, (int) byte.MaxValue);
            Main.npc[index1].netUpdate = true;
            var npcNameValue = Lang.GetNPCNameValue(35);
            if (Main.netMode == 0)
            {
                Main.NewText(Language.GetTextValue("Announcement.HasAwoken", (object) npcNameValue), (byte) 175,
                    (byte) 75, byte.MaxValue, false);
            }
            else
            {
                if (Main.netMode != 2)
                    return;
                NetMessage.BroadcastChatMessage(
                    NetworkText.FromKey("Announcement.HasAwoken", (object) Lang.GetNPCName(35).ToNetworkText()),
                    new Color(175, 75, (int) byte.MaxValue), -1);
            }
        }

        public static void SpawnOnPlayer(int plr, int Type)
        {
            if (Main.netMode == 1 || Type == 262 && NPC.AnyNPCs(262))
                return;
            switch (Type)
            {
                case 245:
                    if (NPC.AnyNPCs(245))
                        break;
                    try
                    {
                        var num1 = (int) Main.player[plr].Center.X / 16;
                        var num2 = (int) Main.player[plr].Center.Y / 16;
                        var i = 0;
                        var num3 = 0;
                        for (var index1 = num1 - 20; index1 < num1 + 20; ++index1)
                        {
                            for (var index2 = num2 - 20; index2 < num2 + 20; ++index2)
                            {
                                if (Main.tile[index1, index2].active() &&
                                    Main.tile[index1, index2].type == (ushort) 237 &&
                                    (Main.tile[index1, index2].frameX == (short) 18 &&
                                     Main.tile[index1, index2].frameY == (short) 0))
                                {
                                    i = index1;
                                    num3 = index2;
                                }
                            }
                        }

                        if (i <= 0 || num3 <= 0)
                            break;
                        var num4 = num3 - 15;
                        var num5 = num3 - 15;
                        for (var j = num3; j > num3 - 100; --j)
                        {
                            if (WorldGen.SolidTile(i, j))
                            {
                                num4 = j;
                                break;
                            }
                        }

                        for (var j = num3; j < num3 + 100; ++j)
                        {
                            if (WorldGen.SolidTile(i, j))
                            {
                                num5 = j;
                                break;
                            }
                        }

                        var num6 = (num4 + num4 + num5) / 3;
                        var index = NPC.NewNPC(i * 16 + 8, num6 * 16, 245, 100, 0.0f, 0.0f, 0.0f, 0.0f,
                            (int) byte.MaxValue);
                        Main.npc[index].target = plr;
                        var typeName = Main.npc[index].TypeName;
                        if (Main.netMode == 0)
                        {
                            Main.NewText(Language.GetTextValue("Announcement.HasAwoken", (object) typeName), (byte) 175,
                                (byte) 75, byte.MaxValue, false);
                            break;
                        }

                        if (Main.netMode != 2)
                            break;
                        NetMessage.BroadcastChatMessage(
                            NetworkText.FromKey("Announcement.HasAwoken", (object) Main.npc[index].GetTypeNetName()),
                            new Color(175, 75, (int) byte.MaxValue), -1);
                        break;
                    }
                    catch
                    {
                        break;
                    }
                case 370:
                    var player1 = Main.player[plr];
                    if (!player1.active || player1.dead)
                        break;
                    for (var index1 = 0; index1 < 1000; ++index1)
                    {
                        var projectile = Main.projectile[index1];
                        if (projectile.active && projectile.bobber && projectile.owner == plr)
                        {
                            var index2 = NPC.NewNPC((int) projectile.Center.X, (int) projectile.Center.Y + 100, 370, 0,
                                0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
                            var typeName = Main.npc[index2].TypeName;
                            if (Main.netMode == 0)
                            {
                                Main.NewText(Language.GetTextValue("Announcement.HasAwoken", (object) typeName),
                                    (byte) 175, (byte) 75, byte.MaxValue, false);
                                break;
                            }

                            if (Main.netMode != 2)
                                break;
                            NetMessage.BroadcastChatMessage(
                                NetworkText.FromKey("Announcement.HasAwoken",
                                    (object) Main.npc[index2].GetTypeNetName()),
                                new Color(175, 75, (int) byte.MaxValue), -1);
                            break;
                        }
                    }

                    break;
                case 398:
                    if (NPC.AnyNPCs(Type))
                        break;
                    var player2 = Main.player[plr];
                    NPC.NewNPC((int) player2.Center.X, (int) player2.Center.Y - 150, Type, 0, 0.0f, 0.0f, 0.0f, 0.0f,
                        (int) byte.MaxValue);
                    if (Main.netMode == 0)
                    {
                        Main.NewText(
                            Language.GetTextValue("Announcement.HasAwoken",
                                (object) Language.GetTextValue("Enemies.MoonLord")), (byte) 175, (byte) 75,
                            byte.MaxValue, false);
                        break;
                    }

                    if (Main.netMode != 2)
                        break;
                    NetMessage.BroadcastChatMessage(
                        NetworkText.FromKey("Announcement.HasAwoken", (object) NetworkText.FromKey("Enemies.MoonLord")),
                        new Color(175, 75, (int) byte.MaxValue), -1);
                    break;
                default:
                    var flag = false;
                    var num7 = 0;
                    var num8 = 0;
                    var minValue1 = (int) ((double) Main.player[plr].position.X / 16.0) - NPC.spawnRangeX * 2;
                    var maxValue1 = (int) ((double) Main.player[plr].position.X / 16.0) + NPC.spawnRangeX * 2;
                    var minValue2 = (int) ((double) Main.player[plr].position.Y / 16.0) - NPC.spawnRangeY * 2;
                    var maxValue2 = (int) ((double) Main.player[plr].position.Y / 16.0) + NPC.spawnRangeY * 2;
                    var num9 = (int) ((double) Main.player[plr].position.X / 16.0) - NPC.safeRangeX;
                    var num10 = (int) ((double) Main.player[plr].position.X / 16.0) + NPC.safeRangeX;
                    var num11 = (int) ((double) Main.player[plr].position.Y / 16.0) - NPC.safeRangeY;
                    var num12 = (int) ((double) Main.player[plr].position.Y / 16.0) + NPC.safeRangeY;
                    if (minValue1 < 0)
                        minValue1 = 0;
                    if (maxValue1 > Main.maxTilesX)
                        maxValue1 = Main.maxTilesX;
                    if (minValue2 < 0)
                        minValue2 = 0;
                    if (maxValue2 > Main.maxTilesY)
                        maxValue2 = Main.maxTilesY;
                    for (var index1 = 0; index1 < 1000; ++index1)
                    {
                        for (var index2 = 0; index2 < 100; ++index2)
                        {
                            var index3 = Main.rand.Next(minValue1, maxValue1);
                            var index4 = Main.rand.Next(minValue2, maxValue2);
                            if (!Main.tile[index3, index4].nactive() ||
                                !Main.tileSolid[(int) Main.tile[index3, index4].type])
                            {
                                if ((!Main.wallHouse[(int) Main.tile[index3, index4].wall] || index1 >= 999) &&
                                    (Type != 50 || index1 >= 500 || Main.tile[index4, index4].wall <= (byte) 0))
                                {
                                    for (var index5 = index4; index5 < Main.maxTilesY; ++index5)
                                    {
                                        if (Main.tile[index3, index5].nactive() &&
                                            Main.tileSolid[(int) Main.tile[index3, index5].type])
                                        {
                                            if (index3 < num9 || index3 > num10 || (index5 < num11 || index5 > num12) ||
                                                index1 == 999)
                                            {
                                                var type = (int) Main.tile[index3, index5].type;
                                                num7 = index3;
                                                num8 = index5;
                                                flag = true;
                                                break;
                                            }

                                            break;
                                        }
                                    }

                                    if (flag && Type == 50 && index1 < 900)
                                    {
                                        var num1 = 20;
                                        if (!Collision.CanHit(new Vector2((float) num7, (float) (num8 - 1)) * 16f, 16,
                                                16, new Vector2((float) num7, (float) (num8 - 1 - num1)) * 16f, 16,
                                                16) || !Collision.CanHit(
                                                new Vector2((float) num7, (float) (num8 - 1 - num1)) * 16f, 16, 16,
                                                Main.player[plr].Center, 0, 0))
                                        {
                                            num7 = 0;
                                            num8 = 0;
                                            flag = false;
                                        }
                                    }

                                    if (flag && index1 < 999)
                                    {
                                        var num1 = num7 - NPC.spawnSpaceX / 2;
                                        var num2 = num7 + NPC.spawnSpaceX / 2;
                                        var num3 = num8 - NPC.spawnSpaceY;
                                        var num4 = num8;
                                        if (num1 < 0)
                                            flag = false;
                                        if (num2 > Main.maxTilesX)
                                            flag = false;
                                        if (num3 < 0)
                                            flag = false;
                                        if (num4 > Main.maxTilesY)
                                            flag = false;
                                        if (flag)
                                        {
                                            for (var index5 = num1; index5 < num2; ++index5)
                                            {
                                                for (var index6 = num3; index6 < num4; ++index6)
                                                {
                                                    if (Main.tile[index5, index6].nactive() &&
                                                        Main.tileSolid[(int) Main.tile[index5, index6].type])
                                                    {
                                                        flag = false;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                    continue;
                            }

                            if (flag || flag)
                                break;
                        }

                        if (flag && index1 < 999)
                        {
                            var rectangle1 =
                                new Microsoft.Xna.Framework.Rectangle(num7 * 16, num8 * 16, 16, 16);
                            for (var index2 = 0; index2 < (int) byte.MaxValue; ++index2)
                            {
                                if (Main.player[index2].active)
                                {
                                    var rectangle2 =
                                        new Microsoft.Xna.Framework.Rectangle(
                                            (int) ((double) Main.player[index2].position.X +
                                                   (double) (Main.player[index2].width / 2) -
                                                   (double) (NPC.sWidth / 2) - (double) NPC.safeRangeX),
                                            (int) ((double) Main.player[index2].position.Y +
                                                   (double) (Main.player[index2].height / 2) -
                                                   (double) (NPC.sHeight / 2) - (double) NPC.safeRangeY),
                                            NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
                                    if (rectangle1.Intersects(rectangle2))
                                        flag = false;
                                }
                            }
                        }

                        if (flag)
                            break;
                    }

                    if (!flag)
                        break;
                    var number = NPC.NewNPC(num7 * 16 + 8, num8 * 16, Type, 1, 0.0f, 0.0f, 0.0f, 0.0f,
                        (int) byte.MaxValue);
                    if (number == 200)
                        break;
                    Main.npc[number].target = plr;
                    Main.npc[number].timeLeft *= 20;
                    var typeName1 = Main.npc[number].TypeName;
                    if (Main.netMode == 2 && number < 200)
                        NetMessage.SendData(23, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    if (Type == 134 || Type == (int) sbyte.MaxValue || (Type == 126 || Type == 125))
                        AchievementsHelper.CheckMechaMayhem(-1);
                    if (Type == 125)
                    {
                        if (Main.netMode == 0)
                        {
                            Main.NewText(Lang.misc[48].Value, (byte) 175, (byte) 75, byte.MaxValue, false);
                            break;
                        }

                        if (Main.netMode != 2)
                            break;
                        NetMessage.BroadcastChatMessage(Lang.misc[48].ToNetworkText(),
                            new Color(175, 75, (int) byte.MaxValue), -1);
                        break;
                    }

                    if (Type == 82 || Type == 126 || (Type == 50 || Type == 398) || Type == 551)
                        break;
                    if (Main.netMode == 0)
                    {
                        Main.NewText(Language.GetTextValue("Announcement.HasAwoken", (object) typeName1), (byte) 175,
                            (byte) 75, byte.MaxValue, false);
                        break;
                    }

                    if (Main.netMode != 2)
                        break;
                    NetMessage.BroadcastChatMessage(
                        NetworkText.FromKey("Announcement.HasAwoken", (object) Main.npc[number].GetTypeNetName()),
                        new Color(175, 75, (int) byte.MaxValue), -1);
                    break;
            }
        }

        public static int NewNPC(int X, int Y, int Type, int Start = 0, float ai0 = 0.0f, float ai1 = 0.0f,
            float ai2 = 0.0f, float ai3 = 0.0f, int Target = 255)
        {
            var index1 = -1;
            if (Type == 222)
            {
                for (var index2 = 199; index2 >= 0; --index2)
                {
                    if (!Main.npc[index2].active)
                    {
                        index1 = index2;
                        break;
                    }
                }
            }
            else
            {
                for (var index2 = Start; index2 < 200; ++index2)
                {
                    if (!Main.npc[index2].active)
                    {
                        index1 = index2;
                        break;
                    }
                }
            }

            if (index1 < 0)
                return 200;
            Main.npc[index1] = new NPC();
            Main.npc[index1].SetDefaults(Type, -1f);
            if (NPC.TypeToHeadIndex(Type) != -1 || Type == 453)
                Main.npc[index1].GivenName = NPC.getNewNPCName(Type);
            Main.npc[index1].position.X = (float) (X - Main.npc[index1].width / 2);
            Main.npc[index1].position.Y = (float) (Y - Main.npc[index1].height);
            Main.npc[index1].active = true;
            Main.npc[index1].timeLeft = (int) ((double) NPC.activeTime * 1.25);
            Main.npc[index1].wet = Collision.WetCollision(Main.npc[index1].position, Main.npc[index1].width,
                Main.npc[index1].height);
            Main.npc[index1].ai[0] = ai0;
            Main.npc[index1].ai[1] = ai1;
            Main.npc[index1].ai[2] = ai2;
            Main.npc[index1].ai[3] = ai3;
            Main.npc[index1].target = Target;
            if (Type == 50)
            {
                switch (Main.netMode)
                {
                    case 0:
                        Main.NewText(
                            Language.GetTextValue("Announcement.HasAwoken", (object) Main.npc[index1].TypeName),
                            (byte) 175, (byte) 75, byte.MaxValue, false);
                        break;
                    case 2:
                        NetMessage.BroadcastChatMessage(
                            NetworkText.FromKey("Announcement.HasAwoken", (object) Main.npc[index1].GetTypeNetName()),
                            new Color(175, 75, (int) byte.MaxValue), -1);
                        break;
                }
            }

            return index1;
        }

        public void TransformVisuals(int oldType, int newType)
        {
            if (oldType == 158 && newType == 159 || oldType == 159 && newType == 158)
            {
                Main.PlaySound(SoundID.Item8, this.position);
                var index1 = Gore.NewGore(new Vector2(this.position.X, this.position.Y - 10f), this.velocity, 99,
                    this.scale);
                Main.gore[index1].velocity *= 0.3f;
                var index2 =
                    Gore.NewGore(
                        new Vector2(this.position.X,
                            (float) ((double) this.position.Y + (double) (this.height / 2) - 10.0)), this.velocity, 99,
                        this.scale);
                Main.gore[index2].velocity *= 0.3f;
                var index3 =
                    Gore.NewGore(
                        new Vector2(this.position.X, (float) ((double) this.position.Y + (double) this.height - 10.0)),
                        this.velocity, 99, this.scale);
                Main.gore[index3].velocity *= 0.3f;
            }
            else if (oldType == 478 && newType == 479)
            {
                for (var index1 = 0; index1 < 30; ++index1)
                {
                    var index2 = Dust.NewDust(this.position, this.width, this.height, 238, 0.0f, -2f, 0, new Color(),
                        1f);
                    if (Main.rand.Next(2) == 0)
                        Main.dust[index2].noGravity = true;
                }

                Gore.NewGore(this.position, this.velocity, 684, this.scale);
                Gore.NewGore(this.position, this.velocity, 685, this.scale);
                Gore.NewGore(this.position, this.velocity, 686, this.scale);
                Gore.NewGore(this.position, this.velocity, 684 + Main.rand.Next(3), this.scale);
            }
            else if (oldType == 406 && newType == 405)
            {
                var num1 = (float) Main.rand.Next(10, 21);
                var num2 = 6.283185f * Main.rand.NextFloat();
                var vector2_1 = new Vector2(22f, 22f);
                for (var num3 = 0.0f; (double) num3 < (double) num1; ++num3)
                {
                    var dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 229, 0.0f, 0.0f, 0, new Color(), 1f)];
                    var vector2_2 =
                        Vector2.UnitY.RotatedBy((double) num3 * 6.28318548202515 / (double) num1 + (double) num2,
                            new Vector2());
                    dust.position = this.Center + vector2_2 * vector2_1 / 2f;
                    dust.velocity = vector2_2;
                    dust.noGravity = true;
                    dust.scale = (float) (0.600000023841858 + (double) Main.rand.NextFloat() * 1.79999995231628);
                    dust.velocity *= dust.scale;
                    dust.fadeIn = Main.rand.NextFloat() * 2f;
                }
            }

            if (oldType == 428 && newType == 427)
            {
                for (var index = 0; index < 20; ++index)
                {
                    var Type = Utils.SelectRandom<int>(Main.rand, new int[2]
                    {
                        229,
                        240
                    });
                    var dust = Main.dust[
                        Dust.NewDust(this.position, this.width, this.height, Type, 0.0f, 0.0f, 0, new Color(), 1f)];
                    dust.noGravity = true;
                    dust.scale = (float) (0.600000023841858 + (double) Main.rand.NextFloat() * 1.79999995231628);
                    dust.fadeIn = 0.25f;
                    dust.velocity *= dust.scale / 2f;
                }
            }

            if (oldType != 427 || newType != 426)
                return;
            for (var index = 0; index < 30; ++index)
            {
                var Type = Utils.SelectRandom<int>(Main.rand, new int[3]
                {
                    229,
                    240,
                    240
                });
                var dust = Main.dust[
                    Dust.NewDust(this.position, this.width, this.height, Type, 0.0f, 0.0f, 0, new Color(), 1f)];
                dust.noGravity = true;
                dust.scale = (float) (0.600000023841858 + (double) Main.rand.NextFloat() * 1.79999995231628);
                dust.fadeIn = 0.25f;
                dust.velocity *= dust.scale * 0.75f;
            }
        }

        public void Teleport(Vector2 newPos, int Style = 0, int extraInfo = 0)
        {
            var extraInfo1 = 0;
            if (Style == 4)
                extraInfo1 = this.lastPortalColorIndex;
            var dustCountMult = (double) this.teleportTime > 0.0 ? 0.3f : 1f;
            Main.TeleportEffect(this.getRect(), Style, extraInfo1, dustCountMult);
            this.position = newPos;
            if (Style == 4)
            {
                this.lastPortalColorIndex = extraInfo;
                extraInfo1 = this.lastPortalColorIndex;
            }

            Main.TeleportEffect(this.getRect(), Style, extraInfo1, dustCountMult);
            this.teleportTime = 1f;
            this.teleportStyle = Style;
            if (Main.netMode != 2 || Style == 4)
                return;
            NetMessage.SendData(65, -1, -1, (NetworkText) null, 1, (float) this.whoAmI, newPos.X, newPos.Y, Style, 0,
                0);
        }

        public void Transform(int newType)
        {
            if (Main.netMode == 1)
                return;
            var flag = false;
            if ((double) this.value == 0.0)
                flag = true;
            var numArray1 = new int[5];
            var numArray2 = new int[5];
            for (var index = 0; index < 5; ++index)
            {
                numArray1[index] = this.buffType[index];
                numArray2[index] = this.buffTime[index];
            }

            var height = this.height;
            var type = this.type;
            var life = this.life;
            var lifeMax = this.lifeMax;
            var velocity = this.velocity;
            this.position.Y += (float) this.height;
            var spriteDirection = this.spriteDirection;
            var spawnedFromStatue = this.SpawnedFromStatue;
            this.SetDefaults(newType, -1f);
            this.SpawnedFromStatue = spawnedFromStatue;
            this.spriteDirection = spriteDirection;
            this.TargetClosest(true);
            this.velocity = velocity;
            this.position.Y -= (float) this.height;
            if (flag)
                this.value = 0.0f;
            if (this.lifeMax == lifeMax)
                this.life = life;
            if (newType == 107 || newType == 108)
            {
                this.homeTileX = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
                this.homeTileY = (int) ((double) this.position.Y + (double) this.height) / 16;
                this.homeless = true;
            }

            for (var index = 0; index < 5; ++index)
            {
                this.buffType[index] = numArray1[index];
                this.buffTime[index] = numArray2[index];
            }

            if (Main.netMode == 2)
            {
                this.netUpdate = true;
                NetMessage.SendData(23, -1, -1, (NetworkText) null, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                NetMessage.SendData(54, -1, -1, (NetworkText) null, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
            }

            this.TransformVisuals(type, newType);
            if (NPC.TypeToHeadIndex(this.type) != -1)
                Main.npc[this.whoAmI].GivenName = NPC.getNewNPCName(this.type);
            this.npcNameLookup = (byte) 0;
            if (this.townNPC)
                this.homeless = true;
            this.altTexture = 0;
        }

        public int checkArmorPenetration(int armorPenetration)
        {
            if (armorPenetration <= 0)
                return 0;
            if (armorPenetration > this.defense && this.defense >= 0)
                return this.defense / 2;
            return armorPenetration / 2;
        }

        public double StrikeNPCNoInteraction(int Damage, float knockBack, int hitDirection, bool crit = false,
            bool noEffect = false, bool fromNet = false)
        {
            if (Main.netMode == 0)
                ++NPC.ignorePlayerInteractions;
            return this.StrikeNPC(Damage, knockBack, hitDirection, crit, noEffect, fromNet);
        }

        public double StrikeNPC(int Damage, float knockBack, int hitDirection, bool crit = false, bool noEffect = false,
            bool fromNet = false)
        {
            var flag = Main.netMode == 0;
            if (flag && NPC.ignorePlayerInteractions > 0)
            {
                --NPC.ignorePlayerInteractions;
                flag = false;
            }

            if (!this.active || this.life <= 0)
                return 0.0;
            var num1 = (double) Damage;
            var Defense = this.defense;
            if (this.ichor)
                Defense -= 20;
            if (this.betsysCurse)
                Defense -= 40;
            if (Defense < 0)
                Defense = 0;
            var dmg = Main.CalculateDamage((int) num1, Defense);
            if (crit)
                dmg *= 2.0;
            if ((double) this.takenDamageMultiplier > 1.0)
                dmg *= (double) this.takenDamageMultiplier;
            if (((double) this.takenDamageMultiplier > 1.0 || Damage != 9999) && this.lifeMax > 1)
            {
                if (this.friendly)
                {
                    CombatText.NewText(
                        new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width,
                            this.height), crit ? CombatText.DamagedFriendlyCrit : CombatText.DamagedFriendly, (int) dmg,
                        crit, false);
                }
                else
                {
                    var color = crit ? CombatText.DamagedHostileCrit : CombatText.DamagedHostile;
                    if (fromNet)
                        color = crit ? CombatText.OthersDamagedHostileCrit : CombatText.OthersDamagedHostile;
                    CombatText.NewText(
                        new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width,
                            this.height), color, (int) dmg, crit, false);
                }
            }

            if (dmg < 1.0)
                return 0.0;
            if (flag)
                this.PlayerInteraction(Main.myPlayer);
            this.justHit = true;
            if (this.townNPC)
            {
                if (this.aiStyle == 7 && ((double) this.ai[0] == 3.0 || (double) this.ai[0] == 4.0 ||
                                          (double) this.ai[0] == 16.0 || (double) this.ai[0] == 17.0))
                {
                    var npc = Main.npc[(int) this.ai[2]];
                    if (npc.active)
                    {
                        npc.ai[0] = 1f;
                        npc.ai[1] = (float) (300 + Main.rand.Next(300));
                        npc.ai[2] = 0.0f;
                        npc.localAI[3] = 0.0f;
                        npc.direction = hitDirection;
                        npc.netUpdate = true;
                    }
                }

                this.ai[0] = 1f;
                this.ai[1] = (float) (300 + Main.rand.Next(300));
                this.ai[2] = 0.0f;
                this.localAI[3] = 0.0f;
                this.direction = hitDirection;
                this.netUpdate = true;
            }

            if (this.aiStyle == 8 && Main.netMode != 1)
            {
                if (this.type == 172)
                    this.ai[0] = 450f;
                else if (this.type == 283 || this.type == 284)
                {
                    if (Main.rand.Next(2) == 0)
                    {
                        this.ai[0] = 390f;
                        this.netUpdate = true;
                    }
                }
                else if (this.type == 533)
                {
                    if (Main.rand.Next(3) != 0)
                    {
                        this.ai[0] = 181f;
                        this.netUpdate = true;
                    }
                }
                else
                    this.ai[0] = 400f;

                this.TargetClosest(true);
            }

            if (this.aiStyle == 97 && Main.netMode != 1)
            {
                this.localAI[1] = 1f;
                this.TargetClosest(true);
            }

            if (this.type == 371)
            {
                dmg = 0.0;
                this.ai[0] = 1f;
                this.ai[1] = 4f;
                this.dontTakeDamage = true;
            }

            if (this.type == 346 && (double) this.life >= (double) this.lifeMax * 0.5 &&
                (double) this.life - dmg < (double) this.lifeMax * 0.5)
                Gore.NewGore(this.position, this.velocity, 517, 1f);
            if (this.type == 184)
                this.localAI[0] = 60f;
            if (this.type == 535)
                this.localAI[0] = 60f;
            if (this.type == 185)
                this.localAI[0] = 1f;
            if (!this.immortal)
            {
                if (this.realLife >= 0)
                {
                    Main.npc[this.realLife].life -= (int) dmg;
                    this.life = Main.npc[this.realLife].life;
                    this.lifeMax = Main.npc[this.realLife].lifeMax;
                }
                else
                    this.life -= (int) dmg;
            }

            if ((double) knockBack > 0.0 && (double) this.knockBackResist > 0.0)
            {
                var num2 = knockBack * this.knockBackResist;
                if ((double) num2 > 8.0)
                    num2 = 8f + (num2 - 8f) * 0.9f;
                if ((double) num2 > 10.0)
                    num2 = 10f + (num2 - 10f) * 0.8f;
                if ((double) num2 > 12.0)
                    num2 = 12f + (num2 - 12f) * 0.7f;
                if ((double) num2 > 14.0)
                    num2 = 14f + (num2 - 14f) * 0.6f;
                if ((double) num2 > 16.0)
                    num2 = 16f;
                if (crit)
                    num2 *= 1.4f;
                var num3 = (int) dmg * 10;
                if (Main.expertMode)
                    num3 = (int) dmg * 15;
                if (num3 > this.lifeMax)
                {
                    if (hitDirection < 0 && (double) this.velocity.X > -(double) num2)
                    {
                        if ((double) this.velocity.X > 0.0)
                            this.velocity.X -= num2;
                        this.velocity.X -= num2;
                        if ((double) this.velocity.X < -(double) num2)
                            this.velocity.X = -num2;
                    }
                    else if (hitDirection > 0 && (double) this.velocity.X < (double) num2)
                    {
                        if ((double) this.velocity.X < 0.0)
                            this.velocity.X += num2;
                        this.velocity.X += num2;
                        if ((double) this.velocity.X > (double) num2)
                            this.velocity.X = num2;
                    }

                    if (this.type == 185)
                        num2 *= 1.5f;
                    var num4 = this.noGravity ? num2 * -0.5f : num2 * -0.75f;
                    if ((double) this.velocity.Y > (double) num4)
                    {
                        this.velocity.Y += num4;
                        if ((double) this.velocity.Y < (double) num4)
                            this.velocity.Y = num4;
                    }
                }
                else
                {
                    if (!this.noGravity)
                        this.velocity.Y = (float) (-(double) num2 * 0.75) * this.knockBackResist;
                    else
                        this.velocity.Y = (float) (-(double) num2 * 0.5) * this.knockBackResist;
                    this.velocity.X = num2 * (float) hitDirection * this.knockBackResist;
                }
            }

            if ((this.type == 113 || this.type == 114) && this.life <= 0)
            {
                for (var index = 0; index < 200; ++index)
                {
                    if (Main.npc[index].active && (Main.npc[index].type == 113 || Main.npc[index].type == 114))
                        Main.npc[index].HitEffect(hitDirection, dmg);
                }
            }
            else
                this.HitEffect(hitDirection, dmg);

            if (this.HitSound != null)
                Main.PlaySound(this.HitSound, this.position);
            if (this.realLife >= 0)
                Main.npc[this.realLife].checkDead();
            else
                this.checkDead();
            return dmg;
        }

        public void HitEffect(int hitDirection = 0, double dmg = 10.0)
        {
            //IL_1014: Unknown result type (might be due to invalid IL or missing references)
            //IL_1033: Unknown result type (might be due to invalid IL or missing references)
            //IL_1217: Unknown result type (might be due to invalid IL or missing references)
            if (active)
            {
                if (townNPC && life <= 0 && UsesPartyHat())
                {
                    var flag = true;
                    switch (type)
                    {
                        case 38:
                            Gore.NewGore(base.position, base.velocity, 927, 1f);
                            break;
                        case 207:
                            Gore.NewGore(base.position, base.velocity, 928, 1f);
                            break;
                        case 17:
                            Gore.NewGore(base.position, base.velocity, 929, 1f);
                            break;
                        case 18:
                            Gore.NewGore(base.position, base.velocity, 930, 1f);
                            break;
                        case 227:
                            Gore.NewGore(base.position, base.velocity, 931, 1f);
                            break;
                        case 229:
                            Gore.NewGore(base.position, base.velocity, 932, 1f);
                            break;
                        case 142:
                            Gore.NewGore(base.position, base.velocity, 933, 1f);
                            break;
                        case 453:
                            Gore.NewGore(base.position, base.velocity, 934, 1f);
                            break;
                        case 178:
                            Gore.NewGore(base.position, base.velocity, 935, 1f);
                            break;
                        case 353:
                            Gore.NewGore(base.position, base.velocity, 936, 1f);
                            break;
                        case 368:
                            Gore.NewGore(base.position, base.velocity, 937, 1f);
                            break;
                        case 108:
                            Gore.NewGore(base.position, base.velocity, 938, 1f);
                            break;
                        default:
                            flag = false;
                            break;
                    }

                    if (flag)
                    {
                        var num = 926;
                        switch (GetPartyHatColor())
                        {
                            case PartyHatColor.Cyan:
                                num = 940;
                                break;
                            case PartyHatColor.Pink:
                                num = 939;
                                break;
                            case PartyHatColor.Purple:
                                num = 941;
                                break;
                            case PartyHatColor.White:
                                num = 942;
                                break;
                        }

                        Gore.NewGore(base.position, base.velocity, num, 1f);
                    }
                }

                if (daybreak && life <= 0)
                {
                    var hitbox = base.Hitbox;
                    for (var i = 0; i < 20; i++)
                    {
                        var num2 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
                        var num3 = Dust.NewDust(hitbox.TopLeft(), width, height, num2, 0f, -2.5f, 0, default(Color),
                            1f);
                        Main.dust[num3].alpha = 200;
                        Main.dust[num3].velocity *= 1.4f;
                        Main.dust[num3].scale += Main.rand.NextFloat();
                    }

                    if (Main.netMode != 1)
                    {
                        for (var j = 0; j < 200; j++)
                        {
                            var nPC = Main.npc[j];
                            if (nPC.active && !nPC.buffImmune[189] && Distance(nPC.Center) < 100f &&
                                !nPC.dontTakeDamage && nPC.lifeMax > 5 && !nPC.friendly && !nPC.townNPC)
                            {
                                nPC.AddBuff(189, 300, false);
                            }
                        }
                    }
                }

                if (type == 552 || type == 553 || type == 554)
                {
                    if (life > 0)
                    {
                        for (var k = 0; (double) k < dmg / (double) lifeMax * 20.0; k++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var l = 0; (float) l < 20f; l++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }

                        var num4 = 983;
                        if (type == 553)
                        {
                            num4 = 1067;
                        }
                        else if (type == 554)
                        {
                            num4 = 1071;
                        }

                        Gore.NewGore(base.position, base.velocity, num4, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num4 + 3,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num4 + 2,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, num4 + 1,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, num4 + 1,
                            scale);
                    }
                }
                else if (type == 561 || type == 562 || type == 563)
                {
                    if (life > 0)
                    {
                        for (var m = 0; (double) m < dmg / (double) lifeMax * 20.0; m++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var n = 0; (float) n < 20f; n++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }

                        var num5 = 987;
                        if (type == 562)
                        {
                            num5 = 1055;
                        }
                        else if (type == 563)
                        {
                            num5 = 1061;
                        }

                        Gore.NewGore(base.position, base.velocity, num5 + 3, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num5, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num5 + 4,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num5 + 5,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num5 + 2,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, num5 + 1,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, num5 + 1,
                            scale);
                    }
                }
                else if (type == 555 || type == 556 || type == 557)
                {
                    if (life > 0)
                    {
                        for (var num6 = 0; (double) num6 < dmg / (double) lifeMax * 20.0; num6++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        var num7 = 1031;
                        if (type == 556)
                        {
                            num7 = 1034;
                        }

                        if (type == 557)
                        {
                            num7 = 1037;
                        }

                        for (var num8 = 0; (float) num8 < 20f; num8++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }

                        Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, num7, scale);
                        Gore.NewGore(new Vector2(base.position.X + 10f, base.position.Y + 20f), base.velocity, num7 + 1,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X + 10f, base.position.Y + 30f), base.velocity, num7 + 2,
                            scale);
                    }
                }
                else if (type == 551)
                {
                    var num9 = (int) ((float) life / (float) lifeMax * 100f);
                    var num10 = (int) (((double) life + dmg) / (double) (float) lifeMax * 100.0);
                    if (num9 != num10 && life > 0 && Main.netMode != 1)
                    {
                        DD2Event.CheckProgress(type);
                    }

                    if (life > 0)
                    {
                        for (var num11 = 0; (double) num11 < dmg / (double) lifeMax * 20.0; num11++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num12 = 0; (float) num12 < 20f; num12++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }

                        if (spriteDirection != -1)
                        {
                            Gore.NewGore(base.position + new Vector2(0f, 54f), base.velocity, 1079, scale);
                            Gore.NewGore(base.position + new Vector2(72f, 90f), base.velocity, 1080, scale);
                            Gore.NewGore(base.position + new Vector2(102f, 94f), base.velocity, 1080, scale);
                            Gore.NewGore(base.position + new Vector2(178f, 0f), base.velocity, 1081, scale);
                            Gore.NewGore(base.position + new Vector2(136f, 12f), base.velocity, 1082, scale);
                            Gore.NewGore(base.position + new Vector2(82f, 18f), base.velocity, 1083, scale);
                            Gore.NewGore(base.position + new Vector2(100f, 26f), base.velocity, 1084, scale);
                            Gore.NewGore(base.position + new Vector2(170f, 16f), base.velocity, 1085, scale);
                            Gore.NewGore(base.position + new Vector2(190f, 10f), base.velocity, 1085, scale);
                            Gore.NewGore(base.position + new Vector2(100f, 36f), base.velocity, 1086, scale);
                        }
                        else
                        {
                            Gore.NewGore(base.position + new Vector2(176f, 54f), base.velocity, 1079, scale);
                            Gore.NewGore(base.position + new Vector2(158f, 90f), base.velocity, 1080, scale);
                            Gore.NewGore(base.position + new Vector2(128f, 94f), base.velocity, 1080, scale);
                            Gore.NewGore(base.position + new Vector2(0f, 0f), base.velocity, 1081, scale);
                            Gore.NewGore(base.position + new Vector2(60f, 12f), base.velocity, 1082, scale);
                            Gore.NewGore(base.position + new Vector2(88f, 18f), base.velocity, 1083, scale);
                            Gore.NewGore(base.position + new Vector2(86f, 26f), base.velocity, 1084, scale);
                            Gore.NewGore(base.position + new Vector2(40f, 16f), base.velocity, 1085, scale);
                            Gore.NewGore(base.position + new Vector2(20f, 10f), base.velocity, 1085, scale);
                            Gore.NewGore(base.position + new Vector2(142f, 36f), base.velocity, 1086, scale);
                        }
                    }
                }
                else if (type == 572 || type == 573)
                {
                    if (life > 0)
                    {
                        for (var num13 = 0; (double) num13 < dmg / (double) lifeMax * 20.0; num13++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        Main.GetActiveSound(SlotId.FromFloat(localAI[0]))?.Stop();
                        Main.GetActiveSound(SlotId.FromFloat(localAI[1]))?.Stop();
                        for (var num14 = 0; (float) num14 < 20f; num14++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }

                        var position = base.Center - new Vector2(10f, 10f);
                        Gore.NewGore(position, base.velocity, 993, scale);
                        Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 996, scale);
                        Gore.NewGore(new Vector2(position.X, position.Y + 20f), base.velocity, 995, scale);
                        Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 994, scale);
                        Gore.NewGore(new Vector2(position.X, position.Y + 34f), base.velocity, 994, scale);
                    }
                }
                else if (type == 574 || type == 575)
                {
                    if (life > 0)
                    {
                        for (var num15 = 0; (double) num15 < dmg / (double) lifeMax * 20.0; num15++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        Main.GetActiveSound(SlotId.FromFloat(localAI[2]))?.Stop();
                        for (var num16 = 0; (float) num16 < 20f; num16++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }

                        var num17 = 1050;
                        var vector = base.Center - new Vector2(30f, 10f);
                        Gore.NewGore(new Vector2(vector.X, vector.Y + 10f), base.velocity, num17, scale);
                        Gore.NewGore(new Vector2(vector.X, vector.Y + 30f), base.velocity, num17 + 1, scale);
                        Gore.NewGore(new Vector2(vector.X, vector.Y + 30f), base.velocity, num17 + 2, scale);
                        Gore.NewGore(new Vector2(vector.X, vector.Y + 0f), base.velocity, num17 + 3, scale);
                        Gore.NewGore(new Vector2(vector.X, vector.Y + 0f), base.velocity, num17 + 4, scale);
                    }
                }
                else if (type == 570 || type == 571)
                {
                    if (life > 0)
                    {
                        for (var num18 = 0; (double) num18 < dmg / (double) lifeMax * 20.0; num18++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num19 = 0; (float) num19 < 20f; num19++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }

                        var num20 = (type == 570) ? 1075 : 979;
                        Gore.NewGore(base.position, base.velocity, num20, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num20 + 2,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num20 + 2,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num20 + 3,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, num20 + 1,
                            scale);
                    }
                }
                else if (type == 568 || type == 569)
                {
                    if (life > 0)
                    {
                        for (var num21 = 0; (double) num21 < dmg / (double) lifeMax * 20.0; num21++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num22 = 0; (float) num22 < 20f; num22++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 1020, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 1021, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 1023, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 1022, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 1022, scale);
                    }
                }
                else if (type == 558 || type == 559 || type == 560)
                {
                    if (life > 0)
                    {
                        for (var num23 = 0; (double) num23 < dmg / (double) lifeMax * 20.0; num23++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num24 = 0; (float) num24 < 20f; num24++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }

                        var num25 = 974;
                        if (type == 559)
                        {
                            num25 = 1040;
                        }

                        if (type == 560)
                        {
                            num25 = 1045;
                        }

                        Gore.NewGore(base.position, base.velocity, num25 + 2, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 10f), base.velocity, num25, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 10f), base.velocity, num25, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 10f), base.velocity, num25 + 4,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 24f), base.velocity, num25 + 1,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 24f), base.velocity, num25 + 3,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 24f), base.velocity, num25 + 3,
                            scale);
                    }
                }
                else if (type == 566 || type == 567)
                {
                    if (life > 0)
                    {
                        for (var num26 = 0; (double) num26 < dmg / (double) lifeMax * 20.0; num26++)
                        {
                            Dust.NewDust(base.position, width, height, 236, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num27 = 0; (float) num27 < 20f; num27++)
                        {
                            Dust.NewDust(base.position, width, height, 236, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 970, scale);
                        if (Main.rand.Next(2) == 0)
                        {
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 972,
                                scale);
                        }

                        if (Main.rand.Next(2) == 0)
                        {
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 972,
                                scale);
                        }

                        if (Main.rand.Next(2) == 0)
                        {
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 973,
                                scale);
                        }

                        if (Main.rand.Next(2) == 0)
                        {
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 973,
                                scale);
                        }

                        if (Main.rand.Next(2) == 0)
                        {
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 971,
                                scale);
                        }

                        if (Main.rand.Next(2) == 0)
                        {
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 971,
                                scale);
                        }
                    }
                }
                else if (type == 576 || type == 577)
                {
                    if (life > 0)
                    {
                        for (var num28 = 0; (double) num28 < dmg / (double) lifeMax * 20.0; num28++)
                        {
                            Dust.NewDust(base.position, width, height, 273, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num29 = 0; (float) num29 < 20f; num29++)
                        {
                            Dust.NewDust(base.position, width, height, 273, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }

                        if (spriteDirection == -1)
                        {
                            Gore.NewGore(base.position + new Vector2(0f, 0f), base.velocity,
                                1005 + ((Main.rand.Next(5) == 0) ? 1 : 0), scale);
                            Gore.NewGore(base.position + new Vector2(18f, 28f), base.velocity, 1000, scale);
                            var num30 = Gore.NewGore(base.position + new Vector2(-40f, 70f), base.velocity, 1001,
                                scale);
                            Main.gore[num30].rotation = 3.14159274f;
                            num30 = Gore.NewGore(base.position + new Vector2(4f, 28f), base.velocity, 1002, scale);
                            Main.gore[num30].rotation = 3.14159274f;
                            Gore.NewGore(base.position + new Vector2(36f, 90f), base.velocity, 1003, scale);
                            Gore.NewGore(base.position + new Vector2(32f, 90f), base.velocity, 1004, scale);
                        }
                        else
                        {
                            Gore.NewGore(base.position + new Vector2(48f, 0f), base.velocity,
                                1005 + ((Main.rand.Next(5) == 0) ? 1 : 0), scale);
                            Gore.NewGore(base.position + new Vector2(22f, 28f), base.velocity, 1000, scale);
                            Gore.NewGore(base.position + new Vector2(48f, 70f), base.velocity, 1001, scale);
                            Gore.NewGore(base.position + new Vector2(4f, 28f), base.velocity, 1002, scale);
                            Gore.NewGore(base.position + new Vector2(36f, 90f), base.velocity, 1003, scale);
                            Gore.NewGore(base.position + new Vector2(32f, 90f), base.velocity, 1004, scale);
                        }
                    }
                }
                else if (type == 564 || type == 565)
                {
                    if (life > 0)
                    {
                        for (var num31 = 0; (double) num31 < dmg / (double) lifeMax * 20.0; num31++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num32 = 0; (float) num32 < 20f; num32++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }

                        var num33 = 1009;
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, num33, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 15f), base.velocity, num33 + 1,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 15f), base.velocity, num33 + 2,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 15f), base.velocity, num33 + 3,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X - 20f, base.position.Y + 35f), base.velocity,
                            num33 + 4, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 35f), base.velocity, num33 + 5,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 35f), base.velocity, num33 + 6,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 35f), base.velocity, num33 + 10,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 25f), base.velocity, num33 + 7,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 25f), base.velocity, num33 + 8,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 25f), base.velocity, num33 + 9,
                            scale);
                    }
                }
                else if (type == 578)
                {
                    if (life > 0)
                    {
                        for (var num34 = 0; (double) num34 < dmg / (double) lifeMax * 20.0; num34++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num35 = 0; (float) num35 < 20f; num35++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 999, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 10f), base.velocity, 998, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 10f), base.velocity, 998, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 10f), base.velocity, 997, scale);
                    }
                }
                else if (type == 541)
                {
                    var color = new Color(222, 108, 48) * 0.7f;
                    if (life > 0)
                    {
                        for (var num36 = 0; (double) num36 < dmg / (double) lifeMax * 200.0; num36++)
                        {
                            var dust = Main.dust[
                                Dust.NewDust(base.position, width, height, 268, 0f, 0f, 0, default(Color), 1f)];
                            dust.color = color;
                            dust.noGravity = true;
                            dust.scale = 1.5f;
                            dust.fadeIn = 0.7f;
                            dust.velocity *= 3f;
                            dust = Main.dust[
                                Dust.NewDust(base.position, width, height, 268, 0f, 0f, 0, default(Color), 1f)];
                            dust.color = color;
                            dust.noGravity = true;
                            dust.scale = 1.5f;
                            dust.fadeIn = 0.7f;
                            dust.velocity *= 3f;
                        }
                    }
                    else
                    {
                        for (var num37 = 0; num37 < 30; num37++)
                        {
                            var dust2 =
                                Main.dust[
                                    Dust.NewDust(base.position, width, height, 268, 0f, 0f, 0, default(Color), 1f)];
                            dust2.color = color;
                            dust2.noGravity = true;
                            dust2.scale = 1.5f;
                            dust2.fadeIn = 0.7f;
                            dust2.velocity *= 3f;
                            dust2 = Main.dust[
                                Dust.NewDust(base.position, width, height, 268, 0f, 0f, 0, default(Color), 1f)];
                            dust2.color = color;
                            dust2.noGravity = true;
                            dust2.scale = 1.5f;
                            dust2.fadeIn = 0.7f;
                            dust2.velocity *= 3f;
                        }

                        Gore.NewGore(base.position, base.velocity, 960, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 961, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 963, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 40f), base.velocity, 962, scale);
                    }
                }
                else if (type == 546)
                {
                    var color2 = new Color(150, 108, 78) * 0.7f;
                    if (life > 0)
                    {
                        for (var num38 = 0; (double) num38 < dmg / (double) lifeMax * 50.0; num38++)
                        {
                            var dust3 =
                                Main.dust[
                                    Dust.NewDust(base.position, width, height, 268, 0f, 0f, 0, default(Color), 1f)];
                            dust3.color = color2;
                            dust3.noGravity = true;
                            dust3.scale = 1.5f;
                            dust3.fadeIn = 0.7f;
                            dust3.velocity *= 3f;
                            dust3 = Main.dust[
                                Dust.NewDust(base.position, width, height, 268, 0f, 0f, 0, default(Color), 1f)];
                            dust3.color = color2;
                            dust3.noGravity = true;
                            dust3.scale = 1.5f;
                            dust3.fadeIn = 0.7f;
                            dust3.velocity *= 3f;
                        }
                    }
                    else
                    {
                        for (var num39 = 0; num39 < 20; num39++)
                        {
                            var dust4 =
                                Main.dust[
                                    Dust.NewDust(base.position, width, height, 268, 0f, 0f, 0, default(Color), 1f)];
                            dust4.color = color2;
                            dust4.noGravity = true;
                            dust4.scale = 1.5f;
                            dust4.fadeIn = 0.7f;
                            dust4.velocity *= 3f;
                            dust4 = Main.dust[
                                Dust.NewDust(base.position, width, height, 268, 0f, 0f, 0, default(Color), 1f)];
                            dust4.color = color2;
                            dust4.noGravity = true;
                            dust4.scale = 1.5f;
                            dust4.fadeIn = 0.7f;
                            dust4.velocity *= 3f;
                        }

                        for (var num40 = 0; num40 < 20; num40++)
                        {
                            var num41 = Dust.NewDust(base.position, width, height, 54, 0f, 0f, 50, default(Color),
                                1.5f);
                            Main.dust[num41].velocity *= 2f;
                            Main.dust[num41].noGravity = true;
                        }

                        Gore.NewGore(base.position, base.velocity, 964, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 965, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 966, scale);
                    }
                }

                if (type == 378)
                {
                    if (life > 0)
                    {
                        for (var num42 = 0; (double) num42 < dmg / (double) lifeMax * 50.0; num42++)
                        {
                            Dust.NewDust(base.position, width, height, 7, 0f, 0f, 0, default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num43 = 0; num43 < 20; num43++)
                        {
                            Dust.NewDust(base.position, width, height, 7, 0f, 0f, 0, default(Color), 1f);
                        }
                    }
                }

                if (type == 437 && dmg == 9999.0)
                {
                    for (var num44 = 0; num44 < 6; num44++)
                    {
                        Gore.NewGore(base.Center - new Vector2(10f),
                            Vector2.UnitY.RotatedByRandom(6.2831854820251465) * 5f, 728 + num44, 1f);
                    }
                }

                if (type == 398 && dmg == 1337.0)
                {
                    MoonlordDeathDrama.ThrowPieces(base.Center, Main.rand.Next(100));
                }

                if (type == 488)
                {
                    localAI[0] = (float) (int) dmg;
                    if (localAI[0] < 20f)
                    {
                        localAI[0] = 20f;
                    }

                    if (localAI[0] > 120f)
                    {
                        localAI[0] = 120f;
                    }

                    localAI[1] = (float) hitDirection;
                }
                else if (type >= 513 && type <= 515)
                {
                    if (life > 0)
                    {
                        for (var num45 = 0; (double) num45 < dmg / (double) lifeMax * 100.0; num45++)
                        {
                            Dust.NewDust(base.position, width, height, 250, (float) hitDirection, -1f, alpha,
                                this.color, scale);
                        }
                    }
                    else
                    {
                        for (var num46 = 0; num46 < 50; num46++)
                        {
                            Dust.NewDust(base.position, width, height, 250, (float) hitDirection, -2f, alpha,
                                this.color, scale);
                        }

                        var num47 = Gore.NewGore(base.position, base.velocity, type - 513 + 822, 1f);
                        Main.gore[num47].alpha = alpha;
                    }
                }
                else if (type >= 510 && type <= 512)
                {
                    if (life > 0)
                    {
                        for (var num48 = 0; (double) num48 < dmg / (double) lifeMax * 100.0; num48++)
                        {
                            Dust.NewDust(base.position, width, height, 250, (float) hitDirection, -1f, alpha,
                                this.color, scale);
                        }
                    }
                    else
                    {
                        for (var num49 = 0; num49 < 50; num49++)
                        {
                            Dust.NewDust(base.position, width, height, 250, (float) hitDirection, -2f, alpha,
                                this.color, scale);
                        }

                        var num50 = Gore.NewGore(base.position, base.velocity, type - 510 + 819, 1f);
                        Main.gore[num50].alpha = alpha;
                    }
                }
                else if (type == 518 || type == 416)
                {
                    if (life > 0)
                    {
                        for (var num51 = 0; (double) num51 < dmg / (double) lifeMax * 20.0; num51++)
                        {
                            Dust.NewDust(base.position, width, height, 241, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(4) == 0)
                            {
                                var dust5 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 6, 0f, 0f, 0, default(Color), 1f)];
                                dust5.noGravity = true;
                                dust5.scale = 1.5f;
                                dust5.fadeIn = 1f;
                                dust5.velocity *= 3f;
                            }
                        }
                    }
                    else
                    {
                        for (var num52 = 0; num52 < 20; num52++)
                        {
                            Dust.NewDust(base.position, width, height, 241, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(3) == 0)
                            {
                                var dust6 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 6, 0f, 0f, 0, default(Color), 1f)];
                                dust6.noGravity = true;
                                dust6.scale = 1.5f;
                                dust6.fadeIn = 1f;
                                dust6.velocity *= 3f;
                            }
                        }

                        Gore.NewGore(base.position, base.velocity, 844, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 845, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 847, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 835, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 836, scale);
                    }
                }
                else if (type == 419)
                {
                    if (life > 0)
                    {
                        for (var num53 = 0; (double) num53 < dmg / (double) lifeMax * 20.0; num53++)
                        {
                            Dust.NewDust(base.position, width, height, 241, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(4) == 0)
                            {
                                var dust7 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 6, 0f, 0f, 0, default(Color), 1f)];
                                dust7.noGravity = true;
                                dust7.scale = 1.5f;
                                dust7.fadeIn = 1f;
                                dust7.velocity *= 3f;
                            }
                        }
                    }
                    else
                    {
                        for (var num54 = 0; num54 < 20; num54++)
                        {
                            Dust.NewDust(base.position, width, height, 241, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(3) == 0)
                            {
                                var dust8 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 6, 0f, 0f, 0, default(Color), 1f)];
                                dust8.noGravity = true;
                                dust8.scale = 1.5f;
                                dust8.fadeIn = 1f;
                                dust8.velocity *= 3f;
                            }
                        }

                        Gore.NewGore(base.position, base.velocity, 844, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 845, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 846, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 846, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 847, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 847, scale);
                    }
                }
                else if (type == 412 || type == 413 || type == 414)
                {
                    if (life > 0)
                    {
                        for (var num55 = 0; (double) num55 < dmg / (double) lifeMax * 50.0; num55++)
                        {
                            Dust.NewDust(base.position, width, height, 241, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num56 = 0; num56 < 6; num56++)
                        {
                            Dust.NewDust(base.position, width, height, 241, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        for (var num57 = 0; num57 < 2; num57++)
                        {
                            Dust.NewDust(base.position, width, height, 6, 2.5f * (float) hitDirection, -2.5f, 100,
                                Color.Transparent, 2f);
                        }

                        Gore.NewGore(base.position, base.velocity, type - 412 + 828, 1f);
                    }
                }
                else if (type == 415)
                {
                    if (life > 0)
                    {
                        for (var num58 = 0; (double) num58 < dmg / (double) lifeMax * 20.0; num58++)
                        {
                            Dust.NewDust(base.position, width, height, 241, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(4) == 0)
                            {
                                var dust9 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 6, 0f, 0f, 0, default(Color), 1f)];
                                dust9.noGravity = true;
                                dust9.scale = 1.5f;
                                dust9.fadeIn = 1f;
                                dust9.velocity *= 3f;
                            }
                        }
                    }
                    else
                    {
                        for (var num59 = 0; num59 < 40; num59++)
                        {
                            Dust.NewDust(base.position, width, height, 241, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            var dust10 =
                                Main.dust[Dust.NewDust(base.position, width, height, 6, 0f, 0f, 0, default(Color), 1f)];
                            dust10.noGravity = true;
                            dust10.scale = 1.5f;
                            dust10.fadeIn = 1f;
                            dust10.velocity *= 3f;
                        }

                        Gore.NewGore(base.Center, base.velocity * 0.8f, 831, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.8f, 832, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.9f, 833, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.9f, 834, 1f);
                    }
                }
                else if (type == 417)
                {
                    if (life > 0)
                    {
                        for (var num60 = 0; (double) num60 < dmg / (double) lifeMax * 20.0; num60++)
                        {
                            Dust.NewDust(base.position, width, height, 241, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(4) == 0)
                            {
                                var dust11 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 6, 0f, 0f, 0, default(Color), 1f)];
                                dust11.noGravity = true;
                                dust11.scale = 1.5f;
                                dust11.fadeIn = 1f;
                                dust11.velocity *= 3f;
                            }
                        }
                    }
                    else
                    {
                        for (var num61 = 0; num61 < 30; num61++)
                        {
                            Dust.NewDust(base.position, width, height, 241, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(2) == 0)
                            {
                                var dust12 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 6, 0f, 0f, 0, default(Color), 1f)];
                                dust12.noGravity = true;
                                dust12.scale = 1.5f;
                                dust12.fadeIn = 1f;
                                dust12.velocity *= 3f;
                            }
                        }

                        Gore.NewGore(base.position, base.velocity, 837, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 838, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 838, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 838, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 839, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 839, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 38f), base.velocity, 840, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 38f), base.velocity, 840, scale);
                    }
                }
                else if (type == 418)
                {
                    if (life > 0)
                    {
                        for (var num62 = 0; (double) num62 < dmg / (double) lifeMax * 20.0; num62++)
                        {
                            Dust.NewDust(base.position, width, height, 241, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(2) == 0)
                            {
                                var dust13 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 6, 0f, 0f, 0, default(Color), 1f)];
                                dust13.noGravity = true;
                                dust13.scale = 1.5f;
                                dust13.fadeIn = 1f;
                                dust13.velocity *= 3f;
                            }
                        }
                    }
                    else
                    {
                        for (var num63 = 0; num63 < 20; num63++)
                        {
                            Dust.NewDust(base.position, width, height, 241, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            var dust14 =
                                Main.dust[Dust.NewDust(base.position, width, height, 6, 0f, 0f, 0, default(Color), 1f)];
                            dust14.noGravity = true;
                            dust14.scale = 1.5f;
                            dust14.fadeIn = 1f;
                            dust14.velocity *= 3f;
                        }

                        Gore.NewGore(base.Center, base.velocity * 0.8f, 841, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.8f, 842, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.8f, 842, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.9f, 843, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.9f, 843, 1f);
                    }
                }

                if (type == 516)
                {
                    for (var num64 = 0; num64 < 20; num64++)
                    {
                        var num65 = Dust.NewDust(base.position, width, height, 6, 2.5f * (float) hitDirection, -2.5f, 0,
                            default(Color), 1f);
                        Main.dust[num65].velocity *= 3f;
                        Main.dust[num65].scale += Main.rand.NextFloat();
                        if (Main.rand.Next(2) == 0)
                        {
                            num65 = Dust.NewDust(base.position, width, height, 259, 2.5f * (float) hitDirection, -2.5f,
                                0, default(Color), 1f);
                            Main.dust[num65].noGravity = true;
                        }
                    }
                }

                if (type == 519)
                {
                    var hitbox2 = base.Hitbox;
                    for (var num66 = 0; num66 < oldPos.Length; num66 += 3)
                    {
                        hitbox2.X = (int) oldPos[num66].X;
                        hitbox2.Y = (int) oldPos[num66].Y;
                        for (var num67 = 0; num67 < 5; num67++)
                        {
                            var num68 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
                            var num69 = Dust.NewDust(hitbox2.TopLeft(), width, height, num68,
                                2.5f * (float) hitDirection, -2.5f, 0, default(Color), 1f);
                            Main.dust[num69].alpha = 200;
                            Main.dust[num69].velocity *= 2.4f;
                            Main.dust[num69].scale += Main.rand.NextFloat();
                        }
                    }
                }

                if (type == 522)
                {
                    var spinningpoint = new Vector2(0f, -3f).RotatedByRandom(3.1415927410125732);
                    var num70 = 24f;
                    var value = new Vector2(1.05f, 1f);
                    for (var num71 = 0f; num71 < num70; num71 += 1f)
                    {
                        var num72 = Dust.NewDust(base.Center, 0, 0, 66, 0f, 0f, 0, Color.Transparent, 1f);
                        Main.dust[num72].position = base.Center;
                        Main.dust[num72].velocity =
                            spinningpoint.RotatedBy((double) (6.28318548f * num71 / num70), default(Vector2)) * value *
                            (0.8f + Main.rand.NextFloat() * 0.4f) * 2f;
                        Main.dust[num72].color = Color.SkyBlue;
                        Main.dust[num72].noGravity = true;
                        Main.dust[num72].scale += 0.5f + Main.rand.NextFloat();
                    }
                }
                else if (type == 426)
                {
                    if (life > 0)
                    {
                        for (var num73 = 0; (double) num73 < dmg / (double) lifeMax * 50.0; num73++)
                        {
                            Dust.NewDust(base.position, width, height, 241, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(4) == 0)
                            {
                                var dust15 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 229, 0f, 0f, 0, default(Color), 1f)];
                                dust15.noGravity = true;
                                dust15.scale = 1.5f;
                                dust15.fadeIn = 1f;
                                dust15.velocity *= 3f;
                            }
                        }
                    }
                    else
                    {
                        for (var num74 = 0; num74 < 20; num74++)
                        {
                            Dust.NewDust(base.position, width, height, 241, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }

                        for (var num75 = 0; num75 < 30; num75++)
                        {
                            var num76 = Utils.SelectRandom<int>(Main.rand, 229, 240, 161);
                            var dust16 =
                                Main.dust[
                                    Dust.NewDust(base.position, width, height, num76, 0f, 0f, 0, default(Color), 1f)];
                            dust16.noGravity = true;
                            dust16.scale = 1.25f + Main.rand.NextFloat();
                            dust16.fadeIn = 0.25f;
                            dust16.velocity *= 2f;
                            dust16.noLight = true;
                        }

                        Gore.NewGore(base.Top, base.velocity * 0.7f, 799, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.8f, 800, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.9f, 801, 1f);
                        if (Main.netMode != 1)
                        {
                            for (var num77 = 0; num77 < 3; num77++)
                            {
                                var num78 = NewNPC((int) base.Center.X, (int) base.Center.Y, 428, whoAmI, 0f, 0f, 0f,
                                    0f, 255);
                                Main.npc[num78].velocity =
                                    -Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (float) Main.rand.Next(3, 6) -
                                    Vector2.UnitY * 2f;
                                Main.npc[num78].netUpdate = true;
                            }
                        }
                    }
                }
                else if (type == 427)
                {
                    if (life > 0)
                    {
                        for (var num79 = 0; (double) num79 < dmg / (double) lifeMax * 20.0; num79++)
                        {
                            Dust.NewDust(base.position, width, height, 241, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(2) == 0)
                            {
                                var dust17 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 229, 0f, 0f, 0, default(Color), 1f)];
                                dust17.noGravity = true;
                                dust17.scale = 1.5f;
                                dust17.fadeIn = 1f;
                                dust17.velocity *= 3f;
                            }
                        }
                    }
                    else
                    {
                        for (var num80 = 0; num80 < 10; num80++)
                        {
                            Dust.NewDust(base.position, width, height, 241, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }

                        for (var num81 = 0; num81 < 20; num81++)
                        {
                            var num82 = Utils.SelectRandom<int>(Main.rand, 229, 229, 240);
                            var dust18 =
                                Main.dust[
                                    Dust.NewDust(base.position, width, height, num82, 0f, 0f, 0, default(Color), 1f)];
                            dust18.noGravity = true;
                            dust18.scale = 1.25f + Main.rand.NextFloat();
                            dust18.fadeIn = 0.25f;
                            dust18.velocity *= 3f;
                            dust18.noLight = true;
                        }

                        Gore.NewGore(base.Center, base.velocity * 0.8f, 802, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.9f, 803, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.9f, 804, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.8f, 805, 1f);
                    }
                }
                else if (type == 429)
                {
                    if (life > 0)
                    {
                        for (var num83 = 0; (double) num83 < dmg / (double) lifeMax * 20.0; num83++)
                        {
                            Dust.NewDust(base.position, width, height, 241, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(4) == 0)
                            {
                                var dust19 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 229, 0f, 0f, 0, default(Color), 1f)];
                                dust19.noGravity = true;
                                dust19.scale = 1.5f;
                                dust19.fadeIn = 1f;
                                dust19.velocity *= 3f;
                            }
                        }
                    }
                    else
                    {
                        for (var num84 = 0; num84 < 20; num84++)
                        {
                            Dust.NewDust(base.position, width, height, 241, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(3) == 0)
                            {
                                var dust20 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 229, 0f, 0f, 0, default(Color), 1f)];
                                dust20.noGravity = true;
                                dust20.scale = 1.5f;
                                dust20.fadeIn = 1f;
                                dust20.velocity *= 3f;
                            }
                        }

                        Gore.NewGore(base.position, base.velocity, 808, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 809, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 809, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 810, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 810, scale);
                        if (Main.netMode != 1)
                        {
                            var point = base.Center.ToTileCoordinates();
                            var point2 = Main.player[target].Center.ToTileCoordinates();
                            var vector2 = Main.player[target].Center - base.Center;
                            var num85 = 20;
                            var num86 = 3;
                            var num87 = 7;
                            var num88 = 2;
                            var num89 = 0;
                            var flag2 = false;
                            if (vector2.Length() > 2000f)
                            {
                                flag2 = true;
                            }

                            while (!flag2 && num89 < 100)
                            {
                                num89++;
                                var num90 = Main.rand.Next(point2.X - num85, point2.X + num85 + 1);
                                var num91 = Main.rand.Next(point2.Y - num85, point2.Y - Math.Abs(num90 - point2.X) + 1);
                                if ((num91 < point2.Y - num87 || num91 > point2.Y + num87 || num90 < point2.X - num87 ||
                                     num90 > point2.X + num87) &&
                                    (num91 < point.Y - num86 || num91 > point.Y + num86 || num90 < point.X - num86 ||
                                     num90 > point.X + num86) && !Main.tile[num90, num91].nactive())
                                {
                                    var flag3 = true;
                                    if (flag3 && Main.tile[num90, num91].lava())
                                    {
                                        flag3 = false;
                                    }

                                    if (flag3 && Collision.SolidTiles(num90 - num88, num90 + num88, num91 - num88,
                                            num91 + num88))
                                    {
                                        flag3 = false;
                                    }

                                    if (flag3 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0,
                                            0))
                                    {
                                        flag3 = false;
                                    }

                                    if (flag3)
                                    {
                                        Projectile.NewProjectile((float) (num90 * 16 + 8), (float) (num91 * 16 + 8), 0f,
                                            0f, 578, 0, 1f, Main.myPlayer, 0f, 0f);
                                        flag2 = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                else if (type == 425)
                {
                    if (life > 0)
                    {
                        for (var num92 = 0; (double) num92 < dmg / (double) lifeMax * 20.0; num92++)
                        {
                            Dust.NewDust(base.position, width, height, 241, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(4) == 0)
                            {
                                var dust21 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 229, 0f, 0f, 0, default(Color), 1f)];
                                dust21.noGravity = true;
                                dust21.scale = 1.5f;
                                dust21.fadeIn = 1f;
                                dust21.velocity *= 3f;
                            }
                        }
                    }
                    else
                    {
                        for (var num93 = 0; num93 < 20; num93++)
                        {
                            Dust.NewDust(base.position, width, height, 241, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(3) == 0)
                            {
                                var dust22 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 229, 0f, 0f, 0, default(Color), 1f)];
                                dust22.noGravity = true;
                                dust22.scale = 1.5f;
                                dust22.fadeIn = 1f;
                                dust22.velocity *= 3f;
                            }
                        }

                        Gore.NewGore(base.position, base.velocity, 796, scale);
                        Gore.NewGore(base.Center, base.velocity, 797, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 798, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 809, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 809, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 810, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 810, scale);
                    }
                }
                else if (type == 428)
                {
                    if (life > 0)
                    {
                        for (var num94 = 0; (double) num94 < dmg / (double) lifeMax * 20.0; num94++)
                        {
                            Dust.NewDust(base.position, width, height, 241, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num95 = 0; num95 < 10; num95++)
                        {
                            Dust.NewDust(base.position, width, height, 241, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(2) == 0)
                            {
                                Dust.NewDust(base.position, width, height, 229, 0f, 0f, 0, default(Color), 1f);
                            }
                            else
                            {
                                Dust.NewDust(base.position, width, height, 240, 0f, 0f, 0, default(Color), 1f);
                            }
                        }

                        Gore.NewGore(base.position, base.velocity * 0.8f, 806, 1f);
                        Gore.NewGore(base.position, base.velocity * 0.8f, 807, 1f);
                    }
                }
                else if (type == 424)
                {
                    if (life > 0)
                    {
                        for (var num96 = 0; (double) num96 < dmg / (double) lifeMax * 20.0; num96++)
                        {
                            Dust.NewDust(base.position, width, height, 249, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(4) == 0)
                            {
                                var dust23 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 242, 0f, 0f, 0, default(Color), 1f)];
                                dust23.noGravity = true;
                                dust23.scale = 1.5f;
                                dust23.fadeIn = 1f;
                                dust23.velocity *= 3f;
                            }
                        }
                    }
                    else
                    {
                        for (var num97 = 0; num97 < 20; num97++)
                        {
                            Dust.NewDust(base.position, width, height, 249, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(3) == 0)
                            {
                                var dust24 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 242, 0f, 0f, 0, default(Color), 1f)];
                                dust24.noGravity = true;
                                dust24.scale = 1.5f;
                                dust24.fadeIn = 1f;
                                dust24.velocity *= 3f;
                            }
                        }

                        Gore.NewGore(base.position, base.velocity, 793, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 794, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 794, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 795, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 795, scale);
                    }
                }
                else if (type == 423)
                {
                    if (life > 0)
                    {
                        for (var num98 = 0; (double) num98 < dmg / (double) lifeMax * 50.0; num98++)
                        {
                            Dust.NewDust(base.position, width, height, 249, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(4) == 0)
                            {
                                var dust25 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 242, 0f, 0f, 0, default(Color), 1f)];
                                dust25.noGravity = true;
                                dust25.scale = 1.5f;
                                dust25.fadeIn = 1f;
                                dust25.velocity *= 3f;
                            }
                        }
                    }
                    else
                    {
                        for (var num99 = 0; num99 < 20; num99++)
                        {
                            Dust.NewDust(base.position, width, height, 249, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            var dust26 =
                                Main.dust[
                                    Dust.NewDust(base.position, width, height, 242, 0f, 0f, 0, default(Color), 1f)];
                            dust26.noGravity = true;
                            dust26.scale = 1.5f;
                            dust26.fadeIn = 1f;
                            dust26.velocity *= 3f;
                        }

                        Gore.NewGore(base.Center, base.velocity * 0.8f, 790, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.8f, 791, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.9f, 792, 1f);
                    }
                }
                else if (type == 421)
                {
                    if (life > 0)
                    {
                        for (var num100 = 0; (double) num100 < dmg / (double) lifeMax * 20.0; num100++)
                        {
                            Dust.NewDust(base.position, width, height, 249, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(2) == 0)
                            {
                                var dust27 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 242, 0f, 0f, 0, default(Color), 1f)];
                                dust27.noGravity = true;
                                dust27.scale = 1.5f;
                                dust27.fadeIn = 1f;
                                dust27.velocity *= 3f;
                            }
                        }
                    }
                    else
                    {
                        for (var num101 = 0; num101 < 10; num101++)
                        {
                            Dust.NewDust(base.position, width, height, 249, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            var dust28 =
                                Main.dust[
                                    Dust.NewDust(base.position, width, height, 242, 0f, 0f, 0, default(Color), 1f)];
                            dust28.noGravity = true;
                            dust28.scale = 1.5f;
                            dust28.fadeIn = 1f;
                            dust28.velocity *= 3f;
                        }

                        Gore.NewGore(base.Center, base.velocity * 0.8f, 785, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.8f, 786, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.9f, 787, 1f);
                    }
                }
                else if (type == 420)
                {
                    if (life > 0)
                    {
                        for (var num102 = 0; (double) num102 < dmg / (double) lifeMax * 20.0; num102++)
                        {
                            Dust.NewDust(base.position, width, height, 249, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(2) == 0)
                            {
                                var dust29 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 242, 0f, 0f, 0, default(Color), 1f)];
                                dust29.noGravity = true;
                                dust29.scale = 1.5f;
                                dust29.fadeIn = 1f;
                                dust29.velocity *= 3f;
                            }
                        }
                    }
                    else
                    {
                        for (var num103 = 0; num103 < 10; num103++)
                        {
                            Dust.NewDust(base.position, width, height, 249, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            var dust30 =
                                Main.dust[
                                    Dust.NewDust(base.position, width, height, 242, 0f, 0f, 0, default(Color), 1f)];
                            dust30.noGravity = true;
                            dust30.scale = 1.5f;
                            dust30.fadeIn = 1f;
                            dust30.velocity *= 3f;
                        }

                        Gore.NewGore(base.Center, base.velocity * 0.8f, 782, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.8f, 783, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.9f, 784, 1f);
                    }
                }
                else if (type == 406 || type == 405)
                {
                    if (life > 0)
                    {
                        for (var num104 = 0; (double) num104 < 10.0 + dmg / 10.0; num104++)
                        {
                            var num105 = width / 4;
                            var vector8 = ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() *
                                              (float) Main.rand.Next(24, 41) / 8f;
                            var num106 = Dust.NewDust(base.Center - Vector2.One * (float) num105, num105 * 2,
                                num105 * 2, 229, 0f, 0f, 0, default(Color), 1f);
                            var dust31 = Main.dust[num106];
                            var vector3 = Vector2.Normalize(dust31.position - base.Center);
                            dust31.position = base.Center + vector3 * (float) num105 * scale - new Vector2(4f);
                            if (num104 < 30)
                            {
                                dust31.velocity = vector3 * dust31.velocity.Length() * 2f;
                            }
                            else
                            {
                                dust31.velocity = 2f * vector3 * (float) Main.rand.Next(45, 91) / 10f;
                            }

                            dust31.noGravity = true;
                            dust31.scale = 0.7f + Main.rand.NextFloat();
                        }
                    }
                    else
                    {
                        for (var num107 = 0; num107 < 60; num107++)
                        {
                            var num108 = width / 4;
                            var vector9 = ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() *
                                              (float) Main.rand.Next(24, 41) / 8f;
                            var num109 = Dust.NewDust(base.Center - Vector2.One * (float) num108, num108 * 2,
                                num108 * 2, 229, 0f, 0f, 0, default(Color), 1f);
                            var dust32 = Main.dust[num109];
                            var vector4 = Vector2.Normalize(dust32.position - base.Center);
                            dust32.position = base.Center + vector4 * (float) num108 * scale - new Vector2(4f);
                            if (num107 < 30)
                            {
                                dust32.velocity = vector4 * dust32.velocity.Length() * 2f;
                            }
                            else
                            {
                                dust32.velocity = 2f * vector4 * (float) Main.rand.Next(45, 91) / 10f;
                            }

                            dust32.noGravity = true;
                            dust32.scale = 0.7f;
                        }

                        if (type == 405)
                        {
                            var num110 = CountNPCS(406) + CountNPCS(405);
                            var num111 = 4;
                            if (num110 >= 4)
                            {
                                num111 = 3;
                            }

                            if (num110 >= 7)
                            {
                                num111 = 2;
                            }

                            if (num110 >= 10)
                            {
                                num111 = 1;
                            }

                            for (var num112 = 0; num112 < num111; num112++)
                            {
                                var velocity = Vector2.UnitY.RotatedByRandom(6.2831854820251465) *
                                                   (3f + Main.rand.NextFloat() * 4f);
                                var num113 = NewNPC((int) base.Center.X, (int) base.Bottom.Y, 406, whoAmI, 0f, 0f, 0f,
                                    0f, 255);
                                Main.npc[num113].velocity = velocity;
                            }
                        }
                    }
                }
                else if (type == 409)
                {
                    if (life > 0)
                    {
                        for (var num114 = 0; (double) num114 < dmg / (double) lifeMax * 50.0; num114++)
                        {
                            Dust.NewDust(base.position, width, height, 17, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                            if (Main.rand.Next(4) == 0)
                            {
                                var dust33 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 229, 0f, 0f, 0, default(Color), 1f)];
                                dust33.noGravity = true;
                            }
                        }
                    }
                    else
                    {
                        for (var num115 = 0; num115 < 20; num115++)
                        {
                            Dust.NewDust(base.position, width, height, 17, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                            var dust34 =
                                Main.dust[
                                    Dust.NewDust(base.position, width, height, 229, 0f, 0f, 0, default(Color), 1f)];
                            dust34.noGravity = true;
                            dust34.velocity *= 3f;
                        }

                        Gore.NewGore(base.Center, base.velocity * 0.8f, 775, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.8f, 776, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.9f, 777, 1f);
                    }
                }
                else if (type == 410)
                {
                    if (life > 0)
                    {
                        for (var num116 = 0; (double) num116 < dmg / (double) lifeMax * 10.0; num116++)
                        {
                            Dust.NewDust(base.position, width, height, 17, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                            if (Main.rand.Next(4) == 0)
                            {
                                var dust35 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 229, 0f, 0f, 0, default(Color), 1f)];
                                dust35.noGravity = true;
                            }
                        }
                    }
                    else
                    {
                        for (var num117 = 0; num117 < 5; num117++)
                        {
                            Dust.NewDust(base.position, width, height, 17, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                            var dust36 =
                                Main.dust[
                                    Dust.NewDust(base.position, width, height, 229, 0f, 0f, 0, default(Color), 1f)];
                            dust36.noGravity = true;
                            dust36.velocity *= 3f;
                        }
                    }
                }
                else if (type == 407)
                {
                    if (life > 0)
                    {
                        for (var num118 = 0; (double) num118 < dmg / (double) lifeMax * 50.0; num118++)
                        {
                            Dust.NewDust(base.position, width, height, 17, (float) hitDirection, -1f, 0,
                                Color.Transparent, 0.75f);
                            if (Main.rand.Next(2) == 0)
                            {
                                var dust37 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 229, 0f, 0f, 0, default(Color), 1f)];
                                dust37.noGravity = true;
                            }
                        }
                    }
                    else
                    {
                        for (var num119 = 0; num119 < 20; num119++)
                        {
                            if (Main.rand.Next(3) != 0)
                            {
                                Dust.NewDust(base.position, width, height, 17, (float) hitDirection, -1f, 0,
                                    default(Color), 1f);
                            }

                            var dust38 =
                                Main.dust[
                                    Dust.NewDust(base.position, width, height, 229, 0f, 0f, 0, default(Color), 1f)];
                            dust38.noGravity = true;
                            dust38.velocity *= 3f;
                        }

                        Gore.NewGore(base.Top, base.velocity * 0.8f, 778, 1f);
                        Gore.NewGore(base.Top, base.velocity * 0.8f, 779, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.9f, 780, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.9f, 781, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.9f, 780, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.9f, 781, 1f);
                    }
                }
                else if (type == 402)
                {
                    if (life > 0)
                    {
                        for (var num120 = 0; (double) num120 < dmg / (double) lifeMax * 3.0; num120++)
                        {
                            if (Main.rand.Next(3) == 0)
                            {
                                Dust.NewDust(base.position, width, height, 17, (float) hitDirection, -1f, 0,
                                    Color.Transparent, 0.75f);
                            }

                            if (Main.rand.Next(2) == 0)
                            {
                                var dust39 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 229, 0f, 0f, 0, default(Color), 1f)];
                                dust39.noGravity = true;
                            }

                            for (var num121 = 0; num121 < oldPos.Length; num121++)
                            {
                                if (Main.rand.Next(4) == 0)
                                {
                                    if (oldPos[num121] == Vector2.Zero)
                                    {
                                        break;
                                    }

                                    if (Main.rand.Next(3) == 0)
                                    {
                                        Dust.NewDust(oldPos[num121], width, height, 17, (float) hitDirection, -1f, 0,
                                            Color.Transparent, 0.75f);
                                    }

                                    if (Main.rand.Next(2) == 0)
                                    {
                                        var dust40 =
                                            Main.dust[
                                                Dust.NewDust(oldPos[num121], width, height, 229, 0f, 0f, 0,
                                                    default(Color), 1f)];
                                        dust40.noGravity = true;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        for (var num122 = 0; num122 < 5; num122++)
                        {
                            if (Main.rand.Next(3) == 0)
                            {
                                Dust.NewDust(base.position, width, height, 17, (float) hitDirection, -1f, 0,
                                    default(Color), 1f);
                            }

                            var dust41 =
                                Main.dust[
                                    Dust.NewDust(base.position, width, height, 229, 0f, 0f, 0, default(Color), 1f)];
                            dust41.noGravity = true;
                            dust41.velocity *= 3f;
                        }

                        for (var num123 = 0; num123 < oldPos.Length; num123++)
                        {
                            if (Main.rand.Next(4) == 0)
                            {
                                if (oldPos[num123] == Vector2.Zero)
                                {
                                    break;
                                }

                                for (var num124 = 0; num124 < 2; num124++)
                                {
                                    if (Main.rand.Next(3) == 0)
                                    {
                                        Dust.NewDust(oldPos[num123], width, height, 17, (float) hitDirection, -1f, 0,
                                            default(Color), 1f);
                                    }

                                    var dust42 =
                                        Main.dust[
                                            Dust.NewDust(oldPos[num123], width, height, 229, 0f, 0f, 0, default(Color),
                                                1f)];
                                    dust42.noGravity = true;
                                    dust42.velocity *= 3f;
                                }
                            }
                        }
                    }
                }
                else if (type == 411)
                {
                    if (life > 0)
                    {
                        for (var num125 = 0; (double) num125 < dmg / (double) lifeMax * 20.0; num125++)
                        {
                            Dust.NewDust(base.position, width, height, 17, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                            if (Main.rand.Next(4) == 0)
                            {
                                var dust43 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 229, 0f, 0f, 0, default(Color), 1f)];
                                dust43.noGravity = true;
                            }
                        }
                    }
                    else
                    {
                        for (var num126 = 0; num126 < 20; num126++)
                        {
                            Dust.NewDust(base.position, width, height, 17, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                            if (Main.rand.Next(2) == 0)
                            {
                                var dust44 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, 229, 0f, 0f, 0, default(Color), 1f)];
                                dust44.noGravity = true;
                            }
                        }

                        Gore.NewGore(base.position, base.velocity, 772, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 773, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 773, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 774, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 774, scale);
                    }
                }
                else if (type == 491)
                {
                    if (life <= 0)
                    {
                        var value2 = base.Center - new Vector2(60f);
                        var vector5 =
                            new Vector2((float) ((spriteDirection != 1) ? 1 : (-1)), 0f).RotatedBy((double) rotation,
                                default(Vector2));
                        Gore.NewGore(value2 + vector5 * (float) (width / 2), base.velocity, 858, scale);
                        Gore.NewGore(value2 + vector5 * (float) (width / 3), base.velocity, 857, scale);
                        for (var num127 = -1; num127 < 2; num127++)
                        {
                            Gore.NewGore(value2 + vector5 * ((float) width * (0.45f + (float) num127 * 0.1f)),
                                base.velocity, 859, scale);
                            Gore.NewGore(value2 + vector5 * ((float) width * (0.4f + (float) num127 * 0.1f)),
                                base.velocity, 859, scale);
                            Gore.NewGore(value2 + vector5 * ((float) width * (0.35f + (float) num127 * 0.1f)),
                                base.velocity, 859, scale);
                        }

                        for (var num128 = -1; num128 < 2; num128++)
                        {
                            Gore.NewGore(
                                value2 + vector5 * ((float) width * 0.35f) - new Vector2(0f, 200f) +
                                Utils.RandomVector2(Main.rand, -40f, 40f), base.velocity,
                                Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
                            Gore.NewGore(
                                value2 + vector5 * ((float) width * 0.15f) - new Vector2(0f, 200f) +
                                Utils.RandomVector2(Main.rand, -40f, 40f), base.velocity,
                                Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
                            Gore.NewGore(
                                value2 + vector5 * ((float) width * -0.35f) - new Vector2(0f, 200f) +
                                Utils.RandomVector2(Main.rand, -40f, 40f), base.velocity,
                                Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
                            Gore.NewGore(
                                value2 + vector5 * ((float) width * -0.15f) - new Vector2(0f, 300f) +
                                Utils.RandomVector2(Main.rand, -40f, 40f), base.velocity,
                                Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
                            Gore.NewGore(
                                value2 + vector5 * ((float) width * -0.15f) - new Vector2(0f, 300f) +
                                Utils.RandomVector2(Main.rand, -40f, 40f), base.velocity,
                                Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
                        }

                        for (var num129 = 0; num129 < 2; num129++)
                        {
                            Gore.NewGore(
                                value2 + vector5 * ((float) width * 0.15f) -
                                new Vector2(0f, (float) (160 + 60 * num129)), base.velocity, 855, scale);
                            Gore.NewGore(
                                value2 + vector5 * ((float) width * -0.15f) -
                                new Vector2(0f, (float) (160 + 60 * num129)), base.velocity, 855, scale);
                        }

                        for (var num130 = -1; num130 < 2; num130++)
                        {
                            Gore.NewGore(
                                value2 + vector5 * ((float) width * (0.25f + (float) num130 * 0.1f)) -
                                new Vector2(0f, (float) (20 + 40 * num130)), base.velocity, 854, scale);
                            Gore.NewGore(
                                value2 + vector5 * ((float) width * (-0.45f + (float) num130 * 0.1f)) -
                                new Vector2(0f, (float) (20 + 40 * num130)), base.velocity, 853, scale);
                            Gore.NewGore(
                                value2 + vector5 * ((float) width * (0.05f + (float) num130 * 0.1f)) -
                                new Vector2(0f, (float) (20 + 40 * num130)), base.velocity, 856, scale);
                        }

                        for (var num131 = 0; num131 < 30; num131++)
                        {
                            var num132 = Main.rand.Next(861, 863);
                            var num133 = Gore.NewGore(base.Center - new Vector2(60f), Vector2.Zero, num132, 1f);
                            Main.gore[num133].alpha = 100;
                            Main.gore[num133].velocity = Vector2.Transform(new Vector2(4f, 0f),
                                Matrix.CreateRotationZ((float) (Main.rand.NextDouble() * 6.2831854820251465)));
                            Main.gore[num133].position =
                                new Vector2(base.position.X - 20f + ((float) width + 40f) * Main.rand.NextFloat(),
                                    base.position.Y - 240f + (float) (height + 240 - 20) * Main.rand.NextFloat());
                        }

                        for (var num134 = 0; num134 < 120; num134++)
                        {
                            var num135 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6,
                                0f, 0f, 100, default(Color), 2.5f);
                            Main.dust[num135].noGravity = true;
                            Main.dust[num135].velocity *= 5f;
                            num135 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f,
                                0f, 100, default(Color), 1.5f);
                            Main.dust[num135].velocity *= 4f;
                            Main.dust[num135].noGravity = true;
                        }

                        if (Main.netMode != 1)
                        {
                            for (var num136 = 0; num136 < 4; num136++)
                            {
                                var num137 = (float) (num136 < 2).ToDirectionInt() *
                                               (0.3926991f + 0.7853982f * Main.rand.NextFloat());
                                var vector6 =
                                    new Vector2(0f, (0f - Main.rand.NextFloat()) * 0.5f - 0.5f).RotatedBy(
                                        (double) num137, default(Vector2)) * 6f;
                                Projectile.NewProjectile(base.Center.X, base.Center.Y, vector6.X, vector6.Y, 594, 0, 0f,
                                    Main.myPlayer, 0f, 0f);
                            }
                        }
                    }
                }
                else if (type == 492)
                {
                    if (life <= 0)
                    {
                        for (var num138 = 0; num138 < 7; num138++)
                        {
                            var num139 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31,
                                0f, 0f, 100, default(Color), 1.5f);
                            Main.dust[num139].velocity *= 1.4f;
                        }

                        for (var num140 = 0; num140 < 10; num140++)
                        {
                            var num141 = Main.rand.Next(61, 64);
                            var num142 = Gore.NewGore(base.position, Vector2.Zero, num141, 1f);
                            Main.gore[num142].alpha = 100;
                            Main.gore[num142].velocity = Vector2.Transform(new Vector2(1f, 0f),
                                Matrix.CreateRotationZ((float) (Main.rand.NextDouble() * 6.2831854820251465)));
                        }
                    }
                }
                else if (type >= 524 && type <= 527)
                {
                    var num143 = 0;
                    var num144 = 5;
                    var num145 = 863;
                    if (type == 525)
                    {
                        num143 = 75;
                        num145 = 867;
                    }
                    else if (type == 526)
                    {
                        num143 = 170;
                        num145 = 871;
                    }
                    else if (type == 527)
                    {
                        num143 = 67;
                        num145 = 879;
                    }

                    if (life > 0)
                    {
                        for (var num146 = 0; (double) num146 < dmg / (double) lifeMax * 20.0; num146++)
                        {
                            Dust.NewDust(base.position, width, height, num144, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(4) == 0 && num143 > 0)
                            {
                                var dust45 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, num143, 0f, 0f, 0, default(Color),
                                            1f)];
                                dust45.noGravity = true;
                                dust45.scale = 1.5f;
                                dust45.fadeIn = 1f;
                                dust45.velocity *= 3f;
                            }
                        }
                    }
                    else
                    {
                        for (var num147 = 0; num147 < 20; num147++)
                        {
                            Dust.NewDust(base.position, width, height, num144, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(3) == 0 && num143 > 0)
                            {
                                var dust46 =
                                    Main.dust[
                                        Dust.NewDust(base.position, width, height, num143, 0f, 0f, 0, default(Color),
                                            1f)];
                                dust46.noGravity = true;
                                dust46.scale = 1.5f;
                                dust46.fadeIn = 1f;
                                dust46.velocity *= 3f;
                            }
                        }

                        Gore.NewGore(base.position, base.velocity, num145, scale);
                        Gore.NewGore(base.position, base.velocity, num145 + 1, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num145 + 2,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num145 + 2,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, num145 + 3,
                            scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, num145 + 3,
                            scale);
                    }
                }
                else if (type >= 528 && type <= 529)
                {
                    var num148 = 5;
                    var num149 = 875;
                    if (type == 529)
                    {
                        num149 = 876;
                    }

                    if (life > 0)
                    {
                        for (var num150 = 0; (double) num150 < dmg / (double) lifeMax * 20.0; num150++)
                        {
                            Dust.NewDust(base.position, width, height, num148, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num151 = 0; num151 < 20; num151++)
                        {
                            Dust.NewDust(base.position, width, height, num148, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, num149, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 877, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 877, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 878, scale);
                    }
                }
                else if (type == 530 || type == 531)
                {
                    if (life > 0)
                    {
                        for (var num152 = 0; (double) num152 < dmg / (double) lifeMax * 30.0; num152++)
                        {
                            Dust.NewDust(base.position, width, height, 250, (float) hitDirection, -1f, 100,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num153 = 0; num153 < 20; num153++)
                        {
                            Dust.NewDust(base.position, width, height, 250, 2.5f * (float) hitDirection, -2.5f, 100,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 883, 1f);
                        Gore.NewGore(base.position, base.velocity, 884, 1f);
                        Gore.NewGore(base.position, base.velocity, 885, 1f);
                        Gore.NewGore(base.position, base.velocity, 886, 1f);
                        Gore.NewGore(base.position, base.velocity, 887, 1f);
                    }
                }
                else if (type == 532)
                {
                    if (life > 0)
                    {
                        for (var num154 = 0; (double) num154 < dmg / (double) lifeMax * 50.0; num154++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 100,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num155 = 0; num155 < 50; num155++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 100,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 888, 1f);
                        Gore.NewGore(base.position, base.velocity, 889, 1f);
                        Gore.NewGore(base.position, base.velocity, 890, 1f);
                        Gore.NewGore(base.position, base.velocity, 891, 1f);
                    }
                }
                else if (type == 533)
                {
                    if (life > 0)
                    {
                        for (var num156 = 0; (double) num156 < dmg / (double) lifeMax * 50.0; num156++)
                        {
                            var num157 = Dust.NewDust(base.position, width, height, 27, 0f, 0f, 50, default(Color),
                                1.5f);
                            Main.dust[num157].velocity *= 2f;
                            Main.dust[num157].noGravity = true;
                        }
                    }
                    else
                    {
                        for (var num158 = 0; num158 < 40; num158++)
                        {
                            var num159 = Dust.NewDust(base.position, width, height, 27, 0f, 0f, 50, default(Color),
                                1.5f);
                            Main.dust[num159].velocity *= 2f;
                            Main.dust[num159].noGravity = true;
                            Main.dust[num159].fadeIn = 1f;
                        }
                    }
                }
                else if (type == 460)
                {
                    if (life > 0)
                    {
                        for (var num160 = 0; (double) num160 < dmg / (double) lifeMax * 100.0; num160++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num161 = 0; num161 < 50; num161++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 643, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 645, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 644, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 646, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 646, scale);
                    }
                }
                else if (type == 477)
                {
                    if (life > 0)
                    {
                        for (var num162 = 0; (double) num162 < dmg / (double) lifeMax * 100.0; num162++)
                        {
                            Dust.NewDust(base.position, width, height, 237, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num163 = 0; num163 < 50; num163++)
                        {
                            Dust.NewDust(base.position, width, height, 237, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 687, scale);
                        Gore.NewGore(base.position, base.velocity, 688, scale);
                        Gore.NewGore(base.position, base.velocity, 689, scale);
                        Gore.NewGore(base.position, base.velocity, 690, scale);
                        Gore.NewGore(base.position, base.velocity, 691, scale);
                    }
                }
                else if (type == 479)
                {
                    if (life > 0)
                    {
                        for (var num164 = 0; (double) num164 < dmg / (double) lifeMax * 100.0; num164++)
                        {
                            Dust.NewDust(base.position, width, height, 237, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num165 = 0; num165 < 50; num165++)
                        {
                            Dust.NewDust(base.position, width, height, 237, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 681, scale);
                        Gore.NewGore(base.position, base.velocity, 682, scale);
                        Gore.NewGore(base.position, base.velocity, 683, scale);
                    }
                }
                else if (type == 478)
                {
                    if (life > 0)
                    {
                        for (var num166 = 0; num166 < 10; num166++)
                        {
                            var num167 = Dust.NewDust(base.position, width, height, 238, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            Main.dust[num167].noGravity = true;
                        }
                    }
                    else
                    {
                        for (var num168 = 0; num168 < 50; num168++)
                        {
                            Dust.NewDust(base.position, width, height, 237 + Main.rand.Next(2),
                                2.5f * (float) hitDirection, -2.5f, 0, default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 684, scale);
                        Gore.NewGore(base.position, base.velocity, 685, scale);
                        Gore.NewGore(base.position, base.velocity, 686, scale);
                        Gore.NewGore(base.position, base.velocity, 684 + Main.rand.Next(3), scale);
                    }
                }
                else if (type == 466)
                {
                    if (life > 0)
                    {
                        for (var num169 = 0; (double) num169 < dmg / (double) lifeMax * 100.0; num169++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num170 = 0; num170 < 50; num170++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 656, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 657, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 659, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 658, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 658, scale);
                    }
                }
                else if (type == 468)
                {
                    if (life > 0)
                    {
                        for (var num171 = 0; (double) num171 < dmg / (double) lifeMax * 100.0; num171++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num172 = 0; num172 < 50; num172++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 662, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 663, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 663, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 664, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 664, scale);
                    }
                }
                else if (type == 469)
                {
                    if (life > 0)
                    {
                        for (var num173 = 0; (double) num173 < dmg / (double) lifeMax * 100.0; num173++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num174 = 0; num174 < 50; num174++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 665, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 666, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 666, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 667, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 667, scale);
                    }
                }
                else if (type == 463)
                {
                    if (life > 0)
                    {
                        for (var num175 = 0; (double) num175 < dmg / (double) lifeMax * 100.0; num175++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num176 = 0; num176 < 50; num176++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 653, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 654, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 654, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 655, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 655, scale);
                    }
                }
                else if (type == 461)
                {
                    if (life > 0)
                    {
                        for (var num177 = 0; (double) num177 < dmg / (double) lifeMax * 100.0; num177++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num178 = 0; num178 < 50; num178++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 647, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 648, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 648, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 649, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 649, scale);
                    }
                }
                else if (type == 462)
                {
                    if (life > 0)
                    {
                        for (var num179 = 0; (double) num179 < dmg / (double) lifeMax * 100.0; num179++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num180 = 0; num180 < 50; num180++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 650, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 651, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 651, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 652, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 652, scale);
                    }
                }
                else if (type == 379 || type == 438)
                {
                    if (life > 0)
                    {
                        for (var num181 = 0; (double) num181 < dmg / (double) (lifeMax * 50); num181++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num182 = 0; num182 < 30; num182++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 900, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 901, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 901, scale);
                    }
                }
                else if (type == 439)
                {
                    if (life > 0)
                    {
                        for (var num183 = 0; (double) num183 < dmg / (double) lifeMax * 100.0; num183++)
                        {
                            var num184 = Dust.NewDust(base.position, width, height, 5, 0f, 0f, 0, default(Color), 1.5f);
                            Main.dust[num184].velocity *= 1.5f;
                            Main.dust[num184].noGravity = true;
                        }
                    }
                    else
                    {
                        for (var num185 = 0; num185 < 30; num185++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        for (var num186 = 0; num186 < 10; num186++)
                        {
                            var num187 = Dust.NewDust(base.position, width, height, 16, 0f, 0f, 0, default(Color),
                                1.5f);
                            Main.dust[num187].velocity *= 2f;
                            Main.dust[num187].noGravity = true;
                        }

                        var num188 = Main.rand.Next(1, 4);
                        for (var num189 = 0; num189 < num188; num189++)
                        {
                            var num190 =
                                Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float) (height / 2) - 10f),
                                    new Vector2((float) hitDirection, 0f), Main.rand.Next(11, 14), scale);
                            Main.gore[num190].velocity *= 0.8f;
                        }

                        Gore.NewGore(base.position, base.velocity, 902, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 10f), base.velocity, 903, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 901, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 901, scale);
                    }
                }
                else if (type == 440)
                {
                    if (life <= 0)
                    {
                        for (var num191 = 0; num191 < 10; num191++)
                        {
                            var num192 = Dust.NewDust(base.position, width, height, 16, 0f, 0f, 0, default(Color),
                                1.5f);
                            Main.dust[num192].velocity *= 2f;
                            Main.dust[num192].noGravity = true;
                        }

                        var num193 = Main.rand.Next(1, 4);
                        for (var num194 = 0; num194 < num193; num194++)
                        {
                            var num195 =
                                Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float) (height / 2) - 10f),
                                    new Vector2((float) hitDirection, 0f), Main.rand.Next(11, 14), scale);
                            Main.gore[num195].velocity *= 0.8f;
                        }
                    }
                }
                else if (type >= 454 && type <= 459)
                {
                    if (life > 0)
                    {
                        for (var num196 = 0; (double) num196 < dmg / (double) lifeMax * 50.0; num196++)
                        {
                            var num197 = Dust.NewDust(base.position, width, height, 16, 0f, 0f, 0, default(Color),
                                1.5f);
                            Main.dust[num197].velocity *= 1.5f;
                            Main.dust[num197].noGravity = true;
                        }
                    }
                    else
                    {
                        for (var num198 = 0; num198 < 10; num198++)
                        {
                            var num199 = Dust.NewDust(base.position, width, height, 16, 0f, 0f, 0, default(Color),
                                1.5f);
                            Main.dust[num199].velocity *= 2f;
                            Main.dust[num199].noGravity = true;
                        }

                        var num200 = Main.rand.Next(1, 4);
                        for (var num201 = 0; num201 < num200; num201++)
                        {
                            var num202 =
                                Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float) (height / 2) - 10f),
                                    new Vector2((float) hitDirection, 0f), Main.rand.Next(11, 14), scale);
                            Main.gore[num202].velocity *= 0.8f;
                        }
                    }
                }

                if (type == 372 || type == 373)
                {
                    if (life > 0)
                    {
                        for (var num203 = 0; (double) num203 < dmg / (double) lifeMax * 100.0; num203++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num204 = 0; num204 < 75; num204++)
                        {
                            var num205 = Dust.NewDust(base.Center - Vector2.One * 25f, 50, 50, 5,
                                (float) (2 * hitDirection), -2f, 0, default(Color), 1f);
                            Main.dust[num205].velocity /= 2f;
                        }

                        Gore.NewGore(base.Center, base.velocity * 0.8f, 583, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.8f, 577, 1f);
                        Gore.NewGore(base.Center, base.velocity * 0.9f, 578, 1f);
                        Gore.NewGore(base.Center, base.velocity, 579, 1f);
                    }
                }

                if (type == 371)
                {
                    Main.PlaySound(4, (int) base.position.X, (int) base.position.Y, 3, 1f, 0f);
                    if (life <= 0)
                    {
                        var center2 = base.Center;
                        for (var num206 = 0; num206 < 60; num206++)
                        {
                            var num207 = 25;
                            var vector10 = ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() *
                                               (float) Main.rand.Next(24, 41) / 8f;
                            var num208 = Dust.NewDust(base.Center - Vector2.One * (float) num207, num207 * 2,
                                num207 * 2, 212, 0f, 0f, 0, default(Color), 1f);
                            var dust47 = Main.dust[num208];
                            var vector7 = Vector2.Normalize(dust47.position - base.Center);
                            dust47.position = base.Center + vector7 * 25f * scale;
                            if (num206 < 30)
                            {
                                dust47.velocity = vector7 * dust47.velocity.Length();
                            }
                            else
                            {
                                dust47.velocity = vector7 * (float) Main.rand.Next(45, 91) / 10f;
                            }

                            dust47.color =
                                Main.hslToRgb(
                                    (float) (0.40000000596046448 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f,
                                    0.5f);
                            dust47.color = Color.Lerp(dust47.color, Color.White, 0.3f);
                            dust47.noGravity = true;
                            dust47.scale = 0.7f;
                        }
                    }
                }

                if (type == 370)
                {
                    if (life > 0)
                    {
                        for (var num209 = 0; (double) num209 < dmg / (double) lifeMax * 100.0; num209++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num210 = 0; num210 < 150; num210++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.Center - Vector2.UnitX * 20f * (float) direction, base.velocity, 576, scale);
                        Gore.NewGore(base.Center - Vector2.UnitY * 30f, base.velocity, 574, scale);
                        Gore.NewGore(base.Center, base.velocity, 575, scale);
                        Gore.NewGore(base.Center + Vector2.UnitX * 20f * (float) direction, base.velocity, 573, scale);
                        Gore.NewGore(base.Center - Vector2.UnitY * 30f, base.velocity, 574, scale);
                        Gore.NewGore(base.Center, base.velocity, 575, scale);
                    }
                }
                else if (type == 381)
                {
                    if (life > 0)
                    {
                        for (var num211 = 0; (double) num211 < dmg / (double) (lifeMax * 50); num211++)
                        {
                            Dust.NewDust(base.position, width, height, 227, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num212 = 0; num212 < 30; num212++)
                        {
                            Dust.NewDust(base.position, width, height, 227, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 587, scale);
                        Gore.NewGore(base.position, base.velocity, 590, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 588, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 589, scale);
                    }
                }
                else if (type == 382 || type == 390)
                {
                    if (life > 0)
                    {
                        for (var num213 = 0; (double) num213 < dmg / (double) (lifeMax * 50); num213++)
                        {
                            Dust.NewDust(base.position, width, height, 227, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num214 = 0; num214 < 30; num214++)
                        {
                            Dust.NewDust(base.position, width, height, 227, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 591, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 592, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 593, scale);
                    }
                }
                else if (type == 383)
                {
                    if (life > 0)
                    {
                        for (var num215 = 0; (double) num215 < dmg / (double) (lifeMax * 50); num215++)
                        {
                            Dust.NewDust(base.position, width, height, 227, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num216 = 0; num216 < 30; num216++)
                        {
                            Dust.NewDust(base.position, width, height, 227, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 594, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 595, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 596, scale);
                    }
                }
                else if (type == 384)
                {
                    if (life > 0)
                    {
                        for (var num217 = 0; (double) num217 < dmg / (double) lifeMax * 50.0; num217++)
                        {
                            var num218 = Dust.NewDust(base.position, width, height, 226, (float) (-1 * hitDirection),
                                -1f, 0, default(Color), 1f);
                            Main.dust[num218].position = Vector2.Lerp(Main.dust[num218].position, base.Center, 0.25f);
                            Main.dust[num218].scale = 0.5f;
                        }
                    }
                    else
                    {
                        for (var num219 = 0; num219 < 70; num219++)
                        {
                            var num220 = Dust.NewDust(base.position, width, height, 226, -2.5f * (float) hitDirection,
                                -2.5f, 0, default(Color), 1f);
                            Main.dust[num220].scale = 0.5f;
                        }
                    }
                }
                else if (type == 385)
                {
                    if (life > 0)
                    {
                        for (var num221 = 0; (double) num221 < dmg / (double) (lifeMax * 50); num221++)
                        {
                            Dust.NewDust(base.position, width, height, 227, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num222 = 0; num222 < 30; num222++)
                        {
                            Dust.NewDust(base.position, width, height, 227, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 597, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 598, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 599, scale);
                    }
                }
                else if (type == 386)
                {
                    if (life > 0)
                    {
                        for (var num223 = 0; (double) num223 < dmg / (double) (lifeMax * 50); num223++)
                        {
                            Dust.NewDust(base.position, width, height, 227, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num224 = 0; num224 < 30; num224++)
                        {
                            Dust.NewDust(base.position, width, height, 227, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 600, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 601, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 602, scale);
                    }
                }

                if (type == 387)
                {
                    if (life > 0)
                    {
                        for (var num225 = 0; (double) num225 < dmg / (double) lifeMax * 20.0; num225++)
                        {
                            var num226 = Dust.NewDust(base.position, width, height, 226, (float) (-1 * hitDirection),
                                -1f, 0, default(Color), 1f);
                            Main.dust[num226].position = Vector2.Lerp(Main.dust[num226].position, base.Center, 0.25f);
                            Main.dust[num226].scale = 0.5f;
                        }
                    }
                    else
                    {
                        for (var num227 = 0; num227 < 30; num227++)
                        {
                            var num228 = Dust.NewDust(base.position, width, height, 226, -1.5f * (float) hitDirection,
                                -1.5f, 0, default(Color), 1f);
                            Main.dust[num228].scale = 0.5f;
                        }

                        Gore.NewGore(base.position, base.velocity, 603, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 603, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 604, scale);
                    }
                }

                if (type == 520)
                {
                    if (life > 0)
                    {
                        for (var num229 = 0; (double) num229 < dmg / (double) lifeMax * 20.0; num229++)
                        {
                            var num230 = Dust.NewDust(base.position, width, height, 226, (float) (-1 * hitDirection),
                                -1f, 0, default(Color), 1f);
                            Main.dust[num230].position = Vector2.Lerp(Main.dust[num230].position, base.Center, 0.25f);
                            Main.dust[num230].scale = 0.5f;
                        }
                    }
                    else
                    {
                        for (var num231 = 0; num231 < 30; num231++)
                        {
                            var num232 = Dust.NewDust(base.position, width, height, 226, -1.5f * (float) hitDirection,
                                -1.5f, 0, default(Color), 1f);
                            Main.dust[num232].scale = 0.5f;
                        }

                        Gore.NewGore(base.position, base.velocity, 851, scale);
                        Gore.NewGore(base.position, base.velocity, 852, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 80f), base.velocity, 848, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 80f), base.velocity, 849, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 80f), base.velocity, 850, scale);
                    }
                }
                else if (type == 389)
                {
                    if (life > 0)
                    {
                        for (var num233 = 0; (double) num233 < dmg / (double) (lifeMax * 50); num233++)
                        {
                            Dust.NewDust(base.position, width, height, 227, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num234 = 0; num234 < 30; num234++)
                        {
                            Dust.NewDust(base.position, width, height, 227, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 904, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 905, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 906, scale);
                    }
                }
                else if (type == 388)
                {
                    if (life > 0)
                    {
                        for (var num235 = 0; (double) num235 < dmg / (double) (lifeMax * 50); num235++)
                        {
                            var num236 = Dust.NewDust(base.position, width, height, 226, (float) (-1 * hitDirection),
                                -1f, 0, default(Color), 1f);
                            Main.dust[num236].position = Vector2.Lerp(Main.dust[num236].position, base.Center, 0.25f);
                            Main.dust[num236].scale = 0.5f;
                        }
                    }
                    else
                    {
                        for (var num237 = 0; num237 < 10; num237++)
                        {
                            var num238 = Dust.NewDust(base.position, width, height, 226, -2.5f * (float) hitDirection,
                                -2.5f, 0, default(Color), 1f);
                            Main.dust[num238].scale = 0.5f;
                        }

                        var velocity2 = base.velocity;
                        if (ai[0] == 3f)
                        {
                            velocity2 = rotation.ToRotationVector2();
                            if (spriteDirection == 1)
                            {
                                velocity2.X *= -1f;
                            }

                            velocity2 *= 5f;
                        }

                        Gore.NewGore(base.Center - new Vector2(10f, 10f), velocity2, 605, scale);
                        Gore.NewGore(base.Center - new Vector2(10f, 10f), velocity2, 606, scale);
                    }
                }
                else if (type == 399)
                {
                    if (life > 0)
                    {
                        for (var num239 = 0; (double) num239 < dmg / (double) (lifeMax * 50); num239++)
                        {
                            var num240 = Dust.NewDust(base.position, width, height, 226, (float) (-1 * hitDirection),
                                -1f, 0, default(Color), 1f);
                            Main.dust[num240].position = Vector2.Lerp(Main.dust[num240].position, base.Center, 0.25f);
                            Main.dust[num240].scale = 0.5f;
                        }
                    }
                    else
                    {
                        for (var num241 = 0; num241 < 10; num241++)
                        {
                            var num242 = Dust.NewDust(base.position, width, height, 226, -2.5f * (float) hitDirection,
                                -2.5f, 0, default(Color), 1f);
                            Main.dust[num242].scale = 0.5f;
                        }

                        var velocity3 = base.velocity;
                        if (ai[0] == 3f)
                        {
                            velocity3 = rotation.ToRotationVector2();
                            if (spriteDirection == 1)
                            {
                                velocity3.X *= -1f;
                            }

                            velocity3 *= 5f;
                        }

                        Gore.NewGore(base.Center - new Vector2(10f, 10f), velocity3, 898, scale);
                        Gore.NewGore(base.Center - new Vector2(10f, 10f), velocity3, 899, scale);
                    }
                }
                else if (type == 391)
                {
                    if (life > 0)
                    {
                        for (var num243 = 0; (double) num243 < dmg / (double) (lifeMax * 50); num243++)
                        {
                            Dust.NewDust(base.position, width, height, 227, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num244 = 0; num244 < 30; num244++)
                        {
                            Dust.NewDust(base.position, width, height, 227, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position + Vector2.UnitX * (float) width / 2f, base.velocity, 607, scale);
                        Gore.NewGore(base.position + Vector2.UnitX * (float) width / 2f, base.velocity, 608, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 609, scale);
                    }
                }

                if (type == 392 || type == 394 || type == 393 || type == 395)
                {
                    if (life > 0)
                    {
                        for (var num245 = 0; (double) num245 < dmg / (double) lifeMax * 20.0; num245++)
                        {
                            var num246 = Dust.NewDust(base.position, width, height, 228, (float) (-1 * hitDirection),
                                -1f, 0, default(Color), 1f);
                            Main.dust[num246].position = Vector2.Lerp(Main.dust[num246].position, base.Center, 0.25f);
                            Main.dust[num246].scale = 0.5f;
                        }
                    }
                    else
                    {
                        for (var num247 = 0; num247 < 30; num247++)
                        {
                            var num248 = Dust.NewDust(base.position, width, height, 228, -1.5f * (float) hitDirection,
                                -1.5f, 0, default(Color), 1f);
                            Main.dust[num248].scale = 0.5f;
                        }

                        var center = base.Center;
                        if (type == 395)
                        {
                            Gore.NewGore(center + new Vector2(-20f, -10f), base.velocity, 610, scale);
                            Gore.NewGore(center + new Vector2(20f, -10f), base.velocity, 611, scale);
                            Gore.NewGore(center + new Vector2(-50f, 0f), base.velocity, 612, scale);
                            Gore.NewGore(center + new Vector2(50f, 0f), base.velocity, 613, scale);
                            Gore.NewGore(center + new Vector2(-60f, 10f), base.velocity, 614, scale);
                            Gore.NewGore(center + new Vector2(0f, 30f), base.velocity, 615, scale);
                        }

                        if (type == 393)
                        {
                            Gore.NewGore(center, base.velocity, 616, scale);
                        }

                        if (type == 394)
                        {
                            Gore.NewGore(center, base.velocity, 617, scale);
                        }
                    }
                }
                else if (type == 482 || type == 483)
                {
                    if (life > 0)
                    {
                        for (var num249 = 0; (double) num249 < dmg / (double) (lifeMax * 50); num249++)
                        {
                            Dust.NewDust(base.position, width, height, 240, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num250 = 0; num250 < 30; num250++)
                        {
                            Dust.NewDust(base.position, width, height, 240, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        if (type == 482)
                        {
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 718, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 10f), base.velocity, 719,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 720,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 40f), base.velocity, 721,
                                scale);
                        }
                    }
                }

                if ((type >= 442 && type <= 448) || type == 539)
                {
                    if (life > 0)
                    {
                        for (var num251 = 0; num251 < 10; num251++)
                        {
                            Dust.NewDust(base.position, width, height, Main.rand.Next(232, 234), (float) hitDirection,
                                -1f, 0, default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num252 = 0; num252 < 20; num252++)
                        {
                            Dust.NewDust(base.position, width, height, Main.rand.Next(232, 234),
                                (float) (2 * hitDirection), -2f, 0, default(Color), 1f);
                        }
                    }
                }

                if (type == 333 || type == 334 || type == 335 || type == 336)
                {
                    var newColor = Color.White;
                    if (type == 333)
                    {
                        newColor = new Color(73, 147, 221, 200);
                    }

                    if (type == 334)
                    {
                        newColor = new Color(24, 146, 79, 200);
                    }

                    if (type == 335)
                    {
                        newColor = new Color(194, 46, 50, 200);
                    }

                    if (type == 336)
                    {
                        newColor = new Color(228, 200, 1, 200);
                    }

                    if (life > 0)
                    {
                        for (var num253 = 0; (double) num253 < dmg / (double) lifeMax * 100.0; num253++)
                        {
                            Dust.NewDust(base.position, width, height, 4, (float) hitDirection, -1f, 150, newColor, 1f);
                        }
                    }
                    else
                    {
                        for (var num254 = 0; num254 < 50; num254++)
                        {
                            Dust.NewDust(base.position, width, height, 4, (float) (2 * hitDirection), -2f, 150,
                                newColor, 1f);
                        }
                    }
                }

                if (type == 537)
                {
                    if (life > 0)
                    {
                        for (var num255 = 0; (double) num255 < dmg / (double) lifeMax * 100.0; num255++)
                        {
                            Dust.NewDust(base.position, width, height, 32, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num256 = 0; num256 < 50; num256++)
                        {
                            Dust.NewDust(base.position, width, height, 32, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }
                    }
                }

                if (type == 1 || type == 16 || type == 71 || type == 244 || type == 535)
                {
                    if (life > 0)
                    {
                        for (var num257 = 0; (double) num257 < dmg / (double) lifeMax * 100.0; num257++)
                        {
                            Dust.NewDust(base.position, width, height, 4, (float) hitDirection, -1f, alpha, this.color,
                                1f);
                        }
                    }
                    else
                    {
                        for (var num258 = 0; num258 < 50; num258++)
                        {
                            Dust.NewDust(base.position, width, height, 4, (float) (2 * hitDirection), -2f, alpha,
                                this.color, 1f);
                        }

                        if (Main.netMode != 1 && type == 16)
                        {
                            var num259 = Main.rand.Next(2) + 2;
                            for (var num260 = 0; num260 < num259; num260++)
                            {
                                var num261 = NewNPC((int) (base.position.X + (float) (width / 2)),
                                    (int) (base.position.Y + (float) height), 1, 0, 0f, 0f, 0f, 0f, 255);
                                Main.npc[num261].SetDefaults(-5, -1f);
                                Main.npc[num261].velocity.X = base.velocity.X * 2f;
                                Main.npc[num261].velocity.Y = base.velocity.Y;
                                Main.npc[num261].velocity.X +=
                                    (float) Main.rand.Next(-20, 20) * 0.1f + (float) (num260 * direction) * 0.3f;
                                Main.npc[num261].velocity.Y -= (float) Main.rand.Next(0, 10) * 0.1f + (float) num260;
                                Main.npc[num261].ai[0] = (float) (-1000 * Main.rand.Next(3));
                                if (Main.netMode == 2 && num261 < 200)
                                {
                                    NetMessage.SendData(23, -1, -1, null, num261, 0f, 0f, 0f, 0, 0, 0);
                                }
                            }
                        }
                    }
                }

                if (type == 352)
                {
                    if (life > 0)
                    {
                        for (var num262 = 0; (double) num262 < dmg / (double) lifeMax * 100.0; num262++)
                        {
                            var num263 = Dust.NewDust(base.position, width, height, 67, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            Main.dust[num263].noGravity = true;
                        }
                    }
                    else
                    {
                        for (var num264 = 0; num264 < 60; num264++)
                        {
                            var num265 = Dust.NewDust(base.position, width, height, 67, (float) (2 * hitDirection), -2f,
                                0, default(Color), 1f);
                            Main.dust[num265].noGravity = true;
                        }
                    }
                }

                if (type >= 305 && type <= 314)
                {
                    if (life > 0)
                    {
                        for (var num266 = 0; (double) num266 < dmg / (double) lifeMax * 100.0; num266++)
                        {
                            Dust.NewDust(base.position, width, height, 194, (float) hitDirection, -1f, 0,
                                default(Color), 1.1f);
                        }
                    }
                    else
                    {
                        for (var num267 = 0; num267 < 60; num267++)
                        {
                            Dust.NewDust(base.position, width, height, 194, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1.1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 441, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 442, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 443, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 444, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 445, scale);
                    }
                }

                if (type == 327)
                {
                    if (life > 0)
                    {
                        for (var num268 = 0; (double) num268 < dmg / (double) lifeMax * 100.0; num268++)
                        {
                            Dust.NewDust(base.position, width, height, 189, (float) hitDirection, -1f, 0,
                                default(Color), 1.1f);
                        }
                    }
                    else
                    {
                        for (var num269 = 0; num269 < 60; num269++)
                        {
                            Dust.NewDust(base.position, width, height, 189, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1.1f);
                        }

                        for (var num270 = 476; num270 <= 484; num270++)
                        {
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity * 0f, num270,
                                scale);
                        }
                    }
                }

                if (type == 325)
                {
                    if (life > 0)
                    {
                        for (var num271 = 0; (double) num271 < dmg / (double) lifeMax * 100.0; num271++)
                        {
                            Dust.NewDust(base.position, width, height, 191, (float) hitDirection, -1f, 0,
                                default(Color), 1.1f);
                        }
                    }
                    else
                    {
                        for (var num272 = 0; num272 < 60; num272++)
                        {
                            Dust.NewDust(base.position, width, height, 191, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1.1f);
                        }

                        for (var num273 = 469; num273 <= 475; num273++)
                        {
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity * 0f, num273,
                                scale);
                        }
                    }
                }

                if (type == 345 && life <= 0)
                {
                    Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity * 0f, 513, scale);
                    Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity * 0f, 514, scale);
                    Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity * 0f, 514, scale);
                    Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity * 0f, 515, scale);
                    Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity * 0f, 516, scale);
                }

                if (type == 344)
                {
                    if (life > 0)
                    {
                        for (var num274 = 0; (double) num274 < dmg / (double) lifeMax * 100.0; num274++)
                        {
                            Dust.NewDust(base.position, width, height, 196, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num275 = 0; num275 < 60; num275++)
                        {
                            Dust.NewDust(base.position, width, height, 196, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        for (var num276 = 508; num276 <= 512; num276++)
                        {
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity * 0f, num276,
                                scale);
                        }

                        for (var num277 = 509; num277 <= 512; num277++)
                        {
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity * 0f, num277,
                                scale);
                        }
                    }
                }

                if (type == 326)
                {
                    if (life > 0)
                    {
                        for (var num278 = 0; (double) num278 < dmg / (double) lifeMax * 100.0; num278++)
                        {
                            Dust.NewDust(base.position, width, height, 191, (float) hitDirection, -1f, 0,
                                default(Color), 1.1f);
                        }
                    }
                    else
                    {
                        for (var num279 = 0; num279 < 60; num279++)
                        {
                            Dust.NewDust(base.position, width, height, 191, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1.1f);
                        }
                    }
                }

                if (type == 304)
                {
                    if (life > 0)
                    {
                        for (var num280 = 0; (double) num280 < dmg / (double) lifeMax * 100.0; num280++)
                        {
                            Dust.NewDust(base.position, width, height, 189, (float) hitDirection, -1f, 0,
                                default(Color), 1.3f);
                        }
                    }
                    else
                    {
                        for (var num281 = 0; num281 < 60; num281++)
                        {
                            Dust.NewDust(base.position, width, height, 189, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1.3f);
                        }
                    }
                }

                if (type == 302)
                {
                    if (life > 0)
                    {
                        for (var num282 = 0; (double) num282 < dmg / (double) lifeMax * 100.0; num282++)
                        {
                            Dust.NewDust(base.position, width, height, 192, (float) hitDirection, -1f, 100,
                                new Color(100, 100, 100, 100), 1f);
                        }
                    }
                    else
                    {
                        for (var num283 = 0; num283 < 50; num283++)
                        {
                            Dust.NewDust(base.position, width, height, 192, (float) (2 * hitDirection), -2f, 100,
                                new Color(100, 100, 100, 100), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 440, scale);
                    }
                }

                if (type >= 245 && type <= 249)
                {
                    if (life > 0)
                    {
                        for (var num284 = 0; (double) num284 < dmg / (double) lifeMax * 100.0; num284++)
                        {
                            Dust.NewDust(base.position, width, height, 148, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }
                    }
                    else if (type == 246)
                    {
                        if (Main.netMode != 1)
                        {
                            NewNPC((int) base.Center.X, (int) base.position.Y + height, 249, whoAmI, 0f, 0f, 0f, 0f,
                                255);
                        }
                    }
                    else
                    {
                        for (var num285 = 0; num285 < 50; num285++)
                        {
                            Dust.NewDust(base.position, width, height, 148, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        if (type == 245)
                        {
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 368, scale);
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 370, scale);
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 368, scale);
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 370, scale);
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 368, scale);
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 370, scale);
                            Gore.NewGore(base.position, base.velocity, 360, scale);
                            Gore.NewGore(base.position, base.velocity, 361, scale);
                            Gore.NewGore(base.position, base.velocity, 362, scale);
                            Gore.NewGore(base.position, base.velocity, 363, scale);
                            Gore.NewGore(base.position, base.velocity, 364, scale);
                            Gore.NewGore(base.position, base.velocity, 367, scale);
                            Gore.NewGore(base.position, base.velocity, 366, scale);
                        }
                        else if (type == 249)
                        {
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 368, scale);
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 370, scale);
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 368, scale);
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 370, scale);
                            Gore.NewGore(base.position, base.velocity, 365, scale);
                            Gore.NewGore(base.position, base.velocity, 363, scale);
                            Gore.NewGore(base.position, base.velocity, 362, scale);
                        }
                        else
                        {
                            Gore.NewGore(base.position, base.velocity, 369, scale);
                            Gore.NewGore(base.position, base.velocity, 371, scale);
                            Gore.NewGore(base.position, base.velocity, 370, scale);
                        }
                    }
                }

                if (type == 288 && life <= 0)
                {
                    for (var num286 = 0; num286 < 50; num286++)
                    {
                        var num287 = Dust.NewDust(base.position, width, height, 180, base.velocity.X, base.velocity.Y,
                            0, default(Color), 1f);
                        Main.dust[num287].velocity *= 2f;
                        Main.dust[num287].noGravity = true;
                        Main.dust[num287].scale = 1.4f;
                    }
                }

                if (type == 204)
                {
                    if (life > 0)
                    {
                        for (var num288 = 0; (double) num288 < dmg / (double) lifeMax * 100.0; num288++)
                        {
                            Dust.NewDust(base.position, width, height, 4, (float) hitDirection, -1f, 100,
                                new Color(149, 208, 104), 1f);
                        }
                    }
                    else
                    {
                        for (var num289 = 0; num289 < 50; num289++)
                        {
                            Dust.NewDust(base.position, width, height, 4, (float) (2 * hitDirection), -2f, 100,
                                new Color(149, 208, 104), 1f);
                        }
                    }
                }

                if (type == 225)
                {
                    if (life > 0)
                    {
                        for (var num290 = 0; (double) num290 < dmg / (double) lifeMax * 100.0; num290++)
                        {
                            Dust.NewDust(base.position, width, height, 4, (float) hitDirection, -1f, 100,
                                new Color(0, 80, 255, 100), 1f);
                        }
                    }
                    else
                    {
                        for (var num291 = 0; num291 < 50; num291++)
                        {
                            Dust.NewDust(base.position, width, height, 4, (float) (2 * hitDirection), -2f, 100,
                                new Color(0, 80, 255, 100), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 314, scale);
                    }
                }

                if (type == 243)
                {
                    if (life > 0)
                    {
                        for (var num292 = 0; (double) num292 < dmg / (double) lifeMax * 150.0; num292++)
                        {
                            Dust.NewDust(base.position, width, height, 161, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num293 = 0; num293 < 200; num293++)
                        {
                            Dust.NewDust(base.position, width, height, 161, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 359, scale);
                    }
                }

                if ((type == 210 || type == 211) && life <= 0)
                {
                    for (var num294 = 0; num294 < 6; num294++)
                    {
                        var num295 = Dust.NewDust(base.position, width, height, 150, (float) (2 * hitDirection), -2f, 0,
                            default(Color), 1f);
                        if (Main.rand.Next(2) == 0)
                        {
                            Main.dust[num295].noGravity = true;
                            Main.dust[num295].scale = 1.5f;
                        }
                        else
                        {
                            Main.dust[num295].scale = 0.8f;
                        }
                    }
                }

                if ((type == 355 || type == 358) && life <= 0)
                {
                    for (var num296 = 0; num296 < 6; num296++)
                    {
                        var num297 = Dust.NewDust(base.position, width, height, 198, (float) (2 * hitDirection), -2f, 0,
                            default(Color), 1f);
                        if (Main.rand.Next(2) == 0)
                        {
                            Main.dust[num297].noGravity = true;
                            Main.dust[num297].scale = 1.5f * scale;
                        }
                        else
                        {
                            Main.dust[num297].scale = 0.8f * scale;
                        }
                    }
                }

                if (type == 356 && life <= 0)
                {
                    for (var num298 = 0; num298 < 6; num298++)
                    {
                        var num299 = Dust.NewDust(base.position, width, height, 199, (float) (2 * hitDirection), -2f, 0,
                            default(Color), 1f);
                        if (Main.rand.Next(2) == 0)
                        {
                            Main.dust[num299].noGravity = true;
                            Main.dust[num299].scale = 1.5f * scale;
                        }
                        else
                        {
                            Main.dust[num299].scale = 0.8f * scale;
                        }
                    }
                }

                if (type >= 484 && type <= 487 && life <= 0)
                {
                    for (var num300 = 0; num300 < 6; num300++)
                    {
                        var num301 = Dust.NewDust(base.position, width, height, 248 + type - 484,
                            (float) (2 * hitDirection), -2f, 0, default(Color), 1f);
                        if (Main.rand.Next(2) == 0)
                        {
                            Main.dust[num301].noGravity = true;
                            Main.dust[num301].scale = 1.2f * scale;
                        }
                        else
                        {
                            Main.dust[num301].scale = 0.7f * scale;
                        }
                    }
                }

                if (type == 357 && life <= 0)
                {
                    for (var num302 = 0; num302 < 6; num302++)
                    {
                        var num303 = Dust.NewDust(base.position, width, height, 200, (float) (2 * hitDirection), -2f, 0,
                            default(Color), 1f);
                        if (Main.rand.Next(2) == 0)
                        {
                            Main.dust[num303].noGravity = true;
                            Main.dust[num303].scale = 1.2f * scale;
                        }
                        else
                        {
                            Main.dust[num303].scale = 0.7f * scale;
                        }
                    }
                }

                if (type == 377 && life <= 0)
                {
                    for (var num304 = 0; num304 < 6; num304++)
                    {
                        var num305 = Dust.NewDust(base.position, width, height, 40, (float) (2 * hitDirection), -2f, 0,
                            default(Color), 1f);
                        if (Main.rand.Next(2) == 0)
                        {
                            Main.dust[num305].noGravity = true;
                            Main.dust[num305].scale = 1.2f * scale;
                        }
                        else
                        {
                            Main.dust[num305].scale = 0.7f * scale;
                        }
                    }
                }

                if (type == 374 || type == 375)
                {
                    for (var num306 = 0; num306 < 6; num306++)
                    {
                        var num307 = Dust.NewDust(base.position, width, height, 165, 0f, 0f, 50, default(Color), 1.5f);
                        Main.dust[num307].velocity *= 2f;
                        Main.dust[num307].noGravity = true;
                    }
                }

                if (type == 359)
                {
                    if (life <= 0)
                    {
                        for (var num308 = 0; num308 < 6; num308++)
                        {
                            var num309 = Dust.NewDust(base.position, width, height, 201, (float) (2 * hitDirection),
                                -2f, 0, default(Color), 1f);
                            if (Main.rand.Next(2) == 0)
                            {
                                Main.dust[num309].noGravity = true;
                                Main.dust[num309].scale = 1.2f * scale;
                            }
                            else
                            {
                                Main.dust[num309].scale = 0.7f * scale;
                            }
                        }
                    }

                    Gore.NewGore(base.position, base.velocity, 547, scale);
                    Gore.NewGore(base.position, base.velocity, 548, scale);
                }

                if (type == 360)
                {
                    if (life <= 0)
                    {
                        for (var num310 = 0; num310 < 6; num310++)
                        {
                            var num311 = Dust.NewDust(base.position, width, height, 202, (float) (2 * hitDirection),
                                -2f, 0, default(Color), 1f);
                            if (Main.rand.Next(2) == 0)
                            {
                                Main.dust[num311].noGravity = true;
                                Main.dust[num311].scale = 1.2f * scale;
                            }
                            else
                            {
                                Main.dust[num311].scale = 0.7f * scale;
                            }
                        }
                    }

                    Gore.NewGore(base.position, base.velocity, 549, scale);
                    Gore.NewGore(base.position, base.velocity, 550, scale);
                }

                if (type == 154)
                {
                    if (life > 0)
                    {
                        for (var num312 = 0; (double) num312 < dmg / (double) lifeMax * 50.0; num312++)
                        {
                            var num313 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67,
                                base.velocity.X, base.velocity.Y, 90, default(Color), 1.5f);
                            Main.dust[num313].noGravity = true;
                            Main.dust[num313].velocity *= 0.2f;
                        }
                    }
                    else
                    {
                        for (var num314 = 0; num314 < 50; num314++)
                        {
                            var num315 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67,
                                base.velocity.X, base.velocity.Y, 90, default(Color), 1.5f);
                            Main.dust[num315].noGravity = true;
                            Main.dust[num315].velocity *= 0.2f;
                        }

                        Gore.NewGore(base.position, base.velocity, 180, scale);
                    }
                }

                if (type == 147 || type == 184)
                {
                    if (life > 0)
                    {
                        for (var num316 = 0; (double) num316 < dmg / (double) lifeMax * 50.0; num316++)
                        {
                            var num317 = Dust.NewDust(base.position, width, height, 76, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            Main.dust[num317].noGravity = true;
                            Dust.NewDust(base.position, width, height, 4, (float) hitDirection, -1f, 100,
                                new Color(97, 200, 255, 100), 1f);
                        }
                    }
                    else
                    {
                        for (var num318 = 0; num318 < 30; num318++)
                        {
                            var num319 = Dust.NewDust(base.position, width, height, 76, (float) hitDirection, -2f, 0,
                                default(Color), 1f);
                            Main.dust[num319].noGravity = true;
                            Dust.NewDust(base.position, width, height, 4, (float) hitDirection, -2f, 100,
                                new Color(97, 200, 255, 100), 1f);
                        }
                    }
                }

                if (type == 143 || type == 144 || type == 145)
                {
                    if (life > 0)
                    {
                        for (var num320 = 0; (double) num320 < dmg / (double) lifeMax * 100.0; num320++)
                        {
                            var num321 = Dust.NewDust(base.position, width, height, 76, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            Main.dust[num321].noGravity = true;
                        }
                    }
                    else
                    {
                        for (var num322 = 0; num322 < 50; num322++)
                        {
                            var num323 = Dust.NewDust(base.position, width, height, 76, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            Main.dust[num323].noGravity = true;
                            Main.dust[num323].scale *= 1.2f;
                        }
                    }
                }

                if (type == 141)
                {
                    if (life > 0)
                    {
                        for (var num324 = 0; (double) num324 < dmg / (double) lifeMax * 100.0; num324++)
                        {
                            Dust.NewDust(base.position, width, height, 4, (float) hitDirection, -1f, alpha,
                                new Color(210, 230, 140), 1f);
                        }
                    }
                    else
                    {
                        for (var num325 = 0; num325 < 50; num325++)
                        {
                            Dust.NewDust(base.position, width, height, 4, (float) (2 * hitDirection), -2f, alpha,
                                new Color(210, 230, 140), 1f);
                        }
                    }
                }

                if (type == 112)
                {
                    for (var num326 = 0; num326 < 20; num326++)
                    {
                        var num327 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 18,
                            0f, 0f, 100, default(Color), 2f);
                        if (Main.rand.Next(2) == 0)
                        {
                            Main.dust[num327].scale *= 0.6f;
                        }
                        else
                        {
                            Main.dust[num327].velocity *= 1.4f;
                            Main.dust[num327].noGravity = true;
                        }
                    }
                }

                if (type == 183)
                {
                    if (life > 0)
                    {
                        for (var num328 = 0; (double) num328 < dmg / (double) lifeMax * 100.0; num328++)
                        {
                            Dust.NewDust(base.position, width, height, 136, 0f, 0f, alpha, this.color, 1f);
                        }
                    }
                    else
                    {
                        for (var num329 = 0; num329 < 50; num329++)
                        {
                            var num330 = Dust.NewDust(base.position, width, height, 136, (float) hitDirection, 0f,
                                alpha, this.color, 1f);
                            Main.dust[num330].velocity *= 2f;
                        }
                    }
                }

                if (type == 81 || type == 121)
                {
                    if (life > 0)
                    {
                        for (var num331 = 0; (double) num331 < dmg / (double) lifeMax * 100.0; num331++)
                        {
                            Dust.NewDust(base.position, width, height, 14, 0f, 0f, alpha, this.color, 1f);
                        }
                    }
                    else
                    {
                        for (var num332 = 0; num332 < 50; num332++)
                        {
                            var num333 = Dust.NewDust(base.position, width, height, 14, (float) hitDirection, 0f, alpha,
                                this.color, 1f);
                            Main.dust[num333].velocity *= 2f;
                        }

                        if (Main.netMode != 1)
                        {
                            if (type == 121)
                            {
                                var num334 = NewNPC((int) (base.position.X + (float) (width / 2)),
                                    (int) (base.position.Y + (float) height), 81, 0, 0f, 0f, 0f, 0f, 255);
                                Main.npc[num334].SetDefaults(-2, -1f);
                                Main.npc[num334].velocity.X = base.velocity.X;
                                Main.npc[num334].velocity.Y = base.velocity.Y;
                                Gore.NewGore(base.position, base.velocity, 94, scale);
                                if (Main.netMode == 2 && num334 < 200)
                                {
                                    NetMessage.SendData(23, -1, -1, null, num334, 0f, 0f, 0f, 0, 0, 0);
                                }
                            }
                            else if (scale >= 1f)
                            {
                                var num335 = Main.rand.Next(2) + 2;
                                for (var num336 = 0; num336 < num335; num336++)
                                {
                                    var num337 = NewNPC((int) (base.position.X + (float) (width / 2)),
                                        (int) (base.position.Y + (float) height), 1, 0, 0f, 0f, 0f, 0f, 255);
                                    Main.npc[num337].SetDefaults(-1, -1f);
                                    Main.npc[num337].velocity.X = base.velocity.X * 3f;
                                    Main.npc[num337].velocity.Y = base.velocity.Y;
                                    Main.npc[num337].velocity.X +=
                                        (float) Main.rand.Next(-10, 10) * 0.1f + (float) (num336 * direction) * 0.3f;
                                    Main.npc[num337].velocity.Y -=
                                        (float) Main.rand.Next(0, 10) * 0.1f + (float) num336;
                                    Main.npc[num337].ai[1] = (float) num336;
                                    if (Main.netMode == 2 && num337 < 200)
                                    {
                                        NetMessage.SendData(23, -1, -1, null, num337, 0f, 0f, 0f, 0, 0, 0);
                                    }
                                }
                            }
                        }
                    }
                }

                if (type == 120 || type == 137 || type == 138)
                {
                    if (life > 0)
                    {
                        for (var num338 = 0; (double) num338 < dmg / (double) lifeMax * 50.0; num338++)
                        {
                            var num339 = Dust.NewDust(base.position, width, height, 71, 0f, 0f, 200, default(Color),
                                1f);
                            Main.dust[num339].velocity *= 1.5f;
                        }
                    }
                    else
                    {
                        for (var num340 = 0; num340 < 50; num340++)
                        {
                            var num341 = Dust.NewDust(base.position, width, height, 71, (float) hitDirection, 0f, 200,
                                default(Color), 1f);
                            Main.dust[num341].velocity *= 1.5f;
                        }
                    }
                }

                if (type == 122)
                {
                    if (life > 0)
                    {
                        for (var num342 = 0; (double) num342 < dmg / (double) lifeMax * 50.0; num342++)
                        {
                            var num343 = Dust.NewDust(base.position, width, height, 72, 0f, 0f, 200, default(Color),
                                1f);
                            Main.dust[num343].velocity *= 1.5f;
                        }
                    }
                    else
                    {
                        for (var num344 = 0; num344 < 50; num344++)
                        {
                            var num345 = Dust.NewDust(base.position, width, height, 72, (float) hitDirection, 0f, 200,
                                default(Color), 1f);
                            Main.dust[num345].velocity *= 1.5f;
                        }
                    }
                }

                if (type == 75)
                {
                    if (life > 0)
                    {
                        for (var num346 = 0; (double) num346 < dmg / (double) lifeMax * 50.0; num346++)
                        {
                            Dust.NewDust(base.position, width, height, 55, 0f, 0f, 200, this.color, 1f);
                        }
                    }
                    else
                    {
                        for (var num347 = 0; num347 < 50; num347++)
                        {
                            var num348 = Dust.NewDust(base.position, width, height, 55, (float) hitDirection, 0f, 200,
                                this.color, 1f);
                            Main.dust[num348].velocity *= 2f;
                        }
                    }
                }

                if (type == 63 || type == 64 || type == 103)
                {
                    var newColor2 = new Color(50, 120, 255, 100);
                    if (type == 64)
                    {
                        newColor2 = new Color(225, 70, 140, 100);
                    }

                    if (type == 103)
                    {
                        newColor2 = new Color(70, 225, 140, 100);
                    }

                    if (life > 0)
                    {
                        for (var num349 = 0; (double) num349 < dmg / (double) lifeMax * 50.0; num349++)
                        {
                            Dust.NewDust(base.position, width, height, 4, (float) hitDirection, -1f, 0, newColor2, 1f);
                        }
                    }
                    else
                    {
                        for (var num350 = 0; num350 < 25; num350++)
                        {
                            Dust.NewDust(base.position, width, height, 4, (float) (2 * hitDirection), -2f, 0, newColor2,
                                1f);
                        }
                    }
                }
                else if (type == 59 || type == 60 || type == 151)
                {
                    if (life > 0)
                    {
                        for (var num351 = 0; (double) num351 < dmg / (double) lifeMax * 80.0; num351++)
                        {
                            var num352 = Dust.NewDust(base.position, width, height, 6, (float) (hitDirection * 2), -1f,
                                alpha, default(Color), 1.5f);
                            if (Main.rand.Next(8) != 0)
                            {
                                Main.dust[num352].noGravity = true;
                            }
                        }
                    }
                    else
                    {
                        for (var num353 = 0; num353 < 40; num353++)
                        {
                            var num354 = Dust.NewDust(base.position, width, height, 6, (float) (hitDirection * 2), -1f,
                                alpha, default(Color), 1.5f);
                            if (Main.rand.Next(8) != 0)
                            {
                                Main.dust[num354].noGravity = true;
                            }
                        }

                        if (Main.expertMode && type == 59 && Main.netMode != 1)
                        {
                            try
                            {
                                var num355 = (int) (base.Center.X / 16f);
                                var num356 = (int) (base.Center.Y / 16f);
                                if (!WorldGen.SolidTile(num355, num356) && Main.tile[num355, num356].liquid == 0)
                                {
                                    Main.tile[num355, num356].liquid = (byte) Main.rand.Next(50, 150);
                                    Main.tile[num355, num356].lava(true);
                                    Main.tile[num355, num356].honey(false);
                                    WorldGen.SquareTileFrame(num355, num356, true);
                                }
                            }
                            catch
                            {
                            }
                        }
                    }
                }
                else if (type == 50)
                {
                    if (life > 0)
                    {
                        for (var num357 = 0; (double) num357 < dmg / (double) lifeMax * 300.0; num357++)
                        {
                            Dust.NewDust(base.position, width, height, 4, (float) hitDirection, -1f, 175,
                                new Color(0, 80, 255, 100), 1f);
                        }
                    }
                    else
                    {
                        for (var num358 = 0; num358 < 200; num358++)
                        {
                            Dust.NewDust(base.position, width, height, 4, (float) (2 * hitDirection), -2f, 175,
                                new Color(0, 80, 255, 100), 1f);
                        }

                        Gore.NewGore(base.Center + new Vector2(-40f, (float) (-height / 2)), base.velocity, 734, 1f);
                        if (Main.netMode != 1)
                        {
                            var num359 = Main.rand.Next(4) + 4;
                            for (var num360 = 0; num360 < num359; num360++)
                            {
                                var x = (int) (base.position.X + (float) Main.rand.Next(width - 32));
                                var y = (int) (base.position.Y + (float) Main.rand.Next(height - 32));
                                var num361 = NewNPC(x, y, 1, 0, 0f, 0f, 0f, 0f, 255);
                                Main.npc[num361].SetDefaults(1, -1f);
                                Main.npc[num361].velocity.X = (float) Main.rand.Next(-15, 16) * 0.1f;
                                Main.npc[num361].velocity.Y = (float) Main.rand.Next(-30, 1) * 0.1f;
                                Main.npc[num361].ai[0] = (float) (-1000 * Main.rand.Next(3));
                                Main.npc[num361].ai[1] = 0f;
                                if (Main.netMode == 2 && num361 < 200)
                                {
                                    NetMessage.SendData(23, -1, -1, null, num361, 0f, 0f, 0f, 0, 0, 0);
                                }
                            }
                        }
                    }
                }
                else if (type == 153)
                {
                    if (life > 0)
                    {
                        for (var num362 = 0; (double) num362 < dmg / (double) lifeMax * 30.0; num362++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num363 = 0; num363 < 15; num363++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 177, 1f);
                        Gore.NewGore(base.position, base.velocity, 178, 1f);
                        Gore.NewGore(base.position, base.velocity, 179, 1f);
                        Gore.NewGore(base.position, base.velocity, 179, 1f);
                    }
                }
                else if (type == 177)
                {
                    if (life > 0)
                    {
                        for (var num364 = 0; (double) num364 < dmg / (double) lifeMax * 30.0; num364++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num365 = 0; num365 < 15; num365++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 234, 1f);
                        Gore.NewGore(base.position, base.velocity, 235, 1f);
                        Gore.NewGore(base.position, base.velocity, 236, 1f);
                        Gore.NewGore(base.position, base.velocity, 236, 1f);
                    }
                }
                else if (type >= 494 && type <= 495)
                {
                    if (life > 0)
                    {
                        for (var num366 = 0; (double) num366 < dmg / (double) lifeMax * 30.0; num366++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num367 = 0; num367 < 15; num367++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        var num368 = (type - 494) * 2;
                        Gore.NewGore(base.position, base.velocity, 736 + num368, 1f);
                        Gore.NewGore(base.position, base.velocity, 735 + num368, 1f);
                    }
                }
                else if (type >= 496 && type <= 497)
                {
                    if (life > 0)
                    {
                        for (var num369 = 0; (double) num369 < dmg / (double) lifeMax * 30.0; num369++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num370 = 0; num370 < 15; num370++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        var num371 = type - 496;
                        Gore.NewGore(base.position, base.velocity, 739 + num371, 1f);
                    }
                }
                else if (type >= 498 && type <= 506)
                {
                    if (life > 0)
                    {
                        for (var num372 = 0; (double) num372 < dmg / (double) lifeMax * 30.0; num372++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num373 = 0; num373 < 15; num373++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        var num374 = type - 498;
                        Gore.NewGore(base.position, base.velocity, 750 + num374, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 16f), base.velocity, 741 + num374,
                            1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 18f), base.velocity, 759 + num374,
                            1f);
                    }
                }
                else if (type == 49 || type == 51 || type == 93 || type == 150 || type == 152 || type == 226)
                {
                    if (life > 0)
                    {
                        for (var num375 = 0; (double) num375 < dmg / (double) lifeMax * 30.0; num375++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num376 = 0; num376 < 15; num376++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        if (type == 51)
                        {
                            Gore.NewGore(base.position, base.velocity, 83, 1f);
                        }
                        else if (type == 93)
                        {
                            Gore.NewGore(base.position, base.velocity, 107, 1f);
                        }
                        else if (type == 150)
                        {
                            Gore.NewGore(base.position, base.velocity, 164, 1f);
                            Gore.NewGore(base.position, base.velocity, 165, 1f);
                        }
                        else if (type == 152)
                        {
                            Gore.NewGore(base.position, base.velocity, 175, 1f);
                            Gore.NewGore(base.position, base.velocity, 176, 1f);
                            Gore.NewGore(base.position, base.velocity, 176, 1f);
                        }
                        else if (type == 226)
                        {
                            Gore.NewGore(base.position, base.velocity, 317, 1f);
                            Gore.NewGore(base.position, base.velocity, 318, 1f);
                            Gore.NewGore(base.position, base.velocity, 318, 1f);
                            Gore.NewGore(base.position, base.velocity, 319, 1f);
                        }
                        else
                        {
                            Gore.NewGore(base.position, base.velocity, 82, 1f);
                        }
                    }
                }
                else if (type == 46 || type == 55 || type == 67 || type == 74 || type == 102 || type == 224 ||
                         type == 230 || type == 297 || type == 298 || type == 299 || type == 300 || type == 303 ||
                         type == 337 || type == 538 || type == 540)
                {
                    if (life > 0)
                    {
                        for (var num377 = 0; (double) num377 < dmg / (double) lifeMax * 20.0; num377++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num378 = 0; num378 < 10; num378++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        if (type == 46 || type == 303 || type == 337 || type == 540)
                        {
                            Gore.NewGore(base.position, base.velocity, 76, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 77, 1f);
                            if (type == 303)
                            {
                                for (var num379 = 0; num379 < 10; num379++)
                                {
                                    Dust.NewDust(base.position, width, height, 193, (float) (2 * hitDirection), -2f, 0,
                                        default(Color), 1f);
                                }
                            }

                            if (type == 540)
                            {
                                Gore.NewGore(base.position, base.velocity, 926, 1f);
                            }
                        }
                        else if (type == 67)
                        {
                            Gore.NewGore(base.position, base.velocity, 95, 1f);
                            Gore.NewGore(base.position, base.velocity, 95, 1f);
                            Gore.NewGore(base.position, base.velocity, 96, 1f);
                        }
                        else if (type == 55 || type == 230)
                        {
                            Gore.NewGore(base.position, base.velocity, 553, 1f);
                            Gore.NewGore(base.position, base.velocity, 554, 1f);
                        }
                        else if (type == 74)
                        {
                            Gore.NewGore(base.position, base.velocity, 100, 1f);
                        }
                        else if (type == 297)
                        {
                            Gore.NewGore(base.position, base.velocity, 431, 1f);
                        }
                        else if (type == 298)
                        {
                            Gore.NewGore(base.position, base.velocity, 432, 1f);
                        }
                        else if (type == 299)
                        {
                            Gore.NewGore(base.position, base.velocity, 433, 1f);
                        }
                        else if (type == 538)
                        {
                            Gore.NewGore(base.position, base.velocity, 897, 1f);
                        }
                        else if (type == 300)
                        {
                            Gore.NewGore(base.position, base.velocity, 434, 1f);
                        }
                        else if (type == 102)
                        {
                            Gore.NewGore(base.position, base.velocity, 116, 1f);
                        }
                        else if (type == 224)
                        {
                            Gore.NewGore(base.position, base.velocity, 312, 1f);
                            Gore.NewGore(base.position, base.velocity, 313, 1f);
                        }
                    }
                }
                else if (type == 148 || type == 149 || type == 168 || type == 470)
                {
                    if (life > 0)
                    {
                        for (var num380 = 0; (double) num380 < dmg / (double) lifeMax * 20.0; num380++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num381 = 0; num381 < 10; num381++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        if (type == 148)
                        {
                            Gore.NewGore(base.position, base.velocity, 160, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 161, 1f);
                        }
                        else if (type == 149)
                        {
                            Gore.NewGore(base.position, base.velocity, 162, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 163, 1f);
                        }
                        else if (type == 168)
                        {
                            Gore.NewGore(base.position, base.velocity, 215, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 216, 1f);
                        }
                        else if (type == 470)
                        {
                            Gore.NewGore(base.position, base.velocity, 673, 1f);
                            Gore.NewGore(base.position, base.velocity, 672, 1f);
                            Gore.NewGore(base.position, base.velocity, 674, 1f);
                        }
                    }
                }
                else if (type == 361)
                {
                    if (life > 0)
                    {
                        for (var num382 = 0; (double) num382 < dmg / (double) lifeMax * 20.0; num382++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num383 = 0; num383 < 10; num383++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 551, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 552, 1f);
                    }
                }
                else if (type == 366 || type == 367)
                {
                    if (life > 0)
                    {
                        for (var num384 = 0; (double) num384 < dmg / (double) lifeMax * 20.0; num384++)
                        {
                            Dust.NewDust(base.position, width, height, 203, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num385 = 0; num385 < 10; num385++)
                        {
                            Dust.NewDust(base.position, width, height, 203, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        if (type == 366)
                        {
                            Gore.NewGore(base.position, base.velocity, 561, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 562, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 563, 1f);
                        }
                        else
                        {
                            Gore.NewGore(base.position, base.velocity, 564, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 565, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 566, 1f);
                        }
                    }
                }
                else if (type >= 362 && type <= 365)
                {
                    if (life > 0)
                    {
                        for (var num386 = 0; (double) num386 < dmg / (double) lifeMax * 20.0; num386++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num387 = 0; num387 < 10; num387++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        if (type == 362 || type == 363)
                        {
                            Gore.NewGore(base.position, base.velocity, 555, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 556, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 557, 1f);
                        }
                        else
                        {
                            Gore.NewGore(base.position, base.velocity, 558, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 559, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 560, 1f);
                        }
                    }
                }
                else if (type == 348 || type == 349)
                {
                    if (life > 0)
                    {
                        for (var num388 = 0; (double) num388 < dmg / (double) lifeMax * 20.0; num388++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num389 = 0; num389 < 10; num389++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 528, 1f);
                        Gore.NewGore(base.position, base.velocity, 529, 1f);
                        Gore.NewGore(base.position, base.velocity, 530, 1f);
                        Gore.NewGore(base.position, base.velocity, 531, 1f);
                        Gore.NewGore(base.position, base.velocity, 532, 1f);
                    }
                }
                else if (type == 351)
                {
                    if (life > 0)
                    {
                        for (var num390 = 0; (double) num390 < dmg / (double) lifeMax * 20.0; num390++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num391 = 0; num391 < 10; num391++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 538, 1f);
                        Gore.NewGore(base.position, base.velocity, 539, 1f);
                        Gore.NewGore(base.position, base.velocity, 540, 1f);
                        Gore.NewGore(base.position, base.velocity, 541, 1f);
                        Gore.NewGore(base.position, base.velocity, 542, 1f);
                    }
                }
                else if (type == 350)
                {
                    if (life > 0)
                    {
                        for (var num392 = 0; (double) num392 < dmg / (double) lifeMax * 20.0; num392++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num393 = 0; num393 < 10; num393++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 533, 1f);
                        Gore.NewGore(base.position, base.velocity, 534, 1f);
                        Gore.NewGore(base.position, base.velocity, 535, 1f);
                        Gore.NewGore(base.position, base.velocity, 536, 1f);
                    }
                }
                else if (type == 47 || type == 57 || type == 58 || type == 464 || type == 465)
                {
                    if (life > 0)
                    {
                        for (var num394 = 0; (double) num394 < dmg / (double) lifeMax * 20.0; num394++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num395 = 0; num395 < 10; num395++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        if (type == 57)
                        {
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 84, 1f);
                        }
                        else if (type == 58)
                        {
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 85, 1f);
                        }
                        else if (type == 464)
                        {
                            Gore.NewGore(base.position, base.velocity, 668, 1f);
                            Gore.NewGore(base.position, base.velocity, 669, 1f);
                        }
                        else if (type == 465)
                        {
                            Gore.NewGore(base.position, base.velocity, 670, 1f);
                            Gore.NewGore(base.position, base.velocity, 671, 1f);
                        }
                        else
                        {
                            Gore.NewGore(base.position, base.velocity, 78, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 79, 1f);
                        }
                    }
                }
                else if (type == 173 || type == 174 || type == 181 || type == 182 || type == 268)
                {
                    if (life > 0)
                    {
                        for (var num396 = 0; (double) num396 < dmg / (double) lifeMax * 100.0; num396++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, alpha,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num397 = 0; num397 < 50; num397++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, alpha,
                                default(Color), 1f);
                        }

                        if (type == 173)
                        {
                            Gore.NewGore(base.position, base.velocity, 223, 1f);
                            Gore.NewGore(base.position, base.velocity, 224, 1f);
                        }
                        else if (type == 174)
                        {
                            Gore.NewGore(base.position, base.velocity, 225, 1f);
                            Gore.NewGore(base.position, base.velocity, 226, 1f);
                        }
                        else if (type == 181)
                        {
                            Gore.NewGore(base.position, base.velocity, 237, 1f);
                        }
                        else if (type == 182)
                        {
                            Gore.NewGore(base.position, base.velocity, 238, 1f);
                            Gore.NewGore(base.position, base.velocity, 239, 1f);
                        }
                        else if (type == 268)
                        {
                            Gore.NewGore(base.position, base.velocity, 403, 1f);
                            Gore.NewGore(base.position, base.velocity, 404, 1f);
                            Gore.NewGore(base.position, base.velocity, 405, 1f);
                        }
                    }
                }
                else if (type == 2 || type == 190 || type == 191 || type == 192 || type == 193 || type == 194 ||
                         type == 317 || type == 318)
                {
                    if (life > 0)
                    {
                        for (var num398 = 0; (double) num398 < dmg / (double) lifeMax * 100.0; num398++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num399 = 0; num399 < 50; num399++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        if (type == 190)
                        {
                            Gore.NewGore(base.position, base.velocity, 249, scale);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 2, scale);
                        }
                        else if (type == 191)
                        {
                            Gore.NewGore(base.position, base.velocity, 248, scale);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 2, scale);
                        }
                        else if (type == 192)
                        {
                            Gore.NewGore(base.position, base.velocity, 247, scale);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 2, scale);
                        }
                        else if (type == 193)
                        {
                            Gore.NewGore(base.position, base.velocity, 252, scale);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 253,
                                scale);
                        }
                        else if (type == 194)
                        {
                            Gore.NewGore(base.position, base.velocity, 250, scale);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 251,
                                scale);
                        }
                        else if (type == 317)
                        {
                            Gore.NewGore(base.position, base.velocity, 447, scale);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 448,
                                scale);
                        }
                        else if (type == 318)
                        {
                            Gore.NewGore(base.position, base.velocity, 449, scale);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 450,
                                scale);
                        }
                        else
                        {
                            Gore.NewGore(base.position, base.velocity, 1, scale);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 2, scale);
                        }
                    }
                }
                else if (type == 157)
                {
                    if (life > 0)
                    {
                        for (var num400 = 0; (double) num400 < dmg / (double) lifeMax * 100.0; num400++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num401 = 0; num401 < 50; num401++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 186, 1f);
                        Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 187, 1f);
                    }
                }
                else if (type == 133)
                {
                    if (life > 0)
                    {
                        for (var num402 = 0; (double) num402 < dmg / (double) lifeMax * 100.0; num402++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }

                        if ((float) life < (float) lifeMax * 0.5f && localAI[0] == 0f)
                        {
                            localAI[0] = 1f;
                            Gore.NewGore(base.position, base.velocity, 1, 1f);
                        }
                    }
                    else
                    {
                        for (var num403 = 0; num403 < 50; num403++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 155, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 14f), base.velocity, 155, 1f);
                    }
                }
                else if (type == 69 || type == 509 || type == 508)
                {
                    if (life > 0)
                    {
                        for (var num404 = 0; (double) num404 < dmg / (double) lifeMax * 100.0; num404++)
                        {
                            Dust.NewDust(base.position, width, height, 250, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num405 = 0; num405 < 50; num405++)
                        {
                            Dust.NewDust(base.position, width, height, 250, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        if (type == 69)
                        {
                            Gore.NewGore(base.position, base.velocity, 97, 1f);
                            Gore.NewGore(base.position, base.velocity, 98, 1f);
                        }
                        else if (type == 508)
                        {
                            Gore.NewGore(base.position, base.velocity, 811, 1f);
                            Gore.NewGore(base.position, base.velocity, 812, 1f);
                            Gore.NewGore(base.position, base.velocity, 813, 1f);
                            Gore.NewGore(base.position, base.velocity, 814, 1f);
                        }
                        else if (type == 509)
                        {
                            Gore.NewGore(base.position, base.velocity, 815, 1f);
                            Gore.NewGore(base.position, base.velocity, 816, 1f);
                            Gore.NewGore(base.position, base.velocity, 817, 1f);
                            Gore.NewGore(base.position, base.velocity, 818, 1f);
                            Gore.NewGore(base.position, base.velocity, 818, 1f);
                        }
                    }
                }
                else if (type == 61)
                {
                    if (life > 0)
                    {
                        for (var num406 = 0; (double) num406 < dmg / (double) lifeMax * 100.0; num406++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num407 = 0; num407 < 50; num407++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 86, 1f);
                        Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 87, 1f);
                        Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 88, 1f);
                    }
                }
                else if (type == 301)
                {
                    if (life > 0)
                    {
                        for (var num408 = 0; (double) num408 < dmg / (double) lifeMax * 100.0; num408++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num409 = 0; num409 < 50; num409++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 438, 1f);
                        Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 439, 1f);
                    }
                }
                else if (type == 252)
                {
                    if (life > 0)
                    {
                        for (var num410 = 0; (double) num410 < dmg / (double) lifeMax * 100.0; num410++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num411 = 0; num411 < 50; num411++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 373, 1f);
                        Gore.NewGore(base.position, base.velocity, 374, 1f);
                    }
                }
                else if (type == 489)
                {
                    if (life > 0)
                    {
                        for (var num412 = 0; (double) num412 < dmg / (double) lifeMax * 100.0; num412++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num413 = 0; num413 < 50; num413++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 722, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 723, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 723, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 724, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 724, scale);
                    }
                }
                else if (type == 534)
                {
                    if (life > 0)
                    {
                        for (var num414 = 0; (double) num414 < dmg / (double) lifeMax * 100.0; num414++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num415 = 0; num415 < 50; num415++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 894, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 895, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 895, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 896, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 896, scale);
                    }
                }
                else if (type == 490)
                {
                    if (life > 0)
                    {
                        for (var num416 = 0; (double) num416 < dmg / (double) lifeMax * 100.0; num416++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num417 = 0; num417 < 50; num417++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 725, scale);
                        Gore.NewGore(base.position, base.velocity, 726, scale);
                        Gore.NewGore(base.position, base.velocity, 727, scale);
                        Gore.NewGore(base.position, base.velocity, 725 + Main.rand.Next(3), scale);
                        Gore.NewGore(base.position, base.velocity, 725 + Main.rand.Next(3), scale);
                    }
                }
                else if (type == 65 || (type >= 542 && type <= 545))
                {
                    if (life > 0)
                    {
                        for (var num418 = 0; (double) num418 < dmg / (double) lifeMax * 150.0; num418++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num419 = 0; num419 < 75; num419++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        if (type == 65)
                        {
                            Gore.NewGore(base.position, base.velocity * 0.8f, 89, 1f);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 90,
                                1f);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 91,
                                1f);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 92,
                                1f);
                        }

                        if (type == 542)
                        {
                            Gore.NewGore(base.position, base.velocity * 0.8f, 944, 1f);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 945,
                                1f);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 946,
                                1f);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 947,
                                1f);
                        }

                        if (type == 543)
                        {
                            Gore.NewGore(base.position, base.velocity * 0.8f, 948, 1f);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 949,
                                1f);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 950,
                                1f);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 951,
                                1f);
                        }

                        if (type == 544)
                        {
                            Gore.NewGore(base.position, base.velocity * 0.8f, 952, 1f);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 953,
                                1f);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 954,
                                1f);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 955,
                                1f);
                        }

                        if (type == 545)
                        {
                            Gore.NewGore(base.position, base.velocity * 0.8f, 956, 1f);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 957,
                                1f);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 958,
                                1f);
                            Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 959,
                                1f);
                        }
                    }
                }
                else if (type == 195 || type == 196)
                {
                    if (life > 0)
                    {
                        for (var num420 = 0; (double) num420 < dmg / (double) lifeMax * 150.0; num420++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num421 = 0; num421 < 75; num421++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 254, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 255, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 255, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 256, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 256, scale);
                    }
                }
                else if (type == 198 || type == 199)
                {
                    if (life > 0)
                    {
                        for (var num422 = 0; (double) num422 < dmg / (double) lifeMax * 150.0; num422++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num423 = 0; num423 < 75; num423++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 258, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 259, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 259, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 260, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 260, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 261, scale);
                    }
                }
                else if (type == 206)
                {
                    if (life > 0)
                    {
                        for (var num424 = 0; (double) num424 < dmg / (double) lifeMax * 150.0; num424++)
                        {
                            Dust.NewDust(base.position, width, height, 137, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num425 = 0; num425 < 75; num425++)
                        {
                            Dust.NewDust(base.position, width, height, 137, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 273, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 274, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 274, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 275, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 275, scale);
                    }
                }
                else if (type == 342)
                {
                    if (life > 0)
                    {
                        for (var num426 = 0; (double) num426 < dmg / (double) lifeMax * 100.0; num426++)
                        {
                            Dust.NewDust(base.position, width, height, 0, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num427 = 0; num427 < 50; num427++)
                        {
                            Dust.NewDust(base.position, width, height, 0, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 500, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 501, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 501, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 502, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 502, scale);
                    }
                }
                else if (type >= 338 && type <= 340)
                {
                    if (life > 0)
                    {
                        for (var num428 = 0; (double) num428 < dmg / (double) lifeMax * 100.0; num428++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num429 = 0; num429 < 50; num429++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        if (type == 338)
                        {
                            Gore.NewGore(base.position, base.velocity, 494, scale);
                        }

                        if (type == 339)
                        {
                            Gore.NewGore(base.position, base.velocity, 495, scale);
                        }

                        if (type == 340)
                        {
                            Gore.NewGore(base.position, base.velocity, 496, scale);
                        }

                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 497, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 498, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 499, scale);
                    }
                }
                else if (type == 343)
                {
                    if (life > 0)
                    {
                        for (var num430 = 0; (double) num430 < dmg / (double) lifeMax * 100.0; num430++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num431 = 0; num431 < 50; num431++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 503, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 504, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 505, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 506, scale);
                    }
                }
                else if ((type >= 430 && type <= 436) || type == 3 || type == 52 || type == 53 || type == 536 ||
                         type == 104 || type == 109 || type == 331 || type == 332 || type == 132 || type == 161 ||
                         type == 162 || type == 186 || type == 187 || type == 188 || type == 189 || type == 200 ||
                         type == 223 || type == 251 || type == 319 || type == 320 || type == 321)
                {
                    if (life > 0)
                    {
                        for (var num432 = 0; (double) num432 < dmg / (double) lifeMax * 100.0; num432++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }

                        if (type == 186 && Main.rand.Next(5) == 0)
                        {
                            Gore.NewGore(base.position, base.velocity, 242, 1f);
                        }

                        if (type == 187)
                        {
                            for (var num433 = 0; (double) num433 < dmg / (double) lifeMax * 200.0; num433++)
                            {
                                Dust.NewDust(base.position, width, 24, 4, (float) hitDirection, -1f, 125,
                                    new Color(0, 80, 255, 100), 1f);
                            }
                        }
                    }
                    else
                    {
                        for (var num434 = 0; num434 < 50; num434++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        if (type == 187 || type == 433)
                        {
                            for (var num435 = 0; num435 < 25; num435++)
                            {
                                Dust.NewDust(base.position, width, 24, 4, (float) hitDirection, -1f, 125,
                                    new Color(0, 80, 255, 100), 1f);
                            }
                        }

                        if (type == 104)
                        {
                            Gore.NewGore(base.position, base.velocity, 117, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 118,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 118,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 119,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 119,
                                scale);
                        }
                        else if (type == 331)
                        {
                            Gore.NewGore(base.position, base.velocity, 488, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 489,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 489,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 490,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 490,
                                scale);
                        }
                        else if (type == 332)
                        {
                            Gore.NewGore(base.position, base.velocity, 491, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 492,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 492,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 493,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 493,
                                scale);
                        }
                        else if (type == 109)
                        {
                            Gore.NewGore(base.position, base.velocity, 121, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 122,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 122,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 123,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 123,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 46f), base.velocity, 120,
                                scale);
                        }
                        else if (type == 161 || type == 431)
                        {
                            Gore.NewGore(base.position, base.velocity, 191, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 192,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 192,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 193,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 193,
                                scale);
                        }
                        else if (type == 162)
                        {
                            Gore.NewGore(base.position, base.velocity, 194, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 195,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 195,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 196,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 196,
                                scale);
                        }
                        else if (type == 188 || type == 434)
                        {
                            Gore.NewGore(base.position, base.velocity, 243, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 244,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 244,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 245,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 245,
                                scale);
                        }
                        else if (type == 200 || type == 436)
                        {
                            Gore.NewGore(base.position, base.velocity, 262, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 263,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 263,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 264,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 264,
                                scale);
                        }
                        else if (type == 319)
                        {
                            Gore.NewGore(base.position, base.velocity, 451, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 453,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 453,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 452,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 452,
                                scale);
                        }
                        else if (type == 320)
                        {
                            Gore.NewGore(base.position, base.velocity, 454, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 455,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 456,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 456,
                                scale);
                        }
                        else if (type == 321)
                        {
                            Gore.NewGore(base.position, base.velocity, 457, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 458,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 458,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 459,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 459,
                                scale);
                        }
                        else if (type == 223)
                        {
                            Gore.NewGore(base.position, base.velocity, 309, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 310,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 310,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 311,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 311,
                                scale);
                        }
                        else
                        {
                            if (type == 132)
                            {
                                Gore.NewGore(base.position, base.velocity, 154, 1f);
                            }
                            else if (type == 186 || type == 432)
                            {
                                Gore.NewGore(base.position, base.velocity, 241, 1f);
                            }
                            else if (type == 189 || type == 435)
                            {
                                Gore.NewGore(base.position, base.velocity, 246, 1f);
                            }
                            else if (type == 251)
                            {
                                Gore.NewGore(base.position, base.velocity, 372, 1f);
                            }
                            else if (type != 187 && type != 433)
                            {
                                Gore.NewGore(base.position, base.velocity, 3, 1f);
                            }

                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 4, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 4, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 5, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 5, 1f);
                            if (type == 186 || type == 432)
                            {
                                Gore.NewGore(base.position, base.velocity, 242, 1f);
                            }

                            if ((type == 186 || type == 432) && Main.rand.Next(2) == 0)
                            {
                                Gore.NewGore(base.position, base.velocity, 242, 1f);
                            }
                        }
                    }
                }
                else if (type == 83 || type == 84 || type == 179)
                {
                    if (life > 0)
                    {
                        for (var num436 = 0; (double) num436 < dmg / (double) lifeMax * 50.0; num436++)
                        {
                            var num437 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 0, default(Color),
                                1.5f);
                            Main.dust[num437].noGravity = true;
                        }
                    }
                    else
                    {
                        for (var num438 = 0; num438 < 20; num438++)
                        {
                            var num439 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 0, default(Color),
                                1.5f);
                            Main.dust[num439].velocity *= 2f;
                            Main.dust[num439].noGravity = true;
                        }

                        var num440 =
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float) (height / 2) - 10f),
                                new Vector2((float) Main.rand.Next(-2, 3), (float) Main.rand.Next(-2, 3)), 61, scale);
                        Main.gore[num440].velocity *= 0.5f;
                        num440 = Gore.NewGore(
                            new Vector2(base.position.X, base.position.Y + (float) (height / 2) - 10f),
                            new Vector2((float) Main.rand.Next(-2, 3), (float) Main.rand.Next(-2, 3)), 61, scale);
                        Main.gore[num440].velocity *= 0.5f;
                        num440 = Gore.NewGore(
                            new Vector2(base.position.X, base.position.Y + (float) (height / 2) - 10f),
                            new Vector2((float) Main.rand.Next(-2, 3), (float) Main.rand.Next(-2, 3)), 61, scale);
                        Main.gore[num440].velocity *= 0.5f;
                    }
                }
                else if (type == 262 || type == 263 || type == 264)
                {
                    if (life > 0)
                    {
                        for (var num441 = 0; (double) num441 < dmg / (double) lifeMax * 100.0; num441++)
                        {
                            if (type == 262 && life > lifeMax / 2 && Main.rand.Next(3) != 0)
                            {
                                Dust.NewDust(base.position, width, height, 166, (float) hitDirection, -1f, 0,
                                    default(Color), 1f);
                            }
                            else if (type == 265 && Main.rand.Next(3) != 0)
                            {
                                Dust.NewDust(base.position, width, height, 166, (float) hitDirection, -1f, 0,
                                    default(Color), 1f);
                            }
                            else
                            {
                                Dust.NewDust(base.position, width, height, 167, (float) hitDirection, -1f, 0,
                                    default(Color), 1f);
                            }
                        }
                    }
                    else
                    {
                        for (var num442 = 0; num442 < 150; num442++)
                        {
                            if (type == 265 && Main.rand.Next(3) != 0)
                            {
                                Dust.NewDust(base.position, width, height, 166, (float) (2 * hitDirection), -2f, 0,
                                    default(Color), 1f);
                            }
                            else
                            {
                                Dust.NewDust(base.position, width, height, 167, (float) (2 * hitDirection), -2f, 0,
                                    default(Color), 1f);
                            }
                        }

                        if (type == 262)
                        {
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 381, scale);
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 382, scale);
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 383, scale);
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 384, scale);
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 385, scale);
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 386, scale);
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 386, scale);
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 387, scale);
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 387, scale);
                        }

                        if (type == 263)
                        {
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 390, scale);
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 391, scale);
                        }

                        if (type == 264)
                        {
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 388, scale);
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) Main.rand.Next(width),
                                    base.position.Y + (float) Main.rand.Next(height)), base.velocity, 389, scale);
                        }
                    }
                }
                else if (type == 265)
                {
                    if (life < 0)
                    {
                        for (var num443 = 0; num443 < 15; num443++)
                        {
                            if (Main.rand.Next(3) != 0)
                            {
                                Dust.NewDust(base.position, width, height, 166, (float) hitDirection, -1f, 0,
                                    default(Color), 1f);
                            }
                            else
                            {
                                Dust.NewDust(base.position, width, height, 167, (float) hitDirection, -1f, 0,
                                    default(Color), 1f);
                            }
                        }
                    }
                }
                else if (type == 266)
                {
                    if (life > 0)
                    {
                        for (var num444 = 0; (double) num444 < dmg / (double) lifeMax * 100.0; num444++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num445 = 0; num445 < 150; num445++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position,
                            new Vector2((float) Main.rand.Next(-30, 31) * 0.2f, (float) Main.rand.Next(-30, 31) * 0.2f),
                            396, 1f);
                        Gore.NewGore(base.position,
                            new Vector2((float) Main.rand.Next(-30, 31) * 0.2f, (float) Main.rand.Next(-30, 31) * 0.2f),
                            397, 1f);
                        Gore.NewGore(base.position,
                            new Vector2((float) Main.rand.Next(-30, 31) * 0.2f, (float) Main.rand.Next(-30, 31) * 0.2f),
                            398, 1f);
                        Gore.NewGore(base.position,
                            new Vector2((float) Main.rand.Next(-30, 31) * 0.2f, (float) Main.rand.Next(-30, 31) * 0.2f),
                            399, 1f);
                        Gore.NewGore(base.position,
                            new Vector2((float) Main.rand.Next(-30, 31) * 0.2f, (float) Main.rand.Next(-30, 31) * 0.2f),
                            400, 1f);
                        Gore.NewGore(base.position,
                            new Vector2((float) Main.rand.Next(-30, 31) * 0.2f, (float) Main.rand.Next(-30, 31) * 0.2f),
                            401, 1f);
                    }
                }
                else if (type == 267)
                {
                    if (life > 0)
                    {
                        for (var num446 = 0; (double) num446 < dmg / (double) lifeMax * 50.0; num446++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num447 = 0; num447 < 20; num447++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 402, 1f);
                    }
                }
                else if (type == 4 || type == 126 || type == 125)
                {
                    if (life > 0)
                    {
                        for (var num448 = 0; (double) num448 < dmg / (double) lifeMax * 100.0; num448++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num449 = 0; num449 < 150; num449++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        for (var num450 = 0; num450 < 2; num450++)
                        {
                            Gore.NewGore(base.position,
                                new Vector2((float) Main.rand.Next(-30, 31) * 0.2f,
                                    (float) Main.rand.Next(-30, 31) * 0.2f), 2, 1f);
                            Gore.NewGore(base.position,
                                new Vector2((float) Main.rand.Next(-30, 31) * 0.2f,
                                    (float) Main.rand.Next(-30, 31) * 0.2f), 7, 1f);
                            Gore.NewGore(base.position,
                                new Vector2((float) Main.rand.Next(-30, 31) * 0.2f,
                                    (float) Main.rand.Next(-30, 31) * 0.2f), 9, 1f);
                            if (type == 4)
                            {
                                Gore.NewGore(base.position,
                                    new Vector2((float) Main.rand.Next(-30, 31) * 0.2f,
                                        (float) Main.rand.Next(-30, 31) * 0.2f), 10, 1f);
                                Main.PlaySound(15, (int) base.position.X, (int) base.position.Y, 0, 1f, 0f);
                            }
                            else if (type == 125)
                            {
                                Gore.NewGore(base.position,
                                    new Vector2((float) Main.rand.Next(-30, 31) * 0.2f,
                                        (float) Main.rand.Next(-30, 31) * 0.2f), 146, 1f);
                            }
                            else if (type == 126)
                            {
                                Gore.NewGore(base.position,
                                    new Vector2((float) Main.rand.Next(-30, 31) * 0.2f,
                                        (float) Main.rand.Next(-30, 31) * 0.2f), 145, 1f);
                            }
                        }

                        if (type == 125 || type == 126)
                        {
                            for (var num451 = 0; num451 < 10; num451++)
                            {
                                var num452 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height,
                                    31, 0f, 0f, 100, default(Color), 1.5f);
                                Main.dust[num452].velocity *= 1.4f;
                            }

                            for (var num453 = 0; num453 < 5; num453++)
                            {
                                var num454 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height,
                                    6, 0f, 0f, 100, default(Color), 2.5f);
                                Main.dust[num454].noGravity = true;
                                Main.dust[num454].velocity *= 5f;
                                num454 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6,
                                    0f, 0f, 100, default(Color), 1.5f);
                                Main.dust[num454].velocity *= 3f;
                            }

                            var num455 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                                Main.rand.Next(61, 64), 1f);
                            Main.gore[num455].velocity *= 0.4f;
                            Main.gore[num455].velocity.X += 1f;
                            Main.gore[num455].velocity.Y += 1f;
                            num455 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                                Main.rand.Next(61, 64), 1f);
                            Main.gore[num455].velocity *= 0.4f;
                            Main.gore[num455].velocity.X -= 1f;
                            Main.gore[num455].velocity.Y += 1f;
                            num455 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                                Main.rand.Next(61, 64), 1f);
                            Main.gore[num455].velocity *= 0.4f;
                            Main.gore[num455].velocity.X += 1f;
                            Main.gore[num455].velocity.Y -= 1f;
                            num455 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                                Main.rand.Next(61, 64), 1f);
                            Main.gore[num455].velocity *= 0.4f;
                            Main.gore[num455].velocity.X -= 1f;
                            Main.gore[num455].velocity.Y -= 1f;
                        }
                    }
                }
                else if (type == 5)
                {
                    if (life > 0)
                    {
                        for (var num456 = 0; (double) num456 < dmg / (double) lifeMax * 50.0; num456++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num457 = 0; num457 < 20; num457++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 6, 1f);
                        Gore.NewGore(base.position, base.velocity, 7, 1f);
                    }
                }
                else if (type == 113 || type == 114)
                {
                    if (life > 0)
                    {
                        for (var num458 = 0; num458 < 20; num458++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num459 = 0; num459 < 50; num459++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -1f, 0,
                                default(Color), 1f);
                        }

                        if (type == 114)
                        {
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 137, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float) (height / 2)),
                                base.velocity, 139, scale);
                            Gore.NewGore(new Vector2(base.position.X + (float) (width / 2), base.position.Y),
                                base.velocity, 139, scale);
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) (width / 2),
                                    base.position.Y + (float) (height / 2)), base.velocity, 137, scale);
                        }
                        else
                        {
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 137, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float) (height / 2)),
                                base.velocity, 138, scale);
                            Gore.NewGore(new Vector2(base.position.X + (float) (width / 2), base.position.Y),
                                base.velocity, 138, scale);
                            Gore.NewGore(
                                new Vector2(base.position.X + (float) (width / 2),
                                    base.position.Y + (float) (height / 2)), base.velocity, 137, scale);
                            if (Main.player[Main.myPlayer].position.Y / 16f > (float) (Main.maxTilesY - 250))
                            {
                                var num460 = (int) Main.screenPosition.Y;
                                var num461 = num460 + Main.screenWidth;
                                var num462 = (int) base.position.X;
                                if (direction > 0)
                                {
                                    num462 -= 80;
                                }

                                var num463 = num462 + 140;
                                var num464 = num462;
                                for (var num465 = num460; num465 < num461; num465 += 50)
                                {
                                    for (; num464 < num463; num464 += 46)
                                    {
                                        for (var num466 = 0; num466 < 5; num466++)
                                        {
                                            Dust.NewDust(new Vector2((float) num464, (float) num465), 32, 32, 5,
                                                (float) Main.rand.Next(-60, 61) * 0.1f,
                                                (float) Main.rand.Next(-60, 61) * 0.1f, 0, default(Color), 1f);
                                        }

                                        Gore.NewGore(
                                            Velocity: new Vector2((float) Main.rand.Next(-80, 81) * 0.1f,
                                                (float) Main.rand.Next(-60, 21) * 0.1f),
                                            Position: new Vector2((float) num464, (float) num465),
                                            Type: Main.rand.Next(140, 143), Scale: 1f);
                                    }

                                    num464 = num462;
                                }
                            }
                        }
                    }
                }
                else if (type == 115 || type == 116)
                {
                    if (life > 0)
                    {
                        for (var num467 = 0; num467 < 5; num467++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else if (type == 115 && Main.netMode != 1)
                    {
                        NewNPC((int) (base.position.X + (float) (width / 2)), (int) (base.position.Y + (float) height),
                            116, 0, 0f, 0f, 0f, 0f, 255);
                        for (var num468 = 0; num468 < 10; num468++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num469 = 0; num469 < 20; num469++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 132, scale);
                        Gore.NewGore(base.position, base.velocity, 133, scale);
                    }
                }
                else if (type >= 117 && type <= 119)
                {
                    if (life > 0)
                    {
                        for (var num470 = 0; num470 < 5; num470++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num471 = 0; num471 < 10; num471++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 134 + type - 117, scale);
                    }
                }
                else if (type == 217 || type == 218 || type == 219)
                {
                    if (life > 0)
                    {
                        for (var num472 = 0; (double) num472 < dmg / (double) lifeMax * 100.0; num472++)
                        {
                            Dust.NewDust(base.position, width, height, 18, (float) hitDirection, -1f, alpha, this.color,
                                scale);
                        }
                    }
                    else
                    {
                        for (var num473 = 0; num473 < 50; num473++)
                        {
                            Dust.NewDust(base.position, width, height, 18, (float) hitDirection, -2f, alpha, this.color,
                                scale);
                        }

                        if (type == 217)
                        {
                            Gore.NewGore(base.position, base.velocity, 292, scale);
                            Gore.NewGore(base.position, base.velocity, 293, scale);
                        }

                        if (type == 218)
                        {
                            Gore.NewGore(base.position, base.velocity, 295, scale);
                            Gore.NewGore(base.position, base.velocity, 296, scale);
                        }

                        if (type == 219)
                        {
                            Gore.NewGore(base.position, base.velocity, 294, scale);
                        }
                    }
                }
                else if (type == 222)
                {
                    if (life > 0)
                    {
                        for (var num474 = 0; (double) num474 < dmg / (double) lifeMax * 100.0; num474++)
                        {
                            Dust.NewDust(base.position, width, height, 18, (float) hitDirection, -1f, alpha, this.color,
                                scale);
                        }
                    }
                    else
                    {
                        for (var num475 = 0; num475 < 50; num475++)
                        {
                            Dust.NewDust(base.position, width, height, 18, (float) hitDirection, -2f, alpha, this.color,
                                scale);
                        }

                        Gore.NewGore(new Vector2(base.position.X, base.position.Y - 35f), base.velocity, 303, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y - 45f), base.velocity, 304, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 305, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 306, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 10f), base.velocity, 307, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y - 10f), base.velocity, 308, scale);
                    }
                }
                else if (type == 6 || type == 94 || type == 166)
                {
                    if (life > 0)
                    {
                        for (var num476 = 0; (double) num476 < dmg / (double) lifeMax * 100.0; num476++)
                        {
                            Dust.NewDust(base.position, width, height, 18, (float) hitDirection, -1f, alpha, this.color,
                                scale);
                        }
                    }
                    else
                    {
                        for (var num477 = 0; num477 < 50; num477++)
                        {
                            Dust.NewDust(base.position, width, height, 18, (float) hitDirection, -2f, alpha, this.color,
                                scale);
                        }

                        if (type == 94)
                        {
                            var num478 = Gore.NewGore(base.position, base.velocity, 108, scale);
                            num478 = Gore.NewGore(base.position, base.velocity, 108, scale);
                            num478 = Gore.NewGore(base.position, base.velocity, 109, scale);
                            num478 = Gore.NewGore(base.position, base.velocity, 110, scale);
                        }
                        else if (type == 166)
                        {
                            var num478 = Gore.NewGore(base.position, base.velocity, 209, scale);
                            num478 = Gore.NewGore(base.position, base.velocity, 210, scale);
                            num478 = Gore.NewGore(base.position, base.velocity, 211, scale);
                        }
                        else
                        {
                            var num478 = Gore.NewGore(base.position, base.velocity, 14, scale);
                            Main.gore[num478].alpha = alpha;
                            num478 = Gore.NewGore(base.position, base.velocity, 15, scale);
                            Main.gore[num478].alpha = alpha;
                        }
                    }
                }
                else if (type == 101)
                {
                    if (life > 0)
                    {
                        for (var num479 = 0; (double) num479 < dmg / (double) lifeMax * 100.0; num479++)
                        {
                            Dust.NewDust(base.position, width, height, 18, (float) hitDirection, -1f, alpha, this.color,
                                scale);
                        }
                    }
                    else
                    {
                        for (var num480 = 0; num480 < 50; num480++)
                        {
                            Dust.NewDust(base.position, width, height, 18, (float) hitDirection, -2f, alpha, this.color,
                                scale);
                        }

                        Gore.NewGore(base.position, base.velocity, 110, scale);
                        Gore.NewGore(base.position, base.velocity, 114, scale);
                        Gore.NewGore(base.position, base.velocity, 114, scale);
                        Gore.NewGore(base.position, base.velocity, 115, scale);
                    }
                }
                else if (type == 7 || type == 8 || type == 9)
                {
                    if (life > 0)
                    {
                        for (var num481 = 0; (double) num481 < dmg / (double) lifeMax * 100.0; num481++)
                        {
                            Dust.NewDust(base.position, width, height, 18, (float) hitDirection, -1f, alpha, this.color,
                                scale);
                        }
                    }
                    else
                    {
                        for (var num482 = 0; num482 < 50; num482++)
                        {
                            Dust.NewDust(base.position, width, height, 18, (float) hitDirection, -2f, alpha, this.color,
                                scale);
                        }

                        var num483 = Gore.NewGore(base.position, base.velocity, type - 7 + 18, 1f);
                        Main.gore[num483].alpha = alpha;
                    }
                }
                else if (type == 98 || type == 99 || type == 100)
                {
                    if (life > 0)
                    {
                        for (var num484 = 0; (double) num484 < dmg / (double) lifeMax * 100.0; num484++)
                        {
                            Dust.NewDust(base.position, width, height, 18, (float) hitDirection, -1f, alpha, this.color,
                                scale);
                        }
                    }
                    else
                    {
                        for (var num485 = 0; num485 < 50; num485++)
                        {
                            Dust.NewDust(base.position, width, height, 18, (float) hitDirection, -2f, alpha, this.color,
                                scale);
                        }

                        var num486 = Gore.NewGore(base.position, base.velocity, 110, 1f);
                        Main.gore[num486].alpha = alpha;
                    }
                }
                else if (type == 10 || type == 11 || type == 12)
                {
                    if (life > 0)
                    {
                        for (var num487 = 0; (double) num487 < dmg / (double) lifeMax * 50.0; num487++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num488 = 0; num488 < 10; num488++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, type - 7 + 18, 1f);
                    }
                }
                else if (type == 95 || type == 96 || type == 97)
                {
                    if (life > 0)
                    {
                        for (var num489 = 0; (double) num489 < dmg / (double) lifeMax * 50.0; num489++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num490 = 0; num490 < 10; num490++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, type - 95 + 111, 1f);
                    }
                }
                else if (type == 13 || type == 14 || type == 15)
                {
                    if (life > 0)
                    {
                        for (var num491 = 0; (double) num491 < dmg / (double) lifeMax * 100.0; num491++)
                        {
                            Dust.NewDust(base.position, width, height, 18, (float) hitDirection, -1f, alpha, this.color,
                                scale);
                        }
                    }
                    else
                    {
                        for (var num492 = 0; num492 < 50; num492++)
                        {
                            Dust.NewDust(base.position, width, height, 18, (float) hitDirection, -2f, alpha, this.color,
                                scale);
                        }

                        if (type == 13)
                        {
                            Gore.NewGore(base.position, base.velocity, 24, 1f);
                            Gore.NewGore(base.position, base.velocity, 25, 1f);
                        }
                        else if (type == 14)
                        {
                            Gore.NewGore(base.position, base.velocity, 26, 1f);
                            Gore.NewGore(base.position, base.velocity, 27, 1f);
                        }
                        else
                        {
                            Gore.NewGore(base.position, base.velocity, 28, 1f);
                            Gore.NewGore(base.position, base.velocity, 29, 1f);
                        }
                    }
                }
                else if (type == 17)
                {
                    if (life > 0)
                    {
                        for (var num493 = 0; (double) num493 < dmg / (double) lifeMax * 100.0; num493++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num494 = 0; num494 < 50; num494++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        if (altTexture == 0)
                        {
                            Gore.NewGore(base.position, base.velocity, 30, 1f);
                        }

                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 31, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 31, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 32, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 32, 1f);
                    }
                }
                else if (type == 441)
                {
                    if (life > 0)
                    {
                        for (var num495 = 0; (double) num495 < dmg / (double) lifeMax * 100.0; num495++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num496 = 0; num496 < 50; num496++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 768, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 769, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 770, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 771, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 771, 1f);
                    }
                }
                else if (type == 86)
                {
                    if (life > 0)
                    {
                        for (var num497 = 0; (double) num497 < dmg / (double) lifeMax * 100.0; num497++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num498 = 0; num498 < 50; num498++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 101, 1f);
                        Gore.NewGore(base.position, base.velocity, 102, 1f);
                        Gore.NewGore(base.position, base.velocity, 103, 1f);
                        Gore.NewGore(base.position, base.velocity, 103, 1f);
                        Gore.NewGore(base.position, base.velocity, 104, 1f);
                        Gore.NewGore(base.position, base.velocity, 104, 1f);
                        Gore.NewGore(base.position, base.velocity, 105, 1f);
                    }
                }
                else if (type == 155)
                {
                    if (life > 0)
                    {
                        for (var num499 = 0; (double) num499 < dmg / (double) lifeMax * 100.0; num499++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num500 = 0; num500 < 50; num500++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 181, 1f);
                        Gore.NewGore(base.position, base.velocity, 182, 1f);
                        Gore.NewGore(base.position, base.velocity, 183, 1f);
                        Gore.NewGore(base.position, base.velocity, 183, 1f);
                    }
                }
                else if (type == 329)
                {
                    if (life > 0)
                    {
                        for (var num501 = 0; (double) num501 < dmg / (double) lifeMax * 100.0; num501++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num502 = 0; num502 < 50; num502++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 485, 1f);
                        Gore.NewGore(base.position, base.velocity, 486, 1f);
                        Gore.NewGore(base.position, base.velocity, 487, 1f);
                    }
                }
                else if (type == 163 || type == 238)
                {
                    if (life > 0)
                    {
                        for (var num503 = 0; (double) num503 < dmg / (double) lifeMax * 100.0; num503++)
                        {
                            Dust.NewDust(base.position, width, height, 18, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num504 = 0; num504 < 50; num504++)
                        {
                            Dust.NewDust(base.position, width, height, 18, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 205, 1f);
                        Gore.NewGore(base.position, base.velocity, 206, 1f);
                        Gore.NewGore(base.position, base.velocity, 206, 1f);
                        Gore.NewGore(base.position, base.velocity, 206, 1f);
                        Gore.NewGore(base.position, base.velocity, 206, 1f);
                    }
                }
                else if (type == 164 || type == 165)
                {
                    if (life > 0)
                    {
                        for (var num505 = 0; (double) num505 < dmg / (double) lifeMax * 100.0; num505++)
                        {
                            Dust.NewDust(base.position, width, height, 18, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num506 = 0; num506 < 50; num506++)
                        {
                            Dust.NewDust(base.position, width, height, 18, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 207, 1f);
                        Gore.NewGore(base.position, base.velocity, 208, 1f);
                        Gore.NewGore(base.position, base.velocity, 208, 1f);
                        Gore.NewGore(base.position, base.velocity, 208, 1f);
                        Gore.NewGore(base.position, base.velocity, 208, 1f);
                    }
                }
                else if (type == 239 || type == 240)
                {
                    if (life > 0)
                    {
                        for (var num507 = 0; (double) num507 < dmg / (double) lifeMax * 100.0; num507++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num508 = 0; num508 < 50; num508++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 351, 1f);
                        Gore.NewGore(base.position, base.velocity, 352, 1f);
                        Gore.NewGore(base.position, base.velocity, 352, 1f);
                        Gore.NewGore(base.position, base.velocity, 353, 1f);
                        Gore.NewGore(base.position, base.velocity, 353, 1f);
                    }
                }
                else if (type == 236 || type == 237)
                {
                    if (life > 0)
                    {
                        for (var num509 = 0; (double) num509 < dmg / (double) lifeMax * 100.0; num509++)
                        {
                            Dust.NewDust(base.position, width, height, 18, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num510 = 0; num510 < 50; num510++)
                        {
                            Dust.NewDust(base.position, width, height, 18, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 332, 1f);
                        Gore.NewGore(base.position, base.velocity, 333, 1f);
                        Gore.NewGore(base.position, base.velocity, 334, 1f);
                        Gore.NewGore(base.position, base.velocity, 335, 1f);
                        Gore.NewGore(base.position, base.velocity, 335, 1f);
                    }
                }
                else if (type == 241)
                {
                    if (life > 0)
                    {
                        for (var num511 = 0; (double) num511 < dmg / (double) lifeMax * 100.0; num511++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num512 = 0; num512 < 50; num512++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 354, 1f);
                        Gore.NewGore(base.position, base.velocity, 355, 1f);
                    }
                }
                else if (type == 242)
                {
                    if (life > 0)
                    {
                        for (var num513 = 0; (double) num513 < dmg / (double) lifeMax * 100.0; num513++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num514 = 0; num514 < 50; num514++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 356, 1f);
                        Gore.NewGore(base.position, base.velocity, 357, 1f);
                        Gore.NewGore(base.position, base.velocity, 357, 1f);
                        Gore.NewGore(base.position, base.velocity, 358, 1f);
                        Gore.NewGore(base.position, base.velocity, 358, 1f);
                    }
                }
                else if (type >= 105 && type <= 108)
                {
                    if (life > 0)
                    {
                        for (var num515 = 0; (double) num515 < dmg / (double) lifeMax * 100.0; num515++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num516 = 0; num516 < 50; num516++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        if (type == 105 || type == 107)
                        {
                            Gore.NewGore(base.position, base.velocity, 124, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 125, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 125, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 126, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 126, 1f);
                        }
                        else
                        {
                            if (altTexture == 0 || type == 106)
                            {
                                Gore.NewGore(base.position, base.velocity, 127, 1f);
                            }

                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 128, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 128, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 129, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 129, 1f);
                        }
                    }
                }
                else if (type == 123 || type == 124)
                {
                    if (life > 0)
                    {
                        for (var num517 = 0; (double) num517 < dmg / (double) lifeMax * 100.0; num517++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num518 = 0; num518 < 50; num518++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 151, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 152, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 152, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 153, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 153, 1f);
                    }
                }
                else if (type == 22)
                {
                    if (life > 0)
                    {
                        for (var num519 = 0; (double) num519 < dmg / (double) lifeMax * 100.0; num519++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num520 = 0; num520 < 50; num520++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 73, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 74, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 74, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 75, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 75, 1f);
                    }
                }
                else if (type == 550)
                {
                    if (life > 0)
                    {
                        for (var num521 = 0; (double) num521 < dmg / (double) lifeMax * 100.0; num521++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num522 = 0; num522 < 50; num522++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 0f), base.velocity, 967, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 968, 1f);
                        Gore.NewGore(new Vector2(base.position.X + 8f, base.position.Y + 20f), base.velocity, 968, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 969, 1f);
                        Gore.NewGore(new Vector2(base.position.X + 8f, base.position.Y + 34f), base.velocity, 969, 1f);
                    }
                }
                else if (type == 368)
                {
                    if (life > 0)
                    {
                        for (var num523 = 0; (double) num523 < dmg / (double) lifeMax * 100.0; num523++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num524 = 0; num524 < 50; num524++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        if (altTexture == 0)
                        {
                            Gore.NewGore(base.position, base.velocity, 567, 1f);
                        }

                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 568, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 568, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 569, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 569, 1f);
                    }
                }
                else if (type == 369 || type == 376)
                {
                    if (life <= 0)
                    {
                        for (var num525 = 0; num525 < 25; num525++)
                        {
                            var num526 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31,
                                0f, 0f, 100, default(Color), 2f);
                            Main.dust[num526].velocity *= 1.4f;
                            Main.dust[num526].noLight = true;
                            Main.dust[num526].noGravity = true;
                        }

                        var num527 = 0;
                        num527 = Gore.NewGore(
                            new Vector2(base.position.X + (float) (width / 2) - 24f,
                                base.position.Y + (float) (height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64),
                            1f);
                        Main.gore[num527].scale = 1f;
                        Main.gore[num527].velocity.X += 1f;
                        Main.gore[num527].velocity.Y += 1f;
                        num527 = Gore.NewGore(
                            new Vector2(base.position.X + (float) (width / 2) - 24f,
                                base.position.Y + (float) (height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64),
                            1f);
                        Main.gore[num527].scale = 1f;
                        Main.gore[num527].velocity.X -= 1f;
                        Main.gore[num527].velocity.Y += 1f;
                        num527 = Gore.NewGore(
                            new Vector2(base.position.X + (float) (width / 2) - 24f,
                                base.position.Y + (float) (height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64),
                            1f);
                        Main.gore[num527].scale = 1f;
                        Main.gore[num527].velocity.X += 1f;
                        Main.gore[num527].velocity.Y -= 1f;
                        num527 = Gore.NewGore(
                            new Vector2(base.position.X + (float) (width / 2) - 24f,
                                base.position.Y + (float) (height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64),
                            1f);
                        Main.gore[num527].scale = 1f;
                        Main.gore[num527].velocity.X -= 1f;
                        Main.gore[num527].velocity.Y -= 1f;
                    }
                }
                else if (type == 227)
                {
                    if (life > 0)
                    {
                        for (var num528 = 0; (double) num528 < dmg / (double) lifeMax * 100.0; num528++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num529 = 0; num529 < 50; num529++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        if (altTexture == 0)
                        {
                            Gore.NewGore(base.position, base.velocity, 320, 1f);
                        }

                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 321, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 322, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 323, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 323, 1f);
                    }
                }
                else if (type == 228)
                {
                    if (life > 0)
                    {
                        for (var num530 = 0; (double) num530 < dmg / (double) lifeMax * 100.0; num530++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num531 = 0; num531 < 50; num531++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 324, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 325, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 326, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 327, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 327, 1f);
                    }
                }
                else if (type == 229)
                {
                    if (life > 0)
                    {
                        for (var num532 = 0; (double) num532 < dmg / (double) lifeMax * 100.0; num532++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num533 = 0; num533 < 50; num533++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        if (altTexture == 0)
                        {
                            Gore.NewGore(base.position, base.velocity, 328, 1f);
                        }

                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 329, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 329, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 330, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 330, 1f);
                    }
                }
                else if (type == 142)
                {
                    if (life > 0)
                    {
                        for (var num534 = 0; (double) num534 < dmg / (double) lifeMax * 100.0; num534++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num535 = 0; num535 < 50; num535++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        if (altTexture == 0)
                        {
                            Gore.NewGore(base.position, base.velocity, 157, 1f);
                        }

                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 158, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 158, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 159, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 159, 1f);
                    }
                }
                else if (type == 178)
                {
                    if (life > 0)
                    {
                        for (var num536 = 0; (double) num536 < dmg / (double) lifeMax * 100.0; num536++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num537 = 0; num537 < 50; num537++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        if (altTexture == 0)
                        {
                            Gore.NewGore(base.position, base.velocity, 231, 1f);
                        }

                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 232, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 232, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 233, 1f);
                    }
                }
                else if (type == 353 || type == 354)
                {
                    if (life > 0)
                    {
                        for (var num538 = 0; (double) num538 < dmg / (double) lifeMax * 100.0; num538++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num539 = 0; num539 < 50; num539++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        if (altTexture == 0)
                        {
                            Gore.NewGore(base.position, base.velocity, 544, 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 543, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 546, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 546, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 545, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 545, 1f);
                    }
                }
                else if (type == 37 || type == 54)
                {
                    if (life > 0)
                    {
                        for (var num540 = 0; (double) num540 < dmg / (double) lifeMax * 100.0; num540++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num541 = 0; num541 < 50; num541++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 58, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 59, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 59, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 60, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 60, 1f);
                    }
                }
                else if (type == 441)
                {
                    if (life > 0)
                    {
                        for (var num542 = 0; (double) num542 < dmg / (double) lifeMax * 100.0; num542++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num543 = 0; num543 < 50; num543++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 768, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 769, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 770, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 771, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 771, 1f);
                    }
                }
                else if (type == 160)
                {
                    if (life > 0)
                    {
                        for (var num544 = 0; (double) num544 < dmg / (double) lifeMax * 100.0; num544++)
                        {
                            Dust.NewDust(base.position, width, height, 26, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num545 = 0; num545 < 50; num545++)
                        {
                            Dust.NewDust(base.position, width, height, 26, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 188, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 189, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 189, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 190, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 190, 1f);
                    }
                }
                else if (type == 18)
                {
                    if (life > 0)
                    {
                        for (var num546 = 0; (double) num546 < dmg / (double) lifeMax * 100.0; num546++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num547 = 0; num547 < 50; num547++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        if (altTexture == 0)
                        {
                            Gore.NewGore(base.position, base.velocity, 33, 1f);
                        }

                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 34, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 34, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 35, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 35, 1f);
                    }
                }
                else if (type == 19)
                {
                    if (life > 0)
                    {
                        for (var num548 = 0; (double) num548 < dmg / (double) lifeMax * 100.0; num548++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num549 = 0; num549 < 50; num549++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 36, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 37, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 37, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 38, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 38, 1f);
                    }
                }
                else if (type == 38)
                {
                    if (life > 0)
                    {
                        for (var num550 = 0; (double) num550 < dmg / (double) lifeMax * 100.0; num550++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num551 = 0; num551 < 50; num551++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        if (altTexture == 0)
                        {
                            Gore.NewGore(base.position, base.velocity, 64, 1f);
                        }

                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 65, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 65, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 66, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 66, 1f);
                    }
                }
                else if (type == 20)
                {
                    if (life > 0)
                    {
                        for (var num552 = 0; (double) num552 < dmg / (double) lifeMax * 100.0; num552++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num553 = 0; num553 < 50; num553++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 39, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 40, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 40, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 41, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 41, 1f);
                    }
                }
                else if (type == 207)
                {
                    if (life > 0)
                    {
                        for (var num554 = 0; (double) num554 < dmg / (double) lifeMax * 100.0; num554++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num555 = 0; num555 < 50; num555++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        if (altTexture == 0)
                        {
                            Gore.NewGore(base.position, base.velocity, 283, 1f);
                        }

                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 284, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 284, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 285, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 285, 1f);
                    }
                }
                else if (type == 208)
                {
                    if (life > 0)
                    {
                        for (var num556 = 0; (double) num556 < dmg / (double) lifeMax * 100.0; num556++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num557 = 0; num557 < 50; num557++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 286, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 287, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 287, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 288, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 288, 1f);
                    }
                }
                else if (type == 209)
                {
                    if (life > 0)
                    {
                        for (var num558 = 0; (double) num558 < dmg / (double) lifeMax * 100.0; num558++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num559 = 0; num559 < 50; num559++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 289, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 290, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 290, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 291, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 291, 1f);
                    }
                }
                else if (type >= 212 && type <= 216)
                {
                    if (life > 0)
                    {
                        for (var num560 = 0; (double) num560 < dmg / (double) lifeMax * 100.0; num560++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num561 = 0; num561 < 50; num561++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        if (type == 212)
                        {
                            Gore.NewGore(base.position, base.velocity, 336, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 337, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 337, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 338, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 338, 1f);
                        }
                        else if (type == 213)
                        {
                            Gore.NewGore(base.position, base.velocity, 339, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 340, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 340, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 341, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 341, 1f);
                        }
                        else if (type == 214)
                        {
                            Gore.NewGore(base.position, base.velocity, 342, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 343, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 343, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 344, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 344, 1f);
                        }
                        else if (type == 215)
                        {
                            Gore.NewGore(base.position, base.velocity, 345, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 346, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 346, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 347, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 347, 1f);
                        }
                        else if (type == 216)
                        {
                            Gore.NewGore(base.position, base.velocity, 348, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 349, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 349, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 350, 1f);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 350, 1f);
                        }
                    }
                }
                else if (type == 220 || type == 221)
                {
                    if (life > 0)
                    {
                        for (var num562 = 0; (double) num562 < dmg / (double) lifeMax * 50.0; num562++)
                        {
                            Dust.NewDust(base.position, width, height, 151, (float) hitDirection, -1f, 0,
                                default(Color), 0.7f);
                        }
                    }
                    else
                    {
                        for (var num563 = 0; num563 < 20; num563++)
                        {
                            Dust.NewDust(base.position, width, height, 151, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 0.7f);
                        }

                        if (type == 221)
                        {
                            Gore.NewGore(base.position, base.velocity, 298, scale);
                            Gore.NewGore(base.position, base.velocity, 299, scale);
                        }
                        else
                        {
                            Gore.NewGore(base.position, base.velocity, 297, scale);
                        }
                    }
                }
                else if (type == 21 || type == 31 || type == 294 || type == 295 || type == 296 || type == 32 ||
                         type == 44 || type == 45 || type == 77 || type == 110 || type == 167 || type == 197 ||
                         type == 201 || type == 202 || type == 203 || type == 287 || type == 291 || type == 292 ||
                         type == 293 || (type >= 322 && type <= 324) || type == 481 || (type >= 449 && type <= 452))
                {
                    if (life > 0)
                    {
                        for (var num564 = 0; (double) num564 < dmg / (double) lifeMax * 50.0; num564++)
                        {
                            Dust.NewDust(base.position, width, height, 26, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num565 = 0; num565 < 20; num565++)
                        {
                            Dust.NewDust(base.position, width, height, 26, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        if (type == 167)
                        {
                            Gore.NewGore(base.position, base.velocity, 213, scale);
                            Gore.NewGore(base.position, base.velocity, 214, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 212,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 212,
                                scale);
                        }
                        else if (type == 197)
                        {
                            Gore.NewGore(base.position, base.velocity, 257, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 212,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 212,
                                scale);
                        }
                        else if (type == 481)
                        {
                            Gore.NewGore(base.position, base.velocity, 695, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 696,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 696,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 697,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 697,
                                scale);
                        }
                        else if (type == 201 || type == 450)
                        {
                            Gore.NewGore(base.position, base.velocity, 265, scale);
                            Gore.NewGore(base.position, base.velocity, 267, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 44, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 44, scale);
                        }
                        else if (type == 202 || type == 451)
                        {
                            Gore.NewGore(base.position, base.velocity, 268, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 44, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 44, scale);
                        }
                        else if (type == 203 || type == 452)
                        {
                            Gore.NewGore(base.position, base.velocity, 269, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 266,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 266,
                                scale);
                        }
                        else if (type == 322)
                        {
                            Gore.NewGore(base.position, base.velocity, 460, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 461,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 462,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 461,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 462,
                                scale);
                        }
                        else if (type == 323)
                        {
                            Gore.NewGore(base.position, base.velocity, 463, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 465,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 464,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 464,
                                scale);
                        }
                        else if (type == 324)
                        {
                            Gore.NewGore(base.position, base.velocity, 466, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 467,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 467,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 468,
                                scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 468,
                                scale);
                        }
                        else
                        {
                            Gore.NewGore(base.position, base.velocity, 42, scale);
                            if (type == 77)
                            {
                                Gore.NewGore(base.position, base.velocity, 106, scale);
                            }

                            if (type == 110)
                            {
                                Gore.NewGore(base.position, base.velocity, 130, scale);
                            }

                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
                            if (type == 110)
                            {
                                Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 131,
                                    scale);
                            }

                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 44, scale);
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 44, scale);
                        }
                    }
                }
                else if (type == 453)
                {
                    if (life > 0)
                    {
                        for (var num566 = 0; (double) num566 < dmg / (double) lifeMax * 50.0; num566++)
                        {
                            Dust.NewDust(base.position, width, height, 26, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num567 = 0; num567 < 20; num567++)
                        {
                            Dust.NewDust(base.position, width, height, 26, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        if (altTexture == 0)
                        {
                            Gore.NewGore(base.position, base.velocity, 638, scale);
                        }

                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 639, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 640, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 641, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 642, scale);
                    }
                }
                else if ((type >= 269 && type <= 276) || (type >= 281 && type <= 286))
                {
                    if (life > 0)
                    {
                        for (var num568 = 0; (double) num568 < dmg / (double) lifeMax * 50.0; num568++)
                        {
                            Dust.NewDust(base.position, width, height, 26, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num569 = 0; num569 < 20; num569++)
                        {
                            Dust.NewDust(base.position, width, height, 26, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 42, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 44, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 44, scale);
                        if (type == 269)
                        {
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 406,
                                scale);
                        }

                        if (type == 270)
                        {
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 407,
                                scale);
                        }

                        if (type == 271 || type == 272)
                        {
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 408,
                                scale);
                        }

                        if (type == 274)
                        {
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 409,
                                scale);
                        }

                        if (type == 276)
                        {
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 410,
                                scale);
                        }
                    }
                }
                else if (type >= 277 && type <= 280)
                {
                    if (life > 0)
                    {
                        for (var num570 = 0; (double) num570 < dmg / (double) lifeMax * 100.0; num570++)
                        {
                            var num571 = Dust.NewDust(base.position, width, height, 174, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            Main.dust[num571].scale = 1.1f;
                            Main.dust[num571].noGravity = true;
                        }
                    }
                    else
                    {
                        for (var num572 = 0; num572 < 75; num572++)
                        {
                            var num573 = Dust.NewDust(base.position, width, height, 174, 1.5f * (float) hitDirection,
                                -0.5f, 0, default(Color), 1f);
                            Main.dust[num573].velocity *= 2f;
                            Main.dust[num573].scale = 1.4f;
                            Main.dust[num573].noGravity = true;
                        }
                    }
                }
                else if (type == 341)
                {
                    var num574 = 196;
                    if (life > 0)
                    {
                        for (var num575 = 0; (double) num575 < dmg / (double) lifeMax * 50.0; num575++)
                        {
                            Dust.NewDust(base.position, width, height, num574, 0f, 0f, 0, default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num576 = 0; num576 < 20; num576++)
                        {
                            Dust.NewDust(base.position, width, height, num574, 0f, 0f, 0, default(Color), 1f);
                        }

                        var num577 = Gore.NewGore(new Vector2(base.position.X, base.position.Y - 10f),
                            new Vector2((float) hitDirection, 0f), 61, scale);
                        Main.gore[num577].velocity *= 0.3f;
                        num577 = Gore.NewGore(
                            new Vector2(base.position.X, base.position.Y + (float) (height / 2) - 10f),
                            new Vector2((float) hitDirection, 0f), 62, scale);
                        Main.gore[num577].velocity *= 0.3f;
                        num577 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float) height - 10f),
                            new Vector2((float) hitDirection, 0f), 63, scale);
                        Main.gore[num577].velocity *= 0.3f;
                    }
                }
                else if (type == 85)
                {
                    var num578 = 7;
                    if (ai[3] == 2f)
                    {
                        num578 = 10;
                    }

                    if (ai[3] == 3f)
                    {
                        num578 = 37;
                    }

                    if (life > 0)
                    {
                        for (var num579 = 0; (double) num579 < dmg / (double) lifeMax * 50.0; num579++)
                        {
                            Dust.NewDust(base.position, width, height, num578, 0f, 0f, 0, default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num580 = 0; num580 < 20; num580++)
                        {
                            Dust.NewDust(base.position, width, height, num578, 0f, 0f, 0, default(Color), 1f);
                        }

                        var num581 = Gore.NewGore(new Vector2(base.position.X, base.position.Y - 10f),
                            new Vector2((float) hitDirection, 0f), 61, scale);
                        Main.gore[num581].velocity *= 0.3f;
                        num581 = Gore.NewGore(
                            new Vector2(base.position.X, base.position.Y + (float) (height / 2) - 10f),
                            new Vector2((float) hitDirection, 0f), 62, scale);
                        Main.gore[num581].velocity *= 0.3f;
                        num581 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float) height - 10f),
                            new Vector2((float) hitDirection, 0f), 63, scale);
                        Main.gore[num581].velocity *= 0.3f;
                    }
                }
                else if (type == 473 || type == 474 || type == 475 || type == 476)
                {
                    var num582 = 31;
                    if (life > 0)
                    {
                        for (var num583 = 0; (double) num583 < dmg / (double) lifeMax * 50.0; num583++)
                        {
                            Dust.NewDust(base.position, width, height, num582, 0f, 0f, 0, default(Color), 1f);
                        }
                    }
                    else
                    {
                        for (var num584 = 0; num584 < 20; num584++)
                        {
                            Dust.NewDust(base.position, width, height, num582, 0f, 0f, 0, default(Color), 1f);
                        }

                        var num585 = Gore.NewGore(base.Center, new Vector2((float) hitDirection, 0f), 61, scale);
                        Main.gore[num585].velocity *= 0.3f;
                        num585 = Gore.NewGore(base.Center, new Vector2((float) hitDirection, 0f), 62, scale);
                        Main.gore[num585].velocity *= 0.3f;
                        num585 = Gore.NewGore(base.Center, new Vector2((float) hitDirection, 0f), 63, scale);
                        Main.gore[num585].velocity *= 0.3f;
                    }
                }
                else if (type == 169)
                {
                    if (life > 0)
                    {
                        for (var num586 = 0; (double) num586 < dmg / (double) lifeMax * 50.0; num586++)
                        {
                            var num587 = Dust.NewDust(base.position, width, height, 92, 0f, 0f, 0, default(Color),
                                1.5f);
                            Main.dust[num587].velocity *= 1.5f;
                            Main.dust[num587].noGravity = true;
                        }
                    }
                    else
                    {
                        for (var num588 = 0; num588 < 100; num588++)
                        {
                            var num589 = Dust.NewDust(base.position, width, height, 92, 0f, 0f, 0, default(Color),
                                1.5f);
                            Main.dust[num589].scale = 1.5f;
                            Main.dust[num589].velocity *= 2f;
                            Main.dust[num589].noGravity = true;
                        }
                    }
                }
                else if (type == 170 || type == 180)
                {
                    if (life > 0)
                    {
                        for (var num590 = 0; (double) num590 < dmg / (double) lifeMax * 50.0; num590++)
                        {
                            var num591 = Dust.NewDust(base.position, width, height, 54, 0f, 0f, 0, default(Color),
                                1.5f);
                            Main.dust[num591].velocity *= 1.5f;
                            Main.dust[num591].noGravity = true;
                        }
                    }
                    else
                    {
                        for (var num592 = 0; num592 < 10; num592++)
                        {
                            var num593 = Dust.NewDust(base.position, width, height, 54, 0f, 0f, 0, default(Color),
                                1.5f);
                            Main.dust[num593].velocity *= 2f;
                            Main.dust[num593].noGravity = true;
                        }

                        for (var num594 = 0; num594 < 4; num594++)
                        {
                            var num595 =
                                Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float) (height / 2) - 10f),
                                    new Vector2((float) hitDirection, 0f), 99, scale);
                            Main.gore[num595].velocity *= 0.3f;
                        }
                    }
                }
                else if (type == 171)
                {
                    if (life > 0)
                    {
                        for (var num596 = 0; (double) num596 < dmg / (double) lifeMax * 50.0; num596++)
                        {
                            var num597 = Dust.NewDust(base.position, width, height, 16, 0f, 0f, 0, default(Color),
                                1.5f);
                            Main.dust[num597].velocity *= 1.5f;
                            Main.dust[num597].noGravity = true;
                        }
                    }
                    else
                    {
                        for (var num598 = 0; num598 < 10; num598++)
                        {
                            var num599 = Dust.NewDust(base.position, width, height, 16, 0f, 0f, 0, default(Color),
                                1.5f);
                            Main.dust[num599].velocity *= 2f;
                            Main.dust[num599].noGravity = true;
                        }

                        for (var num600 = 0; num600 < 4; num600++)
                        {
                            var num601 = 11 + num600;
                            if (num601 > 13)
                            {
                                num601 = Main.rand.Next(11, 14);
                            }

                            var num602 =
                                Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float) (height / 2) - 10f),
                                    new Vector2((float) hitDirection, 0f), num601, scale);
                            Main.gore[num602].velocity *= 0.3f;
                        }
                    }
                }
                else if (type == 290)
                {
                    if (life <= 0)
                    {
                        for (var num603 = 0; num603 < 10; num603++)
                        {
                            var num604 = Dust.NewDust(base.position, width, height, 16, 0f, 0f, 0, default(Color),
                                1.5f);
                            Main.dust[num604].velocity *= 2f;
                            Main.dust[num604].noGravity = true;
                        }

                        var num605 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                            Main.rand.Next(11, 14), scale);
                        Main.gore[num605].velocity *= 0.5f;
                        num605 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), default(Vector2),
                            Main.rand.Next(11, 14), scale);
                        Main.gore[num605].velocity *= 0.5f;
                        num605 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + 40f), default(Vector2),
                            Main.rand.Next(11, 14), scale);
                        Main.gore[num605].velocity *= 0.5f;
                    }
                }
                else if (type >= 87 && type <= 92)
                {
                    if (life > 0)
                    {
                        for (var num606 = 0; (double) num606 < dmg / (double) lifeMax * 50.0; num606++)
                        {
                            var num607 = Dust.NewDust(base.position, width, height, 16, 0f, 0f, 0, default(Color),
                                1.5f);
                            Main.dust[num607].velocity *= 1.5f;
                            Main.dust[num607].noGravity = true;
                        }
                    }
                    else
                    {
                        for (var num608 = 0; num608 < 10; num608++)
                        {
                            var num609 = Dust.NewDust(base.position, width, height, 16, 0f, 0f, 0, default(Color),
                                1.5f);
                            Main.dust[num609].velocity *= 2f;
                            Main.dust[num609].noGravity = true;
                        }

                        var num610 = Main.rand.Next(1, 4);
                        for (var num611 = 0; num611 < num610; num611++)
                        {
                            var num612 =
                                Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float) (height / 2) - 10f),
                                    new Vector2((float) hitDirection, 0f), Main.rand.Next(11, 14), scale);
                            Main.gore[num612].velocity *= 0.8f;
                        }
                    }
                }
                else if (type == 78 || type == 79 || type == 80)
                {
                    if (life > 0)
                    {
                        for (var num613 = 0; (double) num613 < dmg / (double) lifeMax * 50.0; num613++)
                        {
                            var num614 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 0, default(Color),
                                1.5f);
                            Main.dust[num614].velocity *= 2f;
                            Main.dust[num614].noGravity = true;
                        }
                    }
                    else
                    {
                        for (var num615 = 0; num615 < 20; num615++)
                        {
                            var num616 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 0, default(Color),
                                1.5f);
                            Main.dust[num616].velocity *= 2f;
                            Main.dust[num616].noGravity = true;
                        }

                        var num617 = Gore.NewGore(new Vector2(base.position.X, base.position.Y - 10f),
                            new Vector2((float) hitDirection, 0f), 61, scale);
                        Main.gore[num617].velocity *= 0.3f;
                        num617 = Gore.NewGore(
                            new Vector2(base.position.X, base.position.Y + (float) (height / 2) - 10f),
                            new Vector2((float) hitDirection, 0f), 62, scale);
                        Main.gore[num617].velocity *= 0.3f;
                        num617 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float) height - 10f),
                            new Vector2((float) hitDirection, 0f), 63, scale);
                        Main.gore[num617].velocity *= 0.3f;
                    }
                }
                else if (type == 82 || type == 158 || type == 159 || type == 250 || type == 253)
                {
                    if (life > 0)
                    {
                        for (var num618 = 0; (double) num618 < dmg / (double) lifeMax * 50.0; num618++)
                        {
                            var num619 = Dust.NewDust(base.position, width, height, 54, 0f, 0f, 50, default(Color),
                                1.5f);
                            Main.dust[num619].velocity *= 2f;
                            Main.dust[num619].noGravity = true;
                        }
                    }
                    else
                    {
                        for (var num620 = 0; num620 < 20; num620++)
                        {
                            var num621 = Dust.NewDust(base.position, width, height, 54, 0f, 0f, 50, default(Color),
                                1.5f);
                            Main.dust[num621].velocity *= 2f;
                            Main.dust[num621].noGravity = true;
                        }

                        var num622 = Gore.NewGore(new Vector2(base.position.X, base.position.Y - 10f),
                            new Vector2((float) hitDirection, 0f), 99, scale);
                        Main.gore[num622].velocity *= 0.3f;
                        num622 = Gore.NewGore(
                            new Vector2(base.position.X, base.position.Y + (float) (height / 2) - 15f),
                            new Vector2((float) hitDirection, 0f), 99, scale);
                        Main.gore[num622].velocity *= 0.3f;
                        num622 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float) height - 20f),
                            new Vector2((float) hitDirection, 0f), 99, scale);
                        Main.gore[num622].velocity *= 0.3f;
                    }
                }
                else if (type == 316 || type == 330)
                {
                    if (life > 0)
                    {
                        for (var num623 = 0; (double) num623 < dmg / (double) lifeMax * 100.0; num623++)
                        {
                            var num624 = Dust.NewDust(base.position, width, height, 192, (float) hitDirection, -1f, 100,
                                new Color(100, 100, 100, 100), 1f);
                            Main.dust[num624].noGravity = true;
                        }
                    }
                    else
                    {
                        for (var num625 = 0; num625 < 50; num625++)
                        {
                            var num626 = Dust.NewDust(base.position, width, height, 192, (float) (2 * hitDirection),
                                -2f, 100, new Color(100, 100, 100, 100), 1f);
                            Main.dust[num626].noGravity = true;
                        }
                    }
                }
                else if (type == 315)
                {
                    if (life > 0)
                    {
                        for (var num627 = 0; (double) num627 < dmg / (double) lifeMax * 50.0; num627++)
                        {
                            var num628 = Dust.NewDust(base.position, width, height, 54, 0f, 0f, 50, default(Color),
                                1.5f);
                            Main.dust[num628].velocity *= 2f;
                            Main.dust[num628].noGravity = true;
                        }
                    }
                    else
                    {
                        for (var num629 = 0; num629 < 20; num629++)
                        {
                            var num630 = Dust.NewDust(base.position, width, height, 54, 0f, 0f, 50, default(Color),
                                1.5f);
                            Main.dust[num630].velocity *= 2f;
                            Main.dust[num630].noGravity = true;
                        }

                        var num631 = Gore.NewGore(new Vector2(base.position.X, base.position.Y - 10f),
                            new Vector2((float) hitDirection, 0f), 99, scale);
                        Main.gore[num631].velocity *= 0.3f;
                        num631 = Gore.NewGore(
                            new Vector2(base.position.X, base.position.Y + (float) (height / 2) - 15f),
                            new Vector2((float) hitDirection, 0f), 99, scale);
                        Main.gore[num631].velocity *= 0.3f;
                        num631 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float) height - 20f),
                            new Vector2((float) hitDirection, 0f), 99, scale);
                        Main.gore[num631].velocity *= 0.3f;
                        num631 = Gore.NewGore(new Vector2(base.position.X, base.position.Y),
                            new Vector2((float) hitDirection, 0f), 446, scale);
                        Main.gore[num631].velocity *= 0.1f;
                    }
                }
                else if (type == 254 || type == 255 || type == 256 || type == 257 || type == 258 || type == 259 ||
                         type == 260 || type == 261)
                {
                    if (life > 0)
                    {
                        for (var num632 = 0; (double) num632 < dmg / (double) lifeMax * 50.0; num632++)
                        {
                            var num633 = Dust.NewDust(base.position, width, height, 165, 0f, 0f, 50, default(Color),
                                1.5f);
                            Main.dust[num633].velocity *= 2f;
                            Main.dust[num633].noGravity = true;
                        }
                    }
                    else
                    {
                        for (var num634 = 0; num634 < 20; num634++)
                        {
                            var num635 = Dust.NewDust(base.position, width, height, 165, 0f, 0f, 50, default(Color),
                                1.5f);
                            Main.dust[num635].velocity *= 2f;
                            Main.dust[num635].noGravity = true;
                        }

                        if (type != 261)
                        {
                            var num636 = Gore.NewGore(new Vector2(base.position.X, base.position.Y - 10f),
                                new Vector2((float) hitDirection, 0f), 375, scale);
                            Main.gore[num636].velocity *= 0.3f;
                            num636 = Gore.NewGore(
                                new Vector2(base.position.X, base.position.Y + (float) (height / 2) - 15f),
                                new Vector2((float) hitDirection, 0f), 376, scale);
                            Main.gore[num636].velocity *= 0.3f;
                            num636 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float) height - 20f),
                                new Vector2((float) hitDirection, 0f), 377, scale);
                            Main.gore[num636].velocity *= 0.3f;
                        }
                    }
                }
                else if (type == 140)
                {
                    if (life <= 0)
                    {
                        for (var num637 = 0; num637 < 20; num637++)
                        {
                            var num638 = Dust.NewDust(base.position, width, height, 54, 0f, 0f, 50, default(Color),
                                1.5f);
                            Main.dust[num638].velocity *= 2f;
                            Main.dust[num638].noGravity = true;
                        }

                        var num639 = Gore.NewGore(new Vector2(base.position.X, base.position.Y - 10f),
                            new Vector2((float) hitDirection, 0f), 99, scale);
                        Main.gore[num639].velocity *= 0.3f;
                        num639 = Gore.NewGore(
                            new Vector2(base.position.X, base.position.Y + (float) (height / 2) - 15f),
                            new Vector2((float) hitDirection, 0f), 99, scale);
                        Main.gore[num639].velocity *= 0.3f;
                        num639 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float) height - 20f),
                            new Vector2((float) hitDirection, 0f), 99, scale);
                        Main.gore[num639].velocity *= 0.3f;
                    }
                }
                else if (type == 39 || type == 40 || type == 41)
                {
                    if (life > 0)
                    {
                        for (var num640 = 0; (double) num640 < dmg / (double) lifeMax * 50.0; num640++)
                        {
                            Dust.NewDust(base.position, width, height, 26, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num641 = 0; num641 < 20; num641++)
                        {
                            Dust.NewDust(base.position, width, height, 26, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, type - 39 + 67, 1f);
                    }
                }
                else if (type == 34)
                {
                    if (life > 0)
                    {
                        for (var num642 = 0; (double) num642 < dmg / (double) lifeMax * 30.0; num642++)
                        {
                            var num643 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 15,
                                (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color),
                                1.8f);
                            Main.dust[num643].noLight = true;
                            Main.dust[num643].noGravity = true;
                            Main.dust[num643].velocity *= 1.3f;
                            num643 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 26,
                                (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 0, default(Color), 0.9f);
                            Main.dust[num643].noLight = true;
                            Main.dust[num643].velocity *= 1.3f;
                        }
                    }
                    else
                    {
                        for (var num644 = 0; num644 < 15; num644++)
                        {
                            var num645 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 15,
                                (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color),
                                1.8f);
                            Main.dust[num645].noLight = true;
                            Main.dust[num645].noGravity = true;
                            Main.dust[num645].velocity *= 1.3f;
                            num645 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 26,
                                (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 0, default(Color), 0.9f);
                            Main.dust[num645].noLight = true;
                            Main.dust[num645].velocity *= 1.3f;
                        }
                    }
                }
                else if (type == 289)
                {
                    if (life > 0)
                    {
                        for (var num646 = 0; (double) num646 < dmg / (double) lifeMax * 30.0; num646++)
                        {
                            var num647 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 181,
                                (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color),
                                1.8f);
                            Main.dust[num647].noLight = true;
                            Main.dust[num647].noGravity = true;
                            Main.dust[num647].velocity *= 1.3f;
                        }
                    }
                    else
                    {
                        for (var num648 = 0; num648 < 50; num648++)
                        {
                            var num649 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 181,
                                (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color),
                                1.8f);
                            Main.dust[num649].noLight = true;
                            Main.dust[num649].noGravity = true;
                            Main.dust[num649].velocity *= 1.3f;
                        }
                    }
                }
                else if (type == 35 || type == 36)
                {
                    if (life > 0)
                    {
                        for (var num650 = 0; (double) num650 < dmg / (double) lifeMax * 100.0; num650++)
                        {
                            Dust.NewDust(base.position, width, height, 26, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num651 = 0; num651 < 150; num651++)
                        {
                            Dust.NewDust(base.position, width, height, 26, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        if (type == 35)
                        {
                            Gore.NewGore(base.position, base.velocity, 54, 1f);
                            Gore.NewGore(base.position, base.velocity, 55, 1f);
                        }
                        else
                        {
                            Gore.NewGore(base.position, base.velocity, 56, 1f);
                            Gore.NewGore(base.position, base.velocity, 57, 1f);
                            Gore.NewGore(base.position, base.velocity, 57, 1f);
                            Gore.NewGore(base.position, base.velocity, 57, 1f);
                        }
                    }
                }
                else if (type == 139)
                {
                    if (life <= 0)
                    {
                        for (var num652 = 0; num652 < 10; num652++)
                        {
                            var num653 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31,
                                0f, 0f, 100, default(Color), 1.5f);
                            Main.dust[num653].velocity *= 1.4f;
                        }

                        for (var num654 = 0; num654 < 5; num654++)
                        {
                            var num655 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6,
                                0f, 0f, 100, default(Color), 2.5f);
                            Main.dust[num655].noGravity = true;
                            Main.dust[num655].velocity *= 5f;
                            num655 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f,
                                0f, 100, default(Color), 1.5f);
                            Main.dust[num655].velocity *= 3f;
                        }

                        var num656 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[num656].velocity *= 0.4f;
                        Main.gore[num656].velocity.X += 1f;
                        Main.gore[num656].velocity.Y += 1f;
                        num656 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[num656].velocity *= 0.4f;
                        Main.gore[num656].velocity.X -= 1f;
                        Main.gore[num656].velocity.Y += 1f;
                        num656 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[num656].velocity *= 0.4f;
                        Main.gore[num656].velocity.X += 1f;
                        Main.gore[num656].velocity.Y -= 1f;
                        num656 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[num656].velocity *= 0.4f;
                        Main.gore[num656].velocity.X -= 1f;
                        Main.gore[num656].velocity.Y -= 1f;
                    }
                }
                else if (type == 467)
                {
                    if (life <= 0)
                    {
                        for (var num657 = 0; num657 < 7; num657++)
                        {
                            var num658 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31,
                                0f, 0f, 100, default(Color), 1.5f);
                            Main.dust[num658].velocity *= 1.4f;
                        }

                        for (var num659 = 0; num659 < 3; num659++)
                        {
                            var num660 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6,
                                0f, 0f, 100, default(Color), 2.5f);
                            Main.dust[num660].noGravity = true;
                            Main.dust[num660].velocity *= 5f;
                            num660 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f,
                                0f, 100, default(Color), 1.5f);
                            Main.dust[num660].velocity *= 3f;
                        }

                        Gore.NewGore(base.position, base.velocity, 660, 1f);
                        Gore.NewGore(base.position, base.velocity, 660, 1f);
                    }
                }
                else if (type >= 134 && type <= 136)
                {
                    if (type == 135 && life > 0 && Main.netMode != 1 && ai[2] == 0f && Main.rand.Next(25) == 0)
                    {
                        ai[2] = 1f;
                        var num661 = NewNPC((int) (base.position.X + (float) (width / 2)),
                            (int) (base.position.Y + (float) height), 139, 0, 0f, 0f, 0f, 0f, 255);
                        if (Main.netMode == 2 && num661 < 200)
                        {
                            NetMessage.SendData(23, -1, -1, null, num661, 0f, 0f, 0f, 0, 0, 0);
                        }

                        netUpdate = true;
                    }

                    if (life <= 0)
                    {
                        Gore.NewGore(base.position, base.velocity, 156, 1f);
                        if (Main.rand.Next(2) == 0)
                        {
                            for (var num662 = 0; num662 < 10; num662++)
                            {
                                var num663 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height,
                                    31, 0f, 0f, 100, default(Color), 1.5f);
                                Main.dust[num663].velocity *= 1.4f;
                            }

                            for (var num664 = 0; num664 < 5; num664++)
                            {
                                var num665 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height,
                                    6, 0f, 0f, 100, default(Color), 2.5f);
                                Main.dust[num665].noGravity = true;
                                Main.dust[num665].velocity *= 5f;
                                num665 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6,
                                    0f, 0f, 100, default(Color), 1.5f);
                                Main.dust[num665].velocity *= 3f;
                            }

                            var num666 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                                Main.rand.Next(61, 64), 1f);
                            Main.gore[num666].velocity *= 0.4f;
                            Main.gore[num666].velocity.X += 1f;
                            Main.gore[num666].velocity.Y += 1f;
                            num666 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                                Main.rand.Next(61, 64), 1f);
                            Main.gore[num666].velocity *= 0.4f;
                            Main.gore[num666].velocity.X -= 1f;
                            Main.gore[num666].velocity.Y += 1f;
                            num666 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                                Main.rand.Next(61, 64), 1f);
                            Main.gore[num666].velocity *= 0.4f;
                            Main.gore[num666].velocity.X += 1f;
                            Main.gore[num666].velocity.Y -= 1f;
                            num666 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                                Main.rand.Next(61, 64), 1f);
                            Main.gore[num666].velocity *= 0.4f;
                            Main.gore[num666].velocity.X -= 1f;
                            Main.gore[num666].velocity.Y -= 1f;
                        }
                    }
                }
                else if (type == 347)
                {
                    if (life <= 0)
                    {
                        Gore.NewGore(base.position, base.velocity, 524, 1f);
                        Gore.NewGore(base.position, base.velocity, 525, 1f);
                        Gore.NewGore(base.position, base.velocity, 526, 1f);
                        Gore.NewGore(base.position, base.velocity, 527, 1f);
                        for (var num667 = 0; num667 < 7; num667++)
                        {
                            var num668 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31,
                                0f, 0f, 100, default(Color), 1.5f);
                            Main.dust[num668].velocity *= 1.4f;
                        }

                        for (var num669 = 0; num669 < 4; num669++)
                        {
                            var num670 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6,
                                0f, 0f, 100, default(Color), 2.5f);
                            Main.dust[num670].noGravity = true;
                            Main.dust[num670].velocity *= 5f;
                            num670 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f,
                                0f, 100, default(Color), 1.5f);
                            Main.dust[num670].velocity *= 3f;
                        }

                        var num671 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[num671].velocity *= 0.4f;
                        Main.gore[num671].velocity.X += 1f;
                        Main.gore[num671].velocity.Y += 1f;
                        num671 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[num671].velocity *= 0.4f;
                        Main.gore[num671].velocity.X -= 1f;
                        Main.gore[num671].velocity.Y -= 1f;
                    }
                }
                else if (type == 346)
                {
                    if (life <= 0)
                    {
                        Gore.NewGore(base.position, base.velocity, 518, 1f);
                        Gore.NewGore(base.position, base.velocity, 519, 1f);
                        Gore.NewGore(base.position, base.velocity, 520, 1f);
                        Gore.NewGore(base.position, base.velocity, 521, 1f);
                        Gore.NewGore(base.position, base.velocity, 522, 1f);
                        Gore.NewGore(base.position, base.velocity, 523, 1f);
                        for (var num672 = 0; num672 < 10; num672++)
                        {
                            var num673 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31,
                                0f, 0f, 100, default(Color), 1.5f);
                            Main.dust[num673].velocity *= 1.4f;
                        }

                        for (var num674 = 0; num674 < 5; num674++)
                        {
                            var num675 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6,
                                0f, 0f, 100, default(Color), 2.5f);
                            Main.dust[num675].noGravity = true;
                            Main.dust[num675].velocity *= 5f;
                            num675 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f,
                                0f, 100, default(Color), 1.5f);
                            Main.dust[num675].velocity *= 3f;
                        }

                        var num676 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[num676].velocity *= 0.4f;
                        Main.gore[num676].velocity.X += 1f;
                        Main.gore[num676].velocity.Y += 1f;
                        num676 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[num676].velocity *= 0.4f;
                        Main.gore[num676].velocity.X -= 1f;
                        Main.gore[num676].velocity.Y += 1f;
                        num676 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[num676].velocity *= 0.4f;
                        Main.gore[num676].velocity.X += 1f;
                        Main.gore[num676].velocity.Y -= 1f;
                        num676 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[num676].velocity *= 0.4f;
                        Main.gore[num676].velocity.X -= 1f;
                        Main.gore[num676].velocity.Y -= 1f;
                    }
                }
                else if (type == 127)
                {
                    if (life <= 0)
                    {
                        Gore.NewGore(base.position, base.velocity, 149, 1f);
                        Gore.NewGore(base.position, base.velocity, 150, 1f);
                        for (var num677 = 0; num677 < 10; num677++)
                        {
                            var num678 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31,
                                0f, 0f, 100, default(Color), 1.5f);
                            Main.dust[num678].velocity *= 1.4f;
                        }

                        for (var num679 = 0; num679 < 5; num679++)
                        {
                            var num680 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6,
                                0f, 0f, 100, default(Color), 2.5f);
                            Main.dust[num680].noGravity = true;
                            Main.dust[num680].velocity *= 5f;
                            num680 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f,
                                0f, 100, default(Color), 1.5f);
                            Main.dust[num680].velocity *= 3f;
                        }

                        var num681 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[num681].velocity *= 0.4f;
                        Main.gore[num681].velocity.X += 1f;
                        Main.gore[num681].velocity.Y += 1f;
                        num681 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[num681].velocity *= 0.4f;
                        Main.gore[num681].velocity.X -= 1f;
                        Main.gore[num681].velocity.Y += 1f;
                        num681 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[num681].velocity *= 0.4f;
                        Main.gore[num681].velocity.X += 1f;
                        Main.gore[num681].velocity.Y -= 1f;
                        num681 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[num681].velocity *= 0.4f;
                        Main.gore[num681].velocity.X -= 1f;
                        Main.gore[num681].velocity.Y -= 1f;
                    }
                }
                else if (type >= 128 && type <= 131)
                {
                    if (life <= 0)
                    {
                        Gore.NewGore(base.position, base.velocity, 147, 1f);
                        Gore.NewGore(base.position, base.velocity, 148, 1f);
                        for (var num682 = 0; num682 < 10; num682++)
                        {
                            var num683 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31,
                                0f, 0f, 100, default(Color), 1.5f);
                            Main.dust[num683].velocity *= 1.4f;
                        }

                        for (var num684 = 0; num684 < 5; num684++)
                        {
                            var num685 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6,
                                0f, 0f, 100, default(Color), 2.5f);
                            Main.dust[num685].noGravity = true;
                            Main.dust[num685].velocity *= 5f;
                            num685 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f,
                                0f, 100, default(Color), 1.5f);
                            Main.dust[num685].velocity *= 3f;
                        }

                        var num686 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[num686].velocity *= 0.4f;
                        Main.gore[num686].velocity.X += 1f;
                        Main.gore[num686].velocity.Y += 1f;
                        num686 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[num686].velocity *= 0.4f;
                        Main.gore[num686].velocity.X -= 1f;
                        Main.gore[num686].velocity.Y += 1f;
                        num686 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[num686].velocity *= 0.4f;
                        Main.gore[num686].velocity.X += 1f;
                        Main.gore[num686].velocity.Y -= 1f;
                        num686 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[num686].velocity *= 0.4f;
                        Main.gore[num686].velocity.X -= 1f;
                        Main.gore[num686].velocity.Y -= 1f;
                    }
                }
                else if (type == 23)
                {
                    if (life > 0)
                    {
                        for (var num687 = 0; (double) num687 < dmg / (double) lifeMax * 100.0; num687++)
                        {
                            var num688 = 25;
                            if (Main.rand.Next(2) == 0)
                            {
                                num688 = 6;
                            }

                            Dust.NewDust(base.position, width, height, num688, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            var num689 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6,
                                base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
                            Main.dust[num689].noGravity = true;
                        }
                    }
                    else
                    {
                        for (var num690 = 0; num690 < 50; num690++)
                        {
                            var num691 = 25;
                            if (Main.rand.Next(2) == 0)
                            {
                                num691 = 6;
                            }

                            Dust.NewDust(base.position, width, height, num691, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        for (var num692 = 0; num692 < 50; num692++)
                        {
                            var num693 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6,
                                base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2.5f);
                            Main.dust[num693].velocity *= 6f;
                            Main.dust[num693].noGravity = true;
                        }
                    }
                }
                else if (type == 24)
                {
                    if (life > 0)
                    {
                        for (var num694 = 0; (double) num694 < dmg / (double) lifeMax * 100.0; num694++)
                        {
                            var num695 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6,
                                base.velocity.X, base.velocity.Y, 100, default(Color), 2.5f);
                            Main.dust[num695].noGravity = true;
                        }
                    }
                    else
                    {
                        for (var num696 = 0; num696 < 50; num696++)
                        {
                            var num697 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6,
                                base.velocity.X, base.velocity.Y, 100, default(Color), 2.5f);
                            Main.dust[num697].noGravity = true;
                            Main.dust[num697].velocity *= 2f;
                        }

                        Gore.NewGore(base.position, base.velocity, 45, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 46, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 46, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 47, 1f);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 47, 1f);
                    }
                }
                else if (type == 25)
                {
                    Main.PlaySound(SoundID.Item10, base.position);
                    for (var num698 = 0; num698 < 20; num698++)
                    {
                        var num699 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6,
                            (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 2f);
                        Main.dust[num699].noGravity = true;
                        Main.dust[num699].velocity *= 2f;
                        num699 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6,
                            (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 1f);
                        Main.dust[num699].velocity *= 2f;
                    }
                }
                else if (type == 33)
                {
                    Main.PlaySound(SoundID.Item10, base.position);
                    for (var num700 = 0; num700 < 20; num700++)
                    {
                        var num701 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 172,
                            (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 1.2f);
                        Main.dust[num701].noGravity = true;
                        Main.dust[num701].velocity *= 2f;
                        num701 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 172,
                            (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 0.6f);
                        Main.dust[num701].velocity *= 2f;
                    }
                }
                else if (type == 26 || type == 27 || type == 28 || type == 29 || type == 73 || type == 111)
                {
                    if (life > 0)
                    {
                        for (var num702 = 0; (double) num702 < dmg / (double) lifeMax * 100.0; num702++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num703 = 0; num703 < 50; num703++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        var num704 = 48;
                        var num705 = 49;
                        var num706 = 50;
                        if (type == 111)
                        {
                            num704 = 623;
                            num705 = 624;
                            num706 = 625;
                        }
                        else if (type == 26)
                        {
                            num704 = 626;
                            num705 = 627;
                            num706 = 628;
                        }
                        else if (type == 73)
                        {
                            num704 = 629;
                            num705 = 630;
                            num706 = 631;
                        }
                        else if (type == 27)
                        {
                            num704 = 632;
                            num705 = 633;
                            num706 = 634;
                        }
                        else if (type == 28)
                        {
                            num704 = 635;
                            num705 = 636;
                            num706 = 637;
                        }

                        Gore.NewGore(base.position, base.velocity, num704, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num705, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num705, scale);
                        if (type == 111)
                        {
                            Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 131,
                                scale);
                        }

                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, num706, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, num706, scale);
                    }
                }
                else if (type == 471)
                {
                    if (life > 0)
                    {
                        for (var num707 = 0; (double) num707 < dmg / (double) lifeMax * 100.0; num707++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num708 = 0; num708 < 50; num708++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 675, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 676, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 677, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 678, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 678, scale);
                    }
                }
                else if (type == 472)
                {
                    if (life > 0)
                    {
                        for (var num709 = 0; (double) num709 < dmg / (double) lifeMax * 100.0; num709++)
                        {
                            var num710 = Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0,
                                default(Color), 1f);
                            if (Main.rand.Next(3) != 0)
                            {
                                Main.dust[num710].noGravity = true;
                            }

                            Main.dust[num710].alpha = 100;
                        }
                    }
                    else
                    {
                        for (var num711 = 0; num711 < 50; num711++)
                        {
                            var num712 = Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection,
                                -2.5f, 0, default(Color), 1f);
                            if (Main.rand.Next(3) != 0)
                            {
                                Main.dust[num712].noGravity = true;
                            }

                            Main.dust[num712].alpha = 100;
                        }

                        Gore.NewGore(base.position, base.velocity, 679, scale);
                        Gore.NewGore(base.position, base.velocity, 680, scale);
                    }
                }
                else if (type == 480)
                {
                    if (life > 0)
                    {
                        for (var num713 = 0; (double) num713 < dmg / (double) lifeMax * 100.0; num713++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num714 = 0; num714 < 50; num714++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 692, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 693, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 693, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 694, scale);
                        Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 694, scale);
                    }
                }
                else if (type == 185)
                {
                    if (life > 0)
                    {
                        for (var num715 = 0; (double) num715 < dmg / (double) lifeMax * 100.0; num715++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num716 = 0; num716 < 50; num716++)
                        {
                            Dust.NewDust(base.position, width, height, 5, 2.5f * (float) hitDirection, -2.5f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 240, scale);
                    }
                }
                else if (type == 30)
                {
                    Main.PlaySound(SoundID.Item10, base.position);
                    for (var num717 = 0; num717 < 20; num717++)
                    {
                        var num718 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 27,
                            (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 2f);
                        Main.dust[num718].noGravity = true;
                        Main.dust[num718].velocity *= 2f;
                        num718 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 27,
                            (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 1f);
                        Main.dust[num718].velocity *= 2f;
                    }
                }
                else if (type == 42 || type == 176 || type == 205 || (type >= 231 && type <= 235))
                {
                    if (life > 0)
                    {
                        for (var num719 = 0; (double) num719 < dmg / (double) lifeMax * 100.0; num719++)
                        {
                            Dust.NewDust(base.position, width, height, 18, (float) hitDirection, -1f, alpha, this.color,
                                scale);
                        }
                    }
                    else
                    {
                        for (var num720 = 0; num720 < 50; num720++)
                        {
                            Dust.NewDust(base.position, width, height, 18, (float) hitDirection, -2f, alpha, this.color,
                                scale);
                        }

                        if (type == 205)
                        {
                            Gore.NewGore(base.position, base.velocity, 270, scale);
                            Gore.NewGore(base.position, base.velocity, 271, scale);
                            Gore.NewGore(base.position, base.velocity, 271, scale);
                            Gore.NewGore(base.position, base.velocity, 272, scale);
                        }
                        else if (type == 176)
                        {
                            Gore.NewGore(base.position, base.velocity, 229, scale);
                            Gore.NewGore(base.position, base.velocity, 230, scale);
                        }
                        else
                        {
                            Gore.NewGore(base.position, base.velocity, 70, scale);
                            Gore.NewGore(base.position, base.velocity, 71, scale);
                        }
                    }
                }
                else if (type == 43 || type == 56)
                {
                    if (life > 0)
                    {
                        for (var num721 = 0; (double) num721 < dmg / (double) lifeMax * 100.0; num721++)
                        {
                            Dust.NewDust(base.position, width, height, 40, (float) hitDirection, -1f, alpha, this.color,
                                1.2f);
                        }
                    }
                    else
                    {
                        for (var num722 = 0; num722 < 50; num722++)
                        {
                            Dust.NewDust(base.position, width, height, 40, (float) hitDirection, -2f, alpha, this.color,
                                1.2f);
                        }

                        Gore.NewGore(base.position, base.velocity, 72, 1f);
                        Gore.NewGore(base.position, base.velocity, 72, 1f);
                    }
                }
                else if (type == 175)
                {
                    if (life > 0)
                    {
                        for (var num723 = 0; (double) num723 < dmg / (double) lifeMax * 100.0; num723++)
                        {
                            Dust.NewDust(base.position, width, height, 40, (float) hitDirection, -1f, alpha, this.color,
                                1.2f);
                        }
                    }
                    else
                    {
                        for (var num724 = 0; num724 < 50; num724++)
                        {
                            Dust.NewDust(base.position, width, height, 40, (float) hitDirection, -2f, alpha, this.color,
                                1.2f);
                        }

                        Gore.NewGore(base.position, base.velocity, 227, 1f);
                        Gore.NewGore(base.position, base.velocity, 228, 1f);
                    }
                }
                else if (type == 48)
                {
                    if (life > 0)
                    {
                        for (var num725 = 0; (double) num725 < dmg / (double) lifeMax * 100.0; num725++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num726 = 0; num726 < 50; num726++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 80, 1f);
                        Gore.NewGore(base.position, base.velocity, 81, 1f);
                    }
                }
                else if (type == 62 || type == 66)
                {
                    if (life > 0)
                    {
                        for (var num727 = 0; (double) num727 < dmg / (double) lifeMax * 100.0; num727++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num728 = 0; num728 < 50; num728++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 93, 1f);
                        Gore.NewGore(base.position, base.velocity, 94, 1f);
                        Gore.NewGore(base.position, base.velocity, 94, 1f);
                    }
                }
                else if (type == 156)
                {
                    if (life > 0)
                    {
                        for (var num729 = 0; (double) num729 < dmg / (double) lifeMax * 100.0; num729++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) hitDirection, -1f, 0, default(Color),
                                1f);
                        }
                    }
                    else
                    {
                        for (var num730 = 0; num730 < 50; num730++)
                        {
                            Dust.NewDust(base.position, width, height, 5, (float) (2 * hitDirection), -2f, 0,
                                default(Color), 1f);
                        }

                        Gore.NewGore(base.position, base.velocity, 184, 1f);
                        Gore.NewGore(base.position, base.velocity, 185, 1f);
                        Gore.NewGore(base.position, base.velocity, 185, 1f);
                    }
                }
            }
        }


        public static int CountNPCS(int Type)
        {
            var num = 0;
            for (var index = 0; index < 200; ++index)
            {
                if (Main.npc[index].active && Main.npc[index].type == Type)
                    ++num;
            }

            return num;
        }

        public static bool AnyNPCs(int Type)
        {
            for (var index = 0; index < 200; ++index)
            {
                if (Main.npc[index].active && Main.npc[index].type == Type)
                    return true;
            }

            return false;
        }

        public static int FindFirstNPC(int Type)
        {
            for (var index = 0; index < 200; ++index)
            {
                if (Main.npc[index].active && Main.npc[index].type == Type)
                    return index;
            }

            return -1;
        }

        public static bool NearSpikeBall(int x, int y)
        {
            var rectangle1 =
                new Microsoft.Xna.Framework.Rectangle(x * 16 - 300, y * 16 - 300, 600, 600);
            for (var index = 0; index < 200; ++index)
            {
                if (Main.npc[index].active && Main.npc[index].aiStyle == 20)
                {
                    var rectangle2 =
                        new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].ai[1], (int) Main.npc[index].ai[2],
                            20, 20);
                    if (rectangle1.Intersects(rectangle2))
                        return true;
                }
            }

            return false;
        }

        public int FindBuffIndex(int type)
        {
            if (this.buffImmune[type])
                return -1;
            for (var index = 0; index < 5; ++index)
            {
                if (this.buffTime[index] >= 1 && this.buffType[index] == type)
                    return index;
            }

            return -1;
        }

        public void AddBuff(int type, int time, bool quiet = false)
        {
            if (this.buffImmune[type])
                return;
            if (!quiet)
            {
                switch (Main.netMode)
                {
                    case 1:
                        NetMessage.SendData(53, -1, -1, (NetworkText) null, this.whoAmI, (float) type, (float) time,
                            0.0f, 0, 0, 0);
                        break;
                    case 2:
                        NetMessage.SendData(54, -1, -1, (NetworkText) null, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                }
            }

            var index1 = -1;
            for (var index2 = 0; index2 < 5; ++index2)
            {
                if (this.buffType[index2] == type)
                {
                    if (this.buffTime[index2] >= time)
                        return;
                    this.buffTime[index2] = time;
                    return;
                }
            }

            while (index1 == -1)
            {
                var b = -1;
                for (var index2 = 0; index2 < 5; ++index2)
                {
                    if (!Main.debuff[this.buffType[index2]])
                    {
                        b = index2;
                        break;
                    }
                }

                if (b == -1)
                    return;
                for (var index2 = b; index2 < 5; ++index2)
                {
                    if (this.buffType[index2] == 0)
                    {
                        index1 = index2;
                        break;
                    }
                }

                if (index1 == -1)
                    this.DelBuff(b);
            }

            this.buffType[index1] = type;
            this.buffTime[index1] = time;
        }

        public void DelBuff(int b)
        {
            this.buffTime[b] = 0;
            this.buffType[b] = 0;
            for (var index1 = 0; index1 < 4; ++index1)
            {
                if (this.buffTime[index1] == 0 || this.buffType[index1] == 0)
                {
                    for (var index2 = index1 + 1; index2 < 5; ++index2)
                    {
                        this.buffTime[index2 - 1] = this.buffTime[index2];
                        this.buffType[index2 - 1] = this.buffType[index2];
                        this.buffTime[index2] = 0;
                        this.buffType[index2] = 0;
                    }
                }
            }

            if (Main.netMode != 2)
                return;
            NetMessage.SendData(54, -1, -1, (NetworkText) null, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
        }

        public Microsoft.Xna.Framework.Rectangle getRect()
        {
            return new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width,
                this.height);
        }

        public bool CanBeChasedBy(object attacker = null, bool ignoreDontTakeDamage = false)
        {
            if (this.active && this.chaseable && this.lifeMax > 5 &&
                ((!this.dontTakeDamage || ignoreDontTakeDamage) && !this.friendly))
                return !this.immortal;
            return false;
        }

        public void moneyPing(Vector2 pos)
        {
            Main.PlaySound(38, pos, 1);
            var Type = 244;
            if ((double) this.extraValue >= 1000000.0)
                Type = 247;
            else if ((double) this.extraValue >= 10000.0)
                Type = 246;
            else if ((double) this.extraValue >= 100.0)
                Type = 245;
            for (var index1 = 0; index1 < 20; ++index1)
            {
                var index2 = Dust.NewDust(pos - new Vector2(1f, 2f), 10, 14, Type, 0.0f, 0.0f, 254, new Color(), 0.25f);
                Main.dust[index2].velocity *= 0.2f;
            }
        }

        public void IdleSounds()
        {
            if ((this.type == 239 || this.type == 240) && Main.rand.Next(900) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(24, 26), 1f, 0.0f);
            else if ((this.type == 62 || this.type == 156) && Main.rand.Next(700) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(26, 30), 1f, 0.0f);
            else if (this.type == 177 && Main.rand.Next(600) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(30, 32), 1f, 0.0f);
            else if (this.type == 226 && Main.rand.Next(800) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, 32, 1f, 0.0f);
            else if (this.type == 153 && Main.rand.Next(1000) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, 33, 1f, 0.0f);
            else if (this.wet && (this.type == 63 || this.type == 64 || this.type == 103) && Main.rand.Next(1000) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(34, 36), 1f, 0.0f);
            else if ((this.type == 198 || this.type == 199) && Main.rand.Next(1000) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(36, 38), 1f, 0.0f);
            else if ((this.type == 170 || this.type == 180 || this.type == 171) && Main.rand.Next(600) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(38, 41), 1f, 0.0f);
            else if (this.type == 250 && Main.rand.Next(700) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(41, 44), 1f, 0.0f);
            else if (this.type == 508 && Main.rand.Next(800) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, 44, 1f, 0.0f);
            else if (this.type == 509 && Main.rand.Next(800) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(44, 47), 1f, 0.0f);
            else if (this.type == 494 && Main.rand.Next(600) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, 47, 1f, 0.0f);
            else if (this.type == 467 && Main.rand.Next(700) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(48, 50), 1f, 0.0f);
            else if (this.type == 468 && Main.rand.Next(700) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(50, 53), 1f, 0.0f);
            else if (this.type == 288 && Main.rand.Next(400) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(53, 55), 1f, 0.0f);
            else if ((this.type == 524 || this.type == 525 || (this.type == 526 || this.type == 527)) &&
                     Main.rand.Next(700) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(55, 57), 1f, 0.0f);
            else if ((this.type == 496 || this.type == 497) && Main.rand.Next(600) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(57, 59), 1f, 0.0f);
            else if (this.type == 389 && Main.rand.Next(800) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(59, 61), 1f, 0.0f);
            else if (this.type == 471 && Main.rand.Next(600) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(61, 63), 1f, 0.0f);
            else if (this.type == 482 && Main.rand.Next(600) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(63, 66), 1f, 0.0f);
            else if (this.type == 388 && Main.rand.Next(700) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(66, 69), 1f, 0.0f);
            else if (this.type == 520 && Main.rand.Next(800) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(69, 73), 1f, 0.0f);
            else if (this.type == 477 && Main.rand.Next(600) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, 73, 1f, 0.0f);
            else if (this.type == 258 && Main.rand.Next(700) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(74, 78), 1f, 0.0f);
            else if (this.type == 252 && Main.rand.Next(700) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, 78, 1f, 0.0f);
            else if (this.type == 469 && Main.rand.Next(700) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(79, 81), 1f, 0.0f);
            else if ((this.type == 253 || this.type == 82) && Main.rand.Next(700) == 0)
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(81, 84), 1f, 0.0f);
            else if (this.type >= 498 && this.type <= 506 && Main.rand.Next(600) == 0)
            {
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(84, 86), 1f, 0.0f);
            }
            else
            {
                if (this.type != 391 || Main.rand.Next(700) != 0)
                    return;
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(86, 87), 1f, 0.0f);
            }
        }

        private void UpdateAltTexture()
        {
            if (!this.townNPC)
                return;
            var altTexture = this.altTexture;
            this.altTexture = !BirthdayParty.PartyIsUp ? 0 : 1;
            if (this.type == 441 || this.type == 453)
                this.altTexture = 0;
            if (altTexture == 0 && this.altTexture == 1)
            {
                for (var index = 0; index < 20; ++index)
                    Dust.NewDust(this.position, this.width, this.height / 4, 139 + Main.rand.Next(4), 0.0f, -2f, 0,
                        new Color(), 1f);
            }

            if (altTexture != 1 || this.altTexture != 0)
                return;
            for (var index = 0; index < 4; ++index)
                Utils.PoofOfSmoke(this.position);
        }

        public void UpdateNPC(int i)
        {
            this.whoAmI = i;
            if (!this.active)
                return;
            this.UpdateAltTexture();
            if (this.type == 368)
                NPC.travelNPC = true;
            this.UpdateNPC_CastLights();
            this.UpdateNPC_TeleportVisuals();
            this.UpdateNPC_CritterSounds();
            if (Main.netMode == 1 && (this.townNPC || this.type == 453) &&
                (this.type != 37 && this.npcNameLookup == (byte) 0))
            {
                this.npcNameLookup = (byte) 1;
                var number = -1;
                for (var index = 0; index < 200; ++index)
                {
                    if (Main.npc[index] == this)
                    {
                        number = index;
                        break;
                    }
                }

                NetMessage.SendData(56, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
            }

            if (Main.netMode == 1)
            {
                var flag = false;
                var index1 = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
                var index2 = (int) ((double) this.position.Y + (double) (this.height / 2)) / 16;
                try
                {
                    if (index1 >= 4)
                    {
                        if (index1 <= Main.maxTilesX - 4)
                        {
                            if (index2 >= 4)
                            {
                                if (index2 <= Main.maxTilesY - 4)
                                {
                                    if (Main.tile[index1, index2] == null)
                                        flag = true;
                                    else if (Main.tile[index1 - 3, index2] == null)
                                        flag = true;
                                    else if (Main.tile[index1 + 3, index2] == null)
                                        flag = true;
                                    else if (Main.tile[index1, index2 - 3] == null)
                                        flag = true;
                                    else if (Main.tile[index1, index2 + 3] == null)
                                        flag = true;
                                }
                            }
                        }
                    }
                }
                catch
                {
                    flag = true;
                }

                if (flag)
                    return;
            }

            this.UpdateNPC_BuffFlagsReset();
            this.UpdateNPC_BuffSetFlags();
            this.UpdateNPC_SoulDrainDebuff();
            this.UpdateNPC_BuffClearExpiredBuffs();
            this.UpdateNPC_BuffApplyDOTs();
            this.UpdateNPC_BloodMoonTransformations();
            float maxFallSpeed;
            this.UpdateNPC_UpdateGravity(out maxFallSpeed);
            if (this.soundDelay > 0)
                --this.soundDelay;
            if (this.life <= 0)
                this.active = false;
            this.oldTarget = this.target;
            this.oldDirection = this.direction;
            this.oldDirectionY = this.directionY;
            var num1 = (float) (1.0 + (double) Math.Abs(this.velocity.X) / 3.0);
            if ((double) this.gfxOffY > 0.0)
            {
                this.gfxOffY -= num1 * this.stepSpeed;
                if ((double) this.gfxOffY < 0.0)
                    this.gfxOffY = 0.0f;
            }
            else if ((double) this.gfxOffY < 0.0)
            {
                this.gfxOffY += num1 * this.stepSpeed;
                if ((double) this.gfxOffY > 0.0)
                    this.gfxOffY = 0.0f;
            }

            if ((double) this.gfxOffY > 16.0)
                this.gfxOffY = 16f;
            if ((double) this.gfxOffY < -16.0)
                this.gfxOffY = -16f;
            this.TryPortalJumping();
            this.IdleSounds();
            this.AI();
            if (Main.netMode != 2 && (double) this.extraValue > 0.0)
            {
                var Type = 244;
                var num2 = 30f;
                if ((double) this.extraValue >= 1000000.0)
                {
                    Type = 247;
                    num2 *= 0.25f;
                }
                else if ((double) this.extraValue >= 10000.0)
                {
                    Type = 246;
                    num2 *= 0.5f;
                }
                else if ((double) this.extraValue >= 100.0)
                {
                    Type = 245;
                    num2 *= 0.75f;
                }

                if (Main.rand.Next((int) num2) == 0)
                {
                    var index = Dust.NewDust(this.position, this.width, this.height, Type, 0.0f, 0.0f, 254, new Color(),
                        0.25f);
                    Main.dust[index].velocity *= 0.1f;
                }
            }

            for (var index = 0; index < 256; ++index)
            {
                if (this.immune[index] > 0)
                    --this.immune[index];
            }

            if (!this.noGravity && !this.noTileCollide)
            {
                var x = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
                var y = (int) ((double) this.position.Y + (double) (this.height / 2)) / 16;
                if (WorldGen.InWorld(x, y, 0) && Main.tile[x, y] == null)
                {
                    NPC.gravity = 0.0f;
                    this.velocity.X = 0.0f;
                    this.velocity.Y = 0.0f;
                }
            }

            if (!this.noGravity)
            {
                this.velocity.Y += NPC.gravity;
                if ((double) this.velocity.Y > (double) maxFallSpeed)
                    this.velocity.Y = maxFallSpeed;
            }

            if ((double) this.velocity.X < 0.005 && (double) this.velocity.X > -0.005)
                this.velocity.X = 0.0f;
            if (Main.netMode != 1 && this.type != 37 && (this.friendly || this.type == 46 ||
                                                         (this.type == 55 || this.type == 74) ||
                                                         (this.type == 148 || this.type == 149 ||
                                                          (this.type == 230 || this.type == 297)) ||
                                                         (this.type == 298 || this.type == 299 ||
                                                          (this.type == 303 || this.type == 355) ||
                                                          (this.type == 356 || this.type == 358 ||
                                                           (this.type == 359 || this.type == 360))) ||
                                                         (this.type == 361 || this.type == 362 ||
                                                          (this.type == 363 || this.type == 364) ||
                                                          (this.type == 365 || this.type == 366 ||
                                                           (this.type == 367 || this.type == 377)) ||
                                                          (this.type == 357 || this.type == 374 || this.type >= 442 &&
                                                           this.type <= 448 && this.type != 447))) ||
                (this.type == 538 || this.type == 539 || (this.type == 337 || this.type == 540) ||
                 this.type >= 484 && this.type <= 487))
            {
                if (this.townNPC)
                    this.CheckDrowning();
                this.CheckLifeRegen();
                this.CheckMeleeCollision();
            }

            if (!this.noTileCollide)
            {
                this.UpdateCollision();
            }
            else
            {
                this.oldPosition = this.position;
                this.oldDirection = this.direction;
                var npc = this;
                npc.position = npc.position + this.velocity;
                if (this.onFire && this.boss &&
                    (Main.netMode != 1 && Collision.WetCollision(this.position, this.width, this.height)))
                {
                    for (var b = 0; b < 5; ++b)
                    {
                        if (this.buffType[b] == 24)
                            this.DelBuff(b);
                    }
                }
            }

            if (Main.netMode != 1 && !this.noTileCollide &&
                (this.lifeMax > 1 &&
                 Collision.SwitchTiles(this.position, this.width, this.height, this.oldPosition, 2)) &&
                (this.type == 46 || this.type == 148 || (this.type == 149 || this.type == 303) ||
                 (this.type == 361 || this.type == 362 || (this.type == 364 || this.type == 366)) ||
                 (this.type == 367 || this.type >= 442 && this.type <= 448)))
            {
                this.ai[0] = 1f;
                this.ai[1] = 400f;
                this.ai[2] = 0.0f;
            }

            this.FindFrame();
            this.UpdateNPC_UpdateTrails();
            if (!this.active)
                this.netUpdate = true;
            if (Main.netMode == 2)
            {
                if (Main.npcStreamSpeed > 0 && !this.townNPC &&
                    (double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) > 1.0)
                {
                    ++this.netStream;
                    if ((int) this.netStream > Main.npcStreamSpeed)
                    {
                        for (var remoteClient = 0; remoteClient < (int) byte.MaxValue; ++remoteClient)
                        {
                            if (Main.player[remoteClient].active)
                            {
                                var num2 = Math.Abs(this.Center.X - Main.player[remoteClient].Center.X) +
                                             Math.Abs(this.Center.Y - Main.player[remoteClient].Center.Y);
                                if ((double) num2 < 250.0)
                                    this.streamPlayer[remoteClient] -= (byte) 8;
                                else if ((double) num2 < 500.0)
                                    this.streamPlayer[remoteClient] -= (byte) 4;
                                else if ((double) num2 < 1000.0)
                                    this.streamPlayer[remoteClient] -= (byte) 2;
                                else if ((double) num2 < 1500.0)
                                    --this.streamPlayer[remoteClient];
                                if (this.streamPlayer[remoteClient] <= (byte) 0)
                                {
                                    this.streamPlayer[remoteClient] = (byte) 8;
                                    NetMessage.SendData(23, remoteClient, -1, (NetworkText) null, i, 0.0f, 0.0f, 0.0f,
                                        0, 0, 0);
                                }
                            }
                        }
                    }
                }

                if (this.townNPC)
                    this.netSpam = 0;
                if (this.netUpdate2)
                    this.netUpdate = true;
                if (!this.active)
                    this.netSpam = 0;
                if (this.netUpdate)
                {
                    if (this.boss)
                    {
                        var vector2 = this.oldPosition - this.position;
                        if (this.netSpam <= 15)
                        {
                            this.netSpam += 5;
                            NetMessage.SendData(23, -1, -1, (NetworkText) null, i, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                            this.netUpdate2 = false;
                        }
                        else
                            this.netUpdate2 = true;
                    }
                    else if (this.netSpam <= 90)
                    {
                        this.netSpam += 30;
                        NetMessage.SendData(23, -1, -1, (NetworkText) null, i, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                        this.netUpdate2 = false;
                    }
                    else
                        this.netUpdate2 = true;
                }

                if (this.netSpam > 0)
                    --this.netSpam;
                if (this.active && this.townNPC && NPC.TypeToHeadIndex(this.type) != -1)
                {
                    if (this.homeless != this.oldHomeless || this.homeTileX != this.oldHomeTileX ||
                        this.homeTileY != this.oldHomeTileY)
                    {
                        var householdStatus = WorldGen.TownManager.GetHouseholdStatus(this);
                        NetMessage.SendData(60, -1, -1, (NetworkText) null, i, (float) Main.npc[i].homeTileX,
                            (float) Main.npc[i].homeTileY, (float) householdStatus, 0, 0, 0);
                    }

                    this.oldHomeless = this.homeless;
                    this.oldHomeTileX = this.homeTileX;
                    this.oldHomeTileY = this.homeTileY;
                }
            }

            this.CheckActive();
            this.netUpdate = false;
            this.justHit = false;
        }

        private void UpdateNPC_UpdateTrails()
        {
            var num = NPCID.Sets.TrailingMode[this.type];
            if (num == 0)
            {
                if ((double) this.localAI[3] <= 0.0)
                {
                    this.localAI[3] = 2f;
                    for (var index = this.oldPos.Length - 1; index > 0; --index)
                        this.oldPos[index] = this.oldPos[index - 1];
                    this.oldPos[0] = this.position;
                }

                --this.localAI[3];
            }

            if (num == 1)
            {
                for (var index = this.oldPos.Length - 1; index > 0; --index)
                    this.oldPos[index] = this.oldPos[index - 1];
                this.oldPos[0] = this.position;
            }

            if (num == 2)
            {
                if ((int) this.ai[0] == 4 || (double) this.ai[0] == 5.0 || (double) this.ai[0] == 6.0)
                {
                    for (var index = this.oldPos.Length - 1; index > 0; --index)
                    {
                        this.oldPos[index] = this.oldPos[index - 1];
                        this.oldRot[index] = this.oldRot[index - 1];
                    }

                    this.oldPos[0] = this.position;
                    this.oldRot[0] = this.rotation;
                }
                else
                {
                    for (var index = this.oldPos.Length - 1; index >= 0; --index)
                    {
                        this.oldPos[index] = this.position;
                        this.oldRot[index] = this.rotation;
                    }
                }
            }

            if (num == 3)
            {
                for (var index = this.oldPos.Length - 1; index > 0; --index)
                {
                    this.oldPos[index] = this.oldPos[index - 1];
                    this.oldRot[index] = this.oldRot[index - 1];
                }

                this.oldPos[0] = this.position;
                this.oldRot[0] = this.rotation;
            }

            if (num == 4)
            {
                for (var index = this.oldPos.Length - 1; index > 0; --index)
                {
                    this.oldPos[index] = this.oldPos[index - 1];
                    Lighting.AddLight((int) this.position.X / 16, (int) this.position.Y / 16, 0.3f, 0.0f, 0.2f);
                }

                this.oldPos[0] = this.position;
            }
            else if (num == 5)
            {
                for (var index = this.oldPos.Length - 1; index > 0; --index)
                    this.oldPos[index] = this.oldPos[index - 1];
                this.oldPos[0] = this.position;
            }
            else if (num == 6)
            {
                for (var index = this.oldPos.Length - 1; index > 0; --index)
                    this.oldPos[index] = this.oldPos[index - 1];
                this.oldPos[0] = this.position;
            }
            else
            {
                if (num != 7)
                    return;
                for (var index = this.oldPos.Length - 1; index > 0; --index)
                {
                    this.oldPos[index] = this.oldPos[index - 1];
                    this.oldRot[index] = this.oldRot[index - 1];
                }

                this.oldPos[0] = this.position;
                this.oldRot[0] = this.rotation;
            }
        }

        private void UpdateNPC_UpdateGravity(out float maxFallSpeed)
        {
            maxFallSpeed = 10f;
            NPC.gravity = 0.3f;
            if (this.type == 258)
            {
                NPC.gravity = 0.1f;
                if ((double) this.velocity.Y > 3.0)
                    this.velocity.Y = 3f;
            }
            else if (this.type == 425 && (double) this.ai[2] == 1.0)
            {
                NPC.gravity = 0.1f;
                if ((double) this.velocity.Y > 2.0)
                    this.velocity.Y = 2f;
            }
            else if ((this.type == 576 || this.type == 577) &&
                     ((double) this.ai[0] > 0.0 && (double) this.ai[1] == 2.0))
            {
                NPC.gravity = 0.45f;
                if ((double) this.velocity.Y > 32.0)
                    this.velocity.Y = 32f;
            }
            else if (this.type == 427 && (double) this.ai[2] == 1.0)
            {
                NPC.gravity = 0.1f;
                if ((double) this.velocity.Y > 4.0)
                    this.velocity.Y = 4f;
            }
            else if (this.type == 426)
            {
                NPC.gravity = 0.1f;
                if ((double) this.velocity.Y > 3.0)
                    this.velocity.Y = 3f;
            }
            else if (this.type == 541)
                NPC.gravity = 0.0f;

            var num1 = (float) (Main.maxTilesX / 4200);
            var num2 = (float) (((double) this.position.Y / 16.0 - (60.0 + 10.0 * (double) (num1 * num1))) /
                                  (Main.worldSurface / 6.0));
            if ((double) num2 < 0.25)
                num2 = 0.25f;
            if ((double) num2 > 1.0)
                num2 = 1f;
            NPC.gravity *= num2;
            if (!this.wet)
                return;
            if (this.honeyWet)
            {
                NPC.gravity = 0.1f;
                maxFallSpeed = 4f;
            }
            else
            {
                NPC.gravity = 0.2f;
                maxFallSpeed = 7f;
            }
        }

        private void UpdateNPC_SoulDrainDebuff()
        {
            if (!this.soulDrain)
                return;
            var num = 1100;
            for (var index1 = 0; index1 < (int) byte.MaxValue; ++index1)
            {
                if (Main.player[index1].active && !Main.player[index1].dead &&
                    ((double) (this.Center - Main.player[index1].position).Length() < (double) num &&
                     Main.player[index1].inventory[Main.player[index1].selectedItem].type == 3006 &&
                     Main.player[index1].itemAnimation > 0))
                {
                    if (index1 == Main.myPlayer)
                        ++Main.player[index1].soulDrain;
                    if (Main.rand.Next(3) != 0)
                    {
                        var center = this.Center;
                        center.X += (float) Main.rand.Next(-100, 100) * 0.05f;
                        center.Y += (float) Main.rand.Next(-100, 100) * 0.05f;
                        var index2 = Dust.NewDust(center + this.velocity, 1, 1, 235, 0.0f, 0.0f, 0, new Color(), 1f);
                        Main.dust[index2].velocity *= 0.0f;
                        Main.dust[index2].scale = (float) Main.rand.Next(70, 85) * 0.01f;
                        Main.dust[index2].fadeIn = (float) (index1 + 1);
                    }
                }
            }
        }

        private void UpdateNPC_BuffApplyDOTs()
        {
            if (this.dontTakeDamage)
                return;
            var amount = this.lifeRegenExpectedLossPerSecond;
            if (this.poisoned)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegen -= 4;
            }

            if (this.onFire)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegen -= 8;
            }

            if (this.onFrostBurn)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegen -= 16;
                if (amount < 2)
                    amount = 2;
            }

            if (this.onFire2)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegen -= 12;
            }

            if (this.venom)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegen -= 12;
                if (amount < 2)
                    amount = 2;
            }

            if (this.shadowFlame)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegen -= 30;
                if (amount < 5)
                    amount = 5;
            }

            if (this.oiled)
            {
                var num1 = (this.onFire ? 2 : 0) + (this.onFrostBurn ? 4 : 0) + (this.onFire2 ? 3 : 0) +
                           (this.shadowFlame ? 8 : 0);
                if (num1 > 0)
                {
                    var num2 = num1 * 4 + 12;
                    this.lifeRegen -= num2;
                    var num3 = num2 / 6;
                    if (amount < num3)
                        amount = num3;
                }
            }

            if (this.javelined)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                var num1 = 0;
                var num2 = 1;
                for (var index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].type == 598 &&
                        ((double) Main.projectile[index].ai[0] == 1.0 &&
                         (double) Main.projectile[index].ai[1] == (double) this.whoAmI))
                        ++num1;
                }

                this.lifeRegen -= num1 * 2 * 3;
                if (amount < num1 * 3 / num2)
                    amount = num1 * 3 / num2;
            }

            if (this.daybreak)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                var num1 = 0;
                var num2 = 4;
                for (var index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].type == 636 &&
                        ((double) Main.projectile[index].ai[0] == 1.0 &&
                         (double) Main.projectile[index].ai[1] == (double) this.whoAmI))
                        ++num1;
                }

                if (num1 == 0)
                    num1 = 1;
                this.lifeRegen -= num1 * 2 * 100;
                if (amount < num1 * 100 / num2)
                    amount = num1 * 100 / num2;
            }

            if (this.celled)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                var num = 0;
                for (var index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].type == 614 &&
                        ((double) Main.projectile[index].ai[0] == 1.0 &&
                         (double) Main.projectile[index].ai[1] == (double) this.whoAmI))
                        ++num;
                }

                this.lifeRegen -= num * 2 * 20;
                if (amount < num * 20)
                    amount = num * 20 / 2;
            }

            if (this.dryadBane)
            {
                var num1 = 4;
                var num2 = 1f;
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                if (NPC.downedBoss1)
                    num2 += 0.1f;
                if (NPC.downedBoss2)
                    num2 += 0.1f;
                if (NPC.downedBoss3)
                    num2 += 0.1f;
                if (NPC.downedQueenBee)
                    num2 += 0.1f;
                if (Main.hardMode)
                    num2 += 0.4f;
                if (NPC.downedMechBoss1)
                    num2 += 0.15f;
                if (NPC.downedMechBoss2)
                    num2 += 0.15f;
                if (NPC.downedMechBoss3)
                    num2 += 0.15f;
                if (NPC.downedPlantBoss)
                    num2 += 0.15f;
                if (NPC.downedGolemBoss)
                    num2 += 0.15f;
                if (NPC.downedAncientCultist)
                    num2 += 0.15f;
                if (Main.expertMode)
                    num2 *= Main.expertNPCDamage;
                var num3 = (int) ((double) num1 * (double) num2);
                this.lifeRegen -= 2 * num3;
                if (amount < num3)
                    amount = num3 / 3;
            }

            if (this.soulDrain && this.realLife == -1)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegen -= 50;
                if (amount < 5)
                    amount = 5;
            }

            if (this.lifeRegen <= -240 && amount < 2)
                amount = 2;
            this.lifeRegenCount += this.lifeRegen;
            while (this.lifeRegenCount >= 120)
            {
                this.lifeRegenCount -= 120;
                if (!this.immortal)
                {
                    if (this.life < this.lifeMax)
                        ++this.life;
                    if (this.life > this.lifeMax)
                        this.life = this.lifeMax;
                }
            }

            if (amount > 0)
            {
                while (this.lifeRegenCount <= -120 * amount)
                {
                    this.lifeRegenCount += 120 * amount;
                    var number = this.whoAmI;
                    if (this.realLife >= 0)
                        number = this.realLife;
                    if (!Main.npc[number].immortal)
                        Main.npc[number].life -= amount;
                    CombatText.NewText(
                        new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width,
                            this.height), CombatText.LifeRegenNegative, amount, false, true);
                    if (Main.npc[number].life <= 0 && !Main.npc[number].immortal)
                    {
                        Main.npc[number].life = 1;
                        if (Main.netMode != 1)
                        {
                            Main.npc[number].StrikeNPCNoInteraction(9999, 0.0f, 0, false, false, false);
                            if (Main.netMode == 2)
                                NetMessage.SendData(28, -1, -1, (NetworkText) null, number, 9999f, 0.0f, 0.0f, 0, 0, 0);
                        }
                    }
                }
            }
            else
            {
                while (this.lifeRegenCount <= -120)
                {
                    this.lifeRegenCount += 120;
                    var number = this.whoAmI;
                    if (this.realLife >= 0)
                        number = this.realLife;
                    if (!Main.npc[number].immortal)
                        --Main.npc[number].life;
                    CombatText.NewText(
                        new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width,
                            this.height), CombatText.LifeRegenNegative, 1, false, true);
                    if (Main.npc[number].life <= 0 && !Main.npc[number].immortal)
                    {
                        Main.npc[number].life = 1;
                        if (Main.netMode != 1)
                        {
                            Main.npc[number].StrikeNPCNoInteraction(9999, 0.0f, 0, false, false, false);
                            if (Main.netMode == 2)
                                NetMessage.SendData(28, -1, -1, (NetworkText) null, number, 9999f, 0.0f, 0.0f, 0, 0, 0);
                        }
                    }
                }
            }
        }

        private void UpdateNPC_BuffClearExpiredBuffs()
        {
            if (Main.netMode == 1)
                return;
            for (var b = 0; b < 5; ++b)
            {
                if (this.buffType[b] > 0 && this.buffTime[b] <= 0)
                {
                    this.DelBuff(b);
                    if (Main.netMode == 2)
                        NetMessage.SendData(54, -1, -1, (NetworkText) null, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                }
            }
        }

        private void UpdateNPC_BloodMoonTransformations()
        {
            if (Main.netMode == 1 || !Main.bloodMoon)
                return;
            var flag = false;
            if ((double) this.value == 0.0)
                flag = true;
            if (this.type == 46 || this.type == 303 || (this.type == 337 || this.type == 443) || this.type == 540)
            {
                if (WorldGen.crimson)
                    this.Transform(464);
                else
                    this.Transform(47);
            }
            else if (this.type == 55 || this.type == 230)
            {
                if (WorldGen.crimson)
                    this.Transform(465);
                else
                    this.Transform(57);
            }
            else if (this.type == 148 || this.type == 149)
            {
                if (WorldGen.crimson)
                    this.Transform(470);
                else
                    this.Transform(168);
            }

            if (!flag)
                return;
            this.value = 0.0f;
        }

        private void UpdateNPC_BuffSetFlags()
        {
            for (var index = 0; index < 5; ++index)
            {
                if (this.buffType[index] > 0 && this.buffTime[index] > 0)
                {
                    --this.buffTime[index];
                    if (this.buffType[index] == 20)
                        this.poisoned = true;
                    if (this.buffType[index] == 70)
                        this.venom = true;
                    if (this.buffType[index] == 24)
                        this.onFire = true;
                    if (this.buffType[index] == 72)
                        this.midas = true;
                    if (this.buffType[index] == 69)
                        this.ichor = true;
                    if (this.buffType[index] == 31)
                        this.confused = true;
                    if (this.buffType[index] == 39)
                        this.onFire2 = true;
                    if (this.buffType[index] == 44)
                        this.onFrostBurn = true;
                    if (this.buffType[index] == 103)
                        this.dripping = true;
                    if (this.buffType[index] == 137)
                        this.drippingSlime = true;
                    if (this.buffType[index] == 119)
                        this.loveStruck = true;
                    if (this.buffType[index] == 120)
                        this.stinky = true;
                    if (this.buffType[index] == 151)
                        this.soulDrain = true;
                    if (this.buffType[index] == 153)
                        this.shadowFlame = true;
                    if (this.buffType[index] == 165)
                        this.dryadWard = true;
                    if (this.buffType[index] == 169)
                        this.javelined = true;
                    if (this.buffType[index] == 183)
                        this.celled = true;
                    if (this.buffType[index] == 186)
                        this.dryadBane = true;
                    if (this.buffType[index] == 189)
                        this.daybreak = true;
                    if (this.buffType[index] == 203)
                        this.betsysCurse = true;
                    if (this.buffType[index] == 204)
                        this.oiled = true;
                }
            }
        }

        private void UpdateNPC_BuffFlagsReset()
        {
            this.lifeRegen = 0;
            this.soulDrain = false;
            this.poisoned = false;
            this.venom = false;
            this.shadowFlame = false;
            this.onFire = false;
            this.midas = false;
            this.ichor = false;
            this.onFrostBurn = false;
            this.onFire2 = false;
            this.confused = false;
            this.loveStruck = false;
            this.dryadWard = false;
            this.stinky = false;
            this.dripping = false;
            this.drippingSlime = false;
            this.daybreak = false;
            this.javelined = false;
            this.celled = false;
            this.dryadBane = false;
            this.betsysCurse = false;
            this.oiled = false;
            this.lifeRegenExpectedLossPerSecond = -1;
        }

        private void UpdateNPC_TeleportVisuals()
        {
            if ((double) this.teleportTime <= 0.0)
                return;
            if (this.teleportStyle == 0)
            {
                if ((double) Main.rand.Next(100) <= 100.0 * (double) this.teleportTime * 2.0)
                {
                    var index = Dust.NewDust(new Vector2((float) this.getRect().X, (float) this.getRect().Y),
                        this.getRect().Width, this.getRect().Height, 159, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index].scale = this.teleportTime * 1.5f;
                    Main.dust[index].noGravity = true;
                    Main.dust[index].velocity *= 1.1f;
                }
            }
            else if (this.teleportStyle == 4)
            {
                this.teleportTime -= 0.02f;
                if ((double) Main.rand.Next(100) <= 100.0 * (double) this.teleportTime)
                {
                    var dust = Main.dust[
                        Dust.NewDust(this.position, this.width, this.height, 263, 0.0f, 0.0f, 0, new Color(), 1f)];
                    dust.color = PortalHelper.GetPortalColor(this.lastPortalColorIndex);
                    dust.noLight = true;
                    dust.noGravity = true;
                    dust.scale = 1.2f;
                    dust.fadeIn = 0.4f;
                }
            }

            this.teleportTime -= 0.005f;
        }

        private void UpdateNPC_CritterSounds()
        {
            if (Main.netMode == 2)
                return;
            if (this.type >= 362 && this.type <= 365)
            {
                if (!Main.dayTime || Main.rand.Next(200) != 0)
                    return;
                Main.PlaySound(30, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
            }
            else if (this.type == 361 || this.type == 445)
            {
                if ((double) Math.Abs(this.velocity.X) >= 0.5 ||
                    Main.dayTime && (double) this.position.Y <= Main.worldSurface * 16.0 || Main.rand.Next(200) != 0)
                    return;
                Main.PlaySound(31, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
            }
            else if (this.type == 74 || this.type == 297 || (this.type == 298 || this.type == 442))
            {
                if (!Main.dayTime || Main.time >= 18000.0 || Main.rand.Next(400) != 0)
                    return;
                if (this.type == 74)
                {
                    if (Main.rand.Next(3) != 0)
                        Main.PlaySound(32, (int) this.position.X, (int) this.position.Y, 14, 1f, 0.0f);
                    else
                        Main.PlaySound(32, (int) this.position.X, (int) this.position.Y, 18, 1f, 0.0f);
                }

                if (this.type == 297)
                    Main.PlaySound(32, (int) this.position.X, (int) this.position.Y, 16, 1f, 0.0f);
                if (this.type == 298)
                {
                    if (Main.rand.Next(3) != 0)
                        Main.PlaySound(32, (int) this.position.X, (int) this.position.Y, 17, 1f, 0.0f);
                    else
                        Main.PlaySound(32, (int) this.position.X, (int) this.position.Y, 19, 1f, 0.0f);
                }

                if (this.type != 442)
                    return;
                switch (Main.rand.Next(5))
                {
                    case 0:
                        Main.PlaySound(32, (int) this.position.X, (int) this.position.Y, 16, 1f, 0.0f);
                        break;
                    case 1:
                        Main.PlaySound(32, (int) this.position.X, (int) this.position.Y, 17, 1f, 0.0f);
                        break;
                    case 2:
                        Main.PlaySound(32, (int) this.position.X, (int) this.position.Y, 19, 1f, 0.0f);
                        break;
                    case 3:
                        Main.PlaySound(32, (int) this.position.X, (int) this.position.Y, 14, 1f, 0.0f);
                        break;
                    default:
                        Main.PlaySound(32, (int) this.position.X, (int) this.position.Y, 18, 1f, 0.0f);
                        break;
                }
            }
            else
            {
                if (this.type != 300 && this.type != 447 || Main.rand.Next(1800) != 0)
                    return;
                Main.PlaySound(33, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
            }
        }

        private void UpdateNPC_CastLights()
        {
            if (this.type >= 442 && this.type <= 448 || this.type == 539)
            {
                var color = Lighting.GetColor((int) this.Center.X / 16, (int) this.Center.Y / 16);
                if (color.R > (byte) 20 || color.B > (byte) 20 || color.G > (byte) 20)
                {
                    var num1 = (int) color.R;
                    if ((int) color.G > num1)
                        num1 = (int) color.G;
                    if ((int) color.B > num1)
                        num1 = (int) color.B;
                    var num2 = num1 / 30;
                    if (Main.rand.Next(300) < num2)
                    {
                        var index = Dust.NewDust(this.position, this.width, this.height, 43, 0.0f, 0.0f, 254,
                            new Color((int) byte.MaxValue, (int) byte.MaxValue, 0), 0.5f);
                        Main.dust[index].velocity *= 0.0f;
                    }
                }
            }

            if (this.type >= 254 && this.type <= 261 || this.type == 160)
            {
                var num1 = (float) Main.rand.Next(28, 42) * 0.005f + (float) (270 - (int) Main.mouseTextColor) / 500f;
                var num2 = 0.1f;
                var num3 = (float) (0.300000011920929 + (double) num1 / 2.0);
                var num4 = 0.6f + num1;
                var num5 = 0.35f;
                Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, num2 * num5, num3 * num5,
                    num4 * num5);
            }

            if (this.type == 209)
            {
                var num1 = (float) Main.rand.Next(28, 42) * 0.005f + (float) (270 - (int) Main.mouseTextColor) / 500f;
                var num2 = 0.1f;
                var num3 = (float) (0.300000011920929 + (double) num1 / 2.0);
                var num4 = (float) (0.400000005960464 + (double) num1 / 2.0);
                var num5 = 0.35f;
                Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, num2 * num5, num3 * num5,
                    num4 * num5);
                if ((double) this.ai[0] == 12.0)
                    Lighting.AddLight(this.Top, 0.3f, 0.1f, 0.1f);
            }

            if (this.type != 44)
                return;
            Lighting.AddLight((int) ((double) this.position.X + (double) (this.width / 2)) / 16,
                (int) ((double) this.position.Y + 4.0) / 16, 0.9f, 0.75f, 0.5f);
        }

        private void CheckMeleeCollision()
        {
            if (this.dontTakeDamageFromHostiles)
                return;
            var specialHitSetter = 1;
            if (this.immune[(int) byte.MaxValue] != 0)
                return;
            var num1 = 30;
            if (this.type == 548)
                num1 = 20;
            var hitbox1 = this.Hitbox;
            for (var index = 0; index < 200; ++index)
            {
                var npc = Main.npc[index];
                if (npc.active && !npc.friendly && npc.damage > 0)
                {
                    var hitbox2 = npc.Hitbox;
                    var damageMultiplier = 1f;
                    NPC.GetMeleeCollisionData(hitbox1, index, ref specialHitSetter, ref damageMultiplier, ref hitbox2);
                    if (hitbox1.Intersects(hitbox2) && (this.type != 453 || !NPCID.Sets.Skeletons.Contains(npc.netID)))
                    {
                        var damage = npc.damage;
                        var num2 = 6;
                        var hitDirection1 = 1;
                        if ((double) npc.position.X + (double) (npc.width / 2) >
                            (double) this.position.X + (double) (this.width / 2))
                            hitDirection1 = -1;
                        var num3 =
                            this.StrikeNPCNoInteraction(damage, (float) num2, hitDirection1, false, false, false);
                        if (Main.netMode != 0)
                            NetMessage.SendData(28, -1, -1, (NetworkText) null, this.whoAmI, (float) damage,
                                (float) num2, (float) hitDirection1, 0, 0, 0);
                        this.netUpdate = true;
                        this.immune[(int) byte.MaxValue] = num1;
                        if (this.dryadWard)
                        {
                            var Damage = (int) num3 / 3;
                            var num4 = 6;
                            var hitDirection2 = hitDirection1 * -1;
                            npc.StrikeNPCNoInteraction(Damage, (float) num4, hitDirection2, false, false, false);
                            if (Main.netMode != 0)
                                NetMessage.SendData(28, -1, -1, (NetworkText) null, index, (float) Damage, (float) num4,
                                    (float) hitDirection2, 0, 0, 0);
                            npc.netUpdate = true;
                            npc.immune[(int) byte.MaxValue] = num1;
                        }
                    }
                }
            }
        }

        private void CheckLifeRegen()
        {
            if (this.life >= this.lifeMax)
                return;
            ++this.friendlyRegen;
            if (this.dryadWard)
                this.friendlyRegen += 10;
            if (this.friendlyRegen <= 180)
                return;
            this.friendlyRegen = 0;
            ++this.life;
            this.netUpdate = true;
        }

        private void UpdateCollision()
        {
            this.Collision_WalkDownSlopes();
            this.Collision_WaterCollision(this.Collision_LavaCollision());
            if (!this.wet)
            {
                this.lavaWet = false;
                this.honeyWet = false;
            }

            if (this.wetCount > (byte) 0)
                --this.wetCount;
            var fall = this.Collision_DecideFallThroughPlatforms();
            this.oldVelocity = this.velocity;
            this.collideX = false;
            this.collideY = false;
            this.FishTransformationDuringRain();
            Vector2 cPosition;
            int cWidth;
            int cHeight;
            this.GetTileCollisionParameters(out cPosition, out cWidth, out cHeight);
            var velocity = this.velocity;
            this.ApplyTileCollision(fall, cPosition, cWidth, cHeight);
            if (this.wet)
            {
                if (this.honeyWet)
                    this.Collision_MoveWhileWet(velocity, this.honeyMovementSpeed);
                else if (this.lavaWet)
                    this.Collision_MoveWhileWet(velocity, this.lavaMovementSpeed);
                else
                    this.Collision_MoveWhileWet(velocity, this.waterMovementSpeed);
            }
            else
                this.Collision_MoveWhileDry();

            if (this.aiStyle == 67)
            {
                this.Collision_MoveSnailOnSlopes();
            }
            else
            {
                if (this.type == 72 || this.type == 247 || this.type == 248 ||
                    (this.type >= 542 && this.type <= 545 ||
                     NPCID.Sets.BelongsToInvasionOldOnesArmy[this.type] && this.noGravity))
                    return;
                this.Collision_MoveSlopesAndStairFall(fall);
                if (!this.townNPC)
                    return;
                Collision.StepConveyorBelt((Entity) this, 1f);
            }
        }

        private void Collision_MoveWhileDry()
        {
            if (Collision.up)
                this.velocity.Y = 0.01f;
            if ((double) this.oldVelocity.X != (double) this.velocity.X)
                this.collideX = true;
            if ((double) this.oldVelocity.Y != (double) this.velocity.Y)
                this.collideY = true;
            this.oldPosition = this.position;
            this.oldDirection = this.direction;
            var npc = this;
            npc.position = npc.position + this.velocity;
        }

        private void ApplyTileCollision(bool fall, Vector2 cPosition, int cWidth, int cHeight)
        {
            if (this.type == 72)
                this.Collision_MoveBlazingWheel();
            else if (this.type >= 542 && this.type <= 545)
                this.Collision_MoveSandshark(fall, cPosition, cWidth, cHeight);
            else if (this.type == 405 || this.type == 406)
                this.Collision_MoveStardustCell(fall, cPosition, cWidth, cHeight);
            else if (this.type == 417)
                this.Collision_MoveSolarSroller(fall, cPosition, cWidth, cHeight);
            else
                this.Collision_MoveNormal(fall, cPosition, cWidth, cHeight);
        }

        private void Collision_MoveSlopesAndStairFall(bool fall)
        {
            if (fall)
                this.stairFall = true;
            if (this.aiStyle == 7)
            {
                var x = (int) this.Center.X / 16;
                var y = (int) this.position.Y / 16;
                if (WorldGen.InWorld(x, y, 0))
                {
                    var num = 16;
                    var flag = false;
                    if (Main.tile[x, y] != null && Main.tile[x, y].active() &&
                        Main.tileSolid[(int) Main.tile[x, y].type])
                        flag = true;
                    if (!Main.dayTime || Main.eclipse)
                        flag = true;
                    else if (this.homeTileY - (int) ((double) this.position.Y + (double) this.height) / 16 > num)
                        flag = true;
                    if (flag)
                        this.stairFall = ((double) this.position.Y + (double) this.height - 8.0) / 16.0 <
                                         (double) this.homeTileY;
                }
            }

            Vector2 cPosition;
            int cWidth;
            int cHeight;
            this.GetTileCollisionParameters(out cPosition, out cWidth, out cHeight);
            var vector2 = this.position - cPosition;
            var vector4 =
                Collision.SlopeCollision(cPosition, this.velocity, cWidth, cHeight, NPC.gravity, this.stairFall);
            if (Collision.stairFall)
                this.stairFall = true;
            else if (!fall)
                this.stairFall = false;
            if (Collision.stair && (double) Math.Abs(vector4.Y - this.position.Y) > 8.0)
            {
                this.gfxOffY -= vector4.Y - this.position.Y;
                this.stepSpeed = 2f;
            }

            this.position.X = vector4.X;
            this.position.Y = vector4.Y;
            this.velocity.X = vector4.Z;
            this.velocity.Y = vector4.W;
            var npc = this;
            npc.position = npc.position + vector2;
        }

        private void Collision_MoveSnailOnSlopes()
        {
            var vector4 = Collision.SlopeCollision(this.position, this.velocity, this.width, this.height,
                NPC.gravity, false);
            if ((double) this.position.X != (double) vector4.X || (double) this.position.Y != (double) vector4.Y)
            {
                if ((double) this.ai[2] == 0.0 && (double) this.velocity.Y > 0.0 &&
                    (this.direction < 0 && (double) this.rotation == 1.57000005245209 && this.spriteDirection == 1 ||
                     this.direction > 0 && (double) this.rotation == 4.71000003814697 && this.spriteDirection == -1))
                    this.direction *= -this.direction;
                this.ai[2] = 2f;
                this.directionY = 1;
                this.rotation = 0.0f;
            }

            this.position.X = vector4.X;
            this.position.Y = vector4.Y;
            this.velocity.X = vector4.Z;
            this.velocity.Y = vector4.W;
        }

        private void Collision_MoveNormal(bool fall, Vector2 cPosition, int cWidth, int cHeight)
        {
            this.velocity = Collision.TileCollision(cPosition, this.velocity, cWidth, cHeight, fall, fall, 1);
        }

        private void Collision_MoveSandshark(bool fall, Vector2 cPosition, int cWidth, int cHeight)
        {
            this.velocity = Collision.AdvancedTileCollision(TileID.Sets.ForAdvancedCollision.ForSandshark, cPosition,
                this.velocity, cWidth, cHeight, fall, fall, 1);
        }

        private void Collision_MoveSolarSroller(bool fall, Vector2 cPosition, int cWidth, int cHeight)
        {
            this.velocity = Collision.TileCollision(cPosition, this.velocity, cWidth, cHeight, fall, fall, 1);
            if ((double) this.ai[0] != 6.0 || !(this.velocity != this.oldVelocity))
                return;
            --this.ai[2];
            this.ai[3] = 1f;
            if ((double) this.ai[2] <= 0.0)
                return;
            if ((double) this.velocity.X != 0.0 && (double) this.velocity.X != (double) this.oldVelocity.X)
            {
                this.velocity.X = (float) (-(double) this.oldVelocity.X * 0.899999976158142);
                this.direction *= -1;
            }

            if ((double) this.velocity.Y == 0.0 || (double) this.velocity.Y == (double) this.oldVelocity.Y)
                return;
            this.velocity.Y = (float) (-(double) this.oldVelocity.Y * 0.899999976158142);
        }

        private void Collision_MoveStardustCell(bool fall, Vector2 cPosition, int cWidth, int cHeight)
        {
            this.velocity = Collision.TileCollision(cPosition, this.velocity, cWidth, cHeight, fall, fall, 1);
            if (!(this.velocity != this.oldVelocity))
                return;
            if ((double) this.velocity.X != 0.0 && (double) this.velocity.X != (double) this.oldVelocity.X)
                this.velocity.X = (float) (-(double) this.oldVelocity.X * 0.800000011920929);
            if ((double) this.velocity.Y == 0.0 || (double) this.velocity.Y == (double) this.oldVelocity.Y)
                return;
            this.velocity.Y = (float) (-(double) this.oldVelocity.Y * 0.800000011920929);
        }

        private void Collision_MoveBlazingWheel()
        {
            var Position = new Vector2(this.position.X + (float) (this.width / 2),
                this.position.Y + (float) (this.height / 2));
            var Width = 12;
            var Height = 12;
            Position.X -= (float) (Width / 2);
            Position.Y -= (float) (Height / 2);
            this.velocity = Collision.noSlopeCollision(Position, this.velocity, Width, Height, true, true);
        }

        private void Collision_MoveWaterOrLavaOld(bool fall, Vector2 cPosition, int cWidth, int cHeight)
        {
            var velocity = this.velocity;
            this.velocity = Collision.TileCollision(cPosition, this.velocity, cWidth, cHeight, fall, fall, 1);
            if (Collision.up)
                this.velocity.Y = 0.01f;
            var vector2 = this.velocity * 0.5f;
            if ((double) this.velocity.X != (double) velocity.X)
            {
                vector2.X = this.velocity.X;
                this.collideX = true;
            }

            if ((double) this.velocity.Y != (double) velocity.Y)
            {
                vector2.Y = this.velocity.Y;
                this.collideY = true;
            }

            this.oldPosition = this.position;
            this.oldDirection = this.direction;
            var npc = this;
            npc.position = npc.position + vector2;
        }

        private void Collision_MoveHoneyOld(bool fall, Vector2 cPosition, int cWidth, int cHeight)
        {
            var velocity = this.velocity;
            this.velocity = Collision.TileCollision(cPosition, this.velocity, cWidth, cHeight, fall, fall, 1);
            if (Collision.up)
                this.velocity.Y = 0.01f;
            var vector2 = this.velocity * 0.25f;
            if ((double) this.velocity.X != (double) velocity.X)
            {
                vector2.X = this.velocity.X;
                this.collideX = true;
            }

            if ((double) this.velocity.Y != (double) velocity.Y)
            {
                vector2.Y = this.velocity.Y;
                this.collideY = true;
            }

            this.oldPosition = this.position;
            this.oldDirection = this.direction;
            var npc = this;
            npc.position = npc.position + vector2;
        }

        private void Collision_MoveWhileWet(Vector2 oldDryVelocity, float Slowdown = 0.5f)
        {
            if (Collision.up)
                this.velocity.Y = 0.01f;
            var vector2 = this.velocity * Slowdown;
            if ((double) this.velocity.X != (double) oldDryVelocity.X)
            {
                vector2.X = this.velocity.X;
                this.collideX = true;
            }

            if ((double) this.velocity.Y != (double) oldDryVelocity.Y)
            {
                vector2.Y = this.velocity.Y;
                this.collideY = true;
            }

            this.oldPosition = this.position;
            this.oldDirection = this.direction;
            var npc = this;
            npc.position = npc.position + vector2;
        }

        private void GetTileCollisionParameters(out Vector2 cPosition, out int cWidth, out int cHeight)
        {
            cPosition = this.position;
            cWidth = this.width;
            cHeight = this.height;
            if (this.type == 243)
                cHeight = 90;
            if (this.type == 290)
                cHeight = 40;
            if (this.type == 351)
                cHeight = 40;
            if (this.type == 482)
                cHeight = 40;
            if (this.type == 351 || this.type == 343 || (this.type == 348 || this.type == 349))
                cHeight = 40;
            if (this.type == 391)
            {
                for (var index = 0; index < 200; ++index)
                {
                    if (Main.npc[index].active && Main.npc[index].type == 390 &&
                        (double) Main.npc[index].ai[0] == (double) this.whoAmI)
                    {
                        cHeight = 62;
                        break;
                    }
                }
            }

            if (this.type == 415)
            {
                for (var index = 0; index < 200; ++index)
                {
                    if (Main.npc[index].active && Main.npc[index].type == 416 &&
                        (double) Main.npc[index].ai[0] == (double) this.whoAmI)
                    {
                        cHeight = 62;
                        break;
                    }
                }
            }

            if (this.type == 576 || this.type == 577)
            {
                cPosition.X += 32f;
                cWidth -= 64;
            }

            if (cHeight == this.height)
                return;
            cPosition.Y += (float) (this.height - cHeight);
        }

        private void FishTransformationDuringRain()
        {
            if (Main.netMode == 1)
                return;
            if (this.type == 230 && this.wet)
            {
                var direction = this.direction;
                var velocity = this.velocity;
                this.Transform(55);
                this.direction = direction;
                this.velocity = velocity;
                this.wet = true;
                if ((double) this.velocity.Y >= 0.0)
                    return;
                this.velocity.Y = 0.0f;
            }
            else
            {
                if (this.type != 55 || this.wet || !Main.raining)
                    return;
                var direction = this.direction;
                var velocity = this.velocity;
                this.Transform(230);
                this.direction = direction;
                this.velocity = velocity;
                this.homeTileX = (int) ((double) this.position.X / 16.0) + 10 * this.direction;
            }
        }

        private bool Collision_DecideFallThroughPlatforms()
        {
            var flag1 = false;
            if (this.type == 2 || this.type == -43 || (this.type == 317 || this.type == 318) || this.type == 133)
                flag1 = true;
            if (this.aiStyle == 10)
                flag1 = true;
            if (this.aiStyle == 40)
                flag1 = true;
            if (this.type == 467)
                flag1 = true;
            if (this.type == 477)
                flag1 = true;
            if (this.aiStyle == 14)
                flag1 = true;
            if (this.type == 173)
                flag1 = true;
            if (this.type == 469 && (double) this.ai[2] == 1.0)
                flag1 = true;
            if (this.aiStyle == 3 && this.directionY == 1)
                flag1 = true;
            if (this.type == 210 || this.type == 211)
                flag1 = true;
            if (this.type == 50 && this.target >= 0 && (double) Main.player[this.target].position.Y >
                (double) this.position.Y + (double) this.height)
                flag1 = true;
            if (this.type == 247 || this.type == 248)
                flag1 = true;
            if (this.type == 245 && this.target >= 0 && (double) Main.player[this.target].position.Y >
                (double) this.position.Y + (double) this.height)
                flag1 = true;
            if (this.type >= 542 && this.type <= 545)
                flag1 = true;
            if (this.aiStyle == 107 && this.directionY == 1)
                flag1 = true;
            if (this.type == 418)
                flag1 = true;
            if (this.aiStyle == 87 && (double) Main.player[this.target].position.Y >
                (double) this.position.Y + (double) this.height)
                flag1 = true;
            if (this.aiStyle == 7)
            {
                var num = 16;
                var flag2 = false;
                if (!Main.dayTime || Main.invasionType > 0 || Main.eclipse)
                    flag2 = true;
                else if (this.homeTileY - (int) ((double) this.position.Y + (double) this.height) / 16 > num)
                    flag1 = true;
                if (flag2 && ((double) this.position.Y + (double) this.height - 8.0) / 16.0 <
                    (double) (this.homeTileY - 1))
                    flag1 = true;
            }

            return flag1;
        }

        private bool Collision_WaterCollision(bool lava)
        {
            bool flag;
            if (this.type == 72 || this.aiStyle == 21 || (this.aiStyle == 67 || this.type == 376) ||
                (this.type == 579 || this.type == 541))
            {
                flag = false;
                this.wetCount = (byte) 0;
                lava = false;
            }
            else
            {
                flag = Collision.WetCollision(this.position, this.width, this.height);
                if (Collision.honey)
                    this.honeyWet = true;
            }

            if (flag)
            {
                if (this.onFire && !this.lavaWet && Main.netMode != 1)
                {
                    for (var b = 0; b < 5; ++b)
                    {
                        if (this.buffType[b] == 24)
                            this.DelBuff(b);
                    }
                }

                if (!this.wet && this.wetCount == (byte) 0)
                {
                    this.wetCount = (byte) 10;
                    if (!lava)
                    {
                        if (this.honeyWet)
                        {
                            for (var index1 = 0; index1 < 10; ++index1)
                            {
                                var index2 =
                                    Dust.NewDust(
                                        new Vector2(this.position.X - 6f,
                                            (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)),
                                        this.width + 12, 24, 152, 0.0f, 0.0f, 0, new Color(), 1f);
                                --Main.dust[index2].velocity.Y;
                                Main.dust[index2].velocity.X *= 2.5f;
                                Main.dust[index2].scale = 1.3f;
                                Main.dust[index2].alpha = 100;
                                Main.dust[index2].noGravity = true;
                            }

                            if (this.aiStyle != 1 && this.type != 1 && (this.type != 16 && this.type != 147) &&
                                (this.type != 59 && this.type != 300 && (this.aiStyle != 39 && !this.noGravity)))
                                Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                        }
                        else
                        {
                            for (var index1 = 0; index1 < 30; ++index1)
                            {
                                var index2 =
                                    Dust.NewDust(
                                        new Vector2(this.position.X - 6f,
                                            (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)),
                                        this.width + 12, 24, Dust.dustWater(), 0.0f, 0.0f, 0, new Color(), 1f);
                                Main.dust[index2].velocity.Y -= 4f;
                                Main.dust[index2].velocity.X *= 2.5f;
                                Main.dust[index2].scale *= 0.8f;
                                Main.dust[index2].alpha = 100;
                                Main.dust[index2].noGravity = true;
                            }

                            if (this.type != 376 && this.type != 579 && (this.aiStyle != 1 && this.type != 1) &&
                                (this.type != 16 && this.type != 147 && (this.type != 59 && this.type != 300)) &&
                                (this.aiStyle != 39 && this.aiStyle != 68 && (this.type != 362 && this.type != 364) &&
                                 (this.type != 361 && this.type != 445 && !this.noGravity)))
                                Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
                        }
                    }
                    else
                    {
                        for (var index1 = 0; index1 < 10; ++index1)
                        {
                            var index2 =
                                Dust.NewDust(
                                    new Vector2(this.position.X - 6f,
                                        (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)),
                                    this.width + 12, 24, 35, 0.0f, 0.0f, 0, new Color(), 1f);
                            Main.dust[index2].velocity.Y -= 1.5f;
                            Main.dust[index2].velocity.X *= 2.5f;
                            Main.dust[index2].scale = 1.3f;
                            Main.dust[index2].alpha = 100;
                            Main.dust[index2].noGravity = true;
                        }

                        if (this.aiStyle != 1 && this.type != 1 && (this.type != 16 && this.type != 147) &&
                            (this.type != 59 && this.type != 300 && (this.aiStyle != 39 && !this.noGravity)))
                            Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    }
                }

                this.wet = true;
            }
            else if (this.wet)
            {
                this.velocity.X *= 0.5f;
                this.wet = false;
                if (this.wetCount == (byte) 0)
                {
                    this.wetCount = (byte) 10;
                    if (!this.lavaWet)
                    {
                        if (this.honeyWet)
                        {
                            for (var index1 = 0; index1 < 10; ++index1)
                            {
                                var index2 =
                                    Dust.NewDust(
                                        new Vector2(this.position.X - 6f,
                                            (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)),
                                        this.width + 12, 24, 152, 0.0f, 0.0f, 0, new Color(), 1f);
                                --Main.dust[index2].velocity.Y;
                                Main.dust[index2].velocity.X *= 2.5f;
                                Main.dust[index2].scale = 1.3f;
                                Main.dust[index2].alpha = 100;
                                Main.dust[index2].noGravity = true;
                            }

                            if (this.aiStyle != 1 && this.type != 1 && (this.type != 16 && this.type != 147) &&
                                (this.type != 300 && this.type != 59 && (this.aiStyle != 39 && !this.noGravity)))
                                Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                        }
                        else
                        {
                            for (var index1 = 0; index1 < 30; ++index1)
                            {
                                var index2 =
                                    Dust.NewDust(
                                        new Vector2(this.position.X - 6f,
                                            (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)),
                                        this.width + 12, 24, Dust.dustWater(), 0.0f, 0.0f, 0, new Color(), 1f);
                                Main.dust[index2].velocity.Y -= 4f;
                                Main.dust[index2].velocity.X *= 2.5f;
                                Main.dust[index2].scale *= 0.8f;
                                Main.dust[index2].alpha = 100;
                                Main.dust[index2].noGravity = true;
                            }

                            if (this.type != 376 && this.type != 579 && (this.aiStyle != 1 && this.type != 1) &&
                                (this.type != 16 && this.type != 59 && (this.type != 300 && this.aiStyle != 39)) &&
                                (this.aiStyle != 68 && this.type != 362 && (this.type != 364 && this.type != 361) &&
                                 (this.type != 445 && !this.noGravity)))
                                Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
                        }
                    }
                    else
                    {
                        for (var index1 = 0; index1 < 10; ++index1)
                        {
                            var index2 =
                                Dust.NewDust(
                                    new Vector2(this.position.X - 6f,
                                        (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)),
                                    this.width + 12, 24, 35, 0.0f, 0.0f, 0, new Color(), 1f);
                            Main.dust[index2].velocity.Y -= 1.5f;
                            Main.dust[index2].velocity.X *= 2.5f;
                            Main.dust[index2].scale = 1.3f;
                            Main.dust[index2].alpha = 100;
                            Main.dust[index2].noGravity = true;
                        }

                        if (this.aiStyle != 1 && this.type != 1 && (this.type != 16 && this.type != 59) &&
                            (this.type != 300 && this.aiStyle != 39 && !this.noGravity))
                            Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    }
                }
            }

            return lava;
        }

        private bool Collision_LavaCollision()
        {
            var flag = Collision.LavaCollision(this.position, this.width, this.height);
            if (flag)
            {
                this.lavaWet = true;
                if (!this.lavaImmune && !this.dontTakeDamage &&
                    (Main.netMode != 1 && this.immune[(int) byte.MaxValue] == 0))
                {
                    this.AddBuff(24, 420, false);
                    this.immune[(int) byte.MaxValue] = 30;
                    this.StrikeNPCNoInteraction(50, 0.0f, 0, false, false, false);
                    if (Main.netMode == 2 && Main.netMode != 0)
                        NetMessage.SendData(28, -1, -1, (NetworkText) null, this.whoAmI, 50f, 0.0f, 0.0f, 0, 0, 0);
                }
            }

            return flag;
        }

        private void Collision_WalkDownSlopes()
        {
            var y = (double) this.velocity.Y;
            var vector4 =
                Collision.WalkDownSlope(this.position, this.velocity, this.width, this.height, NPC.gravity);
            this.position.X = vector4.X;
            this.position.Y = vector4.Y;
            this.velocity.X = vector4.Z;
            this.velocity.Y = vector4.W;
        }

        public static void setFireFlyChance()
        {
            if (Main.rand == null)
                Main.rand = new UnifiedRandom((int) DateTime.Now.Ticks);
            if (WorldGen.genRand.Next(9) == 0)
            {
                NPC.fireFlyChance = Main.rand.Next(5, 10);
                NPC.fireFlyFriendly = Main.rand.Next(1, 4);
                NPC.fireFlyMultiple = Main.rand.Next(3, 8);
            }
            else if (WorldGen.genRand.Next(3) == 0)
            {
                NPC.fireFlyChance = 999999;
                NPC.fireFlyFriendly = 999999;
                NPC.fireFlyMultiple = 999999;
            }
            else
            {
                NPC.fireFlyChance = Main.rand.Next(10, 60);
                NPC.fireFlyFriendly = Main.rand.Next(2, 15);
                NPC.fireFlyMultiple = Main.rand.Next(6, 30);
            }

            NPC.butterflyChance = Main.rand.Next(1, 25);
            if (WorldGen.genRand.Next(3) != 0)
                return;
            NPC.butterflyChance = 999999;
        }

        public Color GetAlpha(Color newColor)
        {
            var num1 = (float) ((int) byte.MaxValue - this.alpha) / (float) byte.MaxValue;
            var r1 = (int) ((double) newColor.R * (double) num1);
            var g1 = (int) ((double) newColor.G * (double) num1);
            var b1 = (int) ((double) newColor.B * (double) num1);
            var a = (int) newColor.A - this.alpha;
            if (this.type == 402)
                return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
            if (this.type == 484)
                return new Color(250, 250, 250, 200);
            if (this.type >= 542 && this.type <= 545 && (r1 + g1 + b1 > 10 && r1 + g1 + b1 >= 60))
            {
                r1 *= 2;
                g1 *= 2;
                b1 *= 2;
                if (r1 > (int) byte.MaxValue)
                    r1 = (int) byte.MaxValue;
                if (g1 > (int) byte.MaxValue)
                    g1 = (int) byte.MaxValue;
                if (b1 > (int) byte.MaxValue)
                    b1 = (int) byte.MaxValue;
            }

            if (this.type >= 454 && this.type <= 459 || this.type == 521)
            {
                newColor = Color.Lerp(newColor, Color.White, 0.4f);
                newColor.A = (byte) 150;
                newColor *= (float) a / (float) byte.MaxValue;
                return newColor;
            }

            if (this.type == 440)
            {
                byte num2 = 180;
                if (Main.expertMode)
                    num2 = (byte) 210;
                var num3 = (byte) ((double) num2 * (double) num1);
                return new Color((int) num3, (int) num3, (int) num3, (int) num3);
            }

            if (this.type == 516)
                return new Color(this.alpha, this.alpha, this.alpha, this.alpha);
            if (this.type == 522)
                return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                    (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
            if (this.type == 523)
                return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                    (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
            if (this.type == 395 || this.type == 519)
            {
                newColor = Color.Lerp(newColor, Color.White, 0.4f);
                return newColor;
            }

            if (this.type == 370 && (double) this.ai[0] != -1.0 && (double) this.ai[0] < 9.0)
            {
                var num2 = MathHelper.Lerp(num1, 1f, 0.25f);
                if ((double) num2 > 1.0)
                    num2 = 1f;
                b1 = (int) ((double) newColor.B * (double) num2);
            }

            if (this.type == 30)
                return new Color(250, 250, 250, 100);
            if (this.type == 25 || this.type == 30 || (this.type == 59 || this.type == 60))
                return new Color(200, 200, 200, 0);
            if (this.type == 360)
            {
                var r2 = (int) newColor.R;
                var g2 = (int) newColor.G;
                var b2 = (int) newColor.B;
                if (r2 < 75)
                    r2 = 75;
                if (g2 < 175)
                    g2 = 175;
                if (b2 < (int) byte.MaxValue)
                    b2 = (int) byte.MaxValue;
                return new Color(r2, g2, b2, (int) byte.MaxValue);
            }

            if (this.type == 352)
                return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
            if (this.type == 72)
            {
                r1 = (int) newColor.R;
                g1 = (int) newColor.G;
                b1 = (int) newColor.B;
            }
            else
            {
                if (this.type == 288)
                    return new Color(200, 200, 200, 0);
                if (this.type == 289)
                    return new Color(250, 250, 250, 50);
                if (this.type >= 254 && this.type <= 261)
                {
                    b1 = (int) byte.MaxValue;
                    if (r1 < 100)
                        r1 = 100;
                    if (g1 < 150)
                        g1 = 150;
                }
                else if (this.type == 374)
                {
                    b1 = (int) byte.MaxValue;
                    if (r1 < 100)
                        r1 = 100;
                    if (g1 < 150)
                        g1 = 150;
                }
                else
                {
                    if (this.type == 549)
                    {
                        newColor = Color.Lerp(newColor, Color.White, 0.4f);
                        newColor *= (float) a / (float) byte.MaxValue;
                        return newColor;
                    }

                    if (this.type == 64 || this.type == 63 || (this.type == 75 || this.type == 103) || this.type == 400)
                    {
                        r1 = (int) ((double) newColor.R * 1.5);
                        g1 = (int) ((double) newColor.G * 1.5);
                        b1 = (int) ((double) newColor.B * 1.5);
                        if (r1 > (int) byte.MaxValue)
                            r1 = (int) byte.MaxValue;
                        if (g1 > (int) byte.MaxValue)
                            g1 = (int) byte.MaxValue;
                        if (b1 > (int) byte.MaxValue)
                            b1 = (int) byte.MaxValue;
                    }
                }
            }

            if (a < 0)
                a = 0;
            if (a > (int) byte.MaxValue)
                a = (int) byte.MaxValue;
            return new Color(r1, g1, b1, a);
        }

        public Color GetColor(Color newColor)
        {
            var r = (int) this.color.R - ((int) byte.MaxValue - (int) newColor.R);
            var g = (int) this.color.G - ((int) byte.MaxValue - (int) newColor.G);
            var b = (int) this.color.B - ((int) byte.MaxValue - (int) newColor.B);
            var a = (int) this.color.A - ((int) byte.MaxValue - (int) newColor.A);
            if (r < 0)
                r = 0;
            if (r > (int) byte.MaxValue)
                r = (int) byte.MaxValue;
            if (g < 0)
                g = 0;
            if (g > (int) byte.MaxValue)
                g = (int) byte.MaxValue;
            if (b < 0)
                b = 0;
            if (b > (int) byte.MaxValue)
                b = (int) byte.MaxValue;
            if (a < 0)
                a = 0;
            if (a > (int) byte.MaxValue)
                a = (int) byte.MaxValue;
            return new Color(r, g, b, a);
        }

        private string GetBirthdayDialog()
        {
            switch (this.type)
            {
                case 17:
                    return Language.SelectRandom(Lang.CreateDialogFilter("MerchantSpecialText.Party"),
                        (UnifiedRandom) null).Value;
                case 18:
                    return Language
                        .SelectRandom(Lang.CreateDialogFilter("NurseSpecialText.Party"), (UnifiedRandom) null).Value;
                case 19:
                    return Language.SelectRandom(Lang.CreateDialogFilter("ArmsDealerSpecialText.Party"),
                        (UnifiedRandom) null).Value;
                case 20:
                    return Language
                        .SelectRandom(Lang.CreateDialogFilter("DryadSpecialText.Party"), (UnifiedRandom) null).Value;
                case 22:
                    return Language
                        .SelectRandom(Lang.CreateDialogFilter("GuideSpecialText.Party"), (UnifiedRandom) null).Value;
                case 38:
                    return Language.SelectRandom(Lang.CreateDialogFilter("DemolitionistSpecialText.Party"),
                        (UnifiedRandom) null).Value;
                case 54:
                    return Language.SelectRandom(Lang.CreateDialogFilter("ClothierSpecialText.Party"),
                        (UnifiedRandom) null).Value;
                case 107:
                    return Language.SelectRandom(Lang.CreateDialogFilter("GoblinTinkererSpecialText.Party"),
                        (UnifiedRandom) null).Value;
                case 108:
                    return Language.SelectRandom(Lang.CreateDialogFilter("WizardSpecialText.Party"),
                        (UnifiedRandom) null).Value;
                case 124:
                    return Language.SelectRandom(Lang.CreateDialogFilter("MechanicSpecialText.Party"),
                        (UnifiedRandom) null).Value;
                case 142:
                    return Language.SelectRandom(Lang.CreateDialogFilter("SantaClausSpecialText.Party"),
                        (UnifiedRandom) null).Value;
                case 160:
                    return Language.SelectRandom(Lang.CreateDialogFilter("TruffleSpecialText.Party"),
                        (UnifiedRandom) null).Value;
                case 178:
                    return Language.SelectRandom(Lang.CreateDialogFilter("SteampunkerSpecialText.Party"),
                        (UnifiedRandom) null).Value;
                case 207:
                    return Language.SelectRandom(Lang.CreateDialogFilter("DyeTraderSpecialText.Party"),
                        (UnifiedRandom) null).Value;
                case 208:
                    return Language.SelectRandom(Lang.CreateDialogFilter("PartyGirlSpecialText.Party"),
                        (UnifiedRandom) null).Value;
                case 209:
                    return Language.SelectRandom(Lang.CreateDialogFilter("CyborgSpecialText.Party"),
                        (UnifiedRandom) null).Value;
                case 227:
                    return Language.SelectRandom(Lang.CreateDialogFilter("PainterSpecialText.Party"),
                        (UnifiedRandom) null).Value;
                case 228:
                    return Language.SelectRandom(Lang.CreateDialogFilter("WitchDoctorSpecialText.Party"),
                        (UnifiedRandom) null).Value;
                case 229:
                    return Language.SelectRandom(Lang.CreateDialogFilter("PirateSpecialText.Party"),
                        (UnifiedRandom) null).Value;
                case 353:
                    return Language.SelectRandom(Lang.CreateDialogFilter("StylistSpecialText.Party"),
                        (UnifiedRandom) null).Value;
                case 368:
                    return Language.SelectRandom(Lang.CreateDialogFilter("TravellingMerchantSpecialText.Party"),
                        (UnifiedRandom) null).Value;
                case 369:
                    return Language.SelectRandom(Lang.CreateDialogFilter("AnglerSpecialText.Party"),
                        (UnifiedRandom) null).Value;
                case 550:
                    return Language.SelectRandom(Lang.CreateDialogFilter("DD2BartenderSpecialText.Party"),
                        (UnifiedRandom) null).Value;
                default:
                    return "";
            }
        }

        public string GetChat()
        {
            Recipe.FindRecipes();
            var flag1 = false;
            var flag2 = false;
            var flag3 = false;
            var flag4 = false;
            var flag5 = false;
            var flag6 = false;
            var flag7 = false;
            var flag8 = false;
            var flag9 = false;
            var flag10 = false;
            var flag11 = false;
            var flag12 = false;
            var flag13 = false;
            var flag14 = false;
            var flag15 = false;
            var flag16 = false;
            var substitutionObject = Lang.CreateDialogSubstitutionObject(this);
            var flag17 = false;
            for (var index = 0; index < 200; ++index)
            {
                if (Main.npc[index].active)
                {
                    if (Main.npc[index].type == 17)
                        flag1 = true;
                    else if (Main.npc[index].type == 18)
                        flag2 = true;
                    else if (Main.npc[index].type == 19)
                        flag3 = true;
                    else if (Main.npc[index].type == 20)
                        flag4 = true;
                    else if (Main.npc[index].type == 37)
                        flag5 = true;
                    else if (Main.npc[index].type == 38)
                        flag6 = true;
                    else if (Main.npc[index].type == 124)
                        flag7 = true;
                    else if (Main.npc[index].type == 107)
                        flag8 = true;
                    else if (Main.npc[index].type == 54)
                        flag9 = true;
                    else if (Main.npc[index].type == 160)
                        flag10 = true;
                    else if (Main.npc[index].type == 178)
                        flag11 = true;
                    else if (Main.npc[index].type == 229)
                        flag12 = true;
                    else if (Main.npc[index].type == 209)
                        flag13 = true;
                    else if (Main.npc[index].type == 208)
                        flag14 = true;
                    else if (Main.npc[index].type == 353)
                        flag15 = true;
                    else if (Main.npc[index].type == 22)
                        flag16 = true;
                    else if (Main.npc[index].type == 2)
                    {
                        flag17 = true;
                    }
                    else
                    {
                        var type = Main.npc[index].type;
                    }
                }
            }

            var str = "";
            if (this.type == 17)
            {
                if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
                    str = this.GetBirthdayDialog();
                else if (!NPC.downedBoss1 && Main.rand.Next(3) == 0)
                    str = Main.player[Main.myPlayer].statLifeMax >= 200
                        ? (Main.player[Main.myPlayer].statDefense > 10 ? Lang.dialog(3, false) : Lang.dialog(2, false))
                        : Lang.dialog(1, false);
                else if (Main.dayTime)
                {
                    if (Main.time < 16200.0)
                    {
                        switch (Main.rand.Next(3))
                        {
                            case 0:
                                str = Lang.dialog(4, false);
                                break;
                            case 1:
                                str = Lang.dialog(5, false);
                                break;
                            default:
                                str = Lang.dialog(6, false);
                                break;
                        }
                    }
                    else if (Main.time > 37800.0)
                    {
                        switch (Main.rand.Next(3))
                        {
                            case 0:
                                str = Lang.dialog(7, false);
                                break;
                            case 1:
                                str = Lang.dialog(8, false);
                                break;
                            default:
                                str = Lang.dialog(9, false);
                                break;
                        }
                    }
                    else
                    {
                        switch (Main.rand.Next(3))
                        {
                            case 0:
                                str = Lang.dialog(10, false);
                                break;
                            case 1:
                                str = Lang.dialog(11, false);
                                break;
                            default:
                                str = Lang.dialog(12, false);
                                break;
                        }
                    }
                }
                else if (Main.bloodMoon)
                {
                    if (flag2 && flag7 && Main.rand.Next(3) == 0)
                    {
                        str = Lang.dialog(13, false);
                    }
                    else
                    {
                        switch (Main.rand.Next(4))
                        {
                            case 0:
                                str = Lang.dialog(14, false);
                                break;
                            case 1:
                                str = Lang.dialog(15, false);
                                break;
                            case 2:
                                str = Lang.dialog(16, false);
                                break;
                            default:
                                str = Lang.dialog(17, false);
                                break;
                        }
                    }
                }
                else if (Main.time < 9720.0)
                    str = Main.rand.Next(2) != 0 ? Lang.dialog(19, false) : Lang.dialog(18, false);
                else if (Main.time > 22680.0)
                {
                    str = Main.rand.Next(2) != 0 ? Lang.dialog(21, false) : Lang.dialog(20, false);
                }
                else
                {
                    switch (Main.rand.Next(3))
                    {
                        case 0:
                            str = Lang.dialog(22, false);
                            break;
                        case 1:
                            str = Lang.dialog(23, false);
                            break;
                        default:
                            str = Lang.dialog(24, false);
                            break;
                    }
                }
            }
            else if (this.type == 18)
            {
                if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
                    str = this.GetBirthdayDialog();
                else if (Main.bloodMoon)
                {
                    if ((double) Main.player[Main.myPlayer].statLife <
                        (double) Main.player[Main.myPlayer].statLifeMax2 * 0.66)
                    {
                        switch (Main.rand.Next(3))
                        {
                            case 0:
                                str = Lang.dialog(25, false);
                                break;
                            case 1:
                                str = Lang.dialog(26, false);
                                break;
                            default:
                                str = Lang.dialog(27, false);
                                break;
                        }
                    }
                    else
                    {
                        switch (Main.rand.Next(4))
                        {
                            case 0:
                                str = Lang.dialog(28, false);
                                break;
                            case 1:
                                str = Lang.dialog(29, false);
                                break;
                            case 2:
                                str = Lang.dialog(30, false);
                                break;
                            default:
                                str = Lang.dialog(31, false);
                                break;
                        }
                    }
                }
                else if (Main.rand.Next(3) == 0 && !NPC.downedBoss3)
                    str = Lang.dialog(32, false);
                else if (flag6 && Main.rand.Next(4) == 0)
                    str = Lang.dialog(33, false);
                else if (flag3 && Main.rand.Next(4) == 0)
                    str = Lang.dialog(34, false);
                else if (flag17 && Main.rand.Next(4) == 0)
                    str = Lang.dialog(35, false);
                else if ((double) Main.player[Main.myPlayer].statLife <
                         (double) Main.player[Main.myPlayer].statLifeMax2 * 0.33)
                {
                    switch (Main.rand.Next(5))
                    {
                        case 0:
                            str = Lang.dialog(36, false);
                            break;
                        case 1:
                            str = Lang.dialog(37, false);
                            break;
                        case 2:
                            str = Lang.dialog(38, false);
                            break;
                        case 3:
                            str = Lang.dialog(39, false);
                            break;
                        default:
                            str = Lang.dialog(40, false);
                            break;
                    }
                }
                else if ((double) Main.player[Main.myPlayer].statLife <
                         (double) Main.player[Main.myPlayer].statLifeMax2 * 0.66)
                {
                    switch (Main.rand.Next(7))
                    {
                        case 0:
                            str = Lang.dialog(41, false);
                            break;
                        case 1:
                            str = Lang.dialog(42, false);
                            break;
                        case 2:
                            str = Lang.dialog(43, false);
                            break;
                        case 3:
                            str = Lang.dialog(44, false);
                            break;
                        case 4:
                            str = Lang.dialog(45, false);
                            break;
                        case 5:
                            str = Lang.dialog(46, false);
                            break;
                        default:
                            str = Lang.dialog(47, false);
                            break;
                    }
                }
                else
                {
                    var all =
                        Language.FindAll(Lang.CreateDialogFilter("NurseChatter.", substitutionObject));
                    var num = Main.rand.Next(4 + all.Length);
                    str = num < 4
                        ? (num != 0
                            ? (num != 1
                                ? (num != 2 ? Lang.dialog(51, false) : Lang.dialog(50, false))
                                : Lang.dialog(49, false))
                            : Lang.dialog(48, false))
                        : all[num - 4].FormatWith(substitutionObject);
                }
            }
            else if (this.type == 19)
            {
                if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
                    str = this.GetBirthdayDialog();
                else if (NPC.downedBoss3 && !Main.hardMode)
                    str = Lang.dialog(58, false);
                else if (flag2 && Main.rand.Next(5) == 0)
                    str = Lang.dialog(59, false);
                else if (flag2 && Main.rand.Next(5) == 0)
                    str = Lang.dialog(60, false);
                else if (flag4 && Main.rand.Next(5) == 0)
                    str = Lang.dialog(61, false);
                else if (flag6 && Main.rand.Next(5) == 0)
                    str = Lang.dialog(62, false);
                else if (flag6 && Main.rand.Next(5) == 0)
                    str = Lang.dialog(63, false);
                else if (Main.bloodMoon)
                {
                    str = Main.rand.Next(2) != 0 ? Lang.dialog(65, false) : Lang.dialog(64, false);
                }
                else
                {
                    switch (Main.rand.Next(3))
                    {
                        case 0:
                            str = Lang.dialog(66, false);
                            break;
                        case 1:
                            str = Lang.dialog(67, false);
                            break;
                        default:
                            str = Lang.dialog(68, false);
                            break;
                    }
                }
            }
            else if (this.type == 20)
            {
                if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
                    str = this.GetBirthdayDialog();
                else if (DD2Event.DownedInvasionT1 && Main.rand.Next(6) == 0)
                    str = !DD2Event.DownedInvasionT2
                        ? Language.GetTextValueWith("DryadSpecialText.AfterDD2Tier1", substitutionObject)
                        : Language.GetTextValueWith("DryadSpecialText.AfterDD2Tier2", substitutionObject);
                else if (!NPC.downedBoss2 && Main.rand.Next(3) == 0)
                    str = !WorldGen.crimson ? Lang.dialog(69, false) : Lang.dialog(332, false);
                else if (flag3 && Main.rand.Next(6) == 0)
                    str = Lang.dialog(70, false);
                else if (flag1 && Main.rand.Next(6) == 0)
                    str = Lang.dialog(71, false);
                else if (flag5 && Main.rand.Next(6) == 0)
                    str = Lang.dialog(72, false);
                else if (flag10 && Main.rand.Next(6) == 0)
                    str = Lang.dialog(238, false);
                else if (Main.bloodMoon)
                {
                    switch (Main.rand.Next(4))
                    {
                        case 0:
                            str = Lang.dialog(73, false);
                            break;
                        case 1:
                            str = Lang.dialog(74, false);
                            break;
                        case 2:
                            str = Lang.dialog(75, false);
                            break;
                        default:
                            str = Lang.dialog(76, false);
                            break;
                    }
                }
                else
                {
                    switch (Main.rand.Next(5))
                    {
                        case 0:
                            str = !WorldGen.crimson ? Lang.dialog(77, false) : Lang.dialog(333, false);
                            break;
                        case 1:
                            str = Lang.dialog(78, false);
                            break;
                        case 2:
                            str = Lang.dialog(79, false);
                            break;
                        case 3:
                            str = Lang.dialog(80, false);
                            break;
                        default:
                            str = Lang.dialog(81, false);
                            break;
                    }
                }
            }
            else if (this.type == 37)
            {
                if (Main.dayTime)
                {
                    switch (Main.rand.Next(3))
                    {
                        case 0:
                            str = Lang.dialog(82, false);
                            break;
                        case 1:
                            str = Lang.dialog(83, false);
                            break;
                        default:
                            str = Lang.dialog(84, false);
                            break;
                    }
                }
                else if (Main.player[Main.myPlayer].statLifeMax < 300 || Main.player[Main.myPlayer].statDefense < 10)
                {
                    switch (Main.rand.Next(4))
                    {
                        case 0:
                            str = Lang.dialog(85, false);
                            break;
                        case 1:
                            str = Lang.dialog(86, false);
                            break;
                        case 2:
                            str = Lang.dialog(87, false);
                            break;
                        default:
                            str = Lang.dialog(88, false);
                            break;
                    }
                }
                else
                {
                    switch (Main.rand.Next(4))
                    {
                        case 0:
                            str = Lang.dialog(89, false);
                            break;
                        case 1:
                            str = Lang.dialog(90, false);
                            break;
                        case 2:
                            str = Lang.dialog(91, false);
                            break;
                        default:
                            str = Lang.dialog(92, false);
                            break;
                    }
                }
            }
            else if (this.type == 38)
            {
                if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
                    str = this.GetBirthdayDialog();
                else if (!NPC.downedBoss2 && Main.rand.Next(3) == 0)
                    str = Lang.dialog(93, false);
                else if (Main.bloodMoon)
                {
                    switch (Main.rand.Next(3))
                    {
                        case 0:
                            str = Lang.dialog(94, false);
                            break;
                        case 1:
                            str = Lang.dialog(95, false);
                            break;
                        default:
                            str = Lang.dialog(96, false);
                            break;
                    }
                }
                else if ((DD2Event.DownedInvasionT1 || DD2Event.Ongoing) && Main.rand.Next(5) == 0)
                    str = Language.GetTextValueWith("DemolitionistSpecialText.AfterDD2Start", substitutionObject);
                else if (flag3 && Main.rand.Next(5) == 0)
                    str = Lang.dialog(97, false);
                else if (flag3 && Main.rand.Next(5) == 0)
                    str = Lang.dialog(98, false);
                else if (flag2 && Main.rand.Next(4) == 0)
                    str = Lang.dialog(99, false);
                else if (flag4 && Main.rand.Next(4) == 0)
                    str = Lang.dialog(100, false);
                else if (!Main.dayTime)
                {
                    switch (Main.rand.Next(4))
                    {
                        case 0:
                            str = Lang.dialog(101, false);
                            break;
                        case 1:
                            str = Lang.dialog(102, false);
                            break;
                        case 2:
                            str = Lang.dialog(103, false);
                            break;
                        default:
                            str = Lang.dialog(104, false);
                            break;
                    }
                }
                else
                {
                    switch (Main.rand.Next(5))
                    {
                        case 0:
                            str = Lang.dialog(105, false);
                            break;
                        case 1:
                            str = Lang.dialog(106, false);
                            break;
                        case 2:
                            str = Lang.dialog(107, false);
                            break;
                        case 3:
                            str = Lang.dialog(108, false);
                            break;
                        default:
                            str = Lang.dialog(109, false);
                            break;
                    }
                }
            }
            else if (this.type == 54)
            {
                if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
                    str = this.GetBirthdayDialog();
                else if (!flag7 && Main.rand.Next(2) == 0)
                    str = Lang.dialog(110, false);
                else if (flag10 && Main.rand.Next(6) == 0)
                    str = Lang.dialog(237, false);
                else if (Main.bloodMoon)
                    str = Lang.dialog(111, false);
                else if (flag2 && Main.rand.Next(4) == 0)
                    str = Lang.dialog(112, false);
                else if (Main.player[Main.myPlayer].head == 24)
                {
                    str = Lang.dialog(113, false);
                }
                else
                {
                    switch (Main.rand.Next(6))
                    {
                        case 0:
                            str = Lang.dialog(114, false);
                            break;
                        case 1:
                            str = Lang.dialog(115, false);
                            break;
                        case 2:
                            str = Lang.dialog(116, false);
                            break;
                        case 3:
                            str = Lang.dialog(117, false);
                            break;
                        case 4:
                            str = Lang.dialog(118, false);
                            break;
                        default:
                            str = Lang.dialog(119, false);
                            break;
                    }
                }
            }
            else if (this.type == 105)
                str = Lang.dialog(120, false);
            else if (this.type == 107)
            {
                if (this.homeless)
                {
                    switch (Main.rand.Next(5))
                    {
                        case 0:
                            str = Lang.dialog(121, false);
                            break;
                        case 1:
                            str = Lang.dialog(122, false);
                            break;
                        case 2:
                            str = Lang.dialog(123, false);
                            break;
                        case 3:
                            str = Lang.dialog(124, false);
                            break;
                        default:
                            str = Lang.dialog(125, false);
                            break;
                    }
                }
                else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
                    str = this.GetBirthdayDialog();
                else if (flag7 && Main.rand.Next(5) == 0)
                    str = Lang.dialog(126, false);
                else if (flag15 && Main.rand.Next(5) == 0)
                {
                    str = Lang.dialog(309, false);
                }
                else
                {
                    var all =
                        Language.FindAll(Lang.CreateDialogFilter("GoblinTinkererChatter.", substitutionObject));
                    var num = Main.rand.Next(all.Length + 5);
                    if (num >= 5)
                        str = all[num - 5].FormatWith(substitutionObject);
                    else if (!Main.dayTime)
                    {
                        switch (num)
                        {
                            case 0:
                                str = Lang.dialog((int) sbyte.MaxValue, false);
                                break;
                            case 1:
                                str = Lang.dialog(128, false);
                                break;
                            case 2:
                                str = Lang.dialog(129, false);
                                break;
                            case 3:
                                str = Lang.dialog(130, false);
                                break;
                            default:
                                str = Lang.dialog(131, false);
                                break;
                        }
                    }
                    else
                    {
                        switch (num)
                        {
                            case 0:
                                str = Lang.dialog(132, false);
                                break;
                            case 1:
                                str = Lang.dialog(133, false);
                                break;
                            case 2:
                                str = Lang.dialog(134, false);
                                break;
                            case 3:
                                str = Lang.dialog(135, false);
                                break;
                            default:
                                str = Lang.dialog(136, false);
                                break;
                        }
                    }
                }
            }
            else if (this.type == 106)
                str = Lang.dialog(137, false);
            else if (this.type == 108)
            {
                if (this.homeless)
                {
                    var num = Main.rand.Next(3);
                    if (num == 0)
                        str = Lang.dialog(138, false);
                    else if (num == 1 && !Main.player[Main.myPlayer].Male)
                    {
                        str = Lang.dialog(139, false);
                    }
                    else
                    {
                        switch (num)
                        {
                            case 1:
                                str = Lang.dialog(140, false);
                                break;
                            case 2:
                                str = Lang.dialog(141, false);
                                break;
                        }
                    }
                }
                else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
                    str = this.GetBirthdayDialog();
                else if (DD2Event.DownedInvasionT1 && Main.rand.Next(6) == 0)
                    str = Language.GetTextValueWith("WizardSpecialText.AfterDD2Tier1", substitutionObject);
                else if (Main.player[Main.myPlayer].Male && flag17 && Main.rand.Next(6) == 0)
                    str = Lang.dialog(142, false);
                else if (Main.player[Main.myPlayer].Male && flag6 && Main.rand.Next(6) == 0)
                    str = Lang.dialog(143, false);
                else if (Main.player[Main.myPlayer].Male && flag8 && Main.rand.Next(6) == 0)
                    str = Lang.dialog(144, false);
                else if (!Main.player[Main.myPlayer].Male && flag2 && Main.rand.Next(6) == 0)
                    str = Lang.dialog(145, false);
                else if (!Main.player[Main.myPlayer].Male && flag7 && Main.rand.Next(6) == 0)
                    str = Lang.dialog(146, false);
                else if (!Main.player[Main.myPlayer].Male && flag4 && Main.rand.Next(6) == 0)
                    str = Lang.dialog(147, false);
                else if (!Main.dayTime)
                {
                    switch (Main.rand.Next(3))
                    {
                        case 0:
                            str = Lang.dialog(148, false);
                            break;
                        case 1:
                            str = Lang.dialog(149, false);
                            break;
                        case 2:
                            str = Lang.dialog(150, false);
                            break;
                    }
                }
                else
                {
                    switch (Main.rand.Next(5))
                    {
                        case 0:
                            str = Lang.dialog(151, false);
                            break;
                        case 1:
                            str = Lang.dialog(152, false);
                            break;
                        case 2:
                            str = Lang.dialog(153, false);
                            break;
                        case 3:
                            str = Lang.dialog(154, false);
                            break;
                        default:
                            str = Lang.dialog(155, false);
                            break;
                    }
                }
            }
            else if (this.type == 123)
                str = Lang.dialog(156, false);
            else if (this.type == 124)
            {
                if (this.homeless)
                {
                    switch (Main.rand.Next(4))
                    {
                        case 0:
                            str = Lang.dialog(157, false);
                            break;
                        case 1:
                            str = Lang.dialog(158, false);
                            break;
                        case 2:
                            str = Lang.dialog(159, false);
                            break;
                        default:
                            str = Lang.dialog(160, false);
                            break;
                    }
                }
                else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
                    str = this.GetBirthdayDialog();
                else if (Main.bloodMoon)
                {
                    switch (Main.rand.Next(4))
                    {
                        case 0:
                            str = Lang.dialog(161, false);
                            break;
                        case 1:
                            str = Lang.dialog(162, false);
                            break;
                        case 2:
                            str = Lang.dialog(163, false);
                            break;
                        default:
                            str = Lang.dialog(164, false);
                            break;
                    }
                }
                else if (flag8 && Main.rand.Next(6) == 0)
                    str = Lang.dialog(165, false);
                else if (flag3 && Main.rand.Next(6) == 0)
                {
                    str = Lang.dialog(166, false);
                }
                else
                {
                    var all =
                        Language.FindAll(Lang.CreateDialogFilter("MechanicChatter.", substitutionObject));
                    var num = Main.rand.Next(3 + all.Length);
                    str = num < 3
                        ? (num != 0
                            ? (num != 1 ? Lang.dialog(169, false) : Lang.dialog(168, false))
                            : Lang.dialog(167, false))
                        : all[num - 3].FormatWith(substitutionObject);
                }
            }
            else if (this.type == 22)
            {
                if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
                    str = this.GetBirthdayDialog();
                else if (Main.bloodMoon)
                {
                    switch (Main.rand.Next(3))
                    {
                        case 0:
                            str = Lang.dialog(170, false);
                            break;
                        case 1:
                            str = Lang.dialog(171, false);
                            break;
                        default:
                            str = Lang.dialog(172, false);
                            break;
                    }
                }
                else if (!Main.dayTime)
                {
                    str = Lang.dialog(173, false);
                }
                else
                {
                    switch (Main.rand.Next(3))
                    {
                        case 0:
                            str = Lang.dialog(174, false);
                            break;
                        case 1:
                            str = Lang.dialog(175, false);
                            break;
                        default:
                            str = Lang.dialog(176, false);
                            break;
                    }
                }
            }
            else if (this.type == 142)
            {
                var num = Main.rand.Next(3);
                if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
                {
                    str = this.GetBirthdayDialog();
                }
                else
                {
                    switch (num)
                    {
                        case 0:
                            str = Lang.dialog(224, false);
                            break;
                        case 1:
                            str = Lang.dialog(225, false);
                            break;
                        case 2:
                            str = Lang.dialog(226, false);
                            break;
                    }
                }
            }
            else if (this.type == 160)
            {
                var num = Main.rand.Next(6);
                if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
                    str = this.GetBirthdayDialog();
                else if (flag4 && Main.rand.Next(6) == 0)
                    str = Lang.dialog(232, false);
                else if (flag9 && Main.rand.Next(6) == 0)
                {
                    str = Lang.dialog(236, false);
                }
                else
                {
                    switch (num)
                    {
                        case 0:
                            str = Lang.dialog(231, false);
                            break;
                        case 1:
                            str = Lang.dialog(233, false);
                            break;
                        case 2:
                            str = Lang.dialog(234, false);
                            break;
                        case 3:
                            str = Lang.dialog(235, false);
                            break;
                        case 4:
                            str = Lang.dialog(240, false);
                            break;
                        case 5:
                            str = Lang.dialog(241, false);
                            break;
                    }
                }
            }
            else if (this.type == 178)
            {
                var num = Main.rand.Next(5);
                if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
                    str = this.GetBirthdayDialog();
                else if (Main.bloodMoon && Main.rand.Next(3) == 0)
                    str = Lang.dialog(245, false);
                else if (flag13 && Main.rand.Next(6) == 0)
                    str = Lang.dialog(246, false);
                else if (flag12 && Main.rand.Next(6) == 0)
                {
                    str = Lang.dialog(247, false);
                }
                else
                {
                    switch (num)
                    {
                        case 0:
                            str = Lang.dialog(242, false);
                            break;
                        case 1:
                            str = Lang.dialog(243, false);
                            break;
                        case 2:
                            str = Lang.dialog(244, false);
                            break;
                        case 3:
                            str = Lang.dialog(248, false);
                            break;
                        case 4:
                            str = Lang.dialog(249, false);
                            break;
                    }
                }
            }
            else if (this.type == 207)
            {
                var num = Main.rand.Next(3);
                if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
                    str = this.GetBirthdayDialog();
                else if (flag12 && Main.rand.Next(6) == 0)
                {
                    str = Lang.dialog(260, false);
                }
                else
                {
                    switch (num)
                    {
                        case 0:
                            str = Lang.dialog(257, false);
                            break;
                        case 1:
                            str = Lang.dialog(258, false);
                            break;
                        case 2:
                            str = Lang.dialog(259, false);
                            break;
                    }
                }
            }
            else if (this.type == 208)
            {
                var num = Main.rand.Next(7);
                if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
                    str = this.GetBirthdayDialog();
                else if (DD2Event.DownedInvasionT1 && Main.rand.Next(5) == 0)
                    str = Language.GetTextValueWith("PartyGirlSpecialText.AfterDD2Tier1", substitutionObject);
                else if (Main.player[Main.myPlayer].Male && Main.rand.Next(5) == 0)
                    str = Lang.dialog(268, false);
                else if (flag15 && Main.rand.Next(5) == 0)
                {
                    str = Lang.dialog(310, false);
                }
                else
                {
                    switch (num)
                    {
                        case 0:
                            str = Lang.dialog(265, false);
                            break;
                        case 1:
                            str = Lang.dialog(266, false);
                            break;
                        case 2:
                            str = Lang.dialog(267, false);
                            break;
                        case 3:
                            str = Lang.dialog(269, false);
                            break;
                        case 4:
                            str = Lang.dialog(270, false);
                            break;
                        case 5:
                            str = Lang.dialog(271, false);
                            break;
                        case 6:
                            str = Lang.dialog(272, false);
                            break;
                    }
                }
            }
            else if (this.type == 209)
            {
                if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
                    str = this.GetBirthdayDialog();
                else if (flag12 && Main.rand.Next(6) == 0)
                    str = Lang.dialog(284, false);
                else if (flag11 && Main.rand.Next(6) == 0)
                {
                    str = Lang.dialog(283, false);
                }
                else
                {
                    var all =
                        Language.FindAll(Lang.CreateDialogFilter("CyborgChatter.", substitutionObject));
                    var num = Main.rand.Next(5 + all.Length);
                    if (num >= 5)
                        str = all[num - 5].FormatWith(substitutionObject);
                    else if (num == 0)
                        str = Lang.dialog(280, false);
                    else if (num == 1)
                        str = Lang.dialog(281, false);
                    else if (num == 2)
                        str = Lang.dialog(282, false);
                    else if (num == 3)
                        str = Lang.dialog(285, false);
                    else if (num == 4)
                        str = Lang.dialog(286, false);
                }
            }
            else if (this.type == 227)
            {
                var num = Main.rand.Next(5);
                if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
                    str = this.GetBirthdayDialog();
                else if (Main.hardMode && Main.rand.Next(7) == 0)
                    str = Lang.dialog(250, false);
                else if (flag14 && Main.rand.Next(6) == 0)
                {
                    str = Lang.dialog(251, false);
                }
                else
                {
                    switch (num)
                    {
                        case 0:
                            str = Lang.dialog(252, false);
                            break;
                        case 1:
                            str = Lang.dialog(253, false);
                            break;
                        case 2:
                            str = Lang.dialog(254, false);
                            break;
                        case 3:
                            str = Lang.dialog((int) byte.MaxValue, false);
                            break;
                        case 4:
                            str = Lang.dialog(256, false);
                            break;
                    }
                }
            }
            else if (this.type == 228)
            {
                var num = Main.rand.Next(4);
                if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
                    str = this.GetBirthdayDialog();
                else if (flag2 && Main.rand.Next(6) == 0)
                {
                    str = Lang.dialog(263, false);
                }
                else
                {
                    switch (num)
                    {
                        case 0:
                            str = Lang.dialog(261, false);
                            break;
                        case 1:
                            str = Lang.dialog(262, false);
                            break;
                        case 2:
                            str = Lang.dialog(264, false);
                            break;
                        case 3:
                            str = Language.GetTextValueWith("WitchDoctorSpecialText.AfterDD2Tier1", substitutionObject);
                            break;
                    }
                }
            }
            else if (this.type == 229)
            {
                var all = Language.FindAll(Lang.CreateDialogFilter("PirateChatter.", substitutionObject));
                var num = Main.rand.Next(6 + all.Length);
                if (num >= 6)
                    str = all[num - 6].FormatWith(substitutionObject);
                else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
                    str = this.GetBirthdayDialog();
                else if (!Main.player[Main.myPlayer].Male && Main.rand.Next(5) == 0)
                {
                    str = Lang.dialog(276, false);
                }
                else
                {
                    switch (num)
                    {
                        case 0:
                            str = Lang.dialog(273, false);
                            break;
                        case 1:
                            str = Lang.dialog(274, false);
                            break;
                        case 2:
                            str = Lang.dialog(275, false);
                            break;
                        case 3:
                            str = Lang.dialog(277, false);
                            break;
                        case 4:
                            str = Lang.dialog(278, false);
                            break;
                        case 5:
                            str = Lang.dialog(279, false);
                            break;
                    }
                }
            }
            else if (this.type == 354)
                str = Lang.dialog(Main.rand.Next(315, 319), false);
            else if (this.type == 353)
            {
                if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
                    str = this.GetBirthdayDialog();
                else if (Main.bloodMoon)
                {
                    switch (Main.rand.Next(3))
                    {
                        case 0:
                            str = Lang.dialog(304, false);
                            break;
                        case 1:
                            str = Lang.dialog(305, false);
                            break;
                        case 2:
                            str = Lang.dialog(306, false);
                            break;
                    }
                }
                else if (Main.dayTime && Main.time < 16200.0 && Main.rand.Next(3) == 0)
                    str = Lang.dialog(311, false);
                else if (Main.player[Main.myPlayer].Male && Main.rand.Next(3) == 0)
                {
                    switch (Main.rand.Next(2))
                    {
                        case 0:
                            str = Lang.dialog(293, false);
                            break;
                        case 1:
                            str = Lang.dialog(300, false);
                            break;
                    }
                }
                else if (!Main.player[Main.myPlayer].Male && Main.rand.Next(3) == 0)
                {
                    switch (Main.rand.Next(3))
                    {
                        case 0:
                            str = Lang.dialog(291, false);
                            break;
                        case 1:
                            str = Lang.dialog(292, false);
                            break;
                        case 2:
                            str = Lang.dialog(312, false);
                            break;
                    }
                }
                else if (flag14 && flag7 && (flag2 && flag3) && Main.rand.Next(5) == 0)
                    str = Lang.dialog(307, false);
                else if (flag14 && Main.rand.Next(5) == 0)
                    str = Lang.dialog(302, false);
                else if (flag6 && Main.rand.Next(5) == 0)
                    str = Lang.dialog(303, false);
                else if (flag13 && Main.rand.Next(5) == 0)
                {
                    str = Lang.dialog(308, false);
                }
                else
                {
                    var all =
                        Language.FindAll(Lang.CreateDialogFilter("StylistChatter.", substitutionObject));
                    var num1 = Main.moonPhase < 3 ? 5 : 4;
                    var num2 = Main.rand.Next(num1 + all.Length);
                    if (num2 >= num1)
                        str = all[num2 - num1].FormatWith(substitutionObject);
                    else if (Main.moonPhase < 3)
                    {
                        switch (num2)
                        {
                            case 0:
                                str = Lang.dialog(287, false);
                                break;
                            case 1:
                                str = Lang.dialog(288, false);
                                break;
                            case 2:
                                str = Lang.dialog(289, false);
                                break;
                            case 3:
                                str = Lang.dialog(290, false);
                                break;
                            case 4:
                                str = Lang.dialog(294, false);
                                break;
                        }
                    }
                    else if (Main.moonPhase < 6)
                    {
                        switch (num2)
                        {
                            case 0:
                                str = Lang.dialog(295, false);
                                break;
                            case 1:
                                str = Lang.dialog(296, false);
                                break;
                            case 2:
                                str = Lang.dialog(297, false);
                                break;
                            case 3:
                                str = Lang.dialog(298, false);
                                break;
                        }
                    }
                    else
                    {
                        switch (num2)
                        {
                            case 0:
                                str = Lang.dialog(299, false);
                                break;
                            case 1:
                                str = Lang.dialog(301, false);
                                break;
                            case 2:
                                str = Lang.dialog(313, false);
                                break;
                            case 3:
                                str = Lang.dialog(314, false);
                                break;
                        }
                    }
                }
            }
            else if (this.type == 368)
                str = !BirthdayParty.PartyIsUp || Main.rand.Next(3) != 0
                    ? (!flag16 || Main.rand.Next(5) != 0
                        ? (!flag1 || Main.rand.Next(5) != 0
                            ? (!flag9 || Main.rand.Next(5) != 0
                                ? Lang.dialog(Main.rand.Next(322, 331), false)
                                : Lang.dialog(321, false))
                            : Lang.dialog(320, false))
                        : Lang.dialog(319, false))
                    : this.GetBirthdayDialog();
            else if (this.type == 376)
                str = Lang.dialog(Main.rand.Next(353, 356), false);
            else if (this.type == 369)
            {
                if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0)
                    str = this.GetBirthdayDialog();
                else if (Main.bloodMoon)
                    str = Main.anglerQuestFinished
                        ? Lang.dialog(Main.rand.Next(350, 353), false)
                        : Lang.dialog(Main.rand.Next(348, 350), false);
                else if (!Main.anglerQuestFinished)
                    str = Lang.dialog(Main.rand.Next(334, 338), false);
                else if (flag4 && Main.rand.Next(5) == 0)
                {
                    str = Lang.dialog(347, false);
                }
                else
                {
                    var all =
                        Language.FindAll(Lang.CreateDialogFilter("AnglerChatter.", substitutionObject));
                    var num = Main.rand.Next(all.Length + 9);
                    str = num < 9 ? Lang.dialog(338 + num, false) : all[num - 9].FormatWith(substitutionObject);
                }
            }
            else if (this.type == 453)
                str = Lang.dialog(Main.rand.Next(356, 364), false);
            else if (this.type == 441)
                str = Main.rand.Next(6) != 0 || !flag4
                    ? (Main.rand.Next(6) != 0 || !flag3
                        ? (Main.rand.Next(6) != 0 || !flag6
                            ? (Main.rand.Next(6) != 0 || !flag1
                                ? Lang.dialog(Main.rand.Next(364, 370), false)
                                : Lang.dialog(374, false))
                            : Lang.dialog(373, false))
                        : Lang.dialog(372, false))
                    : Lang.dialog(371, false);
            else if (this.type == 579)
                str = Language.GetTextValue("BartenderSpecialText.FirstMeeting");
            else if (this.type == 550)
                str = Lang.BartenderChat(this);

            return str;
        }

        public object Clone()
        {
            return this.MemberwiseClone();
        }

        public void CheckDrowning()
        {
            var flag = Collision.DrownCollision(this.position, this.width, this.height, 1f);
            if (Main.netMode != 1)
            {
                if (flag)
                {
                    if (++this.breathCounter >= 7)
                    {
                        this.breathCounter = 0;
                        --this.breath;
                        if (this.breath <= 0)
                        {
                            this.friendlyRegen = 0;
                            this.breath = 0;
                            this.life -= 2;
                            if (this.life % 24 < 2)
                                this.netUpdate = true;
                            if (this.life <= 0)
                            {
                                this.life = 1;
                                this.StrikeNPCNoInteraction(2, 0.0f, 0, false, false, false);
                                if (Main.netMode != 0)
                                    NetMessage.SendData(28, -1, -1, (NetworkText) null, this.whoAmI, 2f, 0.0f, 0.0f, 0,
                                        0, 0);
                            }
                        }
                    }
                }
                else
                {
                    this.breath += 3;
                    if (this.breath > 200)
                        this.breath = 200;
                    this.breathCounter = 0;
                }
            }

            if (!flag || Main.rand.Next(20) != 0 || (this.lavaWet || this.honeyWet))
                return;
            var num1 = 0;
            var num2 = 0;
            if (this.type == 369)
                num2 = 8;
            Dust.NewDust(
                new Vector2(this.position.X + (float) ((10 + num1) * this.direction),
                    (float) ((double) this.position.Y + (double) num2 + 4.0)), this.width - 8, 8, 34, 0.0f, 0.0f, 0,
                new Color(), 1.2f);
        }

        public void TryPortalJumping()
        {
            if (!this.townNPC || Main.netMode == 1)
                return;
            PortalHelper.TryGoingThroughPortals((Entity) this);
        }

        public static void GetMeleeCollisionData(Microsoft.Xna.Framework.Rectangle victimHitbox, int enemyIndex,
            ref int specialHitSetter, ref float damageMultiplier, ref Microsoft.Xna.Framework.Rectangle npcRect)
        {
            var npc1 = Main.npc[enemyIndex];
            if (npc1.type >= 430 && npc1.type <= 436 && (double) npc1.ai[2] > 5.0)
            {
                var num = 34;
                if (npc1.spriteDirection < 0)
                {
                    npcRect.X -= num;
                    npcRect.Width += num;
                }
                else
                    npcRect.Width += num;

                damageMultiplier *= 1.25f;
            }
            else if (npc1.type >= 494 && npc1.type <= 495 && (double) npc1.ai[2] > 5.0)
            {
                var num = 18;
                if (npc1.spriteDirection < 0)
                {
                    npcRect.X -= num;
                    npcRect.Width += num;
                }
                else
                    npcRect.Width += num;

                damageMultiplier *= 1.25f;
            }
            else if (npc1.type == 460)
            {
                var rectangle = new Microsoft.Xna.Framework.Rectangle(0, 0, 30, 14);
                rectangle.X = (int) npc1.Center.X;
                if (npc1.direction < 0)
                    rectangle.X -= rectangle.Width;
                rectangle.Y = (int) npc1.position.Y + npc1.height - 20;
                if (!victimHitbox.Intersects(rectangle))
                    return;
                npcRect = rectangle;
                damageMultiplier *= 1.35f;
            }
            else if (npc1.type == 417 && (double) npc1.ai[0] == 6.0 &&
                     ((double) npc1.ai[3] > 0.0 && (double) npc1.ai[3] < 4.0))
            {
                var rectangle = Utils.CenteredRectangle(npc1.Center, new Vector2(100f));
                if (!victimHitbox.Intersects(rectangle))
                    return;
                npcRect = rectangle;
                damageMultiplier *= 1.35f;
            }
            else if (npc1.type == 466)
            {
                var rectangle = new Microsoft.Xna.Framework.Rectangle(0, 0, 30, 8);
                rectangle.X = (int) npc1.Center.X;
                if (npc1.direction < 0)
                    rectangle.X -= rectangle.Width;
                rectangle.Y = (int) npc1.position.Y + npc1.height - 32;
                if (!victimHitbox.Intersects(rectangle))
                    return;
                npcRect = rectangle;
                damageMultiplier *= 1.75f;
            }
            else if (npc1.type == 576 || npc1.type == 577)
            {
                var npc2 = npc1;
                var flag = true;
                var y = npc2.frame.Y;
                var num1 = 0;
                var num2 = 0;
                var rectangle = new Microsoft.Xna.Framework.Rectangle(0, 0, 30, 8);
                switch (y)
                {
                    case 15:
                        specialHitSetter = 2;
                        rectangle.Width = 120;
                        rectangle.Height = 30;
                        num2 = 24;
                        break;
                    case 16:
                        specialHitSetter = 2;
                        rectangle.Width = 120;
                        rectangle.Height = 60;
                        num1 = 10;
                        break;
                    case 17:
                        specialHitSetter = 2;
                        rectangle.Width = 100;
                        rectangle.Height = 90;
                        num1 = 50;
                        break;
                    case 18:
                        specialHitSetter = 2;
                        rectangle.Width = 100;
                        rectangle.Height = 50;
                        num1 = 90;
                        num2 = 10;
                        break;
                    default:
                        flag = false;
                        break;
                }

                if (!flag)
                    return;
                rectangle.X = (int) npc2.Center.X - num1 * npc2.direction;
                if (npc2.direction < 0)
                    rectangle.X -= rectangle.Width;
                rectangle.Y = (int) npc2.Center.Y - rectangle.Height + num2;
                if (!victimHitbox.Intersects(rectangle))
                    return;
                npcRect = rectangle;
                damageMultiplier *= 1.75f;
            }
            else
            {
                if (npc1.type != 552 && npc1.type != 553 && npc1.type != 554 ||
                    ((double) npc1.ai[0] <= 0.0 || (double) npc1.ai[0] >= 24.0))
                    return;
                var rectangle = new Microsoft.Xna.Framework.Rectangle(0, 0, 34, 14);
                rectangle.X = (int) npc1.Center.X;
                if (npc1.direction < 0)
                    rectangle.X -= rectangle.Width;
                rectangle.Y = (int) npc1.position.Y + npc1.height - 20;
                if (!victimHitbox.Intersects(rectangle))
                    return;
                npcRect = rectangle;
                damageMultiplier *= 1.35f;
            }
        }

        public override string ToString()
        {
            return "name:" + this.TypeName + ", active:" + (object) this.active + ", whoAmI:" + (object) this.whoAmI;
        }
    }
}