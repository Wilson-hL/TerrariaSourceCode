// Decompiled with JetBrains decompiler
// Type: Terraria.Projectile
// Assembly: Terraria, Version=1.3.5.1, Culture=neutral, PublicKeyToken=null
// MVID: E90A5A2F-CD10-4A2C-9D2A-6B036D4E8877
// Assembly location: E:\Decompile\Terraria\Terraria.exe

using Microsoft.Xna.Framework;
using ReLogic.Utilities;
using System;
using System.Collections.Generic;
using Terraria.Audio;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Events;
using Terraria.GameContent.UI;
using Terraria.Graphics.Shaders;
using Terraria.ID;
using Terraria.Localization;
using Terraria.World.Generation;

namespace Terraria
{
    public class Projectile : Entity
    {
        public static uint[][] perIDStaticNPCImmunity = new uint[714][];
        public static int SentryLifeTime = 7200;
        public static int maxAI = 2;
        private static float[] _CompanionCubeScreamCooldown = new float[(int) byte.MaxValue];
        public float ownerHitCheckDistance = 1000f;
        public float scale = 1f;
        public int owner = (int) byte.MaxValue;
        public float[] ai = new float[Projectile.maxAI];
        public float[] localAI = new float[Projectile.maxAI];
        public float stepSpeed = 1f;
        public int spriteDirection = 1;
        public int penetrate = 1;
        private int[] localNPCImmunity = new int[200];
        public int maxPenetrate = 1;
        public Vector2[] oldPos = new Vector2[10];
        public float[] oldRot = new float[10];
        public int[] oldSpriteDirection = new int[10];
        public int[] playerImmune = new int[(int) byte.MaxValue];
        public string miscText = "";
        public int projUUID = -1;
        public int localNPCHitCooldown = -2;
        public int idStaticNPCHitCooldown = -1;
        public bool arrow;
        public int numHits;
        public bool bobber;
        public bool netImportant;
        public bool noDropItem;
        public bool counterweight;
        public float rotation;
        public int type;
        public int alpha;
        public bool sentry;
        public short glowMask;
        public float gfxOffY;
        public int aiStyle;
        public int timeLeft;
        public int soundDelay;
        public int damage;
        public bool hostile;
        public float knockBack;
        public bool friendly;
        private bool usesLocalNPCImmunity;
        private bool usesIDStaticNPCImmunity;
        public int identity;
        public float light;
        public bool netUpdate;
        public bool netUpdate2;
        public int netSpam;
        public bool minion;
        public float minionSlots;
        public int minionPos;
        public int restrikeDelay;
        public bool tileCollide;
        public int extraUpdates;
        public int numUpdates;
        public bool ignoreWater;
        public bool hide;
        public bool ownerHitCheck;
        public bool melee;
        public bool ranged;
        public bool thrown;
        public bool magic;
        public bool coldDamage;
        public bool noEnchantments;
        public bool trap;
        public bool npcProj;
        public int frameCounter;
        public int frame;
        public bool manualDirectionChange;

        public string Name
        {
            get { return Lang.GetProjectileName(this.type).Value; }
        }

        public static void InitializeStaticThings()
        {
            Projectile.perIDStaticNPCImmunity = new uint[714][];
            for (int index = 0; index < Projectile.perIDStaticNPCImmunity.Length; ++index)
                Projectile.perIDStaticNPCImmunity[index] = new uint[200];
            WorldGen.Hooks.OnWorldLoad += new Action(Projectile.ResetImmunity);
        }

        public static void ResetImmunity()
        {
            for (int index1 = 0; index1 < 714; ++index1)
            {
                for (int index2 = 0; index2 < 200; ++index2)
                    Projectile.perIDStaticNPCImmunity[index1][index2] = 0U;
            }
        }

        public static bool IsNPCImmune(int projectileType, int npcIndex)
        {
            return Projectile.perIDStaticNPCImmunity[projectileType][npcIndex] <= Main.GameUpdateCount;
        }

        public bool WipableTurret
        {
            get
            {
                if (this.owner == Main.myPlayer && this.sentry)
                    return !this.TurretShouldPersist();
                return false;
            }
        }

        public bool TurretShouldPersist()
        {
            switch (this.type)
            {
                case 663:
                case 665:
                case 667:
                case 677:
                case 678:
                case 679:
                case 688:
                case 689:
                case 690:
                case 691:
                case 692:
                case 693:
                    return DD2Event.Ongoing;
                default:
                    return false;
            }
        }

        public float Opacity
        {
            get { return (float) (1.0 - (double) this.alpha / (double) byte.MaxValue); }
            set
            {
                this.alpha = (int) MathHelper.Clamp((float) ((1.0 - (double) value) * (double) byte.MaxValue), 0.0f,
                    (float) byte.MaxValue);
            }
        }

        public int MaxUpdates
        {
            get { return this.extraUpdates + 1; }
            set { this.extraUpdates = value - 1; }
        }

        public NPC OwnerMinionAttackTargetNPC
        {
            get
            {
                if (Main.player[this.owner].MinionAttackTargetNPC < 0)
                    return (NPC) null;
                return Main.npc[Main.player[this.owner].MinionAttackTargetNPC];
            }
        }

        public void SetDefaults(int Type)
        {
            this.ownerHitCheckDistance = 1000f;
            this.counterweight = false;
            this.sentry = false;
            this.arrow = false;
            this.bobber = false;
            this.numHits = 0;
            this.netImportant = false;
            this.manualDirectionChange = false;
            this.localNPCHitCooldown = -2;
            this.idStaticNPCHitCooldown = -1;
            this.usesLocalNPCImmunity = false;
            this.usesIDStaticNPCImmunity = false;
            int newSize = 10;
            if (Type >= 0)
                newSize = ProjectileID.Sets.TrailCacheLength[Type];
            if (newSize != this.oldPos.Length)
            {
                Array.Resize<Vector2>(ref this.oldPos, newSize);
                Array.Resize<float>(ref this.oldRot, newSize);
                Array.Resize<int>(ref this.oldSpriteDirection, newSize);
            }

            for (int index = 0; index < this.oldPos.Length; ++index)
            {
                this.oldPos[index].X = 0.0f;
                this.oldPos[index].Y = 0.0f;
                this.oldRot[index] = 0.0f;
                this.oldSpriteDirection[index] = 0;
            }

            for (int index = 0; index < Projectile.maxAI; ++index)
            {
                this.ai[index] = 0.0f;
                this.localAI[index] = 0.0f;
            }

            for (int index = 0; index < (int) byte.MaxValue; ++index)
                this.playerImmune[index] = 0;
            for (int index = 0; index < 200; ++index)
                this.localNPCImmunity[index] = 0;
            this.noDropItem = false;
            this.minion = false;
            this.minionSlots = 0.0f;
            this.soundDelay = 0;
            this.spriteDirection = 1;
            this.melee = false;
            this.ranged = false;
            this.thrown = false;
            this.magic = false;
            this.ownerHitCheck = false;
            this.hide = false;
            this.lavaWet = false;
            this.wetCount = (byte) 0;
            this.wet = false;
            this.ignoreWater = false;
            this.hostile = false;
            this.netUpdate = false;
            this.netUpdate2 = false;
            this.netSpam = 0;
            this.numUpdates = 0;
            this.extraUpdates = 0;
            this.identity = 0;
            this.restrikeDelay = 0;
            this.light = 0.0f;
            this.penetrate = 1;
            this.tileCollide = true;
            this.position = Vector2.Zero;
            this.velocity = Vector2.Zero;
            this.aiStyle = 0;
            this.alpha = 0;
            this.glowMask = (short) -1;
            this.type = Type;
            this.active = true;
            this.rotation = 0.0f;
            this.scale = 1f;
            this.owner = (int) byte.MaxValue;
            this.timeLeft = 3600;
            this.friendly = false;
            this.damage = 0;
            this.knockBack = 0.0f;
            this.miscText = "";
            this.coldDamage = false;
            this.noEnchantments = false;
            this.trap = false;
            this.npcProj = false;
            this.projUUID = -1;
            this.frame = 0;
            this.frameCounter = 0;
            if (this.type == 1)
            {
                this.arrow = true;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.ranged = true;
            }
            else if (this.type == 2)
            {
                this.arrow = true;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.light = 1f;
                this.ranged = true;
            }
            else if (this.type == 3)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 2;
                this.friendly = true;
                this.penetrate = 4;
                this.thrown = true;
            }
            else if (this.type == 4)
            {
                this.arrow = true;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.light = 0.35f;
                this.penetrate = 5;
                this.ranged = true;
            }
            else if (this.type == 5)
            {
                this.arrow = true;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.light = 0.4f;
                this.penetrate = -1;
                this.timeLeft = 120;
                this.alpha = 100;
                this.ignoreWater = true;
                this.ranged = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 6)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 3;
                this.friendly = true;
                this.penetrate = -1;
                this.melee = true;
                this.light = 0.4f;
            }
            else if (this.type == 7 || this.type == 8)
            {
                this.width = 28;
                this.height = 28;
                this.aiStyle = 4;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
                this.magic = true;
            }
            else if (this.type == 9)
            {
                this.width = 24;
                this.height = 24;
                this.aiStyle = 5;
                this.friendly = true;
                this.penetrate = 2;
                this.alpha = 50;
                this.scale = 0.8f;
                this.tileCollide = false;
                this.melee = true;
            }
            else if (this.type == 10)
            {
                this.width = 64;
                this.height = 64;
                this.aiStyle = 6;
                this.friendly = true;
                this.tileCollide = false;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
            }
            else if (this.type == 11)
            {
                this.width = 48;
                this.height = 48;
                this.aiStyle = 6;
                this.friendly = true;
                this.tileCollide = false;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
            }
            else if (this.type == 12)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 5;
                this.friendly = true;
                this.penetrate = -1;
                this.alpha = 50;
                this.light = 1f;
            }
            else if (this.type == 13)
            {
                this.netImportant = true;
                this.width = 18;
                this.height = 18;
                this.aiStyle = 7;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.timeLeft *= 10;
            }
            else if (this.type == 14)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 1;
                this.light = 0.5f;
                this.alpha = (int) byte.MaxValue;
                this.scale = 1.2f;
                this.timeLeft = 600;
                this.ranged = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 15)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 8;
                this.friendly = true;
                this.light = 0.8f;
                this.alpha = 100;
                this.magic = true;
            }
            else if (this.type == 16)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 9;
                this.friendly = true;
                this.light = 0.8f;
                this.alpha = 100;
                this.magic = true;
            }
            else if (this.type == 17)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 10;
                this.friendly = true;
                this.ignoreWater = true;
            }
            else if (this.type == 18)
            {
                this.netImportant = true;
                this.width = 32;
                this.height = 32;
                this.aiStyle = 11;
                this.friendly = true;
                this.light = 0.9f;
                this.alpha = 150;
                this.tileCollide = false;
                this.penetrate = -1;
                this.timeLeft *= 5;
                this.ignoreWater = true;
                this.scale = 0.8f;
            }
            else if (this.type == 19)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 3;
                this.friendly = true;
                this.penetrate = -1;
                this.light = 1f;
                this.melee = true;
            }
            else if (this.type == 20)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 3;
                this.light = 0.75f;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 2;
                this.scale = 1.4f;
                this.timeLeft = 600;
                this.magic = true;
            }
            else if (this.type == 21)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 2;
                this.scale = 1.2f;
                this.friendly = true;
                this.thrown = true;
            }
            else if (this.type == 22)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 12;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.extraUpdates = 2;
                this.ignoreWater = true;
                this.magic = true;
            }
            else if (this.type == 23)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 13;
                this.friendly = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.ranged = true;
            }
            else if (this.type == 24)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 14;
                this.friendly = true;
                this.penetrate = 6;
                this.thrown = true;
            }
            else if (this.type == 25)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 15;
                this.friendly = true;
                this.penetrate = -1;
                this.melee = true;
                this.scale = 0.8f;
            }
            else if (this.type == 26)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 15;
                this.friendly = true;
                this.penetrate = -1;
                this.melee = true;
                this.scale = 0.8f;
            }
            else if (this.type == 27)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 8;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft /= 2;
                this.penetrate = 10;
                this.magic = true;
            }
            else if (this.type == 28)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
            }
            else if (this.type == 29)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
            }
            else if (this.type == 30)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
                this.thrown = true;
            }
            else if (this.type == 31)
            {
                this.knockBack = 6f;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 10;
                this.friendly = true;
                this.hostile = true;
                this.penetrate = -1;
            }
            else if (this.type == 32)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 7;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.timeLeft *= 10;
            }
            else if (this.type == 33)
            {
                this.width = 38;
                this.height = 38;
                this.aiStyle = 3;
                this.friendly = true;
                this.scale = 0.9f;
                this.penetrate = -1;
                this.melee = true;
            }
            else if (this.type == 34)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 9;
                this.friendly = true;
                this.light = 0.8f;
                this.alpha = 100;
                this.penetrate = 1;
                this.magic = true;
            }
            else if (this.type == 35)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 15;
                this.friendly = true;
                this.penetrate = -1;
                this.melee = true;
                this.scale = 0.8f;
            }
            else if (this.type == 36)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 2;
                this.light = 0.6f;
                this.alpha = (int) byte.MaxValue;
                this.scale = 1.4f;
                this.timeLeft = 600;
                this.ranged = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 37)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
            }
            else if (this.type == 38)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 0;
                this.hostile = true;
                this.penetrate = -1;
                this.aiStyle = 1;
                this.tileCollide = true;
            }
            else if (this.type == 39)
            {
                this.knockBack = 6f;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 10;
                this.friendly = true;
                this.hostile = true;
                this.penetrate = -1;
            }
            else if (this.type == 40)
            {
                this.knockBack = 6f;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 10;
                this.friendly = true;
                this.hostile = true;
                this.penetrate = -1;
            }
            else if (this.type == 41)
            {
                this.arrow = true;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = -1;
                this.ranged = true;
                this.light = 0.3f;
            }
            else if (this.type == 42)
            {
                this.knockBack = 8f;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 10;
                this.friendly = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 43)
            {
                this.knockBack = 12f;
                this.width = 24;
                this.height = 24;
                this.aiStyle = 17;
                this.penetrate = -1;
            }
            else if (this.type == 44)
            {
                this.width = 48;
                this.height = 48;
                this.alpha = 100;
                this.light = 0.2f;
                this.aiStyle = 18;
                this.hostile = true;
                this.penetrate = -1;
                this.tileCollide = true;
                this.scale = 0.9f;
            }
            else if (this.type == 45)
            {
                this.width = 48;
                this.height = 48;
                this.alpha = 100;
                this.light = 0.2f;
                this.aiStyle = 18;
                this.friendly = true;
                this.penetrate = 5;
                this.tileCollide = true;
                this.scale = 0.9f;
                this.magic = true;
            }
            else if (this.type == 46)
            {
                this.width = 20;
                this.height = 20;
                this.aiStyle = 19;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.scale = 1.1f;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
            }
            else if (this.type == 47)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 19;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.scale = 1.1f;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
            }
            else if (this.type == 48)
            {
                this.width = 12;
                this.height = 12;
                this.aiStyle = 2;
                this.friendly = true;
                this.penetrate = 2;
                this.thrown = true;
            }
            else if (this.type == 49)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 19;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.scale = 1.2f;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
            }
            else if (this.type == 50)
            {
                this.netImportant = true;
                this.width = 6;
                this.height = 6;
                this.aiStyle = 14;
                this.penetrate = -1;
                this.alpha = 75;
                this.light = 1f;
                this.timeLeft *= 5;
            }
            else if (this.type == 51)
            {
                this.width = 8;
                this.height = 8;
                this.aiStyle = 1;
                this.friendly = true;
            }
            else if (this.type == 52)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 3;
                this.friendly = true;
                this.penetrate = -1;
                this.melee = true;
            }
            else if (this.type == 53)
            {
                this.netImportant = true;
                this.width = 6;
                this.height = 6;
                this.aiStyle = 14;
                this.penetrate = -1;
                this.alpha = 75;
                this.light = 1f;
                this.timeLeft *= 5;
                this.tileCollide = false;
            }
            else if (this.type == 54)
            {
                this.width = 12;
                this.height = 12;
                this.aiStyle = 2;
                this.friendly = true;
                this.penetrate = 2;
                this.thrown = true;
            }
            else if (this.type == 55)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 0;
                this.hostile = true;
                this.penetrate = -1;
                this.aiStyle = 1;
                this.tileCollide = true;
            }
            else if (this.type == 56)
            {
                this.knockBack = 6f;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 10;
                this.friendly = true;
                this.hostile = true;
                this.penetrate = -1;
            }
            else if (this.type == 57)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
            }
            else if (this.type == 58)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.scale = 1.08f;
            }
            else if (this.type == 59)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.scale = 0.9f;
            }
            else if (this.type == 60)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.scale = 0.9f;
            }
            else if (this.type == 61)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.scale = 1.16f;
            }
            else if (this.type == 62)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.scale = 0.9f;
            }
            else if (this.type == 63)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 15;
                this.friendly = true;
                this.penetrate = -1;
                this.melee = true;
            }
            else if (this.type == 64)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 19;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.scale = 1.25f;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
            }
            else if (this.type == 65)
            {
                this.knockBack = 6f;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 10;
                this.friendly = true;
                this.penetrate = -1;
                this.extraUpdates = 1;
            }
            else if (this.type == 66)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 19;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.scale = 1.27f;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
            }
            else if (this.type == 67)
            {
                this.knockBack = 6f;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 10;
                this.friendly = true;
                this.hostile = true;
                this.penetrate = -1;
            }
            else if (this.type == 68)
            {
                this.knockBack = 6f;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 10;
                this.friendly = true;
                this.penetrate = -1;
                this.extraUpdates = 1;
            }
            else if (this.type == 69)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 2;
                this.friendly = true;
                this.penetrate = 1;
            }
            else if (this.type == 70)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 2;
                this.friendly = true;
                this.penetrate = 1;
            }
            else if (this.type == 621)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 2;
                this.friendly = true;
                this.penetrate = 1;
            }
            else if (this.type == 71)
            {
                this.knockBack = 6f;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 10;
                this.friendly = true;
                this.hostile = true;
                this.penetrate = -1;
            }
            else if (this.type == 72)
            {
                this.netImportant = true;
                this.width = 18;
                this.height = 18;
                this.aiStyle = 11;
                this.friendly = true;
                this.light = 0.9f;
                this.tileCollide = false;
                this.penetrate = -1;
                this.timeLeft *= 5;
                this.ignoreWater = true;
                this.scale = 0.8f;
            }
            else if (this.type == 73 || this.type == 74)
            {
                this.netImportant = true;
                this.width = 18;
                this.height = 18;
                this.aiStyle = 7;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.timeLeft *= 10;
                this.light = 0.4f;
            }
            else if (this.type == 75)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 16;
                this.hostile = true;
                this.penetrate = -1;
            }
            else if (this.type == 76 || this.type == 77 || this.type == 78)
            {
                if (this.type == 76)
                {
                    this.width = 10;
                    this.height = 22;
                }
                else if (this.type == 77)
                {
                    this.width = 18;
                    this.height = 24;
                }
                else
                {
                    this.width = 22;
                    this.height = 24;
                }

                this.aiStyle = 21;
                this.friendly = true;
                this.ranged = true;
                this.alpha = 100;
                this.light = 0.3f;
                this.penetrate = -1;
                this.timeLeft = 180;
                this.magic = true;
            }
            else if (this.type == 79)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 9;
                this.friendly = true;
                this.light = 0.8f;
                this.alpha = (int) byte.MaxValue;
                this.magic = true;
            }
            else if (this.type == 80)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 22;
                this.friendly = true;
                this.magic = true;
                this.tileCollide = false;
                this.light = 0.5f;
                this.coldDamage = true;
            }
            else if (this.type == 81)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.hostile = true;
                this.ranged = true;
            }
            else if (this.type == 82)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.hostile = true;
                this.ranged = true;
            }
            else if (this.type == 83)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.hostile = true;
                this.penetrate = 3;
                this.light = 0.75f;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 2;
                this.scale = 1.7f;
                this.timeLeft = 600;
                this.magic = true;
            }
            else if (this.type == 84)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.hostile = true;
                this.penetrate = 3;
                this.light = 0.75f;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 2;
                this.scale = 1.2f;
                this.timeLeft = 600;
                this.magic = true;
            }
            else if (this.type == 85)
            {
                this.width = 6;
                this.height = 6;
                this.aiStyle = 23;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = 3;
                this.extraUpdates = 2;
                this.ranged = true;
            }
            else if (this.type == 86)
            {
                this.netImportant = true;
                this.width = 18;
                this.height = 18;
                this.aiStyle = 11;
                this.friendly = true;
                this.light = 0.9f;
                this.tileCollide = false;
                this.penetrate = -1;
                this.timeLeft *= 5;
                this.ignoreWater = true;
                this.scale = 0.8f;
            }
            else if (this.type == 87)
            {
                this.netImportant = true;
                this.width = 18;
                this.height = 18;
                this.aiStyle = 11;
                this.friendly = true;
                this.light = 0.9f;
                this.tileCollide = false;
                this.penetrate = -1;
                this.timeLeft *= 5;
                this.ignoreWater = true;
                this.scale = 0.8f;
            }
            else if (this.type == 88)
            {
                this.width = 6;
                this.height = 6;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 3;
                this.light = 0.75f;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 4;
                this.scale = 1.4f;
                this.timeLeft = 600;
                this.magic = true;
            }
            else if (this.type == 89)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 1;
                this.light = 0.5f;
                this.alpha = (int) byte.MaxValue;
                this.scale = 1.2f;
                this.timeLeft = 600;
                this.ranged = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 90)
            {
                this.width = 6;
                this.height = 6;
                this.aiStyle = 24;
                this.friendly = true;
                this.penetrate = 1;
                this.light = 0.5f;
                this.alpha = 50;
                this.scale = 1.2f;
                this.timeLeft = 600;
                this.ranged = true;
                this.tileCollide = false;
            }
            else if (this.type == 91)
            {
                this.arrow = true;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.ranged = true;
            }
            else if (this.type == 92)
            {
                this.width = 24;
                this.height = 24;
                this.aiStyle = 5;
                this.friendly = true;
                this.penetrate = 2;
                this.alpha = 50;
                this.scale = 0.8f;
                this.tileCollide = false;
                this.ranged = true;
            }
            else if (this.type == 93)
            {
                this.light = 0.15f;
                this.width = 12;
                this.height = 12;
                this.aiStyle = 2;
                this.friendly = true;
                this.penetrate = 2;
                this.magic = true;
            }
            else if (this.type == 94)
            {
                this.ignoreWater = true;
                this.width = 8;
                this.height = 8;
                this.aiStyle = 24;
                this.friendly = true;
                this.light = 0.5f;
                this.alpha = 50;
                this.scale = 1.2f;
                this.timeLeft = 600;
                this.magic = true;
                this.tileCollide = true;
                this.penetrate = 1;
            }
            else if (this.type == 95)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 8;
                this.friendly = true;
                this.light = 0.8f;
                this.alpha = 100;
                this.magic = true;
                this.penetrate = 2;
            }
            else if (this.type == 96)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 8;
                this.hostile = true;
                this.light = 0.8f;
                this.alpha = 100;
                this.magic = true;
                this.penetrate = -1;
                this.scale = 0.9f;
                this.scale = 1.3f;
            }
            else if (this.type == 97)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 19;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.scale = 1.1f;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
            }
            else if (this.type == 98)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.hostile = true;
                this.penetrate = -1;
                this.trap = true;
            }
            else if (this.type == 99)
            {
                this.width = 31;
                this.height = 31;
                this.aiStyle = 25;
                this.friendly = true;
                this.hostile = true;
                this.ranged = true;
                this.penetrate = -1;
                this.trap = true;
            }
            else if (this.type == 100)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.hostile = true;
                this.penetrate = 3;
                this.light = 0.75f;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 2;
                this.scale = 1.8f;
                this.timeLeft = 2700;
                this.magic = true;
            }
            else if (this.type == 101)
            {
                this.width = 6;
                this.height = 6;
                this.aiStyle = 23;
                this.hostile = true;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.extraUpdates = 3;
                this.magic = true;
            }
            else if (this.type == 102)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 16;
                this.hostile = true;
                this.penetrate = -1;
                this.ranged = true;
            }
            else if (this.type == 103)
            {
                this.arrow = true;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.light = 1f;
                this.ranged = true;
            }
            else if (this.type == 104)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 1;
                this.light = 0.5f;
                this.alpha = (int) byte.MaxValue;
                this.scale = 1.2f;
                this.timeLeft = 600;
                this.ranged = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 105)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 19;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.scale = 1.3f;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
            }
            else if (this.type == 106)
            {
                this.width = 32;
                this.height = 32;
                this.aiStyle = 3;
                this.friendly = true;
                this.penetrate = -1;
                this.melee = true;
                this.light = 0.4f;
            }
            else if (this.type == 107)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.scale = 1.1f;
            }
            else if (this.type == 108)
            {
                this.width = 260;
                this.height = 260;
                this.aiStyle = 16;
                this.friendly = true;
                this.hostile = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 2;
                this.trap = true;
            }
            else if (this.type == 109)
            {
                this.knockBack = 6f;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 10;
                this.hostile = true;
                this.scale = 0.9f;
                this.penetrate = -1;
                this.coldDamage = true;
                this.thrown = true;
            }
            else if (this.type == 110)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.hostile = true;
                this.penetrate = -1;
                this.light = 0.5f;
                this.alpha = (int) byte.MaxValue;
                this.scale = 1.2f;
                this.timeLeft = 600;
                this.ranged = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 111)
            {
                this.netImportant = true;
                this.width = 18;
                this.height = 18;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 112)
            {
                this.netImportant = true;
                this.width = 18;
                this.height = 18;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 113)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 3;
                this.friendly = true;
                this.penetrate = -1;
                this.melee = true;
                this.light = 0.4f;
                this.coldDamage = true;
            }
            else if (this.type == 114)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 27;
                this.magic = true;
                this.penetrate = 3;
                this.light = 0.5f;
                this.alpha = (int) byte.MaxValue;
                this.friendly = true;
            }
            else if (this.type == 115)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 27;
                this.hostile = true;
                this.magic = true;
                this.penetrate = -1;
                this.light = 0.5f;
                this.alpha = (int) byte.MaxValue;
            }
            else if (this.type == 116)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 27;
                this.melee = true;
                this.penetrate = 1;
                this.light = 0.5f;
                this.alpha = (int) byte.MaxValue;
                this.friendly = true;
            }
            else if (this.type == 117)
            {
                this.arrow = true;
                this.extraUpdates = 2;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.ranged = true;
            }
            else if (this.type == 118)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 28;
                this.alpha = (int) byte.MaxValue;
                this.melee = true;
                this.penetrate = 1;
                this.friendly = true;
                this.coldDamage = true;
            }
            else if (this.type == 119)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 28;
                this.alpha = (int) byte.MaxValue;
                this.melee = true;
                this.penetrate = 2;
                this.friendly = true;
            }
            else if (this.type == 120)
            {
                this.arrow = true;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.ranged = true;
                this.coldDamage = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 121)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 29;
                this.alpha = (int) byte.MaxValue;
                this.magic = true;
                this.penetrate = 1;
                this.friendly = true;
            }
            else if (this.type == 122)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 29;
                this.alpha = (int) byte.MaxValue;
                this.magic = true;
                this.penetrate = 1;
                this.friendly = true;
            }
            else if (this.type == 123)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 29;
                this.alpha = (int) byte.MaxValue;
                this.magic = true;
                this.penetrate = 1;
                this.friendly = true;
            }
            else if (this.type == 124)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 29;
                this.alpha = (int) byte.MaxValue;
                this.magic = true;
                this.penetrate = 2;
                this.friendly = true;
            }
            else if (this.type == 125)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 29;
                this.alpha = (int) byte.MaxValue;
                this.magic = true;
                this.penetrate = 2;
                this.friendly = true;
            }
            else if (this.type == 126)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 29;
                this.alpha = (int) byte.MaxValue;
                this.magic = true;
                this.penetrate = 2;
                this.friendly = true;
            }
            else if (this.type == (int) sbyte.MaxValue)
            {
                this.netImportant = true;
                this.width = 22;
                this.height = 22;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 128)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 28;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.friendly = false;
                this.hostile = true;
                this.coldDamage = true;
            }
            else if (this.type == 129)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 28;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.friendly = false;
                this.hostile = true;
                this.tileCollide = false;
            }
            else if (this.type == 130)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 19;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.scale = 1.2f;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
            }
            else if (this.type == 131)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 30;
                this.friendly = true;
                this.penetrate = 1;
                this.tileCollide = false;
                this.melee = true;
                this.light = 0.5f;
            }
            else if (this.type == 132)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 27;
                this.melee = true;
                this.penetrate = 3;
                this.light = 0.5f;
                this.alpha = (int) byte.MaxValue;
                this.friendly = true;
            }
            else if (this.type == 133)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
                this.ranged = true;
            }
            else if (this.type == 134)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
                this.ranged = true;
            }
            else if (this.type == 135)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
                this.ranged = true;
            }
            else if (this.type == 136)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
                this.ranged = true;
            }
            else if (this.type == 137)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
                this.ranged = true;
            }
            else if (this.type == 138)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
                this.ranged = true;
            }
            else if (this.type == 139)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
                this.ranged = true;
            }
            else if (this.type == 140)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
                this.ranged = true;
            }
            else if (this.type == 141)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
                this.ranged = true;
            }
            else if (this.type == 142)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
                this.ranged = true;
            }
            else if (this.type == 143)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
                this.ranged = true;
            }
            else if (this.type == 144)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
                this.ranged = true;
            }
            else if (this.type == 145)
            {
                this.width = 6;
                this.height = 6;
                this.aiStyle = 31;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.extraUpdates = 2;
                this.tileCollide = false;
                this.ignoreWater = true;
            }
            else if (this.type == 146)
            {
                this.width = 6;
                this.height = 6;
                this.aiStyle = 31;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.extraUpdates = 2;
                this.tileCollide = false;
                this.ignoreWater = true;
            }
            else if (this.type == 147)
            {
                this.width = 6;
                this.height = 6;
                this.aiStyle = 31;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.extraUpdates = 2;
                this.tileCollide = false;
                this.ignoreWater = true;
            }
            else if (this.type == 148)
            {
                this.width = 6;
                this.height = 6;
                this.aiStyle = 31;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.extraUpdates = 2;
                this.tileCollide = false;
                this.ignoreWater = true;
            }
            else if (this.type == 149)
            {
                this.width = 6;
                this.height = 6;
                this.aiStyle = 31;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.extraUpdates = 2;
                this.tileCollide = false;
                this.ignoreWater = true;
            }
            else if (this.type == 150 || this.type == 151 || this.type == 152)
            {
                this.width = 28;
                this.height = 28;
                this.aiStyle = 4;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
                this.magic = true;
            }
            else if (this.type == 153)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 19;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.scale = 1.1f;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
            }
            else if (this.type == 154)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 15;
                this.friendly = true;
                this.penetrate = -1;
                this.melee = true;
                this.scale = 0.8f;
            }
            else if (this.type == 155)
            {
                this.netImportant = true;
                this.width = 44;
                this.height = 44;
                this.aiStyle = 32;
                this.friendly = true;
            }
            else if (this.type == 156)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 27;
                this.melee = true;
                this.light = 0.5f;
                this.alpha = (int) byte.MaxValue;
                this.friendly = true;
            }
            else if (this.type == 157)
            {
                this.width = 32;
                this.height = 32;
                this.aiStyle = 27;
                this.melee = true;
                this.light = 0.5f;
                this.alpha = (int) byte.MaxValue;
                this.friendly = true;
                this.scale = 1.2f;
            }
            else if (this.type == 158)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 1;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 600;
                this.ranged = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 159)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 1;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 600;
                this.ranged = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 160)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 1;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 600;
                this.ranged = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 161)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 1;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 600;
                this.ranged = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 162)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 2;
                this.friendly = true;
                this.penetrate = 4;
                this.alpha = (int) byte.MaxValue;
            }
            else if (this.type == 163)
            {
                this.netImportant = true;
                this.width = 6;
                this.height = 6;
                this.aiStyle = 33;
                this.friendly = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 36000;
            }
            else if (this.type == 164)
            {
                this.width = 128;
                this.height = 128;
                this.aiStyle = 16;
                this.friendly = true;
                this.hostile = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 2;
            }
            else if (this.type == 165)
            {
                this.netImportant = true;
                this.width = 12;
                this.height = 12;
                this.aiStyle = 7;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.timeLeft *= 10;
            }
            else if (this.type == 166)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 2;
                this.friendly = true;
                this.ranged = true;
                this.coldDamage = true;
            }
            else if (this.type == 167 || this.type == 168 || (this.type == 169 || this.type == 170))
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 34;
                this.friendly = true;
                this.ranged = true;
                this.timeLeft = 45;
            }
            else if (this.type == 171 || this.type == 505 || this.type == 506)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 35;
                this.penetrate = -1;
                this.tileCollide = false;
                this.timeLeft = 400;
            }
            else if (this.type == 172)
            {
                this.arrow = true;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.light = 1f;
                this.ranged = true;
                this.coldDamage = true;
            }
            else if (this.type == 173)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 27;
                this.melee = true;
                this.penetrate = 1;
                this.light = 0.2f;
                this.alpha = (int) byte.MaxValue;
                this.friendly = true;
            }
            else if (this.type == 174)
            {
                this.alpha = (int) byte.MaxValue;
                this.width = 6;
                this.height = 6;
                this.aiStyle = 1;
                this.hostile = true;
                this.penetrate = -1;
                this.coldDamage = true;
            }
            else if (this.type == 175)
            {
                this.width = 34;
                this.height = 34;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 176)
            {
                this.alpha = (int) byte.MaxValue;
                this.width = 6;
                this.height = 6;
                this.aiStyle = 1;
                this.hostile = true;
                this.penetrate = -1;
            }
            else if (this.type == 177)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 28;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.friendly = false;
                this.hostile = true;
                this.coldDamage = true;
            }
            else if (this.type == 178)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.timeLeft = 2;
            }
            else if (this.type == 179)
            {
                this.knockBack = 6f;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 10;
                this.friendly = true;
                this.hostile = true;
                this.penetrate = -1;
            }
            else if (this.type == 180)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.hostile = true;
                this.penetrate = -1;
                this.light = 0.5f;
                this.alpha = (int) byte.MaxValue;
                this.scale = 1.2f;
                this.timeLeft = 600;
                this.ranged = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 181)
            {
                this.width = 8;
                this.height = 8;
                this.aiStyle = 36;
                this.friendly = true;
                this.penetrate = 3;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 600;
                this.extraUpdates = 3;
            }
            else if (this.type == 182)
            {
                this.light = 0.15f;
                this.width = 30;
                this.height = 30;
                this.aiStyle = 3;
                this.friendly = true;
                this.penetrate = 10;
                this.melee = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 183)
            {
                this.width = 14;
                this.height = 22;
                this.aiStyle = 14;
                this.penetrate = 1;
                this.ranged = true;
                this.timeLeft = 180;
                this.thrown = true;
                this.friendly = true;
            }
            else if (this.type == 184)
            {
                this.width = 6;
                this.height = 6;
                this.aiStyle = 1;
                this.friendly = true;
                this.hostile = true;
                this.penetrate = -1;
                this.trap = true;
            }
            else if (this.type == 185)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 14;
                this.friendly = true;
                this.hostile = true;
                this.penetrate = -1;
                this.timeLeft = 900;
                this.trap = true;
            }
            else if (this.type == 186)
            {
                this.width = 10;
                this.height = 14;
                this.aiStyle = 37;
                this.friendly = true;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.hostile = true;
                this.penetrate = -1;
                this.timeLeft = 300;
                this.trap = true;
            }
            else if (this.type == 187)
            {
                this.width = 6;
                this.height = 6;
                this.aiStyle = 38;
                this.alpha = (int) byte.MaxValue;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.timeLeft = 60;
                this.trap = true;
            }
            else if (this.type == 188)
            {
                this.width = 6;
                this.height = 6;
                this.aiStyle = 23;
                this.friendly = true;
                this.hostile = true;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.extraUpdates = 2;
                this.trap = true;
            }
            else if (this.type == 189)
            {
                this.width = 8;
                this.height = 8;
                this.aiStyle = 36;
                this.friendly = true;
                this.penetrate = 4;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 600;
                this.magic = true;
                this.extraUpdates = 3;
            }
            else if (this.type == 190)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 39;
                this.friendly = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.ranged = true;
            }
            else if (this.type >= 191 && this.type <= 194)
            {
                this.netImportant = true;
                this.width = 18;
                this.height = 18;
                this.aiStyle = 26;
                this.penetrate = -1;
                this.timeLeft *= 5;
                this.minion = true;
                this.minionSlots = 1f;
                if (this.type == 192)
                    this.scale = 1.025f;
                if (this.type == 193)
                    this.scale = 1.05f;
                if (this.type == 194)
                    this.scale = 1.075f;
            }
            else if (this.type == 195)
            {
                this.tileCollide = false;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
            }
            else if (this.type == 196)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 14;
                this.penetrate = -1;
                this.scale = 0.8f;
            }
            else if (this.type == 197)
            {
                this.netImportant = true;
                this.width = 42;
                this.height = 42;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 198)
            {
                this.netImportant = true;
                this.width = 26;
                this.height = 26;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 199)
            {
                this.netImportant = true;
                this.width = 28;
                this.height = 28;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 200)
            {
                this.netImportant = true;
                this.width = 28;
                this.height = 28;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 201)
            {
                this.knockBack = 12f;
                this.width = 24;
                this.height = 24;
                this.aiStyle = 17;
                this.penetrate = -1;
            }
            else if (this.type == 202)
            {
                this.knockBack = 12f;
                this.width = 24;
                this.height = 24;
                this.aiStyle = 17;
                this.penetrate = -1;
            }
            else if (this.type == 203)
            {
                this.knockBack = 12f;
                this.width = 24;
                this.height = 24;
                this.aiStyle = 17;
                this.penetrate = -1;
            }
            else if (this.type == 204)
            {
                this.knockBack = 12f;
                this.width = 24;
                this.height = 24;
                this.aiStyle = 17;
                this.penetrate = -1;
            }
            else if (this.type == 205)
            {
                this.knockBack = 12f;
                this.width = 24;
                this.height = 24;
                this.aiStyle = 17;
                this.penetrate = -1;
            }
            else if (this.type == 206)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 40;
                this.friendly = true;
                this.penetrate = 1;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 600;
                this.magic = true;
            }
            else if (this.type == 207)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 1;
                this.light = 0.5f;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 2;
                this.scale = 1.2f;
                this.timeLeft = 600;
                this.ranged = true;
            }
            else if (this.type == 208)
            {
                this.netImportant = true;
                this.width = 18;
                this.height = 36;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 209)
            {
                this.width = 12;
                this.height = 32;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
                this.light = 0.5f;
            }
            else if (this.type == 210)
            {
                this.netImportant = true;
                this.width = 14;
                this.height = 30;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 211)
            {
                this.netImportant = true;
                this.width = 24;
                this.height = 24;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
                this.light = 1f;
                this.ignoreWater = true;
            }
            else if (this.type == 212)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 19;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.scale = 1.12f;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
            }
            else if (this.type == 213)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.scale = 0.92f;
            }
            else if (this.type == 214)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
            }
            else if (this.type == 215)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 19;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.scale = 1.27f;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
            }
            else if (this.type == 216)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.scale = 0.93f;
            }
            else if (this.type == 217)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.scale = 1.12f;
            }
            else if (this.type == 218)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 19;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.scale = 1.28f;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
            }
            else if (this.type == 219)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.scale = 0.95f;
            }
            else if (this.type == 220)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.scale = 1.2f;
            }
            else if (this.type == 221)
            {
                this.width = 20;
                this.height = 20;
                this.aiStyle = 41;
                this.friendly = true;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.timeLeft = 120;
                this.penetrate = -1;
                this.scale = (float) (1.0 + (double) Main.rand.Next(30) * 0.00999999977648258);
                this.extraUpdates = 2;
            }
            else if (this.type == 222)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 19;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.scale = 1.3f;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
            }
            else if (this.type == 223)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.scale = 1f;
            }
            else if (this.type == 224)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.scale = 1.1f;
            }
            else if (this.type == 225)
            {
                this.arrow = true;
                this.penetrate = 2;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.ranged = true;
            }
            else if (this.type == 226)
            {
                this.netImportant = true;
                this.width = 22;
                this.height = 42;
                this.aiStyle = 42;
                this.friendly = true;
                this.tileCollide = false;
                this.penetrate = -1;
                this.timeLeft *= 5;
                this.light = 0.4f;
                this.ignoreWater = true;
            }
            else if (this.type == 227)
            {
                this.netImportant = true;
                this.tileCollide = false;
                this.light = 0.1f;
                this.width = 14;
                this.height = 14;
                this.aiStyle = 43;
                this.friendly = true;
                this.penetrate = 1;
                this.timeLeft = 180;
            }
            else if (this.type == 228)
            {
                this.tileCollide = false;
                this.width = 30;
                this.height = 30;
                this.aiStyle = 44;
                this.friendly = true;
                this.scale = 1.1f;
                this.penetrate = -1;
            }
            else if (this.type == 229)
            {
                this.width = 30;
                this.height = 30;
                this.aiStyle = 44;
                this.friendly = true;
                this.penetrate = -1;
                this.light = 0.2f;
            }
            else if (this.type >= 230 && this.type <= 235)
            {
                this.netImportant = true;
                this.width = 18;
                this.height = 18;
                this.aiStyle = 7;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.timeLeft *= 10;
            }
            else if (this.type == 236)
            {
                this.netImportant = true;
                this.width = 34;
                this.height = 34;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 237)
            {
                this.netImportant = true;
                this.width = 28;
                this.height = 28;
                this.aiStyle = 45;
                this.penetrate = -1;
            }
            else if (this.type == 238)
            {
                this.tileCollide = false;
                this.ignoreWater = true;
                this.width = 54;
                this.height = 28;
                this.aiStyle = 45;
                this.penetrate = -1;
            }
            else if (this.type == 239)
            {
                this.ignoreWater = true;
                this.width = 4;
                this.height = 40;
                this.aiStyle = 45;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft = 300;
                this.scale = 1.1f;
                this.magic = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 240)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 2;
                this.hostile = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
            }
            else if (this.type == 241)
            {
                this.knockBack = 6f;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 10;
                this.friendly = true;
                this.hostile = true;
                this.penetrate = -1;
            }
            else if (this.type == 242)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 1;
                this.light = 0.5f;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 7;
                this.scale = 1.18f;
                this.timeLeft = 600;
                this.ranged = true;
                this.ignoreWater = true;
            }
            else if (this.type == 243)
            {
                this.width = 28;
                this.height = 28;
                this.aiStyle = 45;
                this.penetrate = -1;
            }
            else if (this.type == 244)
            {
                this.tileCollide = false;
                this.ignoreWater = true;
                this.width = 54;
                this.height = 28;
                this.aiStyle = 45;
                this.penetrate = -1;
            }
            else if (this.type == 245)
            {
                this.ignoreWater = true;
                this.width = 4;
                this.height = 40;
                this.aiStyle = 45;
                this.friendly = true;
                this.penetrate = 2;
                this.timeLeft = 300;
                this.scale = 1.1f;
                this.magic = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 246)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.ranged = true;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 1;
            }
            else if (this.type == 247)
            {
                this.width = 34;
                this.height = 34;
                this.aiStyle = 15;
                this.friendly = true;
                this.penetrate = -1;
                this.melee = true;
            }
            else if (this.type == 248)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 1;
                this.friendly = true;
                this.melee = true;
            }
            else if (this.type == 249)
            {
                this.width = 12;
                this.height = 12;
                this.aiStyle = 2;
                this.friendly = true;
                this.ranged = true;
            }
            else if (this.type == 250)
            {
                this.width = 12;
                this.height = 12;
                this.aiStyle = 46;
                this.penetrate = -1;
                this.magic = true;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
                this.scale = 1.25f;
            }
            else if (this.type == 251)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 46;
                this.friendly = true;
                this.penetrate = -1;
                this.magic = true;
                this.alpha = (int) byte.MaxValue;
                this.light = 0.3f;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.scale = 1.25f;
            }
            else if (this.type == 252)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.scale = 1.1f;
            }
            else if (this.type == 253)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 8;
                this.friendly = true;
                this.light = 0.8f;
                this.alpha = 100;
                this.magic = true;
            }
            else if (this.type == 254)
            {
                this.width = 38;
                this.height = 38;
                this.aiStyle = 47;
                this.magic = true;
                this.timeLeft = 660;
                this.light = 0.5f;
            }
            else if (this.type == (int) byte.MaxValue)
            {
                this.width = 8;
                this.height = 8;
                this.aiStyle = 48;
                this.friendly = true;
                this.magic = true;
                this.extraUpdates = 100;
                this.timeLeft = 100;
            }
            else if (this.type == 256)
            {
                this.netImportant = true;
                this.tileCollide = false;
                this.width = 6;
                this.height = 6;
                this.aiStyle = 7;
                this.friendly = true;
                this.penetrate = -1;
                this.scale = 1f;
                this.timeLeft *= 10;
            }
            else if (this.type == 257)
            {
                this.ignoreWater = true;
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.hostile = true;
                this.penetrate = -1;
                this.light = 0.75f;
                this.alpha = (int) byte.MaxValue;
                this.scale = 1.2f;
                this.timeLeft = 600;
                this.magic = true;
                this.coldDamage = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 258)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 8;
                this.hostile = true;
                this.penetrate = -1;
                this.alpha = 100;
                this.timeLeft = 300;
            }
            else if (this.type == 259)
            {
                this.ignoreWater = true;
                this.tileCollide = false;
                this.width = 8;
                this.height = 8;
                this.aiStyle = 1;
                this.hostile = true;
                this.penetrate = -1;
                this.light = 0.3f;
                this.scale = 1.1f;
                this.magic = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 260)
            {
                this.width = 8;
                this.height = 8;
                this.aiStyle = 48;
                this.friendly = true;
                this.magic = true;
                this.extraUpdates = 100;
                this.timeLeft = 200;
                this.penetrate = -1;
            }
            else if (this.type == 261)
            {
                this.width = 32;
                this.height = 34;
                this.aiStyle = 14;
                this.friendly = true;
                this.penetrate = 6;
                this.magic = true;
                this.ignoreWater = true;
            }
            else if (this.type == 262)
            {
                this.width = 30;
                this.height = 30;
                this.aiStyle = 13;
                this.friendly = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.melee = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 263)
            {
                this.width = 34;
                this.height = 34;
                this.alpha = 100;
                this.light = 0.5f;
                this.aiStyle = 18;
                this.friendly = true;
                this.penetrate = 5;
                this.tileCollide = true;
                this.scale = 1f;
                this.melee = true;
                this.timeLeft = 180;
                this.coldDamage = true;
            }
            else if (this.type == 264)
            {
                this.ignoreWater = true;
                this.width = 4;
                this.height = 40;
                this.aiStyle = 45;
                this.hostile = true;
                this.penetrate = -1;
                this.timeLeft = 120;
                this.scale = 1.1f;
                this.extraUpdates = 1;
            }
            else if (this.type == 265)
            {
                this.width = 12;
                this.height = 12;
                this.aiStyle = 1;
                this.alpha = (int) byte.MaxValue;
                this.friendly = true;
                this.magic = true;
                this.penetrate = 4;
            }
            else if (this.type == 266)
            {
                this.netImportant = true;
                this.alpha = 75;
                this.width = 24;
                this.height = 16;
                this.aiStyle = 26;
                this.penetrate = -1;
                this.timeLeft *= 5;
                this.minion = true;
                this.minionSlots = 1f;
            }
            else if (this.type == 267)
            {
                this.alpha = (int) byte.MaxValue;
                this.width = 14;
                this.height = 14;
                this.aiStyle = 1;
                this.friendly = true;
                this.ranged = true;
            }
            else if (this.type == 268)
            {
                this.netImportant = true;
                this.width = 18;
                this.height = 32;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 269)
            {
                this.netImportant = true;
                this.width = 20;
                this.height = 26;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 270)
            {
                this.width = 26;
                this.height = 26;
                this.aiStyle = 1;
                this.alpha = (int) byte.MaxValue;
                this.friendly = true;
                this.magic = true;
                this.penetrate = 3;
            }
            else if (this.type == 271)
            {
                this.width = 20;
                this.height = 20;
                this.aiStyle = 13;
                this.friendly = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.melee = true;
                this.scale = 1.2f;
            }
            else if (this.type == 272)
            {
                this.width = 32;
                this.height = 32;
                this.aiStyle = 3;
                this.friendly = true;
                this.scale = 0.9f;
                this.penetrate = -1;
                this.melee = true;
            }
            else if (this.type == 273)
            {
                this.width = 26;
                this.height = 26;
                this.aiStyle = 13;
                this.friendly = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.melee = true;
            }
            else if (this.type == 274)
            {
                this.width = 42;
                this.height = 42;
                this.alpha = 100;
                this.light = 0.5f;
                this.aiStyle = 18;
                this.friendly = true;
                this.penetrate = 5;
                this.tileCollide = false;
                this.scale = 1.1f;
                this.melee = true;
                this.timeLeft = 180;
            }
            else if (this.type == 275)
            {
                this.alpha = (int) byte.MaxValue;
                this.width = 14;
                this.height = 14;
                this.aiStyle = 1;
                this.hostile = true;
            }
            else if (this.type == 276)
            {
                this.alpha = (int) byte.MaxValue;
                this.width = 14;
                this.height = 14;
                this.aiStyle = 1;
                this.hostile = true;
            }
            else if (this.type == 277)
            {
                this.alpha = (int) byte.MaxValue;
                this.width = 38;
                this.height = 38;
                this.aiStyle = 14;
                this.hostile = true;
            }
            else if (this.type == 278)
            {
                this.arrow = true;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.light = 1f;
                this.ranged = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 279)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 1;
                this.light = 0.5f;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 2;
                this.scale = 1.25f;
                this.timeLeft = 600;
                this.ranged = true;
            }
            else if (this.type == 280)
            {
                this.width = 32;
                this.height = 32;
                this.aiStyle = 12;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = 5;
                this.extraUpdates = 2;
                this.ignoreWater = true;
                this.magic = true;
            }
            else if (this.type == 281)
            {
                this.width = 28;
                this.height = 28;
                this.aiStyle = 49;
                this.friendly = true;
                this.penetrate = 1;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 600;
            }
            else if (this.type == 282)
            {
                this.arrow = true;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.ranged = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 283)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 1;
                this.light = 0.5f;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 2;
                this.scale = 1.25f;
                this.timeLeft = 600;
                this.ranged = true;
            }
            else if (this.type == 284)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 1;
                this.light = 0.5f;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 2;
                this.scale = 1.3f;
                this.timeLeft = 600;
                this.ranged = true;
            }
            else if (this.type == 285)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 1;
                this.light = 0.5f;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 2;
                this.scale = 1.3f;
                this.timeLeft = 600;
                this.ranged = true;
            }
            else if (this.type == 286)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 1;
                this.light = 0.5f;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 2;
                this.scale = 1.3f;
                this.timeLeft = 600;
                this.ranged = true;
            }
            else if (this.type == 287)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 1;
                this.light = 0.5f;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 2;
                this.scale = 1.3f;
                this.timeLeft = 600;
                this.ranged = true;
            }
            else if (this.type == 288)
            {
                this.width = 32;
                this.height = 32;
                this.aiStyle = 12;
                this.hostile = true;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.extraUpdates = 2;
                this.ignoreWater = true;
                this.magic = true;
            }
            else if (this.type == 289)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.timeLeft = 2;
            }
            else if (this.type == 290)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 48;
                this.hostile = true;
                this.magic = true;
                this.extraUpdates = 100;
                this.timeLeft = 100;
                this.penetrate = -1;
            }
            else if (this.type == 291)
            {
                this.width = 12;
                this.height = 12;
                this.aiStyle = 50;
                this.hostile = true;
                this.alpha = (int) byte.MaxValue;
                this.magic = true;
                this.tileCollide = false;
                this.penetrate = -1;
            }
            else if (this.type == 292)
            {
                this.width = 130;
                this.height = 130;
                this.aiStyle = 50;
                this.hostile = true;
                this.alpha = (int) byte.MaxValue;
                this.magic = true;
                this.tileCollide = false;
                this.penetrate = -1;
            }
            else if (this.type == 293)
            {
                this.width = 12;
                this.height = 12;
                this.aiStyle = 51;
                this.hostile = true;
                this.alpha = (int) byte.MaxValue;
                this.magic = true;
                this.tileCollide = false;
                this.penetrate = -1;
                this.extraUpdates = 1;
            }
            else if (this.type == 294)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 48;
                this.friendly = true;
                this.magic = true;
                this.extraUpdates = 100;
                this.timeLeft = 300;
                this.penetrate = -1;
            }
            else if (this.type == 295)
            {
                this.width = 12;
                this.height = 12;
                this.aiStyle = 50;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.magic = true;
                this.tileCollide = true;
            }
            else if (this.type == 296)
            {
                this.width = 150;
                this.height = 150;
                this.aiStyle = 50;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.magic = true;
                this.tileCollide = false;
                this.penetrate = -1;
            }
            else if (this.type == 297)
            {
                this.width = 12;
                this.height = 12;
                this.aiStyle = 51;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.magic = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 298)
            {
                this.width = 6;
                this.height = 6;
                this.aiStyle = 52;
                this.alpha = (int) byte.MaxValue;
                this.magic = true;
                this.tileCollide = false;
                this.extraUpdates = 3;
            }
            else if (this.type == 299)
            {
                this.width = 6;
                this.height = 6;
                this.aiStyle = 1;
                this.hostile = true;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.extraUpdates = 2;
                this.magic = true;
                this.ignoreWater = true;
                this.tileCollide = false;
            }
            else if (this.type == 300)
            {
                this.width = 38;
                this.height = 38;
                this.aiStyle = 2;
                this.hostile = true;
                this.penetrate = -1;
                this.ignoreWater = true;
                this.tileCollide = false;
            }
            else if (this.type == 301)
            {
                this.width = 38;
                this.height = 38;
                this.aiStyle = 3;
                this.friendly = true;
                this.penetrate = -1;
                this.melee = true;
                this.extraUpdates = 2;
            }
            else if (this.type == 302)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.hostile = true;
                this.penetrate = -1;
                this.light = 0.3f;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 7;
                this.scale = 1.18f;
                this.timeLeft = 300;
                this.ranged = true;
                this.ignoreWater = true;
            }
            else if (this.type == 303)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 16;
                this.hostile = true;
                this.penetrate = -1;
                this.ranged = true;
            }
            else if (this.type == 304)
            {
                this.alpha = (int) byte.MaxValue;
                this.width = 30;
                this.height = 30;
                this.aiStyle = 2;
                this.friendly = true;
                this.penetrate = 1;
                this.melee = true;
                this.light = 0.2f;
                this.ignoreWater = true;
                this.extraUpdates = 0;
            }
            else if (this.type == 305)
            {
                this.width = 6;
                this.height = 6;
                this.aiStyle = 52;
                this.alpha = (int) byte.MaxValue;
                this.tileCollide = false;
                this.extraUpdates = 10;
            }
            else if (this.type == 306)
            {
                this.alpha = (int) byte.MaxValue;
                this.width = 14;
                this.height = 14;
                this.aiStyle = 2;
                this.friendly = true;
                this.penetrate = 1;
                this.melee = true;
                this.ignoreWater = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 307)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 36;
                this.penetrate = 1;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 600;
                this.melee = true;
                this.extraUpdates = 3;
            }
            else if (this.type == 308)
            {
                this.width = 80;
                this.height = 74;
                this.aiStyle = 53;
                this.timeLeft = Projectile.SentryLifeTime;
                this.light = 0.25f;
                this.ignoreWater = true;
                this.coldDamage = true;
                this.sentry = true;
            }
            else if (this.type == 309)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 28;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = 1;
                this.friendly = true;
                this.extraUpdates = 3;
                this.coldDamage = true;
            }
            else if (this.type == 310)
            {
                this.netImportant = true;
                this.width = 6;
                this.height = 6;
                this.aiStyle = 33;
                this.friendly = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 36000;
            }
            else if (this.type == 311)
            {
                this.width = 10;
                this.height = 12;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 3;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 600;
                this.ranged = true;
            }
            else if (this.type == 312)
            {
                this.alpha = (int) byte.MaxValue;
                this.width = 32;
                this.height = 32;
                this.aiStyle = 1;
                this.friendly = true;
                this.ranged = true;
                this.timeLeft = 300;
            }
            else if (this.type == 313)
            {
                this.netImportant = true;
                this.width = 30;
                this.height = 30;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 314)
            {
                this.netImportant = true;
                this.width = 24;
                this.height = 40;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 315)
            {
                this.netImportant = true;
                this.width = 14;
                this.height = 14;
                this.aiStyle = 7;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.timeLeft *= 10;
            }
            else if (this.type == 316)
            {
                this.alpha = (int) byte.MaxValue;
                this.width = 16;
                this.height = 16;
                this.aiStyle = 36;
                this.friendly = true;
                this.penetrate = 1;
                this.timeLeft = 600;
                this.magic = true;
            }
            else if (this.type == 317)
            {
                this.netImportant = true;
                this.width = 28;
                this.height = 28;
                this.aiStyle = 54;
                this.penetrate = 1;
                this.timeLeft *= 5;
                this.minion = true;
                this.minionSlots = 1f;
            }
            else if (this.type == 318)
            {
                this.width = 12;
                this.height = 14;
                this.aiStyle = 2;
                this.friendly = true;
                this.thrown = true;
            }
            else if (this.type == 319)
            {
                this.netImportant = true;
                this.width = 36;
                this.height = 30;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 320)
            {
                this.width = 34;
                this.height = 34;
                this.aiStyle = 3;
                this.friendly = true;
                this.penetrate = -1;
                this.melee = true;
            }
            else if (this.type == 321)
            {
                this.width = 30;
                this.height = 30;
                this.aiStyle = 55;
                this.friendly = true;
                this.melee = true;
                this.tileCollide = false;
                this.ignoreWater = true;
            }
            else if (this.type == 322)
            {
                this.netImportant = true;
                this.width = 14;
                this.height = 14;
                this.aiStyle = 7;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.timeLeft *= 10;
            }
            else if (this.type == 323)
            {
                this.penetrate = 10;
                this.extraUpdates = 3;
                this.width = 14;
                this.height = 14;
                this.aiStyle = 1;
                this.alpha = (int) byte.MaxValue;
                this.friendly = true;
                this.ranged = true;
                this.scale = 0.8f;
            }
            else if (this.type == 324)
            {
                this.netImportant = true;
                this.width = 26;
                this.height = 38;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 325)
            {
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.width = 14;
                this.height = 14;
                this.aiStyle = 1;
                this.hostile = true;
                this.tileCollide = false;
            }
            else if (this.type >= 326 && this.type <= 328)
            {
                if (this.type == 326)
                {
                    this.width = 14;
                    this.height = 16;
                }
                else if (this.type == 327)
                {
                    this.width = 12;
                    this.height = 14;
                }
                else
                {
                    this.width = 6;
                    this.height = 12;
                }

                this.aiStyle = 14;
                this.hostile = true;
                this.penetrate = -1;
                this.timeLeft = 360;
            }
            else if (this.type == 329)
            {
                this.width = 80;
                this.height = 80;
                this.light = 0.25f;
                this.aiStyle = 56;
                this.hostile = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.timeLeft = 420;
            }
            else if (this.type == 330)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 2;
                this.friendly = true;
                this.penetrate = 6;
                this.thrown = true;
            }
            else if (this.type == 331)
            {
                this.netImportant = true;
                this.width = 18;
                this.height = 18;
                this.aiStyle = 7;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.timeLeft *= 10;
            }
            else if (this.type == 332)
            {
                this.netImportant = true;
                this.width = 18;
                this.height = 18;
                this.aiStyle = 7;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.timeLeft *= 10;
                this.light = 0.5f;
            }
            else if (this.type == 333)
            {
                this.width = 38;
                this.height = 38;
                this.aiStyle = 3;
                this.friendly = true;
                this.scale = 0.9f;
                this.penetrate = -1;
                this.melee = true;
            }
            else if (this.type == 334)
            {
                this.netImportant = true;
                this.width = 28;
                this.height = 28;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 335)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 2;
                this.friendly = true;
                this.penetrate = 1;
                this.melee = true;
            }
            else if (this.type == 336)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.friendly = true;
                this.magic = true;
                this.scale = 0.8f;
                this.extraUpdates = 1;
            }
            else if (this.type == 337)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.magic = true;
                this.tileCollide = false;
                this.coldDamage = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 338 || this.type == 339 || (this.type == 340 || this.type == 341))
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 16;
                this.penetrate = -1;
                this.friendly = true;
                this.ranged = true;
                this.scale = 0.9f;
            }
            else if (this.type == 342)
            {
                this.width = 22;
                this.height = 2;
                this.aiStyle = 19;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.scale = 1.1f;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.coldDamage = true;
            }
            else if (this.type == 343)
            {
                this.alpha = (int) byte.MaxValue;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 57;
                this.friendly = true;
                this.melee = true;
                this.scale = 1.1f;
                this.penetrate = 3;
                this.coldDamage = true;
            }
            else if (this.type == 344)
            {
                this.width = 26;
                this.height = 26;
                this.aiStyle = 1;
                this.friendly = true;
                this.scale = 0.9f;
                this.alpha = (int) byte.MaxValue;
                this.melee = true;
                this.coldDamage = true;
                this.tileCollide = false;
            }
            else if (this.type == 345)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.hostile = true;
                this.scale = 0.8f;
            }
            else if (this.type == 346)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 14;
                this.hostile = true;
                this.penetrate = -1;
                this.timeLeft = 300;
            }
            else if (this.type == 347)
            {
                this.width = 6;
                this.height = 6;
                this.aiStyle = 2;
                this.hostile = true;
                this.penetrate = -1;
            }
            else if (this.type == 348)
            {
                this.aiStyle = 1;
                this.width = 48;
                this.height = 48;
                this.hostile = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.coldDamage = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 349)
            {
                this.aiStyle = 1;
                this.width = 12;
                this.height = 12;
                this.hostile = true;
                this.penetrate = -1;
                this.coldDamage = true;
            }
            else if (this.type == 350)
            {
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.width = 14;
                this.height = 14;
                this.aiStyle = 1;
                this.hostile = true;
                this.tileCollide = false;
                this.timeLeft /= 2;
            }
            else if (this.type == 351)
            {
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.width = 24;
                this.height = 24;
                this.aiStyle = 58;
                this.hostile = true;
                this.tileCollide = false;
            }
            else if (this.type == 352)
            {
                this.width = 30;
                this.height = 30;
                this.aiStyle = 14;
                this.hostile = true;
                this.penetrate = -1;
                this.timeLeft /= 3;
            }
            else if (this.type == 353)
            {
                this.netImportant = true;
                this.width = 18;
                this.height = 28;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 354)
            {
                this.knockBack = 6f;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 10;
                this.friendly = true;
                this.penetrate = -1;
                this.extraUpdates = 1;
            }
            else if (this.type == 355)
            {
                this.width = 12;
                this.height = 12;
                this.aiStyle = 1;
                this.alpha = (int) byte.MaxValue;
                this.friendly = true;
                this.magic = true;
                this.penetrate = 7;
            }
            else if (this.type == 356)
            {
                this.width = 6;
                this.height = 6;
                this.aiStyle = 59;
                this.alpha = (int) byte.MaxValue;
                this.magic = true;
                this.tileCollide = false;
                this.extraUpdates = 3;
            }
            else if (this.type == 357)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 6;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 2;
                this.scale = 1.2f;
                this.timeLeft = 600;
                this.ranged = true;
            }
            else if (this.type == 358)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 60;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.extraUpdates = 2;
                this.ignoreWater = true;
            }
            else if (this.type == 359)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 28;
                this.alpha = (int) byte.MaxValue;
                this.magic = true;
                this.penetrate = 2;
                this.friendly = true;
                this.coldDamage = true;
            }
            else if (this.type >= 360 && this.type <= 366 || (this.type == 381 || this.type == 382))
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 61;
                this.penetrate = -1;
                this.bobber = true;
            }
            else if (this.type == 367)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 19;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.scale = 1.1f;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
            }
            else if (this.type == 368)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 19;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
            }
            else if (this.type == 369)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
            }
            else if (this.type == 370)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 2;
                this.friendly = true;
                this.penetrate = 1;
            }
            else if (this.type == 371)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 2;
                this.friendly = true;
                this.penetrate = 1;
            }
            else if (this.type == 372)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 7;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.timeLeft *= 10;
            }
            else if (this.type == 373)
            {
                this.netImportant = true;
                this.width = 24;
                this.height = 26;
                this.aiStyle = 62;
                this.penetrate = -1;
                this.timeLeft *= 5;
                this.minion = true;
                this.minionSlots = 1f;
                this.tileCollide = false;
                this.ignoreWater = true;
            }
            else if (this.type == 374)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 0;
                this.friendly = true;
                this.penetrate = 1;
                this.aiStyle = 1;
                this.tileCollide = true;
                this.scale *= 0.9f;
            }
            else if (this.type == 375)
            {
                this.netImportant = true;
                this.width = 34;
                this.height = 26;
                this.aiStyle = 62;
                this.penetrate = -1;
                this.timeLeft *= 5;
                this.minion = true;
                this.minionSlots = 1f;
                this.tileCollide = false;
                this.ignoreWater = true;
            }
            else if (this.type == 376)
            {
                this.width = 12;
                this.height = 12;
                this.aiStyle = 0;
                this.friendly = true;
                this.penetrate = -1;
                this.aiStyle = 1;
                this.tileCollide = true;
                this.timeLeft = 100;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 1;
            }
            else if (this.type == 377)
            {
                this.width = 66;
                this.height = 50;
                this.aiStyle = 53;
                this.timeLeft = Projectile.SentryLifeTime;
                this.ignoreWater = true;
                this.sentry = true;
            }
            else if (this.type == 378)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 14;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft = 60;
                this.scale = 0.9f;
            }
            else if (this.type == 379)
            {
                this.width = 14;
                this.height = 10;
                this.aiStyle = 63;
                this.friendly = true;
                this.timeLeft = 300;
                this.penetrate = 1;
            }
            else if (this.type == 380)
            {
                this.netImportant = true;
                this.width = 26;
                this.height = 26;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 383)
            {
                this.width = 34;
                this.height = 34;
                this.aiStyle = 3;
                this.friendly = true;
                this.penetrate = -1;
                this.melee = true;
            }
            else if (this.type == 384)
            {
                this.width = 150;
                this.height = 42;
                this.hostile = true;
                this.penetrate = -1;
                this.aiStyle = 64;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 540;
            }
            else if (this.type == 385)
            {
                this.width = 30;
                this.height = 30;
                this.hostile = true;
                this.penetrate = -1;
                this.aiStyle = 65;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 300;
            }
            else if (this.type == 386)
            {
                this.width = 150;
                this.height = 42;
                this.hostile = true;
                this.penetrate = -1;
                this.aiStyle = 64;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 840;
            }
            else if (this.type == 387)
            {
                this.netImportant = true;
                this.width = 40;
                this.height = 20;
                this.aiStyle = 66;
                this.penetrate = -1;
                this.timeLeft *= 5;
                this.minion = true;
                this.minionSlots = 0.5f;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.friendly = true;
            }
            else if (this.type == 388)
            {
                this.netImportant = true;
                this.width = 40;
                this.height = 20;
                this.aiStyle = 66;
                this.penetrate = -1;
                this.timeLeft *= 5;
                this.minion = true;
                this.minionSlots = 0.5f;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.friendly = true;
            }
            else if (this.type == 389)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 3;
                this.light = 0.75f;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 2;
                this.scale = 1.2f;
                this.timeLeft = 600;
            }
            else if (this.type == 390 || this.type == 391 || this.type == 392)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 26;
                this.penetrate = -1;
                this.netImportant = true;
                this.timeLeft *= 5;
                this.minion = true;
                this.minionSlots = 0.75f;
                int type = this.type;
                if (this.type != 392)
                    ;
            }
            else if (this.type == 393 || this.type == 394 || this.type == 395)
            {
                this.width = 20;
                this.height = 30;
                this.aiStyle = 67;
                this.penetrate = -1;
                this.netImportant = true;
                this.timeLeft *= 5;
                this.minion = true;
                this.minionSlots = 1f;
                int type = this.type;
                if (this.type != 395)
                    ;
            }
            else if (this.type == 396)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 7;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.timeLeft *= 10;
                this.alpha = 100;
            }
            else if (this.type == 397)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
                this.thrown = true;
                this.tileCollide = false;
            }
            else if (this.type == 398)
            {
                this.netImportant = true;
                this.width = 18;
                this.height = 38;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 399)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 68;
                this.friendly = true;
                this.penetrate = 1;
                this.alpha = (int) byte.MaxValue;
                this.thrown = true;
                this.noEnchantments = true;
            }
            else if (this.type >= 400 && this.type <= 402)
            {
                if (this.type == 400)
                {
                    this.width = 14;
                    this.height = 16;
                }
                else if (this.type == 401)
                {
                    this.width = 12;
                    this.height = 14;
                }
                else
                {
                    this.width = 6;
                    this.height = 12;
                }

                this.penetrate = 3;
                this.aiStyle = 14;
                this.friendly = true;
                this.timeLeft = 360;
                this.ranged = true;
                this.noEnchantments = true;
            }
            else if (this.type == 403)
            {
                this.netImportant = true;
                this.width = 18;
                this.height = 18;
                this.aiStyle = 7;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.timeLeft *= 10;
            }
            else if (this.type == 404)
            {
                this.width = 26;
                this.height = 26;
                this.aiStyle = 69;
                this.friendly = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.melee = true;
            }
            else if (this.type == 405)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 70;
                this.friendly = true;
                this.penetrate = 1;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 90;
                this.melee = true;
                this.noEnchantments = true;
            }
            else if (this.type == 406)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 60;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.extraUpdates = 2;
                this.ignoreWater = true;
            }
            else if (this.type == 407)
            {
                this.netImportant = true;
                this.width = 28;
                this.height = 40;
                this.aiStyle = 62;
                this.penetrate = -1;
                this.timeLeft *= 5;
                this.minion = true;
                this.friendly = true;
                this.minionSlots = 1f;
                this.tileCollide = false;
                this.ignoreWater = true;
            }
            else if (this.type == 408)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
            }
            else if (this.type == 409)
            {
                this.width = 30;
                this.height = 30;
                this.penetrate = -1;
                this.aiStyle = 71;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 360;
                this.friendly = true;
                this.tileCollide = true;
                this.extraUpdates = 2;
                this.magic = true;
                this.ignoreWater = true;
            }
            else if (this.type == 410)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 72;
                this.friendly = true;
                this.penetrate = 1;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 50;
                this.magic = true;
                this.ignoreWater = true;
            }
            else if (this.type >= 411 && this.type <= 414)
            {
                switch (this.type)
                {
                    default:
                        this.width = 10;
                        this.height = 10;
                        this.aiStyle = 10;
                        break;
                }
            }
            else if (this.type == 415 || this.type == 416 || (this.type == 417 || this.type == 418))
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 34;
                this.friendly = true;
                this.ranged = true;
                this.timeLeft = 45;
            }
            else if (this.type >= 419 && this.type <= 422)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 73;
                this.friendly = true;
            }
            else if (this.type == 423)
            {
                this.netImportant = true;
                this.width = 28;
                this.height = 28;
                this.aiStyle = 62;
                this.penetrate = -1;
                this.timeLeft *= 5;
                this.minion = true;
                this.friendly = true;
                this.minionSlots = 1f;
                this.ignoreWater = true;
            }
            else if (this.type >= 424 && this.type <= 426)
            {
                this.width = 24;
                this.height = 24;
                this.aiStyle = 1;
                this.friendly = true;
                this.magic = true;
                this.tileCollide = false;
                this.extraUpdates = 2;
            }
            else if (this.type == 427)
            {
                this.width = 22;
                this.height = 56;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.glowMask = (short) 2;
            }
            else if (this.type == 428)
            {
                this.width = 26;
                this.height = 54;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.glowMask = (short) 3;
            }
            else if (this.type == 429)
            {
                this.width = 18;
                this.height = 56;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.glowMask = (short) 7;
            }
            else if (this.type == 430)
            {
                this.width = 30;
                this.height = 54;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.glowMask = (short) 8;
            }
            else if (this.type == 431)
            {
                this.width = 28;
                this.height = 64;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
            }
            else if (this.type == 432)
            {
                this.width = 30;
                this.height = 54;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
            }
            else if (this.type == 610)
            {
                this.width = 28;
                this.height = 64;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.glowMask = (short) 179;
            }
            else if (this.type == 609)
            {
                this.width = 30;
                this.height = 54;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.glowMask = (short) 180;
            }
            else if (this.type == 433)
            {
                this.width = 8;
                this.height = 8;
                this.aiStyle = 48;
                this.friendly = true;
                this.extraUpdates = 100;
                this.timeLeft = 100;
                this.ignoreWater = true;
            }
            else if (this.type == 434)
            {
                this.width = 1;
                this.height = 1;
                this.aiStyle = 74;
                this.friendly = true;
                this.extraUpdates = 100;
                this.penetrate = -1;
            }
            else if (this.type == 435)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.hostile = true;
                this.ignoreWater = true;
            }
            else if (this.type == 436)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.hostile = true;
                this.ignoreWater = true;
            }
            else if (this.type == 437)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.hostile = true;
                this.extraUpdates = 2;
                this.ignoreWater = true;
            }
            else if (this.type == 438)
            {
                this.width = 8;
                this.height = 8;
                this.aiStyle = 1;
                this.hostile = true;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 3;
                this.ignoreWater = true;
            }
            else if (this.type == 439)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 75;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.magic = true;
                this.ignoreWater = true;
            }
            else if (this.type == 440)
            {
                this.width = 5;
                this.height = 5;
                this.aiStyle = 1;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 2;
                this.scale = 1f;
                this.timeLeft = 600;
                this.magic = true;
                this.ignoreWater = true;
            }
            else if (this.type == 441)
            {
                this.width = 1;
                this.height = 1;
                this.aiStyle = 76;
                this.ignoreWater = true;
                this.tileCollide = false;
            }
            else if (this.type == 442)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 1;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.scale = 1f;
                this.timeLeft = 600;
                this.ranged = true;
            }
            else if (this.type == 443)
            {
                this.width = 80;
                this.height = 80;
                this.aiStyle = 77;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.scale = 1f;
                this.ranged = true;
                this.ignoreWater = true;
                this.tileCollide = false;
                this.penetrate = -1;
            }
            else if (this.type == 444)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 78;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.scale = 1f;
                this.ranged = true;
                this.ignoreWater = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 445)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 75;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.melee = true;
                this.ignoreWater = true;
                this.ownerHitCheck = true;
            }
            else if (this.type == 446)
            {
                this.netImportant = true;
                this.width = 14;
                this.height = 14;
                this.aiStyle = 7;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.timeLeft *= 10;
                this.light = 0.7f;
            }
            else if (this.type == 447)
            {
                this.width = 30;
                this.height = 30;
                this.aiStyle = 79;
                this.hostile = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.timeLeft = 240;
            }
            else if (this.type == 448)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 80;
                this.hostile = true;
                this.penetrate = -1;
                this.tileCollide = false;
            }
            else if (this.type == 449)
            {
                this.width = 5;
                this.height = 5;
                this.aiStyle = 1;
                this.hostile = true;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 1;
                this.scale = 1f;
                this.timeLeft = 600;
                this.ignoreWater = true;
            }
            else if (this.type == 450)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 14;
                this.hostile = true;
                this.penetrate = -1;
                this.timeLeft = 360;
            }
            else if (this.type == 451)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 81;
                this.melee = true;
                this.penetrate = 3;
                this.light = 0.2f;
                this.alpha = (int) byte.MaxValue;
                this.friendly = true;
            }
            else if (this.type == 452)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 82;
                this.hostile = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 600;
            }
            else if (this.type == 453)
            {
                this.width = 1;
                this.height = 1;
                this.aiStyle = 76;
                this.ignoreWater = true;
                this.tileCollide = false;
            }
            else if (this.type == 454)
            {
                this.width = 46;
                this.height = 46;
                this.aiStyle = 83;
                this.hostile = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 600;
                this.tileCollide = false;
            }
            else if (this.type == 455)
            {
                this.width = 36;
                this.height = 36;
                this.aiStyle = 84;
                this.hostile = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 600;
                this.tileCollide = false;
            }
            else if (this.type == 456)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 85;
                this.hostile = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 600;
                this.tileCollide = false;
            }
            else if (this.type == 459)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 1;
                this.friendly = true;
                this.magic = true;
                this.alpha = (int) byte.MaxValue;
                this.scale = 1f;
                this.ignoreWater = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 460)
            {
                this.width = 14;
                this.height = 18;
                this.aiStyle = 75;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.magic = true;
                this.ignoreWater = true;
            }
            else if (this.type == 461)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 84;
                this.friendly = true;
                this.magic = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.tileCollide = false;
                this.hide = true;
            }
            else if (this.type == 462)
            {
                this.width = 8;
                this.height = 8;
                this.aiStyle = 1;
                this.hostile = true;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 3;
                this.ignoreWater = true;
                this.tileCollide = false;
            }
            else if (this.type == 463)
            {
                this.width = 48;
                this.height = 48;
                this.aiStyle = 6;
                this.friendly = true;
                this.tileCollide = false;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
            }
            else if (this.type == 464)
            {
                this.width = 60;
                this.height = 60;
                this.aiStyle = 86;
                this.hostile = true;
                this.tileCollide = false;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
            }
            else if (this.type == 467)
            {
                this.width = 40;
                this.height = 40;
                this.aiStyle = 1;
                this.hostile = true;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 468)
            {
                this.width = 40;
                this.height = 40;
                this.aiStyle = 1;
                this.hostile = true;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 465)
            {
                this.width = 80;
                this.height = 80;
                this.aiStyle = 88;
                this.hostile = true;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
                this.tileCollide = false;
            }
            else if (this.type == 466)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 88;
                this.hostile = true;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
                this.tileCollide = true;
                this.extraUpdates = 4;
                this.timeLeft = 120 * (this.extraUpdates + 1);
            }
            else if (this.type == 491)
            {
                this.width = 26;
                this.height = 26;
                this.aiStyle = 9;
                this.friendly = true;
                this.melee = true;
                this.penetrate = -1;
            }
            else if (this.type == 500)
            {
                this.width = 20;
                this.height = 20;
                this.aiStyle = 67;
                this.penetrate = -1;
                this.netImportant = true;
                this.timeLeft *= 5;
                this.friendly = true;
                this.ignoreWater = true;
                this.scale = 0.8f;
            }
            else if (this.type == 499)
            {
                this.netImportant = true;
                this.width = 34;
                this.height = 34;
                this.aiStyle = 26;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 469)
            {
                this.alpha = (int) byte.MaxValue;
                this.arrow = true;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.ranged = true;
            }
            else if (this.type == 470)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
            }
            else if (this.type == 471)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 2;
                this.scale = 1.2f;
                this.hostile = true;
                this.ranged = true;
            }
            else if (this.type == 472)
            {
                this.width = 8;
                this.height = 8;
                this.aiStyle = 0;
                this.hostile = true;
                this.penetrate = -1;
                this.aiStyle = 1;
                this.tileCollide = true;
                this.timeLeft = 50;
            }
            else if (this.type == 474)
            {
                this.arrow = true;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.ranged = true;
            }
            else if (this.type == 473)
            {
                this.netImportant = true;
                this.width = 8;
                this.height = 8;
                this.aiStyle = 14;
                this.penetrate = -1;
                this.alpha = 75;
                this.light = 1f;
                this.timeLeft *= 2;
            }
            else if (this.type == 475)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 35;
                this.penetrate = -1;
                this.tileCollide = false;
                this.timeLeft = 400;
            }
            else if (this.type == 476)
            {
                this.width = 200;
                this.height = 200;
                this.aiStyle = -1;
                this.friendly = true;
                this.tileCollide = false;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
                this.timeLeft = 3;
            }
            else if (this.type == 477)
            {
                this.alpha = (int) byte.MaxValue;
                this.width = 14;
                this.height = 14;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 7;
                this.extraUpdates = 1;
                this.ranged = true;
            }
            else if (this.type == 478)
            {
                this.alpha = (int) byte.MaxValue;
                this.width = 14;
                this.height = 14;
                this.aiStyle = 1;
                this.friendly = true;
                this.timeLeft = 300;
                this.ranged = true;
            }
            else if (this.type == 479)
            {
                this.alpha = (int) byte.MaxValue;
                this.width = 14;
                this.height = 14;
                this.aiStyle = 1;
                this.friendly = true;
                this.ranged = true;
            }
            else if (this.type == 480)
            {
                this.alpha = (int) byte.MaxValue;
                this.width = 12;
                this.height = 12;
                this.penetrate = 3;
                this.aiStyle = 14;
                this.friendly = true;
                this.timeLeft = 120;
                this.ranged = true;
                this.noEnchantments = true;
            }
            else if (this.type == 481)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 13;
                this.friendly = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.melee = true;
                this.extraUpdates = 0;
            }
            else if (this.type == 482)
            {
                this.width = 16;
                this.height = 200;
                this.aiStyle = 87;
                this.friendly = true;
                this.tileCollide = false;
                this.penetrate = 20;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
                this.timeLeft = 2700;
            }
            else if (this.type == 483)
            {
                this.arrow = true;
                this.width = 14;
                this.height = 14;
                this.aiStyle = 14;
                this.friendly = true;
                this.melee = true;
            }
            else if (this.type == 484)
            {
                this.arrow = true;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.melee = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 485)
            {
                this.arrow = true;
                this.width = 24;
                this.height = 24;
                this.aiStyle = 1;
                this.friendly = true;
                this.ranged = true;
                this.penetrate = -1;
            }
            else if (this.type >= 486 && this.type <= 489)
            {
                if (this.type == 486)
                {
                    this.width = 12;
                    this.height = 12;
                }
                else if (this.type == 487)
                {
                    this.width = 22;
                    this.height = 22;
                }
                else if (this.type == 488)
                {
                    this.width = 12;
                    this.height = 12;
                    this.light = 0.3f;
                }
                else if (this.type == 489)
                {
                    this.width = 20;
                    this.height = 16;
                }

                this.aiStyle = 7;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.timeLeft *= 10;
            }
            else if (this.type == 492)
            {
                this.netImportant = true;
                this.width = 18;
                this.height = 32;
                this.aiStyle = 90;
                this.friendly = true;
                this.penetrate = -1;
                this.timeLeft *= 5;
            }
            else if (this.type == 490)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 89;
                this.hostile = true;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
                this.tileCollide = false;
                this.timeLeft = 600;
                this.netImportant = true;
            }
            else if (this.type == 493 || this.type == 494)
            {
                this.width = 32;
                this.height = 32;
                this.aiStyle = 4;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
                this.magic = true;
                this.light = 0.2f;
            }
            else if (this.type == 495)
            {
                this.arrow = true;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.ranged = true;
                this.penetrate = 3;
            }
            else if (this.type == 496)
            {
                this.alpha = (int) byte.MaxValue;
                this.width = 40;
                this.height = 40;
                this.aiStyle = 91;
                this.friendly = true;
                this.magic = true;
                this.MaxUpdates = 3;
                this.penetrate = 3;
            }
            else if (this.type == 497)
            {
                this.width = 30;
                this.height = 30;
                this.aiStyle = 2;
                this.friendly = true;
                this.penetrate = 3;
                this.melee = true;
            }
            else if (this.type == 498)
            {
                this.width = 6;
                this.height = 6;
                this.aiStyle = 1;
                this.hostile = true;
                this.penetrate = -1;
                this.timeLeft = 180;
            }
            else if (this.type == 501)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 2;
                this.scale = 1.1f;
                this.hostile = true;
                this.ranged = true;
            }
            else if (this.type == 502)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 8;
                this.friendly = true;
                this.melee = true;
                this.penetrate = 5;
            }
            else if (this.type == 503)
            {
                this.width = 24;
                this.height = 24;
                this.aiStyle = 5;
                this.friendly = true;
                this.penetrate = 2;
                this.alpha = (int) byte.MaxValue;
                this.tileCollide = false;
                this.melee = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 504)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 2;
                this.friendly = true;
                this.magic = true;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = 2;
            }
            else if (this.type == 507)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 1;
                this.friendly = true;
                this.melee = true;
                this.penetrate = 3;
            }
            else if (this.type == 508)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 1;
                this.hostile = true;
                this.penetrate = -1;
            }
            else if (this.type == 509)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 20;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ownerHitCheck = true;
                this.melee = true;
                this.scale = 1.2f;
            }
            else if (this.type == 510)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 2;
                this.friendly = true;
                this.penetrate = 1;
                this.magic = true;
            }
            else if (this.type == 511)
            {
                this.width = 32;
                this.height = 32;
                this.aiStyle = 92;
                this.friendly = true;
                this.penetrate = -1;
                this.scale = 1.1f;
                this.magic = true;
            }
            else if (this.type == 512)
            {
                this.width = 40;
                this.height = 38;
                this.aiStyle = 92;
                this.friendly = true;
                this.penetrate = -1;
                this.scale = 1.1f;
                this.magic = true;
            }
            else if (this.type == 513)
            {
                this.width = 30;
                this.height = 28;
                this.aiStyle = 92;
                this.friendly = true;
                this.penetrate = -1;
                this.scale = 1.1f;
                this.magic = true;
            }
            else if (this.type == 514)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 93;
                this.friendly = true;
                this.penetrate = 3;
                this.alpha = (int) byte.MaxValue;
                this.ranged = true;
            }
            else if (this.type == 515)
            {
                this.netImportant = true;
                this.width = 6;
                this.height = 6;
                this.aiStyle = 14;
                this.penetrate = -1;
                this.alpha = 75;
                this.light = 1f;
                this.timeLeft *= 5;
            }
            else if (this.type == 516)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
            }
            else if (this.type == 517)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
                this.thrown = true;
            }
            else if (this.type == 518)
            {
                this.width = 32;
                this.height = 32;
                this.aiStyle = 94;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.tileCollide = false;
                this.ignoreWater = true;
            }
            else if (this.type == 519)
            {
                this.width = 24;
                this.height = 24;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
            }
            else if (this.type == 520)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 2;
                this.friendly = true;
                this.penetrate = 3;
                this.thrown = true;
            }
            else if (this.type == 521)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 29;
                this.alpha = (int) byte.MaxValue;
                this.magic = true;
                this.penetrate = 1;
                this.friendly = true;
            }
            else if (this.type == 522)
            {
                this.width = 8;
                this.height = 8;
                this.aiStyle = 29;
                this.alpha = (int) byte.MaxValue;
                this.magic = true;
                this.penetrate = 1;
                this.friendly = true;
            }
            else if (this.type == 523)
            {
                this.width = 32;
                this.height = 32;
                this.aiStyle = 95;
                this.alpha = (int) byte.MaxValue;
                this.ranged = true;
                this.penetrate = 1;
                this.friendly = true;
            }
            else if (this.type == 524)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 96;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.ignoreWater = true;
                this.melee = true;
                this.extraUpdates = 5;
            }
            else if (this.type == 525)
            {
                this.width = 30;
                this.height = 24;
                this.aiStyle = 97;
                this.tileCollide = false;
                this.timeLeft = 10800;
            }
            else if (this.type == 526)
            {
                this.width = 8;
                this.height = 8;
                this.aiStyle = 98;
                this.tileCollide = false;
                this.timeLeft = 120;
                this.alpha = (int) byte.MaxValue;
            }
            else if (this.type >= 527 && this.type <= 531)
            {
                this.knockBack = 12f;
                this.width = 24;
                this.height = 24;
                this.aiStyle = 17;
                this.penetrate = -1;
            }
            else if (this.type == 532)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 1;
                this.scale = 1f;
                this.friendly = true;
                this.thrown = true;
                this.penetrate = 3;
                this.extraUpdates = 1;
            }
            else if (this.type == 533)
            {
                this.netImportant = true;
                this.width = 20;
                this.height = 20;
                this.aiStyle = 66;
                this.penetrate = -1;
                this.timeLeft *= 5;
                this.minion = true;
                this.minionSlots = 1f;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.friendly = true;
            }
            else if (this.type == 534)
            {
                this.extraUpdates = 0;
                this.width = 16;
                this.height = 16;
                this.aiStyle = 99;
                this.friendly = true;
                this.penetrate = -1;
                this.melee = true;
                this.scale = 1f;
            }
            else if (this.type >= 541 && this.type <= 555)
            {
                this.extraUpdates = 0;
                this.width = 16;
                this.height = 16;
                this.aiStyle = 99;
                this.friendly = true;
                this.penetrate = -1;
                this.melee = true;
                this.scale = 1f;
                if (this.type == 547)
                    this.scale = 1.1f;
                if (this.type == 554)
                    this.scale = 1.2f;
                if (this.type == 555)
                    this.scale = 1.15f;
                if (this.type == 551 || this.type == 550)
                    this.scale = 1.1f;
            }
            else if (this.type >= 562 && this.type <= 564)
            {
                this.extraUpdates = 0;
                this.width = 16;
                this.height = 16;
                this.aiStyle = 99;
                this.friendly = true;
                this.penetrate = -1;
                this.melee = true;
                this.scale = 1f;
                if (this.type == 563)
                    this.scale = 1.05f;
                if (this.type == 564)
                    this.scale = 1.075f;
            }
            else if (this.type == 603)
            {
                this.extraUpdates = 0;
                this.width = 16;
                this.height = 16;
                this.aiStyle = 99;
                this.friendly = true;
                this.penetrate = -1;
                this.melee = true;
                this.scale = 1.15f;
            }
            else if (this.type == 604)
            {
                this.extraUpdates = 0;
                this.width = 14;
                this.height = 14;
                this.aiStyle = 115;
                this.friendly = true;
                this.penetrate = -1;
                this.melee = true;
                this.scale = 1.2f;
            }
            else if (this.type >= 556 && this.type <= 561)
            {
                this.extraUpdates = 0;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 99;
                this.friendly = true;
                this.penetrate = -1;
                this.melee = true;
                this.scale = 1f;
                this.counterweight = true;
            }
            else if (this.type == 535)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 100;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.magic = true;
                this.ignoreWater = true;
            }
            else if (this.type == 536)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 101;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.magic = true;
                this.ignoreWater = true;
            }
            else if (this.type == 537)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 84;
                this.hostile = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 240;
                this.tileCollide = false;
            }
            else if (this.type == 538)
            {
                this.width = 12;
                this.height = 12;
                this.aiStyle = 14;
                this.hostile = true;
                this.penetrate = -1;
                this.timeLeft = 120;
                this.extraUpdates = 1;
                this.alpha = (int) byte.MaxValue;
            }
            else if (this.type == 539)
            {
                this.width = 18;
                this.height = 30;
                this.aiStyle = 102;
                this.hostile = true;
                this.penetrate = -1;
                this.timeLeft = 600;
            }
            else if (this.type == 540)
            {
                this.width = 20;
                this.height = 20;
                this.aiStyle = 103;
                this.hostile = true;
                this.penetrate = -1;
                this.timeLeft = 300;
                this.alpha = (int) byte.MaxValue;
            }
            else if (this.type == 565)
            {
                this.width = 28;
                this.height = 28;
                this.aiStyle = 104;
                this.penetrate = -1;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.alpha = (int) byte.MaxValue;
                this.scale = 0.8f;
            }
            else if (this.type == 566)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 36;
                this.friendly = true;
                this.penetrate = 4;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 660;
                this.extraUpdates = 3;
            }
            else if (this.type == 567 || this.type == 568)
            {
                if (this.type == 567)
                {
                    this.width = 14;
                    this.height = 14;
                }
                else
                {
                    this.width = 16;
                    this.height = 16;
                }

                this.aiStyle = 105;
                this.friendly = true;
                this.penetrate = 1;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 3600;
                this.tileCollide = false;
                this.ignoreWater = true;
            }
            else if (this.type >= 569 && this.type <= 571)
            {
                this.width = 32;
                this.height = 32;
                this.aiStyle = 106;
                this.friendly = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 3600;
                this.tileCollide = false;
                this.ignoreWater = true;
            }
            else if (this.type == 575)
            {
                this.width = 24;
                this.height = 24;
                this.aiStyle = 107;
                this.hostile = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.timeLeft = 420;
                this.alpha = (int) byte.MaxValue;
            }
            else if (this.type == 573)
            {
                this.width = 18;
                this.height = 30;
                this.aiStyle = 102;
                this.hostile = true;
                this.penetrate = -1;
                this.timeLeft = 600;
            }
            else if (this.type == 574)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 102;
                this.hostile = true;
                this.timeLeft = 600;
                this.tileCollide = false;
            }
            else if (this.type == 572)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.friendly = false;
                this.hostile = true;
            }
            else if (this.type == 576)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.hostile = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 2;
                this.scale = 1.2f;
                this.timeLeft = 600;
            }
            else if (this.type == 577)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.hostile = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 2;
                this.scale = 1.2f;
                this.timeLeft = 600;
            }
            else if (this.type == 578 || this.type == 579)
            {
                this.width = 32;
                this.height = 32;
                this.aiStyle = 108;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.hostile = true;
                this.hide = true;
            }
            else if (this.type == 580)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 88;
                this.hostile = true;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
                this.tileCollide = true;
                this.extraUpdates = 4;
                this.timeLeft = 600;
            }
            else if (this.type == 581)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.friendly = false;
                this.hostile = true;
            }
            else if (this.type == 582)
            {
                this.width = 20;
                this.height = 20;
                this.aiStyle = 109;
                this.friendly = true;
                this.penetrate = -1;
                this.MaxUpdates = 2;
            }
            else if (this.type == 583)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 2;
                this.friendly = true;
                this.scale = 0.8f;
            }
            else if (this.type == 589)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 2;
                this.friendly = true;
            }
            else if (this.type == 584)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 110;
                this.friendly = true;
                this.scale = 0.8f;
                this.penetrate = 3;
            }
            else if (this.type == 585)
            {
                this.width = 26;
                this.height = 26;
                this.aiStyle = 1;
                this.alpha = (int) byte.MaxValue;
                this.friendly = true;
                this.penetrate = 3;
            }
            else if (this.type == 586)
            {
                this.width = 26;
                this.height = 26;
                this.aiStyle = 111;
                this.alpha = (int) byte.MaxValue;
                this.friendly = true;
                this.penetrate = -1;
            }
            else if (this.type == 587)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.alpha = (int) byte.MaxValue;
                this.friendly = true;
                this.ranged = true;
            }
            else if (this.type == 588)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
                this.thrown = true;
            }
            else if (this.type == 590)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 112;
                this.friendly = true;
                this.penetrate = 1;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 900;
                this.tileCollide = false;
                this.ignoreWater = true;
            }
            else if (this.type == 591)
            {
                this.width = 8;
                this.height = 8;
                this.aiStyle = 101;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ignoreWater = true;
            }
            else if (this.type == 592)
            {
                this.width = 8;
                this.height = 8;
                this.aiStyle = 1;
                this.hostile = true;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 3;
                this.ignoreWater = true;
            }
            else if (this.type == 593)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 1;
                this.hostile = true;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 1;
                this.ignoreWater = true;
            }
            else if (this.type == 594)
            {
                this.width = 40;
                this.height = 40;
                this.aiStyle = 1;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 2;
            }
            else if (this.type == 595)
            {
                this.width = 68;
                this.height = 64;
                this.aiStyle = 75;
                this.friendly = true;
                this.tileCollide = false;
                this.melee = true;
                this.penetrate = -1;
                this.ownerHitCheck = true;
            }
            else if (this.type == 596)
            {
                this.width = 8;
                this.height = 8;
                this.aiStyle = 107;
                this.hostile = true;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
                this.timeLeft = 180;
                this.tileCollide = false;
            }
            else if (this.type == 597)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 29;
                this.alpha = (int) byte.MaxValue;
                this.magic = true;
                this.penetrate = 2;
                this.friendly = true;
            }
            else if (this.type == 598)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 113;
                this.friendly = true;
                this.melee = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.hide = true;
            }
            else if (this.type == 599)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 2;
                this.friendly = true;
                this.penetrate = 6;
                this.thrown = true;
            }
            else if (this.type == 600)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 75;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ignoreWater = true;
            }
            else if (this.type == 601)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.alpha = (int) byte.MaxValue;
                this.friendly = true;
                this.extraUpdates = 30;
            }
            else if (this.type == 602)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 114;
                this.alpha = (int) byte.MaxValue;
                this.friendly = true;
                this.tileCollide = false;
                this.netImportant = true;
            }
            else if (this.type == 605)
            {
                this.alpha = (int) byte.MaxValue;
                this.width = 6;
                this.height = 6;
                this.aiStyle = 1;
                this.hostile = true;
                this.penetrate = -1;
            }
            else if (this.type == 606)
            {
                this.width = 5;
                this.height = 5;
                this.aiStyle = 1;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 2;
                this.scale = 1f;
                this.timeLeft = 600;
                this.ignoreWater = true;
            }
            else if (this.type == 607)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 116;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 600;
                this.ignoreWater = true;
                this.tileCollide = false;
                this.penetrate = -1;
            }
            else if (this.type == 608)
            {
                this.width = 160;
                this.height = 160;
                this.aiStyle = 117;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 3;
                this.ignoreWater = true;
                this.tileCollide = false;
                this.penetrate = -1;
                this.hide = true;
            }
            else if (this.type == 611)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 75;
                this.friendly = true;
                this.melee = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.hide = true;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.usesLocalNPCImmunity = true;
            }
            else if (this.type == 612)
            {
                this.width = 8;
                this.height = 8;
                this.aiStyle = 117;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
                this.timeLeft = 60;
                this.tileCollide = false;
                this.penetrate = -1;
                this.usesLocalNPCImmunity = true;
            }
            else if (this.type == 613)
            {
                this.netImportant = true;
                this.width = 24;
                this.height = 24;
                this.aiStyle = 62;
                this.penetrate = -1;
                this.timeLeft *= 5;
                this.minion = true;
                this.friendly = true;
                this.minionSlots = 1f;
                this.ignoreWater = true;
            }
            else if (this.type == 614)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 113;
                this.friendly = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
            }
            else if (this.type == 615)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 75;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ranged = true;
                this.ignoreWater = true;
            }
            else if (this.type == 616)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 1;
                this.alpha = (int) byte.MaxValue;
                this.ranged = true;
                this.extraUpdates = 2;
                this.timeLeft = 90 * this.MaxUpdates;
            }
            else if (this.type == 617)
            {
                this.width = 32;
                this.height = 32;
                this.aiStyle = 118;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
                this.hide = true;
                this.magic = true;
                this.penetrate = 3;
                this.usesLocalNPCImmunity = true;
            }
            else if (this.type == 618)
            {
                this.tileCollide = false;
                this.width = 18;
                this.height = 30;
                this.aiStyle = 119;
                this.penetrate = -1;
                this.timeLeft = 420;
                this.magic = true;
                this.friendly = true;
                this.usesLocalNPCImmunity = true;
            }
            else if (this.type == 619)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 29;
                this.alpha = (int) byte.MaxValue;
                this.magic = true;
                this.penetrate = 1;
                this.friendly = true;
            }
            else if (this.type == 620)
            {
                this.width = 8;
                this.height = 8;
                this.aiStyle = 29;
                this.alpha = (int) byte.MaxValue;
                this.magic = true;
                this.penetrate = 1;
                this.friendly = true;
            }
            else if (this.type == 622)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 2;
            }
            else if (this.type == 623)
            {
                this.netImportant = true;
                this.width = 50;
                this.height = 80;
                this.aiStyle = 120;
                this.penetrate = -1;
                this.timeLeft *= 5;
                this.minion = true;
                this.friendly = true;
                this.minionSlots = 0.0f;
                this.ignoreWater = true;
                this.tileCollide = false;
                this.netImportant = true;
            }
            else if (this.type == 624)
            {
                this.width = 8;
                this.height = 8;
                this.aiStyle = 117;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
                this.timeLeft = 60;
                this.tileCollide = false;
                this.penetrate = -1;
            }
            else if (this.type >= 625 && this.type <= 628)
            {
                if (this.type == 625 || this.type == 628)
                    this.netImportant = true;
                if (this.type == 626 || this.type == 627)
                    this.minionSlots = 0.5f;
                this.width = 24;
                this.height = 24;
                this.aiStyle = 121;
                this.penetrate = -1;
                this.timeLeft *= 5;
                this.minion = true;
                this.friendly = true;
                this.ignoreWater = true;
                this.tileCollide = false;
                this.alpha = (int) byte.MaxValue;
                this.hide = true;
                this.netImportant = true;
            }
            else if (this.type == 629)
            {
                this.width = 8;
                this.height = 8;
                this.aiStyle = 122;
                this.hostile = true;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
                this.timeLeft = 3600;
                this.tileCollide = false;
                this.penetrate = -1;
                this.extraUpdates = 2;
            }
            else if (this.type == 630 || this.type == 705)
            {
                this.width = 22;
                this.height = 22;
                this.aiStyle = 75;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.hide = true;
                this.ranged = true;
                this.ignoreWater = true;
            }
            else if (this.type == 631)
            {
                this.arrow = true;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 122;
                this.friendly = true;
                this.ranged = true;
                this.tileCollide = false;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 633)
            {
                this.width = 14;
                this.height = 18;
                this.aiStyle = 75;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.magic = true;
                this.ignoreWater = true;
            }
            else if (this.type == 632)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 84;
                this.friendly = true;
                this.magic = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.tileCollide = false;
            }
            else if (this.type == 634)
            {
                this.width = 40;
                this.height = 40;
                this.aiStyle = 1;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
                this.extraUpdates = 2;
                this.magic = true;
            }
            else if (this.type == 635)
            {
                this.width = 40;
                this.height = 40;
                this.aiStyle = 1;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.friendly = true;
                this.extraUpdates = 3;
                this.magic = true;
            }
            else if (this.type == 636)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 113;
                this.friendly = true;
                this.melee = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.hide = true;
                this.MaxUpdates = 2;
            }
            else if (this.type == 637)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 16;
                this.friendly = true;
                this.penetrate = -1;
            }
            else if (this.type == 638)
            {
                this.width = 4;
                this.height = 4;
                this.aiStyle = 1;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.extraUpdates = 5;
                this.timeLeft = 600;
                this.ranged = true;
                this.ignoreWater = true;
                this.usesLocalNPCImmunity = true;
                this.penetrate = -1;
            }
            else if (this.type == 639)
            {
                this.arrow = true;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.ranged = true;
                this.MaxUpdates = 2;
                this.timeLeft = this.MaxUpdates * 45;
                this.ignoreWater = true;
                this.usesLocalNPCImmunity = true;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = 4;
            }
            else if (this.type == 640)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.ranged = true;
                this.MaxUpdates = 3;
                this.timeLeft = 90;
                this.ignoreWater = true;
                this.usesLocalNPCImmunity = true;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = 4;
            }
            else if (this.type == 642)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 84;
                this.friendly = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.tileCollide = false;
                this.usesLocalNPCImmunity = true;
            }
            else if (this.type == 641)
            {
                this.width = 32;
                this.height = 32;
                this.aiStyle = 123;
                this.timeLeft = Projectile.SentryLifeTime;
                this.ignoreWater = true;
                this.tileCollide = false;
                this.alpha = (int) byte.MaxValue;
                this.hide = true;
                this.sentry = true;
            }
            else if (this.type == 643)
            {
                this.width = 32;
                this.height = 32;
                this.aiStyle = 123;
                this.timeLeft = Projectile.SentryLifeTime;
                this.ignoreWater = true;
                this.tileCollide = false;
                this.alpha = (int) byte.MaxValue;
                this.sentry = true;
            }
            else if (this.type == 644)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 112;
                this.penetrate = 1;
                this.timeLeft = 900;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.alpha = (int) byte.MaxValue;
            }
            else if (this.type == 645)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.magic = true;
                this.tileCollide = false;
                this.extraUpdates = 5;
                this.penetrate = -1;
                this.usesLocalNPCImmunity = true;
            }
            else if (this.type >= 646 && this.type <= 649)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 7;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.timeLeft *= 10;
            }
            else if (this.type == 650)
            {
                this.width = 20;
                this.height = 20;
                this.aiStyle = 124;
                this.penetrate = -1;
                this.netImportant = true;
                this.timeLeft *= 5;
                this.friendly = true;
                this.ignoreWater = true;
                this.tileCollide = false;
                this.manualDirectionChange = true;
            }
            else if (this.type == 651)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 125;
                this.friendly = true;
                this.ignoreWater = true;
                this.tileCollide = false;
                this.penetrate = -1;
            }
            else if (this.type == 652)
            {
                this.width = 18;
                this.height = 18;
                this.aiStyle = 7;
                this.friendly = true;
                this.penetrate = -1;
                this.tileCollide = false;
                this.timeLeft *= 10;
            }
            else if (this.type == 653)
            {
                this.width = 30;
                this.height = 30;
                this.aiStyle = 67;
                this.penetrate = -1;
                this.netImportant = true;
                this.timeLeft *= 5;
                this.friendly = true;
                this.ignoreWater = true;
                this.scale = 0.8f;
            }
            else if (this.type == 654)
            {
                this.width = 30;
                this.height = 30;
                this.aiStyle = 126;
                this.alpha = (int) byte.MaxValue;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.timeLeft = 120;
                this.friendly = true;
                this.hostile = true;
                this.penetrate = -1;
                this.trap = true;
            }
            else if (this.type == 655)
            {
                this.width = 31;
                this.height = 31;
                this.aiStyle = 25;
                this.friendly = true;
                this.hostile = true;
                this.penetrate = -1;
                this.trap = true;
            }
            else if (this.type == 656)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = (int) sbyte.MaxValue;
                this.friendly = true;
                this.magic = true;
                this.tileCollide = false;
                this.penetrate = -1;
                this.usesLocalNPCImmunity = true;
                this.timeLeft = 1200;
            }
            else if (this.type == 657)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = (int) sbyte.MaxValue;
                this.hostile = true;
                this.tileCollide = false;
                this.penetrate = -1;
                this.timeLeft = 1200;
            }
            else if (this.type == 658)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 128;
                this.penetrate = 1;
                this.timeLeft = 900;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.alpha = (int) byte.MaxValue;
                this.hostile = true;
            }
            else if (this.type == 659)
            {
                this.width = 8;
                this.height = 8;
                this.aiStyle = 129;
                this.friendly = true;
                this.magic = true;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
                this.timeLeft = 180;
                this.tileCollide = false;
                this.penetrate = -1;
            }
            else if (this.type == 660)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 600;
                this.magic = true;
                this.ignoreWater = true;
            }
            else if (this.type == 661)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 40;
                this.extraUpdates = 1;
                this.ranged = true;
                this.ignoreWater = true;
                this.usesLocalNPCImmunity = true;
            }
            else if (this.type == 662 || this.type == 685)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 1;
                this.hostile = true;
                this.penetrate = -1;
            }
            else if (this.type == 663 || this.type == 665 || this.type == 667)
            {
                this.width = 30;
                this.height = 54;
                this.aiStyle = 130;
                this.timeLeft = Projectile.SentryLifeTime;
                this.ignoreWater = true;
                this.tileCollide = false;
                this.manualDirectionChange = true;
                switch (this.type)
                {
                    case 665:
                        this.height = 58;
                        this.width = 28;
                        break;
                    case 667:
                        this.height = 60;
                        this.width = 28;
                        break;
                }

                this.sentry = true;
            }
            else if (this.type == 664 || this.type == 666 || this.type == 668)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 131;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.usesLocalNPCImmunity = true;
                this.localNPCHitCooldown = -1;
            }
            else if (this.type == 669)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 68;
                this.friendly = true;
                this.penetrate = 1;
                this.alpha = (int) byte.MaxValue;
                this.thrown = true;
                this.noEnchantments = true;
            }
            else if (this.type == 670)
            {
                this.width = 30;
                this.height = 30;
                this.aiStyle = 126;
                this.alpha = (int) byte.MaxValue;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.timeLeft = 120;
                this.hostile = true;
                this.penetrate = -1;
            }
            else if (this.type == 671)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.friendly = false;
                this.hostile = true;
            }
            else if (this.type == 672)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 132;
                this.alpha = (int) byte.MaxValue;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.timeLeft = 900;
                this.hostile = true;
                this.penetrate = -1;
            }
            else if (this.type == 674 || this.type == 673)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 133;
                this.alpha = (int) byte.MaxValue;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.timeLeft = 900;
                this.hostile = true;
                this.penetrate = -1;
                this.hide = true;
            }
            else if (this.type == 675)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.friendly = false;
                this.hostile = true;
            }
            else if (this.type == 676)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.friendly = false;
                this.hostile = true;
            }
            else if (this.type == 677 || this.type == 678 || this.type == 679)
            {
                this.width = 26;
                this.height = 54;
                this.aiStyle = 134;
                this.timeLeft = Projectile.SentryLifeTime;
                this.ignoreWater = true;
                this.tileCollide = false;
                this.manualDirectionChange = true;
                this.sentry = true;
            }
            else if (this.type == 680)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 1;
                this.friendly = true;
                this.penetrate = 4;
                this.usesLocalNPCImmunity = true;
                this.localNPCHitCooldown = -1;
            }
            else if (this.type == 681)
            {
                this.width = 14;
                this.height = 14;
                this.aiStyle = 16;
                this.hostile = true;
                this.penetrate = -1;
                this.thrown = true;
            }
            else if (this.type == 682)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.hostile = true;
                this.ignoreWater = true;
                this.timeLeft = 30;
                this.scale = 1.2f;
            }
            else if (this.type == 683)
            {
                this.width = 30;
                this.height = 30;
                this.aiStyle = 135;
                this.alpha = (int) byte.MaxValue;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.timeLeft = 120;
                this.hostile = true;
                this.penetrate = -1;
            }
            else if (this.type == 684)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 1;
                this.melee = true;
                this.penetrate = 5;
                this.alpha = (int) byte.MaxValue;
                this.friendly = true;
                this.tileCollide = false;
            }
            else if (this.type == 686)
            {
                this.width = 30;
                this.height = 30;
                this.aiStyle = 1;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.friendly = false;
                this.hostile = true;
            }
            else if (this.type == 687)
            {
                this.width = 30;
                this.height = 30;
                this.aiStyle = 136;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.friendly = false;
                this.hostile = true;
            }
            else if (this.type == 688 || this.type == 689 || this.type == 690)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 137;
                this.friendly = true;
                this.usesLocalNPCImmunity = true;
                this.timeLeft = Projectile.SentryLifeTime;
                this.localNPCHitCooldown = 3;
                this.tileCollide = false;
                this.penetrate = -1;
                this.sentry = true;
            }
            else if (this.type == 691 || this.type == 692 || this.type == 693)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 138;
                this.friendly = true;
                this.timeLeft = Projectile.SentryLifeTime;
                this.tileCollide = false;
                this.penetrate = -1;
                this.hide = true;
                this.sentry = true;
            }
            else if (this.type == 694 || this.type == 695 || this.type == 696)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 139;
                this.friendly = true;
                this.tileCollide = false;
                this.penetrate = -1;
                this.usesLocalNPCImmunity = true;
                this.localNPCHitCooldown = 30;
                this.alpha = (int) byte.MaxValue;
                this.width = 96;
                this.height = 96;
            }
            else if (this.type == 697)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 140;
                this.friendly = true;
                this.melee = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.hide = true;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.usesLocalNPCImmunity = true;
                this.localNPCHitCooldown = 12;
                this.ownerHitCheck = true;
            }
            else if (this.type == 698)
            {
                this.width = 50;
                this.height = 200;
                this.aiStyle = 141;
                this.alpha = (int) byte.MaxValue;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.timeLeft = 120;
                this.friendly = true;
                this.penetrate = -1;
                this.usesLocalNPCImmunity = true;
                this.localNPCHitCooldown = -1;
                this.melee = true;
            }
            else if (this.type == 699)
            {
                this.width = 24;
                this.height = 24;
                this.aiStyle = 142;
                this.friendly = true;
                this.melee = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.hide = true;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.usesIDStaticNPCImmunity = true;
                this.idStaticNPCHitCooldown = 36;
                this.ownerHitCheck = true;
            }
            else if (this.type == 700)
            {
                this.width = 40;
                this.height = 40;
                this.aiStyle = 143;
                this.alpha = (int) byte.MaxValue;
                this.penetrate = -1;
                this.friendly = true;
                this.melee = true;
                this.usesLocalNPCImmunity = true;
                this.localNPCHitCooldown = -1;
                this.ignoreWater = true;
                this.tileCollide = false;
            }
            else if (this.type == 703 || this.type == 701 || this.type == 702)
            {
                this.width = 20;
                this.height = 20;
                this.aiStyle = 144;
                this.penetrate = -1;
                this.netImportant = true;
                this.timeLeft *= 5;
                this.scale = 0.85f;
                this.friendly = true;
                this.ignoreWater = true;
                this.tileCollide = false;
                this.manualDirectionChange = true;
            }
            else if (this.type == 704)
            {
                this.width = 60;
                this.height = 210;
                this.aiStyle = 145;
                this.friendly = true;
                this.magic = true;
                this.tileCollide = false;
                this.penetrate = -1;
                this.usesLocalNPCImmunity = true;
                this.timeLeft = 600;
                this.localNPCHitCooldown = -1;
                this.ignoreWater = true;
            }
            else if (this.type == 706)
            {
                this.width = 66;
                this.height = 66;
                this.aiStyle = 1;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 300;
                this.ranged = true;
                this.usesLocalNPCImmunity = true;
                this.penetrate = -1;
                this.localNPCHitCooldown = 10;
            }
            else if (this.type == 707)
            {
                this.width = 16;
                this.height = 16;
                this.aiStyle = 140;
                this.friendly = true;
                this.melee = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.hide = true;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.usesLocalNPCImmunity = true;
                this.localNPCHitCooldown = 6;
                this.ownerHitCheck = true;
            }
            else if (this.type == 708)
            {
                this.width = 24;
                this.height = 24;
                this.aiStyle = 142;
                this.friendly = true;
                this.melee = true;
                this.penetrate = -1;
                this.alpha = (int) byte.MaxValue;
                this.hide = true;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.usesLocalNPCImmunity = true;
                this.localNPCHitCooldown = 6;
                this.ownerHitCheck = true;
            }
            else if (this.type == 709)
            {
                this.width = 12;
                this.height = 12;
                this.aiStyle = 1;
                this.friendly = true;
                this.melee = true;
                this.alpha = (int) byte.MaxValue;
                this.ignoreWater = true;
                this.extraUpdates = 1;
                this.noEnchantments = true;
                this.scale = 0.6f;
            }
            else if (this.type == 710)
            {
                this.arrow = true;
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.ranged = true;
                this.ignoreWater = true;
                this.extraUpdates = 1;
                this.timeLeft = this.extraUpdates * 60 * 5;
                this.usesLocalNPCImmunity = true;
                this.alpha = (int) byte.MaxValue;
                this.localNPCHitCooldown = -1;
            }
            else if (this.type == 711)
            {
                this.width = 30;
                this.height = 30;
                this.aiStyle = 1;
                this.alpha = (int) byte.MaxValue;
                this.friendly = true;
                this.magic = true;
                this.extraUpdates = 1;
                this.scale = 0.7f;
                this.usesLocalNPCImmunity = true;
                this.localNPCHitCooldown = -1;
            }
            else if (this.type == 712)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 1;
                this.friendly = true;
                this.alpha = (int) byte.MaxValue;
                this.timeLeft = 600;
                this.magic = true;
                this.extraUpdates = 1;
            }
            else if (this.type == 713)
            {
                this.width = 10;
                this.height = 10;
                this.aiStyle = 146;
                this.alpha = (int) byte.MaxValue;
                this.tileCollide = false;
                this.ignoreWater = true;
                this.timeLeft = 900;
                this.hostile = true;
                this.penetrate = -1;
            }
            else
                this.active = false;

            this.width = (int) ((double) this.width * (double) this.scale);
            this.height = (int) ((double) this.height * (double) this.scale);
            this.maxPenetrate = this.penetrate;
        }

        public static int GetNextSlot()
        {
            int num = 1000;
            for (int index = 0; index < 1000; ++index)
            {
                if (!Main.projectile[index].active)
                {
                    num = index;
                    break;
                }
            }

            return num;
        }

        public static int NewProjectile(Vector2 position, Vector2 velocity, int Type, int Damage, float KnockBack,
            int Owner = 255, float ai0 = 0.0f, float ai1 = 0.0f)
        {
            return Projectile.NewProjectile(position.X, position.Y, velocity.X, velocity.Y, Type, Damage, KnockBack,
                Owner, ai0, ai1);
        }

        public static int NewProjectile(float X, float Y, float SpeedX, float SpeedY, int Type, int Damage,
            float KnockBack, int Owner = 255, float ai0 = 0.0f, float ai1 = 0.0f)
        {
            int number = 1000;
            for (int index = 0; index < 1000; ++index)
            {
                if (!Main.projectile[index].active)
                {
                    number = index;
                    break;
                }
            }

            if (number == 1000)
                return number;
            Projectile projectile = Main.projectile[number];
            projectile.SetDefaults(Type);
            projectile.position.X = X - (float) projectile.width * 0.5f;
            projectile.position.Y = Y - (float) projectile.height * 0.5f;
            projectile.owner = Owner;
            projectile.velocity.X = SpeedX;
            projectile.velocity.Y = SpeedY;
            projectile.damage = Damage;
            projectile.knockBack = KnockBack;
            projectile.identity = number;
            projectile.gfxOffY = 0.0f;
            projectile.stepSpeed = 1f;
            projectile.wet = Collision.WetCollision(projectile.position, projectile.width, projectile.height);
            if (projectile.ignoreWater)
                projectile.wet = false;
            projectile.honeyWet = Collision.honey;
            Main.projectileIdentity[Owner, number] = number;
            if (projectile.aiStyle == 1)
            {
                while ((double) projectile.velocity.X >= 16.0 || (double) projectile.velocity.X <= -16.0 ||
                       ((double) projectile.velocity.Y >= 16.0 || (double) projectile.velocity.Y < -16.0))
                {
                    projectile.velocity.X *= 0.97f;
                    projectile.velocity.Y *= 0.97f;
                }
            }

            if (Owner == Main.myPlayer)
            {
                switch (Type)
                {
                    case 206:
                        projectile.ai[0] = (float) Main.rand.Next(-100, 101) * 0.0005f;
                        projectile.ai[1] = (float) Main.rand.Next(-100, 101) * 0.0005f;
                        break;
                    case 335:
                        projectile.ai[1] = (float) Main.rand.Next(4);
                        break;
                    case 358:
                        projectile.ai[1] = (float) Main.rand.Next(10, 31) * 0.1f;
                        break;
                    case 406:
                        projectile.ai[1] = (float) Main.rand.Next(10, 21) * 0.1f;
                        break;
                    default:
                        projectile.ai[0] = ai0;
                        projectile.ai[1] = ai1;
                        break;
                }
            }

            if (Type == 434)
            {
                projectile.ai[0] = projectile.position.X;
                projectile.ai[1] = projectile.position.Y;
            }

            if (Type > 0 && Type < 714)
            {
                if (ProjectileID.Sets.NeedsUUID[Type])
                    projectile.projUUID = projectile.identity;
                if (ProjectileID.Sets.StardustDragon[Type])
                {
                    int projUuid = Main.projectile[(int) projectile.ai[0]].projUUID;
                    if (projUuid >= 0)
                        projectile.ai[0] = (float) projUuid;
                }
            }

            if (Main.netMode != 0 && Owner == Main.myPlayer)
                NetMessage.SendData(27, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
            if (Owner == Main.myPlayer)
            {
                if (Type == 28)
                    projectile.timeLeft = 180;
                if (Type == 516)
                    projectile.timeLeft = 180;
                if (Type == 519)
                    projectile.timeLeft = 180;
                if (Type == 29)
                    projectile.timeLeft = 300;
                if (Type == 470)
                    projectile.timeLeft = 300;
                if (Type == 637)
                    projectile.timeLeft = 300;
                if (Type == 30)
                    projectile.timeLeft = 180;
                if (Type == 517)
                    projectile.timeLeft = 180;
                if (Type == 37)
                    projectile.timeLeft = 180;
                if (Type == 75)
                    projectile.timeLeft = 180;
                if (Type == 133)
                    projectile.timeLeft = 180;
                if (Type == 136)
                    projectile.timeLeft = 180;
                if (Type == 139)
                    projectile.timeLeft = 180;
                if (Type == 142)
                    projectile.timeLeft = 180;
                if (Type == 397)
                    projectile.timeLeft = 180;
                if (Type == 419)
                    projectile.timeLeft = 600;
                if (Type == 420)
                    projectile.timeLeft = 600;
                if (Type == 421)
                    projectile.timeLeft = 600;
                if (Type == 422)
                    projectile.timeLeft = 600;
                if (Type == 588)
                    projectile.timeLeft = 180;
                if (Type == 443)
                    projectile.timeLeft = 300;
                if (Type == 681)
                    projectile.timeLeft = 600;
                if (Type == 684)
                    projectile.timeLeft = 60;
                if (Type == 706)
                    projectile.timeLeft = 120;
                if (Type == 680 && Main.player[projectile.owner].setSquireT2)
                    projectile.penetrate = 7;
            }

            if (Type == 249)
                projectile.frame = Main.rand.Next(5);
            return number;
        }

        public void StatusNPC(int i)
        {
            if (this.melee && Main.player[this.owner].meleeEnchant > (byte) 0 && !this.noEnchantments)
            {
                int meleeEnchant = (int) Main.player[this.owner].meleeEnchant;
                if (meleeEnchant == 1)
                    Main.npc[i].AddBuff(70, 60 * Main.rand.Next(5, 10), false);
                if (meleeEnchant == 2)
                    Main.npc[i].AddBuff(39, 60 * Main.rand.Next(3, 7), false);
                if (meleeEnchant == 3)
                    Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 7), false);
                if (meleeEnchant == 5)
                    Main.npc[i].AddBuff(69, 60 * Main.rand.Next(10, 20), false);
                if (meleeEnchant == 6)
                    Main.npc[i].AddBuff(31, 60 * Main.rand.Next(1, 4), false);
                if (meleeEnchant == 8)
                    Main.npc[i].AddBuff(20, 60 * Main.rand.Next(5, 10), false);
                if (meleeEnchant == 4)
                    Main.npc[i].AddBuff(72, 120, false);
            }

            if (this.type == 195)
            {
                if (Main.rand.Next(3) == 0)
                    Main.npc[i].AddBuff(70, 60 * Main.rand.Next(10, 21), false);
                else
                    Main.npc[i].AddBuff(20, 60 * Main.rand.Next(10, 21), false);
            }

            if (this.type == 664 && Main.rand.Next(3) == 0)
                Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 6), false);
            if (this.type == 666 && Main.rand.Next(2) == 0)
                Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 9), false);
            if (this.type == 668 && Main.rand.Next(3) != 0)
                Main.npc[i].AddBuff(24, 60 * Main.rand.Next(6, 9), false);
            if (this.type == 567 || this.type == 568)
                Main.npc[i].AddBuff(20, 60 * Main.rand.Next(5, 11), false);
            if (this.type == 598)
                Main.npc[i].AddBuff(169, 900, false);
            if (this.type == 636)
                Main.npc[i].AddBuff(189, 300, false);
            if (this.type == 611)
                Main.npc[i].AddBuff(189, 300, false);
            if (this.type == 612)
                Main.npc[i].AddBuff(189, 300, false);
            if (this.type == 711)
                Main.npc[i].AddBuff(203, 600, false);
            if (this.type == 706)
                Main.npc[i].AddBuff(24, 480, false);
            if (this.type == 614)
                Main.npc[i].AddBuff(183, 900, false);
            if (this.type == 585)
                Main.npc[i].AddBuff(153, 60 * Main.rand.Next(5, 11), false);
            if (this.type == 583)
                Main.npc[i].AddBuff(20, 60 * Main.rand.Next(3, 6), false);
            if (this.type == 524)
                Main.npc[i].AddBuff(69, 60 * Main.rand.Next(3, 8), false);
            if (this.type == 504 && Main.rand.Next(3) == 0)
            {
                if (Main.rand.Next(3) == 0)
                    Main.npc[i].AddBuff(24, Main.rand.Next(60, 180), false);
                else
                    Main.npc[i].AddBuff(24, Main.rand.Next(30, 120), false);
            }

            if ((this.type == 694 || this.type == 695 || this.type == 696) &&
                (Main.player[this.owner].setHuntressT2 && Main.rand.Next(2) == 0))
                Main.npc[i].AddBuff(204, Main.rand.Next(8, 18) * 30, false);
            if (this.type == 545 && Main.rand.Next(3) == 0)
                Main.npc[i].AddBuff(24, Main.rand.Next(60, 240), false);
            if (this.type == 553)
                Main.npc[i].AddBuff(24, Main.rand.Next(180, 480), false);
            if (this.type == 552 && Main.rand.Next(3) != 0)
                Main.npc[i].AddBuff(44, Main.rand.Next(120, 320), false);
            if (this.type == 495)
                Main.npc[i].AddBuff(153, Main.rand.Next(120, 300), false);
            if (this.type == 497)
                Main.npc[i].AddBuff(153, Main.rand.Next(60, 180), false);
            if (this.type == 496)
                Main.npc[i].AddBuff(153, Main.rand.Next(240, 480), false);
            if (this.type == 476)
                Main.npc[i].AddBuff(151, 30, false);
            if (this.type == 523)
                Main.npc[i].AddBuff(20, 60 * Main.rand.Next(10, 30), false);
            if (this.type == 478 || this.type == 480)
                Main.npc[i].AddBuff(39, 60 * Main.rand.Next(3, 7), false);
            if (this.type == 479)
                Main.npc[i].AddBuff(69, 60 * Main.rand.Next(7, 15), false);
            if (this.type == 379)
                Main.npc[i].AddBuff(70, 60 * Main.rand.Next(4, 7), false);
            if (this.type >= 390 && this.type <= 392)
                Main.npc[i].AddBuff(70, 60 * Main.rand.Next(2, 5), false);
            if (this.type == 374)
                Main.npc[i].AddBuff(20, 60 * Main.rand.Next(4, 7), false);
            if (this.type == 376)
                Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 7), false);
            if (this.type >= 399 && this.type <= 402)
                Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 7), false);
            if (this.type == 295 || this.type == 296)
                Main.npc[i].AddBuff(24, 60 * Main.rand.Next(8, 16), false);
            if ((this.melee || this.ranged) && (Main.player[this.owner].frostBurn && !this.noEnchantments))
                Main.npc[i].AddBuff(44, 60 * Main.rand.Next(5, 15), false);
            if (this.melee && Main.player[this.owner].magmaStone && !this.noEnchantments)
            {
                if (Main.rand.Next(7) == 0)
                    Main.npc[i].AddBuff(24, 360, false);
                else if (Main.rand.Next(3) == 0)
                    Main.npc[i].AddBuff(24, 120, false);
                else
                    Main.npc[i].AddBuff(24, 60, false);
            }

            if (this.type == 287)
                Main.npc[i].AddBuff(72, 120, false);
            if (this.type == 285)
            {
                if (Main.rand.Next(3) == 0)
                    Main.npc[i].AddBuff(31, 180, false);
                else
                    Main.npc[i].AddBuff(31, 60, false);
            }

            if (this.type == 2 && Main.rand.Next(3) == 0)
                Main.npc[i].AddBuff(24, 180, false);
            if (this.type == 172)
            {
                if (Main.rand.Next(3) == 0)
                    Main.npc[i].AddBuff(44, 180, false);
            }
            else if (this.type == 15)
            {
                if (Main.rand.Next(2) == 0)
                    Main.npc[i].AddBuff(24, 300, false);
            }
            else if (this.type == 253)
            {
                if (Main.rand.Next(2) == 0)
                    Main.npc[i].AddBuff(44, 480, false);
            }
            else if (this.type == 19)
            {
                if (Main.rand.Next(5) == 0)
                    Main.npc[i].AddBuff(24, 180, false);
            }
            else if (this.type == 33)
            {
                if (Main.rand.Next(5) == 0)
                    Main.npc[i].AddBuff(20, 420, false);
            }
            else if (this.type == 34)
            {
                if (Main.rand.Next(2) == 0)
                    Main.npc[i].AddBuff(24, Main.rand.Next(240, 480), false);
            }
            else if (this.type == 35)
            {
                if (Main.rand.Next(4) == 0)
                    Main.npc[i].AddBuff(24, 180, false);
            }
            else if (this.type == 54)
            {
                if (Main.rand.Next(2) == 0)
                    Main.npc[i].AddBuff(20, 600, false);
            }
            else if (this.type == 267)
            {
                if (Main.rand.Next(3) == 0)
                    Main.npc[i].AddBuff(20, 3600, false);
                else
                    Main.npc[i].AddBuff(20, 1800, false);
            }
            else if (this.type == 63)
            {
                if (Main.rand.Next(5) != 0)
                    Main.npc[i].AddBuff(31, 60 * Main.rand.Next(2, 5), false);
            }
            else if (this.type == 85 || this.type == 188)
                Main.npc[i].AddBuff(24, 1200, false);
            else if (this.type == 95 || this.type == 103 || this.type == 104)
                Main.npc[i].AddBuff(39, 420, false);
            else if (this.type == 278 || this.type == 279 || this.type == 280)
                Main.npc[i].AddBuff(69, 600, false);
            else if (this.type == 282 || this.type == 283)
                Main.npc[i].AddBuff(70, 600, false);

            if (this.type == 163 || this.type == 310)
            {
                if (Main.rand.Next(3) == 0)
                    Main.npc[i].AddBuff(24, 600, false);
                else
                    Main.npc[i].AddBuff(24, 300, false);
            }
            else if (this.type == 98)
                Main.npc[i].AddBuff(20, 600, false);
            else if (this.type == 184)
                Main.npc[i].AddBuff(20, 900, false);
            else if (this.type == 265)
            {
                Main.npc[i].AddBuff(20, 1800, false);
            }
            else
            {
                if (this.type != 355)
                    return;
                Main.npc[i].AddBuff(70, 1800, false);
            }
        }

        public void StatusPvP(int i)
        {
            if (this.melee && Main.player[this.owner].meleeEnchant > (byte) 0 && !this.noEnchantments)
            {
                int meleeEnchant = (int) Main.player[this.owner].meleeEnchant;
                if (meleeEnchant == 1)
                    Main.player[i].AddBuff(70, 60 * Main.rand.Next(5, 10), true);
                if (meleeEnchant == 2)
                    Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), true);
                if (meleeEnchant == 3)
                    Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7), true);
                if (meleeEnchant == 5)
                    Main.player[i].AddBuff(69, 60 * Main.rand.Next(10, 20), true);
                if (meleeEnchant == 6)
                    Main.player[i].AddBuff(31, 60 * Main.rand.Next(1, 4), true);
                if (meleeEnchant == 8)
                    Main.player[i].AddBuff(20, 60 * Main.rand.Next(5, 10), true);
            }

            if (this.type == 295 || this.type == 296)
                Main.player[i].AddBuff(24, 60 * Main.rand.Next(8, 16), true);
            if (this.type == 478 || this.type == 480)
                Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), true);
            if ((this.melee || this.ranged) && (Main.player[this.owner].frostBurn && !this.noEnchantments))
                Main.player[i].AddBuff(44, 60 * Main.rand.Next(1, 8), false);
            if (this.melee && Main.player[this.owner].magmaStone && !this.noEnchantments)
            {
                if (Main.rand.Next(4) == 0)
                    Main.player[i].AddBuff(24, 360, true);
                else if (Main.rand.Next(2) == 0)
                    Main.player[i].AddBuff(24, 240, true);
                else
                    Main.player[i].AddBuff(24, 120, true);
            }

            if (this.type == 2 && Main.rand.Next(3) == 0)
                Main.player[i].AddBuff(24, 180, false);
            if (this.type == 172)
            {
                if (Main.rand.Next(3) == 0)
                    Main.player[i].AddBuff(44, 240, false);
            }
            else if (this.type == 15)
            {
                if (Main.rand.Next(2) == 0)
                    Main.player[i].AddBuff(24, 300, false);
            }
            else if (this.type == 253)
            {
                if (Main.rand.Next(2) == 0)
                    Main.player[i].AddBuff(44, 480, false);
            }
            else if (this.type == 19)
            {
                if (Main.rand.Next(5) == 0)
                    Main.player[i].AddBuff(24, 180, false);
            }
            else if (this.type == 33)
            {
                if (Main.rand.Next(5) == 0)
                    Main.player[i].AddBuff(20, 420, false);
            }
            else if (this.type == 34)
            {
                if (Main.rand.Next(2) == 0)
                    Main.player[i].AddBuff(24, 240, false);
            }
            else if (this.type == 35)
            {
                if (Main.rand.Next(4) == 0)
                    Main.player[i].AddBuff(24, 180, false);
            }
            else if (this.type == 54)
            {
                if (Main.rand.Next(2) == 0)
                    Main.player[i].AddBuff(20, 600, false);
            }
            else if (this.type == 267)
            {
                if (Main.rand.Next(3) == 0)
                    Main.player[i].AddBuff(20, 3600, true);
                else
                    Main.player[i].AddBuff(20, 1800, true);
            }
            else if (this.type == 63)
            {
                if (Main.rand.Next(3) != 0)
                    Main.player[i].AddBuff(31, 120, true);
            }
            else if (this.type == 85 || this.type == 188)
                Main.player[i].AddBuff(24, 1200, false);
            else if (this.type == 95 || this.type == 103 || this.type == 104)
                Main.player[i].AddBuff(39, 420, true);
            else if (this.type == 278 || this.type == 279 || this.type == 280)
                Main.player[i].AddBuff(69, 900, true);
            else if (this.type == 282 || this.type == 283)
                Main.player[i].AddBuff(70, 600, true);

            if (this.type == 163 || this.type == 310)
            {
                if (Main.rand.Next(3) == 0)
                    Main.player[i].AddBuff(24, 600, true);
                else
                    Main.player[i].AddBuff(24, 300, true);
            }
            else if (this.type == 265)
            {
                Main.player[i].AddBuff(20, 1200, true);
            }
            else
            {
                if (this.type != 355)
                    return;
                Main.player[i].AddBuff(70, 1800, true);
            }
        }

        public void ghostHurt(int dmg, Vector2 Position)
        {
            if (!this.magic)
                return;
            int Damage = this.damage / 2;
            if (dmg / 2 <= 1)
                return;
            int num1 = 1000;
            if ((double) Main.player[Main.myPlayer].ghostDmg > (double) num1)
                return;
            Main.player[Main.myPlayer].ghostDmg += (float) Damage;
            int[] numArray = new int[200];
            int maxValue1 = 0;
            int maxValue2 = 0;
            for (int index = 0; index < 200; ++index)
            {
                if (Main.npc[index].CanBeChasedBy((object) this, false))
                {
                    float num2 =
                        Math.Abs(Main.npc[index].position.X + (float) (Main.npc[index].width / 2) - this.position.X +
                                 (float) (this.width / 2)) +
                        Math.Abs(Main.npc[index].position.Y + (float) (Main.npc[index].height / 2) - this.position.Y +
                                 (float) (this.height / 2));
                    if ((double) num2 < 800.0)
                    {
                        if (Collision.CanHit(this.position, 1, 1, Main.npc[index].position, Main.npc[index].width,
                                Main.npc[index].height) && (double) num2 > 50.0)
                        {
                            numArray[maxValue2] = index;
                            ++maxValue2;
                        }
                        else if (maxValue2 == 0)
                        {
                            numArray[maxValue1] = index;
                            ++maxValue1;
                        }
                    }
                }
            }

            if (maxValue1 == 0 && maxValue2 == 0)
                return;
            int num3 = maxValue2 <= 0 ? numArray[Main.rand.Next(maxValue1)] : numArray[Main.rand.Next(maxValue2)];
            float num4 = 4f;
            float num5 = (float) Main.rand.Next(-100, 101);
            float num6 = (float) Main.rand.Next(-100, 101);
            float num7 = (float) Math.Sqrt((double) num5 * (double) num5 + (double) num6 * (double) num6);
            float num8 = num4 / num7;
            float SpeedX = num5 * num8;
            float SpeedY = num6 * num8;
            Projectile.NewProjectile(Position.X, Position.Y, SpeedX, SpeedY, 356, Damage, 0.0f, this.owner,
                (float) num3, 0.0f);
        }

        public void ghostHeal(int dmg, Vector2 Position)
        {
            float num1 = 0.2f - (float) this.numHits * 0.05f;
            if ((double) num1 <= 0.0)
                return;
            float ai1 = (float) dmg * num1;
            if ((int) ai1 <= 0 || (double) Main.player[Main.myPlayer].lifeSteal <= 0.0)
                return;
            Main.player[Main.myPlayer].lifeSteal -= ai1;
            if (!this.magic)
                return;
            float num2 = 0.0f;
            int num3 = this.owner;
            for (int index = 0; index < (int) byte.MaxValue; ++index)
            {
                if (Main.player[index].active && !Main.player[index].dead &&
                    (!Main.player[this.owner].hostile && !Main.player[index].hostile ||
                     Main.player[this.owner].team == Main.player[index].team) &&
                    ((double) (Math.Abs(Main.player[index].position.X + (float) (Main.player[index].width / 2) -
                                        this.position.X + (float) (this.width / 2)) +
                               Math.Abs(Main.player[index].position.Y + (float) (Main.player[index].height / 2) -
                                        this.position.Y + (float) (this.height / 2))) < 1200.0 &&
                     (double) (Main.player[index].statLifeMax2 - Main.player[index].statLife) > (double) num2))
                {
                    num2 = (float) (Main.player[index].statLifeMax2 - Main.player[index].statLife);
                    num3 = index;
                }
            }

            Projectile.NewProjectile(Position.X, Position.Y, 0.0f, 0.0f, 298, 0, 0.0f, this.owner, (float) num3, ai1);
        }

        public void vampireHeal(int dmg, Vector2 Position)
        {
            float ai1 = (float) dmg * 0.075f;
            if ((int) ai1 == 0 || (double) Main.player[Main.myPlayer].lifeSteal <= 0.0)
                return;
            Main.player[Main.myPlayer].lifeSteal -= ai1;
            int owner = this.owner;
            Projectile.NewProjectile(Position.X, Position.Y, 0.0f, 0.0f, 305, 0, 0.0f, this.owner, (float) owner, ai1);
        }

        public void StatusPlayer(int i)
        {
            if (this.type == 472)
                Main.player[i].AddBuff(149, Main.rand.Next(30, 150), true);
            if (this.type == 467)
                Main.player[i].AddBuff(24, Main.rand.Next(30, 150), true);
            if (this.type == 581)
            {
                if (Main.expertMode)
                    Main.player[i].AddBuff(164, Main.rand.Next(300, 540), true);
                else if (Main.rand.Next(2) == 0)
                    Main.player[i].AddBuff(164, Main.rand.Next(360, 720), true);
            }

            if (this.type == 687)
                Main.player[i].AddBuff(24, 60 * Main.rand.Next(7, 11), true);
            if (this.type == 258 && Main.rand.Next(2) == 0)
                Main.player[i].AddBuff(24, 60 * Main.rand.Next(5, 8), true);
            if (this.type == 572 && Main.rand.Next(3) != 0)
                Main.player[i].AddBuff(20, Main.rand.Next(120, 240), true);
            if (this.type == 276)
            {
                if (Main.expertMode)
                    Main.player[i].AddBuff(20, Main.rand.Next(120, 540), true);
                else if (Main.rand.Next(2) == 0)
                    Main.player[i].AddBuff(20, Main.rand.Next(180, 420), true);
            }

            if (this.type == 436 && Main.rand.Next(5) >= 2)
                Main.player[i].AddBuff(31, 300, true);
            if (this.type == 435 && Main.rand.Next(3) != 0)
                Main.player[i].AddBuff(144, 300, true);
            if (this.type == 682)
                Main.player[i].AddBuff(196, 300, true);
            if (this.type == 437)
                Main.player[i].AddBuff(144, 60 * Main.rand.Next(4, 9), true);
            if (this.type == 348)
            {
                if (Main.rand.Next(2) == 0)
                    Main.player[i].AddBuff(46, 600, true);
                else
                    Main.player[i].AddBuff(46, 300, true);
                if (Main.rand.Next(3) != 0)
                {
                    if (Main.rand.Next(16) == 0)
                        Main.player[i].AddBuff(47, 60, true);
                    else if (Main.rand.Next(12) == 0)
                        Main.player[i].AddBuff(47, 40, true);
                    else if (Main.rand.Next(8) == 0)
                        Main.player[i].AddBuff(47, 20, true);
                }
            }

            if (this.type == 349)
            {
                if (Main.rand.Next(3) == 0)
                    Main.player[i].AddBuff(46, 600, true);
                else if (Main.rand.Next(2) == 0)
                    Main.player[i].AddBuff(46, 300, true);
            }

            if (this.type >= 399 && this.type <= 402)
                Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 7), false);
            if (this.type == 55)
            {
                if (Main.rand.Next(3) == 0)
                    Main.player[i].AddBuff(20, 600, true);
                else if (Main.expertMode)
                    Main.player[i].AddBuff(20, Main.rand.Next(60, 300), true);
            }

            if (this.type == 44 && Main.rand.Next(3) == 0)
                Main.player[i].AddBuff(22, 900, true);
            if (this.type == 293)
                Main.player[i].AddBuff(80, 60 * Main.rand.Next(2, 7), true);
            if (this.type == 82 && Main.rand.Next(3) == 0)
                Main.player[i].AddBuff(24, 420, true);
            if (this.type == 285)
            {
                if (Main.rand.Next(3) == 0)
                    Main.player[i].AddBuff(31, 180, true);
                else
                    Main.player[i].AddBuff(31, 60, true);
            }

            if (this.type == 96 || this.type == 101)
            {
                if (Main.rand.Next(6) == 0)
                    Main.player[i].AddBuff(39, 480, true);
                else if (Main.rand.Next(4) == 0)
                    Main.player[i].AddBuff(39, 300, true);
                else if (Main.rand.Next(2) == 0)
                    Main.player[i].AddBuff(39, 180, true);
            }
            else if (this.type == 288)
                Main.player[i].AddBuff(69, 900, true);
            else if (this.type == 253 && Main.rand.Next(2) == 0)
                Main.player[i].AddBuff(44, 600, true);

            if (this.type == 291 || this.type == 292)
                Main.player[i].AddBuff(24, 60 * Main.rand.Next(8, 16), true);
            if (this.type == 98)
                Main.player[i].AddBuff(20, 600, true);
            if (this.type == 184)
                Main.player[i].AddBuff(20, 900, true);
            if (this.type == 290)
                Main.player[i].AddBuff(32, 60 * Main.rand.Next(5, 16), true);
            if (this.type == 174)
            {
                Main.player[i].AddBuff(46, 1200, true);
                if (!Main.player[i].frozen && Main.rand.Next(20) == 0)
                    Main.player[i].AddBuff(47, 90, true);
                else if (!Main.player[i].frozen && Main.expertMode && Main.rand.Next(20) == 0)
                    Main.player[i].AddBuff(47, 60, true);
            }

            if (this.type == 257)
            {
                Main.player[i].AddBuff(46, 2700, true);
                if (!Main.player[i].frozen && Main.rand.Next(5) == 0)
                    Main.player[i].AddBuff(47, 60, true);
            }

            if (this.type == 177)
            {
                Main.player[i].AddBuff(46, 1500, true);
                if (!Main.player[i].frozen && Main.rand.Next(10) == 0)
                    Main.player[i].AddBuff(47, Main.rand.Next(30, 120), true);
            }

            if (this.type != 176)
                return;
            if (Main.rand.Next(4) == 0)
            {
                Main.player[i].AddBuff(20, 1200, true);
            }
            else
            {
                if (Main.rand.Next(2) != 0)
                    return;
                Main.player[i].AddBuff(20, 300, true);
            }
        }

        public bool CanHit(Entity ent)
        {
            if ((double) this.Distance(ent.Center) > (double) this.ownerHitCheckDistance)
                return false;
            if (!Collision.CanHit(Main.player[this.owner].position, Main.player[this.owner].width,
                    Main.player[this.owner].height, ent.position, ent.width, ent.height) &&
                !Collision.CanHitLine(
                    Main.player[this.owner].Center + new Vector2(
                        (float) (Main.player[this.owner].direction * Main.player[this.owner].width / 2),
                        (float) ((double) Main.player[this.owner].gravDir * (double) -Main.player[this.owner].height /
                                 3.0)), 0, 0, ent.Center + new Vector2(0.0f, (float) (-ent.height / 3)), 0, 0) &&
                !Collision.CanHitLine(
                    Main.player[this.owner].Center + new Vector2(
                        (float) (Main.player[this.owner].direction * Main.player[this.owner].width / 2),
                        (float) ((double) Main.player[this.owner].gravDir * (double) -Main.player[this.owner].height /
                                 3.0)), 0, 0, ent.Center, 0, 0))
                return Collision.CanHitLine(
                    Main.player[this.owner].Center +
                    new Vector2((float) (Main.player[this.owner].direction * Main.player[this.owner].width / 2), 0.0f),
                    0, 0, ent.Center + new Vector2(0.0f, (float) (ent.height / 3)), 0, 0);
            return true;
        }

        public void Damage()
        {
            if (this.type == 18 || this.type == 72 || (this.type == 86 || this.type == 87) ||
                (this.aiStyle == 31 || this.aiStyle == 32 || (this.type == 226 || this.type == 378)) ||
                (this.type == 613 || this.type == 650 || this.type == 434 && (double) this.localAI[0] != 0.0 ||
                 (this.type == 439 || this.type == 444)) ||
                (this.type == 451 &&
                 ((int) ((double) this.ai[0] - 1.0) / this.penetrate == 0 || (double) this.ai[1] < 5.0) &&
                 (double) this.ai[0] != 0.0 ||
                 (this.type == 500 || this.type == 653 || (this.type == 460 || this.type == 633) ||
                  (this.type == 600 || this.type == 601 || (this.type == 602 || this.type == 535)))) ||
                (this.type == 631 && (double) this.localAI[1] == 0.0 || this.type == 651 ||
                 (this.aiStyle == 137 && (double) this.ai[0] != 0.0 || this.aiStyle == 138) ||
                 (this.aiStyle == 93 && (double) this.ai[0] != 0.0 && (double) this.ai[0] != 2.0 ||
                  this.aiStyle == 10 && (double) this.localAI[1] == -1.0)) || Main.projPet[this.type] &&
                this.type != 266 && (this.type != 407 && this.type != 317) &&
                ((this.type != 388 || (double) this.ai[0] != 2.0) && (this.type < 390 || this.type > 392)) &&
                ((this.type < 393 || this.type > 395) &&
                 (this.type != 533 || (double) this.ai[0] < 6.0 || (double) this.ai[0] > 8.0)) &&
                (this.type < 625 || this.type > 628))
                return;
            Microsoft.Xna.Framework.Rectangle myRect = new Microsoft.Xna.Framework.Rectangle((int) this.position.X,
                (int) this.position.Y, this.width, this.height);
            if (this.type == 85 || this.type == 101)
            {
                int num = 30;
                myRect.X -= num;
                myRect.Y -= num;
                myRect.Width += num * 2;
                myRect.Height += num * 2;
            }

            if (this.type == 188)
            {
                int num = 20;
                myRect.X -= num;
                myRect.Y -= num;
                myRect.Width += num * 2;
                myRect.Height += num * 2;
            }

            if (this.aiStyle == 29)
            {
                int num = 4;
                myRect.X -= num;
                myRect.Y -= num;
                myRect.Width += num * 2;
                myRect.Height += num * 2;
            }

            if (this.friendly && this.owner == Main.myPlayer && !this.npcProj)
            {
                if (this.aiStyle == 16 && this.type != 338 && (this.type != 339 && this.type != 340) &&
                    this.type != 341 && (this.timeLeft <= 1 || this.type == 108 || this.type == 164) ||
                    this.type == 286 && (double) this.localAI[1] == -1.0)
                {
                    int player = Main.myPlayer;
                    if (Main.player[player].active && !Main.player[player].dead && !Main.player[player].immune &&
                        (!this.ownerHitCheck || this.CanHit((Entity) Main.player[player])))
                    {
                        Microsoft.Xna.Framework.Rectangle rectangle =
                            new Microsoft.Xna.Framework.Rectangle((int) Main.player[player].position.X,
                                (int) Main.player[player].position.Y, Main.player[player].width,
                                Main.player[player].height);
                        if (myRect.Intersects(rectangle))
                        {
                            if ((double) Main.player[player].position.X + (double) (Main.player[player].width / 2) <
                                (double) this.position.X + (double) (this.width / 2))
                                this.direction = -1;
                            else
                                this.direction = 1;
                            int Damage = Main.DamageVar((float) this.damage);
                            this.StatusPlayer(player);
                            Main.player[player].Hurt(PlayerDeathReason.ByProjectile(this.owner, this.whoAmI), Damage,
                                this.direction, true, false, false, -1);
                            if (this.trap)
                            {
                                Main.player[player].trapDebuffSource = true;
                                if (Main.player[player].dead)
                                    AchievementsHelper.HandleSpecialEvent(Main.player[player], 4);
                            }
                        }
                    }
                }

                this.CutTiles();
            }

            if (this.owner == Main.myPlayer)
            {
                if (this.damage > 0)
                {
                    for (int index1 = 0; index1 < 200; ++index1)
                    {
                        bool flag1 = !this.usesLocalNPCImmunity && !this.usesIDStaticNPCImmunity ||
                                     this.usesLocalNPCImmunity && this.localNPCImmunity[index1] == 0 ||
                                     this.usesIDStaticNPCImmunity && Projectile.IsNPCImmune(this.type, index1);
                        if (Main.npc[index1].active && !Main.npc[index1].dontTakeDamage && flag1 &&
                            (this.friendly && (!Main.npc[index1].friendly || this.type == 318 ||
                                               Main.npc[index1].type == 22 && this.owner < (int) byte.MaxValue &&
                                               Main.player[this.owner].killGuide ||
                                               Main.npc[index1].type == 54 && this.owner < (int) byte.MaxValue &&
                                               Main.player[this.owner].killClothier) ||
                             this.hostile && Main.npc[index1].friendly && !Main.npc[index1].dontTakeDamageFromHostiles
                            ) && (this.owner < 0 || Main.npc[index1].immune[this.owner] == 0 || this.maxPenetrate == 1))
                        {
                            bool flag2 = false;
                            if (this.type == 11 && (Main.npc[index1].type == 47 || Main.npc[index1].type == 57))
                                flag2 = true;
                            else if (this.type == 31 && Main.npc[index1].type == 69)
                                flag2 = true;
                            else if (Main.npc[index1].trapImmune && this.trap)
                                flag2 = true;
                            else if (Main.npc[index1].immortal && this.npcProj)
                                flag2 = true;
                            if (!flag2 && (Main.npc[index1].noTileCollide || !this.ownerHitCheck ||
                                           this.CanHit((Entity) Main.npc[index1])))
                            {
                                bool flag3;
                                if (Main.npc[index1].type == 414)
                                {
                                    Microsoft.Xna.Framework.Rectangle rect = Main.npc[index1].getRect();
                                    int num = 8;
                                    rect.X -= num;
                                    rect.Y -= num;
                                    rect.Width += num * 2;
                                    rect.Height += num * 2;
                                    flag3 = this.Colliding(myRect, rect);
                                }
                                else
                                    flag3 = this.Colliding(myRect, Main.npc[index1].getRect());

                                if (flag3)
                                {
                                    if (this.type == 604)
                                        Main.player[this.owner].Counterweight(Main.npc[index1].Center, this.damage,
                                            this.knockBack);
                                    if (Main.npc[index1].reflectingProjectiles && this.CanReflect())
                                    {
                                        Main.npc[index1].ReflectProjectile(this.whoAmI);
                                        return;
                                    }

                                    int num1 = this.damage;
                                    if (this.type > 0 && this.type < 714 && ProjectileID.Sets.StardustDragon[this.type])
                                    {
                                        float num2 = Utils.Clamp<float>((float) (((double) this.scale - 1.0) * 100.0),
                                            0.0f, 50f);
                                        num1 = (int) ((double) num1 * (1.0 + (double) num2 * 0.230000004172325));
                                    }

                                    int Damage1 = Main.DamageVar((float) num1);
                                    bool flag4 = !this.npcProj && !this.trap;
                                    if (this.trap && NPCID.Sets.BelongsToInvasionOldOnesArmy[Main.npc[index1].type])
                                        Damage1 /= 2;
                                    if (this.type == 604)
                                    {
                                        this.friendly = false;
                                        this.ai[1] = 1000f;
                                    }

                                    if ((this.type == 400 || this.type == 401 || this.type == 402) &&
                                        (Main.npc[index1].type >= 13 && Main.npc[index1].type <= 15))
                                    {
                                        Damage1 = (int) ((double) Damage1 * 0.65);
                                        if (this.penetrate > 1)
                                            --this.penetrate;
                                    }

                                    if (this.type == 710)
                                    {
                                        Point result;
                                        if (!WorldUtils.Find(this.Center.ToTileCoordinates(),
                                            Searches.Chain((GenSearch) new Searches.Down(12),
                                                (GenCondition) new Conditions.IsSolid()), out result))
                                            Damage1 = (int) ((double) Damage1 * 1.5);
                                    }

                                    if (this.type == 504)
                                        this.ai[0] += (float) ((60.0 - (double) this.ai[0]) / 2.0);
                                    if (this.aiStyle == 3 && this.type != 301)
                                    {
                                        if ((double) this.ai[0] == 0.0)
                                        {
                                            this.velocity.X = -this.velocity.X;
                                            this.velocity.Y = -this.velocity.Y;
                                            this.netUpdate = true;
                                        }

                                        this.ai[0] = 1f;
                                    }
                                    else if (this.type == 582)
                                    {
                                        if ((double) this.ai[0] != 0.0)
                                            this.direction *= -1;
                                    }
                                    else if (this.type == 612)
                                        this.direction = Main.player[this.owner].direction;
                                    else if (this.type == 624)
                                    {
                                        float num2 = 1f;
                                        if ((double) Main.npc[index1].knockBackResist > 0.0)
                                            num2 = 1f / Main.npc[index1].knockBackResist;
                                        this.knockBack = 4f * num2;
                                        if ((double) Main.npc[index1].Center.X < (double) this.Center.X)
                                            this.direction = 1;
                                        else
                                            this.direction = -1;
                                    }
                                    else if (this.aiStyle == 16)
                                    {
                                        if (this.timeLeft > 3)
                                            this.timeLeft = 3;
                                        if ((double) Main.npc[index1].position.X +
                                            (double) (Main.npc[index1].width / 2) <
                                            (double) this.position.X + (double) (this.width / 2))
                                            this.direction = -1;
                                        else
                                            this.direction = 1;
                                    }
                                    else if (this.aiStyle == 68)
                                    {
                                        if (this.timeLeft > 3)
                                            this.timeLeft = 3;
                                        if ((double) Main.npc[index1].position.X +
                                            (double) (Main.npc[index1].width / 2) <
                                            (double) this.position.X + (double) (this.width / 2))
                                            this.direction = -1;
                                        else
                                            this.direction = 1;
                                    }
                                    else if (this.aiStyle == 50)
                                    {
                                        if ((double) Main.npc[index1].position.X +
                                            (double) (Main.npc[index1].width / 2) <
                                            (double) this.position.X + (double) (this.width / 2))
                                            this.direction = -1;
                                        else
                                            this.direction = 1;
                                    }

                                    if (this.type == 509)
                                    {
                                        int num2 = Main.rand.Next(2, 6);
                                        for (int index2 = 0; index2 < num2; ++index2)
                                        {
                                            Vector2 vector2 = new Vector2((float) Main.rand.Next(-100, 101),
                                                (float) Main.rand.Next(-100, 101));
                                            vector2 += this.velocity * 3f;
                                            vector2.Normalize();
                                            vector2 *= (float) Main.rand.Next(35, 81) * 0.1f;
                                            int Damage2 = (int) ((double) this.damage * 0.5);
                                            Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2.X, vector2.Y,
                                                504, Damage2, this.knockBack * 0.2f, this.owner, 0.0f, 0.0f);
                                        }
                                    }

                                    if (this.type == 598 || this.type == 636 || this.type == 614)
                                    {
                                        this.ai[0] = 1f;
                                        this.ai[1] = (float) index1;
                                        this.velocity = (Main.npc[index1].Center - this.Center) * 0.75f;
                                        this.netUpdate = true;
                                    }

                                    if (this.type >= 511 && this.type <= 513)
                                        this.timeLeft = 0;
                                    if (this.type == 659)
                                        this.timeLeft = 0;
                                    if (this.type == 524)
                                    {
                                        this.netUpdate = true;
                                        this.ai[0] += 50f;
                                    }

                                    if ((this.type == 688 || this.type == 689 || this.type == 690) &&
                                        (Main.npc[index1].type != 68 && Main.npc[index1].defense < 999))
                                        Damage1 += Main.npc[index1].defense / 2;
                                    if (this.aiStyle == 39)
                                    {
                                        if ((double) this.ai[1] == 0.0)
                                        {
                                            this.ai[1] = (float) (index1 + 1);
                                            this.netUpdate = true;
                                        }

                                        if ((double) Main.player[this.owner].position.X +
                                            (double) (Main.player[this.owner].width / 2) <
                                            (double) this.position.X + (double) (this.width / 2))
                                            this.direction = 1;
                                        else
                                            this.direction = -1;
                                    }

                                    if (this.type == 41 && this.timeLeft > 1)
                                        this.timeLeft = 1;
                                    bool crit = false;
                                    if (flag4)
                                    {
                                        if (this.melee && Main.rand.Next(1, 101) <= Main.player[this.owner].meleeCrit)
                                            crit = true;
                                        if (this.ranged && Main.rand.Next(1, 101) <= Main.player[this.owner].rangedCrit)
                                            crit = true;
                                        if (this.magic && Main.rand.Next(1, 101) <= Main.player[this.owner].magicCrit)
                                            crit = true;
                                        if (this.thrown && Main.rand.Next(1, 101) <= Main.player[this.owner].thrownCrit)
                                            crit = true;
                                        switch (this.type)
                                        {
                                            case 688:
                                            case 689:
                                            case 690:
                                                if (Main.player[this.owner].setMonkT3)
                                                {
                                                    if (Main.rand.Next(4) == 0)
                                                    {
                                                        crit = true;
                                                        break;
                                                    }

                                                    break;
                                                }

                                                if (Main.player[this.owner].setMonkT2 && Main.rand.Next(6) == 0)
                                                {
                                                    crit = true;
                                                    break;
                                                }

                                                break;
                                        }
                                    }

                                    if (this.aiStyle == 99)
                                    {
                                        Main.player[this.owner].Counterweight(Main.npc[index1].Center, this.damage,
                                            this.knockBack);
                                        if ((double) Main.npc[index1].Center.X <
                                            (double) Main.player[this.owner].Center.X)
                                            this.direction = -1;
                                        else
                                            this.direction = 1;
                                        if ((double) this.ai[0] >= 0.0)
                                        {
                                            Vector2 vector2 = this.Center - Main.npc[index1].Center;
                                            vector2.Normalize();
                                            float num2 = 16f;
                                            Projectile projectile1 = this;
                                            projectile1.velocity = projectile1.velocity * -0.5f;
                                            Projectile projectile2 = this;
                                            projectile2.velocity = projectile2.velocity + vector2 * num2;
                                            this.netUpdate = true;
                                            this.localAI[0] += 20f;
                                            if (!Collision.CanHit(this.position, this.width, this.height,
                                                Main.player[this.owner].position, Main.player[this.owner].width,
                                                Main.player[this.owner].height))
                                            {
                                                this.localAI[0] += 40f;
                                                Damage1 = (int) ((double) Damage1 * 0.75);
                                            }
                                        }
                                    }

                                    if (this.aiStyle == 93)
                                    {
                                        if ((double) this.ai[0] == 0.0)
                                        {
                                            this.ai[1] = 0.0f;
                                            this.ai[0] = (float) (-index1 - 1);
                                            this.velocity = Main.npc[index1].Center - this.Center;
                                        }

                                        Damage1 = (double) this.ai[0] != 2.0
                                            ? (int) ((double) Damage1 * 0.15)
                                            : (int) ((double) Damage1 * 1.35);
                                    }

                                    if (flag4)
                                    {
                                        int num2 = Item.NPCtoBanner(Main.npc[index1].BannerID());
                                        if (num2 >= 0)
                                            Main.player[Main.myPlayer].lastCreatureHit = num2;
                                    }

                                    if (Main.netMode != 2 && flag4)
                                    {
                                        int banner = Item.NPCtoBanner(Main.npc[index1].BannerID());
                                        if (banner > 0 && Main.player[this.owner].NPCBannerBuff[banner])
                                            Damage1 = !Main.expertMode
                                                ? (int) ((double) Damage1 * (double) ItemID.Sets
                                                             .BannerStrength[Item.BannerToItem(banner)]
                                                             .NormalDamageDealt)
                                                : (int) ((double) Damage1 * (double) ItemID.Sets
                                                             .BannerStrength[Item.BannerToItem(banner)]
                                                             .ExpertDamageDealt);
                                    }

                                    if (Main.expertMode)
                                    {
                                        if ((this.type == 30 || this.type == 28 ||
                                             (this.type == 29 || this.type == 470) ||
                                             (this.type == 517 || this.type == 588 || this.type == 637)) &&
                                            (Main.npc[index1].type >= 13 && Main.npc[index1].type <= 15))
                                            Damage1 /= 5;
                                        if (this.type == 280 &&
                                            (Main.npc[index1].type >= 134 && Main.npc[index1].type <= 136 ||
                                             Main.npc[index1].type == 139))
                                            Damage1 = (int) ((double) Damage1 * 0.75);
                                    }

                                    if (Main.netMode != 2 && Main.npc[index1].type == 439 &&
                                        (this.type >= 0 && this.type <= 714) && ProjectileID.Sets.Homing[this.type])
                                        Damage1 = (int) ((double) Damage1 * 0.75);
                                    if (this.type == 497 && this.penetrate != 1)
                                    {
                                        this.ai[0] = 25f;
                                        float num2 = this.velocity.Length();
                                        Vector2 vector2 = Main.npc[index1].Center - this.Center;
                                        vector2.Normalize();
                                        this.velocity = -(vector2 * num2) * 0.9f;
                                        this.netUpdate = true;
                                    }

                                    if (this.type == 323 &&
                                        (Main.npc[index1].type == 158 || Main.npc[index1].type == 159))
                                        Damage1 *= 10;
                                    if (this.type == 294)
                                        this.damage = (int) ((double) this.damage * 0.8);
                                    if (this.type == 477 && this.penetrate > 1)
                                    {
                                        int[] numArray = new int[10];
                                        int maxValue = 0;
                                        int num2 = 700;
                                        int num3 = 20;
                                        for (int index2 = 0; index2 < 200; ++index2)
                                        {
                                            if (index2 != index1 &&
                                                Main.npc[index2].CanBeChasedBy((object) this, false))
                                            {
                                                float num4 = (this.Center - Main.npc[index2].Center).Length();
                                                if ((double) num4 > (double) num3 && (double) num4 < (double) num2 &&
                                                    Collision.CanHitLine(this.Center, 1, 1, Main.npc[index2].Center, 1,
                                                        1))
                                                {
                                                    numArray[maxValue] = index2;
                                                    ++maxValue;
                                                    if (maxValue >= 9)
                                                        break;
                                                }
                                            }
                                        }

                                        if (maxValue > 0)
                                        {
                                            int index2 = Main.rand.Next(maxValue);
                                            Vector2 vector2 = Main.npc[numArray[index2]].Center - this.Center;
                                            float num4 = this.velocity.Length();
                                            vector2.Normalize();
                                            this.velocity = vector2 * num4;
                                            this.netUpdate = true;
                                        }
                                    }

                                    if (this.type == 261)
                                    {
                                        float num2 = (float) Math.Sqrt(
                                            (double) this.velocity.X * (double) this.velocity.X +
                                            (double) this.velocity.Y * (double) this.velocity.Y);
                                        if ((double) num2 < 1.0)
                                            num2 = 1f;
                                        Damage1 = (int) ((double) Damage1 * (double) num2 / 8.0);
                                    }

                                    if (flag4 && this.melee && Main.player[this.owner].parryDamageBuff)
                                    {
                                        Damage1 *= 5;
                                        Main.player[this.owner].parryDamageBuff = false;
                                        Main.player[this.owner].ClearBuff(198);
                                    }

                                    this.StatusNPC(index1);
                                    if (flag4 && this.type != 221 && (this.type != 227 && this.type != 614))
                                        Main.player[this.owner].OnHit(Main.npc[index1].Center.X,
                                            Main.npc[index1].Center.Y, (Entity) Main.npc[index1]);
                                    if (this.type == 317)
                                    {
                                        this.ai[1] = -1f;
                                        this.netUpdate = true;
                                    }

                                    int hitDirection = this.direction;
                                    if (this.type == 697 || this.type == 699 || (this.type == 707 || this.type == 708))
                                        hitDirection =
                                            (double) Main.player[this.owner].Center.X <
                                            (double) Main.npc[index1].Center.X
                                                ? 1
                                                : -1;
                                    if (flag4 && !this.hostile && Main.player[this.owner].armorPenetration > 0)
                                        Damage1 += Main.npc[index1]
                                            .checkArmorPenetration(Main.player[this.owner].armorPenetration);
                                    int dmg = !flag4
                                        ? (int) Main.npc[index1].StrikeNPCNoInteraction(Damage1, this.knockBack,
                                            hitDirection, crit, false, false)
                                        : (int) Main.npc[index1].StrikeNPC(Damage1, this.knockBack, hitDirection, crit,
                                            false, false);
                                    if (flag4 && Main.player[this.owner].accDreamCatcher)
                                        Main.player[this.owner].addDPS(dmg);
                                    if (flag4 && !Main.npc[index1].immortal)
                                    {
                                        if (this.type == 304 && dmg > 0 &&
                                            (Main.npc[index1].lifeMax > 5 && !Main.player[this.owner].moonLeech))
                                            this.vampireHeal(dmg,
                                                new Vector2(Main.npc[index1].Center.X, Main.npc[index1].Center.Y));
                                        if ((double) Main.npc[index1].value > 0.0 && Main.player[this.owner].coins &&
                                            Main.rand.Next(5) == 0)
                                        {
                                            int Type = 71;
                                            if (Main.rand.Next(10) == 0)
                                                Type = 72;
                                            if (Main.rand.Next(100) == 0)
                                                Type = 73;
                                            int number = Item.NewItem((int) Main.npc[index1].position.X,
                                                (int) Main.npc[index1].position.Y, Main.npc[index1].width,
                                                Main.npc[index1].height, Type, 1, false, 0, false, false);
                                            Main.item[number].stack = Main.rand.Next(1, 11);
                                            Main.item[number].velocity.Y = (float) Main.rand.Next(-20, 1) * 0.2f;
                                            Main.item[number].velocity.X =
                                                (float) Main.rand.Next(10, 31) * 0.2f * (float) this.direction;
                                            if (Main.netMode == 1)
                                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 0.0f, 0.0f,
                                                    0.0f, 0, 0, 0);
                                        }

                                        if (dmg > 0 && Main.npc[index1].lifeMax > 5 &&
                                            (this.friendly && !this.hostile) && this.aiStyle != 59)
                                        {
                                            if (Main.npc[index1].canGhostHeal)
                                            {
                                                if (Main.player[this.owner].ghostHeal &&
                                                    !Main.player[this.owner].moonLeech)
                                                    this.ghostHeal(dmg,
                                                        new Vector2(Main.npc[index1].Center.X,
                                                            Main.npc[index1].Center.Y));
                                                if (Main.player[this.owner].ghostHurt)
                                                    this.ghostHurt(dmg,
                                                        new Vector2(Main.npc[index1].Center.X,
                                                            Main.npc[index1].Center.Y));
                                                if (Main.player[this.owner].setNebula &&
                                                    Main.player[this.owner].nebulaCD == 0 && Main.rand.Next(3) == 0)
                                                {
                                                    Main.player[this.owner].nebulaCD = 30;
                                                    int Type = Utils.SelectRandom<int>(Main.rand, new int[3]
                                                    {
                                                        3453,
                                                        3454,
                                                        3455
                                                    });
                                                    int number = Item.NewItem((int) Main.npc[index1].position.X,
                                                        (int) Main.npc[index1].position.Y, Main.npc[index1].width,
                                                        Main.npc[index1].height, Type, 1, false, 0, false, false);
                                                    Main.item[number].velocity.Y =
                                                        (float) Main.rand.Next(-20, 1) * 0.2f;
                                                    Main.item[number].velocity.X =
                                                        (float) Main.rand.Next(10, 31) * 0.2f * (float) this.direction;
                                                    if (Main.netMode == 1)
                                                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number,
                                                            0.0f, 0.0f, 0.0f, 0, 0, 0);
                                                }
                                            }

                                            if (this.melee && Main.player[this.owner].beetleOffense &&
                                                !Main.npc[index1].immortal)
                                            {
                                                if (Main.player[this.owner].beetleOrbs == 0)
                                                    Main.player[this.owner].beetleCounter += (float) (dmg * 3);
                                                else if (Main.player[this.owner].beetleOrbs == 1)
                                                    Main.player[this.owner].beetleCounter += (float) (dmg * 2);
                                                else
                                                    Main.player[this.owner].beetleCounter += (float) dmg;
                                                Main.player[this.owner].beetleCountdown = 0;
                                            }

                                            if (this.arrow && this.type != 631 &&
                                                Main.player[this.owner].phantasmTime > 0)
                                            {
                                                Vector2 Source =
                                                    Main.player[this.owner].position + Main.player[this.owner].Size *
                                                    Utils.RandomVector2(Main.rand, 0.0f, 1f);
                                                Vector2 vector2 = Main.npc[index1].DirectionFrom(Source) * 6f;
                                                int Damage2 = (int) ((double) this.damage * 0.300000011920929);
                                                Projectile.NewProjectile(Source.X, Source.Y, vector2.X, vector2.Y, 631,
                                                    Damage2, 0.0f, this.owner, (float) index1, 0.0f);
                                                Projectile.NewProjectile(Source.X, Source.Y, vector2.X, vector2.Y, 631,
                                                    Damage2, 0.0f, this.owner, (float) index1, 15f);
                                                Projectile.NewProjectile(Source.X, Source.Y, vector2.X, vector2.Y, 631,
                                                    Damage2, 0.0f, this.owner, (float) index1, 30f);
                                            }
                                        }
                                    }

                                    if (flag4 && this.melee && Main.player[this.owner].meleeEnchant == (byte) 7)
                                        Projectile.NewProjectile(Main.npc[index1].Center.X, Main.npc[index1].Center.Y,
                                            Main.npc[index1].velocity.X, Main.npc[index1].velocity.Y, 289, 0, 0.0f,
                                            this.owner, 0.0f, 0.0f);
                                    if (Main.netMode != 0)
                                    {
                                        if (crit)
                                            NetMessage.SendData(28, -1, -1, (NetworkText) null, index1, (float) Damage1,
                                                this.knockBack, (float) this.direction, 1, 0, 0);
                                        else
                                            NetMessage.SendData(28, -1, -1, (NetworkText) null, index1, (float) Damage1,
                                                this.knockBack, (float) this.direction, 0, 0, 0);
                                    }

                                    if (this.type >= 390 && this.type <= 392)
                                        this.localAI[1] = 20f;
                                    if (this.usesIDStaticNPCImmunity)
                                    {
                                        Main.npc[index1].immune[this.owner] = 0;
                                        Projectile.perIDStaticNPCImmunity[this.type][index1] =
                                            Main.GameUpdateCount + (uint) this.idStaticNPCHitCooldown;
                                    }
                                    else if (this.type == 434)
                                        this.numUpdates = 0;
                                    else if (this.type == 598 || this.type == 636 || this.type == 614)
                                    {
                                        this.damage = 0;
                                        int length = 6;
                                        if (this.type == 614)
                                            length = 10;
                                        if (this.type == 636)
                                            length = 8;
                                        Point[] pointArray = new Point[length];
                                        int num2 = 0;
                                        for (int x = 0; x < 1000; ++x)
                                        {
                                            if (x != this.whoAmI && Main.projectile[x].active &&
                                                (Main.projectile[x].owner == Main.myPlayer &&
                                                 Main.projectile[x].type == this.type) &&
                                                ((double) Main.projectile[x].ai[0] == 1.0 &&
                                                 (double) Main.projectile[x].ai[1] == (double) index1))
                                            {
                                                pointArray[num2++] = new Point(x, Main.projectile[x].timeLeft);
                                                if (num2 >= pointArray.Length)
                                                    break;
                                            }
                                        }

                                        if (num2 >= pointArray.Length)
                                        {
                                            int index2 = 0;
                                            for (int index3 = 1; index3 < pointArray.Length; ++index3)
                                            {
                                                if (pointArray[index3].Y < pointArray[index2].Y)
                                                    index2 = index3;
                                            }

                                            Main.projectile[pointArray[index2].X].Kill();
                                        }
                                    }
                                    else if (this.type == 632)
                                        Main.npc[index1].immune[this.owner] = 5;
                                    else if (this.type == 514)
                                        Main.npc[index1].immune[this.owner] = 1;
                                    else if (this.type == 611)
                                    {
                                        if ((double) this.localAI[1] <= 0.0)
                                            Projectile.NewProjectile(Main.npc[index1].Center.X,
                                                Main.npc[index1].Center.Y, 0.0f, 0.0f, 612, this.damage, 10f,
                                                this.owner, 0.0f,
                                                (float) (0.850000023841858 +
                                                         (double) Main.rand.NextFloat() * 1.14999997615814));
                                        this.localAI[1] = 4f;
                                    }
                                    else if (this.type == 595)
                                        Main.npc[index1].immune[this.owner] = 5;
                                    else if (this.type >= 625 && this.type <= 628)
                                        Main.npc[index1].immune[this.owner] = 6;
                                    else if (this.type == 286)
                                        Main.npc[index1].immune[this.owner] = 5;
                                    else if (this.type == 514)
                                        Main.npc[index1].immune[this.owner] = 3;
                                    else if (this.type == 443)
                                        Main.npc[index1].immune[this.owner] = 8;
                                    else if (this.type >= 424 && this.type <= 426)
                                        Main.npc[index1].immune[this.owner] = 5;
                                    else if (this.type == 634 || this.type == 635)
                                        Main.npc[index1].immune[this.owner] = 5;
                                    else if (this.type == 659)
                                        Main.npc[index1].immune[this.owner] = 5;
                                    else if (this.type == 246)
                                        Main.npc[index1].immune[this.owner] = 7;
                                    else if (this.type == 249)
                                        Main.npc[index1].immune[this.owner] = 7;
                                    else if (this.type == 190)
                                        Main.npc[index1].immune[this.owner] = 8;
                                    else if (this.type == 409)
                                        Main.npc[index1].immune[this.owner] = 6;
                                    else if (this.type == 407)
                                        Main.npc[index1].immune[this.owner] = 20;
                                    else if (this.type == 311)
                                        Main.npc[index1].immune[this.owner] = 7;
                                    else if (this.type == 582)
                                    {
                                        Main.npc[index1].immune[this.owner] = 7;
                                        if ((double) this.ai[0] != 1.0)
                                        {
                                            this.ai[0] = 1f;
                                            this.netUpdate = true;
                                        }
                                    }
                                    else
                                    {
                                        if (this.type == 451)
                                        {
                                            if ((double) this.ai[0] == 0.0)
                                                this.ai[0] += (float) this.penetrate;
                                            else
                                                this.ai[0] -= (float) (this.penetrate + 1);
                                            this.ai[1] = 0.0f;
                                            this.netUpdate = true;
                                            break;
                                        }

                                        if (this.type == 661)
                                        {
                                            this.localNPCImmunity[index1] = 8;
                                            Main.npc[index1].immune[this.owner] = 0;
                                        }
                                        else if (this.usesLocalNPCImmunity && this.localNPCHitCooldown != -2)
                                        {
                                            Main.npc[index1].immune[this.owner] = 0;
                                            this.localNPCImmunity[index1] = this.localNPCHitCooldown;
                                        }
                                        else if (this.penetrate != 1)
                                            Main.npc[index1].immune[this.owner] = 10;
                                    }

                                    if (this.type == 710)
                                        this.BetsySharpnel(index1);
                                    if (this.penetrate > 0 && this.type != 317)
                                    {
                                        if (this.type == 357)
                                            this.damage = (int) ((double) this.damage * 0.9);
                                        --this.penetrate;
                                        if (this.penetrate == 0)
                                            break;
                                    }

                                    if (this.aiStyle == 7)
                                    {
                                        this.ai[0] = 1f;
                                        this.damage = 0;
                                        this.netUpdate = true;
                                    }
                                    else if (this.aiStyle == 13)
                                    {
                                        this.ai[0] = 1f;
                                        this.netUpdate = true;
                                    }
                                    else if (this.aiStyle == 69)
                                    {
                                        this.ai[0] = 1f;
                                        this.netUpdate = true;
                                    }
                                    else if (this.type == 607)
                                    {
                                        this.ai[0] = 1f;
                                        this.netUpdate = true;
                                        this.friendly = false;
                                    }
                                    else if (this.type == 638 || this.type == 639 || this.type == 640)
                                    {
                                        this.localNPCImmunity[index1] = -1;
                                        Main.npc[index1].immune[this.owner] = 0;
                                        this.damage = (int) ((double) this.damage * 0.96);
                                    }
                                    else if (this.type == 617)
                                    {
                                        this.localNPCImmunity[index1] = 8;
                                        Main.npc[index1].immune[this.owner] = 0;
                                    }
                                    else if (this.type == 656)
                                    {
                                        this.localNPCImmunity[index1] = 8;
                                        Main.npc[index1].immune[this.owner] = 0;
                                        ++this.localAI[0];
                                    }
                                    else if (this.type == 618)
                                    {
                                        this.localNPCImmunity[index1] = 20;
                                        Main.npc[index1].immune[this.owner] = 0;
                                    }
                                    else if (this.type == 642)
                                    {
                                        this.localNPCImmunity[index1] = 10;
                                        Main.npc[index1].immune[this.owner] = 0;
                                    }
                                    else if (this.type == 611 || this.type == 612)
                                    {
                                        this.localNPCImmunity[index1] = 6;
                                        Main.npc[index1].immune[this.owner] = 4;
                                    }
                                    else if (this.type == 645)
                                    {
                                        this.localNPCImmunity[index1] = -1;
                                        Main.npc[index1].immune[this.owner] = 0;
                                        if ((double) this.ai[1] != -1.0)
                                        {
                                            this.ai[0] = 0.0f;
                                            this.ai[1] = -1f;
                                            this.netUpdate = true;
                                        }
                                    }

                                    ++this.numHits;
                                    if (this.type == 697)
                                    {
                                        if ((double) this.ai[0] >= 42.0)
                                            this.localAI[1] = 1f;
                                    }
                                    else if (this.type == 699)
                                        this.SummonMonkGhast();
                                    else if (this.type == 706)
                                        this.damage = (int) ((double) this.damage * 0.949999988079071);
                                }
                            }
                        }
                    }
                }

                if (this.damage > 0 && Main.player[Main.myPlayer].hostile)
                {
                    for (int index = 0; index < (int) byte.MaxValue; ++index)
                    {
                        if (index != this.owner && Main.player[index].active &&
                            (!Main.player[index].dead && !Main.player[index].immune) &&
                            (Main.player[index].hostile && this.playerImmune[index] <= 0 &&
                             (Main.player[Main.myPlayer].team == 0 ||
                              Main.player[Main.myPlayer].team != Main.player[index].team)) &&
                            ((!this.ownerHitCheck || this.CanHit((Entity) Main.player[index])) &&
                             this.Colliding(myRect, Main.player[index].getRect())))
                        {
                            if (this.aiStyle == 3)
                            {
                                if ((double) this.ai[0] == 0.0)
                                {
                                    this.velocity.X = -this.velocity.X;
                                    this.velocity.Y = -this.velocity.Y;
                                    this.netUpdate = true;
                                }

                                this.ai[0] = 1f;
                            }
                            else if (this.aiStyle == 16)
                            {
                                if (this.timeLeft > 3)
                                    this.timeLeft = 3;
                                if ((double) Main.player[index].position.X + (double) (Main.player[index].width / 2) <
                                    (double) this.position.X + (double) (this.width / 2))
                                    this.direction = -1;
                                else
                                    this.direction = 1;
                            }
                            else if (this.aiStyle == 68)
                            {
                                if (this.timeLeft > 3)
                                    this.timeLeft = 3;
                                if ((double) Main.player[index].position.X + (double) (Main.player[index].width / 2) <
                                    (double) this.position.X + (double) (this.width / 2))
                                    this.direction = -1;
                                else
                                    this.direction = 1;
                            }

                            PlayerDeathReason playerDeathReason =
                                PlayerDeathReason.ByProjectile(this.owner, this.whoAmI);
                            if (this.type == 41 && this.timeLeft > 1)
                                this.timeLeft = 1;
                            bool flag = false;
                            if (this.melee && Main.rand.Next(1, 101) <= Main.player[this.owner].meleeCrit)
                                flag = true;
                            int num = Main.DamageVar((float) this.damage);
                            if (!Main.player[index].immune)
                                this.StatusPvP(index);
                            if (this.type != 221 && this.type != 227 && this.type != 614)
                                Main.player[this.owner].OnHit(Main.player[index].Center.X, Main.player[index].Center.Y,
                                    (Entity) Main.player[index]);
                            int dmg = (int) Main.player[index].Hurt(playerDeathReason, num, this.direction, true, false,
                                flag, -1);
                            if (dmg > 0 && Main.player[this.owner].ghostHeal && (this.friendly && !this.hostile))
                                this.ghostHeal(dmg,
                                    new Vector2(Main.player[index].Center.X, Main.player[index].Center.Y));
                            if (this.type == 304 && dmg > 0)
                                this.vampireHeal(dmg,
                                    new Vector2(Main.player[index].Center.X, Main.player[index].Center.Y));
                            if (this.melee && Main.player[this.owner].meleeEnchant == (byte) 7)
                                Projectile.NewProjectile(Main.player[index].Center.X, Main.player[index].Center.Y,
                                    Main.player[index].velocity.X, Main.player[index].velocity.Y, 289, 0, 0.0f,
                                    this.owner, 0.0f, 0.0f);
                            if (Main.netMode != 0)
                                NetMessage.SendPlayerHurt(index, playerDeathReason, num, this.direction, flag, true, 0,
                                    -1, -1);
                            this.playerImmune[index] = 40;
                            if (this.penetrate > 0)
                            {
                                --this.penetrate;
                                if (this.penetrate == 0)
                                    break;
                            }

                            if (this.aiStyle == 7)
                            {
                                this.ai[0] = 1f;
                                this.damage = 0;
                                this.netUpdate = true;
                            }
                            else if (this.aiStyle == 13)
                            {
                                this.ai[0] = 1f;
                                this.netUpdate = true;
                            }
                            else if (this.aiStyle == 69)
                            {
                                this.ai[0] = 1f;
                                this.netUpdate = true;
                            }
                        }
                    }
                }
            }

            if (this.type == 10 && Main.netMode != 1)
            {
                for (int index = 0; index < 200; ++index)
                {
                    if (Main.npc[index].active && Main.npc[index].type == 534)
                    {
                        Microsoft.Xna.Framework.Rectangle rectangle =
                            new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].position.X,
                                (int) Main.npc[index].position.Y, Main.npc[index].width, Main.npc[index].height);
                        if (myRect.Intersects(rectangle))
                            Main.npc[index].Transform(441);
                    }
                }
            }

            if (this.type == 11 && Main.netMode != 1)
            {
                for (int index = 0; index < 200; ++index)
                {
                    if (Main.npc[index].active)
                    {
                        if (Main.npc[index].type == 46 || Main.npc[index].type == 303)
                        {
                            Microsoft.Xna.Framework.Rectangle rectangle =
                                new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].position.X,
                                    (int) Main.npc[index].position.Y, Main.npc[index].width, Main.npc[index].height);
                            if (myRect.Intersects(rectangle))
                                Main.npc[index].Transform(47);
                        }
                        else if (Main.npc[index].type == 55)
                        {
                            Microsoft.Xna.Framework.Rectangle rectangle =
                                new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].position.X,
                                    (int) Main.npc[index].position.Y, Main.npc[index].width, Main.npc[index].height);
                            if (myRect.Intersects(rectangle))
                                Main.npc[index].Transform(57);
                        }
                        else if (Main.npc[index].type == 148 || Main.npc[index].type == 149)
                        {
                            Microsoft.Xna.Framework.Rectangle rectangle =
                                new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].position.X,
                                    (int) Main.npc[index].position.Y, Main.npc[index].width, Main.npc[index].height);
                            if (myRect.Intersects(rectangle))
                                Main.npc[index].Transform(168);
                        }
                    }
                }
            }

            if (this.type == 463 && Main.netMode != 1)
            {
                for (int index = 0; index < 200; ++index)
                {
                    if (Main.npc[index].active)
                    {
                        if (Main.npc[index].type == 46 || Main.npc[index].type == 303)
                        {
                            Microsoft.Xna.Framework.Rectangle rectangle =
                                new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].position.X,
                                    (int) Main.npc[index].position.Y, Main.npc[index].width, Main.npc[index].height);
                            if (myRect.Intersects(rectangle))
                                Main.npc[index].Transform(464);
                        }
                        else if (Main.npc[index].type == 55)
                        {
                            Microsoft.Xna.Framework.Rectangle rectangle =
                                new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].position.X,
                                    (int) Main.npc[index].position.Y, Main.npc[index].width, Main.npc[index].height);
                            if (myRect.Intersects(rectangle))
                                Main.npc[index].Transform(465);
                        }
                        else if (Main.npc[index].type == 148 || Main.npc[index].type == 149)
                        {
                            Microsoft.Xna.Framework.Rectangle rectangle =
                                new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].position.X,
                                    (int) Main.npc[index].position.Y, Main.npc[index].width, Main.npc[index].height);
                            if (myRect.Intersects(rectangle))
                                Main.npc[index].Transform(470);
                        }
                    }
                }
            }

            if (Main.netMode == 2 || !this.hostile || (Main.myPlayer >= (int) byte.MaxValue || this.damage <= 0))
                return;
            int cooldownCounter = -1;
            if (this.type == 455 || this.type == 452 || (this.type == 454 || this.type == 462))
                cooldownCounter = 1;
            int player1 = Main.myPlayer;
            if (!Main.player[player1].active || Main.player[player1].dead ||
                Main.player[player1].immune && cooldownCounter == -1 ||
                !this.Colliding(myRect, Main.player[player1].getRect()))
                return;
            int direction = this.direction;
            int hitDirection1 = (double) Main.player[player1].position.X + (double) (Main.player[player1].width / 2) >=
                                (double) this.position.X + (double) (this.width / 2)
                ? 1
                : -1;
            if (!Main.player[player1].CanParryAgainst(Main.player[player1].Hitbox, this.Hitbox, this.velocity))
            {
                int num = Main.DamageVar((float) this.damage);
                if (!Main.player[player1].immune)
                    this.StatusPlayer(player1);
                if (Main.player[player1].resistCold && this.coldDamage)
                    num = (int) ((double) num * 0.699999988079071);
                if (Main.expertMode)
                    num = (int) ((double) num * (double) Main.expertDamage);
                Main.player[player1].Hurt(PlayerDeathReason.ByProjectile(-1, this.whoAmI), num * 2, hitDirection1,
                    false, false, false, cooldownCounter);
                if (this.trap)
                {
                    Main.player[player1].trapDebuffSource = true;
                    if (Main.player[player1].dead)
                        AchievementsHelper.HandleSpecialEvent(Main.player[player1], 4);
                }
            }

            if (!true)
                return;
            if (this.type == 435 || this.type == 682)
                --this.penetrate;
            if (this.type == 436)
                --this.penetrate;
            if (this.type == 681)
                this.timeLeft = 0;
            if (this.type != 437)
                return;
            --this.penetrate;
        }

        private void SummonMonkGhast()
        {
            if ((double) this.localAI[0] > 0.0)
                return;
            this.localAI[0] = 1000f;
            List<NPC> npcList = new List<NPC>();
            for (int index = 0; index < 200; ++index)
            {
                NPC npc = Main.npc[index];
                if (npc.CanBeChasedBy((object) this, false) && (double) this.Distance(npc.Center) < 800.0)
                    npcList.Add(npc);
            }

            Vector2 center = this.Center;
            Vector2 vector2_1 = Vector2.Zero;
            if (npcList.Count > 0)
            {
                NPC npc = npcList[Main.rand.Next(npcList.Count)];
                center = npc.Center;
                vector2_1 = npc.velocity;
            }

            int num = Main.rand.Next(2) * 2 - 1;
            Vector2 vector2_2 = new Vector2((float) num * (4f + (float) Main.rand.Next(3)), 0.0f);
            Vector2 position = center + new Vector2((float) (-num * 120), 0.0f);
            Vector2 velocity = vector2_2 + (center + vector2_1 * 15f - position).SafeNormalize(Vector2.Zero) * 2f;
            Projectile.NewProjectile(position, velocity, 700, this.damage, 0.0f, this.owner, 0.0f, 0.0f);
        }

        private void CutTiles()
        {
            if (!this.CanCutTiles())
                return;
            int num1 = (int) ((double) this.position.X / 16.0);
            int num2 = (int) (((double) this.position.X + (double) this.width) / 16.0) + 1;
            int num3 = (int) ((double) this.position.Y / 16.0);
            int num4 = (int) (((double) this.position.Y + (double) this.height) / 16.0) + 1;
            if (num1 < 0)
                num1 = 0;
            if (num2 > Main.maxTilesX)
                num2 = Main.maxTilesX;
            if (num3 < 0)
                num3 = 0;
            if (num4 > Main.maxTilesY)
                num4 = Main.maxTilesY;
            AchievementsHelper.CurrentlyMining = true;
            for (int index1 = num1; index1 < num2; ++index1)
            {
                for (int index2 = num3; index2 < num4; ++index2)
                {
                    if (Main.tile[index1, index2] != null && Main.tileCut[(int) Main.tile[index1, index2].type] &&
                        WorldGen.CanCutTile(index1, index2, TileCuttingContext.AttackProjectile))
                    {
                        WorldGen.KillTile(index1, index2, false, false, false);
                        if (Main.netMode != 0)
                            NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) index1, (float) index2, 0.0f,
                                0, 0, 0);
                    }
                }
            }

            if (this.type == 461 || this.type == 632 || this.type == 642)
            {
                DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
                Utils.PlotTileLine(this.Center, this.Center + this.velocity * this.localAI[1],
                    (float) this.width * this.scale, new Utils.PerLinePoint(DelegateMethods.CutTiles));
            }
            else if (this.type == 611)
            {
                DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
                Utils.PlotTileLine(this.Center, this.Center + this.velocity, (float) this.width * this.scale,
                    new Utils.PerLinePoint(DelegateMethods.CutTiles));
            }
            else if (this.type == 697 || this.type == 707)
            {
                float num5 = 40f;
                if (this.type == 707)
                    num5 = 60f;
                float f = this.rotation - 0.7853982f * (float) Math.Sign(this.velocity.X);
                DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
                Utils.PlotTileLine(this.Center + f.ToRotationVector2() * -num5,
                    this.Center + f.ToRotationVector2() * num5, (float) this.width * this.scale,
                    new Utils.PerLinePoint(DelegateMethods.CutTiles));
            }

            AchievementsHelper.CurrentlyMining = false;
        }

        private bool CanCutTiles()
        {
            if (this.aiStyle == 45 || this.aiStyle == 137 || (this.aiStyle == 92 || this.aiStyle == 105) ||
                (this.aiStyle == 106 || this.type == 463 || (this.type == 69 || this.type == 70)) ||
                (this.type == 621 || this.type == 10 || (this.type == 11 || this.type == 379) ||
                 (this.type == 407 || this.type == 476 || this.type == 623)))
                return false;
            if (this.type >= 625)
                return this.type > 628;
            return true;
        }

        public bool Colliding(Microsoft.Xna.Framework.Rectangle myRect, Microsoft.Xna.Framework.Rectangle targetRect)
        {
            if (this.type == 598 && targetRect.Width > 8 && targetRect.Height > 8)
                targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
            else if (this.type == 614 && targetRect.Width > 8 && targetRect.Height > 8)
                targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
            else if (this.type == 636 && targetRect.Width > 8 && targetRect.Height > 8)
                targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
            else if (this.type == 607)
            {
                myRect.X += (int) this.velocity.X;
                myRect.Y += (int) this.velocity.Y;
            }
            else if (this.type == 661)
            {
                if ((double) Vector2.Distance(myRect.Center.ToVector2(), targetRect.Center.ToVector2()) > 500.0 ||
                    !Collision.CanHitLine(myRect.Center.ToVector2(), 0, 0, targetRect.Center.ToVector2(), 0, 0))
                    return false;
            }
            else if (this.aiStyle == 137)
                return myRect.Intersects(targetRect) &&
                       (double) targetRect.Distance(this.Center) < (double) (this.height / 2 - 20) &&
                       (this.AI_137_CanHit(targetRect.Center.ToVector2()) ||
                        this.AI_137_CanHit(targetRect.TopLeft() + new Vector2((float) (targetRect.Width / 2), 0.0f)));

            if (myRect.Intersects(targetRect))
                return true;
            if (this.type == 461)
            {
                float collisionPoint = 0.0f;
                if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center,
                    this.Center + this.velocity * this.localAI[1], 22f * this.scale, ref collisionPoint))
                    return true;
            }
            else if (this.type == 697 || this.type == 707)
            {
                float f = this.rotation - 0.7853982f * (float) Math.Sign(this.velocity.X);
                float collisionPoint = 0.0f;
                float num = 50f;
                if (this.type == 707)
                    num = 110f;
                if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(),
                    this.Center + f.ToRotationVector2() * -num, this.Center + f.ToRotationVector2() * num,
                    23f * this.scale, ref collisionPoint))
                    return true;
            }
            else if (this.type == 699)
            {
                float f = (float) ((double) this.rotation - 0.785398185253143 * (double) Math.Sign(this.velocity.X) +
                                   (this.spriteDirection == -1 ? 3.14159274101257 : 0.0));
                float collisionPoint = 0.0f;
                float num = -95f;
                if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center,
                    this.Center + f.ToRotationVector2() * num, 23f * this.scale, ref collisionPoint))
                    return true;
            }
            else if (this.type == 642)
            {
                float collisionPoint = 0.0f;
                if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center,
                    this.Center + this.velocity * this.localAI[1], 30f * this.scale, ref collisionPoint))
                    return true;
            }
            else if (this.type == 632)
            {
                float collisionPoint = 0.0f;
                if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center,
                    this.Center + this.velocity * this.localAI[1], 22f * this.scale, ref collisionPoint))
                    return true;
            }
            else if (this.type == 455)
            {
                float collisionPoint = 0.0f;
                if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center,
                    this.Center + this.velocity * this.localAI[1], 36f * this.scale, ref collisionPoint))
                    return true;
            }
            else if (this.type == 611)
            {
                float collisionPoint = 0.0f;
                if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center,
                    this.Center + this.velocity, 16f * this.scale, ref collisionPoint))
                    return true;
            }
            else if (this.type == 684)
            {
                float collisionPoint = 0.0f;
                Vector2 vector2 =
                    this.velocity.SafeNormalize(Vector2.UnitY).RotatedBy(-1.57079637050629, new Vector2()) * this.scale;
                if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(),
                    this.Center - vector2 * 40f, this.Center + vector2 * 40f, 16f * this.scale, ref collisionPoint))
                    return true;
            }
            else if (this.type == 537)
            {
                float collisionPoint = 0.0f;
                if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center,
                    this.Center + this.velocity * this.localAI[1], 22f * this.scale, ref collisionPoint))
                    return true;
            }
            else if (this.type == 687)
            {
                float collisionPoint = 0.0f;
                float num1 = this.ai[0] / 25f;
                if ((double) num1 > 1.0)
                    num1 = 1f;
                float num2 = (float) (((double) this.ai[0] - 38.0) / 40.0);
                if ((double) num2 < 0.0)
                    num2 = 0.0f;
                Vector2 lineStart = this.Center + this.rotation.ToRotationVector2() * 400f * num2;
                Vector2 lineEnd = this.Center + this.rotation.ToRotationVector2() * 400f * num1;
                if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), lineStart, lineEnd,
                    40f * this.scale, ref collisionPoint))
                    return true;
            }
            else if (this.type == 466 || this.type == 580 || this.type == 686)
            {
                for (int index = 0;
                    index < this.oldPos.Length &&
                    ((double) this.oldPos[index].X != 0.0 || (double) this.oldPos[index].Y != 0.0);
                    ++index)
                {
                    myRect.X = (int) this.oldPos[index].X;
                    myRect.Y = (int) this.oldPos[index].Y;
                    if (myRect.Intersects(targetRect))
                        return true;
                }
            }
            else if (this.type == 711)
            {
                if (this.penetrate != -1)
                {
                    for (int index = 0;
                        index < this.oldPos.Length &&
                        ((double) this.oldPos[index].X != 0.0 || (double) this.oldPos[index].Y != 0.0);
                        ++index)
                    {
                        myRect.X = (int) this.oldPos[index].X;
                        myRect.Y = (int) this.oldPos[index].Y;
                        if (myRect.Intersects(targetRect))
                            return true;
                    }
                }
            }
            else if (this.type == 464 && (double) this.ai[1] != 1.0)
            {
                Vector2 spinningpoint =
                    new Vector2(0.0f, -720f).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                    (float) ((double) this.ai[0] % 45.0 / 45.0);
                for (int index = 0; index < 6; ++index)
                {
                    float num = (float) ((double) index * 6.28318548202515 / 6.0);
                    if (Utils.CenteredRectangle(this.Center + spinningpoint.RotatedBy((double) num, new Vector2()),
                        new Vector2(30f, 30f)).Intersects(targetRect))
                        return true;
                }
            }

            return false;
        }

        public void ProjLight()
        {
            if ((double) this.light <= 0.0)
                return;
            float R = this.light;
            float G = this.light;
            float B = this.light;
            if (this.type == 446)
            {
                R *= 0.0f;
                B *= 0.8f;
            }
            else if (this.type == 493 || this.type == 494)
                G *= 0.3f;
            else if (this.type == 332)
            {
                B *= 0.1f;
                G *= 0.6f;
            }
            else if (this.type == 259)
                B *= 0.1f;
            else if (this.type == 329)
            {
                B *= 0.1f;
                G *= 0.9f;
            }
            else if (this.type == 2 || this.type == 82)
            {
                G *= 0.75f;
                B *= 0.55f;
            }
            else if (this.type == 172)
            {
                G *= 0.55f;
                R *= 0.35f;
            }
            else if (this.type == 308)
            {
                G *= 0.7f;
                R *= 0.1f;
            }
            else if (this.type == 304)
            {
                G *= 0.2f;
                B *= 0.1f;
            }
            else if (this.type == 263)
            {
                G *= 0.7f;
                R *= 0.1f;
            }
            else if (this.type == 274)
            {
                G *= 0.1f;
                R *= 0.7f;
            }
            else if (this.type == 254)
                R *= 0.1f;
            else if (this.type == 94)
            {
                R *= 0.5f;
                G *= 0.0f;
            }
            else if (this.type == 95 || this.type == 96 || (this.type == 103 || this.type == 104))
            {
                R *= 0.35f;
                G *= 1f;
                B *= 0.0f;
            }
            else if (this.type == 4)
            {
                G *= 0.1f;
                R *= 0.5f;
            }
            else if (this.type == 257)
            {
                G *= 0.9f;
                R *= 0.1f;
            }
            else if (this.type == 9)
            {
                G *= 0.1f;
                B *= 0.6f;
            }
            else if (this.type == 488)
            {
                R = 0.3f;
                B = 0.25f;
                G = 0.0f;
            }
            else if (this.type == 92)
            {
                G *= 0.6f;
                R *= 0.8f;
            }
            else if (this.type == 93)
            {
                G *= 1f;
                R *= 1f;
                B *= 0.01f;
            }
            else if (this.type == 12)
            {
                R *= 0.9f;
                G *= 0.8f;
                B *= 0.1f;
            }
            else if (this.type == 14 || this.type == 110 || (this.type == 180 || this.type == 242) || this.type == 302)
            {
                G *= 0.7f;
                B *= 0.1f;
            }
            else if (this.type == 15)
            {
                G *= 0.4f;
                B *= 0.1f;
                R = 1f;
            }
            else if (this.type == 16)
            {
                R *= 0.1f;
                G *= 0.4f;
                B = 1f;
            }
            else if (this.type == 18)
            {
                G *= 0.1f;
                R *= 0.6f;
            }
            else if (this.type == 19)
            {
                G *= 0.5f;
                B *= 0.1f;
            }
            else if (this.type == 20)
            {
                R *= 0.1f;
                B *= 0.3f;
            }
            else if (this.type == 22)
            {
                R = 0.0f;
                G = 0.0f;
            }
            else if (this.type == 27)
            {
                R *= 0.0f;
                G *= 0.3f;
                B = 1f;
            }
            else if (this.type == 34)
            {
                G *= 0.1f;
                B *= 0.1f;
            }
            else if (this.type == 36)
            {
                R = 0.8f;
                G *= 0.2f;
                B *= 0.6f;
            }
            else if (this.type == 41)
            {
                G *= 0.8f;
                B *= 0.6f;
            }
            else if (this.type == 44 || this.type == 45)
            {
                B = 1f;
                R *= 0.6f;
                G *= 0.1f;
            }
            else if (this.type == 50)
            {
                R *= 0.7f;
                B *= 0.8f;
            }
            else if (this.type == 515)
            {
                G *= 0.6f;
                B *= 0.85f;
            }
            else if (this.type == 53)
            {
                R *= 0.7f;
                G *= 0.8f;
            }
            else if (this.type == 473)
            {
                R *= 1.05f;
                G *= 0.95f;
                B *= 0.55f;
            }
            else if (this.type == 72)
            {
                R *= 0.45f;
                G *= 0.75f;
                B = 1f;
            }
            else if (this.type == 86)
            {
                R *= 1f;
                G *= 0.45f;
                B = 0.75f;
            }
            else if (this.type == 87)
            {
                R *= 0.45f;
                G = 1f;
                B *= 0.75f;
            }
            else if (this.type == 73)
            {
                R *= 0.4f;
                G *= 0.6f;
                B *= 1f;
            }
            else if (this.type == 74)
            {
                R *= 1f;
                G *= 0.4f;
                B *= 0.6f;
            }
            else if (this.type == 284)
            {
                R *= 1f;
                G *= 0.1f;
                B *= 0.8f;
            }
            else if (this.type == 285)
            {
                R *= 0.1f;
                G *= 0.5f;
                B *= 1f;
            }
            else if (this.type == 286)
            {
                R *= 1f;
                G *= 0.5f;
                B *= 0.1f;
            }
            else if (this.type == 287)
            {
                R *= 0.9f;
                G *= 1f;
                B *= 0.4f;
            }
            else if (this.type == 283)
            {
                R *= 0.8f;
                G *= 0.1f;
            }
            else if (this.type == 76 || this.type == 77 || this.type == 78)
            {
                R *= 1f;
                G *= 0.3f;
                B *= 0.6f;
            }
            else if (this.type == 79)
            {
                R = (float) Main.DiscoR / (float) byte.MaxValue;
                G = (float) Main.DiscoG / (float) byte.MaxValue;
                B = (float) Main.DiscoB / (float) byte.MaxValue;
            }
            else if (this.type == 80)
            {
                R *= 0.0f;
                G *= 0.8f;
                B *= 1f;
            }
            else if (this.type == 83 || this.type == 88)
            {
                R *= 0.7f;
                G *= 0.0f;
                B *= 1f;
            }
            else if (this.type == 100)
            {
                R *= 1f;
                G *= 0.5f;
                B *= 0.0f;
            }
            else if (this.type == 84 || this.type == 389)
            {
                R *= 0.8f;
                G *= 0.0f;
                B *= 0.5f;
            }
            else if (this.type == 89 || this.type == 90)
            {
                G *= 0.2f;
                B *= 1f;
                R *= 0.05f;
            }
            else if (this.type == 106)
            {
                R *= 0.0f;
                G *= 0.5f;
                B *= 1f;
            }
            else if (this.type == 113)
            {
                R *= 0.25f;
                G *= 0.75f;
                B *= 1f;
            }
            else if (this.type == 114 || this.type == 115)
            {
                R *= 0.5f;
                G *= 0.05f;
                B *= 1f;
            }
            else if (this.type == 116)
                B *= 0.25f;
            else if (this.type == 131)
            {
                R *= 0.1f;
                G *= 0.4f;
            }
            else if (this.type == 132 || this.type == 157)
            {
                R *= 0.2f;
                B *= 0.6f;
            }
            else if (this.type == 156)
            {
                R *= 1f;
                B *= 0.6f;
                G = 0.0f;
            }
            else if (this.type == 173)
            {
                R *= 0.3f;
                B *= 1f;
                G = 0.4f;
            }
            else if (this.type == 207)
            {
                R *= 0.4f;
                B *= 0.4f;
            }
            else if (this.type == 253)
            {
                R = 0.0f;
                G *= 0.4f;
            }
            else if (this.type == 211)
            {
                R *= 0.5f;
                G *= 0.9f;
                B *= 1f;
                this.light = (double) this.localAI[0] != 0.0 ? 1f : 1.5f;
            }
            else if (this.type == 209)
            {
                float num1 = (float) (((double) byte.MaxValue - (double) this.alpha) / (double) byte.MaxValue);
                float num2 = R * 0.3f;
                float num3 = G * 0.4f;
                B = B * 1.75f * num1;
                R = num2 * num1;
                G = num3 * num1;
            }
            else if (this.type == 226 || this.type == 227 | this.type == 229)
            {
                R *= 0.25f;
                G *= 1f;
                B *= 0.5f;
            }
            else if (this.type == 251)
            {
                float num1 = (float) Main.DiscoR / (float) byte.MaxValue;
                float num2 = (float) Main.DiscoG / (float) byte.MaxValue;
                float num3 = (float) Main.DiscoB / (float) byte.MaxValue;
                float num4 = (float) (((double) num1 + 1.0) / 2.0);
                float num5 = (float) (((double) num2 + 1.0) / 2.0);
                float num6 = (float) (((double) num3 + 1.0) / 2.0);
                R = num4 * this.light;
                G = num5 * this.light;
                B = num6 * this.light;
            }
            else if (this.type == 278 || this.type == 279)
            {
                R *= 1f;
                G *= 1f;
                B *= 0.0f;
            }

            Lighting.AddLight((int) (((double) this.position.X + (double) (this.width / 2)) / 16.0),
                (int) (((double) this.position.Y + (double) (this.height / 2)) / 16.0), R, G, B);
        }

        public Microsoft.Xna.Framework.Rectangle getRect()
        {
            return new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width,
                this.height);
        }

        public void Update(int i)
        {
            if (!this.active)
                return;
            this.numUpdates = this.extraUpdates;
            while (this.numUpdates >= 0)
            {
                --this.numUpdates;
                if (this.type == 640 && (double) this.ai[1] > 0.0)
                {
                    --this.ai[1];
                }
                else
                {
                    if ((double) this.position.X <= (double) Main.leftWorld ||
                        (double) this.position.X + (double) this.width >= (double) Main.rightWorld ||
                        ((double) this.position.Y <= (double) Main.topWorld ||
                         (double) this.position.Y + (double) this.height >= (double) Main.bottomWorld))
                    {
                        this.active = false;
                        return;
                    }

                    if (this.type != 344 && !this.npcProj)
                    {
                        if (Main.player[this.owner].frostBurn && (this.melee || this.ranged) &&
                            (this.friendly && !this.hostile &&
                             (!this.noEnchantments && Main.rand.Next(2 * (1 + this.extraUpdates)) == 0)))
                        {
                            int index = Dust.NewDust(this.position, this.width, this.height, 135,
                                this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100,
                                new Color(), 2f);
                            Main.dust[index].noGravity = true;
                            Main.dust[index].velocity *= 0.7f;
                            Main.dust[index].velocity.Y -= 0.5f;
                        }

                        if (this.melee && Main.player[this.owner].meleeEnchant > (byte) 0 && !this.noEnchantments)
                        {
                            if (Main.player[this.owner].meleeEnchant == (byte) 1 && Main.rand.Next(3) == 0)
                            {
                                int index = Dust.NewDust(this.position, this.width, this.height, 171, 0.0f, 0.0f, 100,
                                    new Color(), 1f);
                                Main.dust[index].noGravity = true;
                                Main.dust[index].fadeIn = 1.5f;
                                Main.dust[index].velocity *= 0.25f;
                            }

                            if (Main.player[this.owner].meleeEnchant == (byte) 1)
                            {
                                if (Main.rand.Next(3) == 0)
                                {
                                    int index = Dust.NewDust(this.position, this.width, this.height, 171, 0.0f, 0.0f,
                                        100, new Color(), 1f);
                                    Main.dust[index].noGravity = true;
                                    Main.dust[index].fadeIn = 1.5f;
                                    Main.dust[index].velocity *= 0.25f;
                                }
                            }
                            else if (Main.player[this.owner].meleeEnchant == (byte) 2)
                            {
                                if (Main.rand.Next(2) == 0)
                                {
                                    int index = Dust.NewDust(this.position, this.width, this.height, 75,
                                        this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f,
                                        100, new Color(), 2.5f);
                                    Main.dust[index].noGravity = true;
                                    Main.dust[index].velocity *= 0.7f;
                                    Main.dust[index].velocity.Y -= 0.5f;
                                }
                            }
                            else if (Main.player[this.owner].meleeEnchant == (byte) 3)
                            {
                                if (Main.rand.Next(2) == 0)
                                {
                                    int index = Dust.NewDust(this.position, this.width, this.height, 6,
                                        this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f,
                                        100, new Color(), 2.5f);
                                    Main.dust[index].noGravity = true;
                                    Main.dust[index].velocity *= 0.7f;
                                    Main.dust[index].velocity.Y -= 0.5f;
                                }
                            }
                            else if (Main.player[this.owner].meleeEnchant == (byte) 4)
                            {
                                if (Main.rand.Next(2) == 0)
                                {
                                    int index = Dust.NewDust(this.position, this.width, this.height, 57,
                                        this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f,
                                        100, new Color(), 1.1f);
                                    Main.dust[index].noGravity = true;
                                    Main.dust[index].velocity.X /= 2f;
                                    Main.dust[index].velocity.Y /= 2f;
                                }
                            }
                            else if (Main.player[this.owner].meleeEnchant == (byte) 5)
                            {
                                if (Main.rand.Next(2) == 0)
                                {
                                    int index = Dust.NewDust(this.position, this.width, this.height, 169, 0.0f, 0.0f,
                                        100, new Color(), 1f);
                                    Main.dust[index].velocity.X += (float) this.direction;
                                    Main.dust[index].velocity.Y += 0.2f;
                                    Main.dust[index].noGravity = true;
                                }
                            }
                            else if (Main.player[this.owner].meleeEnchant == (byte) 6)
                            {
                                if (Main.rand.Next(2) == 0)
                                {
                                    int index = Dust.NewDust(this.position, this.width, this.height, 135, 0.0f, 0.0f,
                                        100, new Color(), 1f);
                                    Main.dust[index].velocity.X += (float) this.direction;
                                    Main.dust[index].velocity.Y += 0.2f;
                                    Main.dust[index].noGravity = true;
                                }
                            }
                            else if (Main.player[this.owner].meleeEnchant == (byte) 7)
                            {
                                Vector2 velocity = this.velocity;
                                if ((double) velocity.Length() > 4.0)
                                    velocity *= 4f / velocity.Length();
                                if (Main.rand.Next(20) == 0)
                                {
                                    int index = Dust.NewDust(this.position, this.width, this.height,
                                        Main.rand.Next(139, 143), velocity.X, velocity.Y, 0, new Color(), 1.2f);
                                    Main.dust[index].velocity.X *=
                                        (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                                    Main.dust[index].velocity.Y *=
                                        (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                                    Main.dust[index].velocity.X += (float) Main.rand.Next(-50, 51) * 0.05f;
                                    Main.dust[index].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.05f;
                                    Main.dust[index].scale *=
                                        (float) (1.0 + (double) Main.rand.Next(-30, 31) * 0.00999999977648258);
                                }

                                if (Main.rand.Next(40) == 0)
                                {
                                    int Type = Main.rand.Next(276, 283);
                                    int index = Gore.NewGore(this.position, velocity, Type, 1f);
                                    Main.gore[index].velocity.X *=
                                        (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                                    Main.gore[index].velocity.Y *=
                                        (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                                    Main.gore[index].scale *=
                                        (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.00999999977648258);
                                    Main.gore[index].velocity.X += (float) Main.rand.Next(-50, 51) * 0.05f;
                                    Main.gore[index].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.05f;
                                }
                            }
                            else if (Main.player[this.owner].meleeEnchant == (byte) 8 && Main.rand.Next(4) == 0)
                            {
                                int index = Dust.NewDust(this.position, this.width, this.height, 46, 0.0f, 0.0f, 100,
                                    new Color(), 1f);
                                Main.dust[index].noGravity = true;
                                Main.dust[index].fadeIn = 1.5f;
                                Main.dust[index].velocity *= 0.25f;
                            }
                        }

                        if (this.melee && Main.player[this.owner].magmaStone &&
                            (!this.noEnchantments && Main.rand.Next(3) != 0))
                        {
                            int index = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y - 4f),
                                this.width + 8, this.height + 8, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100,
                                new Color(), 2f);
                            if (Main.rand.Next(2) == 0)
                                Main.dust[index].scale = 1.5f;
                            Main.dust[index].noGravity = true;
                            Main.dust[index].velocity.X *= 2f;
                            Main.dust[index].velocity.Y *= 2f;
                        }
                    }

                    if (this.minion && this.numUpdates == -1 && (this.type != 625 && this.type != 628))
                    {
                        this.minionPos = Main.player[this.owner].numMinions;
                        if ((double) Main.player[this.owner].slotsMinions + (double) this.minionSlots >
                            (double) Main.player[this.owner].maxMinions && this.owner == Main.myPlayer)
                        {
                            if (this.type == 627 || this.type == 626)
                            {
                                int byUuid = Projectile.GetByUUID(this.owner, this.ai[0]);
                                if (byUuid != -1)
                                {
                                    Projectile projectile1 = Main.projectile[byUuid];
                                    if (projectile1.type != 625)
                                        projectile1.localAI[1] = this.localAI[1];
                                    Projectile projectile2 = Main.projectile[(int) this.localAI[1]];
                                    projectile2.ai[0] = this.ai[0];
                                    projectile2.ai[1] = 1f;
                                    projectile2.netUpdate = true;
                                }
                            }

                            this.Kill();
                        }
                        else
                        {
                            ++Main.player[this.owner].numMinions;
                            Main.player[this.owner].slotsMinions += this.minionSlots;
                        }
                    }

                    float num1 = (float) (1.0 + (double) Math.Abs(this.velocity.X) / 3.0);
                    if ((double) this.gfxOffY > 0.0)
                    {
                        this.gfxOffY -= num1 * this.stepSpeed;
                        if ((double) this.gfxOffY < 0.0)
                            this.gfxOffY = 0.0f;
                    }
                    else if ((double) this.gfxOffY < 0.0)
                    {
                        this.gfxOffY += num1 * this.stepSpeed;
                        if ((double) this.gfxOffY > 0.0)
                            this.gfxOffY = 0.0f;
                    }

                    if ((double) this.gfxOffY > 16.0)
                        this.gfxOffY = 16f;
                    if ((double) this.gfxOffY < -16.0)
                        this.gfxOffY = -16f;
                    Vector2 velocity1 = this.velocity;
                    this.oldVelocity = this.velocity;
                    this.whoAmI = i;
                    if (this.soundDelay > 0)
                        --this.soundDelay;
                    this.netUpdate = false;
                    for (int index = 0; index < (int) byte.MaxValue; ++index)
                    {
                        if (this.playerImmune[index] > 0)
                            --this.playerImmune[index];
                    }

                    if (this.usesLocalNPCImmunity)
                    {
                        for (int index = 0; index < 200; ++index)
                        {
                            if (this.localNPCImmunity[index] > 0)
                                --this.localNPCImmunity[index];
                        }
                    }

                    this.AI();
                    if (this.owner < (int) byte.MaxValue && !Main.player[this.owner].active)
                        this.Kill();
                    if (this.type == 242 || this.type == 302 || this.type == 638)
                        this.wet = false;
                    if (!this.ignoreWater)
                    {
                        bool flag1;
                        bool flag2;
                        try
                        {
                            flag1 = Collision.LavaCollision(this.position, this.width, this.height);
                            flag2 = Collision.WetCollision(this.position, this.width, this.height);
                            if (flag1)
                                this.lavaWet = true;
                            if (Collision.honey)
                                this.honeyWet = true;
                        }
                        catch
                        {
                            this.active = false;
                            return;
                        }

                        if (this.wet && !this.lavaWet)
                        {
                            if (this.type == 85 || this.type == 15 || (this.type == 34 || this.type == 188))
                                this.Kill();
                            if (this.type == 2)
                            {
                                this.type = 1;
                                this.light = 0.0f;
                            }
                        }

                        if (this.type == 80)
                        {
                            flag2 = false;
                            this.wet = false;
                            if (flag1 && (double) this.ai[0] >= 0.0)
                                this.Kill();
                        }

                        if (flag2)
                        {
                            if (this.type != 155 && this.wetCount == (byte) 0 && !this.wet)
                            {
                                if (!flag1)
                                {
                                    if (this.honeyWet)
                                    {
                                        for (int index1 = 0; index1 < 10; ++index1)
                                        {
                                            int index2 =
                                                Dust.NewDust(
                                                    new Vector2(this.position.X - 6f,
                                                        (float) ((double) this.position.Y + (double) (this.height / 2) -
                                                                 8.0)), this.width + 12, 24, 152, 0.0f, 0.0f, 0,
                                                    new Color(), 1f);
                                            --Main.dust[index2].velocity.Y;
                                            Main.dust[index2].velocity.X *= 2.5f;
                                            Main.dust[index2].scale = 1.3f;
                                            Main.dust[index2].alpha = 100;
                                            Main.dust[index2].noGravity = true;
                                        }

                                        Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                                    }
                                    else
                                    {
                                        for (int index1 = 0; index1 < 10; ++index1)
                                        {
                                            int index2 = Dust.NewDust(
                                                new Vector2(this.position.X - 6f,
                                                    (float) ((double) this.position.Y + (double) (this.height / 2) -
                                                             8.0)), this.width + 12, 24, Dust.dustWater(), 0.0f, 0.0f,
                                                0, new Color(), 1f);
                                            Main.dust[index2].velocity.Y -= 4f;
                                            Main.dust[index2].velocity.X *= 2.5f;
                                            Main.dust[index2].scale = 1.3f;
                                            Main.dust[index2].alpha = 100;
                                            Main.dust[index2].noGravity = true;
                                        }

                                        Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                                    }
                                }
                                else
                                {
                                    for (int index1 = 0; index1 < 10; ++index1)
                                    {
                                        int index2 =
                                            Dust.NewDust(
                                                new Vector2(this.position.X - 6f,
                                                    (float) ((double) this.position.Y + (double) (this.height / 2) -
                                                             8.0)), this.width + 12, 24, 35, 0.0f, 0.0f, 0, new Color(),
                                                1f);
                                        Main.dust[index2].velocity.Y -= 1.5f;
                                        Main.dust[index2].velocity.X *= 2.5f;
                                        Main.dust[index2].scale = 1.3f;
                                        Main.dust[index2].alpha = 100;
                                        Main.dust[index2].noGravity = true;
                                    }

                                    Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                                }
                            }

                            this.wet = true;
                        }
                        else if (this.wet)
                        {
                            this.wet = false;
                            if (this.type == 155)
                                this.velocity.Y *= 0.5f;
                            else if (this.wetCount == (byte) 0)
                            {
                                this.wetCount = (byte) 10;
                                if (!this.lavaWet)
                                {
                                    if (this.honeyWet)
                                    {
                                        for (int index1 = 0; index1 < 10; ++index1)
                                        {
                                            int index2 =
                                                Dust.NewDust(
                                                    new Vector2(this.position.X - 6f,
                                                        (float) ((double) this.position.Y + (double) (this.height / 2) -
                                                                 8.0)), this.width + 12, 24, 152, 0.0f, 0.0f, 0,
                                                    new Color(), 1f);
                                            --Main.dust[index2].velocity.Y;
                                            Main.dust[index2].velocity.X *= 2.5f;
                                            Main.dust[index2].scale = 1.3f;
                                            Main.dust[index2].alpha = 100;
                                            Main.dust[index2].noGravity = true;
                                        }

                                        Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                                    }
                                    else
                                    {
                                        for (int index1 = 0; index1 < 10; ++index1)
                                        {
                                            int index2 =
                                                Dust.NewDust(
                                                    new Vector2(this.position.X - 6f,
                                                        this.position.Y + (float) (this.height / 2)), this.width + 12,
                                                    24, Dust.dustWater(), 0.0f, 0.0f, 0, new Color(), 1f);
                                            Main.dust[index2].velocity.Y -= 4f;
                                            Main.dust[index2].velocity.X *= 2.5f;
                                            Main.dust[index2].scale = 1.3f;
                                            Main.dust[index2].alpha = 100;
                                            Main.dust[index2].noGravity = true;
                                        }

                                        Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                                    }
                                }
                                else
                                {
                                    for (int index1 = 0; index1 < 10; ++index1)
                                    {
                                        int index2 =
                                            Dust.NewDust(
                                                new Vector2(this.position.X - 6f,
                                                    (float) ((double) this.position.Y + (double) (this.height / 2) -
                                                             8.0)), this.width + 12, 24, 35, 0.0f, 0.0f, 0, new Color(),
                                                1f);
                                        Main.dust[index2].velocity.Y -= 1.5f;
                                        Main.dust[index2].velocity.X *= 2.5f;
                                        Main.dust[index2].scale = 1.3f;
                                        Main.dust[index2].alpha = 100;
                                        Main.dust[index2].noGravity = true;
                                    }

                                    Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                                }
                            }
                        }

                        if (!this.wet)
                        {
                            this.lavaWet = false;
                            this.honeyWet = false;
                        }

                        if (this.wetCount > (byte) 0)
                            --this.wetCount;
                    }

                    this.oldPosition = this.position;
                    this.oldDirection = this.direction;
                    int overrideWidth;
                    int overrideHeight;
                    this.HandleMovement(velocity1, out overrideWidth, out overrideHeight);
                    if ((this.aiStyle != 3 || (double) this.ai[0] != 1.0) &&
                        (this.aiStyle != 7 || (double) this.ai[0] != 1.0) &&
                        ((this.aiStyle != 13 || (double) this.ai[0] != 1.0) &&
                         (this.aiStyle != 65 && this.aiStyle != 69)) &&
                        (this.aiStyle != 114 && this.aiStyle != 123 &&
                         (this.aiStyle != 112 && !this.manualDirectionChange) &&
                         (this.aiStyle != 67 && this.aiStyle != 26 && this.aiStyle != 15)))
                    {
                        if ((double) this.velocity.X < 0.0)
                            this.direction = -1;
                        else
                            this.direction = 1;
                    }

                    if (!this.active)
                        return;
                    this.ProjLight();
                    if (!this.npcProj && this.friendly &&
                        (Main.player[this.owner].magicQuiver && this.extraUpdates < 1) && this.arrow)
                        this.extraUpdates = 1;
                    if (this.type == 2 || this.type == 82)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f,
                            0.0f, 100, new Color(), 1f);
                    else if (this.type == 172)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, 0.0f,
                            0.0f, 100, new Color(), 1f);
                    else if (this.type == 103)
                    {
                        int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                            75, 0.0f, 0.0f, 100, new Color(), 1f);
                        if (Main.rand.Next(2) == 0)
                        {
                            Main.dust[index].noGravity = true;
                            Main.dust[index].scale *= 2f;
                        }
                    }
                    else if (this.type == 278)
                    {
                        int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                            169, 0.0f, 0.0f, 100, new Color(), 1f);
                        if (Main.rand.Next(2) == 0)
                        {
                            Main.dust[index].noGravity = true;
                            Main.dust[index].scale *= 1.5f;
                        }
                    }
                    else if (this.type == 4)
                    {
                        if (Main.rand.Next(5) == 0)
                            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14,
                                0.0f, 0.0f, 150, new Color(), 1.1f);
                    }
                    else if (this.type == 5)
                    {
                        int Type;
                        switch (Main.rand.Next(3))
                        {
                            case 0:
                                Type = 15;
                                break;
                            case 1:
                                Type = 57;
                                break;
                            default:
                                Type = 58;
                                break;
                        }

                        Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X * 0.5f,
                            this.velocity.Y * 0.5f, 150, new Color(), 1.2f);
                    }

                    this.Damage();
                    if (this.type == 434 && (double) this.localAI[0] == 0.0 && this.numUpdates == 0)
                    {
                        this.extraUpdates = 1;
                        this.velocity = Vector2.Zero;
                        this.localAI[0] = 1f;
                        this.localAI[1] = 0.9999f;
                        this.netUpdate = true;
                    }

                    if (Main.netMode != 1 && (this.type == 99 || this.type == 444))
                        Collision.SwitchTiles(this.position, this.width, this.height, this.oldPosition, 3);
                    if (ProjectileID.Sets.TrailingMode[this.type] == 0)
                    {
                        for (int index = this.oldPos.Length - 1; index > 0; --index)
                            this.oldPos[index] = this.oldPos[index - 1];
                        this.oldPos[0] = this.position;
                    }
                    else if (ProjectileID.Sets.TrailingMode[this.type] == 1)
                    {
                        if (this.frameCounter == 0 || this.oldPos[0] == Vector2.Zero)
                        {
                            for (int index = this.oldPos.Length - 1; index > 0; --index)
                                this.oldPos[index] = this.oldPos[index - 1];
                            this.oldPos[0] = this.position;
                            if (this.velocity == Vector2.Zero && this.type == 466)
                            {
                                float num2 = (float) ((double) this.rotation + 1.57079637050629 +
                                                      (Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.57079637050629);
                                float num3 = (float) (Main.rand.NextDouble() * 2.0 + 2.0);
                                Vector2 vector2 = new Vector2((float) Math.Cos((double) num2) * num3,
                                    (float) Math.Sin((double) num2) * num3);
                                int index = Dust.NewDust(this.oldPos[this.oldPos.Length - 1], 0, 0, 229, vector2.X,
                                    vector2.Y, 0, new Color(), 1f);
                                Main.dust[index].noGravity = true;
                                Main.dust[index].scale = 1.7f;
                            }

                            if (this.velocity == Vector2.Zero && this.type == 580)
                            {
                                float num2 = (float) ((double) this.rotation + 1.57079637050629 +
                                                      (Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.57079637050629);
                                float num3 = (float) (Main.rand.NextDouble() * 2.0 + 2.0);
                                Vector2 vector2 = new Vector2((float) Math.Cos((double) num2) * num3,
                                    (float) Math.Sin((double) num2) * num3);
                                int index = Dust.NewDust(this.oldPos[this.oldPos.Length - 1], 0, 0, 229, vector2.X,
                                    vector2.Y, 0, new Color(), 1f);
                                Main.dust[index].noGravity = true;
                                Main.dust[index].scale = 1.7f;
                            }
                        }
                    }
                    else if (ProjectileID.Sets.TrailingMode[this.type] == 2)
                    {
                        for (int index = this.oldPos.Length - 1; index > 0; --index)
                        {
                            this.oldPos[index] = this.oldPos[index - 1];
                            this.oldRot[index] = this.oldRot[index - 1];
                            this.oldSpriteDirection[index] = this.oldSpriteDirection[index - 1];
                        }

                        this.oldPos[0] = this.position;
                        this.oldRot[0] = this.rotation;
                        this.oldSpriteDirection[0] = this.spriteDirection;
                    }

                    if (ProjectileID.Sets.IsADD2Turret[this.type] && DD2Event.Ongoing)
                        ++this.timeLeft;
                    --this.timeLeft;
                    if (this.timeLeft <= 0)
                        this.Kill();
                    if (this.penetrate == 0)
                        this.Kill();
                    if (this.active && this.owner == Main.myPlayer)
                    {
                        if (this.netUpdate2)
                            this.netUpdate = true;
                        if (!this.active)
                            this.netSpam = 0;
                        if (this.netUpdate)
                        {
                            if (this.netSpam < 60)
                            {
                                this.netSpam += 5;
                                NetMessage.SendData(27, -1, -1, (NetworkText) null, i, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                                this.netUpdate2 = false;
                            }
                            else
                                this.netUpdate2 = true;
                        }

                        if (this.netSpam > 0)
                            --this.netSpam;
                    }
                }
            }

            this.netUpdate = false;
        }

        private void HandleMovement(Vector2 wetVelocity, out int overrideWidth, out int overrideHeight)
        {
            bool flag1 = false;
            overrideWidth = -1;
            overrideHeight = -1;
            bool flag2 = false;
            bool? nullable1 = ProjectileID.Sets.ForcePlateDetection[this.type];
            bool flag3 = nullable1.HasValue && !nullable1.Value;
            bool flag4 = nullable1.HasValue && nullable1.Value;
            if (this.tileCollide)
            {
                Vector2 velocity1 = this.velocity;
                bool flag5 = true;
                Vector2? nullable2 = new Vector2?();
                if (Main.projPet[this.type])
                {
                    flag5 = false;
                    if ((double) Main.player[this.owner].position.Y + (double) Main.player[this.owner].height - 12.0 >
                        (double) this.position.Y + (double) this.height)
                        flag5 = true;
                }

                if (this.type == 500)
                {
                    flag5 = false;
                    if ((double) Main.player[this.owner].Bottom.Y > (double) this.Bottom.Y + 4.0)
                        flag5 = true;
                }

                if (this.type == 653)
                {
                    flag5 = false;
                    if ((double) Main.player[this.owner].Bottom.Y > (double) this.Bottom.Y + 4.0)
                        flag5 = true;
                }

                if (this.aiStyle == 62)
                    flag5 = true;
                if (this.aiStyle == 66)
                    flag5 = true;
                if (this.type == 317)
                    flag5 = true;
                if (this.type == 373)
                    flag5 = true;
                if (this.aiStyle == 53)
                    flag5 = false;
                if (this.type == 9 || this.type == 12 || (this.type == 15 || this.type == 13) ||
                    (this.type == 31 || this.type == 39 || this.type == 40))
                    flag5 = false;
                if (this.type == 24)
                    flag5 = false;
                switch (this.type)
                {
                    case 663:
                    case 665:
                    case 667:
                    case 677:
                    case 678:
                    case 679:
                    case 688:
                    case 689:
                    case 690:
                    case 691:
                    case 692:
                    case 693:
                        flag5 = false;
                        break;
                }

                if (this.aiStyle == 29 || this.type == 28 || this.aiStyle == 49)
                {
                    overrideWidth = this.width - 8;
                    overrideHeight = this.height - 8;
                }
                else if (this.type == 250 || this.type == 267 || (this.type == 297 || this.type == 323) ||
                         (this.type == 3 || this.type == 711))
                {
                    overrideWidth = 6;
                    overrideHeight = 6;
                }
                else if (this.type == 308)
                {
                    overrideWidth = 26;
                    overrideHeight = this.height;
                }
                else if (this.type == 663 || this.type == 665 || (this.type == 667 || this.type == 677) ||
                         (this.type == 678 || this.type == 679 || (this.type == 691 || this.type == 692)) ||
                         this.type == 693)
                {
                    overrideWidth = 16;
                    overrideHeight = this.height;
                }
                else if (this.type == 688 || this.type == 689 || this.type == 690)
                {
                    overrideWidth = 16;
                    overrideHeight = this.height;
                    nullable2 = new Vector2?(new Vector2(0.5f, 1f));
                }
                else if (this.type == 669 || this.type == 706)
                {
                    overrideWidth = 10;
                    overrideHeight = 10;
                }
                else if (this.type == 261 || this.type == 277)
                {
                    overrideWidth = 26;
                    overrideHeight = 26;
                }
                else if (this.type == 481 || this.type == 491 || (this.type == 106 || this.type == 262) ||
                         (this.type == 271 || this.type == 270 || (this.type == 272 || this.type == 273)) ||
                         (this.type == 274 || this.type == 280 || (this.type == 288 || this.type == 301) ||
                          (this.type == 320 || this.type == 333 || (this.type == 335 || this.type == 343))) ||
                         (this.type == 344 || this.type == 497 || (this.type == 496 || this.type == 6) ||
                          (this.type == 19 || this.type == 113 || (this.type == 52 || this.type == 520)) ||
                          (this.type == 523 || this.type == 585 || (this.type == 598 || this.type == 599) ||
                           this.type == 636)))
                {
                    overrideWidth = 10;
                    overrideHeight = 10;
                }
                else if (this.type == 514)
                {
                    overrideWidth = 4;
                    overrideHeight = 4;
                }
                else if (this.type == 248 || this.type == 247 || (this.type == 507 || this.type == 508) ||
                         (this.type == 662 || this.type == 680 || this.type == 685))
                {
                    overrideWidth = this.width - 12;
                    overrideHeight = this.height - 12;
                }
                else if (this.aiStyle == 18 || this.type == 254)
                {
                    overrideWidth = this.width - 36;
                    overrideHeight = this.height - 36;
                }
                else if (this.type == 182 || this.type == 190 || (this.type == 33 || this.type == 229) ||
                         (this.type == 237 || this.type == 243))
                {
                    overrideWidth = this.width - 20;
                    overrideHeight = this.height - 20;
                }
                else if (this.aiStyle == 27)
                {
                    overrideWidth = this.width - 12;
                    overrideHeight = this.height - 12;
                }
                else if (this.type == 533 && (double) this.ai[0] >= 6.0)
                {
                    overrideWidth = this.width + 6;
                    overrideHeight = this.height + 6;
                }
                else if (this.type == 582 || this.type == 634 || this.type == 635)
                {
                    overrideWidth = 8;
                    overrideHeight = 8;
                }
                else if (this.type == 617)
                {
                    overrideWidth = (int) (20.0 * (double) this.scale);
                    overrideHeight = (int) (20.0 * (double) this.scale);
                }

                if ((this.type != 440 && this.type != 449 && this.type != 606 || (double) this.ai[1] != 1.0) &&
                    ((this.type != 466 || (double) this.localAI[1] != 1.0) &&
                     (this.type != 580 || (double) this.localAI[1] <= 0.0) &&
                     (this.type != 640 || (double) this.localAI[1] <= 0.0)))
                {
                    if (this.aiStyle == 10)
                    {
                        if (this.type == 42 || this.type == 65 || (this.type == 68 || this.type == 354) ||
                            this.type == 31 && (double) this.ai[0] == 2.0)
                            this.velocity = Collision.TileCollision(this.position, this.velocity, this.width,
                                this.height, flag5, flag5, 1);
                        else
                            this.velocity = Collision.AnyCollision(this.position, this.velocity, this.width,
                                this.height, true);
                    }
                    else
                    {
                        Vector2 Position = this.position;
                        int num1 = overrideWidth != -1 ? overrideWidth : this.width;
                        int num2 = overrideHeight != -1 ? overrideHeight : this.height;
                        if (overrideHeight != -1 || overrideWidth != -1)
                            Position = !nullable2.HasValue
                                ? new Vector2(this.position.X + (float) (this.width / 2) - (float) (num1 / 2),
                                    this.position.Y + (float) (this.height / 2) - (float) (num2 / 2))
                                : this.Center - new Vector2((float) num1, (float) num2) * nullable2.Value;
                        if (this.wet)
                        {
                            if (this.honeyWet)
                            {
                                Vector2 velocity2 = this.velocity;
                                this.velocity = Collision.TileCollision(Position, this.velocity, num1, num2, flag5,
                                    flag5, 1);
                                wetVelocity = this.velocity * 0.25f;
                                if ((double) this.velocity.X != (double) velocity2.X)
                                    wetVelocity.X = this.velocity.X;
                                if ((double) this.velocity.Y != (double) velocity2.Y)
                                    wetVelocity.Y = this.velocity.Y;
                            }
                            else
                            {
                                Vector2 velocity2 = this.velocity;
                                this.velocity = Collision.TileCollision(Position, this.velocity, num1, num2, flag5,
                                    flag5, 1);
                                wetVelocity = this.velocity * 0.5f;
                                if ((double) this.velocity.X != (double) velocity2.X)
                                    wetVelocity.X = this.velocity.X;
                                if ((double) this.velocity.Y != (double) velocity2.Y)
                                    wetVelocity.Y = this.velocity.Y;
                            }
                        }
                        else
                        {
                            int num3 = Math.Min(num1, num2);
                            if (num3 < 3)
                                num3 = 3;
                            if (num3 > 16)
                                num3 = 16;
                            if ((double) this.velocity.Length() > (double) num3)
                            {
                                Vector2 vector2_1 = Collision.TileCollision(Position, this.velocity, num1, num2, flag5,
                                    flag5, 1);
                                float num4 = this.velocity.Length();
                                float num5 = (float) num3;
                                Vector2 vector2_2 = Vector2.Normalize(this.velocity);
                                if ((double) vector2_1.Y == 0.0)
                                    vector2_2.Y = 0.0f;
                                Vector2 zero1 = Vector2.Zero;
                                Vector2 zero2 = Vector2.Zero;
                                Vector2 zero3 = Vector2.Zero;
                                int num6 = 0;
                                while ((double) num4 > 0.0)
                                {
                                    ++num6;
                                    if (num6 <= 300)
                                    {
                                        Vector2 oldPosition = Position;
                                        float num7 = num4;
                                        if ((double) num7 > (double) num5)
                                            num7 = num5;
                                        num4 -= num7;
                                        Vector2 Velocity = vector2_2 * num7;
                                        Vector2 vector2_3 = Collision.TileCollision(Position, Velocity, num1, num2,
                                            flag5, flag5, 1);
                                        Position += vector2_3;
                                        this.velocity = vector2_3;
                                        if (!Main.projPet[this.type])
                                        {
                                            Vector4 vector4 = Collision.SlopeCollision(Position, this.velocity, num1,
                                                num2, 0.0f, true);
                                            Vector2 vector2_4 = this.position - Position;
                                            if ((double) Position.X != (double) vector4.X)
                                                flag1 = true;
                                            if ((double) Position.Y != (double) vector4.Y)
                                                flag1 = true;
                                            if ((double) this.velocity.X != (double) vector4.Z)
                                                flag1 = true;
                                            if ((double) this.velocity.Y != (double) vector4.W)
                                                flag1 = true;
                                            Position.X = vector4.X;
                                            Position.Y = vector4.Y;
                                            zero3 += Position + vector2_4 - this.position;
                                            this.velocity.X = vector4.Z;
                                            this.velocity.Y = vector4.W;
                                        }

                                        flag2 = true;
                                        if (this.owner == Main.myPlayer && Position != oldPosition && !flag3)
                                            Collision.SwitchTiles(Position, num1, num2, oldPosition, 4);
                                        Vector2 velocity2 = this.velocity;
                                        zero1 += velocity2;
                                    }
                                    else
                                        break;
                                }

                                this.velocity = zero1;
                                if ((double) Math.Abs(this.velocity.X - velocity1.X) < 9.99999974737875E-05)
                                    this.velocity.X = velocity1.X;
                                if ((double) Math.Abs(this.velocity.Y - velocity1.Y) < 9.99999974737875E-05)
                                    this.velocity.Y = velocity1.Y;
                                if (!Main.projPet[this.type])
                                {
                                    Vector4 vector4 = Collision.SlopeCollision(Position, this.velocity, num1, num2,
                                        0.0f, true);
                                    Vector2 vector2_3 = this.position - Position;
                                    if ((double) Position.X != (double) vector4.X)
                                        flag1 = true;
                                    if ((double) Position.Y != (double) vector4.Y)
                                        flag1 = true;
                                    if ((double) this.velocity.X != (double) vector4.Z)
                                        flag1 = true;
                                    if ((double) this.velocity.Y != (double) vector4.W)
                                        flag1 = true;
                                    Position.X = vector4.X;
                                    Position.Y = vector4.Y;
                                    this.position = Position + vector2_3;
                                    this.velocity.X = vector4.Z;
                                    this.velocity.Y = vector4.W;
                                }
                            }
                            else
                            {
                                this.velocity = Collision.TileCollision(Position, this.velocity, num1, num2, flag5,
                                    flag5, 1);
                                if (!Main.projPet[this.type])
                                {
                                    Vector4 vector4 = Collision.SlopeCollision(Position, this.velocity, num1, num2,
                                        0.0f, true);
                                    Vector2 vector2 = this.position - Position;
                                    if ((double) Position.X != (double) vector4.X)
                                        flag1 = true;
                                    if ((double) Position.Y != (double) vector4.Y)
                                        flag1 = true;
                                    if ((double) this.velocity.X != (double) vector4.Z)
                                        flag1 = true;
                                    if ((double) this.velocity.Y != (double) vector4.W)
                                        flag1 = true;
                                    Position.X = vector4.X;
                                    Position.Y = vector4.Y;
                                    this.position = Position + vector2;
                                    this.velocity.X = vector4.Z;
                                    this.velocity.Y = vector4.W;
                                }
                            }
                        }
                    }
                }

                if (velocity1 != this.velocity)
                    flag1 = true;
                if (flag1)
                {
                    if (this.type == 663 || this.type == 665 || (this.type == 667 || this.type == 677) ||
                        (this.type == 678 || this.type == 679 || (this.type == 691 || this.type == 692)) ||
                        (this.type == 693 || this.type == 688 || (this.type == 689 || this.type == 690)))
                    {
                        Projectile projectile = this;
                        projectile.position = projectile.position + this.velocity;
                        this.velocity = Vector2.Zero;
                    }
                    else if (this.type == 434)
                    {
                        Projectile projectile = this;
                        projectile.position = projectile.position + this.velocity;
                        this.numUpdates = 0;
                    }
                    else if (this.type == 601)
                    {
                        if (this.owner == Main.myPlayer)
                            PortalHelper.TryPlacingPortal(this, velocity1, this.velocity);
                        Projectile projectile = this;
                        projectile.position = projectile.position + this.velocity;
                        this.Kill();
                    }
                    else if (this.type == 451)
                    {
                        this.ai[0] = 1f;
                        this.ai[1] = 0.0f;
                        this.netUpdate = true;
                        this.velocity = velocity1 / 2f;
                    }
                    else if (this.type == 645)
                    {
                        this.ai[0] = 0.0f;
                        this.ai[1] = -1f;
                        this.netUpdate = true;
                    }
                    else if (this.type == 584)
                    {
                        bool flag6 = false;
                        if ((double) this.velocity.X != (double) velocity1.X)
                        {
                            this.velocity.X = velocity1.X * -0.75f;
                            flag6 = true;
                        }

                        if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 2.0 ||
                            (double) this.velocity.Y == 0.0)
                        {
                            this.velocity.Y = velocity1.Y * -0.75f;
                            flag6 = true;
                        }

                        if (flag6)
                        {
                            float num = velocity1.Length() / this.velocity.Length();
                            if ((double) num == 0.0)
                                num = 1f;
                            Projectile projectile = this;
                            projectile.velocity = projectile.velocity / num;
                            --this.penetrate;
                        }
                    }
                    else if (this.type == 532)
                    {
                        bool flag6 = false;
                        if ((double) this.velocity.X != (double) velocity1.X)
                        {
                            this.velocity.X = velocity1.X * -0.75f;
                            flag6 = true;
                        }

                        if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 2.0 ||
                            (double) this.velocity.Y == 0.0)
                        {
                            this.velocity.Y = velocity1.Y * -0.75f;
                            flag6 = true;
                        }

                        if (flag6)
                        {
                            float num = velocity1.Length() / this.velocity.Length();
                            if ((double) num == 0.0)
                                num = 1f;
                            Projectile projectile = this;
                            projectile.velocity = projectile.velocity / num;
                            --this.penetrate;
                            Collision.HitTiles(this.position, velocity1, this.width, this.height);
                        }
                    }
                    else if (this.type == 533)
                    {
                        float num1 = 1f;
                        bool flag6 = false;
                        if ((double) this.velocity.X != (double) velocity1.X)
                        {
                            this.velocity.X = velocity1.X * -num1;
                            flag6 = true;
                        }

                        if ((double) this.velocity.Y != (double) velocity1.Y || (double) this.velocity.Y == 0.0)
                        {
                            this.velocity.Y = (float) ((double) velocity1.Y * -(double) num1 * 0.5);
                            flag6 = true;
                        }

                        if (flag6)
                        {
                            float num2 = velocity1.Length() / this.velocity.Length();
                            if ((double) num2 == 0.0)
                                num2 = 1f;
                            Projectile projectile = this;
                            projectile.velocity = projectile.velocity / num2;
                            if ((double) this.ai[0] == 7.0 && (double) this.velocity.Y < -0.1)
                                this.velocity.Y += 0.1f;
                            if ((double) this.ai[0] >= 6.0 && (double) this.ai[0] < 9.0)
                                Collision.HitTiles(this.position, velocity1, this.width, this.height);
                        }
                    }
                    else if (this.type == 502)
                    {
                        ++this.ai[0];
                        Main.PlaySound(37, (int) this.position.X, (int) this.position.Y, 5 + (int) this.ai[0], 1f,
                            0.0f);
                        if ((double) this.ai[0] >= 5.0)
                        {
                            Projectile projectile = this;
                            projectile.position = projectile.position + this.velocity;
                            this.Kill();
                        }
                        else
                        {
                            if ((double) this.velocity.Y != (double) velocity1.Y)
                                this.velocity.Y = -velocity1.Y;
                            if ((double) this.velocity.X != (double) velocity1.X)
                                this.velocity.X = -velocity1.X;
                        }

                        Vector2 spinningpoint = new Vector2(0.0f, -3f - this.ai[0]).RotatedByRandom(3.14159274101257);
                        float num1 = (float) (10.0 + (double) this.ai[0] * 4.0);
                        Vector2 vector2 = new Vector2(1.05f, 1f);
                        for (float num2 = 0.0f; (double) num2 < (double) num1; ++num2)
                        {
                            int index = Dust.NewDust(this.Center, 0, 0, 66, 0.0f, 0.0f, 0, Color.Transparent, 1f);
                            Main.dust[index].position = this.Center;
                            Main.dust[index].velocity =
                                spinningpoint.RotatedBy(6.28318548202515 * (double) num2 / (double) num1,
                                    new Vector2()) * vector2 *
                                (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.400000005960464);
                            Main.dust[index].color = Main.hslToRgb(num2 / num1, 1f, 0.5f);
                            Main.dust[index].noGravity = true;
                            Main.dust[index].scale = (float) (1.0 + (double) this.ai[0] / 3.0);
                        }

                        if (Main.myPlayer == this.owner)
                        {
                            int width = this.width;
                            int height = this.height;
                            int penetrate = this.penetrate;
                            this.position = this.Center;
                            this.width = this.height = 40 + 8 * (int) this.ai[0];
                            this.Center = this.position;
                            this.penetrate = -1;
                            this.Damage();
                            this.penetrate = penetrate;
                            this.position = this.Center;
                            this.width = width;
                            this.height = height;
                            this.Center = this.position;
                        }
                    }
                    else if (this.type == 653)
                    {
                        if ((double) this.velocity.Y != (double) velocity1.Y && (double) this.velocity.Y == 0.0 &&
                            ((double) velocity1.Y > 1.0 && (double) velocity1.Y < 4.0))
                            this.velocity.Y = (float) (-(double) velocity1.Y * 2.0);
                    }
                    else if (this.type == 444)
                    {
                        if ((double) this.velocity.X != (double) velocity1.X)
                            this.velocity.X = -velocity1.X;
                        if ((double) this.velocity.Y != (double) velocity1.Y)
                            this.velocity.Y = -velocity1.Y;
                        this.ai[0] = this.velocity.ToRotation();
                    }
                    else if (this.type == 617)
                    {
                        if ((double) this.velocity.X != (double) velocity1.X)
                            this.velocity.X = (float) (-(double) velocity1.X * 0.349999994039536);
                        if ((double) this.velocity.Y != (double) velocity1.Y)
                            this.velocity.Y = (float) (-(double) velocity1.Y * 0.349999994039536);
                    }
                    else if (this.type == 440 || this.type == 449 || this.type == 606)
                    {
                        if ((double) this.ai[1] != 1.0)
                        {
                            this.ai[1] = 1f;
                            Projectile projectile = this;
                            projectile.position = projectile.position + this.velocity;
                            this.velocity = velocity1;
                        }
                    }
                    else if (this.type == 466 || this.type == 580 || this.type == 640)
                    {
                        if ((double) this.localAI[1] < 1.0)
                        {
                            this.localAI[1] += 2f;
                            Projectile projectile = this;
                            projectile.position = projectile.position + this.velocity;
                            this.velocity = Vector2.Zero;
                        }
                    }
                    else if (this.aiStyle == 54)
                    {
                        if ((double) this.velocity.X != (double) velocity1.X)
                            this.velocity.X = velocity1.X * -0.6f;
                        if ((double) this.velocity.Y != (double) velocity1.Y)
                            this.velocity.Y = velocity1.Y * -0.6f;
                    }
                    else if (!Main.projPet[this.type] && this.type != 500 && this.type != 650)
                    {
                        if (this.aiStyle == 99)
                        {
                            if (this.type >= 556 && this.type <= 561)
                            {
                                bool flag6 = false;
                                if ((double) this.velocity.X != (double) velocity1.X)
                                {
                                    flag6 = true;
                                    this.velocity.X = velocity1.X * -1f;
                                }

                                if ((double) this.velocity.Y != (double) velocity1.Y)
                                {
                                    flag6 = true;
                                    this.velocity.Y = velocity1.Y * -1f;
                                }

                                if (flag6)
                                {
                                    Vector2 vector2 = Main.player[this.owner].Center - this.Center;
                                    vector2.Normalize();
                                    vector2 *= this.velocity.Length();
                                    vector2 *= 0.25f;
                                    Projectile projectile1 = this;
                                    projectile1.velocity = projectile1.velocity * 0.75f;
                                    Projectile projectile2 = this;
                                    projectile2.velocity = projectile2.velocity + vector2;
                                    if ((double) this.velocity.Length() > 6.0)
                                    {
                                        Projectile projectile3 = this;
                                        projectile3.velocity = projectile3.velocity * 0.5f;
                                    }
                                }
                            }
                        }
                        else if (this.type == 604)
                        {
                            if ((double) this.velocity.X != (double) velocity1.X)
                                this.velocity.X = -velocity1.X;
                            if ((double) this.velocity.Y != (double) velocity1.Y)
                                this.velocity.Y = -velocity1.Y;
                        }
                        else if (this.type == 379)
                        {
                            if ((double) this.velocity.X != (double) velocity1.X)
                                this.velocity.X = velocity1.X * -0.6f;
                            if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 2.0)
                                this.velocity.Y = velocity1.Y * -0.6f;
                        }
                        else if (this.type == 491)
                        {
                            if ((double) this.ai[0] <= 0.0)
                                this.ai[0] = -10f;
                            if ((double) this.velocity.X != (double) velocity1.X &&
                                (double) Math.Abs(velocity1.X) > 0.0)
                                this.velocity.X = velocity1.X * -1f;
                            if ((double) this.velocity.Y != (double) velocity1.Y &&
                                (double) Math.Abs(velocity1.Y) > 0.0)
                                this.velocity.Y = velocity1.Y * -1f;
                        }
                        else if (this.type >= 515 && this.type <= 517 || this.type == 637)
                        {
                            if ((double) this.velocity.X != (double) velocity1.X &&
                                (double) Math.Abs(velocity1.X) > 1.0)
                                this.velocity.X = velocity1.X * -0.9f;
                            if ((double) this.velocity.Y != (double) velocity1.Y &&
                                (double) Math.Abs(velocity1.Y) > 1.0)
                                this.velocity.Y = velocity1.Y * -0.9f;
                        }
                        else if (this.type == 681)
                            this.timeLeft = 4;
                        else if (this.type == 409)
                        {
                            if ((double) this.velocity.X != (double) velocity1.X)
                                this.velocity.X = velocity1.X * -1f;
                            if ((double) this.velocity.Y != (double) velocity1.Y)
                                this.velocity.Y = velocity1.Y * -1f;
                        }
                        else if (this.type == 254)
                        {
                            this.tileCollide = false;
                            this.velocity = velocity1;
                            if (this.timeLeft > 30)
                                this.timeLeft = 30;
                        }
                        else if (this.type == 225 && this.penetrate > 0)
                        {
                            this.velocity.X = -velocity1.X;
                            this.velocity.Y = -velocity1.Y;
                            --this.penetrate;
                        }
                        else if (this.type == 155)
                        {
                            if ((double) this.ai[1] > 10.0)
                            {
                                NetworkText text = NetworkText.FromKey("Game.BallBounceResult",
                                    (object) NetworkText.FromKey(Lang.GetProjectileName(this.type).Key),
                                    (object) this.ai[1]);
                                switch (Main.netMode)
                                {
                                    case 0:
                                        Main.NewText(text.ToString(), byte.MaxValue, (byte) 240, (byte) 20, false);
                                        break;
                                    case 2:
                                        NetMessage.BroadcastChatMessage(text, new Color((int) byte.MaxValue, 240, 20),
                                            -1);
                                        break;
                                }
                            }

                            this.ai[1] = 0.0f;
                            if ((double) this.velocity.X != (double) velocity1.X)
                                this.velocity.X = velocity1.X * -0.6f;
                            if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 2.0)
                                this.velocity.Y = velocity1.Y * -0.6f;
                        }
                        else if (this.aiStyle == 33)
                        {
                            if ((double) this.localAI[0] == 0.0)
                            {
                                if (this.wet)
                                {
                                    Projectile projectile = this;
                                    projectile.position = projectile.position + velocity1 / 2f;
                                }
                                else
                                {
                                    Projectile projectile = this;
                                    projectile.position = projectile.position + velocity1;
                                }

                                Projectile projectile1 = this;
                                projectile1.velocity = projectile1.velocity * 0.0f;
                                this.localAI[0] = 1f;
                            }
                        }
                        else if (this.type != 308 && this.type != 377)
                        {
                            if (this.type == 477)
                            {
                                if ((double) this.velocity.Y != (double) velocity1.Y ||
                                    (double) this.velocity.X != (double) velocity1.X)
                                {
                                    --this.penetrate;
                                    if (this.penetrate <= 0)
                                        this.Kill();
                                    if ((double) this.velocity.X != (double) velocity1.X)
                                        this.velocity.X = -velocity1.X;
                                    if ((double) this.velocity.Y != (double) velocity1.Y)
                                        this.velocity.Y = -velocity1.Y;
                                }

                                if (this.penetrate > 0 && this.owner == Main.myPlayer)
                                {
                                    int[] numArray = new int[10];
                                    int maxValue = 0;
                                    int num1 = 700;
                                    int num2 = 20;
                                    for (int index = 0; index < 200; ++index)
                                    {
                                        if (Main.npc[index].CanBeChasedBy((object) this, false))
                                        {
                                            float num3 = (this.Center - Main.npc[index].Center).Length();
                                            if ((double) num3 > (double) num2 && (double) num3 < (double) num1 &&
                                                Collision.CanHitLine(this.Center, 1, 1, Main.npc[index].Center, 1, 1))
                                            {
                                                numArray[maxValue] = index;
                                                ++maxValue;
                                                if (maxValue >= 9)
                                                    break;
                                            }
                                        }
                                    }

                                    if (maxValue > 0)
                                    {
                                        int index = Main.rand.Next(maxValue);
                                        Vector2 vector2 = Main.npc[numArray[index]].Center - this.Center;
                                        float num3 = this.velocity.Length();
                                        vector2.Normalize();
                                        this.velocity = vector2 * num3;
                                        this.netUpdate = true;
                                    }
                                }
                            }
                            else if (this.type == 94)
                            {
                                if ((double) this.velocity.X != (double) velocity1.X)
                                    this.velocity.X = -velocity1.X;
                                if ((double) this.velocity.Y != (double) velocity1.Y)
                                    this.velocity.Y = -velocity1.Y;
                            }
                            else if (this.type == 496)
                            {
                                if ((double) this.velocity.X != (double) velocity1.X)
                                {
                                    if ((double) Math.Abs(this.velocity.X) < 1.0)
                                        this.velocity.X = -velocity1.X;
                                    else
                                        this.Kill();
                                }

                                if ((double) this.velocity.Y != (double) velocity1.Y)
                                {
                                    if ((double) Math.Abs(this.velocity.Y) < 1.0)
                                        this.velocity.Y = -velocity1.Y;
                                    else
                                        this.Kill();
                                }
                            }
                            else if (this.type == 311)
                            {
                                if ((double) this.velocity.X != (double) velocity1.X)
                                {
                                    this.velocity.X = -velocity1.X;
                                    ++this.ai[1];
                                }

                                if ((double) this.velocity.Y != (double) velocity1.Y)
                                {
                                    this.velocity.Y = -velocity1.Y;
                                    ++this.ai[1];
                                }

                                if ((double) this.ai[1] > 4.0)
                                    this.Kill();
                            }
                            else if (this.type == 312)
                            {
                                if ((double) this.velocity.X != (double) velocity1.X)
                                {
                                    this.velocity.X = -velocity1.X;
                                    ++this.ai[1];
                                }

                                if ((double) this.velocity.Y != (double) velocity1.Y)
                                {
                                    this.velocity.Y = -velocity1.Y;
                                    ++this.ai[1];
                                }
                            }
                            else if (this.type == 522 || this.type == 620)
                            {
                                if ((double) this.velocity.X != (double) velocity1.X)
                                    this.velocity.X = -velocity1.X;
                                if ((double) this.velocity.Y != (double) velocity1.Y)
                                    this.velocity.Y = -velocity1.Y;
                            }
                            else if (this.type == 524)
                            {
                                this.ai[0] += 100f;
                                if ((double) this.velocity.X != (double) velocity1.X)
                                    this.velocity.X = -velocity1.X;
                                if ((double) this.velocity.Y != (double) velocity1.Y)
                                    this.velocity.Y = -velocity1.Y;
                            }
                            else if (this.aiStyle == 93)
                            {
                                if (this.velocity != velocity1)
                                {
                                    this.ai[1] = 0.0f;
                                    this.ai[0] = 1f;
                                    this.netUpdate = true;
                                    this.tileCollide = false;
                                    Projectile projectile1 = this;
                                    projectile1.position = projectile1.position + this.velocity;
                                    this.velocity = velocity1;
                                    this.velocity.Normalize();
                                    Projectile projectile2 = this;
                                    projectile2.velocity = projectile2.velocity * 3f;
                                }
                            }
                            else if (this.type == 281)
                            {
                                if ((double) (Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y)) < 2.0 ||
                                    (double) this.ai[1] == 2.0)
                                {
                                    this.ai[1] = 2f;
                                }
                                else
                                {
                                    if ((double) this.velocity.X != (double) velocity1.X)
                                        this.velocity.X = (float) (-(double) velocity1.X * 0.5);
                                    if ((double) this.velocity.Y != (double) velocity1.Y)
                                        this.velocity.Y = (float) (-(double) velocity1.Y * 0.5);
                                }
                            }
                            else if (this.type == 290 || this.type == 294)
                            {
                                if ((double) this.velocity.X != (double) velocity1.X)
                                {
                                    this.position.X += this.velocity.X;
                                    this.velocity.X = -velocity1.X;
                                }

                                if ((double) this.velocity.Y != (double) velocity1.Y)
                                {
                                    this.position.Y += this.velocity.Y;
                                    this.velocity.Y = -velocity1.Y;
                                }
                            }
                            else if ((this.type == 181 || this.type == 189 || (this.type == 357 || this.type == 566)) &&
                                     this.penetrate > 0)
                            {
                                if (this.type == 357)
                                    this.damage = (int) ((double) this.damage * 0.9);
                                --this.penetrate;
                                if ((double) this.velocity.X != (double) velocity1.X)
                                    this.velocity.X = -velocity1.X;
                                if ((double) this.velocity.Y != (double) velocity1.Y)
                                    this.velocity.Y = -velocity1.Y;
                            }
                            else if (this.type == 307 && (double) this.ai[1] < 5.0)
                            {
                                ++this.ai[1];
                                if ((double) this.velocity.X != (double) velocity1.X)
                                    this.velocity.X = -velocity1.X;
                                if ((double) this.velocity.Y != (double) velocity1.Y)
                                    this.velocity.Y = -velocity1.Y;
                            }
                            else if (this.type == 99)
                            {
                                if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 5.0)
                                {
                                    Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                                    this.velocity.Y = (float) (-(double) velocity1.Y * 0.200000002980232);
                                }

                                if ((double) this.velocity.X != (double) velocity1.X)
                                    this.Kill();
                            }
                            else if (this.type == 444)
                            {
                                if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 5.0)
                                {
                                    Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                                    this.velocity.Y = (float) (-(double) velocity1.Y * 0.200000002980232);
                                }

                                if ((double) this.velocity.X != (double) velocity1.X)
                                    this.Kill();
                            }
                            else if (this.type == 36)
                            {
                                if (this.penetrate > 1)
                                {
                                    Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                                    Main.PlaySound(SoundID.Item10, this.position);
                                    --this.penetrate;
                                    if ((double) this.velocity.X != (double) velocity1.X)
                                        this.velocity.X = -velocity1.X;
                                    if ((double) this.velocity.Y != (double) velocity1.Y)
                                        this.velocity.Y = -velocity1.Y;
                                }
                                else
                                    this.Kill();
                            }
                            else if (this.aiStyle == 21)
                            {
                                if ((double) this.velocity.X != (double) velocity1.X)
                                    this.velocity.X = -velocity1.X;
                                if ((double) this.velocity.Y != (double) velocity1.Y)
                                    this.velocity.Y = -velocity1.Y;
                            }
                            else if (this.aiStyle == 17)
                            {
                                if ((double) this.velocity.X != (double) velocity1.X)
                                    this.velocity.X = velocity1.X * -0.75f;
                                if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 1.5)
                                    this.velocity.Y = velocity1.Y * -0.7f;
                            }
                            else if (this.aiStyle == 15)
                            {
                                bool flag6 = false;
                                if ((double) velocity1.X != (double) this.velocity.X)
                                {
                                    if ((double) Math.Abs(velocity1.X) > 4.0)
                                        flag6 = true;
                                    this.position.X += this.velocity.X;
                                    this.velocity.X = (float) (-(double) velocity1.X * 0.200000002980232);
                                }

                                if ((double) velocity1.Y != (double) this.velocity.Y)
                                {
                                    if ((double) Math.Abs(velocity1.Y) > 4.0)
                                        flag6 = true;
                                    this.position.Y += this.velocity.Y;
                                    this.velocity.Y = (float) (-(double) velocity1.Y * 0.200000002980232);
                                }

                                this.ai[0] = 1f;
                                if (flag6)
                                {
                                    this.netUpdate = true;
                                    Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                                }

                                if (this.wet)
                                    wetVelocity = this.velocity;
                            }
                            else if (this.aiStyle == 39)
                            {
                                Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                                if (this.type == 33 || this.type == 106)
                                {
                                    if ((double) this.velocity.X != (double) velocity1.X)
                                        this.velocity.X = -velocity1.X;
                                    if ((double) this.velocity.Y != (double) velocity1.Y)
                                        this.velocity.Y = -velocity1.Y;
                                }
                                else
                                {
                                    this.ai[0] = 1f;
                                    if (this.aiStyle == 3)
                                    {
                                        this.velocity.X = -velocity1.X;
                                        this.velocity.Y = -velocity1.Y;
                                    }
                                }

                                this.netUpdate = true;
                                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                            }
                            else if (this.aiStyle == 3 || this.aiStyle == 13 ||
                                     (this.aiStyle == 69 || this.aiStyle == 109))
                            {
                                Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                                if (this.type == 33 || this.type == 106)
                                {
                                    if ((double) this.velocity.X != (double) velocity1.X)
                                        this.velocity.X = -velocity1.X;
                                    if ((double) this.velocity.Y != (double) velocity1.Y)
                                        this.velocity.Y = -velocity1.Y;
                                }
                                else
                                {
                                    this.ai[0] = 1f;
                                    if ((this.aiStyle == 3 || this.aiStyle == 109) && this.type != 383)
                                    {
                                        this.velocity.X = -velocity1.X;
                                        this.velocity.Y = -velocity1.Y;
                                    }
                                }

                                this.netUpdate = true;
                                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                            }
                            else if (this.aiStyle == 8 && this.type != 96)
                            {
                                Main.PlaySound(SoundID.Item10, this.position);
                                ++this.ai[0];
                                if ((double) this.ai[0] >= 5.0 && this.type != 253 ||
                                    this.type == 253 && (double) this.ai[0] >= 8.0)
                                {
                                    Projectile projectile = this;
                                    projectile.position = projectile.position + this.velocity;
                                    this.Kill();
                                }
                                else
                                {
                                    if (this.type == 15 && (double) this.velocity.Y > 4.0)
                                    {
                                        if ((double) this.velocity.Y != (double) velocity1.Y)
                                            this.velocity.Y = (float) (-(double) velocity1.Y * 0.800000011920929);
                                    }
                                    else if ((double) this.velocity.Y != (double) velocity1.Y)
                                        this.velocity.Y = -velocity1.Y;

                                    if ((double) this.velocity.X != (double) velocity1.X)
                                        this.velocity.X = -velocity1.X;
                                }
                            }
                            else if (this.aiStyle == 61)
                            {
                                if ((double) this.velocity.X != (double) velocity1.X)
                                    this.velocity.X = velocity1.X * -0.3f;
                                if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 1.0)
                                    this.velocity.Y = velocity1.Y * -0.3f;
                            }
                            else if (this.aiStyle == 14)
                            {
                                if (this.type == 261 &&
                                    ((double) this.velocity.X != (double) velocity1.X &&
                                     ((double) velocity1.X < -3.0 || (double) velocity1.X > 3.0) ||
                                     (double) this.velocity.Y != (double) velocity1.Y &&
                                     ((double) velocity1.Y < -3.0 || (double) velocity1.Y > 3.0)))
                                {
                                    Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                                    Main.PlaySound(0, (int) this.Center.X, (int) this.Center.Y, 1, 1f, 0.0f);
                                }

                                if (this.type >= 326 && this.type <= 328 &&
                                    (double) this.velocity.X != (double) velocity1.X)
                                    this.velocity.X = velocity1.X * -0.1f;
                                if (this.type >= 400 && this.type <= 402)
                                {
                                    if ((double) this.velocity.X != (double) velocity1.X)
                                        this.velocity.X = velocity1.X * -0.1f;
                                }
                                else if (this.type == 50)
                                {
                                    if ((double) this.velocity.X != (double) velocity1.X)
                                        this.velocity.X = velocity1.X * -0.2f;
                                    if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 1.5)
                                        this.velocity.Y = velocity1.Y * -0.2f;
                                }
                                else if (this.type == 185)
                                {
                                    if ((double) this.velocity.X != (double) velocity1.X)
                                        this.velocity.X = velocity1.X * -0.9f;
                                    if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 1.0)
                                        this.velocity.Y = velocity1.Y * -0.9f;
                                }
                                else if (this.type == 277)
                                {
                                    if ((double) this.velocity.X != (double) velocity1.X)
                                        this.velocity.X = velocity1.X * -0.9f;
                                    if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 3.0)
                                        this.velocity.Y = velocity1.Y * -0.9f;
                                }
                                else if (this.type != 480)
                                {
                                    if (this.type == 450)
                                    {
                                        if ((double) this.velocity.X != (double) velocity1.X)
                                            this.velocity.X = velocity1.X * -0.1f;
                                    }
                                    else
                                    {
                                        if ((double) this.velocity.X != (double) velocity1.X)
                                            this.velocity.X = velocity1.X * -0.5f;
                                        if ((double) this.velocity.Y != (double) velocity1.Y &&
                                            (double) velocity1.Y > 1.0)
                                            this.velocity.Y = velocity1.Y * -0.5f;
                                    }
                                }
                            }
                            else if (this.aiStyle == 16)
                            {
                                if ((double) this.velocity.X != (double) velocity1.X)
                                {
                                    this.velocity.X = velocity1.X * -0.4f;
                                    if (this.type == 29)
                                        this.velocity.X *= 0.8f;
                                }

                                if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 0.7 &&
                                    this.type != 102)
                                {
                                    this.velocity.Y = velocity1.Y * -0.4f;
                                    if (this.type == 29)
                                        this.velocity.Y *= 0.8f;
                                }

                                if (this.type == 134 || this.type == 137 || (this.type == 140 || this.type == 143) ||
                                    (this.type == 303 || this.type >= 338 && this.type <= 341))
                                {
                                    Projectile projectile = this;
                                    projectile.velocity = projectile.velocity * 0.0f;
                                    this.alpha = (int) byte.MaxValue;
                                    this.timeLeft = 3;
                                }
                            }
                            else if (this.aiStyle == 68)
                            {
                                Projectile projectile = this;
                                projectile.velocity = projectile.velocity * 0.0f;
                                this.alpha = (int) byte.MaxValue;
                                this.timeLeft = 3;
                            }
                            else if (this.aiStyle != 9 || this.owner == Main.myPlayer)
                            {
                                Projectile projectile = this;
                                projectile.position = projectile.position + this.velocity;
                                this.Kill();
                            }
                        }
                    }
                }
            }

            this.UpdatePosition(wetVelocity);
            if (flag2 || flag3 || this.owner != Main.myPlayer ||
                (!this.tileCollide && !flag4 || !(this.position != this.oldPosition)))
                return;
            Vector2 Position1 = this.position;
            Vector2 oldPosition1 = this.oldPosition;
            int Width = overrideWidth != -1 ? overrideWidth : this.width;
            int Height = overrideHeight != -1 ? overrideHeight : this.height;
            if (overrideHeight != -1 || overrideWidth != -1)
            {
                Position1 = new Vector2(this.position.X + (float) (this.width / 2) - (float) (Width / 2),
                    this.position.Y + (float) (this.height / 2) - (float) (Height / 2));
                oldPosition1 = new Vector2(this.oldPosition.X + (float) (this.width / 2) - (float) (Width / 2),
                    this.oldPosition.Y + (float) (this.height / 2) - (float) (Height / 2));
            }

            Collision.SwitchTiles(Position1, Width, Height, oldPosition1, 4);
        }

        private void UpdatePosition(Vector2 wetVelocity)
        {
            if (this.aiStyle == 4 || this.aiStyle == 38 || this.aiStyle == 84 ||
                this.aiStyle == 7 && (double) this.ai[0] == 2.0 ||
                (this.type == 440 || this.type == 449 || this.type == 606) && (double) this.ai[1] == 1.0 ||
                (this.aiStyle == 93 && (double) this.ai[0] < 0.0 || this.type == 540))
                return;
            if (this.wet)
            {
                Projectile projectile = this;
                projectile.position = projectile.position + wetVelocity;
            }
            else
            {
                Projectile projectile = this;
                projectile.position = projectile.position + this.velocity;
            }

            if (!Main.projPet[this.type] || !this.tileCollide)
                return;
            Vector4 vector4 =
                Collision.SlopeCollision(this.position, this.velocity, this.width, this.height, 0.0f, false);
            this.position.X = vector4.X;
            this.position.Y = vector4.Y;
            this.velocity.X = vector4.Z;
            this.velocity.Y = vector4.W;
        }

        public void FishingCheck()
        {
            int index = (int) ((double) this.Center.X / 16.0);
            int j1 = (int) ((double) this.Center.Y / 16.0);
            if (Main.tile[index, j1].liquid < (byte) 0)
                ++j1;
            bool flag1 = false;
            bool flag2 = false;
            int i1 = index;
            int i2 = index;
            while (i1 > 10 && Main.tile[i1, j1].liquid > (byte) 0 && !WorldGen.SolidTile(i1, j1))
                --i1;
            while (i2 < Main.maxTilesX - 10 && Main.tile[i2, j1].liquid > (byte) 0 && !WorldGen.SolidTile(i2, j1))
                ++i2;
            int num1 = 0;
            for (int i3 = i1; i3 <= i2; ++i3)
            {
                int j2 = j1;
                while (Main.tile[i3, j2].liquid > (byte) 0 && !WorldGen.SolidTile(i3, j2) && j2 < Main.maxTilesY - 10)
                {
                    ++num1;
                    ++j2;
                    if (Main.tile[i3, j2].lava())
                        flag1 = true;
                    else if (Main.tile[i3, j2].honey())
                        flag2 = true;
                }
            }

            if (flag2)
                num1 = (int) ((double) num1 * 1.5);
            if (num1 < 75)
            {
                Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.NotEnoughWater");
            }
            else
            {
                int num2 = Main.player[this.owner].FishingLevel();
                if (num2 == 0)
                    return;
                Main.player[this.owner].displayedFishingInfo =
                    Language.GetTextValue("GameUI.FishingPower", (object) num2);
                if (num2 < 0)
                {
                    if (num2 != -1)
                        return;
                    Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.FishingWarning");
                    if (index >= 380 && index <= Main.maxTilesX - 380 || (num1 <= 1000 || NPC.AnyNPCs(370)))
                        return;
                    this.ai[1] = (float) (Main.rand.Next(-180, -60) - 100);
                    this.localAI[1] = (float) num2;
                    this.netUpdate = true;
                }
                else
                {
                    int num3 = 300;
                    float num4 = (float) (Main.maxTilesX / 4200);
                    float num5 = (float) (((double) this.position.Y / 16.0 - (60.0 + 10.0 * (double) (num4 * num4))) /
                                          (Main.worldSurface / 6.0));
                    if ((double) num5 < 0.25)
                        num5 = 0.25f;
                    if ((double) num5 > 1.0)
                        num5 = 1f;
                    int num6 = (int) ((double) num3 * (double) num5);
                    float num7 = (float) num1 / (float) num6;
                    if ((double) num7 < 1.0)
                        num2 = (int) ((double) num2 * (double) num7);
                    float num8 = 1f - num7;
                    if (num1 < num6)
                        Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.FullFishingPower",
                            (object) num2, (object) -Math.Round((double) num8 * 100.0));
                    int num9 = (num2 + 75) / 2;
                    if (Main.player[this.owner].wet || Main.rand.Next(100) > num9)
                        return;
                    int Type = 0;
                    int num10 = (double) j1 >= Main.worldSurface * 0.5
                        ? ((double) j1 >= Main.worldSurface
                            ? ((double) j1 >= Main.rockLayer ? (j1 >= Main.maxTilesY - 300 ? 4 : 3) : 2)
                            : 1)
                        : 0;
                    int num11 = 150;
                    int maxValue1 = num11 / num2;
                    int maxValue2 = num11 * 2 / num2;
                    int maxValue3 = num11 * 7 / num2;
                    int maxValue4 = num11 * 15 / num2;
                    int maxValue5 = num11 * 30 / num2;
                    if (maxValue1 < 2)
                        maxValue1 = 2;
                    if (maxValue2 < 3)
                        maxValue2 = 3;
                    if (maxValue3 < 4)
                        maxValue3 = 4;
                    if (maxValue4 < 5)
                        maxValue4 = 5;
                    if (maxValue5 < 6)
                        maxValue5 = 6;
                    bool flag3 = false;
                    bool flag4 = false;
                    bool flag5 = false;
                    bool flag6 = false;
                    bool flag7 = false;
                    if (Main.rand.Next(maxValue1) == 0)
                        flag3 = true;
                    if (Main.rand.Next(maxValue2) == 0)
                        flag4 = true;
                    if (Main.rand.Next(maxValue3) == 0)
                        flag5 = true;
                    if (Main.rand.Next(maxValue4) == 0)
                        flag6 = true;
                    if (Main.rand.Next(maxValue5) == 0)
                        flag7 = true;
                    int num12 = 10;
                    if (Main.player[this.owner].cratePotion)
                        num12 += 10;
                    int type = Main.anglerQuestItemNetIDs[Main.anglerQuest];
                    if (Main.player[this.owner].HasItem(type))
                        type = -1;
                    if (Main.anglerQuestFinished)
                        type = -1;
                    if (flag1)
                    {
                        if (!ItemID.Sets.CanFishInLava[Main.player[this.owner].HeldItem.type])
                            return;
                        if (flag7)
                            Type = 2331;
                        else if (flag6)
                            Type = 2312;
                        else if (flag5)
                            Type = 2315;
                    }
                    else if (flag2)
                    {
                        if (flag5 || flag4 && Main.rand.Next(2) == 0)
                            Type = 2314;
                        else if (flag4 && type == 2451)
                            Type = 2451;
                    }
                    else if (Main.rand.Next(50) > num2 && Main.rand.Next(50) > num2 && num1 < num6)
                        Type = Main.rand.Next(2337, 2340);
                    else if (Main.rand.Next(100) < num12)
                        Type = flag6 || flag7
                            ? 2336
                            : (!flag5 || !Main.player[this.owner].ZoneCorrupt
                                ? (!flag5 || !Main.player[this.owner].ZoneCrimson
                                    ? (!flag5 || !Main.player[this.owner].ZoneHoly
                                        ? (!flag5 || !Main.player[this.owner].ZoneDungeon
                                            ? (!flag5 || !Main.player[this.owner].ZoneJungle
                                                ? (!flag5 || num10 != 0 ? (!flag4 ? 2334 : 2335) : 3206)
                                                : 3208)
                                            : 3205)
                                        : 3207)
                                    : 3204)
                                : 3203);
                    else if (flag7 && Main.rand.Next(5) == 0)
                        Type = 2423;
                    else if (flag7 && Main.rand.Next(5) == 0)
                        Type = 3225;
                    else if (flag7 && Main.rand.Next(10) == 0)
                        Type = 2420;
                    else if (!flag7 && !flag6 && (flag4 && Main.rand.Next(5) == 0))
                    {
                        Type = 3196;
                    }
                    else
                    {
                        bool flag8 = Main.player[this.owner].ZoneCorrupt;
                        bool flag9 = Main.player[this.owner].ZoneCrimson;
                        if (flag8 && flag9)
                        {
                            if (Main.rand.Next(2) == 0)
                                flag9 = false;
                            else
                                flag8 = false;
                        }

                        if (flag8)
                        {
                            if (flag7 && Main.hardMode && (Main.player[this.owner].ZoneSnow && num10 == 3) &&
                                Main.rand.Next(3) != 0)
                                Type = 2429;
                            else if (flag7 && Main.hardMode && Main.rand.Next(2) == 0)
                                Type = 3210;
                            else if (flag5)
                                Type = 2330;
                            else if (flag4 && type == 2454)
                                Type = 2454;
                            else if (flag4 && type == 2485)
                                Type = 2485;
                            else if (flag4 && type == 2457)
                                Type = 2457;
                            else if (flag4)
                                Type = 2318;
                        }
                        else if (flag9)
                        {
                            if (flag7 && Main.hardMode && (Main.player[this.owner].ZoneSnow && num10 == 3) &&
                                Main.rand.Next(3) != 0)
                                Type = 2429;
                            else if (flag7 && Main.hardMode && Main.rand.Next(2) == 0)
                                Type = 3211;
                            else if (flag4 && type == 2477)
                                Type = 2477;
                            else if (flag4 && type == 2463)
                                Type = 2463;
                            else if (flag4)
                                Type = 2319;
                            else if (flag3)
                                Type = 2305;
                        }
                        else if (Main.player[this.owner].ZoneHoly)
                        {
                            if (flag7 && Main.hardMode && (Main.player[this.owner].ZoneSnow && num10 == 3) &&
                                Main.rand.Next(3) != 0)
                                Type = 2429;
                            else if (flag7 && Main.hardMode && Main.rand.Next(2) == 0)
                                Type = 3209;
                            else if (num10 > 1 && flag6)
                                Type = 2317;
                            else if (num10 > 1 && flag5 && type == 2465)
                                Type = 2465;
                            else if (num10 < 2 && flag5 && type == 2468)
                                Type = 2468;
                            else if (flag5)
                                Type = 2310;
                            else if (flag4 && type == 2471)
                                Type = 2471;
                            else if (flag4)
                                Type = 2307;
                        }

                        if (Type == 0 && Main.player[this.owner].ZoneSnow)
                        {
                            if (num10 < 2 && flag4 && type == 2467)
                                Type = 2467;
                            else if (num10 == 1 && flag4 && type == 2470)
                                Type = 2470;
                            else if (num10 >= 2 && flag4 && type == 2484)
                                Type = 2484;
                            else if (num10 > 1 && flag4 && type == 2466)
                                Type = 2466;
                            else if (flag3 && Main.rand.Next(12) == 0 || flag4 && Main.rand.Next(6) == 0)
                                Type = 3197;
                            else if (flag4)
                                Type = 2306;
                            else if (flag3)
                                Type = 2299;
                            else if (num10 > 1 && Main.rand.Next(3) == 0)
                                Type = 2309;
                        }

                        if (Type == 0 && Main.player[this.owner].ZoneJungle)
                        {
                            if (num10 == 1 && flag4 && type == 2452)
                                Type = 2452;
                            else if (num10 == 1 && flag4 && type == 2483)
                                Type = 2483;
                            else if (num10 == 1 && flag4 && type == 2488)
                                Type = 2488;
                            else if (num10 >= 1 && flag4 && type == 2486)
                                Type = 2486;
                            else if (num10 > 1 && flag4)
                                Type = 2311;
                            else if (flag4)
                                Type = 2313;
                            else if (flag3)
                                Type = 2302;
                        }

                        if (Type == 0 && Main.shroomTiles > 200 && (flag4 && type == 2475))
                            Type = 2475;
                        if (Type == 0)
                        {
                            if (num10 <= 1 && (index < 380 || index > Main.maxTilesX - 380) && num1 > 1000)
                            {
                                Type = !flag6 || Main.rand.Next(2) != 0
                                    ? (!flag6
                                        ? (!flag5 || Main.rand.Next(5) != 0
                                            ? (!flag5 || Main.rand.Next(2) != 0
                                                ? (!flag4 || type != 2480
                                                    ? (!flag4 || type != 2481
                                                        ? (!flag4
                                                            ? (!flag3 || Main.rand.Next(2) != 0
                                                                ? (!flag3 ? 2297 : 2300)
                                                                : 2301)
                                                            : 2316)
                                                        : 2481)
                                                    : 2480)
                                                : 2332)
                                            : 2438)
                                        : 2342)
                                    : 2341;
                            }
                            else
                            {
                                int sandTiles = Main.sandTiles;
                            }
                        }

                        if (Type == 0)
                            Type = num10 >= 2 || !flag4 || type != 2461
                                ? (num10 != 0 || !flag4 || type != 2453
                                    ? (num10 != 0 || !flag4 || type != 2473
                                        ? (num10 != 0 || !flag4 || type != 2476
                                            ? (num10 >= 2 || !flag4 || type != 2458
                                                ? (num10 >= 2 || !flag4 || type != 2459
                                                    ? (num10 != 0 || !flag4
                                                        ? (num10 <= 0 || num10 >= 3 || (!flag4 || type != 2455)
                                                            ? (num10 != 1 || !flag4 || type != 2479
                                                                ? (num10 != 1 || !flag4 || type != 2456
                                                                    ? (num10 != 1 || !flag4 || type != 2474
                                                                        ? (
                                                                            num10 <= 1 || !flag5 ||
                                                                            Main.rand.Next(5) != 0
                                                                                ? (num10 <= 1 || !flag7
                                                                                    ? (
                                                                                        num10 <= 1 || !flag6 ||
                                                                                        Main.rand.Next(2) != 0
                                                                                            ? (num10 <= 1 || !flag5
                                                                                                ? (
                                                                                                    num10 <= 1 ||
                                                                                                    !flag4 ||
                                                                                                    type != 2478
                                                                                                        ? (
                                                                                                            num10 <=
                                                                                                            1 ||
                                                                                                            !flag4 ||
                                                                                                            type != 2450
                                                                                                                ? (
                                                                                                                    num10 <=
                                                                                                                    1 ||
                                                                                                                    !flag4 ||
                                                                                                                    type !=
                                                                                                                    2464
                                                                                                                        ? (
                                                                                                                            num10 <=
                                                                                                                            1 ||
                                                                                                                            !flag4 ||
                                                                                                                            type !=
                                                                                                                            2469
                                                                                                                                ? (
                                                                                                                                    num10 <=
                                                                                                                                    2 ||
                                                                                                                                    !flag4 ||
                                                                                                                                    type !=
                                                                                                                                    2462
                                                                                                                                        ? (
                                                                                                                                            num10 <=
                                                                                                                                            2 ||
                                                                                                                                            !flag4 ||
                                                                                                                                            type !=
                                                                                                                                            2482
                                                                                                                                                ? (
                                                                                                                                                    num10 <=
                                                                                                                                                    2 ||
                                                                                                                                                    !flag4 ||
                                                                                                                                                    type !=
                                                                                                                                                    2472
                                                                                                                                                        ? (
                                                                                                                                                            num10 <=
                                                                                                                                                            2 ||
                                                                                                                                                            !flag4 ||
                                                                                                                                                            type !=
                                                                                                                                                            2460
                                                                                                                                                                ? (
                                                                                                                                                                    num10 <=
                                                                                                                                                                    1 ||
                                                                                                                                                                    !flag4 ||
                                                                                                                                                                    Main
                                                                                                                                                                        .rand
                                                                                                                                                                        .Next(
                                                                                                                                                                            4) ==
                                                                                                                                                                    0
                                                                                                                                                                        ? (
                                                                                                                                                                            num10 <=
                                                                                                                                                                            1 ||
                                                                                                                                                                            !flag4 &&
                                                                                                                                                                            !flag3 &&
                                                                                                                                                                            Main
                                                                                                                                                                                .rand
                                                                                                                                                                                .Next(
                                                                                                                                                                                    4) !=
                                                                                                                                                                            0
                                                                                                                                                                                ? (
                                                                                                                                                                                    !flag4 ||
                                                                                                                                                                                    type !=
                                                                                                                                                                                    2487
                                                                                                                                                                                        ? (
                                                                                                                                                                                            num1 <=
                                                                                                                                                                                            1000 ||
                                                                                                                                                                                            !flag3
                                                                                                                                                                                                ? 2290
                                                                                                                                                                                                : 2298
                                                                                                                                                                                        )
                                                                                                                                                                                        : 2487
                                                                                                                                                                                )
                                                                                                                                                                                : (
                                                                                                                                                                                    Main
                                                                                                                                                                                        .rand
                                                                                                                                                                                        .Next(
                                                                                                                                                                                            4) !=
                                                                                                                                                                                    0
                                                                                                                                                                                        ? 2309
                                                                                                                                                                                        : 2303
                                                                                                                                                                                ))
                                                                                                                                                                        : 2303
                                                                                                                                                                )
                                                                                                                                                                : 2460
                                                                                                                                                        )
                                                                                                                                                        : 2472
                                                                                                                                                )
                                                                                                                                                : 2482
                                                                                                                                        )
                                                                                                                                        : 2462
                                                                                                                                )
                                                                                                                                : 2469
                                                                                                                        )
                                                                                                                        : 2464
                                                                                                                )
                                                                                                                : 2450)
                                                                                                        : 2478)
                                                                                                : 2321)
                                                                                            : 2320)
                                                                                    : 2308)
                                                                                : (!Main.hardMode ||
                                                                                   Main.rand.Next(2) != 0
                                                                                    ? 2436
                                                                                    : 2437))
                                                                        : 2474)
                                                                    : 2456)
                                                                : 2479)
                                                            : 2455)
                                                        : 2304)
                                                    : 2459)
                                                : 2458)
                                            : 2476)
                                        : 2473)
                                    : 2453)
                                : 2461;
                    }

                    if (Type <= 0)
                        return;
                    if (Main.player[this.owner].sonarPotion)
                    {
                        Item newItem = new Item();
                        newItem.SetDefaults(Type, false);
                        newItem.position = this.position;
                        ItemText.NewText(newItem, 1, true, false);
                    }

                    float num13 = (float) num2;
                    this.ai[1] = (float) Main.rand.Next(-240, -90) - num13;
                    this.localAI[1] = (float) Type;
                    this.netUpdate = true;
                }
            }
        }

        public bool CanReflect()
        {
            return this.active && this.friendly && (!this.hostile && this.damage > 0) &&
                   (this.aiStyle == 1 || this.aiStyle == 2 || (this.aiStyle == 8 || this.aiStyle == 21) ||
                    (this.aiStyle == 24 || this.aiStyle == 28 || (this.aiStyle == 29 || this.aiStyle == 131)));
        }

        public float GetPrismHue(float indexing)
        {
            if (Main.player[this.owner].active)
            {
                switch (Main.player[this.owner].name)
                {
                    case "Tsuki":
                    case "Yoraiz0r":
                        return 0.85f;
                    case "Ghostar":
                        return 0.33f;
                    case "Devalaous":
                        return (float) (0.660000026226044 +
                                        Math.Cos(Main.time / 180.0 * 6.28318548202515) * 0.100000001490116);
                    case "Leinfors":
                        return 0.77f;
                    case "Aeroblop":
                        return (float) (0.25 + Math.Cos(Main.time / 180.0 * 6.28318548202515) * 0.100000001490116);
                    case "Doylee":
                        return 0.0f;
                    case "Darkhalis":
                    case "Arkhalis":
                        return (float) (0.75 + Math.Cos(Main.time / 180.0 * 6.28318548202515) * 0.0700000002980232);
                    case "Nike Leon":
                        return (float) (0.0750000029802322 +
                                        Math.Cos(Main.time / 180.0 * 6.28318548202515) * 0.0700000002980232);
                    case "Suweeka":
                        return (float) (0.5 + Math.Cos(Main.time / 180.0 * 6.28318548202515) * 0.180000007152557);
                    case "W1K":
                        return (float) (0.75 + Math.Cos(Main.time / 120.0 * 6.28318548202515) * 0.0500000007450581);
                    case "Grox The Great":
                        return (float) (0.310000002384186 +
                                        Math.Cos(Main.time / 120.0 * 6.28318548202515) * 0.0299999993294477);
                    case "Random":
                        return Main.rand.NextFloat();
                }
            }

            return (float) (int) indexing / 6f;
        }

        public static int GetByUUID(int owner, float uuid)
        {
            return Projectile.GetByUUID(owner, (int) uuid);
        }

        public static int GetByUUID(int owner, int uuid)
        {
            if (uuid < 0 || uuid >= 1000 || (owner < 0 || owner >= (int) byte.MaxValue))
                return -1;
            int index = Main.projectileIdentity[owner, uuid];
            if (index >= 0 && Main.projectile[index].active)
                return index;
            return -1;
        }

        public void ProjectileFixDesperation()
        {
            if (this.owner < 0 || this.owner >= 1000)
                return;
            switch (this.type)
            {
                case 461:
                case 632:
                case 642:
                case 644:
                    for (int index = 0; index < 1000; ++index)
                    {
                        if (Main.projectile[index].owner == this.owner &&
                            (double) Main.projectile[index].identity == (double) this.ai[1] &&
                            Main.projectile[index].active)
                        {
                            this.ai[1] = (float) index;
                            break;
                        }
                    }

                    break;
            }
        }

        public void AI()
        {
            Color newColor;
            Vector2 vector;
            Rectangle hitbox;
            if (aiStyle == 1)
            {
                AI_001();
            }
            else if (aiStyle == 2)
            {
                if (type == 93 && Main.rand.Next(5) == 0)
                {
                    Vector2 position = base.position;
                    int width = base.width;
                    int height = base.height;
                    float speedX = base.velocity.X * 0.2f + (float) (base.direction * 3);
                    float speedY = base.velocity.Y * 0.2f;
                    newColor = default(Color);
                    int num = Dust.NewDust(position, width, height, 57, speedX, speedY, 100, newColor, 0.3f);
                    Main.dust[num].velocity.X *= 0.3f;
                    Main.dust[num].velocity.Y *= 0.3f;
                }

                if (type == 304 && localAI[0] == 0f)
                {
                    localAI[0] += 1f;
                    alpha = 0;
                }

                if (type == 335)
                {
                    frame = (int) this.ai[1];
                }

                if (type == 510)
                {
                    rotation += Math.Abs(base.velocity.X) * 0.04f * (float) base.direction;
                }
                else
                {
                    rotation += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.03f *
                                (float) base.direction;
                }

                if (type == 162)
                {
                    if (this.ai[1] == 0f)
                    {
                        this.ai[1] = 1f;
                        Main.PlaySound(SoundID.Item14, base.position);
                    }

                    this.ai[0] += 1f;
                    if (this.ai[0] >= 18f)
                    {
                        base.velocity.Y += 0.28f;
                        base.velocity.X *= 0.99f;
                    }

                    if (this.ai[0] > 2f)
                    {
                        alpha = 0;
                        if (this.ai[0] == 3f)
                        {
                            for (int i = 0; i < 10; i++)
                            {
                                Vector2 position2 = new Vector2(base.position.X, base.position.Y);
                                int width2 = base.width;
                                int height2 = base.height;
                                newColor = default(Color);
                                int num2 = Dust.NewDust(position2, width2, height2, 31, 0f, 0f, 100, newColor, 1.5f);
                                Main.dust[num2].velocity *= 0.5f;
                                Main.dust[num2].velocity += base.velocity * 0.1f;
                            }

                            for (int j = 0; j < 5; j++)
                            {
                                Vector2 position3 = new Vector2(base.position.X, base.position.Y);
                                int width3 = base.width;
                                int height3 = base.height;
                                newColor = default(Color);
                                int num3 = Dust.NewDust(position3, width3, height3, 6, 0f, 0f, 100, newColor, 2f);
                                Main.dust[num3].noGravity = true;
                                Main.dust[num3].velocity *= 3f;
                                Main.dust[num3].velocity += base.velocity * 0.2f;
                                Vector2 position4 = new Vector2(base.position.X, base.position.Y);
                                int width4 = base.width;
                                int height4 = base.height;
                                newColor = default(Color);
                                num3 = Dust.NewDust(position4, width4, height4, 6, 0f, 0f, 100, newColor, 1f);
                                Main.dust[num3].velocity *= 2f;
                                Main.dust[num3].velocity += base.velocity * 0.3f;
                            }

                            for (int k = 0; k < 1; k++)
                            {
                                Vector2 position5 = new Vector2(base.position.X - 10f, base.position.Y - 10f);
                                vector = default(Vector2);
                                int num4 = Gore.NewGore(position5, vector, Main.rand.Next(61, 64), 1f);
                                Main.gore[num4].position += base.velocity * 1.25f;
                                Main.gore[num4].scale = 1.5f;
                                Main.gore[num4].velocity += base.velocity * 0.5f;
                                Main.gore[num4].velocity *= 0.02f;
                            }
                        }
                    }
                }
                else if (type == 281)
                {
                    if (this.ai[1] == 0f)
                    {
                        this.ai[1] = 1f;
                        Main.PlaySound(SoundID.Item14, base.position);
                    }

                    this.ai[0] += 1f;
                    if (this.ai[0] >= 18f)
                    {
                        base.velocity.Y += 0.28f;
                        base.velocity.X *= 0.99f;
                    }

                    if (this.ai[0] > 2f)
                    {
                        alpha = 0;
                        if (this.ai[0] == 3f)
                        {
                            for (int l = 0; l < 10; l++)
                            {
                                Vector2 position6 = new Vector2(base.position.X, base.position.Y);
                                int width5 = base.width;
                                int height5 = base.height;
                                newColor = default(Color);
                                int num5 = Dust.NewDust(position6, width5, height5, 31, 0f, 0f, 100, newColor, 1.5f);
                                Main.dust[num5].velocity *= 0.5f;
                                Main.dust[num5].velocity += base.velocity * 0.1f;
                            }

                            for (int m = 0; m < 5; m++)
                            {
                                Vector2 position7 = new Vector2(base.position.X, base.position.Y);
                                int width6 = base.width;
                                int height6 = base.height;
                                newColor = default(Color);
                                int num6 = Dust.NewDust(position7, width6, height6, 6, 0f, 0f, 100, newColor, 2f);
                                Main.dust[num6].noGravity = true;
                                Main.dust[num6].velocity *= 3f;
                                Main.dust[num6].velocity += base.velocity * 0.2f;
                                Vector2 position8 = new Vector2(base.position.X, base.position.Y);
                                int width7 = base.width;
                                int height7 = base.height;
                                newColor = default(Color);
                                num6 = Dust.NewDust(position8, width7, height7, 6, 0f, 0f, 100, newColor, 1f);
                                Main.dust[num6].velocity *= 2f;
                                Main.dust[num6].velocity += base.velocity * 0.3f;
                            }

                            for (int n = 0; n < 1; n++)
                            {
                                Vector2 position9 = new Vector2(base.position.X - 10f, base.position.Y - 10f);
                                vector = default(Vector2);
                                int num7 = Gore.NewGore(position9, vector, Main.rand.Next(61, 64), 1f);
                                Main.gore[num7].position += base.velocity * 1.25f;
                                Main.gore[num7].scale = 1.5f;
                                Main.gore[num7].velocity += base.velocity * 0.5f;
                                Main.gore[num7].velocity *= 0.02f;
                            }
                        }
                    }
                }
                else if (type == 240)
                {
                    if (this.ai[1] == 0f)
                    {
                        this.ai[1] = 1f;
                        Main.PlaySound(SoundID.Item14, base.position);
                    }

                    this.ai[0] += 1f;
                    if (this.ai[0] >= 16f)
                    {
                        base.velocity.Y += 0.18f;
                        base.velocity.X *= 0.991f;
                    }

                    if (this.ai[0] > 2f)
                    {
                        alpha = 0;
                        if (this.ai[0] == 3f)
                        {
                            for (int num8 = 0; num8 < 7; num8++)
                            {
                                Vector2 position10 = new Vector2(base.position.X, base.position.Y);
                                int width8 = base.width;
                                int height8 = base.height;
                                newColor = default(Color);
                                int num9 = Dust.NewDust(position10, width8, height8, 31, 0f, 0f, 100, newColor, 1.5f);
                                Main.dust[num9].velocity *= 0.5f;
                                Main.dust[num9].velocity += base.velocity * 0.1f;
                            }

                            for (int num10 = 0; num10 < 3; num10++)
                            {
                                Vector2 position11 = new Vector2(base.position.X, base.position.Y);
                                int width9 = base.width;
                                int height9 = base.height;
                                newColor = default(Color);
                                int num11 = Dust.NewDust(position11, width9, height9, 6, 0f, 0f, 100, newColor, 2f);
                                Main.dust[num11].noGravity = true;
                                Main.dust[num11].velocity *= 3f;
                                Main.dust[num11].velocity += base.velocity * 0.2f;
                                Vector2 position12 = new Vector2(base.position.X, base.position.Y);
                                int width10 = base.width;
                                int height10 = base.height;
                                newColor = default(Color);
                                num11 = Dust.NewDust(position12, width10, height10, 6, 0f, 0f, 100, newColor, 1f);
                                Main.dust[num11].velocity *= 2f;
                                Main.dust[num11].velocity += base.velocity * 0.3f;
                            }

                            for (int num12 = 0; num12 < 1; num12++)
                            {
                                Vector2 position13 = new Vector2(base.position.X - 10f, base.position.Y - 10f);
                                vector = default(Vector2);
                                int num13 = Gore.NewGore(position13, vector, Main.rand.Next(61, 64), 1f);
                                Main.gore[num13].position += base.velocity * 1.25f;
                                Main.gore[num13].scale = 1.25f;
                                Main.gore[num13].velocity += base.velocity * 0.5f;
                                Main.gore[num13].velocity *= 0.02f;
                            }
                        }
                    }
                }
                else if (type == 497)
                {
                    Vector2 position14 = new Vector2(base.position.X, base.position.Y);
                    int width11 = base.width;
                    int height11 = base.height;
                    float x = base.velocity.X;
                    float y = base.velocity.Y;
                    newColor = default(Color);
                    int num14 = Dust.NewDust(position14, width11, height11, 27, x, y, 100, newColor, 1.2f);
                    Main.dust[num14].position = (Main.dust[num14].position + base.Center) / 2f;
                    Main.dust[num14].noGravity = true;
                    Main.dust[num14].velocity *= 0.3f;
                    Main.dust[num14].velocity -= base.velocity * 0.1f;
                    this.ai[0] += 1f;
                    if (this.ai[0] >= 30f)
                    {
                        base.velocity.X *= 0.99f;
                        base.velocity.Y += 0.5f;
                    }
                    else
                    {
                        rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) + 1.57f;
                    }
                }
                else if (type == 249)
                {
                    this.ai[0] += 1f;
                    if (this.ai[0] >= 0f)
                    {
                        base.velocity.Y += 0.25f;
                    }
                }
                else if (type == 347)
                {
                    this.ai[0] += 1f;
                    if (this.ai[0] >= 5f)
                    {
                        base.velocity.Y += 0.25f;
                    }
                }
                else if (type == 501)
                {
                    this.ai[0] += 1f;
                    if (this.ai[0] >= 18f)
                    {
                        base.velocity.X *= 0.995f;
                        base.velocity.Y += 0.2f;
                    }
                }
                else if (type == 504)
                {
                    alpha = 255;
                    this.ai[0] += 1f;
                    if (this.ai[0] > 3f)
                    {
                        int num15 = 100;
                        if (this.ai[0] > 20f)
                        {
                            int num16 = 40;
                            float num17 = this.ai[0] - 20f;
                            num15 = (int) (100f * (1f - num17 / (float) num16));
                            if (num17 >= (float) num16)
                            {
                                Kill();
                            }
                        }

                        if (this.ai[0] <= 10f)
                        {
                            num15 = (int) this.ai[0] * 10;
                        }

                        if (Main.rand.Next(100) < num15)
                        {
                            Vector2 position15 = base.position;
                            int width12 = base.width;
                            int height12 = base.height;
                            newColor = default(Color);
                            int num18 = Dust.NewDust(position15, width12, height12, 6, 0f, 0f, 150, newColor, 1f);
                            Main.dust[num18].position = (Main.dust[num18].position + base.Center) / 2f;
                            Main.dust[num18].noGravity = true;
                            Main.dust[num18].velocity *= 2f;
                            Main.dust[num18].scale *= 1.2f;
                            Main.dust[num18].velocity += base.velocity;
                        }
                    }

                    if (this.ai[0] >= 20f)
                    {
                        base.velocity.X *= 0.99f;
                        base.velocity.Y += 0.1f;
                    }
                }
                else if (type == 69 || type == 70 || type == 621)
                {
                    this.ai[0] += 1f;
                    if (this.ai[0] >= 10f)
                    {
                        base.velocity.Y += 0.25f;
                        base.velocity.X *= 0.99f;
                    }
                }
                else if (type == 166)
                {
                    this.ai[0] += 1f;
                    if (this.ai[0] >= 20f)
                    {
                        base.velocity.Y += 0.3f;
                        base.velocity.X *= 0.98f;
                    }
                }
                else if (type == 300)
                {
                    if (this.ai[0] == 0f)
                    {
                        Main.PlaySound(SoundID.Item1, base.position);
                    }

                    this.ai[0] += 1f;
                    if (this.ai[0] >= 60f)
                    {
                        base.velocity.Y += 0.2f;
                        base.velocity.X *= 0.99f;
                    }
                }
                else if (type == 306)
                {
                    if (alpha <= 200)
                    {
                        for (int num19 = 0; num19 < 4; num19++)
                        {
                            float num20 = base.velocity.X / 4f * (float) num19;
                            float num21 = base.velocity.Y / 4f * (float) num19;
                            Vector2 position16 = base.position;
                            int width13 = base.width;
                            int height13 = base.height;
                            newColor = default(Color);
                            int num22 = Dust.NewDust(position16, width13, height13, 184, 0f, 0f, 0, newColor, 1f);
                            Main.dust[num22].position.X = base.Center.X - num20;
                            Main.dust[num22].position.Y = base.Center.Y - num21;
                            Main.dust[num22].velocity *= 0f;
                            Main.dust[num22].scale = 0.7f;
                        }
                    }

                    alpha -= 50;
                    if (alpha < 0)
                    {
                        alpha = 0;
                    }

                    rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) + 0.785f;
                }
                else if (type == 304)
                {
                    this.ai[0] += 1f;
                    if (this.ai[0] >= 30f)
                    {
                        alpha += 10;
                        damage = (int) ((double) damage * 0.9);
                        knockBack = (float) (int) ((double) knockBack * 0.9);
                        if (alpha >= 255)
                        {
                            active = false;
                        }
                    }

                    if (this.ai[0] < 30f)
                    {
                        rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) + 1.57f;
                    }
                }
                else if (type == 370 || type == 371)
                {
                    this.ai[0] += 1f;
                    if (this.ai[0] >= 15f)
                    {
                        base.velocity.Y += 0.3f;
                        base.velocity.X *= 0.98f;
                    }
                }
                else
                {
                    this.ai[0] += 1f;
                    if (this.ai[0] >= 20f)
                    {
                        base.velocity.Y += 0.4f;
                        base.velocity.X *= 0.97f;
                    }
                    else if (type == 48 || type == 54 || type == 93 || type == 520 || type == 599)
                    {
                        rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) + 1.57f;
                    }
                }

                if (base.velocity.Y > 16f)
                {
                    base.velocity.Y = 16f;
                }

                if (type == 54 && Main.rand.Next(20) == 0)
                {
                    Vector2 position17 = new Vector2(base.position.X, base.position.Y);
                    int width14 = base.width;
                    int height14 = base.height;
                    float speedX2 = base.velocity.X * 0.1f;
                    float speedY2 = base.velocity.Y * 0.1f;
                    newColor = default(Color);
                    Dust.NewDust(position17, width14, height14, 40, speedX2, speedY2, 0, newColor, 0.75f);
                }
            }
            else if (aiStyle == 3)
            {
                if (soundDelay == 0 && type != 383)
                {
                    soundDelay = 8;
                    Main.PlaySound(SoundID.Item7, base.position);
                }

                if (type == 19)
                {
                    for (int num23 = 0; num23 < 2; num23++)
                    {
                        Vector2 position18 = new Vector2(base.position.X, base.position.Y);
                        int width15 = base.width;
                        int height15 = base.height;
                        float speedX3 = base.velocity.X * 0.2f;
                        float speedY3 = base.velocity.Y * 0.2f;
                        newColor = default(Color);
                        int num24 = Dust.NewDust(position18, width15, height15, 6, speedX3, speedY3, 100, newColor, 2f);
                        Main.dust[num24].noGravity = true;
                        Main.dust[num24].velocity.X *= 0.3f;
                        Main.dust[num24].velocity.Y *= 0.3f;
                    }
                }
                else if (type == 33)
                {
                    if (Main.rand.Next(1) == 0)
                    {
                        Vector2 position19 = base.position;
                        int width16 = base.width;
                        int height16 = base.height;
                        float speedX4 = base.velocity.X * 0.25f;
                        float speedY4 = base.velocity.Y * 0.25f;
                        newColor = default(Color);
                        int num25 = Dust.NewDust(position19, width16, height16, 40, speedX4, speedY4, 0, newColor,
                            1.4f);
                        Main.dust[num25].noGravity = true;
                    }
                }
                else if (type == 320)
                {
                    if (Main.rand.Next(3) == 0)
                    {
                        Vector2 position20 = base.position;
                        int width17 = base.width;
                        int height17 = base.height;
                        float speedX5 = base.velocity.X * 0.25f;
                        float speedY5 = base.velocity.Y * 0.25f;
                        newColor = default(Color);
                        int num26 = Dust.NewDust(position20, width17, height17, 5, speedX5, speedY5, 0, newColor, 1.1f);
                        if (Main.rand.Next(2) == 0)
                        {
                            Main.dust[num26].scale = 0.9f;
                            Main.dust[num26].velocity *= 0.2f;
                        }
                        else
                        {
                            Main.dust[num26].noGravity = true;
                        }
                    }
                }
                else if (type == 6)
                {
                    if (Main.rand.Next(5) == 0)
                    {
                        int num27;
                        switch (Main.rand.Next(3))
                        {
                            case 0:
                                num27 = 15;
                                break;
                            case 1:
                                num27 = 57;
                                break;
                            default:
                                num27 = 58;
                                break;
                        }

                        Vector2 position21 = base.position;
                        int width18 = base.width;
                        int height18 = base.height;
                        int num28 = num27;
                        float speedX6 = base.velocity.X * 0.25f;
                        float speedY6 = base.velocity.Y * 0.25f;
                        newColor = default(Color);
                        Dust.NewDust(position21, width18, height18, num28, speedX6, speedY6, 150, newColor, 0.7f);
                    }
                }
                else if (type == 113 && Main.rand.Next(1) == 0)
                {
                    Vector2 position22 = base.position;
                    int width19 = base.width;
                    int height19 = base.height;
                    float speedX7 = base.velocity.X * 0.15f;
                    float speedY7 = base.velocity.Y * 0.15f;
                    newColor = default(Color);
                    int num29 = Dust.NewDust(position22, width19, height19, 76, speedX7, speedY7, 0, newColor, 1.1f);
                    Main.dust[num29].noGravity = true;
                    Vector2 position23 = base.position;
                    int width20 = base.width;
                    int height20 = base.height;
                    float speedX8 = base.velocity.X * 0.05f;
                    float speedY8 = base.velocity.Y * 0.05f;
                    newColor = default(Color);
                    Dust.NewDust(position23, width20, height20, 15, speedX8, speedY8, 150, newColor, 0.6f);
                }

                if (this.ai[0] == 0f)
                {
                    this.ai[1] += 1f;
                    if (type == 106 && this.ai[1] >= 45f)
                    {
                        this.ai[0] = 1f;
                        this.ai[1] = 0f;
                        netUpdate = true;
                    }

                    if (type == 320 || type == 383)
                    {
                        if (this.ai[1] >= 10f)
                        {
                            base.velocity.Y += 0.5f;
                            if (type == 383 && base.velocity.Y < 0f)
                            {
                                base.velocity.Y += 0.35f;
                            }

                            base.velocity.X *= 0.95f;
                            if (base.velocity.Y > 16f)
                            {
                                base.velocity.Y = 16f;
                            }

                            if (type == 383 && Vector2.Distance(base.Center, Main.player[owner].Center) > 800f)
                            {
                                this.ai[0] = 1f;
                            }
                        }
                    }
                    else if (type == 182)
                    {
                        if (Main.rand.Next(2) == 0)
                        {
                            Vector2 position24 = base.position;
                            int width21 = base.width;
                            int height21 = base.height;
                            newColor = default(Color);
                            int num30 = Dust.NewDust(position24, width21, height21, 57, 0f, 0f, 255, newColor, 0.75f);
                            Main.dust[num30].velocity *= 0.1f;
                            Main.dust[num30].noGravity = true;
                        }

                        if (base.velocity.X > 0f)
                        {
                            spriteDirection = 1;
                        }
                        else if (base.velocity.X < 0f)
                        {
                            spriteDirection = -1;
                        }

                        float num31 = base.position.X;
                        float num32 = base.position.Y;
                        bool flag = false;
                        if (this.ai[1] > 10f)
                        {
                            for (int num33 = 0; num33 < 200; num33++)
                            {
                                if (Main.npc[num33].CanBeChasedBy(this, false))
                                {
                                    float num34 = Main.npc[num33].position.X + (float) (Main.npc[num33].width / 2);
                                    float num35 = Main.npc[num33].position.Y + (float) (Main.npc[num33].height / 2);
                                    float num36 = Math.Abs(base.position.X + (float) (base.width / 2) - num34) +
                                                  Math.Abs(base.position.Y + (float) (base.height / 2) - num35);
                                    if (num36 < 800f && Collision.CanHit(
                                            new Vector2(base.position.X + (float) (base.width / 2),
                                                base.position.Y + (float) (base.height / 2)), 1, 1,
                                            Main.npc[num33].position, Main.npc[num33].width, Main.npc[num33].height))
                                    {
                                        num31 = num34;
                                        num32 = num35;
                                        flag = true;
                                    }
                                }
                            }
                        }

                        if (!flag)
                        {
                            num31 = base.position.X + (float) (base.width / 2) + base.velocity.X * 100f;
                            num32 = base.position.Y + (float) (base.height / 2) + base.velocity.Y * 100f;
                            if (this.ai[1] >= 30f)
                            {
                                this.ai[0] = 1f;
                                this.ai[1] = 0f;
                                netUpdate = true;
                            }
                        }

                        float num37 = 12f;
                        float num38 = 0.25f;
                        Vector2 vector2 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        float num39 = num31 - vector2.X;
                        float num40 = num32 - vector2.Y;
                        float num41 = (float) Math.Sqrt((double) (num39 * num39 + num40 * num40));
                        num41 = num37 / num41;
                        num39 *= num41;
                        num40 *= num41;
                        if (base.velocity.X < num39)
                        {
                            base.velocity.X += num38;
                            if (base.velocity.X < 0f && num39 > 0f)
                            {
                                base.velocity.X += num38 * 2f;
                            }
                        }
                        else if (base.velocity.X > num39)
                        {
                            base.velocity.X -= num38;
                            if (base.velocity.X > 0f && num39 < 0f)
                            {
                                base.velocity.X -= num38 * 2f;
                            }
                        }

                        if (base.velocity.Y < num40)
                        {
                            base.velocity.Y += num38;
                            if (base.velocity.Y < 0f && num40 > 0f)
                            {
                                base.velocity.Y += num38 * 2f;
                            }
                        }
                        else if (base.velocity.Y > num40)
                        {
                            base.velocity.Y -= num38;
                            if (base.velocity.Y > 0f && num40 < 0f)
                            {
                                base.velocity.Y -= num38 * 2f;
                            }
                        }
                    }
                    else if (type == 301)
                    {
                        if (this.ai[1] >= 20f)
                        {
                            this.ai[0] = 1f;
                            this.ai[1] = 0f;
                            netUpdate = true;
                        }
                    }
                    else if (this.ai[1] >= 30f)
                    {
                        this.ai[0] = 1f;
                        this.ai[1] = 0f;
                        netUpdate = true;
                    }
                }
                else
                {
                    tileCollide = false;
                    float num42 = 9f;
                    float num43 = 0.4f;
                    if (type == 19)
                    {
                        num42 = 13f;
                        num43 = 0.6f;
                    }
                    else if (type == 33)
                    {
                        num42 = 15f;
                        num43 = 0.8f;
                    }
                    else if (type == 182)
                    {
                        num42 = 16f;
                        num43 = 1.2f;
                    }
                    else if (type == 106)
                    {
                        num42 = 16f;
                        num43 = 1.2f;
                    }
                    else if (type == 272)
                    {
                        num42 = 15f;
                        num43 = 1f;
                    }
                    else if (type == 333)
                    {
                        num42 = 12f;
                        num43 = 0.6f;
                    }
                    else if (type == 301)
                    {
                        num42 = 15f;
                        num43 = 3f;
                    }
                    else if (type == 320)
                    {
                        num42 = 15f;
                        num43 = 3f;
                    }
                    else if (type == 383)
                    {
                        num42 = 16f;
                        num43 = 4f;
                    }

                    Vector2 vector3 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    float num44 = Main.player[owner].position.X + (float) (Main.player[owner].width / 2) - vector3.X;
                    float num45 = Main.player[owner].position.Y + (float) (Main.player[owner].height / 2) - vector3.Y;
                    float num46 = (float) Math.Sqrt((double) (num44 * num44 + num45 * num45));
                    if (num46 > 3000f)
                    {
                        Kill();
                    }

                    num46 = num42 / num46;
                    num44 *= num46;
                    num45 *= num46;
                    if (type == 383)
                    {
                        Vector2 vector4 = new Vector2(num44, num45) - base.velocity;
                        if (vector4 != Vector2.Zero)
                        {
                            Vector2 value = vector4;
                            value.Normalize();
                            base.velocity += value * Math.Min(num43, vector4.Length());
                        }
                    }
                    else
                    {
                        if (base.velocity.X < num44)
                        {
                            base.velocity.X += num43;
                            if (base.velocity.X < 0f && num44 > 0f)
                            {
                                base.velocity.X += num43;
                            }
                        }
                        else if (base.velocity.X > num44)
                        {
                            base.velocity.X -= num43;
                            if (base.velocity.X > 0f && num44 < 0f)
                            {
                                base.velocity.X -= num43;
                            }
                        }

                        if (base.velocity.Y < num45)
                        {
                            base.velocity.Y += num43;
                            if (base.velocity.Y < 0f && num45 > 0f)
                            {
                                base.velocity.Y += num43;
                            }
                        }
                        else if (base.velocity.Y > num45)
                        {
                            base.velocity.Y -= num43;
                            if (base.velocity.Y > 0f && num45 < 0f)
                            {
                                base.velocity.Y -= num43;
                            }
                        }
                    }

                    if (Main.myPlayer == owner)
                    {
                        Rectangle rectangle = new Rectangle((int) base.position.X, (int) base.position.Y, base.width,
                            base.height);
                        Rectangle value2 = new Rectangle((int) Main.player[owner].position.X,
                            (int) Main.player[owner].position.Y, Main.player[owner].width, Main.player[owner].height);
                        if (rectangle.Intersects(value2))
                        {
                            Kill();
                        }
                    }
                }

                if (type == 106)
                {
                    rotation += 0.3f * (float) base.direction;
                }
                else if (type == 383)
                {
                    if (this.ai[0] == 0f)
                    {
                        Vector2 velocity = base.velocity;
                        velocity.Normalize();
                        rotation = (float) Math.Atan2((double) velocity.Y, (double) velocity.X) + 1.57f;
                    }
                    else
                    {
                        Vector2 vector5 = base.Center - Main.player[owner].Center;
                        vector5.Normalize();
                        rotation = (float) Math.Atan2((double) vector5.Y, (double) vector5.X) + 1.57f;
                    }
                }
                else
                {
                    rotation += 0.4f * (float) base.direction;
                }
            }
            else if (aiStyle == 4)
            {
                rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) + 1.57f;
                if (this.ai[0] == 0f)
                {
                    if (type >= 150 && type <= 152 && this.ai[1] == 0f && alpha == 255 && Main.rand.Next(2) == 0)
                    {
                        type++;
                        netUpdate = true;
                    }

                    alpha -= 50;
                    if (type >= 150 && type <= 152)
                    {
                        alpha -= 25;
                    }
                    else if (type == 493 || type == 494)
                    {
                        alpha -= 50;
                    }

                    if (alpha <= 0)
                    {
                        alpha = 0;
                        this.ai[0] = 1f;
                        if (this.ai[1] == 0f)
                        {
                            this.ai[1] += 1f;
                            base.position += base.velocity * 1f;
                        }

                        if (type == 7 && Main.myPlayer == owner)
                        {
                            int num47 = type;
                            if (this.ai[1] >= 6f)
                            {
                                num47++;
                            }

                            int num48 = NewProjectile(base.position.X + base.velocity.X + (float) (base.width / 2),
                                base.position.Y + base.velocity.Y + (float) (base.height / 2), base.velocity.X,
                                base.velocity.Y, num47, damage, knockBack, owner, 0f, 0f);
                            Main.projectile[num48].damage = damage;
                            Main.projectile[num48].ai[1] = this.ai[1] + 1f;
                            NetMessage.SendData(27, -1, -1, null, num48, 0f, 0f, 0f, 0, 0, 0);
                        }
                        else if (type == 494 && Main.myPlayer == owner)
                        {
                            int num49 = type;
                            if (this.ai[1] >= (float) (7 + Main.rand.Next(2)))
                            {
                                num49--;
                            }

                            int num50 = damage;
                            float num51 = knockBack;
                            if (num49 == 493)
                            {
                                num50 = (int) ((double) damage * 1.25);
                                num51 = knockBack * 1.25f;
                            }

                            int number = NewProjectile(base.position.X + base.velocity.X + (float) (base.width / 2),
                                base.position.Y + base.velocity.Y + (float) (base.height / 2), base.velocity.X,
                                base.velocity.Y, num49, num50, num51, owner, 0f, this.ai[1] + 1f);
                            NetMessage.SendData(27, -1, -1, null, number, 0f, 0f, 0f, 0, 0, 0);
                        }
                        else if ((type == 150 || type == 151) && Main.myPlayer == owner)
                        {
                            int num52 = type;
                            if (type == 150)
                            {
                                num52 = 151;
                            }
                            else if (type == 151)
                            {
                                num52 = 150;
                            }

                            if (this.ai[1] >= 10f && type == 151)
                            {
                                num52 = 152;
                            }

                            int num53 = NewProjectile(base.position.X + base.velocity.X + (float) (base.width / 2),
                                base.position.Y + base.velocity.Y + (float) (base.height / 2), base.velocity.X,
                                base.velocity.Y, num52, damage, knockBack, owner, 0f, 0f);
                            Main.projectile[num53].damage = damage;
                            Main.projectile[num53].ai[1] = this.ai[1] + 1f;
                            NetMessage.SendData(27, -1, -1, null, num53, 0f, 0f, 0f, 0, 0, 0);
                        }
                    }
                }
                else
                {
                    if (alpha < 170 && alpha + 5 >= 170)
                    {
                        if (type >= 150 && type <= 152)
                        {
                            for (int num54 = 0; num54 < 8; num54++)
                            {
                                Vector2 position25 = base.position;
                                int width22 = base.width;
                                int height22 = base.height;
                                float speedX9 = base.velocity.X * 0.025f;
                                float speedY9 = base.velocity.Y * 0.025f;
                                newColor = default(Color);
                                int num55 = Dust.NewDust(position25, width22, height22, 7, speedX9, speedY9, 200,
                                    newColor, 1.3f);
                                Main.dust[num55].noGravity = true;
                                Main.dust[num55].velocity *= 0.5f;
                            }
                        }
                        else if (type == 493 || type == 494)
                        {
                            for (int num56 = 0; num56 < 8; num56++)
                            {
                                Vector2 position26 = base.position;
                                int width23 = base.width;
                                int height23 = base.height;
                                int num57 = Main.rand.Next(68, 71);
                                float speedX10 = base.velocity.X * 0.025f;
                                float speedY10 = base.velocity.Y * 0.025f;
                                newColor = default(Color);
                                int num58 = Dust.NewDust(position26, width23, height23, num57, speedX10, speedY10, 200,
                                    newColor, 1.3f);
                                Main.dust[num58].noGravity = true;
                                Main.dust[num58].velocity *= 0.5f;
                            }
                        }
                        else
                        {
                            for (int num59 = 0; num59 < 3; num59++)
                            {
                                Vector2 position27 = base.position;
                                int width24 = base.width;
                                int height24 = base.height;
                                float speedX11 = base.velocity.X * 0.025f;
                                float speedY11 = base.velocity.Y * 0.025f;
                                newColor = default(Color);
                                Dust.NewDust(position27, width24, height24, 18, speedX11, speedY11, 170, newColor,
                                    1.2f);
                            }

                            Vector2 position28 = base.position;
                            int width25 = base.width;
                            int height25 = base.height;
                            newColor = default(Color);
                            Dust.NewDust(position28, width25, height25, 14, 0f, 0f, 170, newColor, 1.1f);
                        }
                    }

                    if (type >= 150 && type <= 152)
                    {
                        alpha += 3;
                    }
                    else if (type == 493 || type == 494)
                    {
                        alpha += 7;
                    }
                    else
                    {
                        alpha += 5;
                    }

                    if (alpha >= 255)
                    {
                        Kill();
                    }
                }
            }
            else if (aiStyle == 5)
            {
                if (type == 503)
                {
                    if (base.Center.Y > this.ai[1])
                    {
                        tileCollide = true;
                    }
                }
                else if (type == 92)
                {
                    if (base.position.Y > this.ai[1])
                    {
                        tileCollide = true;
                    }
                }
                else
                {
                    if (this.ai[1] == 0f && !Collision.SolidCollision(base.position, base.width, base.height))
                    {
                        this.ai[1] = 1f;
                        netUpdate = true;
                    }

                    if (this.ai[1] != 0f)
                    {
                        tileCollide = true;
                    }
                }

                if (soundDelay == 0)
                {
                    soundDelay = 20 + Main.rand.Next(40);
                    Main.PlaySound(SoundID.Item9, base.position);
                }

                if (type == 503)
                {
                    alpha -= 15;
                    int num60 = 150;
                    if (base.Center.Y >= this.ai[1])
                    {
                        num60 = 0;
                    }

                    if (alpha < num60)
                    {
                        alpha = num60;
                    }

                    localAI[0] += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.01f *
                                  (float) base.direction;
                }
                else
                {
                    if (localAI[0] == 0f)
                    {
                        localAI[0] = 1f;
                    }

                    alpha += (int) (25f * localAI[0]);
                    if (alpha > 200)
                    {
                        alpha = 200;
                        localAI[0] = -1f;
                    }

                    if (alpha < 0)
                    {
                        alpha = 0;
                        localAI[0] = 1f;
                    }
                }

                if (type == 503)
                {
                    rotation = base.velocity.ToRotation() - 1.57079637f;
                }
                else
                {
                    rotation += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.01f *
                                (float) base.direction;
                }

                if (type == 503)
                {
                    if (Main.rand.Next(16) == 0)
                    {
                        Vector2 spinningpoint = Vector2.UnitX.RotatedByRandom(1.5707963705062866);
                        double radians = (double) base.velocity.ToRotation();
                        vector = default(Vector2);
                        Vector2 value3 = spinningpoint.RotatedBy(radians, vector);
                        Vector2 position29 = base.position;
                        int width26 = base.width;
                        int height26 = base.height;
                        float speedX12 = base.velocity.X * 0.5f;
                        float speedY12 = base.velocity.Y * 0.5f;
                        newColor = default(Color);
                        int num61 = Dust.NewDust(position29, width26, height26, 58, speedX12, speedY12, 150, newColor,
                            1.2f);
                        Main.dust[num61].velocity = value3 * 0.66f;
                        Main.dust[num61].position = base.Center + value3 * 12f;
                    }

                    if (Main.rand.Next(48) == 0)
                    {
                        int num62 = Gore.NewGore(base.Center,
                            new Vector2(base.velocity.X * 0.2f, base.velocity.Y * 0.2f), 16, 1f);
                        Main.gore[num62].velocity *= 0.66f;
                        Main.gore[num62].velocity += base.velocity * 0.3f;
                    }
                }

                if (this.ai[1] == 1f || type == 92)
                {
                    light = 0.9f;
                    if (Main.rand.Next(10) == 0)
                    {
                        Vector2 position30 = base.position;
                        int width27 = base.width;
                        int height27 = base.height;
                        float speedX13 = base.velocity.X * 0.5f;
                        float speedY13 = base.velocity.Y * 0.5f;
                        newColor = default(Color);
                        Dust.NewDust(position30, width27, height27, 58, speedX13, speedY13, 150, newColor, 1.2f);
                    }

                    if (Main.rand.Next(20) == 0)
                    {
                        Gore.NewGore(base.position, new Vector2(base.velocity.X * 0.2f, base.velocity.Y * 0.2f),
                            Main.rand.Next(16, 18), 1f);
                    }
                }
            }
            else if (aiStyle == 6)
            {
                base.velocity *= 0.95f;
                this.ai[0] += 1f;
                if (this.ai[0] == 180f)
                {
                    Kill();
                }

                if (this.ai[1] == 0f)
                {
                    this.ai[1] = 1f;
                    int num63 = 10 + type;
                    if (type == 463)
                    {
                        num63 = 231;
                    }

                    for (int num64 = 0; num64 < 30; num64++)
                    {
                        Vector2 position31 = base.position;
                        int width28 = base.width;
                        int height28 = base.height;
                        int num65 = num63;
                        float x2 = base.velocity.X;
                        float y2 = base.velocity.Y;
                        newColor = default(Color);
                        Dust.NewDust(position31, width28, height28, num65, x2, y2, 50, newColor, 1f);
                    }
                }

                if (type == 10 || type == 11 || type == 463)
                {
                    int num66 = (int) (base.position.X / 16f) - 1;
                    int num67 = (int) ((base.position.X + (float) base.width) / 16f) + 2;
                    int num68 = (int) (base.position.Y / 16f) - 1;
                    int num69 = (int) ((base.position.Y + (float) base.height) / 16f) + 2;
                    if (num66 < 0)
                    {
                        num66 = 0;
                    }

                    if (num67 > Main.maxTilesX)
                    {
                        num67 = Main.maxTilesX;
                    }

                    if (num68 < 0)
                    {
                        num68 = 0;
                    }

                    if (num69 > Main.maxTilesY)
                    {
                        num69 = Main.maxTilesY;
                    }

                    for (int num70 = num66; num70 < num67; num70++)
                    {
                        for (int num71 = num68; num71 < num69; num71++)
                        {
                            Vector2 vector6 = default(Vector2);
                            vector6.X = (float) (num70 * 16);
                            vector6.Y = (float) (num71 * 16);
                            if (base.position.X + (float) base.width > vector6.X && base.position.X < vector6.X + 16f &&
                                base.position.Y + (float) base.height > vector6.Y &&
                                base.position.Y < vector6.Y + 16f && Main.myPlayer == owner &&
                                Main.tile[num70, num71].active())
                            {
                                if (type == 10)
                                {
                                    if (Main.tile[num70, num71].type == 23 || Main.tile[num70, num71].type == 199)
                                    {
                                        Main.tile[num70, num71].type = 2;
                                        WorldGen.SquareTileFrame(num70, num71, true);
                                        if (Main.netMode == 1)
                                        {
                                            NetMessage.SendTileSquare(-1, num70, num71, 1, TileChangeType.None);
                                        }
                                    }

                                    if (Main.tile[num70, num71].type == 25 || Main.tile[num70, num71].type == 203)
                                    {
                                        Main.tile[num70, num71].type = 1;
                                        WorldGen.SquareTileFrame(num70, num71, true);
                                        if (Main.netMode == 1)
                                        {
                                            NetMessage.SendTileSquare(-1, num70, num71, 1, TileChangeType.None);
                                        }
                                    }

                                    if (Main.tile[num70, num71].type == 112 || Main.tile[num70, num71].type == 234)
                                    {
                                        Main.tile[num70, num71].type = 53;
                                        WorldGen.SquareTileFrame(num70, num71, true);
                                        if (Main.netMode == 1)
                                        {
                                            NetMessage.SendTileSquare(-1, num70, num71, 1, TileChangeType.None);
                                        }
                                    }

                                    if (Main.tile[num70, num71].type == 163 || Main.tile[num70, num71].type == 200)
                                    {
                                        Main.tile[num70, num71].type = 161;
                                        WorldGen.SquareTileFrame(num70, num71, true);
                                        if (Main.netMode == 1)
                                        {
                                            NetMessage.SendTileSquare(-1, num70, num71, 1, TileChangeType.None);
                                        }
                                    }

                                    if (Main.tile[num70, num71].type == 400 || Main.tile[num70, num71].type == 401)
                                    {
                                        Main.tile[num70, num71].type = 396;
                                        WorldGen.SquareTileFrame(num70, num71, true);
                                        if (Main.netMode == 1)
                                        {
                                            NetMessage.SendTileSquare(-1, num70, num71, 1, TileChangeType.None);
                                        }
                                    }

                                    if (Main.tile[num70, num71].type == 398 || Main.tile[num70, num71].type == 399)
                                    {
                                        Main.tile[num70, num71].type = 397;
                                        WorldGen.SquareTileFrame(num70, num71, true);
                                        if (Main.netMode == 1)
                                        {
                                            NetMessage.SendTileSquare(-1, num70, num71, 1, TileChangeType.None);
                                        }
                                    }
                                }
                                else if (type == 11 || type == 463)
                                {
                                    if (Main.tile[num70, num71].type == 109)
                                    {
                                        Main.tile[num70, num71].type = 2;
                                        WorldGen.SquareTileFrame(num70, num71, true);
                                        if (Main.netMode == 1)
                                        {
                                            NetMessage.SendTileSquare(-1, num70, num71, 1, TileChangeType.None);
                                        }
                                    }

                                    if (Main.tile[num70, num71].type == 116)
                                    {
                                        Main.tile[num70, num71].type = 53;
                                        WorldGen.SquareTileFrame(num70, num71, true);
                                        if (Main.netMode == 1)
                                        {
                                            NetMessage.SendTileSquare(-1, num70, num71, 1, TileChangeType.None);
                                        }
                                    }

                                    if (Main.tile[num70, num71].type == 117)
                                    {
                                        Main.tile[num70, num71].type = 1;
                                        WorldGen.SquareTileFrame(num70, num71, true);
                                        if (Main.netMode == 1)
                                        {
                                            NetMessage.SendTileSquare(-1, num70, num71, 1, TileChangeType.None);
                                        }
                                    }

                                    if (Main.tile[num70, num71].type == 164)
                                    {
                                        Main.tile[num70, num71].type = 161;
                                        WorldGen.SquareTileFrame(num70, num71, true);
                                        if (Main.netMode == 1)
                                        {
                                            NetMessage.SendTileSquare(-1, num70, num71, 1, TileChangeType.None);
                                        }
                                    }

                                    if (Main.tile[num70, num71].type == 403)
                                    {
                                        Main.tile[num70, num71].type = 396;
                                        WorldGen.SquareTileFrame(num70, num71, true);
                                        if (Main.netMode == 1)
                                        {
                                            NetMessage.SendTileSquare(-1, num70, num71, 1, TileChangeType.None);
                                        }
                                    }

                                    if (Main.tile[num70, num71].type == 402)
                                    {
                                        Main.tile[num70, num71].type = 397;
                                        WorldGen.SquareTileFrame(num70, num71, true);
                                        if (Main.netMode == 1)
                                        {
                                            NetMessage.SendTileSquare(-1, num70, num71, 1, TileChangeType.None);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else if (aiStyle == 7)
            {
                if (Main.player[owner].dead || Main.player[owner].stoned || Main.player[owner].webbed ||
                    Main.player[owner].frozen)
                {
                    Kill();
                }
                else
                {
                    Vector2 mountedCenter = Main.player[owner].MountedCenter;
                    Vector2 vector7 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    float num72 = mountedCenter.X - vector7.X;
                    float num73 = mountedCenter.Y - vector7.Y;
                    float num74 = (float) Math.Sqrt((double) (num72 * num72 + num73 * num73));
                    rotation = (float) Math.Atan2((double) num73, (double) num72) - 1.57f;
                    if (type == 256)
                    {
                        rotation = (float) Math.Atan2((double) num73, (double) num72) + 3.92500019f;
                    }

                    if (type == 446)
                    {
                        Lighting.AddLight(mountedCenter, 0f, 0.4f, 0.3f);
                        localAI[0] += 1f;
                        if (localAI[0] >= 28f)
                        {
                            localAI[0] = 0f;
                        }

                        DelegateMethods.v3_1 = new Vector3(0f, 0.4f, 0.3f);
                        Utils.PlotTileLine(base.Center, mountedCenter, 8f, DelegateMethods.CastLightOpen);
                    }

                    if (type == 652 && ++frameCounter >= 7)
                    {
                        frameCounter = 0;
                        if (++frame >= Main.projFrames[type])
                        {
                            frame = 0;
                        }
                    }

                    if (type >= 646 && type <= 649)
                    {
                        Vector3 vector8 = Vector3.Zero;
                        switch (type)
                        {
                            case 646:
                                vector8 = new Vector3(0.7f, 0.5f, 0.1f);
                                break;
                            case 647:
                                vector8 = new Vector3(0f, 0.6f, 0.7f);
                                break;
                            case 648:
                                vector8 = new Vector3(0.6f, 0.2f, 0.6f);
                                break;
                            case 649:
                                vector8 = new Vector3(0.6f, 0.6f, 0.9f);
                                break;
                        }

                        Lighting.AddLight(mountedCenter, vector8);
                        Lighting.AddLight(base.Center, vector8);
                        DelegateMethods.v3_1 = vector8;
                        Utils.PlotTileLine(base.Center, mountedCenter, 8f, DelegateMethods.CastLightOpen);
                    }

                    if (this.ai[0] == 0f)
                    {
                        if ((num74 > 300f && type == 13) || (num74 > 400f && type == 32) ||
                            (num74 > 440f && type == 73) || (num74 > 440f && type == 74) ||
                            (num74 > 250f && type == 165) || (num74 > 350f && type == 256) ||
                            (num74 > 500f && type == 315) || (num74 > 550f && type == 322) ||
                            (num74 > 400f && type == 331) || (num74 > 550f && type == 332) ||
                            (num74 > 400f && type == 372) || (num74 > 300f && type == 396) ||
                            (num74 > 550f && type >= 646 && type <= 649) || (num74 > 600f && type == 652) ||
                            (num74 > 480f && type >= 486 && type <= 489) || (num74 > 500f && type == 446))
                        {
                            this.ai[0] = 1f;
                        }
                        else if (type >= 230 && type <= 235)
                        {
                            int num75 = 300 + (type - 230) * 30;
                            if (num74 > (float) num75)
                            {
                                this.ai[0] = 1f;
                            }
                        }

                        Vector2 value4 = base.Center - new Vector2(5f);
                        Vector2 value5 = base.Center + new Vector2(5f);
                        Point point = (value4 - new Vector2(16f)).ToTileCoordinates();
                        Point point2 = (value5 + new Vector2(32f)).ToTileCoordinates();
                        int num76 = point.X;
                        int num77 = point2.X;
                        int num78 = point.Y;
                        int num79 = point2.Y;
                        if (num76 < 0)
                        {
                            num76 = 0;
                        }

                        if (num77 > Main.maxTilesX)
                        {
                            num77 = Main.maxTilesX;
                        }

                        if (num78 < 0)
                        {
                            num78 = 0;
                        }

                        if (num79 > Main.maxTilesY)
                        {
                            num79 = Main.maxTilesY;
                        }

                        for (int num80 = num76; num80 < num77; num80++)
                        {
                            for (int num81 = num78; num81 < num79; num81++)
                            {
                                if (Main.tile[num80, num81] == null)
                                {
                                    Tile[,] tile = Main.tile;
                                    int num82 = num80;
                                    int num83 = num81;
                                    Tile tile2 = new Tile();
                                    tile[num82, num83] = tile2;
                                }

                                Vector2 vector9 = default(Vector2);
                                vector9.X = (float) (num80 * 16);
                                vector9.Y = (float) (num81 * 16);
                                if (value4.X + 10f > vector9.X && value4.X < vector9.X + 16f &&
                                    value4.Y + 10f > vector9.Y && value4.Y < vector9.Y + 16f &&
                                    Main.tile[num80, num81].nactive() &&
                                    (Main.tileSolid[Main.tile[num80, num81].type] ||
                                     Main.tile[num80, num81].type == 314) &&
                                    (type != 403 || Main.tile[num80, num81].type == 314))
                                {
                                    if (Main.player[owner].grapCount < 10)
                                    {
                                        Main.player[owner].grappling[Main.player[owner].grapCount] = whoAmI;
                                        Main.player[owner].grapCount++;
                                    }

                                    if (Main.myPlayer == owner)
                                    {
                                        int num84 = 0;
                                        int num85 = -1;
                                        int num86 = 100000;
                                        if (type == 73 || type == 74)
                                        {
                                            for (int num87 = 0; num87 < 1000; num87++)
                                            {
                                                if (num87 != whoAmI && Main.projectile[num87].active &&
                                                    Main.projectile[num87].owner == owner &&
                                                    Main.projectile[num87].aiStyle == 7 &&
                                                    Main.projectile[num87].ai[0] == 2f)
                                                {
                                                    Main.projectile[num87].Kill();
                                                }
                                            }
                                        }
                                        else
                                        {
                                            int num88 = 3;
                                            if (type == 165)
                                            {
                                                num88 = 8;
                                            }

                                            if (type == 256)
                                            {
                                                num88 = 2;
                                            }

                                            if (type == 372)
                                            {
                                                num88 = 2;
                                            }

                                            if (type == 652)
                                            {
                                                num88 = 1;
                                            }

                                            if (type >= 646 && type <= 649)
                                            {
                                                num88 = 4;
                                            }

                                            for (int num89 = 0; num89 < 1000; num89++)
                                            {
                                                if (Main.projectile[num89].active &&
                                                    Main.projectile[num89].owner == owner &&
                                                    Main.projectile[num89].aiStyle == 7)
                                                {
                                                    if (Main.projectile[num89].timeLeft < num86)
                                                    {
                                                        num85 = num89;
                                                        num86 = Main.projectile[num89].timeLeft;
                                                    }

                                                    num84++;
                                                }
                                            }

                                            if (num84 > num88)
                                            {
                                                Main.projectile[num85].Kill();
                                            }
                                        }
                                    }

                                    WorldGen.KillTile(num80, num81, true, true, false);
                                    Main.PlaySound(0, num80 * 16, num81 * 16, 1, 1f, 0f);
                                    base.velocity.X = 0f;
                                    base.velocity.Y = 0f;
                                    this.ai[0] = 2f;
                                    base.position.X = (float) (num80 * 16 + 8 - base.width / 2);
                                    base.position.Y = (float) (num81 * 16 + 8 - base.height / 2);
                                    damage = 0;
                                    netUpdate = true;
                                    if (Main.myPlayer == owner)
                                    {
                                        NetMessage.SendData(13, -1, -1, null, owner, 0f, 0f, 0f, 0, 0, 0);
                                    }

                                    break;
                                }
                            }

                            if (this.ai[0] == 2f)
                            {
                                break;
                            }
                        }
                    }
                    else if (this.ai[0] == 1f)
                    {
                        float num90 = 11f;
                        if (type == 32)
                        {
                            num90 = 15f;
                        }

                        if (type == 73 || type == 74)
                        {
                            num90 = 17f;
                        }

                        if (type == 315)
                        {
                            num90 = 20f;
                        }

                        if (type == 322)
                        {
                            num90 = 22f;
                        }

                        if (type >= 230 && type <= 235)
                        {
                            num90 = 11f + (float) (type - 230) * 0.75f;
                        }

                        if (type == 446)
                        {
                            num90 = 20f;
                        }

                        if (type >= 486 && type <= 489)
                        {
                            num90 = 18f;
                        }

                        if (type >= 646 && type <= 649)
                        {
                            num90 = 24f;
                        }

                        if (type == 652)
                        {
                            num90 = 24f;
                        }

                        if (type == 332)
                        {
                            num90 = 17f;
                        }

                        if (num74 < 24f)
                        {
                            Kill();
                        }

                        num74 = num90 / num74;
                        num72 *= num74;
                        num73 *= num74;
                        base.velocity.X = num72;
                        base.velocity.Y = num73;
                    }
                    else if (this.ai[0] == 2f)
                    {
                        int num91 = (int) (base.position.X / 16f) - 1;
                        int num92 = (int) ((base.position.X + (float) base.width) / 16f) + 2;
                        int num93 = (int) (base.position.Y / 16f) - 1;
                        int num94 = (int) ((base.position.Y + (float) base.height) / 16f) + 2;
                        if (num91 < 0)
                        {
                            num91 = 0;
                        }

                        if (num92 > Main.maxTilesX)
                        {
                            num92 = Main.maxTilesX;
                        }

                        if (num93 < 0)
                        {
                            num93 = 0;
                        }

                        if (num94 > Main.maxTilesY)
                        {
                            num94 = Main.maxTilesY;
                        }

                        bool flag2 = true;
                        for (int num95 = num91; num95 < num92; num95++)
                        {
                            for (int num96 = num93; num96 < num94; num96++)
                            {
                                if (Main.tile[num95, num96] == null)
                                {
                                    Tile[,] tile3 = Main.tile;
                                    int num97 = num95;
                                    int num98 = num96;
                                    Tile tile4 = new Tile();
                                    tile3[num97, num98] = tile4;
                                }

                                Vector2 vector10 = default(Vector2);
                                vector10.X = (float) (num95 * 16);
                                vector10.Y = (float) (num96 * 16);
                                if (base.position.X + (float) (base.width / 2) > vector10.X &&
                                    base.position.X + (float) (base.width / 2) < vector10.X + 16f &&
                                    base.position.Y + (float) (base.height / 2) > vector10.Y &&
                                    base.position.Y + (float) (base.height / 2) < vector10.Y + 16f &&
                                    Main.tile[num95, num96].nactive() &&
                                    (Main.tileSolid[Main.tile[num95, num96].type] ||
                                     Main.tile[num95, num96].type == 314 || Main.tile[num95, num96].type == 5))
                                {
                                    flag2 = false;
                                }
                            }
                        }

                        if (flag2)
                        {
                            this.ai[0] = 1f;
                        }
                        else if (Main.player[owner].grapCount < 10)
                        {
                            Main.player[owner].grappling[Main.player[owner].grapCount] = whoAmI;
                            Main.player[owner].grapCount++;
                        }
                    }
                }
            }
            else if (aiStyle == 8)
            {
                if (type == 258 && localAI[0] == 0f)
                {
                    localAI[0] = 1f;
                    Main.PlaySound(SoundID.Item20, base.position);
                }

                if (type == 96 && localAI[0] == 0f)
                {
                    localAI[0] = 1f;
                    Main.PlaySound(SoundID.Item20, base.position);
                }

                if (type == 27)
                {
                    for (int num99 = 0; num99 < 5; num99++)
                    {
                        float num100 = base.velocity.X / 3f * (float) num99;
                        float num101 = base.velocity.Y / 3f * (float) num99;
                        int num102 = 4;
                        Vector2 position32 = new Vector2(base.position.X + (float) num102,
                            base.position.Y + (float) num102);
                        int width29 = base.width - num102 * 2;
                        int height29 = base.height - num102 * 2;
                        newColor = default(Color);
                        int num103 = Dust.NewDust(position32, width29, height29, 172, 0f, 0f, 100, newColor, 1.2f);
                        Main.dust[num103].noGravity = true;
                        Main.dust[num103].velocity *= 0.1f;
                        Main.dust[num103].velocity += base.velocity * 0.1f;
                        Main.dust[num103].position.X -= num100;
                        Main.dust[num103].position.Y -= num101;
                    }

                    if (Main.rand.Next(5) == 0)
                    {
                        int num104 = 4;
                        Vector2 position33 = new Vector2(base.position.X + (float) num104,
                            base.position.Y + (float) num104);
                        int width30 = base.width - num104 * 2;
                        int height30 = base.height - num104 * 2;
                        newColor = default(Color);
                        int num105 = Dust.NewDust(position33, width30, height30, 172, 0f, 0f, 100, newColor, 0.6f);
                        Main.dust[num105].velocity *= 0.25f;
                        Main.dust[num105].velocity += base.velocity * 0.5f;
                    }
                }
                else if (type == 502)
                {
                    float num106 = (float) Main.DiscoR / 255f;
                    float num107 = (float) Main.DiscoG / 255f;
                    float num108 = (float) Main.DiscoB / 255f;
                    num106 = (0.5f + num106) / 2f;
                    num107 = (0.5f + num107) / 2f;
                    num108 = (0.5f + num108) / 2f;
                    Lighting.AddLight(base.Center, num106, num107, num108);
                }
                else if (type == 95 || type == 96)
                {
                    Vector2 position34 = new Vector2(base.position.X + base.velocity.X,
                        base.position.Y + base.velocity.Y);
                    int width31 = base.width;
                    int height31 = base.height;
                    float x3 = base.velocity.X;
                    float y3 = base.velocity.Y;
                    newColor = default(Color);
                    int num109 = Dust.NewDust(position34, width31, height31, 75, x3, y3, 100, newColor, 3f * scale);
                    Main.dust[num109].noGravity = true;
                }
                else if (type == 253)
                {
                    for (int num110 = 0; num110 < 2; num110++)
                    {
                        Vector2 position35 = new Vector2(base.position.X, base.position.Y);
                        int width32 = base.width;
                        int height32 = base.height;
                        float speedX14 = base.velocity.X * 0.2f;
                        float speedY14 = base.velocity.Y * 0.2f;
                        newColor = default(Color);
                        int num111 = Dust.NewDust(position35, width32, height32, 135, speedX14, speedY14, 100, newColor,
                            2f);
                        Main.dust[num111].noGravity = true;
                        Main.dust[num111].velocity.X *= 0.3f;
                        Main.dust[num111].velocity.Y *= 0.3f;
                    }
                }
                else
                {
                    for (int num112 = 0; num112 < 2; num112++)
                    {
                        Vector2 position36 = new Vector2(base.position.X, base.position.Y);
                        int width33 = base.width;
                        int height33 = base.height;
                        float speedX15 = base.velocity.X * 0.2f;
                        float speedY15 = base.velocity.Y * 0.2f;
                        newColor = default(Color);
                        int num113 = Dust.NewDust(position36, width33, height33, 6, speedX15, speedY15, 100, newColor,
                            2f);
                        Main.dust[num113].noGravity = true;
                        Main.dust[num113].velocity.X *= 0.3f;
                        Main.dust[num113].velocity.Y *= 0.3f;
                    }
                }

                if (type != 27 && type != 96 && type != 258)
                {
                    this.ai[1] += 1f;
                }

                if (this.ai[1] >= 20f)
                {
                    base.velocity.Y += 0.2f;
                }

                if (type == 502)
                {
                    rotation = base.velocity.ToRotation() + 1.57079637f;
                    if (base.velocity.X != 0f)
                    {
                        spriteDirection = (base.direction = Math.Sign(base.velocity.X));
                    }
                }
                else
                {
                    rotation += 0.3f * (float) base.direction;
                }

                if (base.velocity.Y > 16f)
                {
                    base.velocity.Y = 16f;
                }
            }
            else if (aiStyle == 9)
            {
                if (type == 491)
                {
                    if (Main.rand.Next(2) == 0)
                    {
                        int num114;
                        switch (Main.rand.Next(3))
                        {
                            case 0:
                                num114 = 15;
                                break;
                            case 1:
                                num114 = 57;
                                break;
                            default:
                                num114 = 58;
                                break;
                        }

                        Vector2 position37 = base.position;
                        int width34 = base.width;
                        int height34 = base.height;
                        int num115 = num114;
                        float speedX16 = base.velocity.X * 0.25f;
                        float speedY16 = base.velocity.Y * 0.25f;
                        newColor = default(Color);
                        int num116 = Dust.NewDust(position37, width34, height34, num115, speedX16, speedY16, 255,
                            newColor, 0.7f);
                        Main.dust[num116].velocity *= 0.25f;
                        Main.dust[num116].position = (Main.dust[num116].position + base.position) / 2f;
                    }
                }
                else if (type == 34)
                {
                    Vector2 position38 = new Vector2(base.position.X, base.position.Y);
                    int width35 = base.width;
                    int height35 = base.height;
                    float speedX17 = base.velocity.X * 0.2f;
                    float speedY17 = base.velocity.Y * 0.2f;
                    newColor = default(Color);
                    int num117 = Dust.NewDust(position38, width35, height35, 6, speedX17, speedY17, 100, newColor,
                        3.5f);
                    Main.dust[num117].noGravity = true;
                    Main.dust[num117].velocity *= 1.4f;
                    Vector2 position39 = new Vector2(base.position.X, base.position.Y);
                    int width36 = base.width;
                    int height36 = base.height;
                    float speedX18 = base.velocity.X * 0.2f;
                    float speedY18 = base.velocity.Y * 0.2f;
                    newColor = default(Color);
                    num117 = Dust.NewDust(position39, width36, height36, 6, speedX18, speedY18, 100, newColor, 1.5f);
                }
                else if (type == 79)
                {
                    if (soundDelay == 0 && Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) > 2f)
                    {
                        soundDelay = 10;
                        Main.PlaySound(SoundID.Item9, base.position);
                    }

                    for (int num118 = 0; num118 < 1; num118++)
                    {
                        int num119 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width,
                            base.height, 66, 0f, 0f, 100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 2.5f);
                        Main.dust[num119].velocity *= 0.1f;
                        Main.dust[num119].velocity += base.velocity * 0.2f;
                        Main.dust[num119].position.X =
                            base.position.X + (float) (base.width / 2) + 4f + (float) Main.rand.Next(-2, 3);
                        Main.dust[num119].position.Y =
                            base.position.Y + (float) (base.height / 2) + (float) Main.rand.Next(-2, 3);
                        Main.dust[num119].noGravity = true;
                    }
                }
                else
                {
                    if (soundDelay == 0 && Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) > 2f)
                    {
                        soundDelay = 10;
                        Main.PlaySound(SoundID.Item9, base.position);
                    }

                    Vector2 position40 = new Vector2(base.position.X, base.position.Y);
                    int width37 = base.width;
                    int height37 = base.height;
                    newColor = default(Color);
                    int num120 = Dust.NewDust(position40, width37, height37, 15, 0f, 0f, 100, newColor, 2f);
                    Main.dust[num120].velocity *= 0.3f;
                    Main.dust[num120].position.X =
                        base.position.X + (float) (base.width / 2) + 4f + (float) Main.rand.Next(-4, 5);
                    Main.dust[num120].position.Y =
                        base.position.Y + (float) (base.height / 2) + (float) Main.rand.Next(-4, 5);
                    Main.dust[num120].noGravity = true;
                }

                if (Main.myPlayer == owner && this.ai[0] <= 0f)
                {
                    if (Main.player[owner].channel)
                    {
                        float num121 = 12f;
                        if (type == 16)
                        {
                            num121 = 15f;
                        }

                        if (type == 491)
                        {
                            num121 = 20f;
                        }

                        Vector2 vector11 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        float num122 = (float) Main.mouseX + Main.screenPosition.X - vector11.X;
                        float num123 = (float) Main.mouseY + Main.screenPosition.Y - vector11.Y;
                        if (Main.player[owner].gravDir == -1f)
                        {
                            num123 = Main.screenPosition.Y + (float) Main.screenHeight - (float) Main.mouseY -
                                     vector11.Y;
                        }

                        float num124 = (float) Math.Sqrt((double) (num122 * num122 + num123 * num123));
                        num124 = (float) Math.Sqrt((double) (num122 * num122 + num123 * num123));
                        if (this.ai[0] < 0f)
                        {
                            this.ai[0] += 1f;
                        }

                        if (type == 491 && num124 < 100f)
                        {
                            if (base.velocity.Length() < num121)
                            {
                                base.velocity *= 1.1f;
                                if (base.velocity.Length() > num121)
                                {
                                    base.velocity.Normalize();
                                    base.velocity *= num121;
                                }
                            }

                            if (this.ai[0] == 0f)
                            {
                                this.ai[0] = -10f;
                            }
                        }
                        else if (num124 > num121)
                        {
                            num124 = num121 / num124;
                            num122 *= num124;
                            num123 *= num124;
                            int num125 = (int) (num122 * 1000f);
                            int num126 = (int) (base.velocity.X * 1000f);
                            int num127 = (int) (num123 * 1000f);
                            int num128 = (int) (base.velocity.Y * 1000f);
                            if (num125 != num126 || num127 != num128)
                            {
                                netUpdate = true;
                            }

                            if (type == 491)
                            {
                                Vector2 value6 = new Vector2(num122, num123);
                                base.velocity = (base.velocity * 4f + value6) / 5f;
                            }
                            else
                            {
                                base.velocity.X = num122;
                                base.velocity.Y = num123;
                            }
                        }
                        else
                        {
                            int num129 = (int) (num122 * 1000f);
                            int num130 = (int) (base.velocity.X * 1000f);
                            int num131 = (int) (num123 * 1000f);
                            int num132 = (int) (base.velocity.Y * 1000f);
                            if (num129 != num130 || num131 != num132)
                            {
                                netUpdate = true;
                            }

                            base.velocity.X = num122;
                            base.velocity.Y = num123;
                        }
                    }
                    else if (this.ai[0] <= 0f)
                    {
                        netUpdate = true;
                        if (type != 491)
                        {
                            float num133 = 12f;
                            Vector2 vector12 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                base.position.Y + (float) base.height * 0.5f);
                            float num134 = (float) Main.mouseX + Main.screenPosition.X - vector12.X;
                            float num135 = (float) Main.mouseY + Main.screenPosition.Y - vector12.Y;
                            if (Main.player[owner].gravDir == -1f)
                            {
                                num135 = Main.screenPosition.Y + (float) Main.screenHeight - (float) Main.mouseY -
                                         vector12.Y;
                            }

                            float num136 = (float) Math.Sqrt((double) (num134 * num134 + num135 * num135));
                            if (num136 == 0f || this.ai[0] < 0f)
                            {
                                vector12 = new Vector2(
                                    Main.player[owner].position.X + (float) (Main.player[owner].width / 2),
                                    Main.player[owner].position.Y + (float) (Main.player[owner].height / 2));
                                num134 = base.position.X + (float) base.width * 0.5f - vector12.X;
                                num135 = base.position.Y + (float) base.height * 0.5f - vector12.Y;
                                num136 = (float) Math.Sqrt((double) (num134 * num134 + num135 * num135));
                            }

                            num136 = num133 / num136;
                            num134 *= num136;
                            num135 *= num136;
                            base.velocity.X = num134;
                            base.velocity.Y = num135;
                            if (base.velocity.X == 0f && base.velocity.Y == 0f)
                            {
                                Kill();
                            }
                        }

                        this.ai[0] = 1f;
                    }
                }

                if (type == 491)
                {
                    localAI[0] += 1f;
                    if (this.ai[0] > 0f && localAI[0] > 15f)
                    {
                        tileCollide = false;
                        Vector2 vector13 = Main.player[owner].Center - base.Center;
                        if (vector13.Length() < 20f)
                        {
                            Kill();
                        }

                        vector13.Normalize();
                        vector13 *= 25f;
                        base.velocity = (base.velocity * 5f + vector13) / 6f;
                    }

                    if (this.ai[0] < 0f || (base.velocity.X == 0f && base.velocity.Y == 0f))
                    {
                        rotation += 0.3f;
                    }
                    else if (this.ai[0] > 0f)
                    {
                        rotation += 0.3f * (float) base.direction;
                    }
                    else
                    {
                        rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) + 1.57f;
                    }
                }
                else if (type == 34)
                {
                    rotation += 0.3f * (float) base.direction;
                }
                else if (base.velocity.X != 0f || base.velocity.Y != 0f)
                {
                    rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) - 2.355f;
                }

                if (base.velocity.Y > 16f)
                {
                    base.velocity.Y = 16f;
                }
            }
            else if (aiStyle == 10)
            {
                if (type == 31 && this.ai[0] != 2f)
                {
                    if (Main.rand.Next(2) == 0)
                    {
                        Vector2 position41 = new Vector2(base.position.X, base.position.Y);
                        int width38 = base.width;
                        int height38 = base.height;
                        float speedY19 = base.velocity.Y / 2f;
                        newColor = default(Color);
                        int num137 = Dust.NewDust(position41, width38, height38, 32, 0f, speedY19, 0, newColor, 1f);
                        Main.dust[num137].velocity.X *= 0.4f;
                    }
                }
                else if (type == 39)
                {
                    if (Main.rand.Next(2) == 0)
                    {
                        Vector2 position42 = new Vector2(base.position.X, base.position.Y);
                        int width39 = base.width;
                        int height39 = base.height;
                        float speedY20 = base.velocity.Y / 2f;
                        newColor = default(Color);
                        int num138 = Dust.NewDust(position42, width39, height39, 38, 0f, speedY20, 0, newColor, 1f);
                        Main.dust[num138].velocity.X *= 0.4f;
                    }
                }
                else if (type >= 411 && type <= 414)
                {
                    if (Main.rand.Next(3) == 0)
                    {
                        int num139 = 9;
                        if (type == 412 || type == 414)
                        {
                            num139 = 11;
                        }

                        if (type == 413)
                        {
                            num139 = 19;
                        }

                        Vector2 position43 = new Vector2(base.position.X, base.position.Y);
                        int width40 = base.width;
                        int height40 = base.height;
                        int num140 = num139;
                        float speedY21 = base.velocity.Y / 2f;
                        newColor = default(Color);
                        int num141 = Dust.NewDust(position43, width40, height40, num140, 0f, speedY21, 0, newColor, 1f);
                        Main.dust[num141].noGravity = true;
                        Main.dust[num141].velocity -= base.velocity * 0.5f;
                    }
                }
                else if (type == 40)
                {
                    if (Main.rand.Next(2) == 0)
                    {
                        Vector2 position44 = new Vector2(base.position.X, base.position.Y);
                        int width41 = base.width;
                        int height41 = base.height;
                        float speedY22 = base.velocity.Y / 2f;
                        newColor = default(Color);
                        int num142 = Dust.NewDust(position44, width41, height41, 36, 0f, speedY22, 0, newColor, 1f);
                        Main.dust[num142].velocity *= 0.4f;
                    }
                }
                else if (type == 42 || type == 31)
                {
                    if (Main.rand.Next(2) == 0)
                    {
                        Vector2 position45 = new Vector2(base.position.X, base.position.Y);
                        int width42 = base.width;
                        int height42 = base.height;
                        newColor = default(Color);
                        int num143 = Dust.NewDust(position45, width42, height42, 32, 0f, 0f, 0, newColor, 1f);
                        Main.dust[num143].velocity.X *= 0.4f;
                    }
                }
                else if (type == 56 || type == 65)
                {
                    if (Main.rand.Next(2) == 0)
                    {
                        Vector2 position46 = new Vector2(base.position.X, base.position.Y);
                        int width43 = base.width;
                        int height43 = base.height;
                        newColor = default(Color);
                        int num144 = Dust.NewDust(position46, width43, height43, 14, 0f, 0f, 0, newColor, 1f);
                        Main.dust[num144].velocity.X *= 0.4f;
                    }
                }
                else if (type == 67 || type == 68)
                {
                    if (Main.rand.Next(2) == 0)
                    {
                        Vector2 position47 = new Vector2(base.position.X, base.position.Y);
                        int width44 = base.width;
                        int height44 = base.height;
                        newColor = default(Color);
                        int num145 = Dust.NewDust(position47, width44, height44, 51, 0f, 0f, 0, newColor, 1f);
                        Main.dust[num145].velocity.X *= 0.4f;
                    }
                }
                else if (type == 71)
                {
                    if (Main.rand.Next(2) == 0)
                    {
                        Vector2 position48 = new Vector2(base.position.X, base.position.Y);
                        int width45 = base.width;
                        int height45 = base.height;
                        newColor = default(Color);
                        int num146 = Dust.NewDust(position48, width45, height45, 53, 0f, 0f, 0, newColor, 1f);
                        Main.dust[num146].velocity.X *= 0.4f;
                    }
                }
                else if (type == 179)
                {
                    if (Main.rand.Next(2) == 0)
                    {
                        Vector2 position49 = new Vector2(base.position.X, base.position.Y);
                        int width46 = base.width;
                        int height46 = base.height;
                        newColor = default(Color);
                        int num147 = Dust.NewDust(position49, width46, height46, 149, 0f, 0f, 0, newColor, 1f);
                        Main.dust[num147].velocity.X *= 0.4f;
                    }
                }
                else if (type == 241 || type == 354)
                {
                    if (Main.rand.Next(2) == 0)
                    {
                        Vector2 position50 = new Vector2(base.position.X, base.position.Y);
                        int width47 = base.width;
                        int height47 = base.height;
                        newColor = default(Color);
                        int num148 = Dust.NewDust(position50, width47, height47, 36, 0f, 0f, 0, newColor, 1f);
                        Main.dust[num148].velocity.X *= 0.4f;
                    }
                }
                else if (type != 109 && Main.rand.Next(20) == 0)
                {
                    Vector2 position51 = new Vector2(base.position.X, base.position.Y);
                    int width48 = base.width;
                    int height48 = base.height;
                    newColor = default(Color);
                    Dust.NewDust(position51, width48, height48, 0, 0f, 0f, 0, newColor, 1f);
                }

                tileCollide = true;
                localAI[1] = 0f;
                if (Main.myPlayer == owner && this.ai[0] == 0f)
                {
                    tileCollide = false;
                    if (Main.player[owner].channel)
                    {
                        localAI[1] = -1f;
                        float num149 = 12f;
                        Vector2 vector14 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        float num150 = (float) Main.mouseX + Main.screenPosition.X - vector14.X;
                        float num151 = (float) Main.mouseY + Main.screenPosition.Y - vector14.Y;
                        if (Main.player[owner].gravDir == -1f)
                        {
                            num151 = Main.screenPosition.Y + (float) Main.screenHeight - (float) Main.mouseY -
                                     vector14.Y;
                        }

                        float num152 = (float) Math.Sqrt((double) (num150 * num150 + num151 * num151));
                        num152 = (float) Math.Sqrt((double) (num150 * num150 + num151 * num151));
                        if (num152 > num149)
                        {
                            num152 = num149 / num152;
                            num150 *= num152;
                            num151 *= num152;
                            if (num150 != base.velocity.X || num151 != base.velocity.Y)
                            {
                                netUpdate = true;
                            }

                            base.velocity.X = num150;
                            base.velocity.Y = num151;
                        }
                        else
                        {
                            if (num150 != base.velocity.X || num151 != base.velocity.Y)
                            {
                                netUpdate = true;
                            }

                            base.velocity.X = num150;
                            base.velocity.Y = num151;
                        }
                    }
                    else
                    {
                        this.ai[0] = 1f;
                        netUpdate = true;
                    }
                }

                if (this.ai[0] == 1f && type != 109)
                {
                    if (type == 42 || type == 65 || type == 68 || type == 354)
                    {
                        this.ai[1] += 1f;
                        if (this.ai[1] >= 60f)
                        {
                            this.ai[1] = 60f;
                            base.velocity.Y += 0.2f;
                        }
                    }
                    else
                    {
                        base.velocity.Y += 0.41f;
                    }
                }
                else if (this.ai[0] == 2f && type != 109)
                {
                    base.velocity.Y += 0.2f;
                    if ((double) base.velocity.X < -0.04)
                    {
                        base.velocity.X += 0.04f;
                    }
                    else if ((double) base.velocity.X > 0.04)
                    {
                        base.velocity.X -= 0.04f;
                    }
                    else
                    {
                        base.velocity.X = 0f;
                    }
                }

                rotation += 0.1f;
                if (base.velocity.Y > 10f)
                {
                    base.velocity.Y = 10f;
                }
            }
            else if (aiStyle == 11)
            {
                if (type == 72 || type == 86 || type == 87)
                {
                    if (base.velocity.X > 0f)
                    {
                        spriteDirection = -1;
                    }
                    else if (base.velocity.X < 0f)
                    {
                        spriteDirection = 1;
                    }

                    rotation = base.velocity.X * 0.1f;
                    frameCounter++;
                    if (frameCounter >= 4)
                    {
                        frame++;
                        frameCounter = 0;
                    }

                    if (frame >= 4)
                    {
                        frame = 0;
                    }

                    if (Main.rand.Next(6) == 0)
                    {
                        int num153 = 56;
                        if (type == 86)
                        {
                            num153 = 73;
                        }
                        else if (type == 87)
                        {
                            num153 = 74;
                        }

                        Vector2 position52 = base.position;
                        int width49 = base.width;
                        int height49 = base.height;
                        int num154 = num153;
                        newColor = default(Color);
                        int num155 = Dust.NewDust(position52, width49, height49, num154, 0f, 0f, 200, newColor, 0.8f);
                        Main.dust[num155].velocity *= 0.3f;
                        Main.dust[num155].shader =
                            GameShaders.Armor.GetSecondaryShader(Main.player[owner].cLight, Main.player[owner]);
                    }
                }
                else
                {
                    rotation += 0.02f;
                }

                if (Main.myPlayer == owner)
                {
                    if (type == 72)
                    {
                        if (Main.player[Main.myPlayer].blueFairy)
                        {
                            timeLeft = 2;
                        }
                    }
                    else if (type == 86)
                    {
                        if (Main.player[Main.myPlayer].redFairy)
                        {
                            timeLeft = 2;
                        }
                    }
                    else if (type == 87)
                    {
                        if (Main.player[Main.myPlayer].greenFairy)
                        {
                            timeLeft = 2;
                        }
                    }
                    else if (Main.player[Main.myPlayer].lightOrb)
                    {
                        timeLeft = 2;
                    }
                }

                if (!Main.player[owner].dead)
                {
                    float num156 = 3f;
                    if (type == 72 || type == 86 || type == 87)
                    {
                        num156 = 3.75f;
                    }

                    Vector2 vector15 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    float num157 = Main.player[owner].position.X + (float) (Main.player[owner].width / 2) - vector15.X;
                    float num158 = Main.player[owner].position.Y + (float) (Main.player[owner].height / 2) - vector15.Y;
                    int num159 = 70;
                    if (type == 18)
                    {
                        if (Main.player[owner].controlUp)
                        {
                            num158 = Main.player[owner].position.Y - 40f - vector15.Y;
                            num157 -= 6f;
                            num159 = 4;
                        }
                        else if (Main.player[owner].controlDown)
                        {
                            num158 = Main.player[owner].position.Y + (float) Main.player[owner].height + 40f -
                                     vector15.Y;
                            num157 -= 6f;
                            num159 = 4;
                        }
                    }

                    float num160 = (float) Math.Sqrt((double) (num157 * num157 + num158 * num158));
                    num160 = (float) Math.Sqrt((double) (num157 * num157 + num158 * num158));
                    if (type == 72 || type == 86 || type == 87)
                    {
                        num159 = 40;
                    }

                    if (num160 > 800f)
                    {
                        base.position.X = Main.player[owner].position.X + (float) (Main.player[owner].width / 2) -
                                          (float) (base.width / 2);
                        base.position.Y = Main.player[owner].position.Y + (float) (Main.player[owner].height / 2) -
                                          (float) (base.height / 2);
                    }
                    else if (num160 > (float) num159)
                    {
                        num160 = num156 / num160;
                        num157 *= num160;
                        num158 *= num160;
                        base.velocity.X = num157;
                        base.velocity.Y = num158;
                    }
                    else
                    {
                        base.velocity.X = 0f;
                        base.velocity.Y = 0f;
                    }
                }
                else
                {
                    Kill();
                }
            }
            else if (aiStyle == 12)
            {
                if (type == 288 && localAI[0] == 0f)
                {
                    localAI[0] = 1f;
                    Main.PlaySound(SoundID.Item17, base.position);
                }

                if (type == 280 || type == 288)
                {
                    scale -= 0.002f;
                    if (scale <= 0f)
                    {
                        Kill();
                    }

                    if (type == 288)
                    {
                        this.ai[0] = 4f;
                    }

                    if (this.ai[0] > 3f)
                    {
                        base.velocity.Y += 0.075f;
                        for (int num161 = 0; num161 < 3; num161++)
                        {
                            float num162 = base.velocity.X / 3f * (float) num161;
                            float num163 = base.velocity.Y / 3f * (float) num161;
                            int num164 = 14;
                            Vector2 position53 = new Vector2(base.position.X + (float) num164,
                                base.position.Y + (float) num164);
                            int width50 = base.width - num164 * 2;
                            int height50 = base.height - num164 * 2;
                            newColor = default(Color);
                            int num165 = Dust.NewDust(position53, width50, height50, 170, 0f, 0f, 100, newColor, 1f);
                            Main.dust[num165].noGravity = true;
                            Main.dust[num165].velocity *= 0.1f;
                            Main.dust[num165].velocity += base.velocity * 0.5f;
                            Main.dust[num165].position.X -= num162;
                            Main.dust[num165].position.Y -= num163;
                        }

                        if (Main.rand.Next(8) == 0)
                        {
                            int num166 = 16;
                            Vector2 position54 = new Vector2(base.position.X + (float) num166,
                                base.position.Y + (float) num166);
                            int width51 = base.width - num166 * 2;
                            int height51 = base.height - num166 * 2;
                            newColor = default(Color);
                            int num167 = Dust.NewDust(position54, width51, height51, 170, 0f, 0f, 100, newColor, 0.5f);
                            Main.dust[num167].velocity *= 0.25f;
                            Main.dust[num167].velocity += base.velocity * 0.5f;
                        }
                    }
                    else
                    {
                        this.ai[0] += 1f;
                    }
                }
                else
                {
                    scale -= 0.02f;
                    if (scale <= 0f)
                    {
                        Kill();
                    }

                    if (this.ai[0] > 3f)
                    {
                        base.velocity.Y += 0.2f;
                        for (int num168 = 0; num168 < 1; num168++)
                        {
                            for (int num169 = 0; num169 < 3; num169++)
                            {
                                float num170 = base.velocity.X / 3f * (float) num169;
                                float num171 = base.velocity.Y / 3f * (float) num169;
                                int num172 = 6;
                                Vector2 position55 = new Vector2(base.position.X + (float) num172,
                                    base.position.Y + (float) num172);
                                int width52 = base.width - num172 * 2;
                                int height52 = base.height - num172 * 2;
                                newColor = default(Color);
                                int num173 = Dust.NewDust(position55, width52, height52, 172, 0f, 0f, 100, newColor,
                                    1.2f);
                                Main.dust[num173].noGravity = true;
                                Main.dust[num173].velocity *= 0.3f;
                                Main.dust[num173].velocity += base.velocity * 0.5f;
                                Main.dust[num173].position.X -= num170;
                                Main.dust[num173].position.Y -= num171;
                            }

                            if (Main.rand.Next(8) == 0)
                            {
                                int num174 = 6;
                                Vector2 position56 = new Vector2(base.position.X + (float) num174,
                                    base.position.Y + (float) num174);
                                int width53 = base.width - num174 * 2;
                                int height53 = base.height - num174 * 2;
                                newColor = default(Color);
                                int num175 = Dust.NewDust(position56, width53, height53, 172, 0f, 0f, 100, newColor,
                                    0.75f);
                                Main.dust[num175].velocity *= 0.5f;
                                Main.dust[num175].velocity += base.velocity * 0.5f;
                            }
                        }
                    }
                    else
                    {
                        this.ai[0] += 1f;
                    }
                }
            }
            else if (aiStyle == 13)
            {
                if (Main.player[owner].dead)
                {
                    Kill();
                }
                else
                {
                    if (type != 481)
                    {
                        Main.player[owner].itemAnimation = 5;
                        Main.player[owner].itemTime = 5;
                    }

                    if (alpha == 0)
                    {
                        if (base.position.X + (float) (base.width / 2) >
                            Main.player[owner].position.X + (float) (Main.player[owner].width / 2))
                        {
                            Main.player[owner].ChangeDir(1);
                        }
                        else
                        {
                            Main.player[owner].ChangeDir(-1);
                        }
                    }

                    if (type == 481)
                    {
                        if (this.ai[0] == 0f)
                        {
                            extraUpdates = 0;
                        }
                        else
                        {
                            extraUpdates = 1;
                        }
                    }

                    Vector2 vector16 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    float num176 = Main.player[owner].position.X + (float) (Main.player[owner].width / 2) - vector16.X;
                    float num177 = Main.player[owner].position.Y + (float) (Main.player[owner].height / 2) - vector16.Y;
                    float num178 = (float) Math.Sqrt((double) (num176 * num176 + num177 * num177));
                    if (this.ai[0] == 0f)
                    {
                        if (num178 > 700f)
                        {
                            this.ai[0] = 1f;
                        }
                        else if (type == 262 && num178 > 500f)
                        {
                            this.ai[0] = 1f;
                        }
                        else if (type == 271 && num178 > 200f)
                        {
                            this.ai[0] = 1f;
                        }
                        else if (type == 273 && num178 > 150f)
                        {
                            this.ai[0] = 1f;
                        }
                        else if (type == 481 && num178 > 350f)
                        {
                            this.ai[0] = 1f;
                        }

                        rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) + 1.57f;
                        this.ai[1] += 1f;
                        if (this.ai[1] > 5f)
                        {
                            alpha = 0;
                        }

                        if (type == 262 && this.ai[1] > 8f)
                        {
                            this.ai[1] = 8f;
                        }

                        if (type == 271 && this.ai[1] > 8f)
                        {
                            this.ai[1] = 8f;
                        }

                        if (type == 273 && this.ai[1] > 8f)
                        {
                            this.ai[1] = 8f;
                        }

                        if (type == 481 && this.ai[1] > 8f)
                        {
                            this.ai[1] = 8f;
                        }

                        if (type == 404 && this.ai[1] > 8f)
                        {
                            this.ai[1] = 0f;
                        }

                        if (this.ai[1] >= 10f)
                        {
                            this.ai[1] = 15f;
                            base.velocity.Y += 0.3f;
                        }

                        if (type == 262 && base.velocity.X < 0f)
                        {
                            spriteDirection = -1;
                        }
                        else if (type == 262)
                        {
                            spriteDirection = 1;
                        }

                        if (type == 271 && base.velocity.X < 0f)
                        {
                            spriteDirection = -1;
                        }
                        else if (type == 271)
                        {
                            spriteDirection = 1;
                        }
                    }
                    else if (this.ai[0] == 1f)
                    {
                        tileCollide = false;
                        rotation = (float) Math.Atan2((double) num177, (double) num176) - 1.57f;
                        float num179 = 20f;
                        if (type == 262)
                        {
                            num179 = 30f;
                        }

                        if (num178 < 50f)
                        {
                            Kill();
                        }

                        num178 = num179 / num178;
                        num176 *= num178;
                        num177 *= num178;
                        base.velocity.X = num176;
                        base.velocity.Y = num177;
                        if (type == 262 && base.velocity.X < 0f)
                        {
                            spriteDirection = 1;
                        }
                        else if (type == 262)
                        {
                            spriteDirection = -1;
                        }

                        if (type == 271 && base.velocity.X < 0f)
                        {
                            spriteDirection = 1;
                        }
                        else if (type == 271)
                        {
                            spriteDirection = -1;
                        }
                    }
                }
            }
            else if (aiStyle == 14)
            {
                if (type == 473 && Main.netMode != 2)
                {
                    localAI[0] += 1f;
                    if (localAI[0] >= 10f)
                    {
                        localAI[0] = 0f;
                        int num180 = 30;
                        if ((base.Center - Main.player[Main.myPlayer].Center).Length() <
                            (float) (Main.screenWidth + num180 * 16))
                        {
                            int num181 = (int) base.Center.X / 16;
                            int num182 = (int) base.Center.Y / 16;
                            for (int num183 = num181 - num180; num183 <= num181 + num180; num183++)
                            {
                                for (int num184 = num182 - num180; num184 <= num182 + num180; num184++)
                                {
                                    if (Main.rand.Next(4) == 0 &&
                                        new Vector2((float) (num181 - num183), (float) (num182 - num184)).Length() <
                                        (float) num180 && num183 > 0 && num183 < Main.maxTilesX - 1 && num184 > 0 &&
                                        num184 < Main.maxTilesY - 1 && Main.tile[num183, num184] != null &&
                                        Main.tile[num183, num184].active())
                                    {
                                        bool flag3 = false;
                                        if (Main.tile[num183, num184].type == 185 &&
                                            Main.tile[num183, num184].frameY == 18)
                                        {
                                            if (Main.tile[num183, num184].frameX >= 576 &&
                                                Main.tile[num183, num184].frameX <= 882)
                                            {
                                                flag3 = true;
                                            }
                                        }
                                        else if (Main.tile[num183, num184].type == 186 &&
                                                 Main.tile[num183, num184].frameX >= 864 &&
                                                 Main.tile[num183, num184].frameX <= 1170)
                                        {
                                            flag3 = true;
                                        }

                                        if (flag3 || Main.tileSpelunker[Main.tile[num183, num184].type] ||
                                            (Main.tileAlch[Main.tile[num183, num184].type] &&
                                             Main.tile[num183, num184].type != 82))
                                        {
                                            Vector2 position57 = new Vector2((float) (num183 * 16),
                                                (float) (num184 * 16));
                                            newColor = default(Color);
                                            int num185 = Dust.NewDust(position57, 16, 16, 204, 0f, 0f, 150, newColor,
                                                0.3f);
                                            Main.dust[num185].fadeIn = 0.75f;
                                            Main.dust[num185].velocity *= 0.1f;
                                            Main.dust[num185].noLight = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                if (type == 352)
                {
                    if (localAI[1] == 0f)
                    {
                        localAI[1] = 1f;
                    }

                    alpha += (int) (25f * localAI[1]);
                    if (alpha <= 0)
                    {
                        alpha = 0;
                        localAI[1] = 1f;
                    }
                    else if (alpha >= 255)
                    {
                        alpha = 255;
                        localAI[1] = -1f;
                    }

                    scale += localAI[1] * 0.01f;
                }

                if (type == 346)
                {
                    if (localAI[0] == 0f)
                    {
                        localAI[0] = 1f;
                        Main.PlaySound(SoundID.Item1, base.position);
                    }

                    frame = (int) this.ai[1];
                    if (owner == Main.myPlayer && timeLeft == 1)
                    {
                        for (int num186 = 0; num186 < 5; num186++)
                        {
                            float num187 = 10f;
                            Vector2 vector17 = new Vector2(base.Center.X, base.Center.Y);
                            float num188 = (float) Main.rand.Next(-20, 21);
                            float num189 = (float) Main.rand.Next(-20, 0);
                            float num190 = (float) Math.Sqrt((double) (num188 * num188 + num189 * num189));
                            num190 = num187 / num190;
                            num188 *= num190;
                            num189 *= num190;
                            num188 *= 1f + (float) Main.rand.Next(-30, 31) * 0.01f;
                            num189 *= 1f + (float) Main.rand.Next(-30, 31) * 0.01f;
                            NewProjectile(vector17.X, vector17.Y, num188, num189, 347, 40, 0f, Main.myPlayer, 0f,
                                this.ai[1]);
                        }
                    }
                }

                if (type == 196)
                {
                    int num191 = Main.rand.Next(1, 3);
                    for (int num192 = 0; num192 < num191; num192++)
                    {
                        Vector2 position58 = base.position;
                        int width54 = base.width;
                        int height54 = base.height;
                        newColor = default(Color);
                        int num193 = Dust.NewDust(position58, width54, height54, 31, 0f, 0f, 100, newColor, 1f);
                        Main.dust[num193].alpha += Main.rand.Next(100);
                        Main.dust[num193].velocity *= 0.3f;
                        Main.dust[num193].velocity.X += (float) Main.rand.Next(-10, 11) * 0.025f;
                        Main.dust[num193].velocity.Y -= 0.4f + (float) Main.rand.Next(-3, 14) * 0.15f;
                        Main.dust[num193].fadeIn = 1.25f + (float) Main.rand.Next(20) * 0.15f;
                    }
                }

                if (type == 53)
                {
                    try
                    {
                        int num194 = (int) (base.position.X / 16f) - 1;
                        int num195 = (int) ((base.position.X + (float) base.width) / 16f) + 2;
                        int num196 = (int) (base.position.Y / 16f) - 1;
                        int num197 = (int) ((base.position.Y + (float) base.height) / 16f) + 2;
                        if (num194 < 0)
                        {
                            num194 = 0;
                        }

                        if (num195 > Main.maxTilesX)
                        {
                            num195 = Main.maxTilesX;
                        }

                        if (num196 < 0)
                        {
                            num196 = 0;
                        }

                        if (num197 > Main.maxTilesY)
                        {
                            num197 = Main.maxTilesY;
                        }

                        for (int num198 = num194; num198 < num195; num198++)
                        {
                            for (int num199 = num196; num199 < num197; num199++)
                            {
                                if (Main.tile[num198, num199] != null && Main.tile[num198, num199].nactive() &&
                                    (Main.tileSolid[Main.tile[num198, num199].type] ||
                                     (Main.tileSolidTop[Main.tile[num198, num199].type] &&
                                      Main.tile[num198, num199].frameY == 0)))
                                {
                                    Vector2 vector18 = default(Vector2);
                                    vector18.X = (float) (num198 * 16);
                                    vector18.Y = (float) (num199 * 16);
                                    if (base.position.X + (float) base.width > vector18.X &&
                                        base.position.X < vector18.X + 16f &&
                                        base.position.Y + (float) base.height > vector18.Y &&
                                        base.position.Y < vector18.Y + 16f)
                                    {
                                        base.velocity.X = 0f;
                                        base.velocity.Y = -0.2f;
                                    }
                                }
                            }
                        }
                    }
                    catch
                    {
                    }
                }

                if (type == 277)
                {
                    if (alpha > 0)
                    {
                        alpha -= 30;
                        if (alpha < 0)
                        {
                            alpha = 0;
                        }
                    }

                    if (Main.expertMode)
                    {
                        float scaleFactor = 12f;
                        int num200 = Player.FindClosest(base.Center, 1, 1);
                        Vector2 value7 = Main.player[num200].Center - base.Center;
                        value7.Normalize();
                        value7 *= scaleFactor;
                        int num201 = 200;
                        base.velocity.X = (base.velocity.X * (float) (num201 - 1) + value7.X) / (float) num201;
                        if (base.velocity.Length() > 16f)
                        {
                            base.velocity.Normalize();
                            base.velocity *= 16f;
                        }
                    }
                }

                if (type == 261 || type == 277)
                {
                    this.ai[0] += 1f;
                    if (this.ai[0] > 15f)
                    {
                        this.ai[0] = 15f;
                        if (base.velocity.Y == 0f && base.velocity.X != 0f)
                        {
                            base.velocity.X *= 0.97f;
                            if ((double) base.velocity.X > -0.01 && (double) base.velocity.X < 0.01)
                            {
                                Kill();
                            }
                        }

                        base.velocity.Y += 0.2f;
                    }

                    rotation += base.velocity.X * 0.05f;
                }
                else if (type == 378)
                {
                    if (localAI[0] == 0f)
                    {
                        Main.PlaySound(SoundID.Item17, base.position);
                        localAI[0] += 1f;
                    }

                    Rectangle rectangle2 = new Rectangle((int) base.position.X, (int) base.position.Y, base.width,
                        base.height);
                    for (int num202 = 0; num202 < 200; num202++)
                    {
                        if (Main.npc[num202].CanBeChasedBy(this, true))
                        {
                            Rectangle value8 = new Rectangle((int) Main.npc[num202].position.X,
                                (int) Main.npc[num202].position.Y, Main.npc[num202].width, Main.npc[num202].height);
                            if (rectangle2.Intersects(value8))
                            {
                                Kill();
                                return;
                            }
                        }
                    }

                    this.ai[0] += 1f;
                    if (this.ai[0] > 10f)
                    {
                        this.ai[0] = 90f;
                        if (base.velocity.Y == 0f && base.velocity.X != 0f)
                        {
                            base.velocity.X *= 0.96f;
                            if ((double) base.velocity.X > -0.01 && (double) base.velocity.X < 0.01)
                            {
                                Kill();
                            }
                        }

                        base.velocity.Y += 0.2f;
                    }

                    rotation += base.velocity.X * 0.1f;
                }
                else if (type == 483)
                {
                    this.ai[0] += 1f;
                    if (this.ai[0] > 5f)
                    {
                        if (owner == Main.myPlayer && this.ai[0] > (float) Main.rand.Next(20, 130))
                        {
                            Kill();
                        }

                        if (base.velocity.Y == 0f && base.velocity.X != 0f)
                        {
                            base.velocity.X *= 0.97f;
                            if ((double) base.velocity.X > -0.01 && (double) base.velocity.X < 0.01)
                            {
                                base.velocity.X = 0f;
                                netUpdate = true;
                            }
                        }

                        base.velocity.Y += 0.3f;
                        base.velocity.X *= 0.99f;
                    }

                    rotation += base.velocity.X * 0.05f;
                }
                else if (type == 538)
                {
                    this.ai[0] += 1f;
                    if (this.ai[0] > 60f || base.velocity.Y >= 0f)
                    {
                        alpha += 6;
                        base.velocity *= 0.5f;
                    }
                    else if (this.ai[0] > 5f)
                    {
                        base.velocity.Y += 0.1f;
                        base.velocity.X *= 1.025f;
                        alpha -= 23;
                        scale = 0.8f * (255f - (float) alpha) / 255f;
                        if (alpha < 0)
                        {
                            alpha = 0;
                        }
                    }

                    if (alpha >= 255 && this.ai[0] > 5f)
                    {
                        Kill();
                        return;
                    }
                }
                else
                {
                    this.ai[0] += 1f;
                    if (this.ai[0] > 5f)
                    {
                        this.ai[0] = 5f;
                        if (base.velocity.Y == 0f && base.velocity.X != 0f)
                        {
                            base.velocity.X *= 0.97f;
                            if ((double) base.velocity.X > -0.01 && (double) base.velocity.X < 0.01)
                            {
                                base.velocity.X = 0f;
                                netUpdate = true;
                            }
                        }

                        base.velocity.Y += 0.2f;
                    }

                    rotation += base.velocity.X * 0.1f;
                }

                if (type == 538)
                {
                    if (localAI[1] == 0f)
                    {
                        localAI[1] = 1f;
                        Main.PlaySound(4, (int) base.position.X, (int) base.position.Y, 7, 1f, 0f);
                    }

                    if (base.velocity.Y < 0f && this.ai[0] < 60f)
                    {
                        if (Main.rand.Next(4) == 0)
                        {
                            Vector2 position59 = base.position;
                            int width55 = base.width;
                            int height55 = base.height;
                            newColor = default(Color);
                            int num203 = Dust.NewDust(position59, width55, height55, 180, 0f, 0f, 100, newColor, 1f);
                            Main.dust[num203].position = base.Center;
                            Main.dust[num203].scale += (float) Main.rand.Next(50) * 0.01f;
                            Main.dust[num203].noGravity = true;
                            Main.dust[num203].velocity.Y -= 2f;
                        }

                        if (Main.rand.Next(6) == 0)
                        {
                            Vector2 position60 = base.position;
                            int width56 = base.width;
                            int height56 = base.height;
                            newColor = default(Color);
                            int num204 = Dust.NewDust(position60, width56, height56, 176, 0f, 0f, 100, newColor, 1f);
                            Main.dust[num204].position = base.Center;
                            Main.dust[num204].scale += 0.3f + (float) Main.rand.Next(50) * 0.01f;
                            Main.dust[num204].noGravity = true;
                            Main.dust[num204].velocity *= 0.1f;
                        }
                    }
                }

                if (type == 450)
                {
                    if (this.ai[1] == 0f)
                    {
                        this.ai[1] = 1f;
                        Main.PlaySound(SoundID.Item13, base.position);
                    }

                    if (Main.rand.Next(2) == 0)
                    {
                        Vector2 position61 = base.position;
                        int width57 = base.width;
                        int height57 = base.height;
                        newColor = default(Color);
                        int num205 = Dust.NewDust(position61, width57, height57, 228, 0f, 0f, 100, newColor, 1f);
                        Main.dust[num205].position.X -= 2f;
                        Main.dust[num205].position.Y += 2f;
                        Main.dust[num205].scale += (float) Main.rand.Next(50) * 0.01f;
                        Main.dust[num205].noGravity = true;
                        Main.dust[num205].velocity.Y -= 2f;
                    }

                    if (Main.rand.Next(4) == 0)
                    {
                        Vector2 position62 = base.position;
                        int width58 = base.width;
                        int height58 = base.height;
                        newColor = default(Color);
                        int num206 = Dust.NewDust(position62, width58, height58, 228, 0f, 0f, 100, newColor, 1f);
                        Main.dust[num206].position.X -= 2f;
                        Main.dust[num206].position.Y += 2f;
                        Main.dust[num206].scale += 0.3f + (float) Main.rand.Next(50) * 0.01f;
                        Main.dust[num206].noGravity = true;
                        Main.dust[num206].velocity *= 0.1f;
                    }

                    if (++frameCounter >= 3)
                    {
                        frameCounter = 0;
                        if (++frame >= 5)
                        {
                            frame = 0;
                        }
                    }

                    if ((double) base.velocity.Y < 0.25 && (double) base.velocity.Y > 0.15)
                    {
                        base.velocity.X *= 0.8f;
                    }

                    rotation = (0f - base.velocity.X) * 0.05f;
                }

                if (type == 480)
                {
                    alpha = 255;
                    Vector2 position63 = base.position;
                    int width59 = base.width;
                    int height59 = base.height;
                    newColor = default(Color);
                    int num207 = Dust.NewDust(position63, width59, height59, 75, 0f, 0f, 100, newColor, 1f);
                    Main.dust[num207].position.X -= 2f;
                    Main.dust[num207].position.Y += 2f;
                    Main.dust[num207].scale += (float) Main.rand.Next(50) * 0.01f;
                    Main.dust[num207].noGravity = true;
                    Main.dust[num207].velocity.Y -= 2f;
                    if (Main.rand.Next(2) == 0)
                    {
                        Vector2 position64 = base.position;
                        int width60 = base.width;
                        int height60 = base.height;
                        newColor = default(Color);
                        int num208 = Dust.NewDust(position64, width60, height60, 75, 0f, 0f, 100, newColor, 1f);
                        Main.dust[num208].position.X -= 2f;
                        Main.dust[num208].position.Y += 2f;
                        Main.dust[num208].scale += 0.3f + (float) Main.rand.Next(50) * 0.01f;
                        Main.dust[num208].noGravity = true;
                        Main.dust[num208].velocity *= 0.1f;
                    }
                }

                if ((type >= 326 && type <= 328) || (type >= 400 && type <= 402))
                {
                    if (wet)
                    {
                        Kill();
                    }

                    if (this.ai[1] == 0f && type >= 326 && type <= 328)
                    {
                        this.ai[1] = 1f;
                        Main.PlaySound(SoundID.Item13, base.position);
                    }

                    Vector2 position65 = base.position;
                    int width61 = base.width;
                    int height61 = base.height;
                    newColor = default(Color);
                    int num209 = Dust.NewDust(position65, width61, height61, 6, 0f, 0f, 100, newColor, 1f);
                    Main.dust[num209].position.X -= 2f;
                    Main.dust[num209].position.Y += 2f;
                    Main.dust[num209].scale += (float) Main.rand.Next(50) * 0.01f;
                    Main.dust[num209].noGravity = true;
                    Main.dust[num209].velocity.Y -= 2f;
                    if (Main.rand.Next(2) == 0)
                    {
                        Vector2 position66 = base.position;
                        int width62 = base.width;
                        int height62 = base.height;
                        newColor = default(Color);
                        int num210 = Dust.NewDust(position66, width62, height62, 6, 0f, 0f, 100, newColor, 1f);
                        Main.dust[num210].position.X -= 2f;
                        Main.dust[num210].position.Y += 2f;
                        Main.dust[num210].scale += 0.3f + (float) Main.rand.Next(50) * 0.01f;
                        Main.dust[num210].noGravity = true;
                        Main.dust[num210].velocity *= 0.1f;
                    }

                    if ((double) base.velocity.Y < 0.25 && (double) base.velocity.Y > 0.15)
                    {
                        base.velocity.X *= 0.8f;
                    }

                    rotation = (0f - base.velocity.X) * 0.05f;
                }

                if (base.velocity.Y > 16f)
                {
                    base.velocity.Y = 16f;
                }
            }
            else if (aiStyle == 15)
            {
                if (type == 25)
                {
                    if (Main.rand.Next(15) == 0)
                    {
                        Vector2 position67 = base.position;
                        int width63 = base.width;
                        int height63 = base.height;
                        newColor = default(Color);
                        Dust.NewDust(position67, width63, height63, 14, 0f, 0f, 150, newColor, 1.3f);
                    }
                }
                else if (type == 26)
                {
                    Vector2 position68 = base.position;
                    int width64 = base.width;
                    int height64 = base.height;
                    float speedX19 = base.velocity.X * 0.4f;
                    float speedY23 = base.velocity.Y * 0.4f;
                    newColor = default(Color);
                    int num211 = Dust.NewDust(position68, width64, height64, 172, speedX19, speedY23, 100, newColor,
                        1.5f);
                    Main.dust[num211].noGravity = true;
                    Main.dust[num211].velocity.X /= 2f;
                    Main.dust[num211].velocity.Y /= 2f;
                }
                else if (type == 35)
                {
                    Vector2 position69 = base.position;
                    int width65 = base.width;
                    int height65 = base.height;
                    float speedX20 = base.velocity.X * 0.4f;
                    float speedY24 = base.velocity.Y * 0.4f;
                    newColor = default(Color);
                    int num212 = Dust.NewDust(position69, width65, height65, 6, speedX20, speedY24, 100, newColor, 3f);
                    Main.dust[num212].noGravity = true;
                    Main.dust[num212].velocity.X *= 2f;
                    Main.dust[num212].velocity.Y *= 2f;
                }
                else if (type == 154)
                {
                    Vector2 position70 = base.position;
                    int width66 = base.width;
                    int height66 = base.height;
                    float speedX21 = base.velocity.X * 0.4f;
                    float speedY25 = base.velocity.Y * 0.4f;
                    newColor = default(Color);
                    int num213 = Dust.NewDust(position70, width66, height66, 115, speedX21, speedY25, 140, newColor,
                        1.5f);
                    Main.dust[num213].noGravity = true;
                    Main.dust[num213].velocity *= 0.25f;
                }

                if (Main.player[owner].dead)
                {
                    Kill();
                }
                else
                {
                    Main.player[owner].itemAnimation = 10;
                    Main.player[owner].itemTime = 10;
                    if (base.position.X + (float) (base.width / 2) >
                        Main.player[owner].position.X + (float) (Main.player[owner].width / 2))
                    {
                        Main.player[owner].ChangeDir(1);
                        base.direction = 1;
                    }
                    else
                    {
                        Main.player[owner].ChangeDir(-1);
                        base.direction = -1;
                    }

                    Vector2 mountedCenter2 = Main.player[owner].MountedCenter;
                    Vector2 vector19 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    float num214 = mountedCenter2.X - vector19.X;
                    float num215 = mountedCenter2.Y - vector19.Y;
                    float num216 = (float) Math.Sqrt((double) (num214 * num214 + num215 * num215));
                    if (this.ai[0] == 0f)
                    {
                        float num217 = 160f;
                        if (type == 63)
                        {
                            num217 *= 1.5f;
                        }

                        if (type == 247)
                        {
                            num217 *= 1.5f;
                        }

                        tileCollide = true;
                        if (num216 > num217)
                        {
                            this.ai[0] = 1f;
                            netUpdate = true;
                        }
                        else if (!Main.player[owner].channel)
                        {
                            if (base.velocity.Y < 0f)
                            {
                                base.velocity.Y *= 0.9f;
                            }

                            base.velocity.Y += 1f;
                            base.velocity.X *= 0.9f;
                        }
                    }
                    else if (this.ai[0] == 1f)
                    {
                        float num218 = 14f / Main.player[owner].meleeSpeed;
                        float num219 = 0.9f / Main.player[owner].meleeSpeed;
                        float num220 = 300f;
                        if (type == 63)
                        {
                            num220 *= 1.5f;
                            num218 *= 1.5f;
                            num219 *= 1.5f;
                        }

                        if (type == 247)
                        {
                            num220 *= 1.5f;
                            num218 = 15.9f;
                            num219 *= 2f;
                        }

                        Math.Abs(num214);
                        Math.Abs(num215);
                        if (this.ai[1] == 1f)
                        {
                            tileCollide = false;
                        }

                        if (!Main.player[owner].channel || num216 > num220 || !tileCollide)
                        {
                            this.ai[1] = 1f;
                            if (tileCollide)
                            {
                                netUpdate = true;
                            }

                            tileCollide = false;
                            if (num216 < 20f)
                            {
                                Kill();
                            }
                        }

                        if (!tileCollide)
                        {
                            num219 *= 2f;
                        }

                        int num221 = 60;
                        if (type == 247)
                        {
                            num221 = 100;
                        }

                        if (num216 > (float) num221 || !tileCollide)
                        {
                            num216 = num218 / num216;
                            num214 *= num216;
                            num215 *= num216;
                            new Vector2(base.velocity.X, base.velocity.Y);
                            float num222 = num214 - base.velocity.X;
                            float num223 = num215 - base.velocity.Y;
                            float num224 = (float) Math.Sqrt((double) (num222 * num222 + num223 * num223));
                            num224 = num219 / num224;
                            num222 *= num224;
                            num223 *= num224;
                            base.velocity.X *= 0.98f;
                            base.velocity.Y *= 0.98f;
                            base.velocity.X += num222;
                            base.velocity.Y += num223;
                        }
                        else
                        {
                            if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < 6f)
                            {
                                base.velocity.X *= 0.96f;
                                base.velocity.Y += 0.2f;
                            }

                            if (Main.player[owner].velocity.X == 0f)
                            {
                                base.velocity.X *= 0.96f;
                            }
                        }
                    }

                    if (type == 247)
                    {
                        if (base.velocity.X < 0f)
                        {
                            rotation -= (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.01f;
                        }
                        else
                        {
                            rotation += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.01f;
                        }

                        float num225 = base.position.X;
                        float num226 = base.position.Y;
                        float num227 = 600f;
                        bool flag4 = false;
                        if (owner == Main.myPlayer)
                        {
                            localAI[1] += 1f;
                            if (localAI[1] > 20f)
                            {
                                localAI[1] = 20f;
                                for (int num228 = 0; num228 < 200; num228++)
                                {
                                    if (Main.npc[num228].CanBeChasedBy(this, false))
                                    {
                                        float num229 = Main.npc[num228].position.X +
                                                       (float) (Main.npc[num228].width / 2);
                                        float num230 = Main.npc[num228].position.Y +
                                                       (float) (Main.npc[num228].height / 2);
                                        float num231 = Math.Abs(base.position.X + (float) (base.width / 2) - num229) +
                                                       Math.Abs(base.position.Y + (float) (base.height / 2) - num230);
                                        if (num231 < num227 && Collision.CanHit(base.position, base.width, base.height,
                                                Main.npc[num228].position, Main.npc[num228].width,
                                                Main.npc[num228].height))
                                        {
                                            num227 = num231;
                                            num225 = num229;
                                            num226 = num230;
                                            flag4 = true;
                                        }
                                    }
                                }
                            }
                        }

                        if (flag4)
                        {
                            localAI[1] = 0f;
                            float num232 = 14f;
                            vector19 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                base.position.Y + (float) base.height * 0.5f);
                            num214 = num225 - vector19.X;
                            num215 = num226 - vector19.Y;
                            num216 = (float) Math.Sqrt((double) (num214 * num214 + num215 * num215));
                            num216 = num232 / num216;
                            num214 *= num216;
                            num215 *= num216;
                            NewProjectile(vector19.X, vector19.Y, num214, num215, 248, (int) ((double) damage / 1.5),
                                knockBack / 2f, Main.myPlayer, 0f, 0f);
                        }
                    }
                    else
                    {
                        rotation = (float) Math.Atan2((double) num215, (double) num214) - base.velocity.X * 0.1f;
                    }
                }
            }
            else if (aiStyle == 16)
            {
                if (type == 108 || type == 164)
                {
                    this.ai[0] += 1f;
                    if (this.ai[0] > 3f)
                    {
                        Kill();
                    }
                }

                if (type == 37 || type == 397 || type == 470 || type == 519)
                {
                    try
                    {
                        int num233 = (int) (base.position.X / 16f) - 1;
                        int num234 = (int) ((base.position.X + (float) base.width) / 16f) + 2;
                        int num235 = (int) (base.position.Y / 16f) - 1;
                        int num236 = (int) ((base.position.Y + (float) base.height) / 16f) + 2;
                        if (num233 < 0)
                        {
                            num233 = 0;
                        }

                        if (num234 > Main.maxTilesX)
                        {
                            num234 = Main.maxTilesX;
                        }

                        if (num235 < 0)
                        {
                            num235 = 0;
                        }

                        if (num236 > Main.maxTilesY)
                        {
                            num236 = Main.maxTilesY;
                        }

                        for (int num237 = num233; num237 < num234; num237++)
                        {
                            for (int num238 = num235; num238 < num236; num238++)
                            {
                                if (Main.tile[num237, num238] != null && Main.tile[num237, num238].nactive() &&
                                    (Main.tileSolid[Main.tile[num237, num238].type] ||
                                     (Main.tileSolidTop[Main.tile[num237, num238].type] &&
                                      Main.tile[num237, num238].frameY == 0)))
                                {
                                    Vector2 vector20 = default(Vector2);
                                    vector20.X = (float) (num237 * 16);
                                    vector20.Y = (float) (num238 * 16);
                                    if (base.position.X + (float) base.width - 4f > vector20.X &&
                                        base.position.X + 4f < vector20.X + 16f &&
                                        base.position.Y + (float) base.height - 4f > vector20.Y &&
                                        base.position.Y + 4f < vector20.Y + 16f)
                                    {
                                        base.velocity.X = 0f;
                                        base.velocity.Y = -0.2f;
                                    }
                                }
                            }
                        }
                    }
                    catch
                    {
                    }
                }

                if (type == 519)
                {
                    localAI[1] += 1f;
                    float num239 = 180f - localAI[1];
                    if (num239 < 0f)
                    {
                        num239 = 0f;
                    }

                    frameCounter++;
                    if (num239 < 15f)
                    {
                        frameCounter++;
                    }

                    if ((float) frameCounter >= (num239 / 10f + 6f) / 2f)
                    {
                        frame++;
                        frameCounter = 0;
                        if (frame >= Main.projFrames[type])
                        {
                            frame = 0;
                        }
                    }
                }

                if (type == 681 && localAI[1] == 0f)
                {
                    localAI[1] = 1f;
                }

                if (type == 102)
                {
                    if (base.velocity.Y > 10f)
                    {
                        base.velocity.Y = 10f;
                    }

                    if (localAI[0] == 0f)
                    {
                        localAI[0] = 1f;
                        Main.PlaySound(SoundID.Item10, base.position);
                    }

                    frameCounter++;
                    if (frameCounter > 3)
                    {
                        frame++;
                        frameCounter = 0;
                    }

                    if (frame > 1)
                    {
                        frame = 0;
                    }

                    if (base.velocity.Y == 0f)
                    {
                        base.position.X += (float) (base.width / 2);
                        base.position.Y += (float) (base.height / 2);
                        base.width = 128;
                        base.height = 128;
                        base.position.X -= (float) (base.width / 2);
                        base.position.Y -= (float) (base.height / 2);
                        damage = 40;
                        knockBack = 8f;
                        timeLeft = 3;
                        netUpdate = true;
                    }
                }

                if (type == 303 && timeLeft <= 3 && hostile)
                {
                    base.position.X += (float) (base.width / 2);
                    base.position.Y += (float) (base.height / 2);
                    base.width = 128;
                    base.height = 128;
                    base.position.X -= (float) (base.width / 2);
                    base.position.Y -= (float) (base.height / 2);
                }

                if (owner == Main.myPlayer && timeLeft <= 3)
                {
                    tileCollide = false;
                    this.ai[1] = 0f;
                    alpha = 255;
                    if (type == 28 || type == 37 || type == 75 || type == 516 || type == 519)
                    {
                        base.position.X += (float) (base.width / 2);
                        base.position.Y += (float) (base.height / 2);
                        base.width = 128;
                        base.height = 128;
                        base.position.X -= (float) (base.width / 2);
                        base.position.Y -= (float) (base.height / 2);
                        damage = 100;
                        knockBack = 8f;
                    }
                    else if (type == 29 || type == 470 || type == 637)
                    {
                        base.position.X += (float) (base.width / 2);
                        base.position.Y += (float) (base.height / 2);
                        base.width = 250;
                        base.height = 250;
                        base.position.X -= (float) (base.width / 2);
                        base.position.Y -= (float) (base.height / 2);
                        damage = 250;
                        knockBack = 10f;
                    }
                    else if (type == 30 || type == 397 || type == 517 || type == 588)
                    {
                        base.position.X += (float) (base.width / 2);
                        base.position.Y += (float) (base.height / 2);
                        base.width = 128;
                        base.height = 128;
                        base.position.X -= (float) (base.width / 2);
                        base.position.Y -= (float) (base.height / 2);
                        knockBack = 8f;
                    }
                    else if (type == 681)
                    {
                        base.position.X += (float) (base.width / 2);
                        base.position.Y += (float) (base.height / 2);
                        base.width = 80;
                        base.height = 80;
                        base.position.X -= (float) (base.width / 2);
                        base.position.Y -= (float) (base.height / 2);
                        knockBack = 8f;
                    }
                    else if (type == 133 || type == 134 || type == 135 || type == 136 || type == 137 || type == 138 ||
                             type == 338 || type == 339)
                    {
                        base.position.X += (float) (base.width / 2);
                        base.position.Y += (float) (base.height / 2);
                        base.width = 128;
                        base.height = 128;
                        base.position.X -= (float) (base.width / 2);
                        base.position.Y -= (float) (base.height / 2);
                        knockBack = 8f;
                    }
                    else if (type == 139 || type == 140 || type == 141 || type == 142 || type == 143 || type == 144 ||
                             type == 340 || type == 341)
                    {
                        base.position.X += (float) (base.width / 2);
                        base.position.Y += (float) (base.height / 2);
                        base.width = 200;
                        base.height = 200;
                        base.position.X -= (float) (base.width / 2);
                        base.position.Y -= (float) (base.height / 2);
                        knockBack = 10f;
                    }
                }
                else
                {
                    if (type != 30 && type != 517 && type != 681 && type != 588 && type != 397 && type != 108 &&
                        type != 133 && type != 134 && type != 135 && type != 136 && type != 137 && type != 138 &&
                        type != 139 && type != 140 && type != 141 && type != 142 && type != 143 && type != 144 &&
                        type != 164 && type != 303 && type < 338 && type < 341)
                    {
                        damage = 0;
                    }

                    if (type == 338 || type == 339 || type == 340 || type == 341)
                    {
                        localAI[1] += 1f;
                        if (localAI[1] > 6f)
                        {
                            alpha = 0;
                        }
                        else
                        {
                            alpha = (int) (255f - 42f * localAI[1]) + 100;
                            if (alpha > 255)
                            {
                                alpha = 255;
                            }
                        }

                        for (int num240 = 0; num240 < 2; num240++)
                        {
                            float num241 = 0f;
                            float num242 = 0f;
                            if (num240 == 1)
                            {
                                num241 = base.velocity.X * 0.5f;
                                num242 = base.velocity.Y * 0.5f;
                            }

                            if (localAI[1] > 9f)
                            {
                                if (Main.rand.Next(2) == 0)
                                {
                                    Vector2 position71 =
                                        new Vector2(base.position.X + 3f + num241, base.position.Y + 3f + num242) -
                                        base.velocity * 0.5f;
                                    int width67 = base.width - 8;
                                    int height67 = base.height - 8;
                                    newColor = default(Color);
                                    int num243 = Dust.NewDust(position71, width67, height67, 6, 0f, 0f, 100, newColor,
                                        1f);
                                    Main.dust[num243].scale *= 1.4f + (float) Main.rand.Next(10) * 0.1f;
                                    Main.dust[num243].velocity *= 0.2f;
                                    Main.dust[num243].noGravity = true;
                                }

                                if (Main.rand.Next(2) == 0)
                                {
                                    Vector2 position72 =
                                        new Vector2(base.position.X + 3f + num241, base.position.Y + 3f + num242) -
                                        base.velocity * 0.5f;
                                    int width68 = base.width - 8;
                                    int height68 = base.height - 8;
                                    newColor = default(Color);
                                    int num244 = Dust.NewDust(position72, width68, height68, 31, 0f, 0f, 100, newColor,
                                        0.5f);
                                    Main.dust[num244].fadeIn = 0.5f + (float) Main.rand.Next(5) * 0.1f;
                                    Main.dust[num244].velocity *= 0.05f;
                                }
                            }
                        }

                        float num245 = base.position.X;
                        float num246 = base.position.Y;
                        float num247 = 600f;
                        bool flag5 = false;
                        this.ai[0] += 1f;
                        if (this.ai[0] > 30f)
                        {
                            this.ai[0] = 30f;
                            for (int num248 = 0; num248 < 200; num248++)
                            {
                                if (Main.npc[num248].CanBeChasedBy(this, false))
                                {
                                    float num249 = Main.npc[num248].position.X + (float) (Main.npc[num248].width / 2);
                                    float num250 = Main.npc[num248].position.Y + (float) (Main.npc[num248].height / 2);
                                    float num251 = Math.Abs(base.position.X + (float) (base.width / 2) - num249) +
                                                   Math.Abs(base.position.Y + (float) (base.height / 2) - num250);
                                    if (num251 < num247 && Collision.CanHit(base.position, base.width, base.height,
                                            Main.npc[num248].position, Main.npc[num248].width, Main.npc[num248].height))
                                    {
                                        num247 = num251;
                                        num245 = num249;
                                        num246 = num250;
                                        flag5 = true;
                                    }
                                }
                            }
                        }

                        if (!flag5)
                        {
                            num245 = base.position.X + (float) (base.width / 2) + base.velocity.X * 100f;
                            num246 = base.position.Y + (float) (base.height / 2) + base.velocity.Y * 100f;
                        }

                        float num252 = 16f;
                        Vector2 vector21 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        float num253 = num245 - vector21.X;
                        float num254 = num246 - vector21.Y;
                        float num255 = (float) Math.Sqrt((double) (num253 * num253 + num254 * num254));
                        num255 = num252 / num255;
                        num253 *= num255;
                        num254 *= num255;
                        base.velocity.X = (base.velocity.X * 11f + num253) / 12f;
                        base.velocity.Y = (base.velocity.Y * 11f + num254) / 12f;
                    }
                    else if (type == 134 || type == 137 || type == 140 || type == 143 || type == 303)
                    {
                        if (Math.Abs(base.velocity.X) >= 8f || Math.Abs(base.velocity.Y) >= 8f)
                        {
                            for (int num256 = 0; num256 < 2; num256++)
                            {
                                float num257 = 0f;
                                float num258 = 0f;
                                if (num256 == 1)
                                {
                                    num257 = base.velocity.X * 0.5f;
                                    num258 = base.velocity.Y * 0.5f;
                                }

                                Vector2 position73 =
                                    new Vector2(base.position.X + 3f + num257, base.position.Y + 3f + num258) -
                                    base.velocity * 0.5f;
                                int width69 = base.width - 8;
                                int height69 = base.height - 8;
                                newColor = default(Color);
                                int num259 = Dust.NewDust(position73, width69, height69, 6, 0f, 0f, 100, newColor, 1f);
                                Main.dust[num259].scale *= 2f + (float) Main.rand.Next(10) * 0.1f;
                                Main.dust[num259].velocity *= 0.2f;
                                Main.dust[num259].noGravity = true;
                                Vector2 position74 =
                                    new Vector2(base.position.X + 3f + num257, base.position.Y + 3f + num258) -
                                    base.velocity * 0.5f;
                                int width70 = base.width - 8;
                                int height70 = base.height - 8;
                                newColor = default(Color);
                                num259 = Dust.NewDust(position74, width70, height70, 31, 0f, 0f, 100, newColor, 0.5f);
                                Main.dust[num259].fadeIn = 1f + (float) Main.rand.Next(5) * 0.1f;
                                Main.dust[num259].velocity *= 0.05f;
                            }
                        }

                        if (Math.Abs(base.velocity.X) < 15f && Math.Abs(base.velocity.Y) < 15f)
                        {
                            base.velocity *= 1.1f;
                        }
                    }
                    else if (type == 133 || type == 136 || type == 139 || type == 142)
                    {
                        Vector2 position75 = new Vector2(base.position.X, base.position.Y);
                        int width71 = base.width;
                        int height71 = base.height;
                        newColor = default(Color);
                        int num260 = Dust.NewDust(position75, width71, height71, 31, 0f, 0f, 100, newColor, 1f);
                        Main.dust[num260].scale *= 1f + (float) Main.rand.Next(10) * 0.1f;
                        Main.dust[num260].velocity *= 0.2f;
                        Main.dust[num260].noGravity = true;
                    }
                    else if (type == 135 || type == 138 || type == 141 || type == 144)
                    {
                        if ((double) base.velocity.X > -0.2 && (double) base.velocity.X < 0.2 &&
                            (double) base.velocity.Y > -0.2 && (double) base.velocity.Y < 0.2)
                        {
                            alpha += 2;
                            if (alpha > 200)
                            {
                                alpha = 200;
                            }
                        }
                        else
                        {
                            alpha = 0;
                            Vector2 position76 = new Vector2(base.position.X + 3f, base.position.Y + 3f) -
                                                 base.velocity * 0.5f;
                            int width72 = base.width - 8;
                            int height72 = base.height - 8;
                            newColor = default(Color);
                            int num261 = Dust.NewDust(position76, width72, height72, 31, 0f, 0f, 100, newColor, 1f);
                            Main.dust[num261].scale *= 1.6f + (float) Main.rand.Next(5) * 0.1f;
                            Main.dust[num261].velocity *= 0.05f;
                            Main.dust[num261].noGravity = true;
                        }
                    }
                    else if (type != 30 && type != 517 && type != 681 && type != 397 && type != 519 && type != 588 &&
                             Main.rand.Next(2) == 0)
                    {
                        Vector2 position77 = new Vector2(base.position.X, base.position.Y);
                        int width73 = base.width;
                        int height73 = base.height;
                        newColor = default(Color);
                        int num262 = Dust.NewDust(position77, width73, height73, 31, 0f, 0f, 100, newColor, 1f);
                        Main.dust[num262].scale = 0.1f + (float) Main.rand.Next(5) * 0.1f;
                        Main.dust[num262].fadeIn = 1.5f + (float) Main.rand.Next(5) * 0.1f;
                        Main.dust[num262].noGravity = true;
                        Dust obj3 = Main.dust[num262];
                        Vector2 center = base.Center;
                        Vector2 spinningpoint2 = new Vector2(0f, (float) (-base.height / 2));
                        double radians2 = (double) rotation;
                        vector = default(Vector2);
                        obj3.position = center + spinningpoint2.RotatedBy(radians2, vector) * 1.1f;
                        Main.rand.Next(2);
                        Vector2 position78 = new Vector2(base.position.X, base.position.Y);
                        int width74 = base.width;
                        int height74 = base.height;
                        newColor = default(Color);
                        num262 = Dust.NewDust(position78, width74, height74, 6, 0f, 0f, 100, newColor, 1f);
                        Main.dust[num262].scale = 1f + (float) Main.rand.Next(5) * 0.1f;
                        Main.dust[num262].noGravity = true;
                        Dust obj4 = Main.dust[num262];
                        Vector2 center2 = base.Center;
                        Vector2 spinningpoint3 = new Vector2(0f, (float) (-base.height / 2 - 6));
                        double radians3 = (double) rotation;
                        vector = default(Vector2);
                        obj4.position = center2 + spinningpoint3.RotatedBy(radians3, vector) * 1.1f;
                    }
                    else if (type == 681)
                    {
                        Vector2 position79 = base.position;
                        int width75 = base.width;
                        int height75 = base.height;
                        newColor = default(Color);
                        Dust dust = Dust.NewDustDirect(position79, width75, height75, 6, 0f, 0f, 100, newColor, 1f);
                        dust.scale = 1f + (float) Main.rand.Next(5) * 0.1f;
                        dust.noGravity = true;
                        Dust dust2 = dust;
                        Vector2 center3 = base.Center;
                        Vector2 spinningpoint4 = new Vector2((float) (6 * Math.Sign(base.velocity.X)),
                            (float) (-base.height / 2 - 6));
                        double radians4 = (double) rotation;
                        vector = default(Vector2);
                        dust2.position = center3 + spinningpoint4.RotatedBy(radians4, vector) * 1.1f;
                    }
                }

                this.ai[0] += 1f;
                if (type == 338 || type == 339 || type == 340 || type == 341)
                {
                    if (base.velocity.X < 0f)
                    {
                        spriteDirection = -1;
                        rotation =
                            (float) Math.Atan2((double) (0f - base.velocity.Y), (double) (0f - base.velocity.X)) -
                            1.57f;
                    }
                    else
                    {
                        spriteDirection = 1;
                        rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) + 1.57f;
                    }
                }
                else if (type == 134 || type == 137 || type == 140 || type == 143 || type == 303)
                {
                    rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) + 1.57f;
                }
                else if (type == 135 || type == 138 || type == 141 || type == 144)
                {
                    base.velocity.Y += 0.2f;
                    base.velocity *= 0.97f;
                    if ((double) base.velocity.X > -0.1 && (double) base.velocity.X < 0.1)
                    {
                        base.velocity.X = 0f;
                    }

                    if ((double) base.velocity.Y > -0.1 && (double) base.velocity.Y < 0.1)
                    {
                        base.velocity.Y = 0f;
                    }
                }
                else if (type == 133 || type == 136 || type == 139 || type == 142)
                {
                    if (this.ai[0] > 15f)
                    {
                        if (base.velocity.Y == 0f)
                        {
                            base.velocity.X *= 0.95f;
                        }

                        base.velocity.Y += 0.2f;
                    }
                }
                else if (((type == 30 || type == 397 || type == 517 || type == 681 || type == 588) &&
                          this.ai[0] > 10f) ||
                         (type != 30 && type != 397 && type != 517 && type != 588 && this.ai[0] > 5f))
                {
                    this.ai[0] = 10f;
                    if (base.velocity.Y == 0f && base.velocity.X != 0f)
                    {
                        base.velocity.X *= 0.97f;
                        if (type == 29 || type == 470 || type == 637)
                        {
                            base.velocity.X *= 0.99f;
                        }

                        if ((double) base.velocity.X > -0.01 && (double) base.velocity.X < 0.01)
                        {
                            base.velocity.X = 0f;
                            netUpdate = true;
                        }
                    }

                    base.velocity.Y += 0.2f;
                }

                if (type == 519)
                {
                    rotation += base.velocity.X * 0.06f;
                }
                else if (type != 134 && type != 137 && type != 140 && type != 143 && type != 303 &&
                         (type < 338 || type > 341))
                {
                    rotation += base.velocity.X * 0.1f;
                }
            }
            else if (aiStyle == 17)
            {
                if (base.velocity.Y == 0f)
                {
                    base.velocity.X *= 0.98f;
                }

                rotation += base.velocity.X * 0.1f;
                base.velocity.Y += 0.2f;
                if (owner == Main.myPlayer)
                {
                    int num263 = (int) ((base.position.X + (float) (base.width / 2)) / 16f);
                    int num264 = (int) ((base.position.Y + (float) base.height - 4f) / 16f);
                    if (Main.tile[num263, num264] != null && !Main.tile[num263, num264].active())
                    {
                        int num265 = 0;
                        if (type >= 201 && type <= 205)
                        {
                            num265 = type - 200;
                        }

                        if (type >= 527 && type <= 531)
                        {
                            num265 = type - 527 + 6;
                        }

                        WorldGen.PlaceTile(num263, num264, 85, false, false, owner, num265);
                        if (Main.tile[num263, num264].active())
                        {
                            if (Main.netMode != 0)
                            {
                                NetMessage.SendData(17, -1, -1, null, 1, (float) num263, (float) num264, 85f, num265, 0,
                                    0);
                            }

                            int num266 = Sign.ReadSign(num263, num264, true);
                            if (num266 >= 0)
                            {
                                Sign.TextSign(num266, miscText);
                            }

                            Kill();
                        }
                    }
                }
            }
            else if (aiStyle == 18)
            {
                if (this.ai[1] == 0f && type == 44)
                {
                    this.ai[1] = 1f;
                    Main.PlaySound(SoundID.Item8, base.position);
                }

                if (type == 263 || type == 274)
                {
                    if (type == 274 && base.velocity.X < 0f)
                    {
                        spriteDirection = -1;
                    }

                    rotation += (float) base.direction * 0.05f;
                    rotation += (float) base.direction * 0.5f * ((float) timeLeft / 180f);
                    if (type != 274)
                    {
                        base.velocity *= 0.95f;
                    }
                    else
                    {
                        base.velocity *= 0.96f;
                    }
                }
                else
                {
                    rotation += (float) base.direction * 0.8f;
                    this.ai[0] += 1f;
                    if (!(this.ai[0] < 30f))
                    {
                        if (this.ai[0] < 100f)
                        {
                            base.velocity *= 1.06f;
                        }
                        else
                        {
                            this.ai[0] = 200f;
                        }
                    }

                    for (int num267 = 0; num267 < 2; num267++)
                    {
                        Vector2 position80 = new Vector2(base.position.X, base.position.Y);
                        int width76 = base.width;
                        int height76 = base.height;
                        newColor = default(Color);
                        int num268 = Dust.NewDust(position80, width76, height76, 27, 0f, 0f, 100, newColor, 1f);
                        Main.dust[num268].noGravity = true;
                    }
                }
            }
            else if (aiStyle == 19)
            {
                Vector2 vector22 = Main.player[owner].RotatedRelativePoint(Main.player[owner].MountedCenter, true);
                base.direction = Main.player[owner].direction;
                Main.player[owner].heldProj = whoAmI;
                Main.player[owner].itemTime = Main.player[owner].itemAnimation;
                base.position.X = vector22.X - (float) (base.width / 2);
                base.position.Y = vector22.Y - (float) (base.height / 2);
                if (!Main.player[owner].frozen)
                {
                    if (type == 46)
                    {
                        if (this.ai[0] == 0f)
                        {
                            this.ai[0] = 3f;
                            netUpdate = true;
                        }

                        if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
                        {
                            this.ai[0] -= 1.6f;
                        }
                        else
                        {
                            this.ai[0] += 1.4f;
                        }
                    }
                    else if (type == 105)
                    {
                        if (this.ai[0] == 0f)
                        {
                            this.ai[0] = 3f;
                            netUpdate = true;
                        }

                        if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
                        {
                            this.ai[0] -= 2.4f;
                        }
                        else
                        {
                            this.ai[0] += 2.1f;
                        }
                    }
                    else if (type == 367)
                    {
                        spriteDirection = -base.direction;
                        if (this.ai[0] == 0f)
                        {
                            this.ai[0] = 3f;
                            netUpdate = true;
                        }

                        if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
                        {
                            this.ai[0] -= 1.6f;
                        }
                        else
                        {
                            this.ai[0] += 1.5f;
                        }
                    }
                    else if (type == 368)
                    {
                        spriteDirection = -base.direction;
                        if (this.ai[0] == 0f)
                        {
                            this.ai[0] = 3f;
                            netUpdate = true;
                        }

                        if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
                        {
                            this.ai[0] -= 1.5f;
                        }
                        else
                        {
                            this.ai[0] += 1.4f;
                        }
                    }
                    else if (type == 222)
                    {
                        if (this.ai[0] == 0f)
                        {
                            this.ai[0] = 3f;
                            netUpdate = true;
                        }

                        if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
                        {
                            this.ai[0] -= 2.4f;
                            if (localAI[0] == 0f && Main.myPlayer == owner)
                            {
                                localAI[0] = 1f;
                                NewProjectile(base.Center.X + base.velocity.X * this.ai[0],
                                    base.Center.Y + base.velocity.Y * this.ai[0], base.velocity.X, base.velocity.Y, 228,
                                    damage, knockBack, owner, 0f, 0f);
                            }
                        }
                        else
                        {
                            this.ai[0] += 2.1f;
                        }
                    }
                    else if (type == 342)
                    {
                        if (this.ai[0] == 0f)
                        {
                            this.ai[0] = 3f;
                            netUpdate = true;
                        }

                        if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
                        {
                            this.ai[0] -= 2.4f;
                            if (localAI[0] == 0f && Main.myPlayer == owner)
                            {
                                localAI[0] = 1f;
                                if (Collision.CanHit(Main.player[owner].position, Main.player[owner].width,
                                    Main.player[owner].height,
                                    new Vector2(base.Center.X + base.velocity.X * this.ai[0],
                                        base.Center.Y + base.velocity.Y * this.ai[0]), base.width, base.height))
                                {
                                    NewProjectile(base.Center.X + base.velocity.X * this.ai[0],
                                        base.Center.Y + base.velocity.Y * this.ai[0], base.velocity.X * 2.4f,
                                        base.velocity.Y * 2.4f, 343, (int) ((double) damage * 0.8), knockBack * 0.85f,
                                        owner, 0f, 0f);
                                }
                            }
                        }
                        else
                        {
                            this.ai[0] += 2.1f;
                        }
                    }
                    else if (type == 47)
                    {
                        if (this.ai[0] == 0f)
                        {
                            this.ai[0] = 4f;
                            netUpdate = true;
                        }

                        if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
                        {
                            this.ai[0] -= 1.2f;
                        }
                        else
                        {
                            this.ai[0] += 0.9f;
                        }
                    }
                    else if (type == 153)
                    {
                        spriteDirection = -base.direction;
                        if (this.ai[0] == 0f)
                        {
                            this.ai[0] = 4f;
                            netUpdate = true;
                        }

                        if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
                        {
                            this.ai[0] -= 1.5f;
                        }
                        else
                        {
                            this.ai[0] += 1.3f;
                        }
                    }
                    else if (type == 49)
                    {
                        if (this.ai[0] == 0f)
                        {
                            this.ai[0] = 4f;
                            netUpdate = true;
                        }

                        if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
                        {
                            this.ai[0] -= 1.1f;
                        }
                        else
                        {
                            this.ai[0] += 0.85f;
                        }
                    }
                    else if (type == 64 || type == 215)
                    {
                        spriteDirection = -base.direction;
                        if (this.ai[0] == 0f)
                        {
                            this.ai[0] = 3f;
                            netUpdate = true;
                        }

                        if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
                        {
                            this.ai[0] -= 1.9f;
                        }
                        else
                        {
                            this.ai[0] += 1.7f;
                        }
                    }
                    else if (type == 66 || type == 97 || type == 212 || type == 218)
                    {
                        spriteDirection = -base.direction;
                        if (this.ai[0] == 0f)
                        {
                            this.ai[0] = 3f;
                            netUpdate = true;
                        }

                        if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
                        {
                            this.ai[0] -= 2.1f;
                        }
                        else
                        {
                            this.ai[0] += 1.9f;
                        }
                    }
                    else if (type == 130)
                    {
                        spriteDirection = -base.direction;
                        if (this.ai[0] == 0f)
                        {
                            this.ai[0] = 3f;
                            netUpdate = true;
                        }

                        if (Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3)
                        {
                            this.ai[0] -= 1.3f;
                        }
                        else
                        {
                            this.ai[0] += 1f;
                        }
                    }
                }

                base.position += base.velocity * this.ai[0];
                if (type == 130)
                {
                    if (this.ai[1] == 0f || this.ai[1] == 4f || this.ai[1] == 8f || this.ai[1] == 12f ||
                        this.ai[1] == 16f || this.ai[1] == 20f || this.ai[1] == 24f)
                    {
                        NewProjectile(base.position.X + (float) (base.width / 2),
                            base.position.Y + (float) (base.height / 2), base.velocity.X, base.velocity.Y, 131,
                            damage / 3, 0f, owner, 0f, 0f);
                    }

                    this.ai[1] += 1f;
                }

                if (Main.player[owner].itemAnimation == 0)
                {
                    Kill();
                }

                rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) + 2.355f;
                if (spriteDirection == -1)
                {
                    rotation -= 1.57f;
                }

                if (type == 46)
                {
                    if (Main.rand.Next(5) == 0)
                    {
                        Vector2 position81 = base.position;
                        int width77 = base.width;
                        int height77 = base.height;
                        newColor = default(Color);
                        Dust.NewDust(position81, width77, height77, 14, 0f, 0f, 150, newColor, 1.4f);
                    }

                    Vector2 position82 = base.position;
                    int width78 = base.width;
                    int height78 = base.height;
                    float speedX22 = base.velocity.X * 0.2f + (float) (base.direction * 3);
                    float speedY26 = base.velocity.Y * 0.2f;
                    newColor = default(Color);
                    int num269 = Dust.NewDust(position82, width78, height78, 27, speedX22, speedY26, 100, newColor,
                        1.2f);
                    Main.dust[num269].noGravity = true;
                    Main.dust[num269].velocity.X /= 2f;
                    Main.dust[num269].velocity.Y /= 2f;
                    Vector2 position83 = base.position - base.velocity * 2f;
                    int width79 = base.width;
                    int height79 = base.height;
                    newColor = default(Color);
                    num269 = Dust.NewDust(position83, width79, height79, 27, 0f, 0f, 150, newColor, 1.4f);
                    Main.dust[num269].velocity.X /= 5f;
                    Main.dust[num269].velocity.Y /= 5f;
                }
                else if (type == 105)
                {
                    if (Main.rand.Next(3) == 0)
                    {
                        Vector2 position84 = new Vector2(base.position.X, base.position.Y);
                        int width80 = base.width;
                        int height80 = base.height;
                        float speedX23 = base.velocity.X * 0.2f;
                        float speedY27 = base.velocity.Y * 0.2f;
                        newColor = default(Color);
                        int num270 = Dust.NewDust(position84, width80, height80, 57, speedX23, speedY27, 200, newColor,
                            1.2f);
                        Main.dust[num270].velocity += base.velocity * 0.3f;
                        Main.dust[num270].velocity *= 0.2f;
                    }

                    if (Main.rand.Next(4) == 0)
                    {
                        Vector2 position85 = new Vector2(base.position.X, base.position.Y);
                        int width81 = base.width;
                        int height81 = base.height;
                        newColor = default(Color);
                        int num271 = Dust.NewDust(position85, width81, height81, 43, 0f, 0f, 254, newColor, 0.3f);
                        Main.dust[num271].velocity += base.velocity * 0.5f;
                        Main.dust[num271].velocity *= 0.5f;
                    }
                }
                else if (type == 153)
                {
                    Vector2 position86 = base.position - base.velocity * 3f;
                    int width82 = base.width;
                    int height82 = base.height;
                    float speedX24 = base.velocity.X * 0.4f;
                    float speedY28 = base.velocity.Y * 0.4f;
                    newColor = default(Color);
                    int num272 = Dust.NewDust(position86, width82, height82, 115, speedX24, speedY28, 140, newColor,
                        1f);
                    Main.dust[num272].noGravity = true;
                    Main.dust[num272].fadeIn = 1.25f;
                    Main.dust[num272].velocity *= 0.25f;
                }
            }
            else if (aiStyle == 20)
            {
                if (type == 252)
                {
                    frameCounter++;
                    if (frameCounter >= 4)
                    {
                        frameCounter = 0;
                        frame++;
                    }

                    if (frame > 3)
                    {
                        frame = 0;
                    }
                }

                if (type == 509)
                {
                    frameCounter++;
                    if (frameCounter >= 2)
                    {
                        frameCounter = 0;
                        frame++;
                    }

                    if (frame > 1)
                    {
                        frame = 0;
                    }
                }

                if (soundDelay <= 0)
                {
                    Main.PlaySound(SoundID.Item22, base.position);
                    soundDelay = 30;
                }

                Vector2 vector23 = Main.player[owner].RotatedRelativePoint(Main.player[owner].MountedCenter, true);
                if (Main.myPlayer == owner)
                {
                    if (Main.player[owner].channel)
                    {
                        float num273 = Main.player[owner].inventory[Main.player[owner].selectedItem].shootSpeed * scale;
                        Vector2 vector24 = vector23;
                        float num274 = (float) Main.mouseX + Main.screenPosition.X - vector24.X;
                        float num275 = (float) Main.mouseY + Main.screenPosition.Y - vector24.Y;
                        if (Main.player[owner].gravDir == -1f)
                        {
                            num275 = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector24.Y;
                        }

                        float num276 = (float) Math.Sqrt((double) (num274 * num274 + num275 * num275));
                        num276 = (float) Math.Sqrt((double) (num274 * num274 + num275 * num275));
                        num276 = num273 / num276;
                        num274 *= num276;
                        num275 *= num276;
                        if (num274 != base.velocity.X || num275 != base.velocity.Y)
                        {
                            netUpdate = true;
                        }

                        base.velocity.X = num274;
                        base.velocity.Y = num275;
                    }
                    else
                    {
                        Kill();
                    }
                }

                if (base.velocity.X > 0f)
                {
                    Main.player[owner].ChangeDir(1);
                }
                else if (base.velocity.X < 0f)
                {
                    Main.player[owner].ChangeDir(-1);
                }

                spriteDirection = base.direction;
                Main.player[owner].ChangeDir(base.direction);
                Main.player[owner].heldProj = whoAmI;
                Main.player[owner].itemTime = 2;
                Main.player[owner].itemAnimation = 2;
                base.position.X = vector23.X - (float) (base.width / 2);
                base.position.Y = vector23.Y - (float) (base.height / 2);
                rotation = (float) (Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) +
                                    1.5700000524520874);
                if (Main.player[owner].direction == 1)
                {
                    Main.player[owner].itemRotation = (float) Math.Atan2(
                        (double) (base.velocity.Y * (float) base.direction),
                        (double) (base.velocity.X * (float) base.direction));
                }
                else
                {
                    Main.player[owner].itemRotation = (float) Math.Atan2(
                        (double) (base.velocity.Y * (float) base.direction),
                        (double) (base.velocity.X * (float) base.direction));
                }

                base.velocity.X *= 1f + (float) Main.rand.Next(-3, 4) * 0.01f;
                if (Main.rand.Next(6) == 0)
                {
                    Vector2 position87 = base.position + base.velocity * (float) Main.rand.Next(6, 10) * 0.1f;
                    int width83 = base.width;
                    int height83 = base.height;
                    newColor = default(Color);
                    int num277 = Dust.NewDust(position87, width83, height83, 31, 0f, 0f, 80, newColor, 1.4f);
                    Main.dust[num277].position.X -= 4f;
                    Main.dust[num277].noGravity = true;
                    Main.dust[num277].velocity *= 0.2f;
                    Main.dust[num277].velocity.Y = (float) (-Main.rand.Next(7, 13)) * 0.15f;
                }
            }
            else if (aiStyle == 21)
            {
                rotation = base.velocity.X * 0.1f;
                spriteDirection = -base.direction;
                if (Main.rand.Next(3) == 0)
                {
                    Vector2 position88 = base.position;
                    int width84 = base.width;
                    int height84 = base.height;
                    newColor = default(Color);
                    int num278 = Dust.NewDust(position88, width84, height84, 27, 0f, 0f, 80, newColor, 1f);
                    Main.dust[num278].noGravity = true;
                    Main.dust[num278].velocity *= 0.2f;
                }

                if (this.ai[1] == 1f)
                {
                    this.ai[1] = 0f;
                    Main.harpNote = this.ai[0];
                    Main.PlaySound(SoundID.Item26, base.position);
                }
            }
            else if (aiStyle == 22)
            {
                if (base.velocity.X == 0f && base.velocity.Y == 0f)
                {
                    alpha = 255;
                }

                if (this.ai[1] < 0f)
                {
                    if (base.velocity.X > 0f)
                    {
                        rotation += 0.3f;
                    }
                    else
                    {
                        rotation -= 0.3f;
                    }

                    int num279 = (int) (base.position.X / 16f) - 1;
                    int num280 = (int) ((base.position.X + (float) base.width) / 16f) + 2;
                    int num281 = (int) (base.position.Y / 16f) - 1;
                    int num282 = (int) ((base.position.Y + (float) base.height) / 16f) + 2;
                    if (num279 < 0)
                    {
                        num279 = 0;
                    }

                    if (num280 > Main.maxTilesX)
                    {
                        num280 = Main.maxTilesX;
                    }

                    if (num281 < 0)
                    {
                        num281 = 0;
                    }

                    if (num282 > Main.maxTilesY)
                    {
                        num282 = Main.maxTilesY;
                    }

                    int num283 = (int) base.position.X + 4;
                    int num284 = (int) base.position.Y + 4;
                    for (int num285 = num279; num285 < num280; num285++)
                    {
                        for (int num286 = num281; num286 < num282; num286++)
                        {
                            if (Main.tile[num285, num286] != null && Main.tile[num285, num286].active() &&
                                Main.tile[num285, num286].type != 127 &&
                                Main.tileSolid[Main.tile[num285, num286].type] &&
                                !Main.tileSolidTop[Main.tile[num285, num286].type])
                            {
                                Vector2 vector25 = default(Vector2);
                                vector25.X = (float) (num285 * 16);
                                vector25.Y = (float) (num286 * 16);
                                if ((float) (num283 + 8) > vector25.X && (float) num283 < vector25.X + 16f &&
                                    (float) (num284 + 8) > vector25.Y && (float) num284 < vector25.Y + 16f)
                                {
                                    Kill();
                                }
                            }
                        }
                    }

                    Vector2 position89 = new Vector2(base.position.X, base.position.Y);
                    int width85 = base.width;
                    int height85 = base.height;
                    newColor = default(Color);
                    int num287 = Dust.NewDust(position89, width85, height85, 67, 0f, 0f, 0, newColor, 1f);
                    Main.dust[num287].noGravity = true;
                    Main.dust[num287].velocity *= 0.3f;
                }
                else if (this.ai[0] < 0f)
                {
                    if (this.ai[0] == -1f)
                    {
                        for (int num288 = 0; num288 < 10; num288++)
                        {
                            Vector2 position90 = new Vector2(base.position.X, base.position.Y);
                            int width86 = base.width;
                            int height86 = base.height;
                            newColor = default(Color);
                            int num289 = Dust.NewDust(position90, width86, height86, 67, 0f, 0f, 0, newColor, 1.1f);
                            Main.dust[num289].noGravity = true;
                            Main.dust[num289].velocity *= 1.3f;
                        }
                    }
                    else if (Main.rand.Next(30) == 0)
                    {
                        Vector2 position91 = new Vector2(base.position.X, base.position.Y);
                        int width87 = base.width;
                        int height87 = base.height;
                        newColor = default(Color);
                        int num290 = Dust.NewDust(position91, width87, height87, 67, 0f, 0f, 100, newColor, 1f);
                        Main.dust[num290].velocity *= 0.2f;
                    }

                    int num291 = (int) base.position.X / 16;
                    int num292 = (int) base.position.Y / 16;
                    if (Main.tile[num291, num292] == null || !Main.tile[num291, num292].active())
                    {
                        Kill();
                    }

                    this.ai[0] -= 1f;
                    if (this.ai[0] <= -900f && (Main.myPlayer == owner || Main.netMode == 2) &&
                        Main.tile[num291, num292].active() && Main.tile[num291, num292].type == 127)
                    {
                        WorldGen.KillTile(num291, num292, false, false, false);
                        if (Main.netMode == 1)
                        {
                            NetMessage.SendData(17, -1, -1, null, 0, (float) num291, (float) num292, 0f, 0, 0, 0);
                        }

                        Kill();
                    }
                }
                else
                {
                    int num293 = (int) (base.position.X / 16f) - 1;
                    int num294 = (int) ((base.position.X + (float) base.width) / 16f) + 2;
                    int num295 = (int) (base.position.Y / 16f) - 1;
                    int num296 = (int) ((base.position.Y + (float) base.height) / 16f) + 2;
                    if (num293 < 0)
                    {
                        num293 = 0;
                    }

                    if (num294 > Main.maxTilesX)
                    {
                        num294 = Main.maxTilesX;
                    }

                    if (num295 < 0)
                    {
                        num295 = 0;
                    }

                    if (num296 > Main.maxTilesY)
                    {
                        num296 = Main.maxTilesY;
                    }

                    int num297 = (int) base.position.X + 4;
                    int num298 = (int) base.position.Y + 4;
                    for (int num299 = num293; num299 < num294; num299++)
                    {
                        for (int num300 = num295; num300 < num296; num300++)
                        {
                            if (Main.tile[num299, num300] != null && Main.tile[num299, num300].nactive() &&
                                Main.tile[num299, num300].type != 127 &&
                                Main.tileSolid[Main.tile[num299, num300].type] &&
                                !Main.tileSolidTop[Main.tile[num299, num300].type])
                            {
                                Vector2 vector26 = default(Vector2);
                                vector26.X = (float) (num299 * 16);
                                vector26.Y = (float) (num300 * 16);
                                if ((float) (num297 + 8) > vector26.X && (float) num297 < vector26.X + 16f &&
                                    (float) (num298 + 8) > vector26.Y && (float) num298 < vector26.Y + 16f)
                                {
                                    Kill();
                                }
                            }
                        }
                    }

                    if (lavaWet)
                    {
                        Kill();
                    }

                    if (active)
                    {
                        Vector2 position92 = new Vector2(base.position.X, base.position.Y);
                        int width88 = base.width;
                        int height88 = base.height;
                        newColor = default(Color);
                        int num301 = Dust.NewDust(position92, width88, height88, 67, 0f, 0f, 0, newColor, 1f);
                        Main.dust[num301].noGravity = true;
                        Main.dust[num301].velocity *= 0.3f;
                        int num302 = (int) this.ai[0];
                        int num303 = (int) this.ai[1];
                        if (WorldGen.SolidTile(num302, num303))
                        {
                            if (Math.Abs(base.velocity.X) > Math.Abs(base.velocity.Y))
                            {
                                if (base.Center.Y < (float) (num303 * 16 + 8) &&
                                    !WorldGen.SolidTile(num302, num303 - 1))
                                {
                                    num303--;
                                }
                                else if (!WorldGen.SolidTile(num302, num303 + 1))
                                {
                                    num303++;
                                }
                                else if (!WorldGen.SolidTile(num302, num303 - 1))
                                {
                                    num303--;
                                }
                                else if (base.Center.X < (float) (num302 * 16 + 8) &&
                                         !WorldGen.SolidTile(num302 - 1, num303))
                                {
                                    num302--;
                                }
                                else if (!WorldGen.SolidTile(num302 + 1, num303))
                                {
                                    num302++;
                                }
                                else if (!WorldGen.SolidTile(num302 - 1, num303))
                                {
                                    num302--;
                                }
                            }
                            else if (base.Center.X < (float) (num302 * 16 + 8) &&
                                     !WorldGen.SolidTile(num302 - 1, num303))
                            {
                                num302--;
                            }
                            else if (!WorldGen.SolidTile(num302 + 1, num303))
                            {
                                num302++;
                            }
                            else if (!WorldGen.SolidTile(num302 - 1, num303))
                            {
                                num302--;
                            }
                            else if (base.Center.Y < (float) (num303 * 16 + 8) &&
                                     !WorldGen.SolidTile(num302, num303 - 1))
                            {
                                num303--;
                            }
                            else if (!WorldGen.SolidTile(num302, num303 + 1))
                            {
                                num303++;
                            }
                            else if (!WorldGen.SolidTile(num302, num303 - 1))
                            {
                                num303--;
                            }
                        }

                        if (base.velocity.X > 0f)
                        {
                            rotation += 0.3f;
                        }
                        else
                        {
                            rotation -= 0.3f;
                        }

                        if (Main.myPlayer == owner)
                        {
                            int num304 = (int) ((base.position.X + (float) (base.width / 2)) / 16f);
                            int num305 = (int) ((base.position.Y + (float) (base.height / 2)) / 16f);
                            bool flag6 = false;
                            if (num304 == num302 && num305 == num303)
                            {
                                flag6 = true;
                            }

                            if (((base.velocity.X <= 0f && num304 <= num302) ||
                                 (base.velocity.X >= 0f && num304 >= num302)) &&
                                ((base.velocity.Y <= 0f && num305 <= num303) ||
                                 (base.velocity.Y >= 0f && num305 >= num303)))
                            {
                                flag6 = true;
                            }

                            if (flag6)
                            {
                                if (WorldGen.PlaceTile(num302, num303, 127, false, false, owner, 0))
                                {
                                    if (Main.netMode == 1)
                                    {
                                        NetMessage.SendData(17, -1, -1, null, 1, (float) (int) this.ai[0],
                                            (float) (int) this.ai[1], 127f, 0, 0, 0);
                                    }

                                    damage = 0;
                                    this.ai[0] = -1f;
                                    base.velocity *= 0f;
                                    alpha = 255;
                                    base.position.X = (float) (num302 * 16);
                                    base.position.Y = (float) (num303 * 16);
                                    netUpdate = true;
                                }
                                else
                                {
                                    this.ai[1] = -1f;
                                }
                            }
                        }
                    }
                }
            }
            else if (aiStyle == 23)
            {
                if (type == 188 && this.ai[0] < 8f)
                {
                    this.ai[0] = 8f;
                }

                if (timeLeft > 60)
                {
                    timeLeft = 60;
                }

                if (this.ai[0] > 7f)
                {
                    float num306 = 1f;
                    if (this.ai[0] == 8f)
                    {
                        num306 = 0.25f;
                    }
                    else if (this.ai[0] == 9f)
                    {
                        num306 = 0.5f;
                    }
                    else if (this.ai[0] == 10f)
                    {
                        num306 = 0.75f;
                    }

                    this.ai[0] += 1f;
                    int num307 = 6;
                    if (type == 101)
                    {
                        num307 = 75;
                    }

                    if (num307 == 6 || Main.rand.Next(2) == 0)
                    {
                        for (int num308 = 0; num308 < 1; num308++)
                        {
                            Vector2 position93 = new Vector2(base.position.X, base.position.Y);
                            int width89 = base.width;
                            int height89 = base.height;
                            int num309 = num307;
                            float speedX25 = base.velocity.X * 0.2f;
                            float speedY29 = base.velocity.Y * 0.2f;
                            newColor = default(Color);
                            int num310 = Dust.NewDust(position93, width89, height89, num309, speedX25, speedY29, 100,
                                newColor, 1f);
                            if (Main.rand.Next(3) != 0 || (num307 == 75 && Main.rand.Next(3) == 0))
                            {
                                Main.dust[num310].noGravity = true;
                                Main.dust[num310].scale *= 3f;
                                Main.dust[num310].velocity.X *= 2f;
                                Main.dust[num310].velocity.Y *= 2f;
                            }

                            if (type == 188)
                            {
                                Main.dust[num310].scale *= 1.25f;
                            }
                            else
                            {
                                Main.dust[num310].scale *= 1.5f;
                            }

                            Main.dust[num310].velocity.X *= 1.2f;
                            Main.dust[num310].velocity.Y *= 1.2f;
                            Main.dust[num310].scale *= num306;
                            if (num307 == 75)
                            {
                                Main.dust[num310].velocity += base.velocity;
                                if (!Main.dust[num310].noGravity)
                                {
                                    Main.dust[num310].velocity *= 0.5f;
                                }
                            }
                        }
                    }
                }
                else
                {
                    this.ai[0] += 1f;
                }

                rotation += 0.3f * (float) base.direction;
            }
            else if (aiStyle == 24)
            {
                light = scale * 0.5f;
                rotation += base.velocity.X * 0.2f;
                this.ai[1] += 1f;
                if (type == 94)
                {
                    if (Main.rand.Next(4) == 0)
                    {
                        Vector2 position94 = new Vector2(base.position.X, base.position.Y);
                        int width90 = base.width;
                        int height90 = base.height;
                        newColor = default(Color);
                        int num311 = Dust.NewDust(position94, width90, height90, 70, 0f, 0f, 0, newColor, 1f);
                        Main.dust[num311].noGravity = true;
                        Main.dust[num311].velocity *= 0.5f;
                        Main.dust[num311].scale *= 0.9f;
                    }

                    base.velocity *= 0.985f;
                    if (this.ai[1] > 130f)
                    {
                        scale -= 0.05f;
                        if ((double) scale <= 0.2)
                        {
                            scale = 0.2f;
                            Kill();
                        }
                    }
                }
                else
                {
                    base.velocity *= 0.96f;
                    if (this.ai[1] > 15f)
                    {
                        scale -= 0.05f;
                        if ((double) scale <= 0.2)
                        {
                            scale = 0.2f;
                            Kill();
                        }
                    }
                }
            }
            else if (aiStyle == 25)
            {
                if (this.ai[0] != 0f && base.velocity.Y <= 0f && base.velocity.X == 0f)
                {
                    float num312 = 0.5f;
                    int i2 = (int) ((base.position.X - 8f) / 16f);
                    int num313 = (int) (base.position.Y / 16f);
                    bool flag7 = false;
                    bool flag8 = false;
                    if (WorldGen.SolidTile(i2, num313) || WorldGen.SolidTile(i2, num313 + 1))
                    {
                        flag7 = true;
                    }

                    i2 = (int) ((base.position.X + (float) base.width + 8f) / 16f);
                    if (WorldGen.SolidTile(i2, num313) || WorldGen.SolidTile(i2, num313 + 1))
                    {
                        flag8 = true;
                    }

                    if (flag7)
                    {
                        base.velocity.X = num312;
                    }
                    else if (flag8)
                    {
                        base.velocity.X = 0f - num312;
                    }
                    else
                    {
                        i2 = (int) ((base.position.X - 8f - 16f) / 16f);
                        num313 = (int) (base.position.Y / 16f);
                        flag7 = false;
                        flag8 = false;
                        if (WorldGen.SolidTile(i2, num313) || WorldGen.SolidTile(i2, num313 + 1))
                        {
                            flag7 = true;
                        }

                        i2 = (int) ((base.position.X + (float) base.width + 8f + 16f) / 16f);
                        if (WorldGen.SolidTile(i2, num313) || WorldGen.SolidTile(i2, num313 + 1))
                        {
                            flag8 = true;
                        }

                        if (flag7)
                        {
                            base.velocity.X = num312;
                        }
                        else if (flag8)
                        {
                            base.velocity.X = 0f - num312;
                        }
                        else
                        {
                            i2 = (int) ((base.position.X + 4f) / 16f);
                            num313 = (int) ((base.position.Y + (float) base.height + 8f) / 16f);
                            if (WorldGen.SolidTile(i2, num313) || WorldGen.SolidTile(i2, num313 + 1))
                            {
                                flag7 = true;
                            }

                            if (!flag7)
                            {
                                base.velocity.X = num312;
                            }
                            else
                            {
                                base.velocity.X = 0f - num312;
                            }
                        }
                    }
                }

                rotation += base.velocity.X * 0.06f;
                this.ai[0] = 1f;
                if (base.velocity.Y > 16f)
                {
                    base.velocity.Y = 16f;
                }

                if (base.velocity.Y <= 6f)
                {
                    if (base.velocity.X > 0f && base.velocity.X < 7f)
                    {
                        base.velocity.X += 0.05f;
                    }

                    if (base.velocity.X < 0f && base.velocity.X > -7f)
                    {
                        base.velocity.X -= 0.05f;
                    }
                }

                base.velocity.Y += 0.3f;
                if (type == 655 && wet)
                {
                    Kill();
                }
            }
            else if (aiStyle == 26)
            {
                AI_026();
            }
            else if (aiStyle == 27)
            {
                if (type == 115)
                {
                    this.ai[0] += 1f;
                    if (this.ai[0] < 30f)
                    {
                        base.velocity *= 1.125f;
                    }
                }

                if (type == 115 && localAI[1] < 5f)
                {
                    localAI[1] = 5f;
                    for (int num314 = 5; num314 < 25; num314++)
                    {
                        float num315 = base.velocity.X * (30f / (float) num314);
                        float num316 = base.velocity.Y * (30f / (float) num314);
                        num315 *= 80f;
                        num316 *= 80f;
                        Vector2 position95 = new Vector2(base.position.X - num315, base.position.Y - num316);
                        float x4 = oldVelocity.X;
                        float y4 = oldVelocity.Y;
                        newColor = default(Color);
                        int num317 = Dust.NewDust(position95, 8, 8, 27, x4, y4, 100, newColor, 0.9f);
                        Main.dust[num317].velocity *= 0.25f;
                        Main.dust[num317].velocity -= base.velocity * 5f;
                    }
                }

                if (localAI[1] > 7f && type == 173)
                {
                    int num318;
                    switch (Main.rand.Next(3))
                    {
                        case 0:
                            num318 = 15;
                            break;
                        case 1:
                            num318 = 57;
                            break;
                        default:
                            num318 = 58;
                            break;
                    }

                    Vector2 position96 = new Vector2(base.position.X - base.velocity.X * 4f + 2f,
                        base.position.Y + 2f - base.velocity.Y * 4f);
                    int num319 = num318;
                    newColor = default(Color);
                    int num320 = Dust.NewDust(position96, 8, 8, num319, 0f, 0f, 100, newColor, 1.25f);
                    Main.dust[num320].velocity *= 0.1f;
                }

                if (localAI[1] > 7f && type == 132)
                {
                    Vector2 position97 = new Vector2(base.position.X - base.velocity.X * 4f + 2f,
                        base.position.Y + 2f - base.velocity.Y * 4f);
                    float x5 = oldVelocity.X;
                    float y5 = oldVelocity.Y;
                    newColor = default(Color);
                    int num321 = Dust.NewDust(position97, 8, 8, 107, x5, y5, 100, newColor, 1.25f);
                    Main.dust[num321].velocity *= -0.25f;
                    Vector2 position98 = new Vector2(base.position.X - base.velocity.X * 4f + 2f,
                        base.position.Y + 2f - base.velocity.Y * 4f);
                    float x6 = oldVelocity.X;
                    float y6 = oldVelocity.Y;
                    newColor = default(Color);
                    num321 = Dust.NewDust(position98, 8, 8, 107, x6, y6, 100, newColor, 1.25f);
                    Main.dust[num321].velocity *= -0.25f;
                    Main.dust[num321].position -= base.velocity * 0.5f;
                }

                if (localAI[1] < 15f)
                {
                    localAI[1] += 1f;
                }
                else
                {
                    if (type == 114 || type == 115)
                    {
                        Vector2 position99 = new Vector2(base.position.X, base.position.Y + 4f);
                        float x7 = oldVelocity.X;
                        float y7 = oldVelocity.Y;
                        newColor = default(Color);
                        int num322 = Dust.NewDust(position99, 8, 8, 27, x7, y7, 100, newColor, 0.6f);
                        Main.dust[num322].velocity *= -0.25f;
                    }
                    else if (type == 116)
                    {
                        Vector2 position100 = new Vector2(base.position.X - base.velocity.X * 5f + 2f,
                            base.position.Y + 2f - base.velocity.Y * 5f);
                        float x8 = oldVelocity.X;
                        float y8 = oldVelocity.Y;
                        newColor = default(Color);
                        int num323 = Dust.NewDust(position100, 8, 8, 64, x8, y8, 100, newColor, 1.5f);
                        Main.dust[num323].velocity *= -0.25f;
                        Main.dust[num323].noGravity = true;
                    }

                    if (localAI[0] == 0f)
                    {
                        scale -= 0.02f;
                        alpha += 30;
                        if (alpha >= 250)
                        {
                            alpha = 255;
                            localAI[0] = 1f;
                        }
                    }
                    else if (localAI[0] == 1f)
                    {
                        scale += 0.02f;
                        alpha -= 30;
                        if (alpha <= 0)
                        {
                            alpha = 0;
                            localAI[0] = 0f;
                        }
                    }
                }

                if (this.ai[1] == 0f)
                {
                    this.ai[1] = 1f;
                    if (type == 132)
                    {
                        Main.PlaySound(SoundID.Item60, base.position);
                    }
                    else
                    {
                        Main.PlaySound(SoundID.Item8, base.position);
                    }
                }

                if (type == 157)
                {
                    rotation += (float) base.direction * 0.4f;
                    spriteDirection = base.direction;
                }
                else
                {
                    rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) + 0.785f;
                }

                if (base.velocity.Y > 16f)
                {
                    base.velocity.Y = 16f;
                }
            }
            else if (aiStyle == 28)
            {
                if (type == 177)
                {
                    for (int num324 = 0; num324 < 3; num324++)
                    {
                        Vector2 position101 = new Vector2(base.position.X, base.position.Y);
                        int width91 = base.width;
                        int height91 = base.height;
                        float x9 = base.velocity.X;
                        float y9 = base.velocity.Y;
                        int num325 = Main.rand.Next(0, 101);
                        newColor = default(Color);
                        int num326 = Dust.NewDust(position101, width91, height91, 137, x9, y9, num325, newColor,
                            1f + (float) Main.rand.Next(-20, 40) * 0.01f);
                        Main.dust[num326].noGravity = true;
                        Main.dust[num326].velocity *= 0.3f;
                    }
                }

                if (type == 118)
                {
                    for (int num327 = 0; num327 < 2; num327++)
                    {
                        Vector2 position102 = new Vector2(base.position.X, base.position.Y);
                        int width92 = base.width;
                        int height92 = base.height;
                        float x10 = base.velocity.X;
                        float y10 = base.velocity.Y;
                        newColor = default(Color);
                        int num328 = Dust.NewDust(position102, width92, height92, 92, x10, y10, 50, newColor, 1.2f);
                        Main.dust[num328].noGravity = true;
                        Main.dust[num328].velocity *= 0.3f;
                    }
                }

                if (type == 119 || type == 128 || type == 359)
                {
                    for (int num329 = 0; num329 < 3; num329++)
                    {
                        Vector2 position103 = new Vector2(base.position.X, base.position.Y);
                        int width93 = base.width;
                        int height93 = base.height;
                        float x11 = base.velocity.X;
                        float y11 = base.velocity.Y;
                        newColor = default(Color);
                        int num330 = Dust.NewDust(position103, width93, height93, 92, x11, y11, 50, newColor, 1.2f);
                        Main.dust[num330].noGravity = true;
                        Main.dust[num330].velocity *= 0.3f;
                    }
                }

                if (type == 309)
                {
                    for (int num331 = 0; num331 < 3; num331++)
                    {
                        Vector2 position104 = new Vector2(base.position.X, base.position.Y);
                        int width94 = base.width;
                        int height94 = base.height;
                        float x12 = base.velocity.X;
                        float y12 = base.velocity.Y;
                        newColor = default(Color);
                        int num332 = Dust.NewDust(position104, width94, height94, 185, x12, y12, 50, newColor, 1.2f);
                        Main.dust[num332].noGravity = true;
                        Main.dust[num332].velocity *= 0.3f;
                    }
                }

                if (type == 129)
                {
                    for (int num333 = 0; num333 < 6; num333++)
                    {
                        Vector2 position105 = new Vector2(base.position.X, base.position.Y);
                        int width95 = base.width;
                        int height95 = base.height;
                        float x13 = base.velocity.X;
                        float y13 = base.velocity.Y;
                        newColor = default(Color);
                        int num334 = Dust.NewDust(position105, width95, height95, 106, x13, y13, 100, newColor, 1f);
                        Main.dust[num334].noGravity = true;
                        Main.dust[num334].velocity *= 0.1f + (float) Main.rand.Next(4) * 0.1f;
                        Main.dust[num334].scale *= 1f + (float) Main.rand.Next(5) * 0.1f;
                    }
                }

                if (this.ai[1] == 0f)
                {
                    this.ai[1] = 1f;
                    Main.PlaySound(SoundID.Item28, base.position);
                }
            }
            else if (aiStyle == 29)
            {
                if (type == 619)
                {
                    int num335 = (int) this.ai[0];
                    for (int num336 = 0; num336 < 3; num336++)
                    {
                        Vector2 position106 = new Vector2(base.position.X, base.position.Y);
                        int width96 = base.width;
                        int height96 = base.height;
                        float x14 = base.velocity.X;
                        float y14 = base.velocity.Y;
                        int num337 = num335;
                        newColor = default(Color);
                        int num338 = Dust.NewDust(position106, width96, height96, 254, x14, y14, num337, newColor,
                            1.2f);
                        Main.dust[num338].position = (Main.dust[num338].position + base.Center) / 2f;
                        Main.dust[num338].noGravity = true;
                        Main.dust[num338].velocity *= 0.5f;
                    }

                    for (int num339 = 0; num339 < 2; num339++)
                    {
                        Vector2 position107 = new Vector2(base.position.X, base.position.Y);
                        int width97 = base.width;
                        int height97 = base.height;
                        float x15 = base.velocity.X;
                        float y15 = base.velocity.Y;
                        int num340 = num335;
                        newColor = default(Color);
                        int num338 = Dust.NewDust(position107, width97, height97, 255, x15, y15, num340, newColor,
                            0.4f);
                        switch (num339)
                        {
                            case 0:
                                Main.dust[num338].position = (Main.dust[num338].position + base.Center * 5f) / 6f;
                                break;
                            case 1:
                                Main.dust[num338].position =
                                    (Main.dust[num338].position + (base.Center + base.velocity / 2f) * 5f) / 6f;
                                break;
                        }

                        Main.dust[num338].velocity *= 0.1f;
                        Main.dust[num338].noGravity = true;
                        Main.dust[num338].fadeIn = 1f;
                    }
                }
                else if (type == 620)
                {
                    int num341 = (int) this.ai[0];
                    this.ai[1] += 1f;
                    float num342 = (60f - this.ai[1]) / 60f;
                    if (this.ai[1] > 40f)
                    {
                        Kill();
                    }

                    base.velocity.Y += 0.2f;
                    if (base.velocity.Y > 18f)
                    {
                        base.velocity.Y = 18f;
                    }

                    base.velocity.X *= 0.98f;
                    for (int num343 = 0; num343 < 2; num343++)
                    {
                        Vector2 position108 = new Vector2(base.position.X, base.position.Y);
                        int width98 = base.width;
                        int height98 = base.height;
                        int num344 = num341;
                        float x16 = base.velocity.X;
                        float y16 = base.velocity.Y;
                        newColor = default(Color);
                        int num345 = Dust.NewDust(position108, width98, height98, num344, x16, y16, 50, newColor, 1.1f);
                        Main.dust[num345].position = (Main.dust[num345].position + base.Center) / 2f;
                        Main.dust[num345].noGravity = true;
                        Main.dust[num345].velocity *= 0.3f;
                        Main.dust[num345].scale *= num342;
                    }

                    for (int num346 = 0; num346 < 1; num346++)
                    {
                        Vector2 position109 = new Vector2(base.position.X, base.position.Y);
                        int width99 = base.width;
                        int height99 = base.height;
                        int num347 = num341;
                        float x17 = base.velocity.X;
                        float y17 = base.velocity.Y;
                        newColor = default(Color);
                        int num345 = Dust.NewDust(position109, width99, height99, num347, x17, y17, 50, newColor, 0.6f);
                        Main.dust[num345].position = (Main.dust[num345].position + base.Center * 5f) / 6f;
                        Main.dust[num345].velocity *= 0.1f;
                        Main.dust[num345].noGravity = true;
                        Main.dust[num345].fadeIn = 0.9f * num342;
                        Main.dust[num345].scale *= num342;
                    }
                }
                else if (type == 521)
                {
                    for (int num348 = 0; num348 < 3; num348++)
                    {
                        Vector2 position110 = new Vector2(base.position.X, base.position.Y);
                        int width100 = base.width;
                        int height100 = base.height;
                        float x18 = base.velocity.X;
                        float y18 = base.velocity.Y;
                        newColor = default(Color);
                        int num349 = Dust.NewDust(position110, width100, height100, 254, x18, y18, 50, newColor, 1.2f);
                        Main.dust[num349].position = (Main.dust[num349].position + base.Center) / 2f;
                        Main.dust[num349].noGravity = true;
                        Main.dust[num349].velocity *= 0.5f;
                    }

                    for (int num350 = 0; num350 < 2; num350++)
                    {
                        Vector2 position111 = new Vector2(base.position.X, base.position.Y);
                        int width101 = base.width;
                        int height101 = base.height;
                        float x19 = base.velocity.X;
                        float y19 = base.velocity.Y;
                        newColor = default(Color);
                        int num349 = Dust.NewDust(position111, width101, height101, 255, x19, y19, 50, newColor, 0.4f);
                        switch (num350)
                        {
                            case 0:
                                Main.dust[num349].position = (Main.dust[num349].position + base.Center * 5f) / 6f;
                                break;
                            case 1:
                                Main.dust[num349].position =
                                    (Main.dust[num349].position + (base.Center + base.velocity / 2f) * 5f) / 6f;
                                break;
                        }

                        Main.dust[num349].velocity *= 0.1f;
                        Main.dust[num349].noGravity = true;
                        Main.dust[num349].fadeIn = 1f;
                    }
                }
                else if (type == 522)
                {
                    this.ai[1] += 1f;
                    float num351 = (60f - this.ai[1]) / 60f;
                    if (this.ai[1] > 40f)
                    {
                        Kill();
                    }

                    base.velocity.Y += 0.2f;
                    if (base.velocity.Y > 18f)
                    {
                        base.velocity.Y = 18f;
                    }

                    base.velocity.X *= 0.98f;
                    for (int num352 = 0; num352 < 2; num352++)
                    {
                        Vector2 position112 = new Vector2(base.position.X, base.position.Y);
                        int width102 = base.width;
                        int height102 = base.height;
                        float x20 = base.velocity.X;
                        float y20 = base.velocity.Y;
                        newColor = default(Color);
                        int num353 = Dust.NewDust(position112, width102, height102, 254, x20, y20, 50, newColor, 1.1f);
                        Main.dust[num353].position = (Main.dust[num353].position + base.Center) / 2f;
                        Main.dust[num353].noGravity = true;
                        Main.dust[num353].velocity *= 0.3f;
                        Main.dust[num353].scale *= num351;
                    }

                    for (int num354 = 0; num354 < 1; num354++)
                    {
                        Vector2 position113 = new Vector2(base.position.X, base.position.Y);
                        int width103 = base.width;
                        int height103 = base.height;
                        float x21 = base.velocity.X;
                        float y21 = base.velocity.Y;
                        newColor = default(Color);
                        int num353 = Dust.NewDust(position113, width103, height103, 255, x21, y21, 50, newColor, 0.6f);
                        Main.dust[num353].position = (Main.dust[num353].position + base.Center * 5f) / 6f;
                        Main.dust[num353].velocity *= 0.1f;
                        Main.dust[num353].noGravity = true;
                        Main.dust[num353].fadeIn = 0.9f * num351;
                        Main.dust[num353].scale *= num351;
                    }
                }
                else
                {
                    int num355 = type - 121 + 86;
                    if (type == 597)
                    {
                        num355 = 262;
                    }

                    for (int num356 = 0; num356 < 2; num356++)
                    {
                        Vector2 position114 = new Vector2(base.position.X, base.position.Y);
                        int width104 = base.width;
                        int height104 = base.height;
                        int num357 = num355;
                        float x22 = base.velocity.X;
                        float y22 = base.velocity.Y;
                        newColor = default(Color);
                        int num358 = Dust.NewDust(position114, width104, height104, num357, x22, y22, 50, newColor,
                            1.2f);
                        Main.dust[num358].noGravity = true;
                        Main.dust[num358].velocity *= 0.3f;
                    }

                    if (this.ai[1] == 0f)
                    {
                        this.ai[1] = 1f;
                        Main.PlaySound(SoundID.Item8, base.position);
                    }
                }
            }
            else if (aiStyle == 30)
            {
                base.velocity *= 0.8f;
                rotation += 0.2f;
                alpha += 4;
                if (alpha >= 255)
                {
                    Kill();
                }
            }
            else if (aiStyle == 31)
            {
                int num359 = 110;
                int conversionType = 0;
                if (type == 146)
                {
                    num359 = 111;
                    conversionType = 2;
                }

                if (type == 147)
                {
                    num359 = 112;
                    conversionType = 1;
                }

                if (type == 148)
                {
                    num359 = 113;
                    conversionType = 3;
                }

                if (type == 149)
                {
                    num359 = 114;
                    conversionType = 4;
                }

                if (owner == Main.myPlayer)
                {
                    WorldGen.Convert((int) (base.position.X + (float) (base.width / 2)) / 16,
                        (int) (base.position.Y + (float) (base.height / 2)) / 16, conversionType, 2);
                }

                if (timeLeft > 133)
                {
                    timeLeft = 133;
                }

                if (this.ai[0] > 7f)
                {
                    float num360 = 1f;
                    if (this.ai[0] == 8f)
                    {
                        num360 = 0.2f;
                    }
                    else if (this.ai[0] == 9f)
                    {
                        num360 = 0.4f;
                    }
                    else if (this.ai[0] == 10f)
                    {
                        num360 = 0.6f;
                    }
                    else if (this.ai[0] == 11f)
                    {
                        num360 = 0.8f;
                    }

                    this.ai[0] += 1f;
                    for (int num361 = 0; num361 < 1; num361++)
                    {
                        Vector2 position115 = new Vector2(base.position.X, base.position.Y);
                        int width105 = base.width;
                        int height105 = base.height;
                        int num362 = num359;
                        float speedX26 = base.velocity.X * 0.2f;
                        float speedY30 = base.velocity.Y * 0.2f;
                        newColor = default(Color);
                        int num363 = Dust.NewDust(position115, width105, height105, num362, speedX26, speedY30, 100,
                            newColor, 1f);
                        Main.dust[num363].noGravity = true;
                        Main.dust[num363].scale *= 1.75f;
                        Main.dust[num363].velocity.X *= 2f;
                        Main.dust[num363].velocity.Y *= 2f;
                        Main.dust[num363].scale *= num360;
                    }
                }
                else
                {
                    this.ai[0] += 1f;
                }

                rotation += 0.3f * (float) base.direction;
            }
            else if (aiStyle == 32)
            {
                timeLeft = 10;
                this.ai[0] += 1f;
                if (this.ai[0] >= 20f)
                {
                    this.ai[0] = 15f;
                    for (int num364 = 0; num364 < 255; num364++)
                    {
                        Rectangle rectangle3 = new Rectangle((int) base.position.X, (int) base.position.Y, base.width,
                            base.height);
                        if (Main.player[num364].active)
                        {
                            Rectangle value9 = new Rectangle((int) Main.player[num364].position.X,
                                (int) Main.player[num364].position.Y, Main.player[num364].width,
                                Main.player[num364].height);
                            if (rectangle3.Intersects(value9))
                            {
                                this.ai[0] = 0f;
                                base.velocity.Y = -4.5f;
                                if (base.velocity.X > 2f)
                                {
                                    base.velocity.X = 2f;
                                }

                                if (base.velocity.X < -2f)
                                {
                                    base.velocity.X = -2f;
                                }

                                base.velocity.X = (base.velocity.X + (float) Main.player[num364].direction * 1.75f) /
                                                  2f;
                                base.velocity.X += Main.player[num364].velocity.X * 3f;
                                base.velocity.Y += Main.player[num364].velocity.Y;
                                if (base.velocity.X > 6f)
                                {
                                    base.velocity.X = 6f;
                                }

                                if (base.velocity.X < -6f)
                                {
                                    base.velocity.X = -6f;
                                }

                                netUpdate = true;
                                this.ai[1] += 1f;
                            }
                        }
                    }
                }

                if (base.velocity.X == 0f && base.velocity.Y == 0f)
                {
                    Kill();
                }

                rotation += 0.02f * base.velocity.X;
                if (base.velocity.Y == 0f)
                {
                    base.velocity.X *= 0.98f;
                }
                else if (wet)
                {
                    base.velocity.X *= 0.99f;
                }
                else
                {
                    base.velocity.X *= 0.995f;
                }

                if ((double) base.velocity.X > -0.03 && (double) base.velocity.X < 0.03)
                {
                    base.velocity.X = 0f;
                }

                if (wet)
                {
                    this.ai[1] = 0f;
                    if (base.velocity.Y > 0f)
                    {
                        base.velocity.Y *= 0.95f;
                    }

                    base.velocity.Y -= 0.1f;
                    if (base.velocity.Y < -4f)
                    {
                        base.velocity.Y = -4f;
                    }

                    if (base.velocity.X == 0f)
                    {
                        Kill();
                    }
                }
                else
                {
                    base.velocity.Y += 0.1f;
                }

                if (base.velocity.Y > 10f)
                {
                    base.velocity.Y = 10f;
                }
            }
            else if (aiStyle == 33)
            {
                if (alpha > 0)
                {
                    alpha -= 50;
                    if (alpha < 0)
                    {
                        alpha = 0;
                    }
                }

                float num365 = 4f;
                float num366 = this.ai[0];
                float num367 = this.ai[1];
                if (num366 == 0f && num367 == 0f)
                {
                    num366 = 1f;
                }

                float num368 = (float) Math.Sqrt((double) (num366 * num366 + num367 * num367));
                num368 = num365 / num368;
                num366 *= num368;
                num367 *= num368;
                if (alpha < 70)
                {
                    int num369 = 127;
                    if (type == 310)
                    {
                        num369 = 187;
                    }

                    Vector2 position116 = new Vector2(base.position.X, base.position.Y - 2f);
                    int num370 = num369;
                    float x23 = base.velocity.X;
                    float y23 = base.velocity.Y;
                    newColor = default(Color);
                    int num371 = Dust.NewDust(position116, 6, 6, num370, x23, y23, 100, newColor, 1.6f);
                    Main.dust[num371].noGravity = true;
                    Main.dust[num371].position.X -= num366 * 1f;
                    Main.dust[num371].position.Y -= num367 * 1f;
                    Main.dust[num371].velocity.X -= num366;
                    Main.dust[num371].velocity.Y -= num367;
                }

                if (localAI[0] == 0f)
                {
                    this.ai[0] = base.velocity.X;
                    this.ai[1] = base.velocity.Y;
                    localAI[1] += 1f;
                    if (localAI[1] >= 30f)
                    {
                        base.velocity.Y += 0.09f;
                        localAI[1] = 30f;
                    }
                }
                else
                {
                    if (!Collision.SolidCollision(base.position, base.width, base.height))
                    {
                        localAI[0] = 0f;
                        localAI[1] = 30f;
                    }

                    damage = 0;
                }

                if (base.velocity.Y > 16f)
                {
                    base.velocity.Y = 16f;
                }

                rotation = (float) Math.Atan2((double) this.ai[1], (double) this.ai[0]) + 1.57f;
            }
            else if (aiStyle == 34)
            {
                rotation = base.velocity.ToRotation() + 1.57079637f;
                if (this.ai[1] == 1f)
                {
                    this.ai[0] += 1f;
                    if (this.ai[0] == 1f)
                    {
                        for (int num372 = 0; num372 < 8; num372++)
                        {
                            Vector2 position117 = base.position;
                            int width106 = base.width;
                            int height106 = base.height;
                            newColor = default(Color);
                            int num373 = Dust.NewDust(position117, width106, height106, 6, 0f, 0f, 100, newColor, 1.8f);
                            Main.dust[num373].noGravity = true;
                            Main.dust[num373].velocity *= 3f;
                            Main.dust[num373].fadeIn = 0.5f;
                            Main.dust[num373].position += base.velocity / 2f;
                            Main.dust[num373].velocity += base.velocity / 4f + Main.player[owner].velocity * 0.1f;
                        }
                    }

                    if (this.ai[0] > 2f)
                    {
                        Vector2 position118 = new Vector2(base.position.X + 2f, base.position.Y + 20f);
                        float x24 = base.velocity.X;
                        float y24 = base.velocity.Y;
                        newColor = default(Color);
                        int num374 = Dust.NewDust(position118, 8, 8, 6, x24, y24, 100, newColor, 1.2f);
                        Main.dust[num374].noGravity = true;
                        Main.dust[num374].velocity *= 0.2f;
                        Main.dust[num374].position =
                            Main.dust[num374].position.RotatedBy((double) rotation, base.Center);
                        Vector2 position119 = new Vector2(base.position.X + 2f, base.position.Y + 15f);
                        float x25 = base.velocity.X;
                        float y25 = base.velocity.Y;
                        newColor = default(Color);
                        num374 = Dust.NewDust(position119, 8, 8, 6, x25, y25, 100, newColor, 1.2f);
                        Main.dust[num374].noGravity = true;
                        Main.dust[num374].velocity *= 0.2f;
                        Main.dust[num374].position =
                            Main.dust[num374].position.RotatedBy((double) rotation, base.Center);
                        Vector2 position120 = new Vector2(base.position.X + 2f, base.position.Y + 10f);
                        float x26 = base.velocity.X;
                        float y26 = base.velocity.Y;
                        newColor = default(Color);
                        num374 = Dust.NewDust(position120, 8, 8, 6, x26, y26, 100, newColor, 1.2f);
                        Main.dust[num374].noGravity = true;
                        Main.dust[num374].velocity *= 0.2f;
                        Main.dust[num374].position =
                            Main.dust[num374].position.RotatedBy((double) rotation, base.Center);
                    }
                }
                else if (type >= 415 && type <= 418)
                {
                    this.ai[0] += 1f;
                    if (this.ai[0] > 4f)
                    {
                        Vector2 position121 = new Vector2(base.position.X + 2f, base.position.Y + 20f);
                        float x27 = base.velocity.X;
                        float y27 = base.velocity.Y;
                        newColor = default(Color);
                        int num375 = Dust.NewDust(position121, 8, 8, 6, x27, y27, 100, newColor, 1.2f);
                        Main.dust[num375].noGravity = true;
                        Main.dust[num375].velocity *= 0.2f;
                        Main.dust[num375].position =
                            Main.dust[num375].position.RotatedBy((double) rotation, base.Center);
                    }
                }
                else
                {
                    Vector2 position122 = new Vector2(base.position.X + 2f, base.position.Y + 20f);
                    float x28 = base.velocity.X;
                    float y28 = base.velocity.Y;
                    newColor = default(Color);
                    int num376 = Dust.NewDust(position122, 8, 8, 6, x28, y28, 100, newColor, 1.2f);
                    Main.dust[num376].noGravity = true;
                    Main.dust[num376].velocity *= 0.2f;
                    Main.dust[num376].position = Main.dust[num376].position.RotatedBy((double) rotation, base.Center);
                }
            }
            else if (aiStyle == 35)
            {
                this.ai[0] += 1f;
                if (this.ai[0] > 30f)
                {
                    base.velocity.Y += 0.2f;
                    base.velocity.X *= 0.985f;
                    if (base.velocity.Y > 14f)
                    {
                        base.velocity.Y = 14f;
                    }
                }

                rotation += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * (float) base.direction * 0.02f;
                if (owner == Main.myPlayer)
                {
                    Vector2 vector27 = Collision.TileCollision(base.position, base.velocity, base.width, base.height,
                        true, true, 1);
                    bool flag9 = false;
                    if (vector27 != base.velocity)
                    {
                        flag9 = true;
                    }
                    else
                    {
                        int num377 = (int) (base.Center.X + base.velocity.X) / 16;
                        int num378 = (int) (base.Center.Y + base.velocity.Y) / 16;
                        if (Main.tile[num377, num378] != null && Main.tile[num377, num378].active() &&
                            Main.tile[num377, num378].bottomSlope())
                        {
                            flag9 = true;
                            base.position.Y = (float) (num378 * 16 + 16 + 8);
                            base.position.X = (float) (num377 * 16 + 8);
                        }
                    }

                    if (flag9)
                    {
                        int num379 = 213;
                        if (type == 475)
                        {
                            num379 = 353;
                        }

                        if (type == 506)
                        {
                            num379 = 366;
                        }

                        if (type == 505)
                        {
                            num379 = 365;
                        }

                        int num380 = (int) (base.position.X + (float) (base.width / 2)) / 16;
                        int num381 = (int) (base.position.Y + (float) (base.height / 2)) / 16;
                        base.position += vector27;
                        int num382 = 10;
                        if (Main.tile[num380, num381] != null)
                        {
                            for (;
                                Main.tile[num380, num381] != null && Main.tile[num380, num381].active() &&
                                Main.tileRope[Main.tile[num380, num381].type];
                                num381++)
                            {
                            }

                            while (num382 > 0)
                            {
                                num382--;
                                if (Main.tile[num380, num381] == null)
                                {
                                    break;
                                }

                                if (Main.tile[num380, num381].active() &&
                                    (Main.tileCut[Main.tile[num380, num381].type] ||
                                     Main.tile[num380, num381].type == 165))
                                {
                                    WorldGen.KillTile(num380, num381, false, false, false);
                                    NetMessage.SendData(17, -1, -1, null, 0, (float) num380, (float) num381, 0f, 0, 0,
                                        0);
                                }

                                if (!Main.tile[num380, num381].active())
                                {
                                    WorldGen.PlaceTile(num380, num381, num379, false, false, -1, 0);
                                    NetMessage.SendData(17, -1, -1, null, 1, (float) num380, (float) num381,
                                        (float) num379, 0, 0, 0);
                                    this.ai[1] += 1f;
                                }
                                else
                                {
                                    num382 = 0;
                                }

                                num381++;
                            }

                            Kill();
                        }
                    }
                }
            }
            else if (aiStyle == 36)
            {
                if (type != 307 && wet && !honeyWet)
                {
                    Kill();
                }

                if (alpha > 0)
                {
                    alpha -= 50;
                }
                else
                {
                    extraUpdates = 0;
                }

                if (alpha < 0)
                {
                    alpha = 0;
                }

                if (type == 307)
                {
                    rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) - 1.57f;
                    frameCounter++;
                    if (frameCounter >= 6)
                    {
                        frame++;
                        frameCounter = 0;
                    }

                    if (frame >= 2)
                    {
                        frame = 0;
                    }

                    for (int num383 = 0; num383 < 3; num383++)
                    {
                        float num384 = base.velocity.X / 3f * (float) num383;
                        float num385 = base.velocity.Y / 3f * (float) num383;
                        Vector2 position123 = base.position;
                        int width107 = base.width;
                        int height107 = base.height;
                        newColor = default(Color);
                        int num386 = Dust.NewDust(position123, width107, height107, 184, 0f, 0f, 0, newColor, 1f);
                        Main.dust[num386].position.X = base.Center.X - num384;
                        Main.dust[num386].position.Y = base.Center.Y - num385;
                        Main.dust[num386].velocity *= 0f;
                        Main.dust[num386].scale = 0.5f;
                    }
                }
                else
                {
                    if (type == 316)
                    {
                        if (base.velocity.X > 0f)
                        {
                            spriteDirection = -1;
                        }
                        else if (base.velocity.X < 0f)
                        {
                            spriteDirection = 1;
                        }
                    }
                    else if (base.velocity.X > 0f)
                    {
                        spriteDirection = 1;
                    }
                    else if (base.velocity.X < 0f)
                    {
                        spriteDirection = -1;
                    }

                    rotation = base.velocity.X * 0.1f;
                    frameCounter++;
                    if (frameCounter >= 3)
                    {
                        frame++;
                        frameCounter = 0;
                    }

                    if (frame >= 3)
                    {
                        frame = 0;
                    }
                }

                float num387 = base.position.X;
                float num388 = base.position.Y;
                float num389 = 100000f;
                bool flag10 = false;
                this.ai[0] += 1f;
                if (this.ai[0] > 30f)
                {
                    this.ai[0] = 30f;
                    for (int num390 = 0; num390 < 200; num390++)
                    {
                        if (Main.npc[num390].CanBeChasedBy(this, false) && (!Main.npc[num390].wet || type == 307))
                        {
                            float num391 = Main.npc[num390].position.X + (float) (Main.npc[num390].width / 2);
                            float num392 = Main.npc[num390].position.Y + (float) (Main.npc[num390].height / 2);
                            float num393 = Math.Abs(base.position.X + (float) (base.width / 2) - num391) +
                                           Math.Abs(base.position.Y + (float) (base.height / 2) - num392);
                            if (num393 < 800f && num393 < num389 && Collision.CanHit(base.position, base.width,
                                    base.height, Main.npc[num390].position, Main.npc[num390].width,
                                    Main.npc[num390].height))
                            {
                                num389 = num393;
                                num387 = num391;
                                num388 = num392;
                                flag10 = true;
                            }
                        }
                    }
                }

                if (!flag10)
                {
                    num387 = base.position.X + (float) (base.width / 2) + base.velocity.X * 100f;
                    num388 = base.position.Y + (float) (base.height / 2) + base.velocity.Y * 100f;
                }
                else if (type == 307)
                {
                    friendly = true;
                }

                float num394 = 6f;
                float num395 = 0.1f;
                if (type == 189)
                {
                    num394 = 7f;
                    num395 = 0.15f;
                }

                if (type == 307)
                {
                    num394 = 9f;
                    num395 = 0.2f;
                }

                if (type == 316)
                {
                    num394 = 10f;
                    num395 = 0.25f;
                }

                if (type == 566)
                {
                    num394 = 6.8f;
                    num395 = 0.14f;
                }

                Vector2 vector28 = new Vector2(base.position.X + (float) base.width * 0.5f,
                    base.position.Y + (float) base.height * 0.5f);
                float num396 = num387 - vector28.X;
                float num397 = num388 - vector28.Y;
                float num398 = (float) Math.Sqrt((double) (num396 * num396 + num397 * num397));
                num398 = num394 / num398;
                num396 *= num398;
                num397 *= num398;
                if (base.velocity.X < num396)
                {
                    base.velocity.X += num395;
                    if (base.velocity.X < 0f && num396 > 0f)
                    {
                        base.velocity.X += num395 * 2f;
                    }
                }
                else if (base.velocity.X > num396)
                {
                    base.velocity.X -= num395;
                    if (base.velocity.X > 0f && num396 < 0f)
                    {
                        base.velocity.X -= num395 * 2f;
                    }
                }

                if (base.velocity.Y < num397)
                {
                    base.velocity.Y += num395;
                    if (base.velocity.Y < 0f && num397 > 0f)
                    {
                        base.velocity.Y += num395 * 2f;
                    }
                }
                else if (base.velocity.Y > num397)
                {
                    base.velocity.Y -= num395;
                    if (base.velocity.Y > 0f && num397 < 0f)
                    {
                        base.velocity.Y -= num395 * 2f;
                    }
                }
            }
            else if (aiStyle == 37)
            {
                if (this.ai[1] == 0f)
                {
                    this.ai[1] = 1f;
                    localAI[0] = base.Center.X - base.velocity.X * 1.5f;
                    localAI[1] = base.Center.Y - base.velocity.Y * 1.5f;
                }

                Vector2 value10 = new Vector2(localAI[0], localAI[1]);
                rotation = (base.Center - value10).ToRotation() - 1.57079637f;
                if (this.ai[0] == 0f)
                {
                    if (Collision.SolidCollision(base.position, base.width, base.height))
                    {
                        base.velocity *= -1f;
                        this.ai[0] += 1f;
                    }
                    else
                    {
                        float num399 = Vector2.Distance(base.Center, value10);
                        if (num399 > 300f)
                        {
                            base.velocity *= -1f;
                            this.ai[0] += 1f;
                        }
                    }
                }
                else if (Collision.SolidCollision(base.position, base.width, base.height) ||
                         Vector2.Distance(base.Center, value10) < base.velocity.Length())
                {
                    Kill();
                }
            }
            else if (aiStyle == 38)
            {
                this.ai[0] += 1f;
                if (this.ai[0] >= 6f)
                {
                    this.ai[0] = 0f;
                    Main.PlaySound(SoundID.Item34, base.position);
                    if (Main.myPlayer == owner)
                    {
                        NewProjectile(base.position.X, base.position.Y, base.velocity.X, base.velocity.Y, 188, damage,
                            knockBack, owner, 0f, 0f);
                    }
                }
            }
            else if (aiStyle == 39)
            {
                alpha -= 50;
                if (alpha < 0)
                {
                    alpha = 0;
                }

                if (Main.player[owner].dead)
                {
                    Kill();
                }
                else
                {
                    if (alpha == 0)
                    {
                        Main.player[owner].itemAnimation = 5;
                        Main.player[owner].itemTime = 5;
                        if (base.position.X + (float) (base.width / 2) >
                            Main.player[owner].position.X + (float) (Main.player[owner].width / 2))
                        {
                            Main.player[owner].ChangeDir(1);
                        }
                        else
                        {
                            Main.player[owner].ChangeDir(-1);
                        }
                    }

                    Vector2 vector29 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    float num400 = Main.player[owner].position.X + (float) (Main.player[owner].width / 2) - vector29.X;
                    float num401 = Main.player[owner].position.Y + (float) (Main.player[owner].height / 2) - vector29.Y;
                    float num402 = (float) Math.Sqrt((double) (num400 * num400 + num401 * num401));
                    if (!Main.player[owner].channel && alpha == 0)
                    {
                        this.ai[0] = 1f;
                        this.ai[1] = -1f;
                    }

                    if (this.ai[1] > 0f && num402 > 1500f)
                    {
                        this.ai[1] = 0f;
                        this.ai[0] = 1f;
                    }

                    if (this.ai[1] > 0f)
                    {
                        tileCollide = false;
                        int num403 = (int) this.ai[1] - 1;
                        if (Main.npc[num403].active && Main.npc[num403].life > 0)
                        {
                            float num404 = 16f;
                            vector29 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                base.position.Y + (float) base.height * 0.5f);
                            num400 = Main.npc[num403].position.X + (float) (Main.npc[num403].width / 2) - vector29.X;
                            num401 = Main.npc[num403].position.Y + (float) (Main.npc[num403].height / 2) - vector29.Y;
                            num402 = (float) Math.Sqrt((double) (num400 * num400 + num401 * num401));
                            if (num402 < num404)
                            {
                                base.velocity.X = num400;
                                base.velocity.Y = num401;
                                if (num402 > num404 / 2f)
                                {
                                    if (base.velocity.X < 0f)
                                    {
                                        spriteDirection = -1;
                                        rotation = (float) Math.Atan2((double) (0f - base.velocity.Y),
                                            (double) (0f - base.velocity.X));
                                    }
                                    else
                                    {
                                        spriteDirection = 1;
                                        rotation = (float) Math.Atan2((double) base.velocity.Y,
                                            (double) base.velocity.X);
                                    }
                                }
                            }
                            else
                            {
                                num402 = num404 / num402;
                                num400 *= num402;
                                num401 *= num402;
                                base.velocity.X = num400;
                                base.velocity.Y = num401;
                                if (base.velocity.X < 0f)
                                {
                                    spriteDirection = -1;
                                    rotation = (float) Math.Atan2((double) (0f - base.velocity.Y),
                                        (double) (0f - base.velocity.X));
                                }
                                else
                                {
                                    spriteDirection = 1;
                                    rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X);
                                }
                            }

                            this.ai[0] = 1f;
                        }
                        else
                        {
                            this.ai[1] = 0f;
                            float num405 = base.position.X;
                            float num406 = base.position.Y;
                            float num407 = 3000f;
                            int num408 = -1;
                            for (int num409 = 0; num409 < 200; num409++)
                            {
                                if (Main.npc[num409].CanBeChasedBy(this, false))
                                {
                                    float num410 = Main.npc[num409].position.X + (float) (Main.npc[num409].width / 2);
                                    float num411 = Main.npc[num409].position.Y + (float) (Main.npc[num409].height / 2);
                                    float num412 = Math.Abs(base.position.X + (float) (base.width / 2) - num410) +
                                                   Math.Abs(base.position.Y + (float) (base.height / 2) - num411);
                                    if (num412 < num407 && Collision.CanHit(base.position, base.width, base.height,
                                            Main.npc[num409].position, Main.npc[num409].width, Main.npc[num409].height))
                                    {
                                        num407 = num412;
                                        num405 = num410;
                                        num406 = num411;
                                        num408 = num409;
                                    }
                                }
                            }

                            if (num408 >= 0)
                            {
                                float num413 = 16f;
                                vector29 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                    base.position.Y + (float) base.height * 0.5f);
                                num400 = num405 - vector29.X;
                                num401 = num406 - vector29.Y;
                                num402 = (float) Math.Sqrt((double) (num400 * num400 + num401 * num401));
                                num402 = num413 / num402;
                                num400 *= num402;
                                num401 *= num402;
                                base.velocity.X = num400;
                                base.velocity.Y = num401;
                                this.ai[0] = 0f;
                                this.ai[1] = (float) (num408 + 1);
                            }
                        }
                    }
                    else if (this.ai[0] == 0f)
                    {
                        if (num402 > 700f)
                        {
                            this.ai[0] = 1f;
                        }

                        if (base.velocity.X < 0f)
                        {
                            spriteDirection = -1;
                            rotation = (float) Math.Atan2((double) (0f - base.velocity.Y),
                                (double) (0f - base.velocity.X));
                        }
                        else
                        {
                            spriteDirection = 1;
                            rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X);
                        }
                    }
                    else if (this.ai[0] == 1f)
                    {
                        tileCollide = false;
                        if (base.velocity.X < 0f)
                        {
                            spriteDirection = 1;
                            rotation = (float) Math.Atan2((double) (0f - base.velocity.Y),
                                (double) (0f - base.velocity.X));
                        }
                        else
                        {
                            spriteDirection = -1;
                            rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X);
                        }

                        if (base.velocity.X < 0f)
                        {
                            spriteDirection = -1;
                            rotation = (float) Math.Atan2((double) (0f - base.velocity.Y),
                                (double) (0f - base.velocity.X));
                        }
                        else
                        {
                            spriteDirection = 1;
                            rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X);
                        }

                        float num414 = 20f;
                        if (num402 < 70f)
                        {
                            Kill();
                        }

                        num402 = num414 / num402;
                        num400 *= num402;
                        num401 *= num402;
                        base.velocity.X = num400;
                        base.velocity.Y = num401;
                    }

                    frameCounter++;
                    if (frameCounter >= 4)
                    {
                        frame++;
                        frameCounter = 0;
                    }

                    if (frame >= 4)
                    {
                        frame = 0;
                    }
                }
            }
            else if (aiStyle == 40)
            {
                localAI[0] += 1f;
                if (localAI[0] > 3f)
                {
                    localAI[0] = 100f;
                    alpha -= 50;
                    if (alpha < 0)
                    {
                        alpha = 0;
                    }
                }

                frameCounter++;
                if (frameCounter >= 3)
                {
                    frame++;
                    frameCounter = 0;
                }

                if (frame >= 5)
                {
                    frame = 0;
                }

                base.velocity.X += this.ai[0];
                base.velocity.Y += this.ai[1];
                localAI[1] += 1f;
                if (localAI[1] == 50f)
                {
                    localAI[1] = 51f;
                    this.ai[0] = (float) Main.rand.Next(-100, 101) * 6E-05f;
                    this.ai[1] = (float) Main.rand.Next(-100, 101) * 6E-05f;
                }

                if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) > 16f)
                {
                    base.velocity.X *= 0.95f;
                    base.velocity.Y *= 0.95f;
                }

                if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < 12f)
                {
                    base.velocity.X *= 1.05f;
                    base.velocity.Y *= 1.05f;
                }

                rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) + 3.14f;
            }
            else if (aiStyle == 41)
            {
                if (localAI[0] == 0f)
                {
                    localAI[0] = 1f;
                    frame = Main.rand.Next(3);
                }

                rotation += base.velocity.X * 0.01f;
            }
            else if (aiStyle == 42)
            {
                if (!Main.player[owner].crystalLeaf)
                {
                    Kill();
                }
                else
                {
                    base.position.X = Main.player[owner].Center.X - (float) (base.width / 2);
                    base.position.Y = Main.player[owner].Center.Y - (float) (base.height / 2) +
                                      Main.player[owner].gfxOffY - 60f;
                    if (Main.player[owner].gravDir == -1f)
                    {
                        base.position.Y += 120f;
                        rotation = 3.14f;
                    }
                    else
                    {
                        rotation = 0f;
                    }

                    base.position.X = (float) (int) base.position.X;
                    base.position.Y = (float) (int) base.position.Y;
                    float num415 = (float) (int) Main.mouseTextColor / 200f - 0.35f;
                    num415 *= 0.2f;
                    scale = num415 + 0.95f;
                    if (owner == Main.myPlayer)
                    {
                        if (this.ai[0] == 0f)
                        {
                            float num416 = base.position.X;
                            float num417 = base.position.Y;
                            float num418 = 700f;
                            bool flag11 = false;
                            for (int num419 = 0; num419 < 200; num419++)
                            {
                                if (Main.npc[num419].CanBeChasedBy(this, true))
                                {
                                    float num420 = Main.npc[num419].position.X + (float) (Main.npc[num419].width / 2);
                                    float num421 = Main.npc[num419].position.Y + (float) (Main.npc[num419].height / 2);
                                    float num422 = Math.Abs(base.position.X + (float) (base.width / 2) - num420) +
                                                   Math.Abs(base.position.Y + (float) (base.height / 2) - num421);
                                    if (num422 < num418 && Collision.CanHit(base.position, base.width, base.height,
                                            Main.npc[num419].position, Main.npc[num419].width, Main.npc[num419].height))
                                    {
                                        num418 = num422;
                                        num416 = num420;
                                        num417 = num421;
                                        flag11 = true;
                                    }
                                }
                            }

                            if (flag11)
                            {
                                float num423 = 12f;
                                Vector2 vector30 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                    base.position.Y + (float) base.height * 0.5f);
                                float num424 = num416 - vector30.X;
                                float num425 = num417 - vector30.Y;
                                float num426 = (float) Math.Sqrt((double) (num424 * num424 + num425 * num425));
                                num426 = num423 / num426;
                                num424 *= num426;
                                num425 *= num426;
                                NewProjectile(base.Center.X - 4f, base.Center.Y, num424, num425, 227,
                                    Player.crystalLeafDamage, (float) Player.crystalLeafKB, owner, 0f, 0f);
                                this.ai[0] = 50f;
                            }
                        }
                        else
                        {
                            this.ai[0] -= 1f;
                        }
                    }
                }
            }
            else if (aiStyle == 43)
            {
                if (localAI[1] == 0f)
                {
                    Main.PlaySound(6, (int) base.position.X, (int) base.position.Y, 1, 1f, 0f);
                    localAI[1] += 1f;
                    for (int num427 = 0; num427 < 5; num427++)
                    {
                        Vector2 position124 = new Vector2(base.position.X, base.position.Y);
                        int width108 = base.width;
                        int height108 = base.height;
                        newColor = default(Color);
                        int num428 = Dust.NewDust(position124, width108, height108, 157, 0f, 0f, 0, newColor, 1f);
                        Main.dust[num428].noGravity = true;
                        Main.dust[num428].velocity *= 3f;
                        Main.dust[num428].scale = 1.5f;
                    }
                }

                this.ai[0] = (float) Main.rand.Next(-100, 101) * 0.0025f;
                this.ai[1] = (float) Main.rand.Next(-100, 101) * 0.0025f;
                if (localAI[0] == 0f)
                {
                    scale += 0.05f;
                    if ((double) scale > 1.2)
                    {
                        localAI[0] = 1f;
                    }
                }
                else
                {
                    scale -= 0.05f;
                    if ((double) scale < 0.8)
                    {
                        localAI[0] = 0f;
                    }
                }

                rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) + 3.14f;
                Vector2 position125 = new Vector2(base.position.X, base.position.Y);
                int width109 = base.width;
                int height109 = base.height;
                newColor = default(Color);
                int num429 = Dust.NewDust(position125, width109, height109, 157, 0f, 0f, 0, newColor, 1f);
                Main.dust[num429].noGravity = true;
                Main.dust[num429].velocity *= 0.1f;
                Main.dust[num429].scale = 1.5f;
            }
            else if (aiStyle == 44)
            {
                if (type == 228)
                {
                    base.velocity *= 0.96f;
                    alpha += 4;
                    if (alpha > 255)
                    {
                        Kill();
                    }
                }
                else if (type == 229)
                {
                    if (this.ai[0] == 0f)
                    {
                        Main.PlaySound(SoundID.Item8, base.position);
                    }

                    this.ai[0] += 1f;
                    if (this.ai[0] > 20f)
                    {
                        base.velocity.Y += 0.3f;
                        base.velocity.X *= 0.98f;
                    }
                }

                frameCounter++;
                if (frameCounter > 5)
                {
                    frame++;
                    frameCounter = 0;
                }

                if (frame >= Main.projFrames[type])
                {
                    frame = 0;
                }
            }
            else if (aiStyle == 45)
            {
                if (type == 237 || type == 243)
                {
                    float num430 = this.ai[0];
                    float num431 = this.ai[1];
                    if (num430 != 0f && num431 != 0f)
                    {
                        bool flag12 = false;
                        bool flag13 = false;
                        if ((base.velocity.X < 0f && base.Center.X < num430) ||
                            (base.velocity.X > 0f && base.Center.X > num430))
                        {
                            flag12 = true;
                        }

                        if ((base.velocity.Y < 0f && base.Center.Y < num431) ||
                            (base.velocity.Y > 0f && base.Center.Y > num431))
                        {
                            flag13 = true;
                        }

                        if (flag12 && flag13)
                        {
                            Kill();
                        }
                    }

                    rotation += base.velocity.X * 0.02f;
                    frameCounter++;
                    if (frameCounter > 4)
                    {
                        frameCounter = 0;
                        frame++;
                        if (frame > 3)
                        {
                            frame = 0;
                        }
                    }
                }
                else if (type == 238 || type == 244)
                {
                    frameCounter++;
                    if (frameCounter > 8)
                    {
                        frameCounter = 0;
                        frame++;
                        if (frame > 5)
                        {
                            frame = 0;
                        }
                    }

                    this.ai[1] += 1f;
                    if (type == 244 && this.ai[1] >= 3600f)
                    {
                        alpha += 5;
                        if (alpha > 255)
                        {
                            alpha = 255;
                            Kill();
                        }
                    }
                    else if (type == 238 && this.ai[1] >= 7200f)
                    {
                        alpha += 5;
                        if (alpha > 255)
                        {
                            alpha = 255;
                            Kill();
                        }
                    }
                    else
                    {
                        this.ai[0] += 1f;
                        if (type == 244)
                        {
                            if (this.ai[0] > 10f)
                            {
                                this.ai[0] = 0f;
                                if (owner == Main.myPlayer)
                                {
                                    int num432 =
                                        (int) (base.position.X + 14f + (float) Main.rand.Next(base.width - 28));
                                    int num433 = (int) (base.position.Y + (float) base.height + 4f);
                                    NewProjectile((float) num432, (float) num433, 0f, 5f, 245, damage, 0f, owner, 0f,
                                        0f);
                                }
                            }
                        }
                        else if (this.ai[0] > 8f)
                        {
                            this.ai[0] = 0f;
                            if (owner == Main.myPlayer)
                            {
                                int num434 = (int) (base.position.X + 14f + (float) Main.rand.Next(base.width - 28));
                                int num435 = (int) (base.position.Y + (float) base.height + 4f);
                                NewProjectile((float) num434, (float) num435, 0f, 5f, 239, damage, 0f, owner, 0f, 0f);
                            }
                        }
                    }

                    localAI[0] += 1f;
                    if (localAI[0] >= 10f)
                    {
                        localAI[0] = 0f;
                        int num436 = 0;
                        int num437 = 0;
                        float num438 = 0f;
                        int num439 = type;
                        for (int num440 = 0; num440 < 1000; num440++)
                        {
                            if (Main.projectile[num440].active && Main.projectile[num440].owner == owner &&
                                Main.projectile[num440].type == num439 && Main.projectile[num440].ai[1] < 3600f)
                            {
                                num436++;
                                if (Main.projectile[num440].ai[1] > num438)
                                {
                                    num437 = num440;
                                    num438 = Main.projectile[num440].ai[1];
                                }
                            }
                        }

                        if (type == 244)
                        {
                            if (num436 > 1)
                            {
                                Main.projectile[num437].netUpdate = true;
                                Main.projectile[num437].ai[1] = 36000f;
                            }
                        }
                        else if (num436 > 2)
                        {
                            Main.projectile[num437].netUpdate = true;
                            Main.projectile[num437].ai[1] = 36000f;
                        }
                    }
                }
                else if (type == 239)
                {
                    alpha = 50;
                }
                else if (type == 245)
                {
                    alpha = 100;
                }
                else if (type == 264)
                {
                    rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) + 1.57f;
                }
            }
            else if (aiStyle == 46)
            {
                int num441 = 1200;
                if (type == 250)
                {
                    if (owner == Main.myPlayer)
                    {
                        localAI[0] += 1f;
                        if (localAI[0] > 4f)
                        {
                            localAI[0] = 3f;
                            NewProjectile(base.Center.X, base.Center.Y, base.velocity.X * 0.001f,
                                base.velocity.Y * 0.001f, 251, damage, knockBack, owner, 0f, 0f);
                        }

                        if (timeLeft > num441)
                        {
                            timeLeft = num441;
                        }
                    }

                    float num442 = 1f;
                    if (base.velocity.Y < 0f)
                    {
                        num442 -= base.velocity.Y / 3f;
                    }

                    this.ai[0] += num442;
                    if (this.ai[0] > 30f)
                    {
                        base.velocity.Y += 0.5f;
                        if (base.velocity.Y > 0f)
                        {
                            base.velocity.X *= 0.95f;
                        }
                        else
                        {
                            base.velocity.X *= 1.05f;
                        }
                    }

                    float x29 = base.velocity.X;
                    float y29 = base.velocity.Y;
                    float num443 = (float) Math.Sqrt((double) (x29 * x29 + y29 * y29));
                    num443 = 15.95f * scale / num443;
                    x29 *= num443;
                    y29 *= num443;
                    base.velocity.X = x29;
                    base.velocity.Y = y29;
                    rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) - 1.57f;
                }
                else
                {
                    if (localAI[0] == 0f)
                    {
                        if (base.velocity.X > 0f)
                        {
                            spriteDirection = -1;
                            rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) - 1.57f;
                        }
                        else
                        {
                            spriteDirection = 1;
                            rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) - 1.57f;
                        }

                        localAI[0] = 1f;
                        timeLeft = num441;
                    }

                    base.velocity.X *= 0.98f;
                    base.velocity.Y *= 0.98f;
                    if (rotation == 0f)
                    {
                        alpha = 255;
                    }
                    else if (timeLeft < 10)
                    {
                        alpha = 255 - (int) (255f * (float) timeLeft / 10f);
                    }
                    else if (timeLeft > num441 - 10)
                    {
                        int num444 = num441 - timeLeft;
                        alpha = 255 - (int) (255f * (float) num444 / 10f);
                    }
                    else
                    {
                        alpha = 0;
                    }
                }
            }
            else if (aiStyle == 47)
            {
                if (this.ai[0] == 0f)
                {
                    this.ai[0] = base.velocity.X;
                    this.ai[1] = base.velocity.Y;
                }

                if (base.velocity.X > 0f)
                {
                    rotation += (Math.Abs(base.velocity.Y) + Math.Abs(base.velocity.X)) * 0.001f;
                }
                else
                {
                    rotation -= (Math.Abs(base.velocity.Y) + Math.Abs(base.velocity.X)) * 0.001f;
                }

                frameCounter++;
                if (frameCounter > 6)
                {
                    frameCounter = 0;
                    frame++;
                    if (frame > 4)
                    {
                        frame = 0;
                    }
                }

                if (Math.Sqrt((double) (base.velocity.X * base.velocity.X + base.velocity.Y * base.velocity.Y)) > 2.0)
                {
                    base.velocity *= 0.98f;
                }

                for (int num445 = 0; num445 < 1000; num445++)
                {
                    if (num445 != whoAmI && Main.projectile[num445].active && Main.projectile[num445].owner == owner &&
                        Main.projectile[num445].type == type && timeLeft > Main.projectile[num445].timeLeft &&
                        Main.projectile[num445].timeLeft > 30)
                    {
                        Main.projectile[num445].timeLeft = 30;
                    }
                }

                int[] array = new int[20];
                int num446 = 0;
                float num447 = 300f;
                bool flag14 = false;
                float num448 = 0f;
                float num449 = 0f;
                for (int num450 = 0; num450 < 200; num450++)
                {
                    if (Main.npc[num450].CanBeChasedBy(this, false))
                    {
                        float num451 = Main.npc[num450].position.X + (float) (Main.npc[num450].width / 2);
                        float num452 = Main.npc[num450].position.Y + (float) (Main.npc[num450].height / 2);
                        float num453 = Math.Abs(base.position.X + (float) (base.width / 2) - num451) +
                                       Math.Abs(base.position.Y + (float) (base.height / 2) - num452);
                        if (num453 < num447 && Collision.CanHit(base.Center, 1, 1, Main.npc[num450].Center, 1, 1))
                        {
                            if (num446 < 20)
                            {
                                array[num446] = num450;
                                num446++;
                                num448 = num451;
                                num449 = num452;
                            }

                            flag14 = true;
                        }
                    }
                }

                if (timeLeft < 30)
                {
                    flag14 = false;
                }

                if (flag14)
                {
                    int num454 = Main.rand.Next(num446);
                    num454 = array[num454];
                    num448 = Main.npc[num454].position.X + (float) (Main.npc[num454].width / 2);
                    num449 = Main.npc[num454].position.Y + (float) (Main.npc[num454].height / 2);
                    localAI[0] += 1f;
                    if (localAI[0] > 8f)
                    {
                        localAI[0] = 0f;
                        float num455 = 6f;
                        Vector2 value11 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        value11 += base.velocity * 4f;
                        float num456 = num448 - value11.X;
                        float num457 = num449 - value11.Y;
                        float num458 = (float) Math.Sqrt((double) (num456 * num456 + num457 * num457));
                        num458 = num455 / num458;
                        num456 *= num458;
                        num457 *= num458;
                        NewProjectile(value11.X, value11.Y, num456, num457, 255, damage, knockBack, owner, 0f, 0f);
                    }
                }
            }
            else if (aiStyle == 48)
            {
                if (type == 255)
                {
                    for (int num459 = 0; num459 < 4; num459++)
                    {
                        Vector2 position126 = base.position;
                        position126 -= base.velocity * ((float) num459 * 0.25f);
                        alpha = 255;
                        Vector2 position127 = position126;
                        newColor = default(Color);
                        int num460 = Dust.NewDust(position127, 1, 1, 160, 0f, 0f, 0, newColor, 1f);
                        Main.dust[num460].position = position126;
                        Main.dust[num460].position.X += (float) (base.width / 2);
                        Main.dust[num460].position.Y += (float) (base.height / 2);
                        Main.dust[num460].scale = (float) Main.rand.Next(70, 110) * 0.013f;
                        Main.dust[num460].velocity *= 0.2f;
                    }
                }
                else if (type == 433)
                {
                    for (int num461 = 0; num461 < 2; num461++)
                    {
                        Vector2 position128 = base.position;
                        position128 -= base.velocity * ((float) num461 * 0.25f);
                        alpha = 255;
                        Vector2 position129 = position128;
                        newColor = default(Color);
                        int num462 = Dust.NewDust(position129, 1, 1, 160, 0f, 0f, 0, newColor, 1f);
                        Main.dust[num462].position = position128;
                        Main.dust[num462].position.X += (float) (base.width / 2);
                        Main.dust[num462].position.Y += (float) (base.height / 2);
                        if (Main.rand.Next(2) == 0)
                        {
                            Main.dust[num462].color = Color.LimeGreen;
                        }
                        else
                        {
                            Main.dust[num462].color = Color.CornflowerBlue;
                        }

                        Main.dust[num462].scale = (float) Main.rand.Next(70, 110) * 0.013f;
                        Main.dust[num462].velocity *= 0.2f;
                    }
                }
                else if (type == 290)
                {
                    if (localAI[0] == 0f)
                    {
                        Main.PlaySound(SoundID.Item8, base.position);
                    }

                    localAI[0] += 1f;
                    if (localAI[0] > 3f)
                    {
                        for (int num463 = 0; num463 < 3; num463++)
                        {
                            Vector2 position130 = base.position;
                            position130 -= base.velocity * ((float) num463 * 0.3334f);
                            alpha = 255;
                            Vector2 position131 = position130;
                            newColor = default(Color);
                            int num464 = Dust.NewDust(position131, 1, 1, 173, 0f, 0f, 0, newColor, 1f);
                            Main.dust[num464].position = position130;
                            Main.dust[num464].scale = (float) Main.rand.Next(70, 110) * 0.013f;
                            Main.dust[num464].velocity *= 0.2f;
                        }
                    }
                }
                else if (type == 294)
                {
                    localAI[0] += 1f;
                    if (localAI[0] > 9f)
                    {
                        for (int num465 = 0; num465 < 4; num465++)
                        {
                            Vector2 position132 = base.position;
                            position132 -= base.velocity * ((float) num465 * 0.25f);
                            alpha = 255;
                            Vector2 position133 = position132;
                            newColor = default(Color);
                            int num466 = Dust.NewDust(position133, 1, 1, 173, 0f, 0f, 0, newColor, 1f);
                            Main.dust[num466].position = position132;
                            Main.dust[num466].scale = (float) Main.rand.Next(70, 110) * 0.013f;
                            Main.dust[num466].velocity *= 0.2f;
                        }
                    }
                }
                else
                {
                    localAI[0] += 1f;
                    if (localAI[0] > 3f)
                    {
                        for (int num467 = 0; num467 < 4; num467++)
                        {
                            Vector2 position134 = base.position;
                            position134 -= base.velocity * ((float) num467 * 0.25f);
                            alpha = 255;
                            Vector2 position135 = position134;
                            newColor = default(Color);
                            int num468 = Dust.NewDust(position135, 1, 1, 162, 0f, 0f, 0, newColor, 1f);
                            Main.dust[num468].position = position134;
                            Main.dust[num468].position.X += (float) (base.width / 2);
                            Main.dust[num468].position.Y += (float) (base.height / 2);
                            Main.dust[num468].scale = (float) Main.rand.Next(70, 110) * 0.013f;
                            Main.dust[num468].velocity *= 0.2f;
                        }
                    }
                }
            }
            else if (aiStyle == 49)
            {
                if (this.ai[1] == 0f)
                {
                    this.ai[1] = 1f;
                    Main.PlaySound(SoundID.Item14, base.position);
                }

                if (this.ai[1] == 1f)
                {
                    if (base.velocity.X > 0f)
                    {
                        base.direction = 1;
                    }
                    else if (base.velocity.X < 0f)
                    {
                        base.direction = -1;
                    }

                    spriteDirection = base.direction;
                    this.ai[0] += 1f;
                    rotation += base.velocity.X * 0.05f + (float) base.direction * 0.05f;
                    if (this.ai[0] >= 18f)
                    {
                        base.velocity.Y += 0.28f;
                        base.velocity.X *= 0.99f;
                    }

                    if ((double) base.velocity.Y > 15.9)
                    {
                        base.velocity.Y = 15.9f;
                    }

                    if (this.ai[0] > 2f)
                    {
                        alpha = 0;
                        if (this.ai[0] == 3f)
                        {
                            for (int num469 = 0; num469 < 10; num469++)
                            {
                                Vector2 position136 = new Vector2(base.position.X, base.position.Y);
                                int width110 = base.width;
                                int height110 = base.height;
                                newColor = default(Color);
                                int num470 = Dust.NewDust(position136, width110, height110, 31, 0f, 0f, 100, newColor,
                                    1.5f);
                                Main.dust[num470].velocity *= 0.5f;
                                Main.dust[num470].velocity += base.velocity * 0.1f;
                            }

                            for (int num471 = 0; num471 < 5; num471++)
                            {
                                Vector2 position137 = new Vector2(base.position.X, base.position.Y);
                                int width111 = base.width;
                                int height111 = base.height;
                                newColor = default(Color);
                                int num472 = Dust.NewDust(position137, width111, height111, 6, 0f, 0f, 100, newColor,
                                    2f);
                                Main.dust[num472].noGravity = true;
                                Main.dust[num472].velocity *= 3f;
                                Main.dust[num472].velocity += base.velocity * 0.2f;
                                Vector2 position138 = new Vector2(base.position.X, base.position.Y);
                                int width112 = base.width;
                                int height112 = base.height;
                                newColor = default(Color);
                                num472 = Dust.NewDust(position138, width112, height112, 6, 0f, 0f, 100, newColor, 1f);
                                Main.dust[num472].velocity *= 2f;
                                Main.dust[num472].velocity += base.velocity * 0.3f;
                            }

                            for (int num473 = 0; num473 < 1; num473++)
                            {
                                Vector2 position139 = new Vector2(base.position.X - 10f, base.position.Y - 10f);
                                vector = default(Vector2);
                                int num474 = Gore.NewGore(position139, vector, Main.rand.Next(61, 64), 1f);
                                Main.gore[num474].position += base.velocity * 1.25f;
                                Main.gore[num474].scale = 1.5f;
                                Main.gore[num474].velocity += base.velocity * 0.5f;
                                Main.gore[num474].velocity *= 0.02f;
                            }
                        }
                    }
                }
                else if (this.ai[1] == 2f)
                {
                    rotation = 0f;
                    base.velocity.X *= 0.95f;
                    base.velocity.Y += 0.2f;
                }
            }
            else if (aiStyle == 50)
            {
                if (type == 291)
                {
                    if (localAI[0] == 0f)
                    {
                        Main.PlaySound(SoundID.Item20, base.position);
                        localAI[0] += 1f;
                    }

                    bool flag15 = false;
                    bool flag16 = false;
                    if (base.velocity.X < 0f && base.position.X < this.ai[0])
                    {
                        flag15 = true;
                    }

                    if (base.velocity.X > 0f && base.position.X > this.ai[0])
                    {
                        flag15 = true;
                    }

                    if (base.velocity.Y < 0f && base.position.Y < this.ai[1])
                    {
                        flag16 = true;
                    }

                    if (base.velocity.Y > 0f && base.position.Y > this.ai[1])
                    {
                        flag16 = true;
                    }

                    if (flag15 && flag16)
                    {
                        Kill();
                    }

                    for (int num475 = 0; num475 < 10; num475++)
                    {
                        Vector2 position140 = new Vector2(base.position.X, base.position.Y);
                        int width113 = base.width;
                        int height113 = base.height;
                        newColor = default(Color);
                        int num476 = Dust.NewDust(position140, width113, height113, 174, 0f, 0f, 100, newColor, 1.2f);
                        Main.dust[num476].noGravity = true;
                        Main.dust[num476].velocity *= 0.5f;
                        Main.dust[num476].velocity += base.velocity * 0.1f;
                    }
                }
                else if (type == 295)
                {
                    for (int num477 = 0; num477 < 8; num477++)
                    {
                        Vector2 position141 = new Vector2(base.position.X, base.position.Y);
                        int width114 = base.width;
                        int height114 = base.height;
                        newColor = default(Color);
                        int num478 = Dust.NewDust(position141, width114, height114, 174, 0f, 0f, 100, newColor, 1.2f);
                        Main.dust[num478].noGravity = true;
                        Main.dust[num478].velocity *= 0.5f;
                        Main.dust[num478].velocity += base.velocity * 0.1f;
                    }
                }
                else
                {
                    if (localAI[0] == 0f)
                    {
                        Main.PlaySound(SoundID.Item74, base.position);
                        localAI[0] += 1f;
                    }

                    this.ai[0] += 1f;
                    if (type == 296)
                    {
                        this.ai[0] += 3f;
                    }

                    float num479 = 25f;
                    if (this.ai[0] > 180f)
                    {
                        num479 -= (this.ai[0] - 180f) / 2f;
                    }

                    if (num479 <= 0f)
                    {
                        num479 = 0f;
                        Kill();
                    }

                    if (type == 296)
                    {
                        num479 *= 0.7f;
                    }

                    for (int num480 = 0; (float) num480 < num479; num480++)
                    {
                        float num481 = (float) Main.rand.Next(-10, 11);
                        float num482 = (float) Main.rand.Next(-10, 11);
                        float num483 = (float) Main.rand.Next(3, 9);
                        float num484 = (float) Math.Sqrt((double) (num481 * num481 + num482 * num482));
                        num484 = num483 / num484;
                        num481 *= num484;
                        num482 *= num484;
                        Vector2 position142 = new Vector2(base.position.X, base.position.Y);
                        int width115 = base.width;
                        int height115 = base.height;
                        newColor = default(Color);
                        int num485 = Dust.NewDust(position142, width115, height115, 174, 0f, 0f, 100, newColor, 1.5f);
                        Main.dust[num485].noGravity = true;
                        Main.dust[num485].position.X = base.Center.X;
                        Main.dust[num485].position.Y = base.Center.Y;
                        Main.dust[num485].position.X += (float) Main.rand.Next(-10, 11);
                        Main.dust[num485].position.Y += (float) Main.rand.Next(-10, 11);
                        Main.dust[num485].velocity.X = num481;
                        Main.dust[num485].velocity.Y = num482;
                    }
                }
            }
            else if (aiStyle == 51)
            {
                if (type == 297)
                {
                    localAI[0] += 1f;
                    if (localAI[0] > 4f)
                    {
                        for (int num486 = 0; num486 < 5; num486++)
                        {
                            Vector2 position143 = new Vector2(base.position.X, base.position.Y);
                            int width116 = base.width;
                            int height116 = base.height;
                            newColor = default(Color);
                            int num487 = Dust.NewDust(position143, width116, height116, 175, 0f, 0f, 100, newColor, 2f);
                            Main.dust[num487].noGravity = true;
                            Main.dust[num487].velocity *= 0f;
                        }
                    }
                }
                else
                {
                    if (localAI[0] == 0f)
                    {
                        Main.PlaySound(SoundID.Item8, base.position);
                        localAI[0] += 1f;
                    }

                    for (int num488 = 0; num488 < 9; num488++)
                    {
                        Vector2 position144 = new Vector2(base.position.X, base.position.Y);
                        int width117 = base.width;
                        int height117 = base.height;
                        newColor = default(Color);
                        int num489 = Dust.NewDust(position144, width117, height117, 175, 0f, 0f, 100, newColor, 1.3f);
                        Main.dust[num489].noGravity = true;
                        Main.dust[num489].velocity *= 0f;
                    }
                }

                float num490 = base.Center.X;
                float num491 = base.Center.Y;
                float num492 = 400f;
                bool flag17 = false;
                if (type == 297)
                {
                    for (int num493 = 0; num493 < 200; num493++)
                    {
                        if (Main.npc[num493].CanBeChasedBy(this, false) && Distance(Main.npc[num493].Center) < num492 &&
                            Collision.CanHit(base.Center, 1, 1, Main.npc[num493].Center, 1, 1))
                        {
                            float num494 = Main.npc[num493].position.X + (float) (Main.npc[num493].width / 2);
                            float num495 = Main.npc[num493].position.Y + (float) (Main.npc[num493].height / 2);
                            float num496 = Math.Abs(base.position.X + (float) (base.width / 2) - num494) +
                                           Math.Abs(base.position.Y + (float) (base.height / 2) - num495);
                            if (num496 < num492)
                            {
                                num492 = num496;
                                num490 = num494;
                                num491 = num495;
                                flag17 = true;
                            }
                        }
                    }
                }
                else
                {
                    num492 = 200f;
                    for (int num497 = 0; num497 < 255; num497++)
                    {
                        if (Main.player[num497].active && !Main.player[num497].dead)
                        {
                            float num498 = Main.player[num497].position.X + (float) (Main.player[num497].width / 2);
                            float num499 = Main.player[num497].position.Y + (float) (Main.player[num497].height / 2);
                            float num500 = Math.Abs(base.position.X + (float) (base.width / 2) - num498) +
                                           Math.Abs(base.position.Y + (float) (base.height / 2) - num499);
                            if (num500 < num492)
                            {
                                num492 = num500;
                                num490 = num498;
                                num491 = num499;
                                flag17 = true;
                            }
                        }
                    }
                }

                if (flag17)
                {
                    float num501 = 3f;
                    if (type == 297)
                    {
                        num501 = 6f;
                    }

                    Vector2 vector31 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    float num502 = num490 - vector31.X;
                    float num503 = num491 - vector31.Y;
                    float num504 = (float) Math.Sqrt((double) (num502 * num502 + num503 * num503));
                    num504 = num501 / num504;
                    num502 *= num504;
                    num503 *= num504;
                    if (type == 297)
                    {
                        base.velocity.X = (base.velocity.X * 20f + num502) / 21f;
                        base.velocity.Y = (base.velocity.Y * 20f + num503) / 21f;
                    }
                    else
                    {
                        base.velocity.X = (base.velocity.X * 100f + num502) / 101f;
                        base.velocity.Y = (base.velocity.Y * 100f + num503) / 101f;
                    }
                }
            }
            else if (aiStyle == 52)
            {
                int num505 = (int) this.ai[0];
                float num506 = 4f;
                Vector2 vector32 = new Vector2(base.position.X + (float) base.width * 0.5f,
                    base.position.Y + (float) base.height * 0.5f);
                float num507 = Main.player[num505].Center.X - vector32.X;
                float num508 = Main.player[num505].Center.Y - vector32.Y;
                float num509 = (float) Math.Sqrt((double) (num507 * num507 + num508 * num508));
                if (num509 < 50f &&
                    base.position.X < Main.player[num505].position.X + (float) Main.player[num505].width &&
                    base.position.X + (float) base.width > Main.player[num505].position.X &&
                    base.position.Y < Main.player[num505].position.Y + (float) Main.player[num505].height &&
                    base.position.Y + (float) base.height > Main.player[num505].position.Y)
                {
                    if (owner == Main.myPlayer && !Main.player[Main.myPlayer].moonLeech)
                    {
                        int num510 = (int) this.ai[1];
                        Main.player[num505].HealEffect(num510, false);
                        Main.player[num505].statLife += num510;
                        if (Main.player[num505].statLife > Main.player[num505].statLifeMax2)
                        {
                            Main.player[num505].statLife = Main.player[num505].statLifeMax2;
                        }

                        NetMessage.SendData(66, -1, -1, null, num505, (float) num510, 0f, 0f, 0, 0, 0);
                    }

                    Kill();
                }

                num509 = num506 / num509;
                num507 *= num509;
                num508 *= num509;
                base.velocity.X = (base.velocity.X * 15f + num507) / 16f;
                base.velocity.Y = (base.velocity.Y * 15f + num508) / 16f;
                if (type == 305)
                {
                    for (int num511 = 0; num511 < 3; num511++)
                    {
                        float num512 = base.velocity.X * 0.334f * (float) num511;
                        float num513 = (0f - base.velocity.Y * 0.334f) * (float) num511;
                        Vector2 position145 = new Vector2(base.position.X, base.position.Y);
                        int width118 = base.width;
                        int height118 = base.height;
                        newColor = default(Color);
                        int num514 = Dust.NewDust(position145, width118, height118, 183, 0f, 0f, 100, newColor, 1.1f);
                        Main.dust[num514].noGravity = true;
                        Main.dust[num514].velocity *= 0f;
                        Main.dust[num514].position.X -= num512;
                        Main.dust[num514].position.Y -= num513;
                    }
                }
                else
                {
                    for (int num515 = 0; num515 < 5; num515++)
                    {
                        float num516 = base.velocity.X * 0.2f * (float) num515;
                        float num517 = (0f - base.velocity.Y * 0.2f) * (float) num515;
                        Vector2 position146 = new Vector2(base.position.X, base.position.Y);
                        int width119 = base.width;
                        int height119 = base.height;
                        newColor = default(Color);
                        int num518 = Dust.NewDust(position146, width119, height119, 175, 0f, 0f, 100, newColor, 1.3f);
                        Main.dust[num518].noGravity = true;
                        Main.dust[num518].velocity *= 0f;
                        Main.dust[num518].position.X -= num516;
                        Main.dust[num518].position.Y -= num517;
                    }
                }
            }
            else if (aiStyle == 53)
            {
                if (localAI[0] == 0f)
                {
                    localAI[1] = 1f;
                    localAI[0] = 1f;
                    this.ai[0] = 120f;
                    int num519 = 80;
                    Main.PlaySound(SoundID.Item46, base.position);
                    if (type == 308)
                    {
                        for (int num520 = 0; num520 < num519; num520++)
                        {
                            Vector2 position147 = new Vector2(base.position.X, base.position.Y + 16f);
                            int width120 = base.width;
                            int height120 = base.height - 16;
                            newColor = default(Color);
                            int num521 = Dust.NewDust(position147, width120, height120, 185, 0f, 0f, 0, newColor, 1f);
                            Main.dust[num521].velocity *= 2f;
                            Main.dust[num521].noGravity = true;
                            Main.dust[num521].scale *= 1.15f;
                        }
                    }

                    if (type == 377)
                    {
                        frame = 4;
                        num519 = 40;
                        for (int num522 = 0; num522 < num519; num522++)
                        {
                            Vector2 position148 = base.position + Vector2.UnitY * 16f;
                            int width121 = base.width;
                            int height121 = base.height - 16;
                            newColor = default(Color);
                            int num523 = Dust.NewDust(position148, width121, height121, 171, 0f, 0f, 100, newColor, 1f);
                            Main.dust[num523].scale = (float) Main.rand.Next(1, 10) * 0.1f;
                            Main.dust[num523].noGravity = true;
                            Main.dust[num523].fadeIn = 1.5f;
                            Main.dust[num523].velocity *= 0.75f;
                        }
                    }
                }

                base.velocity.X = 0f;
                base.velocity.Y += 0.2f;
                if (base.velocity.Y > 16f)
                {
                    base.velocity.Y = 16f;
                }

                bool flag18 = false;
                float num524 = base.Center.X;
                float num525 = base.Center.Y;
                float num526 = 1000f;
                NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
                if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this, false))
                {
                    float num527 = ownerMinionAttackTargetNPC.position.X +
                                   (float) (ownerMinionAttackTargetNPC.width / 2);
                    float num528 = ownerMinionAttackTargetNPC.position.Y +
                                   (float) (ownerMinionAttackTargetNPC.height / 2);
                    float num529 = Math.Abs(base.position.X + (float) (base.width / 2) - num527) +
                                   Math.Abs(base.position.Y + (float) (base.height / 2) - num528);
                    if (num529 < num526 && Collision.CanHit(base.position, base.width, base.height,
                            ownerMinionAttackTargetNPC.position, ownerMinionAttackTargetNPC.width,
                            ownerMinionAttackTargetNPC.height))
                    {
                        num526 = num529;
                        num524 = num527;
                        num525 = num528;
                        flag18 = true;
                    }
                }

                if (!flag18)
                {
                    for (int num530 = 0; num530 < 200; num530++)
                    {
                        if (Main.npc[num530].CanBeChasedBy(this, false))
                        {
                            float num531 = Main.npc[num530].position.X + (float) (Main.npc[num530].width / 2);
                            float num532 = Main.npc[num530].position.Y + (float) (Main.npc[num530].height / 2);
                            float num533 = Math.Abs(base.position.X + (float) (base.width / 2) - num531) +
                                           Math.Abs(base.position.Y + (float) (base.height / 2) - num532);
                            if (num533 < num526 && Collision.CanHit(base.position, base.width, base.height,
                                    Main.npc[num530].position, Main.npc[num530].width, Main.npc[num530].height))
                            {
                                num526 = num533;
                                num524 = num531;
                                num525 = num532;
                                flag18 = true;
                            }
                        }
                    }
                }

                if (flag18)
                {
                    float num534 = num524;
                    float num535 = num525;
                    num524 -= base.Center.X;
                    num525 -= base.Center.Y;
                    int num536 = 0;
                    if (frameCounter > 0)
                    {
                        frameCounter--;
                    }

                    if (frameCounter <= 0)
                    {
                        int num537 = spriteDirection;
                        if (num524 < 0f)
                        {
                            spriteDirection = -1;
                        }
                        else
                        {
                            spriteDirection = 1;
                        }

                        num536 = ((!(num525 > 0f))
                            ? ((Math.Abs(num525) > Math.Abs(num524) * 3f)
                                ? 4
                                : ((Math.Abs(num525) > Math.Abs(num524) * 2f)
                                    ? 3
                                    : ((!(Math.Abs(num524) > Math.Abs(num525) * 3f))
                                        ? ((Math.Abs(num524) > Math.Abs(num525) * 2f) ? 1 : 2)
                                        : 0)))
                            : 0);
                        int num538 = frame;
                        if (type == 308)
                        {
                            frame = num536 * 2;
                        }
                        else if (type == 377)
                        {
                            frame = num536;
                        }

                        if (this.ai[0] > 40f && localAI[1] == 0f && type == 308)
                        {
                            frame++;
                        }

                        if (num538 != frame || num537 != spriteDirection)
                        {
                            frameCounter = 8;
                            if (this.ai[0] <= 0f)
                            {
                                frameCounter = 4;
                            }
                        }
                    }

                    if (this.ai[0] <= 0f)
                    {
                        localAI[1] = 0f;
                        this.ai[0] = 60f;
                        if (Main.myPlayer == owner)
                        {
                            float num539 = 6f;
                            int num540 = 309;
                            if (type == 377)
                            {
                                num540 = 378;
                                num539 = 9f;
                            }

                            Vector2 vector33 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                base.position.Y + (float) base.height * 0.5f);
                            switch (num536)
                            {
                                case 0:
                                    vector33.Y += 12f;
                                    vector33.X += (float) (24 * spriteDirection);
                                    break;
                                case 1:
                                    vector33.Y += 0f;
                                    vector33.X += (float) (24 * spriteDirection);
                                    break;
                                case 2:
                                    vector33.Y -= 2f;
                                    vector33.X += (float) (24 * spriteDirection);
                                    break;
                                case 3:
                                    vector33.Y -= 6f;
                                    vector33.X += (float) (14 * spriteDirection);
                                    break;
                                case 4:
                                    vector33.Y -= 14f;
                                    vector33.X += (float) (2 * spriteDirection);
                                    break;
                            }

                            if (spriteDirection < 0)
                            {
                                vector33.X += 10f;
                            }

                            float num541 = num534 - vector33.X;
                            float num542 = num535 - vector33.Y;
                            float num543 = (float) Math.Sqrt((double) (num541 * num541 + num542 * num542));
                            num543 = num539 / num543;
                            num541 *= num543;
                            num542 *= num543;
                            int num544 = damage;
                            NewProjectile(vector33.X, vector33.Y, num541, num542, num540, num544, knockBack,
                                Main.myPlayer, 0f, 0f);
                        }
                    }
                }
                else if (this.ai[0] <= 60f && (frame == 1 || frame == 3 || frame == 5 || frame == 7 || frame == 9))
                {
                    frame--;
                }

                if (this.ai[0] > 0f)
                {
                    this.ai[0] -= 1f;
                }
            }
            else if (aiStyle == 54)
            {
                if (type == 317)
                {
                    if (Main.player[Main.myPlayer].dead)
                    {
                        Main.player[Main.myPlayer].raven = false;
                    }

                    if (Main.player[Main.myPlayer].raven)
                    {
                        timeLeft = 2;
                    }
                }

                for (int num545 = 0; num545 < 1000; num545++)
                {
                    if (num545 != whoAmI && Main.projectile[num545].active && Main.projectile[num545].owner == owner &&
                        Main.projectile[num545].type == type &&
                        Math.Abs(base.position.X - Main.projectile[num545].position.X) +
                        Math.Abs(base.position.Y - Main.projectile[num545].position.Y) < (float) base.width)
                    {
                        if (base.position.X < Main.projectile[num545].position.X)
                        {
                            base.velocity.X -= 0.05f;
                        }
                        else
                        {
                            base.velocity.X += 0.05f;
                        }

                        if (base.position.Y < Main.projectile[num545].position.Y)
                        {
                            base.velocity.Y -= 0.05f;
                        }
                        else
                        {
                            base.velocity.Y += 0.05f;
                        }
                    }
                }

                float num546 = base.position.X;
                float num547 = base.position.Y;
                float num548 = 900f;
                bool flag19 = false;
                int num549 = 500;
                if (this.ai[1] != 0f || friendly)
                {
                    num549 = 1400;
                }

                if (Math.Abs(base.Center.X - Main.player[owner].Center.X) +
                    Math.Abs(base.Center.Y - Main.player[owner].Center.Y) > (float) num549)
                {
                    this.ai[0] = 1f;
                }

                if (this.ai[0] == 0f)
                {
                    tileCollide = true;
                    NPC ownerMinionAttackTargetNPC2 = OwnerMinionAttackTargetNPC;
                    if (ownerMinionAttackTargetNPC2 != null && ownerMinionAttackTargetNPC2.CanBeChasedBy(this, false))
                    {
                        float num550 = ownerMinionAttackTargetNPC2.position.X +
                                       (float) (ownerMinionAttackTargetNPC2.width / 2);
                        float num551 = ownerMinionAttackTargetNPC2.position.Y +
                                       (float) (ownerMinionAttackTargetNPC2.height / 2);
                        float num552 = Math.Abs(base.position.X + (float) (base.width / 2) - num550) +
                                       Math.Abs(base.position.Y + (float) (base.height / 2) - num551);
                        if (num552 < num548 && Collision.CanHit(base.position, base.width, base.height,
                                ownerMinionAttackTargetNPC2.position, ownerMinionAttackTargetNPC2.width,
                                ownerMinionAttackTargetNPC2.height))
                        {
                            num548 = num552;
                            num546 = num550;
                            num547 = num551;
                            flag19 = true;
                        }
                    }

                    if (!flag19)
                    {
                        for (int num553 = 0; num553 < 200; num553++)
                        {
                            if (Main.npc[num553].CanBeChasedBy(this, false))
                            {
                                float num554 = Main.npc[num553].position.X + (float) (Main.npc[num553].width / 2);
                                float num555 = Main.npc[num553].position.Y + (float) (Main.npc[num553].height / 2);
                                float num556 = Math.Abs(base.position.X + (float) (base.width / 2) - num554) +
                                               Math.Abs(base.position.Y + (float) (base.height / 2) - num555);
                                if (num556 < num548 && Collision.CanHit(base.position, base.width, base.height,
                                        Main.npc[num553].position, Main.npc[num553].width, Main.npc[num553].height))
                                {
                                    num548 = num556;
                                    num546 = num554;
                                    num547 = num555;
                                    flag19 = true;
                                }
                            }
                        }
                    }
                }
                else
                {
                    tileCollide = false;
                }

                if (!flag19)
                {
                    friendly = true;
                    float num557 = 8f;
                    if (this.ai[0] == 1f)
                    {
                        num557 = 12f;
                    }

                    Vector2 vector34 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    float num558 = Main.player[owner].Center.X - vector34.X;
                    float num559 = Main.player[owner].Center.Y - vector34.Y - 60f;
                    float num560 = (float) Math.Sqrt((double) (num558 * num558 + num559 * num559));
                    if (num560 < 100f && this.ai[0] == 1f &&
                        !Collision.SolidCollision(base.position, base.width, base.height))
                    {
                        this.ai[0] = 0f;
                    }

                    if (num560 > 2000f)
                    {
                        base.position.X = Main.player[owner].Center.X - (float) (base.width / 2);
                        base.position.Y = Main.player[owner].Center.Y - (float) (base.width / 2);
                    }

                    if (num560 > 70f)
                    {
                        num560 = num557 / num560;
                        num558 *= num560;
                        num559 *= num560;
                        base.velocity.X = (base.velocity.X * 20f + num558) / 21f;
                        base.velocity.Y = (base.velocity.Y * 20f + num559) / 21f;
                    }
                    else
                    {
                        if (base.velocity.X == 0f && base.velocity.Y == 0f)
                        {
                            base.velocity.X = -0.15f;
                            base.velocity.Y = -0.05f;
                        }

                        base.velocity *= 1.01f;
                    }

                    friendly = false;
                    rotation = base.velocity.X * 0.05f;
                    frameCounter++;
                    if (frameCounter >= 4)
                    {
                        frameCounter = 0;
                        frame++;
                    }

                    if (frame > 3)
                    {
                        frame = 0;
                    }

                    if ((double) Math.Abs(base.velocity.X) > 0.2)
                    {
                        spriteDirection = -base.direction;
                    }
                }
                else
                {
                    if (this.ai[1] == -1f)
                    {
                        this.ai[1] = 17f;
                    }

                    if (this.ai[1] > 0f)
                    {
                        this.ai[1] -= 1f;
                    }

                    if (this.ai[1] == 0f)
                    {
                        friendly = true;
                        float num561 = 8f;
                        Vector2 vector35 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        float num562 = num546 - vector35.X;
                        float num563 = num547 - vector35.Y;
                        float num564 = (float) Math.Sqrt((double) (num562 * num562 + num563 * num563));
                        if (num564 < 100f)
                        {
                            num561 = 10f;
                        }

                        num564 = num561 / num564;
                        num562 *= num564;
                        num563 *= num564;
                        base.velocity.X = (base.velocity.X * 14f + num562) / 15f;
                        base.velocity.Y = (base.velocity.Y * 14f + num563) / 15f;
                    }
                    else
                    {
                        friendly = false;
                        if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < 10f)
                        {
                            base.velocity *= 1.05f;
                        }
                    }

                    rotation = base.velocity.X * 0.05f;
                    frameCounter++;
                    if (frameCounter >= 4)
                    {
                        frameCounter = 0;
                        frame++;
                    }

                    if (frame < 4)
                    {
                        frame = 4;
                    }

                    if (frame > 7)
                    {
                        frame = 4;
                    }

                    if ((double) Math.Abs(base.velocity.X) > 0.2)
                    {
                        spriteDirection = -base.direction;
                    }
                }
            }
            else if (aiStyle == 55)
            {
                frameCounter++;
                if (frameCounter > 0)
                {
                    frame++;
                    frameCounter = 0;
                    if (frame > 2)
                    {
                        frame = 0;
                    }
                }

                if (base.velocity.X < 0f)
                {
                    spriteDirection = -1;
                    rotation = (float) Math.Atan2((double) (0f - base.velocity.Y), (double) (0f - base.velocity.X));
                }
                else
                {
                    spriteDirection = 1;
                    rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X);
                }

                if (this.ai[0] >= 0f && this.ai[0] < 200f)
                {
                    int num565 = (int) this.ai[0];
                    if (Main.npc[num565].active)
                    {
                        float num566 = 8f;
                        Vector2 vector36 = new Vector2(base.position.X + (float) base.width * 0.5f,
                            base.position.Y + (float) base.height * 0.5f);
                        float num567 = Main.npc[num565].position.X - vector36.X;
                        float num568 = Main.npc[num565].position.Y - vector36.Y;
                        float num569 = (float) Math.Sqrt((double) (num567 * num567 + num568 * num568));
                        num569 = num566 / num569;
                        num567 *= num569;
                        num568 *= num569;
                        base.velocity.X = (base.velocity.X * 14f + num567) / 15f;
                        base.velocity.Y = (base.velocity.Y * 14f + num568) / 15f;
                    }
                    else
                    {
                        float num570 = 1000f;
                        for (int num571 = 0; num571 < 200; num571++)
                        {
                            if (Main.npc[num571].CanBeChasedBy(this, false))
                            {
                                float num572 = Main.npc[num571].position.X + (float) (Main.npc[num571].width / 2);
                                float num573 = Main.npc[num571].position.Y + (float) (Main.npc[num571].height / 2);
                                float num574 = Math.Abs(base.position.X + (float) (base.width / 2) - num572) +
                                               Math.Abs(base.position.Y + (float) (base.height / 2) - num573);
                                if (num574 < num570 && Collision.CanHit(base.position, base.width, base.height,
                                        Main.npc[num571].position, Main.npc[num571].width, Main.npc[num571].height))
                                {
                                    num570 = num574;
                                    this.ai[0] = (float) num571;
                                }
                            }
                        }
                    }

                    int num575 = 8;
                    Vector2 position149 =
                        new Vector2(base.position.X + (float) num575, base.position.Y + (float) num575);
                    int width122 = base.width - num575 * 2;
                    int height122 = base.height - num575 * 2;
                    newColor = default(Color);
                    int num576 = Dust.NewDust(position149, width122, height122, 6, 0f, 0f, 0, newColor, 1f);
                    Main.dust[num576].velocity *= 0.5f;
                    Main.dust[num576].velocity += base.velocity * 0.5f;
                    Main.dust[num576].noGravity = true;
                    Main.dust[num576].noLight = true;
                    Main.dust[num576].scale = 1.4f;
                }
                else
                {
                    Kill();
                }
            }
            else if (aiStyle == 56)
            {
                if (localAI[0] == 0f)
                {
                    localAI[0] = 1f;
                    rotation = this.ai[0];
                    spriteDirection = -(int) this.ai[1];
                }

                if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < 16f)
                {
                    base.velocity *= 1.05f;
                }

                if (base.velocity.X < 0f)
                {
                    base.direction = -1;
                }
                else
                {
                    base.direction = 1;
                }

                rotation += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.025f * (float) base.direction;
            }
            else if (aiStyle == 57)
            {
                this.ai[0] += 1f;
                if (this.ai[0] > 30f)
                {
                    this.ai[0] = 30f;
                    base.velocity.Y += 0.25f;
                    if (base.velocity.Y > 16f)
                    {
                        base.velocity.Y = 16f;
                    }

                    base.velocity.X *= 0.995f;
                }

                rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) + 1.57f;
                alpha -= 50;
                if (alpha < 0)
                {
                    alpha = 0;
                }

                if (owner == Main.myPlayer)
                {
                    localAI[0] += 1f;
                    if (localAI[0] >= 4f)
                    {
                        localAI[0] = 0f;
                        int num577 = 0;
                        for (int num578 = 0; num578 < 1000; num578++)
                        {
                            if (Main.projectile[num578].active && Main.projectile[num578].owner == owner &&
                                Main.projectile[num578].type == 344)
                            {
                                num577++;
                            }
                        }

                        float num579 = (float) damage * 0.8f;
                        float num580 = 1f;
                        if (num577 > 100)
                        {
                            num580 = (float) (num577 - 100);
                            num580 = 1f - num580 / 100f;
                            num579 *= num580;
                        }

                        if (num577 > 100)
                        {
                            localAI[0] -= 1f;
                        }

                        if (num577 > 120)
                        {
                            localAI[0] -= 1f;
                        }

                        if (num577 > 140)
                        {
                            localAI[0] -= 1f;
                        }

                        if (num577 > 150)
                        {
                            localAI[0] -= 1f;
                        }

                        if (num577 > 160)
                        {
                            localAI[0] -= 1f;
                        }

                        if (num577 > 165)
                        {
                            localAI[0] -= 1f;
                        }

                        if (num577 > 170)
                        {
                            localAI[0] -= 2f;
                        }

                        if (num577 > 175)
                        {
                            localAI[0] -= 3f;
                        }

                        if (num577 > 180)
                        {
                            localAI[0] -= 4f;
                        }

                        if (num577 > 185)
                        {
                            localAI[0] -= 5f;
                        }

                        if (num577 > 190)
                        {
                            localAI[0] -= 6f;
                        }

                        if (num577 > 195)
                        {
                            localAI[0] -= 7f;
                        }

                        if (num579 > (float) damage * 0.1f)
                        {
                            NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 344, (int) num579, knockBack * 0.55f,
                                owner, 0f, (float) Main.rand.Next(3));
                        }
                    }
                }
            }
            else if (aiStyle == 58)
            {
                alpha -= 50;
                if (alpha < 0)
                {
                    alpha = 0;
                }

                if (this.ai[0] == 0f)
                {
                    frame = 0;
                    this.ai[1] += 1f;
                    if (this.ai[1] > 30f)
                    {
                        base.velocity.Y += 0.1f;
                    }

                    if (base.velocity.Y >= 0f)
                    {
                        this.ai[0] = 1f;
                    }
                }

                if (this.ai[0] == 1f)
                {
                    frame = 1;
                    base.velocity.Y += 0.1f;
                    if (base.velocity.Y > 3f)
                    {
                        base.velocity.Y = 3f;
                    }

                    base.velocity.X *= 0.99f;
                }

                rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) + 1.57f;
            }
            else if (aiStyle == 59)
            {
                this.ai[1] += 1f;
                if (this.ai[1] >= 60f)
                {
                    friendly = true;
                    int num581 = (int) this.ai[0];
                    if (!Main.npc[num581].active)
                    {
                        num581 = -1;
                        int[] array2 = new int[200];
                        int num582 = 0;
                        for (int num583 = 0; num583 < 200; num583++)
                        {
                            if (Main.npc[num583].CanBeChasedBy(this, false))
                            {
                                float num584 =
                                    Math.Abs(Main.npc[num583].position.X + (float) (Main.npc[num583].width / 2) -
                                             base.position.X + (float) (base.width / 2)) +
                                    Math.Abs(Main.npc[num583].position.Y + (float) (Main.npc[num583].height / 2) -
                                             base.position.Y + (float) (base.height / 2));
                                if (num584 < 800f)
                                {
                                    array2[num582] = num583;
                                    num582++;
                                }
                            }
                        }

                        if (num582 == 0)
                        {
                            Kill();
                            return;
                        }

                        num581 = array2[Main.rand.Next(num582)];
                        this.ai[0] = (float) num581;
                    }

                    float num585 = 4f;
                    Vector2 vector37 = new Vector2(base.position.X + (float) base.width * 0.5f,
                        base.position.Y + (float) base.height * 0.5f);
                    float num586 = Main.npc[num581].Center.X - vector37.X;
                    float num587 = Main.npc[num581].Center.Y - vector37.Y;
                    float num588 = (float) Math.Sqrt((double) (num586 * num586 + num587 * num587));
                    num588 = num585 / num588;
                    num586 *= num588;
                    num587 *= num588;
                    int num589 = 30;
                    base.velocity.X = (base.velocity.X * (float) (num589 - 1) + num586) / (float) num589;
                    base.velocity.Y = (base.velocity.Y * (float) (num589 - 1) + num587) / (float) num589;
                }

                for (int num590 = 0; num590 < 5; num590++)
                {
                    float num591 = base.velocity.X * 0.2f * (float) num590;
                    float num592 = (0f - base.velocity.Y * 0.2f) * (float) num590;
                    Vector2 position150 = new Vector2(base.position.X, base.position.Y);
                    int width123 = base.width;
                    int height123 = base.height;
                    newColor = default(Color);
                    int num593 = Dust.NewDust(position150, width123, height123, 175, 0f, 0f, 100, newColor, 1.3f);
                    Main.dust[num593].noGravity = true;
                    Main.dust[num593].velocity *= 0f;
                    Main.dust[num593].position.X -= num591;
                    Main.dust[num593].position.Y -= num592;
                }
            }
            else if (aiStyle == 60)
            {
                scale -= 0.015f;
                if (scale <= 0f)
                {
                    base.velocity *= 5f;
                    oldVelocity = base.velocity;
                    Kill();
                }

                if (this.ai[0] > 3f)
                {
                    int num594 = 103;
                    if (type == 406)
                    {
                        num594 = 137;
                    }

                    if (owner == Main.myPlayer)
                    {
                        Rectangle rectangle4 = new Rectangle((int) base.position.X, (int) base.position.Y, base.width,
                            base.height);
                        for (int num595 = 0; num595 < 200; num595++)
                        {
                            if (Main.npc[num595].active && !Main.npc[num595].dontTakeDamage &&
                                Main.npc[num595].lifeMax > 1)
                            {
                                Rectangle value12 = new Rectangle((int) Main.npc[num595].position.X,
                                    (int) Main.npc[num595].position.Y, Main.npc[num595].width, Main.npc[num595].height);
                                if (rectangle4.Intersects(value12))
                                {
                                    Main.npc[num595].AddBuff(num594, 1500, false);
                                    Kill();
                                }
                            }
                        }

                        for (int num596 = 0; num596 < 255; num596++)
                        {
                            if (num596 != owner && Main.player[num596].active && !Main.player[num596].dead)
                            {
                                Rectangle value13 = new Rectangle((int) Main.player[num596].position.X,
                                    (int) Main.player[num596].position.Y, Main.player[num596].width,
                                    Main.player[num596].height);
                                if (rectangle4.Intersects(value13))
                                {
                                    Main.player[num596].AddBuff(num594, 1500, false);
                                    Kill();
                                }
                            }
                        }
                    }

                    this.ai[0] += this.ai[1];
                    if (this.ai[0] > 30f)
                    {
                        base.velocity.Y += 0.1f;
                    }

                    if (type == 358)
                    {
                        for (int num597 = 0; num597 < 1; num597++)
                        {
                            for (int num598 = 0; num598 < 6; num598++)
                            {
                                float num599 = base.velocity.X / 6f * (float) num598;
                                float num600 = base.velocity.Y / 6f * (float) num598;
                                int num601 = 6;
                                Vector2 position151 = new Vector2(base.position.X + (float) num601,
                                    base.position.Y + (float) num601);
                                int width124 = base.width - num601 * 2;
                                int height124 = base.height - num601 * 2;
                                newColor = default(Color);
                                int num602 = Dust.NewDust(position151, width124, height124, 211, 0f, 0f, 75, newColor,
                                    1.2f);
                                if (Main.rand.Next(2) == 0)
                                {
                                    Main.dust[num602].alpha += 25;
                                }

                                if (Main.rand.Next(2) == 0)
                                {
                                    Main.dust[num602].alpha += 25;
                                }

                                if (Main.rand.Next(2) == 0)
                                {
                                    Main.dust[num602].alpha += 25;
                                }

                                Main.dust[num602].noGravity = true;
                                Main.dust[num602].velocity *= 0.3f;
                                Main.dust[num602].velocity += base.velocity * 0.5f;
                                Main.dust[num602].position = base.Center;
                                Main.dust[num602].position.X -= num599;
                                Main.dust[num602].position.Y -= num600;
                                Main.dust[num602].velocity *= 0.2f;
                            }

                            if (Main.rand.Next(4) == 0)
                            {
                                int num603 = 6;
                                Vector2 position152 = new Vector2(base.position.X + (float) num603,
                                    base.position.Y + (float) num603);
                                int width125 = base.width - num603 * 2;
                                int height125 = base.height - num603 * 2;
                                newColor = default(Color);
                                int num604 = Dust.NewDust(position152, width125, height125, 211, 0f, 0f, 75, newColor,
                                    0.65f);
                                Main.dust[num604].velocity *= 0.5f;
                                Main.dust[num604].velocity += base.velocity * 0.5f;
                            }
                        }
                    }

                    if (type == 406)
                    {
                        int num605 = 175;
                        Color newColor2 = new Color(0, 80, 255, 100);
                        for (int num606 = 0; num606 < 6; num606++)
                        {
                            Vector2 vector38 = base.velocity * (float) num606 / 6f;
                            int num607 = 6;
                            int num608 = Dust.NewDust(base.position + Vector2.One * 6f, base.width - num607 * 2,
                                base.height - num607 * 2, 4, 0f, 0f, num605, newColor2, 1.2f);
                            if (Main.rand.Next(2) == 0)
                            {
                                Main.dust[num608].alpha += 25;
                            }

                            if (Main.rand.Next(2) == 0)
                            {
                                Main.dust[num608].alpha += 25;
                            }

                            if (Main.rand.Next(2) == 0)
                            {
                                Main.dust[num608].alpha += 25;
                            }

                            Main.dust[num608].noGravity = true;
                            Main.dust[num608].velocity *= 0.3f;
                            Main.dust[num608].velocity += base.velocity * 0.5f;
                            Main.dust[num608].position = base.Center;
                            Main.dust[num608].position.X -= vector38.X;
                            Main.dust[num608].position.Y -= vector38.Y;
                            Main.dust[num608].velocity *= 0.2f;
                        }

                        if (Main.rand.Next(4) == 0)
                        {
                            int num609 = 6;
                            int num610 = Dust.NewDust(base.position + Vector2.One * 6f, base.width - num609 * 2,
                                base.height - num609 * 2, 4, 0f, 0f, num605, newColor2, 1.2f);
                            Main.dust[num610].velocity *= 0.5f;
                            Main.dust[num610].velocity += base.velocity * 0.5f;
                        }
                    }
                }
                else
                {
                    this.ai[0] += 1f;
                }
            }
            else if (aiStyle == 61)
            {
                AI_061_FishingBobber();
            }
            else if (aiStyle == 62)
            {
                AI_062();
            }
            else if (aiStyle == 63)
            {
                if (!Main.player[owner].active)
                {
                    active = false;
                }
                else
                {
                    Vector2 value14 = base.position;
                    bool flag20 = false;
                    float num611 = 500f;
                    for (int num612 = 0; num612 < 200; num612++)
                    {
                        NPC nPC = Main.npc[num612];
                        if (nPC.CanBeChasedBy(this, false))
                        {
                            float num613 = Vector2.Distance(nPC.Center, base.Center);
                            if (((Vector2.Distance(base.Center, value14) > num613 && num613 < num611) || !flag20) &&
                                Collision.CanHit(base.position, base.width, base.height, nPC.position, nPC.width,
                                    nPC.height))
                            {
                                num611 = num613;
                                value14 = nPC.Center;
                                flag20 = true;
                            }
                        }
                    }

                    if (!flag20)
                    {
                        base.velocity.X *= 0.95f;
                    }
                    else
                    {
                        float num614 = 5f;
                        float num615 = 0.08f;
                        if (base.velocity.Y == 0f)
                        {
                            bool flag21 = false;
                            if (base.Center.Y - 50f > value14.Y)
                            {
                                flag21 = true;
                            }

                            if (flag21)
                            {
                                base.velocity.Y = -6f;
                            }
                        }
                        else
                        {
                            num614 = 8f;
                            num615 = 0.12f;
                        }

                        base.velocity.X += (float) Math.Sign(value14.X - base.Center.X) * num615;
                        if (base.velocity.X < 0f - num614)
                        {
                            base.velocity.X = 0f - num614;
                        }

                        if (base.velocity.X > num614)
                        {
                            base.velocity.X = num614;
                        }
                    }

                    float num616 = 0f;
                    Collision.StepUp(ref base.position, ref base.velocity, base.width, base.height, ref num616,
                        ref gfxOffY, 1, false, 0);
                    if (base.velocity.Y != 0f)
                    {
                        frame = 3;
                    }
                    else
                    {
                        if (Math.Abs(base.velocity.X) > 0.2f)
                        {
                            frameCounter++;
                        }

                        if (frameCounter >= 9)
                        {
                            frameCounter = 0;
                        }

                        if (frameCounter >= 6)
                        {
                            frame = 2;
                        }
                        else if (frameCounter >= 3)
                        {
                            frame = 1;
                        }
                        else
                        {
                            frame = 0;
                        }
                    }

                    if (base.velocity.X != 0f)
                    {
                        base.direction = Math.Sign(base.velocity.X);
                    }

                    spriteDirection = -base.direction;
                    base.velocity.Y += 0.2f;
                    if (base.velocity.Y > 16f)
                    {
                        base.velocity.Y = 16f;
                    }
                }
            }
            else if (aiStyle == 64)
            {
                int num617 = 10;
                int num618 = 15;
                float num619 = 1f;
                int num620 = 150;
                int num621 = 42;
                if (type == 386)
                {
                    num617 = 16;
                    num618 = 16;
                    num619 = 1.5f;
                }

                if (base.velocity.X != 0f)
                {
                    base.direction = (spriteDirection = -Math.Sign(base.velocity.X));
                }

                frameCounter++;
                if (frameCounter > 2)
                {
                    frame++;
                    frameCounter = 0;
                }

                if (frame >= 6)
                {
                    frame = 0;
                }

                if (localAI[0] == 0f && Main.myPlayer == owner)
                {
                    localAI[0] = 1f;
                    base.position.X += (float) (base.width / 2);
                    base.position.Y += (float) (base.height / 2);
                    scale = ((float) (num617 + num618) - this.ai[1]) * num619 / (float) (num618 + num617);
                    base.width = (int) ((float) num620 * scale);
                    base.height = (int) ((float) num621 * scale);
                    base.position.X -= (float) (base.width / 2);
                    base.position.Y -= (float) (base.height / 2);
                    netUpdate = true;
                }

                if (this.ai[1] != -1f)
                {
                    scale = ((float) (num617 + num618) - this.ai[1]) * num619 / (float) (num618 + num617);
                    base.width = (int) ((float) num620 * scale);
                    base.height = (int) ((float) num621 * scale);
                }

                if (!Collision.SolidCollision(base.position, base.width, base.height))
                {
                    alpha -= 30;
                    if (alpha < 60)
                    {
                        alpha = 60;
                    }

                    if (type == 386 && alpha < 100)
                    {
                        alpha = 100;
                    }
                }
                else
                {
                    alpha += 30;
                    if (alpha > 150)
                    {
                        alpha = 150;
                    }
                }

                if (this.ai[0] > 0f)
                {
                    this.ai[0] -= 1f;
                }

                if (this.ai[0] == 1f && this.ai[1] > 0f && owner == Main.myPlayer)
                {
                    netUpdate = true;
                    Vector2 center4 = base.Center;
                    center4.Y -= (float) num621 * scale / 2f;
                    float num622 = ((float) (num617 + num618) - this.ai[1] + 1f) * num619 / (float) (num618 + num617);
                    center4.Y -= (float) num621 * num622 / 2f;
                    center4.Y += 2f;
                    NewProjectile(center4.X, center4.Y, base.velocity.X, base.velocity.Y, type, damage, knockBack,
                        owner, 10f, this.ai[1] - 1f);
                    int num623 = 4;
                    if (type == 386)
                    {
                        num623 = 2;
                    }

                    if ((int) this.ai[1] % num623 == 0 && this.ai[1] != 0f)
                    {
                        int num624 = 372;
                        if (type == 386)
                        {
                            num624 = 373;
                        }

                        int num625 = NPC.NewNPC((int) center4.X, (int) center4.Y, num624, 0, 0f, 0f, 0f, 0f, 255);
                        Main.npc[num625].velocity = base.velocity;
                        Main.npc[num625].netUpdate = true;
                        if (type == 386)
                        {
                            Main.npc[num625].ai[2] = (float) base.width;
                            Main.npc[num625].ai[3] = -1.5f;
                        }
                    }
                }

                if (this.ai[0] <= 0f)
                {
                    float num626 = 0.104719758f;
                    float num627 = (float) base.width / 5f;
                    if (type == 386)
                    {
                        num627 *= 2f;
                    }

                    float num628 = (float) (Math.Cos((double) (num626 * (0f - this.ai[0]))) - 0.5) * num627;
                    base.position.X -= num628 * (float) (-base.direction);
                    this.ai[0] -= 1f;
                    num628 = (float) (Math.Cos((double) (num626 * (0f - this.ai[0]))) - 0.5) * num627;
                    base.position.X += num628 * (float) (-base.direction);
                }
            }
            else if (aiStyle == 65)
            {
                if (this.ai[1] > 0f)
                {
                    int num629 = (int) this.ai[1] - 1;
                    if (num629 < 255)
                    {
                        localAI[0] += 1f;
                        if (localAI[0] > 10f)
                        {
                            int num630 = 6;
                            for (int num631 = 0; num631 < num630; num631++)
                            {
                                Vector2 vector39 = Vector2.Normalize(base.velocity) *
                                                   new Vector2((float) base.width / 2f, (float) base.height) * 0.75f;
                                Vector2 spinningpoint5 = vector39;
                                double radians5 = (double) (num631 - (num630 / 2 - 1)) * 3.1415926535897931 /
                                                  (double) (float) num630;
                                vector = default(Vector2);
                                vector39 = spinningpoint5.RotatedBy(radians5, vector) + base.Center;
                                Vector2 value15 =
                                    ((float) (Main.rand.NextDouble() * 3.1415927410125732) - 1.57079637f)
                                    .ToRotationVector2() * (float) Main.rand.Next(3, 8);
                                Vector2 position153 = vector39 + value15;
                                float speedX27 = value15.X * 2f;
                                float speedY31 = value15.Y * 2f;
                                newColor = default(Color);
                                int num632 = Dust.NewDust(position153, 0, 0, 172, speedX27, speedY31, 100, newColor,
                                    1.4f);
                                Main.dust[num632].noGravity = true;
                                Main.dust[num632].noLight = true;
                                Main.dust[num632].velocity /= 4f;
                                Main.dust[num632].velocity -= base.velocity;
                            }

                            alpha -= 5;
                            if (alpha < 100)
                            {
                                alpha = 100;
                            }

                            rotation += base.velocity.X * 0.1f;
                            frame = (int) (localAI[0] / 3f) % 3;
                        }

                        Vector2 value16 = Main.player[num629].Center - base.Center;
                        float num633 = 4f;
                        num633 += localAI[0] / 20f;
                        base.velocity = Vector2.Normalize(value16) * num633;
                        if (value16.Length() < 50f)
                        {
                            Kill();
                        }
                    }
                }
                else
                {
                    float num634 = 0.209439516f;
                    float num635 = 4f;
                    float num636 = (float) (Math.Cos((double) (num634 * this.ai[0])) - 0.5) * num635;
                    base.velocity.Y -= num636;
                    this.ai[0] += 1f;
                    num636 = (float) (Math.Cos((double) (num634 * this.ai[0])) - 0.5) * num635;
                    base.velocity.Y += num636;
                    localAI[0] += 1f;
                    if (localAI[0] > 10f)
                    {
                        alpha -= 5;
                        if (alpha < 100)
                        {
                            alpha = 100;
                        }

                        rotation += base.velocity.X * 0.1f;
                        frame = (int) (localAI[0] / 3f) % 3;
                    }
                }

                if (wet)
                {
                    base.position.Y -= 16f;
                    Kill();
                }
            }
            else if (aiStyle == 66)
            {
                float num637 = 0f;
                float num638 = 0f;
                float num639 = 0f;
                float num640 = 0f;
                if (type == 387 || type == 388)
                {
                    num637 = 700f;
                    num638 = 800f;
                    num639 = 1200f;
                    num640 = 150f;
                    if (Main.player[owner].dead)
                    {
                        Main.player[owner].twinsMinion = false;
                    }

                    if (Main.player[owner].twinsMinion)
                    {
                        timeLeft = 2;
                    }
                }

                if (type == 533)
                {
                    num637 = 1500f;
                    num638 = 900f;
                    num639 = 1500f;
                    num640 = 450f;
                    if (Main.player[owner].dead)
                    {
                        Main.player[owner].DeadlySphereMinion = false;
                    }

                    if (Main.player[owner].DeadlySphereMinion)
                    {
                        timeLeft = 2;
                    }
                }

                float num641 = 0.05f;
                for (int num642 = 0; num642 < 1000; num642++)
                {
                    bool flag22 = (Main.projectile[num642].type == 387 || Main.projectile[num642].type == 388) &&
                                  (type == 387 || type == 388);
                    if (!flag22)
                    {
                        flag22 = (type == 533 && Main.projectile[num642].type == 533);
                    }

                    if (num642 != whoAmI && Main.projectile[num642].active && Main.projectile[num642].owner == owner &&
                        flag22 && Math.Abs(base.position.X - Main.projectile[num642].position.X) +
                        Math.Abs(base.position.Y - Main.projectile[num642].position.Y) < (float) base.width)
                    {
                        if (base.position.X < Main.projectile[num642].position.X)
                        {
                            base.velocity.X -= num641;
                        }
                        else
                        {
                            base.velocity.X += num641;
                        }

                        if (base.position.Y < Main.projectile[num642].position.Y)
                        {
                            base.velocity.Y -= num641;
                        }
                        else
                        {
                            base.velocity.Y += num641;
                        }
                    }
                }

                if (type == 533)
                {
                    if ((int) this.ai[0] % 3 != 2)
                    {
                        Lighting.AddLight(base.Center, 0.8f, 0.3f, 0.1f);
                    }
                    else
                    {
                        Lighting.AddLight(base.Center, 0.3f, 0.5f, 0.7f);
                    }
                }

                bool flag23 = false;
                if (this.ai[0] == 2f && type == 388)
                {
                    this.ai[1] += 1f;
                    extraUpdates = 1;
                    rotation = base.velocity.ToRotation() + 3.14159274f;
                    frameCounter++;
                    if (frameCounter > 1)
                    {
                        frame++;
                        frameCounter = 0;
                    }

                    if (frame > 2)
                    {
                        frame = 0;
                    }

                    if (this.ai[1] > 40f)
                    {
                        this.ai[1] = 1f;
                        this.ai[0] = 0f;
                        extraUpdates = 0;
                        numUpdates = 0;
                        netUpdate = true;
                    }
                    else
                    {
                        flag23 = true;
                    }
                }

                if (type == 533 && this.ai[0] >= 3f && this.ai[0] <= 5f)
                {
                    int num643 = 2;
                    flag23 = true;
                    base.velocity *= 0.9f;
                    this.ai[1] += 1f;
                    int num644 = (int) this.ai[1] / num643 + (int) (this.ai[0] - 3f) * 8;
                    if (num644 < 4)
                    {
                        frame = 17 + num644;
                    }
                    else if (num644 < 5)
                    {
                        frame = 0;
                    }
                    else if (num644 < 8)
                    {
                        frame = 1 + num644 - 5;
                    }
                    else if (num644 < 11)
                    {
                        frame = 11 - num644;
                    }
                    else if (num644 < 12)
                    {
                        frame = 0;
                    }
                    else if (num644 < 16)
                    {
                        frame = num644 - 2;
                    }
                    else if (num644 < 20)
                    {
                        frame = 29 - num644;
                    }
                    else if (num644 < 21)
                    {
                        frame = 0;
                    }
                    else
                    {
                        frame = num644 - 4;
                    }

                    if (this.ai[1] > (float) (num643 * 8))
                    {
                        this.ai[0] -= 3f;
                        this.ai[1] = 0f;
                    }
                }

                if (type == 533 && this.ai[0] >= 6f && this.ai[0] <= 8f)
                {
                    this.ai[1] += 1f;
                    MaxUpdates = 2;
                    if (this.ai[0] == 7f)
                    {
                        rotation = base.velocity.ToRotation() + 3.14159274f;
                    }
                    else
                    {
                        rotation += 0.5235988f;
                    }

                    int num645 = 0;
                    switch ((int) this.ai[0])
                    {
                        case 6:
                            frame = 5;
                            num645 = 40;
                            break;
                        case 7:
                            frame = 13;
                            num645 = 30;
                            break;
                        case 8:
                            frame = 17;
                            num645 = 30;
                            break;
                    }

                    if (this.ai[1] > (float) num645)
                    {
                        this.ai[1] = 1f;
                        this.ai[0] -= 6f;
                        localAI[0] += 1f;
                        extraUpdates = 0;
                        numUpdates = 0;
                        netUpdate = true;
                    }
                    else
                    {
                        flag23 = true;
                    }

                    if (this.ai[0] == 8f)
                    {
                        for (int num646 = 0; num646 < 4; num646++)
                        {
                            int num647 = Utils.SelectRandom<int>(Main.rand, 226, 228, 75);
                            Vector2 center5 = base.Center;
                            int num648 = num647;
                            newColor = default(Color);
                            int num649 = Dust.NewDust(center5, 0, 0, num648, 0f, 0f, 0, newColor, 1f);
                            Dust dust3 = Main.dust[num649];
                            Vector2 one = Vector2.One;
                            double radians6 = (double) ((float) num646 * 1.57079637f);
                            vector = default(Vector2);
                            Vector2 spinningpoint6 = one.RotatedBy(radians6, vector);
                            double radians7 = (double) rotation;
                            vector = default(Vector2);
                            Vector2 value17 = spinningpoint6.RotatedBy(radians7, vector);
                            dust3.position = base.Center + value17 * 10f;
                            dust3.velocity = value17 * 1f;
                            dust3.scale = 0.6f + Main.rand.NextFloat() * 0.5f;
                            dust3.noGravity = true;
                        }
                    }
                }

                if (!flag23)
                {
                    Vector2 vector40 = base.position;
                    bool flag24 = false;
                    if (this.ai[0] != 1f && (type == 387 || type == 388))
                    {
                        tileCollide = true;
                    }

                    if (type == 533 && this.ai[0] < 9f)
                    {
                        tileCollide = true;
                    }

                    if (tileCollide &&
                        WorldGen.SolidTile(Framing.GetTileSafely((int) base.Center.X / 16, (int) base.Center.Y / 16)))
                    {
                        tileCollide = false;
                    }

                    NPC ownerMinionAttackTargetNPC3 = OwnerMinionAttackTargetNPC;
                    if (ownerMinionAttackTargetNPC3 != null && ownerMinionAttackTargetNPC3.CanBeChasedBy(this, false))
                    {
                        float num650 = Vector2.Distance(ownerMinionAttackTargetNPC3.Center, base.Center);
                        if (((Vector2.Distance(base.Center, vector40) > num650 && num650 < num637) || !flag24) &&
                            Collision.CanHitLine(base.position, base.width, base.height,
                                ownerMinionAttackTargetNPC3.position, ownerMinionAttackTargetNPC3.width,
                                ownerMinionAttackTargetNPC3.height))
                        {
                            num637 = num650;
                            vector40 = ownerMinionAttackTargetNPC3.Center;
                            flag24 = true;
                        }
                    }

                    if (!flag24)
                    {
                        for (int num651 = 0; num651 < 200; num651++)
                        {
                            NPC nPC2 = Main.npc[num651];
                            if (nPC2.CanBeChasedBy(this, false))
                            {
                                float num652 = Vector2.Distance(nPC2.Center, base.Center);
                                if (((Vector2.Distance(base.Center, vector40) > num652 && num652 < num637) ||
                                     !flag24) && Collision.CanHitLine(base.position, base.width, base.height,
                                        nPC2.position, nPC2.width, nPC2.height))
                                {
                                    num637 = num652;
                                    vector40 = nPC2.Center;
                                    flag24 = true;
                                }
                            }
                        }
                    }

                    float num653 = num638;
                    if (flag24)
                    {
                        num653 = num639;
                    }

                    Player player = Main.player[owner];
                    if (Vector2.Distance(player.Center, base.Center) > num653)
                    {
                        if (type == 387 || type == 388)
                        {
                            this.ai[0] = 1f;
                        }

                        if (type == 533 && this.ai[0] < 9f)
                        {
                            this.ai[0] += (float) (3 * (3 - (int) (this.ai[0] / 3f)));
                        }

                        tileCollide = false;
                        netUpdate = true;
                    }

                    if ((type == 388 || type == 387) && flag24 && this.ai[0] == 0f)
                    {
                        Vector2 vector41 = vector40 - base.Center;
                        float num654 = vector41.Length();
                        vector41.Normalize();
                        if (num654 > 200f)
                        {
                            float scaleFactor2 = 6f;
                            if (type == 388)
                            {
                                scaleFactor2 = 8f;
                            }

                            vector41 *= scaleFactor2;
                            base.velocity = (base.velocity * 40f + vector41) / 41f;
                        }
                        else
                        {
                            float num655 = 4f;
                            vector41 *= 0f - num655;
                            base.velocity = (base.velocity * 40f + vector41) / 41f;
                        }
                    }
                    else
                    {
                        bool flag25 = false;
                        if (!flag25)
                        {
                            flag25 = (this.ai[0] == 1f && (type == 387 || type == 388));
                        }

                        if (!flag25)
                        {
                            flag25 = (this.ai[0] >= 9f && type == 533);
                        }

                        float num656 = 6f;
                        if (type == 533)
                        {
                            num656 = 12f;
                        }

                        if (flag25)
                        {
                            num656 = 15f;
                        }

                        Vector2 center6 = base.Center;
                        Vector2 vector42 = player.Center - center6 + new Vector2(0f, -60f);
                        float num657 = vector42.Length();
                        if (num657 > 200f && num656 < 8f)
                        {
                            num656 = 8f;
                        }

                        if (num657 < num640 && flag25 &&
                            !Collision.SolidCollision(base.position, base.width, base.height))
                        {
                            if (type == 387 || type == 388)
                            {
                                this.ai[0] = 0f;
                            }

                            if (type == 533)
                            {
                                this.ai[0] -= 9f;
                            }

                            netUpdate = true;
                        }

                        if (num657 > 2000f)
                        {
                            base.position.X = Main.player[owner].Center.X - (float) (base.width / 2);
                            base.position.Y = Main.player[owner].Center.Y - (float) (base.height / 2);
                            netUpdate = true;
                        }

                        if (num657 > 70f)
                        {
                            vector42.Normalize();
                            vector42 *= num656;
                            base.velocity = (base.velocity * 40f + vector42) / 41f;
                        }
                        else if (base.velocity.X == 0f && base.velocity.Y == 0f)
                        {
                            base.velocity.X = -0.15f;
                            base.velocity.Y = -0.05f;
                        }
                    }

                    if (type == 388)
                    {
                        rotation = base.velocity.ToRotation() + 3.14159274f;
                    }

                    if (type == 387)
                    {
                        if (flag24)
                        {
                            rotation = (vector40 - base.Center).ToRotation() + 3.14159274f;
                        }
                        else
                        {
                            rotation = base.velocity.ToRotation() + 3.14159274f;
                        }
                    }

                    if (type == 533 && (this.ai[0] < 3f || this.ai[0] >= 9f))
                    {
                        rotation += base.velocity.X * 0.04f;
                    }

                    if (type == 388 || type == 387)
                    {
                        frameCounter++;
                        if (frameCounter > 3)
                        {
                            frame++;
                            frameCounter = 0;
                        }

                        if (frame > 2)
                        {
                            frame = 0;
                        }
                    }
                    else if (type == 533)
                    {
                        if (this.ai[0] < 3f || this.ai[0] >= 9f)
                        {
                            frameCounter++;
                            if (frameCounter >= 24)
                            {
                                frameCounter = 0;
                            }

                            int num658 = frameCounter / 4;
                            frame = 4 + num658;
                            switch ((int) this.ai[0])
                            {
                                case 0:
                                case 9:
                                    frame = 4 + num658;
                                    break;
                                case 1:
                                case 10:
                                    num658 = frameCounter / 8;
                                    frame = 14 + num658;
                                    break;
                                case 2:
                                case 11:
                                    num658 = frameCounter / 3;
                                    if (num658 >= 4)
                                    {
                                        num658 -= 4;
                                    }

                                    frame = 17 + num658;
                                    break;
                            }
                        }

                        if (this.ai[0] == 2f && Main.rand.Next(2) == 0)
                        {
                            for (int num659 = 0; num659 < 4; num659++)
                            {
                                if (Main.rand.Next(2) != 0)
                                {
                                    int num660 = Utils.SelectRandom<int>(Main.rand, 226, 228, 75);
                                    Vector2 center7 = base.Center;
                                    int num661 = num660;
                                    newColor = default(Color);
                                    int num662 = Dust.NewDust(center7, 0, 0, num661, 0f, 0f, 0, newColor, 1f);
                                    Dust dust4 = Main.dust[num662];
                                    Vector2 one2 = Vector2.One;
                                    double radians8 = (double) ((float) num659 * 1.57079637f);
                                    vector = default(Vector2);
                                    Vector2 spinningpoint7 = one2.RotatedBy(radians8, vector);
                                    double radians9 = (double) rotation;
                                    vector = default(Vector2);
                                    Vector2 value18 = spinningpoint7.RotatedBy(radians9, vector);
                                    dust4.position = base.Center + value18 * 10f;
                                    dust4.velocity = value18 * 1f;
                                    dust4.scale = 0.3f + Main.rand.NextFloat() * 0.5f;
                                    dust4.noGravity = true;
                                    dust4.customData = this;
                                    dust4.noLight = true;
                                }
                            }
                        }
                    }

                    if (this.ai[1] > 0f && (type == 387 || type == 388))
                    {
                        this.ai[1] += (float) Main.rand.Next(1, 4);
                    }

                    if (this.ai[1] > 90f && type == 387)
                    {
                        this.ai[1] = 0f;
                        netUpdate = true;
                    }

                    if (this.ai[1] > 40f && type == 388)
                    {
                        this.ai[1] = 0f;
                        netUpdate = true;
                    }

                    if (this.ai[1] > 0f && type == 533)
                    {
                        this.ai[1] += 1f;
                        int num663 = 10;
                        if (this.ai[1] > (float) num663)
                        {
                            this.ai[1] = 0f;
                            netUpdate = true;
                        }
                    }

                    if (this.ai[0] == 0f && (type == 387 || type == 388))
                    {
                        if (type == 387)
                        {
                            float scaleFactor3 = 8f;
                            int num664 = 389;
                            if (flag24 && this.ai[1] == 0f)
                            {
                                this.ai[1] += 1f;
                                if (Main.myPlayer == owner && Collision.CanHitLine(base.position, base.width,
                                        base.height, vector40, 0, 0))
                                {
                                    Vector2 value19 = vector40 - base.Center;
                                    value19.Normalize();
                                    value19 *= scaleFactor3;
                                    int num665 = NewProjectile(base.Center.X, base.Center.Y, value19.X, value19.Y,
                                        num664, (int) ((float) damage * 0.8f), 0f, Main.myPlayer, 0f, 0f);
                                    Main.projectile[num665].timeLeft = 300;
                                    netUpdate = true;
                                }
                            }
                        }

                        if (type == 388 && this.ai[1] == 0f && flag24 && num637 < 500f)
                        {
                            this.ai[1] += 1f;
                            if (Main.myPlayer == owner)
                            {
                                this.ai[0] = 2f;
                                Vector2 value20 = vector40 - base.Center;
                                value20.Normalize();
                                base.velocity = value20 * 8f;
                                netUpdate = true;
                            }
                        }
                    }
                    else if (type == 533 && this.ai[0] < 3f)
                    {
                        int num666 = 0;
                        switch ((int) this.ai[0])
                        {
                            case 0:
                            case 3:
                            case 6:
                                num666 = 400;
                                break;
                            case 1:
                            case 4:
                            case 7:
                                num666 = 400;
                                break;
                            case 2:
                            case 5:
                            case 8:
                                num666 = 600;
                                break;
                        }

                        if (this.ai[1] == 0f && flag24 && num637 < (float) num666)
                        {
                            this.ai[1] += 1f;
                            if (Main.myPlayer == owner)
                            {
                                if (localAI[0] >= 3f)
                                {
                                    this.ai[0] += 4f;
                                    if (this.ai[0] == 6f)
                                    {
                                        this.ai[0] = 3f;
                                    }

                                    localAI[0] = 0f;
                                }
                                else
                                {
                                    this.ai[0] += 6f;
                                    Vector2 value21 = vector40 - base.Center;
                                    value21.Normalize();
                                    float scaleFactor4 = (this.ai[0] == 8f) ? 12f : 10f;
                                    base.velocity = value21 * scaleFactor4;
                                    netUpdate = true;
                                }
                            }
                        }
                    }
                }
            }
            else if (aiStyle == 67)
            {
                Player player2 = Main.player[owner];
                if (!player2.active)
                {
                    active = false;
                }
                else
                {
                    bool flag26 = type == 393 || type == 394 || type == 395;
                    if (flag26)
                    {
                        if (player2.dead)
                        {
                            player2.pirateMinion = false;
                        }

                        if (player2.pirateMinion)
                        {
                            timeLeft = 2;
                        }
                    }

                    if (type == 500)
                    {
                        if (player2.dead)
                        {
                            player2.crimsonHeart = false;
                        }

                        if (player2.crimsonHeart)
                        {
                            timeLeft = 2;
                        }
                    }

                    if (type == 653)
                    {
                        if (player2.dead)
                        {
                            player2.companionCube = false;
                        }

                        if (player2.companionCube)
                        {
                            timeLeft = 2;
                        }
                    }

                    Vector2 vector43 = player2.Center;
                    if (flag26)
                    {
                        vector43.X -= (float) ((15 + player2.width / 2) * player2.direction);
                        vector43.X -= (float) (minionPos * 40 * player2.direction);
                    }

                    if (type == 500)
                    {
                        vector43.X -= (float) ((15 + player2.width / 2) * player2.direction);
                        vector43.X -= (float) (40 * player2.direction);
                    }

                    if (type == 653)
                    {
                        float num667 = (float) (15 + (player2.crimsonHeart ? 40 : 0));
                        vector43.X -= (num667 + (float) (player2.width / 2)) * (float) player2.direction;
                        vector43.X -= (float) (40 * player2.direction);
                    }

                    if (type == 500)
                    {
                        Lighting.AddLight(base.Center, 0.9f, 0.1f, 0.3f);
                        int num668 = 6;
                        if (frame == 0 || frame == 2)
                        {
                            num668 = 12;
                        }

                        if (++frameCounter >= num668)
                        {
                            frameCounter = 0;
                            if (++frame >= Main.projFrames[type])
                            {
                                frame = 0;
                            }
                        }

                        rotation += base.velocity.X / 20f;
                        Vector2 spinningpoint8 = -Vector2.UnitY;
                        double radians10 = (double) rotation;
                        vector = default(Vector2);
                        Vector2 spinningpoint9 = spinningpoint8.RotatedBy(radians10, vector);
                        double radians11 = (double) ((float) base.direction * 0.2f);
                        vector = default(Vector2);
                        Vector2 vector44 = spinningpoint9.RotatedBy(radians11, vector);
                        int num669 = Dust.NewDust(base.Center + vector44 * 10f - new Vector2(4f), 0, 0, 5, vector44.X,
                            vector44.Y, 0, Color.Transparent, 1f);
                        Main.dust[num669].scale = 1f;
                        Main.dust[num669].velocity = vector44.RotatedByRandom(0.78539818525314331) * 3.5f;
                        Main.dust[num669].noGravity = true;
                        Main.dust[num669].shader =
                            GameShaders.Armor.GetSecondaryShader(Main.player[owner].cLight, Main.player[owner]);
                    }

                    if (type == 653)
                    {
                        rotation += base.velocity.X / 20f;
                        if (base.velocity.Y == 0f)
                        {
                            rotation = rotation.AngleTowards(0f, 0.7f);
                        }

                        if (owner >= 0 && owner < 255)
                        {
                            _CompanionCubeScreamCooldown[owner] -= 1f;
                            if (_CompanionCubeScreamCooldown[owner] < 0f)
                            {
                                _CompanionCubeScreamCooldown[owner] = 0f;
                            }
                        }

                        Tile tileSafely = Framing.GetTileSafely(base.Center);
                        if (tileSafely.liquid > 0 && tileSafely.lava())
                        {
                            localAI[0] += 1f;
                        }
                        else
                        {
                            localAI[0] -= 1f;
                        }

                        localAI[0] = MathHelper.Clamp(localAI[0], 0f, 20f);
                        if (localAI[0] >= 20f)
                        {
                            if (_CompanionCubeScreamCooldown[owner] == 0f)
                            {
                                _CompanionCubeScreamCooldown[owner] = 3600f;
                                Main.PlaySound((Main.rand.Next(10) == 0) ? SoundID.NPCDeath61 : SoundID.NPCDeath59,
                                    base.position);
                            }

                            Kill();
                        }

                        newColor = Lighting.GetColor((int) base.Center.X / 16, (int) base.Center.Y / 16);
                        Vector3 vector45 = newColor.ToVector3();
                        newColor = Lighting.GetColor((int) player2.Center.X / 16, (int) player2.Center.Y / 16);
                        Vector3 vector46 = newColor.ToVector3();
                        if (vector45.Length() < 0.15f && vector46.Length() < 0.15f)
                        {
                            localAI[1] += 1f;
                        }
                        else if (localAI[1] > 0f)
                        {
                            localAI[1] -= 1f;
                        }

                        localAI[1] = MathHelper.Clamp(localAI[1], -3600f, 120f);
                        if (localAI[1] > (float) Main.rand.Next(30, 120) && !player2.immune &&
                            player2.velocity == Vector2.Zero)
                        {
                            if (Main.rand.Next(5) == 0)
                            {
                                Main.PlaySound(SoundID.Item16, base.Center);
                                localAI[1] = -600f;
                            }
                            else
                            {
                                Main.PlaySound(SoundID.Item1, base.Center);
                                player2.Hurt(PlayerDeathReason.ByOther(6), 3, 0, false, false, false, -1);
                                player2.immune = false;
                                player2.immuneTime = 0;
                                localAI[1] = (float) (-300 + Main.rand.Next(30) * -10);
                            }
                        }
                    }

                    bool flag27 = true;
                    if (type == 500 || type == 653)
                    {
                        flag27 = false;
                    }

                    int num670 = -1;
                    float num671 = 450f;
                    if (flag26)
                    {
                        num671 = 800f;
                    }

                    int num672 = 15;
                    if (this.ai[0] == 0f && flag27)
                    {
                        NPC ownerMinionAttackTargetNPC4 = OwnerMinionAttackTargetNPC;
                        if (ownerMinionAttackTargetNPC4 != null &&
                            ownerMinionAttackTargetNPC4.CanBeChasedBy(this, false))
                        {
                            vector = ownerMinionAttackTargetNPC4.Center - base.Center;
                            float num673 = vector.Length();
                            if (num673 < num671)
                            {
                                num670 = ownerMinionAttackTargetNPC4.whoAmI;
                                num671 = num673;
                            }
                        }

                        if (num670 < 0)
                        {
                            for (int num674 = 0; num674 < 200; num674++)
                            {
                                NPC nPC3 = Main.npc[num674];
                                if (nPC3.CanBeChasedBy(this, false))
                                {
                                    vector = nPC3.Center - base.Center;
                                    float num675 = vector.Length();
                                    if (num675 < num671)
                                    {
                                        num670 = num674;
                                        num671 = num675;
                                    }
                                }
                            }
                        }
                    }

                    if (this.ai[0] == 1f)
                    {
                        tileCollide = false;
                        float num676 = 0.2f;
                        float num677 = 10f;
                        int num678 = 200;
                        if (num677 < Math.Abs(player2.velocity.X) + Math.Abs(player2.velocity.Y))
                        {
                            num677 = Math.Abs(player2.velocity.X) + Math.Abs(player2.velocity.Y);
                        }

                        Vector2 value22 = player2.Center - base.Center;
                        float num679 = value22.Length();
                        if (num679 > 2000f)
                        {
                            base.position = player2.Center - new Vector2((float) base.width, (float) base.height) / 2f;
                        }

                        if (num679 < (float) num678 && player2.velocity.Y == 0f &&
                            base.position.Y + (float) base.height <= player2.position.Y + (float) player2.height &&
                            !Collision.SolidCollision(base.position, base.width, base.height))
                        {
                            this.ai[0] = 0f;
                            netUpdate = true;
                            if (base.velocity.Y < -6f)
                            {
                                base.velocity.Y = -6f;
                            }
                        }

                        if (!(num679 < 60f))
                        {
                            value22.Normalize();
                            value22 *= num677;
                            if (base.velocity.X < value22.X)
                            {
                                base.velocity.X += num676;
                                if (base.velocity.X < 0f)
                                {
                                    base.velocity.X += num676 * 1.5f;
                                }
                            }

                            if (base.velocity.X > value22.X)
                            {
                                base.velocity.X -= num676;
                                if (base.velocity.X > 0f)
                                {
                                    base.velocity.X -= num676 * 1.5f;
                                }
                            }

                            if (base.velocity.Y < value22.Y)
                            {
                                base.velocity.Y += num676;
                                if (base.velocity.Y < 0f)
                                {
                                    base.velocity.Y += num676 * 1.5f;
                                }
                            }

                            if (base.velocity.Y > value22.Y)
                            {
                                base.velocity.Y -= num676;
                                if (base.velocity.Y > 0f)
                                {
                                    base.velocity.Y -= num676 * 1.5f;
                                }
                            }
                        }

                        if (base.velocity.X != 0f)
                        {
                            spriteDirection = Math.Sign(base.velocity.X);
                        }

                        if (flag26)
                        {
                            frameCounter++;
                            if (frameCounter > 3)
                            {
                                frame++;
                                frameCounter = 0;
                            }

                            if ((frame < 10) | (frame > 13))
                            {
                                frame = 10;
                            }

                            rotation = base.velocity.X * 0.1f;
                        }
                    }

                    if (this.ai[0] == 2f)
                    {
                        friendly = true;
                        spriteDirection = base.direction;
                        rotation = 0f;
                        frame = 4 + (int) ((float) num672 - this.ai[1]) / (num672 / 3);
                        if (base.velocity.Y != 0f)
                        {
                            frame += 3;
                        }

                        base.velocity.Y += 0.4f;
                        if (base.velocity.Y > 10f)
                        {
                            base.velocity.Y = 10f;
                        }

                        this.ai[1] -= 1f;
                        if (this.ai[1] <= 0f)
                        {
                            this.ai[1] = 0f;
                            this.ai[0] = 0f;
                            friendly = false;
                            netUpdate = true;
                            return;
                        }
                    }

                    if (num670 >= 0)
                    {
                        float num680 = 400f;
                        float num681 = 20f;
                        if (flag26)
                        {
                            num680 = 700f;
                        }

                        if ((double) base.position.Y > Main.worldSurface * 16.0)
                        {
                            num680 *= 0.7f;
                        }

                        NPC nPC4 = Main.npc[num670];
                        Vector2 center8 = nPC4.Center;
                        vector = center8 - base.Center;
                        float num682 = vector.Length();
                        Collision.CanHit(base.position, base.width, base.height, nPC4.position, nPC4.width,
                            nPC4.height);
                        if (num682 < num680)
                        {
                            vector43 = center8;
                            if (center8.Y < base.Center.Y - 30f && base.velocity.Y == 0f)
                            {
                                float num683 = Math.Abs(center8.Y - base.Center.Y);
                                if (num683 < 120f)
                                {
                                    base.velocity.Y = -10f;
                                }
                                else if (num683 < 210f)
                                {
                                    base.velocity.Y = -13f;
                                }
                                else if (num683 < 270f)
                                {
                                    base.velocity.Y = -15f;
                                }
                                else if (num683 < 310f)
                                {
                                    base.velocity.Y = -17f;
                                }
                                else if (num683 < 380f)
                                {
                                    base.velocity.Y = -18f;
                                }
                            }
                        }

                        if (num682 < num681)
                        {
                            this.ai[0] = 2f;
                            this.ai[1] = (float) num672;
                            netUpdate = true;
                        }
                    }

                    if (this.ai[0] == 0f && num670 < 0)
                    {
                        float num684 = 500f;
                        if (type == 500)
                        {
                            num684 = 200f;
                        }

                        if (type == 653)
                        {
                            num684 = 170f;
                        }

                        if (Main.player[owner].rocketDelay2 > 0)
                        {
                            this.ai[0] = 1f;
                            netUpdate = true;
                        }

                        Vector2 vector47 = player2.Center - base.Center;
                        if (vector47.Length() > 2000f)
                        {
                            base.position = player2.Center - new Vector2((float) base.width, (float) base.height) / 2f;
                        }
                        else if (vector47.Length() > num684 || Math.Abs(vector47.Y) > 300f)
                        {
                            this.ai[0] = 1f;
                            netUpdate = true;
                            if (base.velocity.Y > 0f && vector47.Y < 0f)
                            {
                                base.velocity.Y = 0f;
                            }

                            if (base.velocity.Y < 0f && vector47.Y > 0f)
                            {
                                base.velocity.Y = 0f;
                            }
                        }
                    }

                    if (this.ai[0] == 0f)
                    {
                        tileCollide = true;
                        float num685 = 0.5f;
                        float num686 = 4f;
                        float num687 = 4f;
                        float num688 = 0.1f;
                        if (num687 < Math.Abs(player2.velocity.X) + Math.Abs(player2.velocity.Y))
                        {
                            num687 = Math.Abs(player2.velocity.X) + Math.Abs(player2.velocity.Y);
                            num685 = 0.7f;
                        }

                        int num689 = 0;
                        bool flag28 = false;
                        float num690 = vector43.X - base.Center.X;
                        if (Math.Abs(num690) > 5f)
                        {
                            if (num690 < 0f)
                            {
                                num689 = -1;
                                if (base.velocity.X > 0f - num686)
                                {
                                    base.velocity.X -= num685;
                                }
                                else
                                {
                                    base.velocity.X -= num688;
                                }
                            }
                            else
                            {
                                num689 = 1;
                                if (base.velocity.X < num686)
                                {
                                    base.velocity.X += num685;
                                }
                                else
                                {
                                    base.velocity.X += num688;
                                }
                            }

                            if (!flag26)
                            {
                                flag28 = true;
                            }
                        }
                        else
                        {
                            base.velocity.X *= 0.9f;
                            if (Math.Abs(base.velocity.X) < num685 * 2f)
                            {
                                base.velocity.X = 0f;
                            }
                        }

                        if (num689 != 0)
                        {
                            int num691 = (int) (base.position.X + (float) (base.width / 2)) / 16;
                            int num692 = (int) base.position.Y / 16;
                            num691 += num689;
                            num691 += (int) base.velocity.X;
                            for (int num693 = num692; num693 < num692 + base.height / 16 + 1; num693++)
                            {
                                if (WorldGen.SolidTile(num691, num693))
                                {
                                    flag28 = true;
                                }
                            }
                        }

                        if (type == 500 && base.velocity.X != 0f)
                        {
                            flag28 = true;
                        }

                        if (type == 653 && base.velocity.X != 0f)
                        {
                            flag28 = true;
                        }

                        Collision.StepUp(ref base.position, ref base.velocity, base.width, base.height, ref stepSpeed,
                            ref gfxOffY, 1, false, 0);
                        if (base.velocity.Y == 0f && flag28)
                        {
                            for (int num694 = 0; num694 < 3; num694++)
                            {
                                int num695 = (int) (base.position.X + (float) (base.width / 2)) / 16;
                                if (num694 == 0)
                                {
                                    num695 = (int) base.position.X / 16;
                                }

                                if (num694 == 2)
                                {
                                    num695 = (int) (base.position.X + (float) base.width) / 16;
                                }

                                int num696 = (int) (base.position.Y + (float) base.height) / 16;
                                if (WorldGen.SolidTile(num695, num696) || Main.tile[num695, num696].halfBrick() ||
                                    Main.tile[num695, num696].slope() > 0 ||
                                    (TileID.Sets.Platforms[Main.tile[num695, num696].type] &&
                                     Main.tile[num695, num696].active() && !Main.tile[num695, num696].inActive()))
                                {
                                    try
                                    {
                                        num695 = (int) (base.position.X + (float) (base.width / 2)) / 16;
                                        num696 = (int) (base.position.Y + (float) (base.height / 2)) / 16;
                                        num695 += num689;
                                        num695 += (int) base.velocity.X;
                                        if (!WorldGen.SolidTile(num695, num696 - 1) &&
                                            !WorldGen.SolidTile(num695, num696 - 2))
                                        {
                                            base.velocity.Y = -5.1f;
                                        }
                                        else if (!WorldGen.SolidTile(num695, num696 - 2))
                                        {
                                            base.velocity.Y = -7.1f;
                                        }
                                        else if (WorldGen.SolidTile(num695, num696 - 5))
                                        {
                                            base.velocity.Y = -11.1f;
                                        }
                                        else if (WorldGen.SolidTile(num695, num696 - 4))
                                        {
                                            base.velocity.Y = -10.1f;
                                        }
                                        else
                                        {
                                            base.velocity.Y = -9.1f;
                                        }
                                    }
                                    catch
                                    {
                                        base.velocity.Y = -9.1f;
                                    }
                                }
                            }
                        }

                        if (base.velocity.X > num687)
                        {
                            base.velocity.X = num687;
                        }

                        if (base.velocity.X < 0f - num687)
                        {
                            base.velocity.X = 0f - num687;
                        }

                        if (base.velocity.X < 0f)
                        {
                            base.direction = -1;
                        }

                        if (base.velocity.X > 0f)
                        {
                            base.direction = 1;
                        }

                        if (base.velocity.X > num685 && num689 == 1)
                        {
                            base.direction = 1;
                        }

                        if (base.velocity.X < 0f - num685 && num689 == -1)
                        {
                            base.direction = -1;
                        }

                        spriteDirection = base.direction;
                        if (flag26)
                        {
                            rotation = 0f;
                            if (base.velocity.Y == 0f)
                            {
                                if (base.velocity.X == 0f)
                                {
                                    frame = 0;
                                    frameCounter = 0;
                                }
                                else if (Math.Abs(base.velocity.X) >= 0.5f)
                                {
                                    frameCounter += (int) Math.Abs(base.velocity.X);
                                    frameCounter++;
                                    if (frameCounter > 10)
                                    {
                                        frame++;
                                        frameCounter = 0;
                                    }

                                    if (frame >= 4)
                                    {
                                        frame = 0;
                                    }
                                }
                                else
                                {
                                    frame = 0;
                                    frameCounter = 0;
                                }
                            }
                            else if (base.velocity.Y != 0f)
                            {
                                frameCounter = 0;
                                frame = 14;
                            }
                        }

                        base.velocity.Y += 0.4f;
                        if (base.velocity.Y > 10f)
                        {
                            base.velocity.Y = 10f;
                        }
                    }

                    if (flag26)
                    {
                        localAI[0] += 1f;
                        if (base.velocity.X == 0f)
                        {
                            localAI[0] += 1f;
                        }

                        if (localAI[0] >= (float) Main.rand.Next(900, 1200))
                        {
                            localAI[0] = 0f;
                            for (int num697 = 0; num697 < 6; num697++)
                            {
                                Vector2 position154 = base.Center + Vector2.UnitX * (float) (-base.direction) * 8f -
                                                      Vector2.One * 5f + Vector2.UnitY * 8f;
                                float speedX28 = (float) (-base.direction);
                                newColor = default(Color);
                                int num698 = Dust.NewDust(position154, 3, 6, 216, speedX28, 1f, 0, newColor, 1f);
                                Main.dust[num698].velocity /= 2f;
                                Main.dust[num698].scale = 0.8f;
                            }

                            int num699 = Gore.NewGore(base.Center + Vector2.UnitX * (float) (-base.direction) * 8f,
                                Vector2.Zero, Main.rand.Next(580, 583), 1f);
                            Main.gore[num699].velocity /= 2f;
                            Main.gore[num699].velocity.Y = Math.Abs(Main.gore[num699].velocity.Y);
                            Main.gore[num699].velocity.X =
                                (0f - Math.Abs(Main.gore[num699].velocity.X)) * (float) base.direction;
                        }
                    }
                }
            }
            else if (aiStyle == 68)
            {
                rotation += 0.25f * (float) base.direction;
                bool flag29 = type == 399;
                bool flag30 = type == 669;
                this.ai[0] += 1f;
                if (this.ai[0] >= 3f)
                {
                    alpha -= 40;
                    if (alpha < 0)
                    {
                        alpha = 0;
                    }
                }

                if (this.ai[0] >= 15f)
                {
                    base.velocity.Y += 0.2f;
                    if (base.velocity.Y > 16f)
                    {
                        base.velocity.Y = 16f;
                    }

                    base.velocity.X *= 0.99f;
                }

                if (alpha == 0)
                {
                    if (flag29)
                    {
                        Vector2 vector48 = new Vector2(4f, -8f);
                        float num700 = rotation;
                        if (base.direction == -1)
                        {
                            vector48.X = -4f;
                        }

                        Vector2 spinningpoint10 = vector48;
                        double radians12 = (double) num700;
                        vector = default(Vector2);
                        vector48 = spinningpoint10.RotatedBy(radians12, vector);
                        for (int num701 = 0; num701 < 1; num701++)
                        {
                            Vector2 position155 = base.Center + vector48 - Vector2.One * 5f;
                            newColor = default(Color);
                            int num702 = Dust.NewDust(position155, 4, 4, 6, 0f, 0f, 0, newColor, 1f);
                            Main.dust[num702].scale = 1.5f;
                            Main.dust[num702].noGravity = true;
                            Main.dust[num702].velocity =
                                Main.dust[num702].velocity * 0.25f + Vector2.Normalize(vector48) * 1f;
                            Dust obj6 = Main.dust[num702];
                            Vector2 velocity2 = Main.dust[num702].velocity;
                            double radians13 = (double) (-1.57079637f * (float) base.direction);
                            vector = default(Vector2);
                            obj6.velocity = velocity2.RotatedBy(radians13, vector);
                        }
                    }

                    if (flag30)
                    {
                        for (int num703 = 0; num703 < 2; num703++)
                        {
                            Vector2 vector49 = new Vector2(MathHelper.Lerp(-8f, 8f, Main.rand.NextFloat()), -4f);
                            float num704 = rotation;
                            Vector2 spinningpoint11 = vector49;
                            double radians14 = (double) num704;
                            vector = default(Vector2);
                            vector49 = spinningpoint11.RotatedBy(radians14, vector);
                            Vector2 position156 = base.Center + vector49 - Vector2.One * 5f;
                            newColor = default(Color);
                            int num705 = Dust.NewDust(position156, 4, 4, 4, 0f, 0f, 0, newColor, 1f);
                            Main.dust[num705].scale = 0.8f - Main.rand.NextFloat() * 0.2f;
                            Main.dust[num705].velocity =
                                Main.dust[num705].velocity * 0.25f + Vector2.Normalize(vector49) * 1f;
                            Dust obj7 = Main.dust[num705];
                            Vector2 velocity3 = Main.dust[num705].velocity;
                            double radians15 = (double) (-1.57079637f * (float) base.direction);
                            vector = default(Vector2);
                            obj7.velocity = velocity3.RotatedBy(radians15, vector);
                            Main.dust[num705].color = Utils.SelectRandom<Color>(Main.rand,
                                new Color(255, 255, 255, 110), new Color(245, 200, 30, 110));
                        }
                    }
                }

                spriteDirection = base.direction;
                if (owner == Main.myPlayer && timeLeft <= 3)
                {
                    tileCollide = false;
                    alpha = 255;
                    base.position.X += (float) (base.width / 2);
                    base.position.Y += (float) (base.height / 2);
                    base.width = 80;
                    base.height = 80;
                    base.position.X -= (float) (base.width / 2);
                    base.position.Y -= (float) (base.height / 2);
                    knockBack = 8f;
                }

                if (wet && timeLeft > 3)
                {
                    timeLeft = 3;
                }
            }
            else if (aiStyle == 69)
            {
                Vector2 vector50 = Main.player[owner].Center - base.Center;
                rotation = vector50.ToRotation() - 1.57f;
                if (Main.player[owner].dead)
                {
                    Kill();
                }
                else
                {
                    Main.player[owner].itemAnimation = 10;
                    Main.player[owner].itemTime = 10;
                    float x42 = vector50.X;
                    if (vector50.X < 0f)
                    {
                        Main.player[owner].ChangeDir(1);
                        base.direction = 1;
                    }
                    else
                    {
                        Main.player[owner].ChangeDir(-1);
                        base.direction = -1;
                    }

                    Main.player[owner].itemRotation = (vector50 * -1f * (float) base.direction).ToRotation();
                    spriteDirection = ((!(vector50.X > 0f)) ? 1 : (-1));
                    if (this.ai[0] == 0f && vector50.Length() > 400f)
                    {
                        this.ai[0] = 1f;
                    }

                    if (this.ai[0] == 1f || this.ai[0] == 2f)
                    {
                        float num706 = vector50.Length();
                        if (num706 > 1500f)
                        {
                            Kill();
                            return;
                        }

                        if (num706 > 600f)
                        {
                            this.ai[0] = 2f;
                        }

                        tileCollide = false;
                        float num707 = 20f;
                        if (this.ai[0] == 2f)
                        {
                            num707 = 40f;
                        }

                        base.velocity = Vector2.Normalize(vector50) * num707;
                        if (vector50.Length() < num707)
                        {
                            Kill();
                            return;
                        }
                    }

                    this.ai[1] += 1f;
                    if (this.ai[1] > 5f)
                    {
                        alpha = 0;
                    }

                    if ((int) this.ai[1] % 4 == 0 && owner == Main.myPlayer)
                    {
                        Vector2 vector51 = vector50 * -1f;
                        vector51.Normalize();
                        vector51 *= (float) Main.rand.Next(45, 65) * 0.1f;
                        Vector2 spinningpoint12 = vector51;
                        double radians16 = (Main.rand.NextDouble() - 0.5) * 1.5707963705062866;
                        vector = default(Vector2);
                        vector51 = spinningpoint12.RotatedBy(radians16, vector);
                        NewProjectile(base.Center.X, base.Center.Y, vector51.X, vector51.Y, 405, damage, knockBack,
                            owner, -10f, 0f);
                    }
                }
            }
            else if (aiStyle == 70)
            {
                if (this.ai[0] == 0f)
                {
                    float num708 = 500f;
                    int num709 = -1;
                    for (int num710 = 0; num710 < 200; num710++)
                    {
                        NPC nPC5 = Main.npc[num710];
                        if (nPC5.CanBeChasedBy(this, false) && Collision.CanHit(base.position, base.width, base.height,
                                nPC5.position, nPC5.width, nPC5.height))
                        {
                            vector = nPC5.Center - base.Center;
                            float num711 = vector.Length();
                            if (num711 < num708)
                            {
                                num709 = num710;
                                num708 = num711;
                            }
                        }
                    }

                    this.ai[0] = (float) (num709 + 1);
                    if (this.ai[0] == 0f)
                    {
                        this.ai[0] = -15f;
                    }

                    if (this.ai[0] > 0f)
                    {
                        float scaleFactor5 = (float) Main.rand.Next(35, 75) / 30f;
                        base.velocity = (base.velocity * 20f +
                                         Vector2.Normalize(Main.npc[(int) this.ai[0] - 1].Center - base.Center +
                                                           new Vector2((float) Main.rand.Next(-100, 101),
                                                               (float) Main.rand.Next(-100, 101))) * scaleFactor5) /
                                        21f;
                        netUpdate = true;
                    }
                }
                else if (this.ai[0] > 0f)
                {
                    Vector2 value23 = Vector2.Normalize(Main.npc[(int) this.ai[0] - 1].Center - base.Center);
                    base.velocity = (base.velocity * 40f + value23 * 12f) / 41f;
                }
                else
                {
                    this.ai[0] += 1f;
                    alpha -= 25;
                    if (alpha < 50)
                    {
                        alpha = 50;
                    }

                    base.velocity *= 0.95f;
                }

                if (this.ai[1] == 0f)
                {
                    this.ai[1] = (float) Main.rand.Next(80, 121) / 100f;
                    netUpdate = true;
                }

                scale = this.ai[1];
            }
            else if (aiStyle == 71)
            {
                localAI[1] += 1f;
                if (localAI[1] > 10f && Main.rand.Next(3) == 0)
                {
                    int num712 = 6;
                    for (int num713 = 0; num713 < num712; num713++)
                    {
                        Vector2 vector52 = Vector2.Normalize(base.velocity) *
                                           new Vector2((float) base.width, (float) base.height) / 2f;
                        Vector2 spinningpoint13 = vector52;
                        double radians17 = (double) (num713 - (num712 / 2 - 1)) * 3.1415926535897931 /
                                           (double) (float) num712;
                        vector = default(Vector2);
                        vector52 = spinningpoint13.RotatedBy(radians17, vector) + base.Center;
                        Vector2 value24 =
                            ((float) (Main.rand.NextDouble() * 3.1415927410125732) - 1.57079637f).ToRotationVector2() *
                            (float) Main.rand.Next(3, 8);
                        Vector2 position157 = vector52 + value24;
                        float speedX29 = value24.X * 2f;
                        float speedY32 = value24.Y * 2f;
                        newColor = default(Color);
                        int num714 = Dust.NewDust(position157, 0, 0, 217, speedX29, speedY32, 100, newColor, 1.4f);
                        Main.dust[num714].noGravity = true;
                        Main.dust[num714].noLight = true;
                        Main.dust[num714].velocity /= 4f;
                        Main.dust[num714].velocity -= base.velocity;
                    }

                    alpha -= 5;
                    if (alpha < 50)
                    {
                        alpha = 50;
                    }

                    rotation += base.velocity.X * 0.1f;
                    frame = (int) (localAI[1] / 3f) % 3;
                    Lighting.AddLight((int) base.Center.X / 16, (int) base.Center.Y / 16, 0.1f, 0.4f, 0.6f);
                }

                int num715 = -1;
                Vector2 vector53 = base.Center;
                float num716 = 500f;
                if (localAI[0] > 0f)
                {
                    localAI[0] -= 1f;
                }

                if (this.ai[0] == 0f && localAI[0] == 0f)
                {
                    for (int num717 = 0; num717 < 200; num717++)
                    {
                        NPC nPC6 = Main.npc[num717];
                        if (nPC6.CanBeChasedBy(this, false) && (this.ai[0] == 0f || this.ai[0] == (float) (num717 + 1)))
                        {
                            Vector2 center9 = nPC6.Center;
                            float num718 = Vector2.Distance(center9, vector53);
                            if (num718 < num716 && Collision.CanHit(base.position, base.width, base.height,
                                    nPC6.position, nPC6.width, nPC6.height))
                            {
                                num716 = num718;
                                vector53 = center9;
                                num715 = num717;
                            }
                        }
                    }

                    if (num715 >= 0)
                    {
                        this.ai[0] = (float) (num715 + 1);
                        netUpdate = true;
                    }

                    num715 = -1;
                }

                if (localAI[0] == 0f && this.ai[0] == 0f)
                {
                    localAI[0] = 30f;
                }

                bool flag31 = false;
                if (this.ai[0] != 0f)
                {
                    int num719 = (int) (this.ai[0] - 1f);
                    if (Main.npc[num719].active && !Main.npc[num719].dontTakeDamage &&
                        Main.npc[num719].immune[owner] == 0)
                    {
                        float num720 = Main.npc[num719].position.X + (float) (Main.npc[num719].width / 2);
                        float num721 = Main.npc[num719].position.Y + (float) (Main.npc[num719].height / 2);
                        float num722 = Math.Abs(base.position.X + (float) (base.width / 2) - num720) +
                                       Math.Abs(base.position.Y + (float) (base.height / 2) - num721);
                        if (num722 < 1000f)
                        {
                            flag31 = true;
                            vector53 = Main.npc[num719].Center;
                        }
                    }
                    else
                    {
                        this.ai[0] = 0f;
                        flag31 = false;
                        netUpdate = true;
                    }
                }

                if (flag31)
                {
                    Vector2 v = vector53 - base.Center;
                    float num723 = base.velocity.ToRotation();
                    float num724 = v.ToRotation();
                    double num725 = (double) (num724 - num723);
                    if (num725 > 3.1415926535897931)
                    {
                        num725 -= 6.2831853071795862;
                    }

                    if (num725 < -3.1415926535897931)
                    {
                        num725 += 6.2831853071795862;
                    }

                    Vector2 velocity4 = base.velocity;
                    double radians18 = num725 * 0.10000000149011612;
                    vector = default(Vector2);
                    base.velocity = velocity4.RotatedBy(radians18, vector);
                }

                float num726 = base.velocity.Length();
                base.velocity.Normalize();
                base.velocity *= num726 + 0.0025f;
            }
            else if (aiStyle == 72)
            {
                localAI[0] += 1f;
                if (localAI[0] > 5f)
                {
                    alpha -= 25;
                    if (alpha < 50)
                    {
                        alpha = 50;
                    }
                }

                base.velocity *= 0.96f;
                if (this.ai[1] == 0f)
                {
                    this.ai[1] = (float) Main.rand.Next(60, 121) / 100f;
                    netUpdate = true;
                }

                scale = this.ai[1];
                base.position = base.Center;
                int num727 = 14;
                int num728 = 14;
                base.width = (int) ((float) num727 * this.ai[1]);
                base.height = (int) ((float) num728 * this.ai[1]);
                base.position -= new Vector2((float) (base.width / 2), (float) (base.height / 2));
            }
            else if (aiStyle == 73)
            {
                int num729 = (int) this.ai[0];
                int num730 = (int) this.ai[1];
                Tile tile5 = Main.tile[num729, num730];
                if (tile5 == null || !tile5.active() || tile5.type != 338)
                {
                    Kill();
                }
                else
                {
                    float num731 = 2f;
                    float num732 = (float) timeLeft / 60f;
                    if (num732 < 1f)
                    {
                        num731 *= num732;
                    }

                    if (type == 419)
                    {
                        for (int num733 = 0; num733 < 2; num733++)
                        {
                            Vector2 value25 = new Vector2(0f, 0f - num731);
                            value25 *= 0.85f + (float) Main.rand.NextDouble() * 0.2f;
                            Vector2 spinningpoint14 = value25;
                            double radians19 = (Main.rand.NextDouble() - 0.5) * 1.5707963705062866;
                            vector = default(Vector2);
                            value25 = spinningpoint14.RotatedBy(radians19, vector);
                            Vector2 position158 = base.position;
                            int width126 = base.width;
                            int height126 = base.height;
                            newColor = default(Color);
                            int num734 = Dust.NewDust(position158, width126, height126, 222, 0f, 0f, 100, newColor, 1f);
                            Dust dust5 = Main.dust[num734];
                            dust5.scale = 1f + (float) Main.rand.NextDouble() * 0.3f;
                            dust5.velocity *= 0.5f;
                            if (dust5.velocity.Y > 0f)
                            {
                                dust5.velocity.Y *= -1f;
                            }

                            dust5.position -= new Vector2((float) (2 + Main.rand.Next(-2, 3)), 0f);
                            dust5.velocity += value25;
                            dust5.scale = 0.6f;
                            dust5.fadeIn = dust5.scale + 0.2f;
                            dust5.velocity.Y *= 2f;
                        }
                    }

                    if (type == 420)
                    {
                        for (int num735 = 0; num735 < 2; num735++)
                        {
                            Vector2 value26 = new Vector2(0f, 0f - num731);
                            value26 *= 0.85f + (float) Main.rand.NextDouble() * 0.2f;
                            Vector2 spinningpoint15 = value26;
                            double radians20 = (Main.rand.NextDouble() - 0.5) * 1.5707963705062866;
                            vector = default(Vector2);
                            value26 = spinningpoint15.RotatedBy(radians20, vector);
                            int num736 = 219;
                            if (Main.rand.Next(5) == 0)
                            {
                                num736 = 222;
                            }

                            Vector2 position159 = base.position;
                            int width127 = base.width;
                            int height127 = base.height;
                            int num737 = num736;
                            newColor = default(Color);
                            int num738 = Dust.NewDust(position159, width127, height127, num737, 0f, 0f, 100, newColor,
                                1f);
                            Dust dust6 = Main.dust[num738];
                            dust6.scale = 1f + (float) Main.rand.NextDouble() * 0.3f;
                            dust6.velocity *= 0.5f;
                            if (dust6.velocity.Y > 0f)
                            {
                                dust6.velocity.Y *= -1f;
                            }

                            dust6.position -= new Vector2((float) (2 + Main.rand.Next(-2, 3)), 0f);
                            dust6.velocity += value26;
                            dust6.velocity.X *= 0.5f;
                            dust6.scale = 0.6f;
                            dust6.fadeIn = dust6.scale + 0.2f;
                            dust6.velocity.Y *= 2f;
                        }
                    }

                    if (type == 421)
                    {
                        for (int num739 = 0; num739 < 2; num739++)
                        {
                            Vector2 value27 = new Vector2(0f, 0f - num731);
                            value27 *= 0.85f + (float) Main.rand.NextDouble() * 0.2f;
                            Vector2 spinningpoint16 = value27;
                            double radians21 = (Main.rand.NextDouble() - 0.5) * 0.78539818525314331;
                            vector = default(Vector2);
                            value27 = spinningpoint16.RotatedBy(radians21, vector);
                            Vector2 position160 = base.position;
                            int width128 = base.width;
                            int height128 = base.height;
                            newColor = default(Color);
                            int num740 = Dust.NewDust(position160, width128, height128, 221, 0f, 0f, 100, newColor, 1f);
                            Dust dust7 = Main.dust[num740];
                            dust7.scale = 1f + (float) Main.rand.NextDouble() * 0.3f;
                            dust7.velocity *= 0.1f;
                            if (dust7.velocity.Y > 0f)
                            {
                                dust7.velocity.Y *= -1f;
                            }

                            dust7.position -= new Vector2((float) (2 + Main.rand.Next(-2, 3)), 0f);
                            dust7.velocity += value27;
                            dust7.scale = 0.6f;
                            dust7.fadeIn = dust7.scale + 0.2f;
                            dust7.velocity.Y *= 2.5f;
                        }

                        if (timeLeft % 10 == 0)
                        {
                            float num741 = 0.85f + (float) Main.rand.NextDouble() * 0.2f;
                            for (int num742 = 0; num742 < 9; num742++)
                            {
                                Vector2 vector54 = new Vector2((float) (num742 - 4) / 5f, (0f - num731) * num741);
                                Vector2 position161 = base.position;
                                int width129 = base.width;
                                int height129 = base.height;
                                newColor = default(Color);
                                int num743 = Dust.NewDust(position161, width129, height129, 222, 0f, 0f, 100, newColor,
                                    1f);
                                Dust dust8 = Main.dust[num743];
                                dust8.scale = 0.7f + (float) Main.rand.NextDouble() * 0.3f;
                                dust8.velocity *= 0f;
                                if (dust8.velocity.Y > 0f)
                                {
                                    dust8.velocity.Y *= -1f;
                                }

                                dust8.position -= new Vector2((float) (2 + Main.rand.Next(-2, 3)), 0f);
                                dust8.velocity += vector54;
                                dust8.scale = 0.6f;
                                dust8.fadeIn = dust8.scale + 0.2f;
                                dust8.velocity.Y *= 2f;
                            }
                        }
                    }

                    if (type == 422)
                    {
                        for (int num744 = 0; num744 < 2; num744++)
                        {
                            Vector2 value28 = new Vector2(0f, 0f - num731);
                            value28 *= 0.85f + (float) Main.rand.NextDouble() * 0.2f;
                            Vector2 spinningpoint17 = value28;
                            double radians22 = (Main.rand.NextDouble() - 0.5) * 1.5707963705062866;
                            vector = default(Vector2);
                            value28 = spinningpoint17.RotatedBy(radians22, vector);
                            Vector2 position162 = base.position;
                            int width130 = base.width;
                            int height130 = base.height;
                            int num745 = 219 + Main.rand.Next(5);
                            newColor = default(Color);
                            int num746 = Dust.NewDust(position162, width130, height130, num745, 0f, 0f, 100, newColor,
                                1f);
                            Dust dust9 = Main.dust[num746];
                            dust9.scale = 1f + (float) Main.rand.NextDouble() * 0.3f;
                            dust9.velocity *= 0.5f;
                            if (dust9.velocity.Y > 0f)
                            {
                                dust9.velocity.Y *= -1f;
                            }

                            dust9.position -= new Vector2((float) (2 + Main.rand.Next(-2, 3)), 0f);
                            dust9.velocity += value28;
                            dust9.scale = 0.6f;
                            dust9.fadeIn = dust9.scale + 0.2f;
                            dust9.velocity.Y *= 2f;
                        }
                    }
                }
            }
            else if (aiStyle == 74)
            {
                if (extraUpdates == 1)
                {
                    localAI[0] *= localAI[1];
                    localAI[1] -= 0.001f;
                    if ((double) localAI[0] < 0.01)
                    {
                        Kill();
                    }
                }
            }
            else if (aiStyle == 75)
            {
                AI_075();
            }
            else if (aiStyle == 76)
            {
                Player player3 = Main.player[owner];
                player3.heldProj = whoAmI;
                if (type == 441)
                {
                    if (player3.mount.Type != 9)
                    {
                        Kill();
                        return;
                    }
                }
                else if (type == 453 && player3.mount.Type != 8)
                {
                    Kill();
                    return;
                }

                if (Main.myPlayer == owner)
                {
                    base.position.X = Main.screenPosition.X + (float) Main.mouseX;
                    base.position.Y = Main.screenPosition.Y + (float) Main.mouseY;
                    if (this.ai[0] != base.position.X - player3.position.X ||
                        this.ai[1] != base.position.Y - player3.position.Y)
                    {
                        netUpdate = true;
                    }

                    this.ai[0] = base.position.X - player3.position.X;
                    this.ai[1] = base.position.Y - player3.position.Y;
                    player3.mount.AimAbility(player3, base.position);
                    if (!player3.channel)
                    {
                        player3.mount.UseAbility(player3, base.position, false);
                        Kill();
                    }
                }
                else
                {
                    base.position.X = player3.position.X + this.ai[0];
                    base.position.Y = player3.position.Y + this.ai[1];
                    if (type == 441)
                    {
                        if (!player3.mount.AbilityCharging)
                        {
                            player3.mount.StartAbilityCharge(player3);
                        }
                    }
                    else if (type == 453 && !player3.mount.AbilityActive)
                    {
                        player3.mount.UseAbility(player3, base.position, false);
                    }

                    player3.mount.AimAbility(player3, base.position);
                }
            }
            else if (aiStyle == 77)
            {
                ActiveSound activeSound = Main.GetActiveSound(SlotId.FromFloat(localAI[0]));
                SlotId invalid;
                if (activeSound != null)
                {
                    if (activeSound.Volume == 0f)
                    {
                        activeSound.Stop();
                        float[] array3 = localAI;
                        invalid = SlotId.Invalid;
                        array3[0] = invalid.ToFloat();
                    }

                    activeSound.Volume = Math.Max(0f, activeSound.Volume - 0.05f);
                }
                else
                {
                    float[] array4 = localAI;
                    invalid = SlotId.Invalid;
                    array4[0] = invalid.ToFloat();
                }

                if (this.ai[1] == 1f)
                {
                    friendly = false;
                    if (alpha < 255)
                    {
                        alpha += 51;
                    }

                    if (alpha >= 255)
                    {
                        alpha = 255;
                        Kill();
                        return;
                    }
                }
                else
                {
                    if (alpha > 0)
                    {
                        alpha -= 50;
                    }

                    if (alpha < 0)
                    {
                        alpha = 0;
                    }
                }

                float num747 = 30f;
                float num748 = num747 * 4f;
                this.ai[0] += 1f;
                if (this.ai[0] > num748)
                {
                    this.ai[0] = 0f;
                }

                Vector2 unitY = Vector2.UnitY;
                double radians23 = (double) (6.28318548f * this.ai[0] / num747);
                vector = default(Vector2);
                Vector2 vector55 = -unitY.RotatedBy(radians23, vector);
                float val = 0.75f + vector55.Y * 0.25f;
                float val2 = 0.8f - vector55.Y * 0.2f;
                float num749 = Math.Max(val, val2);
                base.position += new Vector2((float) base.width, (float) base.height) / 2f;
                base.width = (base.height = (int) (80f * num749));
                base.position -= new Vector2((float) base.width, (float) base.height) / 2f;
                frameCounter++;
                if (frameCounter >= 3)
                {
                    frameCounter = 0;
                    frame++;
                    if (frame >= 4)
                    {
                        frame = 0;
                    }
                }

                for (int num750 = 0; num750 < 1; num750++)
                {
                    float num751 = 55f * num749;
                    float num752 = 11f * num749;
                    float num753 = 0.5f;
                    Vector2 position163 = base.position;
                    int width131 = base.width;
                    int height131 = base.height;
                    newColor = default(Color);
                    int num754 = Dust.NewDust(position163, width131, height131, 226, 0f, 0f, 100, newColor, 0.5f);
                    Main.dust[num754].noGravity = true;
                    Main.dust[num754].velocity *= 2f;
                    Main.dust[num754].position =
                        ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() *
                        (num752 + num753 * (float) Main.rand.NextDouble() * num751) + base.Center;
                    Main.dust[num754].velocity = Main.dust[num754].velocity / 2f +
                                                 Vector2.Normalize(Main.dust[num754].position - base.Center);
                    if (Main.rand.Next(2) == 0)
                    {
                        Vector2 position164 = base.position;
                        int width132 = base.width;
                        int height132 = base.height;
                        newColor = default(Color);
                        num754 = Dust.NewDust(position164, width132, height132, 226, 0f, 0f, 100, newColor, 0.9f);
                        Main.dust[num754].noGravity = true;
                        Main.dust[num754].velocity *= 1.2f;
                        Main.dust[num754].position =
                            ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() *
                            (num752 + num753 * (float) Main.rand.NextDouble() * num751) + base.Center;
                        Main.dust[num754].velocity = Main.dust[num754].velocity / 2f +
                                                     Vector2.Normalize(Main.dust[num754].position - base.Center);
                    }

                    if (Main.rand.Next(4) == 0)
                    {
                        Vector2 position165 = base.position;
                        int width133 = base.width;
                        int height133 = base.height;
                        newColor = default(Color);
                        num754 = Dust.NewDust(position165, width133, height133, 226, 0f, 0f, 100, newColor, 0.7f);
                        Main.dust[num754].noGravity = true;
                        Main.dust[num754].velocity *= 1.2f;
                        Main.dust[num754].position =
                            ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() *
                            (num752 + num753 * (float) Main.rand.NextDouble() * num751) + base.Center;
                        Main.dust[num754].velocity = Main.dust[num754].velocity / 2f +
                                                     Vector2.Normalize(Main.dust[num754].position - base.Center);
                    }
                }
            }
            else if (aiStyle == 78)
            {
                if (alpha > 0)
                {
                    alpha -= 30;
                }

                if (alpha < 0)
                {
                    alpha = 0;
                }

                Vector2 v2 = this.ai[0].ToRotationVector2();
                float num755 = base.velocity.ToRotation();
                float num756 = v2.ToRotation();
                double num757 = (double) (num756 - num755);
                if (num757 > 3.1415926535897931)
                {
                    num757 -= 6.2831853071795862;
                }

                if (num757 < -3.1415926535897931)
                {
                    num757 += 6.2831853071795862;
                }

                Vector2 velocity5 = base.velocity;
                double radians24 = num757 * 0.05000000074505806;
                vector = default(Vector2);
                base.velocity = velocity5.RotatedBy(radians24, vector);
                base.velocity *= 0.96f;
                rotation = base.velocity.ToRotation() - 1.57079637f;
                if (Main.myPlayer == owner && timeLeft > 60)
                {
                    timeLeft = 60;
                }
            }
            else if (aiStyle == 79)
            {
                bool flag32 = true;
                int num758 = (int) this.ai[0] - 1;
                if (type == 447 && (this.ai[0] == 0f ||
                                    ((!Main.npc[num758].active || Main.npc[num758].type != 392) &&
                                     (!Main.npc[num758].active || Main.npc[num758].type != 395 ||
                                      !(Main.npc[num758].ai[3] % 120f >= 60f) || Main.npc[num758].ai[0] != 2f))))
                {
                    flag32 = false;
                }

                if (!flag32)
                {
                    Kill();
                }
                else
                {
                    NPC nPC7 = Main.npc[num758];
                    float num759 = nPC7.Center.Y + 46f;
                    int num760 = (int) nPC7.Center.X / 16;
                    int num761 = (int) num759 / 16;
                    int num762 = 0;
                    if (!Main.tile[num760, num761].nactive() || !Main.tileSolid[Main.tile[num760, num761].type] ||
                        Main.tileSolidTop[Main.tile[num760, num761].type])
                    {
                        for (; num762 < 150; num762++)
                        {
                            if (num761 + num762 >= Main.maxTilesY)
                            {
                                break;
                            }

                            int num763 = num761 + num762;
                            if (Main.tile[num760, num763].nactive() && Main.tileSolid[Main.tile[num760, num763].type] &&
                                !Main.tileSolidTop[Main.tile[num760, num763].type])
                            {
                                num762--;
                                break;
                            }
                        }
                    }
                    else
                    {
                        num762 = 1;
                    }

                    base.position.X = nPC7.Center.X - (float) (base.width / 2);
                    base.position.Y = num759;
                    base.height = (num762 + 1) * 16;
                    int num764 = (int) base.position.Y + base.height;
                    if (Main.tile[num760, num764 / 16].nactive() &&
                        Main.tileSolid[Main.tile[num760, num764 / 16].type] &&
                        !Main.tileSolidTop[Main.tile[num760, num764 / 16].type])
                    {
                        int num765 = num764 % 16;
                        base.height -= num765 - 2;
                    }

                    if (type == 447)
                    {
                        for (int num766 = 0; num766 < 2; num766++)
                        {
                            Vector2 position166 = new Vector2(base.position.X,
                                base.position.Y + (float) base.height - 16f);
                            int width134 = base.width;
                            newColor = default(Color);
                            int num767 = Dust.NewDust(position166, width134, 16, 228, 0f, 0f, 0, newColor, 1f);
                            Main.dust[num767].noGravity = true;
                            Main.dust[num767].velocity *= 0.5f;
                            Main.dust[num767].velocity.X -= (float) num766 - nPC7.velocity.X * 2f / 3f;
                            Main.dust[num767].scale = 2.8f;
                        }

                        if (Main.rand.Next(5) == 0)
                        {
                            Vector2 position167 =
                                new Vector2(
                                    base.position.X + (float) (base.width / 2) -
                                    (float) (base.width / 2 * Math.Sign(nPC7.velocity.X)) - 4f,
                                    base.position.Y + (float) base.height - 16f);
                            newColor = default(Color);
                            int num768 = Dust.NewDust(position167, 4, 16, 31, 0f, 0f, 100, newColor, 1.5f);
                            Main.dust[num768].velocity *= 0.5f;
                            Main.dust[num768].velocity.X -= nPC7.velocity.X / 2f;
                            Main.dust[num768].velocity.Y = 0f - Math.Abs(Main.dust[num768].velocity.Y);
                        }
                    }

                    if (type == 447 && ++frameCounter >= 5)
                    {
                        frameCounter = 0;
                        if (++frame >= 4)
                        {
                            frame = 0;
                        }
                    }
                }
            }
            else if (aiStyle == 80)
            {
                if (this.ai[0] == 0f && this.ai[1] > 0f)
                {
                    this.ai[1] -= 1f;
                }
                else if (this.ai[0] == 0f && this.ai[1] == 0f)
                {
                    this.ai[0] = 1f;
                    this.ai[1] = (float) (int) Player.FindClosest(base.position, base.width, base.height);
                    netUpdate = true;
                    float num769 = base.velocity.Length();
                    base.velocity = Vector2.Normalize(base.velocity) * (num769 + 4f);
                    for (int num770 = 0; num770 < 8; num770++)
                    {
                        Vector2 vector56 = Vector2.UnitX * -8f;
                        Vector2 value29 = vector56;
                        Vector2 unitY2 = Vector2.UnitY;
                        double radians25 = (double) ((float) num770 * 3.14159274f / 4f);
                        vector = default(Vector2);
                        vector56 = value29 + -unitY2.RotatedBy(radians25, vector) * new Vector2(2f, 8f);
                        Vector2 spinningpoint18 = vector56;
                        double radians26 = (double) (rotation - 1.57079637f);
                        vector = default(Vector2);
                        vector56 = spinningpoint18.RotatedBy(radians26, vector);
                        Vector2 center10 = base.Center;
                        newColor = default(Color);
                        int num771 = Dust.NewDust(center10, 0, 0, 228, 0f, 0f, 0, newColor, 1f);
                        Main.dust[num771].scale = 1.5f;
                        Main.dust[num771].noGravity = true;
                        Main.dust[num771].position = base.Center + vector56;
                        Main.dust[num771].velocity = base.velocity * 0f;
                    }
                }
                else if (this.ai[0] == 1f)
                {
                    tileCollide = true;
                    localAI[1] += 1f;
                    float num772 = 180f;
                    float num773 = 0f;
                    float num774 = 30f;
                    if (localAI[1] == num772)
                    {
                        Kill();
                        return;
                    }

                    if (localAI[1] >= num773 && localAI[1] < num773 + num774)
                    {
                        Vector2 v3 = Main.player[(int) this.ai[1]].Center - base.Center;
                        float num775 = base.velocity.ToRotation();
                        float num776 = v3.ToRotation();
                        double num777 = (double) (num776 - num775);
                        if (num777 > 3.1415926535897931)
                        {
                            num777 -= 6.2831853071795862;
                        }

                        if (num777 < -3.1415926535897931)
                        {
                            num777 += 6.2831853071795862;
                        }

                        Vector2 velocity6 = base.velocity;
                        double radians27 = num777 * 0.20000000298023224;
                        vector = default(Vector2);
                        base.velocity = velocity6.RotatedBy(radians27, vector);
                    }

                    if (localAI[1] % 5f == 0f)
                    {
                        for (int num778 = 0; num778 < 4; num778++)
                        {
                            Vector2 vector57 = Vector2.UnitX * -8f;
                            Vector2 value30 = vector57;
                            Vector2 unitY3 = Vector2.UnitY;
                            double radians28 = (double) ((float) num778 * 3.14159274f / 4f);
                            vector = default(Vector2);
                            vector57 = value30 + -unitY3.RotatedBy(radians28, vector) * new Vector2(2f, 4f);
                            Vector2 spinningpoint19 = vector57;
                            double radians29 = (double) (rotation - 1.57079637f);
                            vector = default(Vector2);
                            vector57 = spinningpoint19.RotatedBy(radians29, vector);
                            Vector2 center11 = base.Center;
                            newColor = default(Color);
                            int num779 = Dust.NewDust(center11, 0, 0, 228, 0f, 0f, 0, newColor, 1f);
                            Main.dust[num779].scale = 1.5f;
                            Main.dust[num779].noGravity = true;
                            Main.dust[num779].position = base.Center + vector57;
                            Main.dust[num779].velocity = base.velocity * 0f;
                        }
                    }
                }

                rotation = base.velocity.ToRotation() + 1.57079637f;
                if (++frameCounter >= 3)
                {
                    frameCounter = 0;
                    if (++frame >= 3)
                    {
                        frame = 0;
                    }
                }

                for (int num780 = 0; (float) num780 < 1f + this.ai[0]; num780++)
                {
                    Vector2 unitY4 = Vector2.UnitY;
                    double radians30 = (double) rotation;
                    vector = default(Vector2);
                    Vector2 value31 = unitY4.RotatedBy(radians30, vector) * 8f * (float) (num780 + 1);
                    Vector2 center12 = base.Center;
                    newColor = default(Color);
                    int num781 = Dust.NewDust(center12, 0, 0, 228, 0f, 0f, 0, newColor, 1f);
                    Main.dust[num781].position = base.Center + value31;
                    Main.dust[num781].scale = 1f;
                    Main.dust[num781].noGravity = true;
                }

                int num782 = 0;
                while (true)
                {
                    if (num782 >= 255)
                    {
                        return;
                    }

                    Player player4 = Main.player[num782];
                    if (player4.active && !player4.dead && Vector2.Distance(player4.Center, base.Center) <= 42f)
                    {
                        break;
                    }

                    num782++;
                }

                Kill();
            }
            else if (aiStyle == 81)
            {
                int num783 = penetrate;
                if (this.ai[0] == 0f)
                {
                    tileCollide = true;
                    localAI[0] += 1f;
                    if (localAI[0] > 7f)
                    {
                        int num784 = Utils.SelectRandom<int>(Main.rand, 226, 229);
                        Vector2 center13 = base.Center;
                        Vector2 value32 = new Vector2(-16f, 16f);
                        float num785 = 1f;
                        value32 += new Vector2(-16f, 16f);
                        Vector2 spinningpoint20 = value32;
                        double radians31 = (double) rotation;
                        vector = default(Vector2);
                        value32 = spinningpoint20.RotatedBy(radians31, vector);
                        int num786 = 4;
                        Vector2 position168 = center13 + value32 + Vector2.One * (float) (-num786);
                        int width135 = num786 * 2;
                        int height134 = num786 * 2;
                        int num787 = num784;
                        newColor = default(Color);
                        int num788 = Dust.NewDust(position168, width135, height134, num787, 0f, 0f, 100, newColor,
                            num785);
                        Main.dust[num788].velocity *= 0.1f;
                        if (Main.rand.Next(6) != 0)
                        {
                            Main.dust[num788].noGravity = true;
                        }
                    }

                    float num789 = 0.01f;
                    int num790 = 5;
                    int num791 = num790 * 15;
                    int num792 = 0;
                    if (localAI[0] > 7f)
                    {
                        if (localAI[1] == 0f)
                        {
                            scale -= num789;
                            alpha += num790;
                            if (alpha > num791)
                            {
                                alpha = num791;
                                localAI[1] = 1f;
                            }
                        }
                        else if (localAI[1] == 1f)
                        {
                            scale += num789;
                            alpha -= num790;
                            if (alpha <= num792)
                            {
                                alpha = num792;
                                localAI[1] = 0f;
                            }
                        }
                    }

                    rotation = base.velocity.ToRotation() + 0.7853982f;
                }
                else if (this.ai[0] >= 1f && this.ai[0] < (float) (1 + num783))
                {
                    tileCollide = false;
                    alpha += 15;
                    base.velocity *= 0.98f;
                    localAI[0] = 0f;
                    if (alpha >= 255)
                    {
                        if (this.ai[0] == 1f)
                        {
                            Kill();
                            return;
                        }

                        int num793 = -1;
                        Vector2 value33 = base.Center;
                        float num794 = 250f;
                        for (int num795 = 0; num795 < 200; num795++)
                        {
                            NPC nPC8 = Main.npc[num795];
                            if (nPC8.CanBeChasedBy(this, false))
                            {
                                Vector2 center14 = nPC8.Center;
                                float num796 = Vector2.Distance(center14, base.Center);
                                if (num796 < num794)
                                {
                                    num794 = num796;
                                    value33 = center14;
                                    num793 = num795;
                                }
                            }
                        }

                        if (num793 >= 0)
                        {
                            netUpdate = true;
                            this.ai[0] += (float) num783;
                            base.position =
                                value33 + ((float) Main.rand.NextDouble() * 6.28318548f).ToRotationVector2() * 100f -
                                new Vector2((float) base.width, (float) base.height) / 2f;
                            base.velocity = Vector2.Normalize(value33 - base.Center) * 15f;
                            rotation = base.velocity.ToRotation() + 0.7853982f;
                        }
                        else
                        {
                            Kill();
                        }
                    }

                    if (Main.rand.Next(3) == 0)
                    {
                        int num797 = Utils.SelectRandom<int>(Main.rand, 226, 229);
                        Vector2 center15 = base.Center;
                        Vector2 vector58 = new Vector2(-16f, 16f);
                        vector58 = (vector58 = vector58);
                        float num798 = 0.6f;
                        vector58 += new Vector2(-16f, 16f);
                        Vector2 spinningpoint21 = vector58;
                        double radians32 = (double) rotation;
                        vector = default(Vector2);
                        vector58 = spinningpoint21.RotatedBy(radians32, vector);
                        int num799 = 4;
                        Vector2 position169 = center15 + vector58 + Vector2.One * (float) (-num799);
                        int width136 = num799 * 2;
                        int height135 = num799 * 2;
                        int num800 = num797;
                        newColor = default(Color);
                        int num801 = Dust.NewDust(position169, width136, height135, num800, 0f, 0f, 100, newColor,
                            num798);
                        Main.dust[num801].velocity *= 0.1f;
                        Main.dust[num801].noGravity = true;
                    }
                }
                else if (this.ai[0] >= (float) (1 + num783) && this.ai[0] < (float) (1 + num783 * 2))
                {
                    scale = 0.9f;
                    tileCollide = false;
                    rotation = base.velocity.ToRotation() + 0.7853982f;
                    this.ai[1] += 1f;
                    if (this.ai[1] >= 15f)
                    {
                        alpha += 51;
                        base.velocity *= 0.8f;
                        if (alpha >= 255)
                        {
                            Kill();
                        }
                    }
                    else
                    {
                        alpha -= 125;
                        if (alpha < 0)
                        {
                            alpha = 0;
                        }

                        base.velocity *= 0.98f;
                    }

                    localAI[0] += 1f;
                    int num802 = Utils.SelectRandom<int>(Main.rand, 226, 229);
                    Vector2 center16 = base.Center;
                    Vector2 value34 = new Vector2(-16f, 16f);
                    float num803 = 0.6f;
                    value34 += new Vector2(-16f, 16f);
                    Vector2 spinningpoint22 = value34;
                    double radians33 = (double) rotation;
                    vector = default(Vector2);
                    value34 = spinningpoint22.RotatedBy(radians33, vector);
                    int num804 = 4;
                    Vector2 position170 = center16 + value34 + Vector2.One * (float) (-num804);
                    int width137 = num804 * 2;
                    int height136 = num804 * 2;
                    int num805 = num802;
                    newColor = default(Color);
                    int num806 = Dust.NewDust(position170, width137, height136, num805, 0f, 0f, 100, newColor, num803);
                    Main.dust[num806].velocity *= 0.1f;
                    Main.dust[num806].noGravity = true;
                }

                float num807 = (float) alpha / 255f;
                Lighting.AddLight((int) base.Center.X / 16, (int) base.Center.Y / 16, 0.3f * num807, 0.4f * num807,
                    1f * num807);
            }
            else if (aiStyle == 82)
            {
                alpha -= 40;
                if (alpha < 0)
                {
                    alpha = 0;
                }

                if (this.ai[0] == 0f)
                {
                    localAI[0] += 1f;
                    if (localAI[0] >= 45f)
                    {
                        localAI[0] = 0f;
                        this.ai[0] = 1f;
                        this.ai[1] = 0f - this.ai[1];
                        netUpdate = true;
                    }

                    ref Vector2 velocity7 = ref base.velocity;
                    Vector2 velocity8 = base.velocity;
                    double radians34 = (double) this.ai[1];
                    vector = default(Vector2);
                    velocity7.X = velocity8.RotatedBy(radians34, vector).X;
                    base.velocity.X = MathHelper.Clamp(base.velocity.X, -6f, 6f);
                    base.velocity.Y -= 0.08f;
                    if (base.velocity.Y > 0f)
                    {
                        base.velocity.Y -= 0.2f;
                    }

                    if (base.velocity.Y < -7f)
                    {
                        base.velocity.Y = -7f;
                    }
                }
                else if (this.ai[0] == 1f)
                {
                    localAI[0] += 1f;
                    if (localAI[0] >= 90f)
                    {
                        localAI[0] = 0f;
                        this.ai[0] = 2f;
                        this.ai[1] = (float) (int) Player.FindClosest(base.position, base.width, base.height);
                        netUpdate = true;
                    }

                    ref Vector2 velocity9 = ref base.velocity;
                    Vector2 velocity10 = base.velocity;
                    double radians35 = (double) this.ai[1];
                    vector = default(Vector2);
                    velocity9.X = velocity10.RotatedBy(radians35, vector).X;
                    base.velocity.X = MathHelper.Clamp(base.velocity.X, -6f, 6f);
                    base.velocity.Y -= 0.08f;
                    if (base.velocity.Y > 0f)
                    {
                        base.velocity.Y -= 0.2f;
                    }

                    if (base.velocity.Y < -7f)
                    {
                        base.velocity.Y = -7f;
                    }
                }
                else if (this.ai[0] == 2f)
                {
                    Vector2 vector59 = Main.player[(int) this.ai[1]].Center - base.Center;
                    if (vector59.Length() < 30f)
                    {
                        Kill();
                        return;
                    }

                    vector59.Normalize();
                    vector59 *= 14f;
                    vector59 = Vector2.Lerp(base.velocity, vector59, 0.6f);
                    if (vector59.Y < 6f)
                    {
                        vector59.Y = 6f;
                    }

                    float num808 = 0.4f;
                    if (base.velocity.X < vector59.X)
                    {
                        base.velocity.X += num808;
                        if (base.velocity.X < 0f && vector59.X > 0f)
                        {
                            base.velocity.X += num808;
                        }
                    }
                    else if (base.velocity.X > vector59.X)
                    {
                        base.velocity.X -= num808;
                        if (base.velocity.X > 0f && vector59.X < 0f)
                        {
                            base.velocity.X -= num808;
                        }
                    }

                    if (base.velocity.Y < vector59.Y)
                    {
                        base.velocity.Y += num808;
                        if (base.velocity.Y < 0f && vector59.Y > 0f)
                        {
                            base.velocity.Y += num808;
                        }
                    }
                    else if (base.velocity.Y > vector59.Y)
                    {
                        base.velocity.Y -= num808;
                        if (base.velocity.Y > 0f && vector59.Y < 0f)
                        {
                            base.velocity.Y -= num808;
                        }
                    }
                }

                if (alpha < 40)
                {
                    int num809 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 229, (0f - base.velocity.X) / 3f,
                        (0f - base.velocity.Y) / 3f, 150, Color.Transparent, 1.2f);
                    Main.dust[num809].noGravity = true;
                }

                rotation = base.velocity.ToRotation() + 1.57079637f;
            }
            else if (aiStyle == 83)
            {
                if (alpha > 200)
                {
                    alpha = 200;
                }

                alpha -= 5;
                if (alpha < 0)
                {
                    alpha = 0;
                }

                float num810 = (float) alpha / 255f;
                scale = 1f - num810;
                if (this.ai[0] >= 0f)
                {
                    this.ai[0] += 1f;
                }

                if (this.ai[0] == -1f)
                {
                    frame = 1;
                    extraUpdates = 1;
                }
                else if (this.ai[0] < 30f)
                {
                    base.position = Main.npc[(int) this.ai[1]].Center -
                                    new Vector2((float) base.width, (float) base.height) / 2f - base.velocity;
                }
                else
                {
                    base.velocity *= 0.96f;
                    if (++frameCounter >= 6)
                    {
                        frameCounter = 0;
                        if (++frame >= 2)
                        {
                            frame = 0;
                        }
                    }
                }

                if (alpha < 40)
                {
                    for (int num811 = 0; num811 < 2; num811++)
                    {
                        float num812 = (float) Main.rand.NextDouble() * 1f - 0.5f;
                        if (num812 < -0.5f)
                        {
                            num812 = -0.5f;
                        }

                        if (num812 > 0.5f)
                        {
                            num812 = 0.5f;
                        }

                        Vector2 spinningpoint23 = new Vector2((float) (-base.width) * 0.65f * scale, 0f);
                        double radians36 = (double) (num812 * 6.28318548f);
                        vector = default(Vector2);
                        Vector2 spinningpoint24 = spinningpoint23.RotatedBy(radians36, vector);
                        double radians37 = (double) base.velocity.ToRotation();
                        vector = default(Vector2);
                        Vector2 value35 = spinningpoint24.RotatedBy(radians37, vector);
                        int num813 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 229,
                            (0f - base.velocity.X) / 3f, (0f - base.velocity.Y) / 3f, 150, Color.Transparent, 0.7f);
                        Main.dust[num813].velocity = Vector2.Zero;
                        Main.dust[num813].position = base.Center + value35;
                        Main.dust[num813].noGravity = true;
                    }
                }
            }
            else if (aiStyle == 84)
            {
                Vector2? nullable = null;
                if (base.velocity.HasNaNs() || base.velocity == Vector2.Zero)
                {
                    base.velocity = -Vector2.UnitY;
                }

                if (type == 455 && Main.npc[(int) this.ai[1]].active && Main.npc[(int) this.ai[1]].type == 396)
                {
                    Vector2 value36 = new Vector2(27f, 59f);
                    Vector2 value37 = Utils.Vector2FromElipse(Main.npc[(int) this.ai[1]].localAI[0].ToRotationVector2(),
                        value36 * Main.npc[(int) this.ai[1]].localAI[1]);
                    base.position = Main.npc[(int) this.ai[1]].Center + value37 -
                                    new Vector2((float) base.width, (float) base.height) / 2f;
                }
                else if (type == 455 && Main.npc[(int) this.ai[1]].active && Main.npc[(int) this.ai[1]].type == 400)
                {
                    Vector2 value38 = new Vector2(30f, 30f);
                    Vector2 value39 = Utils.Vector2FromElipse(Main.npc[(int) this.ai[1]].localAI[0].ToRotationVector2(),
                        value38 * Main.npc[(int) this.ai[1]].localAI[1]);
                    base.position = Main.npc[(int) this.ai[1]].Center + value39 -
                                    new Vector2((float) base.width, (float) base.height) / 2f;
                }
                else if (type == 537 && Main.npc[(int) this.ai[1]].active && Main.npc[(int) this.ai[1]].type == 411)
                {
                    Vector2 value40 = new Vector2((float) (Main.npc[(int) this.ai[1]].direction * 6), -4f);
                    base.position = Main.npc[(int) this.ai[1]].Center + value40 - base.Size / 2f +
                                    new Vector2(0f, 0f - Main.npc[(int) this.ai[1]].gfxOffY);
                }
                else if (type == 461 && Main.projectile[(int) this.ai[1]].active &&
                         Main.projectile[(int) this.ai[1]].type == 460)
                {
                    Vector2 value41 = Vector2.Normalize(Main.projectile[(int) this.ai[1]].velocity);
                    base.position = Main.projectile[(int) this.ai[1]].Center + value41 * 16f -
                                    new Vector2((float) base.width, (float) base.height) / 2f +
                                    new Vector2(0f, 0f - Main.projectile[(int) this.ai[1]].gfxOffY);
                    base.velocity = Vector2.Normalize(Main.projectile[(int) this.ai[1]].velocity);
                }
                else if (type == 642 && Main.projectile[(int) this.ai[1]].active &&
                         Main.projectile[(int) this.ai[1]].type == 641)
                {
                    base.Center = Main.projectile[(int) this.ai[1]].Center;
                    base.velocity = Vector2.Normalize(Main.projectile[(int) this.ai[1]].ai[1].ToRotationVector2());
                }
                else
                {
                    if (type != 632 || !Main.projectile[(int) this.ai[1]].active ||
                        Main.projectile[(int) this.ai[1]].type != 633)
                    {
                        Kill();
                        return;
                    }

                    float num814 = (float) (int) this.ai[0] - 2.5f;
                    Vector2 value42 = Vector2.Normalize(Main.projectile[(int) this.ai[1]].velocity);
                    Projectile projectile = Main.projectile[(int) this.ai[1]];
                    float num815 = num814 * 0.5235988f;
                    float num816 = 20f;
                    Vector2 zero = Vector2.Zero;
                    float num817 = 1f;
                    float num818 = 15f;
                    float num819 = -2f;
                    if (projectile.ai[0] < 180f)
                    {
                        num817 = 1f - projectile.ai[0] / 180f;
                        num818 = 20f - projectile.ai[0] / 180f * 14f;
                        if (projectile.ai[0] < 120f)
                        {
                            num816 = 20f - 4f * (projectile.ai[0] / 120f);
                            Opacity = projectile.ai[0] / 120f * 0.4f;
                        }
                        else
                        {
                            num816 = 16f - 10f * ((projectile.ai[0] - 120f) / 60f);
                            Opacity = 0.4f + (projectile.ai[0] - 120f) / 60f * 0.6f;
                        }

                        num819 = -22f + projectile.ai[0] / 180f * 20f;
                    }
                    else
                    {
                        num817 = 0f;
                        num816 = 1.75f;
                        num818 = 6f;
                        Opacity = 1f;
                        num819 = -2f;
                    }

                    float num820 = (projectile.ai[0] + num814 * num816) / (num816 * 6f) * 6.28318548f;
                    Vector2 unitY5 = Vector2.UnitY;
                    double radians38 = (double) num820;
                    vector = default(Vector2);
                    num815 = unitY5.RotatedBy(radians38, vector).Y * 0.5235988f * num817;
                    Vector2 unitY6 = Vector2.UnitY;
                    double radians39 = (double) num820;
                    vector = default(Vector2);
                    Vector2 spinningpoint25 = unitY6.RotatedBy(radians39, vector) * new Vector2(4f, num818);
                    double radians40 = (double) projectile.velocity.ToRotation();
                    vector = default(Vector2);
                    zero = spinningpoint25.RotatedBy(radians40, vector);
                    base.position = projectile.Center + value42 * 16f - base.Size / 2f +
                                    new Vector2(0f, 0f - Main.projectile[(int) this.ai[1]].gfxOffY);
                    base.position += projectile.velocity.ToRotation().ToRotationVector2() * num819;
                    base.position += zero;
                    Vector2 spinningpoint26 = Vector2.Normalize(projectile.velocity);
                    double radians41 = (double) num815;
                    vector = default(Vector2);
                    base.velocity = spinningpoint26.RotatedBy(radians41, vector);
                    scale = 1.4f * (1f - num817);
                    damage = projectile.damage;
                    if (projectile.ai[0] >= 180f)
                    {
                        damage *= 3;
                        nullable = projectile.Center;
                    }

                    if (!Collision.CanHitLine(Main.player[owner].Center, 0, 0, projectile.Center, 0, 0))
                    {
                        nullable = Main.player[owner].Center;
                    }

                    friendly = (projectile.ai[0] > 30f);
                }

                if (base.velocity.HasNaNs() || base.velocity == Vector2.Zero)
                {
                    base.velocity = -Vector2.UnitY;
                }

                if (type == 461)
                {
                    this.ai[0] += 1f;
                    if (this.ai[0] >= 300f)
                    {
                        Kill();
                        return;
                    }

                    scale = (float) Math.Sin((double) (this.ai[0] * 3.14159274f / 300f)) * 10f;
                    if (scale > 1f)
                    {
                        scale = 1f;
                    }
                }

                if (type == 455)
                {
                    if (localAI[0] == 0f)
                    {
                        Main.PlaySound(29, (int) base.position.X, (int) base.position.Y, 104, 1f, 0f);
                    }

                    float num821 = 1f;
                    if (Main.npc[(int) this.ai[1]].type == 400)
                    {
                        num821 = 0.4f;
                    }

                    localAI[0] += 1f;
                    if (localAI[0] >= 180f)
                    {
                        Kill();
                        return;
                    }

                    scale = (float) Math.Sin((double) (localAI[0] * 3.14159274f / 180f)) * 10f * num821;
                    if (scale > num821)
                    {
                        scale = num821;
                    }
                }

                if (type == 642)
                {
                    float num822 = 1f;
                    localAI[0] += 1f;
                    if (localAI[0] >= 50f)
                    {
                        Kill();
                        return;
                    }

                    scale = (float) Math.Sin((double) (localAI[0] * 3.14159274f / 50f)) * 10f * num822;
                    if (scale > num822)
                    {
                        scale = num822;
                    }
                }

                if (type == 537)
                {
                    float num823 = 0.8f;
                    localAI[0] += 1f;
                    if (localAI[0] >= 60f)
                    {
                        Kill();
                        return;
                    }

                    scale = (float) Math.Sin((double) (localAI[0] * 3.14159274f / 60f)) * 10f * num823;
                    if (scale > num823)
                    {
                        scale = num823;
                    }
                }

                float num824 = base.velocity.ToRotation();
                if (type == 455)
                {
                    num824 += this.ai[0];
                }

                rotation = num824 - 1.57079637f;
                base.velocity = num824.ToRotationVector2();
                float num825 = 0f;
                float num826 = 0f;
                Vector2 samplingPoint = base.Center;
                if (nullable.HasValue)
                {
                    samplingPoint = nullable.Value;
                }

                if (type == 455)
                {
                    num825 = 3f;
                    num826 = (float) base.width;
                }
                else if (type == 461)
                {
                    num825 = 2f;
                    num826 = 0f;
                }
                else if (type == 642)
                {
                    num825 = 2f;
                    num826 = 0f;
                }
                else if (type == 632)
                {
                    num825 = 2f;
                    num826 = 0f;
                }
                else if (type == 537)
                {
                    num825 = 2f;
                    num826 = 0f;
                }

                float[] array5 = new float[(int) num825];
                Collision.LaserScan(samplingPoint, base.velocity, num826 * scale, 2400f, array5);
                float num827 = 0f;
                for (int num828 = 0; num828 < array5.Length; num828++)
                {
                    num827 += array5[num828];
                }

                num827 /= num825;
                float amount = 0.5f;
                if (type == 632)
                {
                    amount = 0.75f;
                }

                localAI[1] = MathHelper.Lerp(localAI[1], num827, amount);
                if (type == 455)
                {
                    Vector2 vector60 = base.Center + base.velocity * (localAI[1] - 14f);
                    for (int num829 = 0; num829 < 2; num829++)
                    {
                        float num830 = base.velocity.ToRotation() +
                                       ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * 1.57079637f;
                        float num831 = (float) Main.rand.NextDouble() * 2f + 2f;
                        Vector2 vector61 = new Vector2((float) Math.Cos((double) num830) * num831,
                            (float) Math.Sin((double) num830) * num831);
                        Vector2 position171 = vector60;
                        float x30 = vector61.X;
                        float y30 = vector61.Y;
                        newColor = default(Color);
                        int num832 = Dust.NewDust(position171, 0, 0, 229, x30, y30, 0, newColor, 1f);
                        Main.dust[num832].noGravity = true;
                        Main.dust[num832].scale = 1.7f;
                    }

                    if (Main.rand.Next(5) == 0)
                    {
                        Vector2 velocity11 = base.velocity;
                        vector = default(Vector2);
                        Vector2 value43 = velocity11.RotatedBy(1.5707963705062866, vector) *
                                          ((float) Main.rand.NextDouble() - 0.5f) * (float) base.width;
                        Vector2 position172 = vector60 + value43 - Vector2.One * 4f;
                        newColor = default(Color);
                        int num833 = Dust.NewDust(position172, 8, 8, 31, 0f, 0f, 100, newColor, 1.5f);
                        Main.dust[num833].velocity *= 0.5f;
                        Main.dust[num833].velocity.Y = 0f - Math.Abs(Main.dust[num833].velocity.Y);
                    }

                    DelegateMethods.v3_1 = new Vector3(0.3f, 0.65f, 0.7f);
                    Utils.PlotTileLine(base.Center, base.Center + base.velocity * localAI[1],
                        (float) base.width * scale, DelegateMethods.CastLight);
                }
                else if (type == 642)
                {
                    Vector2 vector62 = base.Center + base.velocity * (localAI[1] - 14f);
                    for (int num834 = 0; num834 < 2; num834++)
                    {
                        float num835 = base.velocity.ToRotation() +
                                       ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * 1.57079637f;
                        float num836 = (float) Main.rand.NextDouble() * 2f + 2f;
                        Vector2 vector63 = new Vector2((float) Math.Cos((double) num835) * num836,
                            (float) Math.Sin((double) num835) * num836);
                        Vector2 position173 = vector62;
                        float x31 = vector63.X;
                        float y31 = vector63.Y;
                        newColor = default(Color);
                        int num837 = Dust.NewDust(position173, 0, 0, 229, x31, y31, 0, newColor, 1f);
                        Main.dust[num837].noGravity = true;
                        Main.dust[num837].scale = 1.7f;
                    }

                    if (Main.rand.Next(5) == 0)
                    {
                        Vector2 velocity12 = base.velocity;
                        vector = default(Vector2);
                        Vector2 value44 = velocity12.RotatedBy(1.5707963705062866, vector) *
                                          ((float) Main.rand.NextDouble() - 0.5f) * (float) base.width;
                        Vector2 position174 = vector62 + value44 - Vector2.One * 4f;
                        newColor = default(Color);
                        int num838 = Dust.NewDust(position174, 8, 8, 31, 0f, 0f, 100, newColor, 1.5f);
                        Main.dust[num838].velocity *= 0.5f;
                        Main.dust[num838].velocity.Y = 0f - Math.Abs(Main.dust[num838].velocity.Y);
                    }

                    DelegateMethods.v3_1 = new Vector3(0.3f, 0.65f, 0.7f);
                    Utils.PlotTileLine(base.Center, base.Center + base.velocity * localAI[1],
                        (float) base.width * scale, DelegateMethods.CastLight);
                }

                if (type == 461)
                {
                    Vector2 vector64 = base.Center + base.velocity * (localAI[1] - 8f);
                    for (int num839 = 0; num839 < 2; num839++)
                    {
                        float num840 = base.velocity.ToRotation() +
                                       ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * 1.57079637f;
                        float num841 = (float) Main.rand.NextDouble() * 0.8f + 1f;
                        Vector2 vector65 = new Vector2((float) Math.Cos((double) num840) * num841,
                            (float) Math.Sin((double) num840) * num841);
                        Vector2 position175 = vector64;
                        float x32 = vector65.X;
                        float y32 = vector65.Y;
                        newColor = default(Color);
                        int num842 = Dust.NewDust(position175, 0, 0, 226, x32, y32, 0, newColor, 1f);
                        Main.dust[num842].noGravity = true;
                        Main.dust[num842].scale = 1.2f;
                    }

                    if (Main.rand.Next(5) == 0)
                    {
                        Vector2 velocity13 = base.velocity;
                        vector = default(Vector2);
                        Vector2 value45 = velocity13.RotatedBy(1.5707963705062866, vector) *
                                          ((float) Main.rand.NextDouble() - 0.5f) * (float) base.width;
                        Vector2 position176 = vector64 + value45 - Vector2.One * 4f;
                        newColor = default(Color);
                        int num843 = Dust.NewDust(position176, 8, 8, 31, 0f, 0f, 100, newColor, 1.5f);
                        Main.dust[num843].velocity *= 0.5f;
                        Main.dust[num843].velocity.Y = 0f - Math.Abs(Main.dust[num843].velocity.Y);
                    }

                    DelegateMethods.v3_1 = new Vector3(0.4f, 0.85f, 0.9f);
                    Utils.PlotTileLine(base.Center, base.Center + base.velocity * localAI[1],
                        (float) base.width * scale, DelegateMethods.CastLight);
                }

                if (type == 537)
                {
                    Vector2 vector66 = base.Center + base.velocity * (localAI[1] - 8f);
                    for (int num844 = 0; num844 < 2; num844++)
                    {
                        float num845 = base.velocity.ToRotation() +
                                       ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * 1.57079637f;
                        float num846 = (float) Main.rand.NextDouble() * 0.8f + 1f;
                        Vector2 vector67 = new Vector2((float) Math.Cos((double) num845) * num846,
                            (float) Math.Sin((double) num845) * num846);
                        Vector2 position177 = vector66;
                        float x33 = vector67.X;
                        float y33 = vector67.Y;
                        newColor = default(Color);
                        int num847 = Dust.NewDust(position177, 0, 0, 226, x33, y33, 0, newColor, 1f);
                        Main.dust[num847].noGravity = true;
                        Main.dust[num847].scale = 1.2f;
                    }

                    if (Main.rand.Next(5) == 0)
                    {
                        Vector2 velocity14 = base.velocity;
                        vector = default(Vector2);
                        Vector2 value46 = velocity14.RotatedBy(1.5707963705062866, vector) *
                                          ((float) Main.rand.NextDouble() - 0.5f) * (float) base.width;
                        Vector2 position178 = vector66 + value46 - Vector2.One * 4f;
                        newColor = default(Color);
                        int num848 = Dust.NewDust(position178, 8, 8, 31, 0f, 0f, 100, newColor, 1.5f);
                        Main.dust[num848].velocity *= 0.5f;
                        Main.dust[num848].velocity.Y = 0f - Math.Abs(Main.dust[num848].velocity.Y);
                    }

                    DelegateMethods.v3_1 = new Vector3(0.4f, 0.85f, 0.9f);
                    Utils.PlotTileLine(base.Center, base.Center + base.velocity * localAI[1],
                        (float) base.width * scale, DelegateMethods.CastLight);
                }

                if (type == 632 && Math.Abs(localAI[1] - num827) < 100f && scale > 0.15f)
                {
                    float prismHue = GetPrismHue(this.ai[0]);
                    Color color = Main.hslToRgb(prismHue, 1f, 0.5f);
                    color.A = 0;
                    Vector2 vector68 = base.Center + base.velocity * (localAI[1] - 14.5f * scale);
                    float x34 = Main.rgbToHsl(new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB)).X;
                    for (int num849 = 0; num849 < 2; num849++)
                    {
                        float num850 = base.velocity.ToRotation() +
                                       ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * 1.57079637f;
                        float num851 = (float) Main.rand.NextDouble() * 0.8f + 1f;
                        Vector2 vector69 = new Vector2((float) Math.Cos((double) num850) * num851,
                            (float) Math.Sin((double) num850) * num851);
                        Vector2 position179 = vector68;
                        float x35 = vector69.X;
                        float y34 = vector69.Y;
                        newColor = default(Color);
                        int num852 = Dust.NewDust(position179, 0, 0, 267, x35, y34, 0, newColor, 1f);
                        Main.dust[num852].color = color;
                        Main.dust[num852].scale = 1.2f;
                        if (scale > 1f)
                        {
                            Main.dust[num852].velocity *= scale;
                            Main.dust[num852].scale *= scale;
                        }

                        Main.dust[num852].noGravity = true;
                        if (scale != 1.4f)
                        {
                            Dust dust10 = Dust.CloneDust(num852);
                            dust10.color = Color.White;
                            dust10.scale /= 2f;
                        }

                        float hue = (x34 + Main.rand.NextFloat() * 0.4f) % 1f;
                        Main.dust[num852].color = Color.Lerp(color, Main.hslToRgb(hue, 1f, 0.75f), scale / 1.4f);
                    }

                    if (Main.rand.Next(5) == 0)
                    {
                        Vector2 velocity15 = base.velocity;
                        vector = default(Vector2);
                        Vector2 value47 = velocity15.RotatedBy(1.5707963705062866, vector) *
                                          ((float) Main.rand.NextDouble() - 0.5f) * (float) base.width;
                        Vector2 position180 = vector68 + value47 - Vector2.One * 4f;
                        newColor = default(Color);
                        int num853 = Dust.NewDust(position180, 8, 8, 31, 0f, 0f, 100, newColor, 1.5f);
                        Main.dust[num853].velocity *= 0.5f;
                        Main.dust[num853].velocity.Y = 0f - Math.Abs(Main.dust[num853].velocity.Y);
                    }

                    DelegateMethods.v3_1 = color.ToVector3() * 0.3f;
                    float value48 = 0.1f * (float) Math.Sin((double) (Main.GlobalTime * 20f));
                    Vector2 size = new Vector2(base.velocity.Length() * localAI[1], (float) base.width * scale);
                    float num854 = base.velocity.ToRotation();
                    if (Main.netMode != 2)
                    {
                        Terraria.GameContent.Shaders.WaterShaderData obj8 =
                            (Terraria.GameContent.Shaders.WaterShaderData) Terraria.Graphics.Effects.Filters
                                .Scene["WaterDistortion"].GetShader();
                        Vector2 position181 = base.position;
                        Vector2 spinningpoint27 = new Vector2(size.X * 0.5f, 0f);
                        double radians42 = (double) num854;
                        vector = default(Vector2);
                        obj8.QueueRipple(position181 + spinningpoint27.RotatedBy(radians42, vector),
                            new Color(0.5f, 0.1f * (float) Math.Sign(value48) + 0.5f, 0f, 1f) * Math.Abs(value48), size,
                            Terraria.GameContent.Shaders.RippleShape.Square, num854);
                    }

                    Utils.PlotTileLine(base.Center, base.Center + base.velocity * localAI[1],
                        (float) base.width * scale, DelegateMethods.CastLight);
                }
            }
            else if (aiStyle == 85)
            {
                Vector2 value49 = new Vector2(0f, 216f);
                alpha -= 15;
                if (alpha < 0)
                {
                    alpha = 0;
                }

                int num855 = (int) Math.Abs(this.ai[0]) - 1;
                int num856 = (int) this.ai[1];
                if (!Main.npc[num855].active || Main.npc[num855].type != 396)
                {
                    Kill();
                }
                else
                {
                    localAI[0] += 1f;
                    if (localAI[0] >= 330f && this.ai[0] > 0f && Main.netMode != 1)
                    {
                        this.ai[0] *= -1f;
                        netUpdate = true;
                    }

                    if (Main.netMode != 1 && this.ai[0] > 0f &&
                        (!Main.player[(int) this.ai[1]].active || Main.player[(int) this.ai[1]].dead))
                    {
                        this.ai[0] *= -1f;
                        netUpdate = true;
                    }

                    rotation = (Main.npc[(int) Math.Abs(this.ai[0]) - 1].Center - Main.player[(int) this.ai[1]].Center +
                                value49).ToRotation() + 1.57079637f;
                    if (this.ai[0] > 0f)
                    {
                        Vector2 value50 = Main.player[(int) this.ai[1]].Center - base.Center;
                        if (value50.X != 0f || value50.Y != 0f)
                        {
                            base.velocity = Vector2.Normalize(value50) * Math.Min(16f, value50.Length());
                        }
                        else
                        {
                            base.velocity = Vector2.Zero;
                        }

                        if (value50.Length() < 20f && localAI[1] == 0f)
                        {
                            localAI[1] = 1f;
                            int time = 840;
                            if (Main.expertMode)
                            {
                                time = 960;
                            }

                            Main.player[num856].AddBuff(145, time, true);
                        }
                    }
                    else
                    {
                        Vector2 value51 = Main.npc[(int) Math.Abs(this.ai[0]) - 1].Center - base.Center + value49;
                        if (value51.X != 0f || value51.Y != 0f)
                        {
                            base.velocity = Vector2.Normalize(value51) * Math.Min(16f, value51.Length());
                        }
                        else
                        {
                            base.velocity = Vector2.Zero;
                        }

                        if (value51.Length() < 20f)
                        {
                            Kill();
                        }
                    }
                }
            }
            else if (aiStyle == 86)
            {
                if (localAI[1] == 0f)
                {
                    localAI[1] = 1f;
                    Main.PlaySound(SoundID.Item120, base.position);
                }

                this.ai[0] += 1f;
                if (this.ai[1] == 1f)
                {
                    if (this.ai[0] >= 130f)
                    {
                        alpha += 10;
                    }
                    else
                    {
                        alpha -= 10;
                    }

                    if (alpha < 0)
                    {
                        alpha = 0;
                    }

                    if (alpha > 255)
                    {
                        alpha = 255;
                    }

                    if (this.ai[0] >= 150f)
                    {
                        Kill();
                    }
                    else
                    {
                        if (this.ai[0] % 30f == 0f && Main.netMode != 1)
                        {
                            Vector2 vector70 = rotation.ToRotationVector2();
                            NewProjectile(base.Center.X, base.Center.Y, vector70.X, vector70.Y, 464, damage, knockBack,
                                owner, 0f, 0f);
                        }

                        rotation += 0.104719758f;
                        Lighting.AddLight(base.Center, 0.3f, 0.75f, 0.9f);
                    }
                }
                else
                {
                    base.position -= base.velocity;
                    if (this.ai[0] >= 40f)
                    {
                        alpha += 3;
                    }
                    else
                    {
                        alpha -= 40;
                    }

                    if (alpha < 0)
                    {
                        alpha = 0;
                    }

                    if (alpha > 255)
                    {
                        alpha = 255;
                    }

                    if (this.ai[0] >= 45f)
                    {
                        Kill();
                    }
                    else
                    {
                        Vector2 spinningpoint28 = new Vector2(0f, -720f);
                        double radians43 = (double) base.velocity.ToRotation();
                        vector = default(Vector2);
                        Vector2 value52 = spinningpoint28.RotatedBy(radians43, vector);
                        float scaleFactor6 = this.ai[0] % 45f / 45f;
                        Vector2 vector71 = value52 * scaleFactor6;
                        for (int num857 = 0; num857 < 6; num857++)
                        {
                            Vector2 center17 = base.Center;
                            Vector2 spinningpoint29 = vector71;
                            double radians44 = (double) ((float) num857 * 6.28318548f / 6f);
                            vector = default(Vector2);
                            Vector2 vector72 = center17 + spinningpoint29.RotatedBy(radians44, vector);
                            Lighting.AddLight(vector72, 0.3f, 0.75f, 0.9f);
                            for (int num858 = 0; num858 < 2; num858++)
                            {
                                int num859 = Dust.NewDust(vector72 + Utils.RandomVector2(Main.rand, -8f, 8f) / 2f, 8, 8,
                                    197, 0f, 0f, 100, Color.Transparent, 1f);
                                Main.dust[num859].noGravity = true;
                            }
                        }
                    }
                }
            }
            else if (aiStyle == 87)
            {
                base.position.Y = this.ai[0];
                base.height = (int) this.ai[1];
                if (base.Center.X > Main.player[owner].Center.X)
                {
                    base.direction = 1;
                }
                else
                {
                    base.direction = -1;
                }

                base.velocity.X = (float) base.direction * 1E-06f;
                if (owner == Main.myPlayer)
                {
                    for (int num860 = 0; num860 < 1000; num860++)
                    {
                        if (Main.projectile[num860].active && num860 != whoAmI &&
                            Main.projectile[num860].type == type && Main.projectile[num860].owner == owner &&
                            Main.projectile[num860].timeLeft > timeLeft)
                        {
                            Kill();
                            return;
                        }
                    }
                }

                float num861 = (float) (base.width * base.height) * 0.0045f;
                for (int num862 = 0; (float) num862 < num861; num862++)
                {
                    Vector2 position182 = base.position;
                    int width138 = base.width;
                    int height137 = base.height;
                    newColor = default(Color);
                    int num863 = Dust.NewDust(position182, width138, height137, 75, 0f, 0f, 100, newColor, 1f);
                    Main.dust[num863].noGravity = true;
                    Main.dust[num863].velocity *= 0.5f;
                    Main.dust[num863].velocity.Y -= 0.5f;
                    Main.dust[num863].scale = 1.4f;
                    Main.dust[num863].position.X += 6f;
                    Main.dust[num863].position.Y -= 2f;
                }
            }
            else if (aiStyle == 88)
            {
                if (type == 465)
                {
                    if (localAI[1] == 0f)
                    {
                        Main.PlaySound(SoundID.Item121, base.position);
                        localAI[1] = 1f;
                    }

                    if (this.ai[0] < 180f)
                    {
                        alpha -= 5;
                        if (alpha < 0)
                        {
                            alpha = 0;
                        }
                    }
                    else
                    {
                        alpha += 5;
                        if (alpha > 255)
                        {
                            alpha = 255;
                            Kill();
                            return;
                        }
                    }

                    this.ai[0] += 1f;
                    if (this.ai[0] % 30f == 0f && this.ai[0] < 180f && Main.netMode != 1)
                    {
                        int[] array6 = new int[5];
                        Vector2[] array7 = new Vector2[5];
                        int num864 = 0;
                        float num865 = 2000f;
                        for (int num866 = 0; num866 < 255; num866++)
                        {
                            if (Main.player[num866].active && !Main.player[num866].dead)
                            {
                                Vector2 center18 = Main.player[num866].Center;
                                float num867 = Vector2.Distance(center18, base.Center);
                                if (num867 < num865 && Collision.CanHit(base.Center, 1, 1, center18, 1, 1))
                                {
                                    array6[num864] = num866;
                                    array7[num864] = center18;
                                    if (++num864 >= array7.Length)
                                    {
                                        break;
                                    }
                                }
                            }
                        }

                        for (int num868 = 0; num868 < num864; num868++)
                        {
                            Vector2 vector73 = array7[num868] - base.Center;
                            float ai = (float) Main.rand.Next(100);
                            Vector2 vector74 = Vector2.Normalize(vector73.RotatedByRandom(0.78539818525314331)) * 7f;
                            NewProjectile(base.Center.X, base.Center.Y, vector74.X, vector74.Y, 466, damage, 0f,
                                Main.myPlayer, vector73.ToRotation(), ai);
                        }
                    }

                    Lighting.AddLight(base.Center, 0.4f, 0.85f, 0.9f);
                    if (++frameCounter >= 4)
                    {
                        frameCounter = 0;
                        if (++frame >= Main.projFrames[type])
                        {
                            frame = 0;
                        }
                    }

                    if (alpha < 150 && this.ai[0] < 180f)
                    {
                        for (int num869 = 0; num869 < 1; num869++)
                        {
                            float num870 = (float) Main.rand.NextDouble() * 1f - 0.5f;
                            if (num870 < -0.5f)
                            {
                                num870 = -0.5f;
                            }

                            if (num870 > 0.5f)
                            {
                                num870 = 0.5f;
                            }

                            Vector2 spinningpoint30 = new Vector2((float) (-base.width) * 0.2f * scale, 0f);
                            double radians45 = (double) (num870 * 6.28318548f);
                            vector = default(Vector2);
                            Vector2 spinningpoint31 = spinningpoint30.RotatedBy(radians45, vector);
                            double radians46 = (double) base.velocity.ToRotation();
                            vector = default(Vector2);
                            Vector2 value53 = spinningpoint31.RotatedBy(radians46, vector);
                            int num871 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 226,
                                (0f - base.velocity.X) / 3f, (0f - base.velocity.Y) / 3f, 150, Color.Transparent, 0.7f);
                            Main.dust[num871].position = base.Center + value53;
                            Main.dust[num871].velocity =
                                Vector2.Normalize(Main.dust[num871].position - base.Center) * 2f;
                            Main.dust[num871].noGravity = true;
                        }

                        for (int num872 = 0; num872 < 1; num872++)
                        {
                            float num873 = (float) Main.rand.NextDouble() * 1f - 0.5f;
                            if (num873 < -0.5f)
                            {
                                num873 = -0.5f;
                            }

                            if (num873 > 0.5f)
                            {
                                num873 = 0.5f;
                            }

                            Vector2 spinningpoint32 = new Vector2((float) (-base.width) * 0.6f * scale, 0f);
                            double radians47 = (double) (num873 * 6.28318548f);
                            vector = default(Vector2);
                            Vector2 spinningpoint33 = spinningpoint32.RotatedBy(radians47, vector);
                            double radians48 = (double) base.velocity.ToRotation();
                            vector = default(Vector2);
                            Vector2 value54 = spinningpoint33.RotatedBy(radians48, vector);
                            int num874 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 226,
                                (0f - base.velocity.X) / 3f, (0f - base.velocity.Y) / 3f, 150, Color.Transparent, 0.7f);
                            Main.dust[num874].velocity = Vector2.Zero;
                            Main.dust[num874].position = base.Center + value54;
                            Main.dust[num874].noGravity = true;
                        }
                    }
                }
                else if (type == 466)
                {
                    frameCounter++;
                    Lighting.AddLight(base.Center, 0.3f, 0.45f, 0.5f);
                    if (base.velocity == Vector2.Zero)
                    {
                        if (frameCounter >= extraUpdates * 2)
                        {
                            frameCounter = 0;
                            bool flag33 = true;
                            for (int num875 = 1; num875 < oldPos.Length; num875++)
                            {
                                if (oldPos[num875] != oldPos[0])
                                {
                                    flag33 = false;
                                }
                            }

                            if (flag33)
                            {
                                Kill();
                                return;
                            }
                        }

                        if (Main.rand.Next(extraUpdates) == 0)
                        {
                            for (int num876 = 0; num876 < 2; num876++)
                            {
                                float num877 = rotation + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * 1.57079637f;
                                float num878 = (float) Main.rand.NextDouble() * 0.8f + 1f;
                                Vector2 vector75 = new Vector2((float) Math.Cos((double) num877) * num878,
                                    (float) Math.Sin((double) num877) * num878);
                                Vector2 center19 = base.Center;
                                float x36 = vector75.X;
                                float y35 = vector75.Y;
                                newColor = default(Color);
                                int num879 = Dust.NewDust(center19, 0, 0, 226, x36, y35, 0, newColor, 1f);
                                Main.dust[num879].noGravity = true;
                                Main.dust[num879].scale = 1.2f;
                            }

                            if (Main.rand.Next(5) == 0)
                            {
                                Vector2 velocity16 = base.velocity;
                                vector = default(Vector2);
                                Vector2 value55 = velocity16.RotatedBy(1.5707963705062866, vector) *
                                                  ((float) Main.rand.NextDouble() - 0.5f) * (float) base.width;
                                Vector2 position183 = base.Center + value55 - Vector2.One * 4f;
                                newColor = default(Color);
                                int num880 = Dust.NewDust(position183, 8, 8, 31, 0f, 0f, 100, newColor, 1.5f);
                                Main.dust[num880].velocity *= 0.5f;
                                Main.dust[num880].velocity.Y = 0f - Math.Abs(Main.dust[num880].velocity.Y);
                            }
                        }
                    }
                    else if (frameCounter >= extraUpdates * 2)
                    {
                        frameCounter = 0;
                        float num881 = base.velocity.Length();
                        Terraria.Utilities.UnifiedRandom unifiedRandom =
                            new Terraria.Utilities.UnifiedRandom((int) this.ai[1]);
                        int num882 = 0;
                        Vector2 vector76 = -Vector2.UnitY;
                        while (true)
                        {
                            int num883 = unifiedRandom.Next();
                            this.ai[1] = (float) num883;
                            num883 %= 100;
                            float f = (float) num883 / 100f * 6.28318548f;
                            Vector2 vector77 = f.ToRotationVector2();
                            if (vector77.Y > 0f)
                            {
                                vector77.Y *= -1f;
                            }

                            bool flag34 = false;
                            if (vector77.Y > -0.02f)
                            {
                                flag34 = true;
                            }

                            if (vector77.X * (float) (extraUpdates + 1) * 2f * num881 + localAI[0] > 40f)
                            {
                                flag34 = true;
                            }

                            if (vector77.X * (float) (extraUpdates + 1) * 2f * num881 + localAI[0] < -40f)
                            {
                                flag34 = true;
                            }

                            if (!flag34)
                            {
                                vector76 = vector77;
                                break;
                            }

                            if (num882++ >= 100)
                            {
                                base.velocity = Vector2.Zero;
                                localAI[1] = 1f;
                                break;
                            }
                        }

                        if (base.velocity != Vector2.Zero)
                        {
                            localAI[0] += vector76.X * (float) (extraUpdates + 1) * 2f * num881;
                            Vector2 spinningpoint34 = vector76;
                            double radians49 = (double) (this.ai[0] + 1.57079637f);
                            vector = default(Vector2);
                            base.velocity = spinningpoint34.RotatedBy(radians49, vector) * num881;
                            rotation = base.velocity.ToRotation() + 1.57079637f;
                        }
                    }
                }
                else if (type == 580)
                {
                    if (localAI[1] == 0f && this.ai[0] >= 900f)
                    {
                        this.ai[0] -= 1000f;
                        localAI[1] = -1f;
                    }

                    frameCounter++;
                    Lighting.AddLight(base.Center, 0.3f, 0.45f, 0.5f);
                    if (base.velocity == Vector2.Zero)
                    {
                        if (frameCounter >= extraUpdates * 2)
                        {
                            frameCounter = 0;
                            bool flag35 = true;
                            for (int num885 = 1; num885 < oldPos.Length; num885++)
                            {
                                if (oldPos[num885] != oldPos[0])
                                {
                                    flag35 = false;
                                }
                            }

                            if (flag35)
                            {
                                Kill();
                                return;
                            }
                        }

                        if (Main.rand.Next(extraUpdates) == 0 &&
                            (base.velocity != Vector2.Zero || Main.rand.Next((localAI[1] == 2f) ? 2 : 6) == 0))
                        {
                            for (int num886 = 0; num886 < 2; num886++)
                            {
                                float num887 = rotation + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * 1.57079637f;
                                float num888 = (float) Main.rand.NextDouble() * 0.8f + 1f;
                                Vector2 vector78 = new Vector2((float) Math.Cos((double) num887) * num888,
                                    (float) Math.Sin((double) num887) * num888);
                                Vector2 center20 = base.Center;
                                float x37 = vector78.X;
                                float y36 = vector78.Y;
                                newColor = default(Color);
                                int num889 = Dust.NewDust(center20, 0, 0, 226, x37, y36, 0, newColor, 1f);
                                Main.dust[num889].noGravity = true;
                                Main.dust[num889].scale = 1.2f;
                            }

                            if (Main.rand.Next(5) == 0)
                            {
                                Vector2 velocity17 = base.velocity;
                                vector = default(Vector2);
                                Vector2 value56 = velocity17.RotatedBy(1.5707963705062866, vector) *
                                                  ((float) Main.rand.NextDouble() - 0.5f) * (float) base.width;
                                Vector2 position184 = base.Center + value56 - Vector2.One * 4f;
                                newColor = default(Color);
                                int num890 = Dust.NewDust(position184, 8, 8, 31, 0f, 0f, 100, newColor, 1.5f);
                                Main.dust[num890].velocity *= 0.5f;
                                Main.dust[num890].velocity.Y = 0f - Math.Abs(Main.dust[num890].velocity.Y);
                            }
                        }
                    }
                    else if (frameCounter >= extraUpdates * 2)
                    {
                        frameCounter = 0;
                        float num891 = base.velocity.Length();
                        Terraria.Utilities.UnifiedRandom unifiedRandom2 =
                            new Terraria.Utilities.UnifiedRandom((int) this.ai[1]);
                        int num892 = 0;
                        Vector2 vector79 = -Vector2.UnitY;
                        while (true)
                        {
                            int num893 = unifiedRandom2.Next();
                            this.ai[1] = (float) num893;
                            num893 %= 100;
                            float f2 = (float) num893 / 100f * 6.28318548f;
                            Vector2 vector80 = f2.ToRotationVector2();
                            if (vector80.Y > 0f)
                            {
                                vector80.Y *= -1f;
                            }

                            bool flag36 = false;
                            if (vector80.Y > -0.02f)
                            {
                                flag36 = true;
                            }

                            if (vector80.X * (float) (extraUpdates + 1) * 2f * num891 + localAI[0] > 40f)
                            {
                                flag36 = true;
                            }

                            if (vector80.X * (float) (extraUpdates + 1) * 2f * num891 + localAI[0] < -40f)
                            {
                                flag36 = true;
                            }

                            if (!flag36)
                            {
                                vector79 = vector80;
                                break;
                            }

                            if (num892++ >= 100)
                            {
                                base.velocity = Vector2.Zero;
                                if (localAI[1] < 1f)
                                {
                                    localAI[1] += 2f;
                                }

                                break;
                            }
                        }

                        if (base.velocity != Vector2.Zero)
                        {
                            localAI[0] += vector79.X * (float) (extraUpdates + 1) * 2f * num891;
                            Vector2 spinningpoint35 = vector79;
                            double radians50 = (double) (this.ai[0] + 1.57079637f);
                            vector = default(Vector2);
                            base.velocity = spinningpoint35.RotatedBy(radians50, vector) * num891;
                            rotation = base.velocity.ToRotation() + 1.57079637f;
                            if (Main.rand.Next(4) == 0 && Main.netMode != 1 && localAI[1] == 0f)
                            {
                                float num895 = (float) Main.rand.Next(-3, 4) * 1.04719758f / 3f;
                                Vector2 spinningpoint36 = this.ai[0].ToRotationVector2();
                                double radians51 = (double) num895;
                                vector = default(Vector2);
                                Vector2 vector81 =
                                    spinningpoint36.RotatedBy(radians51, vector) * base.velocity.Length();
                                if (!Collision.CanHitLine(base.Center, 0, 0, base.Center + vector81 * 50f, 0, 0))
                                {
                                    NewProjectile(base.Center.X - vector81.X, base.Center.Y - vector81.Y, vector81.X,
                                        vector81.Y, type, damage, knockBack, owner, vector81.ToRotation() + 1000f,
                                        this.ai[1]);
                                }
                            }
                        }
                    }
                }
            }
            else if (aiStyle == 89)
            {
                if (this.ai[1] == -1f)
                {
                    alpha += 12;
                }
                else if (this.ai[0] < 300f)
                {
                    alpha -= 5;
                }
                else
                {
                    alpha += 12;
                }

                if (alpha < 0)
                {
                    alpha = 0;
                }

                if (alpha > 255)
                {
                    alpha = 255;
                }

                scale = 1f - (float) alpha / 255f;
                scale *= 0.6f;
                rotation += 0.0149599658f;
                if (localAI[1] == 0f)
                {
                    localAI[1] = 1f;
                    Main.PlaySound(SoundID.Item123, base.position);
                }

                if (alpha == 0)
                {
                    for (int num896 = 0; num896 < 2; num896++)
                    {
                        float num897 = (float) Main.rand.Next(2, 4);
                        float num898 = scale;
                        if (num896 == 1)
                        {
                            num898 *= 0.42f;
                            num897 *= -0.75f;
                        }

                        Vector2 value57 = new Vector2((float) Main.rand.Next(-10, 11), (float) Main.rand.Next(-10, 11));
                        value57.Normalize();
                        Vector2 position185 = new Vector2(base.position.X, base.position.Y);
                        int width139 = base.width;
                        int height138 = base.height;
                        newColor = default(Color);
                        int num899 = Dust.NewDust(position185, width139, height138, 228, 0f, 0f, 100, newColor, 2f);
                        Main.dust[num899].noGravity = true;
                        Main.dust[num899].noLight = true;
                        Main.dust[num899].position = base.Center + value57 * 204f * num898;
                        if (Main.rand.Next(8) == 0)
                        {
                            Main.dust[num899].velocity = value57 * (0f - num897) * 2f;
                            Main.dust[num899].scale += 0.5f;
                        }
                        else
                        {
                            Main.dust[num899].velocity = value57 * (0f - num897);
                        }
                    }
                }

                this.ai[0] += 1f;
                if (this.ai[0] >= 60f)
                {
                    int num1187 = (int) (this.ai[0] - 0f) / 60;
                    for (int num900 = 0; num900 < 1; num900++)
                    {
                        float scaleFactor7 = (float) Main.rand.Next(1, 3);
                        Vector2 value58 = new Vector2((float) Main.rand.Next(-10, 11), (float) Main.rand.Next(-10, 11));
                        value58.Normalize();
                        Vector2 position186 = new Vector2(base.position.X, base.position.Y);
                        int width140 = base.width;
                        int height139 = base.height;
                        newColor = default(Color);
                        int num901 = Dust.NewDust(position186, width140, height139, 228, 0f, 0f, 100, newColor, 2f);
                        Main.dust[num901].noGravity = true;
                        Main.dust[num901].noLight = true;
                        Main.dust[num901].position = base.Center;
                        if (Main.rand.Next(2) == 0)
                        {
                            Main.dust[num901].velocity = value58 * scaleFactor7 * 2f;
                            Main.dust[num901].scale += 0.5f;
                        }
                        else
                        {
                            Main.dust[num901].velocity = value58 * scaleFactor7;
                        }

                        Main.dust[num901].fadeIn = 2f;
                    }
                }

                if (this.ai[0] == 300f && this.ai[1] != -1f && Main.netMode != 1)
                {
                    if (!NPC.AnyNPCs(454))
                    {
                        this.ai[1] = (float) NPC.NewNPC((int) base.Center.X, (int) base.Center.Y, 454, 0, 0f, 0f, 0f,
                            0f, 255);
                    }
                    else
                    {
                        this.ai[1] = (float) NPC.NewNPC((int) base.Center.X, (int) base.Center.Y, 521, 0, 0f, 0f, 0f,
                            0f, 255);
                    }
                }
                else if (this.ai[0] == 320f)
                {
                    Kill();
                    return;
                }

                bool flag37 = false;
                if (this.ai[1] == -1f)
                {
                    if (alpha == 255)
                    {
                        flag37 = true;
                    }
                }
                else
                {
                    flag37 = (!(this.ai[1] >= 0f) || !Main.npc[(int) this.ai[1]].active);
                    if ((flag37 || Main.npc[(int) this.ai[1]].type != 439) &&
                        (flag37 || Main.npc[(int) this.ai[1]].type != 454) &&
                        (flag37 || Main.npc[(int) this.ai[1]].type != 521))
                    {
                        flag37 = true;
                    }
                }

                if (flag37)
                {
                    Kill();
                }
                else
                {
                    Lighting.AddLight(base.Center, 1.1f, 0.9f, 0.4f);
                }
            }
            else if (aiStyle == 90)
            {
                if (Main.player[owner].dead)
                {
                    Kill();
                }

                if (Main.myPlayer == owner && Main.player[owner].magicLantern)
                {
                    timeLeft = 2;
                }

                if (tileCollide)
                {
                    if (!Collision.CanHit(base.position, base.width, base.height, Main.player[owner].Center, 1, 1))
                    {
                        tileCollide = false;
                    }
                    else if (!Collision.SolidCollision(base.position, base.width, base.height) &&
                             Collision.CanHitLine(base.position, base.width, base.height, Main.player[owner].Center, 1,
                                 1))
                    {
                        tileCollide = true;
                    }
                }

                base.direction = Main.player[owner].direction;
                spriteDirection = base.direction;
                Lighting.AddLight(base.position, 0.35f, 0.35f, 0.1f);
                localAI[0] += 1f;
                if (localAI[0] >= 10f)
                {
                    localAI[0] = 0f;
                    int num902 = 17;
                    if ((base.Center - Main.player[Main.myPlayer].Center).Length() <
                        (float) (Main.screenWidth + num902 * 16))
                    {
                        int num903 = (int) base.Center.X / 16;
                        int num904 = (int) base.Center.Y / 16;
                        for (int num905 = num903 - num902; num905 <= num903 + num902; num905++)
                        {
                            for (int num906 = num904 - num902; num906 <= num904 + num902; num906++)
                            {
                                if (Main.rand.Next(4) == 0 &&
                                    new Vector2((float) (num903 - num905), (float) (num904 - num906)).Length() <
                                    (float) num902 && num905 > 0 && num905 < Main.maxTilesX - 1 && num906 > 0 &&
                                    num906 < Main.maxTilesY - 1 && Main.tile[num905, num906] != null &&
                                    Main.tile[num905, num906].active())
                                {
                                    bool flag38 = false;
                                    if (Main.tile[num905, num906].type == 185 && Main.tile[num905, num906].frameY == 18)
                                    {
                                        if (Main.tile[num905, num906].frameX >= 576 &&
                                            Main.tile[num905, num906].frameX <= 882)
                                        {
                                            flag38 = true;
                                        }
                                    }
                                    else if (Main.tile[num905, num906].type == 186 &&
                                             Main.tile[num905, num906].frameX >= 864 &&
                                             Main.tile[num905, num906].frameX <= 1170)
                                    {
                                        flag38 = true;
                                    }

                                    if (flag38 || Main.tileSpelunker[Main.tile[num905, num906].type] ||
                                        (Main.tileAlch[Main.tile[num905, num906].type] &&
                                         Main.tile[num905, num906].type != 82))
                                    {
                                        Vector2 position187 = new Vector2((float) (num905 * 16), (float) (num906 * 16));
                                        newColor = default(Color);
                                        int num907 = Dust.NewDust(position187, 16, 16, 204, 0f, 0f, 150, newColor,
                                            0.3f);
                                        Main.dust[num907].fadeIn = 0.75f;
                                        Main.dust[num907].velocity *= 0.1f;
                                        Main.dust[num907].noLight = true;
                                    }
                                }
                            }
                        }
                    }
                }

                Vector2 vector82 = Main.player[owner].Center - base.Center;
                vector82.X += (float) (40 * base.direction);
                vector82.Y -= 40f;
                float num908 = vector82.Length();
                if (num908 > 1000f)
                {
                    base.Center = Main.player[owner].Center;
                }

                float num909 = 3f;
                float num910 = 4f;
                if (num908 > 200f)
                {
                    num910 += (num908 - 200f) * 0.1f;
                    tileCollide = false;
                }

                if (num908 < num910)
                {
                    base.velocity *= 0.25f;
                    num910 = num908;
                }

                if (vector82.X != 0f || vector82.Y != 0f)
                {
                    vector82.Normalize();
                    vector82 *= num910;
                }

                base.velocity = (base.velocity * (num909 - 1f) + vector82) / num909;
                if (base.velocity.Length() > 6f)
                {
                    float num911 = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) + 1.57f;
                    if ((double) Math.Abs(rotation - num911) >= 3.14)
                    {
                        if (num911 < rotation)
                        {
                            rotation -= 6.28f;
                        }
                        else
                        {
                            rotation += 6.28f;
                        }
                    }

                    rotation = (rotation * 4f + num911) / 5f;
                    frameCounter++;
                    if (frameCounter > 4)
                    {
                        frameCounter = 0;
                        frame++;
                        if (frame > 7)
                        {
                            frame = 4;
                        }
                    }

                    if (frame < 4)
                    {
                        frame = 7;
                    }
                }
                else
                {
                    if ((double) rotation > 3.14)
                    {
                        rotation -= 6.28f;
                    }

                    if ((double) rotation > -0.01 && (double) rotation < 0.01)
                    {
                        rotation = 0f;
                    }
                    else
                    {
                        rotation *= 0.9f;
                    }

                    frameCounter++;
                    if (frameCounter > 6)
                    {
                        frameCounter = 0;
                        frame++;
                        if (frame > 3)
                        {
                            frame = 0;
                        }
                    }
                }
            }
            else if (aiStyle == 91)
            {
                Vector2 center21 = base.Center;
                scale = 1f - localAI[0];
                base.width = (int) (20f * scale);
                base.height = base.width;
                base.position.X = center21.X - (float) (base.width / 2);
                base.position.Y = center21.Y - (float) (base.height / 2);
                if ((double) localAI[0] < 0.1)
                {
                    localAI[0] += 0.01f;
                }
                else
                {
                    localAI[0] += 0.025f;
                }

                if (localAI[0] >= 0.95f)
                {
                    Kill();
                }

                base.velocity.X += this.ai[0] * 1.5f;
                base.velocity.Y += this.ai[1] * 1.5f;
                if (base.velocity.Length() > 16f)
                {
                    base.velocity.Normalize();
                    base.velocity *= 16f;
                }

                this.ai[0] *= 1.05f;
                this.ai[1] *= 1.05f;
                if (scale < 1f)
                {
                    for (int num912 = 0; (float) num912 < scale * 10f; num912++)
                    {
                        Vector2 position188 = new Vector2(base.position.X, base.position.Y);
                        int width141 = base.width;
                        int height140 = base.height;
                        float x38 = base.velocity.X;
                        float y37 = base.velocity.Y;
                        newColor = default(Color);
                        int num913 = Dust.NewDust(position188, width141, height140, 27, x38, y37, 100, newColor, 1.1f);
                        Main.dust[num913].position = (Main.dust[num913].position + base.Center) / 2f;
                        Main.dust[num913].noGravity = true;
                        Main.dust[num913].velocity *= 0.1f;
                        Main.dust[num913].velocity -= base.velocity * (1.3f - scale);
                        Main.dust[num913].fadeIn = (float) (100 + owner);
                        Main.dust[num913].scale += scale * 0.75f;
                    }
                }
            }
            else if (aiStyle == 92)
            {
                tileCollide = false;
                this.ai[1] += 1f;
                if (this.ai[1] > 60f)
                {
                    this.ai[0] += 10f;
                }

                if (this.ai[0] > 255f)
                {
                    Kill();
                    this.ai[0] = 255f;
                }

                alpha = (int) (100.0 + (double) this.ai[0] * 0.7);
                rotation += base.velocity.X * 0.1f;
                rotation += (float) base.direction * 0.003f;
                base.velocity *= 0.96f;
                Rectangle rectangle5 =
                    new Rectangle((int) base.position.X, (int) base.position.Y, base.width, base.height);
                for (int num914 = 0; num914 < 1000; num914++)
                {
                    if (num914 != whoAmI && Main.projectile[num914].active && Main.projectile[num914].type >= 511 &&
                        Main.projectile[num914].type <= 513)
                    {
                        Rectangle value59 = new Rectangle((int) Main.projectile[num914].position.X,
                            (int) Main.projectile[num914].position.Y, Main.projectile[num914].width,
                            Main.projectile[num914].height);
                        if (rectangle5.Intersects(value59))
                        {
                            Vector2 vector83 = Main.projectile[num914].Center - base.Center;
                            if (vector83.X == 0f && vector83.Y == 0f)
                            {
                                if (num914 < whoAmI)
                                {
                                    vector83.X = -1f;
                                    vector83.Y = 1f;
                                }
                                else
                                {
                                    vector83.X = 1f;
                                    vector83.Y = -1f;
                                }
                            }

                            vector83.Normalize();
                            vector83 *= 0.005f;
                            base.velocity -= vector83;
                            Main.projectile[num914].velocity += vector83;
                        }
                    }
                }
            }
            else if (aiStyle == 93)
            {
                if (alpha > 0)
                {
                    alpha -= 25;
                    if (alpha <= 0)
                    {
                        alpha = 0;
                    }
                }

                if (base.velocity.Y > 18f)
                {
                    base.velocity.Y = 18f;
                }

                if (this.ai[0] == 0f)
                {
                    this.ai[1] += 1f;
                    if (this.ai[1] > 20f)
                    {
                        base.velocity.Y += 0.1f;
                        base.velocity.X *= 0.992f;
                    }

                    rotation = (float) Math.Atan2((double) base.velocity.Y, (double) base.velocity.X) + 1.57f;
                }
                else
                {
                    tileCollide = false;
                    if (this.ai[0] == 1f)
                    {
                        tileCollide = false;
                        base.velocity *= 0.6f;
                    }
                    else
                    {
                        tileCollide = false;
                        int num915 = (int) (0f - this.ai[0]);
                        num915--;
                        base.position = Main.npc[num915].Center - base.velocity;
                        base.position.X -= (float) (base.width / 2);
                        base.position.Y -= (float) (base.height / 2);
                        if (!Main.npc[num915].active || Main.npc[num915].life < 0)
                        {
                            tileCollide = true;
                            this.ai[0] = 0f;
                            this.ai[1] = 20f;
                            base.velocity = new Vector2((float) Main.rand.Next(-100, 101),
                                (float) Main.rand.Next(-100, 101));
                            base.velocity.Normalize();
                            base.velocity *= 6f;
                            netUpdate = true;
                        }
                        else if (base.velocity.Length() >
                                 (float) ((Main.npc[num915].width + Main.npc[num915].height) / 3))
                        {
                            base.velocity *= 0.99f;
                        }
                    }

                    if (this.ai[0] != 0f)
                    {
                        this.ai[1] += 1f;
                        if (this.ai[1] > 90f)
                        {
                            Kill();
                        }
                    }
                }
            }
            else if (aiStyle == 94)
            {
                if (++frameCounter >= 4)
                {
                    frameCounter = 0;
                    if (++frame >= Main.projFrames[type])
                    {
                        frame = 0;
                    }
                }

                this.ai[0] += 1f;
                if (this.ai[0] <= 40f)
                {
                    alpha -= 5;
                    if (alpha < 0)
                    {
                        alpha = 0;
                    }

                    base.velocity *= 0.85f;
                    if (this.ai[0] == 40f)
                    {
                        netUpdate = true;
                        switch (Main.rand.Next(3))
                        {
                            case 0:
                                this.ai[1] = 10f;
                                break;
                            case 1:
                                this.ai[1] = 15f;
                                break;
                            case 2:
                                this.ai[1] = 30f;
                                break;
                        }
                    }
                }
                else if (this.ai[0] <= 60f)
                {
                    base.velocity = Vector2.Zero;
                    if (this.ai[0] == 60f)
                    {
                        netUpdate = true;
                    }
                }
                else if (this.ai[0] <= 210f)
                {
                    if (Main.netMode != 1 && (localAI[0] += 1f) >= this.ai[1])
                    {
                        localAI[0] = 0f;
                        int num916 = Item.NewItem((int) base.Center.X, (int) base.Center.Y, 0, 0, 73, 1, false, 0,
                            false, false);
                        Main.item[num916].velocity =
                            Vector2.UnitY.RotatedByRandom(6.2831854820251465) * new Vector2(3f, 2f) *
                            (Main.rand.NextFloat() * 0.5f + 0.5f) - Vector2.UnitY * 1f;
                    }

                    if (this.ai[0] == 210f)
                    {
                        netUpdate = true;
                    }
                }
                else
                {
                    scale -= 0.0333333351f;
                    alpha += 15;
                    if (this.ai[0] == 239f)
                    {
                        netUpdate = true;
                    }

                    if (this.ai[0] == 240f)
                    {
                        Kill();
                    }
                }

                if (alpha < 90 && Main.rand.Next(3) == 0)
                {
                    Vector2 value60 = new Vector2((float) base.width, (float) base.height) * scale * 0.85f;
                    value60 /= 2f;
                    Vector2 value61 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * value60;
                    Vector2 position189 = base.Center + value61;
                    newColor = default(Color);
                    int num917 = Dust.NewDust(position189, 0, 0, 246, 0f, 0f, 0, newColor, 1f);
                    Main.dust[num917].position = base.Center + value61;
                    Main.dust[num917].velocity = Vector2.Zero;
                }

                float num918 = 0.8f;
                float num919 = 0.709803939f;
                float num920 = 0.282352954f;
                Lighting.AddLight(base.Center, num918 * 0.3f, num919 * 0.3f, num920 * 0.3f);
            }
            else if (aiStyle == 95)
            {
                if (localAI[0] > 2f)
                {
                    alpha -= 20;
                    if (alpha < 100)
                    {
                        alpha = 100;
                    }
                }
                else
                {
                    localAI[0] += 1f;
                }

                if (this.ai[0] > 30f)
                {
                    if (base.velocity.Y > -8f)
                    {
                        base.velocity.Y -= 0.05f;
                    }

                    base.velocity.X *= 0.98f;
                }
                else
                {
                    this.ai[0] += 1f;
                }

                rotation = base.velocity.X * 0.1f;
                if (wet)
                {
                    if (base.velocity.Y > 0f)
                    {
                        base.velocity.Y *= 0.98f;
                    }

                    if (base.velocity.Y > -8f)
                    {
                        base.velocity.Y -= 0.2f;
                    }

                    base.velocity.X *= 0.94f;
                }
            }
            else if (aiStyle == 96)
            {
                this.ai[0] += 0.6f;
                if (this.ai[0] > 500f)
                {
                    Kill();
                }

                for (int num921 = 0; num921 < 2; num921++)
                {
                    if (Main.rand.Next(3) != 0)
                    {
                        Vector2 position190 = new Vector2(base.position.X, base.position.Y);
                        int width142 = base.width;
                        int height141 = base.height;
                        newColor = default(Color);
                        int num922 = Dust.NewDust(position190, width142, height141, 170, 0f, 0f, 100, newColor, 1f);
                        Main.dust[num922].position = (Main.dust[num922].position + base.Center) / 2f;
                        Main.dust[num922].noGravity = true;
                        Main.dust[num922].velocity *= 0.1f;
                        if (num921 == 1)
                        {
                            Main.dust[num922].position += base.velocity / 2f;
                        }

                        float num923 = (800f - this.ai[0]) / 800f;
                        Main.dust[num922].scale *= num923 + 0.1f;
                    }
                }

                base.velocity.Y += 0.008f;
            }
            else if (aiStyle == 97)
            {
                frameCounter++;
                float num924 = 4f;
                if ((float) frameCounter < num924 * 1f)
                {
                    frame = 0;
                }
                else if ((float) frameCounter < num924 * 2f)
                {
                    frame = 1;
                }
                else if ((float) frameCounter < num924 * 3f)
                {
                    frame = 2;
                }
                else if ((float) frameCounter < num924 * 4f)
                {
                    frame = 3;
                }
                else if ((float) frameCounter < num924 * 5f)
                {
                    frame = 4;
                }
                else if ((float) frameCounter < num924 * 6f)
                {
                    frame = 3;
                }
                else if ((float) frameCounter < num924 * 7f)
                {
                    frame = 2;
                }
                else if ((float) frameCounter < num924 * 8f)
                {
                    frame = 1;
                }
                else
                {
                    frameCounter = 0;
                    frame = 0;
                }

                if (owner == Main.myPlayer)
                {
                    for (int num925 = 0; num925 < 1000; num925++)
                    {
                        if (num925 != whoAmI && Main.projectile[num925].active &&
                            Main.projectile[num925].owner == owner && Main.projectile[num925].type == type)
                        {
                            if (timeLeft >= Main.projectile[num925].timeLeft)
                            {
                                Main.projectile[num925].Kill();
                            }
                            else
                            {
                                Kill();
                            }
                        }
                    }
                }

                if (this.ai[0] == 0f)
                {
                    if ((double) base.velocity.Length() < 0.1)
                    {
                        base.velocity.X = 0f;
                        base.velocity.Y = 0f;
                        this.ai[0] = 1f;
                        this.ai[1] = 45f;
                    }
                    else
                    {
                        base.velocity *= 0.94f;
                        if (base.velocity.X < 0f)
                        {
                            base.direction = -1;
                        }
                        else
                        {
                            base.direction = 1;
                        }

                        spriteDirection = base.direction;
                    }
                }
                else
                {
                    if (Main.player[owner].Center.X < base.Center.X)
                    {
                        base.direction = -1;
                    }
                    else
                    {
                        base.direction = 1;
                    }

                    spriteDirection = base.direction;
                    this.ai[1] += 1f;
                    float num926 = 0.005f;
                    if (this.ai[1] > 0f)
                    {
                        base.velocity.Y -= num926;
                    }
                    else
                    {
                        base.velocity.Y += num926;
                    }

                    if (this.ai[1] >= 90f)
                    {
                        this.ai[1] *= -1f;
                    }
                }
            }
            else if (aiStyle == 98)
            {
                Vector2 value62 = new Vector2(this.ai[0], this.ai[1]);
                Vector2 vector84 = value62 - base.Center;
                if (vector84.Length() < base.velocity.Length())
                {
                    Kill();
                }
                else
                {
                    vector84.Normalize();
                    vector84 *= 15f;
                    base.velocity = Vector2.Lerp(base.velocity, vector84, 0.1f);
                    for (int num927 = 0; num927 < 2; num927++)
                    {
                        Vector2 center22 = base.Center;
                        newColor = default(Color);
                        int num928 = Dust.NewDust(center22, 0, 0, 228, 0f, 0f, 100, newColor, 1f);
                        Main.dust[num928].noGravity = true;
                        Main.dust[num928].position += new Vector2(4f);
                        Main.dust[num928].scale += Main.rand.NextFloat() * 1f;
                    }
                }
            }
            else if (aiStyle == 99 && type >= 556 && type <= 561)
            {
                AI_099_1();
            }
            else if (aiStyle == 99)
            {
                AI_099_2();
            }
            else if (aiStyle == 100)
            {
                Player player5 = Main.player[owner];
                Vector2 zero2 = Vector2.Zero;
                if (type == 535)
                {
                    zero2.X = (float) player5.direction * 6f;
                    zero2.Y = player5.gravDir * -14f;
                    this.ai[0] += 1f;
                    int num929 = 0;
                    if (this.ai[0] >= 60f)
                    {
                        num929++;
                    }

                    if (this.ai[0] >= 180f)
                    {
                        num929++;
                    }

                    if (this.ai[0] >= 240f)
                    {
                        Kill();
                        return;
                    }

                    bool flag39 = false;
                    if (this.ai[0] == 60f || this.ai[0] == 180f)
                    {
                        flag39 = true;
                    }

                    bool flag40 = this.ai[0] >= 180f;
                    if (flag40)
                    {
                        if (frame < 8)
                        {
                            frame = 8;
                        }

                        if (frame >= 12)
                        {
                            frame = 8;
                        }

                        frameCounter++;
                        if (++frameCounter >= 5)
                        {
                            frameCounter = 0;
                            if (++frame >= 12)
                            {
                                frame = 8;
                            }
                        }
                    }
                    else if (++frameCounter >= 5)
                    {
                        frameCounter = 0;
                        if (++frame >= 8)
                        {
                            frame = 0;
                        }
                    }

                    Vector2 center23 = player5.Center;
                    Vector2 vector85 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) -
                                       center23;
                    if (player5.gravDir == -1f)
                    {
                        vector85.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - center23.Y;
                    }

                    Vector2 velocity18 =
                        new Vector2((float) Math.Sign((vector85.X == 0f) ? ((float) player5.direction) : vector85.X),
                            0f);
                    if (velocity18.X != base.velocity.X || velocity18.Y != base.velocity.Y)
                    {
                        netUpdate = true;
                    }

                    base.velocity = velocity18;
                    if (soundDelay <= 0 && !flag40)
                    {
                        soundDelay = 10;
                        soundDelay *= 2;
                        if (this.ai[0] != 1f)
                        {
                            Main.PlaySound(SoundID.Item15, base.position);
                        }
                    }

                    if (this.ai[0] == 181f)
                    {
                        Main.PlaySound(4, (int) base.position.X, (int) base.position.Y, 17, 1f, 0f);
                    }

                    if (this.ai[0] > 10f && !flag40)
                    {
                        Vector2 vector86 =
                            base.Center + new Vector2((float) (player5.direction * 2), player5.gravDir * 5f);
                        float scaleFactor8 = MathHelper.Lerp(30f, 10f, (this.ai[0] - 10f) / 180f);
                        float num930 = Main.rand.NextFloat() * 6.28318548f;
                        for (float num931 = 0f; num931 < 1f; num931 += 1f)
                        {
                            Vector2 unitY7 = Vector2.UnitY;
                            double radians52 = (double) (num931 / 1f * 6.28318548f + num930);
                            vector = default(Vector2);
                            Vector2 value63 = unitY7.RotatedBy(radians52, vector);
                            Dust[] dust11 = Main.dust;
                            Vector2 position191 = vector86;
                            newColor = default(Color);
                            Dust dust12 = dust11[Dust.NewDust(position191, 0, 0, 228, 0f, 0f, 0, newColor, 1f)];
                            dust12.position = vector86 + value63 * scaleFactor8;
                            dust12.noGravity = true;
                            dust12.customData = player5;
                            dust12.velocity = value63 * -2f;
                        }
                    }

                    if (this.ai[0] > 180f && this.ai[0] <= 182f)
                    {
                        Vector2 vector87 =
                            base.Center + new Vector2((float) (player5.direction * 2), player5.gravDir * 5f);
                        float scaleFactor9 = MathHelper.Lerp(20f, 30f, (this.ai[0] - 180f) / 182f);
                        Main.rand.NextFloat();
                        for (float num932 = 0f; num932 < 10f; num932 += 1f)
                        {
                            Vector2 value64 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) *
                                              (Main.rand.NextFloat() * 0.5f + 0.5f);
                            Dust[] dust13 = Main.dust;
                            Vector2 position192 = vector87;
                            newColor = default(Color);
                            Dust dust14 = dust13[Dust.NewDust(position192, 0, 0, 228, 0f, 0f, 0, newColor, 1f)];
                            dust14.position = vector87 + value64 * scaleFactor9;
                            dust14.noGravity = true;
                            dust14.customData = player5;
                            dust14.velocity = value64 * 4f;
                            dust14.scale = 0.5f + Main.rand.NextFloat();
                        }
                    }

                    if (Main.myPlayer == owner)
                    {
                        bool flag41 = false;
                        flag41 = (!flag39 || player5.CheckMana(player5.inventory[player5.selectedItem].mana, true,
                                      false));
                        bool flag42 = player5.channel && flag41;
                        if ((!flag40 && !flag42) || this.ai[0] == 180f)
                        {
                            Vector2 vector88 = player5.Center +
                                               new Vector2((float) (player5.direction * 4), player5.gravDir * 2f);
                            int num933 = damage * (1 + num929);
                            vector88 = base.Center;
                            int num934 = 0;
                            float num935 = 0f;
                            for (int num936 = 0; num936 < 200; num936++)
                            {
                                NPC nPC9 = Main.npc[num936];
                                if (nPC9.active && Distance(nPC9.Center) < 500f && nPC9.CanBeChasedBy(this, false) &&
                                    Collision.CanHitLine(nPC9.position, nPC9.width, nPC9.height, vector88, 0, 0))
                                {
                                    Vector2 v4 = nPC9.Center - vector88;
                                    num935 += v4.ToRotation();
                                    num934++;
                                    int num937 = NewProjectile(vector88.X, vector88.Y, v4.X, v4.Y, 536, 0, 0f, owner,
                                        (float) whoAmI, 0f);
                                    Main.projectile[num937].Center = nPC9.Center;
                                    Main.projectile[num937].damage = num933;
                                    Main.projectile[num937].Damage();
                                    Main.projectile[num937].damage = 0;
                                    Main.projectile[num937].Center = vector88;
                                    this.ai[0] = 180f;
                                }
                            }

                            num935 = ((num934 == 0)
                                ? ((player5.direction == 1) ? 0f : 3.14159274f)
                                : (num935 / (float) num934));
                            for (int num938 = 0; num938 < 6; num938++)
                            {
                                Vector2 zero3 = Vector2.Zero;
                                if (Main.rand.Next(4) != 0)
                                {
                                    Vector2 spinningpoint37 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
                                    double radians53 = (double) num935;
                                    vector = default(Vector2);
                                    zero3 = spinningpoint37.RotatedBy(radians53, vector) * new Vector2(200f, 50f) *
                                            (Main.rand.NextFloat() * 0.7f + 0.3f);
                                }
                                else
                                {
                                    zero3 = Vector2.UnitX.RotatedByRandom(6.2831854820251465) * new Vector2(200f, 50f) *
                                            (Main.rand.NextFloat() * 0.7f + 0.3f);
                                }

                                NewProjectile(vector88.X, vector88.Y, zero3.X, zero3.Y, 536, 0, 0f, owner,
                                    (float) whoAmI, 0f);
                            }

                            this.ai[0] = 180f;
                            netUpdate = true;
                        }
                    }

                    Lighting.AddLight(base.Center, 0.9f, 0.75f, 0.1f);
                }

                rotation = ((player5.gravDir == 1f) ? 0f : 3.14159274f);
                spriteDirection = base.direction;
                timeLeft = 2;
                Vector2 vector89 = Main.OffsetsPlayerOnhand[player5.bodyFrame.Y / 56] * 2f;
                if (player5.direction != 1)
                {
                    vector89.X = (float) player5.bodyFrame.Width - vector89.X;
                }

                vector89 -= (player5.bodyFrame.Size() - new Vector2((float) player5.width, 42f)) / 2f;
                base.Center = (player5.position + vector89 + zero2 - base.velocity).Floor();
                player5.ChangeDir(base.direction);
                player5.heldProj = whoAmI;
                player5.itemTime = 2;
                player5.itemAnimation = 2;
            }
            else if (aiStyle == 101)
            {
                float num939 = 20f;
                localAI[0] += 1f;
                alpha = (int) MathHelper.Lerp(0f, 255f, localAI[0] / num939);
                int num940 = (int) this.ai[0];
                int num941 = -1;
                int num942 = -1;
                switch (type)
                {
                    case 536:
                        num941 = 535;
                        num942 = 0;
                        break;
                    case 591:
                        num942 = 1;
                        break;
                }

                switch (num942)
                {
                    case 1:
                        if (localAI[0] >= num939 || num940 < 0 || num940 > 255 || !Main.player[num940].active ||
                            Main.player[num940].dead)
                        {
                            Kill();
                            return;
                        }

                        if (type == 591)
                        {
                            base.Center = Mount.GetMinecartMechPoint(Main.player[num940], 20, -19) - base.velocity;
                            rotation = base.velocity.ToRotation() + 1.57079637f;
                            if (Math.Sign(base.velocity.X) != Math.Sign(Main.player[num940].velocity.X) &&
                                Main.player[num940].velocity.X != 0f)
                            {
                                Kill();
                                return;
                            }
                        }
                        else
                        {
                            base.Center = Main.player[num940].Center - base.velocity;
                        }

                        break;
                    case 0:
                        if (localAI[0] >= num939 || num940 < 0 || num940 > 1000 || !Main.projectile[num940].active ||
                            Main.projectile[num940].type != num941)
                        {
                            Kill();
                            return;
                        }

                        base.Center = Main.projectile[num940].Center - base.velocity;
                        break;
                }

                rotation = base.velocity.ToRotation() + 1.57079637f;
            }
            else if (aiStyle == 102)
            {
                int num943 = 0;
                float num944 = 0f;
                float x39 = 0f;
                float y38 = 0f;
                int num945 = -1;
                int num946 = 0;
                float num947 = 0f;
                bool flag43 = true;
                bool flag44 = false;
                bool flag45 = false;
                switch (type)
                {
                    case 539:
                        num943 = 407;
                        num944 = 210f;
                        x39 = 0.15f;
                        y38 = 0.075f;
                        num947 = 16f;
                        break;
                    case 573:
                        num943 = 424;
                        num944 = 90f;
                        num947 = 20f;
                        flag43 = false;
                        flag44 = true;
                        break;
                    case 574:
                        num943 = 420;
                        num944 = 180f;
                        x39 = 0.15f;
                        y38 = 0.075f;
                        num947 = 8f;
                        flag43 = false;
                        num945 = 576;
                        num946 = 65;
                        if (Main.expertMode)
                        {
                            num946 = 50;
                        }

                        flag45 = true;
                        break;
                }

                if (flag45)
                {
                    int num948 = (int) this.ai[1];
                    if (!Main.npc[num948].active || Main.npc[num948].type != num943)
                    {
                        Kill();
                        return;
                    }

                    timeLeft = 2;
                }

                this.ai[0] += 1f;
                if (this.ai[0] < num944)
                {
                    bool flag46 = true;
                    int num949 = (int) this.ai[1];
                    if (Main.npc[num949].active && Main.npc[num949].type == num943)
                    {
                        if (!flag44 && Main.npc[num949].oldPos[1] != Vector2.Zero)
                        {
                            base.position += Main.npc[num949].position - Main.npc[num949].oldPos[1];
                        }
                    }
                    else
                    {
                        this.ai[0] = num944;
                        flag46 = false;
                    }

                    if (flag46 && !flag44)
                    {
                        base.velocity += new Vector2((float) Math.Sign(Main.npc[num949].Center.X - base.Center.X),
                                             (float) Math.Sign(Main.npc[num949].Center.Y - base.Center.Y)) *
                                         new Vector2(x39, y38);
                        if (base.velocity.Length() > 6f)
                        {
                            base.velocity *= 6f / base.velocity.Length();
                        }
                    }

                    if (type == 539)
                    {
                        if (Main.rand.Next(12) == 0)
                        {
                            Vector2 center24 = base.Center;
                            newColor = default(Color);
                            int num950 = Dust.NewDust(center24, 8, 8, 180, 0f, 0f, 0, newColor, 1f);
                            Main.dust[num950].position = base.Center;
                            Main.dust[num950].velocity *= 0.2f;
                            Main.dust[num950].noGravity = true;
                        }

                        if (++frameCounter >= 4)
                        {
                            frameCounter = 0;
                            if (++frame >= Main.projFrames[type])
                            {
                                frame = 0;
                            }
                        }

                        rotation = base.velocity.X * 0.1f;
                    }

                    if (type == 573)
                    {
                        if (Main.rand.Next(2) == 0)
                        {
                            Vector2 center25 = base.Center;
                            newColor = default(Color);
                            int num951 = Dust.NewDust(center25, 8, 8, 242, 0f, 0f, 0, newColor, 1f);
                            Main.dust[num951].position = base.Center;
                            Main.dust[num951].velocity = base.velocity;
                            Main.dust[num951].noGravity = true;
                            Main.dust[num951].scale = 1.5f;
                        }

                        alpha = 255;
                    }

                    if (type == 574)
                    {
                        if (Main.rand.Next(10) == 0)
                        {
                            Vector2 center26 = base.Center;
                            newColor = default(Color);
                            int num952 = Dust.NewDust(center26, 8, 8, 242, 0f, 0f, 0, newColor, 1f);
                            Main.dust[num952].position = base.Center;
                            Main.dust[num952].velocity = base.velocity;
                            Main.dust[num952].noGravity = true;
                            Main.dust[num952].scale = 1.5f;
                        }

                        if (flag46)
                        {
                            int target = Main.npc[num949].target;
                            float num953 = base.velocity.ToRotation();
                            if (Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
                            {
                                num953 = DirectionTo(Main.player[target].Center).ToRotation();
                            }

                            rotation = rotation.AngleLerp(num953 + 1.57079637f, 0.2f);
                        }

                        frame = 1;
                    }
                }

                if (this.ai[0] == num944)
                {
                    bool flag47 = true;
                    int num954 = -1;
                    if (!flag43)
                    {
                        int num955 = (int) this.ai[1];
                        if (Main.npc[num955].active && Main.npc[num955].type == num943)
                        {
                            num954 = Main.npc[num955].target;
                        }
                        else
                        {
                            flag47 = false;
                        }
                    }
                    else
                    {
                        flag47 = false;
                    }

                    if (!flag47)
                    {
                        num954 = Player.FindClosest(base.position, base.width, base.height);
                    }

                    Vector2 value65 = Main.player[num954].Center - base.Center;
                    value65.X += (float) Main.rand.Next(-50, 51);
                    value65.Y += (float) Main.rand.Next(-50, 51);
                    value65.X *= (float) Main.rand.Next(80, 121) * 0.01f;
                    value65.Y *= (float) Main.rand.Next(80, 121) * 0.01f;
                    Vector2 vector90 = Vector2.Normalize(value65);
                    if (vector90.HasNaNs())
                    {
                        vector90 = Vector2.UnitY;
                    }

                    if (num945 == -1)
                    {
                        base.velocity = vector90 * num947;
                        netUpdate = true;
                    }
                    else
                    {
                        if (Main.netMode != 1 &&
                            Collision.CanHitLine(base.Center, 0, 0, Main.player[num954].Center, 0, 0))
                        {
                            NewProjectile(base.Center.X, base.Center.Y, vector90.X * num947, vector90.Y * num947,
                                num945, num946, 1f, Main.myPlayer, 0f, 0f);
                        }

                        this.ai[0] = 0f;
                    }
                }

                if (this.ai[0] >= num944)
                {
                    rotation = rotation.AngleLerp(base.velocity.ToRotation() + 1.57079637f, 0.4f);
                    if (type == 539)
                    {
                        if (++frameCounter >= 2)
                        {
                            frameCounter = 0;
                            if (++frame >= Main.projFrames[type])
                            {
                                frame = 0;
                            }
                        }

                        if (Main.rand.Next(2) == 0)
                        {
                            Vector2 position193 = base.position;
                            int width143 = base.width;
                            int height142 = base.height;
                            newColor = default(Color);
                            int num956 = Dust.NewDust(position193, width143, height142, 180, 0f, 0f, 100, newColor, 1f);
                            Main.dust[num956].scale += (float) Main.rand.Next(50) * 0.01f;
                            Main.dust[num956].noGravity = true;
                            Main.dust[num956].velocity *= 0.1f;
                            Main.dust[num956].fadeIn = Main.rand.NextFloat() * 1.5f;
                        }

                        if (Main.rand.Next(3) == 0)
                        {
                            Vector2 position194 = base.position;
                            int width144 = base.width;
                            int height143 = base.height;
                            newColor = default(Color);
                            int num957 = Dust.NewDust(position194, width144, height143, 176, 0f, 0f, 100, newColor, 1f);
                            Main.dust[num957].scale += 0.3f + (float) Main.rand.Next(50) * 0.01f;
                            Main.dust[num957].noGravity = true;
                            Main.dust[num957].velocity *= 0.1f;
                            Main.dust[num957].fadeIn = Main.rand.NextFloat() * 1.5f;
                        }
                    }

                    if (type == 573)
                    {
                        if (Main.rand.Next(4) == 0)
                        {
                            Vector2 center27 = base.Center;
                            newColor = default(Color);
                            int num958 = Dust.NewDust(center27, 8, 8, 242, 0f, 0f, 0, newColor, 1f);
                            Main.dust[num958].position = base.Center;
                            Main.dust[num958].velocity *= 0.2f;
                            Main.dust[num958].noGravity = true;
                            Main.dust[num958].scale = 1.5f;
                        }

                        alpha = 0;
                    }
                }
            }
            else if (aiStyle == 103)
            {
                scale = this.ai[1];
                this.ai[0] += 1f;
                if (this.ai[0] >= 30f)
                {
                    alpha += 25;
                    if (alpha >= 250)
                    {
                        Kill();
                    }
                }
                else if (this.ai[0] >= 0f)
                {
                    alpha -= 25;
                    if (alpha < 0)
                    {
                        alpha = 0;
                        if (localAI[1] == 0f && Main.netMode != 1 && localAI[0] != 0f)
                        {
                            localAI[1] = 1f;
                            NPC.NewNPC((int) base.Center.X, (int) base.Bottom.Y, (int) localAI[0], 0, 0f, 0f, 0f, 0f,
                                255);
                        }
                    }
                }
            }
            else if (aiStyle == 104)
            {
                if (this.ai[0] == 1f)
                {
                    scale *= 0.995f;
                    alpha += 3;
                    if (alpha >= 250)
                    {
                        Kill();
                    }
                }
                else
                {
                    scale *= 1.01f;
                    alpha -= 7;
                    if (alpha < 0)
                    {
                        alpha = 0;
                        this.ai[0] = 1f;
                    }
                }

                frameCounter++;
                if (frameCounter > 6)
                {
                    frameCounter = 0;
                    frame++;
                    if (frame > 3)
                    {
                        frame = 0;
                    }
                }

                base.velocity.Y -= 0.03f;
                base.velocity.X *= 0.97f;
            }
            else if (aiStyle == 105)
            {
                float num959 = 1f - (float) alpha / 255f;
                num959 *= scale;
                Lighting.AddLight(base.Center, 0.2f * num959, 0.275f * num959, 0.075f * num959);
                localAI[0] += 1f;
                if (localAI[0] >= 90f)
                {
                    localAI[0] *= -1f;
                }

                if (localAI[0] >= 0f)
                {
                    scale += 0.003f;
                }
                else
                {
                    scale -= 0.003f;
                }

                rotation += 0.0025f * scale;
                float num960 = 1f;
                float num961 = 1f;
                if (identity % 6 == 0)
                {
                    num961 *= -1f;
                }

                if (identity % 6 == 1)
                {
                    num960 *= -1f;
                }

                if (identity % 6 == 2)
                {
                    num961 *= -1f;
                    num960 *= -1f;
                }

                if (identity % 6 == 3)
                {
                    num961 = 0f;
                }

                if (identity % 6 == 4)
                {
                    num960 = 0f;
                }

                localAI[1] += 1f;
                if (localAI[1] > 60f)
                {
                    localAI[1] = -180f;
                }

                if (localAI[1] >= -60f)
                {
                    base.velocity.X += 0.002f * num961;
                    base.velocity.Y += 0.002f * num960;
                }
                else
                {
                    base.velocity.X -= 0.002f * num961;
                    base.velocity.Y -= 0.002f * num960;
                }

                this.ai[0] += 1f;
                if (this.ai[0] > 5400f)
                {
                    damage = 0;
                    this.ai[1] = 1f;
                    if (alpha < 255)
                    {
                        alpha += 5;
                        if (alpha > 255)
                        {
                            alpha = 255;
                        }
                    }
                    else if (owner == Main.myPlayer)
                    {
                        Kill();
                    }
                }
                else
                {
                    float num962 = (base.Center - Main.player[owner].Center).Length() / 100f;
                    if (num962 > 4f)
                    {
                        num962 *= 1.1f;
                    }

                    if (num962 > 5f)
                    {
                        num962 *= 1.2f;
                    }

                    if (num962 > 6f)
                    {
                        num962 *= 1.3f;
                    }

                    if (num962 > 7f)
                    {
                        num962 *= 1.4f;
                    }

                    if (num962 > 8f)
                    {
                        num962 *= 1.5f;
                    }

                    if (num962 > 9f)
                    {
                        num962 *= 1.6f;
                    }

                    if (num962 > 10f)
                    {
                        num962 *= 1.7f;
                    }

                    if (!Main.player[owner].sporeSac)
                    {
                        num962 += 100f;
                    }

                    this.ai[0] += num962;
                    if (alpha > 50)
                    {
                        alpha -= 10;
                        if (alpha < 50)
                        {
                            alpha = 50;
                        }
                    }
                }

                bool flag48 = false;
                Vector2 value66 = new Vector2(0f, 0f);
                float num963 = 280f;
                for (int num964 = 0; num964 < 200; num964++)
                {
                    if (Main.npc[num964].CanBeChasedBy(this, false))
                    {
                        float num965 = Main.npc[num964].position.X + (float) (Main.npc[num964].width / 2);
                        float num966 = Main.npc[num964].position.Y + (float) (Main.npc[num964].height / 2);
                        float num967 = Math.Abs(base.position.X + (float) (base.width / 2) - num965) +
                                       Math.Abs(base.position.Y + (float) (base.height / 2) - num966);
                        if (num967 < num963)
                        {
                            num963 = num967;
                            value66 = Main.npc[num964].Center;
                            flag48 = true;
                        }
                    }
                }

                if (flag48)
                {
                    Vector2 vector91 = value66 - base.Center;
                    vector91.Normalize();
                    vector91 *= 0.75f;
                    base.velocity = (base.velocity * 10f + vector91) / 11f;
                }
                else if ((double) base.velocity.Length() > 0.2)
                {
                    base.velocity *= 0.98f;
                }
            }
            else if (aiStyle == 106)
            {
                rotation += base.velocity.X * 0.02f;
                if (base.velocity.X < 0f)
                {
                    rotation -= Math.Abs(base.velocity.Y) * 0.02f;
                }
                else
                {
                    rotation += Math.Abs(base.velocity.Y) * 0.02f;
                }

                base.velocity *= 0.98f;
                this.ai[0] += 1f;
                if (this.ai[0] >= 60f)
                {
                    if (alpha < 255)
                    {
                        alpha += 5;
                        if (alpha > 255)
                        {
                            alpha = 255;
                        }
                    }
                    else if (owner == Main.myPlayer)
                    {
                        Kill();
                    }
                }
                else if (alpha > 80)
                {
                    alpha -= 30;
                    if (alpha < 80)
                    {
                        alpha = 80;
                    }
                }
            }
            else if (aiStyle == 107)
            {
                float num968 = 10f;
                float scaleFactor10 = 5f;
                float num969 = 40f;
                if (type == 575)
                {
                    if (timeLeft > 30 && alpha > 0)
                    {
                        alpha -= 25;
                    }

                    if (timeLeft > 30 && alpha < 128 &&
                        Collision.SolidCollision(base.position, base.width, base.height))
                    {
                        alpha = 128;
                    }

                    if (alpha < 0)
                    {
                        alpha = 0;
                    }

                    if (++frameCounter > 4)
                    {
                        frameCounter = 0;
                        if (++frame >= 4)
                        {
                            frame = 0;
                        }
                    }

                    Lighting.AddLight(base.Center, 0.5f, 0.1f, 0.3f);
                }
                else if (type == 596)
                {
                    num968 = 10f;
                    scaleFactor10 = 7.5f;
                    if (timeLeft > 30 && alpha > 0)
                    {
                        alpha -= 25;
                    }

                    if (timeLeft > 30 && alpha < 128 &&
                        Collision.SolidCollision(base.position, base.width, base.height))
                    {
                        alpha = 128;
                    }

                    if (alpha < 0)
                    {
                        alpha = 0;
                    }

                    if (++frameCounter > 4)
                    {
                        frameCounter = 0;
                        if (++frame >= 4)
                        {
                            frame = 0;
                        }
                    }

                    float num970 = 0.5f;
                    if (timeLeft < 120)
                    {
                        num970 = 1.1f;
                    }

                    if (timeLeft < 60)
                    {
                        num970 = 1.6f;
                    }

                    this.ai[1] += 1f;
                    float num1188 = this.ai[1] / 180f;
                    for (float num971 = 0f; num971 < 3f; num971 += 1f)
                    {
                        if (Main.rand.Next(3) != 0)
                        {
                            return;
                        }

                        Dust[] dust15 = Main.dust;
                        Vector2 center28 = base.Center;
                        newColor = default(Color);
                        Dust dust16 = dust15[Dust.NewDust(center28, 0, 0, 27, 0f, -2f, 0, newColor, 1f)];
                        Dust dust17 = dust16;
                        Vector2 center29 = base.Center;
                        Vector2 unitY8 = Vector2.UnitY;
                        double radians54 = (double) (num971 * 6.28318548f / 3f + this.ai[1]);
                        vector = default(Vector2);
                        dust17.position = center29 + unitY8.RotatedBy(radians54, vector) * 10f;
                        dust16.noGravity = true;
                        dust16.velocity = DirectionFrom(dust16.position);
                        dust16.scale = num970;
                        dust16.fadeIn = 0.5f;
                        dust16.alpha = 200;
                    }

                    if (timeLeft < 4)
                    {
                        int num972 = 40;
                        if (Main.expertMode)
                        {
                            num972 = 30;
                        }

                        base.position = base.Center;
                        base.width = (base.height = 60);
                        base.Center = base.position;
                        damage = num972;
                        for (int num973 = 0; num973 < 10; num973++)
                        {
                            Dust[] dust18 = Main.dust;
                            Vector2 position195 = base.position;
                            int width145 = base.width;
                            int height144 = base.height;
                            int num974 = Utils.SelectRandom<int>(Main.rand, 27, 6);
                            newColor = default(Color);
                            Dust dust16 =
                                dust18[
                                    Dust.NewDust(position195, width145, height144, num974, 0f, -2f, 0, newColor, 1f)];
                            dust16.noGravity = true;
                            if (dust16.position != base.Center)
                            {
                                dust16.velocity = DirectionTo(dust16.position) * 3f;
                            }
                        }
                    }
                }

                int num975 = (int) this.ai[0];
                if (num975 >= 0 && Main.player[num975].active && !Main.player[num975].dead)
                {
                    if (Distance(Main.player[num975].Center) > num969)
                    {
                        Vector2 vector92 = DirectionTo(Main.player[num975].Center);
                        if (vector92.HasNaNs())
                        {
                            vector92 = Vector2.UnitY;
                        }

                        base.velocity = (base.velocity * (num968 - 1f) + vector92 * scaleFactor10) / num968;
                    }
                }
                else
                {
                    if (timeLeft > 30)
                    {
                        timeLeft = 30;
                    }

                    if (this.ai[0] != -1f)
                    {
                        this.ai[0] = -1f;
                        netUpdate = true;
                    }
                }
            }
            else if (aiStyle == 108)
            {
                if (type == 578 && localAI[0] == 0f)
                {
                    localAI[0] = 1f;
                    int num976 = Player.FindClosest(base.Center, 0, 0);
                    Vector2 vector93 = Main.player[num976].Center - base.Center;
                    if (vector93 == Vector2.Zero)
                    {
                        vector93 = Vector2.UnitY;
                    }

                    this.ai[1] = vector93.ToRotation();
                    netUpdate = true;
                }

                this.ai[0] += 1f;
                if (this.ai[0] <= 50f)
                {
                    if (type == 579)
                    {
                        if (Main.rand.Next(4) == 0)
                        {
                            Vector2 vector94 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                            Dust[] dust19 = Main.dust;
                            Vector2 position196 = base.Center - vector94 * 30f;
                            newColor = default(Color);
                            Dust dust20 = dust19[Dust.NewDust(position196, 0, 0, 229, 0f, 0f, 0, newColor, 1f)];
                            dust20.noGravity = true;
                            dust20.position = base.Center - vector94 * (float) Main.rand.Next(10, 21);
                            Dust dust21 = dust20;
                            Vector2 spinningpoint38 = vector94;
                            vector = default(Vector2);
                            dust21.velocity = spinningpoint38.RotatedBy(1.5707963705062866, vector) * 4f;
                            dust20.scale = 0.5f + Main.rand.NextFloat();
                            dust20.fadeIn = 0.5f;
                        }

                        if (Main.rand.Next(4) == 0)
                        {
                            Vector2 vector95 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                            Dust[] dust22 = Main.dust;
                            Vector2 position197 = base.Center - vector95 * 30f;
                            newColor = default(Color);
                            Dust dust23 = dust22[Dust.NewDust(position197, 0, 0, 240, 0f, 0f, 0, newColor, 1f)];
                            dust23.noGravity = true;
                            dust23.position = base.Center - vector95 * 30f;
                            Dust dust24 = dust23;
                            Vector2 spinningpoint39 = vector95;
                            vector = default(Vector2);
                            dust24.velocity = spinningpoint39.RotatedBy(-1.5707963705062866, vector) * 2f;
                            dust23.scale = 0.5f + Main.rand.NextFloat();
                            dust23.fadeIn = 0.5f;
                        }
                    }

                    if (type == 578 && Main.rand.Next(2) == 0)
                    {
                        Vector2 vector96 = this.ai[1].ToRotationVector2();
                        Vector2 spinningpoint40 = vector96;
                        vector = default(Vector2);
                        Vector2 vector97 = spinningpoint40.RotatedBy(1.5707963705062866, vector) *
                                           (float) (Main.rand.Next(2) == 0).ToDirectionInt() *
                                           (float) Main.rand.Next(10, 21);
                        Vector2 value67 = vector96 * (float) Main.rand.Next(-80, 81);
                        Vector2 value68 = value67 - vector97;
                        value68 /= 10f;
                        int num977 = 229;
                        Dust[] dust25 = Main.dust;
                        Vector2 center30 = base.Center;
                        int num978 = num977;
                        newColor = default(Color);
                        Dust dust26 = dust25[Dust.NewDust(center30, 0, 0, num978, 0f, 0f, 0, newColor, 1f)];
                        dust26.noGravity = true;
                        dust26.position = base.Center + vector97;
                        dust26.velocity = value68;
                        dust26.scale = 0.5f + Main.rand.NextFloat();
                        dust26.fadeIn = 0.5f;
                        value67 = vector96 * (float) Main.rand.Next(40, 121);
                        value68 = value67 - vector97 / 2f;
                        value68 /= 10f;
                        Dust[] dust27 = Main.dust;
                        Vector2 center31 = base.Center;
                        int num979 = num977;
                        newColor = default(Color);
                        dust26 = dust27[Dust.NewDust(center31, 0, 0, num979, 0f, 0f, 0, newColor, 1f)];
                        dust26.noGravity = true;
                        dust26.position = base.Center + vector97 / 2f;
                        dust26.velocity = value68;
                        dust26.scale = 1f + Main.rand.NextFloat();
                    }
                }
                else if (this.ai[0] <= 90f)
                {
                    scale = (this.ai[0] - 50f) / 40f;
                    alpha = 255 - (int) (255f * scale);
                    rotation -= 0.157079637f;
                    if (type == 579)
                    {
                        if (Main.rand.Next(2) == 0)
                        {
                            Vector2 vector98 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                            Dust[] dust28 = Main.dust;
                            Vector2 position198 = base.Center - vector98 * 30f;
                            newColor = default(Color);
                            Dust dust29 = dust28[Dust.NewDust(position198, 0, 0, 229, 0f, 0f, 0, newColor, 1f)];
                            dust29.noGravity = true;
                            dust29.position = base.Center - vector98 * (float) Main.rand.Next(10, 21);
                            Dust dust30 = dust29;
                            Vector2 spinningpoint41 = vector98;
                            vector = default(Vector2);
                            dust30.velocity = spinningpoint41.RotatedBy(1.5707963705062866, vector) * 6f;
                            dust29.scale = 0.5f + Main.rand.NextFloat();
                            dust29.fadeIn = 0.5f;
                            dust29.customData = base.Center;
                        }

                        if (Main.rand.Next(2) == 0)
                        {
                            Vector2 vector99 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                            Dust[] dust31 = Main.dust;
                            Vector2 position199 = base.Center - vector99 * 30f;
                            newColor = default(Color);
                            Dust dust32 = dust31[Dust.NewDust(position199, 0, 0, 240, 0f, 0f, 0, newColor, 1f)];
                            dust32.noGravity = true;
                            dust32.position = base.Center - vector99 * 30f;
                            Dust dust33 = dust32;
                            Vector2 spinningpoint42 = vector99;
                            vector = default(Vector2);
                            dust33.velocity = spinningpoint42.RotatedBy(-1.5707963705062866, vector) * 3f;
                            dust32.scale = 0.5f + Main.rand.NextFloat();
                            dust32.fadeIn = 0.5f;
                            dust32.customData = base.Center;
                        }
                    }

                    if (type == 578)
                    {
                        Vector2 vector100 = this.ai[1].ToRotationVector2();
                        Vector2 spinningpoint43 = vector100;
                        vector = default(Vector2);
                        Vector2 value69 = spinningpoint43.RotatedBy(1.5707963705062866, vector) *
                                          (float) (Main.rand.Next(2) == 0).ToDirectionInt() *
                                          (float) Main.rand.Next(10, 21);
                        vector100 *= (float) Main.rand.Next(-80, 81);
                        Vector2 value70 = vector100 - value69;
                        value70 /= 10f;
                        int num980 = Utils.SelectRandom<int>(Main.rand, 229, 229);
                        Dust[] dust34 = Main.dust;
                        Vector2 center32 = base.Center;
                        int num981 = num980;
                        newColor = default(Color);
                        Dust dust35 = dust34[Dust.NewDust(center32, 0, 0, num981, 0f, 0f, 0, newColor, 1f)];
                        dust35.noGravity = true;
                        dust35.position = base.Center + value69;
                        dust35.velocity = value70;
                        dust35.scale = 0.5f + Main.rand.NextFloat();
                        dust35.fadeIn = 0.5f;
                        if (this.ai[0] == 90f && Main.netMode != 1)
                        {
                            Vector2 vector101 = this.ai[1].ToRotationVector2() * 8f;
                            float ai2 = (float) Main.rand.Next(80);
                            NewProjectile(base.Center.X - vector101.X, base.Center.Y - vector101.Y, vector101.X,
                                vector101.Y, 580, 15, 1f, Main.myPlayer, this.ai[1], ai2);
                        }
                    }
                    else if (type == 579 && this.ai[0] == 90f && Main.netMode != 1)
                    {
                        for (int num982 = 0; num982 < 2; num982++)
                        {
                            int num983 = NPC.NewNPC((int) base.Center.X, (int) base.Center.Y, 427, whoAmI, 0f, 0f, 0f,
                                0f, 255);
                            Main.npc[num983].velocity =
                                -Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (float) Main.rand.Next(4, 9) -
                                Vector2.UnitY * 2f;
                            Main.npc[num983].netUpdate = true;
                        }
                    }
                }
                else if (this.ai[0] <= 120f)
                {
                    scale = 1f;
                    alpha = 0;
                    rotation -= 0.05235988f;
                    if (Main.rand.Next(2) == 0)
                    {
                        Vector2 vector102 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                        Dust[] dust36 = Main.dust;
                        Vector2 position200 = base.Center - vector102 * 30f;
                        newColor = default(Color);
                        Dust dust37 = dust36[Dust.NewDust(position200, 0, 0, 229, 0f, 0f, 0, newColor, 1f)];
                        dust37.noGravity = true;
                        dust37.position = base.Center - vector102 * (float) Main.rand.Next(10, 21);
                        Dust dust38 = dust37;
                        Vector2 spinningpoint44 = vector102;
                        vector = default(Vector2);
                        dust38.velocity = spinningpoint44.RotatedBy(1.5707963705062866, vector) * 6f;
                        dust37.scale = 0.5f + Main.rand.NextFloat();
                        dust37.fadeIn = 0.5f;
                        dust37.customData = base.Center;
                    }
                    else
                    {
                        Vector2 vector103 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                        Dust[] dust39 = Main.dust;
                        Vector2 position201 = base.Center - vector103 * 30f;
                        newColor = default(Color);
                        Dust dust40 = dust39[Dust.NewDust(position201, 0, 0, 240, 0f, 0f, 0, newColor, 1f)];
                        dust40.noGravity = true;
                        dust40.position = base.Center - vector103 * 30f;
                        Dust dust41 = dust40;
                        Vector2 spinningpoint45 = vector103;
                        vector = default(Vector2);
                        dust41.velocity = spinningpoint45.RotatedBy(-1.5707963705062866, vector) * 3f;
                        dust40.scale = 0.5f + Main.rand.NextFloat();
                        dust40.fadeIn = 0.5f;
                        dust40.customData = base.Center;
                    }
                }
                else
                {
                    scale = 1f - (this.ai[0] - 120f) / 60f;
                    alpha = 255 - (int) (255f * scale);
                    rotation -= 0.104719758f;
                    if (alpha >= 255)
                    {
                        Kill();
                    }

                    for (int num984 = 0; num984 < 2; num984++)
                    {
                        switch (Main.rand.Next(3))
                        {
                            case 0:
                            {
                                Vector2 vector105 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * scale;
                                Dust[] dust45 = Main.dust;
                                Vector2 position203 = base.Center - vector105 * 30f;
                                newColor = default(Color);
                                Dust dust46 = dust45[Dust.NewDust(position203, 0, 0, 229, 0f, 0f, 0, newColor, 1f)];
                                dust46.noGravity = true;
                                dust46.position = base.Center - vector105 * (float) Main.rand.Next(10, 21);
                                Dust dust47 = dust46;
                                Vector2 spinningpoint47 = vector105;
                                vector = default(Vector2);
                                dust47.velocity = spinningpoint47.RotatedBy(1.5707963705062866, vector) * 6f;
                                dust46.scale = 0.5f + Main.rand.NextFloat();
                                dust46.fadeIn = 0.5f;
                                dust46.customData = base.Center;
                                break;
                            }
                            case 1:
                            {
                                Vector2 vector104 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * scale;
                                Dust[] dust42 = Main.dust;
                                Vector2 position202 = base.Center - vector104 * 30f;
                                newColor = default(Color);
                                Dust dust43 = dust42[Dust.NewDust(position202, 0, 0, 240, 0f, 0f, 0, newColor, 1f)];
                                dust43.noGravity = true;
                                dust43.position = base.Center - vector104 * 30f;
                                Dust dust44 = dust43;
                                Vector2 spinningpoint46 = vector104;
                                vector = default(Vector2);
                                dust44.velocity = spinningpoint46.RotatedBy(-1.5707963705062866, vector) * 3f;
                                dust43.scale = 0.5f + Main.rand.NextFloat();
                                dust43.fadeIn = 0.5f;
                                dust43.customData = base.Center;
                                break;
                            }
                        }
                    }
                }
            }
            else if (aiStyle == 109)
            {
                if (localAI[1] == 0f)
                {
                    localAI[1] = base.velocity.Length();
                }

                if (this.ai[0] == 0f)
                {
                    localAI[0] += 1f;
                    if (localAI[0] > 30f)
                    {
                        this.ai[0] = 1f;
                        localAI[0] = 0f;
                        return;
                    }
                }
                else if (this.ai[0] == 1f)
                {
                    Vector2 zero4 = Vector2.Zero;
                    if (type != 582 || !Main.npc[(int) this.ai[1]].active || Main.npc[(int) this.ai[1]].type != 124)
                    {
                        Kill();
                        return;
                    }

                    zero4 = Main.npc[(int) this.ai[1]].Center;
                    tileCollide = false;
                    float num985 = localAI[1];
                    Vector2 vector106 = zero4 - base.Center;
                    if (vector106.Length() < num985)
                    {
                        Kill();
                        return;
                    }

                    vector106.Normalize();
                    vector106 *= num985;
                    base.velocity = Vector2.Lerp(base.velocity, vector106, 0.04f);
                }

                rotation += 0.314159274f;
            }
            else if (aiStyle == 110)
            {
                if (localAI[1] == 0f)
                {
                    localAI[1] = base.velocity.Length();
                }

                Vector2 zero5 = Vector2.Zero;
                if (Main.npc[(int) this.ai[0]].active && Main.npc[(int) this.ai[0]].townNPC)
                {
                    zero5 = Main.npc[(int) this.ai[0]].Center;
                    float num986 = localAI[1];
                    Vector2 vector107 = zero5 - base.Center;
                    if (!(vector107.Length() < num986))
                    {
                        hitbox = base.Hitbox;
                        if (!hitbox.Intersects(Main.npc[(int) this.ai[0]].Hitbox))
                        {
                            vector107.Normalize();
                            vector107 *= num986;
                            if (vector107.Y < base.velocity.Y)
                            {
                                vector107.Y = base.velocity.Y;
                            }

                            vector107.Y += 1f;
                            base.velocity = Vector2.Lerp(base.velocity, vector107, 0.04f);
                            rotation += base.velocity.X * 0.05f;
                            return;
                        }
                    }

                    Kill();
                    int num987 = Main.npc[(int) this.ai[0]].lifeMax - Main.npc[(int) this.ai[0]].life;
                    if (num987 > 20)
                    {
                        num987 = 20;
                    }

                    if (num987 > 0)
                    {
                        Main.npc[(int) this.ai[0]].life += num987;
                        Main.npc[(int) this.ai[0]].HealEffect(num987, true);
                    }
                }
                else
                {
                    Kill();
                }
            }
            else if (aiStyle == 111)
            {
                if (!Main.npc[(int) this.ai[1]].active || Main.npc[(int) this.ai[1]].type != 20 ||
                    Main.npc[(int) this.ai[1]].ai[0] != 14f)
                {
                    Kill();
                }
                else
                {
                    this.ai[0] += 1f;
                    rotation += 0.0104719754f;
                    scale = this.ai[0] / 100f;
                    if (scale > 1f)
                    {
                        scale = 1f;
                    }

                    alpha = (int) (255f * (1f - scale));
                    float num988 = 300f;
                    if (this.ai[0] >= 100f)
                    {
                        num988 = MathHelper.Lerp(300f, 600f, (this.ai[0] - 100f) / 200f);
                    }

                    if (num988 > 600f)
                    {
                        num988 = 600f;
                    }

                    if (this.ai[0] >= 500f)
                    {
                        alpha = (int) MathHelper.Lerp(0f, 255f, (this.ai[0] - 500f) / 100f);
                        num988 = MathHelper.Lerp(600f, 1200f, (this.ai[0] - 500f) / 100f);
                        rotation += 0.0104719754f;
                    }

                    if (Main.rand.Next(4) == 0)
                    {
                        float scaleFactor11 = num988;
                        Vector2 value71 = new Vector2((float) Main.rand.Next(-10, 11), (float) Main.rand.Next(-10, 11));
                        float num989 = (float) Main.rand.Next(3, 9);
                        value71.Normalize();
                        Vector2 position204 = new Vector2(base.position.X, base.position.Y);
                        int width146 = base.width;
                        int height145 = base.height;
                        newColor = default(Color);
                        int num990 = Dust.NewDust(position204, width146, height145, 163, 0f, 0f, 100, newColor, 1f);
                        Main.dust[num990].noGravity = true;
                        Main.dust[num990].position = base.Center + value71 * scaleFactor11;
                        if (Main.rand.Next(8) == 0)
                        {
                            Main.dust[num990].velocity = value71 * (0f - num989) * 3f;
                            Main.dust[num990].scale += 0.5f;
                        }
                        else
                        {
                            Main.dust[num990].velocity = value71 * (0f - num989);
                        }
                    }

                    if (Main.rand.Next(2) == 0)
                    {
                        Vector2 value72 = new Vector2((float) Main.rand.Next(-10, 11), (float) Main.rand.Next(-10, 11));
                        float num991 = (float) Main.rand.Next(3, 9);
                        value72.Normalize();
                        Vector2 position205 = new Vector2(base.position.X, base.position.Y);
                        int width147 = base.width;
                        int height146 = base.height;
                        newColor = default(Color);
                        int num992 = Dust.NewDust(position205, width147, height146, 163, 0f, 0f, 100, newColor, 1.5f);
                        Main.dust[num992].noGravity = true;
                        Main.dust[num992].position = base.Center + value72 * 30f;
                        if (Main.rand.Next(8) == 0)
                        {
                            Main.dust[num992].velocity = value72 * (0f - num991) * 3f;
                            Main.dust[num992].scale += 0.5f;
                        }
                        else
                        {
                            Main.dust[num992].velocity = value72 * (0f - num991);
                        }
                    }

                    if (this.ai[0] >= 30f && Main.netMode != 2)
                    {
                        Player player6 = Main.player[Main.myPlayer];
                        if (player6.active && !player6.dead && Distance(player6.Center) <= num988 &&
                            player6.FindBuffIndex(165) == -1)
                        {
                            player6.AddBuff(165, 120, true);
                        }
                    }

                    if (this.ai[0] >= 30f && this.ai[0] % 10f == 0f && Main.netMode != 1)
                    {
                        for (int num993 = 0; num993 < 200; num993++)
                        {
                            NPC nPC10 = Main.npc[num993];
                            if (nPC10.type != 488 && nPC10.active && Distance(nPC10.Center) <= num988)
                            {
                                if (nPC10.townNPC && (nPC10.FindBuffIndex(165) == -1 ||
                                                      nPC10.buffTime[nPC10.FindBuffIndex(165)] <= 20))
                                {
                                    nPC10.AddBuff(165, 120, false);
                                }
                                else if (!nPC10.friendly && nPC10.lifeMax > 5 && !nPC10.dontTakeDamage &&
                                         (nPC10.FindBuffIndex(186) == -1 ||
                                          nPC10.buffTime[nPC10.FindBuffIndex(186)] <= 20) &&
                                         (nPC10.dryadBane || Collision.CanHit(base.Center, 1, 1, nPC10.position,
                                              nPC10.width, nPC10.height)))
                                {
                                    nPC10.AddBuff(186, 120, false);
                                }
                            }
                        }
                    }

                    if (this.ai[0] >= 570f)
                    {
                        Kill();
                    }
                }
            }
            else if (aiStyle == 112)
            {
                if (type == 590)
                {
                    if (++frameCounter >= 4)
                    {
                        frameCounter = 0;
                        if (++frame >= 3)
                        {
                            frame = 0;
                        }
                    }

                    if (alpha > 0)
                    {
                        alpha -= 15;
                    }

                    if (alpha < 0)
                    {
                        alpha = 0;
                    }

                    if (alpha == 0)
                    {
                        float num994 = (float) Main.rand.Next(28, 42) * 0.005f;
                        num994 += (float) (270 - Main.mouseTextColor) / 500f;
                        float num995 = 0.1f;
                        float num996 = 0.3f + num994 / 2f;
                        float num997 = 0.6f + num994;
                        float num998 = 0.35f;
                        num995 *= num998;
                        num996 *= num998;
                        num997 *= num998;
                        Lighting.AddLight(base.Center, num995, num996, num997);
                    }

                    base.velocity = new Vector2(0f,
                        (float) Math.Sin((double) (6.28318548f * this.ai[0] / 180f)) * 0.15f);
                    this.ai[0] += 1f;
                    if (this.ai[0] >= 180f)
                    {
                        this.ai[0] = 0f;
                    }
                }

                if (type == 644)
                {
                    Color newColor3 = Main.hslToRgb(this.ai[0], 1f, 0.5f);
                    int num999 = (int) this.ai[1];
                    if (num999 < 0 || num999 >= 1000 ||
                        (!Main.projectile[num999].active && Main.projectile[num999].type != 643))
                    {
                        this.ai[1] = -1f;
                    }
                    else
                    {
                        DelegateMethods.v3_1 = newColor3.ToVector3() * 0.5f;
                        Utils.PlotTileLine(base.Center, Main.projectile[num999].Center, 8f, DelegateMethods.CastLight);
                    }

                    if (localAI[0] == 0f)
                    {
                        localAI[0] = Main.rand.NextFloat() * 0.8f + 0.8f;
                        base.direction = ((Main.rand.Next(2) > 0) ? 1 : (-1));
                    }

                    rotation = localAI[1] / 40f * 6.28318548f * (float) base.direction;
                    if (alpha > 0)
                    {
                        alpha -= 8;
                    }

                    if (alpha < 0)
                    {
                        alpha = 0;
                    }

                    if (alpha == 0)
                    {
                        Lighting.AddLight(base.Center, newColor3.ToVector3() * 0.5f);
                    }

                    for (int num1000 = 0; num1000 < 2; num1000++)
                    {
                        if (Main.rand.Next(10) == 0)
                        {
                            Vector2 unitY9 = Vector2.UnitY;
                            double radians55 = (double) ((float) num1000 * 3.14159274f);
                            vector = default(Vector2);
                            Vector2 spinningpoint48 = unitY9.RotatedBy(radians55, vector);
                            double radians56 = (double) rotation;
                            vector = default(Vector2);
                            Vector2 value73 = spinningpoint48.RotatedBy(radians56, vector);
                            Dust dust48 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor3, 1.5f)];
                            dust48.noGravity = true;
                            dust48.noLight = true;
                            dust48.scale = Opacity * localAI[0];
                            dust48.position = base.Center;
                            dust48.velocity = value73 * 2.5f;
                        }
                    }

                    for (int num1001 = 0; num1001 < 2; num1001++)
                    {
                        if (Main.rand.Next(10) == 0)
                        {
                            Vector2 unitY10 = Vector2.UnitY;
                            double radians57 = (double) ((float) num1001 * 3.14159274f);
                            vector = default(Vector2);
                            Vector2 value74 = unitY10.RotatedBy(radians57, vector);
                            Dust dust49 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor3, 1.5f)];
                            dust49.noGravity = true;
                            dust49.noLight = true;
                            dust49.scale = Opacity * localAI[0];
                            dust49.position = base.Center;
                            dust49.velocity = value74 * 2.5f;
                        }
                    }

                    if (Main.rand.Next(10) == 0)
                    {
                        float scaleFactor12 = 1f + Main.rand.NextFloat() * 2f;
                        float fadeIn = 1f + Main.rand.NextFloat();
                        float num1002 = 1f + Main.rand.NextFloat();
                        Vector2 vector108 = Utils.RandomVector2(Main.rand, -1f, 1f);
                        if (vector108 != Vector2.Zero)
                        {
                            vector108.Normalize();
                        }

                        vector108 *= 20f + Main.rand.NextFloat() * 100f;
                        Vector2 vector109 = base.Center + vector108;
                        Point point3 = vector109.ToTileCoordinates();
                        bool flag49 = true;
                        if (!WorldGen.InWorld(point3.X, point3.Y, 0))
                        {
                            flag49 = false;
                        }

                        if (flag49 && WorldGen.SolidTile(point3.X, point3.Y))
                        {
                            flag49 = false;
                        }

                        if (flag49)
                        {
                            Dust dust50 = Main.dust[Dust.NewDust(vector109, 0, 0, 267, 0f, 0f, 127, newColor3, 1f)];
                            dust50.noGravity = true;
                            dust50.position = vector109;
                            dust50.velocity = -Vector2.UnitY * scaleFactor12 * (Main.rand.NextFloat() * 0.9f + 1.6f);
                            dust50.fadeIn = fadeIn;
                            dust50.scale = num1002;
                            dust50.noLight = true;
                            Dust dust51 = Dust.CloneDust(dust50);
                            dust51.scale *= 0.65f;
                            dust51.fadeIn *= 0.65f;
                            dust51.color = new Color(255, 255, 255, 255);
                        }
                    }

                    scale = Opacity / 2f * localAI[0];
                    base.velocity = Vector2.Zero;
                    localAI[1] += 1f;
                    if (localAI[1] >= 60f)
                    {
                        Kill();
                    }
                }
            }
            else if (aiStyle == 113)
            {
                int num1003 = 25;
                if (type == 614)
                {
                    num1003 = 63;
                }

                if (alpha > 0)
                {
                    alpha -= num1003;
                }

                if (alpha < 0)
                {
                    alpha = 0;
                }

                if (this.ai[0] == 0f)
                {
                    if (type == 614)
                    {
                        int num1004 = (int) this.ai[1];
                        if (!Main.npc[num1004].CanBeChasedBy(this, true))
                        {
                            Kill();
                            return;
                        }

                        base.velocity.ToRotation();
                        Vector2 vector110 = Main.npc[num1004].Center - base.Center;
                        if (vector110 != Vector2.Zero)
                        {
                            vector110.Normalize();
                            vector110 *= 14f;
                        }

                        float num1005 = 5f;
                        base.velocity = (base.velocity * (num1005 - 1f) + vector110) / num1005;
                    }
                    else
                    {
                        this.ai[1] += 1f;
                        if (this.ai[1] >= 45f)
                        {
                            float num1006 = 0.98f;
                            float num1007 = 0.35f;
                            if (type == 636)
                            {
                                num1006 = 0.995f;
                                num1007 = 0.15f;
                            }

                            this.ai[1] = 45f;
                            base.velocity.X *= num1006;
                            base.velocity.Y += num1007;
                        }

                        rotation = base.velocity.ToRotation() + 1.57079637f;
                    }
                }

                if (this.ai[0] == 1f)
                {
                    ignoreWater = true;
                    tileCollide = false;
                    int num1008 = 15;
                    if (type == 636)
                    {
                        num1008 = 5 * MaxUpdates;
                    }

                    bool flag50 = false;
                    bool flag51 = false;
                    localAI[0] += 1f;
                    if (localAI[0] % 30f == 0f)
                    {
                        flag51 = true;
                    }

                    int num1009 = (int) this.ai[1];
                    if (localAI[0] >= (float) (60 * num1008))
                    {
                        flag50 = true;
                    }
                    else if (num1009 < 0 || num1009 >= 200)
                    {
                        flag50 = true;
                    }
                    else if (Main.npc[num1009].active && !Main.npc[num1009].dontTakeDamage)
                    {
                        base.Center = Main.npc[num1009].Center - base.velocity * 2f;
                        gfxOffY = Main.npc[num1009].gfxOffY;
                        if (flag51)
                        {
                            Main.npc[num1009].HitEffect(0, 1.0);
                        }
                    }
                    else
                    {
                        flag50 = true;
                    }

                    if (flag50)
                    {
                        Kill();
                    }
                }

                if (type == 614)
                {
                    Lighting.AddLight(base.Center, 0.2f, 0.6f, 0.7f);
                }

                if (type == 636)
                {
                    Lighting.AddLight(base.Center, 0.8f, 0.7f, 0.4f);
                }
            }
            else if (aiStyle == 114)
            {
                if (Main.netMode == 2 && localAI[0] == 0f)
                {
                    PortalHelper.SyncPortalSections(base.Center, 1);
                    localAI[0] = 1f;
                }

                timeLeft = 3;
                bool flag52 = false;
                if (owner != 255 && (!Main.player[owner].active || Main.player[owner].dead ||
                                     Distance(Main.player[owner].Center) > 12800f))
                {
                    flag52 = true;
                }

                if (!flag52 && !WorldGen.InWorld((int) base.Center.X / 16, (int) base.Center.Y / 16,
                        Lighting.offScreenTiles))
                {
                    flag52 = true;
                }

                if (!flag52 && !PortalHelper.SupportedTilesAreFine(base.Center, this.ai[0]))
                {
                    flag52 = true;
                }

                if (flag52)
                {
                    Kill();
                }
                else
                {
                    Color portalColor = PortalHelper.GetPortalColor(owner, (int) this.ai[1]);
                    alpha -= 25;
                    if (alpha < 0)
                    {
                        alpha = 0;
                    }

                    if (alpha == 0)
                    {
                        Lighting.AddLight(base.Center + base.velocity * 3f, portalColor.ToVector3() * 0.5f);
                    }

                    if (++frameCounter >= 6)
                    {
                        frameCounter = 0;
                        if (++frame >= Main.projFrames[type])
                        {
                            frame = 0;
                        }
                    }

                    rotation = this.ai[0] - 1.57079637f;
                }
            }
            else if (aiStyle == 115)
            {
                Lighting.AddLight(base.Center, new Vector3(0.075f, 0.3f, 0.15f));
                base.velocity *= 0.985f;
                rotation += base.velocity.X * 0.2f;
                if (base.velocity.X > 0f)
                {
                    rotation += 0.08f;
                }
                else
                {
                    rotation -= 0.08f;
                }

                this.ai[1] += 1f;
                if (this.ai[1] > 30f)
                {
                    alpha += 10;
                    if (alpha >= 255)
                    {
                        alpha = 255;
                        Kill();
                    }
                }
            }
            else if (aiStyle == 116)
            {
                if (localAI[0] == 0f)
                {
                    rotation = this.ai[1];
                    localAI[0] = 1f;
                }

                Player player7 = Main.player[owner];
                if (player7.setSolar)
                {
                    timeLeft = 2;
                }

                float angle = (float) player7.miscCounter / 300f * 12.566371f + this.ai[1];
                angle = MathHelper.WrapAngle(angle);
                rotation = rotation.AngleLerp(angle, 0.05f);
                alpha -= 15;
                if (alpha < 0)
                {
                    alpha = 0;
                }

                base.velocity = rotation.ToRotationVector2() * 100f - player7.velocity;
                base.Center = player7.Center - base.velocity;
            }
            else if (aiStyle == 117)
            {
                this.ai[1] += 0.01f;
                scale = this.ai[1];
                this.ai[0] += 1f;
                if (this.ai[0] >= (float) (3 * Main.projFrames[type]))
                {
                    Kill();
                }
                else
                {
                    if (++frameCounter >= 3)
                    {
                        frameCounter = 0;
                        if (++frame >= Main.projFrames[type])
                        {
                            hide = true;
                        }
                    }

                    alpha -= 63;
                    if (alpha < 0)
                    {
                        alpha = 0;
                    }

                    bool flag53 = type == 612;
                    bool flag54 = type == 624;
                    if (flag53)
                    {
                        Lighting.AddLight(base.Center, 0.9f, 0.8f, 0.6f);
                    }

                    if (this.ai[0] == 1f)
                    {
                        base.position = base.Center;
                        base.width = (base.height = (int) (52f * scale));
                        base.Center = base.position;
                        Damage();
                        if (flag53)
                        {
                            Main.PlaySound(SoundID.Item14, base.position);
                            for (int num1010 = 0; num1010 < 4; num1010++)
                            {
                                Vector2 position206 = new Vector2(base.position.X, base.position.Y);
                                int width148 = base.width;
                                int height147 = base.height;
                                newColor = default(Color);
                                int num1011 = Dust.NewDust(position206, width148, height147, 31, 0f, 0f, 100, newColor,
                                    1.5f);
                                Main.dust[num1011].position =
                                    base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) *
                                    (float) Main.rand.NextDouble() * (float) base.width / 2f;
                            }

                            for (int num1012 = 0; num1012 < 10; num1012++)
                            {
                                Vector2 position207 = new Vector2(base.position.X, base.position.Y);
                                int width149 = base.width;
                                int height148 = base.height;
                                newColor = default(Color);
                                int num1013 = Dust.NewDust(position207, width149, height148, 6, 0f, 0f, 200, newColor,
                                    2.7f);
                                Main.dust[num1013].position =
                                    base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) *
                                    (float) Main.rand.NextDouble() * (float) base.width / 2f;
                                Main.dust[num1013].noGravity = true;
                                Main.dust[num1013].velocity *= 3f;
                                Vector2 position208 = new Vector2(base.position.X, base.position.Y);
                                int width150 = base.width;
                                int height149 = base.height;
                                newColor = default(Color);
                                num1013 = Dust.NewDust(position208, width150, height149, 6, 0f, 0f, 100, newColor,
                                    1.5f);
                                Main.dust[num1013].position =
                                    base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) *
                                    (float) Main.rand.NextDouble() * (float) base.width / 2f;
                                Main.dust[num1013].velocity *= 2f;
                                Main.dust[num1013].noGravity = true;
                                Main.dust[num1013].fadeIn = 2.5f;
                            }

                            for (int num1014 = 0; num1014 < 5; num1014++)
                            {
                                Vector2 position209 = new Vector2(base.position.X, base.position.Y);
                                int width151 = base.width;
                                int height150 = base.height;
                                newColor = default(Color);
                                int num1015 = Dust.NewDust(position209, width151, height150, 6, 0f, 0f, 0, newColor,
                                    2.7f);
                                Dust obj9 = Main.dust[num1015];
                                Vector2 center33 = base.Center;
                                Vector2 spinningpoint49 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
                                double radians58 = (double) base.velocity.ToRotation();
                                vector = default(Vector2);
                                obj9.position = center33 + spinningpoint49.RotatedBy(radians58, vector) *
                                                (float) base.width / 2f;
                                Main.dust[num1015].noGravity = true;
                                Main.dust[num1015].velocity *= 3f;
                            }

                            for (int num1016 = 0; num1016 < 10; num1016++)
                            {
                                Vector2 position210 = new Vector2(base.position.X, base.position.Y);
                                int width152 = base.width;
                                int height151 = base.height;
                                newColor = default(Color);
                                int num1017 = Dust.NewDust(position210, width152, height151, 31, 0f, 0f, 0, newColor,
                                    1.5f);
                                Dust obj10 = Main.dust[num1017];
                                Vector2 center34 = base.Center;
                                Vector2 spinningpoint50 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
                                double radians59 = (double) base.velocity.ToRotation();
                                vector = default(Vector2);
                                obj10.position = center34 + spinningpoint50.RotatedBy(radians59, vector) *
                                                 (float) base.width / 2f;
                                Main.dust[num1017].noGravity = true;
                                Main.dust[num1017].velocity *= 3f;
                            }
                        }

                        if (flag54)
                        {
                            Main.PlaySound(SoundID.Item14, base.position);
                            for (int num1018 = 0; num1018 < 20; num1018++)
                            {
                                Vector2 position211 = base.position;
                                int width153 = base.width;
                                int height152 = base.height;
                                newColor = default(Color);
                                int num1019 = Dust.NewDust(position211, width153, height152, 135, 0f, 0f, 100, newColor,
                                    1.5f);
                                Main.dust[num1019].position =
                                    base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) *
                                    (float) Main.rand.NextDouble() * (float) base.width / 2f;
                                Main.dust[num1019].velocity *= 2f;
                                Main.dust[num1019].noGravity = true;
                                Main.dust[num1019].fadeIn = 2.5f;
                                Main.dust[num1019].shader =
                                    GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
                            }

                            for (int num1020 = 0; num1020 < 15; num1020++)
                            {
                                Vector2 position212 = base.position;
                                int width154 = base.width;
                                int height153 = base.height;
                                newColor = default(Color);
                                int num1021 = Dust.NewDust(position212, width154, height153, 135, 0f, 0f, 0, newColor,
                                    2.7f);
                                Dust obj11 = Main.dust[num1021];
                                Vector2 center35 = base.Center;
                                Vector2 spinningpoint51 = Vector2.UnitX.RotatedByRandom(3.1415927410125732);
                                double radians60 = (double) base.velocity.ToRotation();
                                vector = default(Vector2);
                                obj11.position = center35 + spinningpoint51.RotatedBy(radians60, vector) *
                                                 (float) base.width / 2f;
                                Main.dust[num1021].noGravity = true;
                                Main.dust[num1021].velocity *= 3f;
                                Main.dust[num1021].shader =
                                    GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
                            }

                            float num1022 = (float) Main.rand.NextDouble() * 6.28318548f;
                            float num1023 = (float) Main.rand.NextDouble() * 6.28318548f;
                            float num1024 = (float) Main.rand.NextDouble() * 6.28318548f;
                            float num1025 = 7f + (float) Main.rand.NextDouble() * 7f;
                            float num1026 = 7f + (float) Main.rand.NextDouble() * 7f;
                            float num1027 = 7f + (float) Main.rand.NextDouble() * 7f;
                            float num1028 = num1025;
                            if (num1026 > num1028)
                            {
                                num1028 = num1026;
                            }

                            if (num1027 > num1028)
                            {
                                num1028 = num1027;
                            }

                            for (int num1029 = 0; num1029 < 200; num1029++)
                            {
                                int num1030 = 135;
                                float scaleFactor13 = num1028;
                                if (num1029 > 50)
                                {
                                    scaleFactor13 = num1026;
                                }

                                if (num1029 > 100)
                                {
                                    scaleFactor13 = num1025;
                                }

                                if (num1029 > 150)
                                {
                                    scaleFactor13 = num1027;
                                }

                                Vector2 position213 = base.position;
                                int num1031 = num1030;
                                newColor = default(Color);
                                int num1032 = Dust.NewDust(position213, 6, 6, num1031, 0f, 0f, 100, newColor, 1f);
                                Vector2 vector111 = Main.dust[num1032].velocity;
                                Main.dust[num1032].position = base.Center;
                                vector111.Normalize();
                                vector111 *= scaleFactor13;
                                if (num1029 > 150)
                                {
                                    vector111.Y *= 0.5f;
                                    Vector2 spinningpoint52 = vector111;
                                    double radians61 = (double) num1024;
                                    vector = default(Vector2);
                                    vector111 = spinningpoint52.RotatedBy(radians61, vector);
                                }
                                else if (num1029 > 100)
                                {
                                    vector111.X *= 0.5f;
                                    Vector2 spinningpoint53 = vector111;
                                    double radians62 = (double) num1022;
                                    vector = default(Vector2);
                                    vector111 = spinningpoint53.RotatedBy(radians62, vector);
                                }
                                else if (num1029 > 50)
                                {
                                    vector111.Y *= 0.5f;
                                    Vector2 spinningpoint54 = vector111;
                                    double radians63 = (double) num1023;
                                    vector = default(Vector2);
                                    vector111 = spinningpoint54.RotatedBy(radians63, vector);
                                }

                                Main.dust[num1032].velocity *= 0.2f;
                                Main.dust[num1032].velocity += vector111;
                                Main.dust[num1032].shader =
                                    GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
                                if (num1029 <= 200)
                                {
                                    Main.dust[num1032].scale = 2f;
                                    Main.dust[num1032].noGravity = true;
                                    Main.dust[num1032].fadeIn = Main.rand.NextFloat() * 2f;
                                    if (Main.rand.Next(4) == 0)
                                    {
                                        Main.dust[num1032].fadeIn = 2.5f;
                                    }

                                    Main.dust[num1032].noLight = true;
                                    if (num1029 < 100)
                                    {
                                        Main.dust[num1032].position += Main.dust[num1032].velocity * 20f;
                                        Main.dust[num1032].velocity *= -1f;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else if (aiStyle == 118)
            {
                this.ai[0] += 1f;
                int num1033 = 0;
                if (base.velocity.Length() <= 4f)
                {
                    num1033 = 1;
                }

                alpha -= 15;
                if (alpha < 0)
                {
                    alpha = 0;
                }

                switch (num1033)
                {
                    case 0:
                        rotation -= 0.104719758f;
                        if (Main.rand.Next(3) == 0)
                        {
                            if (Main.rand.Next(2) == 0)
                            {
                                Vector2 vector117 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                                Dust[] dust60 = Main.dust;
                                Vector2 position217 = base.Center - vector117 * 30f;
                                int num1044 = Utils.SelectRandom<int>(Main.rand, 86, 90);
                                newColor = default(Color);
                                Dust dust61 = dust60[Dust.NewDust(position217, 0, 0, num1044, 0f, 0f, 0, newColor, 1f)];
                                dust61.noGravity = true;
                                dust61.position = base.Center - vector117 * (float) Main.rand.Next(10, 21);
                                Dust dust62 = dust61;
                                Vector2 spinningpoint58 = vector117;
                                vector = default(Vector2);
                                dust62.velocity = spinningpoint58.RotatedBy(1.5707963705062866, vector) * 6f;
                                dust61.scale = 0.5f + Main.rand.NextFloat();
                                dust61.fadeIn = 0.5f;
                                dust61.customData = this;
                            }
                            else
                            {
                                Vector2 vector118 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                                Dust[] dust63 = Main.dust;
                                Vector2 position218 = base.Center - vector118 * 30f;
                                newColor = default(Color);
                                Dust dust64 = dust63[Dust.NewDust(position218, 0, 0, 240, 0f, 0f, 0, newColor, 1f)];
                                dust64.noGravity = true;
                                dust64.position = base.Center - vector118 * 30f;
                                Dust dust65 = dust64;
                                Vector2 spinningpoint59 = vector118;
                                vector = default(Vector2);
                                dust65.velocity = spinningpoint59.RotatedBy(-1.5707963705062866, vector) * 3f;
                                dust64.scale = 0.5f + Main.rand.NextFloat();
                                dust64.fadeIn = 0.5f;
                                dust64.customData = this;
                            }
                        }

                        if (this.ai[0] >= 30f)
                        {
                            base.velocity *= 0.98f;
                            scale += 0.00744680827f;
                            if (scale > 1.3f)
                            {
                                scale = 1.3f;
                            }

                            rotation -= 0.0174532924f;
                        }

                        if (base.velocity.Length() < 4.1f)
                        {
                            base.velocity.Normalize();
                            base.velocity *= 4f;
                            this.ai[0] = 0f;
                        }

                        break;
                    case 1:
                    {
                        rotation -= 0.104719758f;
                        for (int num1034 = 0; num1034 < 1; num1034++)
                        {
                            if (Main.rand.Next(2) == 0)
                            {
                                Vector2 vector112 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                                Dust[] dust52 = Main.dust;
                                Vector2 position214 = base.Center - vector112 * 30f;
                                newColor = default(Color);
                                Dust dust53 = dust52[Dust.NewDust(position214, 0, 0, 86, 0f, 0f, 0, newColor, 1f)];
                                dust53.noGravity = true;
                                dust53.position = base.Center - vector112 * (float) Main.rand.Next(10, 21);
                                Dust dust54 = dust53;
                                Vector2 spinningpoint55 = vector112;
                                vector = default(Vector2);
                                dust54.velocity = spinningpoint55.RotatedBy(1.5707963705062866, vector) * 6f;
                                dust53.scale = 0.9f + Main.rand.NextFloat();
                                dust53.fadeIn = 0.5f;
                                dust53.customData = this;
                                vector112 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                                Dust[] dust55 = Main.dust;
                                Vector2 position215 = base.Center - vector112 * 30f;
                                newColor = default(Color);
                                dust53 = dust55[Dust.NewDust(position215, 0, 0, 90, 0f, 0f, 0, newColor, 1f)];
                                dust53.noGravity = true;
                                dust53.position = base.Center - vector112 * (float) Main.rand.Next(10, 21);
                                Dust dust56 = dust53;
                                Vector2 spinningpoint56 = vector112;
                                vector = default(Vector2);
                                dust56.velocity = spinningpoint56.RotatedBy(1.5707963705062866, vector) * 6f;
                                dust53.scale = 0.9f + Main.rand.NextFloat();
                                dust53.fadeIn = 0.5f;
                                dust53.customData = this;
                                dust53.color = Color.Crimson;
                            }
                            else
                            {
                                Vector2 vector113 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                                Dust[] dust57 = Main.dust;
                                Vector2 position216 = base.Center - vector113 * 30f;
                                newColor = default(Color);
                                Dust dust58 = dust57[Dust.NewDust(position216, 0, 0, 240, 0f, 0f, 0, newColor, 1f)];
                                dust58.noGravity = true;
                                dust58.position = base.Center - vector113 * (float) Main.rand.Next(20, 31);
                                Dust dust59 = dust58;
                                Vector2 spinningpoint57 = vector113;
                                vector = default(Vector2);
                                dust59.velocity = spinningpoint57.RotatedBy(-1.5707963705062866, vector) * 5f;
                                dust58.scale = 0.9f + Main.rand.NextFloat();
                                dust58.fadeIn = 0.5f;
                                dust58.customData = this;
                            }
                        }

                        if (this.ai[0] % 30f == 0f && this.ai[0] < 241f && Main.myPlayer == owner)
                        {
                            Vector2 vector114 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * 12f;
                            NewProjectile(base.Center.X, base.Center.Y, vector114.X, vector114.Y, 618, damage / 2, 0f,
                                owner, 0f, (float) whoAmI);
                        }

                        Vector2 vector115 = base.Center;
                        float num1035 = 800f;
                        bool flag55 = false;
                        int num1036 = 0;
                        if (this.ai[1] == 0f)
                        {
                            for (int num1037 = 0; num1037 < 200; num1037++)
                            {
                                if (Main.npc[num1037].CanBeChasedBy(this, false))
                                {
                                    Vector2 center36 = Main.npc[num1037].Center;
                                    if (Distance(center36) < num1035 && Collision.CanHit(
                                            new Vector2(base.position.X + (float) (base.width / 2),
                                                base.position.Y + (float) (base.height / 2)), 1, 1,
                                            Main.npc[num1037].position, Main.npc[num1037].width,
                                            Main.npc[num1037].height))
                                    {
                                        num1035 = Distance(center36);
                                        vector115 = center36;
                                        flag55 = true;
                                        num1036 = num1037;
                                    }
                                }
                            }

                            if (flag55)
                            {
                                if (this.ai[1] != (float) (num1036 + 1))
                                {
                                    netUpdate = true;
                                }

                                this.ai[1] = (float) (num1036 + 1);
                            }

                            flag55 = false;
                        }

                        if (this.ai[1] != 0f)
                        {
                            int num1038 = (int) (this.ai[1] - 1f);
                            if (Main.npc[num1038].active && Main.npc[num1038].CanBeChasedBy(this, true) &&
                                Distance(Main.npc[num1038].Center) < 1000f)
                            {
                                flag55 = true;
                                vector115 = Main.npc[num1038].Center;
                            }
                        }

                        if (!friendly)
                        {
                            flag55 = false;
                        }

                        if (flag55)
                        {
                            float num1039 = 4f;
                            int num1040 = 8;
                            Vector2 vector116 = new Vector2(base.position.X + (float) base.width * 0.5f,
                                base.position.Y + (float) base.height * 0.5f);
                            float num1041 = vector115.X - vector116.X;
                            float num1042 = vector115.Y - vector116.Y;
                            float num1043 = (float) Math.Sqrt((double) (num1041 * num1041 + num1042 * num1042));
                            num1043 = num1039 / num1043;
                            num1041 *= num1043;
                            num1042 *= num1043;
                            base.velocity.X = (base.velocity.X * (float) (num1040 - 1) + num1041) / (float) num1040;
                            base.velocity.Y = (base.velocity.Y * (float) (num1040 - 1) + num1042) / (float) num1040;
                        }

                        break;
                    }
                }

                if (alpha < 150)
                {
                    Lighting.AddLight(base.Center, 0.7f, 0.2f, 0.6f);
                }

                if (this.ai[0] >= 600f)
                {
                    Kill();
                }
            }
            else if (aiStyle == 119)
            {
                int num1045 = 0;
                float num1046 = 0f;
                float x40 = 0f;
                float y39 = 0f;
                bool flag56 = false;
                bool flag57 = false;
                int num1047 = type;
                if (num1047 == 618)
                {
                    num1045 = 617;
                    num1046 = 420f;
                    x40 = 0.15f;
                    y39 = 0.15f;
                }

                if (flag57)
                {
                    int num1048 = (int) this.ai[1];
                    if (!Main.projectile[num1048].active || Main.projectile[num1048].type != num1045)
                    {
                        Kill();
                        return;
                    }

                    timeLeft = 2;
                }

                this.ai[0] += 1f;
                if (this.ai[0] < num1046)
                {
                    bool flag58 = true;
                    int num1049 = (int) this.ai[1];
                    if (Main.projectile[num1049].active && Main.projectile[num1049].type == num1045)
                    {
                        if (!flag56 && Main.projectile[num1049].oldPos[1] != Vector2.Zero)
                        {
                            base.position += Main.projectile[num1049].position - Main.projectile[num1049].oldPos[1];
                        }

                        if (base.Center.HasNaNs())
                        {
                            Kill();
                            return;
                        }
                    }
                    else
                    {
                        this.ai[0] = num1046;
                        flag58 = false;
                        Kill();
                    }

                    if (flag58 && !flag56)
                    {
                        base.velocity +=
                            new Vector2((float) Math.Sign(Main.projectile[num1049].Center.X - base.Center.X),
                                (float) Math.Sign(Main.projectile[num1049].Center.Y - base.Center.Y)) *
                            new Vector2(x40, y39);
                        if (base.velocity.Length() > 6f)
                        {
                            base.velocity *= 6f / base.velocity.Length();
                        }
                    }

                    if (type == 618)
                    {
                        if (Main.rand.Next(2) == 0)
                        {
                            Vector2 center37 = base.Center;
                            newColor = default(Color);
                            int num1050 = Dust.NewDust(center37, 8, 8, 86, 0f, 0f, 0, newColor, 1f);
                            Main.dust[num1050].position = base.Center;
                            Main.dust[num1050].velocity = base.velocity;
                            Main.dust[num1050].noGravity = true;
                            Main.dust[num1050].scale = 1.5f;
                            if (flag58)
                            {
                                Main.dust[num1050].customData = Main.projectile[(int) this.ai[1]];
                            }
                        }

                        alpha = 255;
                    }
                    else
                    {
                        Kill();
                    }
                }
            }
            else if (aiStyle == 120)
            {
                Player player8 = Main.player[owner];
                if (!player8.active)
                {
                    active = false;
                }
                else
                {
                    bool flag59 = type == 623;
                    Vector2 vector119 = player8.Center;
                    float num1051 = 100f;
                    float num1052 = 300f;
                    float num1053 = 100f;
                    float num1054 = 100f;
                    if (flag59)
                    {
                        if (player8.dead)
                        {
                            player8.stardustGuardian = false;
                        }

                        if (player8.stardustGuardian)
                        {
                            timeLeft = 2;
                        }

                        num1051 = 150f;
                        num1052 = 250f;
                        num1053 = 200f;
                        vector119.X -= (float) ((5 + player8.width / 2) * player8.direction);
                        vector119.Y -= 25f;
                        Lighting.AddLight(base.Center, 0.9f, 0.9f, 0.7f);
                        if (this.ai[0] != 3f && alpha == 255)
                        {
                            alpha = 0;
                            for (int num1055 = 0; num1055 < 30; num1055++)
                            {
                                Vector2 position219 = base.position;
                                int width155 = base.width;
                                int height154 = base.height;
                                newColor = default(Color);
                                int num1056 = Dust.NewDust(position219, width155, height154, 135, 0f, 0f, 200, newColor,
                                    1.7f);
                                Main.dust[num1056].noGravity = true;
                                Main.dust[num1056].velocity *= 3f;
                                Main.dust[num1056].shader =
                                    GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
                                Vector2 position220 = base.position;
                                int width156 = base.width;
                                int height155 = base.height;
                                newColor = default(Color);
                                num1056 = Dust.NewDust(position220, width156, height155, 135, 0f, 0f, 100, newColor,
                                    1f);
                                Main.dust[num1056].velocity *= 2f;
                                Main.dust[num1056].noGravity = true;
                                Main.dust[num1056].fadeIn = 2.5f;
                                Main.dust[num1056].shader =
                                    GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
                            }
                        }

                        if (localAI[0] > 0f)
                        {
                            localAI[0] -= 1f;
                        }
                    }

                    if (this.ai[0] != 0f)
                    {
                        Main.player[owner].tankPet = whoAmI;
                        Main.player[owner].tankPetReset = false;
                    }

                    if (this.ai[0] == 0f)
                    {
                        if (player8.HasMinionRestTarget)
                        {
                            this.ai[0] = 3f;
                            netUpdate = true;
                        }

                        base.Center = Vector2.Lerp(base.Center, vector119, 0.2f);
                        base.velocity *= 0.8f;
                        base.direction = (spriteDirection = player8.direction);
                        if (flag59 && ++frameCounter >= 9)
                        {
                            frameCounter = 0;
                            if (++frame >= Main.projFrames[type] - 4)
                            {
                                frame = 0;
                            }
                        }
                    }
                    else if (this.ai[0] == 1f)
                    {
                        if (player8.HasMinionRestTarget)
                        {
                            vector119 = player8.MinionRestTargetPoint;
                        }
                        else
                        {
                            this.ai[0] = 0f;
                            netUpdate = true;
                        }

                        int num1057 = -1;
                        bool flag60 = true;
                        if (flag59 && Math.Abs(base.Center.X - vector119.X) > num1051 + 20f)
                        {
                            flag60 = false;
                        }

                        if (flag60)
                        {
                            for (int num1058 = 0; num1058 < 200; num1058++)
                            {
                                NPC nPC11 = Main.npc[num1058];
                                if (nPC11.CanBeChasedBy(this, false))
                                {
                                    float num1059 = Distance(nPC11.Center);
                                    if (num1059 < num1052)
                                    {
                                        num1057 = num1058;
                                    }
                                }
                            }
                        }

                        if (num1057 != -1)
                        {
                            NPC nPC12 = Main.npc[num1057];
                            base.direction = (spriteDirection = (nPC12.Center.X > base.Center.X).ToDirectionInt());
                            float num1060 = Math.Abs(vector119.X - base.Center.X);
                            float num1061 = Math.Abs(nPC12.Center.X - base.Center.X);
                            float num1062 = Math.Abs(vector119.Y - base.Center.Y);
                            float num1063 = Math.Abs(nPC12.Center.Y - base.Bottom.Y);
                            float num1064 = (float) (nPC12.Center.Y > base.Bottom.Y).ToDirectionInt();
                            if ((num1060 < num1051 || (vector119.X - base.Center.X) * (float) base.direction < 0f) &&
                                num1061 > 20f && num1061 < num1051 - num1060 + 100f)
                            {
                                base.velocity.X += 0.1f * (float) base.direction;
                            }
                            else
                            {
                                base.velocity.X *= 0.7f;
                            }

                            if ((num1062 < num1054 || (vector119.Y - base.Bottom.Y) * num1064 < 0f) && num1063 > 10f &&
                                num1063 < num1054 - num1062 + 10f)
                            {
                                base.velocity.Y += 0.1f * num1064;
                            }
                            else
                            {
                                base.velocity.Y *= 0.7f;
                            }

                            if (localAI[0] == 0f && owner == Main.myPlayer && num1061 < num1053)
                            {
                                this.ai[1] = 0f;
                                this.ai[0] = 2f;
                                netUpdate = true;
                                localAI[0] = 90f;
                            }
                        }
                        else
                        {
                            if (Math.Abs(vector119.X - base.Center.X) > num1051 + 40f)
                            {
                                this.ai[0] = 3f;
                                netUpdate = true;
                            }
                            else if (Math.Abs(vector119.X - base.Center.X) > 20f)
                            {
                                base.direction = (spriteDirection = (vector119.X > base.Center.X).ToDirectionInt());
                                base.velocity.X += 0.06f * (float) base.direction;
                            }
                            else
                            {
                                base.velocity.X *= 0.8f;
                                base.direction =
                                    (spriteDirection = (player8.Center.X < base.Center.X).ToDirectionInt());
                            }

                            if (Math.Abs(vector119.Y - base.Center.Y) > num1054)
                            {
                                this.ai[0] = 3f;
                                netUpdate = true;
                            }
                            else if (Math.Abs(vector119.Y - base.Center.Y) > 10f)
                            {
                                base.velocity.Y += 0.06f * (float) Math.Sign(vector119.Y - base.Center.Y);
                            }
                            else
                            {
                                base.velocity.Y *= 0.8f;
                            }
                        }

                        if (flag59 && ++frameCounter >= 9)
                        {
                            frameCounter = 0;
                            if (++frame >= Main.projFrames[type] - 4)
                            {
                                frame = 0;
                            }
                        }
                    }
                    else if (this.ai[0] == 2f)
                    {
                        base.velocity.X *= 0.9f;
                        this.ai[1] += 1f;
                        float num1065 = 0f;
                        if (flag59)
                        {
                            num1065 = 20f;
                            if (this.ai[1] == 10f && owner == Main.myPlayer)
                            {
                                int num1066 = (int) (20f * Main.player[owner].minionDamage);
                                NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 624, num1066, 6f, owner, 0f, 5f);
                            }
                        }

                        if (this.ai[1] >= num1065)
                        {
                            this.ai[1] = 0f;
                            this.ai[0] = 1f;
                            netUpdate = true;
                        }

                        if (flag59)
                        {
                            if (frame < Main.projFrames[type] - 4)
                            {
                                frame = Main.projFrames[type] - 1;
                                frameCounter = 0;
                            }

                            if (++frameCounter >= 5)
                            {
                                frameCounter = 0;
                                if (--frame < Main.projFrames[type] - 5)
                                {
                                    frame = Main.projFrames[type] - 1;
                                }
                            }
                        }
                    }

                    if (this.ai[0] == 3f)
                    {
                        if (player8.HasMinionRestTarget)
                        {
                            vector119 = player8.MinionRestTargetPoint;
                        }
                        else
                        {
                            this.ai[0] = 0f;
                            netUpdate = true;
                        }

                        if (alpha == 0)
                        {
                            alpha = 255;
                            for (int num1067 = 0; num1067 < 30; num1067++)
                            {
                                Vector2 position221 = base.position;
                                int width157 = base.width;
                                int height156 = base.height;
                                newColor = default(Color);
                                int num1068 = Dust.NewDust(position221, width157, height156, 135, 0f, 0f, 200, newColor,
                                    1.7f);
                                Main.dust[num1068].noGravity = true;
                                Main.dust[num1068].velocity *= 3f;
                                Main.dust[num1068].shader =
                                    GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
                                Vector2 position222 = base.position;
                                int width158 = base.width;
                                int height157 = base.height;
                                newColor = default(Color);
                                num1068 = Dust.NewDust(position222, width158, height157, 135, 0f, 0f, 100, newColor,
                                    1f);
                                Main.dust[num1068].velocity *= 2f;
                                Main.dust[num1068].noGravity = true;
                                Main.dust[num1068].fadeIn = 2.5f;
                                Main.dust[num1068].shader =
                                    GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
                            }
                        }
                        else
                        {
                            for (int num1069 = 0; num1069 < 2; num1069++)
                            {
                                Vector2 position223 = base.position;
                                int width159 = base.width;
                                int height158 = base.height;
                                newColor = default(Color);
                                int num1070 = Dust.NewDust(position223, width159, height158, 135, 0f, 0f, 200, newColor,
                                    1.7f);
                                Main.dust[num1070].noGravity = true;
                                Main.dust[num1070].velocity *= 3f;
                                Main.dust[num1070].noLight = true;
                                Main.dust[num1070].shader =
                                    GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
                                Vector2 position224 = base.position;
                                int width160 = base.width;
                                int height159 = base.height;
                                newColor = default(Color);
                                num1070 = Dust.NewDust(position224, width160, height159, 135, 0f, 0f, 100, newColor,
                                    1f);
                                Main.dust[num1070].velocity *= 2f;
                                Main.dust[num1070].noGravity = true;
                                Main.dust[num1070].fadeIn = 2.5f;
                                Main.dust[num1070].noLight = true;
                                Main.dust[num1070].shader =
                                    GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
                            }
                        }

                        base.velocity *= 0.7f;
                        base.Center = Vector2.Lerp(base.Center, vector119, 0.2f);
                        if (Distance(vector119) < 10f)
                        {
                            this.ai[0] = 1f;
                            netUpdate = true;
                        }
                    }
                }
            }
            else if (aiStyle == 121)
            {
                Player player9 = Main.player[owner];
                if ((int) Main.time % 120 == 0)
                {
                    netUpdate = true;
                }

                if (!player9.active)
                {
                    active = false;
                }
                else
                {
                    bool flag61 = type == 625;
                    bool flag62 = type == 625 || type == 626 || type == 627 || type == 628;
                    int num1071 = 10;
                    if (flag62)
                    {
                        if (player9.dead)
                        {
                            player9.stardustDragon = false;
                        }

                        if (player9.stardustDragon)
                        {
                            timeLeft = 2;
                        }

                        num1071 = 30;
                        if (Main.rand.Next(30) == 0)
                        {
                            Vector2 position225 = base.position;
                            int width161 = base.width;
                            int height160 = base.height;
                            newColor = default(Color);
                            int num1072 = Dust.NewDust(position225, width161, height160, 135, 0f, 0f, 0, newColor, 2f);
                            Main.dust[num1072].noGravity = true;
                            Main.dust[num1072].fadeIn = 2f;
                            Point point4 = Main.dust[num1072].position.ToTileCoordinates();
                            if (WorldGen.InWorld(point4.X, point4.Y, 5) && WorldGen.SolidTile(point4.X, point4.Y))
                            {
                                Main.dust[num1072].noLight = true;
                            }
                        }
                    }

                    if (flag61)
                    {
                        Vector2 center38 = player9.Center;
                        float num1073 = 700f;
                        float num1074 = 1000f;
                        int num1075 = -1;
                        if (Distance(center38) > 2000f)
                        {
                            base.Center = center38;
                            netUpdate = true;
                        }

                        if (true)
                        {
                            NPC ownerMinionAttackTargetNPC5 = OwnerMinionAttackTargetNPC;
                            if (ownerMinionAttackTargetNPC5 != null &&
                                ownerMinionAttackTargetNPC5.CanBeChasedBy(this, false))
                            {
                                float num1076 = Distance(ownerMinionAttackTargetNPC5.Center);
                                if (num1076 < num1073 * 2f)
                                {
                                    num1075 = ownerMinionAttackTargetNPC5.whoAmI;
                                    if (ownerMinionAttackTargetNPC5.boss)
                                    {
                                        int whoAmI = ownerMinionAttackTargetNPC5.whoAmI;
                                    }
                                    else
                                    {
                                        int whoAmI2 = ownerMinionAttackTargetNPC5.whoAmI;
                                    }
                                }
                            }

                            if (num1075 < 0)
                            {
                                for (int num1077 = 0; num1077 < 200; num1077++)
                                {
                                    NPC nPC13 = Main.npc[num1077];
                                    if (nPC13.CanBeChasedBy(this, false) && player9.Distance(nPC13.Center) < num1074)
                                    {
                                        float num1078 = Distance(nPC13.Center);
                                        if (num1078 < num1073)
                                        {
                                            num1075 = num1077;
                                            bool boss = nPC13.boss;
                                        }
                                    }
                                }
                            }
                        }

                        if (num1075 != -1)
                        {
                            NPC nPC14 = Main.npc[num1075];
                            Vector2 vector120 = nPC14.Center - base.Center;
                            (vector120.X > 0f).ToDirectionInt();
                            (vector120.Y > 0f).ToDirectionInt();
                            float scaleFactor14 = 0.4f;
                            if (vector120.Length() < 600f)
                            {
                                scaleFactor14 = 0.6f;
                            }

                            if (vector120.Length() < 300f)
                            {
                                scaleFactor14 = 0.8f;
                            }

                            float num1079 = vector120.Length();
                            vector = nPC14.Size;
                            if (num1079 > vector.Length() * 0.75f)
                            {
                                base.velocity += Vector2.Normalize(vector120) * scaleFactor14 * 1.5f;
                                if (Vector2.Dot(base.velocity, vector120) < 0.25f)
                                {
                                    base.velocity *= 0.8f;
                                }
                            }

                            float num1080 = 30f;
                            if (base.velocity.Length() > num1080)
                            {
                                base.velocity = Vector2.Normalize(base.velocity) * num1080;
                            }
                        }
                        else
                        {
                            float num1081 = 0.2f;
                            Vector2 vector121 = center38 - base.Center;
                            if (vector121.Length() < 200f)
                            {
                                num1081 = 0.12f;
                            }

                            if (vector121.Length() < 140f)
                            {
                                num1081 = 0.06f;
                            }

                            if (vector121.Length() > 100f)
                            {
                                if (Math.Abs(center38.X - base.Center.X) > 20f)
                                {
                                    base.velocity.X += num1081 * (float) Math.Sign(center38.X - base.Center.X);
                                }

                                if (Math.Abs(center38.Y - base.Center.Y) > 10f)
                                {
                                    base.velocity.Y += num1081 * (float) Math.Sign(center38.Y - base.Center.Y);
                                }
                            }
                            else if (base.velocity.Length() > 2f)
                            {
                                base.velocity *= 0.96f;
                            }

                            if (Math.Abs(base.velocity.Y) < 1f)
                            {
                                base.velocity.Y -= 0.1f;
                            }

                            float num1082 = 15f;
                            if (base.velocity.Length() > num1082)
                            {
                                base.velocity = Vector2.Normalize(base.velocity) * num1082;
                            }
                        }

                        rotation = base.velocity.ToRotation() + 1.57079637f;
                        int direction = base.direction;
                        base.direction = (spriteDirection = ((base.velocity.X > 0f) ? 1 : (-1)));
                        if (direction != base.direction)
                        {
                            netUpdate = true;
                        }

                        float num1083 = MathHelper.Clamp(localAI[0], 0f, 50f);
                        base.position = base.Center;
                        scale = 1f + num1083 * 0.01f;
                        base.width = (base.height = (int) ((float) num1071 * scale));
                        base.Center = base.position;
                        if (alpha > 0)
                        {
                            for (int num1084 = 0; num1084 < 2; num1084++)
                            {
                                Vector2 position226 = new Vector2(base.position.X, base.position.Y);
                                int width162 = base.width;
                                int height161 = base.height;
                                newColor = default(Color);
                                int num1085 = Dust.NewDust(position226, width162, height161, 135, 0f, 0f, 100, newColor,
                                    2f);
                                Main.dust[num1085].noGravity = true;
                                Main.dust[num1085].noLight = true;
                            }

                            alpha -= 42;
                            if (alpha < 0)
                            {
                                alpha = 0;
                            }
                        }
                    }
                    else
                    {
                        bool flag63 = false;
                        Vector2 value75 = Vector2.Zero;
                        Vector2 zero6 = Vector2.Zero;
                        float num1086 = 0f;
                        float scaleFactor15 = 0f;
                        float scaleFactor16 = 1f;
                        if (this.ai[1] == 1f)
                        {
                            this.ai[1] = 0f;
                            netUpdate = true;
                        }

                        int byUUID = GetByUUID(owner, (int) this.ai[0]);
                        if (flag62 && byUUID >= 0 && Main.projectile[byUUID].active &&
                            (Main.projectile[byUUID].type == 625 || Main.projectile[byUUID].type == 626 ||
                             Main.projectile[byUUID].type == 627))
                        {
                            flag63 = true;
                            value75 = Main.projectile[byUUID].Center;
                            Vector2 velocity19 = Main.projectile[byUUID].velocity;
                            num1086 = Main.projectile[byUUID].rotation;
                            float num1087 = MathHelper.Clamp(Main.projectile[byUUID].scale, 0f, 50f);
                            scaleFactor16 = num1087;
                            scaleFactor15 = 16f;
                            int alpha2 = Main.projectile[byUUID].alpha;
                            Main.projectile[byUUID].localAI[0] = localAI[0] + 1f;
                            if (Main.projectile[byUUID].type != 625)
                            {
                                Main.projectile[byUUID].localAI[1] = (float) whoAmI;
                            }

                            if (owner == Main.myPlayer && Main.projectile[byUUID].type == 625 && type == 628)
                            {
                                Main.projectile[byUUID].Kill();
                                Kill();
                                return;
                            }
                        }

                        if (flag63)
                        {
                            if (alpha > 0)
                            {
                                for (int num1088 = 0; num1088 < 2; num1088++)
                                {
                                    Vector2 position227 = base.position;
                                    int width163 = base.width;
                                    int height162 = base.height;
                                    newColor = default(Color);
                                    int num1089 = Dust.NewDust(position227, width163, height162, 135, 0f, 0f, 100,
                                        newColor, 2f);
                                    Main.dust[num1089].noGravity = true;
                                    Main.dust[num1089].noLight = true;
                                }
                            }

                            alpha -= 42;
                            if (alpha < 0)
                            {
                                alpha = 0;
                            }

                            base.velocity = Vector2.Zero;
                            Vector2 vector122 = value75 - base.Center;
                            if (num1086 != rotation)
                            {
                                float num1090 = MathHelper.WrapAngle(num1086 - rotation);
                                Vector2 spinningpoint60 = vector122;
                                double radians64 = (double) (num1090 * 0.1f);
                                vector = default(Vector2);
                                vector122 = spinningpoint60.RotatedBy(radians64, vector);
                            }

                            rotation = vector122.ToRotation() + 1.57079637f;
                            base.position = base.Center;
                            scale = scaleFactor16;
                            base.width = (base.height = (int) ((float) num1071 * scale));
                            base.Center = base.position;
                            if (vector122 != Vector2.Zero)
                            {
                                base.Center = value75 - Vector2.Normalize(vector122) * scaleFactor15 * scaleFactor16;
                            }

                            spriteDirection = ((vector122.X > 0f) ? 1 : (-1));
                        }
                    }
                }
            }
            else if (aiStyle == 122)
            {
                int num1091 = (int) this.ai[0];
                bool flag64 = false;
                if (num1091 == -1 || !Main.npc[num1091].active)
                {
                    flag64 = true;
                }

                if (flag64)
                {
                    if (type == 629)
                    {
                        Kill();
                        return;
                    }

                    if (type == 631 && this.ai[0] != -1f)
                    {
                        this.ai[0] = -1f;
                        netUpdate = true;
                    }
                }

                if (!flag64)
                {
                    hitbox = base.Hitbox;
                    if (hitbox.Intersects(Main.npc[num1091].Hitbox))
                    {
                        Kill();
                        if (type == 631)
                        {
                            localAI[1] = 1f;
                            Damage();
                        }

                        return;
                    }
                }

                if (type == 629)
                {
                    Vector2 value76 = Main.npc[num1091].Center - base.Center;
                    base.velocity = Vector2.Normalize(value76) * 5f;
                    Dust.QuickDust(base.Center, Color.Red);
                }

                if (type == 631)
                {
                    if (this.ai[1] > 0f)
                    {
                        this.ai[1] -= 1f;
                        base.velocity = Vector2.Zero;
                    }
                    else
                    {
                        if (flag64)
                        {
                            if (base.velocity == Vector2.Zero)
                            {
                                Kill();
                            }

                            tileCollide = true;
                            alpha += 10;
                            if (alpha > 255)
                            {
                                Kill();
                            }
                        }
                        else
                        {
                            Vector2 value77 = Main.npc[num1091].Center - base.Center;
                            base.velocity = Vector2.Normalize(value77) * 12f;
                            alpha -= 15;
                            if (alpha < 0)
                            {
                                alpha = 0;
                            }
                        }

                        rotation = base.velocity.ToRotation() - 1.57079637f;
                    }
                }
            }
            else if (aiStyle == 123)
            {
                bool flag65 = type == 641;
                bool flag66 = type == 643;
                float num1092 = 1000f;
                base.velocity = Vector2.Zero;
                if (flag65)
                {
                    alpha -= 5;
                    if (alpha < 0)
                    {
                        alpha = 0;
                    }

                    if (base.direction == 0)
                    {
                        base.direction = Main.player[owner].direction;
                    }

                    rotation -= (float) base.direction * 6.28318548f / 120f;
                    scale = Opacity;
                    Lighting.AddLight(base.Center, new Vector3(0.3f, 0.9f, 0.7f) * Opacity);
                    if (Main.rand.Next(2) == 0)
                    {
                        Vector2 vector123 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                        Dust[] dust66 = Main.dust;
                        Vector2 position228 = base.Center - vector123 * 30f;
                        newColor = default(Color);
                        Dust dust67 = dust66[Dust.NewDust(position228, 0, 0, 229, 0f, 0f, 0, newColor, 1f)];
                        dust67.noGravity = true;
                        dust67.position = base.Center - vector123 * (float) Main.rand.Next(10, 21);
                        Dust dust68 = dust67;
                        Vector2 spinningpoint61 = vector123;
                        vector = default(Vector2);
                        dust68.velocity = spinningpoint61.RotatedBy(1.5707963705062866, vector) * 6f;
                        dust67.scale = 0.5f + Main.rand.NextFloat();
                        dust67.fadeIn = 0.5f;
                        dust67.customData = base.Center;
                    }

                    if (Main.rand.Next(2) == 0)
                    {
                        Vector2 vector124 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                        Dust[] dust69 = Main.dust;
                        Vector2 position229 = base.Center - vector124 * 30f;
                        newColor = default(Color);
                        Dust dust70 = dust69[Dust.NewDust(position229, 0, 0, 240, 0f, 0f, 0, newColor, 1f)];
                        dust70.noGravity = true;
                        dust70.position = base.Center - vector124 * 30f;
                        Dust dust71 = dust70;
                        Vector2 spinningpoint62 = vector124;
                        vector = default(Vector2);
                        dust71.velocity = spinningpoint62.RotatedBy(-1.5707963705062866, vector) * 3f;
                        dust70.scale = 0.5f + Main.rand.NextFloat();
                        dust70.fadeIn = 0.5f;
                        dust70.customData = base.Center;
                    }

                    if (this.ai[0] < 0f)
                    {
                        Vector2 center39 = base.Center;
                        Vector2 position230 = center39 - Vector2.One * 8f;
                        float speedX30 = base.velocity.X / 2f;
                        float speedY33 = base.velocity.Y / 2f;
                        newColor = default(Color);
                        int num1093 = Dust.NewDust(position230, 16, 16, 229, speedX30, speedY33, 0, newColor, 1f);
                        Main.dust[num1093].velocity *= 2f;
                        Main.dust[num1093].noGravity = true;
                        Main.dust[num1093].scale = Utils.SelectRandom<float>(Main.rand, 0.8f, 1.65f);
                        Main.dust[num1093].customData = this;
                    }
                }

                if (flag66)
                {
                    alpha -= 5;
                    if (alpha < 0)
                    {
                        alpha = 0;
                    }

                    if (base.direction == 0)
                    {
                        base.direction = Main.player[owner].direction;
                    }

                    if (++frameCounter >= 3)
                    {
                        frameCounter = 0;
                        if (++frame >= Main.projFrames[type])
                        {
                            frame = 0;
                        }
                    }

                    if (alpha == 0 && Main.rand.Next(15) == 0)
                    {
                        Dust[] dust72 = Main.dust;
                        Vector2 top = base.Top;
                        newColor = default(Color);
                        Dust dust73 = dust72[Dust.NewDust(top, 0, 0, 261, 0f, 0f, 100, newColor, 1f)];
                        dust73.velocity.X = 0f;
                        dust73.noGravity = true;
                        dust73.fadeIn = 1f;
                        dust73.position = base.Center + Vector2.UnitY.RotatedByRandom(6.2831854820251465) *
                                          (4f * Main.rand.NextFloat() + 26f);
                        dust73.scale = 0.5f;
                    }

                    localAI[0] += 1f;
                    if (localAI[0] >= 60f)
                    {
                        localAI[0] = 0f;
                    }
                }

                if (this.ai[0] < 0f)
                {
                    this.ai[0] += 1f;
                    if (flag65)
                    {
                        this.ai[1] -= (float) base.direction * 0.3926991f / 50f;
                    }
                }

                if (this.ai[0] == 0f)
                {
                    int num1094 = -1;
                    float num1095 = num1092;
                    NPC ownerMinionAttackTargetNPC6 = OwnerMinionAttackTargetNPC;
                    if (ownerMinionAttackTargetNPC6 != null && ownerMinionAttackTargetNPC6.CanBeChasedBy(this, false))
                    {
                        float num1096 = Distance(ownerMinionAttackTargetNPC6.Center);
                        if (num1096 < num1095 &&
                            Collision.CanHitLine(base.Center, 0, 0, ownerMinionAttackTargetNPC6.Center, 0, 0))
                        {
                            num1095 = num1096;
                            num1094 = ownerMinionAttackTargetNPC6.whoAmI;
                        }
                    }

                    if (num1094 < 0)
                    {
                        for (int num1097 = 0; num1097 < 200; num1097++)
                        {
                            NPC nPC15 = Main.npc[num1097];
                            if (nPC15.CanBeChasedBy(this, false))
                            {
                                float num1098 = Distance(nPC15.Center);
                                if (num1098 < num1095 && Collision.CanHitLine(base.Center, 0, 0, nPC15.Center, 0, 0))
                                {
                                    num1095 = num1098;
                                    num1094 = num1097;
                                }
                            }
                        }
                    }

                    if (num1094 != -1)
                    {
                        this.ai[0] = 1f;
                        this.ai[1] = (float) num1094;
                        netUpdate = true;
                        return;
                    }
                }

                if (this.ai[0] > 0f)
                {
                    int num1099 = (int) this.ai[1];
                    if (!Main.npc[num1099].CanBeChasedBy(this, false))
                    {
                        this.ai[0] = 0f;
                        this.ai[1] = 0f;
                        netUpdate = true;
                    }
                    else
                    {
                        this.ai[0] += 1f;
                        float num1100 = 30f;
                        if (flag66)
                        {
                            num1100 = 5f;
                        }

                        if (this.ai[0] >= num1100)
                        {
                            Vector2 vector125 = DirectionTo(Main.npc[num1099].Center);
                            if (vector125.HasNaNs())
                            {
                                vector125 = Vector2.UnitY;
                            }

                            float num1101 = vector125.ToRotation();
                            int num1102 = (vector125.X > 0f) ? 1 : (-1);
                            if (flag65)
                            {
                                base.direction = num1102;
                                this.ai[0] = -60f;
                                this.ai[1] = num1101 + (float) num1102 * 3.14159274f / 16f;
                                netUpdate = true;
                                if (owner == Main.myPlayer)
                                {
                                    NewProjectile(base.Center.X, base.Center.Y, vector125.X, vector125.Y, 642, damage,
                                        knockBack, owner, 0f, (float) whoAmI);
                                }
                            }

                            if (flag66)
                            {
                                base.direction = num1102;
                                this.ai[0] = -20f;
                                netUpdate = true;
                                if (owner == Main.myPlayer)
                                {
                                    Vector2 vector126 = Main.npc[num1099].position +
                                                        Main.npc[num1099].Size *
                                                        Utils.RandomVector2(Main.rand, 0f, 1f) - base.Center;
                                    for (int num1103 = 0; num1103 < 3; num1103++)
                                    {
                                        Vector2 vector127 = base.Center + vector126;
                                        if (num1103 > 0)
                                        {
                                            vector127 = base.Center + vector126.RotatedByRandom(0.78539818525314331) *
                                                        (Main.rand.NextFloat() * 0.5f + 0.75f);
                                        }

                                        float x41 = Main.rgbToHsl(new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB)).X;
                                        NewProjectile(vector127.X, vector127.Y, 0f, 0f, 644, damage, knockBack, owner,
                                            x41, (float) whoAmI);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else if (aiStyle == 124)
            {
                Player player10 = Main.player[owner];
                if (player10.dead)
                {
                    Kill();
                }
                else
                {
                    if (Main.myPlayer == owner && player10.suspiciouslookingTentacle)
                    {
                        timeLeft = 2;
                    }

                    base.direction = (spriteDirection = player10.direction);
                    Vector3 vector128 = DelegateMethods.v3_1 = new Vector3(0.5f, 0.9f, 1f) * 1.5f;
                    Utils.PlotTileLine(base.Center, base.Center + base.velocity * 6f, 20f,
                        DelegateMethods.CastLightOpen);
                    Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
                    Utils.PlotTileLine(player10.Center, player10.Center + player10.velocity * 6f, 40f,
                        DelegateMethods.CastLightOpen);
                    Utils.PlotTileLine(player10.Left, player10.Right, 40f, DelegateMethods.CastLightOpen);
                    Vector2 value78 = new Vector2((float) (player10.direction * 30), -20f);
                    Vector2 vector129 = player10.MountedCenter + value78;
                    float num1104 = Vector2.Distance(base.Center, vector129);
                    if (num1104 > 1000f)
                    {
                        base.Center = player10.Center + value78;
                    }

                    Vector2 vector130 = vector129 - base.Center;
                    float num1105 = 4f;
                    if (num1104 < num1105)
                    {
                        base.velocity *= 0.25f;
                    }

                    if (vector130 != Vector2.Zero)
                    {
                        if (vector130.Length() < num1105)
                        {
                            base.velocity = vector130;
                        }
                        else
                        {
                            base.velocity = vector130 * 0.1f;
                        }
                    }

                    if (base.velocity.Length() > 6f)
                    {
                        float num1106 = base.velocity.ToRotation() + 1.57079637f;
                        if (Math.Abs(rotation - num1106) >= 3.14159274f)
                        {
                            if (num1106 < rotation)
                            {
                                rotation -= 6.28318548f;
                            }
                            else
                            {
                                rotation += 6.28318548f;
                            }
                        }

                        float num1107 = 12f;
                        rotation = (rotation * (num1107 - 1f) + num1106) / num1107;
                        if (++frameCounter >= 4)
                        {
                            frameCounter = 0;
                            if (++frame >= Main.projFrames[type])
                            {
                                frame = 0;
                            }
                        }
                    }
                    else
                    {
                        if (rotation > 3.14159274f)
                        {
                            rotation -= 6.28318548f;
                        }

                        if (rotation > -0.005f && rotation < 0.005f)
                        {
                            rotation = 0f;
                        }
                        else
                        {
                            rotation *= 0.96f;
                        }

                        if (++frameCounter >= 6)
                        {
                            frameCounter = 0;
                            if (++frame >= Main.projFrames[type])
                            {
                                frame = 0;
                            }
                        }
                    }

                    if (this.ai[0] > 0f && (this.ai[0] += 1f) >= 60f)
                    {
                        this.ai[0] = 0f;
                        this.ai[1] = 0f;
                    }

                    if (Main.rand.Next(15) == 0)
                    {
                        float num1108 = -1f;
                        int num1109 = 17;
                        if ((base.Center - player10.Center).Length() < (float) Main.screenWidth)
                        {
                            int num1110 = (int) base.Center.X / 16;
                            int num1111 = (int) base.Center.Y / 16;
                            num1110 = (int) MathHelper.Clamp((float) num1110, (float) (num1109 + 1),
                                (float) (Main.maxTilesX - num1109 - 1));
                            num1111 = (int) MathHelper.Clamp((float) num1111, (float) (num1109 + 1),
                                (float) (Main.maxTilesY - num1109 - 1));
                            for (int num1112 = num1110 - num1109; num1112 <= num1110 + num1109; num1112++)
                            {
                                for (int num1113 = num1111 - num1109; num1113 <= num1111 + num1109; num1113++)
                                {
                                    int num1114 = Main.rand.Next(8);
                                    if (num1114 < 4 &&
                                        new Vector2((float) (num1110 - num1112), (float) (num1111 - num1113)).Length() <
                                        (float) num1109 && Main.tile[num1112, num1113] != null &&
                                        Main.tile[num1112, num1113].active())
                                    {
                                        bool flag67 = false;
                                        if (Main.tile[num1112, num1113].type == 185 &&
                                            Main.tile[num1112, num1113].frameY == 18)
                                        {
                                            if (Main.tile[num1112, num1113].frameX >= 576 &&
                                                Main.tile[num1112, num1113].frameX <= 882)
                                            {
                                                flag67 = true;
                                            }
                                        }
                                        else if (Main.tile[num1112, num1113].type == 186 &&
                                                 Main.tile[num1112, num1113].frameX >= 864 &&
                                                 Main.tile[num1112, num1113].frameX <= 1170)
                                        {
                                            flag67 = true;
                                        }

                                        if (flag67 || Main.tileSpelunker[Main.tile[num1112, num1113].type] ||
                                            (Main.tileAlch[Main.tile[num1112, num1113].type] &&
                                             Main.tile[num1112, num1113].type != 82))
                                        {
                                            float num1115 = Distance(new Vector2((float) (num1112 * 16 + 8),
                                                (float) (num1113 * 16 + 8)));
                                            if (num1115 < num1108 || num1108 == -1f)
                                            {
                                                num1108 = num1115;
                                                this.ai[0] = 1f;
                                                this.ai[1] = AngleTo(new Vector2((float) (num1112 * 16 + 8),
                                                    (float) (num1113 * 16 + 8)));
                                            }

                                            if (num1114 < 2)
                                            {
                                                Vector2 position231 = new Vector2((float) (num1112 * 16),
                                                    (float) (num1113 * 16));
                                                newColor = default(Color);
                                                int num1116 = Dust.NewDust(position231, 16, 16, 204, 0f, 0f, 150,
                                                    newColor, 0.3f);
                                                Main.dust[num1116].fadeIn = 0.75f;
                                                Main.dust[num1116].velocity *= 0.1f;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    float f3 = localAI[0] % 6.28318548f - 3.14159274f;
                    float num1117 = (float) Math.IEEERemainder((double) localAI[1], 1.0);
                    if (num1117 < 0f)
                    {
                        num1117 += 1f;
                    }

                    float num1118 = (float) Math.Floor((double) localAI[1]);
                    float max = 0.999f;
                    float num1119 = 0f;
                    int num1120 = 0;
                    float amount2 = 0.1f;
                    bool flag68 = player10.velocity.Length() > 3f;
                    int num1121 = -1;
                    int num1122 = -1;
                    float num1123 = 300f;
                    float num1124 = 500f;
                    for (int num1125 = 0; num1125 < 200; num1125++)
                    {
                        NPC nPC16 = Main.npc[num1125];
                        if (nPC16.active && nPC16.chaseable && !nPC16.dontTakeDamage && !nPC16.immortal)
                        {
                            float num1126 = Distance(nPC16.Center);
                            if (nPC16.friendly || nPC16.lifeMax <= 5)
                            {
                                if (num1126 < num1123 && !flag68)
                                {
                                    num1123 = num1126;
                                    num1122 = num1125;
                                }
                            }
                            else if (num1126 < num1124)
                            {
                                num1124 = num1126;
                                num1121 = num1125;
                            }
                        }
                    }

                    if (flag68)
                    {
                        num1119 = AngleTo(base.Center + player10.velocity);
                        num1120 = 1;
                        num1117 = MathHelper.Clamp(num1117 + 0.05f, 0f, max);
                        num1118 += (float) Math.Sign(-10f - num1118);
                    }
                    else if (num1121 != -1)
                    {
                        num1119 = AngleTo(Main.npc[num1121].Center);
                        num1120 = 2;
                        num1117 = MathHelper.Clamp(num1117 + 0.05f, 0f, max);
                        num1118 += (float) Math.Sign(-12f - num1118);
                    }
                    else if (num1122 != -1)
                    {
                        num1119 = AngleTo(Main.npc[num1122].Center);
                        num1120 = 3;
                        num1117 = MathHelper.Clamp(num1117 + 0.05f, 0f, max);
                        num1118 += (float) Math.Sign(6f - num1118);
                    }
                    else if (this.ai[0] > 0f)
                    {
                        num1119 = this.ai[1];
                        num1117 = MathHelper.Clamp(num1117 + (float) Math.Sign(0.75f - num1117) * 0.05f, 0f, max);
                        num1120 = 4;
                        num1118 += (float) Math.Sign(10f - num1118);
                        if (Main.rand.Next(10) == 0)
                        {
                            Vector2 position232 =
                                base.Center + f3.ToRotationVector2() * 6f * num1117 - Vector2.One * 4f;
                            newColor = default(Color);
                            int num1127 = Dust.NewDust(position232, 8, 8, 204, 0f, 0f, 150, newColor, 0.3f);
                            Main.dust[num1127].fadeIn = 0.75f;
                            Main.dust[num1127].velocity *= 0.1f;
                        }
                    }
                    else
                    {
                        num1119 = ((player10.direction == 1) ? 0f : 3.14160275f);
                        num1117 = MathHelper.Clamp(num1117 + (float) Math.Sign(0.75f - num1117) * 0.05f, 0f, max);
                        num1118 += (float) Math.Sign(0f - num1118);
                        amount2 = 0.12f;
                    }

                    Vector2 value79 = num1119.ToRotationVector2();
                    num1119 = Vector2.Lerp(f3.ToRotationVector2(), value79, amount2).ToRotation();
                    localAI[0] = num1119 + (float) num1120 * 6.28318548f + 3.14159274f;
                    localAI[1] = num1118 + num1117;
                }
            }
            else if (aiStyle == 125)
            {
                Player player11 = Main.player[owner];
                if (Main.myPlayer == owner)
                {
                    if (localAI[1] > 0f)
                    {
                        localAI[1] -= 1f;
                    }

                    if (player11.noItems || player11.CCed || player11.dead)
                    {
                        Kill();
                    }
                    else if (Main.mouseRight && Main.mouseRightRelease)
                    {
                        Kill();
                        player11.mouseInterface = true;
                        Main.blockMouse = true;
                    }
                    else if (!player11.channel)
                    {
                        if (localAI[0] == 0f)
                        {
                            localAI[0] = 1f;
                        }

                        Kill();
                    }
                    else if (localAI[1] == 0f)
                    {
                        Vector2 vector131 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY);
                        if (player11.gravDir == -1f)
                        {
                            vector131.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y;
                        }

                        if (vector131 != base.Center)
                        {
                            netUpdate = true;
                            base.Center = vector131;
                            localAI[1] = 1f;
                        }

                        if (this.ai[0] == 0f && this.ai[1] == 0f)
                        {
                            this.ai[0] = (float) ((int) base.Center.X / 16);
                            this.ai[1] = (float) ((int) base.Center.Y / 16);
                            netUpdate = true;
                            base.velocity = Vector2.Zero;
                        }
                    }

                    base.velocity = Vector2.Zero;
                    Point point5 = new Vector2(this.ai[0], this.ai[1]).ToPoint();
                    Point point6 = base.Center.ToTileCoordinates();
                    Math.Abs(point5.X - point6.X);
                    Math.Abs(point5.Y - point6.Y);
                    int num1128 = Math.Sign(point6.X - point5.X);
                    int num1129 = Math.Sign(point6.Y - point5.Y);
                    Point point7 = default(Point);
                    bool flag69 = false;
                    bool flag70 = player11.direction == 1;
                    int num1130;
                    int num1131;
                    int num1132;
                    if (flag70)
                    {
                        point7.X = point5.X;
                        num1130 = point5.Y;
                        num1131 = point6.Y;
                        num1132 = num1129;
                    }
                    else
                    {
                        point7.Y = point5.Y;
                        num1130 = point5.X;
                        num1131 = point6.X;
                        num1132 = num1128;
                    }

                    for (int num1133 = num1130; num1133 != num1131; num1133 += num1132)
                    {
                        if (flag69)
                        {
                            break;
                        }

                        if (flag70)
                        {
                            point7.Y = num1133;
                        }
                        else
                        {
                            point7.X = num1133;
                        }

                        if (WorldGen.InWorld(point7.X, point7.Y, 1))
                        {
                            Tile tile6 = Main.tile[point7.X, point7.Y];
                        }
                    }

                    if (flag70)
                    {
                        point7.Y = point6.Y;
                        num1130 = point5.X;
                        num1131 = point6.X;
                        num1132 = num1128;
                    }
                    else
                    {
                        point7.X = point6.X;
                        num1130 = point5.Y;
                        num1131 = point6.Y;
                        num1132 = num1129;
                    }

                    for (int num1134 = num1130; num1134 != num1131; num1134 += num1132)
                    {
                        if (flag69)
                        {
                            break;
                        }

                        if (!flag70)
                        {
                            point7.Y = num1134;
                        }
                        else
                        {
                            point7.X = num1134;
                        }

                        if (WorldGen.InWorld(point7.X, point7.Y, 1))
                        {
                            Tile tile6 = Main.tile[point7.X, point7.Y];
                        }
                    }
                }

                int num1135 = Math.Sign(player11.velocity.X);
                if (num1135 != 0)
                {
                    player11.ChangeDir(num1135);
                }

                player11.heldProj = whoAmI;
                player11.itemTime = 2;
                player11.itemAnimation = 2;
                player11.itemRotation = 0f;
            }
            else if (aiStyle == 126)
            {
                int num1136 = Math.Sign(base.velocity.Y);
                int num1137 = (num1136 != -1) ? 1 : 0;
                if (this.ai[0] == 0f)
                {
                    if (!Collision.SolidCollision(
                            base.position + new Vector2(0f, (float) ((num1136 == -1) ? (base.height - 48) : 0)),
                            base.width, 48) && !Collision.WetCollision(
                            base.position + new Vector2(0f, (float) ((num1136 == -1) ? (base.height - 20) : 0)),
                            base.width, 20))
                    {
                        base.velocity = new Vector2(0f, (float) Math.Sign(base.velocity.Y) * 0.001f);
                        this.ai[0] = 1f;
                        this.ai[1] = 0f;
                        timeLeft = 60;
                    }

                    this.ai[1] += 1f;
                    if (this.ai[1] >= 60f)
                    {
                        Kill();
                    }

                    for (int num1138 = 0; num1138 < 3; num1138++)
                    {
                        Vector2 position233 = base.position;
                        int width164 = base.width;
                        int height163 = base.height;
                        newColor = default(Color);
                        int num1139 = Dust.NewDust(position233, width164, height163, 31, 0f, 0f, 100, newColor, 1f);
                        Main.dust[num1139].scale = 0.1f + (float) Main.rand.Next(5) * 0.1f;
                        Main.dust[num1139].fadeIn = 1.5f + (float) Main.rand.Next(5) * 0.1f;
                        Main.dust[num1139].noGravity = true;
                        Dust obj12 = Main.dust[num1139];
                        Vector2 center40 = base.Center;
                        Vector2 spinningpoint63 = new Vector2(0f, (float) (-base.height / 2));
                        double radians65 = (double) rotation;
                        vector = default(Vector2);
                        obj12.position = center40 + spinningpoint63.RotatedBy(radians65, vector) * 1.1f;
                    }
                }

                if (this.ai[0] == 1f)
                {
                    base.velocity = new Vector2(0f, (float) Math.Sign(base.velocity.Y) * 0.001f);
                    if (num1136 != 0)
                    {
                        int num1140 = 16;
                        int num1141 = 320;
                        if (type == 670)
                        {
                            num1141 -= (int) Math.Abs(localAI[1]) * 64;
                        }

                        for (;
                            num1140 < num1141 && !Collision.SolidCollision(
                                base.position + new Vector2(0f,
                                    (float) ((num1136 == -1) ? (base.height - num1140 - 16) : 0)), base.width,
                                num1140 + 16);
                            num1140 += 16)
                        {
                        }

                        if (num1136 == -1)
                        {
                            base.position.Y += (float) base.height;
                            base.height = num1140;
                            base.position.Y -= (float) num1140;
                        }
                        else
                        {
                            base.height = num1140;
                        }
                    }

                    this.ai[1] += 1f;
                    if (type == 670 && owner == Main.myPlayer && this.ai[1] == 12f && localAI[1] < 3f &&
                        localAI[1] > -3f)
                    {
                        if (localAI[1] == 0f)
                        {
                            int num1142 = NewProjectile(base.Bottom + new Vector2(-50f, -10f), -Vector2.UnitY, type,
                                damage, knockBack, owner, 0f, 0f);
                            Main.projectile[num1142].localAI[1] = localAI[1] - 1f;
                            num1142 = NewProjectile(base.Bottom + new Vector2(50f, -10f), -Vector2.UnitY, type, damage,
                                knockBack, owner, 0f, 0f);
                            Main.projectile[num1142].localAI[1] = localAI[1] + 1f;
                        }
                        else
                        {
                            int num1143 = Math.Sign(localAI[1]);
                            int num1144 = NewProjectile(base.Bottom + new Vector2((float) (50 * num1143), -10f),
                                -Vector2.UnitY, type, damage, knockBack, owner, 0f, 0f);
                            Main.projectile[num1144].localAI[1] = localAI[1] + (float) num1143;
                        }
                    }

                    if (this.ai[1] >= 60f)
                    {
                        Kill();
                    }

                    if (localAI[0] == 0f)
                    {
                        localAI[0] = 1f;
                        for (int num1145 = 0; (float) num1145 < 60f; num1145++)
                        {
                            int num1146 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
                            Vector2 position234 = base.position;
                            int width165 = base.width;
                            int height164 = base.height;
                            int num1147 = num1146;
                            float speedY34 = -2.5f * (float) (-num1136);
                            newColor = default(Color);
                            int num1148 = Dust.NewDust(position234, width165, height164, num1147, 0f, speedY34, 0,
                                newColor, 1f);
                            Main.dust[num1148].alpha = 200;
                            Main.dust[num1148].velocity *= new Vector2(0.3f, 2f);
                            Main.dust[num1148].velocity.Y += (float) (2 * num1136);
                            Main.dust[num1148].scale += Main.rand.NextFloat();
                            Main.dust[num1148].position = new Vector2(base.Center.X,
                                base.Center.Y + (float) base.height * 0.5f * (float) (-num1136));
                            Main.dust[num1148].customData = num1137;
                            if (num1136 == -1 && Main.rand.Next(4) != 0)
                            {
                                Main.dust[num1148].velocity.Y -= 0.2f;
                            }
                        }

                        Main.PlaySound(SoundID.Item34, base.position);
                    }

                    if (num1136 == 1)
                    {
                        for (int num1149 = 0; (float) num1149 < 9f; num1149++)
                        {
                            int num1150 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
                            Vector2 position235 = base.position;
                            int width166 = base.width;
                            int height165 = base.height;
                            int num1151 = num1150;
                            float speedY35 = -2.5f * (float) (-num1136);
                            newColor = default(Color);
                            int num1152 = Dust.NewDust(position235, width166, height165, num1151, 0f, speedY35, 0,
                                newColor, 1f);
                            Main.dust[num1152].alpha = 200;
                            Main.dust[num1152].velocity *= new Vector2(0.3f, 2f);
                            Main.dust[num1152].velocity.Y += (float) (2 * num1136);
                            Main.dust[num1152].scale += Main.rand.NextFloat();
                            Main.dust[num1152].position = new Vector2(base.Center.X,
                                base.Center.Y + (float) base.height * 0.5f * (float) (-num1136));
                            Main.dust[num1152].customData = num1137;
                            if (num1136 == -1 && Main.rand.Next(4) != 0)
                            {
                                Main.dust[num1152].velocity.Y -= 0.2f;
                            }
                        }
                    }

                    int num1153 = (int) (this.ai[1] / 60f * (float) base.height) * 3;
                    if (num1153 > base.height)
                    {
                        num1153 = base.height;
                    }

                    Vector2 vector132 = base.position +
                                        ((num1136 == -1)
                                            ? new Vector2(0f, (float) (base.height - num1153))
                                            : Vector2.Zero);
                    Vector2 vector133 = base.position +
                                        ((num1136 == -1) ? new Vector2(0f, (float) base.height) : Vector2.Zero);
                    for (int num1154 = 0; (float) num1154 < 6f; num1154++)
                    {
                        if (Main.rand.Next(3) < 2)
                        {
                            Vector2 position236 = vector132;
                            int width167 = base.width;
                            int height166 = num1153;
                            newColor = default(Color);
                            int num1155 = Dust.NewDust(position236, width167, height166, 6, 0f, 0f, 90, newColor, 2.5f);
                            Main.dust[num1155].noGravity = true;
                            Main.dust[num1155].fadeIn = 1f;
                            if (Main.dust[num1155].velocity.Y > 0f)
                            {
                                Main.dust[num1155].velocity.Y *= -1f;
                            }

                            if (Main.rand.Next(6) < 3)
                            {
                                Main.dust[num1155].position.Y =
                                    MathHelper.Lerp(Main.dust[num1155].position.Y, vector133.Y, 0.5f);
                                Main.dust[num1155].velocity *= 5f;
                                Main.dust[num1155].velocity.Y -= 3f;
                                Main.dust[num1155].position.X = base.Center.X;
                                Main.dust[num1155].noGravity = false;
                                Main.dust[num1155].noLight = true;
                                Main.dust[num1155].fadeIn = 0.4f;
                                Main.dust[num1155].scale *= 0.3f;
                            }
                            else
                            {
                                Main.dust[num1155].velocity =
                                    DirectionFrom(Main.dust[num1155].position) * Main.dust[num1155].velocity.Length() *
                                    0.25f;
                            }

                            Main.dust[num1155].velocity.Y *= (float) (-num1136);
                            Main.dust[num1155].customData = num1137;
                        }
                    }

                    for (int num1156 = 0; (float) num1156 < 6f; num1156++)
                    {
                        if (!(Main.rand.NextFloat() < 0.5f))
                        {
                            int num1157 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
                            Vector2 position237 = vector132;
                            int width168 = base.width;
                            int height167 = num1153;
                            int num1158 = num1157;
                            float speedY36 = -2.5f * (float) (-num1136);
                            newColor = default(Color);
                            int num1159 = Dust.NewDust(position237, width168, height167, num1158, 0f, speedY36, 0,
                                newColor, 1f);
                            Main.dust[num1159].alpha = 200;
                            Main.dust[num1159].velocity *= new Vector2(0.6f, 1.5f);
                            Main.dust[num1159].scale += Main.rand.NextFloat();
                            if (num1136 == -1 && Main.rand.Next(4) != 0)
                            {
                                Main.dust[num1159].velocity.Y -= 0.2f;
                            }

                            Main.dust[num1159].customData = num1137;
                        }
                    }
                }
            }
            else if (aiStyle == 127)
            {
                float num1160 = 900f;
                if (type == 657)
                {
                    num1160 = 300f;
                }

                if (soundDelay == 0)
                {
                    soundDelay = -1;
                    Main.PlaySound(SoundID.Item82, base.Center);
                }

                this.ai[0] += 1f;
                if (this.ai[0] >= num1160)
                {
                    Kill();
                }

                if (type == 656 && localAI[0] >= 30f)
                {
                    damage = 0;
                    if (this.ai[0] < num1160 - 120f)
                    {
                        float num1161 = this.ai[0] % 60f;
                        this.ai[0] = num1160 - 120f + num1161;
                        netUpdate = true;
                    }
                }

                float num1162 = 15f;
                float num1163 = 15f;
                Point point8 = base.Center.ToTileCoordinates();
                Collision.ExpandVertically(point8.X, point8.Y, out int topY, out int bottomY, (int) num1162,
                    (int) num1163);
                topY++;
                bottomY--;
                Vector2 value80 = new Vector2((float) point8.X, (float) topY) * 16f + new Vector2(8f);
                Vector2 value81 = new Vector2((float) point8.X, (float) bottomY) * 16f + new Vector2(8f);
                Vector2 vector134 = Vector2.Lerp(value80, value81, 0.5f);
                Vector2 value82 = new Vector2(0f, value81.Y - value80.Y);
                value82.X = value82.Y * 0.2f;
                base.width = (int) (value82.X * 0.65f);
                base.height = (int) value82.Y;
                base.Center = vector134;
                if (type == 656 && owner == Main.myPlayer)
                {
                    bool flag71 = false;
                    Vector2 center41 = Main.player[owner].Center;
                    Vector2 top2 = Main.player[owner].Top;
                    for (float num1164 = 0f; num1164 < 1f; num1164 += 0.05f)
                    {
                        Vector2 position238 = Vector2.Lerp(value80, value81, num1164);
                        if (Collision.CanHitLine(position238, 0, 0, center41, 0, 0) ||
                            Collision.CanHitLine(position238, 0, 0, top2, 0, 0))
                        {
                            flag71 = true;
                            break;
                        }
                    }

                    if (!flag71 && this.ai[0] < num1160 - 120f)
                    {
                        float num1165 = this.ai[0] % 60f;
                        this.ai[0] = num1160 - 120f + num1165;
                        netUpdate = true;
                    }
                }

                if (this.ai[0] < num1160 - 120f)
                {
                    for (int num1166 = 0; num1166 < 1; num1166++)
                    {
                        float value83 = -0.5f;
                        float value84 = 0.9f;
                        float amount3 = Main.rand.NextFloat();
                        Vector2 value85 = new Vector2(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()),
                            MathHelper.Lerp(value83, value84, amount3));
                        value85.X *= MathHelper.Lerp(2.2f, 0.6f, amount3);
                        value85.X *= -1f;
                        Vector2 value86 = new Vector2(6f, 10f);
                        Vector2 vector135 = vector134 + value82 * value85 * 0.5f + value86;
                        Dust[] dust74 = Main.dust;
                        Vector2 position239 = vector135;
                        newColor = default(Color);
                        Dust dust75 = dust74[Dust.NewDust(position239, 0, 0, 269, 0f, 0f, 0, newColor, 1f)];
                        dust75.position = vector135;
                        dust75.customData = vector134 + value86;
                        dust75.fadeIn = 1f;
                        dust75.scale = 0.3f;
                        if (value85.X > -1.2f)
                        {
                            dust75.velocity.X = 1f + Main.rand.NextFloat();
                        }

                        dust75.velocity.Y = Main.rand.NextFloat() * -0.5f - 1f;
                    }
                }
            }
            else if (aiStyle == 128)
            {
                Color newColor4 = new Color(255, 255, 255);
                if (soundDelay == 0)
                {
                    soundDelay = -1;
                    Main.PlaySound(SoundID.Item60, base.Center);
                }

                if (localAI[1] < 30f)
                {
                    for (int num1167 = 0; num1167 < 1; num1167++)
                    {
                        float value87 = -0.5f;
                        float value88 = 0.9f;
                        float amount4 = Main.rand.NextFloat();
                        Vector2 value89 = new Vector2(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()),
                            MathHelper.Lerp(value87, value88, amount4));
                        value89.X *= MathHelper.Lerp(2.2f, 0.6f, amount4);
                        value89.X *= -1f;
                        Vector2 value90 = new Vector2(2f, 10f);
                        Vector2 vector136 = base.Center + new Vector2(60f, 200f) * value89 * 0.5f + value90;
                        Dust[] dust76 = Main.dust;
                        Vector2 position240 = vector136;
                        newColor = default(Color);
                        Dust dust77 = dust76[Dust.NewDust(position240, 0, 0, 269, 0f, 0f, 0, newColor, 1f)];
                        dust77.position = vector136;
                        dust77.customData = base.Center + value90;
                        dust77.fadeIn = 1f;
                        dust77.scale = 0.3f;
                        if (value89.X > -1.2f)
                        {
                            dust77.velocity.X = 1f + Main.rand.NextFloat();
                        }

                        dust77.velocity.Y = Main.rand.NextFloat() * -0.5f - 1f;
                    }
                }

                if (localAI[0] == 0f)
                {
                    localAI[0] = 0.8f;
                    base.direction = 1;
                    Point point9 = base.Center.ToTileCoordinates();
                    base.Center = new Vector2((float) (point9.X * 16 + 8), (float) (point9.Y * 16 + 8));
                }

                rotation = localAI[1] / 40f * 6.28318548f * (float) base.direction;
                if (localAI[1] < 33f)
                {
                    if (alpha > 0)
                    {
                        alpha -= 8;
                    }

                    if (alpha < 0)
                    {
                        alpha = 0;
                    }
                }

                if (localAI[1] > 103f)
                {
                    if (alpha < 255)
                    {
                        alpha += 16;
                    }

                    if (alpha > 255)
                    {
                        alpha = 255;
                    }
                }

                if (alpha == 0)
                {
                    Lighting.AddLight(base.Center, newColor4.ToVector3() * 0.5f);
                }

                for (int num1168 = 0; num1168 < 2; num1168++)
                {
                    if (Main.rand.Next(10) == 0)
                    {
                        Vector2 unitY11 = Vector2.UnitY;
                        double radians66 = (double) ((float) num1168 * 3.14159274f);
                        vector = default(Vector2);
                        Vector2 spinningpoint64 = unitY11.RotatedBy(radians66, vector);
                        double radians67 = (double) rotation;
                        vector = default(Vector2);
                        Vector2 value91 = spinningpoint64.RotatedBy(radians67, vector);
                        Dust dust78 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor4, 1.5f)];
                        dust78.noGravity = true;
                        dust78.noLight = true;
                        dust78.scale = Opacity * localAI[0];
                        dust78.position = base.Center;
                        dust78.velocity = value91 * 2.5f;
                    }
                }

                for (int num1169 = 0; num1169 < 2; num1169++)
                {
                    if (Main.rand.Next(10) == 0)
                    {
                        Vector2 unitY12 = Vector2.UnitY;
                        double radians68 = (double) ((float) num1169 * 3.14159274f);
                        vector = default(Vector2);
                        Vector2 value92 = unitY12.RotatedBy(radians68, vector);
                        Dust dust79 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor4, 1.5f)];
                        dust79.noGravity = true;
                        dust79.noLight = true;
                        dust79.scale = Opacity * localAI[0];
                        dust79.position = base.Center;
                        dust79.velocity = value92 * 2.5f;
                    }
                }

                if (localAI[1] < 33f || localAI[1] > 87f)
                {
                    scale = Opacity / 2f * localAI[0];
                }

                base.velocity = Vector2.Zero;
                localAI[1] += 1f;
                if (localAI[1] == 60f && owner == Main.myPlayer)
                {
                    int num1170 = 30;
                    if (Main.expertMode)
                    {
                        num1170 = 22;
                    }

                    NewProjectile(base.Center, Vector2.Zero, 657, num1170, 3f, owner, 0f, 0f);
                }

                if (localAI[1] >= 120f)
                {
                    Kill();
                }
            }
            else if (aiStyle == 129)
            {
                float num1171 = 10f;
                float scaleFactor17 = 5f;
                float num1172 = 40f;
                if (type == 659)
                {
                    num1171 = 3f;
                    scaleFactor17 = 7.5f;
                    num1172 = 1f;
                    if (localAI[0] > 0f)
                    {
                        localAI[0] -= 1f;
                    }

                    if (localAI[0] == 0f && this.ai[0] < 0f && owner == Main.myPlayer)
                    {
                        localAI[0] = 5f;
                        for (int num1173 = 0; num1173 < 200; num1173++)
                        {
                            NPC nPC17 = Main.npc[num1173];
                            if (nPC17.CanBeChasedBy(this, false))
                            {
                                bool flag72 = this.ai[0] < 0f || Main.npc[(int) this.ai[0]].Distance(base.Center) >
                                              nPC17.Distance(base.Center);
                                if ((flag72 & (nPC17.Distance(base.Center) < 400f)) &&
                                    (Collision.CanHitLine(base.Center, 0, 0, nPC17.Center, 0, 0) ||
                                     Collision.CanHitLine(base.Center, 0, 0, nPC17.Top, 0, 0)))
                                {
                                    this.ai[0] = (float) num1173;
                                }
                            }
                        }

                        if (this.ai[0] >= 0f)
                        {
                            timeLeft = 300;
                            netUpdate = true;
                        }
                    }

                    if (timeLeft > 30 && alpha > 0)
                    {
                        alpha -= 12;
                    }

                    if (timeLeft > 30 && alpha < 128 &&
                        Collision.SolidCollision(base.position, base.width, base.height))
                    {
                        alpha = 128;
                    }

                    if (alpha < 0)
                    {
                        alpha = 0;
                    }

                    if (++frameCounter > 4)
                    {
                        frameCounter = 0;
                        if (++frame >= 4)
                        {
                            frame = 0;
                        }
                    }

                    float num1174 = 0.5f;
                    if (timeLeft < 120)
                    {
                        num1174 = 1.1f;
                    }

                    if (timeLeft < 60)
                    {
                        num1174 = 1.6f;
                    }

                    this.ai[1] += 1f;
                    float num1189 = this.ai[1] / 180f;
                    for (float num1175 = 0f; num1175 < 3f; num1175 += 1f)
                    {
                        if (Main.rand.Next(3) == 0)
                        {
                            Dust[] dust80 = Main.dust;
                            Vector2 center42 = base.Center;
                            newColor = default(Color);
                            Dust dust81 = dust80[Dust.NewDust(center42, 0, 0, 27, 0f, -2f, 0, newColor, 1f)];
                            Dust dust82 = dust81;
                            Vector2 center43 = base.Center;
                            Vector2 unitY13 = Vector2.UnitY;
                            double radians69 = (double) (num1175 * 6.28318548f / 3f + this.ai[1]);
                            vector = default(Vector2);
                            dust82.position = center43 + unitY13.RotatedBy(radians69, vector) * 10f;
                            dust81.noGravity = true;
                            dust81.velocity = DirectionFrom(dust81.position);
                            dust81.scale = num1174;
                            dust81.fadeIn = 0.5f;
                            dust81.alpha = 200;
                        }
                    }
                }

                if (timeLeft > 2 && Collision.SolidCollision(base.position, base.width, base.height))
                {
                    timeLeft = 2;
                }

                int num1176 = (int) this.ai[0];
                if (num1176 >= 0 && Main.npc[num1176].active)
                {
                    if (Distance(Main.npc[num1176].Center) > num1172)
                    {
                        Vector2 vector137 = DirectionTo(Main.npc[num1176].Center);
                        if (vector137.HasNaNs())
                        {
                            vector137 = Vector2.UnitY;
                        }

                        base.velocity = (base.velocity * (num1171 - 1f) + vector137 * scaleFactor17) / num1171;
                    }
                }
                else
                {
                    if (this.ai[0] == -1f && timeLeft > 5)
                    {
                        timeLeft = 5;
                    }

                    if (this.ai[0] == -2f && timeLeft > 180)
                    {
                        timeLeft = 180;
                    }

                    if (this.ai[0] >= 0f)
                    {
                        this.ai[0] = -1f;
                        netUpdate = true;
                    }
                }
            }
            else if (aiStyle == 130)
            {
                AI_130_FlameBurstTower();
            }
            else if (aiStyle == 131)
            {
                AI_131_FlameBurstShot();
            }
            else if (aiStyle == 132)
            {
                if (localAI[1] == 0f)
                {
                    if (localAI[0] == 0f)
                    {
                        Main.PlayTrackedSound(SoundID.DD2_DefeatScene, base.Center);
                    }

                    if (localAI[0] == 105f)
                    {
                        for (int num1177 = 0; num1177 < 20; num1177++)
                        {
                            float num1178 = (float) num1177 / 20f;
                            Vector2 spinningpoint65 = new Vector2(Main.rand.NextFloat() * 10f, 0f);
                            double radians70 = (double) (num1178 * -3.14159274f + Main.rand.NextFloat() * 0.1f - 0.05f);
                            vector = default(Vector2);
                            Vector2 vector138 = spinningpoint65.RotatedBy(radians70, vector);
                            Gore gore = Gore.NewGoreDirect(base.Center + vector138 * 3f, vector138,
                                Utils.SelectRandom<int>(Main.rand, 1027, 1028, 1029, 1030), 1f);
                            if (gore.velocity.Y > 0f)
                            {
                                gore.velocity *= -0.5f;
                            }

                            if (gore.velocity.Y < -5f)
                            {
                                gore.velocity.Y *= 0.8f;
                            }

                            gore.velocity.Y *= 1.1f;
                            gore.velocity.X *= 0.88f;
                        }
                    }

                    if (!Main.dedServ)
                    {
                        if (!Terraria.Graphics.Effects.Filters.Scene["CrystalDestructionVortex"].IsActive())
                        {
                            Terraria.Graphics.Effects.FilterManager scene = Terraria.Graphics.Effects.Filters.Scene;
                            vector = default(Vector2);
                            scene.Activate("CrystalDestructionVortex", vector);
                        }

                        if (!Terraria.Graphics.Effects.Filters.Scene["CrystalDestructionColor"].IsActive())
                        {
                            Terraria.Graphics.Effects.FilterManager scene2 = Terraria.Graphics.Effects.Filters.Scene;
                            vector = default(Vector2);
                            scene2.Activate("CrystalDestructionColor", vector);
                        }

                        float num1179 = Math.Min(1f, localAI[0] / 120f);
                        Terraria.Graphics.Effects.Filters.Scene["CrystalDestructionColor"].GetShader()
                            .UseIntensity(num1179);
                        Terraria.Graphics.Effects.Filters.Scene["CrystalDestructionVortex"].GetShader()
                            .UseIntensity(num1179 * 2f).UseProgress(0f)
                            .UseTargetPosition(base.Center);
                    }

                    if (localAI[0] == 120f)
                    {
                        localAI[0] = 0f;
                        localAI[1] += 1f;
                    }
                }
                else if (localAI[1] == 1f)
                {
                    if (!Main.dedServ)
                    {
                        float num1190 = localAI[0] / 300f;
                        float num1180 = Math.Min(1f, localAI[0] / 150f);
                        base.velocity.Y = num1180 * -0.25f;
                        if (!Terraria.Graphics.Effects.Filters.Scene["CrystalDestructionVortex"].IsActive())
                        {
                            Terraria.Graphics.Effects.FilterManager scene3 = Terraria.Graphics.Effects.Filters.Scene;
                            vector = default(Vector2);
                            scene3.Activate("CrystalDestructionVortex", vector);
                        }

                        if (!Terraria.Graphics.Effects.Filters.Scene["CrystalDestructionColor"].IsActive())
                        {
                            Terraria.Graphics.Effects.FilterManager scene4 = Terraria.Graphics.Effects.Filters.Scene;
                            vector = default(Vector2);
                            scene4.Activate("CrystalDestructionColor", vector);
                        }

                        num1180 = 1f;
                        Terraria.Graphics.Effects.Filters.Scene["CrystalDestructionColor"].GetShader()
                            .UseIntensity(num1180);
                        Terraria.Graphics.Effects.Filters.Scene["CrystalDestructionVortex"].GetShader()
                            .UseIntensity(num1180 * 2f).UseProgress(0f)
                            .UseTargetPosition(base.Center);
                    }

                    if (localAI[0] == 300f)
                    {
                        localAI[0] = 0f;
                        localAI[1] += 1f;
                    }
                }
                else if (localAI[1] == 2f)
                {
                    float num1181 = localAI[0] / 300f;
                    if (Main.netMode != 2)
                    {
                        Terraria.Graphics.Effects.Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(2f)
                            .UseProgress(num1181 * 30f);
                    }

                    base.velocity.Y -= 1f;
                    if (localAI[0] == 60f)
                    {
                        localAI[0] = 0f;
                        localAI[1] += 1f;
                    }
                }
                else if (localAI[1] == 3f)
                {
                    if (Main.dedServ)
                    {
                        Terraria.Graphics.Effects.Filters.Scene.Deactivate("CrystalDestructionVortex");
                        Terraria.Graphics.Effects.Filters.Scene.Deactivate("CrystalDestructionColor");
                    }

                    Kill();
                }

                if (localAI[1] >= 1f)
                {
                    for (int num1182 = 0; num1182 < 1 + (int) (0f - base.velocity.Y); num1182++)
                    {
                        if (Main.rand.Next(2) == 0)
                        {
                            float num1183 = Main.rand.NextFloat() * (0f - base.velocity.Y);
                            Vector2 vector139 = new Vector2(Main.rand.NextFloat() * 0.1f - 0.05f, 0f);
                            vector139.X +=
                                (float) Math.Sin((double) ((base.position.Y + num1183) * 0.01f) +
                                                 6.2831854820251465 * ((double) Main.rand.Next(3) / 3.0)) * 0.5f;
                            vector139.X = MathHelper.Lerp(Main.rand.NextFloat() - 0.5f, vector139.X,
                                MathHelper.Clamp(0f - base.velocity.Y, 0f, 1f));
                            vector139.Y = 0.5f - Math.Abs(vector139.X);
                            vector139 *= new Vector2(100f, 50f);
                            vector139.Y += num1183;
                            Vector2 position241 = base.Center + vector139;
                            Dust dust83 = Dust.NewDustPerfect(position241, 27, Vector2.Zero, 0, Color.White * 0.1f,
                                1.1f);
                            dust83.velocity.Y = Main.rand.NextFloat() * 2f;
                            dust83.fadeIn = 0.1f;
                        }
                    }
                }

                localAI[0] += 1f;
            }
            else if (aiStyle == 133)
            {
                if (type == 673)
                {
                    if (this.ai[0] == 70f)
                    {
                        Main.PlayTrackedSound(SoundID.DD2_SkeletonSummoned, base.Center);
                    }

                    this.ai[0] += 1f;
                    float opacity = 0f;
                    if (this.ai[0] < 20f)
                    {
                        opacity = Utils.InverseLerp(0f, 20f, this.ai[0], true);
                    }
                    else if (this.ai[0] < 60f)
                    {
                        opacity = 1f;
                    }
                    else if (this.ai[0] < 80f)
                    {
                        opacity = Utils.InverseLerp(80f, 60f, this.ai[0], true);
                    }
                    else
                    {
                        Kill();
                    }

                    Opacity = opacity;
                    int owner2 = owner;
                    int myPlayer = Main.myPlayer;
                }

                if (type == 674)
                {
                    if (this.ai[0] == 0f)
                    {
                        Main.PlayTrackedSound(SoundID.DD2_DarkMageHealImpact, base.Center);
                    }

                    this.ai[0] += 1f;
                    if (this.ai[0] >= 40f)
                    {
                        for (int num1184 = 0; num1184 < 200; num1184++)
                        {
                            NPC nPC18 = Main.npc[num1184];
                            if (nPC18.active && nPC18.damage >= 1 && nPC18.lifeMax >= 30 &&
                                !(Distance(nPC18.Center) > 1000f) && nPC18.type != 564 && nPC18.type != 565)
                            {
                                int num1185 = 500;
                                int num1186 = nPC18.lifeMax - nPC18.life;
                                if (num1185 > num1186)
                                {
                                    num1185 = num1186;
                                }

                                if (num1185 > 0)
                                {
                                    nPC18.life += num1185;
                                    nPC18.HealEffect(num1185, true);
                                    nPC18.netUpdate = true;
                                }
                            }
                        }

                        Kill();
                    }
                }
            }
            else if (aiStyle == 134)
            {
                AI_134_Ballista();
            }
            else if (aiStyle == 135)
            {
                AI_135_OgreStomp();
            }
            else if (aiStyle == 136)
            {
                AI_136_BetsyBreath();
            }
            else if (aiStyle == 137)
            {
                AI_137_LightningAura();
            }
            else if (aiStyle == 138)
            {
                AI_138_ExplosiveTrap();
            }
            else if (aiStyle == 139)
            {
                AI_139_ExplosiveTrapExplosion();
            }
            else if (aiStyle == 140)
            {
                AI_140_MonkStaffT1();
            }
            else if (aiStyle == 141)
            {
                AI_141_MonkStaffT1Explosion();
            }
            else if (aiStyle == 142)
            {
                AI_142_MonkStaffT2And3();
            }
            else if (aiStyle == 143)
            {
                AI_143_MonkStaffT2Ghast();
            }
            else if (aiStyle == 144)
            {
                AI_144_DD2Pet();
            }
            else if (aiStyle == 145)
            {
                AI_145_BookStaffStorm();
            }
            else if (aiStyle == 145)
            {
                AI_146_DD2Victory();
            }
        }


        private void AI_061_FishingBobber()
        {
            this.timeLeft = 60;
            if (Main.player[this.owner].inventory[Main.player[this.owner].selectedItem].fishingPole == 0 ||
                Main.player[this.owner].CCed || Main.player[this.owner].noItems)
                this.Kill();
            else if (Main.player[this.owner].inventory[Main.player[this.owner].selectedItem].shoot != this.type)
                this.Kill();
            else if (Main.player[this.owner].pulley)
                this.Kill();
            else if (Main.player[this.owner].dead)
                this.Kill();
            if ((double) this.ai[1] > 0.0 && (double) this.localAI[1] >= 0.0)
            {
                this.localAI[1] = -1f;
                if (!this.lavaWet && !this.honeyWet)
                {
                    for (int index1 = 0; index1 < 100; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y - 10f),
                            this.width + 12, 24, Dust.dustWater(), 0.0f, 0.0f, 0, new Color(), 1f);
                        Main.dust[index2].velocity.Y -= 4f;
                        Main.dust[index2].velocity.X *= 2.5f;
                        Main.dust[index2].scale = 0.8f;
                        Main.dust[index2].alpha = 100;
                        Main.dust[index2].noGravity = true;
                    }

                    Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
                }
            }

            if ((double) this.ai[0] >= 1.0)
            {
                if ((double) this.ai[0] == 2.0)
                {
                    ++this.ai[0];
                    Main.PlaySound(SoundID.Item17, this.position);
                    if (!this.lavaWet && !this.honeyWet)
                    {
                        for (int index1 = 0; index1 < 100; ++index1)
                        {
                            int index2 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y - 10f),
                                this.width + 12, 24, Dust.dustWater(), 0.0f, 0.0f, 0, new Color(), 1f);
                            Main.dust[index2].velocity.Y -= 4f;
                            Main.dust[index2].velocity.X *= 2.5f;
                            Main.dust[index2].scale = 0.8f;
                            Main.dust[index2].alpha = 100;
                            Main.dust[index2].noGravity = true;
                        }

                        Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
                    }
                }

                if ((double) this.localAI[0] < 100.0)
                    ++this.localAI[0];
                this.tileCollide = false;
                float num1 = 15.9f;
                int num2 = 10;
                Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                    this.position.Y + (float) this.height * 0.5f);
                float num3 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) -
                             vector2.X;
                float num4 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) -
                             vector2.Y;
                float num5 = (float) Math.Sqrt((double) num3 * (double) num3 + (double) num4 * (double) num4);
                if ((double) num5 > 3000.0)
                    this.Kill();
                float num6 = num1 / num5;
                float num7 = num3 * num6;
                float num8 = num4 * num6;
                this.velocity.X = (this.velocity.X * (float) (num2 - 1) + num7) / (float) num2;
                this.velocity.Y = (this.velocity.Y * (float) (num2 - 1) + num8) / (float) num2;
                if (Main.myPlayer == this.owner &&
                    new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width,
                        this.height).Intersects(new Microsoft.Xna.Framework.Rectangle(
                        (int) Main.player[this.owner].position.X, (int) Main.player[this.owner].position.Y,
                        Main.player[this.owner].width, Main.player[this.owner].height)))
                {
                    if ((double) this.ai[1] > 0.0 && (double) this.ai[1] < 3930.0)
                    {
                        int Type = (int) this.ai[1];
                        Item newItem = new Item();
                        newItem.SetDefaults(Type, false);
                        if (Type == 3196)
                        {
                            int num9 = Main.player[this.owner].FishingLevel();
                            int minValue = (num9 / 20 + 3) / 2;
                            int num10 = (num9 / 10 + 6) / 2;
                            if (Main.rand.Next(50) < num9)
                                ++num10;
                            if (Main.rand.Next(100) < num9)
                                ++num10;
                            if (Main.rand.Next(150) < num9)
                                ++num10;
                            if (Main.rand.Next(200) < num9)
                                ++num10;
                            int num11 = Main.rand.Next(minValue, num10 + 1);
                            newItem.stack = num11;
                        }

                        if (Type == 3197)
                        {
                            int num9 = Main.player[this.owner].FishingLevel();
                            int minValue = (num9 / 4 + 15) / 2;
                            int num10 = (num9 / 2 + 30) / 2;
                            if (Main.rand.Next(50) < num9)
                                num10 += 4;
                            if (Main.rand.Next(100) < num9)
                                num10 += 4;
                            if (Main.rand.Next(150) < num9)
                                num10 += 4;
                            if (Main.rand.Next(200) < num9)
                                num10 += 4;
                            int num11 = Main.rand.Next(minValue, num10 + 1);
                            newItem.stack = num11;
                        }

                        newItem.newAndShiny = true;
                        if (Main.player[this.owner].GetItem(this.owner, newItem, false, false).stack > 0)
                        {
                            int number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                this.height, Type, 1, false, 0, true, false);
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        }
                        else
                        {
                            newItem.position.X = this.Center.X - (float) (newItem.width / 2);
                            newItem.position.Y = this.Center.Y - (float) (newItem.height / 2);
                            newItem.active = true;
                            ItemText.NewText(newItem, 0, false, false);
                        }
                    }

                    this.Kill();
                }

                this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
            }
            else
            {
                bool flag = false;
                Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                    this.position.Y + (float) this.height * 0.5f);
                float num1 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) -
                             vector2.X;
                float num2 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) -
                             vector2.Y;
                this.rotation = (float) Math.Atan2((double) num2, (double) num1) + 1.57f;
                if (Math.Sqrt((double) num1 * (double) num1 + (double) num2 * (double) num2) > 900.0)
                    this.ai[0] = 1f;
                if (this.wet)
                {
                    this.rotation = 0.0f;
                    this.velocity.X *= 0.9f;
                    int index1 = (int) ((double) this.Center.X + (double) ((this.width / 2 + 8) * this.direction)) / 16;
                    int index2 = (int) ((double) this.Center.Y / 16.0);
                    double num3 = (double) this.position.Y / 16.0;
                    int index3 = (int) (((double) this.position.Y + (double) this.height) / 16.0);
                    if (Main.tile[index1, index2] == null)
                        Main.tile[index1, index2] = new Tile();
                    if (Main.tile[index1, index3] == null)
                        Main.tile[index1, index3] = new Tile();
                    if ((double) this.velocity.Y > 0.0)
                        this.velocity.Y *= 0.5f;
                    int index4 = (int) ((double) this.Center.X / 16.0);
                    int index5 = (int) ((double) this.Center.Y / 16.0);
                    float num4 = this.position.Y + (float) this.height;
                    if (Main.tile[index4, index5 - 1] == null)
                        Main.tile[index4, index5 - 1] = new Tile();
                    if (Main.tile[index4, index5] == null)
                        Main.tile[index4, index5] = new Tile();
                    if (Main.tile[index4, index5 + 1] == null)
                        Main.tile[index4, index5 + 1] = new Tile();
                    if (Main.tile[index4, index5 - 1].liquid > (byte) 0)
                        num4 = (float) (index5 * 16) - (float) ((int) Main.tile[index4, index5 - 1].liquid / 16);
                    else if (Main.tile[index4, index5].liquid > (byte) 0)
                        num4 = (float) ((index5 + 1) * 16) - (float) ((int) Main.tile[index4, index5].liquid / 16);
                    else if (Main.tile[index4, index5 + 1].liquid > (byte) 0)
                        num4 = (float) ((index5 + 2) * 16) - (float) ((int) Main.tile[index4, index5 + 1].liquid / 16);
                    if ((double) this.Center.Y > (double) num4)
                    {
                        this.velocity.Y -= 0.1f;
                        if ((double) this.velocity.Y < -8.0)
                            this.velocity.Y = -8f;
                        if ((double) this.Center.Y + (double) this.velocity.Y < (double) num4)
                            this.velocity.Y = num4 - this.Center.Y;
                    }
                    else
                        this.velocity.Y = num4 - this.Center.Y;

                    if ((double) this.velocity.Y >= -0.01 && (double) this.velocity.Y <= 0.01)
                        flag = true;
                }
                else
                {
                    if ((double) this.velocity.Y == 0.0)
                        this.velocity.X *= 0.95f;
                    this.velocity.X *= 0.98f;
                    this.velocity.Y += 0.2f;
                    if ((double) this.velocity.Y > 15.8999996185303)
                        this.velocity.Y = 15.9f;
                }

                if (Main.myPlayer == this.owner)
                {
                    int num3 = Main.player[this.owner].FishingLevel();
                    if (num3 < 0 && num3 == -1)
                        Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.FishingWarning");
                }

                if ((double) this.ai[1] != 0.0)
                    flag = true;
                if (!flag)
                    return;
                if ((double) this.ai[1] == 0.0 && Main.myPlayer == this.owner)
                {
                    int num3 = Main.player[this.owner].FishingLevel();
                    if (num3 == -9000)
                    {
                        this.localAI[1] += 5f;
                        this.localAI[1] += (float) Main.rand.Next(1, 3);
                        if ((double) this.localAI[1] <= 660.0)
                            return;
                        this.localAI[1] = 0.0f;
                        this.FishingCheck();
                    }
                    else
                    {
                        if (Main.rand.Next(300) < num3)
                            this.localAI[1] += (float) Main.rand.Next(1, 3);
                        this.localAI[1] += (float) (num3 / 30);
                        this.localAI[1] += (float) Main.rand.Next(1, 3);
                        if (Main.rand.Next(60) == 0)
                            this.localAI[1] += 60f;
                        if ((double) this.localAI[1] <= 660.0)
                            return;
                        this.localAI[1] = 0.0f;
                        this.FishingCheck();
                    }
                }
                else
                {
                    if ((double) this.ai[1] >= 0.0)
                        return;
                    if ((double) this.velocity.Y == 0.0 || this.honeyWet && (double) this.velocity.Y >= -0.01 &&
                        (double) this.velocity.Y <= 0.01)
                    {
                        this.velocity.Y = (float) Main.rand.Next(100, 500) * 0.015f;
                        this.velocity.X = (float) Main.rand.Next(-100, 101) * 0.015f;
                        this.wet = false;
                        this.lavaWet = false;
                        this.honeyWet = false;
                    }

                    this.ai[1] += (float) Main.rand.Next(1, 5);
                    if ((double) this.ai[1] < 0.0)
                        return;
                    this.ai[1] = 0.0f;
                    this.localAI[1] = 0.0f;
                    this.netUpdate = true;
                }
            }
        }

        private void AI_146_DD2Victory()
        {
        }

        private void BetsySharpnel(int npcIndex)
        {
            if ((double) this.ai[1] == -1.0 || this.owner != Main.myPlayer)
                return;
            Vector2 spinningpoint = new Vector2(0.0f, 6f);
            Vector2 center = this.Center;
            float num1 = 0.7853982f;
            int num2 = 5;
            float num3 = (float) -((double) num1 * 2.0) / (float) (num2 - 1);
            for (int index1 = 0; index1 < num2; ++index1)
            {
                int index2 = Projectile.NewProjectile(center,
                    spinningpoint.RotatedBy((double) num1 + (double) num3 * (double) index1, new Vector2()), 710,
                    this.damage, this.knockBack, this.owner, 0.0f, -1f);
                Projectile projectile = Main.projectile[index2];
                for (int index3 = 0; index3 < this.localNPCImmunity.Length; ++index3)
                    projectile.localNPCImmunity[index3] = this.localNPCImmunity[index3];
            }
        }

        private void AI_001()
        {
            if (this.type == 469 && this.wet && !this.honeyWet)
                this.Kill();
            if (this.type == 601)
            {
                Color portalColor = PortalHelper.GetPortalColor(this.owner, (int) this.ai[0]);
                Lighting.AddLight(this.Center + this.velocity * 3f, portalColor.ToVector3() * 0.5f);
                if (this.alpha > 0 && this.alpha <= 15)
                {
                    Color color = portalColor;
                    color.A = byte.MaxValue;
                    for (int index = 0; index < 4; ++index)
                    {
                        Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 264, 0.0f, 0.0f, 0, new Color(), 1f)];
                        dust.position = this.Center;
                        dust.velocity = this.velocity * 2f + Utils.RandomVector2(Main.rand, -1f, 1f);
                        dust.color = color;
                        dust.scale = 1.2f;
                        dust.noLight = true;
                        dust.noGravity = true;
                        dust.customData = (object) Main.player[this.owner];
                    }
                }

                this.alpha -= 15;
                if (this.alpha < 0)
                    this.alpha = 0;
                if (++this.frameCounter >= 4)
                {
                    this.frameCounter = 0;
                    if (++this.frame >= Main.projFrames[this.type])
                        this.frame = 0;
                }

                if (this.alpha == 0)
                {
                    Color color = portalColor;
                    color.A = byte.MaxValue;
                    Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 263, 0.0f, 0.0f, 0, new Color(), 1f)];
                    dust.position = this.Center;
                    dust.velocity = this.velocity / 4f;
                    dust.color = color;
                    dust.noGravity = true;
                    dust.scale = 0.6f;
                }
            }

            if (this.type == 472)
            {
                int index1 = Dust.NewDust(this.position, this.width, this.height, 30, 0.0f, 0.0f, 0, new Color(), 1f);
                Main.dust[index1].noGravity = true;
                Main.dust[index1].velocity *= 0.25f;
                Main.dust[index1].velocity += this.velocity * 0.75f;
                if ((double) this.localAI[0] == 0.0)
                {
                    this.localAI[0] = 1f;
                    Main.PlaySound(SoundID.Item17, this.position);
                    for (int index2 = 0; index2 < 20; ++index2)
                    {
                        int index3 = Dust.NewDust(this.position, this.width, this.height, 30, 0.0f, 0.0f, 0,
                            new Color(), 1f);
                        Main.dust[index3].noGravity = true;
                        Main.dust[index3].velocity *= 0.25f;
                        Main.dust[index3].velocity += this.velocity;
                        Main.dust[index3].velocity.X *=
                            (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                        Main.dust[index3].velocity.Y *=
                            (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                    }
                }
            }

            if (this.type == 323)
            {
                this.alpha -= 50;
                if (this.alpha < 0)
                    this.alpha = 0;
            }

            if (this.type == 436)
            {
                if ((double) this.ai[1] == 0.0)
                {
                    this.ai[1] = 1f;
                    Main.PlaySound(SoundID.Item12, this.position);
                }

                this.alpha -= 40;
                if (this.alpha < 0)
                    this.alpha = 0;
                this.spriteDirection = this.direction;
                ++this.frameCounter;
                if (this.frameCounter >= 3)
                {
                    ++this.frame;
                    this.frameCounter = 0;
                    if (this.frame >= 4)
                        this.frame = 0;
                }

                Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.3f, 1.1f, 0.5f);
            }

            if (this.type == 467)
            {
                if ((double) this.ai[1] == 0.0)
                {
                    this.ai[1] = 1f;
                    Main.PlaySound(SoundID.Item34, this.position);
                }
                else if ((double) this.ai[1] == 1.0 && Main.netMode != 1)
                {
                    int num1 = -1;
                    float num2 = 2000f;
                    for (int index = 0; index < (int) byte.MaxValue; ++index)
                    {
                        if (Main.player[index].active && !Main.player[index].dead)
                        {
                            Vector2 center = Main.player[index].Center;
                            float num3 = Vector2.Distance(center, this.Center);
                            if (((double) num3 < (double) num2 || num1 == -1) &&
                                Collision.CanHit(this.Center, 1, 1, center, 1, 1))
                            {
                                num2 = num3;
                                num1 = index;
                            }
                        }
                    }

                    if ((double) num2 < 20.0)
                    {
                        this.Kill();
                        return;
                    }

                    if (num1 != -1)
                    {
                        this.ai[1] = 21f;
                        this.ai[0] = (float) num1;
                        this.netUpdate = true;
                    }
                }
                else if ((double) this.ai[1] > 20.0 && (double) this.ai[1] < 200.0)
                {
                    ++this.ai[1];
                    int index = (int) this.ai[0];
                    if (!Main.player[index].active || Main.player[index].dead)
                    {
                        this.ai[1] = 1f;
                        this.ai[0] = 0.0f;
                        this.netUpdate = true;
                    }
                    else
                    {
                        float rotation = this.velocity.ToRotation();
                        Vector2 v = Main.player[index].Center - this.Center;
                        if ((double) v.Length() < 20.0)
                        {
                            this.Kill();
                            return;
                        }

                        float targetAngle = v.ToRotation();
                        if (v == Vector2.Zero)
                            targetAngle = rotation;
                        this.velocity =
                            new Vector2(this.velocity.Length(), 0.0f).RotatedBy(
                                (double) rotation.AngleLerp(targetAngle, 0.008f), new Vector2());
                    }
                }

                if ((double) this.ai[1] >= 1.0 && (double) this.ai[1] < 20.0)
                {
                    ++this.ai[1];
                    if ((double) this.ai[1] == 20.0)
                        this.ai[1] = 1f;
                }

                this.alpha -= 40;
                if (this.alpha < 0)
                    this.alpha = 0;
                this.spriteDirection = this.direction;
                ++this.frameCounter;
                if (this.frameCounter >= 3)
                {
                    ++this.frame;
                    this.frameCounter = 0;
                    if (this.frame >= 4)
                        this.frame = 0;
                }

                Lighting.AddLight(this.Center, 1.1f, 0.9f, 0.4f);
                ++this.localAI[0];
                if ((double) this.localAI[0] == 12.0)
                {
                    this.localAI[0] = 0.0f;
                    for (int index1 = 0; index1 < 12; ++index1)
                    {
                        Vector2 vector2 =
                            (Vector2.UnitX * (float) -this.width / 2f +
                             -Vector2.UnitY.RotatedBy((double) index1 * 3.14159274101257 / 6.0, new Vector2()) *
                             new Vector2(8f, 16f)).RotatedBy((double) this.rotation - 1.57079637050629, new Vector2());
                        int index2 = Dust.NewDust(this.Center, 0, 0, 6, 0.0f, 0.0f, 160, new Color(), 1f);
                        Main.dust[index2].scale = 1.1f;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].position = this.Center + vector2;
                        Main.dust[index2].velocity = this.velocity * 0.1f;
                        Main.dust[index2].velocity =
                            Vector2.Normalize(this.Center - this.velocity * 3f - Main.dust[index2].position) * 1.25f;
                    }
                }

                if (Main.rand.Next(4) == 0)
                {
                    for (int index1 = 0; index1 < 1; ++index1)
                    {
                        Vector2 vector2 = -Vector2.UnitX.RotatedByRandom(0.196349546313286)
                            .RotatedBy((double) this.velocity.ToRotation(), new Vector2());
                        int index2 = Dust.NewDust(this.position, this.width, this.height, 31, 0.0f, 0.0f, 100,
                            new Color(), 1f);
                        Main.dust[index2].velocity *= 0.1f;
                        Main.dust[index2].position = this.Center + vector2 * (float) this.width / 2f;
                        Main.dust[index2].fadeIn = 0.9f;
                    }
                }

                if (Main.rand.Next(32) == 0)
                {
                    for (int index1 = 0; index1 < 1; ++index1)
                    {
                        Vector2 vector2 = -Vector2.UnitX.RotatedByRandom(0.392699092626572)
                            .RotatedBy((double) this.velocity.ToRotation(), new Vector2());
                        int index2 = Dust.NewDust(this.position, this.width, this.height, 31, 0.0f, 0.0f, 155,
                            new Color(), 0.8f);
                        Main.dust[index2].velocity *= 0.3f;
                        Main.dust[index2].position = this.Center + vector2 * (float) this.width / 2f;
                        if (Main.rand.Next(2) == 0)
                            Main.dust[index2].fadeIn = 1.4f;
                    }
                }

                if (Main.rand.Next(2) == 0)
                {
                    for (int index1 = 0; index1 < 2; ++index1)
                    {
                        Vector2 vector2 = -Vector2.UnitX.RotatedByRandom(0.785398185253143)
                            .RotatedBy((double) this.velocity.ToRotation(), new Vector2());
                        int index2 = Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 0, new Color(),
                            1.2f);
                        Main.dust[index2].velocity *= 0.3f;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].position = this.Center + vector2 * (float) this.width / 2f;
                        if (Main.rand.Next(2) == 0)
                            Main.dust[index2].fadeIn = 1.4f;
                    }
                }
            }

            if (this.type == 468)
            {
                if ((double) this.ai[1] == 0.0)
                {
                    this.ai[1] = 1f;
                    Main.PlaySound(SoundID.Item34, this.position);
                }
                else if ((double) this.ai[1] == 1.0 && Main.netMode != 1)
                {
                    int num1 = -1;
                    float num2 = 2000f;
                    for (int index = 0; index < (int) byte.MaxValue; ++index)
                    {
                        if (Main.player[index].active && !Main.player[index].dead)
                        {
                            Vector2 center = Main.player[index].Center;
                            float num3 = Vector2.Distance(center, this.Center);
                            if (((double) num3 < (double) num2 || num1 == -1) &&
                                Collision.CanHit(this.Center, 1, 1, center, 1, 1))
                            {
                                num2 = num3;
                                num1 = index;
                            }
                        }
                    }

                    if ((double) num2 < 20.0)
                    {
                        this.Kill();
                        return;
                    }

                    if (num1 != -1)
                    {
                        this.ai[1] = 21f;
                        this.ai[0] = (float) num1;
                        this.netUpdate = true;
                    }
                }
                else if ((double) this.ai[1] > 20.0 && (double) this.ai[1] < 200.0)
                {
                    ++this.ai[1];
                    int index = (int) this.ai[0];
                    if (!Main.player[index].active || Main.player[index].dead)
                    {
                        this.ai[1] = 1f;
                        this.ai[0] = 0.0f;
                        this.netUpdate = true;
                    }
                    else
                    {
                        float rotation = this.velocity.ToRotation();
                        Vector2 v = Main.player[index].Center - this.Center;
                        if ((double) v.Length() < 20.0)
                        {
                            this.Kill();
                            return;
                        }

                        float targetAngle = v.ToRotation();
                        if (v == Vector2.Zero)
                            targetAngle = rotation;
                        this.velocity =
                            new Vector2(this.velocity.Length(), 0.0f).RotatedBy(
                                (double) rotation.AngleLerp(targetAngle, 0.01f), new Vector2());
                    }
                }

                if ((double) this.ai[1] >= 1.0 && (double) this.ai[1] < 20.0)
                {
                    ++this.ai[1];
                    if ((double) this.ai[1] == 20.0)
                        this.ai[1] = 1f;
                }

                this.alpha -= 40;
                if (this.alpha < 0)
                    this.alpha = 0;
                this.spriteDirection = this.direction;
                ++this.frameCounter;
                if (this.frameCounter >= 3)
                {
                    ++this.frame;
                    this.frameCounter = 0;
                    if (this.frame >= 4)
                        this.frame = 0;
                }

                Lighting.AddLight(this.Center, 0.2f, 0.1f, 0.6f);
                ++this.localAI[0];
                if ((double) this.localAI[0] == 12.0)
                {
                    this.localAI[0] = 0.0f;
                    for (int index1 = 0; index1 < 12; ++index1)
                    {
                        Vector2 vector2 =
                            (Vector2.UnitX * (float) -this.width / 2f +
                             -Vector2.UnitY.RotatedBy((double) index1 * 3.14159274101257 / 6.0, new Vector2()) *
                             new Vector2(8f, 16f)).RotatedBy((double) this.rotation - 1.57079637050629, new Vector2());
                        int index2 = Dust.NewDust(this.Center, 0, 0, 27, 0.0f, 0.0f, 160, new Color(), 1f);
                        Main.dust[index2].scale = 1.1f;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].position = this.Center + vector2;
                        Main.dust[index2].velocity = this.velocity * 0.1f;
                        Main.dust[index2].velocity =
                            Vector2.Normalize(this.Center - this.velocity * 3f - Main.dust[index2].position) * 1.25f;
                    }
                }

                if (Main.rand.Next(4) == 0)
                {
                    for (int index1 = 0; index1 < 1; ++index1)
                    {
                        Vector2 vector2 = -Vector2.UnitX.RotatedByRandom(0.196349546313286)
                            .RotatedBy((double) this.velocity.ToRotation(), new Vector2());
                        int index2 = Dust.NewDust(this.position, this.width, this.height, 31, 0.0f, 0.0f, 100,
                            new Color(), 1f);
                        Main.dust[index2].velocity *= 0.1f;
                        Main.dust[index2].position = this.Center + vector2 * (float) this.width / 2f;
                        Main.dust[index2].fadeIn = 0.9f;
                    }
                }

                if (Main.rand.Next(32) == 0)
                {
                    for (int index1 = 0; index1 < 1; ++index1)
                    {
                        Vector2 vector2 = -Vector2.UnitX.RotatedByRandom(0.392699092626572)
                            .RotatedBy((double) this.velocity.ToRotation(), new Vector2());
                        int index2 = Dust.NewDust(this.position, this.width, this.height, 31, 0.0f, 0.0f, 155,
                            new Color(), 0.8f);
                        Main.dust[index2].velocity *= 0.3f;
                        Main.dust[index2].position = this.Center + vector2 * (float) this.width / 2f;
                        if (Main.rand.Next(2) == 0)
                            Main.dust[index2].fadeIn = 1.4f;
                    }
                }

                if (Main.rand.Next(2) == 0)
                {
                    for (int index1 = 0; index1 < 2; ++index1)
                    {
                        Vector2 vector2 = -Vector2.UnitX.RotatedByRandom(0.785398185253143)
                            .RotatedBy((double) this.velocity.ToRotation(), new Vector2());
                        int index2 = Dust.NewDust(this.position, this.width, this.height, 27, 0.0f, 0.0f, 0,
                            new Color(), 1.2f);
                        Main.dust[index2].velocity *= 0.3f;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].position = this.Center + vector2 * (float) this.width / 2f;
                        if (Main.rand.Next(2) == 0)
                            Main.dust[index2].fadeIn = 1.4f;
                    }
                }
            }

            if (this.type == 634 || this.type == 635)
            {
                float num1 = 5f;
                float num2 = 250f;
                float num3 = 6f;
                Vector2 vector2_1 = new Vector2(8f, 10f);
                float num4 = 1.2f;
                Vector3 rgb = new Vector3(0.7f, 0.1f, 0.5f);
                int num5 = 4 * this.MaxUpdates;
                int Type1 = Utils.SelectRandom<int>(Main.rand, new int[5] {242, 73, 72, 71, (int) byte.MaxValue});
                int Type2 = (int) byte.MaxValue;
                if (this.type == 635)
                {
                    vector2_1 = new Vector2(10f, 20f);
                    num4 = 1f;
                    num2 = 500f;
                    Type2 = 88;
                    num5 = 3 * this.MaxUpdates;
                    rgb = new Vector3(0.4f, 0.6f, 0.9f);
                    Type1 = Utils.SelectRandom<int>(Main.rand, new int[3]
                    {
                        242,
                        59,
                        88
                    });
                }

                if ((double) this.ai[1] == 0.0)
                {
                    this.ai[1] = 1f;
                    this.localAI[0] = (float) -Main.rand.Next(48);
                    Main.PlaySound(SoundID.Item34, this.position);
                }
                else if ((double) this.ai[1] == 1.0 && this.owner == Main.myPlayer)
                {
                    int num6 = -1;
                    float num7 = num2;
                    for (int index = 0; index < 200; ++index)
                    {
                        if (Main.npc[index].active && Main.npc[index].CanBeChasedBy((object) this, false))
                        {
                            Vector2 center = Main.npc[index].Center;
                            float num8 = Vector2.Distance(center, this.Center);
                            if ((double) num8 < (double) num7 && num6 == -1 &&
                                Collision.CanHitLine(this.Center, 1, 1, center, 1, 1))
                            {
                                num7 = num8;
                                num6 = index;
                            }
                        }
                    }

                    if ((double) num7 < 20.0)
                    {
                        this.Kill();
                        return;
                    }

                    if (num6 != -1)
                    {
                        this.ai[1] = num1 + 1f;
                        this.ai[0] = (float) num6;
                        this.netUpdate = true;
                    }
                }
                else if ((double) this.ai[1] > (double) num1)
                {
                    ++this.ai[1];
                    int index = (int) this.ai[0];
                    if (!Main.npc[index].active || !Main.npc[index].CanBeChasedBy((object) this, false))
                    {
                        this.ai[1] = 1f;
                        this.ai[0] = 0.0f;
                        this.netUpdate = true;
                    }
                    else
                    {
                        double rotation = (double) this.velocity.ToRotation();
                        Vector2 vector2_2 = Main.npc[index].Center - this.Center;
                        if ((double) vector2_2.Length() < 20.0)
                        {
                            this.Kill();
                            return;
                        }

                        if (vector2_2 != Vector2.Zero)
                        {
                            vector2_2.Normalize();
                            vector2_2 *= num3;
                        }

                        float num6 = 30f;
                        this.velocity = (this.velocity * (num6 - 1f) + vector2_2) / num6;
                    }
                }

                if ((double) this.ai[1] >= 1.0 && (double) this.ai[1] < (double) num1)
                {
                    ++this.ai[1];
                    if ((double) this.ai[1] == (double) num1)
                        this.ai[1] = 1f;
                }

                this.alpha -= 40;
                if (this.alpha < 0)
                    this.alpha = 0;
                this.spriteDirection = this.direction;
                ++this.frameCounter;
                if (this.frameCounter >= num5)
                {
                    ++this.frame;
                    this.frameCounter = 0;
                    if (this.frame >= 4)
                        this.frame = 0;
                }

                Lighting.AddLight(this.Center, rgb);
                this.rotation = this.velocity.ToRotation();
                ++this.localAI[0];
                if ((double) this.localAI[0] == 48.0)
                    this.localAI[0] = 0.0f;
                else if (this.alpha == 0)
                {
                    for (int index1 = 0; index1 < 2; ++index1)
                    {
                        Vector2 vector2_2 = Vector2.UnitX * -30f;
                        Vector2 vector2_3 =
                            -Vector2.UnitY.RotatedBy(
                                (double) this.localAI[0] * 0.130899697542191 + (double) index1 * 3.14159274101257,
                                new Vector2()) * vector2_1 - this.rotation.ToRotationVector2() * 10f;
                        int index2 = Dust.NewDust(this.Center, 0, 0, Type2, 0.0f, 0.0f, 160, new Color(), 1f);
                        Main.dust[index2].scale = num4;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].position = this.Center + vector2_3 + this.velocity * 2f;
                        Main.dust[index2].velocity =
                            Vector2.Normalize(this.Center + this.velocity * 2f * 8f - Main.dust[index2].position) * 2f +
                            this.velocity * 2f;
                    }
                }

                if (Main.rand.Next(12) == 0)
                {
                    for (int index1 = 0; index1 < 1; ++index1)
                    {
                        Vector2 vector2_2 = -Vector2.UnitX.RotatedByRandom(0.196349546313286)
                            .RotatedBy((double) this.velocity.ToRotation(), new Vector2());
                        int index2 = Dust.NewDust(this.position, this.width, this.height, 31, 0.0f, 0.0f, 100,
                            new Color(), 1f);
                        Main.dust[index2].velocity *= 0.1f;
                        Main.dust[index2].position =
                            this.Center + vector2_2 * (float) this.width / 2f + this.velocity * 2f;
                        Main.dust[index2].fadeIn = 0.9f;
                    }
                }

                if (Main.rand.Next(64) == 0)
                {
                    for (int index1 = 0; index1 < 1; ++index1)
                    {
                        Vector2 vector2_2 = -Vector2.UnitX.RotatedByRandom(0.392699092626572)
                            .RotatedBy((double) this.velocity.ToRotation(), new Vector2());
                        int index2 = Dust.NewDust(this.position, this.width, this.height, 31, 0.0f, 0.0f, 155,
                            new Color(), 0.8f);
                        Main.dust[index2].velocity *= 0.3f;
                        Main.dust[index2].position = this.Center + vector2_2 * (float) this.width / 2f;
                        if (Main.rand.Next(2) == 0)
                            Main.dust[index2].fadeIn = 1.4f;
                    }
                }

                if (Main.rand.Next(4) == 0)
                {
                    for (int index1 = 0; index1 < 2; ++index1)
                    {
                        Vector2 vector2_2 = -Vector2.UnitX.RotatedByRandom(0.785398185253143)
                            .RotatedBy((double) this.velocity.ToRotation(), new Vector2());
                        int index2 = Dust.NewDust(this.position, this.width, this.height, Type1, 0.0f, 0.0f, 0,
                            new Color(), 1.2f);
                        Main.dust[index2].velocity *= 0.3f;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].position = this.Center + vector2_2 * (float) this.width / 2f;
                        if (Main.rand.Next(2) == 0)
                            Main.dust[index2].fadeIn = 1.4f;
                    }
                }

                if (Main.rand.Next(12) == 0 && this.type == 634)
                {
                    Vector2 vector2_2 = -Vector2.UnitX.RotatedByRandom(0.196349546313286)
                        .RotatedBy((double) this.velocity.ToRotation(), new Vector2());
                    int index = Dust.NewDust(this.position, this.width, this.height, Type2, 0.0f, 0.0f, 100,
                        new Color(), 1f);
                    Main.dust[index].velocity *= 0.3f;
                    Main.dust[index].position = this.Center + vector2_2 * (float) this.width / 2f;
                    Main.dust[index].fadeIn = 0.9f;
                    Main.dust[index].noGravity = true;
                }

                if (Main.rand.Next(3) == 0 && this.type == 635)
                {
                    Vector2 vector2_2 = -Vector2.UnitX.RotatedByRandom(0.196349546313286)
                        .RotatedBy((double) this.velocity.ToRotation(), new Vector2());
                    int index = Dust.NewDust(this.position, this.width, this.height, Type2, 0.0f, 0.0f, 100,
                        new Color(), 1f);
                    Main.dust[index].velocity *= 0.3f;
                    Main.dust[index].position = this.Center + vector2_2 * (float) this.width / 2f;
                    Main.dust[index].fadeIn = 1.2f;
                    Main.dust[index].scale = 1.5f;
                    Main.dust[index].noGravity = true;
                }
            }

            if (this.type == 459)
            {
                this.alpha -= 30;
                if (this.alpha < 0)
                    this.alpha = 0;
                this.spriteDirection = this.direction;
                ++this.frameCounter;
                if (this.frameCounter >= 3)
                {
                    ++this.frame;
                    this.frameCounter = 0;
                    if (this.frame >= 3)
                        this.frame = 0;
                }

                this.position = this.Center;
                this.scale = this.ai[1];
                this.width = this.height = (int) (22.0 * (double) this.scale);
                this.Center = this.position;
                Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.4f, 0.85f, 0.9f);
                int num;
                if ((double) this.scale < 0.85)
                {
                    num = Main.rand.Next(3) == 0 ? 1 : 0;
                }
                else
                {
                    num = 1;
                    this.penetrate = -1;
                    this.maxPenetrate = -1;
                }

                for (int index1 = 0; index1 < num; ++index1)
                {
                    int index2 = Dust.NewDust(this.position, this.width, this.height, 226, this.velocity.X, 0.0f, 0,
                        new Color(), 1f);
                    Main.dust[index2].position -= Vector2.One * 3f;
                    Main.dust[index2].scale = 0.5f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity = this.velocity / 3f;
                    Main.dust[index2].alpha =
                        (int) byte.MaxValue - (int) ((double) byte.MaxValue * (double) this.scale);
                }
            }

            if (this.type == 709)
            {
                this.alpha -= 30;
                if (this.alpha < 0)
                    this.alpha = 0;
                this.spriteDirection = this.direction;
                ++this.frameCounter;
                if (this.frameCounter >= 3)
                {
                    ++this.frame;
                    this.frameCounter = 0;
                    if (this.frame >= 3)
                        this.frame = 0;
                }

                Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.4f, 0.85f, 0.9f);
                if ((double) this.ai[1] == 0.0)
                    Main.PlayTrackedSound((SoundStyle) SoundID.DD2_SkyDragonsFuryShot, this.Center);
                ++this.ai[1];
                if ((double) this.ai[1] >= 30.0)
                {
                    this.Kill();
                    return;
                }
            }

            if (this.type == 442)
            {
                this.frame = 0;
                if (this.alpha != 0)
                {
                    ++this.localAI[0];
                    if ((double) this.localAI[0] >= 4.0)
                    {
                        this.alpha -= 90;
                        if (this.alpha < 0)
                        {
                            this.alpha = 0;
                            this.localAI[0] = 2f;
                        }
                    }
                }

                if ((double) Vector2.Distance(this.Center,
                        new Vector2(this.ai[0], this.ai[1]) * 16f + Vector2.One * 8f) <= 16.0)
                {
                    this.Kill();
                    return;
                }

                if (this.alpha == 0)
                {
                    ++this.localAI[1];
                    if ((double) this.localAI[1] >= 120.0)
                    {
                        this.Kill();
                        return;
                    }

                    Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.3f, 0.45f, 0.8f);
                    ++this.localAI[0];
                    if ((double) this.localAI[0] == 3.0)
                    {
                        this.localAI[0] = 0.0f;
                        for (int index1 = 0; index1 < 8; ++index1)
                        {
                            Vector2 vector2 =
                                (Vector2.UnitX * -8f +
                                 -Vector2.UnitY.RotatedBy((double) index1 * 3.14159274101257 / 4.0, new Vector2()) *
                                 new Vector2(2f, 4f)).RotatedBy((double) this.rotation - 1.57079637050629,
                                    new Vector2());
                            int index2 = Dust.NewDust(this.Center, 0, 0, 135, 0.0f, 0.0f, 0, new Color(), 1f);
                            Main.dust[index2].scale = 1.5f;
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].position = this.Center + vector2;
                            Main.dust[index2].velocity = this.velocity * 0.66f;
                        }
                    }
                }
            }

            if (this.type == 440 || this.type == 449 || this.type == 606)
            {
                if (this.alpha > 0)
                    this.alpha -= 25;
                if (this.alpha < 0)
                    this.alpha = 0;
                if (this.type == 440)
                    Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.25f, 0.4f, 0.7f);
                if (this.type == 449)
                    Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.7f, 0.65f, 0.3f);
                if (this.type == 606)
                    Lighting.AddLight(this.Center, 0.7f, 0.3f, 0.3f);
                float num1 = 100f;
                float num2 = 3f;
                if (this.type == 606)
                {
                    num1 = 150f;
                    num2 = 5f;
                }

                if ((double) this.ai[1] == 0.0)
                {
                    this.localAI[0] += num2;
                    if ((double) this.localAI[0] == (double) num2 * 1.0 && this.type == 606)
                    {
                        for (int index1 = 0; index1 < 4; ++index1)
                        {
                            int index2 = Dust.NewDust(this.Center - this.velocity / 2f, 0, 0, 182, 0.0f, 0.0f, 100,
                                new Color(), 1.4f);
                            Main.dust[index2].velocity *= 0.2f;
                            Main.dust[index2].velocity += this.velocity / 10f;
                            Main.dust[index2].noGravity = true;
                        }
                    }

                    if ((double) this.localAI[0] > (double) num1)
                        this.localAI[0] = num1;
                }
                else
                {
                    this.localAI[0] -= num2;
                    if ((double) this.localAI[0] <= 0.0)
                    {
                        this.Kill();
                        return;
                    }
                }
            }

            if (this.type == 438)
                Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.4f, 0.1f, 0.2f);
            if (this.type == 593)
            {
                Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.4f, 0.1f, 0.3f);
                if (++this.frameCounter >= 12)
                {
                    if (++this.frame >= Main.projFrames[this.type])
                        this.frame = 0;
                    this.frameCounter = 0;
                }

                if (Main.rand.Next(2) == 0)
                {
                    Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.28318548202515);
                    Dust dust = Main.dust[
                        Dust.NewDust(this.Center - spinningpoint * 8f, 0, 0, 240, 0.0f, 0.0f, 0, new Color(), 1f)];
                    dust.noGravity = true;
                    dust.position = this.Center - spinningpoint * 8f * this.scale;
                    dust.velocity = spinningpoint.RotatedBy(-1.57079637050629, new Vector2()) * 2f;
                    dust.velocity = Vector2.Zero;
                    dust.scale = 0.5f + Main.rand.NextFloat();
                    dust.fadeIn = 0.5f;
                }
            }

            if (this.type == 592)
                Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.15f, 0.15f, 0.4f);
            if (this.type == 462)
            {
                int index = Dust.NewDust(this.Center, 0, 0, 229, 0.0f, 0.0f, 100, new Color(), 1f);
                Main.dust[index].noLight = true;
                Main.dust[index].noGravity = true;
                Main.dust[index].velocity = this.velocity;
                Main.dust[index].position -= Vector2.One * 4f;
                Main.dust[index].scale = 0.8f;
                if (++this.frameCounter >= 9)
                {
                    this.frameCounter = 0;
                    if (++this.frame >= 5)
                        this.frame = 0;
                }
            }

            if (this.type == 437)
            {
                if ((double) this.ai[1] == 0.0)
                {
                    this.ai[1] = 1f;
                    Main.PlaySound(SoundID.Item12, this.position);
                }

                if ((double) this.localAI[0] == 0.0)
                {
                    this.localAI[0] = 1f;
                    for (int index1 = 0; index1 < 4; ++index1)
                    {
                        int index2 = Dust.NewDust(this.position, this.width, this.height, 226, this.velocity.X, 0.0f, 0,
                            new Color(), 1f);
                        Main.dust[index2].position = Vector2.Lerp(Main.dust[index2].position, this.Center, 0.25f);
                        Main.dust[index2].scale = 0.5f;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity /= 2f;
                        Main.dust[index2].velocity += this.velocity * 0.66f;
                    }
                }

                if ((double) this.ai[0] < 16.0)
                {
                    for (int index1 = 0; index1 < 2; ++index1)
                    {
                        int index2 = Dust.NewDust(this.position, this.width, this.height, 226, this.velocity.X, 0.0f, 0,
                            new Color(), 1f);
                        Main.dust[index2].position =
                            this.position + new Vector2((float) ((this.direction == 1 ? 1 : 0) * this.width),
                                (float) (2 + (this.height - 4) * index1));
                        Main.dust[index2].scale = 0.3f;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity = Vector2.Zero;
                    }
                }
            }

            if (this.type == 435)
            {
                if ((double) this.ai[1] == 0.0)
                {
                    this.ai[1] = 1f;
                    Main.PlaySound(SoundID.Item12, this.position);
                }

                this.alpha -= 40;
                if (this.alpha < 0)
                    this.alpha = 0;
                this.spriteDirection = this.direction;
                ++this.frameCounter;
                if (this.frameCounter >= 3)
                {
                    ++this.frame;
                    this.frameCounter = 0;
                    if (this.frame >= 4)
                        this.frame = 0;
                }

                Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.3f, 0.8f, 1.1f);
            }

            if (this.type == 682)
            {
                if ((double) this.ai[1] == 0.0)
                {
                    this.ai[1] = 1f;
                    Main.PlaySound(SoundID.DD2_LightningBugZap, this.position);
                    for (int index = 0; index < 8; ++index)
                    {
                        Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 272, 0.0f, 0.0f, 0,
                            new Color(), 1f);
                        dust.velocity *= 1f;
                        dust.velocity += this.velocity * 0.65f;
                        dust.scale = 0.6f;
                        dust.fadeIn = 0.8f;
                        dust.noGravity = true;
                        dust.noLight = true;
                        dust.position += dust.velocity * 3f;
                    }
                }

                this.alpha -= 40;
                if (this.alpha < 0)
                    this.alpha = 0;
                this.spriteDirection = this.direction;
                ++this.frameCounter;
                if (this.frameCounter >= 3)
                {
                    ++this.frame;
                    this.frameCounter = 0;
                    if (this.frame >= 4)
                        this.frame = 0;
                }

                Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.5f, 0.2f, 1.1f);
            }

            if (this.type == 684)
            {
                this.alpha -= 40;
                if (this.alpha < 0)
                    this.alpha = 0;
                this.spriteDirection = this.direction;
                ++this.localAI[0];
                for (int index = 0; index < 1; ++index)
                {
                    Vector2 vector2 =
                        (Utils.RandomVector2(Main.rand, -0.5f, 0.5f) * new Vector2(20f, 80f)).RotatedBy(
                            (double) this.velocity.ToRotation(), new Vector2());
                    Dust dust = Dust.NewDustDirect(this.Center, 0, 0, 60, 0.0f, 0.0f, 0, new Color(), 1f);
                    dust.alpha = (int) sbyte.MaxValue;
                    dust.fadeIn = 1.5f;
                    dust.scale = 1.3f;
                    dust.velocity *= 0.3f;
                    dust.position = this.Center + vector2;
                    dust.noGravity = true;
                    dust.noLight = true;
                    dust.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
                }

                Lighting.AddLight(this.Center, 1.1f, 0.3f, 0.4f);
            }

            if (this.type == 408)
            {
                this.alpha -= 40;
                if (this.alpha < 0)
                    this.alpha = 0;
                this.spriteDirection = this.direction;
            }

            if (this.type == 282)
            {
                int index = Dust.NewDust(this.position, this.width, this.height, 171, 0.0f, 0.0f, 100, new Color(), 1f);
                Main.dust[index].scale = (float) Main.rand.Next(1, 10) * 0.1f;
                Main.dust[index].noGravity = true;
                Main.dust[index].fadeIn = 1.5f;
                Main.dust[index].velocity *= 0.25f;
                Main.dust[index].velocity += this.velocity * 0.25f;
            }

            if (this.type == 275 || this.type == 276)
            {
                ++this.frameCounter;
                if (this.frameCounter > 1)
                {
                    this.frameCounter = 0;
                    ++this.frame;
                    if (this.frame > 1)
                        this.frame = 0;
                }
            }

            if (this.type == 225)
            {
                int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40,
                    0.0f, 0.0f, 0, new Color(), 1f);
                Main.dust[index].noGravity = true;
                Main.dust[index].scale = 1.3f;
                Main.dust[index].velocity *= 0.5f;
            }

            if (this.type == 174)
            {
                if (this.alpha == 0)
                {
                    int index = Dust.NewDust(this.oldPosition - this.velocity * 3f, this.width, this.height, 76, 0.0f,
                        0.0f, 50, new Color(), 1f);
                    Main.dust[index].noGravity = true;
                    Main.dust[index].noLight = true;
                    Main.dust[index].velocity *= 0.5f;
                }

                this.alpha -= 50;
                if (this.alpha < 0)
                    this.alpha = 0;
                if ((double) this.ai[1] == 0.0)
                {
                    this.ai[1] = 1f;
                    Main.PlaySound(SoundID.Item17, this.position);
                }
            }
            else if (this.type == 605)
            {
                if (this.alpha == 0 && Main.rand.Next(3) == 0)
                {
                    int index = Dust.NewDust(this.position - this.velocity * 3f, this.width, this.height, 4, 0.0f, 0.0f,
                        50, new Color(78, 136, (int) byte.MaxValue, 150), 1.2f);
                    Main.dust[index].velocity *= 0.3f;
                    Main.dust[index].velocity += this.velocity * 0.3f;
                    Main.dust[index].noGravity = true;
                }

                this.alpha -= 50;
                if (this.alpha < 0)
                    this.alpha = 0;
                if ((double) this.ai[1] == 0.0)
                {
                    this.ai[1] = 1f;
                    Main.PlaySound(SoundID.Item17, this.position);
                }
            }
            else if (this.type == 176)
            {
                if (this.alpha == 0)
                {
                    int index = Dust.NewDust(this.oldPosition, this.width, this.height, 22, 0.0f, 0.0f, 100,
                        new Color(), 0.5f);
                    Main.dust[index].noGravity = true;
                    Main.dust[index].noLight = true;
                    Main.dust[index].velocity *= 0.15f;
                    Main.dust[index].fadeIn = 0.8f;
                }

                this.alpha -= 50;
                if (this.alpha < 0)
                    this.alpha = 0;
                if ((double) this.ai[1] == 0.0)
                {
                    this.ai[1] = 1f;
                    Main.PlaySound(SoundID.Item17, this.position);
                }
            }

            if (this.type == 350)
            {
                this.alpha -= 100;
                if (this.alpha < 0)
                    this.alpha = 0;
                Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.9f, 0.6f, 0.2f);
                if (this.alpha == 0)
                {
                    int num = 2;
                    if (Main.rand.Next(2) == 0)
                    {
                        int index = Dust.NewDust(
                            new Vector2(this.Center.X - (float) num,
                                (float) ((double) this.Center.Y - (double) num - 2.0)) - this.velocity * 0.5f, num * 2,
                            num * 2, 6, 0.0f, 0.0f, 100, new Color(), 1f);
                        Main.dust[index].scale *=
                            (float) (1.79999995231628 + (double) Main.rand.Next(10) * 0.100000001490116);
                        Main.dust[index].velocity *= 0.2f;
                        Main.dust[index].noGravity = true;
                    }

                    if (Main.rand.Next(4) == 0)
                    {
                        int index = Dust.NewDust(
                            new Vector2(this.Center.X - (float) num,
                                (float) ((double) this.Center.Y - (double) num - 2.0)) - this.velocity * 0.5f, num * 2,
                            num * 2, 31, 0.0f, 0.0f, 100, new Color(), 0.5f);
                        Main.dust[index].fadeIn = (float) (1.0 + (double) Main.rand.Next(5) * 0.100000001490116);
                        Main.dust[index].velocity *= 0.05f;
                    }
                }

                if ((double) this.ai[1] == 0.0)
                {
                    this.ai[1] = 1f;
                    Main.PlaySound(SoundID.Item42, this.position);
                }
            }

            if (this.type == 325)
            {
                this.alpha -= 100;
                if (this.alpha < 0)
                    this.alpha = 0;
                Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.9f, 0.6f, 0.2f);
                if (this.alpha == 0)
                {
                    int num = 2;
                    if (Main.rand.Next(2) == 0)
                    {
                        int index = Dust.NewDust(
                            new Vector2(this.Center.X - (float) num,
                                (float) ((double) this.Center.Y - (double) num - 2.0)) - this.velocity * 0.5f, num * 2,
                            num * 2, 6, 0.0f, 0.0f, 100, new Color(), 1f);
                        Main.dust[index].scale *=
                            (float) (1.79999995231628 + (double) Main.rand.Next(10) * 0.100000001490116);
                        Main.dust[index].velocity *= 0.2f;
                        Main.dust[index].noGravity = true;
                    }

                    if (Main.rand.Next(4) == 0)
                    {
                        int index = Dust.NewDust(
                            new Vector2(this.Center.X - (float) num,
                                (float) ((double) this.Center.Y - (double) num - 2.0)) - this.velocity * 0.5f, num * 2,
                            num * 2, 31, 0.0f, 0.0f, 100, new Color(), 0.5f);
                        Main.dust[index].fadeIn = (float) (1.0 + (double) Main.rand.Next(5) * 0.100000001490116);
                        Main.dust[index].velocity *= 0.05f;
                    }
                }

                if ((double) this.ai[1] == 0.0)
                {
                    this.ai[1] = 1f;
                    Main.PlaySound(SoundID.Item42, this.position);
                }
            }

            if (this.type == 469)
            {
                ++this.localAI[1];
                if ((double) this.localAI[1] > 2.0)
                {
                    this.alpha -= 50;
                    if (this.alpha < 0)
                        this.alpha = 0;
                }
            }
            else if (this.type == 83 && (double) this.ai[1] == 0.0)
            {
                this.ai[1] = 1f;
                Main.PlaySound(SoundID.Item33, this.position);
            }
            else if (this.type == 408 && (double) this.ai[1] == 0.0)
            {
                this.ai[1] = 1f;
                Main.PlaySound(4, (int) this.position.X, (int) this.position.Y, 19, 1f, 0.0f);
            }
            else if (this.type == 259 && (double) this.ai[1] == 0.0)
            {
                this.ai[1] = 1f;
                Main.PlaySound(SoundID.Item33, this.position);
            }
            else if (this.type == 110 && (double) this.ai[1] == 0.0)
            {
                this.ai[1] = 1f;
                Main.PlaySound(SoundID.Item11, this.position);
            }
            else if (this.type == 302 && (double) this.ai[1] == 0.0)
            {
                this.ai[1] = 1f;
                Main.PlaySound(SoundID.Item11, this.position);
            }
            else if (this.type == 438 && (double) this.ai[1] == 0.0)
            {
                this.ai[1] = 1f;
                Main.PlaySound(SoundID.Item12, this.position);
            }
            else if (this.type == 593 && (double) this.ai[1] == 0.0)
            {
                this.ai[1] = 1f;
                Main.PlaySound(SoundID.Item11, this.position);
            }
            else if (this.type == 592 && (double) this.ai[1] == 0.0)
            {
                this.ai[1] = 1f;
                Main.PlaySound(SoundID.Item12, this.position);
            }
            else if (this.type == 462 && (double) this.ai[1] == 0.0)
            {
                this.ai[1] = 1f;
                if (Main.rand.Next(2) == 0)
                    Main.PlaySound(SoundID.Item124, this.position);
                else
                    Main.PlaySound(SoundID.Item125, this.position);
                Vector2 vector2 = Vector2.Normalize(this.velocity);
                int num = Main.rand.Next(5, 10);
                for (int index1 = 0; index1 < num; ++index1)
                {
                    int index2 = Dust.NewDust(this.Center, 0, 0, 229, 0.0f, 0.0f, 100, new Color(), 1f);
                    --Main.dust[index2].velocity.Y;
                    Main.dust[index2].velocity += vector2 * 2f;
                    Main.dust[index2].position -= Vector2.One * 4f;
                    Main.dust[index2].noGravity = true;
                }
            }
            else if (this.type == 84 && (double) this.ai[1] == 0.0)
            {
                this.ai[1] = 1f;
                Main.PlaySound(SoundID.Item12, this.position);
            }
            else if (this.type == 389 && (double) this.ai[1] == 0.0)
            {
                this.ai[1] = 1f;
                Main.PlaySound(SoundID.Item12, this.position);
            }
            else if (this.type == 257 && (double) this.ai[1] == 0.0)
            {
                this.ai[1] = 1f;
                Main.PlaySound(SoundID.Item12, this.position);
            }
            else if (this.type == 100 && (double) this.ai[1] == 0.0)
            {
                this.ai[1] = 1f;
                Main.PlaySound(SoundID.Item33, this.position);
            }
            else if (this.type == 98 && (double) this.ai[1] == 0.0)
            {
                this.ai[1] = 1f;
                Main.PlaySound(SoundID.Item17, this.position);
            }
            else if (this.type == 184 && (double) this.ai[1] == 0.0)
            {
                this.ai[1] = 1f;
                Main.PlaySound(SoundID.Item17, this.position);
            }
            else if (this.type == 195 && (double) this.ai[1] == 0.0)
            {
                this.ai[1] = 1f;
                Main.PlaySound(SoundID.Item17, this.position);
            }
            else if (this.type == 275 && (double) this.ai[1] == 0.0)
            {
                this.ai[1] = 1f;
                Main.PlaySound(SoundID.Item17, this.position);
            }
            else if (this.type == 276 && (double) this.ai[1] == 0.0)
            {
                this.ai[1] = 1f;
                Main.PlaySound(SoundID.Item17, this.position);
            }
            else if ((this.type == 81 || this.type == 82) && (double) this.ai[1] == 0.0)
            {
                Main.PlaySound(SoundID.Item5, this.position);
                this.ai[1] = 1f;
            }
            else if (this.type == 180 && (double) this.ai[1] == 0.0)
            {
                Main.PlaySound(SoundID.Item11, this.position);
                this.ai[1] = 1f;
            }
            else if (this.type == 248 && (double) this.ai[1] == 0.0)
            {
                Main.PlaySound(SoundID.Item17, this.position);
                this.ai[1] = 1f;
            }
            else if (this.type == 576 && (double) this.ai[1] == 0.0)
            {
                this.ai[1] = 1f;
                Main.PlaySound(SoundID.Item12, this.position);
            }
            else if (this.type == 577 && (double) this.ai[1] == 0.0)
            {
                this.ai[1] = 1f;
                Main.PlaySound(SoundID.Item36, this.position);
            }
            else if (this.type == 710)
            {
                this.alpha -= 25;
                if (this.alpha < 0)
                    this.alpha = 0;
                if (Main.rand.Next(4) == 0)
                {
                    if (Main.rand.Next(2) == 0)
                    {
                        int index = Dust.NewDust(this.position, this.width, this.height, 31, 0.0f, 0.0f, 100,
                            new Color(), 1.6f);
                        Main.dust[index].noGravity = true;
                    }

                    int index1 = Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(),
                        1.2f);
                    Main.dust[index1].noGravity = true;
                    Main.dust[index1].velocity *= 2f;
                    Main.dust[index1].velocity += this.velocity;
                    Main.dust[index1].fadeIn = (double) this.ai[1] != -1.0 ? 1.22f : 1.5f;
                    if (this.wet)
                        this.Kill();
                }
            }
            else if (this.type == 639)
            {
                if ((double) this.localAI[0] == 0.0 && (double) this.localAI[1] == 0.0)
                {
                    this.localAI[0] = this.Center.X;
                    this.localAI[1] = this.Center.Y;
                    this.ai[0] = this.velocity.X;
                    this.ai[1] = this.velocity.Y;
                }

                this.alpha -= 25;
                if (this.alpha < 0)
                    this.alpha = 0;
            }
            else if (this.type == 640)
            {
                this.alpha -= 25;
                if (this.alpha < 0)
                    this.alpha = 0;
                if (this.velocity == Vector2.Zero)
                {
                    this.ai[0] = 0.0f;
                    bool flag = true;
                    for (int index = 1; index < this.oldPos.Length; ++index)
                    {
                        if (this.oldPos[index] != this.oldPos[0])
                            flag = false;
                    }

                    if (flag)
                    {
                        this.Kill();
                        return;
                    }

                    if (Main.rand.Next(this.extraUpdates) == 0 &&
                        (this.velocity != Vector2.Zero || Main.rand.Next((double) this.localAI[1] == 2.0 ? 2 : 6) == 0))
                    {
                        for (int index1 = 0; index1 < 2; ++index1)
                        {
                            float num1 = this.rotation +
                                         (float) ((Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.57079637050629);
                            float num2 = (float) (Main.rand.NextDouble() * 0.800000011920929 + 1.0);
                            Vector2 vector2 = new Vector2((float) Math.Cos((double) num1) * num2,
                                (float) Math.Sin((double) num1) * num2);
                            int index2 = Dust.NewDust(this.Center, 0, 0, 229, vector2.X, vector2.Y, 0, new Color(), 1f);
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].scale = 1.2f;
                        }

                        if (Main.rand.Next(10) == 0)
                        {
                            int index = Dust.NewDust(
                                this.Center +
                                this.velocity.RotatedBy(1.57079637050629, new Vector2()) *
                                ((float) Main.rand.NextDouble() - 0.5f) * (float) this.width - Vector2.One * 4f, 8, 8,
                                31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                            Main.dust[index].velocity *= 0.5f;
                            Main.dust[index].velocity.Y = -Math.Abs(Main.dust[index].velocity.Y);
                        }
                    }
                }
                else if (this.numUpdates == 1)
                {
                    float num1 = (float) ((double) this.rotation + 1.57079637050629 +
                                          (Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.57079637050629);
                    float num2 = (float) (Main.rand.NextDouble() * 0.25 + 0.25);
                    Vector2 vector2 = new Vector2((float) Math.Cos((double) num1) * num2,
                        (float) Math.Sin((double) num1) * num2);
                    int index = Dust.NewDust(this.position, 0, 0, 229, vector2.X, vector2.Y, 0, new Color(), 1f);
                    Main.dust[index].noGravity = true;
                    Main.dust[index].scale = 1.2f;
                }
            }

            if (this.type == 41)
            {
                int index1 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31,
                    0.0f, 0.0f, 100, new Color(), 1.6f);
                Main.dust[index1].noGravity = true;
                int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                    0.0f, 0.0f, 100, new Color(), 2f);
                Main.dust[index2].noGravity = true;
            }
            else if (this.type == 55)
            {
                int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 18,
                    0.0f, 0.0f, 0, new Color(), 0.9f);
                Main.dust[index].noGravity = true;
            }
            else if (this.type == 374)
            {
                if ((double) this.localAI[0] == 0.0)
                {
                    Main.PlaySound(SoundID.Item17, this.position);
                    this.localAI[0] = 1f;
                }

                if (Main.rand.Next(2) == 0)
                {
                    int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 18,
                        0.0f, 0.0f, 0, new Color(), 0.9f);
                    Main.dust[index].noGravity = true;
                    Main.dust[index].velocity *= 0.5f;
                }
            }
            else if (this.type == 376)
            {
                if ((double) this.localAI[0] == 0.0)
                    Main.PlaySound(SoundID.Item20, this.position);
                ++this.localAI[0];
                if ((double) this.localAI[0] > 3.0)
                {
                    int num = 1;
                    if ((double) this.localAI[0] > 5.0)
                        num = 2;
                    for (int index1 = 0; index1 < num; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 2f), this.width,
                            this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, new Color(), 2f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity.X *= 0.3f;
                        Main.dust[index2].velocity.Y *= 0.3f;
                        Main.dust[index2].noLight = true;
                    }

                    if (this.wet && !this.lavaWet)
                    {
                        this.Kill();
                        return;
                    }
                }
            }
            else if (this.type == 91 && Main.rand.Next(2) == 0)
            {
                int index = Dust.NewDust(this.position, this.width, this.height, Main.rand.Next(2) != 0 ? 58 : 15,
                    this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 150, new Color(), 0.9f);
                Main.dust[index].velocity *= 0.25f;
            }

            if (this.type == 163 || this.type == 310)
            {
                if (this.alpha > 0)
                    this.alpha -= 25;
                if (this.alpha < 0)
                    this.alpha = 0;
            }

            switch (this.type)
            {
                case 14:
                case 20:
                case 36:
                case 83:
                case 84:
                case 89:
                case 100:
                case 104:
                case 110:
                case 158:
                case 159:
                case 160:
                case 161:
                case 180:
                case 279:
                case 283:
                case 284:
                case 285:
                case 286:
                case 287:
                case 389:
                    if (this.alpha > 0)
                        this.alpha -= 15;
                    if (this.alpha < 0)
                    {
                        this.alpha = 0;
                        break;
                    }

                    break;
                case 576:
                case 577:
                    ++this.localAI[1];
                    if ((double) this.localAI[1] > 2.0)
                    {
                        if (this.alpha > 0)
                            this.alpha -= 15;
                        if (this.alpha < 0)
                        {
                            this.alpha = 0;
                            break;
                        }

                        break;
                    }

                    break;
            }

            if (this.type == 484)
            {
                int index = Dust.NewDust(this.position, this.width, this.height, 78, 0.0f, 0.0f, 0, new Color(), 1f);
                Main.dust[index].noGravity = true;
                Main.dust[index].velocity *= 0.1f;
                Main.dust[index].scale = 0.75f;
                Main.dust[index].position = (Main.dust[index].position + this.Center) / 2f;
                Main.dust[index].position += this.velocity * (float) Main.rand.Next(0, 101) * 0.01f;
            }

            if (this.type == 242 || this.type == 302 || (this.type == 438 || this.type == 462) || this.type == 592)
            {
                float num = (float) Math.Sqrt((double) this.velocity.X * (double) this.velocity.X +
                                              (double) this.velocity.Y * (double) this.velocity.Y);
                if (this.alpha > 0)
                    this.alpha -= (int) (byte) ((double) num * 0.9);
                if (this.alpha < 0)
                    this.alpha = 0;
            }

            if (this.type == 660)
            {
                DelegateMethods.v3_1 = new Vector3(0.6f, 1f, 1f) * 0.2f;
                Utils.PlotTileLine(this.Center, this.Center + this.velocity * 10f, 8f,
                    new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
                if (this.alpha > 0)
                {
                    Main.PlaySound(SoundID.Item9, this.Center);
                    this.alpha = 0;
                    this.scale = 1.1f;
                    this.frame = Main.rand.Next(14);
                    float num = 16f;
                    for (int index1 = 0; (double) index1 < (double) num; ++index1)
                    {
                        Vector2 v = (Vector2.UnitX * 0.0f +
                                     -Vector2.UnitY.RotatedBy((double) index1 * (6.28318548202515 / (double) num),
                                         new Vector2()) * new Vector2(1f, 4f))
                            .RotatedBy((double) this.velocity.ToRotation(), new Vector2());
                        int index2 = Dust.NewDust(this.Center, 0, 0, 180, 0.0f, 0.0f, 0, new Color(), 1f);
                        Main.dust[index2].scale = 1.5f;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].position = this.Center + v;
                        Main.dust[index2].velocity = this.velocity * 0.0f + v.SafeNormalize(Vector2.UnitY) * 1f;
                    }
                }
            }

            if (this.type == 712)
            {
                DelegateMethods.v3_1 = new Vector3(0.4f, 0.4f, 0.4f) * 0.7f;
                Utils.PlotTileLine(this.Center, this.Center + this.velocity * 10f, 8f,
                    new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
                if (this.alpha == (int) byte.MaxValue)
                    this.frame = Main.rand.Next(2) * 4;
                if (++this.frameCounter >= 4)
                {
                    this.frameCounter = 0;
                    ++this.frame;
                    if (this.frame == 4)
                        this.frame = 0;
                    if (this.frame >= 8)
                        this.frame = 4;
                }

                if (this.alpha > 0)
                {
                    this.alpha = 0;
                    this.scale = 1.1f;
                    this.frame = Main.rand.Next(14);
                    float num = 4f;
                    for (int index1 = 0; (double) index1 < (double) num; ++index1)
                    {
                        Vector2 v = (Vector2.UnitX * 0.0f +
                                     -Vector2.UnitY.RotatedBy((double) index1 * (6.28318548202515 / (double) num),
                                         new Vector2()) * new Vector2(1f, 4f))
                            .RotatedBy((double) this.velocity.ToRotation(), new Vector2());
                        int index2 = Dust.NewDust(this.Center, 0, 0, 15, 0.0f, 0.0f, 0, new Color(), 1f);
                        Main.dust[index2].scale = 1.7f;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].position = this.Center + v + this.velocity.SafeNormalize(Vector2.Zero) * 50f;
                        Main.dust[index2].velocity = Main.dust[index2].velocity * 2f +
                                                     v.SafeNormalize(Vector2.UnitY) * 0.3f +
                                                     this.velocity.SafeNormalize(Vector2.Zero) * 3f;
                        Main.dust[index2].velocity *= 0.7f;
                        Main.dust[index2].position += Main.dust[index2].velocity * 5f;
                    }
                }
            }

            if (this.type == 661)
            {
                if (this.alpha <= 0)
                {
                    for (int index1 = 0; index1 < 3; ++index1)
                    {
                        int index2 = Dust.NewDust(this.position, this.width, this.height, 240, 0.0f, 0.0f, 0,
                            new Color(), 1f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 0.3f;
                        Main.dust[index2].noLight = true;
                    }
                }

                if (this.alpha > 0)
                {
                    this.alpha -= 55;
                    this.scale = 1.3f;
                    if (this.alpha < 0)
                    {
                        this.alpha = 0;
                        float num = 16f;
                        for (int index1 = 0; (double) index1 < (double) num; ++index1)
                        {
                            Vector2 vector2 =
                                (Vector2.UnitX * 0.0f +
                                 -Vector2.UnitY.RotatedBy((double) index1 * (6.28318548202515 / (double) num),
                                     new Vector2()) * new Vector2(1f, 4f))
                                .RotatedBy((double) this.velocity.ToRotation(), new Vector2());
                            int index2 = Dust.NewDust(this.Center, 0, 0, 62, 0.0f, 0.0f, 0, new Color(), 1f);
                            Main.dust[index2].scale = 1.5f;
                            Main.dust[index2].noLight = true;
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].position = this.Center + vector2;
                            Main.dust[index2].velocity = Main.dust[index2].velocity * 4f + this.velocity * 0.3f;
                        }
                    }
                }
            }

            if (this.type == 706)
            {
                if (this.wet)
                {
                    this.Kill();
                    return;
                }

                if ((double) this.localAI[1] == 0.0)
                {
                    float[] localAi = this.localAI;
                    int index1 = 0;
                    //Fix By GScience
                    localAi[index1] = Main.PlayTrackedSound((SoundStyle) SoundID.DD2_PhantomPhoenixShot, this.Center)
                        .ToFloat();
                    ++this.localAI[1];
                    for (int index2 = 0; index2 < 15; ++index2)
                    {
                        if (Main.rand.Next(4) != 0)
                        {
                            Dust dust = Dust.NewDustDirect(this.Center - this.Size / 4f, this.width / 2,
                                this.height / 2, Utils.SelectRandom<int>(Main.rand, new int[3] {6, 31, 31}), 0.0f, 0.0f,
                                0, new Color(), 1f);
                            dust.noGravity = true;
                            dust.velocity *= 2.3f;
                            dust.fadeIn = 1.5f;
                            dust.noLight = true;
                        }
                    }
                }

                ActiveSound activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[0]));
                if (activeSound != null)
                {
                    activeSound.Position = this.Center;
                }
                else
                {
                    float[] localAi = this.localAI;
                    int index = 0;
                    //Fix By GScience
                    localAi[index] = SlotId.Invalid.ToFloat();
                }

                if (this.alpha <= 0)
                {
                    for (int index = 0; index < 2; ++index)
                    {
                        if (Main.rand.Next(4) != 0)
                        {
                            Dust dust = Dust.NewDustDirect(this.Center - this.Size / 4f, this.width / 2,
                                this.height / 2, Utils.SelectRandom<int>(Main.rand, new int[3] {6, 31, 31}), 0.0f, 0.0f,
                                0, new Color(), 1f);
                            dust.noGravity = true;
                            dust.velocity *= 2.3f;
                            dust.fadeIn = 1.5f;
                            dust.noLight = true;
                        }
                    }

                    Vector2 vector2_1 =
                        (new Vector2(0.0f,
                             (float) Math.Cos((double) this.frameCounter * 6.28318548202515 / 40.0 -
                                              1.57079637050629)) * 16f)
                        .RotatedBy((double) this.rotation, new Vector2());
                    Vector2 vector2_2 = this.velocity.SafeNormalize(Vector2.Zero);
                    for (int index = 0; index < 1; ++index)
                    {
                        Dust dust1 = Dust.NewDustDirect(this.Center - this.Size / 4f, this.width / 2, this.height / 2,
                            6, 0.0f, 0.0f, 0, new Color(), 1f);
                        dust1.noGravity = true;
                        dust1.position = this.Center + vector2_1;
                        dust1.velocity *= 0.0f;
                        dust1.fadeIn = 1.4f;
                        dust1.scale = 1.15f;
                        dust1.noLight = true;
                        dust1.position += this.velocity * 1.2f;
                        dust1.velocity += vector2_2 * 2f;
                        Dust dust2 = Dust.NewDustDirect(this.Center - this.Size / 4f, this.width / 2, this.height / 2,
                            6, 0.0f, 0.0f, 0, new Color(), 1f);
                        dust2.noGravity = true;
                        dust2.position = this.Center + vector2_1;
                        dust2.velocity *= 0.0f;
                        dust2.fadeIn = 1.4f;
                        dust2.scale = 1.15f;
                        dust2.noLight = true;
                        dust2.position += this.velocity * 0.5f;
                        dust2.position += this.velocity * 1.2f;
                        dust2.velocity += vector2_2 * 2f;
                    }
                }

                if (++this.frameCounter >= 40)
                    this.frameCounter = 0;
                this.frame = this.frameCounter / 5;
                if (this.alpha > 0)
                {
                    this.alpha -= 55;
                    if (this.alpha < 0)
                    {
                        this.alpha = 0;
                        float num = 16f;
                        for (int index1 = 0; (double) index1 < (double) num; ++index1)
                        {
                            Vector2 vector2 =
                                (Vector2.UnitX * 0.0f +
                                 -Vector2.UnitY.RotatedBy((double) index1 * (6.28318548202515 / (double) num),
                                     new Vector2()) * new Vector2(1f, 4f))
                                .RotatedBy((double) this.velocity.ToRotation(), new Vector2());
                            int index2 = Dust.NewDust(this.Center, 0, 0, 6, 0.0f, 0.0f, 0, new Color(), 1f);
                            Main.dust[index2].scale = 1.5f;
                            Main.dust[index2].noLight = true;
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].position = this.Center + vector2;
                            Main.dust[index2].velocity = Main.dust[index2].velocity * 4f + this.velocity * 0.3f;
                        }
                    }
                }

                DelegateMethods.v3_1 = new Vector3(1f, 0.6f, 0.2f);
                Utils.PlotTileLine(this.Center, this.Center + this.velocity * 4f, 40f,
                    new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
            }

            if (this.type == 638)
            {
                float num1 = this.velocity.Length();
                if (this.alpha > 0)
                    this.alpha -= (int) (byte) ((double) num1 * 0.3);
                if (this.alpha < 0)
                    this.alpha = 0;
                Microsoft.Xna.Framework.Rectangle hitbox = this.Hitbox;
                hitbox.Offset((int) this.velocity.X, (int) this.velocity.Y);
                bool flag = false;
                for (int index = 0; index < 200; ++index)
                {
                    NPC npc = Main.npc[index];
                    if (npc.active && !npc.dontTakeDamage &&
                        (npc.immune[this.owner] == 0 && this.localNPCImmunity[index] == 0) &&
                        (npc.Hitbox.Intersects(hitbox) && !npc.friendly))
                    {
                        flag = true;
                        break;
                    }
                }

                if (flag)
                {
                    int num2 = Main.rand.Next(15, 31);
                    for (int index1 = 0; index1 < num2; ++index1)
                    {
                        int index2 = Dust.NewDust(this.Center, 0, 0, 229, 0.0f, 0.0f, 100, new Color(), 0.8f);
                        Main.dust[index2].velocity *= 1.6f;
                        --Main.dust[index2].velocity.Y;
                        Main.dust[index2].velocity += this.velocity;
                        Main.dust[index2].noGravity = true;
                    }
                }
            }

            if (this.type == 257 || this.type == 593)
            {
                if (this.alpha > 0)
                    this.alpha -= 10;
                if (this.alpha < 0)
                    this.alpha = 0;
            }

            if (this.type == 88)
            {
                if (this.alpha > 0)
                    this.alpha -= 10;
                if (this.alpha < 0)
                    this.alpha = 0;
            }

            if (this.type == 532)
                ++this.ai[0];
            bool flag1 = true;
            switch (this.type)
            {
                case 5:
                case 14:
                case 20:
                case 36:
                case 38:
                case 55:
                case 83:
                case 84:
                case 88:
                case 89:
                case 98:
                case 100:
                case 104:
                case 110:
                case 158:
                case 159:
                case 160:
                case 161:
                case 180:
                case 184:
                case 242:
                case 248:
                case 257:
                case 259:
                case 265:
                case 270:
                case 279:
                case 283:
                case 284:
                case 285:
                case 286:
                case 287:
                case 299:
                case 302:
                case 323:
                case 325:
                case 348:
                case 349:
                case 350:
                case 355:
                case 374:
                case 376:
                case 389:
                case 435:
                case 436:
                case 438:
                case 440:
                case 442:
                case 449:
                case 459:
                case 462:
                case 467:
                case 468:
                case 469:
                case 472:
                case 483:
                case 484:
                case 485:
                case 498:
                case 576:
                case 577:
                case 585:
                case 592:
                case 593:
                case 601:
                case 606:
                case 616:
                case 634:
                case 635:
                case 638:
                case 639:
                case 660:
                case 661:
                case 682:
                case 684:
                case 706:
                case 709:
                case 710:
                case 712:
                    flag1 = false;
                    break;
            }

            if (flag1)
                ++this.ai[0];
            if (this.type == 270)
            {
                int closest = (int) Player.FindClosest(this.Center, 1, 1);
                ++this.ai[1];
                if ((double) this.ai[1] < 110.0 && (double) this.ai[1] > 30.0)
                {
                    float num = this.velocity.Length();
                    Vector2 vector2 = Main.player[closest].Center - this.Center;
                    vector2.Normalize();
                    this.velocity = (this.velocity * 24f + vector2 * num) / 25f;
                    this.velocity.Normalize();
                    Projectile projectile = this;
                    projectile.velocity = projectile.velocity * num;
                }

                if ((double) this.ai[0] < 0.0)
                {
                    if ((double) this.velocity.Length() < 18.0)
                    {
                        Projectile projectile = this;
                        projectile.velocity = projectile.velocity * 1.02f;
                    }

                    if ((double) this.localAI[0] == 0.0)
                    {
                        this.localAI[0] = 1f;
                        Main.PlaySound(SoundID.Item8, this.position);
                        for (int index1 = 0; index1 < 10; ++index1)
                        {
                            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                                this.height, 5, this.velocity.X, this.velocity.Y, 0, new Color(), 2f);
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].velocity = this.Center - Main.dust[index2].position;
                            Main.dust[index2].velocity.Normalize();
                            Main.dust[index2].velocity *= -5f;
                            Main.dust[index2].velocity += this.velocity / 2f;
                        }
                    }

                    this.friendly = false;
                    this.hostile = true;
                }
            }

            if (this.type == 585)
            {
                if ((double) this.localAI[0] == 0.0)
                {
                    this.localAI[0] = 1f;
                    Main.PlaySound(SoundID.Item8, this.position);
                    for (int index1 = 0; index1 < 3; ++index1)
                    {
                        int index2 = Dust.NewDust(this.position, this.width, this.height, 27, this.velocity.X,
                            this.velocity.Y, 0, new Color(), 2f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity = this.Center - Main.dust[index2].position;
                        Main.dust[index2].velocity.Normalize();
                        Main.dust[index2].velocity *= -5f;
                        Main.dust[index2].velocity += this.velocity / 2f;
                        Main.dust[index2].noLight = true;
                    }
                }

                if (this.alpha > 0)
                    this.alpha -= 50;
                if (this.alpha < 0)
                    this.alpha = 0;
                ++this.frameCounter;
                if (this.frameCounter >= 12)
                    this.frameCounter = 0;
                this.frame = this.frameCounter / 2;
                if (this.frame > 3)
                    this.frame = 6 - this.frame;
                Vector3 vector3 = NPCID.Sets.MagicAuraColor[54].ToVector3();
                Lighting.AddLight(this.Center, vector3.X, vector3.Y, vector3.Z);
                if (Main.rand.Next(3) == 0)
                {
                    int index = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8,
                        this.height - 8, 27, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, new Color(), 2f);
                    Main.dust[index].position -= this.velocity * 2f;
                    Main.dust[index].noLight = true;
                    Main.dust[index].noGravity = true;
                    Main.dust[index].velocity.X *= 0.3f;
                    Main.dust[index].velocity.Y *= 0.3f;
                }
            }

            if (this.type == 594)
            {
                int num = (int) (43.0 - (double) this.ai[1]) / 13;
                if (num < 1)
                    num = 1;
                int Type = (double) this.ai[1] < 20.0 ? 6 : 31;
                for (int index1 = 0; index1 < num; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8,
                        this.height - 8, Type, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 0, new Color(), 2f);
                    Main.dust[index2].position -= this.velocity * 2f;
                    Main.dust[index2].noLight = true;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity.X *= 0.3f;
                    Main.dust[index2].velocity.Y *= 0.3f;
                    if (Type == 6)
                        Main.dust[index2].fadeIn = Main.rand.NextFloat() * 2f;
                }

                ++this.ai[1];
                if ((double) this.ai[1] > (double) (43 * this.MaxUpdates))
                {
                    this.Kill();
                    return;
                }
            }

            if (this.type == 622)
            {
                int Type = 229;
                if (Main.rand.Next(3) != 0)
                {
                    int index = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8,
                        this.height - 8, Type, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 0, new Color(), 1.2f);
                    Main.dust[index].position -= this.velocity * 2f;
                    Main.dust[index].noLight = true;
                    Main.dust[index].noGravity = true;
                    Main.dust[index].velocity.X *= 0.3f;
                    Main.dust[index].velocity.Y *= 0.3f;
                }

                ++this.ai[1];
                if ((double) this.ai[1] > (double) (23 * this.MaxUpdates))
                {
                    this.Kill();
                    return;
                }
            }

            if (this.type == 587)
            {
                Color rgb = Main.hslToRgb(this.ai[1], 1f, 0.5f);
                rgb.A = (byte) 200;
                ++this.localAI[0];
                if ((double) this.localAI[0] >= 2.0)
                {
                    if ((double) this.localAI[0] == 2.0)
                    {
                        Main.PlaySound(SoundID.Item5, this.position);
                        for (int index1 = 0; index1 < 4; ++index1)
                        {
                            int index2 = Dust.NewDust(this.position, this.width, this.height, 76, this.velocity.X,
                                this.velocity.Y, 0, rgb, 1.1f);
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].velocity = this.Center - Main.dust[index2].position;
                            Main.dust[index2].velocity.Normalize();
                            Main.dust[index2].velocity *= -3f;
                            Main.dust[index2].velocity += this.velocity / 2f;
                        }
                    }
                    else
                    {
                        ++this.frame;
                        if (this.frame > 2)
                            this.frame = 0;
                        for (int index1 = 0; index1 < 1; ++index1)
                        {
                            int index2 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f),
                                this.width - 8, this.height - 8, 76, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 0,
                                rgb, 0.9f);
                            Main.dust[index2].position = this.Center;
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].velocity = this.velocity * 0.5f;
                        }
                    }
                }
            }

            if (this.type == 349)
            {
                this.frame = (int) this.ai[0];
                this.velocity.Y += 0.2f;
                if ((double) this.localAI[0] == 0.0 || (double) this.localAI[0] == 2.0)
                {
                    this.scale += 0.01f;
                    this.alpha -= 50;
                    if (this.alpha <= 0)
                    {
                        this.localAI[0] = 1f;
                        this.alpha = 0;
                    }
                }
                else if ((double) this.localAI[0] == 1.0)
                {
                    this.scale -= 0.01f;
                    this.alpha += 50;
                    if (this.alpha >= (int) byte.MaxValue)
                    {
                        this.localAI[0] = 2f;
                        this.alpha = (int) byte.MaxValue;
                    }
                }
            }

            if (this.type == 348)
            {
                if ((double) this.localAI[1] == 0.0)
                {
                    this.localAI[1] = 1f;
                    Main.PlaySound(SoundID.Item8, this.position);
                }

                if ((double) this.ai[0] == 0.0 || (double) this.ai[0] == 2.0)
                {
                    this.scale += 0.01f;
                    this.alpha -= 50;
                    if (this.alpha <= 0)
                    {
                        this.ai[0] = 1f;
                        this.alpha = 0;
                    }
                }
                else if ((double) this.ai[0] == 1.0)
                {
                    this.scale -= 0.01f;
                    this.alpha += 50;
                    if (this.alpha >= (int) byte.MaxValue)
                    {
                        this.ai[0] = 2f;
                        this.alpha = (int) byte.MaxValue;
                    }
                }
            }

            if (this.type == 572)
            {
                if ((double) this.localAI[0] == 0.0)
                {
                    this.localAI[0] = 1f;
                    Main.PlaySound(SoundID.Item17, this.position);
                }

                for (int index1 = 0; index1 < 2; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        40, this.velocity.X, this.velocity.Y, 100, new Color(), 1f);
                    Main.dust[index2].velocity *= 0.5f;
                    Main.dust[index2].velocity += this.velocity;
                    Main.dust[index2].velocity *= 0.5f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].scale = 1.2f;
                    Main.dust[index2].position = (this.Center + this.position) / 2f;
                }
            }

            if (this.type == 577)
                Lighting.AddLight(this.Center, 0.1f, 0.3f, 0.4f);
            else if (this.type == 576)
            {
                Lighting.AddLight(this.Center, 0.4f, 0.2f, 0.4f);
                for (int index = 0; index < 5; ++index)
                {
                    Dust dust = Main.dust[
                        Dust.NewDust(this.position, this.width, this.height, 242, this.velocity.X, this.velocity.Y, 100,
                            new Color(), 1f)];
                    dust.velocity = Vector2.Zero;
                    dust.position -= this.velocity / 5f * (float) index;
                    dust.noGravity = true;
                    dust.scale = 0.8f;
                    dust.noLight = true;
                }
            }
            else if (this.type == 581)
            {
                if ((double) this.localAI[0] == 0.0)
                {
                    this.localAI[0] = 1f;
                    Main.PlaySound(SoundID.Item17, this.Center);
                }

                for (int index = 0; index < 2; ++index)
                {
                    int Type = Utils.SelectRandom<int>(Main.rand, new int[3] {229, 161, 161});
                    Dust dust = Main.dust[
                        Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X, this.velocity.Y,
                            100, new Color(), 1f)];
                    dust.velocity = dust.velocity / 4f + this.velocity / 2f;
                    dust.noGravity = true;
                    dust.scale = 1.2f;
                    dust.position = this.Center;
                    dust.noLight = true;
                }
            }
            else if (this.type == 671)
            {
                if ((double) this.localAI[0] == 0.0)
                {
                    this.localAI[0] = 1f;
                    for (int index = 0; index < 8; ++index)
                    {
                        int Type = Utils.SelectRandom<int>(Main.rand, new int[2] {27, 62});
                        Dust dust = Main.dust[
                            Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X, this.velocity.Y,
                                100, new Color(), 1f)];
                        dust.velocity = (Main.rand.NextFloatDirection() * 3.141593f).ToRotationVector2() * 2f +
                                        this.velocity.SafeNormalize(Vector2.Zero) * 3f;
                        dust.noGravity = true;
                        dust.scale = 1.5f;
                        dust.fadeIn = 1.2f;
                        dust.position = this.Center;
                        dust.noLight = true;
                    }
                }

                this.alpha -= 20;
                if (this.alpha < 0)
                    this.alpha = 0;
                for (int index = 0; index < 2; ++index)
                {
                    int Type = Utils.SelectRandom<int>(Main.rand, new int[3] {27, 27, 62});
                    Dust dust = Main.dust[
                        Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X, this.velocity.Y,
                            100, new Color(), 1f)];
                    dust.velocity = dust.velocity / 4f + this.velocity / 2f;
                    dust.noGravity = true;
                    dust.scale = 1.2f;
                    dust.position = this.Center;
                    dust.noLight = true;
                }
            }
            else if (this.type == 675)
            {
                if ((double) this.localAI[0] == 0.0)
                {
                    this.localAI[0] = 1f;
                    Main.PlayTrackedSound((SoundStyle) SoundID.DD2_DarkMageAttack, this.Center);
                }

                this.alpha -= 20;
                if (this.alpha < 0)
                    this.alpha = 0;
            }
            else if (this.type == 676)
            {
                if ((double) this.localAI[0] == 0.0)
                {
                    this.localAI[0] = 1f;
                    Main.PlaySound(SoundID.Item17, this.Center);
                }

                this.alpha -= 20;
                if (this.alpha < 0)
                    this.alpha = 0;
                for (int index = 0; index < 2; ++index)
                {
                    if (Main.rand.Next(5) != 0)
                    {
                        int Type = Utils.SelectRandom<int>(Main.rand, new int[2] {4, 256});
                        Dust dust = Main.dust[
                            Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X, this.velocity.Y,
                                100, new Color(), 1f)];
                        dust.velocity = dust.velocity / 4f + this.velocity / 2f;
                        dust.scale = (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.400000005960464);
                        dust.position = this.Center;
                        dust.position +=
                            new Vector2((float) (this.width * 2), 0.0f).RotatedBy(
                                6.28318548202515 * (double) Main.rand.NextFloat(), new Vector2()) *
                            Main.rand.NextFloat();
                        dust.noLight = true;
                        if (dust.type == 4)
                            dust.color = new Color(80, 170, 40, 120);
                    }
                }
            }
            else if (this.type == 686)
            {
                if ((double) this.localAI[0] == 0.0)
                {
                    this.localAI[0] = 1f;
                    Main.PlayTrackedSound((SoundStyle) SoundID.DD2_BetsyFireballShot, this.Center);
                }

                if ((double) this.ai[0] >= 2.0)
                {
                    this.alpha -= 25;
                    if (this.alpha < 0)
                        this.alpha = 0;
                }

                if (Main.rand.Next(4) == 0)
                {
                    Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 55, 0.0f, 0.0f, 200,
                        new Color(), 1f);
                    dust.scale *= 0.7f;
                    dust.velocity += this.velocity * 1f;
                }

                if (Main.rand.Next(3) == 0 && this.oldPos[9] != Vector2.Zero)
                {
                    Dust dust = Dust.NewDustDirect(this.oldPos[9], this.width, this.height, 55, 0.0f, 0.0f, 50,
                        new Color(), 1f);
                    dust.scale *= 0.85f;
                    dust.velocity += this.velocity * 0.85f;
                    dust.color = Color.Purple;
                }
            }
            else if (this.type == 711)
            {
                if ((double) this.localAI[0] == 0.0)
                {
                    this.localAI[0] = 1f;
                    for (int index = 0; index < 10; ++index)
                    {
                        Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 55, 0.0f, 0.0f, 200,
                            new Color(), 1f);
                        dust.scale *= 0.65f;
                        dust.velocity *= 1.5f;
                        dust.velocity += this.velocity * 0.3f;
                        dust.fadeIn = 0.7f;
                    }
                }

                if ((double) this.ai[0] >= 2.0)
                {
                    this.alpha -= 25;
                    if (this.alpha < 0)
                        this.alpha = 0;
                }

                if (Main.rand.Next(4) == 0)
                {
                    Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 55, 0.0f, 0.0f, 200,
                        new Color(), 1f);
                    dust.scale *= 0.7f;
                    dust.velocity += this.velocity * 1f;
                }

                if (Main.rand.Next(3) == 0 && this.oldPos[9] != Vector2.Zero)
                {
                    Dust dust = Dust.NewDustDirect(this.oldPos[9], this.width, this.height, 55, 0.0f, 0.0f, 50,
                        new Color(), 1f);
                    dust.scale *= 0.85f;
                    dust.velocity += this.velocity * 0.85f;
                    dust.color = Color.Purple;
                }
            }

            if (this.type == 299)
            {
                if ((double) this.localAI[0] == 6.0)
                {
                    Main.PlaySound(SoundID.Item8, this.position);
                    for (int index1 = 0; index1 < 40; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 181, 0.0f, 0.0f, 100, new Color(), 1f);
                        Main.dust[index2].velocity *= 3f;
                        Main.dust[index2].velocity += this.velocity * 0.75f;
                        Main.dust[index2].scale *= 1.2f;
                        Main.dust[index2].noGravity = true;
                    }
                }

                ++this.localAI[0];
                if ((double) this.localAI[0] > 6.0)
                {
                    for (int index1 = 0; index1 < 3; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 181, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, new Color(), 1f);
                        Main.dust[index2].velocity *= 0.6f;
                        Main.dust[index2].scale *= 1.4f;
                        Main.dust[index2].noGravity = true;
                    }
                }
            }
            else if (this.type == 270)
            {
                if ((double) this.ai[0] < 0.0)
                    this.alpha = 0;
                if (this.alpha > 0)
                    this.alpha -= 50;
                if (this.alpha < 0)
                    this.alpha = 0;
                ++this.frame;
                if (this.frame > 2)
                    this.frame = 0;
                if ((double) this.ai[0] < 0.0)
                {
                    for (int index1 = 0; index1 < 2; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f),
                            this.width - 8, this.height - 8, 5, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100,
                            new Color(), 1.5f);
                        Main.dust[index2].position -= this.velocity;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity.X *= 0.3f;
                        Main.dust[index2].velocity.Y *= 0.3f;
                    }
                }
                else
                {
                    for (int index1 = 0; index1 < 2; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f),
                            this.width - 8, this.height - 8, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100,
                            new Color(), 2f);
                        Main.dust[index2].position -= this.velocity * 2f;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity.X *= 0.3f;
                        Main.dust[index2].velocity.Y *= 0.3f;
                    }
                }
            }

            if (this.type == 259)
            {
                if (this.alpha > 0)
                    this.alpha -= 10;
                if (this.alpha < 0)
                    this.alpha = 0;
            }

            if (this.type == 265)
            {
                if (this.alpha > 0)
                    this.alpha -= 50;
                if (this.alpha < 0)
                    this.alpha = 0;
                if (this.alpha == 0)
                {
                    int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        163, this.velocity.X, this.velocity.Y, 100, new Color(), 1.2f);
                    Main.dust[index].noGravity = true;
                    Main.dust[index].velocity *= 0.3f;
                    Main.dust[index].velocity -= this.velocity * 0.4f;
                }
            }

            if (this.type == 355)
            {
                if (this.alpha > 0)
                    this.alpha -= 50;
                if (this.alpha < 0)
                    this.alpha = 0;
                if (this.alpha == 0)
                {
                    int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        205, this.velocity.X, this.velocity.Y, 100, new Color(), 1.2f);
                    Main.dust[index].noGravity = true;
                    Main.dust[index].velocity *= 0.3f;
                    Main.dust[index].velocity -= this.velocity * 0.4f;
                }
            }

            if (this.type == 357)
            {
                if (this.alpha < 170)
                {
                    for (int index1 = 0; index1 < 10; ++index1)
                    {
                        float x = this.position.X - this.velocity.X / 10f * (float) index1;
                        float y = this.position.Y - this.velocity.Y / 10f * (float) index1;
                        int index2 = Dust.NewDust(new Vector2(x, y), 1, 1, 206, 0.0f, 0.0f, 0, new Color(), 1f);
                        Main.dust[index2].alpha = this.alpha;
                        Main.dust[index2].position.X = x;
                        Main.dust[index2].position.Y = y;
                        Main.dust[index2].velocity *= 0.0f;
                        Main.dust[index2].noGravity = true;
                    }
                }

                if (this.alpha > 0)
                    this.alpha -= 25;
                if (this.alpha < 0)
                    this.alpha = 0;
            }
            else if (this.type == 207)
            {
                if (this.alpha < 170)
                {
                    for (int index1 = 0; index1 < 10; ++index1)
                    {
                        float x = this.position.X - this.velocity.X / 10f * (float) index1;
                        float y = this.position.Y - this.velocity.Y / 10f * (float) index1;
                        int index2 = Dust.NewDust(new Vector2(x, y), 1, 1, 75, 0.0f, 0.0f, 0, new Color(), 1f);
                        Main.dust[index2].alpha = this.alpha;
                        Main.dust[index2].position.X = x;
                        Main.dust[index2].position.Y = y;
                        Main.dust[index2].velocity *= 0.0f;
                        Main.dust[index2].noGravity = true;
                    }
                }

                float num1 = (float) Math.Sqrt((double) this.velocity.X * (double) this.velocity.X +
                                               (double) this.velocity.Y * (double) this.velocity.Y);
                float num2 = this.localAI[0];
                if ((double) num2 == 0.0)
                {
                    this.localAI[0] = num1;
                    num2 = num1;
                }

                if (this.alpha > 0)
                    this.alpha -= 25;
                if (this.alpha < 0)
                    this.alpha = 0;
                float num3 = this.position.X;
                float num4 = this.position.Y;
                float num5 = 300f;
                bool flag2 = false;
                int num6 = 0;
                if ((double) this.ai[1] == 0.0)
                {
                    for (int index = 0; index < 200; ++index)
                    {
                        if (Main.npc[index].CanBeChasedBy((object) this, false) &&
                            ((double) this.ai[1] == 0.0 || (double) this.ai[1] == (double) (index + 1)))
                        {
                            float num7 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                            float num8 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                            float num9 = Math.Abs(this.position.X + (float) (this.width / 2) - num7) +
                                         Math.Abs(this.position.Y + (float) (this.height / 2) - num8);
                            if ((double) num9 < (double) num5 && Collision.CanHit(
                                    new Vector2(this.position.X + (float) (this.width / 2),
                                        this.position.Y + (float) (this.height / 2)), 1, 1, Main.npc[index].position,
                                    Main.npc[index].width, Main.npc[index].height))
                            {
                                num5 = num9;
                                num3 = num7;
                                num4 = num8;
                                flag2 = true;
                                num6 = index;
                            }
                        }
                    }

                    if (flag2)
                        this.ai[1] = (float) (num6 + 1);
                    flag2 = false;
                }

                if ((double) this.ai[1] > 0.0)
                {
                    int index = (int) ((double) this.ai[1] - 1.0);
                    if (Main.npc[index].active && Main.npc[index].CanBeChasedBy((object) this, true) &&
                        !Main.npc[index].dontTakeDamage)
                    {
                        if ((double) (Math.Abs(this.position.X + (float) (this.width / 2) -
                                               (Main.npc[index].position.X + (float) (Main.npc[index].width / 2))) +
                                      Math.Abs(this.position.Y + (float) (this.height / 2) -
                                               (Main.npc[index].position.Y + (float) (Main.npc[index].height / 2)))) <
                            1000.0)
                        {
                            flag2 = true;
                            num3 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                            num4 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                        }
                    }
                    else
                        this.ai[1] = 0.0f;
                }

                if (!this.friendly)
                    flag2 = false;
                if (flag2)
                {
                    float num7 = num2;
                    Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                        this.position.Y + (float) this.height * 0.5f);
                    float num8 = num3 - vector2.X;
                    float num9 = num4 - vector2.Y;
                    float num10 = (float) Math.Sqrt((double) num8 * (double) num8 + (double) num9 * (double) num9);
                    float num11 = num7 / num10;
                    float num12 = num8 * num11;
                    float num13 = num9 * num11;
                    int num14 = 8;
                    this.velocity.X = (this.velocity.X * (float) (num14 - 1) + num12) / (float) num14;
                    this.velocity.Y = (this.velocity.Y * (float) (num14 - 1) + num13) / (float) num14;
                }
            }
            else if (this.type == 81 || this.type == 91)
            {
                if ((double) this.ai[0] >= 20.0)
                {
                    this.ai[0] = 20f;
                    this.velocity.Y += 0.07f;
                }
            }
            else if (this.type == 174 || this.type == 605)
            {
                if ((double) this.ai[0] >= 5.0)
                {
                    this.ai[0] = 5f;
                    this.velocity.Y += 0.15f;
                }
            }
            else if (this.type == 337)
            {
                if ((double) this.position.Y > (double) Main.player[this.owner].position.Y - 300.0)
                    this.tileCollide = true;
                if ((double) this.position.Y < Main.worldSurface * 16.0)
                    this.tileCollide = true;
                this.frame = (int) this.ai[1];
                if (Main.rand.Next(2) == 0)
                {
                    int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        197, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index].velocity *= 0.5f;
                    Main.dust[index].noGravity = true;
                }
            }
            else if (this.type == 645)
            {
                if ((double) this.ai[1] != -1.0 && (double) this.position.Y > (double) this.ai[1])
                    this.tileCollide = true;
                if (this.position.HasNaNs())
                {
                    this.Kill();
                    return;
                }

                bool flag2 =
                    WorldGen.SolidTile(Framing.GetTileSafely((int) this.position.X / 16, (int) this.position.Y / 16));
                Dust dust = Main.dust[
                    Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0.0f,
                        0.0f, 0, new Color(), 1f)];
                dust.position = this.Center;
                dust.velocity = Vector2.Zero;
                dust.noGravity = true;
                if (flag2)
                    dust.noLight = true;
                if ((double) this.ai[1] == -1.0)
                {
                    ++this.ai[0];
                    this.velocity = Vector2.Zero;
                    this.tileCollide = false;
                    this.penetrate = -1;
                    this.position = this.Center;
                    this.width = this.height = 140;
                    this.Center = this.position;
                    this.alpha -= 10;
                    if (this.alpha < 0)
                        this.alpha = 0;
                    if (++this.frameCounter >= this.MaxUpdates * 3)
                    {
                        this.frameCounter = 0;
                        ++this.frame;
                    }

                    if ((double) this.ai[0] < (double) (Main.projFrames[this.type] * this.MaxUpdates * 3))
                        return;
                    this.Kill();
                    return;
                }

                this.alpha = (int) byte.MaxValue;
                if (this.numUpdates == 0)
                {
                    int num1 = -1;
                    float num2 = 60f;
                    for (int index = 0; index < 200; ++index)
                    {
                        NPC npc = Main.npc[index];
                        if (npc.CanBeChasedBy((object) this, false))
                        {
                            float num3 = this.Distance(npc.Center);
                            if ((double) num3 < (double) num2 &&
                                Collision.CanHitLine(this.Center, 0, 0, npc.Center, 0, 0))
                            {
                                num2 = num3;
                                num1 = index;
                            }
                        }
                    }

                    if (num1 != -1)
                    {
                        this.ai[0] = 0.0f;
                        this.ai[1] = -1f;
                        this.netUpdate = true;
                        return;
                    }
                }
            }
            else if (this.type >= 424 && this.type <= 426)
            {
                if ((double) this.position.Y > (double) Main.player[this.owner].position.Y - 300.0)
                    this.tileCollide = true;
                if ((double) this.position.Y < Main.worldSurface * 16.0)
                    this.tileCollide = true;
                this.scale = this.ai[1];
                this.rotation += this.velocity.X * 2f;
                Vector2 vector2 = this.Center + Vector2.Normalize(this.velocity) * 10f;
                Dust dust1 =
                    Main.dust[Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 0, new Color(), 1f)];
                dust1.position = vector2;
                dust1.velocity = this.velocity.RotatedBy(1.57079637050629, new Vector2()) * 0.33f + this.velocity / 4f;
                dust1.position += this.velocity.RotatedBy(1.57079637050629, new Vector2());
                dust1.fadeIn = 0.5f;
                dust1.noGravity = true;
                Dust dust2 =
                    Main.dust[Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 0, new Color(), 1f)];
                dust2.position = vector2;
                dust2.velocity = this.velocity.RotatedBy(-1.57079637050629, new Vector2()) * 0.33f + this.velocity / 4f;
                dust2.position += this.velocity.RotatedBy(-1.57079637050629, new Vector2());
                dust2.fadeIn = 0.5f;
                dust2.noGravity = true;
                for (int index1 = 0; index1 < 1; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                        0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index2].velocity *= 0.5f;
                    Main.dust[index2].scale *= 1.3f;
                    Main.dust[index2].fadeIn = 1f;
                    Main.dust[index2].noGravity = true;
                }
            }
            else if (this.type == 344)
            {
                if (WorldGen.SolidTile((int) this.position.X / 16,
                        (int) ((double) this.position.Y + (double) this.velocity.Y) / 16 + 1) || WorldGen.SolidTile(
                        (int) ((double) this.position.X + (double) this.width) / 16,
                        (int) ((double) this.position.Y + (double) this.velocity.Y) / 16 + 1))
                {
                    this.Kill();
                    return;
                }

                ++this.localAI[1];
                if ((double) this.localAI[1] > 5.0)
                {
                    this.alpha -= 50;
                    if (this.alpha < 0)
                        this.alpha = 0;
                }

                this.frame = (int) this.ai[1];
                if ((double) this.localAI[1] > 20.0)
                {
                    this.localAI[1] = 20f;
                    this.velocity.Y += 0.15f;
                }

                this.rotation += Main.windSpeed * 0.2f;
                this.velocity.X += Main.windSpeed * 0.1f;
            }
            else if (this.type == 336 || this.type == 345)
            {
                if (this.type == 345 && (double) this.localAI[0] == 0.0)
                {
                    this.localAI[0] = 1f;
                    Main.PlaySound(SoundID.Item1, this.position);
                }

                if ((double) this.ai[0] >= 50.0)
                {
                    this.ai[0] = 50f;
                    this.velocity.Y += 0.5f;
                }
            }
            else if (this.type == 246)
            {
                this.alpha -= 20;
                if (this.alpha < 0)
                    this.alpha = 0;
                if ((double) this.ai[0] >= 60.0)
                {
                    this.ai[0] = 60f;
                    this.velocity.Y += 0.15f;
                }
            }
            else if (this.type == 311)
            {
                if (this.alpha > 0)
                    this.alpha -= 50;
                if (this.alpha < 0)
                    this.alpha = 0;
                if ((double) this.ai[0] >= 30.0)
                {
                    this.ai[0] = 30f;
                    if ((double) this.ai[1] == 0.0)
                        this.ai[1] = 1f;
                    this.velocity.Y += 0.5f;
                }
            }
            else if (this.type == 312)
            {
                if ((double) this.ai[0] >= 5.0)
                    this.alpha = 0;
                if ((double) this.ai[0] >= 20.0)
                {
                    this.ai[0] = 30f;
                    this.velocity.Y += 0.5f;
                }
            }
            else if (this.type != 239 && this.type != 264)
            {
                if (this.type == 176)
                {
                    if ((double) this.ai[0] >= 15.0)
                    {
                        this.ai[0] = 15f;
                        this.velocity.Y += 0.05f;
                    }
                }
                else if (this.type == 275 || this.type == 276)
                {
                    if (this.alpha > 0)
                        this.alpha -= 30;
                    if (this.alpha < 0)
                        this.alpha = 0;
                    if ((double) this.ai[0] >= 35.0)
                    {
                        this.ai[0] = 35f;
                        this.velocity.Y += 0.025f;
                    }

                    if (Main.expertMode)
                    {
                        float num1 = 18f;
                        int closest = (int) Player.FindClosest(this.Center, 1, 1);
                        Vector2 vector2 = Main.player[closest].Center - this.Center;
                        vector2.Normalize();
                        vector2 *= num1;
                        int num2 = 70;
                        this.velocity = (this.velocity * (float) (num2 - 1) + vector2) / (float) num2;
                        if ((double) this.velocity.Length() < 14.0)
                        {
                            this.velocity.Normalize();
                            Projectile projectile = this;
                            projectile.velocity = projectile.velocity * 14f;
                        }

                        this.tileCollide = false;
                        if (this.timeLeft > 180)
                            this.timeLeft = 180;
                    }
                }
                else if (this.type == 172)
                {
                    if ((double) this.ai[0] >= 17.0)
                    {
                        this.ai[0] = 17f;
                        this.velocity.Y += 0.085f;
                    }
                }
                else if (this.type == 117)
                {
                    if ((double) this.ai[0] >= 35.0)
                    {
                        this.ai[0] = 35f;
                        this.velocity.Y += 0.06f;
                    }
                }
                else if (this.type == 120)
                {
                    int index = Dust.NewDust(
                        new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y), this.width,
                        this.height, 67, this.velocity.X, this.velocity.Y, 100, new Color(), 1.2f);
                    Main.dust[index].noGravity = true;
                    Main.dust[index].velocity *= 0.3f;
                    if ((double) this.ai[0] >= 30.0)
                    {
                        this.ai[0] = 30f;
                        this.velocity.Y += 0.05f;
                    }
                }
                else if (this.type == 195)
                {
                    if ((double) this.ai[0] >= 20.0)
                    {
                        this.ai[0] = 20f;
                        this.velocity.Y += 0.075f;
                        this.tileCollide = true;
                    }
                    else
                        this.tileCollide = false;
                }
                else if (this.type == 267 || this.type == 477 || (this.type == 478 || this.type == 479))
                {
                    ++this.localAI[0];
                    if ((double) this.localAI[0] > 3.0)
                        this.alpha = 0;
                    if ((double) this.ai[0] >= 20.0)
                    {
                        this.ai[0] = 20f;
                        if (this.type != 477)
                            this.velocity.Y += 0.075f;
                    }

                    if (this.type == 479 && Main.myPlayer == this.owner)
                    {
                        if ((double) this.ai[1] >= 0.0)
                            this.penetrate = -1;
                        else if (this.penetrate < 0)
                            this.penetrate = 1;
                        if ((double) this.ai[1] >= 0.0)
                            ++this.ai[1];
                        if ((double) this.ai[1] > (double) Main.rand.Next(5, 30))
                        {
                            this.ai[1] = -1000f;
                            float num1 = this.velocity.Length();
                            Vector2 velocity = this.velocity;
                            velocity.Normalize();
                            int num2 = Main.rand.Next(2, 4);
                            if (Main.rand.Next(4) == 0)
                                ++num2;
                            for (int index = 0; index < num2; ++index)
                            {
                                Vector2 vector2_1 = new Vector2((float) Main.rand.Next(-100, 101),
                                    (float) Main.rand.Next(-100, 101));
                                vector2_1.Normalize();
                                Vector2 vector2_2 = vector2_1 + velocity * 2f;
                                vector2_2.Normalize();
                                vector2_1 = vector2_2 * num1;
                                Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_1.X, vector2_1.Y,
                                    this.type, this.damage, this.knockBack, this.owner, 0.0f, -1000f);
                            }
                        }
                    }

                    if (this.type == 478 && Main.myPlayer == this.owner)
                    {
                        ++this.ai[1];
                        if ((double) this.ai[1] > (double) Main.rand.Next(5, 20))
                        {
                            if (this.timeLeft > 40)
                                this.timeLeft -= 20;
                            this.ai[1] = 0.0f;
                            Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 480,
                                (int) ((double) this.damage * 0.8), this.knockBack * 0.5f, this.owner, 0.0f, 0.0f);
                        }
                    }
                }
                else if (this.type == 408)
                {
                    if ((double) this.ai[0] >= 45.0)
                    {
                        this.ai[0] = 45f;
                        this.velocity.Y += 0.05f;
                    }
                }
                else if (this.type == 616)
                {
                    if (this.alpha < 170)
                    {
                        float num = 3f;
                        for (int index1 = 0; (double) index1 < (double) num; ++index1)
                        {
                            int index2 = Dust.NewDust(this.position, 1, 1, 229, 0.0f, 0.0f, 0, new Color(), 1f);
                            Main.dust[index2].position = this.Center - this.velocity / num * (float) index1;
                            Main.dust[index2].velocity *= 0.0f;
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].alpha = 200;
                            Main.dust[index2].scale = 0.5f;
                        }
                    }

                    float num1 = (float) Math.Sqrt((double) this.velocity.X * (double) this.velocity.X +
                                                   (double) this.velocity.Y * (double) this.velocity.Y);
                    float num2 = this.localAI[0];
                    if ((double) num2 == 0.0)
                    {
                        this.localAI[0] = num1;
                        num2 = num1;
                    }

                    if (this.alpha > 0)
                        this.alpha -= 25;
                    if (this.alpha < 0)
                        this.alpha = 0;
                    float num3 = this.position.X;
                    float num4 = this.position.Y;
                    float num5 = 800f;
                    bool flag2 = false;
                    int num6 = 0;
                    ++this.ai[0];
                    if ((double) this.ai[0] > 20.0)
                    {
                        --this.ai[0];
                        if ((double) this.ai[1] == 0.0)
                        {
                            for (int index = 0; index < 200; ++index)
                            {
                                if (Main.npc[index].CanBeChasedBy((object) this, false) &&
                                    ((double) this.ai[1] == 0.0 || (double) this.ai[1] == (double) (index + 1)))
                                {
                                    float num7 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                                    float num8 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                                    float num9 = Math.Abs(this.position.X + (float) (this.width / 2) - num7) +
                                                 Math.Abs(this.position.Y + (float) (this.height / 2) - num8);
                                    if ((double) num9 < (double) num5 && Collision.CanHit(
                                            new Vector2(this.position.X + (float) (this.width / 2),
                                                this.position.Y + (float) (this.height / 2)), 1, 1,
                                            Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
                                    {
                                        num5 = num9;
                                        num3 = num7;
                                        num4 = num8;
                                        flag2 = true;
                                        num6 = index;
                                    }
                                }
                            }

                            if (flag2)
                                this.ai[1] = (float) (num6 + 1);
                            flag2 = false;
                        }

                        if ((double) this.ai[1] != 0.0)
                        {
                            int index = (int) ((double) this.ai[1] - 1.0);
                            if (Main.npc[index].active && Main.npc[index].CanBeChasedBy((object) this, true) &&
                                (double) (Math.Abs(this.position.X + (float) (this.width / 2) -
                                                   (Main.npc[index].position.X + (float) (Main.npc[index].width / 2))) +
                                          Math.Abs(this.position.Y + (float) (this.height / 2) -
                                                   (Main.npc[index].position.Y + (float) (Main.npc[index].height / 2)))
                                ) < 1000.0)
                            {
                                flag2 = true;
                                num3 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                                num4 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                            }
                        }

                        if (!this.friendly)
                            flag2 = false;
                        if (flag2)
                        {
                            float num7 = num2;
                            Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                                this.position.Y + (float) this.height * 0.5f);
                            float num8 = num3 - vector2.X;
                            float num9 = num4 - vector2.Y;
                            float num10 =
                                (float) Math.Sqrt((double) num8 * (double) num8 + (double) num9 * (double) num9);
                            float num11 = num7 / num10;
                            float num12 = num8 * num11;
                            float num13 = num9 * num11;
                            int num14 = 8;
                            this.velocity.X = (this.velocity.X * (float) (num14 - 1) + num12) / (float) num14;
                            this.velocity.Y = (this.velocity.Y * (float) (num14 - 1) + num13) / (float) num14;
                        }
                    }
                }
                else if (this.type == 507 || this.type == 508 || (this.type == 662 || this.type == 680) ||
                         this.type == 685)
                {
                    if ((double) this.ai[0] > 45.0)
                    {
                        this.velocity.X *= 0.98f;
                        this.velocity.Y += 0.3f;
                    }
                }
                else if (this.type == 495)
                {
                    int index = Dust.NewDust(
                        new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y), this.width,
                        this.height, 27, this.velocity.X, this.velocity.Y, 100, new Color(), 1.2f);
                    Main.dust[index].noGravity = true;
                    Main.dust[index].velocity *= 0.3f;
                    if ((double) this.ai[0] >= 30.0)
                    {
                        this.ai[0] = 30f;
                        this.velocity.Y += 0.04f;
                    }
                }
                else if (this.type == 498)
                {
                    if ((double) this.localAI[0] == 0.0)
                    {
                        ++this.localAI[0];
                        Main.PlaySound(SoundID.Item17, this.position);
                    }

                    ++this.ai[0];
                    if ((double) this.ai[0] >= 50.0)
                    {
                        this.velocity.X *= 0.98f;
                        this.velocity.Y += 0.15f;
                        this.rotation += (float) this.direction * 0.5f;
                    }
                    else
                        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
                }
                else if (this.type == 437)
                {
                    if ((double) this.ai[0] >= 12.0)
                    {
                        if ((double) this.ai[0] >= 20.0)
                            this.Kill();
                        this.alpha += 30;
                    }
                }
                else if (this.type != 442 && this.type != 634 && (this.type != 635 && this.type != 675))
                {
                    if (this.type == 686 || this.type == 711)
                    {
                        if ((double) this.ai[0] >= 10.0)
                            this.velocity.Y += 0.1f;
                        if ((double) this.ai[0] >= 20.0)
                            this.velocity.Y += 0.1f;
                        if ((double) this.ai[0] > 20.0)
                            this.ai[0] = 20f;
                        this.velocity.X *= 0.99f;
                        if ((double) this.velocity.Y > 32.0)
                            this.velocity.Y = 32f;
                    }
                    else if (this.type == 639)
                    {
                        if (this.timeLeft <= this.MaxUpdates * 45 - 14)
                            this.velocity.Y += 0.1f;
                    }
                    else if (this.type == 710)
                    {
                        if ((double) this.ai[0] >= 0.0)
                        {
                            ++this.ai[0];
                            if ((double) this.ai[0] >= 20.0)
                            {
                                this.velocity.Y += 0.2f;
                                if ((double) this.velocity.Y > 0.0)
                                    this.velocity.X *= 0.98f;
                                if ((double) this.velocity.Y > 12.0)
                                    this.velocity.Y = 12f;
                            }
                        }
                    }
                    else if ((double) this.ai[0] >= 15.0)
                    {
                        this.ai[0] = 15f;
                        this.velocity.Y += 0.1f;
                    }
                }
            }

            if (this.type == 248)
            {
                if ((double) this.velocity.X < 0.0)
                    this.rotation -=
                        (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) *
                                 0.0500000007450581);
                else
                    this.rotation +=
                        (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) *
                                 0.0500000007450581);
            }
            else if (this.type == 270 || this.type == 585 || (this.type == 601 || this.type == 706))
            {
                this.spriteDirection = this.direction;
                this.rotation = this.direction >= 0
                    ? (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X)
                    : (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X);
            }
            else if (this.type == 311)
            {
                if ((double) this.ai[1] != 0.0)
                    this.rotation += (float) ((double) this.velocity.X * 0.100000001490116 +
                                              (double) Main.rand.Next(-10, 11) * 0.025000000372529);
                else
                    this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
            }
            else if (this.type == 312)
                this.rotation += this.velocity.X * 0.02f;
            else if (this.type == 675)
                this.rotation += this.velocity.X * 0.03f;
            else if (this.type != 676)
            {
                if (this.type == 408)
                {
                    this.rotation = this.velocity.ToRotation();
                    if (this.direction == -1)
                        this.rotation += 3.141593f;
                }
                else if (this.type == 435 || this.type == 459 || (this.type == 682 || this.type == 709))
                {
                    this.rotation = this.velocity.ToRotation();
                    if (this.direction == -1)
                        this.rotation += 3.141593f;
                }
                else if (this.type == 660)
                    this.rotation = this.velocity.ToRotation() + 0.7853982f;
                else if (this.type == 662 || this.type == 685)
                    this.rotation =
                        (float) ((double) this.velocity.ToRotation() - 3.14159274101257 - 0.785398185253143);
                else if (this.type == 680 || this.type == 684 || (this.type == 686 || this.type == 711) ||
                         this.type == 712)
                    this.rotation = this.velocity.ToRotation() + 1.570796f;
                else if (this.type == 436)
                {
                    this.rotation = this.velocity.ToRotation();
                    this.rotation += 3.141593f;
                    if (this.direction == -1)
                        this.rotation += 3.141593f;
                }
                else if (this.type == 469)
                {
                    if ((double) this.velocity.X > 0.0)
                    {
                        this.spriteDirection = -1;
                        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
                    }
                    else
                    {
                        this.spriteDirection = 1;
                        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
                    }
                }
                else if (this.type == 477)
                {
                    if ((double) this.localAI[1] < 5.0)
                    {
                        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
                        ++this.localAI[1];
                    }
                    else
                        this.rotation = (float) (((double) this.rotation * 2.0 +
                                                  Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) +
                                                  1.57000005245209) / 3.0);
                }
                else if (this.type == 532)
                    this.rotation +=
                        (float) (0.200000002980232 + (double) Math.Abs(this.velocity.X) * 0.100000001490116);
                else if (this.type == 483)
                    this.rotation += this.velocity.X * 0.05f;
                else if (this.type == 485)
                {
                    this.velocity = (this.velocity * 39f + new Vector2(this.ai[0], this.ai[1])) / 40f;
                    int index = Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index].noGravity = true;
                    Main.dust[index].velocity *= 0.2f;
                    Main.dust[index].position = (Main.dust[index].position + this.Center) / 2f;
                    ++this.frameCounter;
                    if (this.frameCounter >= 2)
                    {
                        this.frameCounter = 0;
                        ++this.frame;
                        if (this.frame >= 5)
                            this.frame = 0;
                    }

                    if ((double) this.velocity.X < 0.0)
                    {
                        this.spriteDirection = -1;
                        this.rotation = (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X);
                    }
                    else
                    {
                        this.spriteDirection = 1;
                        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
                    }
                }
                else if (this.type == 640)
                {
                    if (this.velocity != Vector2.Zero)
                        this.rotation = this.velocity.ToRotation() + 1.570796f;
                }
                else if (this.type != 344 && this.type != 498)
                    this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
            }

            if ((double) this.velocity.Y <= 16.0)
                return;
            this.velocity.Y = 16f;
        }

        private void AI_026()
        {
            if (!Main.player[this.owner].active)
            {
                this.active = false;
            }
            else
            {
                bool flag1 = false;
                bool flag2 = false;
                bool flag3 = false;
                bool flag4 = false;
                int num1 = 85;
                bool flag5 = this.type >= 191 && this.type <= 194;
                if (this.type == 324)
                    num1 = 120;
                if (this.type == 112)
                    num1 = 100;
                if (this.type == (int) sbyte.MaxValue)
                    num1 = 50;
                if (flag5)
                {
                    if (this.lavaWet)
                    {
                        this.ai[0] = 1f;
                        this.ai[1] = 0.0f;
                    }

                    num1 = 60 + 30 * this.minionPos;
                }
                else if (this.type == 266)
                    num1 = 60 + 30 * this.minionPos;

                if (this.type == 111)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].bunny = false;
                    if (Main.player[this.owner].bunny)
                        this.timeLeft = 2;
                }

                if (this.type == 112)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].penguin = false;
                    if (Main.player[this.owner].penguin)
                        this.timeLeft = 2;
                }

                if (this.type == 334)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].puppy = false;
                    if (Main.player[this.owner].puppy)
                        this.timeLeft = 2;
                }

                if (this.type == 353)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].grinch = false;
                    if (Main.player[this.owner].grinch)
                        this.timeLeft = 2;
                }

                if (this.type == (int) sbyte.MaxValue)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].turtle = false;
                    if (Main.player[this.owner].turtle)
                        this.timeLeft = 2;
                }

                if (this.type == 175)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].eater = false;
                    if (Main.player[this.owner].eater)
                        this.timeLeft = 2;
                }

                if (this.type == 197)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].skeletron = false;
                    if (Main.player[this.owner].skeletron)
                        this.timeLeft = 2;
                }

                if (this.type == 198)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].hornet = false;
                    if (Main.player[this.owner].hornet)
                        this.timeLeft = 2;
                }

                if (this.type == 199)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].tiki = false;
                    if (Main.player[this.owner].tiki)
                        this.timeLeft = 2;
                }

                if (this.type == 200)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].lizard = false;
                    if (Main.player[this.owner].lizard)
                        this.timeLeft = 2;
                }

                if (this.type == 208)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].parrot = false;
                    if (Main.player[this.owner].parrot)
                        this.timeLeft = 2;
                }

                if (this.type == 209)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].truffle = false;
                    if (Main.player[this.owner].truffle)
                        this.timeLeft = 2;
                }

                if (this.type == 210)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].sapling = false;
                    if (Main.player[this.owner].sapling)
                        this.timeLeft = 2;
                }

                if (this.type == 324)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].cSapling = false;
                    if (Main.player[this.owner].cSapling)
                        this.timeLeft = 2;
                }

                if (this.type == 313)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].spider = false;
                    if (Main.player[this.owner].spider)
                        this.timeLeft = 2;
                }

                if (this.type == 314)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].squashling = false;
                    if (Main.player[this.owner].squashling)
                        this.timeLeft = 2;
                }

                if (this.type == 211)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].wisp = false;
                    if (Main.player[this.owner].wisp)
                        this.timeLeft = 2;
                }

                if (this.type == 236)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].dino = false;
                    if (Main.player[this.owner].dino)
                        this.timeLeft = 2;
                }

                if (this.type == 499)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].babyFaceMonster = false;
                    if (Main.player[this.owner].babyFaceMonster)
                        this.timeLeft = 2;
                }

                if (this.type == 266)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].slime = false;
                    if (Main.player[this.owner].slime)
                        this.timeLeft = 2;
                }

                if (this.type == 268)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].eyeSpring = false;
                    if (Main.player[this.owner].eyeSpring)
                        this.timeLeft = 2;
                }

                if (this.type == 269)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].snowman = false;
                    if (Main.player[this.owner].snowman)
                        this.timeLeft = 2;
                }

                if (this.type == 319)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].blackCat = false;
                    if (Main.player[this.owner].blackCat)
                        this.timeLeft = 2;
                }

                if (this.type == 380)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].zephyrfish = false;
                    if (Main.player[this.owner].zephyrfish)
                        this.timeLeft = 2;
                }

                if (flag5)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].pygmy = false;
                    if (Main.player[this.owner].pygmy)
                        this.timeLeft = Main.rand.Next(2, 10);
                }

                if (this.type >= 390 && this.type <= 392)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].spiderMinion = false;
                    if (Main.player[this.owner].spiderMinion)
                        this.timeLeft = 2;
                }

                if (this.type == 398)
                {
                    if (Main.player[this.owner].dead)
                        Main.player[this.owner].miniMinotaur = false;
                    if (Main.player[this.owner].miniMinotaur)
                        this.timeLeft = 2;
                }

                if (flag5 || this.type == 266 || this.type >= 390 && this.type <= 392)
                {
                    int num2 = 10;
                    int num3 = 40 * (this.minionPos + 1) * Main.player[this.owner].direction;
                    if ((double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2) <
                        (double) this.position.X + (double) (this.width / 2) - (double) num2 + (double) num3)
                        flag1 = true;
                    else if ((double) Main.player[this.owner].position.X +
                             (double) (Main.player[this.owner].width / 2) > (double) this.position.X +
                             (double) (this.width / 2) + (double) num2 + (double) num3)
                        flag2 = true;
                }
                else if ((double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2) <
                         (double) this.position.X + (double) (this.width / 2) - (double) num1)
                    flag1 = true;
                else if ((double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2) >
                         (double) this.position.X + (double) (this.width / 2) + (double) num1)
                    flag2 = true;

                if (this.type == 175)
                {
                    float num2 = 0.1f;
                    this.tileCollide = false;
                    int num3 = 300;
                    Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                        this.position.Y + (float) this.height * 0.5f);
                    float num4 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) -
                                 vector2.X;
                    float num5 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) -
                                 vector2.Y;
                    if (this.type == (int) sbyte.MaxValue)
                        num5 = Main.player[this.owner].position.Y - vector2.Y;
                    float num6 = (float) Math.Sqrt((double) num4 * (double) num4 + (double) num5 * (double) num5);
                    float num7 = 7f;
                    if ((double) num6 < (double) num3 && (double) Main.player[this.owner].velocity.Y == 0.0 &&
                        ((double) this.position.Y + (double) this.height <=
                         (double) Main.player[this.owner].position.Y + (double) Main.player[this.owner].height &&
                         !Collision.SolidCollision(this.position, this.width, this.height)))
                    {
                        this.ai[0] = 0.0f;
                        if ((double) this.velocity.Y < -6.0)
                            this.velocity.Y = -6f;
                    }

                    if ((double) num6 < 150.0)
                    {
                        if ((double) Math.Abs(this.velocity.X) > 2.0 || (double) Math.Abs(this.velocity.Y) > 2.0)
                        {
                            Projectile projectile = this;
                            projectile.velocity = projectile.velocity * 0.99f;
                        }

                        num2 = 0.01f;
                        if ((double) num4 < -2.0)
                            num4 = -2f;
                        if ((double) num4 > 2.0)
                            num4 = 2f;
                        if ((double) num5 < -2.0)
                            num5 = -2f;
                        if ((double) num5 > 2.0)
                            num5 = 2f;
                    }
                    else
                    {
                        if ((double) num6 > 300.0)
                            num2 = 0.2f;
                        float num8 = num7 / num6;
                        num4 *= num8;
                        num5 *= num8;
                    }

                    if ((double) Math.Abs(num4) > (double) Math.Abs(num5) || (double) num2 == 0.0500000007450581)
                    {
                        if ((double) this.velocity.X < (double) num4)
                        {
                            this.velocity.X += num2;
                            if ((double) num2 > 0.0500000007450581 && (double) this.velocity.X < 0.0)
                                this.velocity.X += num2;
                        }

                        if ((double) this.velocity.X > (double) num4)
                        {
                            this.velocity.X -= num2;
                            if ((double) num2 > 0.0500000007450581 && (double) this.velocity.X > 0.0)
                                this.velocity.X -= num2;
                        }
                    }

                    if ((double) Math.Abs(num4) <= (double) Math.Abs(num5) || (double) num2 == 0.0500000007450581)
                    {
                        if ((double) this.velocity.Y < (double) num5)
                        {
                            this.velocity.Y += num2;
                            if ((double) num2 > 0.0500000007450581 && (double) this.velocity.Y < 0.0)
                                this.velocity.Y += num2;
                        }

                        if ((double) this.velocity.Y > (double) num5)
                        {
                            this.velocity.Y -= num2;
                            if ((double) num2 > 0.0500000007450581 && (double) this.velocity.Y > 0.0)
                                this.velocity.Y -= num2;
                        }
                    }

                    this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) - 1.57f;
                    ++this.frameCounter;
                    if (this.frameCounter > 6)
                    {
                        ++this.frame;
                        this.frameCounter = 0;
                    }

                    if (this.frame <= 1)
                        return;
                    this.frame = 0;
                }
                else if (this.type == 197)
                {
                    float num2 = 0.1f;
                    this.tileCollide = false;
                    int num3 = 300;
                    Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                        this.position.Y + (float) this.height * 0.5f);
                    float num4 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) -
                                 vector2.X;
                    float num5 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) -
                                 vector2.Y;
                    if (this.type == (int) sbyte.MaxValue)
                        num5 = Main.player[this.owner].position.Y - vector2.Y;
                    float num6 = (float) Math.Sqrt((double) num4 * (double) num4 + (double) num5 * (double) num5);
                    float num7 = 3f;
                    if ((double) num6 > 500.0)
                        this.localAI[0] = 10000f;
                    if ((double) this.localAI[0] >= 10000.0)
                        num7 = 14f;
                    if ((double) num6 < (double) num3 && (double) Main.player[this.owner].velocity.Y == 0.0 &&
                        ((double) this.position.Y + (double) this.height <=
                         (double) Main.player[this.owner].position.Y + (double) Main.player[this.owner].height &&
                         !Collision.SolidCollision(this.position, this.width, this.height)))
                    {
                        this.ai[0] = 0.0f;
                        if ((double) this.velocity.Y < -6.0)
                            this.velocity.Y = -6f;
                    }

                    if ((double) num6 < 150.0)
                    {
                        if ((double) Math.Abs(this.velocity.X) > 2.0 || (double) Math.Abs(this.velocity.Y) > 2.0)
                        {
                            Projectile projectile = this;
                            projectile.velocity = projectile.velocity * 0.99f;
                        }

                        num2 = 0.01f;
                        if ((double) num4 < -2.0)
                            num4 = -2f;
                        if ((double) num4 > 2.0)
                            num4 = 2f;
                        if ((double) num5 < -2.0)
                            num5 = -2f;
                        if ((double) num5 > 2.0)
                            num5 = 2f;
                    }
                    else
                    {
                        if ((double) num6 > 300.0)
                            num2 = 0.2f;
                        float num8 = num7 / num6;
                        num4 *= num8;
                        num5 *= num8;
                    }

                    if ((double) this.velocity.X < (double) num4)
                    {
                        this.velocity.X += num2;
                        if ((double) num2 > 0.0500000007450581 && (double) this.velocity.X < 0.0)
                            this.velocity.X += num2;
                    }

                    if ((double) this.velocity.X > (double) num4)
                    {
                        this.velocity.X -= num2;
                        if ((double) num2 > 0.0500000007450581 && (double) this.velocity.X > 0.0)
                            this.velocity.X -= num2;
                    }

                    if ((double) this.velocity.Y < (double) num5)
                    {
                        this.velocity.Y += num2;
                        if ((double) num2 > 0.0500000007450581 && (double) this.velocity.Y < 0.0)
                            this.velocity.Y += num2;
                    }

                    if ((double) this.velocity.Y > (double) num5)
                    {
                        this.velocity.Y -= num2;
                        if ((double) num2 > 0.0500000007450581 && (double) this.velocity.Y > 0.0)
                            this.velocity.Y -= num2;
                    }

                    this.localAI[0] += (float) Main.rand.Next(10);
                    if ((double) this.localAI[0] > 10000.0)
                    {
                        if ((double) this.localAI[1] == 0.0)
                            this.localAI[1] = (double) this.velocity.X >= 0.0 ? 1f : -1f;
                        this.rotation += 0.25f * this.localAI[1];
                        if ((double) this.localAI[0] > 12000.0)
                            this.localAI[0] = 0.0f;
                    }
                    else
                    {
                        this.localAI[1] = 0.0f;
                        float num8 = this.velocity.X * 0.1f;
                        if ((double) this.rotation > (double) num8)
                        {
                            this.rotation -=
                                (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) *
                                         0.00999999977648258);
                            if ((double) this.rotation < (double) num8)
                                this.rotation = num8;
                        }

                        if ((double) this.rotation < (double) num8)
                        {
                            this.rotation +=
                                (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) *
                                         0.00999999977648258);
                            if ((double) this.rotation > (double) num8)
                                this.rotation = num8;
                        }
                    }

                    if ((double) this.rotation > 6.28)
                        this.rotation -= 6.28f;
                    if ((double) this.rotation >= -6.28)
                        return;
                    this.rotation += 6.28f;
                }
                else if (this.type == 198 || this.type == 380)
                {
                    float num2 = 0.4f;
                    if (this.type == 380)
                        num2 = 0.3f;
                    this.tileCollide = false;
                    int num3 = 100;
                    Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                        this.position.Y + (float) this.height * 0.5f);
                    float num4 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) -
                                 vector2.X;
                    float num5 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) -
                                 vector2.Y + (float) Main.rand.Next(-10, 21);
                    float num6 = num4 + (float) Main.rand.Next(-10, 21) +
                                 (float) (60 * -Main.player[this.owner].direction);
                    float num7 = num5 - 60f;
                    if (this.type == (int) sbyte.MaxValue)
                        num7 = Main.player[this.owner].position.Y - vector2.Y;
                    float num8 = (float) Math.Sqrt((double) num6 * (double) num6 + (double) num7 * (double) num7);
                    float num9 = 14f;
                    if (this.type == 380)
                        num9 = 6f;
                    if ((double) num8 < (double) num3 && (double) Main.player[this.owner].velocity.Y == 0.0 &&
                        ((double) this.position.Y + (double) this.height <=
                         (double) Main.player[this.owner].position.Y + (double) Main.player[this.owner].height &&
                         !Collision.SolidCollision(this.position, this.width, this.height)))
                    {
                        this.ai[0] = 0.0f;
                        if ((double) this.velocity.Y < -6.0)
                            this.velocity.Y = -6f;
                    }

                    if ((double) num8 < 50.0)
                    {
                        if ((double) Math.Abs(this.velocity.X) > 2.0 || (double) Math.Abs(this.velocity.Y) > 2.0)
                        {
                            Projectile projectile = this;
                            projectile.velocity = projectile.velocity * 0.99f;
                        }

                        num2 = 0.01f;
                    }
                    else
                    {
                        if (this.type == 380)
                        {
                            if ((double) num8 < 100.0)
                                num2 = 0.1f;
                            if ((double) num8 > 300.0)
                                num2 = 0.4f;
                        }
                        else if (this.type == 198)
                        {
                            if ((double) num8 < 100.0)
                                num2 = 0.1f;
                            if ((double) num8 > 300.0)
                                num2 = 0.6f;
                        }

                        float num10 = num9 / num8;
                        num6 *= num10;
                        num7 *= num10;
                    }

                    if ((double) this.velocity.X < (double) num6)
                    {
                        this.velocity.X += num2;
                        if ((double) num2 > 0.0500000007450581 && (double) this.velocity.X < 0.0)
                            this.velocity.X += num2;
                    }

                    if ((double) this.velocity.X > (double) num6)
                    {
                        this.velocity.X -= num2;
                        if ((double) num2 > 0.0500000007450581 && (double) this.velocity.X > 0.0)
                            this.velocity.X -= num2;
                    }

                    if ((double) this.velocity.Y < (double) num7)
                    {
                        this.velocity.Y += num2;
                        if ((double) num2 > 0.0500000007450581 && (double) this.velocity.Y < 0.0)
                            this.velocity.Y += num2 * 2f;
                    }

                    if ((double) this.velocity.Y > (double) num7)
                    {
                        this.velocity.Y -= num2;
                        if ((double) num2 > 0.0500000007450581 && (double) this.velocity.Y > 0.0)
                            this.velocity.Y -= num2 * 2f;
                    }

                    if ((double) this.velocity.X > 0.25)
                        this.direction = -1;
                    else if ((double) this.velocity.X < -0.25)
                        this.direction = 1;
                    this.spriteDirection = this.direction;
                    this.rotation = this.velocity.X * 0.05f;
                    ++this.frameCounter;
                    int num11 = 2;
                    if (this.type == 380)
                        num11 = 5;
                    if (this.frameCounter > num11)
                    {
                        ++this.frame;
                        this.frameCounter = 0;
                    }

                    if (this.frame <= 3)
                        return;
                    this.frame = 0;
                }
                else if (this.type == 211)
                {
                    float num2 = 0.2f;
                    float num3 = 5f;
                    this.tileCollide = false;
                    Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                        this.position.Y + (float) this.height * 0.5f);
                    float num4 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) -
                                 vector2.X;
                    float num5 = Main.player[this.owner].position.Y + Main.player[this.owner].gfxOffY +
                                 (float) (Main.player[this.owner].height / 2) - vector2.Y;
                    if (Main.player[this.owner].controlLeft)
                        num4 -= 120f;
                    else if (Main.player[this.owner].controlRight)
                        num4 += 120f;
                    float num6;
                    if (Main.player[this.owner].controlDown)
                    {
                        num6 = num5 + 120f;
                    }
                    else
                    {
                        if (Main.player[this.owner].controlUp)
                            num5 -= 120f;
                        num6 = num5 - 60f;
                    }

                    float num7 = (float) Math.Sqrt((double) num4 * (double) num4 + (double) num6 * (double) num6);
                    if ((double) num7 > 1000.0)
                    {
                        this.position.X += num4;
                        this.position.Y += num6;
                    }

                    if ((double) this.localAI[0] == 1.0)
                    {
                        if ((double) num7 < 10.0 &&
                            (double) Math.Abs(Main.player[this.owner].velocity.X) +
                            (double) Math.Abs(Main.player[this.owner].velocity.Y) < (double) num3 &&
                            (double) Main.player[this.owner].velocity.Y == 0.0)
                            this.localAI[0] = 0.0f;
                        float num8 = 12f;
                        if ((double) num7 < (double) num8)
                        {
                            this.velocity.X = num4;
                            this.velocity.Y = num6;
                        }
                        else
                        {
                            float num9 = num8 / num7;
                            this.velocity.X = num4 * num9;
                            this.velocity.Y = num6 * num9;
                        }

                        if ((double) this.velocity.X > 0.5)
                            this.direction = -1;
                        else if ((double) this.velocity.X < -0.5)
                            this.direction = 1;
                        this.spriteDirection = this.direction;
                        this.rotation -=
                            (float) (0.200000002980232 + (double) Math.Abs(this.velocity.X) * 0.025000000372529) *
                            (float) this.direction;
                        ++this.frameCounter;
                        if (this.frameCounter > 3)
                        {
                            ++this.frame;
                            this.frameCounter = 0;
                        }

                        if (this.frame < 5)
                            this.frame = 5;
                        if (this.frame > 9)
                            this.frame = 5;
                        for (int index1 = 0; index1 < 2; ++index1)
                        {
                            int index2 = Dust.NewDust(new Vector2(this.position.X + 3f, this.position.Y + 4f), 14, 14,
                                156, 0.0f, 0.0f, 0, new Color(), 1f);
                            Main.dust[index2].velocity *= 0.2f;
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].scale = 1.25f;
                            Main.dust[index2].shader =
                                GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cLight,
                                    Main.player[this.owner]);
                        }
                    }
                    else
                    {
                        if ((double) num7 > 200.0)
                            this.localAI[0] = 1f;
                        if ((double) this.velocity.X > 0.5)
                            this.direction = -1;
                        else if ((double) this.velocity.X < -0.5)
                            this.direction = 1;
                        this.spriteDirection = this.direction;
                        if ((double) num7 < 10.0)
                        {
                            this.velocity.X = num4;
                            this.velocity.Y = num6;
                            this.rotation = this.velocity.X * 0.05f;
                            if ((double) num7 < (double) num3)
                            {
                                Projectile projectile1 = this;
                                projectile1.position = projectile1.position + this.velocity;
                                Projectile projectile2 = this;
                                projectile2.velocity = projectile2.velocity * 0.0f;
                                num2 = 0.0f;
                            }

                            this.direction = -Main.player[this.owner].direction;
                        }

                        float num8 = num3 / num7;
                        float num9 = num4 * num8;
                        float num10 = num6 * num8;
                        if ((double) this.velocity.X < (double) num9)
                        {
                            this.velocity.X += num2;
                            if ((double) this.velocity.X < 0.0)
                                this.velocity.X *= 0.99f;
                        }

                        if ((double) this.velocity.X > (double) num9)
                        {
                            this.velocity.X -= num2;
                            if ((double) this.velocity.X > 0.0)
                                this.velocity.X *= 0.99f;
                        }

                        if ((double) this.velocity.Y < (double) num10)
                        {
                            this.velocity.Y += num2;
                            if ((double) this.velocity.Y < 0.0)
                                this.velocity.Y *= 0.99f;
                        }

                        if ((double) this.velocity.Y > (double) num10)
                        {
                            this.velocity.Y -= num2;
                            if ((double) this.velocity.Y > 0.0)
                                this.velocity.Y *= 0.99f;
                        }

                        if ((double) this.velocity.X != 0.0 || (double) this.velocity.Y != 0.0)
                            this.rotation = this.velocity.X * 0.05f;
                        ++this.frameCounter;
                        if (this.frameCounter > 3)
                        {
                            ++this.frame;
                            this.frameCounter = 0;
                        }

                        if (this.frame <= 4)
                            return;
                        this.frame = 0;
                    }
                }
                else if (this.type == 199)
                {
                    float num2 = 0.1f;
                    this.tileCollide = false;
                    int num3 = 200;
                    Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                        this.position.Y + (float) this.height * 0.5f);
                    float num4 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) -
                                 vector2.X;
                    float num5 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) -
                                 vector2.Y - 60f;
                    float num6 = num4 - 2f;
                    if (this.type == (int) sbyte.MaxValue)
                        num5 = Main.player[this.owner].position.Y - vector2.Y;
                    float num7 = (float) Math.Sqrt((double) num6 * (double) num6 + (double) num5 * (double) num5);
                    float num8 = 4f;
                    float num9 = num7;
                    if ((double) num7 < (double) num3 && (double) Main.player[this.owner].velocity.Y == 0.0 &&
                        ((double) this.position.Y + (double) this.height <=
                         (double) Main.player[this.owner].position.Y + (double) Main.player[this.owner].height &&
                         !Collision.SolidCollision(this.position, this.width, this.height)))
                    {
                        this.ai[0] = 0.0f;
                        if ((double) this.velocity.Y < -6.0)
                            this.velocity.Y = -6f;
                    }

                    if ((double) num7 < 4.0)
                    {
                        this.velocity.X = num6;
                        this.velocity.Y = num5;
                        num2 = 0.0f;
                    }
                    else
                    {
                        if ((double) num7 > 350.0)
                        {
                            num2 = 0.2f;
                            num8 = 10f;
                        }

                        float num10 = num8 / num7;
                        num6 *= num10;
                        num5 *= num10;
                    }

                    if ((double) this.velocity.X < (double) num6)
                    {
                        this.velocity.X += num2;
                        if ((double) this.velocity.X < 0.0)
                            this.velocity.X += num2;
                    }

                    if ((double) this.velocity.X > (double) num6)
                    {
                        this.velocity.X -= num2;
                        if ((double) this.velocity.X > 0.0)
                            this.velocity.X -= num2;
                    }

                    if ((double) this.velocity.Y < (double) num5)
                    {
                        this.velocity.Y += num2;
                        if ((double) this.velocity.Y < 0.0)
                            this.velocity.Y += num2;
                    }

                    if ((double) this.velocity.Y > (double) num5)
                    {
                        this.velocity.Y -= num2;
                        if ((double) this.velocity.Y > 0.0)
                            this.velocity.Y -= num2;
                    }

                    this.direction = -Main.player[this.owner].direction;
                    this.spriteDirection = 1;
                    this.rotation = this.velocity.Y * 0.05f * (float) -this.direction;
                    if ((double) num9 >= 50.0)
                    {
                        ++this.frameCounter;
                        if (this.frameCounter <= 6)
                            return;
                        this.frameCounter = 0;
                        if ((double) this.velocity.X < 0.0)
                        {
                            if (this.frame < 2)
                                ++this.frame;
                            if (this.frame <= 2)
                                return;
                            --this.frame;
                        }
                        else
                        {
                            if (this.frame < 6)
                                ++this.frame;
                            if (this.frame <= 6)
                                return;
                            --this.frame;
                        }
                    }
                    else
                    {
                        ++this.frameCounter;
                        if (this.frameCounter > 6)
                        {
                            this.frame += this.direction;
                            this.frameCounter = 0;
                        }

                        if (this.frame > 7)
                            this.frame = 0;
                        if (this.frame >= 0)
                            return;
                        this.frame = 7;
                    }
                }
                else
                {
                    if ((double) this.ai[1] == 0.0)
                    {
                        int num2 = 500;
                        if (this.type == (int) sbyte.MaxValue)
                            num2 = 200;
                        if (this.type == 208)
                            num2 = 300;
                        if (flag5 || this.type == 266 || this.type >= 390 && this.type <= 392)
                        {
                            num2 += 40 * this.minionPos;
                            if ((double) this.localAI[0] > 0.0)
                                num2 += 500;
                            if (this.type == 266 && (double) this.localAI[0] > 0.0)
                                num2 += 100;
                            if (this.type >= 390 && this.type <= 392 && (double) this.localAI[0] > 0.0)
                                num2 += 400;
                        }

                        if (Main.player[this.owner].rocketDelay2 > 0)
                            this.ai[0] = 1f;
                        Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                            this.position.Y + (float) this.height * 0.5f);
                        float num3 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) -
                                     vector2.X;
                        float num4 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) -
                                     vector2.Y;
                        float num5 = (float) Math.Sqrt((double) num3 * (double) num3 + (double) num4 * (double) num4);
                        if ((double) num5 > 2000.0)
                        {
                            this.position.X = Main.player[this.owner].position.X +
                                              (float) (Main.player[this.owner].width / 2) - (float) (this.width / 2);
                            this.position.Y = Main.player[this.owner].position.Y +
                                              (float) (Main.player[this.owner].height / 2) - (float) (this.height / 2);
                        }
                        else if ((double) num5 > (double) num2 || (double) Math.Abs(num4) > 300.0 &&
                                 (!flag5 && this.type != 266 && (this.type < 390 || this.type > 392) ||
                                  (double) this.localAI[0] <= 0.0))
                        {
                            if (this.type != 324)
                            {
                                if ((double) num4 > 0.0 && (double) this.velocity.Y < 0.0)
                                    this.velocity.Y = 0.0f;
                                if ((double) num4 < 0.0 && (double) this.velocity.Y > 0.0)
                                    this.velocity.Y = 0.0f;
                            }

                            this.ai[0] = 1f;
                        }
                    }

                    if (this.type == 209 && (double) this.ai[0] != 0.0)
                    {
                        if ((double) Main.player[this.owner].velocity.Y == 0.0 && this.alpha >= 100)
                        {
                            this.position.X = Main.player[this.owner].position.X +
                                              (float) (Main.player[this.owner].width / 2) - (float) (this.width / 2);
                            this.position.Y = Main.player[this.owner].position.Y +
                                              (float) Main.player[this.owner].height - (float) this.height;
                            this.ai[0] = 0.0f;
                        }
                        else
                        {
                            this.velocity.X = 0.0f;
                            this.velocity.Y = 0.0f;
                            this.alpha += 5;
                            if (this.alpha <= (int) byte.MaxValue)
                                return;
                            this.alpha = (int) byte.MaxValue;
                        }
                    }
                    else if ((double) this.ai[0] != 0.0)
                    {
                        float num2 = 0.2f;
                        int num3 = 200;
                        if (this.type == (int) sbyte.MaxValue)
                            num3 = 100;
                        if (flag5)
                        {
                            num2 = 0.5f;
                            num3 = 100;
                        }

                        this.tileCollide = false;
                        Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                            this.position.Y + (float) this.height * 0.5f);
                        float num4 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) -
                                     vector2.X;
                        if (flag5 || this.type == 266 || this.type >= 390 && this.type <= 392)
                        {
                            num4 -= (float) (40 * Main.player[this.owner].direction);
                            float num5 = 700f;
                            if (flag5)
                                num5 += 100f;
                            bool flag6 = false;
                            int num6 = -1;
                            for (int index = 0; index < 200; ++index)
                            {
                                if (Main.npc[index].CanBeChasedBy((object) this, false))
                                {
                                    float num7 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                                    float num8 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                                    if ((double) (Math.Abs(Main.player[this.owner].position.X +
                                                           (float) (Main.player[this.owner].width / 2) - num7) +
                                                  Math.Abs(Main.player[this.owner].position.Y +
                                                           (float) (Main.player[this.owner].height / 2) - num8)) <
                                        (double) num5)
                                    {
                                        if (Collision.CanHit(this.position, this.width, this.height,
                                            Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
                                            num6 = index;
                                        flag6 = true;
                                        break;
                                    }
                                }
                            }

                            if (!flag6)
                                num4 -= (float) (40 * this.minionPos * Main.player[this.owner].direction);
                            if (flag6 && num6 >= 0)
                                this.ai[0] = 0.0f;
                        }

                        float num9 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) -
                                     vector2.Y;
                        if (this.type == (int) sbyte.MaxValue)
                            num9 = Main.player[this.owner].position.Y - vector2.Y;
                        float num10 = (float) Math.Sqrt((double) num4 * (double) num4 + (double) num9 * (double) num9);
                        float num11 = 10f;
                        float num12 = num10;
                        if (this.type == 111)
                            num11 = 11f;
                        if (this.type == (int) sbyte.MaxValue)
                            num11 = 9f;
                        if (this.type == 324)
                            num11 = 20f;
                        if (flag5)
                        {
                            num2 = 0.4f;
                            num11 = 12f;
                            if ((double) num11 < (double) Math.Abs(Main.player[this.owner].velocity.X) +
                                (double) Math.Abs(Main.player[this.owner].velocity.Y))
                                num11 = Math.Abs(Main.player[this.owner].velocity.X) +
                                        Math.Abs(Main.player[this.owner].velocity.Y);
                        }

                        if (this.type == 208 && (double) Math.Abs(Main.player[this.owner].velocity.X) +
                            (double) Math.Abs(Main.player[this.owner].velocity.Y) > 4.0)
                            num3 = -1;
                        if ((double) num10 < (double) num3 && (double) Main.player[this.owner].velocity.Y == 0.0 &&
                            ((double) this.position.Y + (double) this.height <=
                             (double) Main.player[this.owner].position.Y + (double) Main.player[this.owner].height &&
                             !Collision.SolidCollision(this.position, this.width, this.height)))
                        {
                            this.ai[0] = 0.0f;
                            if ((double) this.velocity.Y < -6.0)
                                this.velocity.Y = -6f;
                        }

                        float num13;
                        float num14;
                        if ((double) num10 < 60.0)
                        {
                            num13 = this.velocity.X;
                            num14 = this.velocity.Y;
                        }
                        else
                        {
                            float num5 = num11 / num10;
                            num13 = num4 * num5;
                            num14 = num9 * num5;
                        }

                        if (this.type == 324)
                        {
                            if ((double) num12 > 1000.0)
                            {
                                if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) <
                                    (double) num11 - 1.25)
                                {
                                    Projectile projectile = this;
                                    projectile.velocity = projectile.velocity * 1.025f;
                                }

                                if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) >
                                    (double) num11 + 1.25)
                                {
                                    Projectile projectile = this;
                                    projectile.velocity = projectile.velocity * 0.975f;
                                }
                            }
                            else if ((double) num12 > 600.0)
                            {
                                if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) <
                                    (double) num11 - 1.0)
                                {
                                    Projectile projectile = this;
                                    projectile.velocity = projectile.velocity * 1.05f;
                                }

                                if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) >
                                    (double) num11 + 1.0)
                                {
                                    Projectile projectile = this;
                                    projectile.velocity = projectile.velocity * 0.95f;
                                }
                            }
                            else if ((double) num12 > 400.0)
                            {
                                if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) <
                                    (double) num11 - 0.5)
                                {
                                    Projectile projectile = this;
                                    projectile.velocity = projectile.velocity * 1.075f;
                                }

                                if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) >
                                    (double) num11 + 0.5)
                                {
                                    Projectile projectile = this;
                                    projectile.velocity = projectile.velocity * 0.925f;
                                }
                            }
                            else
                            {
                                if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) <
                                    (double) num11 - 0.25)
                                {
                                    Projectile projectile = this;
                                    projectile.velocity = projectile.velocity * 1.1f;
                                }

                                if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) >
                                    (double) num11 + 0.25)
                                {
                                    Projectile projectile = this;
                                    projectile.velocity = projectile.velocity * 0.9f;
                                }
                            }

                            this.velocity.X = (float) (((double) this.velocity.X * 34.0 + (double) num13) / 35.0);
                            this.velocity.Y = (float) (((double) this.velocity.Y * 34.0 + (double) num14) / 35.0);
                        }
                        else
                        {
                            if ((double) this.velocity.X < (double) num13)
                            {
                                this.velocity.X += num2;
                                if ((double) this.velocity.X < 0.0)
                                    this.velocity.X += num2 * 1.5f;
                            }

                            if ((double) this.velocity.X > (double) num13)
                            {
                                this.velocity.X -= num2;
                                if ((double) this.velocity.X > 0.0)
                                    this.velocity.X -= num2 * 1.5f;
                            }

                            if ((double) this.velocity.Y < (double) num14)
                            {
                                this.velocity.Y += num2;
                                if ((double) this.velocity.Y < 0.0)
                                    this.velocity.Y += num2 * 1.5f;
                            }

                            if ((double) this.velocity.Y > (double) num14)
                            {
                                this.velocity.Y -= num2;
                                if ((double) this.velocity.Y > 0.0)
                                    this.velocity.Y -= num2 * 1.5f;
                            }
                        }

                        if (this.type == 111)
                            this.frame = 7;
                        if (this.type == 112)
                            this.frame = 2;
                        if (flag5 && this.frame < 12)
                        {
                            this.frame = Main.rand.Next(12, 18);
                            this.frameCounter = 0;
                        }

                        if (this.type != 313)
                        {
                            if ((double) this.velocity.X > 0.5)
                                this.spriteDirection = -1;
                            else if ((double) this.velocity.X < -0.5)
                                this.spriteDirection = 1;
                        }

                        if (this.type == 398)
                        {
                            if ((double) this.velocity.X > 0.5)
                                this.spriteDirection = 1;
                            else if ((double) this.velocity.X < -0.5)
                                this.spriteDirection = -1;
                        }

                        if (this.type == 112)
                            this.rotation = this.spriteDirection != -1
                                ? (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f
                                : (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
                        else if (this.type >= 390 && this.type <= 392)
                        {
                            int index1 = (int) ((double) this.Center.X / 16.0);
                            int index2 = (int) ((double) this.Center.Y / 16.0);
                            if (Main.tile[index1, index2] != null && Main.tile[index1, index2].wall > (byte) 0)
                            {
                                this.rotation = this.velocity.ToRotation() + 1.570796f;
                                this.frameCounter +=
                                    (int) ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y));
                                if (this.frameCounter > 5)
                                {
                                    ++this.frame;
                                    this.frameCounter = 0;
                                }

                                if (this.frame > 7)
                                    this.frame = 4;
                                if (this.frame < 4)
                                    this.frame = 7;
                            }
                            else
                            {
                                ++this.frameCounter;
                                if (this.frameCounter > 2)
                                {
                                    ++this.frame;
                                    this.frameCounter = 0;
                                }

                                if (this.frame < 8 || this.frame > 10)
                                    this.frame = 8;
                                this.rotation = this.velocity.X * 0.1f;
                            }
                        }
                        else if (this.type == 334)
                        {
                            ++this.frameCounter;
                            if (this.frameCounter > 1)
                            {
                                ++this.frame;
                                this.frameCounter = 0;
                            }

                            if (this.frame < 7 || this.frame > 10)
                                this.frame = 7;
                            this.rotation = this.velocity.X * 0.1f;
                        }
                        else if (this.type == 353)
                        {
                            ++this.frameCounter;
                            if (this.frameCounter > 6)
                            {
                                ++this.frame;
                                this.frameCounter = 0;
                            }

                            if (this.frame < 10 || this.frame > 13)
                                this.frame = 10;
                            this.rotation = this.velocity.X * 0.05f;
                        }
                        else if (this.type == (int) sbyte.MaxValue)
                        {
                            this.frameCounter += 3;
                            if (this.frameCounter > 6)
                            {
                                ++this.frame;
                                this.frameCounter = 0;
                            }

                            if (this.frame <= 5 || this.frame > 15)
                                this.frame = 6;
                            this.rotation = this.velocity.X * 0.1f;
                        }
                        else if (this.type == 269)
                        {
                            if (this.frame == 6)
                                this.frameCounter = 0;
                            else if (this.frame < 4 || this.frame > 6)
                            {
                                this.frameCounter = 0;
                                this.frame = 4;
                            }
                            else
                            {
                                ++this.frameCounter;
                                if (this.frameCounter > 6)
                                {
                                    ++this.frame;
                                    this.frameCounter = 0;
                                }
                            }

                            this.rotation = this.velocity.X * 0.05f;
                        }
                        else if (this.type == 266)
                        {
                            ++this.frameCounter;
                            if (this.frameCounter > 6)
                            {
                                ++this.frame;
                                this.frameCounter = 0;
                            }

                            if (this.frame < 2 || this.frame > 5)
                                this.frame = 2;
                            this.rotation = this.velocity.X * 0.1f;
                        }
                        else if (this.type == 324)
                        {
                            ++this.frameCounter;
                            if (this.frameCounter > 1)
                            {
                                ++this.frame;
                                this.frameCounter = 0;
                            }

                            if (this.frame < 6 || this.frame > 9)
                                this.frame = 6;
                            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) +
                                            1.58f;
                            Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.9f, 0.6f, 0.2f);
                            for (int index1 = 0; index1 < 2; ++index1)
                            {
                                int num5 = 4;
                                int index2 =
                                    Dust.NewDust(
                                        new Vector2(this.Center.X - (float) num5, this.Center.Y - (float) num5) -
                                        this.velocity * 0.0f, num5 * 2, num5 * 2, 6, 0.0f, 0.0f, 100, new Color(), 1f);
                                Main.dust[index2].scale *=
                                    (float) (1.79999995231628 + (double) Main.rand.Next(10) * 0.100000001490116);
                                Main.dust[index2].velocity *= 0.2f;
                                if (index1 == 1)
                                    Main.dust[index2].position -= this.velocity * 0.5f;
                                Main.dust[index2].noGravity = true;
                                int index3 =
                                    Dust.NewDust(
                                        new Vector2(this.Center.X - (float) num5, this.Center.Y - (float) num5) -
                                        this.velocity * 0.0f, num5 * 2, num5 * 2, 31, 0.0f, 0.0f, 100, new Color(),
                                        0.5f);
                                Main.dust[index3].fadeIn =
                                    (float) (1.0 + (double) Main.rand.Next(5) * 0.100000001490116);
                                Main.dust[index3].velocity *= 0.05f;
                                if (index1 == 1)
                                    Main.dust[index3].position -= this.velocity * 0.5f;
                            }
                        }
                        else if (this.type == 268)
                        {
                            ++this.frameCounter;
                            if (this.frameCounter > 4)
                            {
                                ++this.frame;
                                this.frameCounter = 0;
                            }

                            if (this.frame < 6 || this.frame > 7)
                                this.frame = 6;
                            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) +
                                            1.58f;
                        }
                        else if (this.type == 200)
                        {
                            this.frameCounter += 3;
                            if (this.frameCounter > 6)
                            {
                                ++this.frame;
                                this.frameCounter = 0;
                            }

                            if (this.frame <= 5 || this.frame > 9)
                                this.frame = 6;
                            this.rotation = this.velocity.X * 0.1f;
                        }
                        else if (this.type == 208)
                        {
                            this.rotation = this.velocity.X * 0.075f;
                            ++this.frameCounter;
                            if (this.frameCounter > 6)
                            {
                                ++this.frame;
                                this.frameCounter = 0;
                            }

                            if (this.frame > 4)
                                this.frame = 1;
                            if (this.frame < 1)
                                this.frame = 1;
                        }
                        else if (this.type == 236)
                        {
                            this.rotation = this.velocity.Y * 0.05f * (float) this.direction;
                            if ((double) this.velocity.Y < 0.0)
                                this.frameCounter += 2;
                            else
                                ++this.frameCounter;
                            if (this.frameCounter >= 6)
                            {
                                ++this.frame;
                                this.frameCounter = 0;
                            }

                            if (this.frame > 12)
                                this.frame = 9;
                            if (this.frame < 9)
                                this.frame = 9;
                        }
                        else if (this.type == 499)
                        {
                            this.rotation = this.velocity.Y * 0.05f * (float) this.direction;
                            if ((double) this.velocity.Y < 0.0)
                                this.frameCounter += 2;
                            else
                                ++this.frameCounter;
                            if (this.frameCounter >= 6)
                            {
                                ++this.frame;
                                this.frameCounter = 0;
                            }

                            if (this.frame >= 12)
                                this.frame = 8;
                            if (this.frame < 8)
                                this.frame = 8;
                        }
                        else if (this.type == 314)
                        {
                            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) +
                                            1.58f;
                            ++this.frameCounter;
                            if (this.frameCounter >= 3)
                            {
                                ++this.frame;
                                this.frameCounter = 0;
                            }

                            if (this.frame > 12)
                                this.frame = 7;
                            if (this.frame < 7)
                                this.frame = 7;
                        }
                        else if (this.type == 319)
                        {
                            this.rotation = this.velocity.X * 0.05f;
                            ++this.frameCounter;
                            if (this.frameCounter >= 6)
                            {
                                ++this.frame;
                                this.frameCounter = 0;
                            }

                            if (this.frame > 10)
                                this.frame = 6;
                            if (this.frame < 6)
                                this.frame = 6;
                        }
                        else if (this.type == 210)
                        {
                            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) +
                                            1.58f;
                            this.frameCounter += 3;
                            if (this.frameCounter > 6)
                            {
                                ++this.frame;
                                this.frameCounter = 0;
                            }

                            if (this.frame > 11)
                                this.frame = 7;
                            if (this.frame < 7)
                                this.frame = 7;
                        }
                        else if (this.type == 313)
                        {
                            this.position.Y += (float) this.height;
                            this.height = 54;
                            this.position.Y -= (float) this.height;
                            this.position.X += (float) (this.width / 2);
                            this.width = 54;
                            this.position.X -= (float) (this.width / 2);
                            this.rotation += this.velocity.X * 0.01f;
                            this.frameCounter = 0;
                            this.frame = 11;
                        }
                        else if (this.type == 398)
                        {
                            ++this.frameCounter;
                            if (this.frameCounter > 1)
                            {
                                ++this.frame;
                                this.frameCounter = 0;
                            }

                            if (this.frame < 6 || this.frame > 9)
                                this.frame = 6;
                            this.rotation = this.velocity.X * 0.1f;
                        }
                        else
                            this.rotation = this.spriteDirection != -1
                                ? (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 3.14f
                                : (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);

                        if (flag5 || this.type == 499 || (this.type == 398 || this.type == 390) ||
                            (this.type == 391 || this.type == 392 ||
                             (this.type == (int) sbyte.MaxValue || this.type == 200)) ||
                            (this.type == 208 || this.type == 210 || (this.type == 236 || this.type == 266) ||
                             (this.type == 268 || this.type == 269 || (this.type == 313 || this.type == 314))) ||
                            (this.type == 319 || this.type == 324 || (this.type == 334 || this.type == 353)))
                            return;
                        int index4 = Dust.NewDust(
                            new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 4.0),
                                (float) ((double) this.position.Y + (double) (this.height / 2) - 4.0)) - this.velocity,
                            8, 8, 16, (float) (-(double) this.velocity.X * 0.5), this.velocity.Y * 0.5f, 50,
                            new Color(), 1.7f);
                        Main.dust[index4].velocity.X *= 0.2f;
                        Main.dust[index4].velocity.Y *= 0.2f;
                        Main.dust[index4].noGravity = true;
                    }
                    else
                    {
                        if (flag5)
                        {
                            float num2 = (float) (40 * this.minionPos);
                            int num3 = 30;
                            int num4 = 60;
                            --this.localAI[0];
                            if ((double) this.localAI[0] < 0.0)
                                this.localAI[0] = 0.0f;
                            if ((double) this.ai[1] > 0.0)
                            {
                                --this.ai[1];
                            }
                            else
                            {
                                float num5 = this.position.X;
                                float num6 = this.position.Y;
                                float num7 = 100000f;
                                float num8 = num7;
                                int num9 = -1;
                                NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
                                if (minionAttackTargetNpc != null &&
                                    minionAttackTargetNpc.CanBeChasedBy((object) this, false))
                                {
                                    float num10 = minionAttackTargetNpc.position.X +
                                                  (float) (minionAttackTargetNpc.width / 2);
                                    float num11 = minionAttackTargetNpc.position.Y +
                                                  (float) (minionAttackTargetNpc.height / 2);
                                    float num12 = Math.Abs(this.position.X + (float) (this.width / 2) - num10) +
                                                  Math.Abs(this.position.Y + (float) (this.height / 2) - num11);
                                    if ((double) num12 < (double) num7)
                                    {
                                        if (num9 == -1 && (double) num12 <= (double) num8)
                                        {
                                            num8 = num12;
                                            num5 = num10;
                                            num6 = num11;
                                        }

                                        if (Collision.CanHit(this.position, this.width, this.height,
                                            minionAttackTargetNpc.position, minionAttackTargetNpc.width,
                                            minionAttackTargetNpc.height))
                                        {
                                            num7 = num12;
                                            num5 = num10;
                                            num6 = num11;
                                            num9 = minionAttackTargetNpc.whoAmI;
                                        }
                                    }
                                }

                                if (num9 == -1)
                                {
                                    for (int index = 0; index < 200; ++index)
                                    {
                                        if (Main.npc[index].CanBeChasedBy((object) this, false))
                                        {
                                            float num10 =
                                                Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                                            float num11 =
                                                Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                                            float num12 = Math.Abs(this.position.X + (float) (this.width / 2) - num10) +
                                                          Math.Abs(this.position.Y + (float) (this.height / 2) - num11);
                                            if ((double) num12 < (double) num7)
                                            {
                                                if (num9 == -1 && (double) num12 <= (double) num8)
                                                {
                                                    num8 = num12;
                                                    num5 = num10;
                                                    num6 = num11;
                                                }

                                                if (Collision.CanHit(this.position, this.width, this.height,
                                                    Main.npc[index].position, Main.npc[index].width,
                                                    Main.npc[index].height))
                                                {
                                                    num7 = num12;
                                                    num5 = num10;
                                                    num6 = num11;
                                                    num9 = index;
                                                }
                                            }
                                        }
                                    }
                                }

                                if (num9 == -1 && (double) num8 < (double) num7)
                                    num7 = num8;
                                float num13 = 400f;
                                if ((double) this.position.Y > Main.worldSurface * 16.0)
                                    num13 = 200f;
                                if ((double) num7 < (double) num13 + (double) num2 && num9 == -1)
                                {
                                    float num10 = num5 - (this.position.X + (float) (this.width / 2));
                                    if ((double) num10 < -5.0)
                                    {
                                        flag1 = true;
                                        flag2 = false;
                                    }
                                    else if ((double) num10 > 5.0)
                                    {
                                        flag2 = true;
                                        flag1 = false;
                                    }
                                }
                                else if (num9 >= 0 && (double) num7 < 800.0 + (double) num2)
                                {
                                    this.localAI[0] = (float) num4;
                                    float num10 = num5 - (this.position.X + (float) (this.width / 2));
                                    if ((double) num10 > 300.0 || (double) num10 < -300.0)
                                    {
                                        if ((double) num10 < -50.0)
                                        {
                                            flag1 = true;
                                            flag2 = false;
                                        }
                                        else if ((double) num10 > 50.0)
                                        {
                                            flag2 = true;
                                            flag1 = false;
                                        }
                                    }
                                    else if (this.owner == Main.myPlayer)
                                    {
                                        this.ai[1] = (float) num3;
                                        float num11 = 12f;
                                        Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                                            (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0));
                                        float num12 = num5 - vector2.X + (float) Main.rand.Next(-20, 21);
                                        float num14 =
                                            (float) ((double) (Math.Abs(num12) * 0.1f) *
                                                     (double) Main.rand.Next(0, 100) * (1.0 / 1000.0));
                                        float num15 = num6 - vector2.Y + (float) Main.rand.Next(-20, 21) - num14;
                                        float num16 = (float) Math.Sqrt(
                                            (double) num12 * (double) num12 + (double) num15 * (double) num15);
                                        float num17 = num11 / num16;
                                        float SpeedX = num12 * num17;
                                        float SpeedY = num15 * num17;
                                        int damage = this.damage;
                                        int Type = 195;
                                        int index = Projectile.NewProjectile(vector2.X, vector2.Y, SpeedX, SpeedY, Type,
                                            damage, this.knockBack, Main.myPlayer, 0.0f, 0.0f);
                                        Main.projectile[index].timeLeft = 300;
                                        if ((double) SpeedX < 0.0)
                                            this.direction = -1;
                                        if ((double) SpeedX > 0.0)
                                            this.direction = 1;
                                        this.netUpdate = true;
                                    }
                                }
                            }
                        }

                        bool flag6 = false;
                        Vector2 vector2_1 = Vector2.Zero;
                        bool flag7 = false;
                        if (this.type == 266 || this.type >= 390 && this.type <= 392)
                        {
                            float num2 = (float) (40 * this.minionPos);
                            int num3 = 60;
                            --this.localAI[0];
                            if ((double) this.localAI[0] < 0.0)
                                this.localAI[0] = 0.0f;
                            if ((double) this.ai[1] > 0.0)
                            {
                                --this.ai[1];
                            }
                            else
                            {
                                float x1 = this.position.X;
                                float y1 = this.position.Y;
                                float num4 = 100000f;
                                float num5 = num4;
                                int index1 = -1;
                                NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
                                if (minionAttackTargetNpc != null &&
                                    minionAttackTargetNpc.CanBeChasedBy((object) this, false))
                                {
                                    float x2 = minionAttackTargetNpc.Center.X;
                                    float y2 = minionAttackTargetNpc.Center.Y;
                                    float num6 = Math.Abs(this.position.X + (float) (this.width / 2) - x2) +
                                                 Math.Abs(this.position.Y + (float) (this.height / 2) - y2);
                                    if ((double) num6 < (double) num4)
                                    {
                                        if (index1 == -1 && (double) num6 <= (double) num5)
                                        {
                                            num5 = num6;
                                            x1 = x2;
                                            y1 = y2;
                                        }

                                        if (Collision.CanHit(this.position, this.width, this.height,
                                            minionAttackTargetNpc.position, minionAttackTargetNpc.width,
                                            minionAttackTargetNpc.height))
                                        {
                                            num4 = num6;
                                            x1 = x2;
                                            y1 = y2;
                                            index1 = minionAttackTargetNpc.whoAmI;
                                        }
                                    }
                                }

                                if (index1 == -1)
                                {
                                    for (int index2 = 0; index2 < 200; ++index2)
                                    {
                                        if (Main.npc[index2].CanBeChasedBy((object) this, false))
                                        {
                                            float num6 = Main.npc[index2].position.X +
                                                         (float) (Main.npc[index2].width / 2);
                                            float num7 = Main.npc[index2].position.Y +
                                                         (float) (Main.npc[index2].height / 2);
                                            float num8 = Math.Abs(this.position.X + (float) (this.width / 2) - num6) +
                                                         Math.Abs(this.position.Y + (float) (this.height / 2) - num7);
                                            if ((double) num8 < (double) num4)
                                            {
                                                if (index1 == -1 && (double) num8 <= (double) num5)
                                                {
                                                    num5 = num8;
                                                    x1 = num6;
                                                    y1 = num7;
                                                }

                                                if (Collision.CanHit(this.position, this.width, this.height,
                                                    Main.npc[index2].position, Main.npc[index2].width,
                                                    Main.npc[index2].height))
                                                {
                                                    num4 = num8;
                                                    x1 = num6;
                                                    y1 = num7;
                                                    index1 = index2;
                                                }
                                            }
                                        }
                                    }
                                }

                                if (this.type >= 390 && this.type <= 392 &&
                                    !Collision.SolidCollision(this.position, this.width, this.height))
                                    this.tileCollide = true;
                                if (index1 == -1 && (double) num5 < (double) num4)
                                    num4 = num5;
                                else if (index1 >= 0)
                                {
                                    flag6 = true;
                                    vector2_1 = new Vector2(x1, y1) - this.Center;
                                    if (this.type >= 390 && this.type <= 392)
                                    {
                                        if ((double) Main.npc[index1].position.Y >
                                            (double) this.position.Y + (double) this.height)
                                        {
                                            int index2 = (int) ((double) this.Center.X / 16.0);
                                            int index3 =
                                                (int) (((double) this.position.Y + (double) this.height + 1.0) / 16.0);
                                            if (Main.tile[index2, index3] != null &&
                                                Main.tile[index2, index3].active() &&
                                                TileID.Sets.Platforms[(int) Main.tile[index2, index3].type])
                                                this.tileCollide = false;
                                        }

                                        Microsoft.Xna.Framework.Rectangle rectangle1 =
                                            new Microsoft.Xna.Framework.Rectangle((int) this.position.X,
                                                (int) this.position.Y, this.width, this.height);
                                        Microsoft.Xna.Framework.Rectangle rectangle2 =
                                            new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index1].position.X,
                                                (int) Main.npc[index1].position.Y, Main.npc[index1].width,
                                                Main.npc[index1].height);
                                        int num6 = 10;
                                        rectangle2.X -= num6;
                                        rectangle2.Y -= num6;
                                        rectangle2.Width += num6 * 2;
                                        rectangle2.Height += num6 * 2;
                                        if (rectangle1.Intersects(rectangle2))
                                        {
                                            flag7 = true;
                                            Vector2 v = Main.npc[index1].Center - this.Center;
                                            if ((double) this.velocity.Y > 0.0 && (double) v.Y < 0.0)
                                                this.velocity.Y *= 0.5f;
                                            if ((double) this.velocity.Y < 0.0 && (double) v.Y > 0.0)
                                                this.velocity.Y *= 0.5f;
                                            if ((double) this.velocity.X > 0.0 && (double) v.X < 0.0)
                                                this.velocity.X *= 0.5f;
                                            if ((double) this.velocity.X < 0.0 && (double) v.X > 0.0)
                                                this.velocity.X *= 0.5f;
                                            if ((double) v.Length() > 14.0)
                                            {
                                                v.Normalize();
                                                v *= 14f;
                                            }

                                            this.rotation =
                                                (float) (((double) this.rotation * 5.0 + (double) v.ToRotation() +
                                                          1.57079637050629) / 6.0);
                                            this.velocity = (this.velocity * 9f + v) / 10f;
                                            for (int index2 = 0; index2 < 1000; ++index2)
                                            {
                                                if (this.whoAmI != index2 &&
                                                    this.owner == Main.projectile[index2].owner &&
                                                    (Main.projectile[index2].type >= 390 &&
                                                     Main.projectile[index2].type <= 392) &&
                                                    (double) (Main.projectile[index2].Center - this.Center).Length() <
                                                    15.0)
                                                {
                                                    float num7 = 0.5f;
                                                    if ((double) this.Center.Y >
                                                        (double) Main.projectile[index2].Center.Y)
                                                    {
                                                        Main.projectile[index2].velocity.Y -= num7;
                                                        this.velocity.Y += num7;
                                                    }
                                                    else
                                                    {
                                                        Main.projectile[index2].velocity.Y += num7;
                                                        this.velocity.Y -= num7;
                                                    }

                                                    if ((double) this.Center.X >
                                                        (double) Main.projectile[index2].Center.X)
                                                    {
                                                        this.velocity.X += num7;
                                                        Main.projectile[index2].velocity.X -= num7;
                                                    }
                                                    else
                                                    {
                                                        this.velocity.X -= num7;
                                                        Main.projectile[index2].velocity.Y += num7;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                float num9 = 300f;
                                if ((double) this.position.Y > Main.worldSurface * 16.0)
                                    num9 = 150f;
                                if (this.type >= 390 && this.type <= 392)
                                {
                                    num9 = 500f;
                                    if ((double) this.position.Y > Main.worldSurface * 16.0)
                                        num9 = 250f;
                                }

                                if ((double) num4 < (double) num9 + (double) num2 && index1 == -1)
                                {
                                    float num6 = x1 - (this.position.X + (float) (this.width / 2));
                                    if ((double) num6 < -5.0)
                                    {
                                        flag1 = true;
                                        flag2 = false;
                                    }
                                    else if ((double) num6 > 5.0)
                                    {
                                        flag2 = true;
                                        flag1 = false;
                                    }
                                }

                                bool flag8 = false;
                                if (this.type >= 390 && this.type <= 392 && (double) this.localAI[1] > 0.0)
                                {
                                    flag8 = true;
                                    --this.localAI[1];
                                }

                                if (index1 >= 0 && (double) num4 < 800.0 + (double) num2)
                                {
                                    this.friendly = true;
                                    this.localAI[0] = (float) num3;
                                    float num6 = x1 - (this.position.X + (float) (this.width / 2));
                                    if ((double) num6 < -10.0)
                                    {
                                        flag1 = true;
                                        flag2 = false;
                                    }
                                    else if ((double) num6 > 10.0)
                                    {
                                        flag2 = true;
                                        flag1 = false;
                                    }

                                    if ((double) y1 < (double) this.Center.Y - 100.0 && (double) num6 > -50.0 &&
                                        ((double) num6 < 50.0 && (double) this.velocity.Y == 0.0))
                                    {
                                        float num7 = Math.Abs(y1 - this.Center.Y);
                                        if ((double) num7 < 120.0)
                                            this.velocity.Y = -10f;
                                        else if ((double) num7 < 210.0)
                                            this.velocity.Y = -13f;
                                        else if ((double) num7 < 270.0)
                                            this.velocity.Y = -15f;
                                        else if ((double) num7 < 310.0)
                                            this.velocity.Y = -17f;
                                        else if ((double) num7 < 380.0)
                                            this.velocity.Y = -18f;
                                    }

                                    if (flag8)
                                    {
                                        this.friendly = false;
                                        if ((double) this.velocity.X < 0.0)
                                            flag1 = true;
                                        else if ((double) this.velocity.X > 0.0)
                                            flag2 = true;
                                    }
                                }
                                else
                                    this.friendly = false;
                            }
                        }

                        if ((double) this.ai[1] != 0.0)
                        {
                            flag1 = false;
                            flag2 = false;
                        }
                        else if (flag5 && (double) this.localAI[0] == 0.0)
                            this.direction = Main.player[this.owner].direction;
                        else if (this.type >= 390 && this.type <= 392)
                        {
                            int index1 = (int) ((double) this.Center.X / 16.0);
                            int index2 = (int) ((double) this.Center.Y / 16.0);
                            if (Main.tile[index1, index2] != null && Main.tile[index1, index2].wall > (byte) 0)
                                flag1 = flag2 = false;
                        }

                        if (this.type == (int) sbyte.MaxValue)
                        {
                            if ((double) this.rotation > -0.1 && (double) this.rotation < 0.1)
                                this.rotation = 0.0f;
                            else if ((double) this.rotation < 0.0)
                                this.rotation += 0.1f;
                            else
                                this.rotation -= 0.1f;
                        }
                        else if (this.type != 313 && !flag7)
                            this.rotation = 0.0f;

                        if (this.type < 390 || this.type > 392)
                            this.tileCollide = true;
                        float num18 = 0.08f;
                        float num19 = 6.5f;
                        if (this.type == (int) sbyte.MaxValue)
                        {
                            num19 = 2f;
                            num18 = 0.04f;
                        }

                        if (this.type == 112)
                        {
                            num19 = 6f;
                            num18 = 0.06f;
                        }

                        if (this.type == 334)
                        {
                            num19 = 8f;
                            num18 = 0.08f;
                        }

                        if (this.type == 268)
                        {
                            num19 = 8f;
                            num18 = 0.4f;
                        }

                        if (this.type == 324)
                        {
                            num18 = 0.1f;
                            num19 = 3f;
                        }

                        if (flag5 || this.type == 266 || this.type >= 390 && this.type <= 392)
                        {
                            num19 = 6f;
                            num18 = 0.2f;
                            if ((double) num19 < (double) Math.Abs(Main.player[this.owner].velocity.X) +
                                (double) Math.Abs(Main.player[this.owner].velocity.Y))
                            {
                                num19 = Math.Abs(Main.player[this.owner].velocity.X) +
                                        Math.Abs(Main.player[this.owner].velocity.Y);
                                num18 = 0.3f;
                            }
                        }

                        if (this.type >= 390 && this.type <= 392)
                            num18 *= 2f;
                        if (flag1)
                        {
                            if ((double) this.velocity.X > -3.5)
                                this.velocity.X -= num18;
                            else
                                this.velocity.X -= num18 * 0.25f;
                        }
                        else if (flag2)
                        {
                            if ((double) this.velocity.X < 3.5)
                                this.velocity.X += num18;
                            else
                                this.velocity.X += num18 * 0.25f;
                        }
                        else
                        {
                            this.velocity.X *= 0.9f;
                            if ((double) this.velocity.X >= -(double) num18 &&
                                (double) this.velocity.X <= (double) num18)
                                this.velocity.X = 0.0f;
                        }

                        if (this.type == 208)
                        {
                            this.velocity.X *= 0.95f;
                            if ((double) this.velocity.X > -0.1 && (double) this.velocity.X < 0.1)
                                this.velocity.X = 0.0f;
                            flag1 = false;
                            flag2 = false;
                        }

                        if (flag1 || flag2)
                        {
                            int num2 = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
                            int j = (int) ((double) this.position.Y + (double) (this.height / 2)) / 16;
                            if (this.type == 236)
                                num2 += this.direction;
                            if (flag1)
                                --num2;
                            if (flag2)
                                ++num2;
                            if (WorldGen.SolidTile(num2 + (int) this.velocity.X, j))
                                flag4 = true;
                        }

                        if ((double) Main.player[this.owner].position.Y + (double) Main.player[this.owner].height -
                            8.0 > (double) this.position.Y + (double) this.height)
                            flag3 = true;
                        if (this.type == 268 && this.frameCounter < 10)
                            flag4 = false;
                        Collision.StepUp(ref this.position, ref this.velocity, this.width, this.height,
                            ref this.stepSpeed, ref this.gfxOffY, 1, false, 0);
                        if ((double) this.velocity.Y == 0.0 || this.type == 200)
                        {
                            if (!flag3 && ((double) this.velocity.X < 0.0 || (double) this.velocity.X > 0.0))
                            {
                                int i = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
                                int j = (int) ((double) this.position.Y + (double) (this.height / 2)) / 16 + 1;
                                if (flag1)
                                    --i;
                                if (flag2)
                                    ++i;
                                WorldGen.SolidTile(i, j);
                            }

                            if (flag4)
                            {
                                int i1 = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
                                int j = (int) ((double) this.position.Y + (double) this.height) / 16 + 1;
                                if (WorldGen.SolidTile(i1, j) || Main.tile[i1, j].halfBrick() ||
                                    (Main.tile[i1, j].slope() > (byte) 0 || this.type == 200))
                                {
                                    if (this.type == 200)
                                    {
                                        this.velocity.Y = -3.1f;
                                    }
                                    else
                                    {
                                        try
                                        {
                                            int num2 = (int) ((double) this.position.X + (double) (this.width / 2)) /
                                                       16;
                                            int num3 = (int) ((double) this.position.Y + (double) (this.height / 2)) /
                                                       16;
                                            if (flag1)
                                                --num2;
                                            if (flag2)
                                                ++num2;
                                            int i2 = num2 + (int) this.velocity.X;
                                            if (!WorldGen.SolidTile(i2, num3 - 1) && !WorldGen.SolidTile(i2, num3 - 2))
                                                this.velocity.Y = -5.1f;
                                            else if (!WorldGen.SolidTile(i2, num3 - 2))
                                                this.velocity.Y = -7.1f;
                                            else if (WorldGen.SolidTile(i2, num3 - 5))
                                                this.velocity.Y = -11.1f;
                                            else if (WorldGen.SolidTile(i2, num3 - 4))
                                                this.velocity.Y = -10.1f;
                                            else
                                                this.velocity.Y = -9.1f;
                                        }
                                        catch
                                        {
                                            this.velocity.Y = -9.1f;
                                        }
                                    }

                                    if (this.type == (int) sbyte.MaxValue)
                                        this.ai[0] = 1f;
                                }
                            }
                            else if (this.type == 266 && (flag1 || flag2))
                                this.velocity.Y -= 6f;
                        }

                        if ((double) this.velocity.X > (double) num19)
                            this.velocity.X = num19;
                        if ((double) this.velocity.X < -(double) num19)
                            this.velocity.X = -num19;
                        if ((double) this.velocity.X < 0.0)
                            this.direction = -1;
                        if ((double) this.velocity.X > 0.0)
                            this.direction = 1;
                        if ((double) this.velocity.X > (double) num18 && flag2)
                            this.direction = 1;
                        if ((double) this.velocity.X < -(double) num18 && flag1)
                            this.direction = -1;
                        if (this.type != 313)
                        {
                            if (this.direction == -1)
                                this.spriteDirection = 1;
                            if (this.direction == 1)
                                this.spriteDirection = -1;
                        }

                        if (this.type == 398)
                            this.spriteDirection = this.direction;
                        if (flag5)
                        {
                            if ((double) this.ai[1] > 0.0)
                            {
                                if ((double) this.localAI[1] == 0.0)
                                {
                                    this.localAI[1] = 1f;
                                    this.frame = 1;
                                }

                                if (this.frame != 0)
                                {
                                    ++this.frameCounter;
                                    if (this.frameCounter > 4)
                                    {
                                        ++this.frame;
                                        this.frameCounter = 0;
                                    }

                                    if (this.frame == 4)
                                        this.frame = 0;
                                }
                            }
                            else if ((double) this.velocity.Y == 0.0)
                            {
                                this.localAI[1] = 0.0f;
                                if ((double) this.velocity.X == 0.0)
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                                {
                                    this.frameCounter += (int) Math.Abs(this.velocity.X);
                                    ++this.frameCounter;
                                    if (this.frameCounter > 6)
                                    {
                                        ++this.frame;
                                        this.frameCounter = 0;
                                    }

                                    if (this.frame < 5)
                                        this.frame = 5;
                                    if (this.frame >= 11)
                                        this.frame = 5;
                                }
                                else
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                            }
                            else if ((double) this.velocity.Y < 0.0)
                            {
                                this.frameCounter = 0;
                                this.frame = 4;
                            }
                            else if ((double) this.velocity.Y > 0.0)
                            {
                                this.frameCounter = 0;
                                this.frame = 4;
                            }

                            this.velocity.Y += 0.4f;
                            if ((double) this.velocity.Y > 10.0)
                                this.velocity.Y = 10f;
                            double y = (double) this.velocity.Y;
                        }
                        else if (this.type == 268)
                        {
                            if ((double) this.velocity.Y == 0.0)
                            {
                                if (this.frame > 5)
                                    this.frameCounter = 0;
                                if ((double) this.velocity.X == 0.0)
                                {
                                    int num2 = 3;
                                    ++this.frameCounter;
                                    if (this.frameCounter < num2)
                                        this.frame = 0;
                                    else if (this.frameCounter < num2 * 2)
                                        this.frame = 1;
                                    else if (this.frameCounter < num2 * 3)
                                        this.frame = 2;
                                    else if (this.frameCounter < num2 * 4)
                                        this.frame = 3;
                                    else
                                        this.frameCounter = num2 * 4;
                                }
                                else
                                {
                                    this.velocity.X *= 0.8f;
                                    ++this.frameCounter;
                                    int num2 = 3;
                                    if (this.frameCounter < num2)
                                        this.frame = 0;
                                    else if (this.frameCounter < num2 * 2)
                                        this.frame = 1;
                                    else if (this.frameCounter < num2 * 3)
                                        this.frame = 2;
                                    else if (this.frameCounter < num2 * 4)
                                        this.frame = 3;
                                    else if (flag1 || flag2)
                                    {
                                        this.velocity.X *= 2f;
                                        this.frame = 4;
                                        this.velocity.Y = -6.1f;
                                        this.frameCounter = 0;
                                        for (int index1 = 0; index1 < 4; ++index1)
                                        {
                                            int index2 =
                                                Dust.NewDust(
                                                    new Vector2(this.position.X,
                                                        (float) ((double) this.position.Y + (double) this.height -
                                                                 2.0)), this.width, 4, 5, 0.0f, 0.0f, 0, new Color(),
                                                    1f);
                                            Main.dust[index2].velocity += this.velocity;
                                            Main.dust[index2].velocity *= 0.4f;
                                        }
                                    }
                                    else
                                        this.frameCounter = num2 * 4;
                                }
                            }
                            else if ((double) this.velocity.Y < 0.0)
                            {
                                this.frameCounter = 0;
                                this.frame = 5;
                            }
                            else
                            {
                                this.frame = 4;
                                this.frameCounter = 3;
                            }

                            this.velocity.Y += 0.4f;
                            if ((double) this.velocity.Y <= 10.0)
                                return;
                            this.velocity.Y = 10f;
                        }
                        else if (this.type == 269)
                        {
                            if ((double) this.velocity.Y >= 0.0 && (double) this.velocity.Y <= 0.8)
                            {
                                if ((double) this.velocity.X == 0.0)
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                                {
                                    int index = Dust.NewDust(
                                        new Vector2(this.position.X,
                                            (float) ((double) this.position.Y + (double) this.height - 2.0)),
                                        this.width, 6, 76, 0.0f, 0.0f, 0, new Color(), 1f);
                                    Main.dust[index].noGravity = true;
                                    Main.dust[index].velocity *= 0.3f;
                                    Main.dust[index].noLight = true;
                                    this.frameCounter += (int) Math.Abs(this.velocity.X);
                                    ++this.frameCounter;
                                    if (this.frameCounter > 6)
                                    {
                                        ++this.frame;
                                        this.frameCounter = 0;
                                    }

                                    if (this.frame > 3)
                                        this.frame = 0;
                                }
                                else
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                            }
                            else
                            {
                                this.frameCounter = 0;
                                this.frame = 2;
                            }

                            this.velocity.Y += 0.4f;
                            if ((double) this.velocity.Y <= 10.0)
                                return;
                            this.velocity.Y = 10f;
                        }
                        else if (this.type == 313)
                        {
                            int index1 = (int) ((double) this.Center.X / 16.0);
                            int index2 = (int) ((double) this.Center.Y / 16.0);
                            if (Main.tile[index1, index2] != null && Main.tile[index1, index2].wall > (byte) 0)
                            {
                                this.position.Y += (float) this.height;
                                this.height = 34;
                                this.position.Y -= (float) this.height;
                                this.position.X += (float) (this.width / 2);
                                this.width = 34;
                                this.position.X -= (float) (this.width / 2);
                                float num2 = 4f;
                                Vector2 vector2_2 = new Vector2(this.position.X + (float) this.width * 0.5f,
                                    this.position.Y + (float) this.height * 0.5f);
                                float num3 = Main.player[this.owner].Center.X - vector2_2.X;
                                float num4 = Main.player[this.owner].Center.Y - vector2_2.Y;
                                float num5 =
                                    (float) Math.Sqrt((double) num3 * (double) num3 + (double) num4 * (double) num4);
                                float num6 = num2 / num5;
                                float num7 = num3 * num6;
                                float num8 = num4 * num6;
                                if ((double) num5 < 120.0)
                                {
                                    this.velocity.X *= 0.9f;
                                    this.velocity.Y *= 0.9f;
                                    if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < 0.1)
                                    {
                                        Projectile projectile = this;
                                        projectile.velocity = projectile.velocity * 0.0f;
                                    }
                                }
                                else
                                {
                                    this.velocity.X = (float) (((double) this.velocity.X * 9.0 + (double) num7) / 10.0);
                                    this.velocity.Y = (float) (((double) this.velocity.Y * 9.0 + (double) num8) / 10.0);
                                }

                                if ((double) num5 >= 120.0)
                                {
                                    this.spriteDirection = this.direction;
                                    this.rotation = (float) Math.Atan2(
                                        (double) this.velocity.Y * (double) -this.direction,
                                        (double) this.velocity.X * (double) -this.direction);
                                }

                                this.frameCounter +=
                                    (int) ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y));
                                if (this.frameCounter > 6)
                                {
                                    ++this.frame;
                                    this.frameCounter = 0;
                                }

                                if (this.frame > 10)
                                    this.frame = 5;
                                if (this.frame >= 5)
                                    return;
                                this.frame = 10;
                            }
                            else
                            {
                                this.rotation = 0.0f;
                                if (this.direction == -1)
                                    this.spriteDirection = 1;
                                if (this.direction == 1)
                                    this.spriteDirection = -1;
                                this.position.Y += (float) this.height;
                                this.height = 30;
                                this.position.Y -= (float) this.height;
                                this.position.X += (float) (this.width / 2);
                                this.width = 30;
                                this.position.X -= (float) (this.width / 2);
                                if ((double) this.velocity.Y >= 0.0 && (double) this.velocity.Y <= 0.8)
                                {
                                    if ((double) this.velocity.X == 0.0)
                                    {
                                        this.frame = 0;
                                        this.frameCounter = 0;
                                    }
                                    else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                                    {
                                        this.frameCounter += (int) Math.Abs(this.velocity.X);
                                        ++this.frameCounter;
                                        if (this.frameCounter > 6)
                                        {
                                            ++this.frame;
                                            this.frameCounter = 0;
                                        }

                                        if (this.frame > 3)
                                            this.frame = 0;
                                    }
                                    else
                                    {
                                        this.frame = 0;
                                        this.frameCounter = 0;
                                    }
                                }
                                else
                                {
                                    this.frameCounter = 0;
                                    this.frame = 4;
                                }

                                this.velocity.Y += 0.4f;
                                if ((double) this.velocity.Y <= 10.0)
                                    return;
                                this.velocity.Y = 10f;
                            }
                        }
                        else if (this.type >= 390 && this.type <= 392)
                        {
                            int index1 = (int) ((double) this.Center.X / 16.0);
                            int index2 = (int) ((double) this.Center.Y / 16.0);
                            if (Main.tile[index1, index2] != null && Main.tile[index1, index2].wall > (byte) 0)
                            {
                                this.position.Y += (float) this.height;
                                this.height = 34;
                                this.position.Y -= (float) this.height;
                                this.position.X += (float) (this.width / 2);
                                this.width = 34;
                                this.position.X -= (float) (this.width / 2);
                                float num2 = 9f;
                                float num3 = (float) (40 * (this.minionPos + 1));
                                Vector2 v = Main.player[this.owner].Center - this.Center;
                                if (flag6)
                                {
                                    v = vector2_1;
                                    num3 = 10f;
                                }
                                else if (!Collision.CanHitLine(this.Center, 1, 1, Main.player[this.owner].Center, 1, 1))
                                    this.ai[0] = 1f;

                                if ((double) v.Length() < (double) num3)
                                {
                                    Projectile projectile1 = this;
                                    projectile1.velocity = projectile1.velocity * 0.9f;
                                    if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < 0.1)
                                    {
                                        Projectile projectile2 = this;
                                        projectile2.velocity = projectile2.velocity * 0.0f;
                                    }
                                }
                                else if ((double) v.Length() < 800.0 || !flag6)
                                    this.velocity = (this.velocity * 9f + Vector2.Normalize(v) * num2) / 10f;

                                if ((double) v.Length() >= (double) num3)
                                {
                                    this.spriteDirection = this.direction;
                                    this.rotation = this.velocity.ToRotation() + 1.570796f;
                                }
                                else
                                    this.rotation = v.ToRotation() + 1.570796f;

                                this.frameCounter +=
                                    (int) ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y));
                                if (this.frameCounter > 5)
                                {
                                    ++this.frame;
                                    this.frameCounter = 0;
                                }

                                if (this.frame > 7)
                                    this.frame = 4;
                                if (this.frame >= 4)
                                    return;
                                this.frame = 7;
                            }
                            else
                            {
                                if (!flag7)
                                    this.rotation = 0.0f;
                                if (this.direction == -1)
                                    this.spriteDirection = 1;
                                if (this.direction == 1)
                                    this.spriteDirection = -1;
                                this.position.Y += (float) this.height;
                                this.height = 30;
                                this.position.Y -= (float) this.height;
                                this.position.X += (float) (this.width / 2);
                                this.width = 30;
                                this.position.X -= (float) (this.width / 2);
                                if (!flag6 && !Collision.CanHitLine(this.Center, 1, 1, Main.player[this.owner].Center,
                                        1, 1))
                                    this.ai[0] = 1f;
                                if (!flag7 && this.frame >= 4 && this.frame <= 7)
                                {
                                    Vector2 vector2_2 = Main.player[this.owner].Center - this.Center;
                                    if (flag6)
                                        vector2_2 = vector2_1;
                                    float num2 = -vector2_2.Y;
                                    if ((double) vector2_2.Y <= 0.0)
                                    {
                                        if ((double) num2 < 120.0)
                                            this.velocity.Y = -10f;
                                        else if ((double) num2 < 210.0)
                                            this.velocity.Y = -13f;
                                        else if ((double) num2 < 270.0)
                                            this.velocity.Y = -15f;
                                        else if ((double) num2 < 310.0)
                                            this.velocity.Y = -17f;
                                        else if ((double) num2 < 380.0)
                                            this.velocity.Y = -18f;
                                    }
                                }

                                if (flag7)
                                {
                                    ++this.frameCounter;
                                    if (this.frameCounter > 3)
                                    {
                                        ++this.frame;
                                        this.frameCounter = 0;
                                    }

                                    if (this.frame >= 8)
                                        this.frame = 4;
                                    if (this.frame <= 3)
                                        this.frame = 7;
                                }
                                else if ((double) this.velocity.Y >= 0.0 && (double) this.velocity.Y <= 0.8)
                                {
                                    if ((double) this.velocity.X == 0.0)
                                    {
                                        this.frame = 0;
                                        this.frameCounter = 0;
                                    }
                                    else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                                    {
                                        this.frameCounter += (int) Math.Abs(this.velocity.X);
                                        ++this.frameCounter;
                                        if (this.frameCounter > 5)
                                        {
                                            ++this.frame;
                                            this.frameCounter = 0;
                                        }

                                        if (this.frame > 2)
                                            this.frame = 0;
                                    }
                                    else
                                    {
                                        this.frame = 0;
                                        this.frameCounter = 0;
                                    }
                                }
                                else
                                {
                                    this.frameCounter = 0;
                                    this.frame = 3;
                                }

                                this.velocity.Y += 0.4f;
                                if ((double) this.velocity.Y <= 10.0)
                                    return;
                                this.velocity.Y = 10f;
                            }
                        }
                        else if (this.type == 314)
                        {
                            if ((double) this.velocity.Y >= 0.0 && (double) this.velocity.Y <= 0.8)
                            {
                                if ((double) this.velocity.X == 0.0)
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                                {
                                    this.frameCounter += (int) Math.Abs(this.velocity.X);
                                    ++this.frameCounter;
                                    if (this.frameCounter > 6)
                                    {
                                        ++this.frame;
                                        this.frameCounter = 0;
                                    }

                                    if (this.frame > 6)
                                        this.frame = 1;
                                }
                                else
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                            }
                            else
                            {
                                this.frameCounter = 0;
                                this.frame = 7;
                            }

                            this.velocity.Y += 0.4f;
                            if ((double) this.velocity.Y <= 10.0)
                                return;
                            this.velocity.Y = 10f;
                        }
                        else if (this.type == 319)
                        {
                            if ((double) this.velocity.Y >= 0.0 && (double) this.velocity.Y <= 0.8)
                            {
                                if ((double) this.velocity.X == 0.0)
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                                {
                                    this.frameCounter += (int) Math.Abs(this.velocity.X);
                                    ++this.frameCounter;
                                    if (this.frameCounter > 8)
                                    {
                                        ++this.frame;
                                        this.frameCounter = 0;
                                    }

                                    if (this.frame > 5)
                                        this.frame = 2;
                                }
                                else
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                            }
                            else
                            {
                                this.frameCounter = 0;
                                this.frame = 1;
                            }

                            this.velocity.Y += 0.4f;
                            if ((double) this.velocity.Y <= 10.0)
                                return;
                            this.velocity.Y = 10f;
                        }
                        else if (this.type == 236)
                        {
                            if ((double) this.velocity.Y >= 0.0 && (double) this.velocity.Y <= 0.8)
                            {
                                if ((double) this.velocity.X == 0.0)
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                                {
                                    if (this.frame < 2)
                                        this.frame = 2;
                                    this.frameCounter += (int) Math.Abs(this.velocity.X);
                                    ++this.frameCounter;
                                    if (this.frameCounter > 6)
                                    {
                                        ++this.frame;
                                        this.frameCounter = 0;
                                    }

                                    if (this.frame > 8)
                                        this.frame = 2;
                                }
                                else
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                            }
                            else
                            {
                                this.frameCounter = 0;
                                this.frame = 1;
                            }

                            this.velocity.Y += 0.4f;
                            if ((double) this.velocity.Y <= 10.0)
                                return;
                            this.velocity.Y = 10f;
                        }
                        else if (this.type == 499)
                        {
                            if ((double) this.velocity.Y >= 0.0 && (double) this.velocity.Y <= 0.8)
                            {
                                if ((double) this.velocity.X == 0.0)
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                                {
                                    if (this.frame < 2)
                                        this.frame = 2;
                                    this.frameCounter += (int) Math.Abs(this.velocity.X);
                                    ++this.frameCounter;
                                    if (this.frameCounter > 6)
                                    {
                                        ++this.frame;
                                        this.frameCounter = 0;
                                    }

                                    if (this.frame >= 8)
                                        this.frame = 2;
                                }
                                else
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                            }
                            else
                            {
                                this.frameCounter = 0;
                                this.frame = 1;
                            }

                            this.velocity.Y += 0.4f;
                            if ((double) this.velocity.Y <= 10.0)
                                return;
                            this.velocity.Y = 10f;
                        }
                        else if (this.type == 266)
                        {
                            if ((double) this.velocity.Y >= 0.0 && (double) this.velocity.Y <= 0.8)
                            {
                                if ((double) this.velocity.X == 0.0)
                                    ++this.frameCounter;
                                else
                                    this.frameCounter += 3;
                            }
                            else
                                this.frameCounter += 5;

                            if (this.frameCounter >= 20)
                            {
                                this.frameCounter -= 20;
                                ++this.frame;
                            }

                            if (this.frame > 1)
                                this.frame = 0;
                            if (this.wet &&
                                (double) Main.player[this.owner].position.Y + (double) Main.player[this.owner].height <
                                (double) this.position.Y + (double) this.height && (double) this.localAI[0] == 0.0)
                            {
                                if ((double) this.velocity.Y > -4.0)
                                    this.velocity.Y -= 0.2f;
                                if ((double) this.velocity.Y > 0.0)
                                    this.velocity.Y *= 0.95f;
                            }
                            else
                                this.velocity.Y += 0.4f;

                            if ((double) this.velocity.Y <= 10.0)
                                return;
                            this.velocity.Y = 10f;
                        }
                        else if (this.type == 334)
                        {
                            if ((double) this.velocity.Y == 0.0)
                            {
                                if ((double) this.velocity.X == 0.0)
                                {
                                    if (this.frame > 0)
                                    {
                                        this.frameCounter += 2;
                                        if (this.frameCounter > 6)
                                        {
                                            ++this.frame;
                                            this.frameCounter = 0;
                                        }

                                        if (this.frame >= 7)
                                            this.frame = 0;
                                    }
                                    else
                                    {
                                        this.frame = 0;
                                        this.frameCounter = 0;
                                    }
                                }
                                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                                {
                                    this.frameCounter += (int) Math.Abs((double) this.velocity.X * 0.75);
                                    ++this.frameCounter;
                                    if (this.frameCounter > 6)
                                    {
                                        ++this.frame;
                                        this.frameCounter = 0;
                                    }

                                    if (this.frame >= 7 || this.frame < 1)
                                        this.frame = 1;
                                }
                                else if (this.frame > 0)
                                {
                                    this.frameCounter += 2;
                                    if (this.frameCounter > 6)
                                    {
                                        ++this.frame;
                                        this.frameCounter = 0;
                                    }

                                    if (this.frame >= 7)
                                        this.frame = 0;
                                }
                                else
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                            }
                            else if ((double) this.velocity.Y < 0.0)
                            {
                                this.frameCounter = 0;
                                this.frame = 2;
                            }
                            else if ((double) this.velocity.Y > 0.0)
                            {
                                this.frameCounter = 0;
                                this.frame = 4;
                            }

                            this.velocity.Y += 0.4f;
                            if ((double) this.velocity.Y <= 10.0)
                                return;
                            this.velocity.Y = 10f;
                        }
                        else if (this.type == 353)
                        {
                            if ((double) this.velocity.Y == 0.0)
                            {
                                if ((double) this.velocity.X == 0.0)
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                                {
                                    this.frameCounter += (int) Math.Abs(this.velocity.X);
                                    ++this.frameCounter;
                                    if (this.frameCounter > 6)
                                    {
                                        ++this.frame;
                                        this.frameCounter = 0;
                                    }

                                    if (this.frame > 9)
                                        this.frame = 2;
                                }
                                else
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                            }
                            else if ((double) this.velocity.Y < 0.0)
                            {
                                this.frameCounter = 0;
                                this.frame = 1;
                            }
                            else if ((double) this.velocity.Y > 0.0)
                            {
                                this.frameCounter = 0;
                                this.frame = 1;
                            }

                            this.velocity.Y += 0.4f;
                            if ((double) this.velocity.Y <= 10.0)
                                return;
                            this.velocity.Y = 10f;
                        }
                        else if (this.type == 111)
                        {
                            if ((double) this.velocity.Y == 0.0)
                            {
                                if ((double) this.velocity.X == 0.0)
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                                {
                                    this.frameCounter += (int) Math.Abs(this.velocity.X);
                                    ++this.frameCounter;
                                    if (this.frameCounter > 6)
                                    {
                                        ++this.frame;
                                        this.frameCounter = 0;
                                    }

                                    if (this.frame >= 7)
                                        this.frame = 0;
                                }
                                else
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                            }
                            else if ((double) this.velocity.Y < 0.0)
                            {
                                this.frameCounter = 0;
                                this.frame = 4;
                            }
                            else if ((double) this.velocity.Y > 0.0)
                            {
                                this.frameCounter = 0;
                                this.frame = 6;
                            }

                            this.velocity.Y += 0.4f;
                            if ((double) this.velocity.Y <= 10.0)
                                return;
                            this.velocity.Y = 10f;
                        }
                        else if (this.type == 112)
                        {
                            if ((double) this.velocity.Y == 0.0)
                            {
                                if ((double) this.velocity.X == 0.0)
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                                {
                                    this.frameCounter += (int) Math.Abs(this.velocity.X);
                                    ++this.frameCounter;
                                    if (this.frameCounter > 6)
                                    {
                                        ++this.frame;
                                        this.frameCounter = 0;
                                    }

                                    if (this.frame >= 3)
                                        this.frame = 0;
                                }
                                else
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                            }
                            else if ((double) this.velocity.Y < 0.0)
                            {
                                this.frameCounter = 0;
                                this.frame = 2;
                            }
                            else if ((double) this.velocity.Y > 0.0)
                            {
                                this.frameCounter = 0;
                                this.frame = 2;
                            }

                            this.velocity.Y += 0.4f;
                            if ((double) this.velocity.Y <= 10.0)
                                return;
                            this.velocity.Y = 10f;
                        }
                        else if (this.type == (int) sbyte.MaxValue)
                        {
                            if ((double) this.velocity.Y == 0.0)
                            {
                                if ((double) this.velocity.X == 0.0)
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                                else if ((double) this.velocity.X < -0.1 || (double) this.velocity.X > 0.1)
                                {
                                    this.frameCounter += (int) Math.Abs(this.velocity.X);
                                    ++this.frameCounter;
                                    if (this.frameCounter > 6)
                                    {
                                        ++this.frame;
                                        this.frameCounter = 0;
                                    }

                                    if (this.frame > 5)
                                        this.frame = 0;
                                }
                                else
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                            }
                            else
                            {
                                this.frame = 0;
                                this.frameCounter = 0;
                            }

                            this.velocity.Y += 0.4f;
                            if ((double) this.velocity.Y <= 10.0)
                                return;
                            this.velocity.Y = 10f;
                        }
                        else if (this.type == 200)
                        {
                            if ((double) this.velocity.Y == 0.0)
                            {
                                if ((double) this.velocity.X == 0.0)
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                                else if ((double) this.velocity.X < -0.1 || (double) this.velocity.X > 0.1)
                                {
                                    this.frameCounter += (int) Math.Abs(this.velocity.X);
                                    ++this.frameCounter;
                                    if (this.frameCounter > 6)
                                    {
                                        ++this.frame;
                                        this.frameCounter = 0;
                                    }

                                    if (this.frame > 5)
                                        this.frame = 0;
                                }
                                else
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                            }
                            else
                            {
                                this.rotation = this.velocity.X * 0.1f;
                                ++this.frameCounter;
                                if ((double) this.velocity.Y < 0.0)
                                    this.frameCounter += 2;
                                if (this.frameCounter > 6)
                                {
                                    ++this.frame;
                                    this.frameCounter = 0;
                                }

                                if (this.frame > 9)
                                    this.frame = 6;
                                if (this.frame < 6)
                                    this.frame = 6;
                            }

                            this.velocity.Y += 0.1f;
                            if ((double) this.velocity.Y <= 4.0)
                                return;
                            this.velocity.Y = 4f;
                        }
                        else if (this.type == 208)
                        {
                            if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X == 0.0)
                            {
                                if ((double) Main.player[this.owner].position.X +
                                    (double) (Main.player[this.owner].width / 2) <
                                    (double) this.position.X + (double) (this.width / 2))
                                    this.direction = -1;
                                else if ((double) Main.player[this.owner].position.X +
                                         (double) (Main.player[this.owner].width / 2) >
                                         (double) this.position.X + (double) (this.width / 2))
                                    this.direction = 1;
                                this.rotation = 0.0f;
                                this.frame = 0;
                            }
                            else
                            {
                                this.rotation = this.velocity.X * 0.075f;
                                ++this.frameCounter;
                                if (this.frameCounter > 6)
                                {
                                    ++this.frame;
                                    this.frameCounter = 0;
                                }

                                if (this.frame > 4)
                                    this.frame = 1;
                                if (this.frame < 1)
                                    this.frame = 1;
                            }

                            this.velocity.Y += 0.1f;
                            if ((double) this.velocity.Y <= 4.0)
                                return;
                            this.velocity.Y = 4f;
                        }
                        else if (this.type == 209)
                        {
                            if (this.alpha > 0)
                            {
                                this.alpha -= 5;
                                if (this.alpha < 0)
                                    this.alpha = 0;
                            }

                            if ((double) this.velocity.Y == 0.0)
                            {
                                if ((double) this.velocity.X == 0.0)
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                                else if ((double) this.velocity.X < -0.1 || (double) this.velocity.X > 0.1)
                                {
                                    this.frameCounter += (int) Math.Abs(this.velocity.X);
                                    ++this.frameCounter;
                                    if (this.frameCounter > 6)
                                    {
                                        ++this.frame;
                                        this.frameCounter = 0;
                                    }

                                    if (this.frame > 11)
                                        this.frame = 2;
                                    if (this.frame < 2)
                                        this.frame = 2;
                                }
                                else
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                            }
                            else
                            {
                                this.frame = 1;
                                this.frameCounter = 0;
                                this.rotation = 0.0f;
                            }

                            this.velocity.Y += 0.4f;
                            if ((double) this.velocity.Y <= 10.0)
                                return;
                            this.velocity.Y = 10f;
                        }
                        else if (this.type == 324)
                        {
                            if ((double) this.velocity.Y == 0.0)
                            {
                                if ((double) this.velocity.X < -0.1 || (double) this.velocity.X > 0.1)
                                {
                                    this.frameCounter += (int) Math.Abs(this.velocity.X);
                                    ++this.frameCounter;
                                    if (this.frameCounter > 6)
                                    {
                                        ++this.frame;
                                        this.frameCounter = 0;
                                    }

                                    if (this.frame > 5)
                                        this.frame = 2;
                                    if (this.frame < 2)
                                        this.frame = 2;
                                }
                                else
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                            }
                            else
                            {
                                this.frameCounter = 0;
                                this.frame = 1;
                            }

                            this.velocity.Y += 0.4f;
                            if ((double) this.velocity.Y <= 14.0)
                                return;
                            this.velocity.Y = 14f;
                        }
                        else if (this.type == 210)
                        {
                            if ((double) this.velocity.Y == 0.0)
                            {
                                if ((double) this.velocity.X < -0.1 || (double) this.velocity.X > 0.1)
                                {
                                    this.frameCounter += (int) Math.Abs(this.velocity.X);
                                    ++this.frameCounter;
                                    if (this.frameCounter > 6)
                                    {
                                        ++this.frame;
                                        this.frameCounter = 0;
                                    }

                                    if (this.frame > 6)
                                        this.frame = 0;
                                }
                                else
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                            }
                            else
                            {
                                this.rotation = this.velocity.X * 0.05f;
                                ++this.frameCounter;
                                if (this.frameCounter > 6)
                                {
                                    ++this.frame;
                                    this.frameCounter = 0;
                                }

                                if (this.frame > 11)
                                    this.frame = 7;
                                if (this.frame < 7)
                                    this.frame = 7;
                            }

                            this.velocity.Y += 0.4f;
                            if ((double) this.velocity.Y <= 10.0)
                                return;
                            this.velocity.Y = 10f;
                        }
                        else
                        {
                            if (this.type != 398)
                                return;
                            if ((double) this.velocity.Y == 0.0)
                            {
                                if ((double) this.velocity.X == 0.0)
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                                {
                                    this.frameCounter += (int) Math.Abs(this.velocity.X);
                                    ++this.frameCounter;
                                    if (this.frameCounter > 6)
                                    {
                                        ++this.frame;
                                        this.frameCounter = 0;
                                    }

                                    if (this.frame >= 5)
                                        this.frame = 0;
                                }
                                else
                                {
                                    this.frame = 0;
                                    this.frameCounter = 0;
                                }
                            }
                            else if ((double) this.velocity.Y != 0.0)
                            {
                                this.frameCounter = 0;
                                this.frame = 5;
                            }

                            this.velocity.Y += 0.4f;
                            if ((double) this.velocity.Y <= 10.0)
                                return;
                            this.velocity.Y = 10f;
                        }
                    }
                }
            }
        }

        private void AI_062()
        {
            if (this.type == 373)
            {
                if (Main.player[this.owner].dead)
                    Main.player[this.owner].hornetMinion = false;
                if (Main.player[this.owner].hornetMinion)
                    this.timeLeft = 2;
            }

            if (this.type == 375)
            {
                if (Main.player[this.owner].dead)
                    Main.player[this.owner].impMinion = false;
                if (Main.player[this.owner].impMinion)
                    this.timeLeft = 2;
            }

            if (this.type == 407)
            {
                if (Main.player[this.owner].dead)
                    Main.player[this.owner].sharknadoMinion = false;
                if (Main.player[this.owner].sharknadoMinion)
                    this.timeLeft = 2;
            }

            if (this.type == 423)
            {
                if (Main.player[this.owner].dead)
                    Main.player[this.owner].UFOMinion = false;
                if (Main.player[this.owner].UFOMinion)
                    this.timeLeft = 2;
            }

            if (this.type == 613)
            {
                if (Main.player[this.owner].dead)
                    Main.player[this.owner].stardustMinion = false;
                if (Main.player[this.owner].stardustMinion)
                    this.timeLeft = 2;
                Lighting.AddLight(this.Center, 0.2f, 0.6f, 0.7f);
                if ((double) this.localAI[1] > 0.0)
                    --this.localAI[1];
            }

            if (this.type == 423)
            {
                if ((double) this.ai[0] == 2.0)
                {
                    --this.ai[1];
                    this.tileCollide = false;
                    if ((double) this.ai[1] > 3.0)
                    {
                        int index = Dust.NewDust(this.Center, 0, 0, 220 + Main.rand.Next(2), this.velocity.X,
                            this.velocity.Y, 100, new Color(), 1f);
                        Main.dust[index].scale = (float) (0.5 + Main.rand.NextDouble() * 0.300000011920929);
                        Main.dust[index].velocity /= 2.5f;
                        Main.dust[index].noGravity = true;
                        Main.dust[index].noLight = true;
                        Main.dust[index].frame.Y = 80;
                    }

                    if ((double) this.ai[1] != 0.0)
                        return;
                    this.ai[1] = 30f;
                    this.ai[0] = 0.0f;
                    Projectile projectile = this;
                    projectile.velocity = projectile.velocity / 5f;
                    this.velocity.Y = 0.0f;
                    this.extraUpdates = 0;
                    this.numUpdates = 0;
                    this.netUpdate = true;
                    this.extraUpdates = 0;
                    this.numUpdates = 0;
                }

                if (this.extraUpdates > 1)
                    this.extraUpdates = 0;
                if (this.numUpdates > 1)
                    this.numUpdates = 0;
            }

            if (this.type == 613)
            {
                if ((double) this.ai[0] == 2.0)
                {
                    --this.ai[1];
                    this.tileCollide = false;
                    if ((double) this.ai[1] > 3.0)
                    {
                        if (this.numUpdates < 20)
                        {
                            for (int index = 0; index < 3; ++index)
                            {
                                Dust dust = Main.dust[
                                    Dust.NewDust(this.position, this.width, this.height, 229, 0.0f, 0.0f, 0,
                                        new Color(), 1f)];
                                dust.noGravity = true;
                                dust.position = this.Center;
                                dust.velocity *= 3f;
                                dust.velocity += this.velocity * 3f;
                                dust.fadeIn = 1f;
                            }
                        }

                        float num1 = (float) (2.0 - (double) this.numUpdates / 30.0);
                        if ((double) this.scale > 0.0)
                        {
                            float num2 = 2f;
                            for (int index = 0; (double) index < (double) num2; ++index)
                            {
                                Dust dust = Main.dust[
                                    Dust.NewDust(this.position, this.width, this.height, 229, 0.0f, 0.0f, 0,
                                        new Color(), 1f)];
                                dust.noGravity = true;
                                dust.position = this.Center +
                                                Vector2.UnitY.RotatedBy(
                                                    (double) this.numUpdates * 0.104719758033752 +
                                                    (double) this.whoAmI * 0.785398185253143 + 1.57079637050629,
                                                    new Vector2()) * (float) (this.height / 2) -
                                                this.velocity * ((float) index / num2);
                                dust.velocity = this.velocity / 3f;
                                dust.fadeIn = num1 / 2f;
                                dust.scale = num1;
                            }
                        }
                    }

                    if ((double) this.ai[1] != 0.0)
                        return;
                    this.ai[1] = 30f;
                    this.ai[0] = 0.0f;
                    Projectile projectile = this;
                    projectile.velocity = projectile.velocity / 5f;
                    this.velocity.Y = 0.0f;
                    this.extraUpdates = 0;
                    this.numUpdates = 0;
                    this.netUpdate = true;
                    float num = 15f;
                    for (int index = 0; (double) index < (double) num; ++index)
                    {
                        Dust dust = Main.dust[
                            Dust.NewDust(this.position, this.width, this.height, 229, 0.0f, 0.0f, 0, new Color(), 1f)];
                        dust.noGravity = true;
                        dust.position = this.Center - this.velocity * 5f;
                        dust.velocity *= 3f;
                        dust.velocity += this.velocity * 3f;
                        dust.fadeIn = 1f;
                        if (Main.rand.Next(3) != 0)
                        {
                            dust.fadeIn = 2f;
                            dust.scale = 2f;
                            dust.velocity /= 8f;
                        }
                    }

                    for (int index = 0; (double) index < (double) num; ++index)
                    {
                        Dust dust = Main.dust[
                            Dust.NewDust(this.position, this.width, this.height, 229, 0.0f, 0.0f, 0, new Color(), 1f)];
                        dust.noGravity = true;
                        dust.position = this.Center;
                        dust.velocity *= 3f;
                        dust.velocity += this.velocity * 3f;
                        dust.fadeIn = 1f;
                        if (Main.rand.Next(3) != 0)
                        {
                            dust.fadeIn = 2f;
                            dust.scale = 2f;
                            dust.velocity /= 8f;
                        }
                    }

                    this.extraUpdates = 0;
                    this.numUpdates = 0;
                }

                if (this.extraUpdates > 1)
                    this.extraUpdates = 0;
                if (this.numUpdates > 1)
                    this.numUpdates = 0;
            }

            if (this.type == 423 && (double) this.localAI[0] > 0.0)
                --this.localAI[0];
            if (this.type == 613 && (double) this.localAI[0] > 0.0)
                --this.localAI[0];
            float num3 = 0.05f;
            float width = (float) this.width;
            if (this.type == 407)
            {
                num3 = 0.1f;
                width *= 2f;
            }

            for (int index = 0; index < 1000; ++index)
            {
                if (index != this.whoAmI && Main.projectile[index].active &&
                    (Main.projectile[index].owner == this.owner && Main.projectile[index].type == this.type) &&
                    (double) Math.Abs(this.position.X - Main.projectile[index].position.X) +
                    (double) Math.Abs(this.position.Y - Main.projectile[index].position.Y) < (double) width)
                {
                    if ((double) this.position.X < (double) Main.projectile[index].position.X)
                        this.velocity.X -= num3;
                    else
                        this.velocity.X += num3;
                    if ((double) this.position.Y < (double) Main.projectile[index].position.Y)
                        this.velocity.Y -= num3;
                    else
                        this.velocity.Y += num3;
                }
            }

            Vector2 vector2_1 = this.position;
            float num4 = 400f;
            if (this.type == 423)
                num4 = 300f;
            if (this.type == 613)
                num4 = 300f;
            bool flag = false;
            int num5 = -1;
            this.tileCollide = true;
            if (this.type == 407)
            {
                this.tileCollide = false;
                if (Collision.SolidCollision(this.position, this.width, this.height))
                {
                    this.alpha += 20;
                    if (this.alpha > 150)
                        this.alpha = 150;
                }
                else
                {
                    this.alpha -= 50;
                    if (this.alpha < 60)
                        this.alpha = 60;
                }
            }

            if (this.type == 407 || this.type == 613 || this.type == 423)
            {
                Vector2 center = Main.player[this.owner].Center;
                Vector2 vector2_2 = new Vector2(0.5f);
                if (this.type == 423)
                    vector2_2.Y = 0.0f;
                NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
                if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this, false))
                {
                    Vector2 vector2_3 = minionAttackTargetNpc.position + minionAttackTargetNpc.Size * vector2_2;
                    float num1 = Vector2.Distance(vector2_3, center);
                    if (((double) Vector2.Distance(center, vector2_1) > (double) num1 &&
                         (double) num1 < (double) num4 || !flag) && Collision.CanHitLine(this.position, this.width,
                            this.height, minionAttackTargetNpc.position, minionAttackTargetNpc.width,
                            minionAttackTargetNpc.height))
                    {
                        num4 = num1;
                        vector2_1 = vector2_3;
                        flag = true;
                        num5 = minionAttackTargetNpc.whoAmI;
                    }
                }

                if (!flag)
                {
                    for (int index = 0; index < 200; ++index)
                    {
                        NPC npc = Main.npc[index];
                        if (npc.CanBeChasedBy((object) this, false))
                        {
                            Vector2 vector2_3 = npc.position + npc.Size * vector2_2;
                            float num1 = Vector2.Distance(vector2_3, center);
                            if (((double) Vector2.Distance(center, vector2_1) > (double) num1 &&
                                 (double) num1 < (double) num4 || !flag) && Collision.CanHitLine(this.position,
                                    this.width, this.height, npc.position, npc.width, npc.height))
                            {
                                num4 = num1;
                                vector2_1 = vector2_3;
                                flag = true;
                                num5 = index;
                            }
                        }
                    }
                }
            }
            else
            {
                NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
                if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this, false))
                {
                    float num1 = Vector2.Distance(minionAttackTargetNpc.Center, this.Center);
                    if (((double) Vector2.Distance(this.Center, vector2_1) > (double) num1 &&
                         (double) num1 < (double) num4 || !flag) && Collision.CanHitLine(this.position, this.width,
                            this.height, minionAttackTargetNpc.position, minionAttackTargetNpc.width,
                            minionAttackTargetNpc.height))
                    {
                        num4 = num1;
                        vector2_1 = minionAttackTargetNpc.Center;
                        flag = true;
                        num5 = minionAttackTargetNpc.whoAmI;
                    }
                }

                if (!flag)
                {
                    for (int index = 0; index < 200; ++index)
                    {
                        NPC npc = Main.npc[index];
                        if (npc.CanBeChasedBy((object) this, false))
                        {
                            float num1 = Vector2.Distance(npc.Center, this.Center);
                            if (((double) Vector2.Distance(this.Center, vector2_1) > (double) num1 &&
                                 (double) num1 < (double) num4 || !flag) && Collision.CanHitLine(this.position,
                                    this.width, this.height, npc.position, npc.width, npc.height))
                            {
                                num4 = num1;
                                vector2_1 = npc.Center;
                                flag = true;
                                num5 = index;
                            }
                        }
                    }
                }
            }

            int num6 = 500;
            if (flag)
                num6 = 1000;
            if (flag && this.type == 423)
                num6 = 1200;
            if (flag && this.type == 613)
                num6 = 1350;
            Player player = Main.player[this.owner];
            if ((double) Vector2.Distance(player.Center, this.Center) > (double) num6)
            {
                this.ai[0] = 1f;
                this.netUpdate = true;
            }

            if ((double) this.ai[0] == 1.0)
                this.tileCollide = false;
            if (flag && (double) this.ai[0] == 0.0)
            {
                Vector2 vector2_2 = vector2_1 - this.Center;
                float num1 = vector2_2.Length();
                vector2_2.Normalize();
                if (this.type == 423)
                {
                    Vector2 vector2_3 = vector2_1 - Vector2.UnitY * 80f;
                    int index = (int) vector2_3.Y / 16;
                    if (index < 0)
                        index = 0;
                    Tile tile1 = Main.tile[(int) vector2_3.X / 16, index];
                    if (tile1 != null && tile1.active() &&
                        (Main.tileSolid[(int) tile1.type] && !Main.tileSolidTop[(int) tile1.type]))
                    {
                        vector2_3 += Vector2.UnitY * 16f;
                        Tile tile2 = Main.tile[(int) vector2_3.X / 16, (int) vector2_3.Y / 16];
                        if (tile2 != null && tile2.active() &&
                            (Main.tileSolid[(int) tile2.type] && !Main.tileSolidTop[(int) tile2.type]))
                            vector2_3 += Vector2.UnitY * 16f;
                    }

                    vector2_2 = vector2_3 - this.Center;
                    num1 = vector2_2.Length();
                    vector2_2.Normalize();
                    if ((double) num1 > 300.0 && (double) num1 <= 800.0 && (double) this.localAI[0] == 0.0)
                    {
                        this.ai[0] = 2f;
                        this.ai[1] = (float) (int) ((double) num1 / 10.0);
                        this.extraUpdates = (int) this.ai[1];
                        this.velocity = vector2_2 * 10f;
                        this.localAI[0] = 60f;
                        return;
                    }
                }

                if (this.type == 613)
                {
                    Vector2 vector2_3 = vector2_1;
                    Vector2 vector2_4 = this.Center - vector2_3;
                    if (vector2_4 == Vector2.Zero)
                        vector2_4 = -Vector2.UnitY;
                    vector2_4.Normalize();
                    Vector2 vector2_5 = vector2_3 + vector2_4 * 60f;
                    int index = (int) vector2_5.Y / 16;
                    if (index < 0)
                        index = 0;
                    Tile tile1 = Main.tile[(int) vector2_5.X / 16, index];
                    if (tile1 != null && tile1.active() &&
                        (Main.tileSolid[(int) tile1.type] && !Main.tileSolidTop[(int) tile1.type]))
                    {
                        vector2_5 += Vector2.UnitY * 16f;
                        Tile tile2 = Main.tile[(int) vector2_5.X / 16, (int) vector2_5.Y / 16];
                        if (tile2 != null && tile2.active() &&
                            (Main.tileSolid[(int) tile2.type] && !Main.tileSolidTop[(int) tile2.type]))
                            vector2_5 += Vector2.UnitY * 16f;
                    }

                    vector2_2 = vector2_5 - this.Center;
                    num1 = vector2_2.Length();
                    vector2_2.Normalize();
                    if ((double) num1 > 400.0 && (double) num1 <= 800.0 && (double) this.localAI[0] == 0.0)
                    {
                        this.ai[0] = 2f;
                        this.ai[1] = (float) (int) ((double) num1 / 10.0);
                        this.extraUpdates = (int) this.ai[1];
                        this.velocity = vector2_2 * 10f;
                        this.localAI[0] = 60f;
                        return;
                    }
                }

                if (this.type == 407)
                {
                    if ((double) num1 > 400.0)
                    {
                        float num2 = 2f;
                        vector2_2 *= num2;
                        this.velocity = (this.velocity * 20f + vector2_2) / 21f;
                    }
                    else
                    {
                        Projectile projectile = this;
                        projectile.velocity = projectile.velocity * 0.96f;
                    }
                }

                if ((double) num1 > 200.0)
                {
                    float num2 = 6f;
                    Vector2 vector2_3 = vector2_2 * num2;
                    this.velocity.X = (float) (((double) this.velocity.X * 40.0 + (double) vector2_3.X) / 41.0);
                    this.velocity.Y = (float) (((double) this.velocity.Y * 40.0 + (double) vector2_3.Y) / 41.0);
                }
                else if (this.type == 423 || this.type == 613)
                {
                    if ((double) num1 > 70.0 && (double) num1 < 130.0)
                    {
                        float num2 = 7f;
                        if ((double) num1 < 100.0)
                            num2 = -3f;
                        Vector2 vector2_3 = vector2_2 * num2;
                        this.velocity = (this.velocity * 20f + vector2_3) / 21f;
                        if ((double) Math.Abs(vector2_3.X) > (double) Math.Abs(vector2_3.Y))
                            this.velocity.X = (float) (((double) this.velocity.X * 10.0 + (double) vector2_3.X) / 11.0);
                    }
                    else
                    {
                        Projectile projectile = this;
                        projectile.velocity = projectile.velocity * 0.97f;
                    }
                }
                else if (this.type == 375)
                {
                    if ((double) num1 < 150.0)
                    {
                        float num2 = 4f;
                        Vector2 vector2_3 = vector2_2 * -num2;
                        this.velocity.X = (float) (((double) this.velocity.X * 40.0 + (double) vector2_3.X) / 41.0);
                        this.velocity.Y = (float) (((double) this.velocity.Y * 40.0 + (double) vector2_3.Y) / 41.0);
                    }
                    else
                    {
                        Projectile projectile = this;
                        projectile.velocity = projectile.velocity * 0.97f;
                    }
                }
                else if ((double) this.velocity.Y > -1.0)
                    this.velocity.Y -= 0.1f;
            }
            else
            {
                if (!Collision.CanHitLine(this.Center, 1, 1, Main.player[this.owner].Center, 1, 1))
                    this.ai[0] = 1f;
                float num1 = 6f;
                if ((double) this.ai[0] == 1.0)
                    num1 = 15f;
                if (this.type == 407)
                    num1 = 9f;
                Vector2 center = this.Center;
                Vector2 vector2_2 = player.Center - center + new Vector2(0.0f, -60f);
                if (this.type == 407)
                    vector2_2 += new Vector2(0.0f, 40f);
                if (this.type == 375)
                {
                    this.ai[1] = 3600f;
                    this.netUpdate = true;
                    vector2_2 = player.Center - center;
                    int num2 = 1;
                    for (int index = 0; index < this.whoAmI; ++index)
                    {
                        if (Main.projectile[index].active && Main.projectile[index].owner == this.owner &&
                            Main.projectile[index].type == this.type)
                            ++num2;
                    }

                    vector2_2.X -= (float) (10 * Main.player[this.owner].direction);
                    vector2_2.X -= (float) (num2 * 40 * Main.player[this.owner].direction);
                    vector2_2.Y -= 10f;
                }

                float num7 = vector2_2.Length();
                if ((double) num7 > 200.0 && (double) num1 < 9.0)
                    num1 = 9f;
                if (this.type == 375)
                    num1 = (float) (int) ((double) num1 * 0.75);
                if ((double) num7 < 100.0 && (double) this.ai[0] == 1.0 &&
                    !Collision.SolidCollision(this.position, this.width, this.height))
                {
                    this.ai[0] = 0.0f;
                    this.netUpdate = true;
                }

                if ((double) num7 > 2000.0)
                {
                    this.position.X = Main.player[this.owner].Center.X - (float) (this.width / 2);
                    this.position.Y = Main.player[this.owner].Center.Y - (float) (this.width / 2);
                }

                if (this.type == 375)
                {
                    if ((double) num7 > 10.0)
                    {
                        vector2_2.Normalize();
                        if ((double) num7 < 50.0)
                            num1 /= 2f;
                        vector2_2 *= num1;
                        this.velocity = (this.velocity * 20f + vector2_2) / 21f;
                    }
                    else
                    {
                        this.direction = Main.player[this.owner].direction;
                        Projectile projectile = this;
                        projectile.velocity = projectile.velocity * 0.9f;
                    }
                }
                else if (this.type == 407)
                {
                    if ((double) Math.Abs(vector2_2.X) > 40.0 || (double) Math.Abs(vector2_2.Y) > 10.0)
                    {
                        vector2_2.Normalize();
                        vector2_2 *= num1;
                        vector2_2 *= new Vector2(1.25f, 0.65f);
                        this.velocity = (this.velocity * 20f + vector2_2) / 21f;
                    }
                    else
                    {
                        if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
                        {
                            this.velocity.X = -0.15f;
                            this.velocity.Y = -0.05f;
                        }

                        Projectile projectile = this;
                        projectile.velocity = projectile.velocity * 1.01f;
                    }
                }
                else if ((double) num7 > 70.0)
                {
                    vector2_2.Normalize();
                    vector2_2 *= num1;
                    this.velocity = (this.velocity * 20f + vector2_2) / 21f;
                }
                else
                {
                    if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
                    {
                        this.velocity.X = -0.15f;
                        this.velocity.Y = -0.05f;
                    }

                    Projectile projectile = this;
                    projectile.velocity = projectile.velocity * 1.01f;
                }
            }

            this.rotation = this.velocity.X * 0.05f;
            ++this.frameCounter;
            if (this.type == 373)
            {
                if (this.frameCounter > 1)
                {
                    ++this.frame;
                    this.frameCounter = 0;
                }

                if (this.frame > 2)
                    this.frame = 0;
            }

            if (this.type == 375)
            {
                if (this.frameCounter >= 16)
                    this.frameCounter = 0;
                this.frame = this.frameCounter / 4;
                if ((double) this.ai[1] > 0.0 && (double) this.ai[1] < 16.0)
                    this.frame += 4;
                if (Main.rand.Next(6) == 0)
                {
                    int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                        0.0f, 0.0f, 100, new Color(), 2f);
                    Main.dust[index].velocity *= 0.3f;
                    Main.dust[index].noGravity = true;
                    Main.dust[index].noLight = true;
                }
            }

            if (this.type == 407)
            {
                int num1 = 2;
                if (this.frameCounter >= 6 * num1)
                    this.frameCounter = 0;
                this.frame = this.frameCounter / num1;
                if (Main.rand.Next(5) == 0)
                {
                    int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        217, 0.0f, 0.0f, 100, new Color(), 2f);
                    Main.dust[index].velocity *= 0.3f;
                    Main.dust[index].noGravity = true;
                    Main.dust[index].noLight = true;
                }
            }

            if (this.type == 423 || this.type == 613)
            {
                int num1 = 3;
                if (this.frameCounter >= 4 * num1)
                    this.frameCounter = 0;
                this.frame = this.frameCounter / num1;
            }

            if ((double) this.velocity.X > 0.0)
                this.spriteDirection = this.direction = -1;
            else if ((double) this.velocity.X < 0.0)
                this.spriteDirection = this.direction = 1;
            if (this.type == 373)
            {
                if ((double) this.ai[1] > 0.0)
                    this.ai[1] += (float) Main.rand.Next(1, 4);
                if ((double) this.ai[1] > 90.0)
                {
                    this.ai[1] = 0.0f;
                    this.netUpdate = true;
                }
            }
            else if (this.type == 375)
            {
                if ((double) this.ai[1] > 0.0)
                {
                    ++this.ai[1];
                    if (Main.rand.Next(3) == 0)
                        ++this.ai[1];
                }

                if ((double) this.ai[1] > (double) Main.rand.Next(180, 900))
                {
                    this.ai[1] = 0.0f;
                    this.netUpdate = true;
                }
            }
            else if (this.type == 407)
            {
                if ((double) this.ai[1] > 0.0)
                {
                    ++this.ai[1];
                    if (Main.rand.Next(3) != 0)
                        ++this.ai[1];
                }

                if ((double) this.ai[1] > 60.0)
                {
                    this.ai[1] = 0.0f;
                    this.netUpdate = true;
                }
            }
            else if (this.type == 423)
            {
                if ((double) this.ai[1] > 0.0)
                {
                    ++this.ai[1];
                    if (Main.rand.Next(3) != 0)
                        ++this.ai[1];
                }

                if ((double) this.ai[1] > 30.0)
                {
                    this.ai[1] = 0.0f;
                    this.netUpdate = true;
                }
            }
            else if (this.type == 613)
            {
                if ((double) this.ai[1] > 0.0)
                {
                    ++this.ai[1];
                    if (Main.rand.Next(3) != 0)
                        ++this.ai[1];
                }

                if ((double) this.ai[1] > 60.0)
                {
                    this.ai[1] = 0.0f;
                    this.netUpdate = true;
                }
            }

            if ((double) this.ai[0] != 0.0)
                return;
            float num8 = 0.0f;
            int Type = 0;
            if (this.type == 373)
            {
                num8 = 10f;
                Type = 374;
            }
            else if (this.type == 375)
            {
                num8 = 11f;
                Type = 376;
            }
            else if (this.type == 407)
            {
                num8 = 14f;
                Type = 408;
            }
            else if (this.type == 423)
            {
                num8 = 4f;
                Type = 433;
            }
            else if (this.type == 613)
            {
                num8 = 14f;
                Type = 614;
            }

            if (!flag)
                return;
            if (this.type == 375)
            {
                if ((double) (vector2_1 - this.Center).X > 0.0)
                    this.spriteDirection = this.direction = -1;
                else if ((double) (vector2_1 - this.Center).X < 0.0)
                    this.spriteDirection = this.direction = 1;
            }

            if (this.type == 407 && Collision.SolidCollision(this.position, this.width, this.height))
                return;
            if (this.type == 423)
            {
                if ((double) Math.Abs((vector2_1 - this.Center).ToRotation() - 1.570796f) > 0.785398185253143)
                {
                    Projectile projectile = this;
                    projectile.velocity = projectile.velocity +
                                          Vector2.Normalize(vector2_1 - this.Center - Vector2.UnitY * 80f);
                }
                else
                {
                    if ((double) (vector2_1 - this.Center).Length() > 400.0 || (double) this.ai[1] != 0.0)
                        return;
                    ++this.ai[1];
                    if (Main.myPlayer != this.owner)
                        return;
                    Vector2 vector2_2 = vector2_1 - this.Center;
                    vector2_2.Normalize();
                    Vector2 vector2_3 = vector2_2 * num8;
                    Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_3.X, vector2_3.Y, Type, this.damage,
                        0.0f, Main.myPlayer, 0.0f, 0.0f);
                    this.netUpdate = true;
                }
            }
            else if ((double) this.ai[1] == 0.0 && this.type == 613)
            {
                if ((double) (vector2_1 - this.Center).Length() > 500.0 || (double) this.ai[1] != 0.0)
                    return;
                ++this.ai[1];
                if (Main.myPlayer == this.owner)
                {
                    Vector2 vector2_2 = vector2_1 - this.Center;
                    vector2_2.Normalize();
                    Vector2 vector2_3 = vector2_2 * num8;
                    int index = Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_3.X, vector2_3.Y, Type,
                        this.damage, 0.0f, Main.myPlayer, 0.0f, (float) num5);
                    Main.projectile[index].timeLeft = 300;
                    Main.projectile[index].netUpdate = true;
                    Projectile projectile = this;
                    projectile.velocity = projectile.velocity - vector2_3 / 3f;
                    this.netUpdate = true;
                }

                for (int index1 = 0; index1 < 5; ++index1)
                {
                    int num1 = this.width / 4;
                    Vector2 vector2_2 = ((float) Main.rand.NextDouble() * 6.283185f).ToRotationVector2() *
                                        (float) Main.rand.Next(24, 41) / 8f;
                    int index2 = Dust.NewDust(this.Center - Vector2.One * (float) num1, num1 * 2, num1 * 2, 88, 0.0f,
                        0.0f, 0, new Color(), 1f);
                    Dust dust = Main.dust[index2];
                    Vector2 vector2_3 = Vector2.Normalize(dust.position - this.Center);
                    dust.position = this.Center + vector2_3 * (float) num1 * this.scale - new Vector2(4f);
                    dust.velocity = index1 >= 30
                        ? 2f * vector2_3 * (float) Main.rand.Next(45, 91) / 10f
                        : vector2_3 * dust.velocity.Length() * 2f;
                    dust.noGravity = true;
                    dust.scale = 0.7f + Main.rand.NextFloat();
                }
            }
            else
            {
                if ((double) this.ai[1] != 0.0)
                    return;
                ++this.ai[1];
                if (Main.myPlayer != this.owner)
                    return;
                Vector2 vector2_2 = vector2_1 - this.Center;
                vector2_2.Normalize();
                Vector2 vector2_3 = vector2_2 * num8;
                int index = Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_3.X, vector2_3.Y, Type,
                    this.damage, 0.0f, Main.myPlayer, 0.0f, 0.0f);
                Main.projectile[index].timeLeft = 300;
                Main.projectile[index].netUpdate = true;
                this.netUpdate = true;
            }
        }

        private void AI_075()
        {
            Player player = Main.player[this.owner];
            float num1 = 1.570796f;
            Vector2 vector2_1 = player.RotatedRelativePoint(player.MountedCenter, true);
            if (this.type == 439)
            {
                ++this.ai[0];
                int num2 = 0;
                if ((double) this.ai[0] >= 40.0)
                    ++num2;
                if ((double) this.ai[0] >= 80.0)
                    ++num2;
                if ((double) this.ai[0] >= 120.0)
                    ++num2;
                int num3 = 24;
                int num4 = 6;
                ++this.ai[1];
                bool flag = false;
                if ((double) this.ai[1] >= (double) (num3 - num4 * num2))
                {
                    this.ai[1] = 0.0f;
                    flag = true;
                }

                this.frameCounter += 1 + num2;
                if (this.frameCounter >= 4)
                {
                    this.frameCounter = 0;
                    ++this.frame;
                    if (this.frame >= 6)
                        this.frame = 0;
                }

                if (this.soundDelay <= 0)
                {
                    this.soundDelay = num3 - num4 * num2;
                    if ((double) this.ai[0] != 1.0)
                        Main.PlaySound(SoundID.Item91, this.position);
                }

                if ((double) this.ai[1] == 1.0 && (double) this.ai[0] != 1.0)
                {
                    Vector2 vector2_2 = this.Center +
                                        (Vector2.UnitX * 24f).RotatedBy((double) this.rotation - 1.57079637050629,
                                            new Vector2());
                    for (int index1 = 0; index1 < 2; ++index1)
                    {
                        int index2 = Dust.NewDust(vector2_2 - Vector2.One * 8f, 16, 16, 135, this.velocity.X / 2f,
                            this.velocity.Y / 2f, 100, new Color(), 1f);
                        Main.dust[index2].velocity *= 0.66f;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].scale = 1.4f;
                    }
                }

                if (flag && Main.myPlayer == this.owner)
                {
                    if (player.channel && player.CheckMana(player.inventory[player.selectedItem].mana, true, false) &&
                        !player.noItems && !player.CCed)
                    {
                        float num5 = player.inventory[player.selectedItem].shootSpeed * this.scale;
                        Vector2 vector2_2 = vector2_1;
                        Vector2 vector2_3 = Main.screenPosition +
                                            new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_2;
                        if ((double) player.gravDir == -1.0)
                            vector2_3.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y -
                                          vector2_2.Y;
                        Vector2 vector2_4 = Vector2.Normalize(vector2_3);
                        if (float.IsNaN(vector2_4.X) || float.IsNaN(vector2_4.Y))
                            vector2_4 = -Vector2.UnitY;
                        vector2_4 *= num5;
                        if ((double) vector2_4.X != (double) this.velocity.X ||
                            (double) vector2_4.Y != (double) this.velocity.Y)
                            this.netUpdate = true;
                        this.velocity = vector2_4;
                        int Type = 440;
                        float num6 = 14f;
                        int num7 = 7;
                        for (int index = 0; index < 2; ++index)
                        {
                            Vector2 vector2_5 = this.Center + new Vector2((float) Main.rand.Next(-num7, num7 + 1),
                                                    (float) Main.rand.Next(-num7, num7 + 1));
                            Vector2 spinningpoint = Vector2.Normalize(this.velocity) * num6;
                            spinningpoint = spinningpoint.RotatedBy(
                                Main.rand.NextDouble() * 0.196349546313286 - 0.0981747731566429, new Vector2());
                            if (float.IsNaN(spinningpoint.X) || float.IsNaN(spinningpoint.Y))
                                spinningpoint = -Vector2.UnitY;
                            Projectile.NewProjectile(vector2_5.X, vector2_5.Y, spinningpoint.X, spinningpoint.Y, Type,
                                this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
                        }
                    }
                    else
                        this.Kill();
                }
            }

            if (this.type == 445)
            {
                ++this.localAI[0];
                if ((double) this.localAI[0] >= 60.0)
                    this.localAI[0] = 0.0f;
                if ((double) Vector2.Distance(vector2_1, this.Center) >= 5.0)
                {
                    float num2 = this.localAI[0] / 60f;
                    if ((double) num2 > 0.5)
                        num2 = 1f - num2;
                    Vector3 vector3 = Vector3.Lerp(new Vector3(0.0f, 1f, 0.7f), new Vector3(0.0f, 0.7f, 1f),
                                          (float) (1.0 - (double) num2 * 2.0)) * 0.5f;
                    if ((double) Vector2.Distance(vector2_1, this.Center) >= 30.0)
                    {
                        Vector2 vector2_2 = this.Center - vector2_1;
                        vector2_2.Normalize();
                        Vector2 vector2_3 = vector2_2 * (Vector2.Distance(vector2_1, this.Center) - 30f);
                        DelegateMethods.v3_1 = vector3 * 0.8f;
                        Utils.PlotTileLine(this.Center - vector2_3, this.Center, 8f,
                            new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
                    }

                    Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, vector3.X, vector3.Y,
                        vector3.Z);
                }

                if (Main.myPlayer == this.owner)
                {
                    if ((double) this.localAI[1] > 0.0)
                        --this.localAI[1];
                    if (!player.channel || player.noItems || player.CCed)
                        this.Kill();
                    else if ((double) this.localAI[1] == 0.0)
                    {
                        Vector2 vector2_2 = vector2_1;
                        Vector2 vector2_3 = Main.screenPosition +
                                            new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_2;
                        if ((double) player.gravDir == -1.0)
                            vector2_3.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y -
                                          vector2_2.Y;
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].active())
                        {
                            vector2_3 = new Vector2((float) Player.tileTargetX, (float) Player.tileTargetY) * 16f +
                                        Vector2.One * 8f - vector2_2;
                            this.localAI[1] = 2f;
                        }

                        Vector2 vector2_4 = Vector2.Lerp(vector2_3, this.velocity, 0.7f);
                        if (float.IsNaN(vector2_4.X) || float.IsNaN(vector2_4.Y))
                            vector2_4 = -Vector2.UnitY;
                        float num2 = 30f;
                        if ((double) vector2_4.Length() < (double) num2)
                            vector2_4 = Vector2.Normalize(vector2_4) * num2;
                        int tileBoost = player.inventory[player.selectedItem].tileBoost;
                        int num3 = -Player.tileRangeX - tileBoost + 1;
                        int num4 = Player.tileRangeX + tileBoost - 1;
                        int num5 = -Player.tileRangeY - tileBoost;
                        int num6 = Player.tileRangeY + tileBoost - 1;
                        int num7 = 12;
                        bool flag = false;
                        if ((double) vector2_4.X < (double) (num3 * 16 - num7))
                            flag = true;
                        if ((double) vector2_4.Y < (double) (num5 * 16 - num7))
                            flag = true;
                        if ((double) vector2_4.X > (double) (num4 * 16 + num7))
                            flag = true;
                        if ((double) vector2_4.Y > (double) (num6 * 16 + num7))
                            flag = true;
                        if (flag)
                        {
                            Vector2 vector2_5 = Vector2.Normalize(vector2_4);
                            float num8 = -1f;
                            if ((double) vector2_5.X < 0.0 &&
                                ((double) (num3 * 16 - num7) / (double) vector2_5.X < (double) num8 ||
                                 (double) num8 == -1.0))
                                num8 = (float) (num3 * 16 - num7) / vector2_5.X;
                            if ((double) vector2_5.X > 0.0 &&
                                ((double) (num4 * 16 + num7) / (double) vector2_5.X < (double) num8 ||
                                 (double) num8 == -1.0))
                                num8 = (float) (num4 * 16 + num7) / vector2_5.X;
                            if ((double) vector2_5.Y < 0.0 &&
                                ((double) (num5 * 16 - num7) / (double) vector2_5.Y < (double) num8 ||
                                 (double) num8 == -1.0))
                                num8 = (float) (num5 * 16 - num7) / vector2_5.Y;
                            if ((double) vector2_5.Y > 0.0 &&
                                ((double) (num6 * 16 + num7) / (double) vector2_5.Y < (double) num8 ||
                                 (double) num8 == -1.0))
                                num8 = (float) (num6 * 16 + num7) / vector2_5.Y;
                            vector2_4 = vector2_5 * num8;
                        }

                        if ((double) vector2_4.X != (double) this.velocity.X ||
                            (double) vector2_4.Y != (double) this.velocity.Y)
                            this.netUpdate = true;
                        this.velocity = vector2_4;
                    }
                }
            }

            if (this.type == 460)
            {
                ++this.ai[0];
                int num2 = 0;
                if ((double) this.ai[0] >= 60.0)
                    ++num2;
                if ((double) this.ai[0] >= 180.0)
                    ++num2;
                bool flag1 = false;
                if ((double) this.ai[0] == 60.0 || (double) this.ai[0] == 180.0 ||
                    (double) this.ai[0] > 180.0 && (double) this.ai[0] % 20.0 == 0.0)
                    flag1 = true;
                bool flag2 = (double) this.ai[0] >= 180.0;
                int num3 = 10;
                if (!flag2)
                    ++this.ai[1];
                bool flag3 = false;
                if (flag2 && (double) this.ai[0] % 20.0 == 0.0)
                    flag3 = true;
                if ((double) this.ai[1] >= (double) num3 && !flag2)
                {
                    this.ai[1] = 0.0f;
                    flag3 = true;
                    if (!flag2)
                    {
                        float num4 = player.inventory[player.selectedItem].shootSpeed * this.scale;
                        Vector2 vector2_2 = vector2_1;
                        Vector2 vector2_3 = Main.screenPosition +
                                            new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_2;
                        if ((double) player.gravDir == -1.0)
                            vector2_3.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y -
                                          vector2_2.Y;
                        Vector2 vector2_4 = Vector2.Normalize(vector2_3);
                        if (float.IsNaN(vector2_4.X) || float.IsNaN(vector2_4.Y))
                            vector2_4 = -Vector2.UnitY;
                        vector2_4 *= num4;
                        if ((double) vector2_4.X != (double) this.velocity.X ||
                            (double) vector2_4.Y != (double) this.velocity.Y)
                            this.netUpdate = true;
                        this.velocity = vector2_4;
                    }
                }

                if (this.soundDelay <= 0 && !flag2)
                {
                    this.soundDelay = num3 - num2;
                    this.soundDelay *= 2;
                    if ((double) this.ai[0] != 1.0)
                        Main.PlaySound(SoundID.Item15, this.position);
                }

                if ((double) this.ai[0] > 10.0 && !flag2)
                {
                    Vector2 vector2_2 = this.Center +
                                        (Vector2.UnitX * 18f).RotatedBy((double) this.rotation - 1.57079637050629,
                                            new Vector2());
                    for (int index1 = 0; index1 < num2 + 1; ++index1)
                    {
                        int Type = 226;
                        float num4 = 0.4f;
                        if (index1 % 2 == 1)
                        {
                            Type = 226;
                            num4 = 0.65f;
                        }

                        Vector2 vector2_3 =
                            vector2_2 + ((float) Main.rand.NextDouble() * 6.283185f).ToRotationVector2() *
                            (12f - (float) (num2 * 2));
                        int index2 = Dust.NewDust(vector2_3 - Vector2.One * 8f, 16, 16, Type, this.velocity.X / 2f,
                            this.velocity.Y / 2f, 0, new Color(), 1f);
                        Main.dust[index2].velocity = Vector2.Normalize(vector2_2 - vector2_3) * 1.5f *
                                                     (float) (10.0 - (double) num2 * 2.0) / 10f;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].scale = num4;
                        Main.dust[index2].customData = (object) player;
                    }
                }

                if (flag3 && Main.myPlayer == this.owner)
                {
                    bool flag4 = !flag1 || player.CheckMana(player.inventory[player.selectedItem].mana, true, false);
                    if (player.channel && flag4 && !player.noItems && !player.CCed)
                    {
                        if ((double) this.ai[0] == 180.0)
                        {
                            Vector2 center = this.Center;
                            Vector2 vector2_2 = Vector2.Normalize(this.velocity);
                            if (float.IsNaN(vector2_2.X) || float.IsNaN(vector2_2.Y))
                                vector2_2 = -Vector2.UnitY;
                            int Damage = (int) ((double) this.damage * 3.0);
                            this.ai[1] = (float) Projectile.NewProjectile(center.X, center.Y, vector2_2.X, vector2_2.Y,
                                461, Damage, this.knockBack, this.owner, 0.0f, (float) this.whoAmI);
                            this.netUpdate = true;
                        }
                        else if (flag2)
                        {
                            Projectile projectile = Main.projectile[(int) this.ai[1]];
                            if (!projectile.active || projectile.type != 461)
                            {
                                this.Kill();
                                return;
                            }
                        }
                    }
                    else
                    {
                        if (!flag2)
                        {
                            int Type = 459;
                            float num4 = 10f;
                            Vector2 center = this.Center;
                            Vector2 vector2_2 = Vector2.Normalize(this.velocity) * num4;
                            if (float.IsNaN(vector2_2.X) || float.IsNaN(vector2_2.Y))
                                vector2_2 = -Vector2.UnitY;
                            float ai1 = (float) (0.699999988079071 + (double) num2 * 0.300000011920929);
                            int Damage = (double) ai1 < 1.0 ? this.damage : (int) ((double) this.damage * 2.0);
                            Projectile.NewProjectile(center.X, center.Y, vector2_2.X, vector2_2.Y, Type, Damage,
                                this.knockBack, this.owner, 0.0f, ai1);
                        }

                        this.Kill();
                    }
                }
            }

            if (this.type == 633)
            {
                float num2 = 30f;
                if ((double) this.ai[0] > 90.0)
                    num2 = 15f;
                if ((double) this.ai[0] > 120.0)
                    num2 = 5f;
                this.damage =
                    (int) ((double) player.inventory[player.selectedItem].damage * (double) player.magicDamage);
                ++this.ai[0];
                ++this.ai[1];
                bool flag1 = false;
                if ((double) this.ai[0] % (double) num2 == 0.0)
                    flag1 = true;
                int num3 = 10;
                bool flag2 = false;
                if ((double) this.ai[0] % (double) num2 == 0.0)
                    flag2 = true;
                if ((double) this.ai[1] >= 1.0)
                {
                    this.ai[1] = 0.0f;
                    flag2 = true;
                    if (Main.myPlayer == this.owner)
                    {
                        float num4 = player.inventory[player.selectedItem].shootSpeed * this.scale;
                        Vector2 vector2_2 = vector2_1;
                        Vector2 vector2_3 = Main.screenPosition +
                                            new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_2;
                        if ((double) player.gravDir == -1.0)
                            vector2_3.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y -
                                          vector2_2.Y;
                        Vector2 vector2_4 = Vector2.Normalize(vector2_3);
                        if (float.IsNaN(vector2_4.X) || float.IsNaN(vector2_4.Y))
                            vector2_4 = -Vector2.UnitY;
                        vector2_4 = Vector2.Normalize(Vector2.Lerp(vector2_4, Vector2.Normalize(this.velocity), 0.92f));
                        vector2_4 *= num4;
                        if ((double) vector2_4.X != (double) this.velocity.X ||
                            (double) vector2_4.Y != (double) this.velocity.Y)
                            this.netUpdate = true;
                        this.velocity = vector2_4;
                    }
                }

                ++this.frameCounter;
                if (this.frameCounter >= ((double) this.ai[0] < 120.0 ? 4 : 1))
                {
                    this.frameCounter = 0;
                    if (++this.frame >= 5)
                        this.frame = 0;
                }

                if (this.soundDelay <= 0)
                {
                    this.soundDelay = num3;
                    this.soundDelay *= 2;
                    if ((double) this.ai[0] != 1.0)
                        Main.PlaySound(SoundID.Item15, this.position);
                }

                if (flag2 && Main.myPlayer == this.owner)
                {
                    bool flag3 = !flag1 || player.CheckMana(player.inventory[player.selectedItem].mana, true, false);
                    if (player.channel && flag3 && !player.noItems && !player.CCed)
                    {
                        if ((double) this.ai[0] == 1.0)
                        {
                            Vector2 center = this.Center;
                            Vector2 vector2_2 = Vector2.Normalize(this.velocity);
                            if (float.IsNaN(vector2_2.X) || float.IsNaN(vector2_2.Y))
                                vector2_2 = -Vector2.UnitY;
                            int damage = this.damage;
                            for (int index = 0; index < 6; ++index)
                                Projectile.NewProjectile(center.X, center.Y, vector2_2.X, vector2_2.Y, 632, damage,
                                    this.knockBack, this.owner, (float) index, (float) this.whoAmI);
                            this.netUpdate = true;
                        }
                    }
                    else
                        this.Kill();
                }
            }

            if (this.type == 595)
            {
                num1 = 0.0f;
                if (this.spriteDirection == -1)
                    num1 = 3.141593f;
                if (++this.frame >= Main.projFrames[this.type])
                    this.frame = 0;
                --this.soundDelay;
                if (this.soundDelay <= 0)
                {
                    Main.PlaySound(SoundID.Item1, this.Center);
                    this.soundDelay = 12;
                }

                if (Main.myPlayer == this.owner)
                {
                    if (player.channel && !player.noItems && !player.CCed)
                    {
                        float num2 = 1f;
                        if (player.inventory[player.selectedItem].shoot == this.type)
                            num2 = player.inventory[player.selectedItem].shootSpeed * this.scale;
                        Vector2 vec = Main.MouseWorld - vector2_1;
                        vec.Normalize();
                        if (vec.HasNaNs())
                            vec = Vector2.UnitX * (float) player.direction;
                        vec *= num2;
                        if ((double) vec.X != (double) this.velocity.X || (double) vec.Y != (double) this.velocity.Y)
                            this.netUpdate = true;
                        this.velocity = vec;
                    }
                    else
                        this.Kill();
                }

                Vector2 position = this.Center + this.velocity * 3f;
                Lighting.AddLight(position, 0.8f, 0.8f, 0.8f);
                if (Main.rand.Next(3) == 0)
                {
                    int index = Dust.NewDust(position - this.Size / 2f, this.width, this.height, 63, this.velocity.X,
                        this.velocity.Y, 100, new Color(), 2f);
                    Main.dust[index].noGravity = true;
                    Main.dust[index].position -= this.velocity;
                }
            }

            if (this.type == 600)
            {
                if ((double) this.ai[0] == 0.0)
                {
                    if ((double) this.ai[1] != 0.0)
                        Main.PlaySound(SoundID.Item114, this.position);
                    else
                        Main.PlaySound(SoundID.Item115, this.position);
                }

                ++this.ai[0];
                if (Main.myPlayer == this.owner && (double) this.ai[0] == 1.0)
                {
                    float num2 = player.inventory[player.selectedItem].shootSpeed * this.scale;
                    Vector2 vector2_2 = vector2_1;
                    Vector2 vector2_3 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) -
                                        vector2_2;
                    if ((double) player.gravDir == -1.0)
                        vector2_3.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector2_2.Y;
                    Vector2 vector2_4 = Vector2.Normalize(vector2_3);
                    if (float.IsNaN(vector2_4.X) || float.IsNaN(vector2_4.Y))
                        vector2_4 = -Vector2.UnitY;
                    vector2_4 *= num2;
                    if ((double) vector2_4.X != (double) this.velocity.X ||
                        (double) vector2_4.Y != (double) this.velocity.Y)
                        this.netUpdate = true;
                    this.velocity = vector2_4;
                    int Type = 601;
                    float num3 = 3f;
                    Vector2 center = this.Center;
                    Vector2 vector2_5 = Vector2.Normalize(this.velocity) * num3;
                    if (float.IsNaN(vector2_5.X) || float.IsNaN(vector2_5.Y))
                        vector2_5 = -Vector2.UnitY;
                    Projectile.NewProjectile(center.X, center.Y, vector2_5.X, vector2_5.Y, Type, this.damage,
                        this.knockBack, this.owner, this.ai[1], 0.0f);
                }

                if ((double) this.ai[0] >= 30.0)
                    this.Kill();
            }

            if (this.type == 611)
            {
                if ((double) this.localAI[1] > 0.0)
                    --this.localAI[1];
                this.alpha -= 42;
                if (this.alpha < 0)
                    this.alpha = 0;
                if ((double) this.localAI[0] == 0.0)
                    this.localAI[0] = this.velocity.ToRotation();
                float num2 = (double) this.localAI[0].ToRotationVector2().X >= 0.0 ? 1f : -1f;
                if ((double) this.ai[1] <= 0.0)
                    num2 *= -1f;
                Vector2 rotationVector2 =
                    (num2 * (float) ((double) this.ai[0] / 30.0 * 6.28318548202515 - 1.57079637050629))
                    .ToRotationVector2();
                rotationVector2.Y *= (float) Math.Sin((double) this.ai[1]);
                if ((double) this.ai[1] <= 0.0)
                    rotationVector2.Y *= -1f;
                Vector2 vector2_2 = rotationVector2.RotatedBy((double) this.localAI[0], new Vector2());
                ++this.ai[0];
                if ((double) this.ai[0] < 30.0)
                {
                    Projectile projectile = this;
                    projectile.velocity = projectile.velocity + 48f * vector2_2;
                }
                else
                    this.Kill();
            }

            if (this.type == 615)
            {
                num1 = 0.0f;
                if (this.spriteDirection == -1)
                    num1 = 3.141593f;
                ++this.ai[0];
                int num2 = 0;
                if ((double) this.ai[0] >= 40.0)
                    ++num2;
                if ((double) this.ai[0] >= 80.0)
                    ++num2;
                if ((double) this.ai[0] >= 120.0)
                    ++num2;
                int num3 = 5;
                int num4 = 0;
                --this.ai[1];
                bool flag = false;
                int num5 = -1;
                if ((double) this.ai[1] <= 0.0)
                {
                    this.ai[1] = (float) (num3 - num4 * num2);
                    flag = true;
                    if ((int) this.ai[0] / (num3 - num4 * num2) % 7 == 0)
                        num5 = 0;
                }

                this.frameCounter += 1 + num2;
                if (this.frameCounter >= 4)
                {
                    this.frameCounter = 0;
                    ++this.frame;
                    if (this.frame >= Main.projFrames[this.type])
                        this.frame = 0;
                }

                if (this.soundDelay <= 0)
                {
                    this.soundDelay = num3 - num4 * num2;
                    if ((double) this.ai[0] != 1.0)
                        Main.PlaySound(SoundID.Item36, this.position);
                }

                if (flag && Main.myPlayer == this.owner)
                {
                    bool canShoot = player.channel && player.HasAmmo(player.inventory[player.selectedItem], true) &&
                                    !player.noItems && !player.CCed;
                    int shoot = 14;
                    float speed = 14f;
                    int weaponDamage = player.GetWeaponDamage(player.inventory[player.selectedItem]);
                    float knockBack = player.inventory[player.selectedItem].knockBack;
                    if (canShoot)
                    {
                        player.PickAmmo(player.inventory[player.selectedItem], ref shoot, ref speed, ref canShoot,
                            ref weaponDamage, ref knockBack, false);
                        float weaponKnockback =
                            player.GetWeaponKnockback(player.inventory[player.selectedItem], knockBack);
                        float num6 = player.inventory[player.selectedItem].shootSpeed * this.scale;
                        Vector2 vector2_2 = vector2_1;
                        Vector2 vector2_3 = Main.screenPosition +
                                            new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_2;
                        if ((double) player.gravDir == -1.0)
                            vector2_3.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y -
                                          vector2_2.Y;
                        Vector2 spinningpoint1 = Vector2.Normalize(vector2_3);
                        if (float.IsNaN(spinningpoint1.X) || float.IsNaN(spinningpoint1.Y))
                            spinningpoint1 = -Vector2.UnitY;
                        spinningpoint1 *= num6;
                        spinningpoint1 =
                            spinningpoint1.RotatedBy(Main.rand.NextDouble() * 0.130899697542191 - 0.0654498487710953,
                                new Vector2());
                        if ((double) spinningpoint1.X != (double) this.velocity.X ||
                            (double) spinningpoint1.Y != (double) this.velocity.Y)
                            this.netUpdate = true;
                        this.velocity = spinningpoint1;
                        for (int index = 0; index < 1; ++index)
                        {
                            Vector2 spinningpoint2 = Vector2.Normalize(this.velocity) * speed;
                            spinningpoint2 = spinningpoint2.RotatedBy(
                                Main.rand.NextDouble() * 0.196349546313286 - 0.0981747731566429, new Vector2());
                            if (float.IsNaN(spinningpoint2.X) || float.IsNaN(spinningpoint2.Y))
                                spinningpoint2 = -Vector2.UnitY;
                            Projectile.NewProjectile(vector2_2.X, vector2_2.Y, spinningpoint2.X, spinningpoint2.Y,
                                shoot, weaponDamage, weaponKnockback, this.owner, 0.0f, 0.0f);
                        }

                        if (num5 == 0)
                        {
                            shoot = 616;
                            float num7 = 8f;
                            for (int index = 0; index < 1; ++index)
                            {
                                Vector2 spinningpoint2 = Vector2.Normalize(this.velocity) * num7;
                                spinningpoint2 = spinningpoint2.RotatedBy(
                                    Main.rand.NextDouble() * 0.392699092626572 - 0.196349546313286, new Vector2());
                                if (float.IsNaN(spinningpoint2.X) || float.IsNaN(spinningpoint2.Y))
                                    spinningpoint2 = -Vector2.UnitY;
                                Projectile.NewProjectile(vector2_2.X, vector2_2.Y, spinningpoint2.X, spinningpoint2.Y,
                                    shoot, weaponDamage + 20, weaponKnockback * 1.25f, this.owner, 0.0f, 0.0f);
                            }
                        }
                    }
                    else
                        this.Kill();
                }
            }

            if (this.type == 630)
            {
                num1 = 0.0f;
                if (this.spriteDirection == -1)
                    num1 = 3.141593f;
                ++this.ai[0];
                int num2 = 0;
                if ((double) this.ai[0] >= 40.0)
                    ++num2;
                if ((double) this.ai[0] >= 80.0)
                    ++num2;
                if ((double) this.ai[0] >= 120.0)
                    ++num2;
                int num3 = 24;
                int num4 = 2;
                --this.ai[1];
                bool flag = false;
                if ((double) this.ai[1] <= 0.0)
                {
                    this.ai[1] = (float) (num3 - num4 * num2);
                    flag = true;
                    int num5 = (int) this.ai[0] / (num3 - num4 * num2);
                }

                bool canShoot = player.channel && player.HasAmmo(player.inventory[player.selectedItem], true) &&
                                !player.noItems && !player.CCed;
                if ((double) this.localAI[0] > 0.0)
                    --this.localAI[0];
                if (this.soundDelay <= 0 && canShoot)
                {
                    this.soundDelay = num3 - num4 * num2;
                    if ((double) this.ai[0] != 1.0)
                        Main.PlaySound(SoundID.Item5, this.position);
                    this.localAI[0] = 12f;
                }

                player.phantasmTime = 2;
                if (flag && Main.myPlayer == this.owner)
                {
                    int shoot = 14;
                    float speed = 14f;
                    int weaponDamage = player.GetWeaponDamage(player.inventory[player.selectedItem]);
                    float knockBack = player.inventory[player.selectedItem].knockBack;
                    if (canShoot)
                    {
                        player.PickAmmo(player.inventory[player.selectedItem], ref shoot, ref speed, ref canShoot,
                            ref weaponDamage, ref knockBack, false);
                        float weaponKnockback =
                            player.GetWeaponKnockback(player.inventory[player.selectedItem], knockBack);
                        float num5 = player.inventory[player.selectedItem].shootSpeed * this.scale;
                        Vector2 vector2_2 = vector2_1;
                        Vector2 vector2_3 = Main.screenPosition +
                                            new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_2;
                        if ((double) player.gravDir == -1.0)
                            vector2_3.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y -
                                          vector2_2.Y;
                        Vector2 vector2_4 = Vector2.Normalize(vector2_3);
                        if (float.IsNaN(vector2_4.X) || float.IsNaN(vector2_4.Y))
                            vector2_4 = -Vector2.UnitY;
                        vector2_4 *= num5;
                        if ((double) vector2_4.X != (double) this.velocity.X ||
                            (double) vector2_4.Y != (double) this.velocity.Y)
                            this.netUpdate = true;
                        this.velocity = vector2_4 * 0.55f;
                        for (int index1 = 0; index1 < 4; ++index1)
                        {
                            Vector2 vector2_5 = Vector2.Normalize(this.velocity) * speed *
                                                (float) (0.600000023841858 +
                                                         (double) Main.rand.NextFloat() * 0.800000011920929);
                            if (float.IsNaN(vector2_5.X) || float.IsNaN(vector2_5.Y))
                                vector2_5 = -Vector2.UnitY;
                            Vector2 vector2_6 = vector2_2 + Utils.RandomVector2(Main.rand, -15f, 15f);
                            int index2 = Projectile.NewProjectile(vector2_6.X, vector2_6.Y, vector2_5.X, vector2_5.Y,
                                shoot, weaponDamage, weaponKnockback, this.owner, 0.0f, 0.0f);
                            Main.projectile[index2].noDropItem = true;
                        }
                    }
                    else
                        this.Kill();
                }
            }

            if (this.type == 705)
            {
                num1 = 0.0f;
                if (this.spriteDirection == -1)
                    num1 = 3.141593f;
                ++this.ai[0];
                int itemAnimationMax = player.itemAnimationMax;
                --this.ai[1];
                bool flag = false;
                if ((double) this.ai[1] <= 0.0)
                {
                    this.ai[1] = (float) itemAnimationMax;
                    flag = true;
                }

                bool canShoot = player.channel && player.HasAmmo(player.inventory[player.selectedItem], true) &&
                                !player.noItems && !player.CCed;
                if ((double) this.localAI[0] > 0.0)
                    --this.localAI[0];
                if (this.soundDelay <= 0 && canShoot)
                {
                    this.soundDelay = itemAnimationMax;
                    if ((double) this.ai[0] != 1.0)
                        Main.PlaySound(SoundID.Item5, this.position);
                    this.localAI[0] = 12f;
                }

                if (flag && Main.myPlayer == this.owner)
                {
                    int shoot = 14;
                    float speed = 12f;
                    int weaponDamage = player.GetWeaponDamage(player.inventory[player.selectedItem]);
                    float knockBack = player.inventory[player.selectedItem].knockBack;
                    int num2 = 2;
                    float max = 1.5f;
                    if (canShoot)
                    {
                        player.PickAmmo(player.inventory[player.selectedItem], ref shoot, ref speed, ref canShoot,
                            ref weaponDamage, ref knockBack, false);
                        float weaponKnockback =
                            player.GetWeaponKnockback(player.inventory[player.selectedItem], knockBack);
                        if (shoot == 1)
                            shoot = 2;
                        if (++player.phantomPhoneixCounter >= 4)
                        {
                            player.phantomPhoneixCounter = 0;
                            num2 = 1;
                            weaponDamage *= 2;
                            max = 0.0f;
                            this.ai[1] *= 1.5f;
                            shoot = 706;
                            speed = 16f;
                        }

                        float num3 = player.inventory[player.selectedItem].shootSpeed * this.scale;
                        Vector2 vector2_2 = vector2_1;
                        Vector2 vector2_3 = Main.screenPosition +
                                            new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_2;
                        if ((double) player.gravDir == -1.0)
                            vector2_3.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y -
                                          vector2_2.Y;
                        Vector2 vector2_4 = Vector2.Normalize(vector2_3);
                        if (float.IsNaN(vector2_4.X) || float.IsNaN(vector2_4.Y))
                            vector2_4 = -Vector2.UnitY;
                        vector2_4 *= num3;
                        if ((double) vector2_4.X != (double) this.velocity.X ||
                            (double) vector2_4.Y != (double) this.velocity.Y)
                            this.netUpdate = true;
                        this.velocity = vector2_4 * 0.55f;
                        for (int index1 = 0; index1 < num2; ++index1)
                        {
                            Vector2 vector2_5 = Vector2.Normalize(this.velocity) * speed;
                            vector2_5 += Main.rand.NextVector2Square(-max, max);
                            if (float.IsNaN(vector2_5.X) || float.IsNaN(vector2_5.Y))
                                vector2_5 = -Vector2.UnitY;
                            Vector2 vector2_6 = vector2_2;
                            int index2 = Projectile.NewProjectile(vector2_6.X, vector2_6.Y, vector2_5.X, vector2_5.Y,
                                shoot, weaponDamage, weaponKnockback, this.owner, 0.0f, 0.0f);
                            Main.projectile[index2].noDropItem = true;
                        }
                    }
                    else
                        this.Kill();
                }
            }

            this.position = player.RotatedRelativePoint(player.MountedCenter, true) - this.Size / 2f;
            this.rotation = this.velocity.ToRotation() + num1;
            this.spriteDirection = this.direction;
            this.timeLeft = 2;
            player.ChangeDir(this.direction);
            player.heldProj = this.whoAmI;
            player.itemTime = 2;
            player.itemAnimation = 2;
            player.itemRotation = (float) Math.Atan2((double) this.velocity.Y * (double) this.direction,
                (double) this.velocity.X * (double) this.direction);
            if (this.type == 460 || this.type == 611)
            {
                Vector2 vector2_2 = Main.OffsetsPlayerOnhand[player.bodyFrame.Y / 56] * 2f;
                if (player.direction != 1)
                    vector2_2.X = (float) player.bodyFrame.Width - vector2_2.X;
                if ((double) player.gravDir != 1.0)
                    vector2_2.Y = (float) player.bodyFrame.Height - vector2_2.Y;
                Vector2 vector2_3 = vector2_2 - new Vector2((float) (player.bodyFrame.Width - player.width),
                                        (float) (player.bodyFrame.Height - 42)) / 2f;
                this.Center = player.RotatedRelativePoint(player.position + vector2_3, true) - this.velocity;
            }

            if (this.type == 615)
                this.position.Y += player.gravDir * 2f;
            if (this.type != 611 || this.alpha != 0)
                return;
            for (int index = 0; index < 2; ++index)
            {
                Dust dust = Main.dust[
                    Dust.NewDust(this.position + this.velocity * 2f, this.width, this.height, 6, 0.0f, 0.0f, 100,
                        Color.Transparent, 2f)];
                dust.noGravity = true;
                dust.velocity *= 2f;
                dust.velocity += this.localAI[0].ToRotationVector2();
                dust.fadeIn = 1.5f;
            }

            float num9 = 18f;
            for (int index = 0; (double) index < (double) num9; ++index)
            {
                if (Main.rand.Next(4) == 0)
                {
                    Vector2 Position = this.position + this.velocity + this.velocity * ((float) index / num9);
                    Dust dust = Main.dust[
                        Dust.NewDust(Position, this.width, this.height, 6, 0.0f, 0.0f, 100, Color.Transparent, 1f)];
                    dust.noGravity = true;
                    dust.fadeIn = 0.5f;
                    dust.velocity += this.localAI[0].ToRotationVector2();
                    dust.noLight = true;
                }
            }
        }

        private void AI_099_1()
        {
            this.timeLeft = 6;
            bool flag1 = true;
            float num1 = 250f;
            float num2 = 0.1f;
            float num3 = 15f;
            float num4 = 12f;
            float num5 = num1 * 0.5f;
            float num6 = num3 * 0.8f;
            float num7 = num4 * 1.5f;
            if (this.owner == Main.myPlayer)
            {
                bool flag2 = false;
                for (int index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].owner == this.owner &&
                        Main.projectile[index].aiStyle == 99 &&
                        (Main.projectile[index].type < 556 || Main.projectile[index].type > 561))
                        flag2 = true;
                }

                if (!flag2)
                {
                    this.ai[0] = -1f;
                    this.netUpdate = true;
                }
            }

            if (Main.player[this.owner].yoyoString)
                num5 += (float) ((double) num5 * 0.25 + 10.0);
            this.rotation += 0.5f;
            if (Main.player[this.owner].dead)
            {
                this.Kill();
            }
            else
            {
                if (!flag1)
                {
                    Main.player[this.owner].heldProj = this.whoAmI;
                    Main.player[this.owner].itemAnimation = 2;
                    Main.player[this.owner].itemTime = 2;
                    if ((double) this.position.X + (double) (this.width / 2) >
                        (double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2))
                    {
                        Main.player[this.owner].ChangeDir(1);
                        this.direction = 1;
                    }
                    else
                    {
                        Main.player[this.owner].ChangeDir(-1);
                        this.direction = -1;
                    }
                }

                if ((double) this.ai[0] == 0.0 || (double) this.ai[0] == 1.0)
                {
                    if ((double) this.ai[0] == 1.0)
                        num5 *= 0.75f;
                    float num8 = num7 * 0.5f;
                    bool flag2 = false;
                    Vector2 vector2_1 = Main.player[this.owner].Center - this.Center;
                    if ((double) vector2_1.Length() > (double) num5 * 0.9)
                        flag2 = true;
                    if ((double) vector2_1.Length() > (double) num5)
                    {
                        float num9 = vector2_1.Length() - num5;
                        Vector2 vector2_2;
                        vector2_2.X = vector2_1.Y;
                        vector2_2.Y = vector2_1.X;
                        vector2_1.Normalize();
                        vector2_1 *= num5;
                        this.position = Main.player[this.owner].Center - vector2_1;
                        this.position.X -= (float) (this.width / 2);
                        this.position.Y -= (float) (this.height / 2);
                        float num10 = this.velocity.Length();
                        this.velocity.Normalize();
                        if ((double) num9 > (double) num10 - 1.0)
                            num9 = num10 - 1f;
                        Projectile projectile = this;
                        projectile.velocity = projectile.velocity * (num10 - num9);
                        this.velocity.Length();
                        Vector2 vector2_3 = new Vector2(this.Center.X, this.Center.Y);
                        Vector2 vector2_4 = new Vector2(Main.player[this.owner].Center.X,
                            Main.player[this.owner].Center.Y);
                        if ((double) vector2_3.Y < (double) vector2_4.Y)
                            vector2_2.Y = Math.Abs(vector2_2.Y);
                        else if ((double) vector2_3.Y > (double) vector2_4.Y)
                            vector2_2.Y = -Math.Abs(vector2_2.Y);
                        if ((double) vector2_3.X < (double) vector2_4.X)
                            vector2_2.X = Math.Abs(vector2_2.X);
                        else if ((double) vector2_3.X > (double) vector2_4.X)
                            vector2_2.X = -Math.Abs(vector2_2.X);
                        vector2_2.Normalize();
                        Vector2 vector2_5 = vector2_2 * this.velocity.Length();
                        Vector2 vector2_6 = new Vector2(vector2_5.X, vector2_5.Y);
                        if ((double) Math.Abs(this.velocity.X) > (double) Math.Abs(this.velocity.Y))
                        {
                            Vector2 velocity = this.velocity;
                            velocity.Y += vector2_5.Y;
                            velocity.Normalize();
                            velocity *= this.velocity.Length();
                            if ((double) Math.Abs(vector2_5.X) < 0.1 || (double) Math.Abs(vector2_5.Y) < 0.1)
                                this.velocity = velocity;
                            else
                                this.velocity = (velocity + this.velocity * 2f) / 3f;
                        }
                        else
                        {
                            Vector2 velocity = this.velocity;
                            velocity.X += vector2_5.X;
                            velocity.Normalize();
                            velocity *= this.velocity.Length();
                            if ((double) Math.Abs(vector2_5.X) < 0.2 || (double) Math.Abs(vector2_5.Y) < 0.2)
                                this.velocity = velocity;
                            else
                                this.velocity = (velocity + this.velocity * 2f) / 3f;
                        }
                    }

                    if (Main.myPlayer == this.owner)
                    {
                        if (Main.player[this.owner].channel)
                        {
                            Vector2 vector2_2 = new Vector2((float) (Main.mouseX - Main.lastMouseX),
                                (float) (Main.mouseY - Main.lastMouseY));
                            if ((double) this.velocity.X != 0.0 || (double) this.velocity.Y != 0.0)
                            {
                                if (flag1)
                                    vector2_2 *= -1f;
                                if (flag2)
                                {
                                    if ((double) this.Center.X < (double) Main.player[this.owner].Center.X &&
                                        (double) vector2_2.X < 0.0)
                                        vector2_2.X = 0.0f;
                                    if ((double) this.Center.X > (double) Main.player[this.owner].Center.X &&
                                        (double) vector2_2.X > 0.0)
                                        vector2_2.X = 0.0f;
                                    if ((double) this.Center.Y < (double) Main.player[this.owner].Center.Y &&
                                        (double) vector2_2.Y < 0.0)
                                        vector2_2.Y = 0.0f;
                                    if ((double) this.Center.Y > (double) Main.player[this.owner].Center.Y &&
                                        (double) vector2_2.Y > 0.0)
                                        vector2_2.Y = 0.0f;
                                }

                                Projectile projectile = this;
                                projectile.velocity = projectile.velocity + vector2_2 * num2;
                                this.netUpdate = true;
                            }
                        }
                        else
                        {
                            this.ai[0] = 10f;
                            this.netUpdate = true;
                        }
                    }

                    if (flag1 || this.type == 562 || (this.type == 547 || this.type == 555) ||
                        (this.type == 564 || this.type == 552 || (this.type == 563 || this.type == 549)) ||
                        (this.type == 550 || this.type == 554 || (this.type == 553 || this.type == 603)))
                    {
                        float num9 = 800f;
                        Vector2 vector2_2 = new Vector2();
                        bool flag3 = false;
                        if (this.type == 549)
                            num9 = 200f;
                        if (this.type == 554)
                            num9 = 400f;
                        if (this.type == 553)
                            num9 = 250f;
                        if (this.type == 603)
                            num9 = 320f;
                        for (int index = 0; index < 200; ++index)
                        {
                            if (Main.npc[index].CanBeChasedBy((object) this, false))
                            {
                                float num10 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                                float num11 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                                float num12 = Math.Abs(this.position.X + (float) (this.width / 2) - num10) +
                                              Math.Abs(this.position.Y + (float) (this.height / 2) - num11);
                                if ((double) num12 < (double) num9 && (this.type != 563 || (double) num12 >= 200.0) &&
                                    Collision.CanHit(this.position, this.width, this.height, Main.npc[index].position,
                                        Main.npc[index].width, Main.npc[index].height) &&
                                    (double) (Main.npc[index].Center - Main.player[this.owner].Center).Length() <
                                    (double) num5 * 0.9)
                                {
                                    num9 = num12;
                                    vector2_2.X = num10;
                                    vector2_2.Y = num11;
                                    flag3 = true;
                                }
                            }
                        }

                        if (flag3)
                        {
                            vector2_2 -= this.Center;
                            vector2_2.Normalize();
                            if (this.type == 563)
                            {
                                vector2_2 *= 4f;
                                this.velocity = (this.velocity * 14f + vector2_2) / 15f;
                            }
                            else if (this.type == 553)
                            {
                                vector2_2 *= 5f;
                                this.velocity = (this.velocity * 12f + vector2_2) / 13f;
                            }
                            else if (this.type == 603)
                            {
                                vector2_2 *= 16f;
                                this.velocity = (this.velocity * 9f + vector2_2) / 10f;
                            }
                            else if (this.type == 554)
                            {
                                vector2_2 *= 8f;
                                this.velocity = (this.velocity * 6f + vector2_2) / 7f;
                            }
                            else
                            {
                                vector2_2 *= 6f;
                                this.velocity = (this.velocity * 7f + vector2_2) / 8f;
                            }
                        }
                    }

                    if ((double) this.velocity.Length() > (double) num6)
                    {
                        this.velocity.Normalize();
                        Projectile projectile = this;
                        projectile.velocity = projectile.velocity * num6;
                    }

                    if ((double) this.velocity.Length() >= (double) num8)
                        return;
                    this.velocity.Normalize();
                    Projectile projectile1 = this;
                    projectile1.velocity = projectile1.velocity * num8;
                }
                else
                {
                    this.tileCollide = false;
                    Vector2 vec = Main.player[this.owner].Center - this.Center;
                    if ((double) vec.Length() < 40.0 || vec.HasNaNs())
                    {
                        this.Kill();
                    }
                    else
                    {
                        float num8 = num6 * 1.5f;
                        if (this.type == 546)
                            num8 *= 1.5f;
                        if (this.type == 554)
                            num8 *= 1.25f;
                        if (this.type == 555)
                            num8 *= 1.35f;
                        if (this.type == 562)
                            num8 *= 1.25f;
                        float num9 = 12f;
                        vec.Normalize();
                        vec *= num8;
                        this.velocity = (this.velocity * (num9 - 1f) + vec) / num9;
                    }
                }
            }
        }

        private void AI_099_2()
        {
            bool flag1 = false;
            for (int index = 0; index < this.whoAmI; ++index)
            {
                if (Main.projectile[index].active && Main.projectile[index].owner == this.owner &&
                    Main.projectile[index].type == this.type)
                    flag1 = true;
            }

            if (this.owner == Main.myPlayer)
            {
                ++this.localAI[0];
                if (flag1)
                    this.localAI[0] += (float) Main.rand.Next(10, 31) * 0.1f;
                float num1 = this.localAI[0] / 60f /
                             (float) ((1.0 + (double) Main.player[this.owner].meleeSpeed) / 2.0);
                float num2 = ProjectileID.Sets.YoyosLifeTimeMultiplier[this.type];
                if ((double) num2 != -1.0 && (double) num1 > (double) num2)
                    this.ai[0] = -1f;
            }

            if (this.type == 603 && this.owner == Main.myPlayer)
            {
                ++this.localAI[1];
                if ((double) this.localAI[1] >= 6.0)
                {
                    float num1 = 400f;
                    Vector2 velocity = this.velocity;
                    Vector2 vector2_1 = new Vector2((float) Main.rand.Next(-100, 101),
                        (float) Main.rand.Next(-100, 101));
                    vector2_1.Normalize();
                    Vector2 vector2_2 = vector2_1 * ((float) Main.rand.Next(10, 41) * 0.1f);
                    if (Main.rand.Next(3) == 0)
                        vector2_2 *= 2f;
                    Vector2 vector2_3 = velocity * 0.25f + vector2_2;
                    for (int index = 0; index < 200; ++index)
                    {
                        if (Main.npc[index].CanBeChasedBy((object) this, false))
                        {
                            float num2 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                            float num3 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                            float num4 = Math.Abs(this.position.X + (float) (this.width / 2) - num2) +
                                         Math.Abs(this.position.Y + (float) (this.height / 2) - num3);
                            if ((double) num4 < (double) num1 && Collision.CanHit(this.position, this.width,
                                    this.height, Main.npc[index].position, Main.npc[index].width,
                                    Main.npc[index].height))
                            {
                                num1 = num4;
                                vector2_3.X = num2;
                                vector2_3.Y = num3;
                                Vector2 vector2_4 = vector2_3 - this.Center;
                                vector2_4.Normalize();
                                vector2_3 = vector2_4 * 8f;
                            }
                        }
                    }

                    Vector2 vector2_5 = vector2_3 * 0.8f;
                    Projectile.NewProjectile(this.Center.X - vector2_5.X, this.Center.Y - vector2_5.Y, vector2_5.X,
                        vector2_5.Y, 604, this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
                    this.localAI[1] = 0.0f;
                }
            }

            bool flag2 = false;
            if (this.type >= 556 && this.type <= 561)
                flag2 = true;
            if (Main.player[this.owner].dead)
            {
                this.Kill();
            }
            else
            {
                if (!flag2 && !flag1)
                {
                    Main.player[this.owner].heldProj = this.whoAmI;
                    Main.player[this.owner].itemAnimation = 2;
                    Main.player[this.owner].itemTime = 2;
                    if ((double) this.position.X + (double) (this.width / 2) >
                        (double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2))
                    {
                        Main.player[this.owner].ChangeDir(1);
                        this.direction = 1;
                    }
                    else
                    {
                        Main.player[this.owner].ChangeDir(-1);
                        this.direction = -1;
                    }
                }

                if (this.velocity.HasNaNs())
                    this.Kill();
                this.timeLeft = 6;
                float num1 = ProjectileID.Sets.YoyosMaximumRange[this.type];
                float num2 = ProjectileID.Sets.YoyosTopSpeed[this.type];
                if (this.type == 545)
                {
                    if (Main.rand.Next(6) == 0)
                    {
                        int index = Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 0, new Color(),
                            1f);
                        Main.dust[index].noGravity = true;
                    }
                }
                else if (this.type == 553 && Main.rand.Next(2) == 0)
                {
                    int index = Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index].noGravity = true;
                    Main.dust[index].scale = 1.6f;
                }

                if (Main.player[this.owner].yoyoString)
                    num1 = (float) ((double) num1 * 1.25 + 30.0);
                float num3 = num1 / (float) ((1.0 + (double) Main.player[this.owner].meleeSpeed * 3.0) / 4.0);
                float num4 = num2 / (float) ((1.0 + (double) Main.player[this.owner].meleeSpeed * 3.0) / 4.0);
                float num5 = (float) (14.0 - (double) num4 / 2.0);
                float num6 = (float) (5.0 + (double) num4 / 2.0);
                if (flag1)
                    num6 += 20f;
                if ((double) this.ai[0] >= 0.0)
                {
                    if ((double) this.velocity.Length() > (double) num4)
                    {
                        Projectile projectile = this;
                        projectile.velocity = projectile.velocity * 0.98f;
                    }

                    bool flag3 = false;
                    bool flag4 = false;
                    Vector2 vector2_1 = Main.player[this.owner].Center - this.Center;
                    if ((double) vector2_1.Length() > (double) num3)
                    {
                        flag3 = true;
                        if ((double) vector2_1.Length() > (double) num3 * 1.3)
                            flag4 = true;
                    }

                    if (this.owner == Main.myPlayer)
                    {
                        if (!Main.player[this.owner].channel || Main.player[this.owner].stoned ||
                            Main.player[this.owner].frozen)
                        {
                            this.ai[0] = -1f;
                            this.ai[1] = 0.0f;
                            this.netUpdate = true;
                        }
                        else
                        {
                            Vector2 vector2_2 = Main.ReverseGravitySupport(Main.MouseScreen, 0.0f) +
                                                Main.screenPosition;
                            float x = vector2_2.X;
                            float y = vector2_2.Y;
                            Vector2 vector2_3 = new Vector2(x, y) - Main.player[this.owner].Center;
                            if ((double) vector2_3.Length() > (double) num3)
                            {
                                vector2_3.Normalize();
                                Vector2 vector2_4 = vector2_3 * num3;
                                Vector2 vector2_5 = Main.player[this.owner].Center + vector2_4;
                                x = vector2_5.X;
                                y = vector2_5.Y;
                            }

                            if ((double) this.ai[0] != (double) x || (double) this.ai[1] != (double) y)
                            {
                                Vector2 vector2_4 = new Vector2(x, y) - Main.player[this.owner].Center;
                                if ((double) vector2_4.Length() > (double) num3 - 1.0)
                                {
                                    vector2_4.Normalize();
                                    Vector2 vector2_5 = vector2_4 * (num3 - 1f);
                                    Vector2 vector2_6 = Main.player[this.owner].Center + vector2_5;
                                    x = vector2_6.X;
                                    y = vector2_6.Y;
                                }

                                this.ai[0] = x;
                                this.ai[1] = y;
                                this.netUpdate = true;
                            }
                        }
                    }

                    if (flag4 && this.owner == Main.myPlayer)
                    {
                        this.ai[0] = -1f;
                        this.netUpdate = true;
                    }

                    if ((double) this.ai[0] >= 0.0)
                    {
                        if (flag3)
                        {
                            num5 /= 2f;
                            num4 *= 2f;
                            if ((double) this.Center.X > (double) Main.player[this.owner].Center.X &&
                                (double) this.velocity.X > 0.0)
                                this.velocity.X *= 0.5f;
                            if ((double) this.Center.Y > (double) Main.player[this.owner].Center.Y &&
                                (double) this.velocity.Y > 0.0)
                                this.velocity.Y *= 0.5f;
                            if ((double) this.Center.X < (double) Main.player[this.owner].Center.X &&
                                (double) this.velocity.X > 0.0)
                                this.velocity.X *= 0.5f;
                            if ((double) this.Center.Y < (double) Main.player[this.owner].Center.Y &&
                                (double) this.velocity.Y > 0.0)
                                this.velocity.Y *= 0.5f;
                        }

                        Vector2 vector2_2 = new Vector2(this.ai[0], this.ai[1]) - this.Center;
                        double num7 = (double) this.velocity.Length();
                        float num8 = vector2_2.Length();
                        if ((double) num8 > (double) num6)
                        {
                            vector2_2.Normalize();
                            float num9 = (double) num8 > (double) num4 * 2.0 ? num4 : num8 / 2f;
                            Vector2 vector2_3 = vector2_2 * num9;
                            this.velocity = (this.velocity * (num5 - 1f) + vector2_3) / num5;
                        }
                        else if (flag1)
                        {
                            if ((double) this.velocity.Length() < (double) num4 * 0.6)
                            {
                                Vector2 velocity = this.velocity;
                                velocity.Normalize();
                                velocity *= num4 * 0.6f;
                                this.velocity = (this.velocity * (num5 - 1f) + velocity) / num5;
                            }
                        }
                        else
                        {
                            Projectile projectile = this;
                            projectile.velocity = projectile.velocity * 0.8f;
                        }

                        if (flag1 && !flag3 && (double) this.velocity.Length() < (double) num4 * 0.6)
                        {
                            this.velocity.Normalize();
                            Projectile projectile = this;
                            projectile.velocity = projectile.velocity * (num4 * 0.6f);
                        }
                    }
                }
                else
                {
                    float num7 = (float) (int) ((double) num5 * 0.8);
                    float num8 = num4 * 1.5f;
                    this.tileCollide = false;
                    Vector2 vector2 = Main.player[this.owner].position - this.Center;
                    float num9 = vector2.Length();
                    if ((double) num9 < (double) num8 + 10.0 || (double) num9 == 0.0)
                    {
                        this.Kill();
                    }
                    else
                    {
                        vector2.Normalize();
                        vector2 *= num8;
                        this.velocity = (this.velocity * (num7 - 1f) + vector2) / num7;
                    }
                }

                this.rotation += 0.45f;
            }
        }

        private void AI_130_FlameBurstTower()
        {
            float shot_range = 900f;
            float angleRatioMax = 1f;
            Vector2 vector2_1 = this.Center;
            int Type = 664;
            int num1 = 12;
            float num2 = 12f;
            int num3 = 1;
            int num4 = 6;
            int num5 = 4;
            int num6 = 80;
            switch (this.type)
            {
                case 663:
                    Lighting.AddLight(this.Center, new Vector3(0.4f, 0.2f, 0.1f));
                    Lighting.AddLight(this.Bottom + new Vector2(0.0f, -10f), new Vector3(0.4f, 0.2f, 0.1f));
                    vector2_1 = this.Bottom + new Vector2((float) (this.direction * 6), -40f);
                    if ((double) ++this.localAI[0] >= 300.0)
                        this.localAI[0] = 0.0f;
                    Microsoft.Xna.Framework.Rectangle r1 = new Microsoft.Xna.Framework.Rectangle(
                        (int) this.position.X + this.width / 4, (int) this.position.Y + this.height - 16,
                        this.width / 4 * 3, 6);
                    if (this.direction == 1)
                        r1.X -= this.width / 4;
                    for (int index = 0; index < 1; ++index)
                    {
                        if (Main.rand.Next(2) == 0)
                        {
                            Dust dust = Dust.NewDustDirect(r1.TopLeft() + new Vector2(-2f, -2f), r1.Width + 4,
                                r1.Height + 4, 270, (float) (-this.direction * 2), -2f, 200,
                                new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0), 1f);
                            dust.fadeIn =
                                (float) (0.600000023841858 + (double) Main.rand.NextFloat() * 0.600000023841858);
                            dust.scale = 0.4f;
                            dust.noGravity = true;
                            dust.noLight = true;
                            dust.velocity = Vector2.Zero;
                            dust.velocity.X = (float) -this.direction * Main.rand.NextFloat() * dust.fadeIn;
                        }
                    }

                    r1 = new Microsoft.Xna.Framework.Rectangle((int) this.Center.X, (int) this.Bottom.Y, this.width / 4,
                        10);
                    if (this.direction == -1)
                        r1.X -= r1.Width;
                    r1.X += this.direction * 4;
                    r1.Y -= this.height - 10;
                    for (int index = 0; index < 1; ++index)
                    {
                        if (Main.rand.Next(5) == 0)
                        {
                            Dust dust = Dust.NewDustDirect(r1.TopLeft(), r1.Width, r1.Height, 6, 0.0f, 0.0f, 0,
                                new Color(), 1f);
                            dust.fadeIn = 1f;
                            dust.scale = 1f;
                            dust.noGravity = true;
                            dust.noLight = true;
                            dust.velocity *= 2f;
                        }
                    }

                    break;
                case 665:
                    Lighting.AddLight(this.Center, new Vector3(0.4f, 0.2f, 0.1f) * 1.2f);
                    Lighting.AddLight(this.Bottom + new Vector2(0.0f, -10f), new Vector3(0.4f, 0.2f, 0.1f) * 1.2f);
                    num6 = 70;
                    num2 += 3f;
                    num4 = 8;
                    Type = 666;
                    vector2_1 = this.Bottom + new Vector2((float) (this.direction * 6), -44f);
                    if ((double) ++this.localAI[0] >= 300.0)
                        this.localAI[0] = 0.0f;
                    Microsoft.Xna.Framework.Rectangle r2 = new Microsoft.Xna.Framework.Rectangle(
                        (int) this.position.X + this.width / 4, (int) this.position.Y + this.height - 16,
                        this.width / 4 * 2, 6);
                    if (this.direction == 1)
                        r2.X -= this.width / 4;
                    for (int index = 0; index < 1; ++index)
                    {
                        if (Main.rand.Next(2) == 0)
                        {
                            Dust dust = Dust.NewDustDirect(r2.TopLeft() + new Vector2(-2f, -2f), r2.Width + 4,
                                r2.Height + 4, 270, (float) (-this.direction * 2), -2f, 200,
                                new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0), 1f);
                            dust.fadeIn =
                                (float) (0.600000023841858 + (double) Main.rand.NextFloat() * 0.600000023841858);
                            dust.scale = 0.4f;
                            dust.noGravity = true;
                            dust.noLight = true;
                            dust.velocity = Vector2.Zero;
                            dust.velocity.X = (float) -this.direction * Main.rand.NextFloat() * dust.fadeIn;
                        }
                    }

                    r2 = new Microsoft.Xna.Framework.Rectangle((int) this.Center.X, (int) this.Bottom.Y, this.width / 4,
                        10);
                    if (this.direction == -1)
                        r2.X -= r2.Width;
                    r2.X += this.direction * 4;
                    r2.Y -= this.height - 10;
                    for (int index = 0; index < 2; ++index)
                    {
                        if (Main.rand.Next(5) == 0)
                        {
                            Dust dust = Dust.NewDustDirect(r2.TopLeft(), r2.Width, r2.Height, 6, 0.0f, 0.0f, 0,
                                new Color(), 1f);
                            dust.fadeIn = 1f;
                            dust.scale = 1f;
                            dust.noGravity = true;
                            dust.noLight = true;
                            dust.velocity *= 2f;
                        }
                    }

                    break;
                case 667:
                    Lighting.AddLight(this.Center, new Vector3(0.4f, 0.2f, 0.1f) * 1.5f);
                    Lighting.AddLight(this.Bottom + new Vector2(0.0f, -10f), new Vector3(0.4f, 0.2f, 0.1f) * 1.5f);
                    num6 = 60;
                    num2 += 6f;
                    num4 = 8;
                    Type = 668;
                    vector2_1 = this.Bottom + new Vector2((float) (this.direction * 6), -46f);
                    if ((double) ++this.localAI[0] >= 300.0)
                        this.localAI[0] = 0.0f;
                    Microsoft.Xna.Framework.Rectangle r3 = new Microsoft.Xna.Framework.Rectangle(
                        (int) this.position.X + this.width / 4, (int) this.position.Y + this.height - 16,
                        this.width / 4 * 2, 6);
                    if (this.direction == 1)
                        r3.X -= this.width / 4;
                    for (int index = 0; index < 1; ++index)
                    {
                        if (Main.rand.Next(2) == 0)
                        {
                            Dust dust = Dust.NewDustDirect(r3.TopLeft() + new Vector2(-2f, -2f), r3.Width + 4,
                                r3.Height + 4, 270, (float) (-this.direction * 2), -2f, 200,
                                new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0), 1f);
                            dust.fadeIn =
                                (float) (0.600000023841858 + (double) Main.rand.NextFloat() * 0.600000023841858);
                            dust.scale = 0.4f;
                            dust.noGravity = true;
                            dust.noLight = true;
                            dust.velocity = Vector2.Zero;
                            dust.velocity.X = (float) -this.direction * Main.rand.NextFloat() * dust.fadeIn;
                        }
                    }

                    r3 = new Microsoft.Xna.Framework.Rectangle((int) this.Center.X, (int) this.Bottom.Y, this.width / 4,
                        10);
                    if (this.direction == -1)
                        r3.X -= r3.Width;
                    r3.X += this.direction * 4;
                    r3.Y -= this.height - 10;
                    for (int index = 0; index < 3; ++index)
                    {
                        if (Main.rand.Next(5) == 0)
                        {
                            Dust dust = Dust.NewDustDirect(r3.TopLeft(), r3.Width, r3.Height, 6, 0.0f, 0.0f, 0,
                                new Color(), 1f);
                            dust.fadeIn = 1.1f;
                            dust.scale = 1f;
                            dust.noGravity = true;
                            dust.noLight = true;
                            dust.velocity *= 2.4f;
                        }
                    }

                    break;
            }

            if (Main.player[this.owner].setApprenticeT2)
            {
                angleRatioMax = 0.1f;
                shot_range *= 1.5f;
                num2 *= 1.4f;
            }

            if ((double) this.ai[0] == 0.0)
            {
                this.direction = this.spriteDirection = Main.player[this.owner].direction;
                this.ai[0] = 1f;
                this.ai[1] = 0.0f;
                this.netUpdate = true;
            }

            if ((double) this.ai[0] == 1.0)
            {
                this.frame = 0;
                bool flag = false;
                if ((double) this.ai[1] > 0.0)
                    --this.ai[1];
                else
                    flag = true;
                if (flag && this.owner == Main.myPlayer)
                {
                    int target = this.AI_130_FlameBurstTower_FindTarget(shot_range, angleRatioMax, vector2_1, true);
                    if (target != -1)
                    {
                        this.direction = Math.Sign(this.DirectionTo(Main.npc[target].Center).X);
                        this.ai[0] = 2f;
                        this.ai[1] = 0.0f;
                        this.netUpdate = true;
                    }
                }
            }
            else if ((double) this.ai[0] == 2.0)
            {
                this.frame = num3 + (int) ((double) this.ai[1] / (double) num5);
                if ((double) this.ai[1] == (double) num1)
                {
                    Vector2 vector2_2 = new Vector2((float) this.direction, 0.0f);
                    int target = this.AI_130_FlameBurstTower_FindTarget(shot_range, angleRatioMax, vector2_1, false);
                    if (target != -1)
                        vector2_2 = (Main.npc[target].Center - vector2_1).SafeNormalize(
                            Vector2.UnitX * (float) this.direction);
                    Vector2 velocity = vector2_2 * num2;
                    if (this.owner == Main.myPlayer)
                        Projectile.NewProjectile(vector2_1, velocity, Type, this.damage, this.knockBack, this.owner,
                            0.0f, 0.0f);
                }

                if ((double) ++this.ai[1] >= (double) (num4 * num5))
                {
                    this.ai[0] = 1f;
                    this.ai[1] = (float) num6;
                }
            }

            this.spriteDirection = this.direction;
            this.tileCollide = true;
            this.velocity.Y += 0.2f;
        }

        private int AI_130_FlameBurstTower_FindTarget(float shot_range, float angleRatioMax, Vector2 shootingSpot,
            bool canChangeDirection = true)
        {
            int index1 = -1;
            NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
            if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this, false))
            {
                for (int index2 = 0; index2 < 1; ++index2)
                {
                    if (minionAttackTargetNpc.CanBeChasedBy((object) this, false))
                    {
                        float num = Vector2.Distance(shootingSpot, minionAttackTargetNpc.Center);
                        if ((double) num <= (double) shot_range)
                        {
                            Vector2 vector2 =
                                (minionAttackTargetNpc.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
                            if ((double) Math.Abs(vector2.X) >= (double) Math.Abs(vector2.Y) * (double) angleRatioMax &&
                                (canChangeDirection || (double) this.direction * (double) vector2.X >= 0.0) &&
                                ((index1 == -1 || (double) num <
                                  (double) Vector2.Distance(shootingSpot, Main.npc[index1].Center)) &&
                                 Collision.CanHitLine(shootingSpot, 0, 0, minionAttackTargetNpc.Center, 0, 0)))
                                index1 = minionAttackTargetNpc.whoAmI;
                        }
                    }
                }

                if (index1 != -1)
                    return index1;
            }

            for (int index2 = 0; index2 < 200; ++index2)
            {
                NPC npc = Main.npc[index2];
                if (npc.CanBeChasedBy((object) this, false))
                {
                    float num = Vector2.Distance(shootingSpot, npc.Center);
                    if ((double) num <= (double) shot_range)
                    {
                        Vector2 vector2 = (npc.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
                        if ((double) Math.Abs(vector2.X) >= (double) Math.Abs(vector2.Y) * (double) angleRatioMax &&
                            (canChangeDirection || (double) this.direction * (double) vector2.X >= 0.0) &&
                            ((index1 == -1 || (double) num <
                              (double) Vector2.Distance(shootingSpot, Main.npc[index1].Center)) &&
                             Collision.CanHitLine(shootingSpot, 0, 0, npc.Center, 0, 0)))
                            index1 = index2;
                    }
                }
            }

            return index1;
        }

        private int AI_134_Ballista_FindTarget(float shot_range, float deadBottomAngle, Vector2 shootingSpot)
        {
            int index1 = -1;
            NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
            if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this, false))
            {
                for (int index2 = 0; index2 < 1; ++index2)
                {
                    if (minionAttackTargetNpc.CanBeChasedBy((object) this, true))
                    {
                        float num = Vector2.Distance(shootingSpot, minionAttackTargetNpc.Center);
                        if ((double) num <= (double) shot_range)
                        {
                            Vector2 vector2 =
                                (minionAttackTargetNpc.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
                            if (((double) Math.Abs(vector2.X) >=
                                 (double) Math.Abs(vector2.Y) * (double) deadBottomAngle ||
                                 (double) vector2.Y <= 0.0) &&
                                (index1 == -1 || (double) num <
                                 (double) Vector2.Distance(shootingSpot, Main.npc[index1].Center)) &&
                                Collision.CanHitLine(shootingSpot, 0, 0, minionAttackTargetNpc.Center, 0, 0))
                                index1 = minionAttackTargetNpc.whoAmI;
                        }
                    }
                }

                if (index1 != -1)
                    return index1;
            }

            for (int index2 = 0; index2 < 200; ++index2)
            {
                NPC npc = Main.npc[index2];
                if (npc.CanBeChasedBy((object) this, true))
                {
                    float num = Vector2.Distance(shootingSpot, npc.Center);
                    if ((double) num <= (double) shot_range)
                    {
                        Vector2 vector2 = (npc.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
                        if (((double) Math.Abs(vector2.X) >= (double) Math.Abs(vector2.Y) * (double) deadBottomAngle ||
                             (double) vector2.Y <= 0.0) &&
                            (index1 == -1 || (double) num <
                             (double) Vector2.Distance(shootingSpot, Main.npc[index1].Center)) &&
                            Collision.CanHitLine(shootingSpot, 0, 0, npc.Center, 0, 0))
                            index1 = index2;
                    }
                }
            }

            return index1;
        }

        private void AI_131_FlameBurstShot()
        {
            if (this.type != 664 && this.type != 666 && this.type != 668)
                return;
            if ((double) this.localAI[0] == 0.0)
            {
                this.localAI[0] = 1f;
                Main.PlayTrackedSound((SoundStyle) SoundID.DD2_FlameburstTowerShot, this.Center);
            }

            if (this.alpha > 0)
            {
                this.alpha -= 25;
                if (this.alpha < 0)
                    this.alpha = 0;
            }

            int num = 1;
            if (this.type == 666)
                num = 2;
            if (this.type == 668)
                num = 3;
            for (int index = 0; index < num; ++index)
            {
                if (Main.rand.Next(2) != 0)
                {
                    Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 6, this.velocity.X * 0.2f,
                        this.velocity.Y * 0.2f, 100, new Color(), 2f);
                    dust.noGravity = true;
                    dust.velocity *= 0.3f;
                    if (Main.rand.Next(1) == 0)
                    {
                        dust.velocity.Y += (float) Math.Sign(dust.velocity.Y) * 1.2f;
                        dust.fadeIn += 0.5f;
                    }
                }
            }

            this.rotation = this.velocity.ToRotation() + 1.570796f;
        }

        private void AI_134_Ballista()
        {
            float shot_range = 900f;
            float deadBottomAngle = 0.75f;
            Vector2 center = this.Center;
            int Type = 680;
            float num1 = 16f;
            int num2 = 1;
            int num3 = 5;
            int num4 = 5;
            int num5 = 180;
            if (Main.player[this.owner].setSquireT2)
                num1 = 21f;
            if (Main.player[this.owner].setSquireT3)
                num5 = 100;
            if (Main.player[this.owner].ballistaPanic)
                num5 = 60;
            if (Main.player[this.owner].ballistaPanic && Main.player[this.owner].setSquireT3)
                num5 = 30;
            int num6 = num4;
            if (this.type == 677)
                center.Y -= 4f;
            if ((double) this.ai[0] == 0.0)
            {
                this.direction = this.spriteDirection = Main.player[this.owner].direction;
                this.ai[0] = 1f;
                this.ai[1] = 0.0f;
                this.netUpdate = true;
                if (this.direction == -1)
                    this.rotation = 3.141593f;
            }

            if ((double) this.ai[0] == 1.0)
            {
                this.frame = 0;
                bool flag = false;
                if (Main.player[this.owner].ballistaPanic && (double) this.ai[1] > 60.0)
                    this.ai[1] = 60f;
                if (Main.player[this.owner].ballistaPanic && Main.player[this.owner].setSquireT3 &&
                    (double) this.ai[1] > 30.0)
                    this.ai[1] = 30f;
                if ((double) this.ai[1] > 0.0)
                    --this.ai[1];
                else
                    flag = true;
                int target = this.AI_134_Ballista_FindTarget(shot_range, deadBottomAngle, center);
                if (target != -1)
                {
                    Vector2 v = (Main.npc[target].Center - center).SafeNormalize(Vector2.UnitY);
                    this.rotation = this.rotation.AngleLerp(v.ToRotation(), 0.08f);
                    if ((double) this.rotation > 1.57079637050629 || (double) this.rotation < -1.57079637050629)
                        this.direction = -1;
                    else
                        this.direction = 1;
                    if (flag && this.owner == Main.myPlayer)
                    {
                        this.direction = Math.Sign(v.X);
                        this.ai[0] = 2f;
                        this.ai[1] = 0.0f;
                        this.netUpdate = true;
                    }
                }
                else
                {
                    float targetAngle = 0.0f;
                    if (this.direction == -1)
                        targetAngle = 3.141593f;
                    this.rotation = this.rotation.AngleLerp(targetAngle, 0.05f);
                }
            }
            else if ((double) this.ai[0] == 2.0)
            {
                this.frame = num2 + (int) ((double) this.ai[1] / (double) num4);
                if ((double) this.ai[1] == (double) num6)
                {
                    Main.PlayTrackedSound((SoundStyle) SoundID.DD2_BallistaTowerShot, this.Center);
                    Vector2 v = new Vector2((float) this.direction, 0.0f);
                    int target = this.AI_134_Ballista_FindTarget(shot_range, deadBottomAngle, center);
                    if (target != -1)
                        v = (Main.npc[target].Center - center).SafeNormalize(Vector2.UnitX * (float) this.direction);
                    this.rotation = v.ToRotation();
                    if ((double) this.rotation > 1.57079637050629 || (double) this.rotation < -1.57079637050629)
                        this.direction = -1;
                    else
                        this.direction = 1;
                    Vector2 velocity = v * num1;
                    if (this.owner == Main.myPlayer)
                        Projectile.NewProjectile(center, velocity, Type, this.damage, this.knockBack, this.owner, 0.0f,
                            0.0f);
                }

                if ((double) ++this.ai[1] >= (double) (num3 * num4))
                {
                    this.ai[0] = 1f;
                    this.ai[1] = (float) num5;
                }
            }

            this.spriteDirection = this.direction;
            this.tileCollide = true;
            this.velocity.Y += 0.2f;
        }

        private void AI_135_OgreStomp()
        {
            ++this.ai[0];
            if ((double) this.ai[0] > 9.0)
            {
                this.Kill();
            }
            else
            {
                this.velocity = Vector2.Zero;
                this.position = this.Center;
                this.Size = new Vector2(16f, 16f) *
                            MathHelper.Lerp(5f, 40f, Utils.InverseLerp(0.0f, 9f, this.ai[0], false));
                this.Center = this.position;
                Point tileCoordinates1 = this.TopLeft.ToTileCoordinates();
                Point tileCoordinates2 = this.BottomRight.ToTileCoordinates();
                int num1 = tileCoordinates1.X / 2 + tileCoordinates2.X / 2;
                int num2 = this.width / 2;
                if ((int) this.ai[0] % 3 != 0)
                    return;
                int num3 = (int) this.ai[0] / 3;
                for (int x = tileCoordinates1.X; x <= tileCoordinates2.X; ++x)
                {
                    for (int y = tileCoordinates1.Y; y <= tileCoordinates2.Y; ++y)
                    {
                        if ((double) Vector2.Distance(this.Center, new Vector2((float) (x * 16), (float) (y * 16))) <=
                            (double) num2)
                        {
                            Tile tileSafely1 = Framing.GetTileSafely(x, y);
                            if (tileSafely1.active() && Main.tileSolid[(int) tileSafely1.type] &&
                                (!Main.tileSolidTop[(int) tileSafely1.type] &&
                                 !Main.tileFrameImportant[(int) tileSafely1.type]))
                            {
                                Tile tileSafely2 = Framing.GetTileSafely(x, y - 1);
                                if (!tileSafely2.active() || !Main.tileSolid[(int) tileSafely2.type] ||
                                    Main.tileSolidTop[(int) tileSafely2.type])
                                {
                                    int tileDustAmount = WorldGen.KillTile_GetTileDustAmount(true, tileSafely1);
                                    for (int index = 0; index < tileDustAmount; ++index)
                                    {
                                        Dust dust = Main.dust[WorldGen.KillTile_MakeTileDust(x, y, tileSafely1)];
                                        dust.velocity.Y -= (float) (3.0 + (double) num3 * 1.5);
                                        dust.velocity.Y *= Main.rand.NextFloat();
                                        dust.scale += (float) num3 * 0.03f;
                                    }

                                    if (num3 >= 2)
                                    {
                                        for (int index = 0; index < tileDustAmount - 1; ++index)
                                        {
                                            Dust dust = Main.dust[WorldGen.KillTile_MakeTileDust(x, y, tileSafely1)];
                                            dust.velocity.Y -= 1f + (float) num3;
                                            dust.velocity.Y *= Main.rand.NextFloat();
                                        }
                                    }

                                    if (tileDustAmount > 0 && Main.rand.Next(3) != 0)
                                    {
                                        float num4 = (float) Math.Abs(num1 - x) / 20f;
                                        Gore gore = Gore.NewGoreDirect(this.position, Vector2.Zero,
                                            61 + Main.rand.Next(3),
                                            (float) (1.0 - (double) num3 * 0.150000005960464 + (double) num4 * 0.5));
                                        gore.velocity.Y -=
                                            (float) (0.100000001490116 + (double) num3 * 0.5 +
                                                     (double) num4 * (double) num3 * 1.0);
                                        gore.velocity.Y *= Main.rand.NextFloat();
                                        gore.position = new Vector2((float) (x * 16 + 20), (float) (y * 16 + 20));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        private void AI_136_BetsyBreath()
        {
            if ((double) this.ai[1] < 0.0 || (double) this.ai[1] > 200.0)
            {
                this.Kill();
            }
            else
            {
                NPC npc = Main.npc[(int) this.ai[1]];
                float num1 = -8f;
                this.Center = npc.Center +
                              new Vector2((110f + num1) * (float) npc.spriteDirection, 30f).RotatedBy(
                                  (double) npc.rotation, new Vector2());
                this.rotation = npc.DirectionTo(this.Center).ToRotation();
                DelegateMethods.v3_1 = new Vector3(1.2f, 1f, 0.3f);
                float num2 = this.ai[0] / 40f;
                if ((double) num2 > 1.0)
                    num2 = 1f;
                float num3 = (float) (((double) this.ai[0] - 38.0) / 40.0);
                if ((double) num3 < 0.0)
                    num3 = 0.0f;
                Utils.PlotTileLine(this.Center + this.rotation.ToRotationVector2() * 400f * num3,
                    this.Center + this.rotation.ToRotationVector2() * 400f * num2, 16f,
                    new Utils.PerLinePoint(DelegateMethods.CastLight));
                Utils.PlotTileLine(
                    this.Center + this.rotation.ToRotationVector2().RotatedBy(0.196349546313286, new Vector2()) * 400f *
                    num3,
                    this.Center + this.rotation.ToRotationVector2().RotatedBy(0.196349546313286, new Vector2()) * 400f *
                    num2, 16f, new Utils.PerLinePoint(DelegateMethods.CastLight));
                Utils.PlotTileLine(
                    this.Center + this.rotation.ToRotationVector2().RotatedBy(-0.196349546313286, new Vector2()) *
                    400f * num3,
                    this.Center + this.rotation.ToRotationVector2().RotatedBy(-0.196349546313286, new Vector2()) *
                    400f * num2, 16f, new Utils.PerLinePoint(DelegateMethods.CastLight));
                if ((double) num3 == 0.0 && (double) num2 > 0.100000001490116)
                {
                    for (int index = 0; index < 3; ++index)
                    {
                        Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 6, 0.0f, 0.0f, 0,
                            new Color(), 1f);
                        dust.fadeIn = 1.5f;
                        dust.velocity =
                            this.rotation.ToRotationVector2()
                                .RotatedBy((double) Main.rand.NextFloatDirection() * 0.261799395084381, new Vector2()) *
                            (float) (0.5 + (double) Main.rand.NextFloat() * 2.5) * 15f;
                        dust.velocity += npc.velocity * 2f;
                        dust.noLight = true;
                        dust.noGravity = true;
                        dust.alpha = 200;
                    }
                }

                if (Main.rand.Next(5) == 0 && (double) this.ai[0] >= 15.0)
                {
                    Gore gore = Gore.NewGoreDirect(
                        this.Center + this.rotation.ToRotationVector2() * 300f -
                        Utils.RandomVector2(Main.rand, -20f, 20f), Vector2.Zero, 61 + Main.rand.Next(3), 0.5f);
                    gore.velocity *= 0.3f;
                    gore.velocity += this.rotation.ToRotationVector2() * 4f;
                }

                for (int index = 0; index < 1; ++index)
                {
                    Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 31, 0.0f, 0.0f, 0,
                        new Color(), 1f);
                    dust.fadeIn = 1.5f;
                    dust.scale = 0.4f;
                    dust.velocity =
                        this.rotation.ToRotationVector2()
                            .RotatedBy((double) Main.rand.NextFloatDirection() * 0.261799395084381, new Vector2()) *
                        (float) (0.5 + (double) Main.rand.NextFloat() * 2.5) * 15f;
                    dust.velocity += npc.velocity * 2f;
                    dust.velocity *= 0.3f;
                    dust.noLight = true;
                    dust.noGravity = true;
                    float amount = Main.rand.NextFloat();
                    dust.position = Vector2.Lerp(this.Center + this.rotation.ToRotationVector2() * 400f * num3,
                        this.Center + this.rotation.ToRotationVector2() * 400f * num2, amount);
                    dust.position += this.rotation.ToRotationVector2().RotatedBy(1.57079637050629, new Vector2()) *
                                     (float) (20.0 + 100.0 * ((double) amount - 0.5));
                }

                ++this.frameCounter;
                ++this.ai[0];
                if ((double) this.ai[0] < 78.0)
                    return;
                this.Kill();
            }
        }

        private void AI_137_LightningAura()
        {
            int maxDistance = 10;
            int num1 = 999;
            int num2 = 30;
            int num3 = 40;
            int num4 = 4;
            this.knockBack = 0.0f;
            if (Main.player[this.owner].setMonkT2)
                num2 -= 5;
            if (Main.player[this.owner].setMonkT3)
            {
                maxDistance = 14;
                num4 = 8;
            }

            ++this.ai[0];
            if ((double) this.ai[0] >= (double) num2)
                this.ai[0] = 0.0f;
            if ((double) this.ai[0] == 0.0)
            {
                bool flag = false;
                for (int index = 0; index < 200; ++index)
                {
                    NPC npc = Main.npc[index];
                    if (npc.CanBeChasedBy((object) this, false) &&
                        (double) npc.Hitbox.Distance(this.Center) < (double) (this.width / 2) &&
                        this.Colliding(this.Hitbox, npc.Hitbox))
                    {
                        flag = true;
                        break;
                    }
                }

                if (flag)
                    Main.PlayTrackedSound((SoundStyle) SoundID.DD2_LightningAuraZap, this.Center);
            }

            if ((double) this.localAI[0] == 0.0)
            {
                this.localAI[0] = 1f;
                this.velocity = Vector2.Zero;
                Point tileCoordinates = this.Center.ToTileCoordinates();
                Point result1;
                if (!WorldUtils.Find(tileCoordinates,
                    Searches.Chain((GenSearch) new Searches.Down(500), (GenCondition) new Conditions.IsSolid()),
                    out result1))
                {
                    this.position.Y += 16f;
                    return;
                }

                Point result2;
                if (!WorldUtils.Find(new Point(result1.X, result1.Y - 1),
                    Searches.Chain((GenSearch) new Searches.Up(maxDistance), (GenCondition) new Conditions.IsSolid()),
                    out result2))
                    result2 = new Point(tileCoordinates.X, tileCoordinates.Y - maxDistance - 1);
                Vector2 worldCoordinates1 = result1.ToWorldCoordinates(8f, 0.0f);
                Vector2 worldCoordinates2 = result2.ToWorldCoordinates(8f, 0.0f);
                this.Size = new Vector2(1f, worldCoordinates1.Y - worldCoordinates2.Y);
                if (this.height > maxDistance * 16)
                    this.height = maxDistance * 16;
                if (this.height < num4 * 16)
                    this.height = num4 * 16;
                this.height *= 2;
                this.width = (int) ((double) this.height * 1.0);
                if (this.width > num1)
                    this.width = num1;
                this.Center = worldCoordinates1;
            }

            if (++this.frameCounter >= 8)
            {
                this.frameCounter = 0;
                if (++this.frame >= Main.projFrames[this.type])
                    this.frame = 0;
            }

            DelegateMethods.v3_1 = new Vector3(0.2f, 0.7f, 1f);
            Utils.PlotTileLine(this.Center + Vector2.UnitX * -40f, this.Center + Vector2.UnitX * 40f, 80f,
                new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
            Vector2 vector2_1 = new Vector2(this.Top.X, this.position.Y + (float) num3);
            for (int index = 0; index < 4; ++index)
            {
                if (Main.rand.Next(6) == 0)
                {
                    Vector2 vector2_2 = Main.rand.NextVector2Unit(0.0f, 6.283185f);
                    if ((double) Math.Abs(vector2_2.X) >= 0.119999997317791)
                    {
                        Vector2 vector2_3 = this.Center + vector2_2 * new Vector2((float) ((this.height - num3) / 2));
                        if (!WorldGen.SolidTile((int) vector2_3.X / 16, (int) vector2_3.Y / 16) &&
                            this.AI_137_CanHit(vector2_3))
                        {
                            Dust dust = Dust.NewDustDirect(vector2_3, 0, 0, 226, 0.0f, 0.0f, 100, new Color(), 1f);
                            dust.position = vector2_3;
                            dust.velocity = (vector2_1 - dust.position).SafeNormalize(Vector2.Zero);
                            dust.scale = 0.7f;
                            dust.fadeIn = 1f;
                            dust.noGravity = true;
                            dust.noLight = true;
                        }
                    }
                }
            }

            for (int index = 0; index < 0; ++index)
            {
                if (Main.rand.Next(10) == 0)
                {
                    Vector2 vector2_2 = Main.rand.NextVector2Unit(0.0f, 6.283185f);
                    if ((double) Math.Abs(vector2_2.X) >= 0.119999997317791)
                    {
                        Vector2 vector2_3 = this.Center + vector2_2 * new Vector2((float) ((this.height - num3) / 2)) *
                                            Main.rand.NextFloat();
                        if (!WorldGen.SolidTile((int) vector2_3.X / 16, (int) vector2_3.Y / 16) &&
                            this.AI_137_CanHit(vector2_3))
                        {
                            Dust dust = Dust.NewDustDirect(vector2_3, 0, 0, 226, 0.0f, 0.0f, 100, new Color(), 1f);
                            dust.velocity *= 0.6f;
                            dust.velocity += Vector2.UnitY * -2f;
                            dust.noGravity = true;
                            dust.noLight = true;
                        }
                    }
                }
            }

            for (int index = 0; index < 4; ++index)
            {
                if (Main.rand.Next(10) == 0)
                {
                    Dust dust = Dust.NewDustDirect(vector2_1 - new Vector2(8f, 0.0f), 16, this.height / 2 - 40, 226,
                        0.0f, 0.0f, 100, new Color(), 1f);
                    dust.velocity *= 0.6f;
                    dust.velocity += Vector2.UnitY * -2f;
                    dust.scale = 0.7f;
                    dust.noGravity = true;
                    dust.noLight = true;
                }
            }

            this.tileCollide = true;
            this.velocity.Y += 0.2f;
        }

        private void AI_138_ExplosiveTrap()
        {
            this.spriteDirection = this.direction = 1;
            int num1 = 110;
            int Type = 694;
            int num2 = 48;
            if (Main.player[this.owner].setHuntressT2)
                num1 = 74;
            if (Main.player[this.owner].setHuntressT3)
                num1 = 40;
            switch (this.type)
            {
                case 692:
                    Type = 695;
                    break;
                case 693:
                    Type = 696;
                    break;
            }

            Lighting.AddLight(this.Center, 0.6f, 0.5f, 0.3f);
            if (++this.frameCounter >= 12)
            {
                this.frameCounter = 0;
                if (++this.frame >= Main.projFrames[this.type])
                    this.frame = 0;
            }

            if ((double) this.localAI[0] > 0.0)
                --this.localAI[0];
            if ((double) this.localAI[0] <= 0.0 && this.owner == Main.myPlayer)
            {
                this.localAI[0] = 3f;
                bool flag = false;
                Microsoft.Xna.Framework.Rectangle rectangle =
                    Utils.CenteredRectangle(this.Center + new Vector2(0.0f, (float) -num2),
                        new Vector2((float) (num2 * 2)));
                for (int index = 0; index < 200; ++index)
                {
                    NPC npc = Main.npc[index];
                    if (npc.CanBeChasedBy((object) this, true) && rectangle.Intersects(npc.Hitbox))
                    {
                        flag = true;
                        break;
                    }
                }

                if (flag)
                {
                    Main.PlayTrackedSound((SoundStyle) SoundID.DD2_ExplosiveTrapExplode);
                    this.localAI[0] = (float) num1;
                    Projectile.NewProjectile(this.Center + new Vector2(0.0f, (float) -num2), Vector2.Zero, Type,
                        this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
                }
            }

            this.tileCollide = true;
            this.velocity.Y += 0.2f;
        }

        private void AI_139_ExplosiveTrapExplosion()
        {
            int projFrame = Main.projFrames[this.type];
            int num = 3;
            this.alpha -= 25;
            if (this.alpha < 0)
                this.alpha = 0;
            if ((double) this.localAI[0] == 0.0)
                this.localAI[0] = 1f;
            if (++this.frameCounter >= num)
            {
                this.frameCounter = 0;
                if (++this.frame >= projFrame)
                {
                    this.Kill();
                    return;
                }
            }

            DelegateMethods.v3_1 = new Vector3(1.3f, 0.9f, 0.2f);
            Utils.PlotTileLine(this.Top, this.Bottom, 2f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
        }

        private void AI_140_MonkStaffT1()
        {
            float num1 = 50f;
            float num2 = 2f;
            float num3 = 20f;
            Player player = Main.player[this.owner];
            float num4 = -0.7853982f;
            Vector2 vector2_1 = player.RotatedRelativePoint(player.MountedCenter, true);
            Vector2 vector2_2 = Vector2.Zero;
            if (player.dead)
            {
                this.Kill();
            }
            else
            {
                if (this.type == 697)
                {
                    int Damage = this.damage * 2;
                    int num5 = Math.Sign(this.velocity.X);
                    this.velocity = new Vector2((float) num5, 0.0f);
                    if ((double) this.ai[0] == 0.0)
                    {
                        this.rotation = (float) ((double) new Vector2((float) num5, -player.gravDir).ToRotation() +
                                                 (double) num4 + 3.14159274101257);
                        if ((double) this.velocity.X < 0.0)
                            this.rotation -= 1.570796f;
                    }

                    this.alpha -= 128;
                    if (this.alpha < 0)
                        this.alpha = 0;
                    float num6 = this.ai[0] / num1;
                    ++this.ai[0];
                    this.rotation += 6.283185f * num2 / num1 * (float) num5;
                    bool flag = (double) this.ai[0] == (double) (int) ((double) num1 / 2.0);
                    if ((double) this.ai[0] >= (double) num1 || flag && !player.controlUseItem)
                    {
                        this.Kill();
                        player.reuseDelay = 10;
                    }
                    else if (flag)
                    {
                        Vector2 mouseWorld = Main.MouseWorld;
                        int dir = (double) player.DirectionTo(mouseWorld).X > 0.0 ? 1 : -1;
                        if ((double) dir != (double) this.velocity.X)
                        {
                            player.ChangeDir(dir);
                            this.velocity = new Vector2((float) dir, 0.0f);
                            this.netUpdate = true;
                            this.rotation -= 3.141593f;
                        }
                    }

                    float num7 = this.rotation - 0.7853982f * (float) num5;
                    vector2_2 = (num7 + (num5 == -1 ? 3.141593f : 0.0f)).ToRotationVector2() * (this.ai[0] / num1) *
                                num3;
                    Vector2 vec = this.Center + (num7 + (num5 == -1 ? 3.141593f : 0.0f)).ToRotationVector2() * 30f;
                    if (Main.rand.Next(2) == 0)
                    {
                        Dust dust = Dust.NewDustDirect(vec - new Vector2(5f), 10, 10, 31, player.velocity.X,
                            player.velocity.Y, 150, new Color(), 1f);
                        dust.velocity = this.DirectionTo(dust.position) * 0.1f + dust.velocity * 0.1f;
                    }

                    if ((double) num6 >= 0.75)
                    {
                        Dust dust = Dust.NewDustDirect(vec - new Vector2(5f), 10, 10, 55, player.velocity.X,
                            player.velocity.Y, 50, new Color(), 1f);
                        dust.velocity = this.DirectionTo(dust.position) * 0.1f + dust.velocity * 0.1f;
                        dust.noGravity = true;
                        dust.color = new Color(20, (int) byte.MaxValue, 100, 160);
                    }

                    if ((double) this.ai[0] >= (double) num1 - 8.0 && (double) this.ai[0] < (double) num1 - 2.0)
                    {
                        for (int index = 0; index < 5; ++index)
                        {
                            Dust dust = Dust.NewDustDirect(vec - new Vector2(5f), 10, 10, 55, player.velocity.X,
                                player.velocity.Y, 50, new Color(), 1f);
                            dust.velocity *= 1.2f;
                            dust.noGravity = true;
                            dust.scale += 0.1f;
                            dust.color = new Color(20, (int) byte.MaxValue, 100, 160);
                        }
                    }

                    if ((double) this.ai[0] == (double) num1 - 3.0 && this.owner == Main.myPlayer)
                    {
                        if ((double) this.localAI[1] != 1.0)
                        {
                            Point result;
                            if (!WorldUtils.Find(vec.ToTileCoordinates(),
                                Searches.Chain((GenSearch) new Searches.Down(4),
                                    (GenCondition) new Conditions.IsSolid()), out result))
                            {
                                Main.PlayTrackedSound((SoundStyle) SoundID.DD2_MonkStaffGroundMiss, this.Center);
                                goto label_26;
                            }
                        }

                        Projectile.NewProjectile(vec + new Vector2((float) (num5 * 20), -60f), Vector2.Zero, 698,
                            Damage, 0.0f, this.owner, 0.0f, 0.0f);
                        Main.PlayTrackedSound((SoundStyle) SoundID.DD2_MonkStaffGroundImpact, this.Center);
                    }
                }

                label_26:
                if (this.type == 707)
                {
                    Lighting.AddLight(player.Center, 0.75f, 0.9f, 1.15f);
                    int num5 = Math.Sign(this.velocity.X);
                    this.velocity = new Vector2((float) num5, 0.0f);
                    if ((double) this.ai[0] == 0.0)
                    {
                        this.rotation = (float) ((double) new Vector2((float) num5, -player.gravDir).ToRotation() +
                                                 (double) num4 + 3.14159274101257);
                        if ((double) this.velocity.X < 0.0)
                            this.rotation -= 1.570796f;
                    }

                    this.alpha -= 128;
                    if (this.alpha < 0)
                        this.alpha = 0;
                    double num6 = (double) this.ai[0] / (double) num1;
                    float num7 = 1f;
                    this.ai[0] += num7;
                    this.rotation += 6.283185f * num2 / num1 * (float) num5;
                    bool flag = (double) this.ai[0] == (double) (int) ((double) num1 / 2.0);
                    if ((double) this.ai[0] >= (double) num1 || flag && !player.controlUseItem)
                    {
                        this.Kill();
                        player.reuseDelay = 2;
                    }
                    else if (flag)
                    {
                        Vector2 mouseWorld = Main.MouseWorld;
                        int dir = (double) player.DirectionTo(mouseWorld).X > 0.0 ? 1 : -1;
                        if ((double) dir != (double) this.velocity.X)
                        {
                            player.ChangeDir(dir);
                            this.velocity = new Vector2((float) dir, 0.0f);
                            this.netUpdate = true;
                            this.rotation -= 3.141593f;
                        }
                    }

                    if (((double) this.ai[0] == (double) num7 ||
                         (double) this.ai[0] == (double) (int) ((double) num1 / 2.0) && this.active) &&
                        this.owner == Main.myPlayer)
                    {
                        Vector2 mouseWorld = Main.MouseWorld;
                        Vector2 vector2_3 = player.DirectionTo(mouseWorld) * 0.0f;
                    }

                    float f = this.rotation - 0.7853982f * (float) num5;
                    vector2_2 = (f + (num5 == -1 ? 3.141593f : 0.0f)).ToRotationVector2() * (this.ai[0] / num1) * num3;
                    Vector2 vector2_4 = this.Center + (f + (num5 == -1 ? 3.141593f : 0.0f)).ToRotationVector2() * 30f;
                    Vector2 rotationVector2 = f.ToRotationVector2();
                    Vector2 vector2_5 = rotationVector2.RotatedBy(1.57079637050629 * (double) this.spriteDirection,
                        new Vector2());
                    if (Main.rand.Next(2) == 0)
                    {
                        Dust dust = Dust.NewDustDirect(vector2_4 - new Vector2(5f), 10, 10, 31, player.velocity.X,
                            player.velocity.Y, 150, new Color(), 1f);
                        dust.velocity = this.DirectionTo(dust.position) * 0.1f + dust.velocity * 0.1f;
                    }

                    for (int index = 0; index < 4; ++index)
                    {
                        float num8 = 1f;
                        float num9 = 1f;
                        switch (index - 1)
                        {
                            case 0:
                                num9 = -1f;
                                break;
                            case 1:
                                num9 = 1.25f;
                                num8 = 0.5f;
                                break;
                            case 2:
                                num9 = -1.25f;
                                num8 = 0.5f;
                                break;
                        }

                        if (Main.rand.Next(6) != 0)
                        {
                            Dust dust = Dust.NewDustDirect(this.position, 0, 0, 226, 0.0f, 0.0f, 100, new Color(), 1f);
                            dust.position = this.Center + rotationVector2 *
                                            (float) (60.0 + (double) Main.rand.NextFloat() * 20.0) * num9;
                            dust.velocity = vector2_5 * (float) (4.0 + 4.0 * (double) Main.rand.NextFloat()) * num9 *
                                            num8;
                            dust.noGravity = true;
                            dust.noLight = true;
                            dust.scale = 0.5f;
                            dust.customData = (object) this;
                            if (Main.rand.Next(4) == 0)
                                dust.noGravity = false;
                        }
                    }
                }

                this.position = vector2_1 - this.Size / 2f;
                Projectile projectile = this;
                projectile.position = projectile.position + vector2_2;
                this.spriteDirection = this.direction;
                this.timeLeft = 2;
                player.ChangeDir(this.direction);
                player.heldProj = this.whoAmI;
                player.itemTime = 2;
                player.itemAnimation = 2;
                player.itemRotation = MathHelper.WrapAngle(this.rotation);
            }
        }

        private void AI_141_MonkStaffT1Explosion()
        {
            Point tileCoordinates1 = this.TopLeft.ToTileCoordinates();
            Point tileCoordinates2 = this.BottomRight.ToTileCoordinates();
            int num1 = tileCoordinates1.X / 2;
            int num2 = tileCoordinates2.X / 2;
            int width = this.width;
            ++this.ai[0];
            if ((double) this.ai[0] > 20.0)
            {
                this.Kill();
            }
            else
            {
                if ((double) this.ai[0] != 1.0)
                    return;
                bool flag = false;
                int num3 = 4;
                for (int x = tileCoordinates1.X; x <= tileCoordinates2.X; ++x)
                {
                    for (int y = tileCoordinates1.Y; y <= tileCoordinates2.Y; ++y)
                    {
                        if ((double) Vector2.Distance(this.Bottom, new Vector2((float) (x * 16), (float) (y * 16))) <=
                            (double) width)
                        {
                            Tile tileSafely1 = Framing.GetTileSafely(x, y);
                            if (tileSafely1.active() && Main.tileSolid[(int) tileSafely1.type] &&
                                (!Main.tileSolidTop[(int) tileSafely1.type] &&
                                 !Main.tileFrameImportant[(int) tileSafely1.type]))
                            {
                                Tile tileSafely2 = Framing.GetTileSafely(x, y - 1);
                                if (!tileSafely2.active() || !Main.tileSolid[(int) tileSafely2.type] ||
                                    Main.tileSolidTop[(int) tileSafely2.type])
                                {
                                    int num4 = WorldGen.KillTile_GetTileDustAmount(true, tileSafely1) * 6;
                                    for (int index = 0; index < num4; ++index)
                                    {
                                        Dust dust = Main.dust[WorldGen.KillTile_MakeTileDust(x, y, tileSafely1)];
                                        dust.velocity.Y -= (float) (3.0 + (double) num3 * 1.5);
                                        dust.velocity.Y *= Main.rand.NextFloat();
                                        dust.scale += (float) num3 * 0.03f;
                                    }

                                    if (num3 >= 2)
                                    {
                                        for (int index = 0; index < num4 - 1; ++index)
                                        {
                                            Dust dust = Main.dust[WorldGen.KillTile_MakeTileDust(x, y, tileSafely1)];
                                            dust.velocity.Y -= 1f + (float) num3;
                                            dust.velocity.Y *= Main.rand.NextFloat();
                                        }
                                    }

                                    if (num4 > 0)
                                        flag = true;
                                }
                            }
                        }
                    }
                }

                Vector2 bottom = this.Bottom;
                Vector2 spinningpoint = new Vector2(7f, 0.0f);
                Vector2 vector2_1 = new Vector2(1f, 0.7f);
                Color color = new Color(20, (int) byte.MaxValue, 100, 200);
                for (float num4 = 0.0f; (double) num4 < 25.0; ++num4)
                {
                    Vector2 vector2_2 =
                        spinningpoint.RotatedBy((double) num4 * 6.28318548202515 / 25.0, new Vector2()) * vector2_1;
                    Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 55, 0.0f, 0.0f, 0,
                        new Color(), 1f);
                    dust.alpha = 0;
                    if (!flag)
                        dust.alpha = 50;
                    dust.color = color;
                    dust.position = bottom + vector2_2;
                    dust.velocity.Y -= 3f;
                    dust.velocity.X *= 0.5f;
                    dust.fadeIn = (float) (0.5 + (double) Main.rand.NextFloat() * 0.5);
                    dust.noLight = true;
                }

                if (flag)
                    return;
                for (float num4 = 0.0f; (double) num4 < 25.0; ++num4)
                {
                    Vector2 vector2_2 =
                        spinningpoint.RotatedBy((double) num4 * 6.28318548202515 / 25.0, new Vector2()) * vector2_1;
                    Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 55, 0.0f, 0.0f, 0,
                        new Color(), 1f);
                    dust.alpha = 100;
                    dust.color = color;
                    dust.position = bottom + vector2_2;
                    dust.velocity.Y -= 5f;
                    dust.velocity.X *= 0.8f;
                    dust.fadeIn = (float) (0.5 + (double) Main.rand.NextFloat() * 0.5);
                    dust.noLight = true;
                }
            }
        }

        private void AI_142_MonkStaffT2And3()
        {
            Player player = Main.player[this.owner];
            Vector2 vector2_1 = player.RotatedRelativePoint(player.MountedCenter, true);
            this.direction = player.direction;
            player.heldProj = this.whoAmI;
            this.Center = vector2_1;
            if (player.dead)
            {
                this.Kill();
            }
            else
            {
                if (!player.frozen)
                {
                    if (this.type == 699)
                    {
                        this.spriteDirection = this.direction = player.direction;
                        this.alpha -= (int) sbyte.MaxValue;
                        if (this.alpha < 0)
                            this.alpha = 0;
                        if ((double) this.localAI[0] > 0.0)
                            --this.localAI[0];
                        float num1 = 1f - (float) player.itemAnimation / (float) player.itemAnimationMax;
                        float rotation = this.velocity.ToRotation();
                        float x = this.velocity.Length();
                        float num2 = 22f;
                        Vector2 spinningpoint1 =
                            new Vector2(1f, 0.0f).RotatedBy(3.14159274101257 + (double) num1 * 6.28318548202515,
                                new Vector2()) * new Vector2(x, this.ai[0]);
                        Projectile projectile = this;
                        projectile.position = projectile.position +
                                              (spinningpoint1.RotatedBy((double) rotation, new Vector2()) +
                                               new Vector2(x + num2, 0.0f).RotatedBy((double) rotation, new Vector2()));
                        Vector2 Destination = vector2_1 + spinningpoint1.RotatedBy((double) rotation, new Vector2()) +
                                              new Vector2((float) ((double) x + (double) num2 + 40.0), 0.0f).RotatedBy(
                                                  (double) rotation, new Vector2());
                        this.rotation = player.AngleTo(Destination) + 0.7853982f * (float) player.direction;
                        if (this.spriteDirection == -1)
                            this.rotation += 3.141593f;
                        player.DirectionTo(this.Center);
                        Vector2 vector2_2 = player.DirectionTo(Destination);
                        Vector2 spinningpoint2 = this.velocity.SafeNormalize(Vector2.UnitY);
                        float num3 = 2f;
                        for (int index = 0; (double) index < (double) num3; ++index)
                        {
                            Dust dust = Dust.NewDustDirect(this.Center, 14, 14, 228, 0.0f, 0.0f, 110, new Color(), 1f);
                            dust.velocity = player.DirectionTo(dust.position) * 2f;
                            dust.position = this.Center + spinningpoint2.RotatedBy(
                                                (double) num1 * 6.28318548202515 * 2.0 +
                                                (double) index / (double) num3 * 6.28318548202515, new Vector2()) * 10f;
                            dust.scale = (float) (1.0 + 0.600000023841858 * (double) Main.rand.NextFloat());
                            dust.velocity += spinningpoint2 * 3f;
                            dust.noGravity = true;
                        }

                        for (int index = 0; index < 1; ++index)
                        {
                            if (Main.rand.Next(3) == 0)
                            {
                                Dust dust = Dust.NewDustDirect(this.Center, 20, 20, 228, 0.0f, 0.0f, 110, new Color(),
                                    1f);
                                dust.velocity = player.DirectionTo(dust.position) * 2f;
                                dust.position = this.Center + vector2_2 * -110f;
                                dust.scale =
                                    (float) (0.449999988079071 + 0.400000005960464 * (double) Main.rand.NextFloat());
                                dust.fadeIn =
                                    (float) (0.699999988079071 + 0.400000005960464 * (double) Main.rand.NextFloat());
                                dust.noGravity = true;
                                dust.noLight = true;
                            }
                        }
                    }
                    else if (this.type == 708)
                    {
                        Lighting.AddLight(player.Center, 0.75f, 0.9f, 1.15f);
                        this.spriteDirection = this.direction = player.direction;
                        this.alpha -= (int) sbyte.MaxValue;
                        if (this.alpha < 0)
                            this.alpha = 0;
                        float num1 = 1f - (float) player.itemAnimation / (float) player.itemAnimationMax;
                        float rotation = this.velocity.ToRotation();
                        float x = this.velocity.Length();
                        float num2 = 22f;
                        Vector2 spinningpoint1 =
                            new Vector2(1f, 0.0f).RotatedBy(3.14159274101257 + (double) num1 * 6.28318548202515,
                                new Vector2()) * new Vector2(x, this.ai[0]);
                        Projectile projectile = this;
                        projectile.position = projectile.position +
                                              (spinningpoint1.RotatedBy((double) rotation, new Vector2()) +
                                               new Vector2(x + num2, 0.0f).RotatedBy((double) rotation, new Vector2()));
                        Vector2 Destination = vector2_1 + spinningpoint1.RotatedBy((double) rotation, new Vector2()) +
                                              new Vector2((float) ((double) x + (double) num2 + 40.0), 0.0f).RotatedBy(
                                                  (double) rotation, new Vector2());
                        this.rotation = player.AngleTo(Destination) + 0.7853982f * (float) player.direction;
                        if (this.spriteDirection == -1)
                            this.rotation += 3.141593f;
                        player.DirectionTo(this.Center);
                        player.DirectionTo(Destination);
                        Vector2 spinningpoint2 = this.velocity.SafeNormalize(Vector2.UnitY);
                        if ((player.itemAnimation == 2 || player.itemAnimation == 6 || player.itemAnimation == 10) &&
                            this.owner == Main.myPlayer)
                        {
                            Vector2 vector2_2 = (spinningpoint2 + Main.rand.NextVector2Square(-0.2f, 0.2f)) * 12f;
                            switch (player.itemAnimation)
                            {
                                case 2:
                                    vector2_2 = spinningpoint2.RotatedBy(0.383972446123759, new Vector2());
                                    break;
                                case 6:
                                    vector2_2 = spinningpoint2.RotatedBy(-0.383972446123759, new Vector2());
                                    break;
                                case 10:
                                    vector2_2 = spinningpoint2.RotatedBy(0.0, new Vector2());
                                    break;
                            }

                            Projectile.NewProjectile(this.Center, vector2_2 * (10f + (float) Main.rand.Next(4)), 709,
                                this.damage, 0.0f, this.owner, 0.0f, 0.0f);
                        }

                        int num3 = 0;
                        while (num3 < 3)
                        {
                            float num4 = 1f;
                            float num5 = 1f;
                            switch (num3 - 1)
                            {
                                case 0:
                                    num5 = -1f;
                                    break;
                                case 1:
                                    num5 = 1.25f;
                                    num4 = 0.5f;
                                    break;
                                case 2:
                                    num5 = -1.25f;
                                    num4 = 0.5f;
                                    break;
                            }

                            if (Main.rand.Next(6) != 0)
                            {
                                float num6 = num5 * 1.2f;
                                Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 226, 0.0f, 0.0f,
                                    100, new Color(), 1f);
                                dust.velocity = spinningpoint2 * (float) (4.0 + 4.0 * (double) Main.rand.NextFloat()) *
                                                num6 * num4;
                                dust.noGravity = true;
                                dust.noLight = true;
                                dust.scale = 0.75f;
                                dust.fadeIn = 0.8f;
                                dust.customData = (object) this;
                                if (Main.rand.Next(3) == 0)
                                {
                                    dust.noGravity = false;
                                    dust.fadeIn = 0.0f;
                                }
                            }

                            num3 += 2;
                        }
                    }
                }

                if (player.itemAnimation != 2)
                    return;
                this.Kill();
                player.reuseDelay = 2;
            }
        }

        private void AI_143_MonkStaffT2Ghast()
        {
            if ((double) this.ai[0] == 0.0)
            {
                float[] localAi = this.localAI;
                int index = 1;
                //Fix By GScience
                localAi[index] = Main.PlayTrackedSound((SoundStyle) SoundID.DD2_GhastlyGlaiveImpactGhost, this.Center)
                    .ToFloat();
            }

            ActiveSound activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
            if (activeSound == null)
            {
                float[] localAi = this.localAI;
                int index = 1;
                //Fix By GScience
                localAi[index] = SlotId.Invalid.ToFloat();
            }
            else
                activeSound.Position = this.Center;

            ++this.ai[0];
            if ((double) this.ai[0] > 50.0)
            {
                this.alpha += 25;
                if (this.alpha > (int) byte.MaxValue)
                    this.alpha = (int) byte.MaxValue;
            }
            else
            {
                this.alpha -= 25;
                if (this.alpha < 100)
                    this.alpha = 100;
            }

            Projectile projectile = this;
            projectile.velocity = projectile.velocity * 0.98f;
            if (++this.frameCounter >= 5)
            {
                this.frameCounter = 0;
                if (++this.frame >= 4)
                    this.frame = 0;
            }

            if ((double) this.ai[0] >= 60.0)
                this.Kill();
            this.direction = this.spriteDirection = (double) this.velocity.X > 0.0 ? 1 : -1;
            this.rotation = this.velocity.ToRotation();
            if (this.spriteDirection == -1)
                this.rotation += 3.141593f;
            if ((double) this.ai[0] < 10.0 || (double) this.ai[0] >= 34.0)
                return;
            Vector2 spinningpoint = this.velocity.SafeNormalize(Vector2.UnitY);
            float num1 = this.ai[0] / 60f;
            float num2 = 2f;
            for (int index = 0; (double) index < (double) num2; ++index)
            {
                Dust dust = Dust.NewDustDirect(this.Center, 14, 14, 228, 0.0f, 0.0f, 110, new Color(), 1f);
                dust.velocity = spinningpoint * 2f;
                dust.position = this.Center +
                                spinningpoint.RotatedBy(
                                    (double) num1 * 6.28318548202515 * 2.0 +
                                    (double) index / (double) num2 * 6.28318548202515, new Vector2()) * 7f;
                dust.scale = (float) (1.0 + 0.600000023841858 * (double) Main.rand.NextFloat());
                dust.velocity += spinningpoint * 3f;
                dust.noGravity = true;
            }
        }

        private void AI_144_DD2Pet()
        {
            Player player = Main.player[this.owner];
            float num1 = 4f;
            int num2 = 6;
            int num3 = 4;
            int num4 = Main.projFrames[this.type];
            int num5 = 0;
            Vector2 vector2_1 = new Vector2((float) (player.direction * 30), -20f);
            if (player.dead)
            {
                this.Kill();
            }
            else
            {
                bool flag = true;
                switch (this.type)
                {
                    case 701:
                        if (Main.myPlayer == this.owner && player.petFlagDD2Dragon)
                        {
                            this.timeLeft = 2;
                            break;
                        }

                        break;
                    case 702:
                        if (Main.myPlayer == this.owner && player.petFlagDD2Ghost)
                            this.timeLeft = 2;
                        vector2_1.Y += (float) Math.Cos((double) this.localAI[0] * 0.0523598790168762) * 2f;
                        num3 = 4;
                        num2 = 10;
                        flag = false;
                        num1 = 6f;
                        Vector2 vector2_2 =
                            new Vector2(this.spriteDirection == -1 ? -6f : -2f, -20f).RotatedBy((double) this.rotation,
                                new Vector2());
                        if (Main.rand.Next(24) == 0)
                        {
                            Dust dust = Dust.NewDustDirect(this.Center + vector2_2, 4, 4, 135, 0.0f, 0.0f, 100,
                                new Color(), 1f);
                            if (Main.rand.Next(3) != 0)
                            {
                                dust.noGravity = true;
                                dust.velocity.Y -= 3f;
                                dust.noLight = true;
                            }
                            else if (Main.rand.Next(2) != 0)
                                dust.noLight = true;

                            dust.velocity *= 0.5f;
                            dust.velocity.Y -= 0.9f;
                            dust.scale +=
                                (float) (0.100000001490116 + (double) Main.rand.NextFloat() * 0.600000023841858);
                        }

                        DelegateMethods.v3_1 = new Vector3(0.3f, 0.5f, 1f);
                        Utils.PlotTileLine(this.Center, this.Center + this.velocity * 6f, 20f,
                            new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
                        Utils.PlotTileLine(this.Left, this.Right, 20f,
                            new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
                        Utils.PlotTileLine(player.Center, player.Center + player.velocity * 6f, 40f,
                            new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
                        Utils.PlotTileLine(player.Left, player.Right, 40f,
                            new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
                        break;
                    case 703:
                        if (Main.myPlayer == this.owner && player.petFlagDD2Gato)
                            this.timeLeft = 2;
                        vector2_1.Y += (float) Math.Cos((double) this.localAI[0] * 0.104719758033752) * 2f;
                        num2 = 4;
                        num3 = 2;
                        num1 = 3f;
                        num4 = 4;
                        break;
                }

                if (flag && (player.suspiciouslookingTentacle || player.petFlagDD2Ghost))
                    vector2_1.X += (float) (-player.direction * 64);
                this.direction = this.spriteDirection = player.direction;
                Vector2 vector2_3 = player.MountedCenter + vector2_1;
                float num6 = Vector2.Distance(this.Center, vector2_3);
                if ((double) num6 > 1000.0)
                    this.Center = player.Center + vector2_1;
                Vector2 vector2_4 = vector2_3 - this.Center;
                if ((double) num6 < (double) num1)
                {
                    Projectile projectile = this;
                    projectile.velocity = projectile.velocity * 0.25f;
                }

                if (vector2_4 != Vector2.Zero)
                {
                    if ((double) vector2_4.Length() < (double) num1 * 0.5)
                        this.velocity = vector2_4;
                    else
                        this.velocity = vector2_4 * 0.1f;
                }

                if ((double) this.velocity.Length() > 6.0)
                {
                    float num7 = (float) ((double) this.velocity.X * 0.0799999982118607 +
                                          (double) this.velocity.Y * (double) this.spriteDirection *
                                          0.0199999995529652);
                    if ((double) Math.Abs(this.rotation - num7) >= 3.14159274101257)
                    {
                        if ((double) num7 < (double) this.rotation)
                            this.rotation -= 6.283185f;
                        else
                            this.rotation += 6.283185f;
                    }

                    float num8 = 12f;
                    this.rotation = (this.rotation * (num8 - 1f) + num7) / num8;
                    if (++this.frameCounter >= num3)
                    {
                        this.frameCounter = 0;
                        if (++this.frame >= num4)
                            this.frame = num5;
                    }
                }
                else
                {
                    if ((double) this.rotation > 3.14159274101257)
                        this.rotation -= 6.283185f;
                    if ((double) this.rotation > -0.00499999988824129 && (double) this.rotation < 0.00499999988824129)
                        this.rotation = 0.0f;
                    else
                        this.rotation *= 0.96f;
                    if (++this.frameCounter >= num2)
                    {
                        this.frameCounter = 0;
                        if (++this.frame >= num4)
                            this.frame = num5;
                    }
                }

                ++this.localAI[0];
                if ((double) this.localAI[0] <= 120.0)
                    return;
                this.localAI[0] = 0.0f;
            }
        }

        private void AI_145_BookStaffStorm()
        {
            float num1 = 300f;
            if (this.soundDelay == 0)
            {
                this.soundDelay = -1;
                float[] localAi = this.localAI;
                int index = 1;
                //Fix By GScience
                localAi[index] = Main.PlayTrackedSound((SoundStyle) SoundID.DD2_BookStaffTwisterLoop, this.Center)
                    .ToFloat();
            }

            ActiveSound activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
            if (activeSound != null)
            {
                activeSound.Position = this.Center;
                activeSound.Volume = (float) (1.0 - (double) Math.Max(this.ai[0] - (num1 - 15f), 0.0f) / 15.0);
            }
            else
            {
                float[] localAi = this.localAI;
                int index = 1;
                //Fix By GScience
                localAi[index] = SlotId.Invalid.ToFloat();
            }

            if ((double) this.localAI[0] >= 16.0 && (double) this.ai[0] < (double) num1 - 15.0)
                this.ai[0] = num1 - 15f;
            ++this.ai[0];
            if ((double) this.ai[0] >= (double) num1)
                this.Kill();
            Vector2 top = this.Top;
            Vector2 bottom = this.Bottom;
            Vector2 vector2_1 = Vector2.Lerp(top, bottom, 0.5f);
            Vector2 vector2_2 = new Vector2(0.0f, bottom.Y - top.Y);
            vector2_2.X = vector2_2.Y * 0.2f;
            int Width = 16;
            int Height = 160;
            for (int index = 0; index < 1; ++index)
            {
                Vector2 Position = new Vector2(this.Center.X - (float) (Width / 2),
                    this.position.Y + (float) this.height - (float) Height);
                if (Collision.SolidCollision(Position, Width, Height) ||
                    Collision.WetCollision(Position, Width, Height))
                {
                    if ((double) this.velocity.Y > 0.0)
                        this.velocity.Y = 0.0f;
                    if ((double) this.velocity.Y > -4.0)
                    {
                        this.velocity.Y -= 2f;
                    }
                    else
                    {
                        this.velocity.Y -= 4f;
                        this.localAI[0] += 2f;
                    }

                    if ((double) this.velocity.Y < -16.0)
                        this.velocity.Y = -16f;
                }
                else
                {
                    --this.localAI[0];
                    if ((double) this.localAI[0] < 0.0)
                        this.localAI[0] = 0.0f;
                    if ((double) this.velocity.Y < 0.0)
                        this.velocity.Y = 0.0f;
                    if ((double) this.velocity.Y < 4.0)
                        this.velocity.Y += 2f;
                    else
                        this.velocity.Y += 4f;
                    if ((double) this.velocity.Y > 16.0)
                        this.velocity.Y = 16f;
                }
            }

            if ((double) this.ai[0] < (double) num1 - 30.0)
            {
                for (int index = 0; index < 1; ++index)
                {
                    float num2 = -1f;
                    float num3 = 0.9f;
                    float amount = Main.rand.NextFloat();
                    Vector2 vector2_3 = new Vector2(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()),
                        MathHelper.Lerp(num2, num3, amount));
                    vector2_3.X *= MathHelper.Lerp(2.2f, 0.6f, amount);
                    vector2_3.X *= -1f;
                    Vector2 vector2_4 = new Vector2(6f, 10f);
                    Vector2 Position = vector2_1 + vector2_2 * vector2_3 * 0.5f + vector2_4;
                    Dust dust = Main.dust[Dust.NewDust(Position, 0, 0, 274, 0.0f, 0.0f, 0, new Color(), 1f)];
                    dust.position = Position;
                    dust.fadeIn = 1.3f;
                    dust.scale = 0.87f;
                    dust.alpha = 211;
                    if ((double) vector2_3.X > -1.20000004768372)
                        dust.velocity.X = 1f + Main.rand.NextFloat();
                    dust.noGravity = true;
                    dust.velocity.Y = (float) ((double) Main.rand.NextFloat() * -0.5 - 1.29999995231628);
                    dust.velocity.X += this.velocity.X * 2.1f;
                    dust.noLight = true;
                }
            }

            Vector2 Position1 = this.Bottom + new Vector2(-25f, -25f);
            for (int index = 0; index < 4; ++index)
            {
                Dust dust = Dust.NewDustDirect(Position1, 50, 25, 31, this.velocity.X, -2f, 100, new Color(), 1f);
                dust.fadeIn = 1.1f;
                dust.noGravity = true;
            }

            for (int index = 0; index < 1; ++index)
            {
                if (Main.rand.Next(5) == 0)
                {
                    Gore gore = Gore.NewGoreDirect(this.TopLeft + Main.rand.NextVector2Square(0.0f, 1f) * this.Size,
                        new Vector2(this.velocity.X * 1.5f, (float) (-(double) Main.rand.NextFloat() * 16.0)),
                        Utils.SelectRandom<int>(Main.rand, new int[3] {1007, 1008, 1008}), 1f);
                    gore.timeLeft = 60;
                    gore.alpha = 50;
                    gore.velocity.X += this.velocity.X;
                }
            }

            for (int index = 0; index < 1; ++index)
            {
                if (Main.rand.Next(7) == 0)
                {
                    Gore gore = Gore.NewGoreDirect(this.TopLeft + Main.rand.NextVector2Square(0.0f, 1f) * this.Size,
                        new Vector2(this.velocity.X * 1.5f, (float) (-(double) Main.rand.NextFloat() * 16.0)),
                        Utils.SelectRandom<int>(Main.rand, new int[3] {1007, 1008, 1008}), 1f);
                    gore.timeLeft = 0;
                    gore.alpha = 80;
                }
            }

            for (int index = 0; index < 1; ++index)
            {
                if (Main.rand.Next(7) == 0)
                {
                    Gore gore = Gore.NewGoreDirect(this.TopLeft + Main.rand.NextVector2Square(0.0f, 1f) * this.Size,
                        new Vector2(this.velocity.X * 1.5f, (float) (-(double) Main.rand.NextFloat() * 16.0)),
                        Utils.SelectRandom<int>(Main.rand, new int[3] {1007, 1008, 1008}), 1f);
                    gore.timeLeft = 0;
                    gore.alpha = 80;
                }
            }
        }

        public bool AI_137_CanHit(Vector2 targetPosition)
        {
            if (WorldGen.SolidTile((int) targetPosition.X / 16, (int) targetPosition.Y / 16))
                return false;
            Vector2 Position1 = this.Top + Vector2.UnitY * 20f;
            bool flag = Collision.CanHitLine(Position1, 0, 0, targetPosition, 0, 0);
            if (!flag)
            {
                Vector2 v = targetPosition - Position1;
                Vector2 spinningpoint = v.SafeNormalize(Vector2.UnitY);
                Vector2 vector2_1 = Vector2.Lerp(Position1, targetPosition, 0.5f);
                Vector2 vector2_2 =
                    vector2_1 + spinningpoint.RotatedBy(1.57079637050629, new Vector2()) * v.Length() * 0.2f;
                if (Collision.CanHitLine(Position1, 0, 0, vector2_2, 0, 0) &&
                    Collision.CanHitLine(vector2_2, 0, 0, targetPosition, 0, 0))
                    flag = true;
                if (!flag)
                {
                    Vector2 vector2_3 = vector2_1 + spinningpoint.RotatedBy(-1.57079637050629, new Vector2()) *
                                        v.Length() * 0.2f;
                    if (Collision.CanHitLine(Position1, 0, 0, vector2_3, 0, 0) &&
                        Collision.CanHitLine(vector2_3, 0, 0, targetPosition, 0, 0))
                        flag = true;
                }
            }

            return flag;
        }

        public void Kill()
        {
            if (!this.active)
                return;
            Main.projectileIdentity[this.owner, this.identity] = -1;
            int timeLeft = this.timeLeft;
            this.timeLeft = 0;
            if (this.type == 686)
                Main.PlayTrackedSound((SoundStyle) SoundID.DD2_BetsyFireballImpact, this.Center);
            else if (this.type == 711)
                Main.PlayTrackedSound((SoundStyle) SoundID.DD2_BetsysWrathImpact, this.Center);
            else if (this.type == 704)
            {
                ActiveSound activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
                if (activeSound != null)
                {
                    activeSound.Volume = 0.0f;
                    activeSound.Stop();
                }
            }

            if (this.type == 710)
            {
                this.ai[1] = -1f;
                this.position = this.Center;
                this.width = this.height = 40;
                this.Center = this.position;
                this.Damage();
                Main.PlaySound(SoundID.Item14, this.position);
                for (int index1 = 0; index1 < 2; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                }

                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                        0.0f, 0.0f, 0, new Color(), 2.5f);
                    Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 2f;
                }

                for (int index1 = 0; index1 < 5; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        31, 0.0f, 0.0f, 0, new Color(), 1.5f);
                    Main.dust[index2].position = this.Center +
                                                 Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                                     .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                                                 (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 2f;
                }
            }
            else if (this.type == 711)
            {
                Microsoft.Xna.Framework.Rectangle hitbox = this.Hitbox;
                int index1 = 0;
                while (index1 < this.oldPos.Length / 2)
                {
                    hitbox.X = (int) this.oldPos[index1].X;
                    hitbox.Y = (int) this.oldPos[index1].Y;
                    for (int index2 = 0; index2 < 2; ++index2)
                    {
                        int Type = Utils.SelectRandom<int>(Main.rand, new int[3] {6, 55, 158});
                        int index3 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, Type,
                            (float) this.direction, -2.5f, 0, new Color(), 1f);
                        Main.dust[index3].alpha = 200;
                        Main.dust[index3].velocity *= 2.4f;
                        Main.dust[index3].scale += Main.rand.NextFloat();
                        Main.dust[index3].scale -= 0.5f;
                        if (Main.dust[index3].type == 55)
                            Main.dust[index3].color = Color.Lerp(new Color(128, 0, 180, 128), Color.Gold,
                                Main.rand.NextFloat());
                        Main.dust[index3].noLight = true;
                    }

                    index1 += 2;
                }

                int index4 = 10;
                while (index4 < this.oldPos.Length)
                {
                    hitbox.X = (int) this.oldPos[index4].X;
                    hitbox.Y = (int) this.oldPos[index4].Y;
                    for (int index2 = 0; index2 < 2; ++index2)
                    {
                        if (Main.rand.Next(3) != 0)
                        {
                            int Type = Utils.SelectRandom<int>(Main.rand, new int[1] {55});
                            int index3 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, Type,
                                (float) this.direction, -2.5f, 0, new Color(), 1f);
                            Main.dust[index3].alpha = 120;
                            Main.dust[index3].velocity *= 2.4f;
                            Main.dust[index3].scale += Main.rand.NextFloat() * 0.7f;
                            Main.dust[index3].scale -= 0.5f;
                            if (Main.dust[index3].type == 55)
                                Main.dust[index3].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
                            Main.dust[index3].noLight = true;
                        }
                    }

                    index4 += 2;
                }

                for (int index2 = 5; index2 < this.oldPos.Length; ++index2)
                {
                    hitbox.X = (int) this.oldPos[index2].X;
                    hitbox.Y = (int) this.oldPos[index2].Y;
                    for (int index3 = 0; index3 < 1; ++index3)
                    {
                        if (Main.rand.Next(3) != 0)
                        {
                            int Type = Utils.SelectRandom<int>(Main.rand, new int[1] {55});
                            int index5 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, Type,
                                (float) this.direction, -2.5f, 0, new Color(), 1f);
                            Main.dust[index5].alpha = 80;
                            Main.dust[index5].velocity *= 0.3f;
                            Main.dust[index5].velocity += this.velocity * 0.5f;
                            Main.dust[index5].scale += Main.rand.NextFloat() * 0.7f;
                            Main.dust[index5].scale -= 0.5f;
                            if (Main.dust[index5].type == 55)
                                Main.dust[index5].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
                            Main.dust[index5].noLight = true;
                        }
                    }
                }

                for (int index2 = 0; index2 < 20; ++index2)
                {
                    if (Main.rand.Next(3) != 0)
                    {
                        int Type = 228;
                        Dust dust = Main.dust[
                            Dust.NewDust(this.position, this.width, this.height, Type, 0.0f, 0.0f, 0, new Color(), 1f)];
                        dust.noGravity = true;
                        dust.scale = 1.25f + Main.rand.NextFloat();
                        dust.fadeIn = 1.5f;
                        dust.velocity *= 6f;
                        dust.noLight = true;
                    }
                }

                for (int index2 = 0; index2 < 20; ++index2)
                {
                    if (Main.rand.Next(3) != 0)
                    {
                        int Type = 55;
                        Dust dust = Main.dust[
                            Dust.NewDust(this.position, this.width, this.height, Type, 0.0f, 0.0f, 0, new Color(), 1f)];
                        dust.noGravity = true;
                        dust.scale = 1.25f + Main.rand.NextFloat();
                        dust.fadeIn = 1.5f;
                        dust.velocity *= 6f;
                        dust.noLight = true;
                        dust.color = new Color(0, 0, 220, 128);
                    }
                }

                if (this.owner == Main.myPlayer)
                {
                    this.position = this.Center;
                    this.Size = new Vector2(140f);
                    this.Center = this.position;
                    this.penetrate = -1;
                    this.usesLocalNPCImmunity = true;
                    this.localNPCHitCooldown = -1;
                    this.Damage();
                }
            }
            else if (this.type == 662 || this.type == 685)
            {
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                Vector2 vector2 = this.oldVelocity.SafeNormalize(Vector2.Zero);
                Vector2 Position = this.position + vector2 * 16f;
                for (int index = 0; index < 16; ++index)
                {
                    if (Main.rand.Next(2) == 0)
                    {
                        Position -= vector2 * 8f;
                    }
                    else
                    {
                        Dust dust = Dust.NewDustDirect(Position, this.width, this.height, 11, 0.0f, 0.0f, 0,
                            new Color(), 1f);
                        dust.position = (dust.position + this.Center) / 2f;
                        dust.velocity += this.oldVelocity * 0.4f;
                        dust.velocity *= 0.5f;
                        dust.noGravity = true;
                        Position -= vector2 * 8f;
                    }
                }
            }

            if (this.type == 680)
            {
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                Vector2 vector2 = this.oldVelocity.SafeNormalize(Vector2.Zero);
                Vector2 Position = this.position + vector2 * 16f;
                for (int index = 0; index < 16; ++index)
                {
                    if (Main.rand.Next(2) == 0)
                    {
                        Position -= vector2 * 8f;
                    }
                    else
                    {
                        Dust dust = Dust.NewDustDirect(Position, this.width, this.height, 11, 0.0f, 0.0f, 0,
                            new Color(), 1f);
                        dust.position = (dust.position + this.Center) / 2f;
                        dust.velocity += this.oldVelocity * 0.4f;
                        dust.velocity *= 0.5f;
                        dust.noGravity = true;
                        Position -= vector2 * 8f;
                    }
                }

                Dust.NewDustDirect(this.position, this.width, this.height, 11, 0.0f, 0.0f, 0, Color.Red, 1.6f)
                    .noGravity = true;
            }

            if (this.type == 664 || this.type == 666 || (this.type == 668 || this.type == 706))
            {
                int num1 = 4;
                int num2 = 20;
                int num3 = 10;
                int num4 = 20;
                int num5 = 20;
                int num6 = 4;
                float num7 = 1.5f;
                int num8 = 6;
                int Type = 6;
                if (Main.player[this.owner].setApprenticeT3)
                {
                    num1 += 4;
                    num5 += 10;
                    num2 += 20;
                    num4 += 30;
                    num3 /= 2;
                    num6 += 4;
                    num7 += 0.5f;
                    num8 += 7;
                    Type = 270;
                }

                this.position = this.Center;
                this.width = this.height = 16 * num8;
                this.Center = this.position;
                this.Damage();
                Main.PlaySound(SoundID.Item100, this.position);
                for (int index1 = 0; index1 < num1; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                }

                for (int index = 0; index < num2; ++index)
                {
                    Dust dust = Dust.NewDustDirect(new Vector2(this.position.X, this.position.Y), this.width,
                        this.height, 6, 0.0f, 0.0f, 200, new Color(), 2.5f);
                    dust.position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                    (float) Main.rand.NextDouble() * (float) this.width / 10f;
                    dust.velocity *= 16f;
                    if ((double) dust.velocity.Y > -2.0)
                        dust.velocity.Y *= -0.4f;
                    dust.noLight = true;
                    dust.noGravity = true;
                }

                for (int index = 0; index < num4; ++index)
                {
                    Dust dust = Dust.NewDustDirect(new Vector2(this.position.X, this.position.Y), this.width,
                        this.height, Type, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    dust.position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                    (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    dust.velocity *= 2f;
                    dust.noGravity = true;
                    dust.fadeIn = num7;
                }

                for (int index1 = 0; index1 < num3; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                        0.0f, 0.0f, 0, new Color(), 2.7f);
                    Main.dust[index2].position = this.Center +
                                                 Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                                     .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                                                 (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                }

                for (int index1 = 0; index1 < num5; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        31, 0.0f, 0.0f, 0, new Color(), 1.5f);
                    Main.dust[index2].position = this.Center +
                                                 Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                                     .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                                                 (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                }

                for (int index1 = 0; index1 < num6; ++index1)
                {
                    int index2 =
                        Gore.NewGore(
                            this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f,
                                (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                    Main.gore[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    Main.gore[index2].position -= Vector2.One * 16f;
                    if (Main.rand.Next(2) == 0)
                        Main.gore[index2].position.Y -= 30f;
                    Main.gore[index2].velocity *= 0.3f;
                    Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
                    Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
                }
            }
            else if (this.type == 681)
            {
                this.position.X += (float) (this.width / 2);
                this.position.Y += (float) (this.height / 2);
                Main.PlaySound(SoundID.DD2_GoblinBomb, this.position);
                this.width = 22;
                this.height = 22;
                this.position.X -= (float) (this.width / 2);
                this.position.Y -= (float) (this.height / 2);
                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index2].velocity *= 1.4f;
                    int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                        0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index3].velocity *= 1.4f;
                    Main.dust[index3].noGravity = true;
                    Main.dust[index3].fadeIn = 2f;
                }

                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                        0.0f, 0.0f, 100, new Color(), 2.5f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 5f;
                    int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                        0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index3].velocity *= 3f;
                }

                int index4 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                    Main.rand.Next(61, 64), 1f);
                Main.gore[index4].velocity *= 0.4f;
                ++Main.gore[index4].velocity.X;
                ++Main.gore[index4].velocity.Y;
                int index5 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                    Main.rand.Next(61, 64), 1f);
                Main.gore[index5].velocity *= 0.4f;
                --Main.gore[index5].velocity.X;
                ++Main.gore[index5].velocity.Y;
                int index6 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                    Main.rand.Next(61, 64), 1f);
                Main.gore[index6].velocity *= 0.4f;
                ++Main.gore[index6].velocity.X;
                --Main.gore[index6].velocity.Y;
                int index7 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                    Main.rand.Next(61, 64), 1f);
                Main.gore[index7].velocity *= 0.4f;
                --Main.gore[index7].velocity.X;
                --Main.gore[index7].velocity.Y;
                this.position.X += (float) (this.width / 2);
                this.position.Y += (float) (this.height / 2);
                this.width = 80;
                this.height = 80;
                this.position.X -= (float) (this.width / 2);
                this.position.Y -= (float) (this.height / 2);
                this.Damage();
            }

            if (this.type == 669)
            {
                Main.PlaySound(13, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                Vector2 vector2 = new Vector2(20f, 20f);
                for (int index = 0; index < 10; ++index)
                    Dust.NewDustDirect(this.Center - vector2 / 2f, (int) vector2.X, (int) vector2.Y, 4, 0.0f, 0.0f, 100,
                            new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 110), 1.1f)
                        .velocity *=
                        1.4f;
                for (int index = 0; index < 40; ++index)
                {
                    Dust dust = Dust.NewDustDirect(this.Center - vector2 / 2f, (int) vector2.X, (int) vector2.Y, 4,
                        0.0f, 0.0f, 50, new Color(245, 200, 30, 155), 1.2f);
                    dust.noGravity = true;
                    dust.velocity *= 4f;
                    Dust.NewDustDirect(this.Center - vector2 / 2f, (int) vector2.X, (int) vector2.Y, 4, 0.0f, 0.0f, 50,
                        new Color(245, 200, 30, 155), 0.8f).velocity *= 2f;
                }
            }

            if (this.type == 634 || this.type == 635)
            {
                int num1 = Utils.SelectRandom<int>(Main.rand, new int[5] {242, 73, 72, 71, (int) byte.MaxValue});
                int Type1 = (int) byte.MaxValue;
                int Type2 = (int) byte.MaxValue;
                int num2 = 50;
                float Scale1 = 1.7f;
                float Scale2 = 0.8f;
                float Scale3 = 2f;
                Vector2 vector2 = (this.rotation - 1.570796f).ToRotationVector2() * this.velocity.Length() *
                                  (float) this.MaxUpdates;
                if (this.type == 635)
                {
                    Type1 = 88;
                    Type2 = 88;
                    num1 = Utils.SelectRandom<int>(Main.rand, new int[3]
                    {
                        242,
                        59,
                        88
                    });
                    Scale1 = 3.7f;
                    Scale2 = 1.5f;
                    Scale3 = 2.2f;
                    vector2 *= 0.5f;
                }

                Main.PlaySound(SoundID.Item14, this.position);
                this.position = this.Center;
                this.width = this.height = num2;
                this.Center = this.position;
                this.maxPenetrate = -1;
                this.penetrate = -1;
                this.Damage();
                for (int index1 = 0; index1 < 40; ++index1)
                {
                    int Type3 = Utils.SelectRandom<int>(Main.rand, new int[5] {242, 73, 72, 71, (int) byte.MaxValue});
                    if (this.type == 635)
                        Type3 = Utils.SelectRandom<int>(Main.rand, new int[3]
                        {
                            242,
                            59,
                            88
                        });
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        Type3, 0.0f, 0.0f, 200, new Color(), Scale1);
                    Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                    Main.dust[index2].velocity += vector2 * Main.rand.NextFloat();
                    int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        Type1, 0.0f, 0.0f, 100, new Color(), Scale2);
                    Main.dust[index3].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    Main.dust[index3].velocity *= 2f;
                    Main.dust[index3].noGravity = true;
                    Main.dust[index3].fadeIn = 1f;
                    Main.dust[index3].color = Color.Crimson * 0.5f;
                    Main.dust[index3].velocity += vector2 * Main.rand.NextFloat();
                }

                for (int index1 = 0; index1 < 20; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        Type2, 0.0f, 0.0f, 0, new Color(), Scale3);
                    Main.dust[index2].position = this.Center +
                                                 Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                                     .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                                                 (float) this.width / 3f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 0.5f;
                    Main.dust[index2].velocity +=
                        vector2 * (float) (0.600000023841858 + 0.600000023841858 * (double) Main.rand.NextFloat());
                }
            }
            else if (this.type == 651)
            {
                if ((double) this.localAI[0] == 1.0 && this.owner == Main.myPlayer)
                {
                    Player master = Main.player[this.owner];
                    Point point = new Vector2(this.ai[0], this.ai[1]).ToPoint();
                    Point tileCoordinates = this.Center.ToTileCoordinates();
                    if (Main.netMode == 1)
                        NetMessage.SendData(109, -1, -1, (NetworkText) null, point.X, (float) point.Y,
                            (float) tileCoordinates.X, (float) tileCoordinates.Y, (int) WiresUI.Settings.ToolMode, 0,
                            0);
                    else
                        Wiring.MassWireOperation(point, tileCoordinates, master);
                }
            }
            else if (this.type == 641)
            {
                if (this.owner == Main.myPlayer)
                {
                    for (int index = 0; index < 1000; ++index)
                    {
                        if (Main.projectile[index].active && Main.projectile[index].owner == this.owner &&
                            Main.projectile[index].type == 642)
                            Main.projectile[index].Kill();
                    }
                }
            }
            else if (this.type == 643)
            {
                if (this.owner == Main.myPlayer)
                {
                    for (int index = 0; index < 1000; ++index)
                    {
                        if (Main.projectile[index].active && Main.projectile[index].owner == this.owner &&
                            Main.projectile[index].type == 644)
                            Main.projectile[index].Kill();
                    }
                }
            }
            else if (this.type == 645)
            {
                bool flag = WorldGen.SolidTile(Framing.GetTileSafely((int) this.position.X / 16,
                    (int) this.position.Y / 16));
                for (int index = 0; index < 4; ++index)
                    Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f,
                        100, new Color(), 1.5f);
                for (int index1 = 0; index1 < 4; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        229, 0.0f, 0.0f, 0, new Color(), 2.5f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                    if (flag)
                        Main.dust[index2].noLight = true;
                    int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        229, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index3].velocity *= 2f;
                    Main.dust[index3].noGravity = true;
                    if (flag)
                        Main.dust[index3].noLight = true;
                }

                for (int index1 = 0; index1 < 1; ++index1)
                {
                    int index2 =
                        Gore.NewGore(
                            this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f,
                                (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                    Main.gore[index2].velocity *= 0.3f;
                    Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
                    Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
                }
            }
            else if (this.type == 636)
            {
                Microsoft.Xna.Framework.Rectangle hitbox = this.Hitbox;
                int index1 = 0;
                while (index1 < 6)
                {
                    hitbox.X = (int) this.oldPos[index1].X;
                    hitbox.Y = (int) this.oldPos[index1].Y;
                    for (int index2 = 0; index2 < 5; ++index2)
                    {
                        int Type = Utils.SelectRandom<int>(Main.rand, new int[3] {6, 259, 158});
                        int index3 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, Type,
                            2.5f * (float) this.direction, -2.5f, 0, new Color(), 1f);
                        Main.dust[index3].alpha = 200;
                        Main.dust[index3].velocity *= 2.4f;
                        Main.dust[index3].scale += Main.rand.NextFloat();
                    }

                    index1 += 3;
                }
            }
            else if (this.type == 614)
            {
                for (int index = 0; index < 10; ++index)
                {
                    Dust dust = Main.dust[
                        Dust.NewDust(this.position, this.width, this.height, 229, 0.0f, 0.0f, 0, new Color(), 1f)];
                    dust.noGravity = true;
                    dust.velocity *= 3f;
                }
            }

            if (this.type == 644)
            {
                Vector2 spinningpoint = new Vector2(0.0f, -3f).RotatedByRandom(3.14159274101257);
                float num1 = (float) Main.rand.Next(7, 13);
                Vector2 vector2 = new Vector2(2.1f, 2f);
                Color rgb = Main.hslToRgb(this.ai[0], 1f, 0.5f);
                rgb.A = byte.MaxValue;
                for (float num2 = 0.0f; (double) num2 < (double) num1; ++num2)
                {
                    int dustIndex = Dust.NewDust(this.Center, 0, 0, 267, 0.0f, 0.0f, 0, rgb, 1f);
                    Main.dust[dustIndex].position = this.Center;
                    Main.dust[dustIndex].velocity =
                        spinningpoint.RotatedBy(6.28318548202515 * (double) num2 / (double) num1, new Vector2()) *
                        vector2 * (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.400000005960464);
                    Main.dust[dustIndex].noGravity = true;
                    Main.dust[dustIndex].scale = 2f;
                    Main.dust[dustIndex].fadeIn = Main.rand.NextFloat() * 2f;
                    Dust dust = Dust.CloneDust(dustIndex);
                    dust.scale /= 2f;
                    dust.fadeIn /= 2f;
                    dust.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue,
                        (int) byte.MaxValue);
                }

                for (float num2 = 0.0f; (double) num2 < (double) num1; ++num2)
                {
                    int dustIndex = Dust.NewDust(this.Center, 0, 0, 267, 0.0f, 0.0f, 0, rgb, 1f);
                    Main.dust[dustIndex].position = this.Center;
                    Main.dust[dustIndex].velocity =
                        spinningpoint.RotatedBy(6.28318548202515 * (double) num2 / (double) num1, new Vector2()) *
                        vector2 * (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.400000005960464);
                    Main.dust[dustIndex].velocity *= Main.rand.NextFloat() * 0.8f;
                    Main.dust[dustIndex].noGravity = true;
                    Main.dust[dustIndex].scale = Main.rand.NextFloat() * 1f;
                    Main.dust[dustIndex].fadeIn = Main.rand.NextFloat() * 2f;
                    Dust dust = Dust.CloneDust(dustIndex);
                    dust.scale /= 2f;
                    dust.fadeIn /= 2f;
                    dust.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue,
                        (int) byte.MaxValue);
                }

                if (Main.myPlayer == this.owner)
                {
                    this.friendly = true;
                    int width = this.width;
                    int height = this.height;
                    int penetrate = this.penetrate;
                    this.position = this.Center;
                    this.width = this.height = 60;
                    this.Center = this.position;
                    this.penetrate = -1;
                    this.maxPenetrate = -1;
                    this.Damage();
                    this.penetrate = penetrate;
                    this.position = this.Center;
                    this.width = width;
                    this.height = height;
                    this.Center = this.position;
                }
            }

            if (this.type == 608)
            {
                this.maxPenetrate = -1;
                this.penetrate = -1;
                this.Damage();
                Main.PlaySound(SoundID.Item14, this.position);
                for (int index1 = 0; index1 < 4; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                }

                for (int index1 = 0; index1 < 30; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                        0.0f, 0.0f, 200, new Color(), 3.7f);
                    Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                    Main.dust[index2].shader =
                        GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].ArmorSetDye(),
                            Main.player[this.owner]);
                    int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                        0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index3].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    Main.dust[index3].velocity *= 2f;
                    Main.dust[index3].noGravity = true;
                    Main.dust[index3].fadeIn = 2.5f;
                    Main.dust[index3].shader =
                        GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].ArmorSetDye(),
                            Main.player[this.owner]);
                }

                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                        0.0f, 0.0f, 0, new Color(), 2.7f);
                    Main.dust[index2].position = this.Center +
                                                 Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                                     .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                                                 (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                    Main.dust[index2].shader =
                        GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].ArmorSetDye(),
                            Main.player[this.owner]);
                }

                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        31, 0.0f, 0.0f, 0, new Color(), 1.5f);
                    Main.dust[index2].position = this.Center +
                                                 Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                                     .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                                                 (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                }

                for (int index1 = 0; index1 < 2; ++index1)
                {
                    int index2 =
                        Gore.NewGore(
                            this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f,
                                (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                    Main.gore[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    Main.gore[index2].velocity *= 0.3f;
                    Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
                    Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
                }
            }
            else if (this.type == 661)
            {
                this.position = this.Center;
                this.width = this.height = 160;
                this.Center = this.position;
                this.maxPenetrate = -1;
                this.penetrate = -1;
                this.Damage();
                Main.PlaySound(SoundID.Item14, this.position);
                Vector2 Position = this.Center + Vector2.One * -20f;
                int Width = 40;
                int Height = Width;
                for (int index1 = 0; index1 < 4; ++index1)
                {
                    int index2 = Dust.NewDust(Position, Width, Height, 240, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) Width / 2f;
                }

                for (int index1 = 0; index1 < 20; ++index1)
                {
                    int index2 = Dust.NewDust(Position, Width, Height, 62, 0.0f, 0.0f, 200, new Color(), 3.7f);
                    Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) Width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].noLight = true;
                    Main.dust[index2].velocity *= 3f;
                    Main.dust[index2].velocity += this.DirectionTo(Main.dust[index2].position) *
                                                  (float) (2.0 + (double) Main.rand.NextFloat() * 4.0);
                    int index3 = Dust.NewDust(Position, Width, Height, 62, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index3].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) Width / 2f;
                    Main.dust[index3].velocity *= 2f;
                    Main.dust[index3].noGravity = true;
                    Main.dust[index3].fadeIn = 1f;
                    Main.dust[index3].color = Color.Crimson * 0.5f;
                    Main.dust[index3].noLight = true;
                    Main.dust[index3].velocity += this.DirectionTo(Main.dust[index3].position) * 8f;
                }

                for (int index1 = 0; index1 < 20; ++index1)
                {
                    int index2 = Dust.NewDust(Position, Width, Height, 62, 0.0f, 0.0f, 0, new Color(), 2.7f);
                    Main.dust[index2].position = this.Center +
                                                 Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                                     .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                                                 (float) Width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].noLight = true;
                    Main.dust[index2].velocity *= 3f;
                    Main.dust[index2].velocity += this.DirectionTo(Main.dust[index2].position) * 2f;
                }

                for (int index1 = 0; index1 < 70; ++index1)
                {
                    int index2 = Dust.NewDust(Position, Width, Height, 240, 0.0f, 0.0f, 0, new Color(), 1.5f);
                    Main.dust[index2].position = this.Center +
                                                 Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                                     .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                                                 (float) Width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                    Main.dust[index2].velocity += this.DirectionTo(Main.dust[index2].position) * 3f;
                }
            }
            else if (this.type == 617)
            {
                this.position = this.Center;
                this.width = this.height = 176;
                this.Center = this.position;
                this.maxPenetrate = -1;
                this.penetrate = -1;
                this.Damage();
                Main.PlaySound(SoundID.Item14, this.position);
                for (int index1 = 0; index1 < 4; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        240, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                }

                for (int index1 = 0; index1 < 30; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        62, 0.0f, 0.0f, 200, new Color(), 3.7f);
                    Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                    int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        90, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index3].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    Main.dust[index3].velocity *= 2f;
                    Main.dust[index3].noGravity = true;
                    Main.dust[index3].fadeIn = 1f;
                    Main.dust[index3].color = Color.Crimson * 0.5f;
                }

                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        62, 0.0f, 0.0f, 0, new Color(), 2.7f);
                    Main.dust[index2].position = this.Center +
                                                 Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                                     .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                                                 (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                }

                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        240, 0.0f, 0.0f, 0, new Color(), 1.5f);
                    Main.dust[index2].position = this.Center +
                                                 Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                                     .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                                                 (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                }

                for (int index1 = 0; index1 < 2; ++index1)
                {
                    int index2 =
                        Gore.NewGore(
                            this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f,
                                (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                    Main.gore[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    Main.gore[index2].velocity *= 0.3f;
                    Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
                    Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
                }

                if (Main.myPlayer == this.owner)
                {
                    for (int index = 0; index < 1000; ++index)
                    {
                        if (Main.projectile[index].active && Main.projectile[index].type == 618 &&
                            (double) Main.projectile[index].ai[1] == (double) this.whoAmI)
                            Main.projectile[index].Kill();
                    }

                    int num1 = Main.rand.Next(5, 9);
                    int num2 = Main.rand.Next(5, 9);
                    int num3 = Utils.SelectRandom<int>(Main.rand, new int[2] {86, 90});
                    int num4 = num3 == 86 ? 90 : 86;
                    for (int index = 0; index < num1; ++index)
                    {
                        Vector2 vector2_1 = this.Center + Utils.RandomVector2(Main.rand, -30f, 30f);
                        Vector2 vector2_2 = new Vector2((float) Main.rand.Next(-100, 101),
                            (float) Main.rand.Next(-100, 101));
                        while ((double) vector2_2.X == 0.0 && (double) vector2_2.Y == 0.0)
                            vector2_2 = new Vector2((float) Main.rand.Next(-100, 101),
                                (float) Main.rand.Next(-100, 101));
                        vector2_2.Normalize();
                        if ((double) vector2_2.Y > 0.200000002980232)
                            vector2_2.Y *= -1f;
                        vector2_2 *= (float) Main.rand.Next(70, 101) * 0.1f;
                        Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_2.X, vector2_2.Y, 620,
                            (int) ((double) this.damage * 0.65), this.knockBack * 0.8f, this.owner, (float) num3, 0.0f);
                    }

                    for (int index = 0; index < num2; ++index)
                    {
                        Vector2 vector2_1 = this.Center + Utils.RandomVector2(Main.rand, -30f, 30f);
                        Vector2 vector2_2 = new Vector2((float) Main.rand.Next(-100, 101),
                            (float) Main.rand.Next(-100, 101));
                        while ((double) vector2_2.X == 0.0 && (double) vector2_2.Y == 0.0)
                            vector2_2 = new Vector2((float) Main.rand.Next(-100, 101),
                                (float) Main.rand.Next(-100, 101));
                        vector2_2.Normalize();
                        if ((double) vector2_2.Y > 0.400000005960464)
                            vector2_2.Y *= -1f;
                        vector2_2 *= (float) Main.rand.Next(40, 81) * 0.1f;
                        Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_2.X, vector2_2.Y, 620,
                            (int) ((double) this.damage * 0.65), this.knockBack * 0.8f, this.owner, (float) num4, 0.0f);
                    }
                }
            }
            else if (this.type == 658)
            {
                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        269, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, new Color(), 0.5f);
                    if (Main.rand.Next(3) == 0)
                    {
                        Main.dust[index2].fadeIn =
                            (float) (0.75 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);
                        Main.dust[index2].scale =
                            (float) (0.25 + (double) Main.rand.Next(-10, 11) * 0.00499999988824129);
                        ++Main.dust[index2].type;
                    }
                    else
                        Main.dust[index2].scale =
                            (float) (1.0 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);

                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 1.25f;
                    Main.dust[index2].velocity -= this.oldVelocity / 10f;
                }
            }
            else if (this.type == 620 || this.type == 618)
            {
                if (this.type == 618)
                    this.ai[0] = 86f;
                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        (int) this.ai[0], this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, new Color(), 0.5f);
                    if (Main.rand.Next(3) == 0)
                    {
                        Main.dust[index2].fadeIn =
                            (float) (0.75 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);
                        Main.dust[index2].scale =
                            (float) (0.25 + (double) Main.rand.Next(-10, 11) * 0.00499999988824129);
                        ++Main.dust[index2].type;
                    }
                    else
                        Main.dust[index2].scale =
                            (float) (1.0 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);

                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 1.25f;
                    Main.dust[index2].velocity -= this.oldVelocity / 10f;
                }
            }
            else if (this.type == 619)
            {
                Main.PlaySound(SoundID.Item50, this.position);
                for (int index1 = 0; index1 < 20; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        (int) this.ai[0], this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, new Color(), 0.5f);
                    if (Main.rand.Next(3) == 0)
                    {
                        Main.dust[index2].fadeIn =
                            (float) (1.10000002384186 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);
                        Main.dust[index2].scale =
                            (float) (0.349999994039536 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);
                        ++Main.dust[index2].type;
                    }
                    else
                        Main.dust[index2].scale =
                            (float) (1.20000004768372 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);

                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 2.5f;
                    Main.dust[index2].velocity -= this.oldVelocity / 10f;
                }

                if (Main.myPlayer == this.owner)
                {
                    int num = Main.rand.Next(3, 6);
                    for (int index = 0; index < num; ++index)
                    {
                        Vector2 vector2 = new Vector2((float) Main.rand.Next(-100, 101),
                            (float) Main.rand.Next(-100, 101));
                        while ((double) vector2.X == 0.0 && (double) vector2.Y == 0.0)
                            vector2 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
                        vector2.Normalize();
                        vector2 *= (float) Main.rand.Next(70, 101) * 0.1f;
                        Projectile.NewProjectile(this.oldPosition.X + (float) (this.width / 2),
                            this.oldPosition.Y + (float) (this.height / 2), vector2.X, vector2.Y, 620,
                            (int) ((double) this.damage * 0.8), this.knockBack * 0.8f, this.owner, this.ai[0], 0.0f);
                    }
                }
            }

            if (this.type == 601)
            {
                Color portalColor = PortalHelper.GetPortalColor(this.owner, (int) this.ai[0]);
                portalColor.A = byte.MaxValue;
                for (int index = 0; index < 6; ++index)
                {
                    Vector2 vector2 = Vector2.UnitY.RotatedByRandom(6.28318548202515) * (3f * Main.rand.NextFloat());
                    Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 263, 0.0f, 0.0f, 0, new Color(), 1f)];
                    dust.position = this.Center;
                    dust.velocity = vector2 + this.velocity / 5f;
                    dust.color = portalColor;
                    dust.scale = 2f;
                    dust.noLight = true;
                    dust.noGravity = true;
                }
            }

            if (this.type == 596)
            {
                this.position = this.Center;
                this.width = this.height = 60;
                this.Center = this.position;
                int num = 40;
                if (Main.expertMode)
                    num = 30;
                this.damage = num;
                this.Damage();
                Main.PlaySound(SoundID.Item14, this.position);
                for (int index1 = 0; index1 < 4; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                }

                for (int index1 = 0; index1 < 20; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        27, 0.0f, 0.0f, 0, new Color(), 2.5f);
                    Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 2f;
                }

                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        31, 0.0f, 0.0f, 0, new Color(), 1.5f);
                    Main.dust[index2].position = this.Center +
                                                 Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                                     .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                                                 (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 2f;
                }
            }

            if (this.type == 659)
            {
                if ((double) this.ai[0] >= 0.0)
                {
                    this.position = this.Center;
                    this.width = this.height = 40;
                    this.Center = this.position;
                    this.Damage();
                    Main.PlaySound(SoundID.Item14, this.position);
                    for (int index1 = 0; index1 < 2; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                        Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                     (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    }

                    for (int index1 = 0; index1 < 10; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 27, 0.0f, 0.0f, 0, new Color(), 2.5f);
                        Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                     (float) Main.rand.NextDouble() * (float) this.width / 2f;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 2f;
                    }

                    for (int index1 = 0; index1 < 5; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 31, 0.0f, 0.0f, 0, new Color(), 1.5f);
                        Main.dust[index2].position =
                            this.Center +
                            Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) this.width /
                            2f;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 2f;
                    }
                }
            }
            else if (this.type >= 625 && this.type <= 628)
            {
                for (int index1 = 0; index1 < 6; ++index1)
                {
                    int index2 = Dust.NewDust(this.position, this.width, this.height, 135, 0.0f, 0.0f, 100, new Color(),
                        2f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].noLight = true;
                }
            }

            if (this.type == 631)
            {
                int num = Main.rand.Next(5, 10);
                for (int index1 = 0; index1 < num; ++index1)
                {
                    int index2 = Dust.NewDust(this.Center, 0, 0, 229, 0.0f, 0.0f, 100, new Color(), 1f);
                    Main.dust[index2].velocity *= 1.6f;
                    --Main.dust[index2].velocity.Y;
                    Main.dust[index2].position -= Vector2.One * 4f;
                    Main.dust[index2].position = Vector2.Lerp(Main.dust[index2].position, this.Center, 0.5f);
                    Main.dust[index2].noGravity = true;
                }
            }

            if (this.type == 539)
            {
                this.position = this.Center;
                this.width = this.height = 80;
                this.Center = this.position;
                this.Damage();
                Main.PlaySound(4, (int) this.position.X, (int) this.position.Y, 7, 1f, 0.0f);
                for (int index1 = 0; index1 < 4; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                }

                for (int index1 = 0; index1 < 20; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        176, 0.0f, 0.0f, 200, new Color(), 3.7f);
                    Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                }

                for (int index1 = 0; index1 < 20; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        180, 0.0f, 0.0f, 0, new Color(), 2.7f);
                    Main.dust[index2].position = this.Center +
                                                 Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                                     .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                                                 (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                }

                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        31, 0.0f, 0.0f, 0, new Color(), 1.5f);
                    Main.dust[index2].position = this.Center +
                                                 Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                                     .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                                                 (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                }
            }
            else if (this.type == 585)
            {
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 27, 1f, 0.0f);
                for (int index1 = 0; index1 < 20; ++index1)
                {
                    int index2 = Dust.NewDust(this.position, this.width, this.height, 26, 0.0f, 0.0f, 100, new Color(),
                        1f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 1.2f;
                    Main.dust[index2].scale = 1.3f;
                    Main.dust[index2].velocity -= this.oldVelocity * 0.3f;
                    int index3 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8,
                        this.height - 8, 27, 0.0f, 0.0f, 100, new Color(), 2f);
                    Main.dust[index3].noGravity = true;
                    Main.dust[index3].velocity *= 3f;
                }
            }
            else if (this.type == 590)
            {
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 27, 1f, 0.0f);
                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(this.position, this.width, this.height, 165, 0.0f, 0.0f, 50, new Color(),
                        1.5f);
                    Main.dust[index2].velocity *= 2f;
                    Main.dust[index2].noGravity = true;
                }

                float Scale = (float) (0.600000023841858 + (double) Main.rand.NextFloat() * 0.400000005960464);
                int index3 = Gore.NewGore(this.position, Vector2.Zero, 375, Scale);
                Main.gore[index3].velocity *= 0.3f;
                int index4 = Gore.NewGore(this.position, Vector2.Zero, 376, Scale);
                Main.gore[index4].velocity *= 0.3f;
                int index5 = Gore.NewGore(this.position, Vector2.Zero, 377, Scale);
                Main.gore[index5].velocity *= 0.3f;
            }
            else if (this.type == 587)
            {
                Color rgb = Main.hslToRgb(this.ai[1], 1f, 0.5f);
                rgb.A = (byte) 200;
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(this.position, this.width, this.height, 76, 0.0f, 0.0f, 0, rgb, 1f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 1.2f;
                    Main.dust[index2].scale = 0.9f;
                    Main.dust[index2].velocity -= this.oldVelocity * 0.3f;
                    int index3 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8,
                        this.height - 8, 76, 0.0f, 0.0f, 0, rgb, 1.1f);
                    Main.dust[index3].noGravity = true;
                    Main.dust[index3].velocity *= 2f;
                }
            }
            else if (this.type == 572)
            {
                for (int index1 = 0; index1 < 15; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        40, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 100, new Color(), 1f);
                    Main.dust[index2].velocity *= 3f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].scale = 1.25f;
                    Main.dust[index2].position = (this.Center + this.position) / 2f;
                }
            }
            else if (this.type == 581)
            {
                for (int index = 0; index < 30; ++index)
                {
                    int Type = Utils.SelectRandom<int>(Main.rand, new int[3] {229, 229, 161});
                    Dust dust = Main.dust[
                        Dust.NewDust(this.position, this.width, this.height, Type, 0.0f, 0.0f, 0, new Color(), 1f)];
                    dust.noGravity = true;
                    dust.scale = 1.25f + Main.rand.NextFloat();
                    dust.fadeIn = 0.25f;
                    dust.velocity *= 2f;
                    dust.noLight = true;
                }
            }
            else if (this.type == 671)
            {
                for (int index = 0; index < 30; ++index)
                {
                    int Type = Utils.SelectRandom<int>(Main.rand, new int[3] {27, 27, 62});
                    Dust dust = Main.dust[
                        Dust.NewDust(this.position, this.width, this.height, Type, 0.0f, 0.0f, 0, new Color(), 1f)];
                    dust.noGravity = true;
                    dust.scale = 1.25f + Main.rand.NextFloat();
                    dust.fadeIn = 0.25f;
                    dust.velocity *= 2f;
                    dust.noLight = true;
                }
            }
            else if (this.type == 675)
            {
                for (int index = 0; index < 40; ++index)
                {
                    int Type = Utils.SelectRandom<int>(Main.rand,
                        new int[8]
                        {
                            27, 242, 73, 72, 71, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue
                        });
                    Dust dust = Main.dust[
                        Dust.NewDust(this.position, this.width, this.height, Type, 0.0f, 0.0f, 0, new Color(), 1f)];
                    dust.noGravity = true;
                    dust.scale = 1.25f + Main.rand.NextFloat();
                    dust.fadeIn = 0.25f;
                    dust.velocity *= 3f;
                    dust.noLight = true;
                }
            }
            else if (this.type == 676)
            {
                for (int index = 0; index < 120; ++index)
                {
                    int Type = Utils.SelectRandom<int>(Main.rand, new int[2] {4, 256});
                    Dust dust = Main.dust[
                        Dust.NewDust(this.position, this.width, this.height, Type, 0.0f, 0.0f, 100, new Color(), 1f)];
                    dust.scale = (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.600000023841858);
                    dust.fadeIn = 0.5f;
                    dust.velocity *= 4.5f;
                    dust.noLight = true;
                    if ((double) dust.velocity.Y > 0.0)
                        dust.velocity *= -0.5f;
                    if (dust.type == 4)
                        dust.color = new Color(80, 170, 40, 120);
                }

                for (int index = 0; index < 10; ++index)
                    Gore.NewGoreDirect(this.Center,
                        new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()),
                            (float) (-(double) Main.rand.NextFloat() * 5.0)), 1024, 1f);
                for (int index = 0; index < 10; ++index)
                    Gore.NewGoreDirect(this.Center,
                        new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()),
                            (float) (-(double) Main.rand.NextFloat() * 5.0)), 1025, 1f);
                for (int index = 0; index < 10; ++index)
                    Gore.NewGoreDirect(this.Center,
                        new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()),
                            (float) (-(double) Main.rand.NextFloat() * 5.0)), 1026, 1f);
                for (int index = 0; index < 20; ++index)
                    Gore.NewGoreDirect(this.Center,
                        new Vector2(MathHelper.Lerp(-0.5f, 0.5f, Main.rand.NextFloat()),
                            (float) (-(double) Main.rand.NextFloat() * 2.0)), 1026, 1f);
                if (Main.netMode != 2)
                {
                    Player player = Main.player[Main.myPlayer];
                    if (!player.dead && player.active && (double) (player.Center - this.Center).Length() < 300.0)
                        player.AddBuff(197, 900, false);
                }
            }
            else if (this.type == 686)
            {
                Microsoft.Xna.Framework.Rectangle hitbox = this.Hitbox;
                int index1 = 0;
                while (index1 < this.oldPos.Length / 2)
                {
                    hitbox.X = (int) this.oldPos[index1].X;
                    hitbox.Y = (int) this.oldPos[index1].Y;
                    for (int index2 = 0; index2 < 3; ++index2)
                    {
                        int Type = Utils.SelectRandom<int>(Main.rand, new int[3] {6, 55, 158});
                        int index3 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, Type,
                            (float) this.direction, -2.5f, 0, new Color(), 1f);
                        Main.dust[index3].alpha = 200;
                        Main.dust[index3].velocity *= 2.4f;
                        Main.dust[index3].scale += Main.rand.NextFloat();
                        Main.dust[index3].scale -= 0.5f;
                        if (Main.dust[index3].type == 55)
                            Main.dust[index3].color = Color.Lerp(Color.Red, Color.Gold, Main.rand.NextFloat());
                        Main.dust[index3].noLight = true;
                    }

                    index1 += 2;
                }

                int index4 = 10;
                while (index4 < this.oldPos.Length)
                {
                    hitbox.X = (int) this.oldPos[index4].X;
                    hitbox.Y = (int) this.oldPos[index4].Y;
                    for (int index2 = 0; index2 < 2; ++index2)
                    {
                        int Type = Utils.SelectRandom<int>(Main.rand, new int[1] {55});
                        int index3 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, Type,
                            (float) this.direction, -2.5f, 0, new Color(), 1f);
                        Main.dust[index3].alpha = 120;
                        Main.dust[index3].velocity *= 2.4f;
                        Main.dust[index3].scale += Main.rand.NextFloat() * 0.7f;
                        Main.dust[index3].scale -= 0.5f;
                        if (Main.dust[index3].type == 55)
                            Main.dust[index3].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
                        Main.dust[index3].noLight = true;
                    }

                    index4 += 2;
                }

                for (int index2 = 5; index2 < this.oldPos.Length; ++index2)
                {
                    hitbox.X = (int) this.oldPos[index2].X;
                    hitbox.Y = (int) this.oldPos[index2].Y;
                    for (int index3 = 0; index3 < 1; ++index3)
                    {
                        int Type = Utils.SelectRandom<int>(Main.rand, new int[1] {55});
                        int index5 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, Type,
                            (float) this.direction, -2.5f, 0, new Color(), 1f);
                        Main.dust[index5].alpha = 80;
                        Main.dust[index5].velocity *= 0.3f;
                        Main.dust[index5].velocity += this.velocity * 0.5f;
                        Main.dust[index5].scale += Main.rand.NextFloat() * 0.7f;
                        Main.dust[index5].scale -= 0.5f;
                        if (Main.dust[index5].type == 55)
                            Main.dust[index5].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
                        Main.dust[index5].noLight = true;
                    }
                }

                for (int index2 = 0; index2 < 30; ++index2)
                {
                    int Type = 228;
                    Dust dust = Main.dust[
                        Dust.NewDust(this.position, this.width, this.height, Type, 0.0f, 0.0f, 0, new Color(), 1f)];
                    dust.noGravity = true;
                    dust.scale = 1.25f + Main.rand.NextFloat();
                    dust.fadeIn = 1.5f;
                    dust.velocity *= 6f;
                    dust.noLight = true;
                }
            }

            if (this.type == 405)
            {
                Main.PlaySound(SoundID.Item54, this.position);
                Vector2 center = this.Center;
                for (int index1 = 0; index1 < 20; ++index1)
                {
                    int num = 10;
                    int index2 = Dust.NewDust(this.Center - Vector2.One * (float) num, num * 2, num * 2, 212, 0.0f,
                        0.0f, 0, new Color(), 1f);
                    Dust dust = Main.dust[index2];
                    Vector2 vector2 = Vector2.Normalize(dust.position - this.Center);
                    dust.position = this.Center + vector2 * (float) num * this.scale;
                    dust.velocity = index1 >= 30
                        ? vector2 * (float) Main.rand.Next(45, 91) / 10f
                        : vector2 * dust.velocity.Length();
                    dust.color = Main.hslToRgb((float) (0.400000005960464 + Main.rand.NextDouble() * 0.200000002980232),
                        0.9f, 0.5f);
                    dust.color = Color.Lerp(dust.color, Color.White, 0.3f);
                    dust.noGravity = true;
                    dust.scale = 0.7f;
                }
            }

            if (this.type == 501)
            {
                Main.PlaySound(13, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                int num1 = 20;
                this.position.X -= (float) num1;
                this.position.Y -= (float) num1;
                this.width += num1 * 2;
                this.height += num1 * 2;
                int num2 = num1 + 20;
                for (int index1 = 0; index1 < 20; ++index1)
                {
                    int index2 = Dust.NewDust(this.position, this.width, this.height, 188, 0.0f, 0.0f, 100, new Color(),
                        1.5f);
                    Main.dust[index2].velocity *= 0.5f;
                }

                for (int index1 = 0; index1 < 5; ++index1)
                {
                    int index2 =
                        Gore.NewGore(
                            new Vector2(this.position.X + (float) Main.rand.Next(this.width),
                                this.position.Y + (float) Main.rand.Next(this.height)), new Vector2(),
                            Main.rand.Next(435, 438), 1f);
                    Main.gore[index2].velocity *= 0.5f;
                    if (index1 == 0)
                    {
                        ++Main.gore[index2].velocity.X;
                        ++Main.gore[index2].velocity.Y;
                    }
                    else if (index1 == 1)
                    {
                        --Main.gore[index2].velocity.X;
                        ++Main.gore[index2].velocity.Y;
                    }
                    else if (index1 == 2)
                    {
                        ++Main.gore[index2].velocity.X;
                        --Main.gore[index2].velocity.Y;
                    }
                    else
                    {
                        --Main.gore[index2].velocity.X;
                        --Main.gore[index2].velocity.Y;
                    }

                    Main.gore[index2].velocity *= 0.5f;
                }

                this.position.X -= (float) num2;
                this.position.Y -= (float) num2;
                this.width += num2 * 2;
                this.height += num2 * 2;
                this.Damage();
            }

            if (this.type == 410)
            {
                Main.PlaySound(SoundID.Item54, this.position);
                Vector2 center = this.Center;
                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int num = (int) (10.0 * (double) this.ai[1]);
                    int index2 = Dust.NewDust(this.Center - Vector2.One * (float) num, num * 2, num * 2, 212, 0.0f,
                        0.0f, 0, new Color(), 1f);
                    Dust dust = Main.dust[index2];
                    Vector2 vector2 = Vector2.Normalize(dust.position - this.Center);
                    dust.position = this.Center + vector2 * (float) num * this.scale;
                    dust.velocity = index1 >= 30
                        ? vector2 * (float) Main.rand.Next(45, 91) / 10f
                        : vector2 * dust.velocity.Length();
                    dust.color = Main.hslToRgb((float) (0.400000005960464 + Main.rand.NextDouble() * 0.200000002980232),
                        0.9f, 0.5f);
                    dust.color = Color.Lerp(dust.color, Color.White, 0.3f);
                    dust.noGravity = true;
                    dust.scale = 0.7f;
                }
            }

            if (this.type == 629 && Main.netMode != 1)
            {
                switch (Main.npc[(int) this.ai[0]].type)
                {
                    case 422:
                        if (NPC.ShieldStrengthTowerVortex != 0)
                            Main.npc[(int) this.ai[0]].ai[3] = 1f;
                        NPC.ShieldStrengthTowerVortex = (int) MathHelper.Clamp(
                            (float) (NPC.ShieldStrengthTowerVortex - 1), 0.0f, (float) NPC.ShieldStrengthTowerMax);
                        break;
                    case 493:
                        if (NPC.ShieldStrengthTowerStardust != 0)
                            Main.npc[(int) this.ai[0]].ai[3] = 1f;
                        NPC.ShieldStrengthTowerStardust = (int) MathHelper.Clamp(
                            (float) (NPC.ShieldStrengthTowerStardust - 1), 0.0f, (float) NPC.ShieldStrengthTowerMax);
                        break;
                    case 507:
                        if (NPC.ShieldStrengthTowerNebula != 0)
                            Main.npc[(int) this.ai[0]].ai[3] = 1f;
                        NPC.ShieldStrengthTowerNebula = (int) MathHelper.Clamp(
                            (float) (NPC.ShieldStrengthTowerNebula - 1), 0.0f, (float) NPC.ShieldStrengthTowerMax);
                        break;
                    case 517:
                        if (NPC.ShieldStrengthTowerSolar != 0)
                            Main.npc[(int) this.ai[0]].ai[3] = 1f;
                        NPC.ShieldStrengthTowerSolar = (int) MathHelper.Clamp(
                            (float) (NPC.ShieldStrengthTowerSolar - 1), 0.0f, (float) NPC.ShieldStrengthTowerMax);
                        break;
                }

                Main.npc[(int) this.ai[0]].netUpdate = true;
                NetMessage.SendData(101, -1, -1, (NetworkText) null, 0, 0.0f, 0.0f, 0.0f, 0, 0, 0);
            }

            if (this.aiStyle == 105 && this.owner == Main.myPlayer && (double) this.ai[1] == 0.0)
            {
                Vector2 vector2_1 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
                vector2_1.Normalize();
                Vector2 vector2_2 = vector2_1 * 0.3f;
                Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_2.X, vector2_2.Y,
                    Main.rand.Next(569, 572), this.damage, 0.0f, this.owner, 0.0f, 0.0f);
            }

            if (this.type == 452)
            {
                Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, 103, 1f, 0.0f);
                this.position = this.Center;
                this.width = this.height = 144;
                this.position.X -= (float) (this.width / 2);
                this.position.Y -= (float) (this.height / 2);
                for (int index = 0; index < 4; ++index)
                    Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f,
                        100, new Color(), 1.5f);
                for (int index1 = 0; index1 < 40; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        229, 0.0f, 0.0f, 0, new Color(), 2.5f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                    int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        229, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index3].velocity *= 2f;
                    Main.dust[index3].noGravity = true;
                }

                for (int index1 = 0; index1 < 1; ++index1)
                {
                    int index2 =
                        Gore.NewGore(
                            this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f,
                                (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                    Main.gore[index2].velocity *= 0.3f;
                    Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
                    Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
                }

                this.Damage();
            }

            if (this.type == 454)
            {
                Main.PlaySound(4, (int) this.position.X, (int) this.position.Y, 6, 1f, 0.0f);
                this.position = this.Center;
                this.width = this.height = 208;
                this.position.X -= (float) (this.width / 2);
                this.position.Y -= (float) (this.height / 2);
                for (int index1 = 0; index1 < 7; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index2].position =
                        new Vector2((float) (this.width / 2), 0.0f).RotatedBy(6.28318548202515 * Main.rand.NextDouble(),
                            new Vector2()) * (float) Main.rand.NextDouble() + this.Center;
                }

                for (int index1 = 0; index1 < 60; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        229, 0.0f, 0.0f, 0, new Color(), 2.5f);
                    Main.dust[index2].position =
                        new Vector2((float) (this.width / 2), 0.0f).RotatedBy(6.28318548202515 * Main.rand.NextDouble(),
                            new Vector2()) * (float) Main.rand.NextDouble() + this.Center;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 1f;
                    int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        229, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index3].position =
                        new Vector2((float) (this.width / 2), 0.0f).RotatedBy(6.28318548202515 * Main.rand.NextDouble(),
                            new Vector2()) * (float) Main.rand.NextDouble() + this.Center;
                    Main.dust[index3].velocity *= 1f;
                    Main.dust[index3].noGravity = true;
                }

                for (int index1 = 0; index1 < 3; ++index1)
                {
                    int index2 =
                        Gore.NewGore(
                            this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f,
                                (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                    Main.gore[index2].velocity *= 0.3f;
                    Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
                    Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
                }

                this.Damage();
            }

            if (this.type == 467)
            {
                this.position = this.Center;
                this.width = this.height = 176;
                this.Center = this.position;
                this.Damage();
                Main.PlaySound(SoundID.Item14, this.position);
                for (int index1 = 0; index1 < 4; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                }

                for (int index1 = 0; index1 < 30; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                        0.0f, 0.0f, 200, new Color(), 3.7f);
                    Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                    int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                        0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index3].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    Main.dust[index3].velocity *= 2f;
                    Main.dust[index3].noGravity = true;
                    Main.dust[index3].fadeIn = 2.5f;
                }

                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                        0.0f, 0.0f, 0, new Color(), 2.7f);
                    Main.dust[index2].position = this.Center +
                                                 Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                                     .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                                                 (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                }

                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        31, 0.0f, 0.0f, 0, new Color(), 1.5f);
                    Main.dust[index2].position = this.Center +
                                                 Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                                     .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                                                 (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                }

                for (int index1 = 0; index1 < 2; ++index1)
                {
                    int index2 =
                        Gore.NewGore(
                            this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f,
                                (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                    Main.gore[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    Main.gore[index2].velocity *= 0.3f;
                    Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
                    Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
                }
            }

            if (this.type == 468)
            {
                this.position = this.Center;
                this.width = this.height = 176;
                this.Center = this.position;
                this.Damage();
                Main.PlaySound(SoundID.Item14, this.position);
                for (int index1 = 0; index1 < 4; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                }

                for (int index1 = 0; index1 < 20; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        27, 0.0f, 0.0f, 200, new Color(), 3.7f);
                    Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                    int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        27, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index3].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    Main.dust[index3].velocity *= 2f;
                    Main.dust[index3].noGravity = true;
                    Main.dust[index3].fadeIn = 2.5f;
                }

                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        27, 0.0f, 0.0f, 0, new Color(), 2.7f);
                    Main.dust[index2].position = this.Center +
                                                 Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                                     .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                                                 (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                }

                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        31, 0.0f, 0.0f, 0, new Color(), 1.5f);
                    Main.dust[index2].position = this.Center +
                                                 Vector2.UnitX.RotatedByRandom(3.14159274101257)
                                                     .RotatedBy((double) this.velocity.ToRotation(), new Vector2()) *
                                                 (float) this.width / 2f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                }

                for (int index1 = 0; index1 < 2; ++index1)
                {
                    int index2 =
                        Gore.NewGore(
                            this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f,
                                (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                    Main.gore[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) *
                                                 (float) Main.rand.NextDouble() * (float) this.width / 2f;
                    Main.gore[index2].velocity *= 0.3f;
                    Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
                    Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
                }
            }

            if (this.type == 485)
            {
                for (int index1 = 0; index1 < 15; ++index1)
                {
                    int index2 = Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 0, new Color(),
                        1f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity -= this.oldVelocity * (float) Main.rand.Next(20, 60) * 0.01f;
                }
            }
            else if (this.type == 484)
            {
                for (int index1 = 0; index1 < 5; ++index1)
                {
                    int index2 = Dust.NewDust(this.position, this.width, this.height, 78, 0.0f, 0.0f, 0, new Color(),
                        1f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity -= this.oldVelocity / 5f;
                    Main.dust[index2].scale = 0.85f;
                }
            }
            else if (this.type == 483)
            {
                Main.PlaySound(SoundID.Item14, this.position);
                if (this.owner == Main.myPlayer)
                {
                    int length = Main.rand.Next(4, 8);
                    int[] numArray = new int[length];
                    int maxValue = 0;
                    for (int index = 0; index < 200; ++index)
                    {
                        if (Main.npc[index].CanBeChasedBy((object) this, true) && Collision.CanHitLine(this.position,
                                this.width, this.height, Main.npc[index].position, Main.npc[index].width,
                                Main.npc[index].height))
                        {
                            numArray[maxValue] = index;
                            ++maxValue;
                            if (maxValue == length)
                                break;
                        }
                    }

                    if (maxValue > 1)
                    {
                        for (int index1 = 0; index1 < 100; ++index1)
                        {
                            int index2 = Main.rand.Next(maxValue);
                            int index3 = index2;
                            while (index3 == index2)
                                index3 = Main.rand.Next(maxValue);
                            int num = numArray[index2];
                            numArray[index2] = numArray[index3];
                            numArray[index3] = num;
                        }
                    }

                    Vector2 vector2_1 = new Vector2(-1f, -1f);
                    for (int index = 0; index < maxValue; ++index)
                    {
                        Vector2 vector2_2 = Main.npc[numArray[index]].Center - this.Center;
                        vector2_2.Normalize();
                        vector2_1 += vector2_2;
                    }

                    vector2_1.Normalize();
                    for (int index = 0; index < length; ++index)
                    {
                        float num = (float) Main.rand.Next(8, 15);
                        Vector2 vector2_2 = new Vector2((float) Main.rand.Next(-100, 101),
                            (float) Main.rand.Next(-100, 101));
                        vector2_2.Normalize();
                        if (maxValue > 0)
                        {
                            vector2_2 += vector2_1;
                            vector2_2.Normalize();
                        }

                        vector2_2 *= num;
                        if (maxValue > 0)
                        {
                            --maxValue;
                            vector2_2 = Main.npc[numArray[maxValue]].Center - this.Center;
                            vector2_2.Normalize();
                            vector2_2 *= num;
                        }

                        Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_2.X, vector2_2.Y, 484,
                            (int) ((double) this.damage * 0.7), this.knockBack * 0.7f, this.owner, 0.0f, 0.0f);
                    }
                }

                for (int index1 = 0; index1 < 20; ++index1)
                {
                    int index2 = Dust.NewDust(this.position, this.width, this.height, 78, 0.0f, 0.0f, 0, new Color(),
                        1f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 4f;
                }

                for (int index1 = 0; index1 < 7; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index2].velocity *= 0.9f;
                    Main.dust[index2].scale = 0.9f;
                }

                for (int index1 = 0; index1 < 3; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                        0.0f, 0.0f, 100, new Color(), 2.5f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                    int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                        0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index3].velocity *= 2f;
                }

                int index4 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                    Main.rand.Next(61, 64), 1f);
                Main.gore[index4].velocity *= 0.3f;
                Main.gore[index4].velocity.X += (float) Main.rand.Next(-1, 2);
                Main.gore[index4].velocity.Y += (float) Main.rand.Next(-1, 2);
                if (this.owner == Main.myPlayer)
                {
                    int num = 100;
                    this.position.X -= (float) (num / 2);
                    this.position.Y -= (float) (num / 2);
                    this.width += num;
                    ++this.height;
                    this.penetrate = -1;
                    this.Damage();
                }
            }

            if (this.type == 523)
            {
                Main.PlaySound(SoundID.Item54, this.position);
                for (int index1 = 0; index1 < 25; ++index1)
                {
                    int index2 = Dust.NewDust(this.position, this.width, this.height, 256, 0.0f, 0.0f, 0, new Color(),
                        1f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].position = (Main.dust[index2].position + this.position) / 2f;
                    Main.dust[index2].velocity = new Vector2((float) Main.rand.Next(-100, 101),
                        (float) Main.rand.Next(-100, 101));
                    Main.dust[index2].velocity.Normalize();
                    Main.dust[index2].velocity *= (float) Main.rand.Next(1, 30) * 0.1f;
                    Main.dust[index2].alpha = this.alpha;
                }
            }
            else if (this.type == 522)
            {
                Main.PlaySound(SoundID.Item118, this.position);
                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        254, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, new Color(), 0.5f);
                    if (Main.rand.Next(3) == 0)
                    {
                        Main.dust[index2].fadeIn =
                            (float) (0.75 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);
                        Main.dust[index2].scale =
                            (float) (0.25 + (double) Main.rand.Next(-10, 11) * 0.00499999988824129);
                        ++Main.dust[index2].type;
                    }
                    else
                        Main.dust[index2].scale =
                            (float) (1.0 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);

                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 1.25f;
                    Main.dust[index2].velocity -= this.oldVelocity / 10f;
                }
            }
            else if (this.type == 521)
            {
                Main.PlaySound(SoundID.Item110, this.position);
                for (int index1 = 0; index1 < 20; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        254, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, new Color(), 0.5f);
                    if (Main.rand.Next(3) == 0)
                    {
                        Main.dust[index2].fadeIn =
                            (float) (1.10000002384186 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);
                        Main.dust[index2].scale =
                            (float) (0.349999994039536 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);
                        ++Main.dust[index2].type;
                    }
                    else
                        Main.dust[index2].scale =
                            (float) (1.20000004768372 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);

                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 2.5f;
                    Main.dust[index2].velocity -= this.oldVelocity / 10f;
                }

                if (Main.myPlayer == this.owner)
                {
                    int num = Main.rand.Next(3, 6);
                    for (int index = 0; index < num; ++index)
                    {
                        Vector2 vector2 = new Vector2((float) Main.rand.Next(-100, 101),
                            (float) Main.rand.Next(-100, 101));
                        while ((double) vector2.X == 0.0 && (double) vector2.Y == 0.0)
                            vector2 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
                        vector2.Normalize();
                        vector2 *= (float) Main.rand.Next(70, 101) * 0.1f;
                        Projectile.NewProjectile(this.oldPosition.X + (float) (this.width / 2),
                            this.oldPosition.Y + (float) (this.height / 2), vector2.X, vector2.Y, 522,
                            (int) ((double) this.damage * 0.8), this.knockBack * 0.8f, this.owner, 0.0f, 0.0f);
                    }
                }
            }

            if (this.type == 520)
            {
                Main.PlaySound(SoundID.Item50, this.position);
                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        252, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, new Color(), 0.75f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity -= this.oldVelocity / 3f;
                }
            }

            Microsoft.Xna.Framework.Rectangle rect;
            if (this.type == 459 || this.type == 709)
            {
                int num1 = 3;
                int num2 = 10;
                int num3 = 0;
                if ((double) this.scale >= 1.0)
                {
                    this.position = this.Center;
                    this.width = this.height = 144;
                    this.Center = this.position;
                    num1 = 7;
                    num2 = 30;
                    num3 = 2;
                    this.Damage();
                }

                for (int index1 = 0; index1 < num1; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index2].position =
                        new Vector2((float) (this.width / 2), 0.0f).RotatedBy(6.28318548202515 * Main.rand.NextDouble(),
                            new Vector2()) * (float) Main.rand.NextDouble() + this.Center;
                }

                for (int index1 = 0; index1 < num2; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        226, 0.0f, 0.0f, 0, new Color(), 1.5f);
                    Main.dust[index2].position =
                        new Vector2((float) (this.width / 2), 0.0f).RotatedBy(6.28318548202515 * Main.rand.NextDouble(),
                            new Vector2()) * (float) Main.rand.NextDouble() + this.Center;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 1f;
                }

                for (int index1 = 0; index1 < num3; ++index1)
                {
                    int index2 =
                        Gore.NewGore(
                            this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f,
                                (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                    Main.gore[index2].velocity *= 0.3f;
                    Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
                    Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
                }

                if (this.type == 709 && Main.myPlayer == this.owner)
                {
                    Microsoft.Xna.Framework.Rectangle rectangle =
                        new Microsoft.Xna.Framework.Rectangle((int) this.Center.X - 40, (int) this.Center.Y - 40, 80,
                            80);
                    for (int index = 0; index < 1000; ++index)
                    {
                        if (index != this.whoAmI && Main.projectile[index].active &&
                            (Main.projectile[index].owner == this.owner && Main.projectile[index].type == 443))
                        {
                            rect = Main.projectile[index].getRect();
                            if (rect.Intersects(rectangle))
                            {
                                Main.projectile[index].ai[1] = 1f;
                                Main.projectile[index].velocity = (this.Center - Main.projectile[index].Center) / 5f;
                                Main.projectile[index].netUpdate = true;
                            }
                        }
                    }

                    int index1 = Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 443, this.damage,
                        0.0f, this.owner, 0.0f, 0.0f);
                    Main.projectile[index1].timeLeft = 30 * Main.rand.Next(2, 6);
                    float[] localAi = Main.projectile[index1].localAI;
                    int index2 = 0;
                    //Fix By GScience
                    localAi[index2] = Main.PlayTrackedSound((SoundStyle) SoundID.DD2_SkyDragonsFuryCircle, this.Center)
                        .ToFloat();
                }
            }

            if (this.owner != Main.myPlayer && this.type == 453 && Main.player[this.owner].mount.AbilityActive)
                Main.player[this.owner].mount.UseAbility(Main.player[this.owner], this.position, false);
            if (this.type == 441)
                Main.player[this.owner].mount.StopAbilityCharge();
            if (this.type == 444)
            {
                Main.PlaySound(SoundID.Item96, this.position);
                int num = Main.rand.Next(5, 9);
                for (int index1 = 0; index1 < num; ++index1)
                {
                    int index2 = Dust.NewDust(this.Center, 0, 0, 171, 0.0f, 0.0f, 100, new Color(), 1.4f);
                    Main.dust[index2].velocity *= 0.8f;
                    Main.dust[index2].position = Vector2.Lerp(Main.dust[index2].position, this.Center, 0.5f);
                    Main.dust[index2].noGravity = true;
                }

                if (this.owner == Main.myPlayer)
                {
                    Vector2 vector2_1 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY);
                    if ((double) Main.player[this.owner].gravDir == -1.0)
                        vector2_1.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y;
                    Vector2 vector2_2 = Vector2.Normalize(vector2_1 - this.Center) * this.localAI[1];
                    Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_2.X, vector2_2.Y,
                        (int) this.localAI[0], this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
                }
            }

            if (this.type == 472)
            {
                for (int index1 = 0; index1 < 20; ++index1)
                {
                    int index2 = Dust.NewDust(this.position, this.width, this.height, 30, 0.0f, 0.0f, 0, new Color(),
                        1f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 0.45f;
                    Main.dust[index2].velocity += this.velocity * 0.9f;
                }
            }

            if (this.type == 639 || this.type == 640)
            {
                int num1 = Main.rand.Next(5, 10);
                for (int index1 = 0; index1 < num1; ++index1)
                {
                    int index2 = Dust.NewDust(this.Center, 0, 0, 220, 0.0f, 0.0f, 100, new Color(), 0.5f);
                    Main.dust[index2].velocity *= 1.6f;
                    --Main.dust[index2].velocity.Y;
                    Main.dust[index2].position = Vector2.Lerp(Main.dust[index2].position, this.Center, 0.5f);
                    Main.dust[index2].noGravity = true;
                }

                if (this.owner == Main.myPlayer && this.type == 639)
                {
                    int num2 = timeLeft + 1;
                    int nextSlot = Projectile.GetNextSlot();
                    if (Main.ProjectileUpdateLoopIndex < nextSlot && Main.ProjectileUpdateLoopIndex != -1)
                        ++num2;
                    Vector2 vector2 = new Vector2(this.ai[0], this.ai[1]);
                    Projectile.NewProjectile(this.localAI[0], this.localAI[1], vector2.X, vector2.Y, 640, this.damage,
                        this.knockBack, this.owner, 0.0f, (float) num2);
                }
            }

            if (this.type == 684)
            {
                int num = Main.rand.Next(15, 25);
                for (int index1 = 0; index1 < num; ++index1)
                {
                    int index2 = Dust.NewDust(this.Center, 0, 0, 60, 0.0f, 0.0f, 100,
                        new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0), 1.3f);
                    Main.dust[index2].velocity *=
                        (float) (8.0 * (0.300000011920929 + 0.699999988079071 * (double) Main.rand.NextFloat()));
                    Main.dust[index2].fadeIn =
                        (float) (1.29999995231628 + (double) Main.rand.NextFloat() * 0.200000002980232);
                    Main.dust[index2].noLight = true;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].position += Main.dust[index2].velocity * 4f;
                }
            }

            if (this.type == 435)
            {
                int num = Main.rand.Next(5, 10);
                for (int index1 = 0; index1 < num; ++index1)
                {
                    int index2 = Dust.NewDust(this.Center, 0, 0, 226, 0.0f, 0.0f, 100, new Color(), 0.5f);
                    Main.dust[index2].velocity *= 1.6f;
                    --Main.dust[index2].velocity.Y;
                    Main.dust[index2].position = Vector2.Lerp(Main.dust[index2].position, this.Center, 0.5f);
                    Main.dust[index2].noGravity = true;
                }
            }

            if (this.type == 682)
            {
                int num = 22;
                for (int index1 = 0; index1 < num; ++index1)
                {
                    int index2 = Dust.NewDust(this.Center, 0, 0, 272, 0.0f, 0.0f, 0, new Color(), 0.5f);
                    Main.dust[index2].velocity *= 1.6f;
                    --Main.dust[index2].velocity.Y;
                    Main.dust[index2].position = Vector2.Lerp(Main.dust[index2].position, this.Center, 0.5f);
                }
            }

            if (this.type == 436)
            {
                int num = Main.rand.Next(5, 10);
                for (int index1 = 0; index1 < num; ++index1)
                {
                    int index2 = Dust.NewDust(this.Center, 0, 0, 220, 0.0f, 0.0f, 100, new Color(), 0.5f);
                    Main.dust[index2].velocity *= 1.6f;
                    --Main.dust[index2].velocity.Y;
                    Main.dust[index2].position = Vector2.Lerp(Main.dust[index2].position, this.Center, 0.5f);
                    Main.dust[index2].noGravity = true;
                }
            }

            if (this.type == 462)
            {
                int num = Main.rand.Next(5, 10);
                for (int index1 = 0; index1 < num; ++index1)
                {
                    int index2 = Dust.NewDust(this.Center, 0, 0, 229, 0.0f, 0.0f, 100, new Color(), 0.5f);
                    Main.dust[index2].velocity *= 1.6f;
                    --Main.dust[index2].velocity.Y;
                    Main.dust[index2].position -= Vector2.One * 4f;
                    Main.dust[index2].position = Vector2.Lerp(Main.dust[index2].position, this.Center, 0.5f);
                    Main.dust[index2].noGravity = true;
                }
            }

            if (this.type == 442)
            {
                Main.PlaySound(SoundID.Item94, this.position);
                int num = Main.rand.Next(3, 7);
                for (int index1 = 0; index1 < num; ++index1)
                {
                    int index2 = Dust.NewDust(this.position, this.width, this.height, 135, 0.0f, 0.0f, 100, new Color(),
                        2.1f);
                    Main.dust[index2].velocity *= 2f;
                    Main.dust[index2].noGravity = true;
                }

                if (Main.myPlayer == this.owner)
                {
                    Microsoft.Xna.Framework.Rectangle rectangle =
                        new Microsoft.Xna.Framework.Rectangle((int) this.Center.X - 40, (int) this.Center.Y - 40, 80,
                            80);
                    for (int index = 0; index < 1000; ++index)
                    {
                        if (index != this.whoAmI && Main.projectile[index].active &&
                            (Main.projectile[index].owner == this.owner && Main.projectile[index].type == 443))
                        {
                            rect = Main.projectile[index].getRect();
                            if (rect.Intersects(rectangle))
                            {
                                Main.projectile[index].ai[1] = 1f;
                                Main.projectile[index].velocity = (this.Center - Main.projectile[index].Center) / 5f;
                                Main.projectile[index].netUpdate = true;
                            }
                        }
                    }

                    Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 443, this.damage, 0.0f,
                        this.owner, 0.0f, 0.0f);
                }
            }

            if (this.type == 440)
            {
                int num = Main.rand.Next(3, 7);
                for (int index1 = 0; index1 < num; ++index1)
                {
                    int index2 = Dust.NewDust(this.Center - this.velocity / 2f, 0, 0, 135, 0.0f, 0.0f, 100, new Color(),
                        2.1f);
                    Main.dust[index2].velocity *= 2f;
                    Main.dust[index2].noGravity = true;
                }
            }

            if (this.type == 606)
            {
                int num = Main.rand.Next(3, 7);
                for (int index1 = 0; index1 < num; ++index1)
                {
                    int index2 = Dust.NewDust(this.Center - this.velocity / 2f, 0, 0, 182, 0.0f, 0.0f, 100, new Color(),
                        1.6f);
                    Main.dust[index2].velocity *= 1.5f;
                    Main.dust[index2].noGravity = true;
                }
            }

            if (this.type == 449)
            {
                int num = Main.rand.Next(3, 7);
                for (int index1 = 0; index1 < num; ++index1)
                {
                    int index2 = Dust.NewDust(this.Center - this.velocity / 2f, 0, 0, 228, 0.0f, 0.0f, 100, new Color(),
                        2.1f);
                    Main.dust[index2].velocity *= 2f;
                    Main.dust[index2].noGravity = true;
                }
            }

            if (this.type == 495)
            {
                for (int index1 = 0; index1 < 15; ++index1)
                {
                    int index2 = Dust.NewDust(this.Center, 10, 10, 27, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity -= this.oldVelocity * 0.3f;
                }
            }

            if (this.type == 497)
            {
                for (int index1 = 0; index1 < 15; ++index1)
                {
                    int index2 = Dust.NewDust(this.Center, 10, 10, 27, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 2f;
                    Main.dust[index2].velocity -= this.oldVelocity * 0.3f;
                    Main.dust[index2].scale += (float) Main.rand.Next(150) * (1f / 1000f);
                }
            }

            if (this.type == 448)
            {
                Main.PlaySound(SoundID.Item14, this.position);
                this.position = this.Center;
                this.width = this.height = 112;
                this.position.X -= (float) (this.width / 2);
                this.position.Y -= (float) (this.height / 2);
                for (int index = 0; index < 4; ++index)
                    Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f,
                        100, new Color(), 1.5f);
                for (int index1 = 0; index1 < 40; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        228, 0.0f, 0.0f, 0, new Color(), 2.5f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                    int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        228, 0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index3].velocity *= 2f;
                    Main.dust[index3].noGravity = true;
                }

                for (int index1 = 0; index1 < 1; ++index1)
                {
                    int index2 =
                        Gore.NewGore(
                            this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f,
                                (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                    Main.gore[index2].velocity *= 0.3f;
                    Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
                    Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
                }

                this.Damage();
            }

            if (this.type == 616)
            {
                Main.PlaySound(SoundID.Item14, this.position);
                this.position = this.Center;
                this.width = this.height = 80;
                this.position.X -= (float) (this.width / 2);
                this.position.Y -= (float) (this.height / 2);
                for (int index = 0; index < 4; ++index)
                    Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f,
                        100, new Color(), 1.5f);
                for (int index1 = 0; index1 < 40; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        229, 0.0f, 0.0f, 200, new Color(), 2.5f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 2f;
                    int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        229, 0.0f, 0.0f, 200, new Color(), 1.5f);
                    Main.dust[index3].velocity *= 1.2f;
                    Main.dust[index3].noGravity = true;
                }

                for (int index1 = 0; index1 < 1; ++index1)
                {
                    int index2 =
                        Gore.NewGore(
                            this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f,
                                (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                    Main.gore[index2].velocity *= 0.3f;
                    Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
                    Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
                }

                this.Damage();
            }

            if (this.type == 502)
            {
                Vector2 vector2 = new Vector2((float) this.width, (float) this.height) / 2f;
                for (int index1 = 0; index1 < this.oldPos.Length; ++index1)
                {
                    if (!(this.oldPos[index1] == Vector2.Zero))
                    {
                        int index2 = Dust.NewDust(this.oldPos[index1] + vector2, 0, 0, 66, 0.0f, 0.0f, 150,
                            Color.Transparent, 0.7f);
                        Main.dust[index2].color = Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f);
                        Main.dust[index2].noGravity = true;
                    }
                }
            }

            if (this.type == 510)
            {
                Main.PlaySound(SoundID.Item107, this.position);
                Gore.NewGore(this.Center, -this.oldVelocity * 0.2f, 704, 1f);
                Gore.NewGore(this.Center, -this.oldVelocity * 0.2f, 705, 1f);
                if (this.owner == Main.myPlayer)
                {
                    int num = Main.rand.Next(20, 31);
                    for (int index = 0; index < num; ++index)
                    {
                        Vector2 vector2 = new Vector2((float) Main.rand.Next(-100, 101),
                            (float) Main.rand.Next(-100, 101));
                        vector2.Normalize();
                        vector2 *= (float) Main.rand.Next(10, 201) * 0.01f;
                        Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2.X, vector2.Y,
                            511 + Main.rand.Next(3), this.damage, 1f, this.owner, 0.0f, (float) Main.rand.Next(-45, 1));
                    }
                }
            }

            if (this.type == 408)
            {
                for (int index1 = 0; index1 < 15; ++index1)
                {
                    int index2 = Dust.NewDust(this.Center - Vector2.One * 10f, 50, 50, 5, 0.0f, -2f, 0, new Color(),
                        1f);
                    Main.dust[index2].velocity /= 2f;
                }

                int num = 10;
                int index3 = Gore.NewGore(this.Center, this.velocity * 0.8f, 584, 1f);
                Main.gore[index3].timeLeft /= num;
                int index4 = Gore.NewGore(this.Center, this.velocity * 0.9f, 585, 1f);
                Main.gore[index4].timeLeft /= num;
                int index5 = Gore.NewGore(this.Center, this.velocity * 1f, 586, 1f);
                Main.gore[index5].timeLeft /= num;
            }

            if (this.type == 385)
            {
                Main.PlaySound(4, (int) this.Center.X, (int) this.Center.Y, 19, 1f, 0.0f);
                int num1 = 36;
                for (int index1 = 0; index1 < num1; ++index1)
                {
                    Vector2 vector2_1 =
                        (Vector2.Normalize(this.velocity) * new Vector2((float) this.width / 2f, (float) this.height) *
                         0.75f).RotatedBy((double) (index1 - (num1 / 2 - 1)) * 6.28318548202515 / (double) num1,
                            new Vector2()) + this.Center;
                    Vector2 vector2_2 = vector2_1 - this.Center;
                    int index2 = Dust.NewDust(vector2_1 + vector2_2, 0, 0, 172, vector2_2.X * 2f, vector2_2.Y * 2f, 100,
                        new Color(), 1.4f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].noLight = true;
                    Main.dust[index2].velocity = vector2_2;
                }

                if (this.owner == Main.myPlayer)
                {
                    if ((double) this.ai[1] < 1.0)
                    {
                        int index = Projectile.NewProjectile(this.Center.X - (float) (this.direction * 30),
                            this.Center.Y - 4f, (float) -this.direction * 0.01f, 0.0f, 384, Main.expertMode ? 25 : 40,
                            4f, this.owner, 16f, 15f);
                        Main.projectile[index].netUpdate = true;
                    }
                    else
                    {
                        int num2 = (int) ((double) this.Center.Y / 16.0);
                        int index1 = (int) ((double) this.Center.X / 16.0);
                        int num3 = 100;
                        if (index1 < 10)
                            index1 = 10;
                        if (index1 > Main.maxTilesX - 10)
                            index1 = Main.maxTilesX - 10;
                        if (num2 < 10)
                            num2 = 10;
                        if (num2 > Main.maxTilesY - num3 - 10)
                            num2 = Main.maxTilesY - num3 - 10;
                        for (int index2 = num2; index2 < num2 + num3; ++index2)
                        {
                            Tile tile = Main.tile[index1, index2];
                            if (tile.active() && (Main.tileSolid[(int) tile.type] || tile.liquid != (byte) 0))
                            {
                                num2 = index2;
                                break;
                            }
                        }

                        int Damage = Main.expertMode ? 50 : 80;
                        int index3 = Projectile.NewProjectile((float) (index1 * 16 + 8), (float) (num2 * 16 - 24), 0.0f,
                            0.0f, 386, Damage, 4f, Main.myPlayer, 16f, 24f);
                        Main.projectile[index3].netUpdate = true;
                    }
                }
            }
            else if (this.type >= 424 && this.type <= 426)
            {
                Main.PlaySound(SoundID.Item89, this.position);
                this.position.X += (float) (this.width / 2);
                this.position.Y += (float) (this.height / 2);
                this.width = (int) (128.0 * (double) this.scale);
                this.height = (int) (128.0 * (double) this.scale);
                this.position.X -= (float) (this.width / 2);
                this.position.Y -= (float) (this.height / 2);
                for (int index = 0; index < 8; ++index)
                    Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f,
                        100, new Color(), 1.5f);
                for (int index1 = 0; index1 < 32; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                        0.0f, 0.0f, 100, new Color(), 2.5f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 3f;
                    int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6,
                        0.0f, 0.0f, 100, new Color(), 1.5f);
                    Main.dust[index3].velocity *= 2f;
                    Main.dust[index3].noGravity = true;
                }

                for (int index1 = 0; index1 < 2; ++index1)
                {
                    int index2 =
                        Gore.NewGore(
                            this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f,
                                (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                    Main.gore[index2].velocity *= 0.3f;
                    Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
                    Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
                }

                if (this.owner == Main.myPlayer)
                {
                    this.localAI[1] = -1f;
                    this.maxPenetrate = 0;
                    this.Damage();
                }

                for (int index1 = 0; index1 < 5; ++index1)
                {
                    int index2 = Dust.NewDust(this.position, this.width, this.height,
                        Utils.SelectRandom<int>(Main.rand, new int[3] {6, 259, 158}), 2.5f * (float) this.direction,
                        -2.5f, 0, new Color(), 1f);
                    Main.dust[index2].alpha = 200;
                    Main.dust[index2].velocity *= 2.4f;
                    Main.dust[index2].scale += Main.rand.NextFloat();
                }
            }

            if (this.type == 399)
            {
                Main.PlaySound(13, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                Vector2 vector2 = new Vector2(20f, 20f);
                for (int index = 0; index < 5; ++index)
                    Dust.NewDust(this.Center - vector2 / 2f, (int) vector2.X, (int) vector2.Y, 12, 0.0f, 0.0f, 0,
                        Color.Red, 1f);
                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(this.Center - vector2 / 2f, (int) vector2.X, (int) vector2.Y, 31, 0.0f,
                        0.0f, 100, new Color(), 1.5f);
                    Main.dust[index2].velocity *= 1.4f;
                }

                for (int index1 = 0; index1 < 20; ++index1)
                {
                    int index2 = Dust.NewDust(this.Center - vector2 / 2f, (int) vector2.X, (int) vector2.Y, 6, 0.0f,
                        0.0f, 100, new Color(), 2.5f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 5f;
                    int index3 = Dust.NewDust(this.Center - vector2 / 2f, (int) vector2.X, (int) vector2.Y, 6, 0.0f,
                        0.0f, 100, new Color(), 1.5f);
                    Main.dust[index3].velocity *= 3f;
                }

                if (Main.myPlayer == this.owner)
                {
                    for (int index = 0; index < 6; ++index)
                    {
                        float SpeedX =
                            (float) (-(double) this.velocity.X * (double) Main.rand.Next(20, 50) * 0.00999999977648258 +
                                     (double) Main.rand.Next(-20, 21) * 0.400000005960464);
                        float SpeedY =
                            (float) (-(double) Math.Abs(this.velocity.Y) * (double) Main.rand.Next(30, 50) *
                                     0.00999999977648258 + (double) Main.rand.Next(-20, 5) * 0.400000005960464);
                        Projectile.NewProjectile(this.Center.X + SpeedX, this.Center.Y + SpeedY, SpeedX, SpeedY,
                            400 + Main.rand.Next(3), (int) ((double) this.damage * 0.5), 0.0f, this.owner, 0.0f, 0.0f);
                    }
                }
            }

            if (this.type == 384 || this.type == 386)
            {
                for (int index1 = 0; index1 < 20; ++index1)
                {
                    int index2 = Dust.NewDust(this.position, this.width, this.height, 212, (float) (this.direction * 2),
                        0.0f, 100, new Color(), 1.4f);
                    Dust dust = Main.dust[index2];
                    dust.color = Color.CornflowerBlue;
                    dust.color = Color.Lerp(dust.color, Color.White, 0.3f);
                    dust.noGravity = true;
                }
            }

            if (this.type == 507 || this.type == 508)
            {
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                Vector2 position = this.position;
                Vector2 oldVelocity = this.oldVelocity;
                oldVelocity.Normalize();
                Vector2 Position = position + oldVelocity * 16f;
                for (int index1 = 0; index1 < 20; ++index1)
                {
                    int index2 = Dust.NewDust(Position, this.width, this.height, 81, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index2].position = (Main.dust[index2].position + this.Center) / 2f;
                    Main.dust[index2].velocity += this.oldVelocity * 0.4f;
                    Main.dust[index2].velocity *= 0.5f;
                    Main.dust[index2].noGravity = true;
                    Position -= oldVelocity * 8f;
                }
            }

            if (this.type == 598)
            {
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                Vector2 position = this.position;
                Vector2 rotationVector2 = (this.rotation - 1.570796f).ToRotationVector2();
                Vector2 Position = position + rotationVector2 * 16f;
                for (int index1 = 0; index1 < 20; ++index1)
                {
                    int index2 = Dust.NewDust(Position, this.width, this.height, 81, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index2].position = (Main.dust[index2].position + this.Center) / 2f;
                    Main.dust[index2].velocity += rotationVector2 * 2f;
                    Main.dust[index2].velocity *= 0.5f;
                    Main.dust[index2].noGravity = true;
                    Position -= rotationVector2 * 8f;
                }
            }

            if (this.type == 1 || this.type == 81 || this.type == 98)
            {
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                for (int index = 0; index < 10; ++index)
                    Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 7, 0.0f, 0.0f,
                        0, new Color(), 1f);
            }

            if (this.type == 336 || this.type == 345)
            {
                for (int index1 = 0; index1 < 6; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        196, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].scale = this.scale;
                }
            }

            if (this.type == 358)
            {
                this.velocity = this.oldVelocity * 0.2f;
                for (int index1 = 0; index1 < 100; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        211, 0.0f, 0.0f, 75, new Color(), 1.2f);
                    if (Main.rand.Next(2) == 0)
                        Main.dust[index2].alpha += 25;
                    if (Main.rand.Next(2) == 0)
                        Main.dust[index2].alpha += 25;
                    if (Main.rand.Next(2) == 0)
                        Main.dust[index2].alpha += 25;
                    if (Main.rand.Next(2) == 0)
                        Main.dust[index2].scale = 0.6f;
                    else
                        Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 0.3f;
                    Main.dust[index2].velocity += this.velocity;
                    Main.dust[index2].velocity *=
                        (float) (1.0 + (double) Main.rand.Next(-100, 101) * 0.00999999977648258);
                    Main.dust[index2].velocity.X += (float) Main.rand.Next(-50, 51) * 0.015f;
                    Main.dust[index2].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.015f;
                    Main.dust[index2].position = this.Center;
                }
            }

            if (this.type == 406)
            {
                int Alpha = 175;
                Color newColor = new Color(0, 80, (int) byte.MaxValue, 100);
                this.velocity = this.oldVelocity * 0.2f;
                for (int index1 = 0; index1 < 40; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 4,
                        0.0f, 0.0f, Alpha, newColor, 1.6f);
                    if (Main.rand.Next(2) == 0)
                        Main.dust[index2].alpha += 25;
                    if (Main.rand.Next(2) == 0)
                        Main.dust[index2].alpha += 25;
                    if (Main.rand.Next(2) == 0)
                        Main.dust[index2].alpha += 25;
                    if (Main.rand.Next(2) == 0)
                        Main.dust[index2].scale = 0.6f;
                    else
                        Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 0.3f;
                    Main.dust[index2].velocity += this.velocity;
                    Main.dust[index2].velocity *=
                        (float) (1.0 + (double) Main.rand.Next(-100, 101) * 0.00999999977648258);
                    Main.dust[index2].velocity.X += (float) Main.rand.Next(-50, 51) * 0.015f;
                    Main.dust[index2].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.015f;
                    Main.dust[index2].position = this.Center;
                }
            }

            if (this.type == 344)
            {
                for (int index1 = 0; index1 < 3; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        197, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].scale = this.scale;
                }
            }
            else if (this.type == 343)
            {
                Main.PlaySound(SoundID.Item27, this.position);
                for (int index1 = 4; index1 < 31; ++index1)
                {
                    int index2 = Dust.NewDust(
                        new Vector2(this.oldPosition.X - this.oldVelocity.X * (30f / (float) index1),
                            this.oldPosition.Y - this.oldVelocity.Y * (30f / (float) index1)), 8, 8, 197,
                        this.oldVelocity.X, this.oldVelocity.Y, 100, new Color(), 1.2f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 0.5f;
                }
            }
            else if (this.type == 349)
            {
                Main.PlaySound(SoundID.Item27, this.position);
                for (int index1 = 0; index1 < 3; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        76, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].noLight = true;
                    Main.dust[index2].scale = 0.7f;
                }
            }

            if (this.type == 323)
            {
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                for (int index1 = 0; index1 < 20; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 7,
                        0.0f, 0.0f, 0, new Color(), 1f);
                    if (Main.rand.Next(2) == 0)
                    {
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].scale = 1.3f;
                        Main.dust[index2].velocity *= 1.5f;
                        Main.dust[index2].velocity -= this.oldVelocity * 0.5f;
                        Main.dust[index2].velocity *= 1.5f;
                    }
                    else
                    {
                        Main.dust[index2].velocity *= 0.75f;
                        Main.dust[index2].velocity -= this.oldVelocity * 0.25f;
                        Main.dust[index2].scale = 0.8f;
                    }
                }
            }

            if (this.type == 589)
            {
                Main.PlaySound(SoundID.Item27, this.position);
                Color newColor = Color.Red;
                if ((double) this.ai[1] == 1.0)
                    newColor = Color.Green;
                if ((double) this.ai[1] == 2.0)
                    newColor = Color.Purple;
                if ((double) this.ai[1] == 3.0)
                    newColor = Color.Gold;
                if ((double) this.ai[1] == 4.0)
                    newColor = Color.White;
                newColor.A = (byte) 100;
                for (int index1 = 0; index1 < 30; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        11, 0.0f, 0.0f, 0, newColor, 1f);
                    Main.dust[index2].velocity *= (float) (1.0 + (double) Main.rand.NextFloat() * 1.0);
                    if (index1 < 10)
                    {
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 0.5f;
                    }
                }
            }

            if (this.type == 346)
            {
                Main.PlaySound(SoundID.Item27, this.position);
                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int Type = 10;
                    if ((double) this.ai[1] == 1.0)
                        Type = 4;
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        Type, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index2].noGravity = true;
                }
            }

            if (this.type == 335)
            {
                Main.PlaySound(SoundID.Item27, this.position);
                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        90 - (int) this.ai[1], 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index2].noLight = true;
                    Main.dust[index2].scale = 0.8f;
                }
            }

            if (this.type == 318)
            {
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        30, 0.0f, 0.0f, 0, new Color(), 1f);
                    if (Main.rand.Next(2) == 0)
                        Main.dust[index2].noGravity = true;
                }
            }

            if (this.type == 378)
            {
                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        30, 0.0f, 0.0f, 0, new Color(), 1f);
                    if (Main.rand.Next(2) == 0)
                        Main.dust[index2].noGravity = true;
                }
            }
            else if (this.type == 311)
            {
                for (int index1 = 0; index1 < 5; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        189, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index2].scale = 0.85f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity += this.velocity * 0.5f;
                }
            }
            else if (this.type == 316)
            {
                for (int index1 = 0; index1 < 5; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        195, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index2].scale = 0.85f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity += this.velocity * 0.5f;
                }
            }
            else if (this.type == 184 || this.type == 195)
            {
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                for (int index = 0; index < 5; ++index)
                    Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 7, 0.0f, 0.0f,
                        0, new Color(), 1f);
            }
            else if (this.type == 275 || this.type == 276)
            {
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                for (int index = 0; index < 5; ++index)
                    Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 7, 0.0f, 0.0f,
                        0, new Color(), 1f);
            }
            else if (this.type == 291)
            {
                if (this.owner == Main.myPlayer)
                    Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 292, this.damage, this.knockBack,
                        this.owner, 0.0f, 0.0f);
            }
            else if (this.type == 295)
            {
                if (this.owner == Main.myPlayer)
                    Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 296,
                        (int) ((double) this.damage * 0.65), this.knockBack, this.owner, 0.0f, 0.0f);
            }
            else if (this.type == 270)
            {
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 27, 1f, 0.0f);
                if ((double) this.ai[0] < 0.0)
                {
                    for (int index1 = 0; index1 < 20; ++index1)
                    {
                        int index2 = Dust.NewDust(this.position, this.width, this.height, 26, 0.0f, 0.0f, 100,
                            new Color(), 1f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 1.2f;
                        Main.dust[index2].scale = 1.3f;
                        Main.dust[index2].velocity -= this.oldVelocity * 0.3f;
                        int index3 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f),
                            this.width - 8, this.height - 8, 5, 0.0f, 0.0f, 100, new Color(), 1.5f);
                        Main.dust[index3].noGravity = true;
                        Main.dust[index3].velocity *= 3f;
                    }
                }
                else
                {
                    for (int index1 = 0; index1 < 20; ++index1)
                    {
                        int index2 = Dust.NewDust(this.position, this.width, this.height, 26, 0.0f, 0.0f, 100,
                            new Color(), 1f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 1.2f;
                        Main.dust[index2].scale = 1.3f;
                        Main.dust[index2].velocity -= this.oldVelocity * 0.3f;
                        int index3 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f),
                            this.width - 8, this.height - 8, 6, 0.0f, 0.0f, 100, new Color(), 2f);
                        Main.dust[index3].noGravity = true;
                        Main.dust[index3].velocity *= 3f;
                    }
                }
            }
            else if (this.type == 265)
            {
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 27, 1f, 0.0f);
                for (int index1 = 0; index1 < 15; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        163, 0.0f, 0.0f, 100, new Color(), 1.2f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 1.2f;
                    Main.dust[index2].velocity -= this.oldVelocity * 0.3f;
                }
            }
            else if (this.type == 355)
            {
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 27, 1f, 0.0f);
                for (int index1 = 0; index1 < 15; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        205, 0.0f, 0.0f, 100, new Color(), 1.2f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 1.2f;
                    Main.dust[index2].velocity -= this.oldVelocity * 0.3f;
                }
            }
            else if (this.type == 304)
            {
                for (int index1 = 0; index1 < 3; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        182, 0.0f, 0.0f, 100, new Color(), 0.8f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 1.2f;
                    Main.dust[index2].velocity -= this.oldVelocity * 0.3f;
                }
            }
            else if (this.type == 263)
            {
                Main.PlaySound(SoundID.Item27, this.position);
                for (int index1 = 0; index1 < 15; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        92, this.velocity.X, this.velocity.Y, Main.rand.Next(0, 101), new Color(),
                        (float) (1.0 + (double) Main.rand.Next(40) * 0.00999999977648258));
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 2f;
                }
            }
            else if (this.type == 261)
            {
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                for (int index = 0; index < 5; ++index)
                    Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 148, 0.0f,
                        0.0f, 0, new Color(), 1f);
            }
            else if (this.type == 229)
            {
                for (int index1 = 0; index1 < 25; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        157, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 1.5f;
                    Main.dust[index2].scale = 1.5f;
                }
            }
            else if (this.type == 239)
            {
                int index = Dust.NewDust(
                    new Vector2(this.position.X, (float) ((double) this.position.Y + (double) this.height - 2.0)), 2, 2,
                    154, 0.0f, 0.0f, 0, new Color(), 1f);
                Main.dust[index].position.X -= 2f;
                Main.dust[index].alpha = 38;
                Main.dust[index].velocity *= 0.1f;
                Main.dust[index].velocity += -this.oldVelocity * 0.25f;
                Main.dust[index].scale = 0.95f;
            }
            else if (this.type == 245)
            {
                int index = Dust.NewDust(
                    new Vector2(this.position.X, (float) ((double) this.position.Y + (double) this.height - 2.0)), 2, 2,
                    114, 0.0f, 0.0f, 0, new Color(), 1f);
                Main.dust[index].noGravity = true;
                Main.dust[index].position.X -= 2f;
                Main.dust[index].alpha = 38;
                Main.dust[index].velocity *= 0.1f;
                Main.dust[index].velocity += -this.oldVelocity * 0.25f;
                Main.dust[index].scale = 0.95f;
            }
            else if (this.type == 264)
            {
                int index = Dust.NewDust(
                    new Vector2(this.position.X, (float) ((double) this.position.Y + (double) this.height - 2.0)), 2, 2,
                    54, 0.0f, 0.0f, 0, new Color(), 1f);
                Main.dust[index].noGravity = true;
                Main.dust[index].position.X -= 2f;
                Main.dust[index].alpha = 38;
                Main.dust[index].velocity *= 0.1f;
                Main.dust[index].velocity += -this.oldVelocity * 0.25f;
                Main.dust[index].scale = 0.95f;
            }
            else if (this.type == 206 || this.type == 225)
            {
                Main.PlaySound(6, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                for (int index = 0; index < 5; ++index)
                    Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40, 0.0f, 0.0f,
                        0, new Color(), 1f);
            }
            else if (this.type == 227)
            {
                Main.PlaySound(6, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                for (int index1 = 0; index1 < 15; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        157, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity += this.oldVelocity;
                    Main.dust[index2].scale = 1.5f;
                }
            }
            else if (this.type == 237 && this.owner == Main.myPlayer)
                Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 238, this.damage, this.knockBack,
                    this.owner, 0.0f, 0.0f);
            else if (this.type == 243 && this.owner == Main.myPlayer)
                Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 244, this.damage, this.knockBack,
                    this.owner, 0.0f, 0.0f);
            else if (this.type == 120)
            {
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 =
                        Dust.NewDust(new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y),
                            this.width, this.height, 67, this.velocity.X, this.velocity.Y, 100, new Color(), 1f);
                    if (index1 < 5)
                        Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 0.2f;
                }
            }
            else if (this.type == 181 || this.type == 189 || this.type == 566)
            {
                for (int index1 = 0; index1 < 6; ++index1)
                {
                    int index2 = Dust.NewDust(this.position, this.width, this.height, 150, this.velocity.X,
                        this.velocity.Y, 50, new Color(), 1f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].scale = 1f;
                }
            }
            else if (this.type == 178)
            {
                for (int index1 = 0; index1 < 85; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        Main.rand.Next(139, 143), this.velocity.X, this.velocity.Y, 0, new Color(), 1.2f);
                    Main.dust[index2].velocity.X += (float) Main.rand.Next(-50, 51) * 0.01f;
                    Main.dust[index2].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.01f;
                    Main.dust[index2].velocity.X *=
                        (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                    Main.dust[index2].velocity.Y *=
                        (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                    Main.dust[index2].velocity.X += (float) Main.rand.Next(-50, 51) * 0.05f;
                    Main.dust[index2].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.05f;
                    Main.dust[index2].scale *= (float) (1.0 + (double) Main.rand.Next(-30, 31) * 0.00999999977648258);
                }

                for (int index1 = 0; index1 < 40; ++index1)
                {
                    int index2 = Gore.NewGore(this.position, this.velocity, Main.rand.Next(276, 283), 1f);
                    Main.gore[index2].velocity.X += (float) Main.rand.Next(-50, 51) * 0.01f;
                    Main.gore[index2].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.01f;
                    Main.gore[index2].velocity.X *=
                        (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                    Main.gore[index2].velocity.Y *=
                        (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                    Main.gore[index2].scale *= (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.00999999977648258);
                    Main.gore[index2].velocity.X += (float) Main.rand.Next(-50, 51) * 0.05f;
                    Main.gore[index2].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.05f;
                }
            }
            else if (this.type == 289)
            {
                for (int index1 = 0; index1 < 30; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        Main.rand.Next(139, 143), this.velocity.X, this.velocity.Y, 0, new Color(), 1.2f);
                    Main.dust[index2].velocity.X += (float) Main.rand.Next(-50, 51) * 0.01f;
                    Main.dust[index2].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.01f;
                    Main.dust[index2].velocity.X *=
                        (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                    Main.dust[index2].velocity.Y *=
                        (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                    Main.dust[index2].velocity.X += (float) Main.rand.Next(-50, 51) * 0.05f;
                    Main.dust[index2].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.05f;
                    Main.dust[index2].scale *= (float) (1.0 + (double) Main.rand.Next(-30, 31) * 0.00999999977648258);
                }

                for (int index1 = 0; index1 < 15; ++index1)
                {
                    int index2 = Gore.NewGore(this.position, this.velocity, Main.rand.Next(276, 283), 1f);
                    Main.gore[index2].velocity.X += (float) Main.rand.Next(-50, 51) * 0.01f;
                    Main.gore[index2].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.01f;
                    Main.gore[index2].velocity.X *=
                        (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                    Main.gore[index2].velocity.Y *=
                        (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                    Main.gore[index2].scale *= (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.00999999977648258);
                    Main.gore[index2].velocity.X += (float) Main.rand.Next(-50, 51) * 0.05f;
                    Main.gore[index2].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.05f;
                }
            }
            else if (this.type == 475 || this.type == 505 || this.type == 506)
            {
                if ((double) this.ai[1] == 0.0)
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                if ((double) this.ai[1] < 10.0)
                {
                    Vector2 Position = new Vector2(this.position.X + (float) this.width * 0.5f,
                        this.position.Y + (float) this.height * 0.5f);
                    float num1 = -this.velocity.X;
                    float num2 = -this.velocity.Y;
                    float num3 = 1f;
                    if ((double) this.ai[0] <= 17.0)
                        num3 = this.ai[0] / 17f;
                    int num4 = (int) (30.0 * (double) num3);
                    float num5 = 1f;
                    if ((double) this.ai[0] <= 30.0)
                        num5 = this.ai[0] / 30f;
                    float num6 = 0.4f * num5;
                    float num7 = num6;
                    float num8 = num2 + num7;
                    for (int index1 = 0; index1 < num4; ++index1)
                    {
                        float num9 = (float) Math.Sqrt((double) num1 * (double) num1 + (double) num8 * (double) num8);
                        float num10 = 5.6f;
                        if ((double) Math.Abs(num1) + (double) Math.Abs(num8) < 1.0)
                            num10 *= Math.Abs(num1) + Math.Abs(num8) / 1f;
                        float num11 = num10 / num9;
                        float num12 = num1 * num11;
                        float num13 = num8 * num11;
                        Math.Atan2((double) num13, (double) num12);
                        int Type = 3;
                        if (this.type == 506)
                            Type = 30;
                        if (this.type == 505)
                            Type = 239;
                        if ((double) index1 > (double) this.ai[1])
                        {
                            for (int index2 = 0; index2 < 4; ++index2)
                            {
                                int index3 = Dust.NewDust(Position, this.width, this.height, Type, 0.0f, 0.0f, 0,
                                    new Color(), 1f);
                                Main.dust[index3].noGravity = true;
                                Main.dust[index3].velocity *= 0.3f;
                            }
                        }

                        Position.X += num12;
                        Position.Y += num13;
                        num1 = -this.velocity.X;
                        float num14 = -this.velocity.Y;
                        num7 += num6;
                        num8 = num14 + num7;
                    }
                }
            }
            else if (this.type == 171)
            {
                if ((double) this.ai[1] == 0.0)
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                if ((double) this.ai[1] < 10.0)
                {
                    Vector2 Position = new Vector2(this.position.X + (float) this.width * 0.5f,
                        this.position.Y + (float) this.height * 0.5f);
                    float num1 = -this.velocity.X;
                    float num2 = -this.velocity.Y;
                    float num3 = 1f;
                    if ((double) this.ai[0] <= 17.0)
                        num3 = this.ai[0] / 17f;
                    int num4 = (int) (30.0 * (double) num3);
                    float num5 = 1f;
                    if ((double) this.ai[0] <= 30.0)
                        num5 = this.ai[0] / 30f;
                    float num6 = 0.4f * num5;
                    float num7 = num6;
                    float num8 = num2 + num7;
                    for (int index1 = 0; index1 < num4; ++index1)
                    {
                        float num9 = (float) Math.Sqrt((double) num1 * (double) num1 + (double) num8 * (double) num8);
                        float num10 = 5.6f;
                        if ((double) Math.Abs(num1) + (double) Math.Abs(num8) < 1.0)
                            num10 *= Math.Abs(num1) + Math.Abs(num8) / 1f;
                        float num11 = num10 / num9;
                        float num12 = num1 * num11;
                        float num13 = num8 * num11;
                        Math.Atan2((double) num13, (double) num12);
                        if ((double) index1 > (double) this.ai[1])
                        {
                            for (int index2 = 0; index2 < 4; ++index2)
                            {
                                int index3 = Dust.NewDust(Position, this.width, this.height, 129, 0.0f, 0.0f, 0,
                                    new Color(), 1f);
                                Main.dust[index3].noGravity = true;
                                Main.dust[index3].velocity *= 0.3f;
                            }
                        }

                        Position.X += num12;
                        Position.Y += num13;
                        num1 = -this.velocity.X;
                        float num14 = -this.velocity.Y;
                        num7 += num6;
                        num8 = num14 + num7;
                    }
                }
            }
            else if (this.type == 117)
            {
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                for (int index = 0; index < 10; ++index)
                    Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 26, 0.0f, 0.0f,
                        0, new Color(), 1f);
            }
            else if (this.type == 166)
            {
                Main.PlaySound(SoundID.Item51, this.position);
                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        76, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity -= this.oldVelocity * 0.25f;
                }
            }
            else if (this.type == 158)
            {
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 9,
                        0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity -= this.velocity * 0.5f;
                }
            }
            else if (this.type == 159)
            {
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        11, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity -= this.velocity * 0.5f;
                }
            }
            else if (this.type == 160)
            {
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        19, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity -= this.velocity * 0.5f;
                }
            }
            else if (this.type == 161)
            {
                Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                for (int index1 = 0; index1 < 10; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height,
                        11, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity -= this.velocity * 0.5f;
                }
            }
            else if (this.type >= 191 && this.type <= 194)
            {
                int index = Gore.NewGore(
                    new Vector2(this.position.X - (float) (this.width / 2),
                        this.position.Y - (float) (this.height / 2)), new Vector2(0.0f, 0.0f), Main.rand.Next(61, 64),
                    this.scale);
                Main.gore[index].velocity *= 0.1f;
            }
            else if (!Main.projPet[this.type])
            {
                if (this.type == 93)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index1 = 0; index1 < 10; ++index1)
                    {
                        int index2 = Dust.NewDust(this.position, this.width, this.height, 57, 0.0f, 0.0f, 100,
                            new Color(), 0.5f);
                        Main.dust[index2].velocity.X *= 2f;
                        Main.dust[index2].velocity.Y *= 2f;
                    }
                }
                else if (this.type == 99)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index1 = 0; index1 < 30; ++index1)
                    {
                        int index2 = Dust.NewDust(this.position, this.width, this.height, 1, 0.0f, 0.0f, 0, new Color(),
                            1f);
                        if (Main.rand.Next(2) == 0)
                            Main.dust[index2].scale *= 1.4f;
                        Projectile projectile = this;
                        projectile.velocity = projectile.velocity * 1.9f;
                    }
                }
                else if (this.type == 655)
                {
                    Main.PlaySound(4, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index1 = 0; index1 < 30; ++index1)
                    {
                        int index2 = Dust.NewDust(this.position, this.width, this.height, 147, 0.0f, 0.0f, 0,
                            new Color(), 1f);
                        if (Main.rand.Next(2) == 0)
                            Main.dust[index2].scale *= 1.4f;
                        Projectile projectile = this;
                        projectile.velocity = projectile.velocity * 1.9f;
                    }

                    if (Main.netMode != 1 && !this.wet)
                    {
                        int num = 2;
                        if (Main.rand.Next(3) == 0)
                            ++num;
                        if (Main.rand.Next(3) == 0)
                            ++num;
                        if (Main.rand.Next(3) == 0)
                            ++num;
                        for (int index1 = 0; index1 < num; ++index1)
                        {
                            int index2 = NPC.NewNPC((int) this.Center.X, (int) this.Center.Y, Main.rand.Next(210, 212),
                                1, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
                            Main.npc[index2].velocity.X = (float) Main.rand.Next(-200, 201) * (1f / 500f);
                            Main.npc[index2].velocity.Y = (float) Main.rand.Next(-200, 201) * (1f / 500f);
                            Main.npc[index2].netUpdate = true;
                        }

                        if (Main.rand.Next(4) == 0)
                        {
                            int index = NPC.NewNPC((int) this.Center.X, (int) this.Center.Y, 42, 1, 0.0f, 0.0f, 0.0f,
                                0.0f, (int) byte.MaxValue);
                            Main.npc[index].SetDefaults(-16, -1f);
                            Main.npc[index].velocity.X = (float) Main.rand.Next(-200, 201) * (1f / 1000f);
                            Main.npc[index].velocity.Y = (float) Main.rand.Next(-200, 201) * (1f / 1000f);
                            Main.npc[index].netUpdate = true;
                        }
                    }
                }
                else if (this.type == 91 || this.type == 92)
                {
                    Main.PlaySound(SoundID.Item10, this.position);
                    for (int index = 0; index < 10; ++index)
                        Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.1f,
                            this.velocity.Y * 0.1f, 150, new Color(), 1.2f);
                    for (int index = 0; index < 3; ++index)
                        Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f),
                            Main.rand.Next(16, 18), 1f);
                    if (this.type == 12 && this.damage < 500)
                    {
                        for (int index = 0; index < 10; ++index)
                            Dust.NewDust(this.position, this.width, this.height, 57, this.velocity.X * 0.1f,
                                this.velocity.Y * 0.1f, 150, new Color(), 1.2f);
                        for (int index = 0; index < 3; ++index)
                            Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f),
                                Main.rand.Next(16, 18), 1f);
                    }

                    if ((this.type == 91 || this.type == 92 && (double) this.ai[0] > 0.0) &&
                        this.owner == Main.myPlayer)
                    {
                        float num1 = this.position.X + (float) Main.rand.Next(-400, 400);
                        float num2 = this.position.Y - (float) Main.rand.Next(600, 900);
                        Vector2 vector2 = new Vector2(num1, num2);
                        float num3 = this.position.X + (float) (this.width / 2) - vector2.X;
                        float num4 = this.position.Y + (float) (this.height / 2) - vector2.Y;
                        float num5 =
                            22f / (float) Math.Sqrt((double) num3 * (double) num3 + (double) num4 * (double) num4);
                        float SpeedX = num3 * num5;
                        float SpeedY = num4 * num5;
                        int damage = this.damage;
                        int index = Projectile.NewProjectile(num1, num2, SpeedX, SpeedY, 92, damage, this.knockBack,
                            this.owner, 0.0f, 0.0f);
                        if (this.type == 91)
                        {
                            Main.projectile[index].ai[1] = this.position.Y;
                            Main.projectile[index].ai[0] = 1f;
                        }
                        else
                            Main.projectile[index].ai[1] = this.position.Y;
                    }
                }
                else if (this.type == 89)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index1 = 0; index1 < 5; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 68, 0.0f, 0.0f, 0, new Color(), 1f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 1.5f;
                        Main.dust[index2].scale *= 0.9f;
                    }

                    if (this.type == 89 && this.owner == Main.myPlayer)
                    {
                        for (int index = 0; index < 3; ++index)
                        {
                            float SpeedX =
                                (float) (-(double) this.velocity.X * (double) Main.rand.Next(40, 70) *
                                         0.00999999977648258 + (double) Main.rand.Next(-20, 21) * 0.400000005960464);
                            float SpeedY =
                                (float) (-(double) this.velocity.Y * (double) Main.rand.Next(40, 70) *
                                         0.00999999977648258 + (double) Main.rand.Next(-20, 21) * 0.400000005960464);
                            Projectile.NewProjectile(this.position.X + SpeedX, this.position.Y + SpeedY, SpeedX, SpeedY,
                                90, (int) ((double) this.damage * 0.5), 0.0f, this.owner, 0.0f, 0.0f);
                        }
                    }
                }
                else if (this.type == 177)
                {
                    for (int index1 = 0; index1 < 20; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 137, 0.0f, 0.0f, Main.rand.Next(0, 101), new Color(),
                            (float) (1.0 + (double) Main.rand.Next(-20, 40) * 0.00999999977648258));
                        Main.dust[index2].velocity -= this.oldVelocity * 0.2f;
                        if (Main.rand.Next(3) == 0)
                        {
                            Main.dust[index2].scale *= 0.8f;
                            Main.dust[index2].velocity *= 0.5f;
                        }
                        else
                            Main.dust[index2].noGravity = true;
                    }
                }
                else if (this.type == 119 || this.type == 118 || (this.type == 128 || this.type == 359))
                {
                    int num = 10;
                    if (this.type == 119 || this.type == 359)
                        num = 20;
                    Main.PlaySound(SoundID.Item27, this.position);
                    for (int index1 = 0; index1 < num; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 92, 0.0f, 0.0f, 0, new Color(), 1f);
                        if (Main.rand.Next(3) != 0)
                        {
                            Main.dust[index2].velocity *= 2f;
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].scale *= 1.75f;
                        }
                        else
                            Main.dust[index2].scale *= 0.5f;
                    }
                }
                else if (this.type == 309)
                {
                    int num = 10;
                    Main.PlaySound(SoundID.Item27, this.position);
                    for (int index1 = 0; index1 < num; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 185, 0.0f, 0.0f, 0, new Color(), 1f);
                        if (Main.rand.Next(2) == 0)
                        {
                            Main.dust[index2].velocity *= 2f;
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].scale *= 1.75f;
                        }
                    }
                }
                else if (this.type == 308)
                {
                    int num = 80;
                    Main.PlaySound(SoundID.Item27, this.position);
                    for (int index1 = 0; index1 < num; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 16f), this.width,
                            this.height - 16, 185, 0.0f, 0.0f, 0, new Color(), 1f);
                        Main.dust[index2].velocity *= 2f;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].scale *= 1.15f;
                    }
                }
                else if (this.aiStyle == 29 && this.type <= 126)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    int Type = this.type - 121 + 86;
                    for (int index1 = 0; index1 < 15; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, Type, this.oldVelocity.X, this.oldVelocity.Y, 50, new Color(), 1.2f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].scale *= 1.25f;
                        Main.dust[index2].velocity *= 0.5f;
                    }
                }
                else if (this.type == 597)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index1 = 0; index1 < 15; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 262, this.oldVelocity.X, this.oldVelocity.Y, 50, new Color(), 1.2f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].scale *= 1.25f;
                        Main.dust[index2].velocity *= 0.5f;
                    }
                }
                else if (this.type == 337)
                {
                    Main.PlaySound(SoundID.Item27, this.position);
                    for (int index1 = 0; index1 < 10; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 197, 0.0f, 0.0f, 0, new Color(), 1f);
                        Main.dust[index2].noGravity = true;
                    }
                }
                else if (this.type == 379 || this.type == 377)
                {
                    for (int index1 = 0; index1 < 5; ++index1)
                    {
                        int index2 = Dust.NewDust(this.position, this.width, this.height, 171, 0.0f, 0.0f, 100,
                            new Color(), 1f);
                        Main.dust[index2].scale = (float) Main.rand.Next(1, 10) * 0.1f;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].fadeIn = 1.5f;
                        Main.dust[index2].velocity *= 0.75f;
                    }
                }
                else if (this.type == 80)
                {
                    if ((double) this.ai[0] >= 0.0)
                    {
                        Main.PlaySound(SoundID.Item27, this.position);
                        for (int index = 0; index < 10; ++index)
                            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67,
                                0.0f, 0.0f, 0, new Color(), 1f);
                    }

                    int i = (int) this.position.X / 16;
                    int j = (int) this.position.Y / 16;
                    if (Main.tile[i, j] == null)
                        Main.tile[i, j] = new Tile();
                    if (Main.tile[i, j].type == (ushort) sbyte.MaxValue && Main.tile[i, j].active())
                        WorldGen.KillTile(i, j, false, false, false);
                }
                else if (this.type == 76 || this.type == 77 || this.type == 78)
                {
                    for (int index1 = 0; index1 < 5; ++index1)
                    {
                        int index2 = Dust.NewDust(this.position, this.width, this.height, 27, 0.0f, 0.0f, 80,
                            new Color(), 1.5f);
                        Main.dust[index2].noGravity = true;
                    }
                }
                else if (this.type == 55)
                {
                    for (int index1 = 0; index1 < 5; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 18, 0.0f, 0.0f, 0, new Color(), 1.5f);
                        Main.dust[index2].noGravity = true;
                    }
                }
                else if (this.type == 51 || this.type == 267)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index = 0; index < 5; ++index)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 0, 0.0f,
                            0.0f, 0, new Color(), 0.7f);
                }
                else if (this.type == 478)
                {
                    if (this.owner == Main.myPlayer)
                        Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 480,
                            (int) ((double) this.damage * 0.8), this.knockBack * 0.5f, this.owner, 0.0f, 0.0f);
                }
                else if (this.type == 477 || this.type == 479)
                {
                    int num = 0;
                    while (num < 5)
                        ++num;
                    Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                }
                else if (this.type == 2 || this.type == 82)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index = 0; index < 10; ++index)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f,
                            0.0f, 100, new Color(), 1f);
                }
                else if (this.type == 474)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index = 0; index < 20; ++index)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 26, 0.0f,
                            0.0f, 0, new Color(), 0.9f);
                }
                else if (this.type == 172)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index = 0; index < 20; ++index)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, 0.0f,
                            0.0f, 100, new Color(), 1f);
                }
                else if (this.type == 103)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index1 = 0; index1 < 20; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 75, 0.0f, 0.0f, 100, new Color(), 1f);
                        if (Main.rand.Next(2) == 0)
                        {
                            Main.dust[index2].scale *= 2.5f;
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].velocity *= 5f;
                        }
                    }
                }
                else if (this.type == 278)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index1 = 0; index1 < 20; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 169, 0.0f, 0.0f, 100, new Color(), 1f);
                        if (Main.rand.Next(2) == 0)
                        {
                            Main.dust[index2].scale *= 1.5f;
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].velocity *= 5f;
                        }
                    }
                }
                else if (this.type == 3 || this.type == 48 || (this.type == 54 || this.type == 599))
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index = 0; index < 10; ++index)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 1,
                            this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, new Color(), 0.75f);
                }
                else if (this.type == 330)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index = 0; index < 10; ++index)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 0,
                            this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 0, new Color(), 0.75f);
                }
                else if (this.type == 4)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index = 0; index < 10; ++index)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14, 0.0f,
                            0.0f, 150, new Color(), 1.1f);
                }
                else if (this.type == 5)
                {
                    Main.PlaySound(SoundID.Item10, this.position);
                    for (int index = 0; index < 60; ++index)
                    {
                        int Type;
                        switch (Main.rand.Next(3))
                        {
                            case 0:
                                Type = 15;
                                break;
                            case 1:
                                Type = 57;
                                break;
                            default:
                                Type = 58;
                                break;
                        }

                        Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X * 0.5f,
                            this.velocity.Y * 0.5f, 150, new Color(), 1.5f);
                    }
                }
                else if (this.type == 9 || this.type == 12 || this.type == 503)
                {
                    Main.PlaySound(SoundID.Item10, this.position);
                    int num1 = 10;
                    int num2 = 3;
                    if (this.type == 503)
                    {
                        num1 = 40;
                        num2 = 2;
                        Projectile projectile = this;
                        projectile.velocity = projectile.velocity / 2f;
                    }

                    for (int index = 0; index < num1; ++index)
                        Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.1f,
                            this.velocity.Y * 0.1f, 150, new Color(), 1.2f);
                    for (int index = 0; index < num2; ++index)
                    {
                        int Type = Main.rand.Next(16, 18);
                        if (this.type == 503)
                            Type = 16;
                        Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f), Type,
                            1f);
                    }

                    if (this.type == 12 && this.damage < 100)
                    {
                        for (int index = 0; index < 10; ++index)
                            Dust.NewDust(this.position, this.width, this.height, 57, this.velocity.X * 0.1f,
                                this.velocity.Y * 0.1f, 150, new Color(), 1.2f);
                        for (int index = 0; index < 3; ++index)
                            Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f),
                                Main.rand.Next(16, 18), 1f);
                    }
                }
                else if (this.type == 281)
                {
                    Main.PlaySound(4, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    int index1 = Gore.NewGore(this.position,
                        new Vector2((float) Main.rand.Next(-20, 21) * 0.2f, (float) Main.rand.Next(-20, 21) * 0.2f), 76,
                        1f);
                    Main.gore[index1].velocity -= this.velocity * 0.5f;
                    int index2 = Gore.NewGore(new Vector2(this.position.X, this.position.Y),
                        new Vector2((float) Main.rand.Next(-20, 21) * 0.2f, (float) Main.rand.Next(-20, 21) * 0.2f), 77,
                        1f);
                    Main.gore[index2].velocity -= this.velocity * 0.5f;
                    Main.PlaySound(SoundID.Item14, this.position);
                    for (int index3 = 0; index3 < 20; ++index3)
                    {
                        int index4 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                        Main.dust[index4].velocity *= 1.4f;
                    }

                    for (int index3 = 0; index3 < 10; ++index3)
                    {
                        int index4 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 2.5f);
                        Main.dust[index4].noGravity = true;
                        Main.dust[index4].velocity *= 5f;
                        int index5 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
                        Main.dust[index5].velocity *= 3f;
                    }

                    int index6 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    Main.gore[index6].velocity *= 0.4f;
                    ++Main.gore[index6].velocity.X;
                    ++Main.gore[index6].velocity.Y;
                    int index7 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    Main.gore[index7].velocity *= 0.4f;
                    --Main.gore[index7].velocity.X;
                    ++Main.gore[index7].velocity.Y;
                    int index8 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    Main.gore[index8].velocity *= 0.4f;
                    ++Main.gore[index8].velocity.X;
                    --Main.gore[index8].velocity.Y;
                    int index9 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    Main.gore[index9].velocity *= 0.4f;
                    --Main.gore[index9].velocity.X;
                    --Main.gore[index9].velocity.Y;
                    this.position.X += (float) (this.width / 2);
                    this.position.Y += (float) (this.height / 2);
                    this.width = 128;
                    this.height = 128;
                    this.position.X -= (float) (this.width / 2);
                    this.position.Y -= (float) (this.height / 2);
                    this.Damage();
                }
                else if (this.type == 162)
                {
                    Main.PlaySound(SoundID.Item14, this.position);
                    for (int index1 = 0; index1 < 20; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                        Main.dust[index2].velocity *= 1.4f;
                    }

                    for (int index1 = 0; index1 < 10; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 2.5f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 5f;
                        int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
                        Main.dust[index3].velocity *= 3f;
                    }

                    int index4 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    Main.gore[index4].velocity *= 0.4f;
                    ++Main.gore[index4].velocity.X;
                    ++Main.gore[index4].velocity.Y;
                    int index5 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    Main.gore[index5].velocity *= 0.4f;
                    --Main.gore[index5].velocity.X;
                    ++Main.gore[index5].velocity.Y;
                    int index6 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    Main.gore[index6].velocity *= 0.4f;
                    ++Main.gore[index6].velocity.X;
                    --Main.gore[index6].velocity.Y;
                    int index7 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    Main.gore[index7].velocity *= 0.4f;
                    --Main.gore[index7].velocity.X;
                    --Main.gore[index7].velocity.Y;
                    this.position.X += (float) (this.width / 2);
                    this.position.Y += (float) (this.height / 2);
                    this.width = 128;
                    this.height = 128;
                    this.position.X -= (float) (this.width / 2);
                    this.position.Y -= (float) (this.height / 2);
                    this.Damage();
                }
                else if (this.type == 240)
                {
                    Main.PlaySound(SoundID.Item14, this.position);
                    for (int index1 = 0; index1 < 20; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                        Main.dust[index2].velocity *= 1.4f;
                    }

                    for (int index1 = 0; index1 < 10; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 2.5f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 5f;
                        int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
                        Main.dust[index3].velocity *= 3f;
                    }

                    int index4 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    Main.gore[index4].velocity *= 0.4f;
                    ++Main.gore[index4].velocity.X;
                    ++Main.gore[index4].velocity.Y;
                    int index5 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    Main.gore[index5].velocity *= 0.4f;
                    --Main.gore[index5].velocity.X;
                    ++Main.gore[index5].velocity.Y;
                    int index6 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    Main.gore[index6].velocity *= 0.4f;
                    ++Main.gore[index6].velocity.X;
                    --Main.gore[index6].velocity.Y;
                    int index7 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    Main.gore[index7].velocity *= 0.4f;
                    --Main.gore[index7].velocity.X;
                    --Main.gore[index7].velocity.Y;
                    this.position.X += (float) (this.width / 2);
                    this.position.Y += (float) (this.height / 2);
                    this.width = 96;
                    this.height = 96;
                    this.position.X -= (float) (this.width / 2);
                    this.position.Y -= (float) (this.height / 2);
                    this.Damage();
                }
                else if (this.type == 283 || this.type == 282)
                {
                    Main.PlaySound(SoundID.Item10, this.position);
                    for (int index1 = 0; index1 < 10; ++index1)
                    {
                        int index2 = Dust.NewDust(this.position, this.width, this.height, 171, 0.0f, 0.0f, 100,
                            new Color(), 1f);
                        Main.dust[index2].scale = (float) Main.rand.Next(1, 10) * 0.1f;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].fadeIn = 1.5f;
                        Main.dust[index2].velocity *= 0.75f;
                    }
                }
                else if (this.type == 284)
                {
                    for (int index1 = 0; index1 < 10; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, Main.rand.Next(139, 143),
                            (float) (-(double) this.velocity.X * 0.300000011920929),
                            (float) (-(double) this.velocity.Y * 0.300000011920929), 0, new Color(), 1.2f);
                        Main.dust[index2].velocity.X += (float) Main.rand.Next(-50, 51) * 0.01f;
                        Main.dust[index2].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.01f;
                        Main.dust[index2].velocity.X *=
                            (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                        Main.dust[index2].velocity.Y *=
                            (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                        Main.dust[index2].velocity.X += (float) Main.rand.Next(-50, 51) * 0.05f;
                        Main.dust[index2].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.05f;
                        Main.dust[index2].scale *=
                            (float) (1.0 + (double) Main.rand.Next(-30, 31) * 0.00999999977648258);
                    }

                    for (int index1 = 0; index1 < 5; ++index1)
                    {
                        int index2 = Gore.NewGore(this.position, -this.velocity * 0.3f, Main.rand.Next(276, 283), 1f);
                        Main.gore[index2].velocity.X += (float) Main.rand.Next(-50, 51) * 0.01f;
                        Main.gore[index2].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.01f;
                        Main.gore[index2].velocity.X *=
                            (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                        Main.gore[index2].velocity.Y *=
                            (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                        Main.gore[index2].scale *=
                            (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.00999999977648258);
                        Main.gore[index2].velocity.X += (float) Main.rand.Next(-50, 51) * 0.05f;
                        Main.gore[index2].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.05f;
                    }
                }
                else if (this.type == 286)
                {
                    Main.PlaySound(SoundID.Item14, this.position);
                    for (int index = 0; index < 7; ++index)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f,
                            0.0f, 100, new Color(), 1.5f);
                    for (int index1 = 0; index1 < 3; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 2.5f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 3f;
                        int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
                        Main.dust[index3].velocity *= 2f;
                    }

                    int index4 = Gore.NewGore(new Vector2(this.position.X - 10f, this.position.Y - 10f), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    Main.gore[index4].velocity *= 0.3f;
                    Main.gore[index4].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
                    Main.gore[index4].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
                    if (this.owner == Main.myPlayer)
                    {
                        this.localAI[1] = -1f;
                        this.maxPenetrate = 0;
                        this.position.X += (float) (this.width / 2);
                        this.position.Y += (float) (this.height / 2);
                        this.width = 80;
                        this.height = 80;
                        this.position.X -= (float) (this.width / 2);
                        this.position.Y -= (float) (this.height / 2);
                        this.Damage();
                    }
                }
                else if (this.type == 14 || this.type == 20 || (this.type == 36 || this.type == 83) ||
                         (this.type == 84 || this.type == 389 || (this.type == 104 || this.type == 279)) ||
                         (this.type == 100 || this.type == 110 || (this.type == 180 || this.type == 207) ||
                          (this.type == 357 || this.type == 242 || (this.type == 302 || this.type == 257))) ||
                         (this.type == 259 || this.type == 285 || (this.type == 287 || this.type == 576) ||
                          this.type == 577))
                {
                    Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                    Main.PlaySound(SoundID.Item10, this.position);
                }
                else if (this.type == 660)
                {
                    Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                    Main.PlaySound(SoundID.Item10, this.position);
                    int num = Main.rand.Next(4, 10);
                    for (int index1 = 0; index1 < num; ++index1)
                    {
                        int index2 = Dust.NewDust(this.Center, 0, 0, 180, 0.0f, 0.0f, 100, new Color(), 1f);
                        Main.dust[index2].velocity *= 1.6f;
                        --Main.dust[index2].velocity.Y;
                        Main.dust[index2].velocity +=
                            -this.velocity * (float) ((double) Main.rand.NextFloat() * 2.0 - 1.0) * 0.5f;
                        Main.dust[index2].scale = 2f;
                        Main.dust[index2].fadeIn = 0.5f;
                        Main.dust[index2].noGravity = true;
                    }
                }
                else if (this.type == 712)
                {
                    Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                    Main.PlaySound(SoundID.Item10, this.position);
                    int num = Main.rand.Next(6, 12);
                    for (int index1 = 0; index1 < num; ++index1)
                    {
                        int index2 = Dust.NewDust(this.Center, 0, 0, 15, 0.0f, 0.0f, 100, new Color(), 1f);
                        Main.dust[index2].velocity *= 1.6f;
                        --Main.dust[index2].velocity.Y;
                        Main.dust[index2].velocity +=
                            -this.velocity * (float) ((double) Main.rand.NextFloat() * 2.0 - 1.0) * 0.5f;
                        Main.dust[index2].scale = 1f;
                        Main.dust[index2].fadeIn = 1.5f;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].color =
                            new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0) * 0.3f;
                        Main.dust[index2].velocity *= 0.7f;
                        Main.dust[index2].position += Main.dust[index2].velocity * 5f;
                    }

                    for (int index = 0; index < 3; ++index)
                        Gore.NewGoreDirect(this.position, Vector2.Zero, 1008,
                            (float) (1.0 + (double) Main.rand.NextFloatDirection() * 0.200000002980232)).velocity *= 4f;
                }
                else if (this.type == 638)
                {
                    Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                    Main.PlaySound(SoundID.Item10, this.position);
                    int num = Main.rand.Next(2, 5);
                    for (int index1 = 0; index1 < num; ++index1)
                    {
                        int index2 = Dust.NewDust(this.Center, 0, 0, 229, 0.0f, 0.0f, 100, new Color(), 1f);
                        Main.dust[index2].velocity *= 1.6f;
                        --Main.dust[index2].velocity.Y;
                        Main.dust[index2].position -= Vector2.One * 4f;
                        Main.dust[index2].position = Vector2.Lerp(Main.dust[index2].position, this.Center, 0.5f);
                        Main.dust[index2].noGravity = true;
                    }
                }
                else if (this.type == 15 || this.type == 34 || this.type == 321)
                {
                    Main.PlaySound(SoundID.Item10, this.position);
                    for (int index1 = 0; index1 < 20; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, (float) (-(double) this.velocity.X * 0.200000002980232),
                            (float) (-(double) this.velocity.Y * 0.200000002980232), 100, new Color(), 2f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 2f;
                        int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, (float) (-(double) this.velocity.X * 0.200000002980232),
                            (float) (-(double) this.velocity.Y * 0.200000002980232), 100, new Color(), 1f);
                        Main.dust[index3].velocity *= 2f;
                    }
                }
                else if (this.type == 253)
                {
                    Main.PlaySound(SoundID.Item10, this.position);
                    for (int index1 = 0; index1 < 20; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 135, (float) (-(double) this.velocity.X * 0.200000002980232),
                            (float) (-(double) this.velocity.Y * 0.200000002980232), 100, new Color(), 2f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 2f;
                        int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 135, (float) (-(double) this.velocity.X * 0.200000002980232),
                            (float) (-(double) this.velocity.Y * 0.200000002980232), 100, new Color(), 1f);
                        Main.dust[index3].velocity *= 2f;
                    }
                }
                else if (this.type == 95 || this.type == 96)
                {
                    Main.PlaySound(SoundID.Item10, this.position);
                    for (int index1 = 0; index1 < 20; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 75, (float) (-(double) this.velocity.X * 0.200000002980232),
                            (float) (-(double) this.velocity.Y * 0.200000002980232), 100, new Color(), 2f * this.scale);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 2f;
                        int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 75, (float) (-(double) this.velocity.X * 0.200000002980232),
                            (float) (-(double) this.velocity.Y * 0.200000002980232), 100, new Color(), 1f * this.scale);
                        Main.dust[index3].velocity *= 2f;
                    }
                }
                else if (this.type == 79)
                {
                    Main.PlaySound(SoundID.Item10, this.position);
                    for (int index1 = 0; index1 < 20; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 66, 0.0f, 0.0f, 100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 2f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 4f;
                    }
                }
                else if (this.type == 16)
                {
                    if (this.type == 16 && this.penetrate == 1)
                    {
                        this.maxPenetrate = -1;
                        this.penetrate = -1;
                        int num = 60;
                        this.position.X -= (float) (num / 2);
                        this.position.Y -= (float) (num / 2);
                        this.width += num;
                        this.height += num;
                        this.tileCollide = false;
                        Projectile projectile = this;
                        projectile.velocity = projectile.velocity * 0.01f;
                        this.Damage();
                        this.scale = 0.01f;
                    }

                    this.position.X += (float) (this.width / 2);
                    this.width = 10;
                    this.position.X -= (float) (this.width / 2);
                    this.position.Y += (float) (this.height / 2);
                    this.height = 10;
                    this.position.Y -= (float) (this.height / 2);
                    Main.PlaySound(SoundID.Item10, this.position);
                    for (int index1 = 0; index1 < 20; ++index1)
                    {
                        int index2 =
                            Dust.NewDust(
                                new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y),
                                this.width, this.height, 15, 0.0f, 0.0f, 100, new Color(), 2f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 2f;
                        Dust.NewDust(new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y),
                            this.width, this.height, 15, 0.0f, 0.0f, 100, new Color(), 1f);
                    }
                }
                else if (this.type == 17)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index = 0; index < 5; ++index)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 0, 0.0f,
                            0.0f, 0, new Color(), 1f);
                }
                else if (this.type == 31 || this.type == 42)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index1 = 0; index1 < 5; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 32, 0.0f, 0.0f, 0, new Color(), 1f);
                        Main.dust[index2].velocity *= 0.6f;
                    }
                }
                else if (this.type >= 411 && this.type <= 414)
                {
                    int Type = 9;
                    if (this.type == 412 || this.type == 414)
                        Type = 11;
                    if (this.type == 413)
                        Type = 19;
                    for (int index1 = 0; index1 < 5; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, Type, 0.0f, this.velocity.Y / 2f, 0, new Color(), 1f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity -= this.velocity * 0.5f;
                    }
                }
                else if (this.type == 109)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index1 = 0; index1 < 5; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 51, 0.0f, 0.0f, 0, new Color(), 0.6f);
                        Main.dust[index2].velocity *= 0.6f;
                    }
                }
                else if (this.type == 39)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index1 = 0; index1 < 5; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 38, 0.0f, 0.0f, 0, new Color(), 1f);
                        Main.dust[index2].velocity *= 0.6f;
                    }
                }
                else if (this.type == 71)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index1 = 0; index1 < 5; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 53, 0.0f, 0.0f, 0, new Color(), 1f);
                        Main.dust[index2].velocity *= 0.6f;
                    }
                }
                else if (this.type == 40)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index1 = 0; index1 < 5; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 36, 0.0f, 0.0f, 0, new Color(), 1f);
                        Main.dust[index2].velocity *= 0.6f;
                    }
                }
                else if (this.type == 21 || this.type == 471 || this.type == 532)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index = 0; index < 10; ++index)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 26, 0.0f,
                            0.0f, 0, new Color(), 0.8f);
                }
                else if (this.type == 583)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index = 0; index < 10; ++index)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 4, 0.0f,
                            0.0f, 100, new Color(20, 250, 20, 240), 0.8f);
                }
                else if (this.type == 584)
                {
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index = 0; index < 10; ++index)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 4, 0.0f,
                            0.0f, 100, new Color(250, 20, 120, 240), 0.8f);
                }
                else if (this.type == 24)
                {
                    for (int index = 0; index < 10; ++index)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 1,
                            this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, new Color(), 0.75f);
                }
                else if (this.type == 27)
                {
                    Main.PlaySound(SoundID.Item10, this.position);
                    for (int index1 = 0; index1 < 30; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 172, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 100, new Color(), 1f);
                        Main.dust[index2].noGravity = true;
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 172,
                            this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 100, new Color(), 0.5f);
                    }
                }
                else if (this.type == 38)
                {
                    for (int index = 0; index < 10; ++index)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 42,
                            this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, new Color(), 1f);
                }
                else if (this.type == 44 || this.type == 45)
                {
                    Main.PlaySound(SoundID.Item10, this.position);
                    for (int index1 = 0; index1 < 30; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 27, this.velocity.X, this.velocity.Y, 100, new Color(), 1.7f);
                        Main.dust[index2].noGravity = true;
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27,
                            this.velocity.X, this.velocity.Y, 100, new Color(), 1f);
                    }
                }
                else if (this.type == 41)
                {
                    Main.PlaySound(SoundID.Item14, this.position);
                    for (int index = 0; index < 10; ++index)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f,
                            0.0f, 100, new Color(), 1.5f);
                    for (int index1 = 0; index1 < 5; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 2.5f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 3f;
                        int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
                        Main.dust[index3].velocity *= 2f;
                    }

                    int index4 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    Main.gore[index4].velocity *= 0.4f;
                    Main.gore[index4].velocity.X += (float) Main.rand.Next(-10, 11) * 0.1f;
                    Main.gore[index4].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.1f;
                    int index5 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    Main.gore[index5].velocity *= 0.4f;
                    Main.gore[index5].velocity.X += (float) Main.rand.Next(-10, 11) * 0.1f;
                    Main.gore[index5].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.1f;
                    if (this.owner == Main.myPlayer)
                    {
                        this.penetrate = -1;
                        this.position.X += (float) (this.width / 2);
                        this.position.Y += (float) (this.height / 2);
                        this.width = 64;
                        this.height = 64;
                        this.position.X -= (float) (this.width / 2);
                        this.position.Y -= (float) (this.height / 2);
                        this.Damage();
                    }
                }
                else if (this.type == 514)
                {
                    Main.PlaySound(SoundID.Item14, this.position);
                    for (int index1 = 0; index1 < 10; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.3f);
                        Main.dust[index2].velocity *= 1.4f;
                    }

                    for (int index1 = 0; index1 < 6; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 2.1f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 4.6f;
                        int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.3f);
                        Main.dust[index3].velocity *= 3.3f;
                        if (Main.rand.Next(2) == 0)
                        {
                            int index4 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                                this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.1f);
                            Main.dust[index4].velocity *= 2.7f;
                        }
                    }

                    if (this.owner == Main.myPlayer)
                    {
                        this.penetrate = -1;
                        this.position.X += (float) (this.width / 2);
                        this.position.Y += (float) (this.height / 2);
                        this.width = 112;
                        this.height = 112;
                        this.position.X -= (float) (this.width / 2);
                        this.position.Y -= (float) (this.height / 2);
                        this.ai[0] = 2f;
                        this.Damage();
                    }
                }
                else if (this.type == 306)
                {
                    Main.PlaySound(3, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index1 = 0; index1 < 20; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 184, 0.0f, 0.0f, 0, new Color(), 1f);
                        Main.dust[index2].scale *= 1.1f;
                        Main.dust[index2].noGravity = true;
                    }

                    for (int index1 = 0; index1 < 30; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 184, 0.0f, 0.0f, 0, new Color(), 1f);
                        Main.dust[index2].velocity *= 2.5f;
                        Main.dust[index2].scale *= 0.8f;
                        Main.dust[index2].noGravity = true;
                    }

                    if (this.owner == Main.myPlayer)
                    {
                        int num = 2;
                        if (Main.rand.Next(10) == 0)
                            ++num;
                        if (Main.rand.Next(10) == 0)
                            ++num;
                        if (Main.rand.Next(10) == 0)
                            ++num;
                        for (int index = 0; index < num; ++index)
                            Projectile.NewProjectile(this.position.X, this.position.Y,
                                (float) Main.rand.Next(-35, 36) * 0.02f * 10f,
                                (float) Main.rand.Next(-35, 36) * 0.02f * 10f, 307, (int) ((double) this.damage * 0.7),
                                (float) (int) ((double) this.knockBack * 0.35), Main.myPlayer, 0.0f, 0.0f);
                    }
                }
                else if (this.type == 469)
                {
                    if (this.owner == Main.myPlayer)
                    {
                        int num1 = 6;
                        for (int index1 = 0; index1 < num1; ++index1)
                        {
                            if (index1 % 2 != 1 || Main.rand.Next(3) == 0)
                            {
                                Vector2 position = this.position;
                                Vector2 oldVelocity = this.oldVelocity;
                                oldVelocity.Normalize();
                                Vector2 vector2_1 = oldVelocity * 8f;
                                float num2 = (float) Main.rand.Next(-35, 36) * 0.01f;
                                float num3 = (float) Main.rand.Next(-35, 36) * 0.01f;
                                Vector2 vector2_2 = position - vector2_1 * (float) index1;
                                float SpeedX = num2 + this.oldVelocity.X / 6f;
                                float SpeedY = num3 + this.oldVelocity.Y / 6f;
                                int index2 = Projectile.NewProjectile(vector2_2.X, vector2_2.Y, SpeedX, SpeedY,
                                    Main.player[this.owner].beeType(),
                                    Main.player[this.owner].beeDamage(this.damage / 3),
                                    Main.player[this.owner].beeKB(0.0f), Main.myPlayer, 0.0f, 0.0f);
                                Main.projectile[index2].magic = false;
                                Main.projectile[index2].ranged = true;
                                Main.projectile[index2].penetrate = 2;
                            }
                        }
                    }
                }
                else if (this.type == 183)
                {
                    Main.PlaySound(SoundID.Item14, this.position);
                    for (int index1 = 0; index1 < 20; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                        Main.dust[index2].velocity *= 1f;
                    }

                    int index3 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    ++Main.gore[index3].velocity.X;
                    ++Main.gore[index3].velocity.Y;
                    Main.gore[index3].velocity *= 0.3f;
                    int index4 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    --Main.gore[index4].velocity.X;
                    ++Main.gore[index4].velocity.Y;
                    Main.gore[index4].velocity *= 0.3f;
                    int index5 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    ++Main.gore[index5].velocity.X;
                    --Main.gore[index5].velocity.Y;
                    Main.gore[index5].velocity *= 0.3f;
                    int index6 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    --Main.gore[index6].velocity.X;
                    --Main.gore[index6].velocity.Y;
                    Main.gore[index6].velocity *= 0.3f;
                    if (this.owner == Main.myPlayer)
                    {
                        int num = Main.rand.Next(15, 25);
                        for (int index1 = 0; index1 < num; ++index1)
                            Projectile.NewProjectile(this.position.X, this.position.Y,
                                (float) Main.rand.Next(-35, 36) * 0.02f, (float) Main.rand.Next(-35, 36) * 0.02f,
                                Main.player[this.owner].beeType(), Main.player[this.owner].beeDamage(this.damage),
                                Main.player[this.owner].beeKB(0.0f), Main.myPlayer, 0.0f, 0.0f);
                    }
                }
                else if (this.aiStyle == 34)
                {
                    if (this.owner != Main.myPlayer)
                        this.timeLeft = 60;
                    Main.PlaySound(SoundID.Item14, this.position);
                    if (this.type == 167)
                    {
                        for (int index1 = 0; index1 < 400; ++index1)
                        {
                            float num1 = 16f;
                            if (index1 < 300)
                                num1 = 12f;
                            if (index1 < 200)
                                num1 = 8f;
                            if (index1 < 100)
                                num1 = 4f;
                            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 130, 0.0f,
                                0.0f, 100, new Color(), 1f);
                            float num2 = Main.dust[index2].velocity.X;
                            float y = Main.dust[index2].velocity.Y;
                            if ((double) num2 == 0.0 && (double) y == 0.0)
                                num2 = 1f;
                            float num3 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) y * (double) y);
                            float num4 = num1 / num3;
                            float num5 = num2 * num4;
                            float num6 = y * num4;
                            Main.dust[index2].velocity *= 0.5f;
                            Main.dust[index2].velocity.X += num5;
                            Main.dust[index2].velocity.Y += num6;
                            Main.dust[index2].scale = 1.3f;
                            Main.dust[index2].noGravity = true;
                        }
                    }

                    if (this.type == 168)
                    {
                        for (int index1 = 0; index1 < 400; ++index1)
                        {
                            float num1 = (float) (2.0 * ((double) index1 / 100.0));
                            if (index1 > 100)
                                num1 = 10f;
                            if (index1 > 250)
                                num1 = 13f;
                            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 131, 0.0f,
                                0.0f, 100, new Color(), 1f);
                            float num2 = Main.dust[index2].velocity.X;
                            float y = Main.dust[index2].velocity.Y;
                            if ((double) num2 == 0.0 && (double) y == 0.0)
                                num2 = 1f;
                            float num3 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) y * (double) y);
                            float num4 = num1 / num3;
                            float num5;
                            float num6;
                            if (index1 <= 200)
                            {
                                num5 = num2 * num4;
                                num6 = y * num4;
                            }
                            else
                            {
                                num5 = (float) ((double) num2 * (double) num4 * 1.25);
                                num6 = (float) ((double) y * (double) num4 * 0.75);
                            }

                            Main.dust[index2].velocity *= 0.5f;
                            Main.dust[index2].velocity.X += num5;
                            Main.dust[index2].velocity.Y += num6;
                            if (index1 > 100)
                            {
                                Main.dust[index2].scale = 1.3f;
                                Main.dust[index2].noGravity = true;
                            }
                        }
                    }

                    if (this.type == 169)
                    {
                        Vector2 spinningpoint = ((float) Main.rand.NextDouble() * 6.283185f).ToRotationVector2();
                        float num1 = (float) Main.rand.Next(5, 9);
                        float num2 = (float) Main.rand.Next(12, 17);
                        float num3 = (float) Main.rand.Next(3, 7);
                        float num4 = 20f;
                        for (float num5 = 0.0f; (double) num5 < (double) num1; ++num5)
                        {
                            for (int index1 = 0; index1 < 2; ++index1)
                            {
                                Vector2 vector2_1 = spinningpoint.RotatedBy(
                                    (index1 == 0 ? 1.0 : -1.0) * 6.28318548202515 / ((double) num1 * 2.0),
                                    new Vector2());
                                for (float num6 = 0.0f; (double) num6 < (double) num4; ++num6)
                                {
                                    Vector2 vector2_2 = Vector2.Lerp(spinningpoint, vector2_1, num6 / num4);
                                    float num7 = MathHelper.Lerp(num2, num3, num6 / num4);
                                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 133,
                                        0.0f, 0.0f, 100, new Color(), 1.3f);
                                    Main.dust[index2].velocity *= 0.1f;
                                    Main.dust[index2].noGravity = true;
                                    Main.dust[index2].velocity += vector2_2 * num7;
                                }
                            }

                            spinningpoint = spinningpoint.RotatedBy(6.28318548202515 / (double) num1, new Vector2());
                        }

                        for (float num5 = 0.0f; (double) num5 < (double) num1; ++num5)
                        {
                            for (int index1 = 0; index1 < 2; ++index1)
                            {
                                Vector2 vector2_1 = spinningpoint.RotatedBy(
                                    (index1 == 0 ? 1.0 : -1.0) * 6.28318548202515 / ((double) num1 * 2.0),
                                    new Vector2());
                                for (float num6 = 0.0f; (double) num6 < (double) num4; ++num6)
                                {
                                    Vector2 vector2_2 = Vector2.Lerp(spinningpoint, vector2_1, num6 / num4);
                                    float num7 = MathHelper.Lerp(num2, num3, num6 / num4) / 2f;
                                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 133,
                                        0.0f, 0.0f, 100, new Color(), 1.3f);
                                    Main.dust[index2].velocity *= 0.1f;
                                    Main.dust[index2].noGravity = true;
                                    Main.dust[index2].velocity += vector2_2 * num7;
                                }
                            }

                            spinningpoint = spinningpoint.RotatedBy(6.28318548202515 / (double) num1, new Vector2());
                        }

                        for (int index1 = 0; index1 < 100; ++index1)
                        {
                            float num5 = num2;
                            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 132, 0.0f,
                                0.0f, 100, new Color(), 1f);
                            float num6 = Main.dust[index2].velocity.X;
                            float y = Main.dust[index2].velocity.Y;
                            if ((double) num6 == 0.0 && (double) y == 0.0)
                                num6 = 1f;
                            float num7 = (float) Math.Sqrt((double) num6 * (double) num6 + (double) y * (double) y);
                            float num8 = num5 / num7;
                            float num9 = num6 * num8;
                            float num10 = y * num8;
                            Main.dust[index2].velocity *= 0.5f;
                            Main.dust[index2].velocity.X += num9;
                            Main.dust[index2].velocity.Y += num10;
                            Main.dust[index2].scale = 1.3f;
                            Main.dust[index2].noGravity = true;
                        }
                    }

                    if (this.type == 170)
                    {
                        for (int index1 = 0; index1 < 400; ++index1)
                        {
                            int Type = 133;
                            float num1 = 16f;
                            if (index1 > 100)
                                num1 = 11f;
                            if (index1 > 100)
                                Type = 134;
                            if (index1 > 200)
                                num1 = 8f;
                            if (index1 > 200)
                                Type = 133;
                            if (index1 > 300)
                                num1 = 5f;
                            if (index1 > 300)
                                Type = 134;
                            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, Type, 0.0f,
                                0.0f, 100, new Color(), 1f);
                            float num2 = Main.dust[index2].velocity.X;
                            float y = Main.dust[index2].velocity.Y;
                            if ((double) num2 == 0.0 && (double) y == 0.0)
                                num2 = 1f;
                            float num3 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) y * (double) y);
                            float num4 = num1 / num3;
                            float num5;
                            float num6;
                            if (index1 > 300)
                            {
                                num5 = (float) ((double) num2 * (double) num4 * 0.699999988079071);
                                num6 = y * num4;
                            }
                            else if (index1 > 200)
                            {
                                num5 = num2 * num4;
                                num6 = (float) ((double) y * (double) num4 * 0.699999988079071);
                            }
                            else if (index1 > 100)
                            {
                                num5 = (float) ((double) num2 * (double) num4 * 0.699999988079071);
                                num6 = y * num4;
                            }
                            else
                            {
                                num5 = num2 * num4;
                                num6 = (float) ((double) y * (double) num4 * 0.699999988079071);
                            }

                            Main.dust[index2].velocity *= 0.5f;
                            Main.dust[index2].velocity.X += num5;
                            Main.dust[index2].velocity.Y += num6;
                            if (Main.rand.Next(3) != 0)
                            {
                                Main.dust[index2].scale = 1.3f;
                                Main.dust[index2].noGravity = true;
                            }
                        }
                    }

                    if (this.type == 415)
                    {
                        Vector2 spinningpoint = ((float) Main.rand.NextDouble() * 6.283185f).ToRotationVector2();
                        float num1 = (float) Main.rand.Next(5, 9);
                        float num2 = (float) Main.rand.Next(10, 15) * 0.66f;
                        float num3 = (float) Main.rand.Next(4, 7) / 2f;
                        int num4 = 30;
                        for (int index1 = 0; (double) index1 < (double) num4 * (double) num1; ++index1)
                        {
                            if (index1 % num4 == 0)
                                spinningpoint =
                                    spinningpoint.RotatedBy(6.28318548202515 / (double) num1, new Vector2());
                            float num5 = MathHelper.Lerp(num3, num2, (float) (index1 % num4) / (float) num4);
                            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 130, 0.0f,
                                0.0f, 100, new Color(), 1f);
                            Main.dust[index2].velocity *= 0.1f;
                            Main.dust[index2].velocity += spinningpoint * num5;
                            Main.dust[index2].scale = 1.3f;
                            Main.dust[index2].noGravity = true;
                        }

                        for (int index1 = 0; index1 < 100; ++index1)
                        {
                            float num5 = num2;
                            if (index1 < 30)
                                num5 = (float) (((double) num3 + (double) num2) / 2.0);
                            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 130, 0.0f,
                                0.0f, 100, new Color(), 1f);
                            float num6 = Main.dust[index2].velocity.X;
                            float y = Main.dust[index2].velocity.Y;
                            if ((double) num6 == 0.0 && (double) y == 0.0)
                                num6 = 1f;
                            float num7 = (float) Math.Sqrt((double) num6 * (double) num6 + (double) y * (double) y);
                            float num8 = num5 / num7;
                            float num9 = num6 * num8;
                            float num10 = y * num8;
                            Main.dust[index2].velocity *= 0.5f;
                            Main.dust[index2].velocity.X += num9;
                            Main.dust[index2].velocity.Y += num10;
                            Main.dust[index2].scale = 1.3f;
                            Main.dust[index2].noGravity = true;
                        }
                    }

                    if (this.type == 416)
                    {
                        Vector2 spinningpoint1 = ((float) Main.rand.NextDouble() * 6.283185f).ToRotationVector2();
                        Vector2 spinningpoint2 = spinningpoint1;
                        float num1 = (float) (Main.rand.Next(3, 6) * 2);
                        int num2 = 20;
                        float num3 = Main.rand.Next(2) == 0 ? 1f : -1f;
                        bool flag = true;
                        for (int index1 = 0; (double) index1 < (double) num2 * (double) num1; ++index1)
                        {
                            if (index1 % num2 == 0)
                            {
                                spinningpoint2 =
                                    spinningpoint2.RotatedBy((double) num3 * (6.28318548202515 / (double) num1),
                                        new Vector2());
                                spinningpoint1 = spinningpoint2;
                                flag = !flag;
                            }
                            else
                            {
                                float num4 = 6.283185f / ((float) num2 * num1);
                                spinningpoint1 = spinningpoint1.RotatedBy((double) num4 * (double) num3 * 3.0,
                                    new Vector2());
                            }

                            float num5 = MathHelper.Lerp(1f, 8f, (float) (index1 % num2) / (float) num2);
                            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 131, 0.0f,
                                0.0f, 100, new Color(), 1.4f);
                            Main.dust[index2].velocity *= 0.1f;
                            Main.dust[index2].velocity += spinningpoint1 * num5;
                            if (flag)
                                Main.dust[index2].scale = 0.9f;
                            Main.dust[index2].noGravity = true;
                        }
                    }

                    if (this.type == 417)
                    {
                        float num1 = (float) Main.rand.NextDouble() * 6.283185f;
                        float num2 = (float) Main.rand.NextDouble() * 6.283185f;
                        float num3 = (float) (4.0 + Main.rand.NextDouble() * 3.0);
                        float num4 = (float) (4.0 + Main.rand.NextDouble() * 3.0);
                        float num5 = num3;
                        if ((double) num4 > (double) num5)
                            num5 = num4;
                        for (int index1 = 0; index1 < 150; ++index1)
                        {
                            int Type = 132;
                            float num6 = num5;
                            if (index1 > 50)
                                num6 = num4;
                            if (index1 > 50)
                                Type = 133;
                            if (index1 > 100)
                                num6 = num3;
                            if (index1 > 100)
                                Type = 132;
                            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, Type, 0.0f,
                                0.0f, 100, new Color(), 1f);
                            Vector2 velocity = Main.dust[index2].velocity;
                            velocity.Normalize();
                            Vector2 spinningpoint = velocity * num6;
                            if (index1 > 100)
                            {
                                spinningpoint.X *= 0.5f;
                                spinningpoint = spinningpoint.RotatedBy((double) num1, new Vector2());
                            }
                            else if (index1 > 50)
                            {
                                spinningpoint.Y *= 0.5f;
                                spinningpoint = spinningpoint.RotatedBy((double) num2, new Vector2());
                            }

                            Main.dust[index2].velocity *= 0.2f;
                            Main.dust[index2].velocity += spinningpoint;
                            if (index1 <= 200)
                            {
                                Main.dust[index2].scale = 1.3f;
                                Main.dust[index2].noGravity = true;
                            }
                        }
                    }

                    if (this.type == 418)
                    {
                        Vector2 spinningpoint = ((float) Main.rand.NextDouble() * 6.283185f).ToRotationVector2();
                        float num1 = (float) Main.rand.Next(5, 12);
                        float num2 = (float) Main.rand.Next(9, 14) * 0.66f;
                        float num3 = (float) Main.rand.Next(2, 4) * 0.66f;
                        float num4 = 15f;
                        for (float num5 = 0.0f; (double) num5 < (double) num1; ++num5)
                        {
                            for (int index1 = 0; index1 < 2; ++index1)
                            {
                                Vector2 vector2_1 = spinningpoint.RotatedBy(
                                    (index1 == 0 ? 1.0 : -1.0) * 6.28318548202515 / ((double) num1 * 2.0),
                                    new Vector2());
                                for (float num6 = 0.0f; (double) num6 < (double) num4; ++num6)
                                {
                                    Vector2 vector2_2 = Vector2.SmoothStep(spinningpoint, vector2_1, num6 / num4);
                                    float num7 = MathHelper.SmoothStep(num2, num3, num6 / num4);
                                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 134,
                                        0.0f, 0.0f, 100, new Color(), 1.3f);
                                    Main.dust[index2].velocity *= 0.1f;
                                    Main.dust[index2].noGravity = true;
                                    Main.dust[index2].velocity += vector2_2 * num7;
                                }
                            }

                            spinningpoint = spinningpoint.RotatedBy(6.28318548202515 / (double) num1, new Vector2());
                        }

                        for (int index1 = 0; index1 < 120; ++index1)
                        {
                            float num5 = num2;
                            int Type = 133;
                            if (index1 < 80)
                                num5 = num3 - 0.5f;
                            else
                                Type = 131;
                            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, Type, 0.0f,
                                0.0f, 100, new Color(), 1f);
                            float num6 = Main.dust[index2].velocity.X;
                            float y = Main.dust[index2].velocity.Y;
                            if ((double) num6 == 0.0 && (double) y == 0.0)
                                num6 = 1f;
                            float num7 = (float) Math.Sqrt((double) num6 * (double) num6 + (double) y * (double) y);
                            float num8 = num5 / num7;
                            float num9 = num6 * num8;
                            float num10 = y * num8;
                            Main.dust[index2].velocity *= 0.2f;
                            Main.dust[index2].velocity.X += num9;
                            Main.dust[index2].velocity.Y += num10;
                            Main.dust[index2].scale = 1.3f;
                            Main.dust[index2].noGravity = true;
                        }
                    }

                    this.position.X += (float) (this.width / 2);
                    this.position.Y += (float) (this.height / 2);
                    this.width = 192;
                    this.height = 192;
                    this.position.X -= (float) (this.width / 2);
                    this.position.Y -= (float) (this.height / 2);
                    this.penetrate = -1;
                    this.Damage();
                }
                else if (this.type == 312)
                {
                    Main.PlaySound(SoundID.Item14, this.position);
                    this.position.X += (float) (this.width / 2);
                    this.position.Y += (float) (this.height / 2);
                    this.width = 22;
                    this.height = 22;
                    this.position.X -= (float) (this.width / 2);
                    this.position.Y -= (float) (this.height / 2);
                    for (int index1 = 0; index1 < 30; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                        Main.dust[index2].velocity *= 1.4f;
                    }

                    for (int index1 = 0; index1 < 20; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 3.5f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 7f;
                        int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
                        Main.dust[index3].velocity *= 3f;
                    }

                    for (int index1 = 0; index1 < 2; ++index1)
                    {
                        float num = 0.4f;
                        if (index1 == 1)
                            num = 0.8f;
                        int index2 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[index2].velocity *= num;
                        ++Main.gore[index2].velocity.X;
                        ++Main.gore[index2].velocity.Y;
                        int index3 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[index3].velocity *= num;
                        --Main.gore[index3].velocity.X;
                        ++Main.gore[index3].velocity.Y;
                        int index4 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[index4].velocity *= num;
                        ++Main.gore[index4].velocity.X;
                        --Main.gore[index4].velocity.Y;
                        int index5 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[index5].velocity *= num;
                        --Main.gore[index5].velocity.X;
                        --Main.gore[index5].velocity.Y;
                    }

                    this.position.X += (float) (this.width / 2);
                    this.position.Y += (float) (this.height / 2);
                    this.width = 128;
                    this.height = 128;
                    this.position.X -= (float) (this.width / 2);
                    this.position.Y -= (float) (this.height / 2);
                    this.Damage();
                }
                else if (this.type == 133 || this.type == 134 || (this.type == 135 || this.type == 136) ||
                         (this.type == 137 || this.type == 138 || (this.type == 303 || this.type == 338)) ||
                         this.type == 339)
                {
                    if (this.type == 30 || this.type == 133 || (this.type == 136 || this.type == 139))
                        Main.PlaySound(SoundID.Item62, this.position);
                    else
                        Main.PlaySound(SoundID.Item14, this.position);
                    this.position.X += (float) (this.width / 2);
                    this.position.Y += (float) (this.height / 2);
                    this.width = 22;
                    this.height = 22;
                    this.position.X -= (float) (this.width / 2);
                    this.position.Y -= (float) (this.height / 2);
                    for (int index1 = 0; index1 < 30; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                        Main.dust[index2].velocity *= 1.4f;
                    }

                    for (int index1 = 0; index1 < 20; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 3.5f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 7f;
                        int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
                        Main.dust[index3].velocity *= 3f;
                    }

                    for (int index1 = 0; index1 < 2; ++index1)
                    {
                        float num = 0.4f;
                        if (index1 == 1)
                            num = 0.8f;
                        int index2 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[index2].velocity *= num;
                        ++Main.gore[index2].velocity.X;
                        ++Main.gore[index2].velocity.Y;
                        int index3 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[index3].velocity *= num;
                        --Main.gore[index3].velocity.X;
                        ++Main.gore[index3].velocity.Y;
                        int index4 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[index4].velocity *= num;
                        ++Main.gore[index4].velocity.X;
                        --Main.gore[index4].velocity.Y;
                        int index5 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                            Main.rand.Next(61, 64), 1f);
                        Main.gore[index5].velocity *= num;
                        --Main.gore[index5].velocity.X;
                        --Main.gore[index5].velocity.Y;
                    }
                }
                else if (this.type == 139 || this.type == 140 || (this.type == 141 || this.type == 142) ||
                         (this.type == 143 || this.type == 144 || (this.type == 340 || this.type == 341)))
                {
                    if (this.type == 30 || this.type == 133 || (this.type == 136 || this.type == 139))
                        Main.PlaySound(SoundID.Item62, this.position);
                    else
                        Main.PlaySound(SoundID.Item14, this.position);
                    this.position.X += (float) (this.width / 2);
                    this.position.Y += (float) (this.height / 2);
                    this.width = 80;
                    this.height = 80;
                    this.position.X -= (float) (this.width / 2);
                    this.position.Y -= (float) (this.height / 2);
                    for (int index1 = 0; index1 < 40; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 31, 0.0f, 0.0f, 100, new Color(), 2f);
                        Main.dust[index2].velocity *= 3f;
                        if (Main.rand.Next(2) == 0)
                        {
                            Main.dust[index2].scale = 0.5f;
                            Main.dust[index2].fadeIn = (float) (1.0 + (double) Main.rand.Next(10) * 0.100000001490116);
                        }
                    }

                    for (int index1 = 0; index1 < 70; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 3f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 5f;
                        int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 2f);
                        Main.dust[index3].velocity *= 2f;
                    }

                    for (int index1 = 0; index1 < 3; ++index1)
                    {
                        float num = 0.33f;
                        if (index1 == 1)
                            num = 0.66f;
                        if (index1 == 2)
                            num = 1f;
                        int index2 =
                            Gore.NewGore(
                                new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0),
                                    (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)),
                                new Vector2(), Main.rand.Next(61, 64), 1f);
                        Main.gore[index2].velocity *= num;
                        ++Main.gore[index2].velocity.X;
                        ++Main.gore[index2].velocity.Y;
                        int index3 =
                            Gore.NewGore(
                                new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0),
                                    (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)),
                                new Vector2(), Main.rand.Next(61, 64), 1f);
                        Main.gore[index3].velocity *= num;
                        --Main.gore[index3].velocity.X;
                        ++Main.gore[index3].velocity.Y;
                        int index4 =
                            Gore.NewGore(
                                new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0),
                                    (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)),
                                new Vector2(), Main.rand.Next(61, 64), 1f);
                        Main.gore[index4].velocity *= num;
                        ++Main.gore[index4].velocity.X;
                        --Main.gore[index4].velocity.Y;
                        int index5 =
                            Gore.NewGore(
                                new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0),
                                    (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)),
                                new Vector2(), Main.rand.Next(61, 64), 1f);
                        Main.gore[index5].velocity *= num;
                        --Main.gore[index5].velocity.X;
                        --Main.gore[index5].velocity.Y;
                    }

                    this.position.X += (float) (this.width / 2);
                    this.position.Y += (float) (this.height / 2);
                    this.width = 10;
                    this.height = 10;
                    this.position.X -= (float) (this.width / 2);
                    this.position.Y -= (float) (this.height / 2);
                }
                else if (this.type == 246)
                {
                    Main.PlaySound(SoundID.Item14, this.position);
                    for (int index1 = 0; index1 < 10; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                        Main.dust[index2].velocity *= 0.9f;
                    }

                    for (int index1 = 0; index1 < 5; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 2.5f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 3f;
                        int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
                        Main.dust[index3].velocity *= 2f;
                    }

                    int index4 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    Main.gore[index4].velocity *= 0.3f;
                    Main.gore[index4].velocity.X += (float) Main.rand.Next(-1, 2);
                    Main.gore[index4].velocity.Y += (float) Main.rand.Next(-1, 2);
                    this.position.X += (float) (this.width / 2);
                    this.position.Y += (float) (this.height / 2);
                    this.width = 150;
                    this.height = 150;
                    this.position.X -= (float) (this.width / 2);
                    this.position.Y -= (float) (this.height / 2);
                    this.penetrate = -1;
                    this.maxPenetrate = 0;
                    this.Damage();
                    if (this.owner == Main.myPlayer)
                    {
                        int num1 = Main.rand.Next(2, 6);
                        for (int index1 = 0; index1 < num1; ++index1)
                        {
                            float num2 = (float) Main.rand.Next(-100, 101) + 0.01f;
                            float num3 = (float) Main.rand.Next(-100, 101);
                            float num4 = num2 - 0.01f;
                            float num5 =
                                8f / (float) Math.Sqrt((double) num4 * (double) num4 + (double) num3 * (double) num3);
                            int index2 = Projectile.NewProjectile(this.Center.X - this.oldVelocity.X,
                                this.Center.Y - this.oldVelocity.Y, num4 * num5, num3 * num5, 249, this.damage,
                                this.knockBack, this.owner, 0.0f, 0.0f);
                            Main.projectile[index2].maxPenetrate = 0;
                        }
                    }
                }
                else if (this.type == 249)
                {
                    Main.PlaySound(SoundID.Item14, this.position);
                    for (int index1 = 0; index1 < 7; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                        Main.dust[index2].velocity *= 0.8f;
                    }

                    for (int index1 = 0; index1 < 2; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 2.5f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 2.5f;
                        int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
                        Main.dust[index3].velocity *= 1.5f;
                    }

                    int index = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    Main.gore[index].velocity *= 0.2f;
                    Main.gore[index].velocity.X += (float) Main.rand.Next(-1, 2);
                    Main.gore[index].velocity.Y += (float) Main.rand.Next(-1, 2);
                    this.position.X += (float) (this.width / 2);
                    this.position.Y += (float) (this.height / 2);
                    this.width = 100;
                    this.height = 100;
                    this.position.X -= (float) (this.width / 2);
                    this.position.Y -= (float) (this.height / 2);
                    this.penetrate = -1;
                    this.Damage();
                }
                else if (this.type == 588)
                {
                    Main.PlaySound(SoundID.Item14, this.position);
                    this.position = this.Center;
                    this.width = this.height = 22;
                    this.Center = this.position;
                    for (int index1 = 0; index1 < 8; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 219 + Main.rand.Next(5), 0.0f, 0.0f, 0, new Color(), 1f);
                        Main.dust[index2].velocity *= 1.4f;
                        Main.dust[index2].fadeIn = 1f;
                        Main.dust[index2].noGravity = true;
                    }

                    for (int index1 = 0; index1 < 15; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 139 + Main.rand.Next(4), 0.0f, 0.0f, 0, new Color(), 1.6f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 5f;
                        int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 139 + Main.rand.Next(4), 0.0f, 0.0f, 0, new Color(), 1.9f);
                        Main.dust[index3].velocity *= 3f;
                    }

                    if (Main.rand.Next(2) == 0)
                    {
                        int index = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                            Main.rand.Next(276, 283), 1f);
                        Main.gore[index].velocity *= 0.4f;
                        ++Main.gore[index].velocity.X;
                        ++Main.gore[index].velocity.Y;
                    }

                    if (Main.rand.Next(2) == 0)
                    {
                        int index = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                            Main.rand.Next(276, 283), 1f);
                        Main.gore[index].velocity *= 0.4f;
                        --Main.gore[index].velocity.X;
                        ++Main.gore[index].velocity.Y;
                    }

                    if (Main.rand.Next(2) == 0)
                    {
                        int index = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                            Main.rand.Next(276, 283), 1f);
                        Main.gore[index].velocity *= 0.4f;
                        ++Main.gore[index].velocity.X;
                        --Main.gore[index].velocity.Y;
                    }

                    if (Main.rand.Next(2) == 0)
                    {
                        int index = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                            Main.rand.Next(276, 283), 1f);
                        Main.gore[index].velocity *= 0.4f;
                        --Main.gore[index].velocity.X;
                        --Main.gore[index].velocity.Y;
                    }
                }
                else if (this.type == 28 || this.type == 30 || (this.type == 37 || this.type == 75) ||
                         (this.type == 102 || this.type == 164 || (this.type == 397 || this.type == 517)) ||
                         (this.type == 516 || this.type == 519))
                {
                    Main.PlaySound(SoundID.Item14, this.position);
                    this.position.X += (float) (this.width / 2);
                    this.position.Y += (float) (this.height / 2);
                    this.width = 22;
                    this.height = 22;
                    this.position.X -= (float) (this.width / 2);
                    this.position.Y -= (float) (this.height / 2);
                    for (int index1 = 0; index1 < 20; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                        Main.dust[index2].velocity *= 1.4f;
                    }

                    for (int index1 = 0; index1 < 10; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 2.5f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 5f;
                        int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
                        Main.dust[index3].velocity *= 3f;
                    }

                    int index4 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    Main.gore[index4].velocity *= 0.4f;
                    ++Main.gore[index4].velocity.X;
                    ++Main.gore[index4].velocity.Y;
                    int index5 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    Main.gore[index5].velocity *= 0.4f;
                    --Main.gore[index5].velocity.X;
                    ++Main.gore[index5].velocity.Y;
                    int index6 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    Main.gore[index6].velocity *= 0.4f;
                    ++Main.gore[index6].velocity.X;
                    --Main.gore[index6].velocity.Y;
                    int index7 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(),
                        Main.rand.Next(61, 64), 1f);
                    Main.gore[index7].velocity *= 0.4f;
                    --Main.gore[index7].velocity.X;
                    --Main.gore[index7].velocity.Y;
                    if (this.type == 102)
                    {
                        this.position.X += (float) (this.width / 2);
                        this.position.Y += (float) (this.height / 2);
                        this.width = 128;
                        this.height = 128;
                        this.position.X -= (float) (this.width / 2);
                        this.position.Y -= (float) (this.height / 2);
                        this.damage = 40;
                        this.Damage();
                    }
                }
                else if (this.type == 29 || this.type == 108 || (this.type == 470 || this.type == 637))
                {
                    Main.PlaySound(SoundID.Item14, this.position);
                    if (this.type == 29)
                    {
                        this.position.X += (float) (this.width / 2);
                        this.position.Y += (float) (this.height / 2);
                        this.width = 200;
                        this.height = 200;
                        this.position.X -= (float) (this.width / 2);
                        this.position.Y -= (float) (this.height / 2);
                    }

                    for (int index1 = 0; index1 < 50; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 31, 0.0f, 0.0f, 100, new Color(), 2f);
                        Main.dust[index2].velocity *= 1.4f;
                    }

                    for (int index1 = 0; index1 < 80; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 3f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 5f;
                        int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 6, 0.0f, 0.0f, 100, new Color(), 2f);
                        Main.dust[index3].velocity *= 3f;
                    }

                    for (int index1 = 0; index1 < 2; ++index1)
                    {
                        int index2 =
                            Gore.NewGore(
                                new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0),
                                    (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)),
                                new Vector2(), Main.rand.Next(61, 64), 1f);
                        Main.gore[index2].scale = 1.5f;
                        Main.gore[index2].velocity.X += 1.5f;
                        Main.gore[index2].velocity.Y += 1.5f;
                        int index3 =
                            Gore.NewGore(
                                new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0),
                                    (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)),
                                new Vector2(), Main.rand.Next(61, 64), 1f);
                        Main.gore[index3].scale = 1.5f;
                        Main.gore[index3].velocity.X -= 1.5f;
                        Main.gore[index3].velocity.Y += 1.5f;
                        int index4 =
                            Gore.NewGore(
                                new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0),
                                    (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)),
                                new Vector2(), Main.rand.Next(61, 64), 1f);
                        Main.gore[index4].scale = 1.5f;
                        Main.gore[index4].velocity.X += 1.5f;
                        Main.gore[index4].velocity.Y -= 1.5f;
                        int index5 =
                            Gore.NewGore(
                                new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0),
                                    (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)),
                                new Vector2(), Main.rand.Next(61, 64), 1f);
                        Main.gore[index5].scale = 1.5f;
                        Main.gore[index5].velocity.X -= 1.5f;
                        Main.gore[index5].velocity.Y -= 1.5f;
                    }

                    this.position.X += (float) (this.width / 2);
                    this.position.Y += (float) (this.height / 2);
                    this.width = 10;
                    this.height = 10;
                    this.position.X -= (float) (this.width / 2);
                    this.position.Y -= (float) (this.height / 2);
                }
                else if (this.type == 69)
                {
                    Main.PlaySound(13, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index = 0; index < 5; ++index)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13, 0.0f,
                            0.0f, 0, new Color(), 1f);
                    for (int index1 = 0; index1 < 30; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 33, 0.0f, -2f, 0, new Color(), 1.1f);
                        Main.dust[index2].alpha = 100;
                        Main.dust[index2].velocity.X *= 1.5f;
                        Main.dust[index2].velocity *= 3f;
                    }
                }
                else if (this.type == 70)
                {
                    Main.PlaySound(13, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index = 0; index < 5; ++index)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13, 0.0f,
                            0.0f, 0, new Color(), 1f);
                    for (int index1 = 0; index1 < 30; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 52, 0.0f, -2f, 0, new Color(), 1.1f);
                        Main.dust[index2].alpha = 100;
                        Main.dust[index2].velocity.X *= 1.5f;
                        Main.dust[index2].velocity *= 3f;
                    }
                }
                else if (this.type == 621)
                {
                    Main.PlaySound(13, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    for (int index = 0; index < 5; ++index)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13, 0.0f,
                            0.0f, 0, new Color(), 1f);
                    for (int index1 = 0; index1 < 30; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width,
                            this.height, 266, 0.0f, -2f, 0, new Color(), 1.1f);
                        Main.dust[index2].alpha = 100;
                        Main.dust[index2].velocity.X *= 1.5f;
                        Main.dust[index2].velocity *= 3f;
                    }
                }
                else if (this.type == 114 || this.type == 115)
                {
                    Main.PlaySound(SoundID.Item10, this.position);
                    for (int index1 = 4; index1 < 31; ++index1)
                    {
                        float num1 = this.oldVelocity.X * (30f / (float) index1);
                        float num2 = this.oldVelocity.Y * (30f / (float) index1);
                        int index2 = Dust.NewDust(new Vector2(this.position.X - num1, this.position.Y - num2), 8, 8, 27,
                            this.oldVelocity.X, this.oldVelocity.Y, 100, new Color(), 1.4f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 0.5f;
                        int index3 = Dust.NewDust(new Vector2(this.position.X - num1, this.position.Y - num2), 8, 8, 27,
                            this.oldVelocity.X, this.oldVelocity.Y, 100, new Color(), 0.9f);
                        Main.dust[index3].velocity *= 0.5f;
                    }
                }
                else if (this.type == 116)
                {
                    Main.PlaySound(SoundID.Item10, this.position);
                    for (int index1 = 4; index1 < 31; ++index1)
                    {
                        float num1 = this.oldVelocity.X * (30f / (float) index1);
                        float num2 = this.oldVelocity.Y * (30f / (float) index1);
                        int index2 = Dust.NewDust(new Vector2(this.position.X - num1, this.position.Y - num2), 8, 8, 64,
                            this.oldVelocity.X, this.oldVelocity.Y, 100, new Color(), 1.8f);
                        Main.dust[index2].noGravity = true;
                        int index3 = Dust.NewDust(new Vector2(this.position.X - num1, this.position.Y - num2), 8, 8, 64,
                            this.oldVelocity.X, this.oldVelocity.Y, 100, new Color(), 1.4f);
                        Main.dust[index3].noGravity = true;
                    }
                }
                else if (this.type == 173)
                {
                    Main.PlaySound(SoundID.Item10, this.position);
                    for (int index1 = 4; index1 < 24; ++index1)
                    {
                        float num1 = this.oldVelocity.X * (30f / (float) index1);
                        float num2 = this.oldVelocity.Y * (30f / (float) index1);
                        int Type;
                        switch (Main.rand.Next(3))
                        {
                            case 0:
                                Type = 15;
                                break;
                            case 1:
                                Type = 57;
                                break;
                            default:
                                Type = 58;
                                break;
                        }

                        int index2 = Dust.NewDust(new Vector2(this.position.X - num1, this.position.Y - num2), 8, 8,
                            Type, this.oldVelocity.X * 0.2f, this.oldVelocity.Y * 0.2f, 100, new Color(), 1.8f);
                        Main.dust[index2].velocity *= 1.5f;
                        Main.dust[index2].noGravity = true;
                    }
                }
                else if (this.type == 132)
                {
                    Main.PlaySound(SoundID.Item10, this.position);
                    for (int index1 = 4; index1 < 31; ++index1)
                    {
                        float num1 = this.oldVelocity.X * (30f / (float) index1);
                        float num2 = this.oldVelocity.Y * (30f / (float) index1);
                        int index2 = Dust.NewDust(new Vector2(this.oldPosition.X - num1, this.oldPosition.Y - num2), 8,
                            8, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, new Color(), 1.8f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 0.5f;
                        int index3 = Dust.NewDust(new Vector2(this.oldPosition.X - num1, this.oldPosition.Y - num2), 8,
                            8, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, new Color(), 1.4f);
                        Main.dust[index3].velocity *= 0.05f;
                    }
                }
                else if (this.type == 156)
                {
                    Main.PlaySound(SoundID.Item10, this.position);
                    for (int index1 = 4; index1 < 31; ++index1)
                    {
                        float num1 = this.oldVelocity.X * (30f / (float) index1);
                        float num2 = this.oldVelocity.Y * (30f / (float) index1);
                        int index2 = Dust.NewDust(new Vector2(this.oldPosition.X - num1, this.oldPosition.Y - num2), 8,
                            8, 73, this.oldVelocity.X, this.oldVelocity.Y, (int) byte.MaxValue, new Color(), 1.8f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 0.5f;
                        int index3 = Dust.NewDust(new Vector2(this.oldPosition.X - num1, this.oldPosition.Y - num2), 8,
                            8, 73, this.oldVelocity.X, this.oldVelocity.Y, (int) byte.MaxValue, new Color(), 1.4f);
                        Main.dust[index3].velocity *= 0.05f;
                        Main.dust[index3].noGravity = true;
                    }
                }
                else if (this.type == 157)
                {
                    Main.PlaySound(SoundID.Item10, this.position);
                    for (int index1 = 4; index1 < 31; ++index1)
                    {
                        int index2 = Dust.NewDust(this.position, this.width, this.height, 107, this.oldVelocity.X,
                            this.oldVelocity.Y, 100, new Color(), 1.8f);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity *= 0.5f;
                    }
                }
                else if (this.type == 370)
                {
                    Main.PlaySound(SoundID.Item4, this.position);
                    for (int index = 0; index < 5; ++index)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13, 0.0f,
                            0.0f, 0, new Color(), 1f);
                    for (int index1 = 0; index1 < 30; ++index1)
                    {
                        Vector2 vector2 = new Vector2((float) Main.rand.Next(-10, 11), (float) Main.rand.Next(-10, 11));
                        vector2.Normalize();
                        int index2 = Gore.NewGore(this.Center + vector2 * 10f,
                            vector2 * (float) Main.rand.Next(4, 9) * 0.66f + Vector2.UnitY * 1.5f, 331,
                            (float) Main.rand.Next(40, 141) * 0.01f);
                        Main.gore[index2].sticky = false;
                    }
                }
                else if (this.type == 371)
                {
                    Main.PlaySound(13, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    Main.PlaySound(SoundID.Item16, this.position);
                    for (int index = 0; index < 5; ++index)
                        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13, 0.0f,
                            0.0f, 0, new Color(), 1f);
                    for (int index1 = 0; index1 < 30; ++index1)
                    {
                        Vector2 vector2 = new Vector2((float) Main.rand.Next(-10, 11), (float) Main.rand.Next(-10, 11));
                        vector2.Normalize();
                        vector2 *= 0.4f;
                        int index2 = Gore.NewGore(this.Center + vector2 * 10f,
                            vector2 * (float) Main.rand.Next(4, 9) * 0.66f + Vector2.UnitY * 1.5f,
                            Main.rand.Next(435, 438), (float) Main.rand.Next(20, 100) * 0.01f);
                        Main.gore[index2].sticky = false;
                    }
                }
            }

            if (this.owner == Main.myPlayer && (this.type == 370 || this.type == 371))
            {
                float num = 80f;
                int type = 119;
                if (this.type == 371)
                    type = 120;
                for (int index = 0; index < (int) byte.MaxValue; ++index)
                {
                    Player player = Main.player[index];
                    if (player.active && !player.dead &&
                        (double) Vector2.Distance(this.Center, player.Center) < (double) num)
                        player.AddBuff(type, 1800, false);
                }

                for (int index = 0; index < 200; ++index)
                {
                    NPC npc = Main.npc[index];
                    if (npc.active && npc.life > 0 && (double) Vector2.Distance(this.Center, npc.Center) < (double) num)
                        npc.AddBuff(type, 1800, false);
                }
            }

            if (this.owner == Main.myPlayer)
            {
                if (this.type == 28 || this.type == 29 || (this.type == 37 || this.type == 108) ||
                    (this.type == 136 || this.type == 137 || (this.type == 138 || this.type == 142)) ||
                    (this.type == 143 || this.type == 144 || (this.type == 339 || this.type == 341) ||
                     (this.type == 470 || this.type == 516 || (this.type == 519 || this.type == 637))))
                {
                    int num1 = 3;
                    if (this.type == 28 || this.type == 37 || (this.type == 516 || this.type == 519))
                        num1 = 4;
                    if (this.type == 29 || this.type == 470 || this.type == 637)
                        num1 = 7;
                    if (this.type == 142 || this.type == 143 || (this.type == 144 || this.type == 341))
                        num1 = 5;
                    if (this.type == 108)
                        num1 = 10;
                    int num2 = (int) ((double) this.position.X / 16.0 - (double) num1);
                    int num3 = (int) ((double) this.position.X / 16.0 + (double) num1);
                    int num4 = (int) ((double) this.position.Y / 16.0 - (double) num1);
                    int num5 = (int) ((double) this.position.Y / 16.0 + (double) num1);
                    if (num2 < 0)
                        num2 = 0;
                    if (num3 > Main.maxTilesX)
                        num3 = Main.maxTilesX;
                    if (num4 < 0)
                        num4 = 0;
                    if (num5 > Main.maxTilesY)
                        num5 = Main.maxTilesY;
                    bool flag1 = false;
                    for (int index1 = num2; index1 <= num3; ++index1)
                    {
                        for (int index2 = num4; index2 <= num5; ++index2)
                        {
                            float num6 = Math.Abs((float) index1 - this.position.X / 16f);
                            float num7 = Math.Abs((float) index2 - this.position.Y / 16f);
                            if (Math.Sqrt((double) num6 * (double) num6 + (double) num7 * (double) num7) <
                                (double) num1 && Main.tile[index1, index2] != null &&
                                Main.tile[index1, index2].wall == (byte) 0)
                            {
                                flag1 = true;
                                break;
                            }
                        }
                    }

                    AchievementsHelper.CurrentlyMining = true;
                    for (int i1 = num2; i1 <= num3; ++i1)
                    {
                        for (int j1 = num4; j1 <= num5; ++j1)
                        {
                            float num6 = Math.Abs((float) i1 - this.position.X / 16f);
                            float num7 = Math.Abs((float) j1 - this.position.Y / 16f);
                            if (Math.Sqrt((double) num6 * (double) num6 + (double) num7 * (double) num7) <
                                (double) num1)
                            {
                                bool flag2 = true;
                                if (Main.tile[i1, j1] != null && Main.tile[i1, j1].active())
                                {
                                    flag2 = true;
                                    if (Main.tileDungeon[(int) Main.tile[i1, j1].type] ||
                                        Main.tile[i1, j1].type == (ushort) 88 ||
                                        (TileID.Sets.BasicChest[(int) Main.tile[i1, j1].type] ||
                                         Main.tile[i1, j1].type == (ushort) 26) ||
                                        (Main.tile[i1, j1].type == (ushort) 107 ||
                                         Main.tile[i1, j1].type == (ushort) 108 ||
                                         (Main.tile[i1, j1].type == (ushort) 111 ||
                                          Main.tile[i1, j1].type == (ushort) 226)) ||
                                        (Main.tile[i1, j1].type == (ushort) 237 ||
                                         Main.tile[i1, j1].type == (ushort) 221 ||
                                         (Main.tile[i1, j1].type == (ushort) 222 ||
                                          Main.tile[i1, j1].type == (ushort) 223) ||
                                         (Main.tile[i1, j1].type == (ushort) 211 ||
                                          Main.tile[i1, j1].type == (ushort) 404)))
                                        flag2 = false;
                                    if (!Main.hardMode && Main.tile[i1, j1].type == (ushort) 58)
                                        flag2 = false;
                                    if (flag2)
                                    {
                                        WorldGen.KillTile(i1, j1, false, false, false);
                                        if (!Main.tile[i1, j1].active() && Main.netMode != 0)
                                            NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) i1,
                                                (float) j1, 0.0f, 0, 0, 0);
                                    }
                                }

                                if (flag2)
                                {
                                    for (int i2 = i1 - 1; i2 <= i1 + 1; ++i2)
                                    {
                                        for (int j2 = j1 - 1; j2 <= j1 + 1; ++j2)
                                        {
                                            if (Main.tile[i2, j2] != null && Main.tile[i2, j2].wall > (byte) 0 && flag1)
                                            {
                                                WorldGen.KillWall(i2, j2, false);
                                                if (Main.tile[i2, j2].wall == (byte) 0 && Main.netMode != 0)
                                                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 2, (float) i2,
                                                        (float) j2, 0.0f, 0, 0, 0);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    AchievementsHelper.CurrentlyMining = false;
                }

                if (Main.netMode != 0)
                    NetMessage.SendData(29, -1, -1, (NetworkText) null, this.identity, (float) this.owner, 0.0f, 0.0f,
                        0, 0, 0);
                if (!this.noDropItem)
                {
                    int number = -1;
                    if (this.aiStyle == 10)
                    {
                        int i = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
                        int j = (int) ((double) this.position.Y + (double) (this.width / 2)) / 16;
                        int type = 0;
                        int Type = 2;
                        if (this.type == 109)
                        {
                            type = 147;
                            Type = 0;
                        }

                        if (this.type == 31)
                        {
                            type = 53;
                            Type = 0;
                        }

                        if (this.type == 42)
                        {
                            type = 53;
                            Type = 0;
                        }

                        if (this.type == 56)
                        {
                            type = 112;
                            Type = 0;
                        }

                        if (this.type == 65)
                        {
                            type = 112;
                            Type = 0;
                        }

                        if (this.type == 67)
                        {
                            type = 116;
                            Type = 0;
                        }

                        if (this.type == 68)
                        {
                            type = 116;
                            Type = 0;
                        }

                        if (this.type == 71)
                        {
                            type = 123;
                            Type = 0;
                        }

                        if (this.type == 39)
                        {
                            type = 59;
                            Type = 176;
                        }

                        if (this.type == 40)
                        {
                            type = 57;
                            Type = 172;
                        }

                        if (this.type == 179)
                        {
                            type = 224;
                            Type = 0;
                        }

                        if (this.type == 241)
                        {
                            type = 234;
                            Type = 0;
                        }

                        if (this.type == 354)
                        {
                            type = 234;
                            Type = 0;
                        }

                        if (this.type == 411)
                        {
                            type = 330;
                            Type = 71;
                        }

                        if (this.type == 412)
                        {
                            type = 331;
                            Type = 72;
                        }

                        if (this.type == 413)
                        {
                            type = 332;
                            Type = 73;
                        }

                        if (this.type == 414)
                        {
                            type = 333;
                            Type = 74;
                        }

                        if (this.type == 109)
                        {
                            int closest = (int) Player.FindClosest(this.position, this.width, this.height);
                            if ((double) (this.Center - Main.player[closest].Center).Length() >
                                (double) Main.LogicCheckScreenWidth * 0.75)
                            {
                                type = -1;
                                Type = 593;
                            }
                        }

                        if (Main.tile[i, j].halfBrick() && (double) this.velocity.Y > 0.0 &&
                            (double) Math.Abs(this.velocity.Y) > (double) Math.Abs(this.velocity.X))
                            --j;
                        if (!Main.tile[i, j].active() && type >= 0)
                        {
                            bool flag = false;
                            if (j < Main.maxTilesY - 2 && Main.tile[i, j + 1] != null &&
                                (Main.tile[i, j + 1].active() && Main.tile[i, j + 1].type == (ushort) 314))
                                flag = true;
                            if (!flag)
                                WorldGen.PlaceTile(i, j, type, false, true, -1, 0);
                            if (!flag && Main.tile[i, j].active() && (int) Main.tile[i, j].type == type)
                            {
                                if (Main.tile[i, j + 1].halfBrick() || Main.tile[i, j + 1].slope() != (byte) 0)
                                {
                                    WorldGen.SlopeTile(i, j + 1, 0);
                                    if (Main.netMode == 2)
                                        NetMessage.SendData(17, -1, -1, (NetworkText) null, 14, (float) i,
                                            (float) (j + 1), 0.0f, 0, 0, 0);
                                }

                                if (Main.netMode != 0)
                                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 1, (float) i, (float) j,
                                        (float) type, 0, 0, 0);
                            }
                            else if (Type > 0)
                                number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width,
                                    this.height, Type, 1, false, 0, false, false);
                        }
                        else if (Type > 0)
                            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                                Type, 1, false, 0, false, false);
                    }

                    if (this.type == 1 && Main.rand.Next(3) == 0)
                        number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 40,
                            1, false, 0, false, false);
                    if (this.type == 474 && Main.rand.Next(3) == 0)
                        number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            3003, 1, false, 0, false, false);
                    if (this.type == 103 && Main.rand.Next(6) == 0)
                        number = Main.rand.Next(3) != 0
                            ? Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 40, 1,
                                false, 0, false, false)
                            : Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 545,
                                1, false, 0, false, false);
                    if (this.type == 2 && Main.rand.Next(3) == 0)
                        number = Main.rand.Next(3) != 0
                            ? Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 40, 1,
                                false, 0, false, false)
                            : Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 41, 1,
                                false, 0, false, false);
                    if (this.type == 172 && Main.rand.Next(3) == 0)
                        number = Main.rand.Next(3) != 0
                            ? Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 40, 1,
                                false, 0, false, false)
                            : Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 988,
                                1, false, 0, false, false);
                    if (this.type == 171)
                    {
                        if ((double) this.ai[1] == 0.0)
                        {
                            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                                985, 1, false, 0, false, false);
                            Main.item[number].noGrabDelay = 0;
                        }
                        else if ((double) this.ai[1] < 10.0)
                        {
                            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                                965, (int) (10.0 - (double) this.ai[1]), false, 0, false, false);
                            Main.item[number].noGrabDelay = 0;
                        }
                    }

                    if (this.type == 475)
                    {
                        if ((double) this.ai[1] == 0.0)
                        {
                            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                                3005, 1, false, 0, false, false);
                            Main.item[number].noGrabDelay = 0;
                        }
                        else if ((double) this.ai[1] < 10.0)
                        {
                            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                                2996, (int) (10.0 - (double) this.ai[1]), false, 0, false, false);
                            Main.item[number].noGrabDelay = 0;
                        }
                    }

                    if (this.type == 505)
                    {
                        if ((double) this.ai[1] == 0.0)
                        {
                            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                                3079, 1, false, 0, false, false);
                            Main.item[number].noGrabDelay = 0;
                        }
                        else if ((double) this.ai[1] < 10.0)
                        {
                            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                                3077, (int) (10.0 - (double) this.ai[1]), false, 0, false, false);
                            Main.item[number].noGrabDelay = 0;
                        }
                    }

                    if (this.type == 506)
                    {
                        if ((double) this.ai[1] == 0.0)
                        {
                            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                                3080, 1, false, 0, false, false);
                            Main.item[number].noGrabDelay = 0;
                        }
                        else if ((double) this.ai[1] < 10.0)
                        {
                            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                                3078, (int) (10.0 - (double) this.ai[1]), false, 0, false, false);
                            Main.item[number].noGrabDelay = 0;
                        }
                    }

                    if (this.type == 91 && Main.rand.Next(6) == 0)
                        number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            516, 1, false, 0, false, false);
                    if (this.type == 50 && Main.rand.Next(3) == 0)
                        number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            282, 1, false, 0, false, false);
                    if (this.type == 515 && Main.rand.Next(3) == 0)
                        number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            3112, 1, false, 0, false, false);
                    if (this.type == 53 && Main.rand.Next(3) == 0)
                        number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            286, 1, false, 0, false, false);
                    if (this.type == 48 && Main.rand.Next(2) == 0)
                        number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            279, 1, false, 0, false, false);
                    if (this.type == 54 && Main.rand.Next(2) == 0)
                        number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            287, 1, false, 0, false, false);
                    if (this.type == 3 && Main.rand.Next(2) == 0)
                        number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 42,
                            1, false, 0, false, false);
                    if (this.type == 4 && Main.rand.Next(4) == 0)
                        number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 47,
                            1, false, 0, false, false);
                    if (this.type == 12 && this.damage > 500)
                        number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 75,
                            1, false, 0, false, false);
                    if (this.type == 155)
                        number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            859, 1, false, 0, false, false);
                    if (this.type == 598 && Main.rand.Next(4) == 0)
                        number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            3378, 1, false, 0, false, false);
                    if (this.type == 599 && Main.rand.Next(4) == 0)
                        number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            3379, 1, false, 0, false, false);
                    if (this.type == 21 && Main.rand.Next(2) == 0)
                        number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height,
                            154, 1, false, 0, false, false);
                    if (Main.netMode == 1 && number >= 0)
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }

                if (this.type == 69 || this.type == 70 || this.type == 621)
                {
                    int i = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
                    int j = (int) ((double) this.position.Y + (double) (this.height / 2)) / 16;
                    if (this.type == 69)
                        WorldGen.Convert(i, j, 2, 4);
                    if (this.type == 70)
                        WorldGen.Convert(i, j, 1, 4);
                    if (this.type == 621)
                        WorldGen.Convert(i, j, 4, 4);
                }

                if (this.type == 378)
                {
                    int num = Main.rand.Next(2, 4);
                    if (Main.rand.Next(5) == 0)
                        ++num;
                    for (int index = 0; index < num; ++index)
                    {
                        float x = this.velocity.X;
                        float y = this.velocity.Y;
                        Projectile.NewProjectile(this.Center.X, this.Center.Y,
                            x * (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.00999999977648258),
                            y * (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.00999999977648258), 379,
                            this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
                    }
                }
            }

            this.active = false;
        }

        public Color GetAlpha(Color newColor)
        {
            if (this.type == 270)
                return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue,
                    Main.rand.Next(0, (int) byte.MaxValue));
            int num1;
            int num2;
            int num3;
            if (this.type == 650)
            {
                int num4 = (int) ((double) newColor.R * 1.5);
                int num5 = (int) ((double) newColor.G * 1.5);
                int num6 = (int) ((double) newColor.B * 1.5);
                if (num4 > (int) byte.MaxValue)
                    num1 = (int) byte.MaxValue;
                if (num5 > (int) byte.MaxValue)
                    num2 = (int) byte.MaxValue;
                if (num6 > (int) byte.MaxValue)
                    num3 = (int) byte.MaxValue;
            }
            else
            {
                if (this.type == 604 || this.type == 631)
                    return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                        (int) byte.MaxValue - this.alpha, 0);
                if (this.type == 636)
                    return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                        (int) byte.MaxValue - this.alpha, 64 - this.alpha / 4);
                if (this.type == 673 || this.type == 706)
                    return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                        (int) byte.MaxValue - this.alpha, 180 - this.alpha / 2 - this.alpha / 4);
                if (this.type == 603 || this.type == 633)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
                if (this.type == 623 || this.type >= 625 && this.type <= 628 || this.type == 710)
                    return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                        (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
                if (this.type == 645 || this.type == 643)
                    return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                        (int) byte.MaxValue - this.alpha, (int) sbyte.MaxValue - this.alpha / 2);
                if (this.type == 611)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
                if (this.type == 640 || this.type == 644 || this.type == 658)
                    return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                        (int) byte.MaxValue - this.alpha, 0);
                if (this.type == 612)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue,
                        (int) sbyte.MaxValue);
                if (this.aiStyle == 105)
                    return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                        (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
                if (this.type == 554)
                    return new Color(200, 200, 200, 200);
                if (this.type == 601)
                    return PortalHelper.GetPortalColor(this.owner, (int) this.ai[0]);
                if (this.type == 602)
                {
                    Color portalColor = PortalHelper.GetPortalColor(this.owner, (int) this.ai[1]);
                    portalColor.A = (byte) 227;
                    return portalColor;
                }

                if (this.type == 585)
                {
                    byte a = newColor.A;
                    newColor = Color.Lerp(newColor, Color.White, 0.5f);
                    newColor.A = a;
                    return newColor;
                }

                if (this.type == 573 || this.type == 578 || (this.type == 579 || this.type == 617) ||
                    (this.type == 641 || this.type == 707))
                    return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                        (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
                if (this.type == 9 || this.type == 490)
                    return Color.White;
                if (this.type == 575 || this.type == 596 || this.type == 659)
                {
                    if (this.timeLeft < 30)
                        this.alpha = (int) ((double) byte.MaxValue -
                                            (double) byte.MaxValue * (double) ((float) this.timeLeft / 30f));
                    return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                        (int) byte.MaxValue - this.alpha, 128 - this.alpha / 2);
                }

                if (this.type == 546)
                    return new Color((int) byte.MaxValue, 200, (int) byte.MaxValue, 200);
                if (this.type == 553)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, 200, 200);
                if (this.type == 540)
                    return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                        (int) byte.MaxValue - this.alpha, 0);
                if (this.type == 498)
                    return new Color((int) byte.MaxValue, 100, 20, 200);
                if (this.type == 538)
                    return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                        (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
                if (this.type == 518)
                {
                    float num4 = (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
                    return new Color((int) (200.0 * (double) num4), (int) (200.0 * (double) num4),
                        (int) (200.0 * (double) num4), (int) (100.0 * (double) num4));
                }

                if (this.type == 518 || this.type == 595)
                {
                    Color color = Color.Lerp(newColor, Color.White, 0.85f);
                    color.A = (byte) 128;
                    return color * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
                }

                if (this.type == 536 || this.type == 607)
                    return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                        (int) byte.MaxValue - this.alpha, 63 - this.alpha / 4);
                if (this.type == 591)
                    return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                        (int) byte.MaxValue - this.alpha, 63 - this.alpha / 4);
                if (this.type == 493 || this.type == 494)
                    return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                        (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
                if (this.type == 492)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue,
                        (int) byte.MaxValue);
                if (this.type == 491)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue,
                        (int) byte.MaxValue);
                if (this.type == 485 || this.type == 502)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
                if (this.type == 488)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue,
                        (int) byte.MaxValue);
                if (this.type == 477 || this.type == 478 || this.type == 479)
                {
                    if (this.alpha == 0)
                        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
                    return new Color(0, 0, 0, 0);
                }

                if (this.type == 473)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue,
                        (int) byte.MaxValue);
                if (this.type == 50 || this.type == 53 || this.type == 515)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
                if (this.type == 92)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
                if (this.type == 91)
                    return new Color(200, 200, 200, 0);
                if (this.type == 34 || this.type == 15 || (this.type == 93 || this.type == 94) ||
                    (this.type == 95 || this.type == 96 || (this.type == 253 || this.type == 258)) ||
                    this.type == 102 && this.alpha < (int) byte.MaxValue)
                    return new Color(200, 200, 200, 25);
                if (this.type == 465)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0) *
                           (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
                if (this.type == 503)
                    return Color.Lerp(
                        Color.Lerp(newColor, Color.White, 0.5f) *
                        (float) (1.0 - (double) this.alpha / (double) byte.MaxValue),
                        Color.Lerp(Color.Purple, Color.White, 0.33f),
                        (float) (0.25 + Math.Cos((double) this.localAI[0]) * 0.25));
                if (this.type == 467)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue,
                               (int) byte.MaxValue) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
                if (this.type == 694 || this.type == 695 || this.type == 696)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue,
                               (int) sbyte.MaxValue) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
                if (this.type == 634 || this.type == 635)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue,
                               (int) sbyte.MaxValue) * this.Opacity;
                if (this.type == 671)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue,
                               (int) byte.MaxValue) * this.Opacity;
                if (this.type == 664 || this.type == 666 || this.type == 668)
                {
                    newColor = Color.Lerp(newColor, Color.White, 0.5f);
                    return new Color((int) newColor.R, (int) newColor.G, (int) newColor.B, 200) * this.Opacity;
                }

                if (this.type == 451)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200) *
                           (float) (((double) byte.MaxValue - (double) this.alpha) / (double) byte.MaxValue);
                if (this.type == 684)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200) *
                           (float) (((double) byte.MaxValue - (double) this.alpha) / (double) byte.MaxValue);
                if (this.type == 454 || this.type == 452)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue,
                               (int) byte.MaxValue) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
                if (this.type == 464)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue,
                               (int) byte.MaxValue) *
                           (float) (((double) byte.MaxValue - (double) this.alpha) / (double) byte.MaxValue);
                if (this.type == 450)
                    return new Color(200, 200, 200, (int) byte.MaxValue - this.alpha);
                if (this.type == 459 || this.type == 709)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
                if (this.type == 447)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
                if (this.type == 446)
                    return Color.Lerp(newColor, Color.White, 0.8f) *
                           (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
                if (this.type == 691 || this.type == 692 || this.type == 693)
                    return Color.Lerp(newColor, Color.White, 0.4f) *
                           (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
                if (this.type >= 646 && this.type <= 649)
                    return Color.Lerp(newColor, Color.White, 0.8f) *
                           (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
                if (this.type == 445)
                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 128) *
                           (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
                if (this.type == 440 || this.type == 449 || this.type == 606)
                {
                    num1 = (int) byte.MaxValue - this.alpha;
                    num2 = (int) byte.MaxValue - this.alpha;
                    num3 = (int) byte.MaxValue - this.alpha;
                }
                else
                {
                    if (this.type == 444)
                        return newColor * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
                    if (this.type == 443 || this.type == 675 || (this.type == 686 || this.type == 711))
                        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 128) *
                               (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
                    if (this.type == 676)
                        return newColor * this.Opacity;
                    if (this.type == 438)
                        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 128) *
                               (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
                    if (this.type == 592)
                        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 128) *
                               (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
                    if (this.type == 437 || this.type == 700)
                        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0) *
                               (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
                    if (this.type == 462)
                        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 128) *
                               (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
                    if (this.type == 352)
                        return new Color(250, 250, 250, this.alpha);
                    if (this.type == 435)
                    {
                        newColor = Color.Lerp(newColor, Color.White, 0.8f);
                        return new Color((int) newColor.R, (int) newColor.G, (int) newColor.B, 25);
                    }

                    if (this.type == 682)
                    {
                        newColor = Color.Lerp(newColor, Color.White, 0.8f);
                        return new Color((int) newColor.R, (int) newColor.G, (int) newColor.B, (int) sbyte.MaxValue);
                    }

                    if (this.type == 436)
                    {
                        newColor = Color.Lerp(newColor, Color.White, 0.8f);
                        return new Color((int) newColor.R, (int) newColor.G, (int) newColor.B, 25);
                    }

                    if (this.type == 409)
                        return new Color(250, 250, 250, 200);
                    if (this.type == 348 || this.type == 349)
                        return new Color(200, 200, 200, this.alpha);
                    if (this.type == 337)
                        return new Color(250, 250, 250, 150);
                    if (this.type >= 424 && this.type <= 426)
                    {
                        byte num4 = 150;
                        if ((int) newColor.R < (int) num4)
                            newColor.R = num4;
                        if ((int) newColor.G < (int) num4)
                            newColor.G = num4;
                        if ((int) newColor.B < (int) num4)
                            newColor.B = num4;
                        return new Color((int) newColor.R, (int) newColor.G, (int) newColor.B, (int) byte.MaxValue);
                    }

                    if (this.type == 431 || this.type == 432)
                        return new Color(250, 250, 250, (int) byte.MaxValue - this.alpha);
                    if (this.type == 343 || this.type == 344)
                    {
                        float num4 = (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
                        return new Color((int) (250.0 * (double) num4), (int) (250.0 * (double) num4),
                            (int) (250.0 * (double) num4), (int) (100.0 * (double) num4));
                    }

                    if (this.type == 332)
                        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue,
                            (int) byte.MaxValue);
                    if (this.type == 329)
                        return new Color(200, 200, 200, 50);
                    if (this.type >= 326 && this.type <= 328 || this.type >= 400 && this.type <= 402)
                        return Color.Transparent;
                    if (this.type == 324 && this.frame >= 6 && this.frame <= 9)
                        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue,
                            (int) byte.MaxValue);
                    if (this.type == 16)
                        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
                    if (this.type == 321)
                        return new Color(200, 200, 200, 0);
                    if (this.type == 76 || this.type == 77 || this.type == 78)
                        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
                    if (this.type == 308)
                        return new Color(200, 200, (int) byte.MaxValue, 125);
                    if (this.type == 263)
                    {
                        if (this.timeLeft < (int) byte.MaxValue)
                            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue,
                                (int) (byte) this.timeLeft);
                        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue,
                            (int) byte.MaxValue);
                    }

                    if (this.type == 274)
                    {
                        if (this.timeLeft >= 85)
                            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 100);
                        byte num4 = (byte) (this.timeLeft * 3);
                        byte num5 = (byte) (100.0 * ((double) num4 / (double) byte.MaxValue));
                        return new Color((int) num4, (int) num4, (int) num4, (int) num5);
                    }

                    if (this.type == 5)
                        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
                    if (this.type == 300 || this.type == 301)
                        return new Color(250, 250, 250, 50);
                    if (this.type == 712)
                        return Color.Lerp(newColor, Color.White, 0.4f) * this.Opacity;
                    if (this.type == 304)
                        return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                            (int) byte.MaxValue - this.alpha,
                            (int) (byte) ((double) ((int) byte.MaxValue - this.alpha) / 3.0));
                    if (this.type == 116 || this.type == 132 || (this.type == 156 || this.type == 157) ||
                        (this.type == 157 || this.type == 173))
                    {
                        if ((double) this.localAI[1] >= 15.0)
                            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, this.alpha);
                        if ((double) this.localAI[1] < 5.0)
                            return Color.Transparent;
                        int num4 = (int) (((double) this.localAI[1] - 5.0) / 10.0 * (double) byte.MaxValue);
                        return new Color(num4, num4, num4, num4);
                    }

                    if (this.type == 254)
                    {
                        if (this.timeLeft < 30)
                            this.alpha = (int) ((double) byte.MaxValue -
                                                (double) byte.MaxValue * (double) ((float) this.timeLeft / 30f));
                        return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                            (int) byte.MaxValue - this.alpha, 0);
                    }

                    if (this.type == 265 || this.type == 355)
                    {
                        if (this.alpha > 0)
                            return Color.Transparent;
                        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
                    }

                    if (this.type == 270 && (double) this.ai[0] >= 0.0)
                    {
                        if (this.alpha > 0)
                            return Color.Transparent;
                        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
                    }

                    if (this.type == 257)
                    {
                        if (this.alpha > 200)
                            return Color.Transparent;
                        return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                            (int) byte.MaxValue - this.alpha, 0);
                    }

                    if (this.type == 259)
                    {
                        if (this.alpha > 200)
                            return Color.Transparent;
                        return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                            (int) byte.MaxValue - this.alpha, 0);
                    }

                    if (this.type >= 150 && this.type <= 152)
                        return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                            (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
                    if (this.type == 250)
                        return Color.Transparent;
                    if (this.type == 251)
                        return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                            (int) byte.MaxValue - this.alpha, 0);
                    if (this.type == 131)
                        return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                            (int) byte.MaxValue - this.alpha, 0);
                    if (this.type == 211)
                        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
                    if (this.type == 229)
                        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 50);
                    if (this.type == 221)
                        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
                    if (this.type == 20)
                    {
                        if (this.alpha <= 150)
                            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
                        return new Color(0, 0, 0, 0);
                    }

                    if (this.type == 207)
                    {
                        num1 = (int) byte.MaxValue - this.alpha;
                        num2 = (int) byte.MaxValue - this.alpha;
                        num3 = (int) byte.MaxValue - this.alpha;
                    }
                    else
                    {
                        if (this.type == 242)
                        {
                            if (this.alpha < 140)
                                return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 100);
                            return Color.Transparent;
                        }

                        if (this.type == 638)
                            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 100) *
                                   this.Opacity;
                        if (this.type == 660)
                            return new Color(150, (int) byte.MaxValue, (int) byte.MaxValue, 0) * this.Opacity;
                        if (this.type == 209)
                        {
                            num1 = (int) newColor.R - this.alpha;
                            num2 = (int) newColor.G - this.alpha;
                            num3 = (int) newColor.B - this.alpha / 2;
                        }
                        else
                        {
                            if (this.type == 130)
                                return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 175);
                            if (this.type == 182)
                                return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
                            if (this.type == 226)
                            {
                                int maxValue1 = (int) byte.MaxValue;
                                int maxValue2 = (int) byte.MaxValue;
                                int maxValue3 = (int) byte.MaxValue;
                                float num4 = (float) ((double) Main.mouseTextColor / 200.0 - 0.300000011920929);
                                int num5 = (int) ((double) maxValue1 * (double) num4);
                                int num6 = (int) ((double) maxValue2 * (double) num4);
                                int num7 = (int) ((double) maxValue3 * (double) num4);
                                int r = num5 + 50;
                                if (r > (int) byte.MaxValue)
                                    r = (int) byte.MaxValue;
                                int g = num6 + 50;
                                if (g > (int) byte.MaxValue)
                                    g = (int) byte.MaxValue;
                                int b = num7 + 50;
                                if (b > (int) byte.MaxValue)
                                    b = (int) byte.MaxValue;
                                return new Color(r, g, b, 200);
                            }

                            if (this.type == 227)
                            {
                                int maxValue;
                                int num4 = maxValue = (int) byte.MaxValue;
                                int num5 = maxValue;
                                int num6 = maxValue;
                                float num7 = (float) ((double) Main.mouseTextColor / 100.0 - 1.60000002384186);
                                int num8 = (int) ((double) num6 * (double) num7);
                                int num9 = (int) ((double) num5 * (double) num7);
                                int num10 = (int) ((double) num4 * (double) num7);
                                int a = (int) (100.0 * (double) num7);
                                int r = num8 + 50;
                                if (r > (int) byte.MaxValue)
                                    r = (int) byte.MaxValue;
                                int g = num9 + 50;
                                if (g > (int) byte.MaxValue)
                                    g = (int) byte.MaxValue;
                                int b = num10 + 50;
                                if (b > (int) byte.MaxValue)
                                    b = (int) byte.MaxValue;
                                return new Color(r, g, b, a);
                            }

                            if (this.type == 114 || this.type == 115)
                            {
                                if ((double) this.localAI[1] >= 15.0)
                                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue,
                                        this.alpha);
                                if ((double) this.localAI[1] < 5.0)
                                    return Color.Transparent;
                                int num4 = (int) (((double) this.localAI[1] - 5.0) / 10.0 * (double) byte.MaxValue);
                                return new Color(num4, num4, num4, num4);
                            }

                            if (this.type == 83 || this.type == 88 || (this.type == 89 || this.type == 90) ||
                                (this.type == 100 || this.type == 104 || this.type == 279) ||
                                this.type >= 283 && this.type <= 287)
                            {
                                if (this.alpha < 200)
                                    return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha,
                                        (int) byte.MaxValue - this.alpha, 0);
                                return Color.Transparent;
                            }

                            if (this.type == 34 || this.type == 35 || (this.type == 15 || this.type == 19) ||
                                (this.type == 44 || this.type == 45))
                                return Color.White;
                            if (this.type == 79)
                            {
                                num1 = Main.DiscoR;
                                num2 = Main.DiscoG;
                                num3 = Main.DiscoB;
                                return new Color();
                            }

                            if (this.type == 9 || this.type == 15 || (this.type == 34 || this.type == 50) ||
                                (this.type == 53 || this.type == 76 || (this.type == 77 || this.type == 78)) ||
                                (this.type == 92 || this.type == 91))
                            {
                                num1 = (int) newColor.R - this.alpha / 3;
                                num2 = (int) newColor.G - this.alpha / 3;
                                num3 = (int) newColor.B - this.alpha / 3;
                            }
                            else
                            {
                                if (this.type == 18)
                                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 50);
                                if (this.type == 16 || this.type == 44 || this.type == 45)
                                {
                                    num1 = (int) newColor.R;
                                    num2 = (int) newColor.G;
                                    num3 = (int) newColor.B;
                                }
                                else if (this.type == 12 || this.type == 72 || (this.type == 86 || this.type == 87))
                                    return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue,
                                        (int) newColor.A - this.alpha);
                            }
                        }
                    }
                }
            }

            float num11 = (float) ((int) byte.MaxValue - this.alpha) / (float) byte.MaxValue;
            int r1 = (int) ((double) newColor.R * (double) num11);
            int g1 = (int) ((double) newColor.G * (double) num11);
            int b1 = (int) ((double) newColor.B * (double) num11);
            int a1 = (int) newColor.A - this.alpha;
            if (a1 < 0)
                a1 = 0;
            if (a1 > (int) byte.MaxValue)
                a1 = (int) byte.MaxValue;
            return new Color(r1, g1, b1, a1);
        }

        public override string ToString()
        {
            return "type:" + (object) this.type + "name:" + this.Name + ", active:" + (object) this.active +
                   ", whoAmI:" + (object) this.whoAmI + ", identity:" + (object) this.identity + ", ai0:" +
                   (object) this.ai[0] + " , uuid:" + (object) this.projUUID;
        }
    }
}