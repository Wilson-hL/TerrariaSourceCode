// Decompiled with JetBrains decompiler
// Type: Terraria.WorldGen
// Assembly: Terraria, Version=1.3.5.1, Culture=neutral, PublicKeyToken=null
// MVID: E90A5A2F-CD10-4A2C-9D2A-6B036D4E8877
// Assembly location: E:\Decompile\Terraria\Terraria.exe

using Microsoft.Xna.Framework;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using Terraria;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Biomes;
using Terraria.GameContent.Events;
using Terraria.GameContent.Generation;
using Terraria.GameContent.Tile_Entities;
using Terraria.Graphics.Capture;
using Terraria.ID;
using Terraria.IO;
using Terraria.Localization;
using Terraria.Map;
using Terraria.ObjectData;
using Terraria.Utilities;
using Terraria.World.Generation;

public class WorldGen
{
    public class Hooks
    {
        public static event Action OnWorldLoad;

        public static void Initialize()
        {
            Player.Hooks.OnEnterWorld += delegate(Player player)
            {
                if (player.whoAmI == Main.myPlayer)
                {
                    WorldLoaded();
                    Main.FixUIScale();
                }
            };
        }

        public static void WorldLoaded()
        {
            if (Hooks.OnWorldLoad != null)
            {
                Hooks.OnWorldLoad();
            }
        }

        public static void ClearWorld()
        {
            PressurePlateHelper.Reset();
            TownManager.Clear();
            NPC.ResetKillCount();
        }
    }

    public class Spread
    {
        public static void Wall(int x, int y, int wallType)
        {
            if (InWorld(x, y, 0))
            {
                byte wall = (byte) wallType;
                List<Point> list = new List<Point>();
                List<Point> list2 = new List<Point>();
                HashSet<Point> hashSet = new HashSet<Point>();
                list2.Add(new Point(x, y));
                while (list2.Count > 0)
                {
                    list.Clear();
                    list.AddRange(list2);
                    list2.Clear();
                    while (list.Count > 0)
                    {
                        Point item = list[0];
                        if (!InWorld(item.X, item.Y, 1))
                        {
                            list.Remove(item);
                        }
                        else
                        {
                            hashSet.Add(item);
                            list.Remove(item);
                            Tile tile = Main.tile[item.X, item.Y];
                            if (SolidTile(item.X, item.Y) || tile.wall != 0)
                            {
                                if (tile.active() && tile.wall == 0)
                                {
                                    tile.wall = wall;
                                }
                            }
                            else
                            {
                                tile.wall = wall;
                                Point item2 = new Point(item.X - 1, item.Y);
                                if (!hashSet.Contains(item2))
                                {
                                    list2.Add(item2);
                                }

                                item2 = new Point(item.X + 1, item.Y);
                                if (!hashSet.Contains(item2))
                                {
                                    list2.Add(item2);
                                }

                                item2 = new Point(item.X, item.Y - 1);
                                if (!hashSet.Contains(item2))
                                {
                                    list2.Add(item2);
                                }

                                item2 = new Point(item.X, item.Y + 1);
                                if (!hashSet.Contains(item2))
                                {
                                    list2.Add(item2);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Wall2(int x, int y, int wallType)
        {
            if (InWorld(x, y, 0))
            {
                byte b = (byte) wallType;
                int num = 0;
                int maxWallOut = maxWallOut2;
                List<Point> list = new List<Point>();
                List<Point> list2 = new List<Point>();
                HashSet<Point> hashSet = new HashSet<Point>();
                list2.Add(new Point(x, y));
                while (list2.Count > 0)
                {
                    list.Clear();
                    list.AddRange(list2);
                    list2.Clear();
                    while (list.Count > 0)
                    {
                        Point item = list[0];
                        if (!InWorld(item.X, item.Y, 1))
                        {
                            list.Remove(item);
                        }
                        else
                        {
                            hashSet.Add(item);
                            list.Remove(item);
                            Tile tile = Main.tile[item.X, item.Y];
                            if (!SolidTile(item.X, item.Y) && tile.wall != b && tile.wall != 4 && tile.wall != 40 &&
                                tile.wall != 3)
                            {
                                if (b == 63 && tile.wall == 0)
                                {
                                    list.Remove(item);
                                }
                                else
                                {
                                    num++;
                                    if (num >= maxWallOut)
                                    {
                                        list.Remove(item);
                                    }
                                    else
                                    {
                                        tile.wall = b;
                                        Point item2 = new Point(item.X - 1, item.Y);
                                        if (!hashSet.Contains(item2))
                                        {
                                            list2.Add(item2);
                                        }

                                        item2 = new Point(item.X + 1, item.Y);
                                        if (!hashSet.Contains(item2))
                                        {
                                            list2.Add(item2);
                                        }

                                        item2 = new Point(item.X, item.Y - 1);
                                        if (!hashSet.Contains(item2))
                                        {
                                            list2.Add(item2);
                                        }

                                        item2 = new Point(item.X, item.Y + 1);
                                        if (!hashSet.Contains(item2))
                                        {
                                            list2.Add(item2);
                                        }

                                        if (b == 63)
                                        {
                                            item2 = new Point(item.X - 1, item.Y - 1);
                                            if (!hashSet.Contains(item2))
                                            {
                                                list2.Add(item2);
                                            }

                                            item2 = new Point(item.X + 1, item.Y - 1);
                                            if (!hashSet.Contains(item2))
                                            {
                                                list2.Add(item2);
                                            }

                                            item2 = new Point(item.X - 1, item.Y + 1);
                                            if (!hashSet.Contains(item2))
                                            {
                                                list2.Add(item2);
                                            }

                                            item2 = new Point(item.X + 1, item.Y + 1);
                                            if (!hashSet.Contains(item2))
                                            {
                                                list2.Add(item2);
                                            }

                                            item2 = new Point(item.X - 2, item.Y);
                                            if (!hashSet.Contains(item2))
                                            {
                                                list2.Add(item2);
                                            }

                                            item2 = new Point(item.X + 2, item.Y);
                                            if (!hashSet.Contains(item2))
                                            {
                                                list2.Add(item2);
                                            }
                                        }
                                    }
                                }
                            }
                            else if (tile.active() && tile.wall != b && tile.wall != 4 && tile.wall != 40 &&
                                     tile.wall != 3)
                            {
                                tile.wall = b;
                            }
                        }
                    }
                }
            }
        }

        public static void Moss(int x, int y)
        {
            if (InWorld(x, y, 0))
            {
                byte mossWall = WorldGen.mossWall;
                ushort mossTile = WorldGen.mossTile;
                List<Point> list = new List<Point>();
                List<Point> list2 = new List<Point>();
                HashSet<Point> hashSet = new HashSet<Point>();
                list2.Add(new Point(x, y));
                while (list2.Count > 0)
                {
                    list.Clear();
                    list.AddRange(list2);
                    list2.Clear();
                    while (list.Count > 0)
                    {
                        Point item = list[0];
                        if (!InWorld(item.X, item.Y, 1))
                        {
                            list.Remove(item);
                        }
                        else
                        {
                            hashSet.Add(item);
                            list.Remove(item);
                            Tile tile = Main.tile[item.X, item.Y];
                            if (SolidTile(item.X, item.Y) || tile.wall != 0)
                            {
                                if (tile.active())
                                {
                                    if (tile.wall == 0)
                                    {
                                        tile.wall = mossWall;
                                    }

                                    if (tile.type == 1)
                                    {
                                        tile.type = mossTile;
                                    }
                                }
                            }
                            else
                            {
                                tile.wall = mossWall;
                                Point item2 = new Point(item.X - 1, item.Y);
                                if (!hashSet.Contains(item2))
                                {
                                    list2.Add(item2);
                                }

                                item2 = new Point(item.X + 1, item.Y);
                                if (!hashSet.Contains(item2))
                                {
                                    list2.Add(item2);
                                }

                                item2 = new Point(item.X, item.Y - 1);
                                if (!hashSet.Contains(item2))
                                {
                                    list2.Add(item2);
                                }

                                item2 = new Point(item.X, item.Y + 1);
                                if (!hashSet.Contains(item2))
                                {
                                    list2.Add(item2);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Gem(int x, int y)
        {
            if (InWorld(x, y, 0))
            {
                List<Point> list = new List<Point>();
                List<Point> list2 = new List<Point>();
                HashSet<Point> hashSet = new HashSet<Point>();
                list2.Add(new Point(x, y));
                while (list2.Count > 0)
                {
                    list.Clear();
                    list.AddRange(list2);
                    list2.Clear();
                    while (list.Count > 0)
                    {
                        Point item = list[0];
                        if (!InWorld(item.X, item.Y, 1))
                        {
                            list.Remove(item);
                        }
                        else
                        {
                            hashSet.Add(item);
                            list.Remove(item);
                            Tile tile = Main.tile[item.X, item.Y];
                            if (SolidTile(item.X, item.Y) || tile.wall != 0)
                            {
                                if (tile.active())
                                {
                                    if (Gemmable(tile.type))
                                    {
                                        tile.type = randGemTile();
                                    }

                                    Tile tile2 = Main.tile[item.X - 1, item.Y];
                                    if (Gemmable(tile2.type))
                                    {
                                        tile2.type = randGemTile();
                                    }

                                    tile2 = Main.tile[item.X + 1, item.Y];
                                    if (Gemmable(tile2.type))
                                    {
                                        tile2.type = randGemTile();
                                    }

                                    tile2 = Main.tile[item.X, item.Y - 1];
                                    if (Gemmable(tile2.type))
                                    {
                                        tile2.type = randGemTile();
                                    }

                                    tile2 = Main.tile[item.X, item.Y + 1];
                                    if (Gemmable(tile2.type))
                                    {
                                        tile2.type = randGemTile();
                                    }
                                }
                            }
                            else
                            {
                                tile.wall = (byte) (48 + randGem());
                                if (!tile.active() && genRand.Next(2) == 0)
                                {
                                    PlaceTile(item.X, item.Y, 178, true, false, -1, randGem());
                                }

                                Point item2 = new Point(item.X - 1, item.Y);
                                if (!hashSet.Contains(item2))
                                {
                                    list2.Add(item2);
                                }

                                item2 = new Point(item.X + 1, item.Y);
                                if (!hashSet.Contains(item2))
                                {
                                    list2.Add(item2);
                                }

                                item2 = new Point(item.X, item.Y - 1);
                                if (!hashSet.Contains(item2))
                                {
                                    list2.Add(item2);
                                }

                                item2 = new Point(item.X, item.Y + 1);
                                if (!hashSet.Contains(item2))
                                {
                                    list2.Add(item2);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Spider(int x, int y)
        {
            if (InWorld(x, y, 0))
            {
                byte wall = 62;
                List<Point> list = new List<Point>();
                List<Point> list2 = new List<Point>();
                HashSet<Point> hashSet = new HashSet<Point>();
                list2.Add(new Point(x, y));
                while (list2.Count > 0)
                {
                    list.Clear();
                    list.AddRange(list2);
                    list2.Clear();
                    while (list.Count > 0)
                    {
                        Point item = list[0];
                        if (!InWorld(item.X, item.Y, 1))
                        {
                            list.Remove(item);
                        }
                        else
                        {
                            hashSet.Add(item);
                            list.Remove(item);
                            Tile tile = Main.tile[item.X, item.Y];
                            if (SolidTile(item.X, item.Y) || tile.wall != 0)
                            {
                                if (tile.active() && tile.wall == 0)
                                {
                                    tile.wall = wall;
                                }
                            }
                            else
                            {
                                tile.wall = wall;
                                SquareWallFrame(item.X, item.Y, true);
                                if (!tile.active())
                                {
                                    tile.liquid = 0;
                                    tile.lava(false);
                                    if (SolidTile(item.X, item.Y + 1) && genRand.Next(3) == 0)
                                    {
                                        if (genRand.Next(15) == 0)
                                        {
                                            AddBuriedChest(item.X, item.Y, 939, true, 15);
                                        }
                                        else
                                        {
                                            PlacePot(item.X, item.Y, 28, genRand.Next(19, 21));
                                        }
                                    }

                                    if (!tile.active())
                                    {
                                        if (SolidTile(item.X, item.Y - 1) && genRand.Next(3) == 0)
                                        {
                                            PlaceTight(item.X, item.Y, 165, true);
                                        }
                                        else if (SolidTile(item.X, item.Y + 1))
                                        {
                                            PlaceTile(item.X, item.Y, 187, true, false, -1, 9 + genRand.Next(5));
                                            if (genRand.Next(3) == 0)
                                            {
                                                if (!tile.active())
                                                {
                                                    PlaceSmallPile(item.X, item.Y, 34 + genRand.Next(4), 1, 185);
                                                }

                                                if (!tile.active())
                                                {
                                                    PlaceSmallPile(item.X, item.Y, 48 + genRand.Next(6), 0, 185);
                                                }
                                            }
                                        }
                                    }
                                }

                                Point item2 = new Point(item.X - 1, item.Y);
                                if (!hashSet.Contains(item2))
                                {
                                    list2.Add(item2);
                                }

                                item2 = new Point(item.X + 1, item.Y);
                                if (!hashSet.Contains(item2))
                                {
                                    list2.Add(item2);
                                }

                                item2 = new Point(item.X, item.Y - 1);
                                if (!hashSet.Contains(item2))
                                {
                                    list2.Add(item2);
                                }

                                item2 = new Point(item.X, item.Y + 1);
                                if (!hashSet.Contains(item2))
                                {
                                    list2.Add(item2);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void WallDungeon(int x, int y, int wallType)
        {
            if (InWorld(x, y, 0))
            {
                byte b = (byte) wallType;
                List<Point> list = new List<Point>();
                List<Point> list2 = new List<Point>();
                HashSet<Point> hashSet = new HashSet<Point>();
                list2.Add(new Point(x, y));
                while (list2.Count > 0)
                {
                    list.Clear();
                    list.AddRange(list2);
                    list2.Clear();
                    while (list.Count > 0)
                    {
                        Point item = list[0];
                        if (!InWorld(item.X, item.Y, 1))
                        {
                            list.Remove(item);
                        }
                        else
                        {
                            hashSet.Add(item);
                            list.Remove(item);
                            Tile tile = Main.tile[item.X, item.Y];
                            if (!SolidTile(item.X, item.Y) && tile.wall != b && tile.wall > 0)
                            {
                                tile.wall = b;
                                Point item2 = new Point(item.X - 1, item.Y);
                                if (!hashSet.Contains(item2))
                                {
                                    list2.Add(item2);
                                }

                                item2 = new Point(item.X + 1, item.Y);
                                if (!hashSet.Contains(item2))
                                {
                                    list2.Add(item2);
                                }

                                item2 = new Point(item.X, item.Y - 1);
                                if (!hashSet.Contains(item2))
                                {
                                    list2.Add(item2);
                                }

                                item2 = new Point(item.X, item.Y + 1);
                                if (!hashSet.Contains(item2))
                                {
                                    list2.Add(item2);
                                }
                            }
                            else if (tile.active())
                            {
                                tile.wall = b;
                            }
                        }
                    }
                }
            }
        }

        private static bool Gemmable(int type)
        {
            if (type != 0 && type != 1 && type != 40 && type != 59 && type != 60 && type != 70 && type != 147)
            {
                return type == 161;
            }

            return true;
        }
    }

    public static TownRoomManager TownManager = new TownRoomManager();

    private static int lAltarX;

    private static int lAltarY;

    public static int tileReframeCount = 0;

    public static bool noMapUpdate = false;

    public static double worldSurfaceLow;

    public static int tLeft;

    public static int tRight;

    public static int tTop;

    public static int tBottom;

    public static int tRooms;

    public static int[] mossType = new int[3];

    public static int c = 0;

    public static int m = 0;

    public static int a = 0;

    public static int co = 0;

    public static int ir = 0;

    public static int si = 0;

    public static int go = 0;

    public static int copperBar = 20;

    public static int ironBar = 22;

    public static int silverBar = 21;

    public static int goldBar = 19;

    public static ushort CopperTierOre = 7;

    public static ushort IronTierOre = 6;

    public static ushort SilverTierOre = 9;

    public static ushort GoldTierOre = 8;

    public static int treeBG = 0;

    public static int corruptBG = 0;

    public static int jungleBG = 0;

    public static int snowBG = 0;

    public static int hallowBG = 0;

    public static int crimsonBG = 0;

    public static int desertBG = 0;

    public static int oceanBG = 0;

    public static int oreTier1 = -1;

    public static int oreTier2 = -1;

    public static int oreTier3 = -1;

    public static bool crimson = false;

    public static byte mossTile = 179;

    public static byte mossWall = 54;

    public static bool[] gem = new bool[6];

    public static int[] tileCounts = new int[470];

    public static int totalEvil = 0;

    public static int totalBlood = 0;

    public static int totalGood = 0;

    public static int totalSolid = 0;

    public static int totalEvil2 = 0;

    public static int totalBlood2 = 0;

    public static int totalGood2 = 0;

    public static int totalSolid2 = 0;

    public static byte tEvil = 0;

    public static byte tBlood = 0;

    public static byte tGood = 0;

    public static int totalX = 0;

    public static int totalD = 0;

    public static bool IsGeneratingHardMode = false;

    private static Vector2[] heartPos = new Vector2[100];

    private static int heartCount = 0;

    public static int lavaLine;

    public static int waterLine;

    public static bool noTileActions = false;

    public static bool spawnEye = false;

    public static int spawnHardBoss = 0;

    public static int numLarva = 0;

    public static int[] larvaX = new int[100];

    public static int[] larvaY = new int[100];

    public static bool gen = false;

    public static bool shadowOrbSmashed = false;

    public static int shadowOrbCount = 0;

    public static int altarCount = 0;

    public static bool spawnMeteor = false;

    public static bool loadFailed = false;

    public static bool loadSuccess = false;

    public static bool worldCleared = false;

    public static bool worldBackup = false;

    public static bool loadBackup = false;

    private static int lastMaxTilesX = 0;

    private static int lastMaxTilesY = 0;

    public static bool saveLock = false;

    private static bool mergeUp = false;

    private static bool mergeDown = false;

    private static bool mergeLeft = false;

    private static bool mergeRight = false;

    private static bool stopDrops = false;

    private static bool mudWall = false;

    private static int grassSpread = 0;

    public static bool noLiquidCheck = false;

    [ThreadStatic] public static UnifiedRandom _genRand;

    [ThreadStatic] public static int _genRandSeed = -2;

    public static int _lastSeed;

    public static string statusText = "";

    public static bool destroyObject = false;

    public static int spawnDelay = 0;

    public static int prioritizedTownNPC = 0;

    public static int numTileCount = 0;

    public static int maxTileCount = 3500;

    public static int maxWallOut2 = 5000;

    public static int[] countX = new int[maxTileCount];

    public static int[] countY = new int[maxTileCount];

    public static int lavaCount = 0;

    public static int iceCount = 0;

    public static int rockCount = 0;

    public static int maxRoomTiles = 750;

    public static int numRoomTiles;

    public static int[] roomX = new int[maxRoomTiles];

    public static int[] roomY = new int[maxRoomTiles];

    public static int roomCeilingsCount;

    public static int[] roomCeilingX = new int[maxRoomTiles];

    public static int[] roomCeilingY = new int[maxRoomTiles];

    public static int roomX1;

    public static int roomX2;

    public static int roomY1;

    public static int roomY2;

    public static bool canSpawn;

    public static bool[] houseTile = new bool[470];

    public static int bestX = 0;

    public static int bestY = 0;

    public static int hiScore = 0;

    public static int dungeonX;

    public static int dungeonY;

    public static Vector2 lastDungeonHall = Vector2.Zero;

    public static int maxDRooms = 100;

    public static int numDRooms = 0;

    public static int[] dRoomX = new int[maxDRooms];

    public static int[] dRoomY = new int[maxDRooms];

    public static int[] dRoomSize = new int[maxDRooms];

    private static bool[] dRoomTreasure = new bool[maxDRooms];

    private static int[] dRoomL = new int[maxDRooms];

    private static int[] dRoomR = new int[maxDRooms];

    private static int[] dRoomT = new int[maxDRooms];

    private static int[] dRoomB = new int[maxDRooms];

    private static int numDDoors;

    private static int[] DDoorX = new int[300];

    private static int[] DDoorY = new int[300];

    private static int[] DDoorPos = new int[300];

    private static int numDPlats;

    private static int[] DPlatX = new int[300];

    private static int[] DPlatY = new int[300];

    private static int JungleItemCount = 0;

    private static int[] JChestX = new int[100];

    private static int[] JChestY = new int[100];

    private static int numJChests = 0;

    public static int dEnteranceX = 0;

    public static bool dSurface = false;

    private static double dxStrength1;

    private static double dyStrength1;

    private static double dxStrength2;

    private static double dyStrength2;

    private static int dMinX;

    private static int dMaxX;

    private static int dMinY;

    private static int dMaxY;

    private static int numIslandHouses = 0;

    private static int houseCount = 0;

    private static bool[] skyLake = new bool[30];

    private static int[] fihX = new int[30];

    private static int[] fihY = new int[30];

    private static int numMCaves = 0;

    private static int[] mCaveX = new int[30];

    private static int[] mCaveY = new int[30];

    private static int JungleX = 0;

    private static int hellChest = 0;

    private static int[] hellChestItem = new int[5];

    private static bool roomTorch;

    private static bool roomDoor;

    private static bool roomChair;

    private static bool roomTable;

    private static bool roomOccupied;

    private static bool roomEvil;

    public static Point16[] statueList;

    public static List<int> StatuesWithTraps = new List<int>(new int[4]
    {
        4,
        7,
        10,
        18
    });

    public static Rectangle UndergroundDesertLocation = Rectangle.Empty;

    private static bool currentlyTryingToUseAlternateHousingSpot = false;

    public static TownNPCRoomCheckFailureReason roomCheckFailureReason = TownNPCRoomCheckFailureReason.None;

    private static int[,] trapDiag = new int[4, 2];

    private static int tileCounterNum = 0;

    private static int tileCounterMax = 20;

    private static int[] tileCounterX = new int[tileCounterMax];

    private static int[] tileCounterY = new int[tileCounterMax];

    private static WorldGenerator _generator;

    public static int WorldGenParam_Evil = -1;

    public static UnifiedRandom genRand
    {
        get
        {
            if (_lastSeed != _genRandSeed)
            {
                _genRand = new UnifiedRandom(_lastSeed);
                _genRandSeed = _lastSeed;
            }

            if (_genRand == null)
            {
                _genRand = new UnifiedRandom(_lastSeed);
                _genRandSeed = _lastSeed;
            }

            return _genRand;
        }
    }

    public static void SetupStatueList()
    {
        List<Point16> list = new List<Point16>();
        for (int i = 0; i < 44; i++)
        {
            list.Add(new Point16(105, i));
        }

        list[34] = new Point16(349, 0);
        list[43] = new Point16(105, 50);
        list.Add(new Point16(105, 63));
        list.Add(new Point16(105, 64));
        list.Add(new Point16(105, 65));
        list.Add(new Point16(105, 66));
        list.Add(new Point16(105, 68));
        list.Add(new Point16(105, 69));
        list.Add(new Point16(105, 70));
        list.Add(new Point16(105, 71));
        list.Add(new Point16(105, 72));
        list.Add(new Point16(105, 73));
        list.Add(new Point16(105, 75));
        if (Main.expertMode)
        {
            list.Add(new Point16(105, 67));
            list.Add(new Point16(105, 74));
        }

        statueList = list.ToArray();
    }

    public static void PlaceStatueTrap(int x, int y)
    {
        for (int i = -10; i <= 10; i++)
        {
            for (int j = -10; j <= 10; j++)
            {
                Tile testTile = Main.tile[x + i, y + j + 1];
                Tile tile = Main.tile[x + i, y + j];
                if (!tile.active() && SolidTile2(testTile))
                {
                    PlaceTile(x + i, y + j, 135, true, false, -1, 0);
                    if (tile.active() && tile.type == 135)
                    {
                        WorldUtils.WireLine(new Point(x, y), new Point(x + i, y + j));
                        return;
                    }
                }
            }
        }
    }

    public static bool MoveTownNPC(int x, int y, int n)
    {
        if (!StartRoomCheck(x, y))
        {
            string newText = Lang.inter[40].Value;
            switch (roomCheckFailureReason)
            {
                case TownNPCRoomCheckFailureReason.HoleInWallIsTooBig:
                    newText = Language.GetTextValue("TownNPCHousingFailureReasons.HoleInWallIsTooBig");
                    break;
                case TownNPCRoomCheckFailureReason.RoomCheckStartedInASolidTile:
                    newText = Language.GetTextValue("TownNPCHousingFailureReasons.RoomCheckStartedInASolidTile");
                    break;
                case TownNPCRoomCheckFailureReason.RoomIsTooBig:
                    newText = Language.GetTextValue("TownNPCHousingFailureReasons.RoomIsTooBig");
                    break;
                case TownNPCRoomCheckFailureReason.RoomIsTooSmall:
                    newText = Language.GetTextValue("TownNPCHousingFailureReasons.RoomIsTooSmall");
                    break;
                case TownNPCRoomCheckFailureReason.TooCloseToWorldEdge:
                    newText = Language.GetTextValue("TownNPCHousingFailureReasons.TooCloseToWorldEdge");
                    break;
            }

            Main.NewText(newText, byte.MaxValue, 240, 20, false);
            return false;
        }

        if (!RoomNeeds(prioritizedTownNPC))
        {
            int num = 0;
            int num2 = ((!roomTorch) ? 1 : 0) + ((!roomDoor) ? 1 : 0) + ((!roomTable) ? 1 : 0) + ((!roomChair) ? 1 : 0);
            string[] array = new string[num2];
            if (!roomTorch)
            {
                array[num] = Language.GetTextValue("Game.HouseLightSource");
                num++;
            }

            if (!roomDoor)
            {
                array[num] = Language.GetTextValue("Game.HouseDoor");
                num++;
            }

            if (!roomTable)
            {
                array[num] = Language.GetTextValue("Game.HouseTable");
                num++;
            }

            if (!roomChair)
            {
                array[num] = Language.GetTextValue("Game.HouseChair");
                num++;
            }

            string textValue = Language.GetTextValue("Game.HouseMissing_" + num2, array);
            Main.NewText(textValue, byte.MaxValue, 240, 20, false);
            return false;
        }

        ScoreRoom(-1);
        if (hiScore <= 0)
        {
            if (roomOccupied)
            {
                Main.NewText(Lang.inter[41].Value, byte.MaxValue, 240, 20, false);
            }
            else if (roomEvil)
            {
                Main.NewText(Lang.inter[42].Value, byte.MaxValue, 240, 20, false);
            }
            else
            {
                Main.NewText(Lang.inter[40].Value, byte.MaxValue, 240, 20, false);
            }

            return false;
        }

        if (n > 0 && !CheckSpecialTownNPCSpawningConditions(Main.npc[n].type))
        {
            Main.NewText(Lang.inter[55].Value + " " + Main.npc[n].TypeName, byte.MaxValue, 240, 20, false);
            return false;
        }

        return true;
    }

    public static void moveRoom(int x, int y, int n)
    {
        if (Main.netMode == 1)
        {
            NetMessage.SendData(60, -1, -1, null, n, (float) x, (float) y, 0f, 0, 0, 0);
        }
        else
        {
            prioritizedTownNPC = Main.npc[n].type;
            Main.npc[n].homeless = true;
            SpawnTownNPC(x, y);
            TownManager.SetRoom(Main.npc[n].type, Main.npc[n].homeTileX, Main.npc[n].homeTileY);
        }
    }

    public static void kickOut(int n)
    {
        if (Main.netMode == 1)
        {
            NetMessage.SendData(60, -1, -1, null, n, 0f, 0f, 1f, 0, 0, 0);
        }
        else
        {
            Main.npc[n].homeless = true;
            TownManager.KickOut(Main.npc[n]);
        }
    }

    public static bool IsThereASpawnablePrioritizedTownNPC(int x, int y)
    {
        if (CheckSpecialTownNPCSpawningConditions(prioritizedTownNPC) && NPC.AnyNPCs(prioritizedTownNPC))
        {
            return true;
        }

        int num = TownManager.FindOccupation(x, y);
        if (num != -1 && Main.townNPCCanSpawn[num] && !NPC.AnyNPCs(num) && CheckSpecialTownNPCSpawningConditions(num))
        {
            prioritizedTownNPC = num;
            return true;
        }

        int num2 = -1;
        for (int i = 0; i < 580; i++)
        {
            if (Main.townNPCCanSpawn[i] && CheckSpecialTownNPCSpawningConditions(i))
            {
                if (NPC.AnyNPCs(i))
                {
                    Main.townNPCCanSpawn[i] = false;
                }
                else
                {
                    if (!TownManager.HasRoomQuick(i))
                    {
                        prioritizedTownNPC = i;
                        return true;
                    }

                    if (num2 == -1)
                    {
                        num2 = i;
                    }
                }
            }
        }

        if (num2 != -1)
        {
            prioritizedTownNPC = num2;
            return true;
        }

        return false;
    }

    public static bool CheckSpecialTownNPCSpawningConditions(int type)
    {
        if (type == 160)
        {
            if ((double) roomY2 > Main.worldSurface)
            {
                return false;
            }

            int num = 0;
            int num2 = roomX1 - Main.zoneX / 2 / 16 - 1 - Lighting.offScreenTiles;
            int num3 = roomX2 + Main.zoneX / 2 / 16 + 1 + Lighting.offScreenTiles;
            int num4 = roomY1 - Main.zoneY / 2 / 16 - 1 - Lighting.offScreenTiles;
            int num5 = roomY2 + Main.zoneY / 2 / 16 + 1 + Lighting.offScreenTiles;
            if (num2 < 0)
            {
                num2 = 0;
            }

            if (num3 >= Main.maxTilesX)
            {
                num3 = Main.maxTilesX - 1;
            }

            if (num4 < 0)
            {
                num4 = 0;
            }

            if (num5 > Main.maxTilesX)
            {
                num5 = Main.maxTilesX;
            }

            for (int i = num2 + 1; i < num3; i++)
            {
                for (int j = num4 + 2; j < num5 + 2; j++)
                {
                    if (Main.tile[i, j].active() && (Main.tile[i, j].type == 70 || Main.tile[i, j].type == 71 ||
                                                     Main.tile[i, j].type == 72))
                    {
                        num++;
                    }
                }
            }

            if (num >= 100)
            {
                return true;
            }

            return false;
        }

        return true;
    }

    public static void UnspawnTravelNPC()
    {
        int num = -1;
        for (int i = 0; i < 200; i++)
        {
            if (Main.npc[i].active && Main.npc[i].type == 368)
            {
                num = i;
                break;
            }
        }

        if (num >= 0)
        {
            int num2 = (int) (Main.npc[num].Center.X / 16f);
            int num3 = (int) (Main.npc[num].Center.Y / 16f);
            bool flag = true;
            Rectangle value = new Rectangle(num2 * 16 + 8 - NPC.sWidth / 2 - NPC.safeRangeX,
                num3 * 16 + 8 - NPC.sHeight / 2 - NPC.safeRangeY, NPC.sWidth + NPC.safeRangeX * 2,
                NPC.sHeight + NPC.safeRangeY * 2);
            for (int j = 0; j < 255; j++)
            {
                if (Main.player[j].active && new Rectangle((int) Main.player[j].position.X,
                        (int) Main.player[j].position.Y, Main.player[j].width, Main.player[j].height).Intersects(value))
                {
                    flag = false;
                    break;
                }
            }

            if (flag)
            {
                string fullName = Main.npc[num].FullName;
                if (Main.netMode == 0)
                {
                    Main.NewText(Lang.misc[35].Format(fullName), 50, 125, byte.MaxValue, false);
                }
                else if (Main.netMode == 2)
                {
                    NetMessage.BroadcastChatMessage(
                        NetworkText.FromKey(Lang.misc[35].Key, Main.npc[num].GetFullNetName()), new Color(50, 125, 255),
                        -1);
                }

                Main.npc[num].active = false;
                Main.npc[num].netSkip = -1;
                Main.npc[num].life = 0;
                NetMessage.SendData(23, -1, -1, null, num, 0f, 0f, 0f, 0, 0, 0);
            }
        }
    }

    public static void SpawnTravelNPC()
    {
        if (!Main.eclipse && Main.dayTime &&
            (Main.invasionType <= 0 || Main.invasionDelay != 0 || Main.invasionSize <= 0))
        {
            for (int i = 0; i < 200; i++)
            {
                if (Main.npc[i].active && Main.npc[i].type == 368)
                {
                    return;
                }
            }

            Chest.SetupTravelShop();
            NetMessage.SendTravelShop(-1);
            int num = 0;
            int[] array = new int[200];
            int num2 = 0;
            for (int j = 0; j < 200; j++)
            {
                if (Main.npc[j].active && Main.npc[j].townNPC && Main.npc[j].type != 37 && !Main.npc[j].homeless)
                {
                    array[num2] = j;
                    num2++;
                }
            }

            if (num2 != 0)
            {
                num = array[Main.rand.Next(num2)];
                bestX = Main.npc[num].homeTileX;
                bestY = Main.npc[num].homeTileY;
                int minValue = bestX;
                int num3 = bestX;
                int num4 = bestY;
                int num5 = bestX;
                while (num5 > bestX - 10 && (SolidTile(num5, num4) || Main.tileSolidTop[Main.tile[num5, num4].type]) &&
                       (!Main.tile[num5, num4 - 1].active() || !Main.tileSolid[Main.tile[num5, num4 - 1].type] ||
                        Main.tileSolidTop[Main.tile[num5, num4 - 1].type]) &&
                       (!Main.tile[num5, num4 - 2].active() || !Main.tileSolid[Main.tile[num5, num4 - 2].type] ||
                        Main.tileSolidTop[Main.tile[num5, num4 - 2].type]) &&
                       (!Main.tile[num5, num4 - 3].active() || !Main.tileSolid[Main.tile[num5, num4 - 3].type] ||
                        Main.tileSolidTop[Main.tile[num5, num4 - 3].type]))
                {
                    minValue = num5;
                    num5--;
                }

                for (int k = bestX;
                    k < bestX + 10 && (SolidTile(k, num4) || Main.tileSolidTop[Main.tile[k, num4].type]) &&
                    (!Main.tile[k, num4 - 1].active() || !Main.tileSolid[Main.tile[k, num4 - 1].type] ||
                     Main.tileSolidTop[Main.tile[k, num4 - 1].type]) &&
                    (!Main.tile[k, num4 - 2].active() || !Main.tileSolid[Main.tile[k, num4 - 2].type] ||
                     Main.tileSolidTop[Main.tile[k, num4 - 2].type]) &&
                    (!Main.tile[k, num4 - 3].active() || !Main.tileSolid[Main.tile[k, num4 - 3].type] ||
                     Main.tileSolidTop[Main.tile[k, num4 - 3].type]);
                    k++)
                {
                    num3 = k;
                }

                for (int l = 0; l < 30; l++)
                {
                    int num6 = Main.rand.Next(minValue, num3 + 1);
                    if (l < 20)
                    {
                        if (num6 < bestX - 1 || num6 > bestX + 1)
                        {
                            bestX = num6;
                            break;
                        }
                    }
                    else if (num6 != bestX)
                    {
                        bestX = num6;
                        break;
                    }
                }

                int num7 = bestX;
                int num8 = bestY;
                bool flag = false;
                if (!flag && !((double) num8 > Main.worldSurface))
                {
                    for (int m = 20; m < 500; m++)
                    {
                        for (int n = 0; n < 2; n++)
                        {
                            num7 = ((n != 0) ? (bestX - m * 2) : (bestX + m * 2));
                            if (num7 > 10 && num7 < Main.maxTilesX - 10)
                            {
                                int num9 = bestY - m;
                                double num10 = (double) (bestY + m);
                                if (num9 < 10)
                                {
                                    num9 = 10;
                                }

                                if (num10 > Main.worldSurface)
                                {
                                    num10 = Main.worldSurface;
                                }

                                for (int num11 = num9; (double) num11 < num10; num11++)
                                {
                                    num8 = num11;
                                    if (Main.tile[num7, num8].nactive() && Main.tileSolid[Main.tile[num7, num8].type])
                                    {
                                        if (Main.tile[num7, num8 - 3].liquid == 0 &&
                                            Main.tile[num7, num8 - 2].liquid == 0 &&
                                            Main.tile[num7, num8 - 1].liquid == 0 &&
                                            !Collision.SolidTiles(num7 - 1, num7 + 1, num8 - 3, num8 - 1))
                                        {
                                            flag = true;
                                            Rectangle value = new Rectangle(
                                                num7 * 16 + 8 - NPC.sWidth / 2 - NPC.safeRangeX,
                                                num8 * 16 + 8 - NPC.sHeight / 2 - NPC.safeRangeY,
                                                NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
                                            for (int num12 = 0; num12 < 255; num12++)
                                            {
                                                if (Main.player[num12].active &&
                                                    new Rectangle((int) Main.player[num12].position.X,
                                                        (int) Main.player[num12].position.Y, Main.player[num12].width,
                                                        Main.player[num12].height).Intersects(value))
                                                {
                                                    flag = false;
                                                    break;
                                                }
                                            }
                                        }

                                        break;
                                    }
                                }
                            }

                            if (flag)
                            {
                                break;
                            }
                        }

                        if (flag)
                        {
                            break;
                        }
                    }
                }

                int num13 = NPC.NewNPC(num7 * 16, num8 * 16, 368, 1, 0f, 0f, 0f, 0f, 255);
                Main.npc[num13].homeTileX = bestX;
                Main.npc[num13].homeTileY = bestY;
                Main.npc[num13].homeless = true;
                if (num7 < bestX)
                {
                    Main.npc[num13].direction = 1;
                }
                else if (num7 > bestX)
                {
                    Main.npc[num13].direction = -1;
                }

                Main.npc[num13].netUpdate = true;
                string fullName = Main.npc[num13].FullName;
                if (Main.netMode == 0)
                {
                    Main.NewText(Language.GetTextValue("Announcement.HasArrived", fullName), 50, 125, byte.MaxValue,
                        false);
                }
                else if (Main.netMode == 2)
                {
                    NetMessage.BroadcastChatMessage(
                        NetworkText.FromKey("Announcement.HasArrived", Main.npc[num13].GetFullNetName()),
                        new Color(50, 125, 255), -1);
                }
            }
        }
    }

    public static TownNPCSpawnResult SpawnTownNPC(int x, int y)
    {
        if (Main.wallHouse[Main.tile[x, y].wall])
        {
            canSpawn = true;
        }

        if (!canSpawn)
        {
            return TownNPCSpawnResult.Blocked;
        }

        if (!StartRoomCheck(x, y))
        {
            return TownNPCSpawnResult.Blocked;
        }

        if (!RoomNeeds(prioritizedTownNPC))
        {
            return TownNPCSpawnResult.Blocked;
        }

        ScoreRoom(-1);
        if (hiScore <= 0)
        {
            return TownNPCSpawnResult.Blocked;
        }

        if (IsThereASpawnablePrioritizedTownNPC(bestX, bestY))
        {
            int num = -1;
            for (int i = 0; i < 200; i++)
            {
                if (Main.npc[i].active && Main.npc[i].homeless && Main.npc[i].type == prioritizedTownNPC &&
                    CheckSpecialTownNPCSpawningConditions(Main.npc[i].type))
                {
                    num = i;
                    break;
                }
            }

            switch (num)
            {
                default:
                    Main.townNPCCanSpawn[prioritizedTownNPC] = false;
                    Main.npc[num].homeTileX = bestX;
                    Main.npc[num].homeTileY = bestY;
                    Main.npc[num].homeless = false;
                    AchievementsHelper.NotifyProgressionEvent(8);
                    prioritizedTownNPC = 0;
                    return TownNPCSpawnResult.RelocatedHomeless;
                case -1:
                {
                    if (TownManager.HasRoom(prioritizedTownNPC, out Point roomPosition) &&
                        !currentlyTryingToUseAlternateHousingSpot)
                    {
                        int num2 = bestX;
                        int num3 = bestY;
                        currentlyTryingToUseAlternateHousingSpot = true;
                        TownNPCSpawnResult townNPCSpawnResult = SpawnTownNPC(roomPosition.X, roomPosition.Y - 2);
                        currentlyTryingToUseAlternateHousingSpot = false;
                        bestX = num2;
                        bestY = num3;
                        if (townNPCSpawnResult == TownNPCSpawnResult.Successful)
                        {
                            return townNPCSpawnResult;
                        }
                    }

                    int num4 = bestX;
                    int num5 = bestY;
                    bool flag = false;
                    for (int j = 0; j < 200; j++)
                    {
                        NPC nPC = Main.npc[j];
                        if (nPC.active && nPC.townNPC && !nPC.homeless && nPC.homeTileX == num4 &&
                            nPC.homeTileY == num5)
                        {
                            flag = true;
                            break;
                        }
                    }

                    if (flag)
                    {
                        return TownNPCSpawnResult.BlockedInfiHousing;
                    }

                    bool flag2 = false;
                    if (!flag2)
                    {
                        flag2 = true;
                        Rectangle value = new Rectangle(num4 * 16 + 8 - NPC.sWidth / 2 - NPC.safeRangeX,
                            num5 * 16 + 8 - NPC.sHeight / 2 - NPC.safeRangeY, NPC.sWidth + NPC.safeRangeX * 2,
                            NPC.sHeight + NPC.safeRangeY * 2);
                        for (int k = 0; k < 255; k++)
                        {
                            if (Main.player[k].active && new Rectangle((int) Main.player[k].position.X,
                                        (int) Main.player[k].position.Y, Main.player[k].width, Main.player[k].height)
                                    .Intersects(value))
                            {
                                flag2 = false;
                                break;
                            }
                        }
                    }

                    if (!flag2 && !((double) num5 > Main.worldSurface))
                    {
                        for (int l = 1; l < 500; l++)
                        {
                            for (int m = 0; m < 2; m++)
                            {
                                num4 = ((m != 0) ? (bestX - l) : (bestX + l));
                                if (num4 > 10 && num4 < Main.maxTilesX - 10)
                                {
                                    int num6 = bestY - l;
                                    double num7 = (double) (bestY + l);
                                    if (num6 < 10)
                                    {
                                        num6 = 10;
                                    }

                                    if (num7 > Main.worldSurface)
                                    {
                                        num7 = Main.worldSurface;
                                    }

                                    for (int n = num6; (double) n < num7; n++)
                                    {
                                        num5 = n;
                                        if (Main.tile[num4, num5].nactive() &&
                                            Main.tileSolid[Main.tile[num4, num5].type])
                                        {
                                            if (!Collision.SolidTiles(num4 - 1, num4 + 1, num5 - 3, num5 - 1))
                                            {
                                                flag2 = true;
                                                Rectangle value2 = new Rectangle(
                                                    num4 * 16 + 8 - NPC.sWidth / 2 - NPC.safeRangeX,
                                                    num5 * 16 + 8 - NPC.sHeight / 2 - NPC.safeRangeY,
                                                    NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
                                                for (int num8 = 0; num8 < 255; num8++)
                                                {
                                                    if (Main.player[num8].active &&
                                                        new Rectangle((int) Main.player[num8].position.X,
                                                            (int) Main.player[num8].position.Y, Main.player[num8].width,
                                                            Main.player[num8].height).Intersects(value2))
                                                    {
                                                        flag2 = false;
                                                        break;
                                                    }
                                                }
                                            }

                                            break;
                                        }
                                    }
                                }

                                if (flag2)
                                {
                                    break;
                                }
                            }

                            if (flag2)
                            {
                                break;
                            }
                        }
                    }

                    int num9 = NPC.NewNPC(num4 * 16, num5 * 16, prioritizedTownNPC, 1, 0f, 0f, 0f, 0f, 255);
                    Main.townNPCCanSpawn[prioritizedTownNPC] = false;
                    Main.npc[num9].homeTileX = bestX;
                    Main.npc[num9].homeTileY = bestY;
                    if (num4 < bestX)
                    {
                        Main.npc[num9].direction = 1;
                    }
                    else if (num4 > bestX)
                    {
                        Main.npc[num9].direction = -1;
                    }

                    Main.npc[num9].netUpdate = true;
                    string fullName = Main.npc[num9].FullName;
                    if (Main.netMode == 0)
                    {
                        Main.NewText(Language.GetTextValue("Announcement.HasArrived", fullName), 50, 125, byte.MaxValue,
                            false);
                    }
                    else if (Main.netMode == 2)
                    {
                        NetMessage.BroadcastChatMessage(
                            NetworkText.FromKey("Announcement.HasArrived", Main.npc[num9].GetFullNetName()),
                            new Color(50, 125, 255), -1);
                    }

                    AchievementsHelper.NotifyProgressionEvent(8);
                    if (Main.npc[num9].type == 160)
                    {
                        AchievementsHelper.NotifyProgressionEvent(18);
                    }

                    CheckAchievement_RealEstate();
                    prioritizedTownNPC = 0;
                    return TownNPCSpawnResult.Successful;
                }
            }
        }

        return TownNPCSpawnResult.Blocked;
    }

    private static void CheckAchievement_RealEstate()
    {
        bool[] array = new bool[580];
        for (int i = 0; i < 200; i++)
        {
            if (Main.npc[i].active && Main.npc[i].type >= 0 && Main.npc[i].type < 580)
            {
                array[Main.npc[i].type] = true;
            }
        }

        if (array[38] && array[17] && array[107] && array[19] && array[22] && array[124] && array[228] && array[178] &&
            array[18] && array[229] && array[209] && array[54] && array[108] && array[160] && array[20] && array[369] &&
            array[207] && array[227] && array[208] && array[441] && array[353])
        {
            AchievementsHelper.NotifyProgressionEvent(17);
        }
    }

    public static bool RoomNeeds(int npcType)
    {
        roomChair = false;
        roomDoor = false;
        roomTable = false;
        roomTorch = false;
        for (int i = 0; i < TileID.Sets.RoomNeeds.CountsAsChair.Length; i++)
        {
            if (houseTile[TileID.Sets.RoomNeeds.CountsAsChair[i]])
            {
                roomChair = true;
                break;
            }
        }

        for (int j = 0; j < TileID.Sets.RoomNeeds.CountsAsTable.Length; j++)
        {
            if (houseTile[TileID.Sets.RoomNeeds.CountsAsTable[j]])
            {
                roomTable = true;
                break;
            }
        }

        for (int k = 0; k < TileID.Sets.RoomNeeds.CountsAsTorch.Length; k++)
        {
            if (houseTile[TileID.Sets.RoomNeeds.CountsAsTorch[k]])
            {
                roomTorch = true;
                break;
            }
        }

        for (int l = 0; l < TileID.Sets.RoomNeeds.CountsAsDoor.Length; l++)
        {
            if (houseTile[TileID.Sets.RoomNeeds.CountsAsDoor[l]])
            {
                roomDoor = true;
                break;
            }
        }

        if (roomChair && roomTable && roomDoor && roomTorch)
        {
            canSpawn = true;
        }
        else
        {
            canSpawn = false;
        }

        return canSpawn;
    }

    public static void QuickFindHome(int npc)
    {
        if (Main.npc[npc].homeTileX > 10 && Main.npc[npc].homeTileY > 10 &&
            Main.npc[npc].homeTileX < Main.maxTilesX - 10 && Main.npc[npc].homeTileY < Main.maxTilesY)
        {
            canSpawn = false;
            StartRoomCheck(Main.npc[npc].homeTileX, Main.npc[npc].homeTileY - 1);
            if (!canSpawn)
            {
                for (int i = Main.npc[npc].homeTileX - 1; i < Main.npc[npc].homeTileX + 2; i++)
                {
                    for (int j = Main.npc[npc].homeTileY - 1;
                        j < Main.npc[npc].homeTileY + 2 && !StartRoomCheck(i, j);
                        j++)
                    {
                    }
                }
            }

            if (!canSpawn)
            {
                int num = 10;
                for (int k = Main.npc[npc].homeTileX - num; k <= Main.npc[npc].homeTileX + num; k += 2)
                {
                    for (int l = Main.npc[npc].homeTileY - num;
                        l <= Main.npc[npc].homeTileY + num && !StartRoomCheck(k, l);
                        l += 2)
                    {
                    }
                }
            }

            if (canSpawn)
            {
                RoomNeeds(Main.npc[npc].type);
                if (canSpawn)
                {
                    ScoreRoom(npc);
                }

                if (canSpawn && hiScore > 0)
                {
                    for (int m = 0; m < 200; m++)
                    {
                        if (m != npc)
                        {
                            NPC nPC = Main.npc[m];
                            if (nPC.active && nPC.townNPC && !nPC.homeless && nPC.homeTileX == bestX &&
                                nPC.homeTileY == bestY)
                            {
                                canSpawn = false;
                                break;
                            }
                        }
                    }
                }

                if (canSpawn && hiScore > 0)
                {
                    Main.npc[npc].homeTileX = bestX;
                    Main.npc[npc].homeTileY = bestY;
                    Main.npc[npc].homeless = false;
                    AchievementsHelper.NotifyProgressionEvent(8);
                    canSpawn = false;
                }
                else
                {
                    Main.npc[npc].homeless = true;
                }
            }
            else
            {
                Main.npc[npc].homeless = true;
            }
        }
    }

    private static bool ScoreRoom_IsThisRoomOccupiedBySomeone(int ignoreNPC = -1)
    {
        for (int i = 0; i < 200; i++)
        {
            if (Main.npc[i].active && Main.npc[i].townNPC && ignoreNPC != i && !Main.npc[i].homeless)
            {
                for (int j = 0; j < numRoomTiles; j++)
                {
                    if (Main.npc[i].homeTileX == roomX[j] && Main.npc[i].homeTileY == roomY[j])
                    {
                        bool flag = false;
                        for (int k = 0; k < numRoomTiles; k++)
                        {
                            if (Main.npc[i].homeTileX == roomX[k] && Main.npc[i].homeTileY - 1 == roomY[k])
                            {
                                flag = true;
                                break;
                            }
                        }

                        if (flag)
                        {
                            return true;
                        }
                    }
                }
            }
        }

        return false;
    }

    public static void CountTileTypesInArea(int[] tileTypeCounts, int startX, int endX, int startY, int endY)
    {
        for (int i = startX; i <= endX; i++)
        {
            for (int j = startY; j <= endY; j++)
            {
                if (Main.tile[i, j].active())
                {
                    tileTypeCounts[Main.tile[i, j].type]++;
                }
            }
        }
    }

    public static int GetTileTypeCountByCategory(int[] tileTypeCounts, TileScanGroup group)
    {
        switch (group)
        {
            case TileScanGroup.None:
                return 0;
            case TileScanGroup.Corruption:
                return tileTypeCounts[23] + tileTypeCounts[24] + tileTypeCounts[25] + tileTypeCounts[32] +
                       tileTypeCounts[112] + tileTypeCounts[163] + tileTypeCounts[400] + tileTypeCounts[398] +
                       -5 * tileTypeCounts[27];
            case TileScanGroup.Crimson:
                return tileTypeCounts[199] + tileTypeCounts[203] + tileTypeCounts[200] + tileTypeCounts[401] +
                       tileTypeCounts[399] + tileTypeCounts[234] + tileTypeCounts[352] - 5 * tileTypeCounts[27];
            case TileScanGroup.Hallow:
                return tileTypeCounts[109] + tileTypeCounts[110] + tileTypeCounts[113] + tileTypeCounts[117] +
                       tileTypeCounts[116] + tileTypeCounts[164] + tileTypeCounts[403] + tileTypeCounts[402];
            case TileScanGroup.TotalGoodEvil:
            {
                int tileTypeCountByCategory = GetTileTypeCountByCategory(tileTypeCounts, TileScanGroup.Hallow);
                int tileTypeCountByCategory2 = GetTileTypeCountByCategory(tileTypeCounts, TileScanGroup.Corruption);
                int tileTypeCountByCategory3 = GetTileTypeCountByCategory(tileTypeCounts, TileScanGroup.Crimson);
                int num = 5 * tileTypeCounts[27];
                int num2 = tileTypeCountByCategory2 + tileTypeCountByCategory3 + num;
                return tileTypeCountByCategory - num2;
            }
            default:
                return 0;
        }
    }

    public static void ScoreRoom(int ignoreNPC = -1)
    {
        roomOccupied = false;
        roomEvil = false;
        if (ScoreRoom_IsThisRoomOccupiedBySomeone(ignoreNPC))
        {
            roomOccupied = true;
            hiScore = -1;
        }
        else
        {
            hiScore = 0;
            int num = 0;
            int num2 = 50;
            int num3 = 40;
            int num4 = roomX1 - Main.zoneX / 2 / 16 - 1 - num3;
            int num5 = roomX2 + Main.zoneX / 2 / 16 + 1 + num3;
            int num6 = roomY1 - Main.zoneY / 2 / 16 - 1 - num3;
            int num7 = roomY2 + Main.zoneY / 2 / 16 + 1 + num3;
            if (num4 < 0)
            {
                num4 = 0;
            }

            if (num5 >= Main.maxTilesX)
            {
                num5 = Main.maxTilesX - 1;
            }

            if (num6 < 0)
            {
                num6 = 0;
            }

            if (num7 > Main.maxTilesY)
            {
                num7 = Main.maxTilesY - 1;
            }

            int[] tileTypeCounts = new int[470];
            CountTileTypesInArea(tileTypeCounts, num4 + 1, num5 - 1, num6 + 2, num7 + 1);
            int num8 = -GetTileTypeCountByCategory(tileTypeCounts, TileScanGroup.TotalGoodEvil);
            if (num8 < 50)
            {
                num8 = 0;
            }

            num2 -= num8;
            if (num2 <= -250)
            {
                hiScore = num2;
                roomEvil = true;
            }
            else
            {
                num4 = roomX1;
                num5 = roomX2;
                num6 = roomY1;
                num7 = roomY2;
                for (int i = num4 + 1; i < num5; i++)
                {
                    for (int j = num6 + 2; j < num7 + 2; j++)
                    {
                        if (Main.tile[i, j].nactive())
                        {
                            num = num2;
                            if (Main.tileSolid[Main.tile[i, j].type] && !Main.tileSolidTop[Main.tile[i, j].type] &&
                                !Collision.SolidTiles(i - 1, i + 1, j - 3, j - 1) && Main.tile[i - 1, j].nactive() &&
                                Main.tileSolid[Main.tile[i - 1, j].type] && Main.tile[i + 1, j].nactive() &&
                                Main.tileSolid[Main.tile[i + 1, j].type])
                            {
                                int num9 = 0;
                                int num10 = 0;
                                for (int k = i - 2; k < i + 3; k++)
                                {
                                    for (int l = j - 4; l < j; l++)
                                    {
                                        if (Main.tile[k, l].nactive())
                                        {
                                            if (k == i)
                                            {
                                                num9++;
                                            }
                                            else
                                            {
                                                Tile tile = Main.tile[k, l];
                                                if (TileID.Sets.BasicChest[tile.type])
                                                {
                                                    num10++;
                                                }
                                                else
                                                {
                                                    num = ((tile.type != 10 && tile.type != 388)
                                                        ? ((!IsOpenDoorAnchorFrame(k, l))
                                                            ? ((!Main.tileSolid[tile.type]) ? (num + 5) : (num - 5))
                                                            : (num - 20))
                                                        : (num - 20));
                                                }
                                            }
                                        }
                                    }
                                }

                                if (num > 0 && num10 > 0)
                                {
                                    num -= 30 * num10;
                                    if (num < 1)
                                    {
                                        num = 1;
                                    }
                                }

                                if (num > 0 && num9 > 0)
                                {
                                    num -= 15 * num9;
                                    if (num <= 0)
                                    {
                                        num = 0;
                                    }
                                }

                                if (num > hiScore)
                                {
                                    bool flag = Housing_CheckIfInRoom(i, j);
                                    bool[] array = new bool[3];
                                    for (int m = 1; m <= 3; m++)
                                    {
                                        if (!Main.tile[i, j - m].active() || !Main.tileSolid[Main.tile[i, j - m].type])
                                        {
                                            array[m - 1] = true;
                                        }

                                        if (!Housing_CheckIfInRoom(i, j - m))
                                        {
                                            array[m - 1] = false;
                                        }
                                    }

                                    bool[] array2 = array;
                                    for (int n = 0; n < array2.Length; n++)
                                    {
                                        if (!array2[n])
                                        {
                                            flag = false;
                                            break;
                                        }
                                    }

                                    if (flag && !Housing_CheckIfIsCeiling(i, j))
                                    {
                                        hiScore = num;
                                        bestX = i;
                                        bestY = j;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    private static void ScoreRoom_CountEvilTilesOld(ref int startScore, int startX, int endX, int startY, int endY)
    {
        int num = 0;
        for (int i = startX + 1; i < endX; i++)
        {
            for (int j = startY + 2; j < endY + 2; j++)
            {
                if (Main.tile[i, j].active())
                {
                    if (Main.tile[i, j].type == 23 || Main.tile[i, j].type == 24 || Main.tile[i, j].type == 25 ||
                        Main.tile[i, j].type == 32 || Main.tile[i, j].type == 112 || Main.tile[i, j].type == 163)
                    {
                        num++;
                    }
                    else if (Main.tile[i, j].type == 199 || Main.tile[i, j].type == 201 ||
                             Main.tile[i, j].type == 200 || Main.tile[i, j].type == 203 || Main.tile[i, j].type == 234)
                    {
                        num++;
                    }
                    else if (Main.tile[i, j].type == 27)
                    {
                        num -= 5;
                    }
                    else if (Main.tile[i, j].type == 109 || Main.tile[i, j].type == 110 ||
                             Main.tile[i, j].type == 113 || Main.tile[i, j].type == 116 || Main.tile[i, j].type == 164)
                    {
                        num--;
                    }
                }
            }
        }

        if (num < 50)
        {
            num = 0;
        }

        startScore -= num;
    }

    private static bool Housing_CheckIfIsCeiling(int i, int j)
    {
        bool result = false;
        for (int k = 0; k < roomCeilingsCount; k++)
        {
            if (roomCeilingX[k] == i)
            {
                if (roomCeilingY[k] == j)
                {
                    result = true;
                }

                break;
            }
        }

        return result;
    }

    private static bool Housing_CheckIfInRoom(int i, int j)
    {
        bool result = false;
        for (int k = 0; k < numRoomTiles; k++)
        {
            if (roomX[k] == i && roomY[k] == j)
            {
                result = true;
                break;
            }
        }

        return result;
    }

    public static bool StartRoomCheck(int x, int y)
    {
        roomX1 = x;
        roomX2 = x;
        roomY1 = y;
        roomY2 = y;
        numRoomTiles = 0;
        roomCeilingsCount = 0;
        for (int i = 0; i < 470; i++)
        {
            houseTile[i] = false;
        }

        canSpawn = true;
        if (Main.tile[x, y].nactive() && Main.tileSolid[Main.tile[x, y].type])
        {
            roomCheckFailureReason = TownNPCRoomCheckFailureReason.RoomCheckStartedInASolidTile;
            canSpawn = false;
            return false;
        }

        roomCheckFailureReason = TownNPCRoomCheckFailureReason.None;
        CheckRoom(x, y);
        if (!canSpawn)
        {
            return false;
        }

        if (numRoomTiles < 60)
        {
            roomCheckFailureReason = TownNPCRoomCheckFailureReason.RoomIsTooSmall;
            canSpawn = false;
            return false;
        }

        if (canSpawn)
        {
            return true;
        }

        return false;
    }

    public static void CheckRoom(int x, int y)
    {
        if (canSpawn)
        {
            if (x < 10 || y < 10 || x >= Main.maxTilesX - 10 || y >= lastMaxTilesY - 10)
            {
                roomCheckFailureReason = TownNPCRoomCheckFailureReason.TooCloseToWorldEdge;
                canSpawn = false;
            }
            else
            {
                for (int i = 0; i < numRoomTiles; i++)
                {
                    if (roomX[i] == x && roomY[i] == y)
                    {
                        return;
                    }
                }

                roomX[numRoomTiles] = x;
                roomY[numRoomTiles] = y;
                bool flag = false;
                for (int j = 0; j < roomCeilingsCount; j++)
                {
                    if (roomCeilingX[j] == x)
                    {
                        flag = true;
                        if (roomCeilingY[j] > y)
                        {
                            roomCeilingY[j] = y;
                        }

                        break;
                    }
                }

                if (!flag)
                {
                    roomCeilingX[roomCeilingsCount] = x;
                    roomCeilingY[roomCeilingsCount] = y;
                    roomCeilingsCount++;
                }

                numRoomTiles++;
                if (numRoomTiles >= maxRoomTiles)
                {
                    roomCheckFailureReason = TownNPCRoomCheckFailureReason.RoomIsTooBig;
                    canSpawn = false;
                }
                else
                {
                    if (Main.tile[x, y].nactive())
                    {
                        houseTile[Main.tile[x, y].type] = true;
                        if (Main.tileSolid[Main.tile[x, y].type] ||
                            (Main.tile[x, y].type == 11 &&
                             (Main.tile[x, y].frameX == 0 || Main.tile[x, y].frameX == 54 ||
                              Main.tile[x, y].frameX == 72 || Main.tile[x, y].frameX == 126)) ||
                            Main.tile[x, y].type == 389 ||
                            (Main.tile[x, y].type == 386 &&
                             ((Main.tile[x, y].frameX < 36 && Main.tile[x, y].frameY == 18) ||
                              (Main.tile[x, y].frameX >= 36 && Main.tile[x, y].frameY == 0))))
                        {
                            return;
                        }
                    }

                    if (x < roomX1)
                    {
                        roomX1 = x;
                    }

                    if (x > roomX2)
                    {
                        roomX2 = x;
                    }

                    if (y < roomY1)
                    {
                        roomY1 = y;
                    }

                    if (y > roomY2)
                    {
                        roomY2 = y;
                    }

                    bool flag2 = false;
                    bool flag3 = false;
                    for (int k = -2; k < 3; k++)
                    {
                        if (Main.wallHouse[Main.tile[x + k, y].wall])
                        {
                            flag2 = true;
                        }

                        if (Main.tile[x + k, y].nactive() &&
                            (Main.tileSolid[Main.tile[x + k, y].type] ||
                             TileID.Sets.HousingWalls[Main.tile[x + k, y].type]))
                        {
                            flag2 = true;
                        }

                        if (Main.wallHouse[Main.tile[x, y + k].wall])
                        {
                            flag3 = true;
                        }

                        if (Main.tile[x, y + k].nactive() &&
                            (Main.tileSolid[Main.tile[x, y + k].type] ||
                             TileID.Sets.HousingWalls[Main.tile[x, y + k].type]))
                        {
                            flag3 = true;
                        }
                    }

                    if (!flag2 || !flag3)
                    {
                        roomCheckFailureReason = TownNPCRoomCheckFailureReason.HoleInWallIsTooBig;
                        canSpawn = false;
                    }
                    else
                    {
                        for (int l = x - 1; l < x + 2; l++)
                        {
                            for (int m = y - 1; m < y + 2; m++)
                            {
                                if ((l != x || m != y) && canSpawn)
                                {
                                    CheckRoom(l, m);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public static void dropMeteor()
    {
        bool flag = true;
        if (Main.netMode != 1)
        {
            for (int i = 0; i < 255; i++)
            {
                if (Main.player[i].active)
                {
                    flag = false;
                    break;
                }
            }

            int num = 0;
            float num2 = (float) (Main.maxTilesX / 4200);
            int num3 = (int) (400f * num2);
            for (int j = 5; j < Main.maxTilesX - 5; j++)
            {
                for (int k = 5; (double) k < Main.worldSurface; k++)
                {
                    if (Main.tile[j, k].active() && Main.tile[j, k].type == 37)
                    {
                        num++;
                        if (num > num3)
                        {
                            return;
                        }
                    }
                }
            }

            float num4 = 600f;
            while (!flag)
            {
                float num5 = (float) Main.maxTilesX * 0.08f;
                int num6 = Main.rand.Next(150, Main.maxTilesX - 150);
                while ((float) num6 > (float) Main.spawnTileX - num5 && (float) num6 < (float) Main.spawnTileX + num5)
                {
                    num6 = Main.rand.Next(150, Main.maxTilesX - 150);
                }

                for (int l = (int) (Main.worldSurface * 0.3); l < Main.maxTilesY; l++)
                {
                    if (Main.tile[num6, l].active() && Main.tileSolid[Main.tile[num6, l].type])
                    {
                        int num7 = 0;
                        int num8 = 15;
                        for (int m = num6 - num8; m < num6 + num8; m++)
                        {
                            for (int n = l - num8; n < l + num8; n++)
                            {
                                if (SolidTile(m, n))
                                {
                                    num7++;
                                    if (Main.tile[m, n].type == 189 || Main.tile[m, n].type == 202)
                                    {
                                        num7 -= 100;
                                    }
                                }
                                else if (Main.tile[m, n].liquid > 0)
                                {
                                    num7--;
                                }
                            }
                        }

                        if ((float) num7 >= num4)
                        {
                            flag = meteor(num6, l);
                            if (!flag)
                            {
                                break;
                            }
                        }
                        else
                        {
                            num4 -= 0.5f;
                        }

                        break;
                    }
                }

                if (num4 < 100f)
                {
                    break;
                }
            }
        }
    }

    public static bool meteor(int i, int j)
    {
        if (i < 50 || i > Main.maxTilesX - 50)
        {
            return false;
        }

        if (j < 50 || j > Main.maxTilesY - 50)
        {
            return false;
        }

        int num = 35;
        Rectangle rectangle = new Rectangle((i - num) * 16, (j - num) * 16, num * 2 * 16, num * 2 * 16);
        for (int k = 0; k < 255; k++)
        {
            if (Main.player[k].active)
            {
                Rectangle value = new Rectangle(
                    (int) (Main.player[k].position.X + (float) (Main.player[k].width / 2) - (float) (NPC.sWidth / 2) -
                           (float) NPC.safeRangeX),
                    (int) (Main.player[k].position.Y + (float) (Main.player[k].height / 2) - (float) (NPC.sHeight / 2) -
                           (float) NPC.safeRangeY), NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
                if (rectangle.Intersects(value))
                {
                    return false;
                }
            }
        }

        for (int l = 0; l < 200; l++)
        {
            if (Main.npc[l].active)
            {
                Rectangle value2 = new Rectangle((int) Main.npc[l].position.X, (int) Main.npc[l].position.Y,
                    Main.npc[l].width, Main.npc[l].height);
                if (rectangle.Intersects(value2))
                {
                    return false;
                }
            }
        }

        for (int m = i - num; m < i + num; m++)
        {
            for (int n = j - num; n < j + num; n++)
            {
                if (Main.tile[m, n].active() && TileID.Sets.BasicChest[Main.tile[m, n].type])
                {
                    return false;
                }
            }
        }

        stopDrops = true;
        num = genRand.Next(17, 23);
        for (int num2 = i - num; num2 < i + num; num2++)
        {
            for (int num3 = j - num; num3 < j + num; num3++)
            {
                if (num3 > j + Main.rand.Next(-2, 3) - 5)
                {
                    float num4 = (float) Math.Abs(i - num2);
                    float num5 = (float) Math.Abs(j - num3);
                    float num6 = (float) Math.Sqrt((double) (num4 * num4 + num5 * num5));
                    if ((double) num6 < (double) num * 0.9 + (double) Main.rand.Next(-4, 5))
                    {
                        if (!Main.tileSolid[Main.tile[num2, num3].type])
                        {
                            Main.tile[num2, num3].active(false);
                        }

                        Main.tile[num2, num3].type = 37;
                    }
                }
            }
        }

        num = genRand.Next(8, 14);
        for (int num7 = i - num; num7 < i + num; num7++)
        {
            for (int num8 = j - num; num8 < j + num; num8++)
            {
                if (num8 > j + Main.rand.Next(-2, 3) - 4)
                {
                    float num9 = (float) Math.Abs(i - num7);
                    float num10 = (float) Math.Abs(j - num8);
                    float num11 = (float) Math.Sqrt((double) (num9 * num9 + num10 * num10));
                    if ((double) num11 < (double) num * 0.8 + (double) Main.rand.Next(-3, 4))
                    {
                        Main.tile[num7, num8].active(false);
                    }
                }
            }
        }

        num = genRand.Next(25, 35);
        for (int num12 = i - num; num12 < i + num; num12++)
        {
            for (int num13 = j - num; num13 < j + num; num13++)
            {
                float num14 = (float) Math.Abs(i - num12);
                float num15 = (float) Math.Abs(j - num13);
                float num16 = (float) Math.Sqrt((double) (num14 * num14 + num15 * num15));
                if ((double) num16 < (double) num * 0.7)
                {
                    if (Main.tile[num12, num13].type == 5 || Main.tile[num12, num13].type == 32 ||
                        Main.tile[num12, num13].type == 352)
                    {
                        KillTile(num12, num13, false, false, false);
                    }

                    Main.tile[num12, num13].liquid = 0;
                }

                if (Main.tile[num12, num13].type == 37)
                {
                    if (!SolidTile(num12 - 1, num13) && !SolidTile(num12 + 1, num13) && !SolidTile(num12, num13 - 1) &&
                        !SolidTile(num12, num13 + 1))
                    {
                        Main.tile[num12, num13].active(false);
                    }
                    else if ((Main.tile[num12, num13].halfBrick() || Main.tile[num12 - 1, num13].topSlope()) &&
                             !SolidTile(num12, num13 + 1))
                    {
                        Main.tile[num12, num13].active(false);
                    }
                }

                SquareTileFrame(num12, num13, true);
                SquareWallFrame(num12, num13, true);
            }
        }

        num = genRand.Next(23, 32);
        for (int num17 = i - num; num17 < i + num; num17++)
        {
            for (int num18 = j - num; num18 < j + num; num18++)
            {
                if (num18 > j + genRand.Next(-3, 4) - 3 && Main.tile[num17, num18].active() && Main.rand.Next(10) == 0)
                {
                    float num19 = (float) Math.Abs(i - num17);
                    float num20 = (float) Math.Abs(j - num18);
                    float num21 = (float) Math.Sqrt((double) (num19 * num19 + num20 * num20));
                    if ((double) num21 < (double) num * 0.8)
                    {
                        if (Main.tile[num17, num18].type == 5 || Main.tile[num17, num18].type == 32 ||
                            Main.tile[num17, num18].type == 352)
                        {
                            KillTile(num17, num18, false, false, false);
                        }

                        Main.tile[num17, num18].type = 37;
                        SquareTileFrame(num17, num18, true);
                    }
                }
            }
        }

        num = genRand.Next(30, 38);
        for (int num22 = i - num; num22 < i + num; num22++)
        {
            for (int num23 = j - num; num23 < j + num; num23++)
            {
                if (num23 > j + genRand.Next(-2, 3) && Main.tile[num22, num23].active() && Main.rand.Next(20) == 0)
                {
                    float num24 = (float) Math.Abs(i - num22);
                    float num25 = (float) Math.Abs(j - num23);
                    float num26 = (float) Math.Sqrt((double) (num24 * num24 + num25 * num25));
                    if ((double) num26 < (double) num * 0.85)
                    {
                        if (Main.tile[num22, num23].type == 5 || Main.tile[num22, num23].type == 32 ||
                            Main.tile[num22, num23].type == 352)
                        {
                            KillTile(num22, num23, false, false, false);
                        }

                        Main.tile[num22, num23].type = 37;
                        SquareTileFrame(num22, num23, true);
                    }
                }
            }
        }

        stopDrops = false;
        if (Main.netMode == 0)
        {
            Main.NewText(Lang.gen[59].Value, 50, byte.MaxValue, 130, false);
        }
        else if (Main.netMode == 2)
        {
            NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.gen[59].Key), new Color(50, 255, 130), -1);
        }

        if (Main.netMode != 1)
        {
            NetMessage.SendTileSquare(-1, i, j, 40, TileChangeType.None);
        }

        return true;
    }

    public static void setWorldSize()
    {
        Main.bottomWorld = (float) (Main.maxTilesY * 16);
        Main.rightWorld = (float) (Main.maxTilesX * 16);
        Main.maxSectionsX = Main.maxTilesX / 200;
        Main.maxSectionsY = Main.maxTilesY / 150;
    }

    public static void worldGenCallBack(object threadContext)
    {
        Main.PlaySound(10, -1, -1, 1, 1f, 0f);
        clearWorld();
        generateWorld(Main.ActiveWorldFileData.Seed, threadContext as GenerationProgress);
        WorldFile.saveWorld(Main.ActiveWorldFileData.IsCloudSave, true);
        if (Main.menuMode == 10 || Main.menuMode == 888)
        {
            Main.menuMode = 6;
        }

        Main.PlaySound(10, -1, -1, 1, 1f, 0f);
    }

    public static void CreateNewWorld(GenerationProgress progress = null)
    {
        Main.rand = new UnifiedRandom(Main.ActiveWorldFileData.Seed);
        ThreadPool.QueueUserWorkItem(worldGenCallBack, progress);
    }

    public static void SaveAndQuitCallBack(object threadContext)
    {
        try
        {
            Main.PlaySound(34, -1, -1, 0, 1f, 0f);
            Main.PlaySound(35, -1, -1, 0, 1f, 0f);
        }
        catch
        {
        }

        if (Main.netMode == 0)
        {
            WorldFile.CacheSaveTime();
        }

        Main.invasionProgress = 0;
        Main.invasionProgressDisplayLeft = 0;
        Main.invasionProgressAlpha = 0f;
        Main.menuMode = 10;
        Main.gameMenu = true;
        Main.StopTrackedSounds();
        CaptureInterface.ResetFocus();
        Main.ActivePlayerFileData.StopPlayTimer();
        Player.SavePlayer(Main.ActivePlayerFileData, false);
        if (Main.netMode == 0)
        {
            WorldFile.saveWorld();
            Main.PlaySound(10, -1, -1, 1, 1f, 0f);
        }
        else
        {
            Netplay.disconnect = true;
            Main.netMode = 0;
        }

        Main.fastForwardTime = false;
        Main.UpdateSundial();
        Main.menuMode = 0;
        if (threadContext != null)
        {
            ((Action) threadContext)();
        }
    }

    public static void SaveAndQuit(Action callback = null)
    {
        Main.PlaySound(11, -1, -1, 1, 1f, 0f);
        ThreadPool.QueueUserWorkItem(SaveAndQuitCallBack, callback);
    }

    public static void playWorldCallBack(object threadContext)
    {
        if (Main.rand == null)
        {
            Main.rand = new UnifiedRandom((int) DateTime.Now.Ticks);
        }

        for (int i = 0; i < 255; i++)
        {
            if (i != Main.myPlayer)
            {
                Main.player[i].active = false;
            }
        }

        noMapUpdate = true;
        WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
        if (loadFailed || !loadSuccess)
        {
            WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
            if (loadFailed || !loadSuccess)
            {
                bool isCloudSave = Main.ActiveWorldFileData.IsCloudSave;
                if (FileUtilities.Exists(Main.worldPathName + ".bak", isCloudSave))
                {
                    worldBackup = true;
                }
                else
                {
                    worldBackup = false;
                }

                if (!Main.dedServ)
                {
                    if (worldBackup)
                    {
                        Main.menuMode = 200;
                    }
                    else
                    {
                        Main.menuMode = 201;
                    }

                    return;
                }

                if (!worldBackup)
                {
                    Console.WriteLine(Language.GetTextValue("Error.LoadFailedNoBackup"));
                    return;
                }

                FileUtilities.Copy(Main.worldPathName, Main.worldPathName + ".bad", isCloudSave, true);
                FileUtilities.Copy(Main.worldPathName + ".bak", Main.worldPathName, isCloudSave, true);
                FileUtilities.Delete(Main.worldPathName + ".bak", isCloudSave);
                WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
                if (loadFailed || !loadSuccess)
                {
                    WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
                    if (loadFailed || !loadSuccess)
                    {
                        FileUtilities.Copy(Main.worldPathName, Main.worldPathName + ".bak", isCloudSave, true);
                        FileUtilities.Copy(Main.worldPathName + ".bad", Main.worldPathName, isCloudSave, true);
                        FileUtilities.Delete(Main.worldPathName + ".bad", isCloudSave);
                        Console.WriteLine(Language.GetTextValue("Error.LoadFailed"));
                        return;
                    }
                }
            }
        }

        if (Main.mapEnabled)
        {
            Main.Map.Load();
        }

        if (Main.netMode != 2)
        {
            Main.sectionManager.SetAllFramesLoaded();
        }

        while (Main.loadMapLock)
        {
            float num = (float) Main.loadMapLastX / (float) Main.maxTilesX;
            Main.statusText = Lang.gen[68].Value + " " + (int) (num * 100f + 1f) + "%";
            Thread.Sleep(0);
            if (!Main.mapEnabled)
            {
                break;
            }
        }

        if (Main.gameMenu)
        {
            Main.gameMenu = false;
        }

        if (Main.netMode == 0 && Main.anglerWhoFinishedToday.Contains(Main.player[Main.myPlayer].name))
        {
            Main.anglerQuestFinished = true;
        }

        Main.player[Main.myPlayer].Spawn();
        Main.player[Main.myPlayer].Update(Main.myPlayer);
        Main.ActivePlayerFileData.StartPlayTimer();
        _lastSeed = Main.ActiveWorldFileData.Seed;
        Player.Hooks.EnterWorld(Main.myPlayer);
        WorldFile.SetOngoingToTemps();
        Main.PlaySound(11, -1, -1, 1, 1f, 0f);
        Main.resetClouds = true;
        noMapUpdate = false;
    }

    public static void playWorld()
    {
        ThreadPool.QueueUserWorkItem(playWorldCallBack, 1);
    }

    public static void saveAndPlayCallBack(object threadContext)
    {
        WorldFile.saveWorld();
    }

    public static void saveAndPlay()
    {
        ThreadPool.QueueUserWorkItem(saveAndPlayCallBack, 1);
    }

    public static void saveToonWhilePlayingCallBack(object threadContext)
    {
        Player.SavePlayer(Main.ActivePlayerFileData, false);
    }

    public static void saveToonWhilePlaying()
    {
        ThreadPool.QueueUserWorkItem(saveToonWhilePlayingCallBack, 1);
    }

    public static void serverLoadWorldCallBack(object threadContext)
    {
        Main.rand = new UnifiedRandom((int) DateTime.Now.Ticks);
        WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
        if (loadFailed || !loadSuccess)
        {
            WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
            if (loadFailed || !loadSuccess)
            {
                bool isCloudSave = Main.ActiveWorldFileData.IsCloudSave;
                if (FileUtilities.Exists(Main.worldPathName + ".bak", isCloudSave))
                {
                    worldBackup = true;
                }
                else
                {
                    worldBackup = false;
                }

                if (!Main.dedServ)
                {
                    if (worldBackup)
                    {
                        Main.menuMode = 200;
                    }
                    else
                    {
                        Main.menuMode = 201;
                    }

                    return;
                }

                if (!worldBackup)
                {
                    Console.WriteLine(Language.GetTextValue("Error.LoadFailedNoBackup"));
                    return;
                }

                FileUtilities.Copy(Main.worldPathName + ".bak", Main.worldPathName, isCloudSave, true);
                FileUtilities.Delete(Main.worldPathName + ".bak", isCloudSave);
                WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
                if (loadFailed || !loadSuccess)
                {
                    WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
                    if (loadFailed || !loadSuccess)
                    {
                        Console.WriteLine(Language.GetTextValue("Error.LoadFailed"));
                        return;
                    }
                }
            }
        }

        _lastSeed = Main.ActiveWorldFileData.Seed;
        Main.PlaySound(10, -1, -1, 1, 1f, 0f);
        Netplay.StartServer();
        WorldFile.SetOngoingToTemps();
        Hooks.WorldLoaded();
    }

    public static void serverLoadWorld()
    {
        ThreadPool.QueueUserWorkItem(serverLoadWorldCallBack, 1);
    }

    public static void clearWorld()
    {
        TownManager = new TownRoomManager();
        Hooks.ClearWorld();
        TileEntity.Clear();
        Main.checkXMas();
        Main.checkHalloween();
        if (Main.mapReady)
        {
            for (int i = 0; i < lastMaxTilesX; i++)
            {
                float num13 = (float) i / (float) lastMaxTilesX;
                Main.statusText = Lang.gen[65].Value;
            }

            Main.Map.Clear();
        }

        NPC.MoonLordCountdown = 0;
        Main.pumpkinMoon = false;
        Main.clearMap = true;
        Main.mapTime = 0;
        Main.updateMap = false;
        Main.mapReady = false;
        Main.refreshMap = false;
        Main.eclipse = false;
        Main.slimeRain = false;
        Main.slimeRainTime = 0.0;
        Main.sundialCooldown = 0;
        Main.fastForwardTime = false;
        BirthdayParty.WorldClear();
        Sandstorm.WorldClear();
        Main.UpdateSundial();
        Main.wof = -1;
        NPC.waveKills = 0f;
        spawnHardBoss = 0;
        totalSolid2 = 0;
        totalGood2 = 0;
        totalEvil2 = 0;
        totalBlood2 = 0;
        totalSolid = 0;
        totalGood = 0;
        totalEvil = 0;
        totalBlood = 0;
        WorldFile.ResetTemps();
        Main.maxRaining = 0f;
        totalX = 0;
        totalD = 0;
        tEvil = 0;
        tBlood = 0;
        tGood = 0;
        spawnEye = false;
        prioritizedTownNPC = 0;
        shadowOrbCount = 0;
        altarCount = 0;
        oreTier1 = -1;
        oreTier2 = -1;
        oreTier3 = -1;
        Main.cloudBGActive = 0f;
        Main.raining = false;
        Main.hardMode = false;
        Main.helpText = 0;
        Main.BartenderHelpTextIndex = 0;
        Main.dungeonX = 0;
        Main.dungeonY = 0;
        NPC.downedBoss1 = false;
        NPC.downedBoss2 = false;
        NPC.downedBoss3 = false;
        NPC.downedQueenBee = false;
        NPC.downedSlimeKing = false;
        NPC.downedMechBossAny = false;
        NPC.downedMechBoss1 = false;
        NPC.downedMechBoss2 = false;
        NPC.downedMechBoss3 = false;
        NPC.downedFishron = false;
        NPC.downedAncientCultist = false;
        NPC.downedMoonlord = false;
        NPC.downedHalloweenKing = false;
        NPC.downedHalloweenTree = false;
        NPC.downedChristmasIceQueen = false;
        NPC.downedChristmasSantank = false;
        NPC.downedChristmasTree = false;
        NPC.downedPlantBoss = false;
        NPC.downedGolemBoss = false;
        NPC.savedStylist = false;
        NPC.savedGoblin = false;
        NPC.savedWizard = false;
        NPC.savedMech = false;
        NPC.savedTaxCollector = false;
        NPC.savedAngler = false;
        NPC.savedBartender = false;
        NPC.downedGoblins = false;
        NPC.downedClown = false;
        NPC.downedFrost = false;
        NPC.downedPirates = false;
        NPC.downedMartians = false;
        NPC.downedTowerSolar = (NPC.downedTowerVortex =
            (NPC.downedTowerNebula = (NPC.downedTowerStardust = (NPC.LunarApocalypseIsUp = false))));
        NPC.TowerActiveSolar = (NPC.TowerActiveVortex = (NPC.TowerActiveNebula = (NPC.TowerActiveStardust = false)));
        DD2Event.ResetProgressEntirely();
        NPC.ClearFoundActiveNPCs();
        shadowOrbSmashed = false;
        spawnMeteor = false;
        stopDrops = false;
        Main.invasionDelay = 0;
        Main.invasionType = 0;
        Main.invasionSize = 0;
        Main.invasionWarn = 0;
        Main.invasionX = 0.0;
        Main.invasionSizeStart = 0;
        Main.treeX[0] = Main.maxTilesX;
        Main.treeX[1] = Main.maxTilesX;
        Main.treeX[2] = Main.maxTilesX;
        Main.treeStyle[0] = 0;
        Main.treeStyle[1] = 0;
        Main.treeStyle[2] = 0;
        Main.treeStyle[3] = 0;
        noLiquidCheck = false;
        Liquid.numLiquid = 0;
        LiquidBuffer.numLiquidBuffer = 0;
        if (Main.netMode == 1 || lastMaxTilesX > Main.maxTilesX || lastMaxTilesY > Main.maxTilesY)
        {
            for (int j = 0; j < lastMaxTilesX; j++)
            {
                float num = (float) j / (float) lastMaxTilesX;
                Main.statusText = Lang.gen[46].Value + " " + (int) (num * 100f + 1f) + "%";
                for (int k = 0; k < lastMaxTilesY; k++)
                {
                    Main.tile[j, k] = null;
                }
            }
        }

        lastMaxTilesX = Main.maxTilesX;
        lastMaxTilesY = Main.maxTilesY;
        if (Main.netMode != 2)
        {
            Main.sectionManager = new WorldSections(Main.maxTilesX / 200, Main.maxTilesY / 150);
        }

        if (Main.netMode != 1)
        {
            for (int l = 0; l < Main.maxTilesX; l++)
            {
                float num2 = (float) l / (float) Main.maxTilesX;
                Main.statusText = Lang.gen[47].Value + " " + (int) (num2 * 100f + 1f) + "%";
                for (int m = 0; m < Main.maxTilesY; m++)
                {
                    if (Main.tile[l, m] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num3 = l;
                        int num4 = m;
                        Tile tile2 = new Tile();
                        tile[num3, num4] = tile2;
                    }
                    else
                    {
                        Main.tile[l, m].ClearEverything();
                    }
                }
            }
        }

        CombatText.clearAll();
        for (int n = 0; n < 6000; n++)
        {
            Main.dust[n] = new Dust();
            Main.dust[n].dustIndex = n;
        }

        for (int num5 = 0; num5 < 500; num5++)
        {
            Main.gore[num5] = new Gore();
        }

        for (int num6 = 0; num6 < 400; num6++)
        {
            Main.item[num6] = new Item();
            Main.itemLockoutTime[num6] = 0;
        }

        for (int num7 = 0; num7 < 200; num7++)
        {
            Main.npc[num7] = new NPC();
        }

        for (int num8 = 0; num8 < 1000; num8++)
        {
            Main.projectile[num8] = new Projectile();
        }

        for (int num9 = 0; num9 < 1000; num9++)
        {
            Main.chest[num9] = null;
        }

        for (int num10 = 0; num10 < 1000; num10++)
        {
            Main.sign[num10] = null;
        }

        for (int num11 = 0; num11 < Liquid.resLiquid; num11++)
        {
            Main.liquid[num11] = new Liquid();
        }

        for (int num12 = 0; num12 < 10000; num12++)
        {
            Main.liquidBuffer[num12] = new LiquidBuffer();
        }

        setWorldSize();
        worldCleared = true;
    }

    public static void setBG(int bg, int style)
    {
        switch (bg)
        {
            case 0:
                treeBG = style;
                Main.treeMntBG[0] = 7;
                Main.treeMntBG[1] = 8;
                switch (style)
                {
                    case 1:
                        Main.treeBG[0] = 50;
                        Main.treeBG[1] = 51;
                        Main.treeBG[2] = 52;
                        break;
                    case 2:
                        Main.treeBG[0] = 53;
                        Main.treeBG[1] = 54;
                        Main.treeBG[2] = 55;
                        break;
                    case 3:
                        Main.treeMntBG[1] = 90;
                        Main.treeBG[0] = 91;
                        Main.treeBG[1] = -1;
                        Main.treeBG[2] = 92;
                        break;
                    case 31:
                        Main.treeMntBG[1] = 90;
                        Main.treeBG[0] = 91;
                        Main.treeBG[1] = -1;
                        Main.treeBG[2] = 11;
                        break;
                    case 4:
                        Main.treeMntBG[0] = 93;
                        Main.treeMntBG[1] = 94;
                        Main.treeBG[0] = -1;
                        Main.treeBG[1] = -1;
                        Main.treeBG[2] = -1;
                        break;
                    case 5:
                        Main.treeMntBG[0] = 93;
                        Main.treeMntBG[1] = 94;
                        Main.treeBG[0] = -1;
                        Main.treeBG[1] = -1;
                        Main.treeBG[2] = 55;
                        break;
                    case 51:
                        Main.treeMntBG[0] = 93;
                        Main.treeMntBG[1] = 94;
                        Main.treeBG[0] = -1;
                        Main.treeBG[1] = -1;
                        Main.treeBG[2] = 11;
                        break;
                    case 6:
                        Main.treeMntBG[0] = 171;
                        Main.treeMntBG[1] = 172;
                        Main.treeBG[0] = 173;
                        Main.treeBG[1] = -1;
                        Main.treeBG[2] = -1;
                        break;
                    case 7:
                        Main.treeMntBG[0] = 176;
                        Main.treeMntBG[1] = 177;
                        Main.treeBG[0] = 178;
                        Main.treeBG[1] = -1;
                        Main.treeBG[2] = -1;
                        break;
                    case 71:
                        Main.treeMntBG[0] = 176;
                        Main.treeMntBG[1] = 177;
                        Main.treeBG[0] = 178;
                        Main.treeBG[1] = -1;
                        Main.treeBG[2] = 11;
                        break;
                    case 72:
                        Main.treeMntBG[0] = 176;
                        Main.treeMntBG[1] = 177;
                        Main.treeBG[0] = 178;
                        Main.treeBG[1] = -1;
                        Main.treeBG[2] = 52;
                        break;
                    case 73:
                        Main.treeMntBG[0] = 176;
                        Main.treeMntBG[1] = 177;
                        Main.treeBG[0] = 178;
                        Main.treeBG[1] = -1;
                        Main.treeBG[2] = 55;
                        break;
                    case 8:
                        Main.treeMntBG[0] = 179;
                        Main.treeMntBG[1] = 180;
                        Main.treeBG[0] = 184;
                        Main.treeBG[1] = -1;
                        Main.treeBG[2] = -1;
                        break;
                    default:
                        Main.treeBG[0] = 9;
                        Main.treeBG[1] = 10;
                        Main.treeBG[2] = 11;
                        break;
                }

                break;
            case 1:
                corruptBG = style;
                if (style == 1)
                {
                    Main.corruptBG[0] = 56;
                    Main.corruptBG[1] = 57;
                    Main.corruptBG[2] = 58;
                }
                else
                {
                    Main.corruptBG[0] = 12;
                    Main.corruptBG[1] = 13;
                    Main.corruptBG[2] = 14;
                }

                break;
            case 2:
                jungleBG = style;
                if (style == 1)
                {
                    Main.jungleBG[0] = 59;
                    Main.jungleBG[1] = 60;
                    Main.jungleBG[2] = 61;
                }
                else
                {
                    Main.jungleBG[0] = 15;
                    Main.jungleBG[1] = 16;
                    Main.jungleBG[2] = 17;
                }

                break;
            case 3:
                snowBG = style;
                Main.snowMntBG[0] = 35;
                Main.snowMntBG[1] = 36;
                switch (style)
                {
                    case 1:
                        Main.snowBG[0] = 97;
                        Main.snowBG[1] = 96;
                        Main.snowBG[2] = 95;
                        break;
                    case 2:
                        Main.snowMntBG[0] = 98;
                        Main.snowMntBG[1] = 99;
                        Main.snowBG[0] = -1;
                        Main.snowBG[1] = -1;
                        Main.snowBG[2] = -1;
                        break;
                    case 21:
                        Main.snowMntBG[0] = 98;
                        Main.snowMntBG[1] = 99;
                        Main.snowBG[0] = 95;
                        Main.snowBG[1] = 96;
                        Main.snowBG[2] = 97;
                        break;
                    case 22:
                        Main.snowMntBG[0] = 98;
                        Main.snowMntBG[1] = 99;
                        Main.snowBG[0] = 37;
                        Main.snowBG[1] = 38;
                        Main.snowBG[2] = 39;
                        break;
                    case 3:
                        Main.snowMntBG[0] = 98;
                        Main.snowMntBG[1] = 100;
                        Main.snowBG[0] = -1;
                        Main.snowBG[1] = -1;
                        Main.snowBG[2] = -1;
                        break;
                    case 31:
                        Main.snowMntBG[0] = 98;
                        Main.snowMntBG[1] = 100;
                        Main.snowBG[0] = 95;
                        Main.snowBG[1] = 96;
                        Main.snowBG[2] = 97;
                        break;
                    case 32:
                        Main.snowMntBG[0] = 98;
                        Main.snowMntBG[1] = 100;
                        Main.snowBG[0] = 37;
                        Main.snowBG[1] = 38;
                        Main.snowBG[2] = 39;
                        break;
                    case 4:
                        Main.snowMntBG[0] = 98;
                        Main.snowMntBG[1] = 101;
                        Main.snowBG[0] = -1;
                        Main.snowBG[1] = -1;
                        Main.snowBG[2] = -1;
                        break;
                    case 41:
                        Main.snowMntBG[0] = 98;
                        Main.snowMntBG[1] = 101;
                        Main.snowBG[0] = 95;
                        Main.snowBG[1] = 96;
                        Main.snowBG[2] = 97;
                        break;
                    case 42:
                        Main.snowMntBG[0] = 98;
                        Main.snowMntBG[1] = 101;
                        Main.snowBG[0] = 37;
                        Main.snowBG[1] = 38;
                        Main.snowBG[2] = 39;
                        break;
                    default:
                        Main.snowBG[0] = 37;
                        Main.snowBG[1] = 38;
                        Main.snowBG[2] = 39;
                        break;
                }

                break;
            case 4:
                hallowBG = style;
                if (style == 1)
                {
                    Main.hallowBG[0] = 102;
                    Main.hallowBG[1] = 103;
                    Main.hallowBG[2] = 104;
                }
                else
                {
                    Main.hallowBG[0] = 29;
                    Main.hallowBG[1] = 30;
                    Main.hallowBG[2] = 31;
                }

                break;
            case 5:
                crimsonBG = style;
                if (style == 1)
                {
                    Main.crimsonBG[0] = 105;
                    Main.crimsonBG[1] = 106;
                    Main.crimsonBG[2] = 107;
                }

                if (style == 2)
                {
                    Main.crimsonBG[0] = 174;
                    Main.crimsonBG[1] = -1;
                    Main.crimsonBG[2] = 175;
                }
                else
                {
                    Main.crimsonBG[0] = 43;
                    Main.crimsonBG[1] = 44;
                    Main.crimsonBG[2] = 45;
                }

                break;
            case 6:
                desertBG = style;
                if (style == 1)
                {
                    Main.desertBG[0] = 108;
                    Main.desertBG[1] = 109;
                }
                else
                {
                    Main.desertBG[0] = 21;
                    Main.desertBG[1] = 20;
                }

                break;
            case 7:
                oceanBG = style;
                switch (style)
                {
                    case 1:
                        Main.oceanBG = 110;
                        break;
                    case 2:
                        Main.oceanBG = 111;
                        break;
                    default:
                        Main.oceanBG = 28;
                        break;
                }

                break;
        }
    }

    public static void RandomizeWeather()
    {
        if (Main.cloudLimit >= 10)
        {
            Main.numClouds = genRand.Next(10, Main.cloudLimit);
            Main.windSpeed = 0f;
            while (Main.windSpeed == 0f)
            {
                Main.windSpeed = (float) genRand.Next(-100, 101) * 0.01f;
                Main.windSpeedSet = Main.windSpeed;
            }

            Cloud.resetClouds();
        }
    }

    public static void RandomizeMoonState()
    {
        Main.moonType = genRand.Next(Main.maxMoons);
    }

    public static void RandomizeBackgrounds()
    {
        treeBG = genRand.Next(9);
        if ((treeBG == 1 || treeBG == 2) && genRand.Next(2) == 0)
        {
            treeBG = genRand.Next(7);
        }

        if (treeBG == 0)
        {
            treeBG = genRand.Next(7);
        }

        if (treeBG == 3 && genRand.Next(3) == 0)
        {
            treeBG = 31;
        }

        if (treeBG == 5 && genRand.Next(2) == 0)
        {
            treeBG = 51;
        }

        if (treeBG == 7 && genRand.Next(4) == 0)
        {
            treeBG = genRand.Next(71, 74);
        }

        setBG(0, treeBG);
        setBG(1, genRand.Next(2));
        setBG(2, genRand.Next(2));
        snowBG = genRand.Next(6);
        if (snowBG == 2 && genRand.Next(2) == 0)
        {
            if (genRand.Next(2) == 0)
            {
                snowBG = 21;
            }
            else
            {
                snowBG = 22;
            }
        }

        if (snowBG == 3 && genRand.Next(2) == 0)
        {
            if (genRand.Next(2) == 0)
            {
                snowBG = 31;
            }
            else
            {
                snowBG = 32;
            }
        }

        if (snowBG == 4 && genRand.Next(2) == 0)
        {
            if (genRand.Next(2) == 0)
            {
                snowBG = 41;
            }
            else
            {
                snowBG = 42;
            }
        }

        setBG(3, snowBG);
        setBG(4, genRand.Next(2));
        setBG(5, genRand.Next(3));
        setBG(6, genRand.Next(2));
        setBG(7, genRand.Next(3));
    }

    public static void RandomizeTreeStyle()
    {
        if (Main.maxTilesX == 4200)
        {
            Main.treeX[0] =
                genRand.Next((int) ((double) Main.maxTilesX * 0.5 - (double) ((float) Main.maxTilesX * 0.25f)),
                    (int) ((double) Main.maxTilesX * 0.5 + (double) ((float) Main.maxTilesX * 0.25f)));
            Main.treeStyle[0] = genRand.Next(6);
            Main.treeStyle[1] = genRand.Next(6);
            while (Main.treeStyle[1] == Main.treeStyle[0])
            {
                Main.treeStyle[1] = genRand.Next(6);
            }

            Main.treeX[1] = Main.maxTilesX;
            Main.treeX[2] = Main.maxTilesX;
        }
        else if (Main.maxTilesX == 6400)
        {
            Main.treeX[0] =
                genRand.Next((int) ((double) Main.maxTilesX * 0.334 - (double) ((float) Main.maxTilesX * 0.2f)),
                    (int) ((double) Main.maxTilesX * 0.334 + (double) ((float) Main.maxTilesX * 0.2f)));
            Main.treeX[1] =
                genRand.Next((int) ((double) Main.maxTilesX * 0.667 - (double) ((float) Main.maxTilesX * 0.2f)),
                    (int) ((double) Main.maxTilesX * 0.667 + (double) ((float) Main.maxTilesX * 0.2f)));
            Main.treeStyle[0] = genRand.Next(6);
            Main.treeStyle[1] = genRand.Next(6);
            Main.treeStyle[2] = genRand.Next(6);
            while (Main.treeStyle[1] == Main.treeStyle[0])
            {
                Main.treeStyle[1] = genRand.Next(6);
            }

            while (Main.treeStyle[2] == Main.treeStyle[0] || Main.treeStyle[2] == Main.treeStyle[1])
            {
                Main.treeStyle[2] = genRand.Next(6);
            }

            Main.treeX[2] = Main.maxTilesX;
        }
        else
        {
            Main.treeX[0] =
                genRand.Next((int) ((double) Main.maxTilesX * 0.25 - (double) ((float) Main.maxTilesX * 0.15f)),
                    (int) ((double) Main.maxTilesX * 0.25 + (double) ((float) Main.maxTilesX * 0.15f)));
            Main.treeX[1] =
                genRand.Next((int) ((double) Main.maxTilesX * 0.5 - (double) ((float) Main.maxTilesX * 0.15f)),
                    (int) ((double) Main.maxTilesX * 0.5 + (double) ((float) Main.maxTilesX * 0.15f)));
            Main.treeX[2] =
                genRand.Next((int) ((double) Main.maxTilesX * 0.75 - (double) ((float) Main.maxTilesX * 0.15f)),
                    (int) ((double) Main.maxTilesX * 0.75 + (double) ((float) Main.maxTilesX * 0.15f)));
            Main.treeStyle[0] = genRand.Next(6);
            Main.treeStyle[1] = genRand.Next(6);
            Main.treeStyle[2] = genRand.Next(6);
            Main.treeStyle[3] = genRand.Next(6);
            while (Main.treeStyle[1] == Main.treeStyle[0])
            {
                Main.treeStyle[1] = genRand.Next(6);
            }

            while (Main.treeStyle[2] == Main.treeStyle[0] || Main.treeStyle[2] == Main.treeStyle[1])
            {
                Main.treeStyle[2] = genRand.Next(6);
            }

            while (Main.treeStyle[3] == Main.treeStyle[0] || Main.treeStyle[3] == Main.treeStyle[1] ||
                   Main.treeStyle[3] == Main.treeStyle[2])
            {
                Main.treeStyle[3] = genRand.Next(6);
            }
        }
    }

    public static void RandomizeCaveBackgrounds()
    {
        int maxValue = 8;
        if (Main.maxTilesX == 4200)
        {
            Main.caveBackX[0] =
                genRand.Next((int) ((double) Main.maxTilesX * 0.5 - (double) ((float) Main.maxTilesX * 0.25f)),
                    (int) ((double) Main.maxTilesX * 0.5 + (double) ((float) Main.maxTilesX * 0.25f)));
            Main.caveBackX[1] = Main.maxTilesX;
            Main.caveBackX[2] = Main.maxTilesX;
            Main.caveBackStyle[0] = genRand.Next(maxValue);
            Main.caveBackStyle[1] = genRand.Next(maxValue);
            while (Main.caveBackStyle[1] == Main.caveBackStyle[0])
            {
                Main.caveBackStyle[1] = genRand.Next(maxValue);
            }
        }
        else if (Main.maxTilesX == 6400)
        {
            Main.caveBackX[0] =
                genRand.Next((int) ((double) Main.maxTilesX * 0.334 - (double) ((float) Main.maxTilesX * 0.2f)),
                    (int) ((double) Main.maxTilesX * 0.334 + (double) ((float) Main.maxTilesX * 0.2f)));
            Main.caveBackX[1] =
                genRand.Next((int) ((double) Main.maxTilesX * 0.667 - (double) ((float) Main.maxTilesX * 0.2f)),
                    (int) ((double) Main.maxTilesX * 0.667 + (double) ((float) Main.maxTilesX * 0.2f)));
            Main.caveBackX[2] = Main.maxTilesX;
            Main.caveBackStyle[0] = genRand.Next(maxValue);
            Main.caveBackStyle[1] = genRand.Next(maxValue);
            Main.caveBackStyle[2] = genRand.Next(maxValue);
            while (Main.caveBackStyle[1] == Main.caveBackStyle[0])
            {
                Main.caveBackStyle[1] = genRand.Next(maxValue);
            }

            while (Main.caveBackStyle[2] == Main.caveBackStyle[0] || Main.caveBackStyle[2] == Main.caveBackStyle[1])
            {
                Main.caveBackStyle[2] = genRand.Next(maxValue);
            }
        }
        else
        {
            Main.caveBackX[0] =
                genRand.Next((int) ((double) Main.maxTilesX * 0.25 - (double) ((float) Main.maxTilesX * 0.15f)),
                    (int) ((double) Main.maxTilesX * 0.25 + (double) ((float) Main.maxTilesX * 0.15f)));
            Main.caveBackX[1] =
                genRand.Next((int) ((double) Main.maxTilesX * 0.5 - (double) ((float) Main.maxTilesX * 0.15f)),
                    (int) ((double) Main.maxTilesX * 0.5 + (double) ((float) Main.maxTilesX * 0.15f)));
            Main.caveBackX[2] =
                genRand.Next((int) ((double) Main.maxTilesX * 0.75 - (double) ((float) Main.maxTilesX * 0.15f)),
                    (int) ((double) Main.maxTilesX * 0.75 + (double) ((float) Main.maxTilesX * 0.15f)));
            Main.caveBackStyle[0] = genRand.Next(maxValue);
            Main.caveBackStyle[1] = genRand.Next(maxValue);
            Main.caveBackStyle[2] = genRand.Next(maxValue);
            Main.caveBackStyle[3] = genRand.Next(maxValue);
            while (Main.caveBackStyle[1] == Main.caveBackStyle[0])
            {
                Main.caveBackStyle[1] = genRand.Next(maxValue);
            }

            while (Main.caveBackStyle[2] == Main.caveBackStyle[0] || Main.caveBackStyle[2] == Main.caveBackStyle[1])
            {
                Main.caveBackStyle[2] = genRand.Next(maxValue);
            }

            while (Main.caveBackStyle[3] == Main.caveBackStyle[0] || Main.caveBackStyle[3] == Main.caveBackStyle[1] ||
                   Main.caveBackStyle[3] == Main.caveBackStyle[2])
            {
                Main.caveBackStyle[3] = genRand.Next(maxValue);
            }
        }

        Main.iceBackStyle = genRand.Next(4);
        Main.hellBackStyle = genRand.Next(3);
        Main.jungleBackStyle = genRand.Next(2);
    }

    private static void ResetGenerator()
    {
        mudWall = false;
        hellChest = 0;
        JungleX = 0;
        numMCaves = 0;
        numIslandHouses = 0;
        houseCount = 0;
        dEnteranceX = 0;
        numDRooms = 0;
        numDDoors = 0;
        numDPlats = 0;
        numJChests = 0;
        JungleItemCount = 0;
    }

    public static bool mayanTrap(int x2, int y2)
    {
        int num = 1;
        if (genRand.Next(3) == 0)
        {
            num = 0;
        }

        int num2 = y2;
        while (!SolidTile(x2, num2))
        {
            num2++;
            if (num2 >= Main.maxTilesY - 300)
            {
                return false;
            }
        }

        if (Main.tile[x2, num2].type == 232)
        {
            return false;
        }

        num2--;
        if (Main.tile[x2, num2].liquid > 0 && Main.tile[x2, num2].lava())
        {
            return false;
        }

        if (num == -1 && genRand.Next(20) == 0)
        {
            num = 2;
        }
        else if (num == -1)
        {
            num = genRand.Next(2);
        }

        if (Main.tile[x2, num2].nactive() || Main.tile[x2 - 1, num2].nactive() || Main.tile[x2 + 1, num2].nactive() ||
            Main.tile[x2, num2 - 1].nactive() || Main.tile[x2 - 1, num2 - 1].nactive() ||
            Main.tile[x2 + 1, num2 - 1].nactive() || Main.tile[x2, num2 - 2].nactive() ||
            Main.tile[x2 - 1, num2 - 2].nactive() || Main.tile[x2 + 1, num2 - 2].nactive())
        {
            return false;
        }

        if (Main.tile[x2, num2 + 1].type == 48)
        {
            return false;
        }

        if (Main.tile[x2, num2 + 1].type != 232)
        {
            switch (num)
            {
                case 0:
                {
                    int num12 = x2;
                    int num13 = num2;
                    num13 -= genRand.Next(3);
                    while (!SolidTile(num12, num13))
                    {
                        num12--;
                    }

                    int num14 = num12;
                    for (num12 = x2; !SolidTile(num12, num13); num12++)
                    {
                    }

                    int num15 = num12;
                    int num16 = x2 - num14;
                    int num17 = num15 - x2;
                    bool flag = false;
                    bool flag2 = false;
                    if (num16 > 5 && num16 < 50)
                    {
                        flag = true;
                    }

                    if (num17 > 5 && num17 < 50)
                    {
                        flag2 = true;
                    }

                    if (flag && !SolidTile(num14, num13 + 1))
                    {
                        flag = false;
                    }

                    if (flag2 && !SolidTile(num15, num13 + 1))
                    {
                        flag2 = false;
                    }

                    if (flag && (Main.tile[num14, num13].type == 10 || Main.tile[num14, num13].type == 48 ||
                                 Main.tile[num14, num13 + 1].type == 10 || Main.tile[num14, num13 + 1].type == 48))
                    {
                        flag = false;
                    }

                    if (flag2 && (Main.tile[num15, num13].type == 10 || Main.tile[num15, num13].type == 48 ||
                                  Main.tile[num15, num13 + 1].type == 10 || Main.tile[num15, num13 + 1].type == 48))
                    {
                        flag2 = false;
                    }

                    int num18 = 0;
                    if (flag && flag2)
                    {
                        num18 = 1;
                        num12 = num14;
                        if (genRand.Next(2) == 0)
                        {
                            num12 = num15;
                            num18 = -1;
                        }
                    }
                    else if (flag2)
                    {
                        num12 = num15;
                        num18 = -1;
                    }
                    else
                    {
                        if (!flag)
                        {
                            return false;
                        }

                        num12 = num14;
                        num18 = 1;
                    }

                    if (Main.tile[num12, num13].wall != 87)
                    {
                        return false;
                    }

                    if (Main.tile[num12, num13].type == 190)
                    {
                        return false;
                    }

                    if (Main.tile[num12, num13].type == 135)
                    {
                        return false;
                    }

                    if (Main.tile[num12, num13].type == 137)
                    {
                        return false;
                    }

                    if (Main.tile[num12, num13].type == 232)
                    {
                        return false;
                    }

                    PlaceTile(x2, num2, 135, true, true, -1, 6);
                    KillTile(num12, num13, false, false, false);
                    int num19 = genRand.Next(3);
                    if (Main.tile[x2, num2].wire())
                    {
                        num19 = 0;
                    }

                    if (Main.tile[x2, num2].wire2())
                    {
                        num19 = 1;
                    }

                    if (Main.tile[x2, num2].wire3())
                    {
                        num19 = 2;
                    }

                    int num20 = Math.Abs(num12 - x2);
                    int style2 = 1;
                    if (num20 < 10 && genRand.Next(3) != 0)
                    {
                        style2 = 2;
                    }

                    PlaceTile(num12, num13, 137, true, true, -1, style2);
                    if (num18 == 1)
                    {
                        Main.tile[num12, num13].frameX += 18;
                    }

                    int num21 = genRand.Next(5);
                    int num22 = num13;
                    while (num21 > 0)
                    {
                        num21--;
                        num22--;
                        if (!SolidTile(num12, num22) || !SolidTile(num12 - num18, num22) ||
                            SolidTile(num12 + num18, num22))
                        {
                            break;
                        }

                        PlaceTile(num12, num22, 137, true, true, -1, style2);
                        if (num18 == 1)
                        {
                            Main.tile[num12, num22].frameX += 18;
                        }

                        switch (num19)
                        {
                            case 0:
                                Main.tile[num12, num22].wire(true);
                                break;
                            case 1:
                                Main.tile[num12, num22].wire2(true);
                                break;
                            case 2:
                                Main.tile[num12, num22].wire3(true);
                                break;
                        }
                    }

                    int num23 = x2;
                    int num24 = num2;
                    while (num23 != num12 || num24 != num13)
                    {
                        switch (num19)
                        {
                            case 0:
                                Main.tile[num23, num24].wire(true);
                                break;
                            case 1:
                                Main.tile[num23, num24].wire2(true);
                                break;
                            case 2:
                                Main.tile[num23, num24].wire3(true);
                                break;
                        }

                        if (num23 > num12)
                        {
                            num23--;
                        }

                        if (num23 < num12)
                        {
                            num23++;
                        }

                        switch (num19)
                        {
                            case 0:
                                Main.tile[num23, num24].wire(true);
                                break;
                            case 1:
                                Main.tile[num23, num24].wire2(true);
                                break;
                            case 2:
                                Main.tile[num23, num24].wire3(true);
                                break;
                        }

                        if (num24 > num13)
                        {
                            num24--;
                        }

                        if (num24 < num13)
                        {
                            num24++;
                        }

                        switch (num19)
                        {
                            case 0:
                                Main.tile[num23, num24].wire(true);
                                break;
                            case 1:
                                Main.tile[num23, num24].wire2(true);
                                break;
                            case 2:
                                Main.tile[num23, num24].wire3(true);
                                break;
                        }
                    }

                    return true;
                }
                case 1:
                {
                    int num3 = x2;
                    int num4 = num2;
                    while (!SolidTile(num3, num4))
                    {
                        num4--;
                        if ((double) num4 < Main.worldSurface)
                        {
                            return false;
                        }
                    }

                    int num5 = Math.Abs(num4 - num2);
                    if (num5 < 3)
                    {
                        return false;
                    }

                    int num6 = genRand.Next(3);
                    if (Main.tile[x2, num2].wire())
                    {
                        num6 = 0;
                    }

                    if (Main.tile[x2, num2].wire2())
                    {
                        num6 = 1;
                    }

                    if (Main.tile[x2, num2].wire3())
                    {
                        num6 = 2;
                    }

                    int style = 3;
                    if (num5 < 16 && genRand.Next(3) != 0)
                    {
                        style = 4;
                    }

                    if (Main.tile[num3, num4].type == 135)
                    {
                        return false;
                    }

                    if (Main.tile[num3, num4].type == 137)
                    {
                        return false;
                    }

                    if (Main.tile[num3, num4].type == 232)
                    {
                        return false;
                    }

                    if (Main.tile[num3, num4].wall != 87)
                    {
                        return false;
                    }

                    PlaceTile(x2, num2, 135, true, true, -1, 6);
                    PlaceTile(num3, num4, 137, true, true, -1, style);
                    for (int i = 0; i < 2; i++)
                    {
                        int num7 = genRand.Next(1, 5);
                        int num8 = num3;
                        int num9 = -1;
                        if (i == 1)
                        {
                            num9 = 1;
                        }

                        while (num7 > 0)
                        {
                            num7--;
                            num8 += num9;
                            if (!SolidTile(num8, num4 - 1) || SolidTile(num8, num4 + 1))
                            {
                                break;
                            }

                            PlaceTile(num8, num4, 137, true, true, -1, style);
                            switch (num6)
                            {
                                case 0:
                                    Main.tile[num8, num4].wire(true);
                                    break;
                                case 1:
                                    Main.tile[num8, num4].wire2(true);
                                    break;
                                case 2:
                                    Main.tile[num8, num4].wire3(true);
                                    break;
                            }
                        }
                    }

                    int num10 = x2;
                    int num11 = num2;
                    while (num10 != num3 || num11 != num4)
                    {
                        switch (num6)
                        {
                            case 0:
                                Main.tile[num10, num11].wire(true);
                                break;
                            case 1:
                                Main.tile[num10, num11].wire2(true);
                                break;
                            case 2:
                                Main.tile[num10, num11].wire3(true);
                                break;
                        }

                        if (num10 > num3)
                        {
                            num10--;
                        }

                        if (num10 < num3)
                        {
                            num10++;
                        }

                        switch (num6)
                        {
                            case 0:
                                Main.tile[num10, num11].wire(true);
                                break;
                            case 1:
                                Main.tile[num10, num11].wire2(true);
                                break;
                            case 2:
                                Main.tile[num10, num11].wire3(true);
                                break;
                        }

                        if (num11 > num4)
                        {
                            num11--;
                        }

                        if (num11 < num4)
                        {
                            num11++;
                        }

                        switch (num6)
                        {
                            case 0:
                                Main.tile[num10, num11].wire(true);
                                break;
                            case 1:
                                Main.tile[num10, num11].wire2(true);
                                break;
                            case 2:
                                Main.tile[num10, num11].wire3(true);
                                break;
                        }
                    }

                    return true;
                }
                default:
                    return false;
            }
        }

        return false;
    }

    public static bool placeTrap(int x2, int y2, int type = -1)
    {
        int num = y2;
        bool flag = false;
        bool flag2 = false;
        while (!SolidTile(x2, num))
        {
            num++;
            if (num >= Main.maxTilesY - 300)
            {
                flag2 = true;
            }
        }

        num--;
        if (Main.tile[x2, num].wall == 87)
        {
            return false;
        }

        if (Main.tile[x2, num].liquid > 0 && Main.tile[x2, num].lava())
        {
            flag = true;
        }

        if (type == -1 && genRand.Next(20) == 0)
        {
            type = 2;
        }
        else if (type == -1 && num > lavaLine + 30 && genRand.Next(6) != 0)
        {
            type = 3;
        }
        else if (type == -1)
        {
            type = genRand.Next(2);
        }

        if (!InWorld(x2, num, 3))
        {
            return false;
        }

        if (flag && type != 3)
        {
            return false;
        }

        if (flag2 && type != 3)
        {
            return false;
        }

        if (Main.tile[x2, num].nactive() || Main.tile[x2 - 1, num].nactive() || Main.tile[x2 + 1, num].nactive() ||
            Main.tile[x2, num - 1].nactive() || Main.tile[x2 - 1, num - 1].nactive() ||
            Main.tile[x2 + 1, num - 1].nactive() || Main.tile[x2, num - 2].nactive() ||
            Main.tile[x2 - 1, num - 2].nactive() || Main.tile[x2 + 1, num - 2].nactive())
        {
            return false;
        }

        if (Main.tile[x2, num + 1].type == 48)
        {
            return false;
        }

        if (Main.tile[x2, num + 1].type == 232)
        {
            return false;
        }

        if (type == 1)
        {
            for (int i = x2 - 3; i <= x2 + 3; i++)
            {
                for (int j = num - 3; j <= num + 3; j++)
                {
                    if (Main.tile[i, j].type == 147 || Main.tile[i, j].type == 161)
                    {
                        type = 0;
                    }
                }
            }
        }

        switch (type)
        {
            case 0:
            {
                int num15 = x2;
                int num16 = num;
                num16 -= genRand.Next(3);
                while (!SolidTile(num15, num16))
                {
                    num15--;
                }

                int num17 = num15;
                for (num15 = x2; !SolidTile(num15, num16); num15++)
                {
                }

                int num18 = num15;
                int num19 = x2 - num17;
                int num20 = num18 - x2;
                bool flag4 = false;
                bool flag5 = false;
                if (num19 > 5 && num19 < 50)
                {
                    flag4 = true;
                }

                if (num20 > 5 && num20 < 50)
                {
                    flag5 = true;
                }

                if (flag4 && !SolidTile(num17, num16 + 1))
                {
                    flag4 = false;
                }

                if (flag5 && !SolidTile(num18, num16 + 1))
                {
                    flag5 = false;
                }

                if (flag4 && (Main.tile[num17, num16].type == 10 || Main.tile[num17, num16].type == 48 ||
                              Main.tile[num17, num16 + 1].type == 10 || Main.tile[num17, num16 + 1].type == 48))
                {
                    flag4 = false;
                }

                if (flag5 && (Main.tile[num18, num16].type == 10 || Main.tile[num18, num16].type == 48 ||
                              Main.tile[num18, num16 + 1].type == 10 || Main.tile[num18, num16 + 1].type == 48))
                {
                    flag5 = false;
                }

                int num21 = 0;
                if (flag4 && flag5)
                {
                    num21 = 1;
                    num15 = num17;
                    if (genRand.Next(2) == 0)
                    {
                        num15 = num18;
                        num21 = -1;
                    }
                }
                else if (flag5)
                {
                    num15 = num18;
                    num21 = -1;
                }
                else
                {
                    if (!flag4)
                    {
                        trapDiag[type, 0]++;
                        return false;
                    }

                    num15 = num17;
                    num21 = 1;
                }

                if (Main.tile[num15, num16].type == 190)
                {
                    trapDiag[type, 0]++;
                    return false;
                }

                if (Main.tile[x2, num].wall > 0)
                {
                    PlaceTile(x2, num, 135, true, true, -1, 2);
                }
                else
                {
                    PlaceTile(x2, num, 135, true, true, -1, genRand.Next(2, 4));
                }

                KillTile(num15, num16, false, false, false);
                PlaceTile(num15, num16, 137, true, true, -1, 0);
                if (num21 == 1)
                {
                    Main.tile[num15, num16].frameX += 18;
                }

                int num22 = x2;
                int num23 = num;
                while (num22 != num15 || num23 != num16)
                {
                    Main.tile[num22, num23].wire(true);
                    if (num22 > num15)
                    {
                        num22--;
                    }

                    if (num22 < num15)
                    {
                        num22++;
                    }

                    Main.tile[num22, num23].wire(true);
                    if (num23 > num16)
                    {
                        num23--;
                    }

                    if (num23 < num16)
                    {
                        num23++;
                    }

                    Main.tile[num22, num23].wire(true);
                }

                trapDiag[type, 1]++;
                return true;
            }
            case 1:
            {
                int num32 = x2;
                int num33 = num - 8;
                num32 += genRand.Next(-1, 2);
                bool flag6 = true;
                while (flag6)
                {
                    bool flag7 = true;
                    int num34 = 0;
                    for (int num35 = num32 - 2; num35 <= num32 + 3; num35++)
                    {
                        for (int num36 = num33; num36 <= num33 + 3; num36++)
                        {
                            if (!SolidTile(num35, num36))
                            {
                                flag7 = false;
                            }

                            if (Main.tile[num35, num36].active() &&
                                (Main.tile[num35, num36].type == 0 || Main.tile[num35, num36].type == 1 ||
                                 Main.tile[num35, num36].type == 59))
                            {
                                num34++;
                            }
                        }
                    }

                    num33--;
                    if ((double) num33 < Main.worldSurface)
                    {
                        trapDiag[type, 0]++;
                        return false;
                    }

                    if (flag7 && num34 > 2)
                    {
                        flag6 = false;
                    }
                }

                if (num - num33 <= 5 || num - num33 >= 40)
                {
                    trapDiag[type, 0]++;
                    return false;
                }

                for (int num37 = num32; num37 <= num32 + 1; num37++)
                {
                    for (int num38 = num33; num38 <= num; num38++)
                    {
                        if (SolidTile(num37, num38))
                        {
                            KillTile(num37, num38, false, false, false);
                        }
                    }
                }

                for (int num39 = num32 - 2; num39 <= num32 + 3; num39++)
                {
                    for (int num40 = num33 - 2; num40 <= num33 + 3; num40++)
                    {
                        if (SolidTile(num39, num40))
                        {
                            Main.tile[num39, num40].type = 1;
                        }
                    }
                }

                PlaceTile(x2, num, 135, true, true, -1, genRand.Next(2, 4));
                PlaceTile(num32, num33 + 2, 130, true, false, -1, 0);
                PlaceTile(num32 + 1, num33 + 2, 130, true, false, -1, 0);
                PlaceTile(num32 + 1, num33 + 1, 138, true, false, -1, 0);
                num33 += 2;
                Main.tile[num32, num33].wire(true);
                Main.tile[num32 + 1, num33].wire(true);
                num33++;
                PlaceTile(num32, num33, 130, true, false, -1, 0);
                PlaceTile(num32 + 1, num33, 130, true, false, -1, 0);
                Main.tile[num32, num33].wire(true);
                Main.tile[num32 + 1, num33].wire(true);
                PlaceTile(num32, num33 + 1, 130, true, false, -1, 0);
                PlaceTile(num32 + 1, num33 + 1, 130, true, false, -1, 0);
                Main.tile[num32, num33 + 1].wire(true);
                Main.tile[num32 + 1, num33 + 1].wire(true);
                int num41 = x2;
                int num42 = num;
                while (num41 != num32 || num42 != num33)
                {
                    Main.tile[num41, num42].wire(true);
                    if (num41 > num32)
                    {
                        num41--;
                    }

                    if (num41 < num32)
                    {
                        num41++;
                    }

                    Main.tile[num41, num42].wire(true);
                    if (num42 > num33)
                    {
                        num42--;
                    }

                    if (num42 < num33)
                    {
                        num42++;
                    }

                    Main.tile[num41, num42].wire(true);
                }

                trapDiag[type, 1]++;
                return true;
            }
            case 2:
            {
                int num24 = genRand.Next(4, 7);
                int num25 = x2;
                num25 += genRand.Next(-1, 2);
                int num26 = num;
                for (int num27 = 0; num27 < num24; num27++)
                {
                    num26++;
                    if (!SolidTile(num25, num26))
                    {
                        trapDiag[type, 0]++;
                        return false;
                    }
                }

                for (int num28 = num25 - 2; num28 <= num25 + 2; num28++)
                {
                    for (int num29 = num26 - 2; num29 <= num26 + 2; num29++)
                    {
                        if (!SolidTile(num28, num29))
                        {
                            return false;
                        }
                    }
                }

                KillTile(num25, num26, false, false, false);
                Main.tile[num25, num26].active(true);
                Main.tile[num25, num26].type = 141;
                Main.tile[num25, num26].frameX = 0;
                Main.tile[num25, num26].frameY = (short) (18 * genRand.Next(2));
                PlaceTile(x2, num, 135, true, true, -1, genRand.Next(2, 4));
                int num30 = x2;
                int num31 = num;
                while (num30 != num25 || num31 != num26)
                {
                    Main.tile[num30, num31].wire(true);
                    if (num30 > num25)
                    {
                        num30--;
                    }

                    if (num30 < num25)
                    {
                        num30++;
                    }

                    Main.tile[num30, num31].wire(true);
                    if (num31 > num26)
                    {
                        num31--;
                    }

                    if (num31 < num26)
                    {
                        num31++;
                    }

                    Main.tile[num30, num31].wire(true);
                }

                trapDiag[type, 1]++;
                break;
            }
            case 3:
            {
                int num2 = 0;
                int num3 = 0;
                for (int k = 0; k < 4; k++)
                {
                    if (num2 < 2 && genRand.Next(5) == 0)
                    {
                        num2++;
                    }
                    else
                    {
                        int num4 = x2;
                        int num5 = num;
                        bool flag3 = false;
                        num4 = ((num3 != 0) ? (num4 + genRand.Next(-15, 16)) : (num4 + genRand.Next(-1, 2)));
                        int num6 = genRand.Next(3, 6 + (num3 > 0).ToInt() * 3);
                        for (int l = 0; l < num6; l++)
                        {
                            num5++;
                            if (!SolidTile(num4, num5))
                            {
                                trapDiag[type, 0]++;
                                flag3 = true;
                                break;
                            }
                        }

                        if (!flag3)
                        {
                            int num7 = 2;
                            for (int m = num4 - num7; m <= num4 + num7; m++)
                            {
                                for (int n = num5 - num7; n <= num5 + num7; n++)
                                {
                                    if (!SolidTile(m, n))
                                    {
                                        trapDiag[type, 0]++;
                                        flag3 = true;
                                        break;
                                    }
                                }

                                if (flag3)
                                {
                                    break;
                                }
                            }

                            if (!flag3)
                            {
                                num7 = 10;
                                for (int num8 = num4; num8 <= num4 + 1; num8++)
                                {
                                    int num9 = num5;
                                    while (num9 > num5 - 20 && SolidTile(num8, num9))
                                    {
                                        num9--;
                                    }

                                    for (int num10 = num9 - num7; num10 <= num9; num10++)
                                    {
                                        if (SolidTile(num8, num10))
                                        {
                                            trapDiag[type, 0]++;
                                            flag3 = true;
                                            break;
                                        }
                                    }

                                    if (flag3)
                                    {
                                        break;
                                    }
                                }

                                if (!flag3)
                                {
                                    KillTile(num4, num5, false, false, false);
                                    KillTile(num4 + 1, num5, false, false, false);
                                    int num11 = genRand.Next(2);
                                    for (int num12 = 0; num12 < 2; num12++)
                                    {
                                        Main.tile[num4 + num12, num5].active(true);
                                        Main.tile[num4 + num12, num5].type = 443;
                                        Main.tile[num4 + num12, num5].frameX = (short) (18 * num12 + 36 * num11);
                                        Main.tile[num4 + num12, num5].frameY = 0;
                                    }

                                    PlaceTile(x2, num, 135, true, true, -1, genRand.Next(2, 4));
                                    int num13 = x2;
                                    int num14 = num;
                                    while (num13 != num4 || num14 != num5)
                                    {
                                        Main.tile[num13, num14].wire(true);
                                        if (num13 > num4)
                                        {
                                            num13--;
                                        }

                                        if (num13 < num4)
                                        {
                                            num13++;
                                        }

                                        Main.tile[num13, num14].wire(true);
                                        if (num14 > num5)
                                        {
                                            num14--;
                                        }

                                        if (num14 < num5)
                                        {
                                            num14++;
                                        }

                                        Main.tile[num13, num14].wire(true);
                                    }

                                    num3++;
                                    trapDiag[type, 1]++;
                                }
                            }
                        }
                    }
                }

                break;
            }
        }

        return false;
    }

    public static int countTiles(int x, int y, bool jungle = false, bool lavaOk = false)
    {
        numTileCount = 0;
        lavaCount = 0;
        iceCount = 0;
        rockCount = 0;
        nextCount(x, y, jungle, lavaOk);
        return numTileCount;
    }

    public static void nextCount(int x, int y, bool jungle = false, bool lavaOk = false)
    {
        if (numTileCount < maxTileCount)
        {
            if (x <= 1 || x >= Main.maxTilesX - 1 || y <= 1 || y >= Main.maxTilesY - 1)
            {
                numTileCount = maxTileCount;
            }
            else
            {
                for (int i = 0; i < numTileCount; i++)
                {
                    if (countX[i] == x && countY[i] == y)
                    {
                        return;
                    }
                }

                if (!jungle)
                {
                    if (Main.tile[x, y].wall != 0)
                    {
                        numTileCount = maxTileCount;
                        return;
                    }

                    if (!lavaOk)
                    {
                        if (Main.tile[x, y].lava() && Main.tile[x, y].liquid > 0)
                        {
                            lavaCount++;
                            numTileCount = maxTileCount;
                            return;
                        }
                    }
                    else if (Main.tile[x, y].lava() && Main.tile[x, y].liquid > 0)
                    {
                        lavaCount++;
                    }
                }

                if (Main.tile[x, y].active())
                {
                    if (Main.tile[x, y].type == 1)
                    {
                        rockCount++;
                    }

                    if (Main.tile[x, y].type == 147 || Main.tile[x, y].type == 161)
                    {
                        iceCount++;
                    }
                }

                if (!SolidTile(x, y))
                {
                    countX[numTileCount] = x;
                    countY[numTileCount] = y;
                    numTileCount++;
                    nextCount(x - 1, y, jungle, lavaOk);
                    nextCount(x + 1, y, jungle, lavaOk);
                    nextCount(x, y - 1, jungle, lavaOk);
                    nextCount(x, y + 1, jungle, lavaOk);
                }
            }
        }
    }

    public static int countDirtTiles(int x, int y)
    {
        numTileCount = 0;
        nextDirtCount(x, y);
        return numTileCount;
    }

    public static void nextDirtCount(int x, int y)
    {
        if (numTileCount < maxTileCount)
        {
            if (x <= 1 || x >= Main.maxTilesX - 1 || y <= 1 || y >= Main.maxTilesY - 1)
            {
                numTileCount = maxTileCount;
            }
            else
            {
                for (int i = 0; i < numTileCount; i++)
                {
                    if (countX[i] == x && countY[i] == y)
                    {
                        return;
                    }
                }

                if (Main.tile[x, y].active() && (Main.tile[x, y].type == 147 || Main.tile[x, y].type == 161))
                {
                    numTileCount = maxTileCount;
                }
                else if (Main.tile[x, y].wall == 78 || Main.tile[x, y].wall == 83 || Main.tile[x, y].wall == 3)
                {
                    numTileCount = maxTileCount;
                }
                else if (!SolidTile(x, y) && (Main.tile[x, y].wall == 2 || Main.tile[x, y].wall == 59))
                {
                    countX[numTileCount] = x;
                    countY[numTileCount] = y;
                    numTileCount++;
                    nextDirtCount(x - 1, y);
                    nextDirtCount(x + 1, y);
                    nextDirtCount(x, y - 1);
                    nextDirtCount(x, y + 1);
                    nextDirtCount(x - 1, y - 1);
                    nextDirtCount(x - 1, y + 1);
                    nextDirtCount(x + 1, y - 1);
                    nextDirtCount(x + 1, y + 1);
                    nextDirtCount(x - 2, y);
                    nextDirtCount(x + 2, y);
                }
            }
        }
    }

    public static bool InWorld(int x, int y, int fluff = 0)
    {
        if (x < fluff || x >= Main.maxTilesX - fluff || y < fluff || y >= Main.maxTilesY - fluff)
        {
            return false;
        }

        return true;
    }

    public static void gemCave(int x, int y)
    {
        countTiles(x, y, false, false);
        for (int i = 0; i < 6; i++)
        {
            gem[i] = false;
        }

        gem[genRand.Next(6)] = true;
        for (int j = 0; j < 6; j++)
        {
            if (genRand.Next(6) == 0)
            {
                gem[j] = true;
            }
        }

        Spread.Gem(x, y);
    }

    public static int randGem()
    {
        int num = genRand.Next(6);
        while (!gem[num])
        {
            num = genRand.Next(6);
        }

        return num;
    }

    public static ushort randGemTile()
    {
        if (genRand.Next(20) == 0)
        {
            switch ((ushort) randGem())
            {
                case 0:
                    return 67;
                case 1:
                    return 66;
                case 2:
                    return 63;
                case 3:
                    return 65;
                case 4:
                    return 64;
                default:
                    return 68;
            }
        }

        return 1;
    }

    public static void randMoss()
    {
        mossType[0] = genRand.Next(5);
        mossType[1] = genRand.Next(5);
        while (mossType[1] == mossType[0])
        {
            mossType[1] = genRand.Next(5);
        }

        mossType[2] = genRand.Next(5);
        while (mossType[2] == mossType[0] || mossType[2] == mossType[1])
        {
            mossType[2] = genRand.Next(5);
        }
    }

    public static void setMoss(int x, int y)
    {
        int num = 0;
        num = ((!((double) x < (double) Main.maxTilesX * 0.334))
            ? (((double) x < (double) Main.maxTilesX * 0.667) ? 1 : 2)
            : 0);
        mossWall = (byte) (54 + mossType[num]);
        mossTile = (byte) (179 + mossType[num]);
    }

    public static void tileCountAndDestroy()
    {
        for (int i = 10; i < Main.maxTilesX - 10; i++)
        {
            for (int j = 10; j < Main.maxTilesY - 10; j++)
            {
                if (Main.tile[i, j].active())
                {
                    int num = tileCounter(i, j);
                    if (num < tileCounterMax)
                    {
                        tileCounterKill();
                    }
                }
            }
        }
    }

    public static int tileCounter(int x, int y)
    {
        tileCounterNum = 0;
        tileCounterNext(x, y);
        return tileCounterNum;
    }

    public static void tileCounterNext(int x, int y)
    {
        if (tileCounterNum < tileCounterMax && x >= 5 && x <= Main.maxTilesX - 5 && y >= 5 && y <= Main.maxTilesY - 5 &&
            Main.tile[x, y].active() && Main.tileSolid[Main.tile[x, y].type] &&
            TileID.Sets.CanBeClearedDuringGeneration[Main.tile[x, y].type])
        {
            for (int i = 0; i < tileCounterNum; i++)
            {
                if (tileCounterX[i] == x && tileCounterY[i] == y)
                {
                    return;
                }
            }

            tileCounterX[tileCounterNum] = x;
            tileCounterY[tileCounterNum] = y;
            tileCounterNum++;
            tileCounterNext(x - 1, y);
            tileCounterNext(x + 1, y);
            tileCounterNext(x, y - 1);
            tileCounterNext(x, y + 1);
        }
    }

    public static void tileCounterKill()
    {
        for (int i = 0; i < tileCounterNum; i++)
        {
            int num = tileCounterX[i];
            int num2 = tileCounterY[i];
            Main.tile[num, num2].active(false);
        }
    }

    private static void AddGenerationPass(string name, WorldGenLegacyMethod method)
    {
        _generator.Append(new PassLegacy(name, method));
    }

    private static void AddGenerationPass(string name, float weight, WorldGenLegacyMethod method)
    {
        _generator.Append(new PassLegacy(name, method, weight));
    }

    public static bool checkUnderground(int x, int y)
    {
        try
        {
            int num = 120;
            int num2 = 80;
            int num3 = 3;
            if ((double) y > Main.worldSurface + (double) num2)
            {
                return true;
            }

            if ((double) y < Main.worldSurface / 2.0)
            {
                return false;
            }

            int num4 = y - num2;
            int num5 = x - num / 2;
            int num6 = 0;
            if (num5 < 0)
            {
                num5 = 0;
            }

            if (num5 >= Main.maxTilesX - num)
            {
                num5 = Main.maxTilesX - num - 1;
            }

            for (int i = num5; i < num5 + num; i++)
            {
                for (int j = num4; j < num4 + num3; j++)
                {
                    if (SolidTile(i, j) || Main.tile[x, y].wall > 0)
                    {
                        num6++;
                    }
                }
            }

            if ((double) num6 >= (double) (num * num3) * 0.8)
            {
                return true;
            }
        }
        catch
        {
        }

        return false;
    }

    public static int GetNextJungleChestItem()
    {
        int result = 211;
        switch (JungleItemCount % 4)
        {
            case 0:
                result = 211;
                break;
            case 1:
                result = 212;
                break;
            case 2:
                result = 213;
                break;
            case 3:
                result = 964;
                break;
        }

        if (genRand.Next(50) == 0)
        {
            result = 753;
        }
        else if (genRand.Next(30) == 0)
        {
            result = 2292;
        }
        else if (genRand.Next(20) == 0)
        {
            result = 3017;
        }

        JungleItemCount++;
        return result;
    }

    public static void generateWorld(int seed, GenerationProgress customProgressObject = null)
    {
        _lastSeed = seed;
        _generator = new WorldGenerator(seed);
        Main.rand = new UnifiedRandom(seed);
        MicroBiome.ResetAll();
        StructureMap structures = new StructureMap();
        double worldSurface = 0.0;
        worldSurfaceLow = 0.0;
        double worldSurfaceHigh = 0.0;
        double rockLayer = 0.0;
        double rockLayerLow = 0.0;
        double rockLayerHigh = 0.0;
        int copper = 7;
        int iron = 6;
        int silver = 9;
        int gold = 8;
        int dungeonSide = 0;
        ushort jungleHut = (ushort) genRand.Next(5);
        int howFar = 0;
        int[] PyrX = null;
        int[] PyrY = null;
        int numPyr = 0;
        int[] snowMinX = new int[Main.maxTilesY];
        int[] snowMaxX = new int[Main.maxTilesY];
        int snowTop = 0;
        int snowBottom = 0;
        float dub2 = 0f;
        int skyLakes = 1;
        if (Main.maxTilesX > 8000)
        {
            skyLakes++;
        }

        if (Main.maxTilesX > 6000)
        {
            skyLakes++;
        }

        for (int j = 0; j < hellChestItem.Length; j++)
        {
            bool flag = true;
            while (flag)
            {
                flag = false;
                hellChestItem[j] = genRand.Next(hellChestItem.Length);
                for (int k = 0; k < j; k++)
                {
                    if (hellChestItem[k] == hellChestItem[j])
                    {
                        flag = true;
                    }
                }
            }
        }

        AddGenerationPass("Reset", delegate(GenerationProgress progress)
        {
            Liquid.ReInit();
            noTileActions = true;
            progress.Message = "";
            SetupStatueList();
            RandomizeWeather();
            Main.cloudAlpha = 0f;
            Main.maxRaining = 0f;
            WorldFile.tempMaxRain = 0f;
            Main.raining = false;
            heartCount = 0;
            Main.checkXMas();
            Main.checkHalloween();
            gen = true;
            ResetGenerator();
            numLarva = 0;
            int num708 = 86400;
            Main.slimeRainTime = (double) (-genRand.Next(num708 * 2, num708 * 3));
            Main.cloudBGActive = (float) (-genRand.Next(8640, 86400));
            CopperTierOre = 7;
            IronTierOre = 6;
            SilverTierOre = 9;
            GoldTierOre = 8;
            copperBar = 20;
            ironBar = 22;
            silverBar = 21;
            goldBar = 19;
            if (genRand.Next(2) == 0)
            {
                copper = 166;
                copperBar = 703;
                CopperTierOre = 166;
            }

            if (genRand.Next(2) == 0)
            {
                iron = 167;
                ironBar = 704;
                IronTierOre = 167;
            }

            if (genRand.Next(2) == 0)
            {
                silver = 168;
                silverBar = 705;
                SilverTierOre = 168;
            }

            if (genRand.Next(2) == 0)
            {
                gold = 169;
                goldBar = 706;
                GoldTierOre = 169;
            }

            crimson = (genRand.Next(2) == 0);
            if (WorldGenParam_Evil == 0)
            {
                crimson = false;
            }

            if (WorldGenParam_Evil == 1)
            {
                crimson = true;
            }

            if (jungleHut == 0)
            {
                jungleHut = 119;
            }
            else if (jungleHut == 1)
            {
                jungleHut = 120;
            }
            else if (jungleHut == 2)
            {
                jungleHut = 158;
            }
            else if (jungleHut == 3)
            {
                jungleHut = 175;
            }
            else if (jungleHut == 4)
            {
                jungleHut = 45;
            }

            Main.worldID = genRand.Next(2147483647);
            RandomizeTreeStyle();
            RandomizeCaveBackgrounds();
            RandomizeBackgrounds();
            RandomizeMoonState();
            dungeonSide = ((genRand.Next(2) != 0) ? 1 : (-1));
        });
        AddGenerationPass("Terrain", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[0].Value;
            int num702 = 0;
            int num703 = 0;
            worldSurface = (double) Main.maxTilesY * 0.3;
            worldSurface *= (double) genRand.Next(90, 110) * 0.005;
            rockLayer = worldSurface + (double) Main.maxTilesY * 0.2;
            rockLayer *= (double) genRand.Next(90, 110) * 0.01;
            worldSurfaceLow = worldSurface;
            worldSurfaceHigh = worldSurface;
            rockLayerLow = rockLayer;
            rockLayerHigh = rockLayer;
            for (int num704 = 0; num704 < Main.maxTilesX; num704++)
            {
                float value21 = (float) num704 / (float) Main.maxTilesX;
                progress.Set(value21);
                if (worldSurface < worldSurfaceLow)
                {
                    worldSurfaceLow = worldSurface;
                }

                if (worldSurface > worldSurfaceHigh)
                {
                    worldSurfaceHigh = worldSurface;
                }

                if (rockLayer < rockLayerLow)
                {
                    rockLayerLow = rockLayer;
                }

                if (rockLayer > rockLayerHigh)
                {
                    rockLayerHigh = rockLayer;
                }

                if (num703 <= 0)
                {
                    num702 = genRand.Next(0, 5);
                    num703 = genRand.Next(5, 40);
                    if (num702 == 0)
                    {
                        num703 *= (int) ((double) genRand.Next(5, 30) * 0.2);
                    }
                }

                num703--;
                if ((double) num704 > (double) Main.maxTilesX * 0.43 &&
                    (double) num704 < (double) Main.maxTilesX * 0.57 && num702 >= 3)
                {
                    num702 = genRand.Next(3);
                }

                if ((double) num704 > (double) Main.maxTilesX * 0.47 &&
                    (double) num704 < (double) Main.maxTilesX * 0.53)
                {
                    num702 = 0;
                }

                switch (num702)
                {
                    case 0:
                        while (genRand.Next(0, 7) == 0)
                        {
                            worldSurface += (double) genRand.Next(-1, 2);
                        }

                        break;
                    case 1:
                        while (genRand.Next(0, 4) == 0)
                        {
                            worldSurface -= 1.0;
                        }

                        while (genRand.Next(0, 10) == 0)
                        {
                            worldSurface += 1.0;
                        }

                        break;
                    case 2:
                        while (genRand.Next(0, 4) == 0)
                        {
                            worldSurface += 1.0;
                        }

                        while (genRand.Next(0, 10) == 0)
                        {
                            worldSurface -= 1.0;
                        }

                        break;
                    case 3:
                        while (genRand.Next(0, 2) == 0)
                        {
                            worldSurface -= 1.0;
                        }

                        while (genRand.Next(0, 6) == 0)
                        {
                            worldSurface += 1.0;
                        }

                        break;
                    case 4:
                        while (genRand.Next(0, 2) == 0)
                        {
                            worldSurface += 1.0;
                        }

                        while (genRand.Next(0, 5) == 0)
                        {
                            worldSurface -= 1.0;
                        }

                        break;
                }

                if (worldSurface < (double) Main.maxTilesY * 0.17)
                {
                    worldSurface = (double) Main.maxTilesY * 0.17;
                    num703 = 0;
                }
                else if (worldSurface > (double) Main.maxTilesY * 0.3)
                {
                    worldSurface = (double) Main.maxTilesY * 0.3;
                    num703 = 0;
                }

                if ((num704 < 275 || num704 > Main.maxTilesX - 275) && worldSurface > (double) Main.maxTilesY * 0.25)
                {
                    worldSurface = (double) Main.maxTilesY * 0.25;
                    num703 = 1;
                }

                while (genRand.Next(0, 3) == 0)
                {
                    rockLayer += (double) genRand.Next(-2, 3);
                }

                if (rockLayer < worldSurface + (double) Main.maxTilesY * 0.05)
                {
                    rockLayer += 1.0;
                }

                if (rockLayer > worldSurface + (double) Main.maxTilesY * 0.35)
                {
                    rockLayer -= 1.0;
                }

                for (int num705 = 0; (double) num705 < worldSurface; num705++)
                {
                    Main.tile[num704, num705].active(false);
                    Main.tile[num704, num705].frameX = -1;
                    Main.tile[num704, num705].frameY = -1;
                }

                for (int num706 = (int) worldSurface; num706 < Main.maxTilesY; num706++)
                {
                    if ((double) num706 < rockLayer)
                    {
                        Main.tile[num704, num706].active(true);
                        Main.tile[num704, num706].type = 0;
                        Main.tile[num704, num706].frameX = -1;
                        Main.tile[num704, num706].frameY = -1;
                    }
                    else
                    {
                        Main.tile[num704, num706].active(true);
                        Main.tile[num704, num706].type = 1;
                        Main.tile[num704, num706].frameX = -1;
                        Main.tile[num704, num706].frameY = -1;
                    }
                }
            }

            Main.worldSurface = worldSurfaceHigh + 25.0;
            Main.rockLayer = rockLayerHigh;
            double num707 = (double) ((int) ((Main.rockLayer - Main.worldSurface) / 6.0) * 6);
            Main.rockLayer = Main.worldSurface + num707;
            waterLine = (int) (Main.rockLayer + (double) Main.maxTilesY) / 2;
            waterLine += genRand.Next(-100, 20);
            lavaLine = waterLine + genRand.Next(50, 80);
        });
        AddGenerationPass("Tunnels", delegate
        {
            for (int num697 = 0; num697 < (int) ((double) Main.maxTilesX * 0.0015); num697++)
            {
                int[] array = new int[10];
                int[] array2 = new int[10];
                int num698 = genRand.Next(450, Main.maxTilesX - 450);
                while ((float) num698 > (float) Main.maxTilesX * 0.45f &&
                       (float) num698 < (float) Main.maxTilesX * 0.55f)
                {
                    num698 = genRand.Next(0, Main.maxTilesX);
                }

                int num699 = 0;
                for (int num700 = 0; num700 < 10; num700++)
                {
                    for (num698 %= Main.maxTilesX; !Main.tile[num698, num699].active(); num699++)
                    {
                    }

                    array[num700] = num698;
                    array2[num700] = num699 - genRand.Next(11, 16);
                    num698 += genRand.Next(5, 11);
                }

                for (int num701 = 0; num701 < 10; num701++)
                {
                    TileRunner(array[num701], array2[num701], (double) genRand.Next(5, 8), genRand.Next(6, 9), 0, true,
                        -2f, -0.3f, false, true);
                    TileRunner(array[num701], array2[num701], (double) genRand.Next(5, 8), genRand.Next(6, 9), 0, true,
                        2f, -0.3f, false, true);
                }
            }
        });
        AddGenerationPass("Sand", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[1].Value;
            int num684 = genRand.Next((int) ((double) Main.maxTilesX * 0.0008),
                (int) ((double) Main.maxTilesX * 0.0025));
            num684 += 2;
            PyrX = new int[num684];
            PyrY = new int[num684];
            for (int num685 = 0; num685 < num684; num685++)
            {
                int num686 = genRand.Next(Main.maxTilesX);
                while ((float) num686 > (float) Main.maxTilesX * 0.4f && (float) num686 < (float) Main.maxTilesX * 0.6f)
                {
                    num686 = genRand.Next(Main.maxTilesX);
                }

                int num687 = genRand.Next(35, 90);
                if (num685 == 1)
                {
                    float num688 = (float) (Main.maxTilesX / 4200);
                    num687 += (int) ((float) genRand.Next(20, 40) * num688);
                }

                if (genRand.Next(3) == 0)
                {
                    num687 *= 2;
                }

                if (num685 == 1)
                {
                    num687 *= 2;
                }

                int num689 = num686 - num687;
                num687 = genRand.Next(35, 90);
                if (genRand.Next(3) == 0)
                {
                    num687 *= 2;
                }

                if (num685 == 1)
                {
                    num687 *= 2;
                }

                int num690 = num686 + num687;
                if (num689 < 0)
                {
                    num689 = 0;
                }

                if (num690 > Main.maxTilesX)
                {
                    num690 = Main.maxTilesX;
                }

                switch (num685)
                {
                    case 0:
                        num689 = 0;
                        num690 = genRand.Next(260, 300);
                        if (dungeonSide == 1)
                        {
                            num690 += 40;
                        }

                        break;
                    case 2:
                        num689 = Main.maxTilesX - genRand.Next(260, 300);
                        num690 = Main.maxTilesX;
                        if (dungeonSide == -1)
                        {
                            num689 -= 40;
                        }

                        break;
                }

                int num691 = genRand.Next(50, 100);
                for (int num692 = num689; num692 < num690; num692++)
                {
                    if (genRand.Next(2) == 0)
                    {
                        num691 += genRand.Next(-1, 2);
                        if (num691 < 50)
                        {
                            num691 = 50;
                        }

                        if (num691 > 100)
                        {
                            num691 = 100;
                        }
                    }

                    for (int num693 = 0; (double) num693 < Main.worldSurface; num693++)
                    {
                        if (Main.tile[num692, num693].active())
                        {
                            if (num692 == (num689 + num690) / 2 && genRand.Next(6) == 0)
                            {
                                PyrX[numPyr] = num692;
                                PyrY[numPyr] = num693;
                                numPyr++;
                            }

                            int num694 = num691;
                            if (num692 - num689 < num694)
                            {
                                num694 = num692 - num689;
                            }

                            if (num690 - num692 < num694)
                            {
                                num694 = num690 - num692;
                            }

                            num694 += genRand.Next(5);
                            for (int num695 = num693; num695 < num693 + num694; num695++)
                            {
                                if (num692 > num689 + genRand.Next(5) && num692 < num690 - genRand.Next(5))
                                {
                                    Main.tile[num692, num695].type = 53;
                                }
                            }

                            break;
                        }
                    }
                }
            }

            for (int num696 = 0; num696 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 8E-06); num696++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int) Main.worldSurface, (int) Main.rockLayer),
                    (double) genRand.Next(15, 70), genRand.Next(20, 130), 53, false, 0f, 0f, false, true);
            }
        });
        AddGenerationPass("Mount Caves", delegate(GenerationProgress progress)
        {
            numMCaves = 0;
            progress.Message = Lang.gen[2].Value;
            for (int num677 = 0; num677 < (int) ((double) Main.maxTilesX * 0.0008); num677++)
            {
                int num678 = 0;
                bool flag47 = false;
                bool flag48 = false;
                int num679 = genRand.Next((int) ((double) Main.maxTilesX * 0.25),
                    (int) ((double) Main.maxTilesX * 0.75));
                while (!flag48)
                {
                    flag48 = true;
                    while (num679 > Main.maxTilesX / 2 - 100 && num679 < Main.maxTilesX / 2 + 100)
                    {
                        num679 = genRand.Next((int) ((double) Main.maxTilesX * 0.25),
                            (int) ((double) Main.maxTilesX * 0.75));
                    }

                    for (int num680 = 0; num680 < numMCaves; num680++)
                    {
                        if (num679 > mCaveX[num680] - 50 && num679 < mCaveX[num680] + 50)
                        {
                            num678++;
                            flag48 = false;
                            break;
                        }
                    }

                    if (num678 >= 200)
                    {
                        flag47 = true;
                        break;
                    }
                }

                if (!flag47)
                {
                    for (int num681 = 0; (double) num681 < Main.worldSurface; num681++)
                    {
                        if (Main.tile[num679, num681].active())
                        {
                            for (int num682 = num679 - 50; num682 < num679 + 50; num682++)
                            {
                                for (int num683 = num681 - 25; num683 < num681 + 25; num683++)
                                {
                                    if (Main.tile[num682, num683].active() &&
                                        (Main.tile[num682, num683].type == 53 ||
                                         Main.tile[num682, num683].type == 151 ||
                                         Main.tile[num682, num683].type == 274))
                                    {
                                        flag47 = true;
                                    }
                                }
                            }

                            if (!flag47)
                            {
                                Mountinater(num679, num681);
                                mCaveX[numMCaves] = num679;
                                mCaveY[numMCaves] = num681;
                                numMCaves++;
                                break;
                            }
                        }
                    }
                }
            }
        });
        AddGenerationPass("Dirt Wall Backgrounds", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[3].Value;
            for (int num675 = 1; num675 < Main.maxTilesX - 1; num675++)
            {
                byte wall = 2;
                float value20 = (float) num675 / (float) Main.maxTilesX;
                progress.Set(value20);
                bool flag46 = false;
                howFar += genRand.Next(-1, 2);
                if (howFar < 0)
                {
                    howFar = 0;
                }

                if (howFar > 10)
                {
                    howFar = 10;
                }

                for (int num676 = 0;
                    (double) num676 < Main.worldSurface + 10.0 &&
                    !((double) num676 > Main.worldSurface + (double) howFar);
                    num676++)
                {
                    if (Main.tile[num675, num676].active())
                    {
                        wall = (byte) ((Main.tile[num675, num676].type != 147) ? 2 : 40);
                    }

                    if (flag46 && Main.tile[num675, num676].wall != 64)
                    {
                        Main.tile[num675, num676].wall = wall;
                    }

                    if (Main.tile[num675, num676].active() && Main.tile[num675 - 1, num676].active() &&
                        Main.tile[num675 + 1, num676].active() && Main.tile[num675, num676 + 1].active() &&
                        Main.tile[num675 - 1, num676 + 1].active() && Main.tile[num675 + 1, num676 + 1].active())
                    {
                        flag46 = true;
                    }
                }
            }
        });
        AddGenerationPass("Rocks In Dirt", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[4].Value;
            for (int num670 = 0; num670 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.00015); num670++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next(0, (int) worldSurfaceLow + 1),
                    (double) genRand.Next(4, 15), genRand.Next(5, 40), 1, false, 0f, 0f, false, true);
            }

            for (int num671 = 0; num671 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0002); num671++)
            {
                int num672 = genRand.Next(0, Main.maxTilesX);
                int num673 = genRand.Next((int) worldSurfaceLow, (int) worldSurfaceHigh + 1);
                if (!Main.tile[num672, num673 - 10].active())
                {
                    num673 = genRand.Next((int) worldSurfaceLow, (int) worldSurfaceHigh + 1);
                }

                TileRunner(num672, num673, (double) genRand.Next(4, 10), genRand.Next(5, 30), 1, false, 0f, 0f, false,
                    true);
            }

            for (int num674 = 0; num674 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0045); num674++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX),
                    genRand.Next((int) worldSurfaceHigh, (int) rockLayerHigh + 1), (double) genRand.Next(2, 7),
                    genRand.Next(2, 23), 1, false, 0f, 0f, false, true);
            }
        });
        AddGenerationPass("Dirt In Rocks", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[5].Value;
            for (int num669 = 0; num669 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.005); num669++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int) rockLayerLow, Main.maxTilesY),
                    (double) genRand.Next(2, 6), genRand.Next(2, 40), 0, false, 0f, 0f, false, true);
            }
        });
        AddGenerationPass("Clay", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[6].Value;
            for (int num663 = 0; num663 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 2E-05); num663++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next(0, (int) worldSurfaceLow),
                    (double) genRand.Next(4, 14), genRand.Next(10, 50), 40, false, 0f, 0f, false, true);
            }

            for (int num664 = 0; num664 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 5E-05); num664++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX),
                    genRand.Next((int) worldSurfaceLow, (int) worldSurfaceHigh + 1), (double) genRand.Next(8, 14),
                    genRand.Next(15, 45), 40, false, 0f, 0f, false, true);
            }

            for (int num665 = 0; num665 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 2E-05); num665++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX),
                    genRand.Next((int) worldSurfaceHigh, (int) rockLayerHigh + 1), (double) genRand.Next(8, 15),
                    genRand.Next(5, 50), 40, false, 0f, 0f, false, true);
            }

            for (int num666 = 5; num666 < Main.maxTilesX - 5; num666++)
            {
                for (int num667 = 1; (double) num667 < Main.worldSurface - 1.0; num667++)
                {
                    if (Main.tile[num666, num667].active())
                    {
                        for (int num668 = num667; num668 < num667 + 5; num668++)
                        {
                            if (Main.tile[num666, num668].type == 40)
                            {
                                Main.tile[num666, num668].type = 0;
                            }
                        }

                        break;
                    }
                }
            }
        });
        int i2;
        AddGenerationPass("Small Holes", delegate(GenerationProgress progress)
        {
            i2 = 0;
            progress.Message = Lang.gen[7].Value;
            for (int num662 = 0; num662 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0015); num662++)
            {
                float value19 = (float) ((double) num662 / ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0015));
                progress.Set(value19);
                int type9 = -1;
                if (genRand.Next(5) == 0)
                {
                    type9 = -2;
                }

                TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int) worldSurfaceHigh, Main.maxTilesY),
                    (double) genRand.Next(2, 5), genRand.Next(2, 20), type9, false, 0f, 0f, false, true);
                TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int) worldSurfaceHigh, Main.maxTilesY),
                    (double) genRand.Next(8, 15), genRand.Next(7, 30), type9, false, 0f, 0f, false, true);
            }
        });
        AddGenerationPass("Dirt Layer Caves", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[8].Value;
            for (int num661 = 0; num661 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 3E-05); num661++)
            {
                float value18 = (float) ((double) num661 / ((double) (Main.maxTilesX * Main.maxTilesY) * 3E-05));
                progress.Set(value18);
                if (rockLayerHigh <= (double) Main.maxTilesY)
                {
                    int type8 = -1;
                    if (genRand.Next(6) == 0)
                    {
                        type8 = -2;
                    }

                    TileRunner(genRand.Next(0, Main.maxTilesX),
                        genRand.Next((int) worldSurfaceLow, (int) rockLayerHigh + 1), (double) genRand.Next(5, 15),
                        genRand.Next(30, 200), type8, false, 0f, 0f, false, true);
                }
            }
        });
        AddGenerationPass("Rock Layer Caves", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[9].Value;
            for (int num660 = 0; num660 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.00013); num660++)
            {
                float value17 = (float) ((double) num660 / ((double) (Main.maxTilesX * Main.maxTilesY) * 0.00013));
                progress.Set(value17);
                if (rockLayerHigh <= (double) Main.maxTilesY)
                {
                    int type7 = -1;
                    if (genRand.Next(10) == 0)
                    {
                        type7 = -2;
                    }

                    TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int) rockLayerHigh, Main.maxTilesY),
                        (double) genRand.Next(6, 20), genRand.Next(50, 300), type7, false, 0f, 0f, false, true);
                }
            }
        });
        AddGenerationPass("Surface Caves", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[10].Value;
            for (int num650 = 0; num650 < (int) ((double) Main.maxTilesX * 0.002); num650++)
            {
                i2 = genRand.Next(0, Main.maxTilesX);
                while ((float) i2 > (float) Main.maxTilesX * 0.45f && (float) i2 < (float) Main.maxTilesX * 0.55f)
                {
                    i2 = genRand.Next(0, Main.maxTilesX);
                }

                for (int num651 = 0; (double) num651 < worldSurfaceHigh; num651++)
                {
                    if (Main.tile[i2, num651].active())
                    {
                        TileRunner(i2, num651, (double) genRand.Next(3, 6), genRand.Next(5, 50), -1, false,
                            (float) genRand.Next(-10, 11) * 0.1f, 1f, false, true);
                        break;
                    }
                }
            }

            for (int num652 = 0; num652 < (int) ((double) Main.maxTilesX * 0.0007); num652++)
            {
                i2 = genRand.Next(0, Main.maxTilesX);
                while ((float) i2 > (float) Main.maxTilesX * 0.43f && (float) i2 < (float) Main.maxTilesX * 0.57f)
                {
                    i2 = genRand.Next(0, Main.maxTilesX);
                }

                for (int num653 = 0; (double) num653 < worldSurfaceHigh; num653++)
                {
                    if (Main.tile[i2, num653].active())
                    {
                        TileRunner(i2, num653, (double) genRand.Next(10, 15), genRand.Next(50, 130), -1, false,
                            (float) genRand.Next(-10, 11) * 0.1f, 2f, false, true);
                        break;
                    }
                }
            }

            for (int num654 = 0; num654 < (int) ((double) Main.maxTilesX * 0.0003); num654++)
            {
                i2 = genRand.Next(0, Main.maxTilesX);
                while ((float) i2 > (float) Main.maxTilesX * 0.4f && (float) i2 < (float) Main.maxTilesX * 0.6f)
                {
                    i2 = genRand.Next(0, Main.maxTilesX);
                }

                for (int num655 = 0; (double) num655 < worldSurfaceHigh; num655++)
                {
                    if (Main.tile[i2, num655].active())
                    {
                        TileRunner(i2, num655, (double) genRand.Next(12, 25), genRand.Next(150, 500), -1, false,
                            (float) genRand.Next(-10, 11) * 0.1f, 4f, false, true);
                        TileRunner(i2, num655, (double) genRand.Next(8, 17), genRand.Next(60, 200), -1, false,
                            (float) genRand.Next(-10, 11) * 0.1f, 2f, false, true);
                        TileRunner(i2, num655, (double) genRand.Next(5, 13), genRand.Next(40, 170), -1, false,
                            (float) genRand.Next(-10, 11) * 0.1f, 2f, false, true);
                        break;
                    }
                }
            }

            for (int num656 = 0; num656 < (int) ((double) Main.maxTilesX * 0.0004); num656++)
            {
                i2 = genRand.Next(0, Main.maxTilesX);
                while ((float) i2 > (float) Main.maxTilesX * 0.4f && (float) i2 < (float) Main.maxTilesX * 0.6f)
                {
                    i2 = genRand.Next(0, Main.maxTilesX);
                }

                for (int num657 = 0; (double) num657 < worldSurfaceHigh; num657++)
                {
                    if (Main.tile[i2, num657].active())
                    {
                        TileRunner(i2, num657, (double) genRand.Next(7, 12), genRand.Next(150, 250), -1, false, 0f, 1f,
                            true, true);
                        break;
                    }
                }
            }

            float num658 = (float) (Main.maxTilesX / 4200);
            for (int num659 = 0; (float) num659 < 5f * num658; num659++)
            {
                try
                {
                    Caverer(genRand.Next(100, Main.maxTilesX - 100),
                        genRand.Next((int) Main.rockLayer, Main.maxTilesY - 400));
                }
                catch
                {
                }
            }
        });
        AddGenerationPass("Slush Check", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[56].Value;
            snowTop = (int) Main.worldSurface;
            int num641 = genRand.Next(Main.maxTilesX);
            if (dungeonSide != 1)
            {
                while ((float) num641 < (float) Main.maxTilesX * 0.3f ||
                       (float) num641 > (float) Main.maxTilesX * 0.45f)
                {
                    num641 = genRand.Next(Main.maxTilesX);
                }
            }
            else
            {
                while ((float) num641 < (float) Main.maxTilesX * 0.55f ||
                       (float) num641 > (float) Main.maxTilesX * 0.7f)
                {
                    num641 = genRand.Next(Main.maxTilesX);
                }
            }

            int num642 = genRand.Next(50, 90);
            float num643 = (float) (Main.maxTilesX / 4200);
            num642 += (int) ((float) genRand.Next(20, 40) * num643);
            num642 += (int) ((float) genRand.Next(20, 40) * num643);
            int num644 = num641 - num642;
            num642 = genRand.Next(50, 90);
            num642 += (int) ((float) genRand.Next(20, 40) * num643);
            num642 += (int) ((float) genRand.Next(20, 40) * num643);
            int num645 = num641 + num642;
            if (num644 < 0)
            {
                num644 = 0;
            }

            if (num645 > Main.maxTilesX)
            {
                num645 = Main.maxTilesX;
            }

            int num646 = 10;
            for (int num647 = 0; num647 <= lavaLine - 140; num647++)
            {
                num644 += genRand.Next(-4, 4);
                num645 += genRand.Next(-3, 5);
                snowMinX[num647] = num644;
                snowMaxX[num647] = num645;
                for (int num648 = num644; num648 < num645; num648++)
                {
                    if (num647 < lavaLine - 140)
                    {
                        if (Main.tile[num648, num647].wall == 2)
                        {
                            Main.tile[num648, num647].wall = 40;
                        }

                        switch (Main.tile[num648, num647].type)
                        {
                            case 0:
                            case 2:
                            case 23:
                            case 40:
                            case 53:
                                Main.tile[num648, num647].type = 147;
                                break;
                            case 1:
                                Main.tile[num648, num647].type = 161;
                                break;
                        }
                    }
                    else
                    {
                        num646 += genRand.Next(-3, 4);
                        if (genRand.Next(3) == 0)
                        {
                            num646 += genRand.Next(-4, 5);
                            if (genRand.Next(3) == 0)
                            {
                                num646 += genRand.Next(-6, 7);
                            }
                        }

                        if (num646 < 0)
                        {
                            num646 = genRand.Next(3);
                        }
                        else if (num646 > 50)
                        {
                            num646 = 50 - genRand.Next(3);
                        }

                        for (int num649 = num647; num649 < num647 + num646; num649++)
                        {
                            if (Main.tile[num648, num649].wall == 2)
                            {
                                Main.tile[num648, num649].wall = 40;
                            }

                            switch (Main.tile[num648, num649].type)
                            {
                                case 0:
                                case 2:
                                case 23:
                                case 40:
                                case 53:
                                    Main.tile[num648, num649].type = 147;
                                    break;
                                case 1:
                                    Main.tile[num648, num649].type = 161;
                                    break;
                            }
                        }
                    }
                }

                if (snowBottom < num647)
                {
                    snowBottom = num647;
                }
            }
        });
        AddGenerationPass("Grass", delegate
        {
            for (int num638 = 0; num638 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.002); num638++)
            {
                int num639 = genRand.Next(1, Main.maxTilesX - 1);
                int num640 = genRand.Next((int) worldSurfaceLow, (int) worldSurfaceHigh);
                if (num640 >= Main.maxTilesY)
                {
                    num640 = Main.maxTilesY - 2;
                }

                if (Main.tile[num639 - 1, num640].active() && Main.tile[num639 - 1, num640].type == 0 &&
                    Main.tile[num639 + 1, num640].active() && Main.tile[num639 + 1, num640].type == 0 &&
                    Main.tile[num639, num640 - 1].active() && Main.tile[num639, num640 - 1].type == 0 &&
                    Main.tile[num639, num640 + 1].active() && Main.tile[num639, num640 + 1].type == 0)
                {
                    Main.tile[num639, num640].active(true);
                    Main.tile[num639, num640].type = 2;
                }

                num639 = genRand.Next(1, Main.maxTilesX - 1);
                num640 = genRand.Next(0, (int) worldSurfaceLow);
                if (num640 >= Main.maxTilesY)
                {
                    num640 = Main.maxTilesY - 2;
                }

                if (Main.tile[num639 - 1, num640].active() && Main.tile[num639 - 1, num640].type == 0 &&
                    Main.tile[num639 + 1, num640].active() && Main.tile[num639 + 1, num640].type == 0 &&
                    Main.tile[num639, num640 - 1].active() && Main.tile[num639, num640 - 1].type == 0 &&
                    Main.tile[num639, num640 + 1].active() && Main.tile[num639, num640 + 1].type == 0)
                {
                    Main.tile[num639, num640].active(true);
                    Main.tile[num639, num640].type = 2;
                }
            }
        });
        AddGenerationPass("Jungle", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[11].Value;
            float num618 = (float) (Main.maxTilesX / 4200);
            num618 *= 1.5f;
            int num619 = 0;
            float num620 = (float) genRand.Next(15, 30) * 0.01f;
            if (dungeonSide == -1)
            {
                num620 = 1f - num620;
                num619 = (int) ((float) Main.maxTilesX * num620);
            }
            else
            {
                num619 = (int) ((float) Main.maxTilesX * num620);
            }

            int num621 = (int) ((double) Main.maxTilesY + Main.rockLayer) / 2;
            num619 += genRand.Next((int) (-100f * num618), (int) (101f * num618));
            num621 += genRand.Next((int) (-100f * num618), (int) (101f * num618));
            int num622 = num619;
            int num623 = num621;
            TileRunner(num619, num621, (double) genRand.Next((int) (250f * num618), (int) (500f * num618)),
                genRand.Next(50, 150), 59, false, (float) (dungeonSide * 3), 0f, false, true);
            for (int num624 = 0; (float) num624 < 6f * num618; num624++)
            {
                TileRunner(num619 + genRand.Next(-(int) (125f * num618), (int) (125f * num618)),
                    num621 + genRand.Next(-(int) (125f * num618), (int) (125f * num618)), (double) genRand.Next(3, 7),
                    genRand.Next(3, 8), genRand.Next(63, 65), false, 0f, 0f, false, true);
            }

            mudWall = true;
            progress.Set(0.15f);
            num619 += genRand.Next((int) (-250f * num618), (int) (251f * num618));
            num621 += genRand.Next((int) (-150f * num618), (int) (151f * num618));
            int num625 = num619;
            int num626 = num621;
            int num627 = num619;
            int num628 = num621;
            TileRunner(num619, num621, (double) genRand.Next((int) (250f * num618), (int) (500f * num618)),
                genRand.Next(50, 150), 59, false, 0f, 0f, false, true);
            mudWall = false;
            for (int num629 = 0; (float) num629 < 6f * num618; num629++)
            {
                TileRunner(num619 + genRand.Next(-(int) (125f * num618), (int) (125f * num618)),
                    num621 + genRand.Next(-(int) (125f * num618), (int) (125f * num618)), (double) genRand.Next(3, 7),
                    genRand.Next(3, 8), genRand.Next(65, 67), false, 0f, 0f, false, true);
            }

            mudWall = true;
            progress.Set(0.3f);
            num619 += genRand.Next((int) (-400f * num618), (int) (401f * num618));
            num621 += genRand.Next((int) (-150f * num618), (int) (151f * num618));
            int num630 = num619;
            int num631 = num621;
            TileRunner(num619, num621, (double) genRand.Next((int) (250f * num618), (int) (500f * num618)),
                genRand.Next(50, 150), 59, false, (float) (dungeonSide * -3), 0f, false, true);
            mudWall = false;
            for (int num632 = 0; (float) num632 < 6f * num618; num632++)
            {
                TileRunner(num619 + genRand.Next(-(int) (125f * num618), (int) (125f * num618)),
                    num621 + genRand.Next(-(int) (125f * num618), (int) (125f * num618)), (double) genRand.Next(3, 7),
                    genRand.Next(3, 8), genRand.Next(67, 69), false, 0f, 0f, false, true);
            }

            mudWall = true;
            progress.Set(0.45f);
            num619 = (num622 + num625 + num630) / 3;
            num621 = (num623 + num626 + num631) / 3;
            TileRunner(num619, num621, (double) genRand.Next((int) (400f * num618), (int) (600f * num618)), 10000, 59,
                false, 0f, -20f, true, true);
            JungleRunner(num619, num621);
            progress.Set(0.6f);
            mudWall = false;
            for (int num633 = 0; num633 < Main.maxTilesX / 4; num633++)
            {
                num619 = genRand.Next(20, Main.maxTilesX - 20);
                num621 = genRand.Next((int) worldSurface + 10, Main.maxTilesY - 200);
                while (Main.tile[num619, num621].wall != 64 && Main.tile[num619, num621].wall != 15)
                {
                    num619 = genRand.Next(20, Main.maxTilesX - 20);
                    num621 = genRand.Next((int) worldSurface + 10, Main.maxTilesY - 200);
                }

                MudWallRunner(num619, num621);
            }

            num619 = num627;
            num621 = num628;
            for (int num634 = 0; (float) num634 <= 20f * num618; num634++)
            {
                progress.Set((60f + (float) num634 / num618) * 0.01f);
                num619 += genRand.Next((int) (-5f * num618), (int) (6f * num618));
                num621 += genRand.Next((int) (-5f * num618), (int) (6f * num618));
                TileRunner(num619, num621, (double) genRand.Next(40, 100), genRand.Next(300, 500), 59, false, 0f, 0f,
                    false, true);
            }

            for (int num635 = 0; (float) num635 <= 10f * num618; num635++)
            {
                progress.Set((80f + (float) num635 / num618 * 2f) * 0.01f);
                num619 = num627 + genRand.Next((int) (-600f * num618), (int) (600f * num618));
                num621 = num628 + genRand.Next((int) (-200f * num618), (int) (200f * num618));
                while (num619 < 1 || num619 >= Main.maxTilesX - 1 || num621 < 1 || num621 >= Main.maxTilesY - 1 ||
                       Main.tile[num619, num621].type != 59)
                {
                    num619 = num627 + genRand.Next((int) (-600f * num618), (int) (600f * num618));
                    num621 = num628 + genRand.Next((int) (-200f * num618), (int) (200f * num618));
                }

                for (int num636 = 0; (float) num636 < 8f * num618; num636++)
                {
                    num619 += genRand.Next(-30, 31);
                    num621 += genRand.Next(-30, 31);
                    int type5 = -1;
                    if (genRand.Next(7) == 0)
                    {
                        type5 = -2;
                    }

                    TileRunner(num619, num621, (double) genRand.Next(10, 20), genRand.Next(30, 70), type5, false, 0f,
                        0f, false, true);
                }
            }

            for (int num637 = 0; (float) num637 <= 300f * num618; num637++)
            {
                num619 = num627 + genRand.Next((int) (-600f * num618), (int) (600f * num618));
                num621 = num628 + genRand.Next((int) (-200f * num618), (int) (200f * num618));
                while (num619 < 1 || num619 >= Main.maxTilesX - 1 || num621 < 1 || num621 >= Main.maxTilesY - 1 ||
                       Main.tile[num619, num621].type != 59)
                {
                    num619 = num627 + genRand.Next((int) (-600f * num618), (int) (600f * num618));
                    num621 = num628 + genRand.Next((int) (-200f * num618), (int) (200f * num618));
                }

                TileRunner(num619, num621, (double) genRand.Next(4, 10), genRand.Next(5, 30), 1, false, 0f, 0f, false,
                    true);
                if (genRand.Next(4) == 0)
                {
                    int type6 = genRand.Next(63, 69);
                    TileRunner(num619 + genRand.Next(-1, 2), num621 + genRand.Next(-1, 2), (double) genRand.Next(3, 7),
                        genRand.Next(4, 8), type6, false, 0f, 0f, false, true);
                }
            }
        });
        AddGenerationPass("Marble", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[80].Value;
            float num613 = (float) (Main.maxTilesX * Main.maxTilesY) / 5040000f;
            int num614 = (int) ((float) genRand.Next(10, 15) * num613);
            float num615 = (float) (Main.maxTilesX - 160) / (float) num614;
            int num616 = 0;
            while (num616 < num614)
            {
                float num617 = (float) num616 / (float) num614;
                progress.Set(num617);
                Point origin4 = RandomRectanglePoint((int) (num617 * (float) (Main.maxTilesX - 160)) + 80,
                    (int) rockLayer + 20, (int) num615, Main.maxTilesY - ((int) rockLayer + 40) - 200);
                if (Biomes<MarbleBiome>.Place(origin4, structures))
                {
                    num616++;
                }
            }
        });
        AddGenerationPass("Granite", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[81].Value;
            float num608 = (float) Main.maxTilesX / 4200f;
            int num609 = (int) ((float) genRand.Next(8, 14) * num608);
            float num610 = (float) (Main.maxTilesX - 200) / (float) num609;
            int num611 = 0;
            while (num611 < num609)
            {
                float num612 = (float) num611 / (float) num609;
                progress.Set(num612);
                Point origin3 = RandomRectanglePoint((int) (num612 * (float) (Main.maxTilesX - 200)) + 100,
                    (int) rockLayer + 20, (int) num610, Main.maxTilesY - ((int) rockLayer + 40) - 200);
                if (Biomes<GraniteBiome>.Place(origin3, structures))
                {
                    num611++;
                }
            }
        });
        AddGenerationPass("Mud Caves To Grass", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[77].Value;
            for (int num602 = 0; num602 < Main.maxTilesX; num602++)
            {
                for (int num603 = 0; num603 < Main.maxTilesY; num603++)
                {
                    if (Main.tile[num602, num603].active())
                    {
                        grassSpread = 0;
                        SpreadGrass(num602, num603, 59, 60, true, 0);
                    }

                    progress.Set(0.2f * ((float) (num602 * Main.maxTilesY + num603) /
                                         (float) (Main.maxTilesX * Main.maxTilesY)));
                }
            }

            for (int num604 = 10; num604 < Main.maxTilesX - 10; num604++)
            {
                for (int num605 = 10; num605 < Main.maxTilesY - 10; num605++)
                {
                    if (Main.tile[num604, num605].active())
                    {
                        int num606 = tileCounter(num604, num605);
                        if (num606 < tileCounterMax)
                        {
                            tileCounterKill();
                        }
                    }

                    float num607 = (float) ((num604 - 10) * (Main.maxTilesY - 20) + (num605 - 10)) /
                                   (float) ((Main.maxTilesX - 20) * (Main.maxTilesY - 20));
                    progress.Set(0.2f + num607 * 0.8f);
                }
            }
        });
        AddGenerationPass("Full Desert", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[78].Value;
            int num598 = dungeonSide;
            int num599 = Main.maxTilesX / 2;
            int num600 = genRand.Next(num599) / 8;
            num600 += num599 / 8;
            int x12 = num599 + num600 * -num598;
            int num601 = 0;
            while (!Biomes<DesertBiome>.Place(new Point(x12, (int) worldSurface), structures))
            {
                num600 = genRand.Next(num599) / 2;
                num600 += num599 / 8;
                x12 = num599 + num600 * -num598;
                if (++num601 > 1000)
                {
                    num598 *= -1;
                    num601 = 0;
                }
            }
        });
        AddGenerationPass("Floating Islands", delegate(GenerationProgress progress)
        {
            numIslandHouses = 0;
            houseCount = 0;
            progress.Message = Lang.gen[12].Value;
            for (int num592 = 0; num592 < (int) ((double) Main.maxTilesX * 0.0008) + skyLakes; num592++)
            {
                int num593 = 1000;
                int num594 = genRand.Next((int) ((double) Main.maxTilesX * 0.1), (int) ((double) Main.maxTilesX * 0.9));
                while (--num593 > 0)
                {
                    bool flag45 = true;
                    while (num594 > Main.maxTilesX / 2 - 80 && num594 < Main.maxTilesX / 2 + 80)
                    {
                        num594 = genRand.Next((int) ((double) Main.maxTilesX * 0.1),
                            (int) ((double) Main.maxTilesX * 0.9));
                    }

                    for (int num595 = 0; num595 < numIslandHouses; num595++)
                    {
                        if (num594 > fihX[num595] - 180 && num594 < fihX[num595] + 180)
                        {
                            flag45 = false;
                            break;
                        }
                    }

                    if (flag45)
                    {
                        flag45 = false;
                        int num596 = 0;
                        for (int num597 = 200; (double) num597 < Main.worldSurface; num597++)
                        {
                            if (Main.tile[num594, num597].active())
                            {
                                num596 = num597;
                                flag45 = true;
                                break;
                            }
                        }

                        if (flag45)
                        {
                            int val = genRand.Next(90, num596 - 100);
                            val = Math.Min(val, (int) worldSurfaceLow - 50);
                            if (num592 < skyLakes)
                            {
                                skyLake[numIslandHouses] = true;
                                CloudLake(num594, val);
                            }
                            else
                            {
                                CloudIsland(num594, val);
                            }

                            fihX[numIslandHouses] = num594;
                            fihY[numIslandHouses] = val;
                            numIslandHouses++;
                        }
                    }
                }
            }
        });
        AddGenerationPass("Mushroom Patches", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[13].Value;
            for (int num576 = 0; num576 < Main.maxTilesX / 500; num576++)
            {
                int num577 = 0;
                bool flag43 = true;
                while (flag43)
                {
                    int num578 = genRand.Next((int) ((double) Main.maxTilesX * 0.3),
                        (int) ((double) Main.maxTilesX * 0.7));
                    int num579 = genRand.Next((int) Main.rockLayer, Main.maxTilesY - 350);
                    flag43 = false;
                    int num580 = 60;
                    for (int num581 = num578 - num580; num581 < num578 + num580; num581 += 3)
                    {
                        for (int num582 = num579 - num580; num582 < num579 + num580; num582 += 3)
                        {
                            if (Main.tile[num581, num582].type == 147 || Main.tile[num581, num582].type == 161 ||
                                Main.tile[num581, num582].type == 162)
                            {
                                flag43 = true;
                                break;
                            }

                            if (UndergroundDesertLocation.Contains(new Point(num581, num582)))
                            {
                                flag43 = true;
                                break;
                            }
                        }
                    }

                    if (!flag43)
                    {
                        ShroomPatch(num578, num579);
                    }

                    num577++;
                    if (num577 > 100)
                    {
                        break;
                    }
                }
            }

            for (int num583 = 0; num583 < Main.maxTilesX; num583++)
            {
                for (int num584 = (int) Main.worldSurface; num584 < Main.maxTilesY; num584++)
                {
                    if (Main.tile[num583, num584].active())
                    {
                        grassSpread = 0;
                        SpreadGrass(num583, num584, 59, 70, false, 0);
                        if (Main.tile[num583, num584].type == 70 && genRand.Next(20) == 0)
                        {
                            int num585 = (genRand.Next(5) != 0) ? 1 : 2;
                            int num586 = genRand.Next(2, 6);
                            int num587 = num584 - num586;
                            bool flag44 = true;
                            for (int num588 = num583 - num585; num588 <= num583 + num585; num588++)
                            {
                                if (Main.tile[num588, num587].active())
                                {
                                    flag44 = false;
                                }

                                if (Main.tileBrick[Main.tile[num588, num587 - 1].type])
                                {
                                    flag44 = false;
                                }

                                if (Main.tileBrick[Main.tile[num588, num587 + 1].type])
                                {
                                    flag44 = false;
                                }
                            }

                            if (Main.tile[num583 - num585 - 1, num587].type == 190)
                            {
                                flag44 = false;
                            }

                            if (Main.tile[num583 + num585 + 1, num587].type == 190)
                            {
                                flag44 = false;
                            }

                            for (int num589 = num587; num589 < num584; num589++)
                            {
                                if (Main.tile[num583, num589].active())
                                {
                                    flag44 = false;
                                }

                                if (Main.tileBrick[Main.tile[num583 - 1, num589].type])
                                {
                                    flag44 = false;
                                }

                                if (Main.tileBrick[Main.tile[num583 + 1, num589].type])
                                {
                                    flag44 = false;
                                }
                            }

                            if (flag44)
                            {
                                for (int num590 = num583 - num585; num590 <= num583 + num585; num590++)
                                {
                                    PlaceTile(num590, num587, 190, true, true, -1, 0);
                                }

                                for (int num591 = num587; num591 < num584; num591++)
                                {
                                    PlaceTile(num583, num591, 190, true, true, -1, 0);
                                }
                            }
                        }
                    }
                }
            }
        });
        AddGenerationPass("Mud To Dirt", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[14].Value;
            for (int num575 = 0; num575 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.001); num575++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int) rockLayerLow, Main.maxTilesY),
                    (double) genRand.Next(2, 6), genRand.Next(2, 40), 59, false, 0f, 0f, false, true);
            }
        });
        AddGenerationPass("Silt", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[15].Value;
            for (int num573 = 0; num573 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0001); num573++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int) rockLayerHigh, Main.maxTilesY),
                    (double) genRand.Next(5, 12), genRand.Next(15, 50), 123, false, 0f, 0f, false, true);
            }

            for (int num574 = 0; num574 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0005); num574++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int) rockLayerHigh, Main.maxTilesY),
                    (double) genRand.Next(2, 5), genRand.Next(2, 5), 123, false, 0f, 0f, false, true);
            }
        });
        AddGenerationPass("Shinies", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[16].Value;
            for (int num560 = 0; num560 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 6E-05); num560++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int) worldSurfaceLow, (int) worldSurfaceHigh),
                    (double) genRand.Next(3, 6), genRand.Next(2, 6), copper, false, 0f, 0f, false, true);
            }

            for (int num561 = 0; num561 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 8E-05); num561++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int) worldSurfaceHigh, (int) rockLayerHigh),
                    (double) genRand.Next(3, 7), genRand.Next(3, 7), copper, false, 0f, 0f, false, true);
            }

            for (int num562 = 0; num562 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0002); num562++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int) rockLayerLow, Main.maxTilesY),
                    (double) genRand.Next(4, 9), genRand.Next(4, 8), copper, false, 0f, 0f, false, true);
            }

            for (int num563 = 0; num563 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 3E-05); num563++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int) worldSurfaceLow, (int) worldSurfaceHigh),
                    (double) genRand.Next(3, 7), genRand.Next(2, 5), iron, false, 0f, 0f, false, true);
            }

            for (int num564 = 0; num564 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 8E-05); num564++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int) worldSurfaceHigh, (int) rockLayerHigh),
                    (double) genRand.Next(3, 6), genRand.Next(3, 6), iron, false, 0f, 0f, false, true);
            }

            for (int num565 = 0; num565 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0002); num565++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int) rockLayerLow, Main.maxTilesY),
                    (double) genRand.Next(4, 9), genRand.Next(4, 8), iron, false, 0f, 0f, false, true);
            }

            for (int num566 = 0; num566 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 2.6E-05); num566++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int) worldSurfaceHigh, (int) rockLayerHigh),
                    (double) genRand.Next(3, 6), genRand.Next(3, 6), silver, false, 0f, 0f, false, true);
            }

            for (int num567 = 0; num567 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.00015); num567++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int) rockLayerLow, Main.maxTilesY),
                    (double) genRand.Next(4, 9), genRand.Next(4, 8), silver, false, 0f, 0f, false, true);
            }

            for (int num568 = 0; num568 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.00017); num568++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next(0, (int) worldSurfaceLow),
                    (double) genRand.Next(4, 9), genRand.Next(4, 8), silver, false, 0f, 0f, false, true);
            }

            for (int num569 = 0; num569 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.00012); num569++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int) rockLayerLow, Main.maxTilesY),
                    (double) genRand.Next(4, 8), genRand.Next(4, 8), gold, false, 0f, 0f, false, true);
            }

            for (int num570 = 0; num570 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.00012); num570++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next(0, (int) worldSurfaceLow - 20),
                    (double) genRand.Next(4, 8), genRand.Next(4, 8), gold, false, 0f, 0f, false, true);
            }

            if (crimson)
            {
                for (int num571 = 0; num571 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 2E-05); num571++)
                {
                    TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int) rockLayerLow, Main.maxTilesY),
                        (double) genRand.Next(2, 4), genRand.Next(3, 6), 204, false, 0f, 0f, false, true);
                }
            }
            else
            {
                for (int num572 = 0; num572 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 2E-05); num572++)
                {
                    TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int) rockLayerLow, Main.maxTilesY),
                        (double) genRand.Next(2, 4), genRand.Next(3, 6), 22, false, 0f, 0f, false, true);
                }
            }
        });
        AddGenerationPass("Webs", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[17].Value;
            for (int num556 = 0; num556 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0006); num556++)
            {
                int num557 = genRand.Next(20, Main.maxTilesX - 20);
                int num558 = genRand.Next((int) worldSurfaceHigh, Main.maxTilesY - 20);
                if (num556 < numMCaves)
                {
                    num557 = mCaveX[num556];
                    num558 = mCaveY[num556];
                }

                if (!Main.tile[num557, num558].active() &&
                    ((double) num558 > Main.worldSurface || Main.tile[num557, num558].wall > 0))
                {
                    while (!Main.tile[num557, num558].active() && num558 > (int) worldSurfaceLow)
                    {
                        num558--;
                    }

                    num558++;
                    int num559 = 1;
                    if (genRand.Next(2) == 0)
                    {
                        num559 = -1;
                    }

                    for (;
                        !Main.tile[num557, num558].active() && num557 > 10 && num557 < Main.maxTilesX - 10;
                        num557 += num559)
                    {
                    }

                    num557 -= num559;
                    if ((double) num558 > Main.worldSurface || Main.tile[num557, num558].wall > 0)
                    {
                        TileRunner(num557, num558, (double) genRand.Next(4, 11), genRand.Next(2, 4), 51, true,
                            (float) num559, -1f, false, false);
                    }
                }
            }
        });
        AddGenerationPass("Underworld", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[18].Value;
            progress.Set(0f);
            int num541 = Main.maxTilesY - genRand.Next(150, 190);
            for (int num542 = 0; num542 < Main.maxTilesX; num542++)
            {
                num541 += genRand.Next(-3, 4);
                if (num541 < Main.maxTilesY - 190)
                {
                    num541 = Main.maxTilesY - 190;
                }

                if (num541 > Main.maxTilesY - 160)
                {
                    num541 = Main.maxTilesY - 160;
                }

                for (int num543 = num541 - 20 - genRand.Next(3); num543 < Main.maxTilesY; num543++)
                {
                    if (num543 >= num541)
                    {
                        Main.tile[num542, num543].active(false);
                        Main.tile[num542, num543].lava(false);
                        Main.tile[num542, num543].liquid = 0;
                    }
                    else
                    {
                        Main.tile[num542, num543].type = 57;
                    }
                }
            }

            int num544 = Main.maxTilesY - genRand.Next(40, 70);
            for (int num545 = 10; num545 < Main.maxTilesX - 10; num545++)
            {
                num544 += genRand.Next(-10, 11);
                if (num544 > Main.maxTilesY - 60)
                {
                    num544 = Main.maxTilesY - 60;
                }

                if (num544 < Main.maxTilesY - 100)
                {
                    num544 = Main.maxTilesY - 120;
                }

                for (int num546 = num544; num546 < Main.maxTilesY - 10; num546++)
                {
                    if (!Main.tile[num545, num546].active())
                    {
                        Main.tile[num545, num546].lava(true);
                        Main.tile[num545, num546].liquid = byte.MaxValue;
                    }
                }
            }

            for (int num547 = 0; num547 < Main.maxTilesX; num547++)
            {
                if (genRand.Next(50) == 0)
                {
                    int num548 = Main.maxTilesY - 65;
                    while (!Main.tile[num547, num548].active() && num548 > Main.maxTilesY - 135)
                    {
                        num548--;
                    }

                    TileRunner(genRand.Next(0, Main.maxTilesX), num548 + genRand.Next(20, 50),
                        (double) genRand.Next(15, 20), 1000, 57, true, 0f, (float) genRand.Next(1, 3), true, true);
                }
            }

            Liquid.QuickWater(-2, -1, -1);
            for (int num549 = 0; num549 < Main.maxTilesX; num549++)
            {
                float num550 = (float) num549 / (float) (Main.maxTilesX - 1);
                progress.Set(num550 / 2f + 0.5f);
                if (genRand.Next(13) == 0)
                {
                    int num551 = Main.maxTilesY - 65;
                    while ((Main.tile[num549, num551].liquid > 0 || Main.tile[num549, num551].active()) &&
                           num551 > Main.maxTilesY - 140)
                    {
                        num551--;
                    }

                    TileRunner(num549, num551 - genRand.Next(2, 5), (double) genRand.Next(5, 30), 1000, 57, true, 0f,
                        (float) genRand.Next(1, 3), true, true);
                    float num552 = (float) genRand.Next(1, 3);
                    if (genRand.Next(3) == 0)
                    {
                        num552 *= 0.5f;
                    }

                    if (genRand.Next(2) == 0)
                    {
                        TileRunner(num549, num551 - genRand.Next(2, 5),
                            (double) (int) ((float) genRand.Next(5, 15) * num552),
                            (int) ((float) genRand.Next(10, 15) * num552), 57, true, 1f, 0.3f, false, true);
                    }

                    if (genRand.Next(2) == 0)
                    {
                        num552 = (float) genRand.Next(1, 3);
                        TileRunner(num549, num551 - genRand.Next(2, 5),
                            (double) (int) ((float) genRand.Next(5, 15) * num552),
                            (int) ((float) genRand.Next(10, 15) * num552), 57, true, -1f, 0.3f, false, true);
                    }

                    TileRunner(num549 + genRand.Next(-10, 10), num551 + genRand.Next(-10, 10),
                        (double) genRand.Next(5, 15), genRand.Next(5, 10), -2, false, (float) genRand.Next(-1, 3),
                        (float) genRand.Next(-1, 3), false, true);
                    if (genRand.Next(3) == 0)
                    {
                        TileRunner(num549 + genRand.Next(-10, 10), num551 + genRand.Next(-10, 10),
                            (double) genRand.Next(10, 30), genRand.Next(10, 20), -2, false, (float) genRand.Next(-1, 3),
                            (float) genRand.Next(-1, 3), false, true);
                    }

                    if (genRand.Next(5) == 0)
                    {
                        TileRunner(num549 + genRand.Next(-15, 15), num551 + genRand.Next(-15, 10),
                            (double) genRand.Next(15, 30), genRand.Next(5, 20), -2, false, (float) genRand.Next(-1, 3),
                            (float) genRand.Next(-1, 3), false, true);
                    }
                }
            }

            for (int num553 = 0; num553 < Main.maxTilesX; num553++)
            {
                TileRunner(genRand.Next(20, Main.maxTilesX - 20),
                    genRand.Next(Main.maxTilesY - 180, Main.maxTilesY - 10), (double) genRand.Next(2, 7),
                    genRand.Next(2, 7), -2, false, 0f, 0f, false, true);
            }

            for (int num554 = 0; num554 < Main.maxTilesX; num554++)
            {
                if (!Main.tile[num554, Main.maxTilesY - 145].active())
                {
                    Main.tile[num554, Main.maxTilesY - 145].liquid = byte.MaxValue;
                    Main.tile[num554, Main.maxTilesY - 145].lava(true);
                }

                if (!Main.tile[num554, Main.maxTilesY - 144].active())
                {
                    Main.tile[num554, Main.maxTilesY - 144].liquid = byte.MaxValue;
                    Main.tile[num554, Main.maxTilesY - 144].lava(true);
                }
            }

            for (int num555 = 0; num555 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0008); num555++)
            {
                TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next(Main.maxTilesY - 140, Main.maxTilesY),
                    (double) genRand.Next(2, 7), genRand.Next(3, 7), 58, false, 0f, 0f, false, true);
            }

            AddHellHouses();
        });
        AddGenerationPass("Lakes", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[19].Value;
            int num537 = genRand.Next(2, (int) ((double) Main.maxTilesX * 0.005));
            for (int num538 = 0; num538 < num537; num538++)
            {
                float value16 = (float) num538 / (float) num537;
                progress.Set(value16);
                int num539 = genRand.Next(300, Main.maxTilesX - 300);
                while (num539 > Main.maxTilesX / 2 - 100 && num539 < Main.maxTilesX / 2 + 100)
                {
                    num539 = genRand.Next(300, Main.maxTilesX - 300);
                }

                int num540;
                for (num540 = (int) worldSurfaceLow - 20; !Main.tile[num539, num540].active(); num540++)
                {
                }

                Lakinater(num539, num540);
            }
        });
        AddGenerationPass("Dungeon", delegate
        {
            int num536 = 0;
            if (dungeonSide == -1)
            {
                num536 = genRand.Next((int) ((double) Main.maxTilesX * 0.05), (int) ((double) Main.maxTilesX * 0.2));
                dungeonSide = -1;
            }
            else
            {
                num536 = genRand.Next((int) ((double) Main.maxTilesX * 0.8), (int) ((double) Main.maxTilesX * 0.95));
                dungeonSide = 1;
            }

            int y9 = (int) ((Main.worldSurface + Main.rockLayer) / 2.0) + genRand.Next(-200, 200);
            MakeDungeon(num536, y9);
        });
        AddGenerationPass("Corruption", delegate(GenerationProgress progress)
        {
            if (crimson)
            {
                progress.Message = Lang.gen[72].Value;
                for (int num488 = 0; (double) num488 < (double) Main.maxTilesX * 0.00045; num488++)
                {
                    float value14 = (float) ((double) num488 / ((double) Main.maxTilesX * 0.00045));
                    progress.Set(value14);
                    bool flag38 = false;
                    int num489 = 0;
                    int num490 = 0;
                    int num491 = 0;
                    while (!flag38)
                    {
                        int num492 = 0;
                        flag38 = true;
                        int num493 = Main.maxTilesX / 2;
                        int num494 = 200;
                        num489 = ((dungeonSide >= 0)
                            ? genRand.Next(320, Main.maxTilesX - 600)
                            : genRand.Next(600, Main.maxTilesX - 320));
                        num490 = num489 - genRand.Next(200) - 100;
                        num491 = num489 + genRand.Next(200) + 100;
                        if (num490 < 285)
                        {
                            num490 = 285;
                        }

                        if (num491 > Main.maxTilesX - 285)
                        {
                            num491 = Main.maxTilesX - 285;
                        }

                        if (dungeonSide < 0 && num490 < 400)
                        {
                            num490 = 400;
                        }
                        else if (dungeonSide > 0 && num490 > Main.maxTilesX - 400)
                        {
                            num490 = Main.maxTilesX - 400;
                        }

                        if (num489 > num493 - num494 && num489 < num493 + num494)
                        {
                            flag38 = false;
                        }

                        if (num490 > num493 - num494 && num490 < num493 + num494)
                        {
                            flag38 = false;
                        }

                        if (num491 > num493 - num494 && num491 < num493 + num494)
                        {
                            flag38 = false;
                        }

                        if (num489 > UndergroundDesertLocation.X &&
                            num489 < UndergroundDesertLocation.X + UndergroundDesertLocation.Width)
                        {
                            flag38 = false;
                        }

                        if (num490 > UndergroundDesertLocation.X &&
                            num490 < UndergroundDesertLocation.X + UndergroundDesertLocation.Width)
                        {
                            flag38 = false;
                        }

                        if (num491 > UndergroundDesertLocation.X &&
                            num491 < UndergroundDesertLocation.X + UndergroundDesertLocation.Width)
                        {
                            flag38 = false;
                        }

                        for (int num495 = num490; num495 < num491; num495++)
                        {
                            for (int num496 = 0; num496 < (int) Main.worldSurface; num496 += 5)
                            {
                                if (Main.tile[num495, num496].active() &&
                                    Main.tileDungeon[Main.tile[num495, num496].type])
                                {
                                    flag38 = false;
                                    break;
                                }

                                if (!flag38)
                                {
                                    break;
                                }
                            }
                        }

                        if (num492 < 200 && JungleX > num490 && JungleX < num491)
                        {
                            num492++;
                            flag38 = false;
                        }
                    }

                    CrimStart(num489, (int) worldSurfaceLow - 10);
                    for (int num497 = num490; num497 < num491; num497++)
                    {
                        for (int num498 = (int) worldSurfaceLow; (double) num498 < Main.worldSurface - 1.0; num498++)
                        {
                            if (Main.tile[num497, num498].active())
                            {
                                int num499 = num498 + genRand.Next(10, 14);
                                for (int num500 = num498; num500 < num499; num500++)
                                {
                                    if ((Main.tile[num497, num500].type == 59 ||
                                         Main.tile[num497, num500].type == 60) && num497 >= num490 + genRand.Next(5) &&
                                        num497 < num491 - genRand.Next(5))
                                    {
                                        Main.tile[num497, num500].type = 0;
                                    }
                                }

                                break;
                            }
                        }
                    }

                    double num501 = Main.worldSurface + 40.0;
                    for (int num502 = num490; num502 < num491; num502++)
                    {
                        num501 += (double) genRand.Next(-2, 3);
                        if (num501 < Main.worldSurface + 30.0)
                        {
                            num501 = Main.worldSurface + 30.0;
                        }

                        if (num501 > Main.worldSurface + 50.0)
                        {
                            num501 = Main.worldSurface + 50.0;
                        }

                        i2 = num502;
                        bool flag39 = false;
                        for (int num503 = (int) worldSurfaceLow; (double) num503 < num501; num503++)
                        {
                            if (Main.tile[i2, num503].active())
                            {
                                if (Main.tile[i2, num503].type == 53 && i2 >= num490 + genRand.Next(5) &&
                                    i2 <= num491 - genRand.Next(5))
                                {
                                    Main.tile[i2, num503].type = 234;
                                }

                                if (Main.tile[i2, num503].type == 0 && (double) num503 < Main.worldSurface - 1.0 &&
                                    !flag39)
                                {
                                    grassSpread = 0;
                                    SpreadGrass(i2, num503, 0, 199, true, 0);
                                }

                                flag39 = true;
                                if (Main.tile[i2, num503].wall == 216)
                                {
                                    Main.tile[i2, num503].wall = 218;
                                }
                                else if (Main.tile[i2, num503].wall == 187)
                                {
                                    Main.tile[i2, num503].wall = 221;
                                }

                                if (Main.tile[i2, num503].type == 1)
                                {
                                    if (i2 >= num490 + genRand.Next(5) && i2 <= num491 - genRand.Next(5))
                                    {
                                        Main.tile[i2, num503].type = 203;
                                    }
                                }
                                else if (Main.tile[i2, num503].type == 2)
                                {
                                    Main.tile[i2, num503].type = 199;
                                }
                                else if (Main.tile[i2, num503].type == 161)
                                {
                                    Main.tile[i2, num503].type = 200;
                                }
                                else if (Main.tile[i2, num503].type == 396)
                                {
                                    Main.tile[i2, num503].type = 401;
                                }
                                else if (Main.tile[i2, num503].type == 397)
                                {
                                    Main.tile[i2, num503].type = 399;
                                }
                            }
                        }
                    }

                    int num504 = genRand.Next(10, 15);
                    for (int num505 = 0; num505 < num504; num505++)
                    {
                        int num506 = 0;
                        bool flag40 = false;
                        int num507 = 0;
                        while (!flag40)
                        {
                            num506++;
                            int num508 = genRand.Next(num490 - num507, num491 + num507);
                            int num509 = genRand.Next((int) (Main.worldSurface - (double) (num507 / 2)),
                                (int) (Main.worldSurface + 100.0 + (double) num507));
                            if (num506 > 100)
                            {
                                num507++;
                                num506 = 0;
                            }

                            if (Main.tile[num508, num509].active())
                            {
                                while (Main.tile[num508, num509].active() && (double) num509 > Main.worldSurface)
                                {
                                    num509--;
                                }
                            }
                            else
                            {
                                for (; !Main.tile[num508, num509].active(); num509++)
                                {
                                }

                                num509--;
                            }

                            if (num507 > 10 || (Main.tile[num508, num509 + 1].active() &&
                                                Main.tile[num508, num509 + 1].type == 203))
                            {
                                Place3x2(num508, num509, 26, 1);
                                if (Main.tile[num508, num509].type == 26)
                                {
                                    flag40 = true;
                                }
                            }

                            if (num507 > 100)
                            {
                                flag40 = true;
                            }
                        }
                    }
                }
            }
            else
            {
                progress.Message = Lang.gen[20].Value;
                for (int num510 = 0; (double) num510 < (double) Main.maxTilesX * 0.00045; num510++)
                {
                    float value15 = (float) ((double) num510 / ((double) Main.maxTilesX * 0.00045));
                    progress.Set(value15);
                    bool flag41 = false;
                    int num511 = 0;
                    int num512 = 0;
                    int num513 = 0;
                    while (!flag41)
                    {
                        int num514 = 0;
                        flag41 = true;
                        int num515 = Main.maxTilesX / 2;
                        int num516 = 200;
                        num511 = genRand.Next(320, Main.maxTilesX - 320);
                        num512 = num511 - genRand.Next(200) - 100;
                        num513 = num511 + genRand.Next(200) + 100;
                        if (num512 < 285)
                        {
                            num512 = 285;
                        }

                        if (num513 > Main.maxTilesX - 285)
                        {
                            num513 = Main.maxTilesX - 285;
                        }

                        if (num511 > num515 - num516 && num511 < num515 + num516)
                        {
                            flag41 = false;
                        }

                        if (num512 > num515 - num516 && num512 < num515 + num516)
                        {
                            flag41 = false;
                        }

                        if (num513 > num515 - num516 && num513 < num515 + num516)
                        {
                            flag41 = false;
                        }

                        if (num511 > UndergroundDesertLocation.X &&
                            num511 < UndergroundDesertLocation.X + UndergroundDesertLocation.Width)
                        {
                            flag41 = false;
                        }

                        if (num512 > UndergroundDesertLocation.X &&
                            num512 < UndergroundDesertLocation.X + UndergroundDesertLocation.Width)
                        {
                            flag41 = false;
                        }

                        if (num513 > UndergroundDesertLocation.X &&
                            num513 < UndergroundDesertLocation.X + UndergroundDesertLocation.Width)
                        {
                            flag41 = false;
                        }

                        for (int num517 = num512; num517 < num513; num517++)
                        {
                            for (int num518 = 0; num518 < (int) Main.worldSurface; num518 += 5)
                            {
                                if (Main.tile[num517, num518].active() &&
                                    Main.tileDungeon[Main.tile[num517, num518].type])
                                {
                                    flag41 = false;
                                    break;
                                }

                                if (!flag41)
                                {
                                    break;
                                }
                            }
                        }

                        if (num514 < 200 && JungleX > num512 && JungleX < num513)
                        {
                            num514++;
                            flag41 = false;
                        }
                    }

                    int num519 = 0;
                    for (int num520 = num512; num520 < num513; num520++)
                    {
                        if (num519 > 0)
                        {
                            num519--;
                        }

                        if (num520 == num511 || num519 == 0)
                        {
                            for (int num521 = (int) worldSurfaceLow;
                                (double) num521 < Main.worldSurface - 1.0;
                                num521++)
                            {
                                if (Main.tile[num520, num521].active() || Main.tile[num520, num521].wall > 0)
                                {
                                    if (num520 == num511)
                                    {
                                        num519 = 20;
                                        ChasmRunner(num520, num521, genRand.Next(150) + 150, true);
                                    }
                                    else if (genRand.Next(35) == 0 && num519 == 0)
                                    {
                                        num519 = 30;
                                        bool makeOrb = true;
                                        ChasmRunner(num520, num521, genRand.Next(50) + 50, makeOrb);
                                    }

                                    break;
                                }
                            }
                        }

                        for (int num522 = (int) worldSurfaceLow; (double) num522 < Main.worldSurface - 1.0; num522++)
                        {
                            if (Main.tile[num520, num522].active())
                            {
                                int num523 = num522 + genRand.Next(10, 14);
                                for (int num524 = num522; num524 < num523; num524++)
                                {
                                    if ((Main.tile[num520, num524].type == 59 ||
                                         Main.tile[num520, num524].type == 60) && num520 >= num512 + genRand.Next(5) &&
                                        num520 < num513 - genRand.Next(5))
                                    {
                                        Main.tile[num520, num524].type = 0;
                                    }
                                }

                                break;
                            }
                        }
                    }

                    double num525 = Main.worldSurface + 40.0;
                    for (int num526 = num512; num526 < num513; num526++)
                    {
                        num525 += (double) genRand.Next(-2, 3);
                        if (num525 < Main.worldSurface + 30.0)
                        {
                            num525 = Main.worldSurface + 30.0;
                        }

                        if (num525 > Main.worldSurface + 50.0)
                        {
                            num525 = Main.worldSurface + 50.0;
                        }

                        i2 = num526;
                        bool flag42 = false;
                        for (int num527 = (int) worldSurfaceLow; (double) num527 < num525; num527++)
                        {
                            if (Main.tile[i2, num527].active())
                            {
                                if (Main.tile[i2, num527].type == 53 && i2 >= num512 + genRand.Next(5) &&
                                    i2 <= num513 - genRand.Next(5))
                                {
                                    Main.tile[i2, num527].type = 112;
                                }

                                if (Main.tile[i2, num527].type == 0 && (double) num527 < Main.worldSurface - 1.0 &&
                                    !flag42)
                                {
                                    grassSpread = 0;
                                    SpreadGrass(i2, num527, 0, 23, true, 0);
                                }

                                flag42 = true;
                                if (Main.tile[i2, num527].type == 1 && i2 >= num512 + genRand.Next(5) &&
                                    i2 <= num513 - genRand.Next(5))
                                {
                                    Main.tile[i2, num527].type = 25;
                                }

                                if (Main.tile[i2, num527].wall == 216)
                                {
                                    Main.tile[i2, num527].wall = 217;
                                }
                                else if (Main.tile[i2, num527].wall == 187)
                                {
                                    Main.tile[i2, num527].wall = 220;
                                }

                                if (Main.tile[i2, num527].type == 2)
                                {
                                    Main.tile[i2, num527].type = 23;
                                }

                                if (Main.tile[i2, num527].type == 161)
                                {
                                    Main.tile[i2, num527].type = 163;
                                }
                                else if (Main.tile[i2, num527].type == 396)
                                {
                                    Main.tile[i2, num527].type = 400;
                                }
                                else if (Main.tile[i2, num527].type == 397)
                                {
                                    Main.tile[i2, num527].type = 398;
                                }
                            }
                        }
                    }

                    for (int num528 = num512; num528 < num513; num528++)
                    {
                        for (int num529 = 0; num529 < Main.maxTilesY - 50; num529++)
                        {
                            if (Main.tile[num528, num529].active() && Main.tile[num528, num529].type == 31)
                            {
                                int num530 = num528 - 13;
                                int num531 = num528 + 13;
                                int num532 = num529 - 13;
                                int num533 = num529 + 13;
                                for (int num534 = num530; num534 < num531; num534++)
                                {
                                    if (num534 > 10 && num534 < Main.maxTilesX - 10)
                                    {
                                        for (int num535 = num532; num535 < num533; num535++)
                                        {
                                            if (Math.Abs(num534 - num528) + Math.Abs(num535 - num529) <
                                                9 + genRand.Next(11) && genRand.Next(3) != 0 &&
                                                Main.tile[num534, num535].type != 31)
                                            {
                                                Main.tile[num534, num535].active(true);
                                                Main.tile[num534, num535].type = 25;
                                                if (Math.Abs(num534 - num528) <= 1 && Math.Abs(num535 - num529) <= 1)
                                                {
                                                    Main.tile[num534, num535].active(false);
                                                }
                                            }

                                            if (Main.tile[num534, num535].type != 31 &&
                                                Math.Abs(num534 - num528) <= 2 + genRand.Next(3) &&
                                                Math.Abs(num535 - num529) <= 2 + genRand.Next(3))
                                            {
                                                Main.tile[num534, num535].active(false);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        });
        AddGenerationPass("Slush", delegate
        {
            for (int num483 = snowTop; num483 < snowBottom; num483++)
            {
                for (int num484 = snowMinX[num483]; num484 < snowMaxX[num483]; num484++)
                {
                    switch (Main.tile[num484, num483].type)
                    {
                        case 123:
                            Main.tile[num484, num483].type = 224;
                            break;
                        case 59:
                        {
                            bool flag37 = true;
                            int num485 = 3;
                            for (int num486 = num484 - num485; num486 <= num484 + num485; num486++)
                            {
                                for (int num487 = num483 - num485; num487 <= num483 + num485; num487++)
                                {
                                    if (Main.tile[num486, num487].type == 60 || Main.tile[num486, num487].type == 70 ||
                                        Main.tile[num486, num487].type == 71 || Main.tile[num486, num487].type == 72)
                                    {
                                        flag37 = false;
                                        break;
                                    }
                                }
                            }

                            if (flag37)
                            {
                                Main.tile[num484, num483].type = 224;
                            }

                            break;
                        }
                        case 1:
                            Main.tile[num484, num483].type = 161;
                            break;
                    }
                }
            }
        });
        AddGenerationPass("Mud Caves To Grass", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[21].Value;
            for (int num482 = 0; num482 < numMCaves; num482++)
            {
                int i3 = mCaveX[num482];
                int j2 = mCaveY[num482];
                CaveOpenater(i3, j2);
                Cavinator(i3, j2, genRand.Next(40, 50));
            }
        });
        AddGenerationPass("Beaches", delegate(GenerationProgress progress)
        {
            int num463 = 0;
            int num464 = 0;
            int num465 = 20;
            int num466 = Main.maxTilesX - 20;
            progress.Message = Lang.gen[22].Value;
            for (int num467 = 0; num467 < 2; num467++)
            {
                int num468 = 0;
                int num469 = 0;
                if (num467 == 0)
                {
                    num468 = 0;
                    num469 = genRand.Next(125, 200) + 50;
                    if (dungeonSide == 1)
                    {
                        num469 = 275;
                    }

                    int num470 = 0;
                    float num471 = 1f;
                    int num472;
                    for (num472 = 0; !Main.tile[num469 - 1, num472].active(); num472++)
                    {
                    }

                    num463 = num472;
                    num472 += genRand.Next(1, 5);
                    for (int num473 = num469 - 1; num473 >= num468; num473--)
                    {
                        num470++;
                        if (num470 < 3)
                        {
                            num471 += (float) genRand.Next(10, 20) * 0.2f;
                        }
                        else if (num470 < 6)
                        {
                            num471 += (float) genRand.Next(10, 20) * 0.15f;
                        }
                        else if (num470 < 9)
                        {
                            num471 += (float) genRand.Next(10, 20) * 0.1f;
                        }
                        else if (num470 < 15)
                        {
                            num471 += (float) genRand.Next(10, 20) * 0.07f;
                        }
                        else if (num470 < 50)
                        {
                            num471 += (float) genRand.Next(10, 20) * 0.05f;
                        }
                        else if (num470 < 75)
                        {
                            num471 += (float) genRand.Next(10, 20) * 0.04f;
                        }
                        else if (num470 < 100)
                        {
                            num471 += (float) genRand.Next(10, 20) * 0.03f;
                        }
                        else if (num470 < 125)
                        {
                            num471 += (float) genRand.Next(10, 20) * 0.02f;
                        }
                        else if (num470 < 150)
                        {
                            num471 += (float) genRand.Next(10, 20) * 0.01f;
                        }
                        else if (num470 < 175)
                        {
                            num471 += (float) genRand.Next(10, 20) * 0.005f;
                        }
                        else if (num470 < 200)
                        {
                            num471 += (float) genRand.Next(10, 20) * 0.001f;
                        }
                        else if (num470 < 230)
                        {
                            num471 += (float) genRand.Next(10, 20) * 0.01f;
                        }
                        else if (num470 < 235)
                        {
                            num471 += (float) genRand.Next(10, 20) * 0.05f;
                        }
                        else if (num470 < 240)
                        {
                            num471 += (float) genRand.Next(10, 20) * 0.1f;
                        }
                        else if (num470 < 245)
                        {
                            num471 += (float) genRand.Next(10, 20) * 0.05f;
                        }
                        else if (num470 < 255)
                        {
                            num471 += (float) genRand.Next(10, 20) * 0.01f;
                        }

                        if (num470 == 235)
                        {
                            num466 = num473;
                        }

                        if (num470 == 235)
                        {
                            num465 = num473;
                        }

                        int num474 = genRand.Next(15, 20);
                        for (int num475 = 0; (float) num475 < (float) num472 + num471 + (float) num474; num475++)
                        {
                            if ((float) num475 < (float) num472 + num471 * 0.75f - 3f)
                            {
                                Main.tile[num473, num475].active(false);
                                if (num475 > num472)
                                {
                                    Main.tile[num473, num475].liquid = byte.MaxValue;
                                }
                                else if (num475 == num472)
                                {
                                    Main.tile[num473, num475].liquid = 127;
                                }
                            }
                            else if (num475 > num472)
                            {
                                Main.tile[num473, num475].type = 53;
                                Main.tile[num473, num475].active(true);
                            }

                            Main.tile[num473, num475].wall = 0;
                        }
                    }
                }
                else
                {
                    num468 = Main.maxTilesX - genRand.Next(125, 200) - 50;
                    num469 = Main.maxTilesX;
                    if (dungeonSide == -1)
                    {
                        num468 = Main.maxTilesX - 275;
                    }

                    float num476 = 1f;
                    int num477 = 0;
                    int num478;
                    for (num478 = 0; !Main.tile[num468, num478].active(); num478++)
                    {
                    }

                    num464 = num478;
                    num478 += genRand.Next(1, 5);
                    for (int num479 = num468; num479 < num469; num479++)
                    {
                        num477++;
                        if (num477 < 3)
                        {
                            num476 += (float) genRand.Next(10, 20) * 0.2f;
                        }
                        else if (num477 < 6)
                        {
                            num476 += (float) genRand.Next(10, 20) * 0.15f;
                        }
                        else if (num477 < 9)
                        {
                            num476 += (float) genRand.Next(10, 20) * 0.1f;
                        }
                        else if (num477 < 15)
                        {
                            num476 += (float) genRand.Next(10, 20) * 0.07f;
                        }
                        else if (num477 < 50)
                        {
                            num476 += (float) genRand.Next(10, 20) * 0.05f;
                        }
                        else if (num477 < 75)
                        {
                            num476 += (float) genRand.Next(10, 20) * 0.04f;
                        }
                        else if (num477 < 100)
                        {
                            num476 += (float) genRand.Next(10, 20) * 0.03f;
                        }
                        else if (num477 < 125)
                        {
                            num476 += (float) genRand.Next(10, 20) * 0.02f;
                        }
                        else if (num477 < 150)
                        {
                            num476 += (float) genRand.Next(10, 20) * 0.01f;
                        }
                        else if (num477 < 175)
                        {
                            num476 += (float) genRand.Next(10, 20) * 0.005f;
                        }
                        else if (num477 < 200)
                        {
                            num476 += (float) genRand.Next(10, 20) * 0.001f;
                        }
                        else if (num477 < 230)
                        {
                            num476 += (float) genRand.Next(10, 20) * 0.01f;
                        }
                        else if (num477 < 235)
                        {
                            num476 += (float) genRand.Next(10, 20) * 0.05f;
                        }
                        else if (num477 < 240)
                        {
                            num476 += (float) genRand.Next(10, 20) * 0.1f;
                        }
                        else if (num477 < 245)
                        {
                            num476 += (float) genRand.Next(10, 20) * 0.05f;
                        }
                        else if (num477 < 255)
                        {
                            num476 += (float) genRand.Next(10, 20) * 0.01f;
                        }

                        if (num477 == 235)
                        {
                            num466 = num479;
                        }

                        int num480 = genRand.Next(15, 20);
                        for (int num481 = 0; (float) num481 < (float) num478 + num476 + (float) num480; num481++)
                        {
                            if ((float) num481 < (float) num478 + num476 * 0.75f - 3f &&
                                (double) num481 < Main.worldSurface - 2.0)
                            {
                                Main.tile[num479, num481].active(false);
                                if (num481 > num478)
                                {
                                    Main.tile[num479, num481].liquid = byte.MaxValue;
                                }
                                else if (num481 == num478)
                                {
                                    Main.tile[num479, num481].liquid = 127;
                                }
                            }
                            else if (num481 > num478)
                            {
                                Main.tile[num479, num481].type = 53;
                                Main.tile[num479, num481].active(true);
                            }

                            Main.tile[num479, num481].wall = 0;
                        }
                    }
                }
            }

            for (; !Main.tile[num465, num463].active(); num463++)
            {
            }

            num463++;
            for (; !Main.tile[num466, num464].active(); num464++)
            {
            }

            num464++;
        });
        AddGenerationPass("Gems", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[23].Value;
            for (int num450 = 63; num450 <= 68; num450++)
            {
                float num451 = 0f;
                switch (num450)
                {
                    case 67:
                        num451 = (float) Main.maxTilesX * 0.5f;
                        break;
                    case 66:
                        num451 = (float) Main.maxTilesX * 0.45f;
                        break;
                    case 63:
                        num451 = (float) Main.maxTilesX * 0.3f;
                        break;
                    case 65:
                        num451 = (float) Main.maxTilesX * 0.25f;
                        break;
                    case 64:
                        num451 = (float) Main.maxTilesX * 0.1f;
                        break;
                    case 68:
                        num451 = (float) Main.maxTilesX * 0.05f;
                        break;
                }

                num451 *= 0.2f;
                for (int num452 = 0; (float) num452 < num451; num452++)
                {
                    int num453 = genRand.Next(0, Main.maxTilesX);
                    int num454 = genRand.Next((int) Main.worldSurface, Main.maxTilesY);
                    while (Main.tile[num453, num454].type != 1)
                    {
                        num453 = genRand.Next(0, Main.maxTilesX);
                        num454 = genRand.Next((int) Main.worldSurface, Main.maxTilesY);
                    }

                    TileRunner(num453, num454, (double) genRand.Next(2, 6), genRand.Next(3, 7), num450, false, 0f, 0f,
                        false, true);
                }
            }

            for (int num455 = 0; num455 < 2; num455++)
            {
                int num456 = 1;
                int num457 = 5;
                int num458 = Main.maxTilesX - 5;
                if (num455 == 1)
                {
                    num456 = -1;
                    num457 = Main.maxTilesX - 5;
                    num458 = 5;
                }

                for (int num459 = num457; num459 != num458; num459 += num456)
                {
                    for (int num460 = 10; num460 < Main.maxTilesY - 10; num460++)
                    {
                        if (Main.tile[num459, num460].active() && Main.tile[num459, num460 + 1].active() &&
                            Main.tileSand[Main.tile[num459, num460].type] &&
                            Main.tileSand[Main.tile[num459, num460 + 1].type])
                        {
                            ushort type4 = Main.tile[num459, num460].type;
                            int num461 = num459 + num456;
                            int num462 = num460 + 1;
                            if (!Main.tile[num461, num460].active() && !Main.tile[num461, num460 + 1].active())
                            {
                                for (; !Main.tile[num461, num462].active(); num462++)
                                {
                                }

                                num462--;
                                Main.tile[num459, num460].active(false);
                                Main.tile[num461, num462].active(true);
                                Main.tile[num461, num462].type = type4;
                            }
                        }
                    }
                }
            }
        });
        AddGenerationPass("Gravitating Sand", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[24].Value;
            for (int num446 = 0; num446 < Main.maxTilesX; num446++)
            {
                float value13 = (float) num446 / (float) (Main.maxTilesX - 1);
                progress.Set(value13);
                bool flag36 = false;
                int num447 = 0;
                for (int num448 = Main.maxTilesY - 1; num448 > 0; num448--)
                {
                    if (SolidOrSlopedTile(num446, num448))
                    {
                        ushort type3 = Main.tile[num446, num448].type;
                        if (flag36 && num448 < (int) Main.worldSurface && num448 != num447 - 1 &&
                            TileID.Sets.Falling[type3])
                        {
                            for (int num449 = num448; num449 < num447; num449++)
                            {
                                Main.tile[num446, num449].type = type3;
                                Main.tile[num446, num449].active(true);
                            }
                        }

                        flag36 = true;
                        num447 = num448;
                    }
                }
            }
        });
        AddGenerationPass("Clean Up Dirt", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[25].Value;
            for (int num440 = 3; num440 < Main.maxTilesX - 3; num440++)
            {
                float num441 = (float) num440 / (float) Main.maxTilesX;
                progress.Set(0.5f * num441);
                bool flag34 = true;
                for (int num442 = 0; (double) num442 < Main.worldSurface; num442++)
                {
                    if (flag34)
                    {
                        if (Main.tile[num440, num442].wall == 2 || Main.tile[num440, num442].wall == 40 ||
                            Main.tile[num440, num442].wall == 64)
                        {
                            Main.tile[num440, num442].wall = 0;
                        }

                        if (Main.tile[num440, num442].type != 53 && Main.tile[num440, num442].type != 112 &&
                            Main.tile[num440, num442].type != 234)
                        {
                            if (Main.tile[num440 - 1, num442].wall == 2 || Main.tile[num440 - 1, num442].wall == 40 ||
                                Main.tile[num440 - 1, num442].wall == 40)
                            {
                                Main.tile[num440 - 1, num442].wall = 0;
                            }

                            if ((Main.tile[num440 - 2, num442].wall == 2 || Main.tile[num440 - 2, num442].wall == 40 ||
                                 Main.tile[num440 - 2, num442].wall == 40) && genRand.Next(2) == 0)
                            {
                                Main.tile[num440 - 2, num442].wall = 0;
                            }

                            if ((Main.tile[num440 - 3, num442].wall == 2 || Main.tile[num440 - 3, num442].wall == 40 ||
                                 Main.tile[num440 - 3, num442].wall == 40) && genRand.Next(2) == 0)
                            {
                                Main.tile[num440 - 3, num442].wall = 0;
                            }

                            if (Main.tile[num440 + 1, num442].wall == 2 || Main.tile[num440 + 1, num442].wall == 40 ||
                                Main.tile[num440 + 1, num442].wall == 40)
                            {
                                Main.tile[num440 + 1, num442].wall = 0;
                            }

                            if ((Main.tile[num440 + 2, num442].wall == 2 || Main.tile[num440 + 2, num442].wall == 40 ||
                                 Main.tile[num440 + 2, num442].wall == 40) && genRand.Next(2) == 0)
                            {
                                Main.tile[num440 + 2, num442].wall = 0;
                            }

                            if ((Main.tile[num440 + 3, num442].wall == 2 || Main.tile[num440 + 3, num442].wall == 40 ||
                                 Main.tile[num440 + 3, num442].wall == 40) && genRand.Next(2) == 0)
                            {
                                Main.tile[num440 + 3, num442].wall = 0;
                            }

                            if (Main.tile[num440, num442].active())
                            {
                                flag34 = false;
                            }
                        }
                    }
                    else if (Main.tile[num440, num442].wall == 0 && Main.tile[num440, num442 + 1].wall == 0 &&
                             Main.tile[num440, num442 + 2].wall == 0 && Main.tile[num440, num442 + 3].wall == 0 &&
                             Main.tile[num440, num442 + 4].wall == 0 && Main.tile[num440 - 1, num442].wall == 0 &&
                             Main.tile[num440 + 1, num442].wall == 0 && Main.tile[num440 - 2, num442].wall == 0 &&
                             Main.tile[num440 + 2, num442].wall == 0 && !Main.tile[num440, num442].active() &&
                             !Main.tile[num440, num442 + 1].active() && !Main.tile[num440, num442 + 2].active() &&
                             !Main.tile[num440, num442 + 3].active())
                    {
                        flag34 = true;
                    }
                }
            }

            for (int num443 = Main.maxTilesX - 5; num443 >= 5; num443--)
            {
                float num444 = (float) num443 / (float) Main.maxTilesX;
                progress.Set(1f - 0.5f * num444);
                bool flag35 = true;
                for (int num445 = 0; (double) num445 < Main.worldSurface; num445++)
                {
                    if (flag35)
                    {
                        if (Main.tile[num443, num445].wall == 2 || Main.tile[num443, num445].wall == 40 ||
                            Main.tile[num443, num445].wall == 64)
                        {
                            Main.tile[num443, num445].wall = 0;
                        }

                        if (Main.tile[num443, num445].type != 53)
                        {
                            if (Main.tile[num443 - 1, num445].wall == 2 || Main.tile[num443 - 1, num445].wall == 40 ||
                                Main.tile[num443 - 1, num445].wall == 40)
                            {
                                Main.tile[num443 - 1, num445].wall = 0;
                            }

                            if ((Main.tile[num443 - 2, num445].wall == 2 || Main.tile[num443 - 2, num445].wall == 40 ||
                                 Main.tile[num443 - 2, num445].wall == 40) && genRand.Next(2) == 0)
                            {
                                Main.tile[num443 - 2, num445].wall = 0;
                            }

                            if ((Main.tile[num443 - 3, num445].wall == 2 || Main.tile[num443 - 3, num445].wall == 40 ||
                                 Main.tile[num443 - 3, num445].wall == 40) && genRand.Next(2) == 0)
                            {
                                Main.tile[num443 - 3, num445].wall = 0;
                            }

                            if (Main.tile[num443 + 1, num445].wall == 2 || Main.tile[num443 + 1, num445].wall == 40 ||
                                Main.tile[num443 + 1, num445].wall == 40)
                            {
                                Main.tile[num443 + 1, num445].wall = 0;
                            }

                            if ((Main.tile[num443 + 2, num445].wall == 2 || Main.tile[num443 + 2, num445].wall == 40 ||
                                 Main.tile[num443 + 2, num445].wall == 40) && genRand.Next(2) == 0)
                            {
                                Main.tile[num443 + 2, num445].wall = 0;
                            }

                            if ((Main.tile[num443 + 3, num445].wall == 2 || Main.tile[num443 + 3, num445].wall == 40 ||
                                 Main.tile[num443 + 3, num445].wall == 40) && genRand.Next(2) == 0)
                            {
                                Main.tile[num443 + 3, num445].wall = 0;
                            }

                            if (Main.tile[num443, num445].active())
                            {
                                flag35 = false;
                            }
                        }
                    }
                    else if (Main.tile[num443, num445].wall == 0 && Main.tile[num443, num445 + 1].wall == 0 &&
                             Main.tile[num443, num445 + 2].wall == 0 && Main.tile[num443, num445 + 3].wall == 0 &&
                             Main.tile[num443, num445 + 4].wall == 0 && Main.tile[num443 - 1, num445].wall == 0 &&
                             Main.tile[num443 + 1, num445].wall == 0 && Main.tile[num443 - 2, num445].wall == 0 &&
                             Main.tile[num443 + 2, num445].wall == 0 && !Main.tile[num443, num445].active() &&
                             !Main.tile[num443, num445 + 1].active() && !Main.tile[num443, num445 + 2].active() &&
                             !Main.tile[num443, num445 + 3].active())
                    {
                        flag35 = true;
                    }
                }
            }
        });
        AddGenerationPass("Pyramids", delegate
        {
            for (int num434 = 0; num434 < numPyr; num434++)
            {
                int num435 = PyrX[num434];
                int num436 = PyrY[num434];
                if (num435 > 300 && num435 < Main.maxTilesX - 300 &&
                    (dungeonSide >= 0 || !((double) num435 < (double) dungeonX + (double) Main.maxTilesX * 0.15)) &&
                    (dungeonSide <= 0 || !((double) num435 > (double) dungeonX - (double) Main.maxTilesX * 0.15)))
                {
                    for (; !Main.tile[num435, num436].active() && (double) num436 < Main.worldSurface; num436++)
                    {
                    }

                    if ((double) num436 < Main.worldSurface && Main.tile[num435, num436].type == 53)
                    {
                        int num437 = Main.maxTilesX;
                        for (int num438 = 0; num438 < num434; num438++)
                        {
                            int num439 = Math.Abs(num435 - PyrX[num438]);
                            if (num439 < num437)
                            {
                                num437 = num439;
                            }
                        }

                        if (num437 >= 250)
                        {
                            num436--;
                            Pyramid(num435, num436);
                        }
                    }
                }
            }
        });
        AddGenerationPass("Dirt Rock Wall Runner", delegate
        {
            for (int num431 = 0; num431 < Main.maxTilesX; num431++)
            {
                int num432 = genRand.Next(10, Main.maxTilesX - 10);
                int num433 = genRand.Next(10, (int) Main.worldSurface);
                if (Main.tile[num432, num433].wall == 2)
                {
                    DirtyRockRunner(num432, num433);
                }
            }
        });
        AddGenerationPass("Living Trees", delegate
        {
            float num423 = (float) (Main.maxTilesX / 4200);
            int num424 = genRand.Next(0, (int) (3f * num423));
            for (int num425 = 0; num425 < num424; num425++)
            {
                bool flag32 = false;
                int num426 = 0;
                while (!flag32)
                {
                    num426++;
                    if (num426 > 1000)
                    {
                        flag32 = true;
                    }

                    int num427 = genRand.Next(300, Main.maxTilesX - 300);
                    if (num427 <= Main.maxTilesX / 2 - 100 || num427 >= Main.maxTilesX / 2 + 100)
                    {
                        int num428;
                        for (num428 = 0;
                            !Main.tile[num427, num428].active() && (double) num428 < Main.worldSurface;
                            num428++)
                        {
                        }

                        if (Main.tile[num427, num428].type == 0)
                        {
                            num428--;
                            if (num428 > 150)
                            {
                                bool flag33 = true;
                                for (int num429 = num427 - 50; num429 < num427 + 50; num429++)
                                {
                                    for (int num430 = num428 - 50; num430 < num428 + 50; num430++)
                                    {
                                        if (Main.tile[num429, num430].active())
                                        {
                                            int type2 = Main.tile[num429, num430].type;
                                            if (type2 == 41 || type2 == 43 || type2 == 44 || type2 == 189 ||
                                                type2 == 196)
                                            {
                                                flag33 = false;
                                            }
                                        }
                                    }
                                }

                                if (flag33)
                                {
                                    flag32 = GrowLivingTree(num427, num428);
                                }
                            }
                        }
                    }
                }
            }

            Main.tileSolid[192] = false;
        });
        AddGenerationPass("Wood Tree Walls", delegate
        {
            for (int num419 = 25; num419 < Main.maxTilesX - 25; num419++)
            {
                for (int num420 = 25; (double) num420 < Main.worldSurface; num420++)
                {
                    if (Main.tile[num419, num420].type == 191 || Main.tile[num419, num420 - 1].type == 191 ||
                        Main.tile[num419 - 1, num420].type == 191 || Main.tile[num419 + 1, num420].type == 191 ||
                        Main.tile[num419, num420 + 1].type == 191)
                    {
                        bool flag31 = true;
                        for (int num421 = num419 - 1; num421 <= num419 + 1; num421++)
                        {
                            for (int num422 = num420 - 1; num422 <= num420 + 1; num422++)
                            {
                                if (num421 != num419 && num422 != num420 && Main.tile[num421, num422].type != 191 &&
                                    Main.tile[num421, num422].wall != 78)
                                {
                                    flag31 = false;
                                }
                            }
                        }

                        if (flag31)
                        {
                            Main.tile[num419, num420].wall = 78;
                        }
                    }
                }
            }
        });
        AddGenerationPass("Altars", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[26].Value;
            int num414 = (int) ((float) (Main.maxTilesX * Main.maxTilesY) * 2E-05f);
            for (int num415 = 0; num415 < num414; num415++)
            {
                progress.Set((float) num415 / (float) num414);
                for (int num416 = 0; num416 < 10000; num416++)
                {
                    int num417 = genRand.Next(1, Main.maxTilesX - 3);
                    int num418 = (int) (worldSurfaceHigh + 20.0);
                    int style2 = crimson ? 1 : 0;
                    Place3x2(num417, num418, 26, style2);
                    if (Main.tile[num417, num418].type == 26)
                    {
                        break;
                    }
                }
            }
        });
        AddGenerationPass("Wet Jungle", delegate
        {
            for (int num412 = 0; num412 < Main.maxTilesX; num412++)
            {
                i2 = num412;
                for (int num413 = (int) worldSurfaceLow; (double) num413 < Main.worldSurface - 1.0; num413++)
                {
                    if (Main.tile[i2, num413].active())
                    {
                        if (Main.tile[i2, num413].type == 60)
                        {
                            Main.tile[i2, num413 - 1].liquid = byte.MaxValue;
                            Main.tile[i2, num413 - 2].liquid = byte.MaxValue;
                        }

                        break;
                    }
                }
            }
        });
        AddGenerationPass("Remove Water From Sand", delegate
        {
            for (int num409 = 400; num409 < Main.maxTilesX - 400; num409++)
            {
                i2 = num409;
                for (int num410 = (int) worldSurfaceLow; (double) num410 < Main.worldSurface - 1.0; num410++)
                {
                    if (Main.tile[i2, num410].active())
                    {
                        ushort type = Main.tile[i2, num410].type;
                        if (type == 53 || type == 396 || type == 397 || type == 404 || type == 407)
                        {
                            int num411 = num410;
                            while ((double) num411 > worldSurfaceLow)
                            {
                                num411--;
                                Main.tile[i2, num411].liquid = 0;
                            }
                        }

                        break;
                    }
                }
            }

            Main.tileSolid[192] = true;
        });
        AddGenerationPass("Jungle Temple", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[70].Value;
            bool flag30 = true;
            while (flag30)
            {
                int num407 = genRand.Next((int) Main.rockLayer, Main.maxTilesY - 500);
                int num408 = (dungeonSide >= 0)
                    ? genRand.Next((int) ((double) Main.maxTilesX * 0.15), (int) ((double) Main.maxTilesX * 0.4))
                    : genRand.Next((int) ((double) Main.maxTilesX * 0.6), (int) ((double) Main.maxTilesX * 0.85));
                if (Main.tile[num408, num407].active() && Main.tile[num408, num407].type == 60)
                {
                    flag30 = false;
                    makeTemple(num408, num407);
                }
            }
        });
        AddGenerationPass("Hives", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[71].Value;
            float num398 = (float) (Main.maxTilesX / 4200);
            float num399 = (float) (1 + genRand.Next((int) (5f * num398), (int) (8f * num398)));
            int num400 = 10000;
            while (num399 > 0f && num400 > 0)
            {
                num400--;
                Point origin2 = RandomWorldPoint((int) (Main.worldSurface + Main.rockLayer) >> 1, 20, 300, 20);
                if (Biomes<HiveBiome>.Place(origin2, structures))
                {
                    num399 -= 1f;
                    int num401 = genRand.Next(5);
                    int num402 = 0;
                    int num403 = 10000;
                    while (num402 < num401 && num403 > 0)
                    {
                        float num404 = genRand.NextFloat() * 60f + 30f;
                        float num405 = genRand.NextFloat() * 6.28318548f;
                        int num406 = (int) (Math.Cos((double) num405) * (double) num404) + origin2.X;
                        int y8 = (int) (Math.Sin((double) num405) * (double) num404) + origin2.Y;
                        num403--;
                        if (num406 > 50 && num406 < Main.maxTilesX - 50 &&
                            Biomes<HoneyPatchBiome>.Place(num406, y8, structures))
                        {
                            num402++;
                        }
                    }
                }
            }
        });
        AddGenerationPass("Jungle Chests", delegate
        {
            int num372 = genRand.Next(40, Main.maxTilesX - 40);
            int num373 = genRand.Next((int) (Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 400);
            float num374 = (float) genRand.Next(7, 12);
            num374 *= (float) (Main.maxTilesX / 4200);
            for (int num375 = 0; (float) num375 < num374; num375++)
            {
                bool flag28 = true;
                while (flag28)
                {
                    num372 = genRand.Next(40, Main.maxTilesX / 2 - 40);
                    if (dungeonSide < 0)
                    {
                        num372 += Main.maxTilesX / 2;
                    }

                    num373 = genRand.Next((int) (Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 400);
                    if (Main.tile[num372, num373].type == 60)
                    {
                        int num376 = 30;
                        flag28 = false;
                        for (int num377 = num372 - num376; num377 < num372 + num376; num377 += 3)
                        {
                            for (int num378 = num373 - num376; num378 < num373 + num376; num378 += 3)
                            {
                                if (Main.tile[num377, num378].active() &&
                                    (Main.tile[num377, num378].type == 225 || Main.tile[num377, num378].type == 229 ||
                                     Main.tile[num377, num378].type == 226 || Main.tile[num377, num378].type == 119 ||
                                     Main.tile[num377, num378].type == 120))
                                {
                                    flag28 = false;
                                }

                                if (Main.tile[num377, num378].wall == 86 || Main.tile[num377, num378].wall == 87)
                                {
                                    flag28 = false;
                                }
                            }
                        }
                    }

                    if (!flag28)
                    {
                        int num379 = genRand.Next(2, 4);
                        int num380 = genRand.Next(2, 4);
                        int num381 = 0;
                        if (jungleHut == 119)
                        {
                            num381 = 23;
                        }
                        else if (jungleHut == 120)
                        {
                            num381 = 24;
                        }
                        else if (jungleHut == 158)
                        {
                            num381 = 42;
                        }
                        else if (jungleHut == 175)
                        {
                            num381 = 45;
                        }
                        else if (jungleHut == 45)
                        {
                            num381 = 10;
                        }

                        for (int num382 = num372 - num379 - 1; num382 <= num372 + num379 + 1; num382++)
                        {
                            for (int num383 = num373 - num380 - 1; num383 <= num373 + num380 + 1; num383++)
                            {
                                Main.tile[num382, num383].active(true);
                                Main.tile[num382, num383].type = jungleHut;
                                Main.tile[num382, num383].liquid = 0;
                                Main.tile[num382, num383].lava(false);
                            }
                        }

                        for (int num384 = num372 - num379; num384 <= num372 + num379; num384++)
                        {
                            for (int num385 = num373 - num380; num385 <= num373 + num380; num385++)
                            {
                                Main.tile[num384, num385].active(false);
                                Main.tile[num384, num385].wall = (byte) num381;
                            }
                        }

                        bool flag29 = false;
                        int num386 = 0;
                        while (!flag29 && num386 < 100)
                        {
                            num386++;
                            int num387 = genRand.Next(num372 - num379, num372 + num379 + 1);
                            int num388 = genRand.Next(num373 - num380, num373 + num380 - 2);
                            PlaceTile(num387, num388, 4, true, false, -1, 3);
                            if (Main.tile[num387, num388].type == 4)
                            {
                                flag29 = true;
                            }
                        }

                        for (int num389 = num372 - num379 - 1; num389 <= num372 + num379 + 1; num389++)
                        {
                            for (int num390 = num373 + num380 - 2; num390 <= num373 + num380; num390++)
                            {
                                Main.tile[num389, num390].active(false);
                            }
                        }

                        for (int num391 = num372 - num379 - 1; num391 <= num372 + num379 + 1; num391++)
                        {
                            for (int num392 = num373 + num380 - 2; num392 <= num373 + num380 - 1; num392++)
                            {
                                Main.tile[num391, num392].active(false);
                            }
                        }

                        for (int num393 = num372 - num379 - 1; num393 <= num372 + num379 + 1; num393++)
                        {
                            int num394 = 4;
                            int num395 = num373 + num380 + 2;
                            while (!Main.tile[num393, num395].active() && num395 < Main.maxTilesY && num394 > 0)
                            {
                                Main.tile[num393, num395].active(true);
                                Main.tile[num393, num395].type = 59;
                                num395++;
                                num394--;
                            }
                        }

                        num379 -= genRand.Next(1, 3);
                        int num396 = num373 - num380 - 2;
                        while (num379 > -1)
                        {
                            for (int num397 = num372 - num379 - 1; num397 <= num372 + num379 + 1; num397++)
                            {
                                Main.tile[num397, num396].active(true);
                                Main.tile[num397, num396].type = jungleHut;
                            }

                            num379 -= genRand.Next(1, 3);
                            num396--;
                        }

                        JChestX[numJChests] = num372;
                        JChestY[numJChests] = num373;
                        numJChests++;
                    }
                }
            }

            Main.tileSolid[137] = false;
        });
        AddGenerationPass("Smooth World", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[60].Value;
            for (int num368 = 20; num368 < Main.maxTilesX - 20; num368++)
            {
                float value12 = (float) num368 / (float) Main.maxTilesX;
                progress.Set(value12);
                for (int num369 = 20; num369 < Main.maxTilesY - 20; num369++)
                {
                    if (Main.tile[num368, num369].type != 48 && Main.tile[num368, num369].type != 137 &&
                        Main.tile[num368, num369].type != 232 && Main.tile[num368, num369].type != 191 &&
                        Main.tile[num368, num369].type != 151 && Main.tile[num368, num369].type != 274)
                    {
                        if (!Main.tile[num368, num369 - 1].active())
                        {
                            if (SolidTile(num368, num369) &&
                                TileID.Sets.CanBeClearedDuringGeneration[Main.tile[num368, num369].type])
                            {
                                if (!Main.tile[num368 - 1, num369].halfBrick() &&
                                    !Main.tile[num368 + 1, num369].halfBrick() &&
                                    Main.tile[num368 - 1, num369].slope() == 0 &&
                                    Main.tile[num368 + 1, num369].slope() == 0)
                                {
                                    if (SolidTile(num368, num369 + 1))
                                    {
                                        if (!SolidTile(num368 - 1, num369) &&
                                            !Main.tile[num368 - 1, num369 + 1].halfBrick() &&
                                            SolidTile(num368 - 1, num369 + 1) && SolidTile(num368 + 1, num369) &&
                                            !Main.tile[num368 + 1, num369 - 1].active())
                                        {
                                            if (genRand.Next(2) == 0)
                                            {
                                                SlopeTile(num368, num369, 2);
                                            }
                                            else
                                            {
                                                PoundTile(num368, num369);
                                            }
                                        }
                                        else if (!SolidTile(num368 + 1, num369) &&
                                                 !Main.tile[num368 + 1, num369 + 1].halfBrick() &&
                                                 SolidTile(num368 + 1, num369 + 1) && SolidTile(num368 - 1, num369) &&
                                                 !Main.tile[num368 - 1, num369 - 1].active())
                                        {
                                            if (genRand.Next(2) == 0)
                                            {
                                                SlopeTile(num368, num369, 1);
                                            }
                                            else
                                            {
                                                PoundTile(num368, num369);
                                            }
                                        }
                                        else if (SolidTile(num368 + 1, num369 + 1) &&
                                                 SolidTile(num368 - 1, num369 + 1) &&
                                                 !Main.tile[num368 + 1, num369].active() &&
                                                 !Main.tile[num368 - 1, num369].active())
                                        {
                                            PoundTile(num368, num369);
                                        }

                                        if (SolidTile(num368, num369))
                                        {
                                            if (SolidTile(num368 - 1, num369) && SolidTile(num368 + 1, num369 + 2) &&
                                                !Main.tile[num368 + 1, num369].active() &&
                                                !Main.tile[num368 + 1, num369 + 1].active() &&
                                                !Main.tile[num368 - 1, num369 - 1].active())
                                            {
                                                KillTile(num368, num369, false, false, false);
                                            }
                                            else if (SolidTile(num368 + 1, num369) &&
                                                     SolidTile(num368 - 1, num369 + 2) &&
                                                     !Main.tile[num368 - 1, num369].active() &&
                                                     !Main.tile[num368 - 1, num369 + 1].active() &&
                                                     !Main.tile[num368 + 1, num369 - 1].active())
                                            {
                                                KillTile(num368, num369, false, false, false);
                                            }
                                            else if (!Main.tile[num368 - 1, num369 + 1].active() &&
                                                     !Main.tile[num368 - 1, num369].active() &&
                                                     SolidTile(num368 + 1, num369) && SolidTile(num368, num369 + 2))
                                            {
                                                if (genRand.Next(5) == 0)
                                                {
                                                    KillTile(num368, num369, false, false, false);
                                                }
                                                else if (genRand.Next(5) == 0)
                                                {
                                                    PoundTile(num368, num369);
                                                }
                                                else
                                                {
                                                    SlopeTile(num368, num369, 2);
                                                }
                                            }
                                            else if (!Main.tile[num368 + 1, num369 + 1].active() &&
                                                     !Main.tile[num368 + 1, num369].active() &&
                                                     SolidTile(num368 - 1, num369) && SolidTile(num368, num369 + 2))
                                            {
                                                if (genRand.Next(5) == 0)
                                                {
                                                    KillTile(num368, num369, false, false, false);
                                                }
                                                else if (genRand.Next(5) == 0)
                                                {
                                                    PoundTile(num368, num369);
                                                }
                                                else
                                                {
                                                    SlopeTile(num368, num369, 1);
                                                }
                                            }
                                        }
                                    }

                                    if (SolidTile(num368, num369) && !Main.tile[num368 - 1, num369].active() &&
                                        !Main.tile[num368 + 1, num369].active())
                                    {
                                        KillTile(num368, num369, false, false, false);
                                    }
                                }
                            }
                            else if (!Main.tile[num368, num369].active() && Main.tile[num368, num369 + 1].type != 151 &&
                                     Main.tile[num368, num369 + 1].type != 274)
                            {
                                if (Main.tile[num368 + 1, num369].type != 190 &&
                                    Main.tile[num368 + 1, num369].type != 48 &&
                                    Main.tile[num368 + 1, num369].type != 232 && SolidTile(num368 - 1, num369 + 1) &&
                                    SolidTile(num368 + 1, num369) && !Main.tile[num368 - 1, num369].active() &&
                                    !Main.tile[num368 + 1, num369 - 1].active())
                                {
                                    PlaceTile(num368, num369, Main.tile[num368, num369 + 1].type, false, false, -1, 0);
                                    if (genRand.Next(2) == 0)
                                    {
                                        SlopeTile(num368, num369, 2);
                                    }
                                    else
                                    {
                                        PoundTile(num368, num369);
                                    }
                                }

                                if (Main.tile[num368 - 1, num369].type != 190 &&
                                    Main.tile[num368 - 1, num369].type != 48 &&
                                    Main.tile[num368 - 1, num369].type != 232 && SolidTile(num368 + 1, num369 + 1) &&
                                    SolidTile(num368 - 1, num369) && !Main.tile[num368 + 1, num369].active() &&
                                    !Main.tile[num368 - 1, num369 - 1].active())
                                {
                                    PlaceTile(num368, num369, Main.tile[num368, num369 + 1].type, false, false, -1, 0);
                                    if (genRand.Next(2) == 0)
                                    {
                                        SlopeTile(num368, num369, 1);
                                    }
                                    else
                                    {
                                        PoundTile(num368, num369);
                                    }
                                }
                            }
                        }
                        else if (!Main.tile[num368, num369 + 1].active() && genRand.Next(2) == 0 &&
                                 SolidTile(num368, num369) && !Main.tile[num368 - 1, num369].halfBrick() &&
                                 !Main.tile[num368 + 1, num369].halfBrick() &&
                                 Main.tile[num368 - 1, num369].slope() == 0 &&
                                 Main.tile[num368 + 1, num369].slope() == 0 && SolidTile(num368, num369 - 1))
                        {
                            if (SolidTile(num368 - 1, num369) && !SolidTile(num368 + 1, num369) &&
                                SolidTile(num368 - 1, num369 - 1))
                            {
                                SlopeTile(num368, num369, 3);
                            }
                            else if (SolidTile(num368 + 1, num369) && !SolidTile(num368 - 1, num369) &&
                                     SolidTile(num368 + 1, num369 - 1))
                            {
                                SlopeTile(num368, num369, 4);
                            }
                        }

                        if (TileID.Sets.Conversion.Sand[Main.tile[num368, num369].type])
                        {
                            Tile.SmoothSlope(num368, num369, false);
                        }
                    }
                }
            }

            for (int num370 = 20; num370 < Main.maxTilesX - 20; num370++)
            {
                for (int num371 = 20; num371 < Main.maxTilesY - 20; num371++)
                {
                    if (genRand.Next(2) == 0 && !Main.tile[num370, num371 - 1].active() &&
                        Main.tile[num370, num371].type != 137 && Main.tile[num370, num371].type != 48 &&
                        Main.tile[num370, num371].type != 232 && Main.tile[num370, num371].type != 191 &&
                        Main.tile[num370, num371].type != 151 && Main.tile[num370, num371].type != 274 &&
                        Main.tile[num370, num371].type != 75 && Main.tile[num370, num371].type != 76 &&
                        SolidTile(num370, num371) && Main.tile[num370 - 1, num371].type != 137 &&
                        Main.tile[num370 + 1, num371].type != 137)
                    {
                        if (SolidTile(num370, num371 + 1) && SolidTile(num370 + 1, num371) &&
                            !Main.tile[num370 - 1, num371].active())
                        {
                            SlopeTile(num370, num371, 2);
                        }

                        if (SolidTile(num370, num371 + 1) && SolidTile(num370 - 1, num371) &&
                            !Main.tile[num370 + 1, num371].active())
                        {
                            SlopeTile(num370, num371, 1);
                        }
                    }

                    if (Main.tile[num370, num371].slope() == 1 && !SolidTile(num370 - 1, num371))
                    {
                        SlopeTile(num370, num371, 0);
                        PoundTile(num370, num371);
                    }

                    if (Main.tile[num370, num371].slope() == 2 && !SolidTile(num370 + 1, num371))
                    {
                        SlopeTile(num370, num371, 0);
                        PoundTile(num370, num371);
                    }
                }
            }

            Main.tileSolid[137] = true;
            Main.tileSolid[190] = false;
            Main.tileSolid[192] = false;
        });
        AddGenerationPass("Settle Liquids", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[27].Value;
            Liquid.QuickWater(3, -1, -1);
            WaterCheck();
            int num363 = 0;
            Liquid.quickSettle = true;
            while (num363 < 10)
            {
                int num364 = Liquid.numLiquid + LiquidBuffer.numLiquidBuffer;
                num363++;
                float num365 = 0f;
                while (Liquid.numLiquid > 0)
                {
                    float num366 = (float) (num364 - (Liquid.numLiquid + LiquidBuffer.numLiquidBuffer)) /
                                   (float) num364;
                    if (Liquid.numLiquid + LiquidBuffer.numLiquidBuffer > num364)
                    {
                        num364 = Liquid.numLiquid + LiquidBuffer.numLiquidBuffer;
                    }

                    if (num366 > num365)
                    {
                        num365 = num366;
                    }
                    else
                    {
                        num366 = num365;
                    }

                    if (num363 == 1)
                    {
                        progress.Set(num366 / 3f + 0.33f);
                    }

                    int num367 = 10;
                    if (num363 > num367)
                    {
                        num367 = num363;
                    }

                    Liquid.UpdateLiquid();
                }

                WaterCheck();
                progress.Set((float) num363 * 0.1f / 3f + 0.66f);
            }

            Liquid.quickSettle = false;
            Main.tileSolid[190] = true;
        });
        AddGenerationPass("Waterfalls", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[69].Value;
            for (int num354 = 20; num354 < Main.maxTilesX - 20; num354++)
            {
                float num355 = (float) num354 / (float) Main.maxTilesX;
                progress.Set(num355 * 0.5f);
                for (int num356 = 20; num356 < Main.maxTilesY - 20; num356++)
                {
                    if (SolidTile(num354, num356) && !Main.tile[num354 - 1, num356].active() &&
                        SolidTile(num354, num356 + 1) && !Main.tile[num354 + 1, num356].active() &&
                        (Main.tile[num354 - 1, num356].liquid > 0 || Main.tile[num354 + 1, num356].liquid > 0))
                    {
                        bool flag27 = true;
                        int num357 = genRand.Next(8, 20);
                        int num358 = genRand.Next(8, 20);
                        num357 = num356 - num357;
                        num358 += num356;
                        for (int num359 = num357; num359 <= num358; num359++)
                        {
                            if (Main.tile[num354, num359].halfBrick())
                            {
                                flag27 = false;
                            }
                        }

                        if ((Main.tile[num354, num356].type == 75 || Main.tile[num354, num356].type == 76) &&
                            genRand.Next(10) != 0)
                        {
                            flag27 = false;
                        }

                        if (flag27)
                        {
                            PoundTile(num354, num356);
                        }
                    }
                }
            }

            for (int num360 = 20; num360 < Main.maxTilesX - 20; num360++)
            {
                float num361 = (float) num360 / (float) Main.maxTilesX;
                progress.Set(num361 * 0.5f + 0.5f);
                for (int num362 = 20; num362 < Main.maxTilesY - 20; num362++)
                {
                    if (Main.tile[num360, num362].type != 48 && Main.tile[num360, num362].type != 232 &&
                        SolidTile(num360, num362) && SolidTile(num360, num362 + 1))
                    {
                        if (!SolidTile(num360 + 1, num362) && Main.tile[num360 - 1, num362].halfBrick() &&
                            Main.tile[num360 - 2, num362].liquid > 0)
                        {
                            PoundTile(num360, num362);
                        }

                        if (!SolidTile(num360 - 1, num362) && Main.tile[num360 + 1, num362].halfBrick() &&
                            Main.tile[num360 + 2, num362].liquid > 0)
                        {
                            PoundTile(num360, num362);
                        }
                    }
                }
            }
        });
        AddGenerationPass("Ice", delegate
        {
            for (int num352 = 10; num352 < Main.maxTilesX - 10; num352++)
            {
                for (int num353 = (int) Main.worldSurface; num353 < Main.maxTilesY - 100; num353++)
                {
                    if (Main.tile[num352, num353].liquid > 0 && !Main.tile[num352, num353].lava())
                    {
                        MakeWateryIceThing(num352, num353);
                    }
                }
            }

            Main.tileSolid[226] = false;
            Main.tileSolid[162] = false;
        });
        AddGenerationPass("Wall Variety", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[79].Value;
            float num349 = (float) (Main.maxTilesX * Main.maxTilesY) / 5040000f;
            int num350 = (int) (300f * num349);
            int num351 = num350;
            ShapeData shapeData = new ShapeData();
            while (num350 > 0)
            {
                progress.Set(1f - (float) num350 / (float) num351);
                Point point = RandomWorldPoint((int) worldSurface, 2, 190, 2);
                Tile tile4 = Main.tile[point.X, point.Y];
                Tile tile5 = Main.tile[point.X, point.Y - 1];
                byte b = 0;
                if (tile4.type == 59 || tile4.type == 60)
                {
                    b = (byte) (204 + genRand.Next(4));
                }
                else if (tile4.type == 1 && tile5.wall == 0)
                {
                    b = (((double) point.Y < rockLayer)
                        ? ((byte) (196 + genRand.Next(4)))
                        : ((point.Y >= lavaLine)
                            ? ((byte) (208 + genRand.Next(4)))
                            : ((byte) (212 + genRand.Next(4)))));
                }

                if (tile4.active() && b != 0 && !tile5.active())
                {
                    bool foundInvalidTile = false;
                    bool flag26 = WorldUtils.Gen(new Point(point.X, point.Y - 1), new ShapeFloodFill(1000),
                        Actions.Chain(new Modifiers.IsNotSolid(), new Actions.Blank().Output(shapeData),
                            new Actions.ContinueWrapper(Actions.Chain(
                                new Modifiers.IsTouching(true, 60, 147, 161, 396, 397), new Actions.Custom(delegate
                                {
                                    foundInvalidTile = true;
                                    return true;
                                })))));
                    if (shapeData.Count > 50 && flag26 && !foundInvalidTile)
                    {
                        WorldUtils.Gen(new Point(point.X, point.Y), new ModShapes.OuterOutline(shapeData, true, true),
                            new Actions.PlaceWall(b, true));
                        num350--;
                    }

                    shapeData.Clear();
                }
            }
        });
        AddGenerationPass("Traps", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[34].Value;
            for (int num345 = 0; num345 < (int) ((double) Main.maxTilesX * 0.05); num345++)
            {
                float value11 = (float) ((double) num345 / ((double) Main.maxTilesX * 0.05));
                progress.Set(value11);
                for (int num346 = 0; num346 < 1150; num346++)
                {
                    int num347 = genRand.Next(200, Main.maxTilesX - 200);
                    int num348 = genRand.Next((int) Main.worldSurface, Main.maxTilesY - 210);
                    if (Main.tile[num347, num348].wall == 0 && placeTrap(num347, num348, -1))
                    {
                        break;
                    }
                }
            }
        });
        AddGenerationPass("Life Crystals", delegate(GenerationProgress progress)
        {
            dub2 = (float) (Main.maxTilesX / 4200);
            progress.Message = Lang.gen[28].Value;
            for (int num343 = 0; num343 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 2E-05); num343++)
            {
                float value10 = (float) ((double) num343 / ((double) (Main.maxTilesX * Main.maxTilesY) * 2E-05));
                progress.Set(value10);
                bool flag25 = false;
                int num344 = 0;
                while (!flag25)
                {
                    if (AddLifeCrystal(genRand.Next(40, Main.maxTilesX - 40),
                        genRand.Next((int) (worldSurfaceHigh + 20.0), Main.maxTilesY - 300)))
                    {
                        flag25 = true;
                    }
                    else
                    {
                        num344++;
                        if (num344 >= 10000)
                        {
                            flag25 = true;
                        }
                    }
                }
            }

            Main.tileSolid[225] = false;
        });
        AddGenerationPass("Statues", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[29].Value;
            int num337 = 0;
            int num338 = (int) ((float) (statueList.Length * 2) * dub2);
            for (int num339 = 0; num339 < num338; num339++)
            {
                if (num337 >= statueList.Length)
                {
                    num337 = 0;
                }

                int x11 = statueList[num337].X;
                int y7 = statueList[num337].Y;
                float value9 = (float) (num339 / num338);
                progress.Set(value9);
                bool flag24 = false;
                int num340 = 0;
                while (!flag24)
                {
                    int num341 = genRand.Next(20, Main.maxTilesX - 20);
                    int num342;
                    for (num342 = genRand.Next((int) (worldSurfaceHigh + 20.0), Main.maxTilesY - 300);
                        !Main.tile[num341, num342].active();
                        num342++)
                    {
                    }

                    num342--;
                    PlaceTile(num341, num342, x11, true, true, -1, y7);
                    if (Main.tile[num341, num342].active() && Main.tile[num341, num342].type == x11)
                    {
                        flag24 = true;
                        if (StatuesWithTraps.Contains(num337))
                        {
                            PlaceStatueTrap(num341, num342);
                        }

                        num337++;
                    }
                    else
                    {
                        num340++;
                        if (num340 >= 10000)
                        {
                            flag24 = true;
                        }
                    }
                }
            }
        });
        AddGenerationPass("Buried Chests", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[30].Value;
            Main.tileSolid[226] = true;
            Main.tileSolid[162] = true;
            Main.tileSolid[225] = true;
            for (int num328 = 0; num328 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 1.6E-05); num328++)
            {
                float value8 = (float) ((double) num328 / ((double) (Main.maxTilesX * Main.maxTilesY) * 1.6E-05));
                progress.Set(value8);
                bool flag23 = false;
                int num329 = 0;
                while (!flag23)
                {
                    float num330 = (float) genRand.Next((int) (5f * dub2), (int) (8f * dub2 + 1f));
                    int num331 = genRand.Next(20, Main.maxTilesX - 20);
                    int num332 = genRand.Next((int) (worldSurfaceHigh + 20.0), Main.maxTilesY - 230);
                    if ((float) num328 <= num330)
                    {
                        num332 = genRand.Next(Main.maxTilesY - 200, Main.maxTilesY - 50);
                    }

                    int num333 = 0;
                    while (Main.wallDungeon[Main.tile[num331, num332].wall])
                    {
                        num333++;
                        num331 = genRand.Next(1, Main.maxTilesX);
                        num332 = genRand.Next((int) (worldSurfaceHigh + 20.0), Main.maxTilesY - 230);
                        if (num333 < 1000 && (float) num328 <= num330)
                        {
                            num332 = genRand.Next(Main.maxTilesY - 200, Main.maxTilesY - 50);
                        }
                    }

                    if ((float) num328 > num330)
                    {
                        for (int num334 = 10; num334 > 0; num334--)
                        {
                            int x10 = genRand.Next(80, Main.maxTilesX - 80);
                            int y6 = genRand.Next((int) (worldSurfaceHigh + 20.0), Main.maxTilesY - 230);
                            if (Biomes<CaveHouseBiome>.Place(x10, y6, structures))
                            {
                                flag23 = true;
                                break;
                            }
                        }
                    }
                    else if (AddBuriedChest(num331, num332, 0, false, -1))
                    {
                        flag23 = true;
                    }

                    num329++;
                    if (num329 >= 1000)
                    {
                        flag23 = true;
                    }
                }
            }

            int num335 = (int) (2f * (float) (Main.maxTilesX * Main.maxTilesY) / 5040000f);
            int num336 = 1000;
            while (num336 >= 0 && num335 >= 0)
            {
                if (Biomes<CaveHouseBiome>.Place(RandomRectanglePoint(UndergroundDesertLocation), structures))
                {
                    num335--;
                }

                num336--;
            }

            Main.tileSolid[226] = false;
            Main.tileSolid[162] = false;
            Main.tileSolid[225] = false;
        });
        AddGenerationPass("Surface Chests", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[31].Value;
            for (int num324 = 0; num324 < (int) ((double) Main.maxTilesX * 0.005); num324++)
            {
                float value7 = (float) ((double) num324 / ((double) Main.maxTilesX * 0.005));
                progress.Set(value7);
                bool flag21 = false;
                int num325 = 0;
                while (!flag21)
                {
                    int num326 = genRand.Next(300, Main.maxTilesX - 300);
                    int num327 = genRand.Next((int) worldSurfaceLow, (int) Main.worldSurface);
                    bool flag22 = false;
                    if (Main.tile[num326, num327].wall == 2 && !Main.tile[num326, num327].active())
                    {
                        flag22 = true;
                    }

                    if (flag22 && AddBuriedChest(num326, num327, 0, true, -1))
                    {
                        flag21 = true;
                    }
                    else
                    {
                        num325++;
                        if (num325 >= 2000)
                        {
                            flag21 = true;
                        }
                    }
                }
            }
        });
        AddGenerationPass("Jungle Chests Placement", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[32].Value;
            for (int num319 = 0; num319 < numJChests; num319++)
            {
                float value6 = (float) (num319 / numJChests);
                progress.Set(value6);
                int nextJungleChestItem = GetNextJungleChestItem();
                if (!AddBuriedChest(JChestX[num319] + genRand.Next(2), JChestY[num319], nextJungleChestItem, false, 10))
                {
                    for (int num320 = JChestX[num319] - 1; num320 <= JChestX[num319] + 1; num320++)
                    {
                        for (int num321 = JChestY[num319]; num321 <= JChestY[num319] + 2; num321++)
                        {
                            KillTile(num320, num321, false, false, false);
                        }
                    }

                    for (int num322 = JChestX[num319] - 1; num322 <= JChestX[num319] + 1; num322++)
                    {
                        for (int num323 = JChestY[num319]; num323 <= JChestY[num319] + 3; num323++)
                        {
                            if (num323 < Main.maxTilesY)
                            {
                                Main.tile[num322, num323].slope(0);
                                Main.tile[num322, num323].halfBrick(false);
                            }
                        }
                    }

                    AddBuriedChest(JChestX[num319], JChestY[num319], nextJungleChestItem, false, 10);
                }
            }
        });
        AddGenerationPass("Water Chests", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[33].Value;
            int num312 = 0;
            for (int num313 = 0; (float) num313 < 9f * dub2; num313++)
            {
                float value5 = (float) num313 / (9f * dub2);
                progress.Set(value5);
                int num314 = 0;
                num312++;
                if (genRand.Next(15) != 0)
                {
                    switch (num312)
                    {
                        case 1:
                            num314 = 186;
                            break;
                        case 2:
                            num314 = 277;
                            break;
                        default:
                            num314 = 187;
                            num312 = 0;
                            break;
                    }
                }
                else
                {
                    num314 = 863;
                }

                bool flag20 = false;
                while (!flag20)
                {
                    int num315 = genRand.Next(1, Main.maxTilesX);
                    int num316 = genRand.Next(1, Main.maxTilesY - 200);
                    while (Main.tile[num315, num316].liquid < 200 || Main.tile[num315, num316].lava())
                    {
                        num315 = genRand.Next(1, Main.maxTilesX);
                        num316 = genRand.Next(1, Main.maxTilesY - 200);
                    }

                    flag20 = AddBuriedChest(num315, num316, num314, false, 17);
                }

                flag20 = false;
                while (!flag20)
                {
                    int num317 = genRand.Next(1, Main.maxTilesX);
                    int num318 = genRand.Next((int) Main.worldSurface, Main.maxTilesY - 200);
                    while (Main.tile[num317, num318].liquid < 200 || Main.tile[num317, num318].lava())
                    {
                        num317 = genRand.Next(1, Main.maxTilesX);
                        num318 = genRand.Next(1, Main.maxTilesY - 200);
                    }

                    flag20 = AddBuriedChest(num317, num318, num314, false, 17);
                }
            }
        });
        AddGenerationPass("Spider Caves", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[64].Value;
            maxTileCount = 3500;
            for (int num309 = 0; num309 < (int) ((double) Main.maxTilesX * 0.005); num309++)
            {
                float value4 = (float) ((double) num309 / ((double) Main.maxTilesX * 0.005));
                progress.Set(value4);
                int num310 = 0;
                int x9 = genRand.Next(200, Main.maxTilesX - 200);
                int y5 = genRand.Next((int) (Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 230);
                int num311 = countTiles(x9, y5, false, true);
                while ((num311 >= 3500 || num311 < 500) && num310 < 500)
                {
                    num310++;
                    x9 = genRand.Next(200, Main.maxTilesX - 200);
                    y5 = genRand.Next((int) Main.rockLayer + 30, Main.maxTilesY - 230);
                    num311 = countTiles(x9, y5, false, true);
                }

                if (num310 < 500)
                {
                    Spread.Spider(x9, y5);
                }
            }

            Main.tileSolid[162] = true;
        });
        AddGenerationPass("Gem Caves", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[64].Value;
            maxTileCount = 300;
            for (int num306 = 0; num306 < (int) ((double) Main.maxTilesX * 0.003); num306++)
            {
                float value3 = (float) ((double) num306 / ((double) Main.maxTilesX * 0.003));
                progress.Set(value3);
                int num307 = 0;
                int x8 = genRand.Next(200, Main.maxTilesX - 200);
                int y4 = genRand.Next((int) Main.rockLayer + 30, Main.maxTilesY - 230);
                int num308 = countTiles(x8, y4, false, false);
                while ((num308 >= 300 || num308 < 50 || lavaCount > 0 || iceCount > 0 || rockCount == 0) &&
                       num307 < 1000)
                {
                    num307++;
                    x8 = genRand.Next(200, Main.maxTilesX - 200);
                    y4 = genRand.Next((int) Main.rockLayer + 30, Main.maxTilesY - 230);
                    num308 = countTiles(x8, y4, false, false);
                }

                if (num307 < 1000)
                {
                    gemCave(x8, y4);
                }
            }
        });
        AddGenerationPass("Moss", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[61].Value;
            randMoss();
            maxTileCount = 2500;
            for (int num286 = 0; num286 < (int) ((double) Main.maxTilesX * 0.01); num286++)
            {
                float value2 = (float) ((double) num286 / ((double) Main.maxTilesX * 0.01));
                progress.Set(value2);
                int num287 = 0;
                int x7 = genRand.Next(200, Main.maxTilesX - 200);
                int y3 = genRand.Next((int) (Main.worldSurface + Main.rockLayer) / 2, waterLine);
                int num288 = countTiles(x7, y3, false, false);
                while ((num288 >= 2500 || num288 < 10 || lavaCount > 0 || iceCount > 0 || rockCount == 0) &&
                       num287 < 1000)
                {
                    num287++;
                    x7 = genRand.Next(200, Main.maxTilesX - 200);
                    y3 = genRand.Next((int) Main.rockLayer + 30, Main.maxTilesY - 230);
                    num288 = countTiles(x7, y3, false, false);
                }

                if (num287 < 1000)
                {
                    setMoss(x7, y3);
                    Spread.Moss(x7, y3);
                }
            }

            for (int num289 = 0; num289 < Main.maxTilesX; num289++)
            {
                int num290 = genRand.Next(50, Main.maxTilesX - 50);
                int num291 = genRand.Next((int) (Main.worldSurface + Main.rockLayer) / 2, lavaLine);
                if (Main.tile[num290, num291].type == 1)
                {
                    setMoss(num290, num291);
                    Main.tile[num290, num291].type = mossTile;
                }
            }

            float num292 = (float) Main.maxTilesX * 0.05f;
            while (num292 > 0f)
            {
                int num293 = genRand.Next(50, Main.maxTilesX - 50);
                int num294 = genRand.Next((int) (Main.worldSurface + Main.rockLayer) / 2, lavaLine);
                if (Main.tile[num293, num294].type == 1 &&
                    (!Main.tile[num293 - 1, num294].active() || !Main.tile[num293 + 1, num294].active() ||
                     !Main.tile[num293, num294 - 1].active() || !Main.tile[num293, num294 + 1].active()))
                {
                    setMoss(num293, num294);
                    Main.tile[num293, num294].type = mossTile;
                    num292 -= 1f;
                }
            }

            num292 = (float) Main.maxTilesX * 0.065f;
            while (num292 > 0f)
            {
                int num295 = genRand.Next(50, Main.maxTilesX - 50);
                int num296 = genRand.Next(waterLine, Main.maxTilesY - 200);
                if (Main.tile[num295, num296].type == 1 &&
                    (!Main.tile[num295 - 1, num296].active() || !Main.tile[num295 + 1, num296].active() ||
                     !Main.tile[num295, num296 - 1].active() || !Main.tile[num295, num296 + 1].active()))
                {
                    int num297 = 25;
                    int num298 = 0;
                    for (int num299 = num295 - num297; num299 < num295 + num297; num299++)
                    {
                        for (int num300 = num296 - num297; num300 < num296 + num297; num300++)
                        {
                            if (Main.tile[num299, num300].liquid > 0 && Main.tile[num299, num300].lava())
                            {
                                num298++;
                            }
                        }
                    }

                    if (num298 > 20)
                    {
                        Main.tile[num295, num296].type = 381;
                        num292 -= 1f;
                    }
                    else
                    {
                        num292 -= 0.002f;
                    }
                }
            }

            for (int num301 = 0; num301 < Main.maxTilesX; num301++)
            {
                for (int num302 = 0; num302 < Main.maxTilesY; num302++)
                {
                    if (Main.tile[num301, num302].active() && Main.tileMoss[Main.tile[num301, num302].type])
                    {
                        for (int num303 = 0; num303 < 4; num303++)
                        {
                            int num304 = num301;
                            int num305 = num302;
                            if (num303 == 0)
                            {
                                num304--;
                            }

                            if (num303 == 1)
                            {
                                num304++;
                            }

                            if (num303 == 2)
                            {
                                num305--;
                            }

                            if (num303 == 3)
                            {
                                num305++;
                            }

                            try
                            {
                                grassSpread = 0;
                                SpreadGrass(num304, num305, 1, Main.tile[num301, num302].type, true, 0);
                            }
                            catch
                            {
                                grassSpread = 0;
                                SpreadGrass(num304, num305, 1, Main.tile[num301, num302].type, false, 0);
                            }
                        }
                    }
                }
            }
        });
        AddGenerationPass("Temple", delegate
        {
            Main.tileSolid[162] = false;
            Main.tileSolid[226] = true;
            templePart2();
            Main.tileSolid[232] = false;
        });
        AddGenerationPass("Ice Walls", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[63].Value;
            maxTileCount = 1500;
            for (int num275 = 0; num275 < (int) ((double) Main.maxTilesX * 0.04); num275++)
            {
                float num276 = (float) ((double) num275 / ((double) Main.maxTilesX * 0.04));
                progress.Set(num276 * 0.66f);
                int num277 = 0;
                int x6 = genRand.Next(200, Main.maxTilesX - 200);
                int y2 = genRand.Next((int) (Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 220);
                int num278 = countTiles(x6, y2, false, true);
                while ((num278 >= 1500 || num278 < 10) && num277 < 500)
                {
                    num277++;
                    x6 = genRand.Next(200, Main.maxTilesX - 200);
                    y2 = genRand.Next((int) (Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 220);
                    num278 = countTiles(x6, y2, false, true);
                }

                if (num277 < 500)
                {
                    int num279 = genRand.Next(2);
                    if (iceCount > 0)
                    {
                        switch (num279)
                        {
                            case 0:
                                num279 = 40;
                                break;
                            case 1:
                                num279 = 71;
                                break;
                        }
                    }
                    else if (lavaCount > 0)
                    {
                        num279 = 79;
                    }
                    else
                    {
                        num279 = genRand.Next(4);
                        switch (num279)
                        {
                            case 0:
                                num279 = 59;
                                break;
                            case 1:
                                num279 = 61;
                                break;
                            case 2:
                                num279 = 170;
                                break;
                            case 3:
                                num279 = 171;
                                break;
                        }
                    }

                    Spread.Wall(x6, y2, num279);
                }
            }

            maxTileCount = 1500;
            for (int num280 = 0; num280 < (int) ((double) Main.maxTilesX * 0.02); num280++)
            {
                float num281 = (float) ((double) num280 / ((double) Main.maxTilesX * 0.02));
                progress.Set(num281 * 0.34f + 0.66f);
                int num282 = 0;
                int num283 = genRand.Next(200, Main.maxTilesX - 200);
                int num284 = genRand.Next((int) Main.worldSurface, lavaLine);
                int num285 = 0;
                if (Main.tile[num283, num284].wall == 64)
                {
                    num285 = countTiles(num283, num284, true, false);
                }

                while ((num285 >= 1500 || num285 < 10) && num282 < 1000)
                {
                    num282++;
                    num283 = genRand.Next(200, Main.maxTilesX - 200);
                    num284 = genRand.Next((int) Main.worldSurface, lavaLine);
                    if (!Main.wallHouse[Main.tile[num283, num284].wall])
                    {
                        num285 = ((Main.tile[num283, num284].wall == 64) ? countTiles(num283, num284, true, false) : 0);
                    }
                }

                if (num282 < 1000)
                {
                    Spread.Wall2(num283, num284, 15);
                }
            }
        });
        AddGenerationPass("Jungle Trees", delegate
        {
            for (int num273 = 0; num273 < Main.maxTilesX; num273++)
            {
                for (int num274 = (int) Main.worldSurface - 1; num274 < Main.maxTilesY - 350; num274++)
                {
                    if (genRand.Next(10) == 0)
                    {
                        GrowUndergroundTree(num273, num274);
                    }
                }
            }
        });
        AddGenerationPass("Floating Island Houses", delegate
        {
            for (int num272 = 0; num272 < numIslandHouses; num272++)
            {
                if (!skyLake[num272])
                {
                    IslandHouse(fihX[num272], fihY[num272]);
                }
            }
        });
        AddGenerationPass("Quick Cleanup", delegate
        {
            Main.tileSolid[137] = false;
            Main.tileSolid[130] = false;
            for (int num270 = 20; num270 < Main.maxTilesX - 20; num270++)
            {
                for (int num271 = 20; num271 < Main.maxTilesY - 20; num271++)
                {
                    if (Main.tile[num270, num271].type != 19 &&
                        TileID.Sets.CanBeClearedDuringGeneration[Main.tile[num270, num271].type])
                    {
                        if (Main.tile[num270, num271].topSlope() || Main.tile[num270, num271].halfBrick())
                        {
                            if (!SolidTile(num270, num271 + 1))
                            {
                                Main.tile[num270, num271].active(false);
                            }

                            if (Main.tile[num270 + 1, num271].type == 137 || Main.tile[num270 - 1, num271].type == 137)
                            {
                                Main.tile[num270, num271].active(false);
                            }
                        }
                        else if (Main.tile[num270, num271].bottomSlope())
                        {
                            if (!SolidTile(num270, num271 - 1))
                            {
                                Main.tile[num270, num271].active(false);
                            }

                            if (Main.tile[num270 + 1, num271].type == 137 || Main.tile[num270 - 1, num271].type == 137)
                            {
                                Main.tile[num270, num271].active(false);
                            }
                        }
                    }
                }
            }
        });
        AddGenerationPass("Pots", delegate(GenerationProgress progress)
        {
            Main.tileSolid[137] = true;
            Main.tileSolid[130] = true;
            progress.Message = Lang.gen[35].Value;
            for (int num263 = 0; num263 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0008); num263++)
            {
                float num264 = (float) ((double) num263 / ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0008));
                progress.Set(num264);
                bool flag18 = false;
                int num265 = 0;
                while (!flag18)
                {
                    int num266 = genRand.Next((int) worldSurfaceHigh, Main.maxTilesY - 10);
                    if ((double) num264 > 0.93)
                    {
                        num266 = Main.maxTilesY - 150;
                    }
                    else if ((double) num264 > 0.75)
                    {
                        num266 = (int) worldSurfaceLow;
                    }

                    int num267 = genRand.Next(1, Main.maxTilesX);
                    bool flag19 = false;
                    for (int num268 = num266; num268 < Main.maxTilesY; num268++)
                    {
                        if (!flag19)
                        {
                            if (Main.tile[num267, num268].active() && Main.tileSolid[Main.tile[num267, num268].type] &&
                                !Main.tile[num267, num268 - 1].lava())
                            {
                                flag19 = true;
                            }
                        }
                        else
                        {
                            int style = genRand.Next(0, 4);
                            int num269 = 0;
                            if (num268 < Main.maxTilesY - 5)
                            {
                                num269 = Main.tile[num267, num268 + 1].type;
                            }

                            if (num269 == 147 || num269 == 161 || num269 == 162)
                            {
                                style = genRand.Next(4, 7);
                            }

                            if (num269 == 60)
                            {
                                style = genRand.Next(7, 10);
                            }

                            if (Main.wallDungeon[Main.tile[num267, num268].wall])
                            {
                                style = genRand.Next(10, 13);
                            }

                            if (num269 == 41 || num269 == 43 || num269 == 44)
                            {
                                style = genRand.Next(10, 13);
                            }

                            if (num269 == 22 || num269 == 23 || num269 == 25)
                            {
                                style = genRand.Next(16, 19);
                            }

                            if (num269 == 199 || num269 == 203 || num269 == 204 || num269 == 200)
                            {
                                style = genRand.Next(22, 25);
                            }

                            if (num269 == 367)
                            {
                                style = genRand.Next(31, 34);
                            }

                            if (num269 == 226)
                            {
                                style = genRand.Next(28, 31);
                            }

                            if (num268 > Main.maxTilesY - 200)
                            {
                                style = genRand.Next(13, 16);
                            }

                            if (PlacePot(num267, num268, 28, style))
                            {
                                flag18 = true;
                                break;
                            }

                            num265++;
                            if (num265 >= 10000)
                            {
                                flag18 = true;
                                break;
                            }
                        }
                    }
                }
            }
        });
        AddGenerationPass("Hellforge", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[36].Value;
            for (int num259 = 0; num259 < Main.maxTilesX / 200; num259++)
            {
                float value = (float) (num259 / (Main.maxTilesX / 200));
                progress.Set(value);
                bool flag17 = false;
                int num260 = 0;
                while (!flag17)
                {
                    int num261 = genRand.Next(1, Main.maxTilesX);
                    int num262 = genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 5);
                    try
                    {
                        if (Main.tile[num261, num262].wall == 13 || Main.tile[num261, num262].wall == 14)
                        {
                            for (; !Main.tile[num261, num262].active(); num262++)
                            {
                            }

                            num262--;
                            PlaceTile(num261, num262, 77, false, false, -1, 0);
                            if (Main.tile[num261, num262].type == 77)
                            {
                                flag17 = true;
                            }
                            else
                            {
                                num260++;
                                if (num260 >= 10000)
                                {
                                    flag17 = true;
                                }
                            }
                        }
                    }
                    catch
                    {
                    }
                }
            }
        });
        AddGenerationPass("Spreading Grass", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[37].Value;
            for (int num257 = 0; num257 < Main.maxTilesX; num257++)
            {
                i2 = num257;
                bool flag16 = true;
                for (int num258 = 0; (double) num258 < Main.worldSurface - 1.0; num258++)
                {
                    if (Main.tile[i2, num258].active())
                    {
                        if (flag16 && Main.tile[i2, num258].type == 0)
                        {
                            try
                            {
                                grassSpread = 0;
                                SpreadGrass(i2, num258, 0, 2, true, 0);
                            }
                            catch
                            {
                                grassSpread = 0;
                                SpreadGrass(i2, num258, 0, 2, false, 0);
                            }
                        }

                        if ((double) num258 > worldSurfaceHigh)
                        {
                            break;
                        }

                        flag16 = false;
                    }
                    else if (Main.tile[i2, num258].wall == 0)
                    {
                        flag16 = true;
                    }
                }
            }
        });
        AddGenerationPass("Piles", delegate
        {
            Main.tileSolid[190] = false;
            Main.tileSolid[196] = false;
            Main.tileSolid[189] = false;
            Main.tileSolid[202] = false;
            for (int num206 = 0; (double) num206 < (double) Main.maxTilesX * 0.06; num206++)
            {
                bool flag9 = false;
                while (!flag9)
                {
                    int num207 = genRand.Next(25, Main.maxTilesX - 25);
                    int num208 = genRand.Next((int) Main.worldSurface, Main.maxTilesY - 300);
                    if (!Main.tile[num207, num208].active())
                    {
                        int num209 = 186;
                        for (; !Main.tile[num207, num208 + 1].active() && num208 < Main.maxTilesY - 5; num208++)
                        {
                        }

                        int num210 = genRand.Next(22);
                        if (num210 >= 16 && num210 <= 22)
                        {
                            num210 = genRand.Next(22);
                        }

                        if ((Main.tile[num207, num208 + 1].type == 0 || Main.tile[num207, num208 + 1].type == 1 ||
                             Main.tileMoss[Main.tile[num207, num208 + 1].type]) && genRand.Next(5) == 0)
                        {
                            num210 = genRand.Next(23, 29);
                            num209 = 187;
                        }

                        if (num208 > Main.maxTilesY - 300 || Main.wallDungeon[Main.tile[num207, num208].wall] ||
                            Main.tile[num207, num208 + 1].type == 30 || Main.tile[num207, num208 + 1].type == 19 ||
                            Main.tile[num207, num208 + 1].type == 25 || Main.tile[num207, num208 + 1].type == 203)
                        {
                            num210 = genRand.Next(7);
                            num209 = 186;
                        }

                        if (Main.tile[num207, num208 + 1].type == 147 || Main.tile[num207, num208 + 1].type == 161 ||
                            Main.tile[num207, num208 + 1].type == 162)
                        {
                            num210 = genRand.Next(26, 32);
                            num209 = 186;
                        }

                        if (Main.tile[num207, num208 + 1].type == 60)
                        {
                            num209 = 187;
                            num210 = genRand.Next(6);
                        }

                        if ((Main.tile[num207, num208 + 1].type == 57 || Main.tile[num207, num208 + 1].type == 58) &&
                            genRand.Next(3) < 2)
                        {
                            num209 = 187;
                            num210 = genRand.Next(6, 9);
                        }

                        if (Main.tile[num207, num208 + 1].type == 226)
                        {
                            num209 = 187;
                            num210 = genRand.Next(18, 23);
                        }

                        if (Main.tile[num207, num208 + 1].type == 70)
                        {
                            num210 = genRand.Next(32, 35);
                            num209 = 186;
                        }

                        if (num209 == 186 && num210 >= 7 && num210 <= 15 && genRand.Next(75) == 0)
                        {
                            num209 = 187;
                            num210 = 17;
                        }

                        if (Main.wallDungeon[Main.tile[num207, num208].wall] && genRand.Next(3) != 0)
                        {
                            flag9 = true;
                        }
                        else
                        {
                            PlaceTile(num207, num208, num209, true, false, -1, num210);
                            if (Main.tile[num207, num208].type == 186 || Main.tile[num207, num208].type == 187)
                            {
                                flag9 = true;
                            }

                            if (flag9 && num209 == 186 && num210 <= 7)
                            {
                                int num211 = genRand.Next(1, 5);
                                for (int num212 = 0; num212 < num211; num212++)
                                {
                                    int num213 = num207 + genRand.Next(-10, 11);
                                    int num214 = num208 - genRand.Next(5);
                                    if (!Main.tile[num213, num214].active())
                                    {
                                        for (;
                                            !Main.tile[num213, num214 + 1].active() && num214 < Main.maxTilesY - 5;
                                            num214++)
                                        {
                                        }

                                        int x2 = genRand.Next(12, 36);
                                        PlaceSmallPile(num213, num214, x2, 0, 185);
                                    }
                                }
                            }
                        }
                    }
                }
            }

            for (int num215 = 0; (double) num215 < (double) Main.maxTilesX * 0.01; num215++)
            {
                bool flag10 = false;
                while (!flag10)
                {
                    int num216 = genRand.Next(25, Main.maxTilesX - 25);
                    int num217 = genRand.Next(Main.maxTilesY - 300, Main.maxTilesY - 10);
                    if (!Main.tile[num216, num217].active())
                    {
                        int num218 = 186;
                        for (; !Main.tile[num216, num217 + 1].active() && num217 < Main.maxTilesY - 5; num217++)
                        {
                        }

                        int num219 = genRand.Next(22);
                        if (num219 >= 16 && num219 <= 22)
                        {
                            num219 = genRand.Next(22);
                        }

                        if (num217 > Main.maxTilesY - 300 || Main.wallDungeon[Main.tile[num216, num217].wall] ||
                            Main.tile[num216, num217 + 1].type == 30 || Main.tile[num216, num217 + 1].type == 19)
                        {
                            num219 = genRand.Next(7);
                        }

                        if ((Main.tile[num216, num217 + 1].type == 57 || Main.tile[num216, num217 + 1].type == 58) &&
                            genRand.Next(3) < 2)
                        {
                            num218 = 187;
                            num219 = genRand.Next(6, 9);
                        }

                        if (Main.tile[num216, num217 + 1].type == 147 || Main.tile[num216, num217 + 1].type == 161 ||
                            Main.tile[num216, num217 + 1].type == 162)
                        {
                            num219 = genRand.Next(26, 32);
                        }

                        PlaceTile(num216, num217, num218, true, false, -1, num219);
                        if (Main.tile[num216, num217].type == 186 || Main.tile[num216, num217].type == 187)
                        {
                            flag10 = true;
                        }

                        if (flag10 && num218 == 186 && num219 <= 7)
                        {
                            int num220 = genRand.Next(1, 5);
                            for (int num221 = 0; num221 < num220; num221++)
                            {
                                int num222 = num216 + genRand.Next(-10, 11);
                                int num223 = num217 - genRand.Next(5);
                                if (!Main.tile[num222, num223].active())
                                {
                                    for (;
                                        !Main.tile[num222, num223 + 1].active() && num223 < Main.maxTilesY - 5;
                                        num223++)
                                    {
                                    }

                                    int x3 = genRand.Next(12, 36);
                                    PlaceSmallPile(num222, num223, x3, 0, 185);
                                }
                            }
                        }
                    }
                }
            }

            for (int num224 = 0; (double) num224 < (double) Main.maxTilesX * 0.003; num224++)
            {
                bool flag11 = false;
                while (!flag11)
                {
                    int num225 = 186;
                    int num226 = genRand.Next(25, Main.maxTilesX - 25);
                    int num227 = genRand.Next(10, (int) Main.worldSurface);
                    if (!Main.tile[num226, num227].active())
                    {
                        for (; !Main.tile[num226, num227 + 1].active() && num227 < Main.maxTilesY - 5; num227++)
                        {
                        }

                        int num228 = genRand.Next(7, 13);
                        if (num227 > Main.maxTilesY - 300 || Main.wallDungeon[Main.tile[num226, num227].wall] ||
                            Main.tile[num226, num227 + 1].type == 30 || Main.tile[num226, num227 + 1].type == 19 ||
                            Main.tile[num226, num227 + 1].type == 53 || Main.tile[num226, num227 + 1].type == 25 ||
                            Main.tile[num226, num227 + 1].type == 203)
                        {
                            num228 = -1;
                        }

                        if (Main.tile[num226, num227 + 1].type == 147 || Main.tile[num226, num227 + 1].type == 161 ||
                            Main.tile[num226, num227 + 1].type == 162)
                        {
                            num228 = genRand.Next(26, 32);
                        }

                        if (Main.tile[num226, num227 + 1].type == 2 || Main.tile[num226 - 1, num227 + 1].type == 2 ||
                            Main.tile[num226 + 1, num227 + 1].type == 2)
                        {
                            num225 = 187;
                            num228 = genRand.Next(14, 17);
                        }

                        if (Main.tile[num226, num227 + 1].type == 151 || Main.tile[num226, num227 + 1].type == 274)
                        {
                            num225 = 186;
                            num228 = genRand.Next(7);
                        }

                        if (num228 >= 0)
                        {
                            PlaceTile(num226, num227, num225, true, false, -1, num228);
                        }

                        if (Main.tile[num226, num227].type == num225)
                        {
                            flag11 = true;
                        }
                    }
                }
            }

            for (int num229 = 0; (double) num229 < (double) Main.maxTilesX * 0.0035; num229++)
            {
                bool flag12 = false;
                while (!flag12)
                {
                    int num230 = genRand.Next(25, Main.maxTilesX - 25);
                    int num231 = genRand.Next(10, (int) Main.worldSurface);
                    if (!Main.tile[num230, num231].active() && Main.tile[num230, num231].wall > 0)
                    {
                        int num232 = 186;
                        for (; !Main.tile[num230, num231 + 1].active() && num231 < Main.maxTilesY - 5; num231++)
                        {
                        }

                        int num233 = genRand.Next(7, 13);
                        if (num231 > Main.maxTilesY - 300 || Main.wallDungeon[Main.tile[num230, num231].wall] ||
                            Main.tile[num230, num231 + 1].type == 30 || Main.tile[num230, num231 + 1].type == 19)
                        {
                            num233 = -1;
                        }

                        if (Main.tile[num230, num231 + 1].type == 25)
                        {
                            num233 = genRand.Next(7);
                        }

                        if (Main.tile[num230, num231 + 1].type == 147 || Main.tile[num230, num231 + 1].type == 161 ||
                            Main.tile[num230, num231 + 1].type == 162)
                        {
                            num233 = genRand.Next(26, 32);
                        }

                        if (Main.tile[num230, num231 + 1].type == 2 || Main.tile[num230 - 1, num231 + 1].type == 2 ||
                            Main.tile[num230 + 1, num231 + 1].type == 2)
                        {
                            num232 = 187;
                            num233 = genRand.Next(14, 17);
                        }

                        if (Main.tile[num230, num231 + 1].type == 151 || Main.tile[num230, num231 + 1].type == 274)
                        {
                            num232 = 186;
                            num233 = genRand.Next(7);
                        }

                        if (num233 >= 0)
                        {
                            PlaceTile(num230, num231, num232, true, false, -1, num233);
                        }

                        if (Main.tile[num230, num231].type == num232)
                        {
                            flag12 = true;
                        }

                        if (flag12 && num233 <= 7)
                        {
                            int num234 = genRand.Next(1, 5);
                            for (int num235 = 0; num235 < num234; num235++)
                            {
                                int num236 = num230 + genRand.Next(-10, 11);
                                int num237 = num231 - genRand.Next(5);
                                if (!Main.tile[num236, num237].active())
                                {
                                    for (;
                                        !Main.tile[num236, num237 + 1].active() && num237 < Main.maxTilesY - 5;
                                        num237++)
                                    {
                                    }

                                    int x4 = genRand.Next(12, 36);
                                    PlaceSmallPile(num236, num237, x4, 0, 185);
                                }
                            }
                        }
                    }
                }
            }

            for (int num238 = 0; (double) num238 < (double) Main.maxTilesX * 0.6; num238++)
            {
                bool flag13 = false;
                while (!flag13)
                {
                    int num239 = genRand.Next(25, Main.maxTilesX - 25);
                    int num240 = genRand.Next((int) Main.worldSurface, Main.maxTilesY - 20);
                    if (Main.tile[num239, num240].wall == 87 && genRand.Next(2) == 0)
                    {
                        num239 = genRand.Next(25, Main.maxTilesX - 25);
                        num240 = genRand.Next((int) Main.worldSurface, Main.maxTilesY - 20);
                    }

                    if (!Main.tile[num239, num240].active())
                    {
                        for (; !Main.tile[num239, num240 + 1].active() && num240 < Main.maxTilesY - 5; num240++)
                        {
                        }

                        int num241 = genRand.Next(2);
                        int num242 = genRand.Next(36);
                        if (num242 >= 28 && num242 <= 35)
                        {
                            num242 = genRand.Next(36);
                        }

                        if (num241 == 1)
                        {
                            num242 = genRand.Next(25);
                            if (num242 >= 16 && num242 <= 24)
                            {
                                num242 = genRand.Next(25);
                            }
                        }

                        if (num240 > Main.maxTilesY - 300)
                        {
                            if (num241 == 0)
                            {
                                num242 = genRand.Next(12, 28);
                            }

                            if (num241 == 1)
                            {
                                num242 = genRand.Next(6, 16);
                            }
                        }

                        if (Main.wallDungeon[Main.tile[num239, num240].wall] ||
                            Main.tile[num239, num240 + 1].type == 30 || Main.tile[num239, num240 + 1].type == 19 ||
                            Main.tile[num239, num240 + 1].type == 25 || Main.tile[num239, num240 + 1].type == 203 ||
                            Main.tile[num239, num240].wall == 87)
                        {
                            if (num241 == 0 && num242 < 12)
                            {
                                num242 += 12;
                            }

                            if (num241 == 1 && num242 < 6)
                            {
                                num242 += 6;
                            }

                            if (num241 == 1 && num242 >= 17)
                            {
                                num242 -= 10;
                            }
                        }

                        if (Main.tile[num239, num240 + 1].type == 147 || Main.tile[num239, num240 + 1].type == 161 ||
                            Main.tile[num239, num240 + 1].type == 162)
                        {
                            if (num241 == 0 && num242 < 12)
                            {
                                num242 += 36;
                            }

                            if (num241 == 1 && num242 >= 20)
                            {
                                num242 += 6;
                            }

                            if (num241 == 1 && num242 < 6)
                            {
                                num242 += 25;
                            }
                        }

                        if (Main.tile[num239, num240 + 1].type == 151 || Main.tile[num239, num240 + 1].type == 274)
                        {
                            if (num241 == 0)
                            {
                                num242 = genRand.Next(12, 28);
                            }

                            if (num241 == 1)
                            {
                                num242 = genRand.Next(12, 19);
                            }
                        }

                        flag13 = ((Main.wallDungeon[Main.tile[num239, num240].wall] && genRand.Next(3) != 0) ||
                                  PlaceSmallPile(num239, num240, num242, num241, 185));
                        if (flag13 && num241 == 1 && num242 >= 6 && num242 <= 15)
                        {
                            int num243 = genRand.Next(1, 5);
                            for (int num244 = 0; num244 < num243; num244++)
                            {
                                int num245 = num239 + genRand.Next(-10, 11);
                                int num246 = num240 - genRand.Next(5);
                                if (!Main.tile[num245, num246].active())
                                {
                                    for (;
                                        !Main.tile[num245, num246 + 1].active() && num246 < Main.maxTilesY - 5;
                                        num246++)
                                    {
                                    }

                                    int x5 = genRand.Next(12, 36);
                                    PlaceSmallPile(num245, num246, x5, 0, 185);
                                }
                            }
                        }
                    }
                }
            }

            for (int num247 = 0; (float) num247 < (float) Main.maxTilesX * 0.02f; num247++)
            {
                bool flag14 = false;
                while (!flag14)
                {
                    int num248 = genRand.Next(25, Main.maxTilesX - 25);
                    int num249 = genRand.Next(15, (int) Main.worldSurface);
                    if (!Main.tile[num248, num249].active())
                    {
                        for (; !Main.tile[num248, num249 + 1].active() && num249 < Main.maxTilesY - 5; num249++)
                        {
                        }

                        int num250 = genRand.Next(2);
                        int num251 = genRand.Next(11);
                        if (num250 == 1)
                        {
                            num251 = genRand.Next(5);
                        }

                        if (Main.tile[num248, num249 + 1].type == 147 || Main.tile[num248, num249 + 1].type == 161 ||
                            Main.tile[num248, num249 + 1].type == 162)
                        {
                            if (num250 == 0 && num251 < 12)
                            {
                                num251 += 36;
                            }

                            if (num250 == 1 && num251 >= 20)
                            {
                                num251 += 6;
                            }

                            if (num250 == 1 && num251 < 6)
                            {
                                num251 += 25;
                            }
                        }

                        if (Main.tile[num248, num249 + 1].type == 2 && num250 == 1)
                        {
                            num251 = genRand.Next(38, 41);
                        }

                        if (Main.tile[num248, num249 + 1].type == 151 || Main.tile[num248, num249 + 1].type == 274)
                        {
                            if (num250 == 0)
                            {
                                num251 = genRand.Next(12, 28);
                            }

                            if (num250 == 1)
                            {
                                num251 = genRand.Next(12, 19);
                            }
                        }

                        if (!Main.wallDungeon[Main.tile[num248, num249].wall] &&
                            Main.tile[num248, num249 + 1].type != 30 && Main.tile[num248, num249 + 1].type != 19 &&
                            Main.tile[num248, num249 + 1].type != 41 && Main.tile[num248, num249 + 1].type != 43 &&
                            Main.tile[num248, num249 + 1].type != 44 && Main.tile[num248, num249 + 1].type != 45 &&
                            Main.tile[num248, num249 + 1].type != 46 && Main.tile[num248, num249 + 1].type != 47 &&
                            Main.tile[num248, num249 + 1].type != 175 && Main.tile[num248, num249 + 1].type != 176 &&
                            Main.tile[num248, num249 + 1].type != 177 && Main.tile[num248, num249 + 1].type != 53 &&
                            Main.tile[num248, num249 + 1].type != 25 && Main.tile[num248, num249 + 1].type != 203)
                        {
                            flag14 = PlaceSmallPile(num248, num249, num251, num250, 185);
                        }
                    }
                }
            }

            for (int num252 = 0; (float) num252 < (float) Main.maxTilesX * 0.15f; num252++)
            {
                bool flag15 = false;
                while (!flag15)
                {
                    int num253 = genRand.Next(25, Main.maxTilesX - 25);
                    int num254 = genRand.Next(15, (int) Main.worldSurface);
                    if (!Main.tile[num253, num254].active() &&
                        (Main.tile[num253, num254].wall == 2 || Main.tile[num253, num254].wall == 40))
                    {
                        for (; !Main.tile[num253, num254 + 1].active() && num254 < Main.maxTilesY - 5; num254++)
                        {
                        }

                        int num255 = genRand.Next(2);
                        int num256 = genRand.Next(11);
                        if (num255 == 1)
                        {
                            num256 = genRand.Next(5);
                        }

                        if (Main.tile[num253, num254 + 1].type == 147 || Main.tile[num253, num254 + 1].type == 161 ||
                            Main.tile[num253, num254 + 1].type == 162)
                        {
                            if (num255 == 0 && num256 < 12)
                            {
                                num256 += 36;
                            }

                            if (num255 == 1 && num256 >= 20)
                            {
                                num256 += 6;
                            }

                            if (num255 == 1 && num256 < 6)
                            {
                                num256 += 25;
                            }
                        }

                        if (Main.tile[num253, num254 + 1].type == 2 && num255 == 1)
                        {
                            num256 = genRand.Next(38, 41);
                        }

                        if (Main.tile[num253, num254 + 1].type == 151 || Main.tile[num253, num254 + 1].type == 274)
                        {
                            if (num255 == 0)
                            {
                                num256 = genRand.Next(12, 28);
                            }

                            if (num255 == 1)
                            {
                                num256 = genRand.Next(12, 19);
                            }
                        }

                        if (!Main.wallDungeon[Main.tile[num253, num254].wall] &&
                            Main.tile[num253, num254 + 1].type != 30 && Main.tile[num253, num254 + 1].type != 19 &&
                            Main.tile[num253, num254 + 1].type != 41 && Main.tile[num253, num254 + 1].type != 43 &&
                            Main.tile[num253, num254 + 1].type != 44 && Main.tile[num253, num254 + 1].type != 45 &&
                            Main.tile[num253, num254 + 1].type != 46 && Main.tile[num253, num254 + 1].type != 47 &&
                            Main.tile[num253, num254 + 1].type != 175 && Main.tile[num253, num254 + 1].type != 176 &&
                            Main.tile[num253, num254 + 1].type != 177 && Main.tile[num253, num254 + 1].type != 25 &&
                            Main.tile[num253, num254 + 1].type != 203)
                        {
                            flag15 = PlaceSmallPile(num253, num254, num256, num255, 185);
                        }
                    }
                }
            }

            Main.tileSolid[190] = true;
            Main.tileSolid[192] = true;
            Main.tileSolid[196] = true;
            Main.tileSolid[189] = true;
            Main.tileSolid[202] = true;
            Main.tileSolid[225] = true;
        });
        AddGenerationPass("Moss", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[38].Value;
            int num197 = 8;
            int num198 = 400;
            int num199 = 4;
            int num200 = 275;
            for (int num201 = 0; num201 < 3; num201++)
            {
                int num202;
                int num203;
                bool flag8;
                int maxValue2;
                switch (num201)
                {
                    default:
                        num202 = 5;
                        num203 = num200;
                        flag8 = false;
                        maxValue2 = num199;
                        break;
                    case 1:
                        num202 = num198;
                        num203 = Main.maxTilesX - num198;
                        flag8 = true;
                        maxValue2 = num197;
                        break;
                    case 2:
                        num202 = Main.maxTilesX - num200;
                        num203 = Main.maxTilesX - 5;
                        flag8 = false;
                        maxValue2 = num199;
                        break;
                }

                for (int num204 = num202; num204 < num203; num204++)
                {
                    if (genRand.Next(maxValue2) == 0)
                    {
                        for (int num205 = 0; (double) num205 < Main.worldSurface - 1.0; num205++)
                        {
                            Tile tile2 = Main.tile[num204, num205];
                            if (tile2.active() && tile2.type == 53)
                            {
                                Tile tile3 = Main.tile[num204, num205 - 1];
                                if (!tile3.active() && tile3.wall == 0)
                                {
                                    if (flag8)
                                    {
                                        PlantCactus(num204, num205);
                                        break;
                                    }

                                    if (Main.tile[num204, num205 - 2].liquid == 255 &&
                                        Main.tile[num204, num205 - 3].liquid == 255 &&
                                        Main.tile[num204, num205 - 4].liquid == 255)
                                    {
                                        if (genRand.Next(2) == 0)
                                        {
                                            PlaceTile(num204, num205 - 1, 81, true, false, -1, 0);
                                        }
                                        else
                                        {
                                            PlaceTile(num204, num205 - 1, 324, true, false, -1, genRand.Next(2));
                                        }

                                        break;
                                    }

                                    if (Main.tile[num204, num205 - 2].liquid == 0)
                                    {
                                        PlaceTile(num204, num205 - 1, 324, true, false, -1, genRand.Next(2));
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        });
        AddGenerationPass("Spawn Point", delegate
        {
            int num191 = 5;
            bool flag7 = true;
            while (flag7)
            {
                int num192 = Main.maxTilesX / 2 + genRand.Next(-num191, num191 + 1);
                for (int num193 = 0; num193 < Main.maxTilesY; num193++)
                {
                    if (Main.tile[num192, num193].active())
                    {
                        Main.spawnTileX = num192;
                        Main.spawnTileY = num193;
                        break;
                    }
                }

                flag7 = false;
                num191++;
                if ((double) Main.spawnTileY > Main.worldSurface)
                {
                    flag7 = true;
                }

                if (Main.tile[Main.spawnTileX, Main.spawnTileY - 1].liquid > 0)
                {
                    flag7 = true;
                }
            }

            int num194 = 10;
            while ((double) Main.spawnTileY > Main.worldSurface)
            {
                int num195 = genRand.Next(Main.maxTilesX / 2 - num194, Main.maxTilesX / 2 + num194);
                for (int num196 = 0; num196 < Main.maxTilesY; num196++)
                {
                    if (Main.tile[num195, num196].active())
                    {
                        Main.spawnTileX = num195;
                        Main.spawnTileY = num196;
                        break;
                    }
                }

                num194++;
            }
        });
        AddGenerationPass("Grass Wall", delegate
        {
            maxTileCount = 3500;
            for (int num178 = 50; num178 < Main.maxTilesX - 50; num178++)
            {
                for (int num179 = 0; (double) num179 < Main.worldSurface - 10.0; num179++)
                {
                    if (genRand.Next(4) == 0)
                    {
                        bool flag5 = false;
                        int num180 = -1;
                        int num181 = -1;
                        if (Main.tile[num178, num179].active() && Main.tile[num178, num179].type == 2 &&
                            (Main.tile[num178, num179].wall == 2 || Main.tile[num178, num179].wall == 63))
                        {
                            for (int num182 = num178 - 1; num182 <= num178 + 1; num182++)
                            {
                                for (int num183 = num179 - 1; num183 <= num179 + 1; num183++)
                                {
                                    if (Main.tile[num182, num183].wall == 0 && !SolidTile(num182, num183))
                                    {
                                        flag5 = true;
                                    }
                                }
                            }

                            if (flag5)
                            {
                                for (int num184 = num178 - 1; num184 <= num178 + 1; num184++)
                                {
                                    for (int num185 = num179 - 1; num185 <= num179 + 1; num185++)
                                    {
                                        if ((Main.tile[num184, num185].wall == 2 ||
                                             Main.tile[num184, num185].wall == 15) && !SolidTile(num184, num185))
                                        {
                                            num180 = num184;
                                            num181 = num185;
                                        }
                                    }
                                }
                            }
                        }

                        if (flag5 && num180 > -1 && num181 > -1)
                        {
                            int num186 = countDirtTiles(num180, num181);
                            if (num186 < maxTileCount)
                            {
                                try
                                {
                                    Spread.Wall2(num180, num181, 63);
                                }
                                catch
                                {
                                }
                            }
                        }
                    }
                }
            }

            for (int num187 = 5; num187 < Main.maxTilesX - 5; num187++)
            {
                for (int num188 = 10; (double) num188 < Main.worldSurface - 1.0; num188++)
                {
                    if (Main.tile[num187, num188].wall == 63 && genRand.Next(10) == 0)
                    {
                        Main.tile[num187, num188].wall = 65;
                    }

                    if (Main.tile[num187, num188].active() && Main.tile[num187, num188].type == 0)
                    {
                        bool flag6 = false;
                        for (int num189 = num187 - 1; num189 <= num187 + 1; num189++)
                        {
                            for (int num190 = num188 - 1; num190 <= num188 + 1; num190++)
                            {
                                if (Main.tile[num187, num188].wall == 63 || Main.tile[num187, num188].wall == 65)
                                {
                                    flag6 = true;
                                    break;
                                }
                            }
                        }

                        if (flag6)
                        {
                            SpreadGrass(num187, num188, 0, 2, true, 0);
                        }
                    }
                }
            }
        });
        AddGenerationPass("Guide", delegate
        {
            int num177 = NPC.NewNPC(Main.spawnTileX * 16, Main.spawnTileY * 16, 22, 0, 0f, 0f, 0f, 0f, 255);
            Main.npc[num177].homeTileX = Main.spawnTileX;
            Main.npc[num177].homeTileY = Main.spawnTileY;
            Main.npc[num177].direction = 1;
            Main.npc[num177].homeless = true;
        });
        AddGenerationPass("Sunflowers", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[39].Value;
            for (int num171 = 0; (double) num171 < (double) Main.maxTilesX * 0.002; num171++)
            {
                int num172 = 0;
                int num173 = 0;
                int num174 = 0;
                int num709 = Main.maxTilesX / 2;
                num172 = genRand.Next(Main.maxTilesX);
                num173 = num172 - genRand.Next(10) - 7;
                num174 = num172 + genRand.Next(10) + 7;
                if (num173 < 0)
                {
                    num173 = 0;
                }

                if (num174 > Main.maxTilesX - 1)
                {
                    num174 = Main.maxTilesX - 1;
                }

                for (int num175 = num173; num175 < num174; num175++)
                {
                    for (int num176 = 1; (double) num176 < Main.worldSurface - 1.0; num176++)
                    {
                        if (Main.tile[num175, num176].type == 2 && Main.tile[num175, num176].active() &&
                            !Main.tile[num175, num176 - 1].active())
                        {
                            PlaceTile(num175, num176 - 1, 27, true, false, -1, 0);
                        }

                        if (Main.tile[num175, num176].active())
                        {
                            break;
                        }
                    }
                }
            }
        });
        AddGenerationPass("Planting Trees", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[40].Value;
            for (int num166 = 0; (double) num166 < (double) Main.maxTilesX * 0.003; num166++)
            {
                int num167 = genRand.Next(50, Main.maxTilesX - 50);
                int num168 = genRand.Next(25, 50);
                for (int num169 = num167 - num168; num169 < num167 + num168; num169++)
                {
                    for (int num170 = 20; (double) num170 < Main.worldSurface; num170++)
                    {
                        GrowEpicTree(num169, num170);
                    }
                }
            }

            AddTrees();
        });
        AddGenerationPass("Herbs", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[41].Value;
            for (int num165 = 0; (double) num165 < (double) Main.maxTilesX * 1.7; num165++)
            {
                PlantAlch();
            }
        });
        AddGenerationPass("Dye Plants", delegate
        {
            for (int num163 = 0; num163 < Main.maxTilesX; num163++)
            {
                plantDye(genRand.Next(100, Main.maxTilesX - 100), genRand.Next(100, Main.maxTilesY - 200), false);
            }

            for (int num164 = 0; num164 < Main.maxTilesX / 8; num164++)
            {
                plantDye(genRand.Next(100, Main.maxTilesX - 100), genRand.Next(100, Main.maxTilesY - 200), true);
            }
        });
        AddGenerationPass("Webs And Honey", delegate
        {
            for (int num154 = 100; num154 < Main.maxTilesX - 100; num154++)
            {
                for (int num155 = (int) Main.worldSurface; num155 < Main.maxTilesY - 100; num155++)
                {
                    if (Main.tile[num154, num155].wall == 86)
                    {
                        if (Main.tile[num154, num155].liquid > 0)
                        {
                            Main.tile[num154, num155].honey(true);
                        }

                        if (genRand.Next(3) == 0)
                        {
                            PlaceTight(num154, num155, 165, false);
                        }
                    }

                    if (Main.tile[num154, num155].wall == 62)
                    {
                        Main.tile[num154, num155].liquid = 0;
                        Main.tile[num154, num155].lava(false);
                    }

                    if (Main.tile[num154, num155].wall == 62 && !Main.tile[num154, num155].active() &&
                        genRand.Next(10) != 0)
                    {
                        int num156 = genRand.Next(2, 5);
                        int num157 = num154 - num156;
                        int num158 = num154 + num156;
                        int num159 = num155 - num156;
                        int num160 = num155 + num156;
                        bool flag4 = false;
                        for (int num161 = num157; num161 <= num158; num161++)
                        {
                            for (int num162 = num159; num162 <= num160; num162++)
                            {
                                if (SolidTile(num161, num162))
                                {
                                    flag4 = true;
                                    break;
                                }
                            }
                        }

                        if (flag4)
                        {
                            PlaceTile(num154, num155, 51, true, false, -1, 0);
                            TileFrame(num154, num155, false, false);
                        }
                    }
                }
            }
        });
        AddGenerationPass("Weeds", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[42].Value;
            if (Main.halloween)
            {
                for (int num150 = 40; num150 < Main.maxTilesX - 40; num150++)
                {
                    for (int num151 = 50; (double) num151 < Main.worldSurface; num151++)
                    {
                        if (Main.tile[num150, num151].active() && Main.tile[num150, num151].type == 2 &&
                            genRand.Next(15) == 0)
                        {
                            PlacePumpkin(num150, num151 - 1);
                            int num152 = genRand.Next(5);
                            for (int num153 = 0; num153 < num152; num153++)
                            {
                                GrowPumpkin(num150, num151 - 1, 254);
                            }
                        }
                    }
                }
            }

            AddPlants();
        });
        AddGenerationPass("Mud Caves To Grass", delegate
        {
            for (int num148 = 0; num148 < Main.maxTilesX; num148++)
            {
                for (int num149 = 0; num149 < Main.maxTilesY; num149++)
                {
                    if (Main.tile[num148, num149].active())
                    {
                        if (num149 >= (int) Main.worldSurface && Main.tile[num148, num149].type == 70 &&
                            !Main.tile[num148, num149 - 1].active())
                        {
                            GrowShroom(num148, num149);
                            if (!Main.tile[num148, num149 - 1].active())
                            {
                                PlaceTile(num148, num149 - 1, 71, true, false, -1, 0);
                            }
                        }

                        if (Main.tile[num148, num149].type == 60 && !Main.tile[num148, num149 - 1].active())
                        {
                            PlaceTile(num148, num149 - 1, 61, true, false, -1, 0);
                        }
                    }
                }
            }
        });
        AddGenerationPass("Jungle Plants", delegate
        {
            for (int num145 = 0; num145 < Main.maxTilesX * 100; num145++)
            {
                int num146 = genRand.Next(40, Main.maxTilesX / 2 - 40);
                if (dungeonSide < 0)
                {
                    num146 += Main.maxTilesX / 2;
                }

                int num147;
                for (num147 = genRand.Next(Main.maxTilesY - 300);
                    !Main.tile[num146, num147].active() && num147 < Main.maxTilesY - 300;
                    num147++)
                {
                }

                if (Main.tile[num146, num147].active() && Main.tile[num146, num147].type == 60)
                {
                    num147--;
                    PlaceJunglePlant(num146, num147, 233, genRand.Next(8), 0);
                    if (Main.tile[num146, num147].type != 233)
                    {
                        PlaceJunglePlant(num146, num147, 233, genRand.Next(12), 1);
                    }
                }
            }
        });
        AddGenerationPass("Vines", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[43].Value;
            for (int num134 = 0; num134 < Main.maxTilesX; num134++)
            {
                int num135 = 0;
                for (int num136 = 0; (double) num136 < Main.worldSurface; num136++)
                {
                    if (num135 > 0 && !Main.tile[num134, num136].active())
                    {
                        Main.tile[num134, num136].active(true);
                        Main.tile[num134, num136].type = 52;
                        num135--;
                    }
                    else
                    {
                        num135 = 0;
                    }

                    if (Main.tile[num134, num136].active() && !Main.tile[num134, num136].bottomSlope() &&
                        (Main.tile[num134, num136].type == 2 ||
                         (Main.tile[num134, num136].type == 192 && genRand.Next(4) == 0)) && genRand.Next(5) < 3)
                    {
                        num135 = genRand.Next(1, 10);
                    }
                }

                num135 = 0;
                for (int num137 = 0; num137 < Main.maxTilesY; num137++)
                {
                    if (num135 > 0 && !Main.tile[num134, num137].active())
                    {
                        Main.tile[num134, num137].active(true);
                        Main.tile[num134, num137].type = 62;
                        num135--;
                    }
                    else
                    {
                        num135 = 0;
                    }

                    if (Main.tile[num134, num137].active() && Main.tile[num134, num137].type == 60 &&
                        !Main.tile[num134, num137].bottomSlope())
                    {
                        if (num134 < Main.maxTilesX - 1 && num137 < Main.maxTilesY - 2 &&
                            Main.tile[num134 + 1, num137].active() && Main.tile[num134 + 1, num137].type == 60 &&
                            !Main.tile[num134 + 1, num137].bottomSlope() && genRand.Next(40) == 0)
                        {
                            bool flag3 = true;
                            for (int num138 = num134; num138 < num134 + 2; num138++)
                            {
                                for (int num139 = num137 + 1; num139 < num137 + 3; num139++)
                                {
                                    if (Main.tile[num138, num139].active() &&
                                        (!Main.tileCut[Main.tile[num138, num139].type] ||
                                         Main.tile[num138, num139].type == 444))
                                    {
                                        flag3 = false;
                                        break;
                                    }

                                    if (Main.tile[num138, num139].liquid > 0 ||
                                        Main.wallHouse[Main.tile[num138, num139].wall])
                                    {
                                        flag3 = false;
                                        break;
                                    }
                                }

                                if (!flag3)
                                {
                                    break;
                                }
                            }

                            if (flag3 && CountNearBlocksTypes(num134, num137, 20, 1, 444) > 0)
                            {
                                flag3 = false;
                            }

                            if (flag3)
                            {
                                for (int num140 = num134; num140 < num134 + 2; num140++)
                                {
                                    for (int num141 = num137 + 1; num141 < num137 + 3; num141++)
                                    {
                                        KillTile(num140, num141, false, false, false);
                                    }
                                }

                                for (int num142 = num134; num142 < num134 + 2; num142++)
                                {
                                    for (int num143 = num137 + 1; num143 < num137 + 3; num143++)
                                    {
                                        Main.tile[num142, num143].active(true);
                                        Main.tile[num142, num143].type = 444;
                                        Main.tile[num142, num143].frameX = (short) ((num142 - num134) * 18);
                                        Main.tile[num142, num143].frameY = (short) ((num143 - num137 - 1) * 18);
                                    }
                                }

                                continue;
                            }
                        }

                        if (genRand.Next(5) < 3)
                        {
                            num135 = genRand.Next(1, 10);
                        }
                    }
                }

                num135 = 0;
                for (int num144 = 0; num144 < Main.maxTilesY; num144++)
                {
                    if (num135 > 0 && !Main.tile[num134, num144].active())
                    {
                        Main.tile[num134, num144].active(true);
                        Main.tile[num134, num144].type = 205;
                        num135--;
                    }
                    else
                    {
                        num135 = 0;
                    }

                    if (Main.tile[num134, num144].active() && Main.tile[num134, num144].type == 199 &&
                        genRand.Next(5) < 3)
                    {
                        num135 = genRand.Next(1, 10);
                    }
                }
            }
        });
        AddGenerationPass("Flowers", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[44].Value;
            for (int num127 = 0; (double) num127 < (double) Main.maxTilesX * 0.005; num127++)
            {
                int num128 = genRand.Next(20, Main.maxTilesX - 20);
                int num129 = genRand.Next(5, 15);
                int num130 = genRand.Next(15, 30);
                for (int num131 = 1; (double) num131 < Main.worldSurface - 1.0; num131++)
                {
                    if (Main.tile[num128, num131].active())
                    {
                        for (int num132 = num128 - num129; num132 < num128 + num129; num132++)
                        {
                            for (int num133 = num131 - num130; num133 < num131 + num130; num133++)
                            {
                                if (Main.tile[num132, num133].type == 3 || Main.tile[num132, num133].type == 24)
                                {
                                    Main.tile[num132, num133].frameX = (short) (genRand.Next(6, 8) * 18);
                                    if (Main.tile[num132, num133].type == 3 && genRand.Next(2) == 0)
                                    {
                                        Main.tile[num132, num133].frameX = (short) (genRand.Next(9, 11) * 18);
                                    }
                                }
                            }
                        }

                        break;
                    }
                }
            }
        });
        AddGenerationPass("Mushrooms", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[45].Value;
            for (int num120 = 0; (double) num120 < (double) Main.maxTilesX * 0.002; num120++)
            {
                int num121 = genRand.Next(20, Main.maxTilesX - 20);
                int num122 = genRand.Next(4, 10);
                int num123 = genRand.Next(15, 30);
                for (int num124 = 1; (double) num124 < Main.worldSurface - 1.0; num124++)
                {
                    if (Main.tile[num121, num124].active())
                    {
                        for (int num125 = num121 - num122; num125 < num121 + num122; num125++)
                        {
                            for (int num126 = num124 - num123; num126 < num124 + num123; num126++)
                            {
                                if (Main.tile[num125, num126].type == 3 || Main.tile[num125, num126].type == 24)
                                {
                                    Main.tile[num125, num126].frameX = 144;
                                }
                                else if (Main.tile[num125, num126].type == 201)
                                {
                                    Main.tile[num125, num126].frameX = 270;
                                }
                            }
                        }

                        break;
                    }
                }
            }
        });
        AddGenerationPass("Stalac", delegate
        {
            for (int num117 = 20; num117 < Main.maxTilesX - 20; num117++)
            {
                for (int num118 = (int) Main.worldSurface; num118 < Main.maxTilesY - 20; num118++)
                {
                    if (!Main.tile[num117, num118].active() && genRand.Next(5) == 0)
                    {
                        if ((Main.tile[num117, num118 - 1].type == 1 || Main.tile[num117, num118 - 1].type == 147 ||
                             Main.tile[num117, num118 - 1].type == 161 || Main.tile[num117, num118 - 1].type == 25 ||
                             Main.tile[num117, num118 - 1].type == 203 ||
                             Main.tileStone[Main.tile[num117, num118 - 1].type] ||
                             Main.tileMoss[Main.tile[num117, num118 - 1].type]) &&
                            !Main.tile[num117, num118].active() && !Main.tile[num117, num118 + 1].active())
                        {
                            Main.tile[num117, num118 - 1].slope(0);
                        }

                        if ((Main.tile[num117, num118 + 1].type == 1 || Main.tile[num117, num118 + 1].type == 147 ||
                             Main.tile[num117, num118 + 1].type == 161 || Main.tile[num117, num118 + 1].type == 25 ||
                             Main.tile[num117, num118 + 1].type == 203 ||
                             Main.tileStone[Main.tile[num117, num118 + 1].type] ||
                             Main.tileMoss[Main.tile[num117, num118 + 1].type]) &&
                            !Main.tile[num117, num118].active() && !Main.tile[num117, num118 - 1].active())
                        {
                            Main.tile[num117, num118 + 1].slope(0);
                        }

                        PlaceTight(num117, num118, 165, false);
                    }
                }

                for (int num119 = 5; num119 < (int) Main.worldSurface; num119++)
                {
                    if ((Main.tile[num117, num119 - 1].type == 147 || Main.tile[num117, num119 - 1].type == 161) &&
                        genRand.Next(5) == 0)
                    {
                        if (!Main.tile[num117, num119].active() && !Main.tile[num117, num119 + 1].active())
                        {
                            Main.tile[num117, num119 - 1].slope(0);
                        }

                        PlaceTight(num117, num119, 165, false);
                    }

                    if ((Main.tile[num117, num119 - 1].type == 25 || Main.tile[num117, num119 - 1].type == 203) &&
                        genRand.Next(5) == 0)
                    {
                        if (!Main.tile[num117, num119].active() && !Main.tile[num117, num119 + 1].active())
                        {
                            Main.tile[num117, num119 - 1].slope(0);
                        }

                        PlaceTight(num117, num119, 165, false);
                    }

                    if ((Main.tile[num117, num119 + 1].type == 25 || Main.tile[num117, num119 + 1].type == 203) &&
                        genRand.Next(5) == 0)
                    {
                        if (!Main.tile[num117, num119].active() && !Main.tile[num117, num119 - 1].active())
                        {
                            Main.tile[num117, num119 + 1].slope(0);
                        }

                        PlaceTight(num117, num119, 165, false);
                    }
                }
            }
        });
        AddGenerationPass("Gems In Ice Biome", delegate
        {
            for (int num106 = 0; (double) num106 < (double) Main.maxTilesX * 0.25; num106++)
            {
                int num107 = genRand.Next((int) (Main.worldSurface + Main.rockLayer) / 2, lavaLine);
                int num108 = genRand.Next(snowMinX[num107], snowMaxX[num107]);
                if (Main.tile[num108, num107].active() &&
                    (Main.tile[num108, num107].type == 147 || Main.tile[num108, num107].type == 161 ||
                     Main.tile[num108, num107].type == 162 || Main.tile[num108, num107].type == 224))
                {
                    int num109 = genRand.Next(1, 4);
                    int num110 = genRand.Next(1, 4);
                    int num111 = genRand.Next(1, 4);
                    int num112 = genRand.Next(1, 4);
                    int num113 = genRand.Next(12);
                    int num114 = 0;
                    num114 = ((num113 >= 3)
                        ? ((num113 < 6) ? 1 : ((num113 < 8) ? 2 : ((num113 < 10) ? 3 : ((num113 >= 11) ? 5 : 4))))
                        : 0);
                    for (int num115 = num108 - num109; num115 < num108 + num110; num115++)
                    {
                        for (int num116 = num107 - num111; num116 < num107 + num112; num116++)
                        {
                            if (!Main.tile[num115, num116].active())
                            {
                                PlaceTile(num115, num116, 178, true, false, -1, num114);
                            }
                        }
                    }
                }
            }
        });
        AddGenerationPass("Random Gems", delegate
        {
            for (int num101 = 0; num101 < Main.maxTilesX; num101++)
            {
                int num102 = genRand.Next(20, Main.maxTilesX - 20);
                int num103 = genRand.Next((int) Main.rockLayer, Main.maxTilesY - 300);
                if (!Main.tile[num102, num103].active() && !Main.tile[num102, num103].lava() &&
                    !Main.wallDungeon[Main.tile[num102, num103].wall] && Main.tile[num102, num103].wall != 27)
                {
                    int num104 = genRand.Next(12);
                    int num105 = 0;
                    num105 = ((num104 >= 3)
                        ? ((num104 < 6) ? 1 : ((num104 < 8) ? 2 : ((num104 < 10) ? 3 : ((num104 >= 11) ? 5 : 4))))
                        : 0);
                    PlaceTile(num102, num103, 178, true, false, -1, num105);
                }
            }
        });
        AddGenerationPass("Moss Grass", delegate
        {
            for (int num96 = 5; num96 < Main.maxTilesX - 5; num96++)
            {
                for (int num97 = 5; num97 < Main.maxTilesY - 5; num97++)
                {
                    if (Main.tile[num96, num97].active() && Main.tileMoss[Main.tile[num96, num97].type])
                    {
                        for (int num98 = 0; num98 < 4; num98++)
                        {
                            int num99 = num96;
                            int num100 = num97;
                            if (num98 == 0)
                            {
                                num99--;
                            }

                            if (num98 == 1)
                            {
                                num99++;
                            }

                            if (num98 == 2)
                            {
                                num100--;
                            }

                            if (num98 == 3)
                            {
                                num100++;
                            }

                            if (!Main.tile[num99, num100].active())
                            {
                                PlaceTile(num99, num100, 184, true, false, -1, 0);
                            }
                        }
                    }
                }
            }
        });
        AddGenerationPass("Muds Walls In Jungle", delegate
        {
            int num88 = 0;
            int num89 = 0;
            bool flag2 = false;
            for (int num90 = 5; num90 < Main.maxTilesX - 5; num90++)
            {
                for (int num91 = 0; (double) num91 < Main.worldSurface + 20.0; num91++)
                {
                    if (Main.tile[num90, num91].active() && Main.tile[num90, num91].type == 60)
                    {
                        num88 = num90;
                        flag2 = true;
                        break;
                    }
                }

                if (flag2)
                {
                    break;
                }
            }

            flag2 = false;
            for (int num92 = Main.maxTilesX - 5; num92 > 5; num92--)
            {
                for (int num93 = 0; (double) num93 < Main.worldSurface + 20.0; num93++)
                {
                    if (Main.tile[num92, num93].active() && Main.tile[num92, num93].type == 60)
                    {
                        num89 = num92;
                        flag2 = true;
                        break;
                    }
                }

                if (flag2)
                {
                    break;
                }
            }

            for (int num94 = num88; num94 <= num89; num94++)
            {
                for (int num95 = 0; (double) num95 < Main.worldSurface + 20.0; num95++)
                {
                    if (((num94 >= num88 + 2 && num94 <= num89 - 2) || genRand.Next(2) != 0) &&
                        ((num94 >= num88 + 3 && num94 <= num89 - 3) || genRand.Next(3) != 0) &&
                        (Main.tile[num94, num95].wall == 2 || Main.tile[num94, num95].wall == 59))
                    {
                        Main.tile[num94, num95].wall = 15;
                    }
                }
            }
        });
        AddGenerationPass("Larva", delegate
        {
            for (int num83 = 0; num83 < numLarva; num83++)
            {
                int num84 = larvaX[num83];
                int num85 = larvaY[num83];
                for (int num86 = num84 - 1; num86 <= num84 + 1; num86++)
                {
                    for (int num87 = num85 - 2; num87 <= num85 + 1; num87++)
                    {
                        if (num87 != num85 + 1)
                        {
                            Main.tile[num86, num87].active(false);
                        }
                        else
                        {
                            Main.tile[num86, num87].active(true);
                            Main.tile[num86, num87].type = 225;
                            Main.tile[num86, num87].slope(0);
                            Main.tile[num86, num87].halfBrick(false);
                        }
                    }
                }

                PlaceTile(num84, num85, 231, true, false, -1, 0);
            }

            Main.tileSolid[232] = true;
            Main.tileSolid[162] = true;
        });
        AddGenerationPass("Settle Liquids Again", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[27].Value;
            Liquid.QuickWater(3, -1, -1);
            WaterCheck();
            int num78 = 0;
            Liquid.quickSettle = true;
            while (num78 < 10)
            {
                int num79 = Liquid.numLiquid + LiquidBuffer.numLiquidBuffer;
                num78++;
                float num80 = 0f;
                while (Liquid.numLiquid > 0)
                {
                    float num81 = (float) (num79 - (Liquid.numLiquid + LiquidBuffer.numLiquidBuffer)) / (float) num79;
                    if (Liquid.numLiquid + LiquidBuffer.numLiquidBuffer > num79)
                    {
                        num79 = Liquid.numLiquid + LiquidBuffer.numLiquidBuffer;
                    }

                    if (num81 > num80)
                    {
                        num80 = num81;
                    }
                    else
                    {
                        num81 = num80;
                    }

                    if (num78 == 1)
                    {
                        progress.Set(num81 / 3f + 0.33f);
                    }

                    int num82 = 10;
                    if (num78 > num82)
                    {
                        num82 = num78;
                    }

                    Liquid.UpdateLiquid();
                }

                WaterCheck();
                progress.Set((float) num78 * 0.1f / 3f + 0.66f);
            }

            Liquid.quickSettle = false;
        });
        AddGenerationPass("Tile Cleanup", delegate
        {
            for (int num21 = 40; num21 < Main.maxTilesX - 40; num21++)
            {
                for (int num22 = 40; num22 < Main.maxTilesY - 40; num22++)
                {
                    if (!Main.tile[num21, num22].active() && Main.tile[num21, num22].liquid == 0 &&
                        genRand.Next(3) != 0 && SolidTile(num21, num22 - 1))
                    {
                        int num23 = genRand.Next(15, 21);
                        for (int num24 = num22 - 2; num24 >= num22 - num23; num24--)
                        {
                            if (Main.tile[num21, num24].liquid >= 128)
                            {
                                int num25 = 373;
                                if (Main.tile[num21, num24].lava())
                                {
                                    num25 = 374;
                                }
                                else if (Main.tile[num21, num24].honey())
                                {
                                    num25 = 375;
                                }

                                int maxValue = num22 - num24;
                                if (genRand.Next(maxValue) <= 1)
                                {
                                    Main.tile[num21, num22].type = (ushort) num25;
                                    Main.tile[num21, num22].frameX = 0;
                                    Main.tile[num21, num22].frameY = 0;
                                    Main.tile[num21, num22].active(true);
                                    break;
                                }
                            }
                        }

                        if (!Main.tile[num21, num22].active())
                        {
                            num23 = genRand.Next(3, 11);
                            for (int num26 = num22 + 1; num26 <= num22 + num23; num26++)
                            {
                                if (Main.tile[num21, num26].liquid >= 200)
                                {
                                    int num27 = 373;
                                    if (Main.tile[num21, num26].lava())
                                    {
                                        num27 = 374;
                                    }
                                    else if (Main.tile[num21, num26].honey())
                                    {
                                        num27 = 375;
                                    }

                                    int num28 = num26 - num22;
                                    if (genRand.Next(num28 * 3) <= 1)
                                    {
                                        Main.tile[num21, num22].type = (ushort) num27;
                                        Main.tile[num21, num22].frameX = 0;
                                        Main.tile[num21, num22].frameY = 0;
                                        Main.tile[num21, num22].active(true);
                                        break;
                                    }
                                }
                            }
                        }

                        if (!Main.tile[num21, num22].active() && genRand.Next(3) != 0)
                        {
                            Tile tile = Main.tile[num21, num22 - 1];
                            if (TileID.Sets.Conversion.Sandstone[tile.type] ||
                                TileID.Sets.Conversion.HardenedSand[tile.type])
                            {
                                Main.tile[num21, num22].type = 461;
                                Main.tile[num21, num22].frameX = 0;
                                Main.tile[num21, num22].frameY = 0;
                                Main.tile[num21, num22].active(true);
                            }
                        }
                    }

                    if (Main.tile[num21, num22].type == 137)
                    {
                        if (Main.tile[num21, num22].frameY <= 52)
                        {
                            int num29 = -1;
                            if (Main.tile[num21, num22].frameX >= 18)
                            {
                                num29 = 1;
                            }

                            if (Main.tile[num21 + num29, num22].halfBrick() ||
                                Main.tile[num21 + num29, num22].slope() != 0)
                            {
                                Main.tile[num21 + num29, num22].active(false);
                            }
                        }
                    }
                    else if (Main.tile[num21, num22].type == 162 && Main.tile[num21, num22 + 1].liquid == 0)
                    {
                        Main.tile[num21, num22].active(false);
                    }

                    if (Main.tile[num21, num22].wall == 13 || Main.tile[num21, num22].wall == 14)
                    {
                        Main.tile[num21, num22].liquid = 0;
                    }

                    if (Main.tile[num21, num22].type == 31)
                    {
                        int num30 = Main.tile[num21, num22].frameX / 18;
                        int num31 = 0;
                        int num32 = num21;
                        num31 += num30 / 2;
                        num31 = (crimson ? 1 : 0);
                        num30 %= 2;
                        num32 -= num30;
                        int num33 = Main.tile[num21, num22].frameY / 18;
                        int num34 = 0;
                        int num35 = num22;
                        num34 += num33 / 2;
                        num33 %= 2;
                        num35 -= num33;
                        for (int num36 = 0; num36 < 2; num36++)
                        {
                            for (int num37 = 0; num37 < 2; num37++)
                            {
                                int num38 = num32 + num36;
                                int num39 = num35 + num37;
                                Main.tile[num38, num39].active(true);
                                Main.tile[num38, num39].slope(0);
                                Main.tile[num38, num39].halfBrick(false);
                                Main.tile[num38, num39].type = 31;
                                Main.tile[num38, num39].frameX = (short) (num36 * 18 + 36 * num31);
                                Main.tile[num38, num39].frameY = (short) (num37 * 18 + 36 * num34);
                            }
                        }
                    }

                    if (Main.tile[num21, num22].type == 12)
                    {
                        int num40 = Main.tile[num21, num22].frameX / 18;
                        int num41 = 0;
                        int num42 = num21;
                        num41 += num40 / 2;
                        num40 %= 2;
                        num42 -= num40;
                        int num43 = Main.tile[num21, num22].frameY / 18;
                        int num44 = 0;
                        int num45 = num22;
                        num44 += num43 / 2;
                        num43 %= 2;
                        num45 -= num43;
                        for (int num46 = 0; num46 < 2; num46++)
                        {
                            for (int num47 = 0; num47 < 2; num47++)
                            {
                                int num48 = num42 + num46;
                                int num49 = num45 + num47;
                                Main.tile[num48, num49].active(true);
                                Main.tile[num48, num49].slope(0);
                                Main.tile[num48, num49].halfBrick(false);
                                Main.tile[num48, num49].type = 12;
                                Main.tile[num48, num49].frameX = (short) (num46 * 18 + 36 * num41);
                                Main.tile[num48, num49].frameY = (short) (num47 * 18 + 36 * num44);
                            }

                            if (!Main.tile[num46, num22 + 2].active())
                            {
                                Main.tile[num46, num22 + 2].active(true);
                                if (!Main.tileSolid[Main.tile[num46, num22 + 2].type] ||
                                    Main.tileSolidTop[Main.tile[num46, num22 + 2].type])
                                {
                                    Main.tile[num46, num22 + 2].type = 0;
                                }
                            }

                            Main.tile[num46, num22 + 2].slope(0);
                            Main.tile[num46, num22 + 2].halfBrick(false);
                        }
                    }

                    if (TileID.Sets.BasicChest[Main.tile[num21, num22].type])
                    {
                        int num50 = Main.tile[num21, num22].frameX / 18;
                        int num51 = 0;
                        int num52 = num21;
                        int num53 = num22 - Main.tile[num21, num22].frameY / 18;
                        while (num50 >= 2)
                        {
                            num51++;
                            num50 -= 2;
                        }

                        num52 -= num50;
                        int num54 = Chest.FindChest(num52, num53);
                        if (num54 != -1)
                        {
                            switch (Main.chest[num54].item[0].type)
                            {
                                case 1156:
                                    num51 = 23;
                                    break;
                                case 1571:
                                    num51 = 24;
                                    break;
                                case 1569:
                                    num51 = 25;
                                    break;
                                case 1260:
                                    num51 = 26;
                                    break;
                                case 1572:
                                    num51 = 27;
                                    break;
                            }
                        }

                        for (int num55 = 0; num55 < 2; num55++)
                        {
                            for (int num56 = 0; num56 < 2; num56++)
                            {
                                int num57 = num52 + num55;
                                int num58 = num53 + num56;
                                Main.tile[num57, num58].active(true);
                                Main.tile[num57, num58].slope(0);
                                Main.tile[num57, num58].halfBrick(false);
                                Main.tile[num57, num58].type = 21;
                                Main.tile[num57, num58].frameX = (short) (num55 * 18 + 36 * num51);
                                Main.tile[num57, num58].frameY = (short) (num56 * 18);
                            }

                            if (!Main.tile[num55, num22 + 2].active())
                            {
                                Main.tile[num55, num22 + 2].active(true);
                                if (!Main.tileSolid[Main.tile[num55, num22 + 2].type] ||
                                    Main.tileSolidTop[Main.tile[num55, num22 + 2].type])
                                {
                                    Main.tile[num55, num22 + 2].type = 0;
                                }
                            }

                            Main.tile[num55, num22 + 2].slope(0);
                            Main.tile[num55, num22 + 2].halfBrick(false);
                        }
                    }

                    if (Main.tile[num21, num22].type == 28)
                    {
                        int num59 = Main.tile[num21, num22].frameX / 18;
                        int num60 = 0;
                        int num61 = num21;
                        while (num59 >= 2)
                        {
                            num60++;
                            num59 -= 2;
                        }

                        num61 -= num59;
                        int num62 = Main.tile[num21, num22].frameY / 18;
                        int num63 = 0;
                        int num64 = num22;
                        while (num62 >= 2)
                        {
                            num63++;
                            num62 -= 2;
                        }

                        num64 -= num62;
                        for (int num65 = 0; num65 < 2; num65++)
                        {
                            for (int num66 = 0; num66 < 2; num66++)
                            {
                                int num67 = num61 + num65;
                                int num68 = num64 + num66;
                                Main.tile[num67, num68].active(true);
                                Main.tile[num67, num68].slope(0);
                                Main.tile[num67, num68].halfBrick(false);
                                Main.tile[num67, num68].type = 28;
                                Main.tile[num67, num68].frameX = (short) (num65 * 18 + 36 * num60);
                                Main.tile[num67, num68].frameY = (short) (num66 * 18 + 36 * num63);
                            }

                            if (!Main.tile[num65, num22 + 2].active())
                            {
                                Main.tile[num65, num22 + 2].active(true);
                                if (!Main.tileSolid[Main.tile[num65, num22 + 2].type] ||
                                    Main.tileSolidTop[Main.tile[num65, num22 + 2].type])
                                {
                                    Main.tile[num65, num22 + 2].type = 0;
                                }
                            }

                            Main.tile[num65, num22 + 2].slope(0);
                            Main.tile[num65, num22 + 2].halfBrick(false);
                        }
                    }

                    if (Main.tile[num21, num22].type == 26)
                    {
                        int num69 = Main.tile[num21, num22].frameX / 18;
                        int num70 = 0;
                        int num71 = num21;
                        int num72 = num22 - Main.tile[num21, num22].frameY / 18;
                        while (num69 >= 3)
                        {
                            num70++;
                            num69 -= 3;
                        }

                        num71 -= num69;
                        for (int num73 = 0; num73 < 3; num73++)
                        {
                            for (int num74 = 0; num74 < 2; num74++)
                            {
                                int num75 = num71 + num73;
                                int num76 = num72 + num74;
                                Main.tile[num75, num76].active(true);
                                Main.tile[num75, num76].slope(0);
                                Main.tile[num75, num76].halfBrick(false);
                                Main.tile[num75, num76].type = 26;
                                Main.tile[num75, num76].frameX = (short) (num73 * 18 + 54 * num70);
                                Main.tile[num75, num76].frameY = (short) (num74 * 18);
                            }

                            if (!Main.tile[num71 + num73, num72 + 2].active() ||
                                !Main.tileSolid[Main.tile[num71 + num73, num72 + 2].type] ||
                                Main.tileSolidTop[Main.tile[num71 + num73, num72 + 2].type])
                            {
                                Main.tile[num71 + num73, num72 + 2].active(true);
                                if (!TileID.Sets.Platforms[Main.tile[num71 + num73, num72 + 2].type] &&
                                    (!Main.tileSolid[Main.tile[num71 + num73, num72 + 2].type] ||
                                     Main.tileSolidTop[Main.tile[num71 + num73, num72 + 2].type]))
                                {
                                    Main.tile[num71 + num73, num72 + 2].type = 0;
                                }
                            }

                            Main.tile[num71 + num73, num72 + 2].slope(0);
                            Main.tile[num71 + num73, num72 + 2].halfBrick(false);
                            if (Main.tile[num71 + num73, num72 + 3].type == 28 &&
                                Main.tile[num71 + num73, num72 + 3].frameY % 36 >= 18)
                            {
                                Main.tile[num71 + num73, num72 + 3].type = 0;
                                Main.tile[num71 + num73, num72 + 3].active(false);
                            }
                        }

                        for (int num77 = 0; num77 < 3; num77++)
                        {
                            if ((Main.tile[num71 - 1, num72 + num77].type == 28 ||
                                 Main.tile[num71 - 1, num72 + num77].type == 12) &&
                                Main.tile[num71 - 1, num72 + num77].frameX % 36 < 18)
                            {
                                Main.tile[num71 - 1, num72 + num77].type = 0;
                                Main.tile[num71 - 1, num72 + num77].active(false);
                            }

                            if ((Main.tile[num71 + 3, num72 + num77].type == 28 ||
                                 Main.tile[num71 + 3, num72 + num77].type == 12) &&
                                Main.tile[num71 + 3, num72 + num77].frameX % 36 >= 18)
                            {
                                Main.tile[num71 + 3, num72 + num77].type = 0;
                                Main.tile[num71 + 3, num72 + num77].active(false);
                            }
                        }
                    }

                    if (Main.tile[num21, num22].type == 237 && Main.tile[num21, num22 + 1].type == 232)
                    {
                        Main.tile[num21, num22 + 1].type = 226;
                    }
                }
            }
        });
        AddGenerationPass("Lihzahrd Altars", delegate
        {
            int num16 = lAltarX;
            int num17 = lAltarY;
            for (int n = 0; n <= 2; n++)
            {
                for (int num18 = 0; num18 <= 1; num18++)
                {
                    int num19 = num16 + n;
                    int num20 = num17 + num18;
                    Main.tile[num19, num20].active(true);
                    Main.tile[num19, num20].type = 237;
                    Main.tile[num19, num20].frameX = (short) (n * 18);
                    Main.tile[num19, num20].frameY = (short) (num18 * 18);
                }

                Main.tile[n, num17 + 2].active(true);
                Main.tile[n, num17 + 2].slope(0);
                Main.tile[n, num17 + 2].halfBrick(false);
                Main.tile[n, num17 + 2].type = 226;
            }
        });
        AddGenerationPass("Micro Biomes", delegate(GenerationProgress progress)
        {
            progress.Message = Lang.gen[76].Value;
            float num = (float) (Main.maxTilesX * Main.maxTilesY) / 5040000f;
            float num2 = (float) Main.maxTilesX / 4200f;
            int num3 = (int) ((float) genRand.Next(3, 6) * num);
            int num4 = 0;
            while (num4 < num3)
            {
                if (Biomes<ThinIceBiome>.Place(RandomWorldPoint((int) Main.worldSurface + 20, 50, 200, 50), structures))
                {
                    num4++;
                }
            }

            progress.Set(0.1f);
            int num5 = (int) Math.Ceiling((double) num);
            int num6 = 0;
            while (num6 < num5)
            {
                Point origin = default(Point);
                origin.Y = (int) worldSurface + genRand.Next(50, 100);
                if (genRand.Next(2) == 0)
                {
                    origin.X = genRand.Next(50, (int) ((float) Main.maxTilesX * 0.3f));
                }
                else
                {
                    origin.X = genRand.Next((int) ((float) Main.maxTilesX * 0.7f), Main.maxTilesX - 50);
                }

                if (Biomes<EnchantedSwordBiome>.Place(origin, structures))
                {
                    num6++;
                }
            }

            progress.Set(0.2f);
            int num7 = (int) ((float) genRand.Next(6, 12) * num);
            int num8 = 0;
            while (num8 < num7)
            {
                if (Biomes<CampsiteBiome>.Place(RandomWorldPoint((int) Main.worldSurface, 50, 200, 50), structures))
                {
                    num8++;
                }
            }

            int num9 = (int) ((float) genRand.Next(14, 30) * num);
            int num10 = 0;
            while (num10 < num9)
            {
                if (Biomes<MiningExplosivesBiome>.Place(RandomWorldPoint((int) rockLayer, 50, 200, 50), structures))
                {
                    num10++;
                }
            }

            progress.Set(0.3f);
            int num11 = (int) ((float) genRand.Next(6, 12) * num2);
            int num12 = 0;
            int num13 = 0;
            while (num12 < num11 && num13 < 20000)
            {
                if (Biomes<MahoganyTreeBiome>.Place(RandomWorldPoint((int) Main.worldSurface + 50, 50, 500, 50),
                    structures))
                {
                    num12++;
                }

                num13++;
            }

            progress.Set(0.4f);
            if (!crimson)
            {
                int num14 = (int) ((float) genRand.Next(1, 3) * num);
                int num15 = 0;
                while (num15 < num14)
                {
                    if (Biomes<CorruptionPitBiome>.Place(RandomWorldPoint((int) Main.worldSurface, 50, 500, 50),
                        structures))
                    {
                        num15++;
                    }
                }
            }

            TrackGenerator.Run((int) (10f * num), (int) (num * 25f) + 250);
            progress.Set(1f);
        });
        AddGenerationPass("Final Cleanup", delegate
        {
            for (int l = 0; l < Main.maxTilesX; l++)
            {
                for (int m = 0; m < Main.maxTilesY; m++)
                {
                    if (Main.tile[l, m].active() && (!SolidTile(l, m + 1) || !SolidTile(l, m + 2)))
                    {
                        switch (Main.tile[l, m].type)
                        {
                            case 53:
                                Main.tile[l, m].type = 397;
                                break;
                            case 112:
                                Main.tile[l, m].type = 398;
                                break;
                            case 234:
                                Main.tile[l, m].type = 399;
                                break;
                            case 224:
                                Main.tile[l, m].type = 147;
                                break;
                            case 123:
                                Main.tile[l, m].type = 1;
                                break;
                        }
                    }
                }
            }

            noTileActions = false;
            gen = false;
            Main.AnglerQuestSwap();
        });
        _generator.GenerateWorld(customProgressObject);
        Main.WorldFileMetadata = FileMetadata.FromCurrentSettings(FileType.World);
    }

    public static Point RandomRectanglePoint(Rectangle rectangle)
    {
        return new Point(genRand.Next(rectangle.X, rectangle.X + rectangle.Width),
            genRand.Next(rectangle.Y, rectangle.Y + rectangle.Height));
    }

    public static Point RandomRectanglePoint(int x, int y, int width, int height)
    {
        return new Point(genRand.Next(x, x + width), genRand.Next(y, y + height));
    }

    public static Point RandomWorldPoint(int padding)
    {
        return RandomWorldPoint(padding, padding, padding, padding);
    }

    public static Point RandomWorldPoint(int top = 0, int right = 0, int bottom = 0, int left = 0)
    {
        return new Point(genRand.Next(left, Main.maxTilesX - right), genRand.Next(top, Main.maxTilesY - bottom));
    }

    public static bool GrowPalmTree(int i, int y)
    {
        int j;
        for (j = y; Main.tile[i, j].type == 20; j++)
        {
        }

        Tile tile = Main.tile[i, j];
        Tile tile2 = Main.tile[i, j - 1];
        if (!tile.active() || tile.halfBrick() || tile.slope() != 0)
        {
            return false;
        }

        if (tile2.wall != 0 || tile2.liquid != 0)
        {
            return false;
        }

        if (tile.type != 53 && tile.type != 234 && tile.type != 116 && tile.type != 112)
        {
            return false;
        }

        if (!EmptyTileCheck(i - 1, i + 1, j - 30, j - 1, 20))
        {
            return false;
        }

        int num = genRand.Next(10, 21);
        int num2 = genRand.Next(-8, 9);
        num2 *= 2;
        short num3 = 0;
        for (int k = 0; k < num; k++)
        {
            tile = Main.tile[i, j - 1 - k];
            if (k == 0)
            {
                tile.active(true);
                tile.type = 323;
                tile.frameX = 66;
                tile.frameY = 0;
            }
            else if (k == num - 1)
            {
                tile.active(true);
                tile.type = 323;
                tile.frameX = (short) (22 * genRand.Next(4, 7));
                tile.frameY = num3;
            }
            else
            {
                if (num3 != num2)
                {
                    float num4 = (float) k / (float) num;
                    bool flag = false;
                    if (!(num4 < 0.25f) && ((num4 < 0.5f && genRand.Next(13) == 0) ||
                                            (num4 < 0.7f && genRand.Next(9) == 0) || !(num4 < 0.95f) ||
                                            genRand.Next(5) != 0 || true))
                    {
                        short num5 = (short) Math.Sign(num2);
                        num3 = (short) (num3 + (short) (num5 * 2));
                    }
                }

                tile.active(true);
                tile.type = 323;
                tile.frameX = (short) (22 * genRand.Next(0, 3));
                tile.frameY = num3;
            }
        }

        RangeFrame(i - 2, j - num - 1, i + 2, j + 1);
        if (Main.netMode == 2)
        {
            NetMessage.SendTileSquare(-1, i, (int) ((double) j - (double) num * 0.5), num + 1, TileChangeType.None);
        }

        return true;
    }

    public static bool GrowEpicTree(int i, int y)
    {
        int j;
        for (j = y; Main.tile[i, j].type == 20; j++)
        {
        }

        if (Main.tile[i, j].active() && !Main.tile[i, j].halfBrick() && Main.tile[i, j].slope() == 0 &&
            Main.tile[i, j].type == 2 && Main.tile[i, j - 1].wall == 0 && Main.tile[i, j - 1].liquid == 0 &&
            ((Main.tile[i - 1, j].active() && (Main.tile[i - 1, j].type == 2 || Main.tile[i - 1, j].type == 23 ||
                                               Main.tile[i - 1, j].type == 60 || Main.tile[i - 1, j].type == 109)) ||
             (Main.tile[i + 1, j].active() && (Main.tile[i + 1, j].type == 2 || Main.tile[i + 1, j].type == 23 ||
                                               Main.tile[i + 1, j].type == 60 || Main.tile[i + 1, j].type == 109))))
        {
            int num = 2;
            if (EmptyTileCheck(i - num, i + num, j - 55, j - 1, 20))
            {
                bool flag = false;
                bool flag2 = false;
                int num2 = genRand.Next(20, 30);
                int num3;
                for (int k = j - num2; k < j; k++)
                {
                    Main.tile[i, k].frameNumber((byte) genRand.Next(3));
                    Main.tile[i, k].active(true);
                    Main.tile[i, k].type = 5;
                    num3 = genRand.Next(3);
                    int num4 = genRand.Next(10);
                    if (k == j - 1 || k == j - num2)
                    {
                        num4 = 0;
                    }

                    while (((num4 == 5 || num4 == 7) && flag) || ((num4 == 6 || num4 == 7) && flag2))
                    {
                        num4 = genRand.Next(10);
                    }

                    flag = false;
                    flag2 = false;
                    if (num4 == 5 || num4 == 7)
                    {
                        flag = true;
                    }

                    if (num4 == 6 || num4 == 7)
                    {
                        flag2 = true;
                    }

                    switch (num4)
                    {
                        case 1:
                            if (num3 == 0)
                            {
                                Main.tile[i, k].frameX = 0;
                                Main.tile[i, k].frameY = 66;
                            }

                            if (num3 == 1)
                            {
                                Main.tile[i, k].frameX = 0;
                                Main.tile[i, k].frameY = 88;
                            }

                            if (num3 == 2)
                            {
                                Main.tile[i, k].frameX = 0;
                                Main.tile[i, k].frameY = 110;
                            }

                            break;
                        case 2:
                            if (num3 == 0)
                            {
                                Main.tile[i, k].frameX = 22;
                                Main.tile[i, k].frameY = 0;
                            }

                            if (num3 == 1)
                            {
                                Main.tile[i, k].frameX = 22;
                                Main.tile[i, k].frameY = 22;
                            }

                            if (num3 == 2)
                            {
                                Main.tile[i, k].frameX = 22;
                                Main.tile[i, k].frameY = 44;
                            }

                            break;
                        case 3:
                            if (num3 == 0)
                            {
                                Main.tile[i, k].frameX = 44;
                                Main.tile[i, k].frameY = 66;
                            }

                            if (num3 == 1)
                            {
                                Main.tile[i, k].frameX = 44;
                                Main.tile[i, k].frameY = 88;
                            }

                            if (num3 == 2)
                            {
                                Main.tile[i, k].frameX = 44;
                                Main.tile[i, k].frameY = 110;
                            }

                            break;
                        case 4:
                            if (num3 == 0)
                            {
                                Main.tile[i, k].frameX = 22;
                                Main.tile[i, k].frameY = 66;
                            }

                            if (num3 == 1)
                            {
                                Main.tile[i, k].frameX = 22;
                                Main.tile[i, k].frameY = 88;
                            }

                            if (num3 == 2)
                            {
                                Main.tile[i, k].frameX = 22;
                                Main.tile[i, k].frameY = 110;
                            }

                            break;
                        case 5:
                            if (num3 == 0)
                            {
                                Main.tile[i, k].frameX = 88;
                                Main.tile[i, k].frameY = 0;
                            }

                            if (num3 == 1)
                            {
                                Main.tile[i, k].frameX = 88;
                                Main.tile[i, k].frameY = 22;
                            }

                            if (num3 == 2)
                            {
                                Main.tile[i, k].frameX = 88;
                                Main.tile[i, k].frameY = 44;
                            }

                            break;
                        case 6:
                            if (num3 == 0)
                            {
                                Main.tile[i, k].frameX = 66;
                                Main.tile[i, k].frameY = 66;
                            }

                            if (num3 == 1)
                            {
                                Main.tile[i, k].frameX = 66;
                                Main.tile[i, k].frameY = 88;
                            }

                            if (num3 == 2)
                            {
                                Main.tile[i, k].frameX = 66;
                                Main.tile[i, k].frameY = 110;
                            }

                            break;
                        case 7:
                            if (num3 == 0)
                            {
                                Main.tile[i, k].frameX = 110;
                                Main.tile[i, k].frameY = 66;
                            }

                            if (num3 == 1)
                            {
                                Main.tile[i, k].frameX = 110;
                                Main.tile[i, k].frameY = 88;
                            }

                            if (num3 == 2)
                            {
                                Main.tile[i, k].frameX = 110;
                                Main.tile[i, k].frameY = 110;
                            }

                            break;
                        default:
                            if (num3 == 0)
                            {
                                Main.tile[i, k].frameX = 0;
                                Main.tile[i, k].frameY = 0;
                            }

                            if (num3 == 1)
                            {
                                Main.tile[i, k].frameX = 0;
                                Main.tile[i, k].frameY = 22;
                            }

                            if (num3 == 2)
                            {
                                Main.tile[i, k].frameX = 0;
                                Main.tile[i, k].frameY = 44;
                            }

                            break;
                    }

                    if (num4 == 5 || num4 == 7)
                    {
                        Main.tile[i - 1, k].active(true);
                        Main.tile[i - 1, k].type = 5;
                        num3 = genRand.Next(3);
                        if (genRand.Next(3) < 2)
                        {
                            if (num3 == 0)
                            {
                                Main.tile[i - 1, k].frameX = 44;
                                Main.tile[i - 1, k].frameY = 198;
                            }

                            if (num3 == 1)
                            {
                                Main.tile[i - 1, k].frameX = 44;
                                Main.tile[i - 1, k].frameY = 220;
                            }

                            if (num3 == 2)
                            {
                                Main.tile[i - 1, k].frameX = 44;
                                Main.tile[i - 1, k].frameY = 242;
                            }
                        }
                        else
                        {
                            if (num3 == 0)
                            {
                                Main.tile[i - 1, k].frameX = 66;
                                Main.tile[i - 1, k].frameY = 0;
                            }

                            if (num3 == 1)
                            {
                                Main.tile[i - 1, k].frameX = 66;
                                Main.tile[i - 1, k].frameY = 22;
                            }

                            if (num3 == 2)
                            {
                                Main.tile[i - 1, k].frameX = 66;
                                Main.tile[i - 1, k].frameY = 44;
                            }
                        }
                    }

                    if (num4 == 6 || num4 == 7)
                    {
                        Main.tile[i + 1, k].active(true);
                        Main.tile[i + 1, k].type = 5;
                        num3 = genRand.Next(3);
                        if (genRand.Next(3) < 2)
                        {
                            if (num3 == 0)
                            {
                                Main.tile[i + 1, k].frameX = 66;
                                Main.tile[i + 1, k].frameY = 198;
                            }

                            if (num3 == 1)
                            {
                                Main.tile[i + 1, k].frameX = 66;
                                Main.tile[i + 1, k].frameY = 220;
                            }

                            if (num3 == 2)
                            {
                                Main.tile[i + 1, k].frameX = 66;
                                Main.tile[i + 1, k].frameY = 242;
                            }
                        }
                        else
                        {
                            if (num3 == 0)
                            {
                                Main.tile[i + 1, k].frameX = 88;
                                Main.tile[i + 1, k].frameY = 66;
                            }

                            if (num3 == 1)
                            {
                                Main.tile[i + 1, k].frameX = 88;
                                Main.tile[i + 1, k].frameY = 88;
                            }

                            if (num3 == 2)
                            {
                                Main.tile[i + 1, k].frameX = 88;
                                Main.tile[i + 1, k].frameY = 110;
                            }
                        }
                    }
                }

                int num5 = genRand.Next(3);
                bool flag3 = false;
                bool flag4 = false;
                if (Main.tile[i - 1, j].active() && !Main.tile[i - 1, j].halfBrick() &&
                    Main.tile[i - 1, j].slope() == 0 && (Main.tile[i - 1, j].type == 2 ||
                                                         Main.tile[i - 1, j].type == 23 ||
                                                         Main.tile[i - 1, j].type == 60 ||
                                                         Main.tile[i - 1, j].type == 109))
                {
                    flag3 = true;
                }

                if (Main.tile[i + 1, j].active() && !Main.tile[i + 1, j].halfBrick() &&
                    Main.tile[i + 1, j].slope() == 0 && (Main.tile[i + 1, j].type == 2 ||
                                                         Main.tile[i + 1, j].type == 23 ||
                                                         Main.tile[i + 1, j].type == 60 ||
                                                         Main.tile[i + 1, j].type == 109))
                {
                    flag4 = true;
                }

                if (!flag3)
                {
                    if (num5 == 0)
                    {
                        num5 = 2;
                    }

                    if (num5 == 1)
                    {
                        num5 = 3;
                    }
                }

                if (!flag4)
                {
                    if (num5 == 0)
                    {
                        num5 = 1;
                    }

                    if (num5 == 2)
                    {
                        num5 = 3;
                    }
                }

                if (flag3 && !flag4)
                {
                    num5 = 2;
                }

                if (flag4 && !flag3)
                {
                    num5 = 1;
                }

                if (num5 == 0 || num5 == 1)
                {
                    Main.tile[i + 1, j - 1].active(true);
                    Main.tile[i + 1, j - 1].type = 5;
                    num3 = genRand.Next(3);
                    if (num3 == 0)
                    {
                        Main.tile[i + 1, j - 1].frameX = 22;
                        Main.tile[i + 1, j - 1].frameY = 132;
                    }

                    if (num3 == 1)
                    {
                        Main.tile[i + 1, j - 1].frameX = 22;
                        Main.tile[i + 1, j - 1].frameY = 154;
                    }

                    if (num3 == 2)
                    {
                        Main.tile[i + 1, j - 1].frameX = 22;
                        Main.tile[i + 1, j - 1].frameY = 176;
                    }
                }

                if (num5 == 0 || num5 == 2)
                {
                    Main.tile[i - 1, j - 1].active(true);
                    Main.tile[i - 1, j - 1].type = 5;
                    num3 = genRand.Next(3);
                    if (num3 == 0)
                    {
                        Main.tile[i - 1, j - 1].frameX = 44;
                        Main.tile[i - 1, j - 1].frameY = 132;
                    }

                    if (num3 == 1)
                    {
                        Main.tile[i - 1, j - 1].frameX = 44;
                        Main.tile[i - 1, j - 1].frameY = 154;
                    }

                    if (num3 == 2)
                    {
                        Main.tile[i - 1, j - 1].frameX = 44;
                        Main.tile[i - 1, j - 1].frameY = 176;
                    }
                }

                num3 = genRand.Next(3);
                switch (num5)
                {
                    case 0:
                        if (num3 == 0)
                        {
                            Main.tile[i, j - 1].frameX = 88;
                            Main.tile[i, j - 1].frameY = 132;
                        }

                        if (num3 == 1)
                        {
                            Main.tile[i, j - 1].frameX = 88;
                            Main.tile[i, j - 1].frameY = 154;
                        }

                        if (num3 == 2)
                        {
                            Main.tile[i, j - 1].frameX = 88;
                            Main.tile[i, j - 1].frameY = 176;
                        }

                        break;
                    case 1:
                        if (num3 == 0)
                        {
                            Main.tile[i, j - 1].frameX = 0;
                            Main.tile[i, j - 1].frameY = 132;
                        }

                        if (num3 == 1)
                        {
                            Main.tile[i, j - 1].frameX = 0;
                            Main.tile[i, j - 1].frameY = 154;
                        }

                        if (num3 == 2)
                        {
                            Main.tile[i, j - 1].frameX = 0;
                            Main.tile[i, j - 1].frameY = 176;
                        }

                        break;
                    case 2:
                        if (num3 == 0)
                        {
                            Main.tile[i, j - 1].frameX = 66;
                            Main.tile[i, j - 1].frameY = 132;
                        }

                        if (num3 == 1)
                        {
                            Main.tile[i, j - 1].frameX = 66;
                            Main.tile[i, j - 1].frameY = 154;
                        }

                        if (num3 == 2)
                        {
                            Main.tile[i, j - 1].frameX = 66;
                            Main.tile[i, j - 1].frameY = 176;
                        }

                        break;
                }

                if (genRand.Next(8) != 0)
                {
                    num3 = genRand.Next(3);
                    if (num3 == 0)
                    {
                        Main.tile[i, j - num2].frameX = 22;
                        Main.tile[i, j - num2].frameY = 198;
                    }

                    if (num3 == 1)
                    {
                        Main.tile[i, j - num2].frameX = 22;
                        Main.tile[i, j - num2].frameY = 220;
                    }

                    if (num3 == 2)
                    {
                        Main.tile[i, j - num2].frameX = 22;
                        Main.tile[i, j - num2].frameY = 242;
                    }
                }
                else
                {
                    num3 = genRand.Next(3);
                    if (num3 == 0)
                    {
                        Main.tile[i, j - num2].frameX = 0;
                        Main.tile[i, j - num2].frameY = 198;
                    }

                    if (num3 == 1)
                    {
                        Main.tile[i, j - num2].frameX = 0;
                        Main.tile[i, j - num2].frameY = 220;
                    }

                    if (num3 == 2)
                    {
                        Main.tile[i, j - num2].frameX = 0;
                        Main.tile[i, j - num2].frameY = 242;
                    }
                }

                RangeFrame(i - 2, j - num2 - 1, i + 2, j + 1);
                if (Main.netMode == 2)
                {
                    NetMessage.SendTileSquare(-1, i, (int) ((double) j - (double) num2 * 0.5), num2 + 1,
                        TileChangeType.None);
                }

                return true;
            }
        }

        return false;
    }

    public static bool Pyramid(int i, int j)
    {
        ushort num = 151;
        int num2 = j - genRand.Next(0, 7);
        int num3 = genRand.Next(9, 13);
        int num4 = 1;
        int num5 = j + genRand.Next(75, 125);
        for (int k = num2; k < num5; k++)
        {
            for (int l = i - num4; l < i + num4 - 1; l++)
            {
                Main.tile[l, k].type = num;
                Main.tile[l, k].active(true);
                Main.tile[l, k].halfBrick(false);
                Main.tile[l, k].slope(0);
            }

            num4++;
        }

        for (int m = i - num4 - 5; m <= i + num4 + 5; m++)
        {
            for (int n = j - 1; n <= num5 + 1; n++)
            {
                bool flag = true;
                for (int num6 = m - 1; num6 <= m + 1; num6++)
                {
                    for (int num7 = n - 1; num7 <= n + 1; num7++)
                    {
                        if (Main.tile[num6, num7].type != num)
                        {
                            flag = false;
                        }
                    }
                }

                if (flag)
                {
                    Main.tile[m, n].wall = 34;
                    SquareWallFrame(m, n, true);
                }
            }
        }

        int num8 = 1;
        if (genRand.Next(2) == 0)
        {
            num8 = -1;
        }

        int num9 = i - num3 * num8;
        int num10 = j + num3;
        int num11 = genRand.Next(5, 8);
        bool flag2 = true;
        int num12 = genRand.Next(20, 30);
        while (flag2)
        {
            flag2 = false;
            bool flag3 = false;
            for (int num13 = num10; num13 <= num10 + num11; num13++)
            {
                int num14 = num9;
                if (Main.tile[num14, num13 - 1].type == 53)
                {
                    flag3 = true;
                }

                if (Main.tile[num14, num13].type == num)
                {
                    Main.tile[num14, num13 + 1].wall = 34;
                    Main.tile[num14 + num8, num13].wall = 34;
                    Main.tile[num14, num13].active(false);
                    flag2 = true;
                }

                if (flag3)
                {
                    Main.tile[num14, num13].type = 53;
                    Main.tile[num14, num13].active(true);
                    Main.tile[num14, num13].halfBrick(false);
                    Main.tile[num14, num13].slope(0);
                }
            }

            num9 -= num8;
        }

        num9 = i - num3 * num8;
        bool flag4 = true;
        bool flag5 = false;
        flag2 = true;
        while (flag2)
        {
            for (int num15 = num10; num15 <= num10 + num11; num15++)
            {
                int num16 = num9;
                Main.tile[num16, num15].active(false);
            }

            num9 += num8;
            num10++;
            num12--;
            if (num10 >= num5 - num11 * 2)
            {
                num12 = 10;
            }

            if (num12 <= 0)
            {
                bool flag6 = false;
                if (!flag4 && !flag5)
                {
                    flag5 = true;
                    flag6 = true;
                    int num17 = genRand.Next(7, 13);
                    int num18 = genRand.Next(23, 28);
                    int num19 = num18;
                    int num20 = num9;
                    while (num18 > 0)
                    {
                        for (int num21 = num10 - num17 + num11; num21 <= num10 + num11; num21++)
                        {
                            if (num18 == num19 || num18 == 1)
                            {
                                if (num21 >= num10 - num17 + num11 + 2)
                                {
                                    Main.tile[num9, num21].active(false);
                                }
                            }
                            else if (num18 == num19 - 1 || num18 == 2 || num18 == num19 - 2 || num18 == 3)
                            {
                                if (num21 >= num10 - num17 + num11 + 1)
                                {
                                    Main.tile[num9, num21].active(false);
                                }
                            }
                            else
                            {
                                Main.tile[num9, num21].active(false);
                            }
                        }

                        num18--;
                        num9 += num8;
                    }

                    int num22 = num9 - num8;
                    int num23 = num22;
                    int num24 = num20;
                    if (num22 > num20)
                    {
                        num23 = num20;
                        num24 = num22;
                    }

                    int num25 = genRand.Next(3);
                    switch (num25)
                    {
                        case 0:
                            num25 = 857;
                            break;
                        case 1:
                            num25 = 848;
                            break;
                        case 2:
                            num25 = 934;
                            break;
                    }

                    AddBuriedChest((num23 + num24) / 2, num10, num25, false, 1);
                    int num26 = genRand.Next(1, 10);
                    for (int num27 = 0; num27 < num26; num27++)
                    {
                        int i2 = genRand.Next(num23, num24);
                        int j2 = num10 + num11;
                        PlaceSmallPile(i2, j2, genRand.Next(16, 19), 1, 185);
                    }

                    PlaceTile(num23 + 2, num10 - num17 + num11 + 1, 91, true, false, -1, genRand.Next(4, 7));
                    PlaceTile(num23 + 3, num10 - num17 + num11, 91, true, false, -1, genRand.Next(4, 7));
                    PlaceTile(num24 - 2, num10 - num17 + num11 + 1, 91, true, false, -1, genRand.Next(4, 7));
                    PlaceTile(num24 - 3, num10 - num17 + num11, 91, true, false, -1, genRand.Next(4, 7));
                    for (int num28 = num23; num28 <= num24; num28++)
                    {
                        PlacePot(num28, num10 + num11, 28, genRand.Next(25, 28));
                    }
                }

                if (flag4)
                {
                    flag4 = false;
                    num8 *= -1;
                    num12 = genRand.Next(15, 20);
                }
                else if (flag6)
                {
                    num12 = genRand.Next(10, 15);
                }
                else
                {
                    num8 *= -1;
                    num12 = genRand.Next(20, 40);
                }
            }

            if (num10 >= num5 - num11)
            {
                flag2 = false;
            }
        }

        int num29 = genRand.Next(100, 200);
        int num30 = genRand.Next(500, 800);
        flag2 = true;
        int num31 = num11;
        num12 = genRand.Next(10, 50);
        if (num8 == 1)
        {
            num9 -= num31;
        }

        int num32 = genRand.Next(5, 10);
        while (flag2)
        {
            num29--;
            num30--;
            num12--;
            for (int num33 = num9 - num32 - genRand.Next(0, 2);
                num33 <= num9 + num31 + num32 + genRand.Next(0, 2);
                num33++)
            {
                int num34 = num10;
                if (num33 >= num9 && num33 <= num9 + num31)
                {
                    Main.tile[num33, num34].active(false);
                }
                else
                {
                    Main.tile[num33, num34].type = num;
                    Main.tile[num33, num34].active(true);
                    Main.tile[num33, num34].halfBrick(false);
                    Main.tile[num33, num34].slope(0);
                }

                if (num33 >= num9 - 1 && num33 <= num9 + 1 + num31)
                {
                    Main.tile[num33, num34].wall = 34;
                }
            }

            num10++;
            num9 += num8;
            if (num29 <= 0)
            {
                flag2 = false;
                for (int num35 = num9 + 1; num35 <= num9 + num31 - 1; num35++)
                {
                    if (Main.tile[num35, num10].active())
                    {
                        flag2 = true;
                    }
                }
            }

            if (num12 < 0)
            {
                num12 = genRand.Next(10, 50);
                num8 *= -1;
            }

            if (num30 <= 0)
            {
                flag2 = false;
            }
        }

        return true;
    }

    public static bool GrowLivingTree(int i, int j)
    {
        int num = 0;
        int[] array = new int[1000];
        int[] array2 = new int[1000];
        int[] array3 = new int[1000];
        int[] array4 = new int[1000];
        int num2 = 0;
        int[] array5 = new int[2000];
        int[] array6 = new int[2000];
        bool[] array7 = new bool[2000];
        if (!SolidTile(i, j + 1))
        {
            return false;
        }

        if (Main.tile[i, j].active())
        {
            return false;
        }

        int num3 = i - genRand.Next(1, 4);
        int num4 = i + genRand.Next(1, 4);
        if (j < 150)
        {
            return false;
        }

        int num5 = i - 50;
        int num6 = i + 50;
        for (int k = num5; k <= num6; k++)
        {
            for (int l = 5; l < j - 5; l++)
            {
                if (Main.tile[k, l].active())
                {
                    return false;
                }
            }
        }

        int num7 = num3;
        int num8 = num4;
        int num9 = num3;
        int num10 = num4;
        int num11 = num4 - num3;
        bool flag = true;
        int num12 = genRand.Next(-10, -5);
        int num13 = genRand.Next(2);
        int num14 = j;
        while (flag)
        {
            num12++;
            if (num12 > genRand.Next(5, 30))
            {
                num12 = 0;
                array2[num] = num14 + genRand.Next(5);
                if (genRand.Next(5) == 0)
                {
                    num13 = ((num13 == 0) ? 1 : 0);
                }

                if (num13 == 0)
                {
                    array3[num] = -1;
                    array[num] = num3;
                    array4[num] = num4 - num3;
                    if (genRand.Next(2) == 0)
                    {
                        num3++;
                    }

                    num7++;
                    num13 = 1;
                }
                else
                {
                    array3[num] = 1;
                    array[num] = num4;
                    array4[num] = num4 - num3;
                    if (genRand.Next(2) == 0)
                    {
                        num4--;
                    }

                    num8--;
                    num13 = 0;
                }

                if (num7 == num8)
                {
                    flag = false;
                }

                num++;
            }

            for (int m = num3; m <= num4; m++)
            {
                Main.tile[m, num14].type = 191;
                Main.tile[m, num14].active(true);
                Main.tile[m, num14].halfBrick(false);
            }

            num14--;
        }

        for (int n = 0; n < num; n++)
        {
            int num15 = array[n] + array3[n];
            int num16 = array2[n];
            int num17 = (int) ((float) array4[n] * (1f + (float) genRand.Next(20, 30) * 0.1f));
            Main.tile[num15, num16 + 1].type = 191;
            Main.tile[num15, num16 + 1].active(true);
            Main.tile[num15, num16 + 1].halfBrick(false);
            int num18 = genRand.Next(3, 5);
            while (num17 > 0)
            {
                num17--;
                Main.tile[num15, num16].type = 191;
                Main.tile[num15, num16].active(true);
                Main.tile[num15, num16].halfBrick(false);
                if (genRand.Next(10) == 0)
                {
                    num16 = ((genRand.Next(2) != 0) ? (num16 + 1) : (num16 - 1));
                }
                else
                {
                    num15 += array3[n];
                }

                if (num18 > 0)
                {
                    num18--;
                }
                else if (genRand.Next(2) == 0)
                {
                    num18 = genRand.Next(2, 5);
                    if (genRand.Next(2) == 0)
                    {
                        Main.tile[num15, num16].type = 191;
                        Main.tile[num15, num16].active(true);
                        Main.tile[num15, num16].halfBrick(false);
                        Main.tile[num15, num16 - 1].type = 191;
                        Main.tile[num15, num16 - 1].active(true);
                        Main.tile[num15, num16 - 1].halfBrick(false);
                        array5[num2] = num15;
                        array6[num2] = num16;
                        num2++;
                    }
                    else
                    {
                        Main.tile[num15, num16].type = 191;
                        Main.tile[num15, num16].active(true);
                        Main.tile[num15, num16].halfBrick(false);
                        Main.tile[num15, num16 + 1].type = 191;
                        Main.tile[num15, num16 + 1].active(true);
                        Main.tile[num15, num16 + 1].halfBrick(false);
                        array5[num2] = num15;
                        array6[num2] = num16;
                        num2++;
                    }
                }

                if (num17 == 0)
                {
                    array5[num2] = num15;
                    array6[num2] = num16;
                    num2++;
                }
            }
        }

        int num19 = (num3 + num4) / 2;
        int num20 = num14;
        int num21 = genRand.Next(num11 * 3, num11 * 5);
        int num22 = 0;
        int num23 = 0;
        while (num21 > 0)
        {
            Main.tile[num19, num20].type = 191;
            Main.tile[num19, num20].active(true);
            Main.tile[num19, num20].halfBrick(false);
            if (num22 > 0)
            {
                num22--;
            }

            if (num23 > 0)
            {
                num23--;
            }

            for (int num24 = -1; num24 < 2; num24++)
            {
                if (num24 != 0 && ((num24 < 0 && num22 == 0) || (num24 > 0 && num23 == 0)) && genRand.Next(2) == 0)
                {
                    int num25 = num19;
                    int num26 = num20;
                    int num27 = genRand.Next(num11, num11 * 3);
                    if (num24 < 0)
                    {
                        num22 = genRand.Next(3, 5);
                    }

                    if (num24 > 0)
                    {
                        num23 = genRand.Next(3, 5);
                    }

                    int num28 = 0;
                    while (num27 > 0)
                    {
                        num27--;
                        num25 += num24;
                        Main.tile[num25, num26].type = 191;
                        Main.tile[num25, num26].active(true);
                        Main.tile[num25, num26].halfBrick(false);
                        if (num27 == 0)
                        {
                            array5[num2] = num25;
                            array6[num2] = num26;
                            array7[num2] = true;
                            num2++;
                        }

                        if (genRand.Next(5) == 0)
                        {
                            num26 = ((genRand.Next(2) != 0) ? (num26 + 1) : (num26 - 1));
                            Main.tile[num25, num26].type = 191;
                            Main.tile[num25, num26].active(true);
                            Main.tile[num25, num26].halfBrick(false);
                        }

                        if (num28 > 0)
                        {
                            num28--;
                        }
                        else if (genRand.Next(3) == 0)
                        {
                            num28 = genRand.Next(2, 4);
                            int num29 = num25;
                            int num30 = num26;
                            num30 = ((genRand.Next(2) != 0) ? (num30 + 1) : (num30 - 1));
                            Main.tile[num29, num30].type = 191;
                            Main.tile[num29, num30].active(true);
                            Main.tile[num29, num30].halfBrick(false);
                            array5[num2] = num29;
                            array6[num2] = num30;
                            array7[num2] = true;
                            num2++;
                        }
                    }
                }
            }

            array5[num2] = num19;
            array6[num2] = num20;
            num2++;
            if (genRand.Next(4) == 0)
            {
                num19 = ((genRand.Next(2) != 0) ? (num19 + 1) : (num19 - 1));
                Main.tile[num19, num20].type = 191;
                Main.tile[num19, num20].active(true);
                Main.tile[num19, num20].halfBrick(false);
            }

            num20--;
            num21--;
        }

        for (int num31 = num9; num31 <= num10; num31++)
        {
            int num32 = genRand.Next(1, 6);
            int num33 = j + 1;
            while (num32 > 0)
            {
                if (SolidTile(num31, num33))
                {
                    num32--;
                }

                Main.tile[num31, num33].type = 191;
                Main.tile[num31, num33].active(true);
                Main.tile[num31, num33].halfBrick(false);
                num33++;
            }

            int num34 = num33;
            for (int num35 = 0; num35 < 2; num35++)
            {
                num33 = num34;
                int num36 = (num9 + num10) / 2;
                int num37 = 0;
                int num38 = 1;
                num37 = ((num31 >= num36) ? 1 : (-1));
                if (num31 == num36 || (num11 > 6 && (num31 == num36 - 1 || num31 == num36 + 1)))
                {
                    num37 = 0;
                }

                int num39 = num37;
                int num40 = num31;
                num32 = genRand.Next((int) ((double) num11 * 2.5), num11 * 4);
                while (num32 > 0)
                {
                    num32--;
                    num40 += num37;
                    Main.tile[num40, num33].type = 191;
                    Main.tile[num40, num33].active(true);
                    Main.tile[num40, num33].halfBrick(false);
                    num33 += num38;
                    Main.tile[num40, num33].type = 191;
                    Main.tile[num40, num33].active(true);
                    Main.tile[num40, num33].halfBrick(false);
                    if (!Main.tile[num40, num33 + 1].active())
                    {
                        num37 = 0;
                        num38 = 1;
                    }

                    if (genRand.Next(3) == 0)
                    {
                        num37 = ((num39 < 0)
                            ? ((num37 == 0) ? (-1) : 0)
                            : ((num39 <= 0) ? genRand.Next(-1, 2) : ((num37 == 0) ? 1 : 0)));
                    }

                    if (genRand.Next(3) == 0)
                    {
                        num38 = ((num38 == 0) ? 1 : 0);
                    }
                }
            }
        }

        for (int num41 = 0; num41 < num2; num41++)
        {
            int num42 = genRand.Next(5, 8);
            num42 = (int) ((float) num42 * (1f + (float) num11 * 0.05f));
            if (array7[num41])
            {
                num42 = genRand.Next(7, 13);
            }

            int num43 = array5[num41] - num42;
            int num44 = array5[num41] + num42;
            int num45 = array6[num41] - num42;
            int num46 = array6[num41] + num42;
            float num47 = 2f - (float) genRand.Next(5) * 0.1f;
            for (int num48 = num43; num48 <= num44; num48++)
            {
                for (int num49 = num45; num49 <= num46; num49++)
                {
                    if (Main.tile[num48, num49].type != 191 &&
                        (float) Math.Abs(array5[num41] - num48) + (float) Math.Abs(array6[num41] - num49) * num47 <
                        (float) num42)
                    {
                        Main.tile[num48, num49].type = 192;
                        Main.tile[num48, num49].active(true);
                        Main.tile[num48, num49].halfBrick(false);
                    }
                }
            }
        }

        if (num11 >= 4 && genRand.Next(3) != 0)
        {
            bool flag2 = false;
            int num50 = num9;
            int num51 = num10;
            int num52 = j - 5;
            int num53 = 50;
            int num54 = genRand.Next(400, 700);
            int num55 = 1;
            bool flag3 = true;
            while (num54 > 0)
            {
                num52++;
                num54--;
                num53--;
                int num56 = (num9 + num10) / 2;
                int num57 = 0;
                if (num52 > j && num11 == 4)
                {
                    num57 = 1;
                }

                for (int num58 = num9 - num57; num58 <= num10 + num57; num58++)
                {
                    if (num58 > num56 - 2 && num58 <= num56 + 1)
                    {
                        if (Main.tile[num58, num52].type != 19)
                        {
                            Main.tile[num58, num52].active(false);
                        }

                        Main.tile[num58, num52].wall = 78;
                        if (Main.tile[num58 - 1, num52].wall > 0 || (double) num52 >= Main.worldSurface)
                        {
                            Main.tile[num58 - 1, num52].wall = 78;
                        }

                        if (Main.tile[num58 + 1, num52].wall > 0 || (double) num52 >= Main.worldSurface)
                        {
                            Main.tile[num58 + 1, num52].wall = 78;
                        }
                    }
                    else
                    {
                        Main.tile[num58, num52].type = 191;
                        Main.tile[num58, num52].active(true);
                        Main.tile[num58, num52].halfBrick(false);
                    }
                }

                num55++;
                if (num55 >= 6)
                {
                    num55 = 0;
                    int num59 = genRand.Next(3);
                    if (num59 == 0)
                    {
                        num59 = -1;
                    }

                    if (flag3)
                    {
                        num59 = 2;
                    }

                    if (num59 == 2)
                    {
                        flag3 = false;
                        for (int num60 = num9; num60 <= num10; num60++)
                        {
                            if (num60 > num56 - 2 && num60 <= num56 + 1)
                            {
                                Main.tile[num60, num52 + 1].active(false);
                                PlaceTile(num60, num52 + 1, 19, true, false, -1, 23);
                            }
                        }
                    }
                    else
                    {
                        num9 += num59;
                        num10 += num59;
                    }

                    if (num53 <= 0 && !flag2)
                    {
                        flag2 = true;
                        int num61 = genRand.Next(2);
                        if (num61 == 0)
                        {
                            num61 = -1;
                        }

                        int num62 = num52 - 2;
                        int num63 = num52;
                        int num64 = (num9 + num10) / 2;
                        if (num61 < 0)
                        {
                            num64--;
                        }

                        if (num61 > 0)
                        {
                            num64++;
                        }

                        int num65 = genRand.Next(15, 30);
                        int num66 = num64 + num65;
                        if (num61 < 0)
                        {
                            num66 = num64;
                            num64 -= num65;
                        }

                        dMinX = num64;
                        dMaxX = num66;
                        if (num61 < 0)
                        {
                            dMinX -= 40;
                        }
                        else
                        {
                            dMaxX += 40;
                        }

                        bool flag4 = false;
                        for (int num67 = num64; num67 < num66; num67++)
                        {
                            for (int num68 = num52 - 20; num68 < num52 + 10; num68++)
                            {
                                if (Main.tile[num67, num68].wall == 0 && !Main.tile[num67, num68].active() &&
                                    (double) num68 < Main.worldSurface)
                                {
                                    flag4 = true;
                                }
                            }
                        }

                        if (!flag4)
                        {
                            for (int num69 = num64; num69 <= num66; num69++)
                            {
                                for (int num70 = num62 - 2; num70 <= num63 + 2; num70++)
                                {
                                    if (Main.tile[num69, num70].wall != 78 && Main.tile[num69, num70].type != 19)
                                    {
                                        Main.tile[num69, num70].active(true);
                                        Main.tile[num69, num70].type = 191;
                                        Main.tile[num69, num70].halfBrick(false);
                                    }

                                    if (num70 >= num62 && num70 <= num63)
                                    {
                                        Main.tile[num69, num70].liquid = 0;
                                        Main.tile[num69, num70].wall = 78;
                                        Main.tile[num69, num70].active(false);
                                    }
                                }
                            }

                            int i2 = (num9 + num10) / 2 + 3 * num61;
                            int j2 = num52;
                            PlaceTile(i2, j2, 10, true, false, -1, 7);
                            int num71 = genRand.Next(5, 9);
                            int num72 = genRand.Next(4, 6);
                            if (num61 < 0)
                            {
                                num66 = num64 + num71;
                                num64 -= num71;
                            }
                            else
                            {
                                num64 = num66 - num71;
                                num66 += num71;
                            }

                            num62 = num63 - num72;
                            for (int num73 = num64 - 2; num73 <= num66 + 2; num73++)
                            {
                                for (int num74 = num62 - 2; num74 <= num63 + 2; num74++)
                                {
                                    if (Main.tile[num73, num74].wall != 78 && Main.tile[num73, num74].type != 19)
                                    {
                                        Main.tile[num73, num74].active(true);
                                        Main.tile[num73, num74].type = 191;
                                        Main.tile[num73, num74].halfBrick(false);
                                    }

                                    if (num74 >= num62 && num74 <= num63 && num73 >= num64 && num73 <= num66)
                                    {
                                        Main.tile[num73, num74].liquid = 0;
                                        Main.tile[num73, num74].wall = 78;
                                        Main.tile[num73, num74].active(false);
                                    }
                                }
                            }

                            i2 = num64 - 2;
                            if (num61 < 0)
                            {
                                i2 = num66 + 2;
                            }

                            PlaceTile(i2, j2, 10, true, false, -1, 7);
                            int num75 = num66;
                            if (num61 < 0)
                            {
                                num75 = num64;
                            }

                            PlaceTile(num75, num52, 15, true, false, -1, 5);
                            if (num61 < 0)
                            {
                                Main.tile[num75, num52 - 1].frameX += 18;
                                Main.tile[num75, num52].frameX += 18;
                            }

                            num75 = num66 - 2;
                            if (num61 < 0)
                            {
                                num75 = num64 + 2;
                            }

                            PlaceTile(num75, num52, 14, true, false, -1, 6);
                            num75 = num66 - 4;
                            if (num61 < 0)
                            {
                                num75 = num64 + 4;
                            }

                            PlaceTile(num75, num52, 15, true, false, -1, 5);
                            if (num61 > 0)
                            {
                                Main.tile[num75, num52 - 1].frameX += 18;
                                Main.tile[num75, num52].frameX += 18;
                            }

                            num75 = num66 - 7;
                            if (num61 < 0)
                            {
                                num75 = num64 + 8;
                            }

                            int num76 = genRand.Next(2);
                            num76 = 832;
                            AddBuriedChest(num75, num52, num76, false, 12);
                        }
                    }
                }

                if (num53 <= 0)
                {
                    bool flag5 = true;
                    for (int num77 = num9; num77 <= num10; num77++)
                    {
                        for (int num78 = num52 + 1; num78 <= num52 + 4; num78++)
                        {
                            if (SolidTile(num77, num78))
                            {
                                flag5 = false;
                            }
                        }
                    }

                    if (flag5)
                    {
                        num54 = 0;
                    }
                }
            }

            num9 = num50;
            num10 = num51;
            int num79 = (num9 + num10) / 2;
            if (genRand.Next(2) == 0)
            {
                num10 = num79;
            }
            else
            {
                num9 = num79;
            }

            for (int num80 = num9; num80 <= num10; num80++)
            {
                for (int num81 = j - 3; num81 <= j; num81++)
                {
                    Main.tile[num80, num81].active(false);
                    bool flag6 = true;
                    for (int num82 = num80 - 1; num82 <= num80 + 1; num82++)
                    {
                        for (int num83 = num81 - 1; num83 <= num81 + 1; num83++)
                        {
                            if (!Main.tile[num82, num83].active() && Main.tile[num82, num83].wall == 0)
                            {
                                flag6 = false;
                            }
                        }
                    }

                    if (flag6)
                    {
                        Main.tile[num80, num81].wall = 78;
                    }
                }
            }
        }

        return true;
    }

    public static void TreeGrowFXCheck(int x, int y)
    {
        int num = 1;
        int num2 = -1;
        Tile tile = null;
        for (int num3 = -1; num3 > -100; num3--)
        {
            Tile tile2 = Main.tile[x, y + num3];
            if (!tile2.active() || (tile2.type != 5 && tile2.type != 323 && tile2.type != 72))
            {
                break;
            }

            tile = tile2;
            num++;
        }

        for (int i = 1; i < 5; i++)
        {
            Tile tile3 = Main.tile[x, y + i];
            if (!tile3.active() || (tile3.type != 5 && tile3.type != 323 && tile3.type != 72))
            {
                int num4 = 0;
                if (tile.frameX == 22)
                {
                    if (tile.frameY == 220)
                    {
                        num4 = 1;
                    }
                    else if (tile.frameY == 242)
                    {
                        num4 = 2;
                    }
                }

                switch (tile3.type)
                {
                    case 2:
                        num2 = 910;
                        break;
                    case 60:
                        num2 = 914;
                        break;
                    case 70:
                        num2 = 912;
                        break;
                    case 23:
                    case 400:
                        num2 = 915;
                        break;
                    case 199:
                    case 234:
                        num2 = 916;
                        break;
                    case 53:
                        num2 = 911;
                        break;
                    case 116:
                        num2 = 919;
                        break;
                    case 147:
                        num2 = 913;
                        break;
                    case 109:
                    {
                        if (x % 3 == 1)
                        {
                            num4 += 3;
                        }

                        if (x % 3 == 2)
                        {
                            num4 += 6;
                        }

                        int num5 = 917;
                        switch (num4)
                        {
                            case 0:
                                num2 = 2;
                                break;
                            case 1:
                                num2 = 1;
                                break;
                            case 2:
                                num2 = 7;
                                break;
                            case 3:
                                num2 = 4;
                                break;
                            case 4:
                                num2 = 5;
                                break;
                            case 5:
                                num2 = 6;
                                break;
                            case 6:
                                num2 = 3;
                                break;
                            case 7:
                                num2 = 8;
                                break;
                            case 8:
                                num2 = 0;
                                break;
                        }

                        num2 += num5;
                        num += 5;
                        break;
                    }
                }

                break;
            }

            num++;
        }

        if (num > 0 && num2 > 0)
        {
            if (Main.netMode == 2)
            {
                NetMessage.SendData(112, -1, -1, null, 1, (float) x, (float) y, (float) num, num2, 0, 0);
            }

            if (Main.netMode == 0)
            {
                TreeGrowFX(x, y, num, num2);
            }
        }
    }

    public static void TreeGrowFX(int x, int y, int height, int treeGore)
    {
        Vector2 value = new Vector2((float) x, (float) y) * 16f + new Vector2(8f, 8f);
        int num = 4;
        int maxValue = 2;
        for (int num2 = 0; num2 > -height; num2--)
        {
            if (num2 > -height / 2 && Main.rand.Next(3) != 0)
            {
                for (int i = 0; i < 5; i++)
                {
                    Dust.NewDust(
                        value + new Vector2(-16f, (float) (num2 * 16)) + Utils.RandomVector2(Main.rand, -20f, 20f), 4,
                        4, num + Main.rand.Next(maxValue), 0f, -4f, 100, default(Color), 1f);
                }
            }
            else
            {
                float num3 = 10f;
                Gore.NewGore(value + new Vector2(-16f, (float) (num2 * 16)),
                    Utils.RandomVector2(Main.rand, 0f - num3, num3), treeGore, 0.7f + Main.rand.NextFloat() * 0.6f);
                Gore.NewGore(value + new Vector2(0f, (float) (num2 * 16)),
                    Utils.RandomVector2(Main.rand, 0f - num3, num3), treeGore, 0.7f + Main.rand.NextFloat() * 0.6f);
                Gore.NewGore(value + new Vector2(16f, (float) (num2 * 16)),
                    Utils.RandomVector2(Main.rand, 0f - num3, num3), treeGore, 0.7f + Main.rand.NextFloat() * 0.6f);
                if (num2 == -height + 1)
                {
                    for (int j = 0; j < 20; j++)
                    {
                        Gore.NewGore(
                            value + new Vector2(0f, (float) (num2 * 16 - 40)) +
                            Utils.RandomVector2(Main.rand, -40f, 40f), Utils.RandomVector2(Main.rand, -10f, 10f),
                            treeGore, 0.7f + Main.rand.NextFloat() * 0.6f);
                    }
                }
            }
        }
    }

    public static bool GrowTree(int i, int y)
    {
        int j;
        for (j = y; Main.tile[i, j].type == 20; j++)
        {
        }

        if ((Main.tile[i - 1, j - 1].liquid != 0 || Main.tile[i, j - 1].liquid != 0 ||
             Main.tile[i + 1, j - 1].liquid != 0) && Main.tile[i, j].type != 60)
        {
            return false;
        }

        if (Main.tile[i, j].nactive() && !Main.tile[i, j].halfBrick() && Main.tile[i, j].slope() == 0 &&
            (Main.tile[i, j].type == 2 || Main.tile[i, j].type == 23 || Main.tile[i, j].type == 60 ||
             Main.tile[i, j].type == 109 || Main.tile[i, j].type == 147 || Main.tile[i, j].type == 199 ||
             Main.tile[i, j].type == 70) &&
            (Main.tile[i, j - 1].wall == 0 || Main.tile[i, j - 1].wall == 106 || Main.tile[i, j - 1].wall == 107 ||
             (Main.tile[i, j - 1].wall >= 138 && Main.tile[i, j - 1].wall <= 141) || Main.tile[i, j - 1].wall == 145 ||
             Main.tile[i, j - 1].wall == 150 || Main.tile[i, j - 1].wall == 152) &&
            ((Main.tile[i - 1, j].active() && (Main.tile[i - 1, j].type == 2 || Main.tile[i - 1, j].type == 23 ||
                                               Main.tile[i - 1, j].type == 60 || Main.tile[i - 1, j].type == 109 ||
                                               Main.tile[i - 1, j].type == 147 || Main.tile[i - 1, j].type == 199 ||
                                               Main.tile[i - 1, j].type == 70)) ||
             (Main.tile[i + 1, j].active() && (Main.tile[i + 1, j].type == 2 || Main.tile[i + 1, j].type == 23 ||
                                               Main.tile[i + 1, j].type == 60 || Main.tile[i + 1, j].type == 109 ||
                                               Main.tile[i + 1, j].type == 147 || Main.tile[i + 1, j].type == 199 ||
                                               Main.tile[i + 1, j].type == 70))))
        {
            int num = 2;
            int num2 = 16;
            if (Main.tile[i, j].type == 60)
            {
                num2 += 5;
            }

            if (EmptyTileCheck(i - num, i + num, j - num2, j - 1, 20))
            {
                bool flag = false;
                bool flag2 = false;
                int num3 = genRand.Next(5, num2 + 1);
                int num4;
                for (int k = j - num3; k < j; k++)
                {
                    Main.tile[i, k].frameNumber((byte) genRand.Next(3));
                    Main.tile[i, k].active(true);
                    Main.tile[i, k].type = 5;
                    num4 = genRand.Next(3);
                    int num5 = genRand.Next(10);
                    if (k == j - 1 || k == j - num3)
                    {
                        num5 = 0;
                    }

                    while (((num5 == 5 || num5 == 7) && flag) || ((num5 == 6 || num5 == 7) && flag2))
                    {
                        num5 = genRand.Next(10);
                    }

                    flag = false;
                    flag2 = false;
                    if (num5 == 5 || num5 == 7)
                    {
                        flag = true;
                    }

                    if (num5 == 6 || num5 == 7)
                    {
                        flag2 = true;
                    }

                    switch (num5)
                    {
                        case 1:
                            if (num4 == 0)
                            {
                                Main.tile[i, k].frameX = 0;
                                Main.tile[i, k].frameY = 66;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i, k].frameX = 0;
                                Main.tile[i, k].frameY = 88;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i, k].frameX = 0;
                                Main.tile[i, k].frameY = 110;
                            }

                            break;
                        case 2:
                            if (num4 == 0)
                            {
                                Main.tile[i, k].frameX = 22;
                                Main.tile[i, k].frameY = 0;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i, k].frameX = 22;
                                Main.tile[i, k].frameY = 22;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i, k].frameX = 22;
                                Main.tile[i, k].frameY = 44;
                            }

                            break;
                        case 3:
                            if (num4 == 0)
                            {
                                Main.tile[i, k].frameX = 44;
                                Main.tile[i, k].frameY = 66;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i, k].frameX = 44;
                                Main.tile[i, k].frameY = 88;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i, k].frameX = 44;
                                Main.tile[i, k].frameY = 110;
                            }

                            break;
                        case 4:
                            if (num4 == 0)
                            {
                                Main.tile[i, k].frameX = 22;
                                Main.tile[i, k].frameY = 66;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i, k].frameX = 22;
                                Main.tile[i, k].frameY = 88;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i, k].frameX = 22;
                                Main.tile[i, k].frameY = 110;
                            }

                            break;
                        case 5:
                            if (num4 == 0)
                            {
                                Main.tile[i, k].frameX = 88;
                                Main.tile[i, k].frameY = 0;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i, k].frameX = 88;
                                Main.tile[i, k].frameY = 22;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i, k].frameX = 88;
                                Main.tile[i, k].frameY = 44;
                            }

                            break;
                        case 6:
                            if (num4 == 0)
                            {
                                Main.tile[i, k].frameX = 66;
                                Main.tile[i, k].frameY = 66;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i, k].frameX = 66;
                                Main.tile[i, k].frameY = 88;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i, k].frameX = 66;
                                Main.tile[i, k].frameY = 110;
                            }

                            break;
                        case 7:
                            if (num4 == 0)
                            {
                                Main.tile[i, k].frameX = 110;
                                Main.tile[i, k].frameY = 66;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i, k].frameX = 110;
                                Main.tile[i, k].frameY = 88;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i, k].frameX = 110;
                                Main.tile[i, k].frameY = 110;
                            }

                            break;
                        default:
                            if (num4 == 0)
                            {
                                Main.tile[i, k].frameX = 0;
                                Main.tile[i, k].frameY = 0;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i, k].frameX = 0;
                                Main.tile[i, k].frameY = 22;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i, k].frameX = 0;
                                Main.tile[i, k].frameY = 44;
                            }

                            break;
                    }

                    if (num5 == 5 || num5 == 7)
                    {
                        Main.tile[i - 1, k].active(true);
                        Main.tile[i - 1, k].type = 5;
                        num4 = genRand.Next(3);
                        if (genRand.Next(3) < 2)
                        {
                            if (num4 == 0)
                            {
                                Main.tile[i - 1, k].frameX = 44;
                                Main.tile[i - 1, k].frameY = 198;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i - 1, k].frameX = 44;
                                Main.tile[i - 1, k].frameY = 220;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i - 1, k].frameX = 44;
                                Main.tile[i - 1, k].frameY = 242;
                            }
                        }
                        else
                        {
                            if (num4 == 0)
                            {
                                Main.tile[i - 1, k].frameX = 66;
                                Main.tile[i - 1, k].frameY = 0;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i - 1, k].frameX = 66;
                                Main.tile[i - 1, k].frameY = 22;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i - 1, k].frameX = 66;
                                Main.tile[i - 1, k].frameY = 44;
                            }
                        }
                    }

                    if (num5 == 6 || num5 == 7)
                    {
                        Main.tile[i + 1, k].active(true);
                        Main.tile[i + 1, k].type = 5;
                        num4 = genRand.Next(3);
                        if (genRand.Next(3) < 2)
                        {
                            if (num4 == 0)
                            {
                                Main.tile[i + 1, k].frameX = 66;
                                Main.tile[i + 1, k].frameY = 198;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i + 1, k].frameX = 66;
                                Main.tile[i + 1, k].frameY = 220;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i + 1, k].frameX = 66;
                                Main.tile[i + 1, k].frameY = 242;
                            }
                        }
                        else
                        {
                            if (num4 == 0)
                            {
                                Main.tile[i + 1, k].frameX = 88;
                                Main.tile[i + 1, k].frameY = 66;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i + 1, k].frameX = 88;
                                Main.tile[i + 1, k].frameY = 88;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i + 1, k].frameX = 88;
                                Main.tile[i + 1, k].frameY = 110;
                            }
                        }
                    }
                }

                int num6 = genRand.Next(3);
                bool flag3 = false;
                bool flag4 = false;
                if (Main.tile[i - 1, j].nactive() && !Main.tile[i - 1, j].halfBrick() &&
                    Main.tile[i - 1, j].slope() == 0 && (Main.tile[i - 1, j].type == 2 ||
                                                         Main.tile[i - 1, j].type == 23 ||
                                                         Main.tile[i - 1, j].type == 60 ||
                                                         Main.tile[i - 1, j].type == 109 ||
                                                         Main.tile[i - 1, j].type == 147 ||
                                                         Main.tile[i - 1, j].type == 199))
                {
                    flag3 = true;
                }

                if (Main.tile[i + 1, j].nactive() && !Main.tile[i + 1, j].halfBrick() &&
                    Main.tile[i + 1, j].slope() == 0 && (Main.tile[i + 1, j].type == 2 ||
                                                         Main.tile[i + 1, j].type == 23 ||
                                                         Main.tile[i + 1, j].type == 60 ||
                                                         Main.tile[i + 1, j].type == 109 ||
                                                         Main.tile[i + 1, j].type == 147 ||
                                                         Main.tile[i + 1, j].type == 199))
                {
                    flag4 = true;
                }

                if (!flag3)
                {
                    if (num6 == 0)
                    {
                        num6 = 2;
                    }

                    if (num6 == 1)
                    {
                        num6 = 3;
                    }
                }

                if (!flag4)
                {
                    if (num6 == 0)
                    {
                        num6 = 1;
                    }

                    if (num6 == 2)
                    {
                        num6 = 3;
                    }
                }

                if (flag3 && !flag4)
                {
                    num6 = 2;
                }

                if (flag4 && !flag3)
                {
                    num6 = 1;
                }

                if (num6 == 0 || num6 == 1)
                {
                    Main.tile[i + 1, j - 1].active(true);
                    Main.tile[i + 1, j - 1].type = 5;
                    num4 = genRand.Next(3);
                    if (num4 == 0)
                    {
                        Main.tile[i + 1, j - 1].frameX = 22;
                        Main.tile[i + 1, j - 1].frameY = 132;
                    }

                    if (num4 == 1)
                    {
                        Main.tile[i + 1, j - 1].frameX = 22;
                        Main.tile[i + 1, j - 1].frameY = 154;
                    }

                    if (num4 == 2)
                    {
                        Main.tile[i + 1, j - 1].frameX = 22;
                        Main.tile[i + 1, j - 1].frameY = 176;
                    }
                }

                if (num6 == 0 || num6 == 2)
                {
                    Main.tile[i - 1, j - 1].active(true);
                    Main.tile[i - 1, j - 1].type = 5;
                    num4 = genRand.Next(3);
                    if (num4 == 0)
                    {
                        Main.tile[i - 1, j - 1].frameX = 44;
                        Main.tile[i - 1, j - 1].frameY = 132;
                    }

                    if (num4 == 1)
                    {
                        Main.tile[i - 1, j - 1].frameX = 44;
                        Main.tile[i - 1, j - 1].frameY = 154;
                    }

                    if (num4 == 2)
                    {
                        Main.tile[i - 1, j - 1].frameX = 44;
                        Main.tile[i - 1, j - 1].frameY = 176;
                    }
                }

                num4 = genRand.Next(3);
                switch (num6)
                {
                    case 0:
                        if (num4 == 0)
                        {
                            Main.tile[i, j - 1].frameX = 88;
                            Main.tile[i, j - 1].frameY = 132;
                        }

                        if (num4 == 1)
                        {
                            Main.tile[i, j - 1].frameX = 88;
                            Main.tile[i, j - 1].frameY = 154;
                        }

                        if (num4 == 2)
                        {
                            Main.tile[i, j - 1].frameX = 88;
                            Main.tile[i, j - 1].frameY = 176;
                        }

                        break;
                    case 1:
                        if (num4 == 0)
                        {
                            Main.tile[i, j - 1].frameX = 0;
                            Main.tile[i, j - 1].frameY = 132;
                        }

                        if (num4 == 1)
                        {
                            Main.tile[i, j - 1].frameX = 0;
                            Main.tile[i, j - 1].frameY = 154;
                        }

                        if (num4 == 2)
                        {
                            Main.tile[i, j - 1].frameX = 0;
                            Main.tile[i, j - 1].frameY = 176;
                        }

                        break;
                    case 2:
                        if (num4 == 0)
                        {
                            Main.tile[i, j - 1].frameX = 66;
                            Main.tile[i, j - 1].frameY = 132;
                        }

                        if (num4 == 1)
                        {
                            Main.tile[i, j - 1].frameX = 66;
                            Main.tile[i, j - 1].frameY = 154;
                        }

                        if (num4 == 2)
                        {
                            Main.tile[i, j - 1].frameX = 66;
                            Main.tile[i, j - 1].frameY = 176;
                        }

                        break;
                }

                if (genRand.Next(8) != 0)
                {
                    num4 = genRand.Next(3);
                    if (num4 == 0)
                    {
                        Main.tile[i, j - num3].frameX = 22;
                        Main.tile[i, j - num3].frameY = 198;
                    }

                    if (num4 == 1)
                    {
                        Main.tile[i, j - num3].frameX = 22;
                        Main.tile[i, j - num3].frameY = 220;
                    }

                    if (num4 == 2)
                    {
                        Main.tile[i, j - num3].frameX = 22;
                        Main.tile[i, j - num3].frameY = 242;
                    }
                }
                else
                {
                    num4 = genRand.Next(3);
                    if (num4 == 0)
                    {
                        Main.tile[i, j - num3].frameX = 0;
                        Main.tile[i, j - num3].frameY = 198;
                    }

                    if (num4 == 1)
                    {
                        Main.tile[i, j - num3].frameX = 0;
                        Main.tile[i, j - num3].frameY = 220;
                    }

                    if (num4 == 2)
                    {
                        Main.tile[i, j - num3].frameX = 0;
                        Main.tile[i, j - num3].frameY = 242;
                    }
                }

                RangeFrame(i - 2, j - num3 - 1, i + 2, j + 1);
                if (Main.netMode == 2)
                {
                    NetMessage.SendTileSquare(-1, i, (int) ((double) j - (double) num3 * 0.5), num3 + 1,
                        TileChangeType.None);
                }

                return true;
            }
        }

        return false;
    }

    public static void GrowUndergroundTree(int i, int y)
    {
        if (Main.tile[i, y].type == 60 && Main.tile[i, y].nactive() && !Main.tile[i, y].halfBrick() &&
            Main.tile[i, y].slope() == 0 && Main.tile[i, y].type == 60 &&
            ((Main.tile[i - 1, y].active() && Main.tile[i - 1, y].type == 60) ||
             (Main.tile[i + 1, y].active() && Main.tile[i + 1, y].type == 60)))
        {
            int num = 1;
            int num2 = genRand.Next(5, 15);
            int num3 = num2 + 2;
            if (Main.tile[i, y].type == 60)
            {
                num3 += 5;
            }

            if (EmptyTileCheck(i - num, i + num, y - num3, y - 1, 20))
            {
                bool flag = false;
                bool flag2 = false;
                int num4;
                for (int j = y - num2; j < y; j++)
                {
                    Main.tile[i, j].frameNumber((byte) genRand.Next(3));
                    Main.tile[i, j].active(true);
                    Main.tile[i, j].type = 5;
                    num4 = genRand.Next(3);
                    int num5 = genRand.Next(10);
                    if (j == y - 1 || j == y - num2)
                    {
                        num5 = 0;
                    }

                    while (((num5 == 5 || num5 == 7) && flag) || ((num5 == 6 || num5 == 7) && flag2))
                    {
                        num5 = genRand.Next(10);
                    }

                    flag = false;
                    flag2 = false;
                    if (num5 == 5 || num5 == 7)
                    {
                        flag = true;
                    }

                    if (num5 == 6 || num5 == 7)
                    {
                        flag2 = true;
                    }

                    switch (num5)
                    {
                        case 1:
                            if (num4 == 0)
                            {
                                Main.tile[i, j].frameX = 0;
                                Main.tile[i, j].frameY = 66;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i, j].frameX = 0;
                                Main.tile[i, j].frameY = 88;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i, j].frameX = 0;
                                Main.tile[i, j].frameY = 110;
                            }

                            break;
                        case 2:
                            if (num4 == 0)
                            {
                                Main.tile[i, j].frameX = 22;
                                Main.tile[i, j].frameY = 0;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i, j].frameX = 22;
                                Main.tile[i, j].frameY = 22;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i, j].frameX = 22;
                                Main.tile[i, j].frameY = 44;
                            }

                            break;
                        case 3:
                            if (num4 == 0)
                            {
                                Main.tile[i, j].frameX = 44;
                                Main.tile[i, j].frameY = 66;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i, j].frameX = 44;
                                Main.tile[i, j].frameY = 88;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i, j].frameX = 44;
                                Main.tile[i, j].frameY = 110;
                            }

                            break;
                        case 4:
                            if (num4 == 0)
                            {
                                Main.tile[i, j].frameX = 22;
                                Main.tile[i, j].frameY = 66;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i, j].frameX = 22;
                                Main.tile[i, j].frameY = 88;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i, j].frameX = 22;
                                Main.tile[i, j].frameY = 110;
                            }

                            break;
                        case 5:
                            if (num4 == 0)
                            {
                                Main.tile[i, j].frameX = 88;
                                Main.tile[i, j].frameY = 0;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i, j].frameX = 88;
                                Main.tile[i, j].frameY = 22;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i, j].frameX = 88;
                                Main.tile[i, j].frameY = 44;
                            }

                            break;
                        case 6:
                            if (num4 == 0)
                            {
                                Main.tile[i, j].frameX = 66;
                                Main.tile[i, j].frameY = 66;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i, j].frameX = 66;
                                Main.tile[i, j].frameY = 88;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i, j].frameX = 66;
                                Main.tile[i, j].frameY = 110;
                            }

                            break;
                        case 7:
                            if (num4 == 0)
                            {
                                Main.tile[i, j].frameX = 110;
                                Main.tile[i, j].frameY = 66;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i, j].frameX = 110;
                                Main.tile[i, j].frameY = 88;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i, j].frameX = 110;
                                Main.tile[i, j].frameY = 110;
                            }

                            break;
                        default:
                            if (num4 == 0)
                            {
                                Main.tile[i, j].frameX = 0;
                                Main.tile[i, j].frameY = 0;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i, j].frameX = 0;
                                Main.tile[i, j].frameY = 22;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i, j].frameX = 0;
                                Main.tile[i, j].frameY = 44;
                            }

                            break;
                    }

                    if (num5 == 5 || num5 == 7)
                    {
                        Main.tile[i - 1, j].active(true);
                        Main.tile[i - 1, j].type = 5;
                        num4 = genRand.Next(3);
                        if (genRand.Next(3) < 2)
                        {
                            if (num4 == 0)
                            {
                                Main.tile[i - 1, j].frameX = 44;
                                Main.tile[i - 1, j].frameY = 198;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i - 1, j].frameX = 44;
                                Main.tile[i - 1, j].frameY = 220;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i - 1, j].frameX = 44;
                                Main.tile[i - 1, j].frameY = 242;
                            }
                        }
                        else
                        {
                            if (num4 == 0)
                            {
                                Main.tile[i - 1, j].frameX = 66;
                                Main.tile[i - 1, j].frameY = 0;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i - 1, j].frameX = 66;
                                Main.tile[i - 1, j].frameY = 22;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i - 1, j].frameX = 66;
                                Main.tile[i - 1, j].frameY = 44;
                            }
                        }
                    }

                    if (num5 == 6 || num5 == 7)
                    {
                        Main.tile[i + 1, j].active(true);
                        Main.tile[i + 1, j].type = 5;
                        num4 = genRand.Next(3);
                        if (genRand.Next(3) < 2)
                        {
                            if (num4 == 0)
                            {
                                Main.tile[i + 1, j].frameX = 66;
                                Main.tile[i + 1, j].frameY = 198;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i + 1, j].frameX = 66;
                                Main.tile[i + 1, j].frameY = 220;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i + 1, j].frameX = 66;
                                Main.tile[i + 1, j].frameY = 242;
                            }
                        }
                        else
                        {
                            if (num4 == 0)
                            {
                                Main.tile[i + 1, j].frameX = 88;
                                Main.tile[i + 1, j].frameY = 66;
                            }

                            if (num4 == 1)
                            {
                                Main.tile[i + 1, j].frameX = 88;
                                Main.tile[i + 1, j].frameY = 88;
                            }

                            if (num4 == 2)
                            {
                                Main.tile[i + 1, j].frameX = 88;
                                Main.tile[i + 1, j].frameY = 110;
                            }
                        }
                    }
                }

                int num6 = genRand.Next(3);
                bool flag3 = false;
                bool flag4 = false;
                if (Main.tile[i - 1, y].nactive() && !Main.tile[i - 1, y].halfBrick() &&
                    Main.tile[i - 1, y].slope() == 0 && (Main.tile[i - 1, y].type == 2 ||
                                                         Main.tile[i - 1, y].type == 23 ||
                                                         Main.tile[i - 1, y].type == 60 ||
                                                         Main.tile[i - 1, y].type == 109 ||
                                                         Main.tile[i - 1, y].type == 147))
                {
                    flag3 = true;
                }

                if (Main.tile[i + 1, y].nactive() && !Main.tile[i + 1, y].halfBrick() &&
                    Main.tile[i + 1, y].slope() == 0 && (Main.tile[i + 1, y].type == 2 ||
                                                         Main.tile[i + 1, y].type == 23 ||
                                                         Main.tile[i + 1, y].type == 60 ||
                                                         Main.tile[i + 1, y].type == 109 ||
                                                         Main.tile[i + 1, y].type == 147))
                {
                    flag4 = true;
                }

                if (!flag3)
                {
                    if (num6 == 0)
                    {
                        num6 = 2;
                    }

                    if (num6 == 1)
                    {
                        num6 = 3;
                    }
                }

                if (!flag4)
                {
                    if (num6 == 0)
                    {
                        num6 = 1;
                    }

                    if (num6 == 2)
                    {
                        num6 = 3;
                    }
                }

                if (flag3 && !flag4)
                {
                    num6 = 2;
                }

                if (flag4 && !flag3)
                {
                    num6 = 1;
                }

                if (num6 == 0 || num6 == 1)
                {
                    Main.tile[i + 1, y - 1].active(true);
                    Main.tile[i + 1, y - 1].type = 5;
                    num4 = genRand.Next(3);
                    if (num4 == 0)
                    {
                        Main.tile[i + 1, y - 1].frameX = 22;
                        Main.tile[i + 1, y - 1].frameY = 132;
                    }

                    if (num4 == 1)
                    {
                        Main.tile[i + 1, y - 1].frameX = 22;
                        Main.tile[i + 1, y - 1].frameY = 154;
                    }

                    if (num4 == 2)
                    {
                        Main.tile[i + 1, y - 1].frameX = 22;
                        Main.tile[i + 1, y - 1].frameY = 176;
                    }
                }

                if (num6 == 0 || num6 == 2)
                {
                    Main.tile[i - 1, y - 1].active(true);
                    Main.tile[i - 1, y - 1].type = 5;
                    num4 = genRand.Next(3);
                    if (num4 == 0)
                    {
                        Main.tile[i - 1, y - 1].frameX = 44;
                        Main.tile[i - 1, y - 1].frameY = 132;
                    }

                    if (num4 == 1)
                    {
                        Main.tile[i - 1, y - 1].frameX = 44;
                        Main.tile[i - 1, y - 1].frameY = 154;
                    }

                    if (num4 == 2)
                    {
                        Main.tile[i - 1, y - 1].frameX = 44;
                        Main.tile[i - 1, y - 1].frameY = 176;
                    }
                }

                num4 = genRand.Next(3);
                switch (num6)
                {
                    case 0:
                        if (num4 == 0)
                        {
                            Main.tile[i, y - 1].frameX = 88;
                            Main.tile[i, y - 1].frameY = 132;
                        }

                        if (num4 == 1)
                        {
                            Main.tile[i, y - 1].frameX = 88;
                            Main.tile[i, y - 1].frameY = 154;
                        }

                        if (num4 == 2)
                        {
                            Main.tile[i, y - 1].frameX = 88;
                            Main.tile[i, y - 1].frameY = 176;
                        }

                        break;
                    case 1:
                        if (num4 == 0)
                        {
                            Main.tile[i, y - 1].frameX = 0;
                            Main.tile[i, y - 1].frameY = 132;
                        }

                        if (num4 == 1)
                        {
                            Main.tile[i, y - 1].frameX = 0;
                            Main.tile[i, y - 1].frameY = 154;
                        }

                        if (num4 == 2)
                        {
                            Main.tile[i, y - 1].frameX = 0;
                            Main.tile[i, y - 1].frameY = 176;
                        }

                        break;
                    case 2:
                        if (num4 == 0)
                        {
                            Main.tile[i, y - 1].frameX = 66;
                            Main.tile[i, y - 1].frameY = 132;
                        }

                        if (num4 == 1)
                        {
                            Main.tile[i, y - 1].frameX = 66;
                            Main.tile[i, y - 1].frameY = 154;
                        }

                        if (num4 == 2)
                        {
                            Main.tile[i, y - 1].frameX = 66;
                            Main.tile[i, y - 1].frameY = 176;
                        }

                        break;
                }

                if (genRand.Next(8) != 0)
                {
                    num4 = genRand.Next(3);
                    if (num4 == 0)
                    {
                        Main.tile[i, y - num2].frameX = 22;
                        Main.tile[i, y - num2].frameY = 198;
                    }

                    if (num4 == 1)
                    {
                        Main.tile[i, y - num2].frameX = 22;
                        Main.tile[i, y - num2].frameY = 220;
                    }

                    if (num4 == 2)
                    {
                        Main.tile[i, y - num2].frameX = 22;
                        Main.tile[i, y - num2].frameY = 242;
                    }
                }
                else
                {
                    num4 = genRand.Next(3);
                    if (num4 == 0)
                    {
                        Main.tile[i, y - num2].frameX = 0;
                        Main.tile[i, y - num2].frameY = 198;
                    }

                    if (num4 == 1)
                    {
                        Main.tile[i, y - num2].frameX = 0;
                        Main.tile[i, y - num2].frameY = 220;
                    }

                    if (num4 == 2)
                    {
                        Main.tile[i, y - num2].frameX = 0;
                        Main.tile[i, y - num2].frameY = 242;
                    }
                }

                RangeFrame(i - 2, y - num2 - 1, i + 2, y + 1);
                if (Main.netMode == 2)
                {
                    NetMessage.SendTileSquare(-1, i, (int) ((double) y - (double) num2 * 0.5), num2 + 1,
                        TileChangeType.None);
                }
            }
        }
    }

    public static bool GrowShroom(int i, int y)
    {
        if (Main.tile[i - 1, y - 1].lava() || Main.tile[i - 1, y - 1].lava() || Main.tile[i + 1, y - 1].lava())
        {
            return false;
        }

        if (Main.tile[i, y].nactive() && !Main.tile[i, y].halfBrick() && Main.tile[i, y].slope() == 0 &&
            Main.tile[i, y].type == 70 && Main.tile[i, y - 1].wall == 0 && Main.tile[i - 1, y].active() &&
            Main.tile[i - 1, y].type == 70 && Main.tile[i + 1, y].active() && Main.tile[i + 1, y].type == 70 &&
            EmptyTileCheck(i - 2, i + 2, y - 13, y - 1, 71))
        {
            int num = genRand.Next(4, 11);
            int num2;
            for (int j = y - num; j < y; j++)
            {
                Main.tile[i, j].frameNumber((byte) genRand.Next(3));
                Main.tile[i, j].active(true);
                Main.tile[i, j].type = 72;
                num2 = genRand.Next(3);
                if (num2 == 0)
                {
                    Main.tile[i, j].frameX = 0;
                    Main.tile[i, j].frameY = 0;
                }

                if (num2 == 1)
                {
                    Main.tile[i, j].frameX = 0;
                    Main.tile[i, j].frameY = 18;
                }

                if (num2 == 2)
                {
                    Main.tile[i, j].frameX = 0;
                    Main.tile[i, j].frameY = 36;
                }
            }

            num2 = genRand.Next(3);
            if (num2 == 0)
            {
                Main.tile[i, y - num].frameX = 36;
                Main.tile[i, y - num].frameY = 0;
            }

            if (num2 == 1)
            {
                Main.tile[i, y - num].frameX = 36;
                Main.tile[i, y - num].frameY = 18;
            }

            if (num2 == 2)
            {
                Main.tile[i, y - num].frameX = 36;
                Main.tile[i, y - num].frameY = 36;
            }

            RangeFrame(i - 2, y - num - 1, i + 2, y + 1);
            if (Main.netMode == 2)
            {
                NetMessage.SendTileSquare(-1, i, (int) ((double) y - (double) num * 0.5), num + 1, TileChangeType.None);
            }

            return true;
        }

        return false;
    }

    public static void AddTrees()
    {
        for (int i = 1; i < Main.maxTilesX - 1; i++)
        {
            for (int j = 20; (double) j < Main.worldSurface; j++)
            {
                GrowTree(i, j);
                if ((i < 380 || i > Main.maxTilesX - 380) && genRand.Next(3) == 0)
                {
                    GrowPalmTree(i, j);
                }
            }

            if (genRand.Next(3) == 0)
            {
                i++;
            }

            if (genRand.Next(4) == 0)
            {
                i++;
            }
        }
    }

    public static void ExplodeMine(int i, int j)
    {
        ushort type = Main.tile[i, j].type;
        KillTile(i, j, false, false, true);
        NetMessage.SendTileSquare(-1, i, j, 1, TileChangeType.None);
        Projectile.NewProjectile((float) (i * 16 + 8), (float) (j * 16 + 8), 0f, 0f, 164, 250, 10f, Main.myPlayer, 0f,
            0f);
    }

    public static bool EmptyTileCheck(int startX, int endX, int startY, int endY, int ignoreID = -1)
    {
        if (startX < 0)
        {
            return false;
        }

        if (endX >= Main.maxTilesX)
        {
            return false;
        }

        if (startY < 0)
        {
            return false;
        }

        if (endY >= Main.maxTilesY)
        {
            return false;
        }

        for (int i = startX; i < endX + 1; i++)
        {
            for (int j = startY; j < endY + 1; j++)
            {
                if (Main.tile[i, j].active())
                {
                    switch (ignoreID)
                    {
                        case -1:
                            return false;
                        case 11:
                        {
                            ushort type2 = Main.tile[i, j].type;
                            if (type2 != 11)
                            {
                                return false;
                            }

                            break;
                        }
                        case 71:
                        {
                            ushort type = Main.tile[i, j].type;
                            if (type != 71)
                            {
                                return false;
                            }

                            break;
                        }
                        case 20:
                            switch (Main.tile[i, j].type)
                            {
                                default:
                                    return false;
                                case 3:
                                case 20:
                                case 24:
                                case 32:
                                case 61:
                                case 62:
                                case 69:
                                case 71:
                                case 73:
                                case 74:
                                case 82:
                                case 83:
                                case 84:
                                case 110:
                                case 113:
                                case 201:
                                case 233:
                                case 352:
                                    break;
                            }

                            break;
                    }
                }
            }
        }

        return true;
    }

    public static void StartHardmode()
    {
        if (Main.netMode != 1 && !Main.hardMode)
        {
            Main.hardMode = true;
            Main.InitLifeBytes();
            ThreadPool.QueueUserWorkItem(smCallBack, 1);
        }
    }

    public static void smCallBack(object threadContext)
    {
        IsGeneratingHardMode = true;
        if (Main.rand == null)
        {
            Main.rand = new UnifiedRandom((int) DateTime.Now.Ticks);
        }

        float num = (float) genRand.Next(300, 400) * 0.001f;
        float num2 = (float) genRand.Next(200, 300) * 0.001f;
        int num3 = (int) ((float) Main.maxTilesX * num);
        int num4 = (int) ((float) Main.maxTilesX * (1f - num));
        int num5 = 1;
        if (genRand.Next(2) == 0)
        {
            num4 = (int) ((float) Main.maxTilesX * num);
            num3 = (int) ((float) Main.maxTilesX * (1f - num));
            num5 = -1;
        }

        int num6 = 1;
        if (dungeonX < Main.maxTilesX / 2)
        {
            num6 = -1;
        }

        if (num6 < 0)
        {
            if (num4 < num3)
            {
                num4 = (int) ((float) Main.maxTilesX * num2);
            }
            else
            {
                num3 = (int) ((float) Main.maxTilesX * num2);
            }
        }
        else if (num4 > num3)
        {
            num4 = (int) ((float) Main.maxTilesX * (1f - num2));
        }
        else
        {
            num3 = (int) ((float) Main.maxTilesX * (1f - num2));
        }

        GERunner(num3, 0, (float) (3 * num5), 5f, true);
        GERunner(num4, 0, (float) (3 * -num5), 5f, false);
        float num7 = (float) Main.maxTilesX / 4200f;
        int num8 = (int) (25f * num7);
        ShapeData shapeData = new ShapeData();
        int num9 = 0;
        while (num8 > 0)
        {
            if (++num9 % 15000 == 0)
            {
                num8--;
            }

            Point point = RandomWorldPoint((int) Main.worldSurface - 100, 1, 190, 1);
            Tile tile = Main.tile[point.X, point.Y];
            Tile tile2 = Main.tile[point.X, point.Y - 1];
            byte b = 0;
            if (TileID.Sets.Crimson[tile.type])
            {
                b = (byte) (192 + genRand.Next(4));
            }
            else if (TileID.Sets.Corrupt[tile.type])
            {
                b = (byte) (188 + genRand.Next(4));
            }
            else if (TileID.Sets.Hallow[tile.type])
            {
                b = (byte) (200 + genRand.Next(4));
            }

            if (tile.active() && b != 0 && !tile2.active())
            {
                bool flag = WorldUtils.Gen(new Point(point.X, point.Y - 1), new ShapeFloodFill(1000),
                    Actions.Chain(new Modifiers.IsNotSolid(),
                        new Modifiers.OnlyWalls(0, 54, 55, 56, 57, 58, 59, 61, 185, 212, 213, 214, 215, 196, 197, 198,
                            199, 15, 40, 71, 64, 204, 205, 206, 207, 208, 209, 210, 211, 71),
                        new Actions.Blank().Output(shapeData)));
                if (shapeData.Count > 50 && flag)
                {
                    WorldUtils.Gen(new Point(point.X, point.Y), new ModShapes.OuterOutline(shapeData, true, true),
                        new Actions.PlaceWall(b, true));
                    num8--;
                }

                shapeData.Clear();
            }
        }

        if (Main.netMode == 0)
        {
            Main.NewText(Lang.misc[15].Value, 50, byte.MaxValue, 130, false);
        }
        else if (Main.netMode == 2)
        {
            NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[15].Key), new Color(50, 255, 130), -1);
        }

        AchievementsHelper.NotifyProgressionEvent(9);
        if (Main.netMode == 2)
        {
            Netplay.ResetSections();
        }

        IsGeneratingHardMode = false;
    }

    public static bool PlaceDoor(int i, int j, int type, int style = 0)
    {
        int num = 54 * style;
        try
        {
            if (Main.tile[i, j - 2].nactive() && Main.tileSolid[Main.tile[i, j - 2].type] && SolidTile(i, j + 2))
            {
                Main.tile[i, j - 1].active(true);
                Main.tile[i, j - 1].type = 10;
                Main.tile[i, j - 1].frameY = (short) num;
                Main.tile[i, j - 1].frameX = (short) (genRand.Next(3) * 18);
                Main.tile[i, j].active(true);
                Main.tile[i, j].type = 10;
                Main.tile[i, j].frameY = (short) (num + 18);
                Main.tile[i, j].frameX = (short) (genRand.Next(3) * 18);
                Main.tile[i, j + 1].active(true);
                Main.tile[i, j + 1].type = 10;
                Main.tile[i, j + 1].frameY = (short) (num + 36);
                Main.tile[i, j + 1].frameX = (short) (genRand.Next(3) * 18);
                return true;
            }

            return false;
        }
        catch
        {
            return false;
        }
    }

    public static bool CloseDoor(int i, int j, bool forced = false)
    {
        int num = 0;
        int num2 = i;
        if (Main.tile[i, j] == null)
        {
            Tile[,] tile = Main.tile;
            Tile tile2 = new Tile();
            tile[i, j] = tile2;
        }

        int frameX = Main.tile[i, j].frameX;
        Tile tile3 = Main.tile[i, j];
        if (tile3.type != 11)
        {
            return false;
        }

        int num3 = tile3.frameY;
        int num4 = 0;
        int num5 = 0;
        while (num3 >= 54)
        {
            num3 -= 54;
            num4++;
        }

        if (frameX >= 72)
        {
            num4 += 36 * (frameX / 72);
            num5 += 54 * (frameX / 72);
        }

        int num6 = j - num3 / 18;
        switch (frameX % 72)
        {
            case 0:
                num2 = i;
                num = 1;
                break;
            case 18:
                num2 = i - 1;
                num = 1;
                break;
            case 36:
                num2 = i + 1;
                num = -1;
                break;
            case 54:
                num2 = i;
                num = -1;
                break;
        }

        int num7 = num2;
        if (num == -1)
        {
            num7 = num2 - 1;
        }

        if (!forced)
        {
            for (int k = num6; k < num6 + 3; k++)
            {
                if (!Collision.EmptyTile(num2, k, true))
                {
                    return false;
                }
            }
        }

        for (int l = num7; l < num7 + 2; l++)
        {
            for (int m = num6; m < num6 + 3; m++)
            {
                if (l == num2)
                {
                    if (Main.tile[l, m] == null)
                    {
                        Tile[,] tile4 = Main.tile;
                        int num8 = l;
                        int num9 = m;
                        Tile tile5 = new Tile();
                        tile4[num8, num9] = tile5;
                    }

                    Main.tile[l, m].type = 10;
                    Main.tile[l, m].frameX = (short) (genRand.Next(3) * 18 + num5);
                }
                else
                {
                    if (Main.tile[l, m] == null)
                    {
                        Tile[,] tile6 = Main.tile;
                        int num10 = l;
                        int num11 = m;
                        Tile tile7 = new Tile();
                        tile6[num10, num11] = tile7;
                    }

                    Main.tile[l, m].active(false);
                }
            }
        }

        if (Main.netMode != 1 && Wiring.running)
        {
            Wiring.SkipWire(num2, num6);
            Wiring.SkipWire(num2, num6 + 1);
            Wiring.SkipWire(num2, num6 + 2);
        }

        for (int n = num2 - 1; n <= num2 + 1; n++)
        {
            for (int num12 = num6 - 1; num12 <= num6 + 2; num12++)
            {
                TileFrame(n, num12, false, false);
            }
        }

        Main.PlaySound(9, i * 16, j * 16, 1, 1f, 0f);
        return true;
    }

    public static bool AddLifeCrystal(int i, int j)
    {
        for (int k = j; k < Main.maxTilesY; k++)
        {
            if (Main.tile[i, k].active() && Main.tileSolid[Main.tile[i, k].type])
            {
                int num = k - 1;
                if (Main.tile[i, num - 1].lava() || Main.tile[i - 1, num - 1].lava())
                {
                    return false;
                }

                if (!EmptyTileCheck(i - 1, i, num - 1, num, -1))
                {
                    return false;
                }

                if (Main.wallDungeon[Main.tile[i, num].wall])
                {
                    return false;
                }

                Tile tile = Main.tile[i - 1, num + 1];
                Tile tile2 = Main.tile[i, num + 1];
                if (!tile.nactive() || !Main.tileSolid[tile.type])
                {
                    return false;
                }

                if (!tile2.nactive() || !Main.tileSolid[tile2.type])
                {
                    return false;
                }

                if (tile.blockType() != 0)
                {
                    tile.slope(0);
                    tile.halfBrick(false);
                }

                if (tile2.blockType() != 0)
                {
                    tile2.slope(0);
                    tile2.halfBrick(false);
                }

                Main.tile[i - 1, num - 1].active(true);
                Main.tile[i - 1, num - 1].type = 12;
                Main.tile[i - 1, num - 1].frameX = 0;
                Main.tile[i - 1, num - 1].frameY = 0;
                Main.tile[i, num - 1].active(true);
                Main.tile[i, num - 1].type = 12;
                Main.tile[i, num - 1].frameX = 18;
                Main.tile[i, num - 1].frameY = 0;
                Main.tile[i - 1, num].active(true);
                Main.tile[i - 1, num].type = 12;
                Main.tile[i - 1, num].frameX = 0;
                Main.tile[i - 1, num].frameY = 18;
                Main.tile[i, num].active(true);
                Main.tile[i, num].type = 12;
                Main.tile[i, num].frameX = 18;
                Main.tile[i, num].frameY = 18;
                return true;
            }
        }

        return false;
    }

    public static void AddShadowOrb(int x, int y)
    {
        if (x >= 10 && x <= Main.maxTilesX - 10 && y >= 10 && y <= Main.maxTilesY - 10)
        {
            for (int i = x - 1; i < x + 1; i++)
            {
                for (int j = y - 1; j < y + 1; j++)
                {
                    if (Main.tile[i, j].active() && Main.tile[i, j].type == 31)
                    {
                        return;
                    }
                }
            }

            short num = 0;
            if (crimson)
            {
                num = (short) (num + 36);
            }

            Main.tile[x - 1, y - 1].active(true);
            Main.tile[x - 1, y - 1].type = 31;
            Main.tile[x - 1, y - 1].frameX = num;
            Main.tile[x - 1, y - 1].frameY = 0;
            Main.tile[x, y - 1].active(true);
            Main.tile[x, y - 1].type = 31;
            Main.tile[x, y - 1].frameX = (short) (18 + num);
            Main.tile[x, y - 1].frameY = 0;
            Main.tile[x - 1, y].active(true);
            Main.tile[x - 1, y].type = 31;
            Main.tile[x - 1, y].frameX = num;
            Main.tile[x - 1, y].frameY = 18;
            Main.tile[x, y].active(true);
            Main.tile[x, y].type = 31;
            Main.tile[x, y].frameX = (short) (18 + num);
            Main.tile[x, y].frameY = 18;
        }
    }

    public static void AddHellHouses()
    {
        int num = (int) ((double) Main.maxTilesX * 0.25);
        for (int i = num; i < Main.maxTilesX - num; i++)
        {
            int num2 = Main.maxTilesY - 40;
            while (Main.tile[i, num2].active() || Main.tile[i, num2].liquid > 0)
            {
                num2--;
            }

            if (Main.tile[i, num2 + 1].active())
            {
                ushort num3 = (ushort) genRand.Next(75, 77);
                byte wallType = 13;
                if (genRand.Next(5) > 0)
                {
                    num3 = 75;
                }

                if (num3 == 75)
                {
                    wallType = 14;
                }

                HellFort(i, num2, num3, wallType);
                i += genRand.Next(30, 130);
                if (genRand.Next(10) == 0)
                {
                    i += genRand.Next(0, 200);
                }
            }
        }

        float num4 = (float) (Main.maxTilesX / 4200);
        for (int j = 0; (float) j < 200f * num4; j++)
        {
            int num5 = 0;
            bool flag = false;
            while (!flag)
            {
                num5++;
                int num6 = genRand.Next((int) ((double) Main.maxTilesX * 0.2), (int) ((double) Main.maxTilesX * 0.8));
                int num7 = genRand.Next(Main.maxTilesY - 300, Main.maxTilesY - 20);
                if (Main.tile[num6, num7].active() &&
                    (Main.tile[num6, num7].type == 75 || Main.tile[num6, num7].type == 76))
                {
                    int num8 = 0;
                    if (Main.tile[num6 - 1, num7].wall > 0)
                    {
                        num8 = -1;
                    }
                    else if (Main.tile[num6 + 1, num7].wall > 0)
                    {
                        num8 = 1;
                    }

                    if (!Main.tile[num6 + num8, num7].active() && !Main.tile[num6 + num8, num7 + 1].active())
                    {
                        bool flag2 = false;
                        for (int k = num6 - 8; k < num6 + 8; k++)
                        {
                            for (int l = num7 - 8; l < num7 + 8; l++)
                            {
                                if (Main.tile[k, l].active() && Main.tile[k, l].type == 4)
                                {
                                    flag2 = true;
                                    break;
                                }
                            }
                        }

                        if (!flag2)
                        {
                            PlaceTile(num6 + num8, num7, 4, true, true, -1, 7);
                            flag = true;
                        }
                    }
                }

                if (num5 > 1000)
                {
                    flag = true;
                }
            }
        }

        float num9 = 4200000f / (float) Main.maxTilesX;
        for (int m = 0; (float) m < num9; m++)
        {
            int num10 = genRand.Next(num, Main.maxTilesX - num);
            int n = genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 20);
            while ((Main.tile[num10, n].wall != 13 && Main.tile[num10, n].wall != 14) || Main.tile[num10, n].active())
            {
                num10 = genRand.Next(num, Main.maxTilesX - num);
                n = genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 20);
            }

            if ((Main.tile[num10, n].wall == 13 || Main.tile[num10, n].wall == 14) && !Main.tile[num10, n].active())
            {
                for (; !SolidTile(num10, n) && n < Main.maxTilesY - 20; n++)
                {
                }

                n--;
                int num11 = num10;
                int num12 = num10;
                while (!Main.tile[num11, n].active() && SolidTile(num11, n + 1))
                {
                    num11--;
                }

                num11++;
                for (; !Main.tile[num12, n].active() && SolidTile(num12, n + 1); num12++)
                {
                }

                num12--;
                int num13 = num12 - num11;
                int num14 = (num12 + num11) / 2;
                if (!Main.tile[num14, n].active() &&
                    (Main.tile[num14, n].wall == 13 || Main.tile[num14, n].wall == 14) && SolidTile(num14, n + 1))
                {
                    int style = 16;
                    int style2 = 13;
                    int style3 = 14;
                    int style4 = 49;
                    int style5 = 4;
                    int style6 = 8;
                    int style7 = 15;
                    int style8 = 9;
                    int style9 = 10;
                    int style10 = 17;
                    int style11 = 25;
                    int style12 = 25;
                    int style13 = 23;
                    int style14 = 25;
                    int num15 = genRand.Next(13);
                    int num16 = 0;
                    int num17 = 0;
                    if (num15 == 0)
                    {
                        num16 = 5;
                        num17 = 4;
                    }

                    if (num15 == 1)
                    {
                        num16 = 4;
                        num17 = 3;
                    }

                    if (num15 == 2)
                    {
                        num16 = 3;
                        num17 = 5;
                    }

                    if (num15 == 3)
                    {
                        num16 = 4;
                        num17 = 6;
                    }

                    if (num15 == 4)
                    {
                        num16 = 3;
                        num17 = 3;
                    }

                    if (num15 == 5)
                    {
                        num16 = 5;
                        num17 = 3;
                    }

                    if (num15 == 6)
                    {
                        num16 = 5;
                        num17 = 4;
                    }

                    if (num15 == 7)
                    {
                        num16 = 5;
                        num17 = 4;
                    }

                    if (num15 == 8)
                    {
                        num16 = 5;
                        num17 = 4;
                    }

                    if (num15 == 9)
                    {
                        num16 = 3;
                        num17 = 5;
                    }

                    if (num15 == 10)
                    {
                        num16 = 5;
                        num17 = 3;
                    }

                    if (num15 == 11)
                    {
                        num16 = 2;
                        num17 = 4;
                    }

                    if (num15 == 12)
                    {
                        num16 = 3;
                        num17 = 3;
                    }

                    for (int num18 = num14 - num16; num18 <= num14 + num16; num18++)
                    {
                        for (int num19 = n - num17; num19 <= n; num19++)
                        {
                            if (Main.tile[num18, num19].active())
                            {
                                num15 = -1;
                                break;
                            }
                        }
                    }

                    if ((double) num13 < (double) num16 * 1.75)
                    {
                        num15 = -1;
                    }

                    switch (num15)
                    {
                        case 0:
                        {
                            PlaceTile(num14, n, 14, true, false, -1, style2);
                            int num21 = genRand.Next(6);
                            if (num21 < 3)
                            {
                                PlaceTile(num14 + num21, n - 2, 33, true, false, -1, style12);
                            }

                            if (Main.tile[num14, n].active())
                            {
                                if (!Main.tile[num14 - 2, n].active())
                                {
                                    PlaceTile(num14 - 2, n, 15, true, false, -1, style);
                                    if (Main.tile[num14 - 2, n].active())
                                    {
                                        Main.tile[num14 - 2, n].frameX += 18;
                                        Main.tile[num14 - 2, n - 1].frameX += 18;
                                    }
                                }

                                if (!Main.tile[num14 + 2, n].active())
                                {
                                    PlaceTile(num14 + 2, n, 15, true, false, -1, style);
                                }
                            }

                            break;
                        }
                        case 1:
                        {
                            PlaceTile(num14, n, 18, true, false, -1, style3);
                            int num20 = genRand.Next(4);
                            if (num20 < 2)
                            {
                                PlaceTile(num14 + num20, n - 1, 33, true, false, -1, style12);
                            }

                            if (Main.tile[num14, n].active())
                            {
                                if (genRand.Next(2) == 0)
                                {
                                    if (!Main.tile[num14 - 1, n].active())
                                    {
                                        PlaceTile(num14 - 1, n, 15, true, false, -1, style);
                                        if (Main.tile[num14 - 1, n].active())
                                        {
                                            Main.tile[num14 - 1, n].frameX += 18;
                                            Main.tile[num14 - 1, n - 1].frameX += 18;
                                        }
                                    }
                                }
                                else if (!Main.tile[num14 + 2, n].active())
                                {
                                    PlaceTile(num14 + 2, n, 15, true, false, -1, style);
                                }
                            }

                            break;
                        }
                        case 2:
                            PlaceTile(num14, n, 105, true, false, -1, style4);
                            break;
                        case 3:
                            PlaceTile(num14, n, 101, true, false, -1, style5);
                            break;
                        case 4:
                            if (genRand.Next(2) == 0)
                            {
                                PlaceTile(num14, n, 15, true, false, -1, style);
                                Main.tile[num14, n].frameX += 18;
                                Main.tile[num14, n - 1].frameX += 18;
                            }
                            else
                            {
                                PlaceTile(num14, n, 15, true, false, -1, style);
                            }

                            break;
                        case 5:
                            if (genRand.Next(2) == 0)
                            {
                                Place4x2(num14, n, 79, 1, style6);
                            }
                            else
                            {
                                Place4x2(num14, n, 79, -1, style6);
                            }

                            break;
                        case 6:
                            PlaceTile(num14, n, 87, true, false, -1, style7);
                            break;
                        case 7:
                            PlaceTile(num14, n, 88, true, false, -1, style8);
                            break;
                        case 8:
                            PlaceTile(num14, n, 89, true, false, -1, style9);
                            break;
                        case 9:
                            PlaceTile(num14, n, 104, true, false, -1, style10);
                            break;
                        case 10:
                            if (genRand.Next(2) == 0)
                            {
                                Place4x2(num14, n, 90, 1, style14);
                            }
                            else
                            {
                                Place4x2(num14, n, 90, -1, style14);
                            }

                            break;
                        case 11:
                            PlaceTile(num14, n, 93, true, false, -1, style13);
                            break;
                        case 12:
                            PlaceTile(num14, n, 100, true, false, -1, style11);
                            break;
                    }
                }
            }
        }

        num9 = 420000f / (float) Main.maxTilesX;
        for (int num22 = 0; (float) num22 < num9; num22++)
        {
            int num23 = genRand.Next(num, Main.maxTilesX - num);
            int num24 = genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 20);
            while ((Main.tile[num23, num24].wall != 13 && Main.tile[num23, num24].wall != 14) ||
                   Main.tile[num23, num24].active())
            {
                num23 = genRand.Next(num, Main.maxTilesX - num);
                num24 = genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 20);
            }

            int num25 = num23;
            int num26 = num23;
            int num27 = num24;
            int num28 = num24;
            int num29 = 0;
            int num30 = 0;
            for (int num31 = 0; num31 < 2; num31++)
            {
                num25 = num23;
                num26 = num23;
                while (!Main.tile[num25, num24].active() &&
                       (Main.tile[num25, num24].wall == 13 || Main.tile[num25, num24].wall == 14))
                {
                    num25--;
                }

                num25++;
                for (;
                    !Main.tile[num26, num24].active() &&
                    (Main.tile[num26, num24].wall == 13 || Main.tile[num26, num24].wall == 14);
                    num26++)
                {
                }

                num26--;
                num23 = (num25 + num26) / 2;
                num27 = num24;
                num28 = num24;
                while (!Main.tile[num23, num27].active() &&
                       (Main.tile[num23, num27].wall == 13 || Main.tile[num23, num27].wall == 14))
                {
                    num27--;
                }

                num27++;
                for (;
                    !Main.tile[num23, num28].active() &&
                    (Main.tile[num23, num28].wall == 13 || Main.tile[num23, num28].wall == 14);
                    num28++)
                {
                }

                num28--;
                num24 = (num27 + num28) / 2;
            }

            num25 = num23;
            num26 = num23;
            while (!Main.tile[num25, num24].active() && !Main.tile[num25, num24 - 1].active() &&
                   !Main.tile[num25, num24 + 1].active())
            {
                num25--;
            }

            num25++;
            for (;
                !Main.tile[num26, num24].active() && !Main.tile[num26, num24 - 1].active() &&
                !Main.tile[num26, num24 + 1].active();
                num26++)
            {
            }

            num26--;
            num27 = num24;
            num28 = num24;
            while (!Main.tile[num23, num27].active() && !Main.tile[num23 - 1, num27].active() &&
                   !Main.tile[num23 + 1, num27].active())
            {
                num27--;
            }

            num27++;
            for (;
                !Main.tile[num23, num28].active() && !Main.tile[num23 - 1, num28].active() &&
                !Main.tile[num23 + 1, num28].active();
                num28++)
            {
            }

            num28--;
            num23 = (num25 + num26) / 2;
            num24 = (num27 + num28) / 2;
            num29 = num26 - num25;
            num30 = num28 - num27;
            if (num29 > 7 && num30 > 5)
            {
                int num32 = 0;
                if (nearPicture2(num23, num24))
                {
                    num32 = -1;
                }

                if (num32 == 0)
                {
                    Vector2 vector = randHellPicture();
                    int type = (int) vector.X;
                    int style15 = (int) vector.Y;
                    if (!nearPicture(num23, num24))
                    {
                        PlaceTile(num23, num24, type, true, false, -1, style15);
                    }
                }
            }
        }

        int[] array = new int[3]
        {
            genRand.Next(16, 22),
            genRand.Next(16, 22),
            genRand.Next(16, 22)
        };
        while (array[1] == array[0])
        {
            array[1] = genRand.Next(16, 22);
        }

        while (array[2] == array[0] || array[2] == array[1])
        {
            array[2] = genRand.Next(16, 22);
        }

        num9 = 420000f / (float) Main.maxTilesX;
        for (int num33 = 0; (float) num33 < num9; num33++)
        {
            int num34;
            int num35;
            do
            {
                num34 = genRand.Next(num, Main.maxTilesX - num);
                num35 = genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 20);
            } while ((Main.tile[num34, num35].wall != 13 && Main.tile[num34, num35].wall != 14) ||
                     Main.tile[num34, num35].active());

            while (!SolidTile(num34, num35) && num35 > 10)
            {
                num35--;
            }

            num35++;
            if (Main.tile[num34, num35].wall == 13 || Main.tile[num34, num35].wall == 14)
            {
                int num36 = genRand.Next(3);
                int style16 = 32;
                int style17 = 32;
                int num37;
                int num38;
                switch (num36)
                {
                    default:
                        num37 = 1;
                        num38 = 3;
                        break;
                    case 1:
                        num37 = 3;
                        num38 = 3;
                        break;
                    case 2:
                        num37 = 1;
                        num38 = 2;
                        break;
                }

                for (int num39 = num34 - 1; num39 <= num34 + num37; num39++)
                {
                    for (int num40 = num35; num40 <= num35 + num38; num40++)
                    {
                        Tile tile = Main.tile[num34, num35];
                        if (num39 < num34 || num39 == num34 + num37)
                        {
                            if (tile.active())
                            {
                                switch (tile.type)
                                {
                                    case 10:
                                    case 11:
                                    case 34:
                                    case 42:
                                    case 91:
                                        num36 = -1;
                                        break;
                                }
                            }
                        }
                        else if (tile.active())
                        {
                            num36 = -1;
                        }
                    }
                }

                switch (num36)
                {
                    case 0:
                        PlaceTile(num34, num35, 91, true, false, -1, array[genRand.Next(3)]);
                        break;
                    case 1:
                        PlaceTile(num34, num35, 34, true, false, -1, style16);
                        break;
                    case 2:
                        PlaceTile(num34, num35, 42, true, false, -1, style17);
                        break;
                }
            }
        }
    }

    public static void HellFort(int i, int j, ushort tileType = 75, byte wallType = 14)
    {
        int[] array = new int[5];
        int[] array2 = new int[5];
        int[] array3 = new int[10];
        int[] array4 = new int[10];
        int num = 8;
        int num2 = 20;
        array[2] = i - genRand.Next(num / 2, num2 / 2);
        array2[2] = i + genRand.Next(num / 2, num2 / 2);
        array[3] = array2[2];
        array2[3] = array[3] + genRand.Next(num, num2);
        array[4] = array2[3];
        array2[4] = array[4] + genRand.Next(num, num2);
        array2[1] = array[2];
        array[1] = array2[1] - genRand.Next(num, num2);
        array2[0] = array[1];
        array[0] = array2[0] - genRand.Next(num, num2);
        num = 6;
        num2 = 12;
        array3[3] = j - genRand.Next(num, num2);
        array4[3] = j;
        for (int k = 4; k < 10; k++)
        {
            array3[k] = array4[k - 1];
            array4[k] = array3[k] + genRand.Next(num, num2);
        }

        for (int num3 = 2; num3 >= 0; num3--)
        {
            array4[num3] = array3[num3 + 1];
            array3[num3] = array4[num3] - genRand.Next(num, num2);
        }

        bool flag = false;
        bool flag2 = false;
        bool[,] array5 = new bool[5, 10];
        int num4 = 3;
        int num5 = 3;
        for (int l = 0; l < 2; l++)
        {
            if (genRand.Next(3) == 0)
            {
                flag = true;
                int num6 = genRand.Next(10);
                if (num6 < num4)
                {
                    num4 = num6;
                }

                if (num6 > num5)
                {
                    num5 = num6;
                }

                int num7 = 1;
                if (genRand.Next(2) == 0)
                {
                    array5[0, num6] = true;
                    array5[1, num6] = true;
                    num7 = 0;
                }
                else
                {
                    array5[1, num6] = true;
                }

                int num8 = genRand.Next(2);
                if (num8 == 0)
                {
                    num8 = -1;
                }

                int num9 = genRand.Next(10);
                while (num9 > 0 && num6 >= 0 && num6 < 10)
                {
                    array5[num7, num6] = true;
                    num6 += num8;
                }
            }

            if (genRand.Next(3) == 0)
            {
                flag2 = true;
                int num10 = genRand.Next(10);
                if (num10 < num4)
                {
                    num4 = num10;
                }

                if (num10 > num5)
                {
                    num5 = num10;
                }

                int num11 = 3;
                if (genRand.Next(2) == 0)
                {
                    array5[3, num10] = true;
                    array5[4, num10] = true;
                    num11 = 4;
                }
                else
                {
                    array5[3, num10] = true;
                }

                int num12 = genRand.Next(2);
                if (num12 == 0)
                {
                    num12 = -1;
                }

                int num13 = genRand.Next(10);
                while (num13 > 0 && num10 >= 0 && num10 < 10)
                {
                    array5[num11, num10] = true;
                    num10 += num12;
                }
            }
        }

        for (int m = 0; m < 5; m++)
        {
            int num14 = array[m];
            bool flag3 = false;
            for (int n = Main.maxTilesY - 200; n < Main.maxTilesY; n++)
            {
                if (Main.tile[num14, n].wall > 0)
                {
                    flag3 = true;
                }
            }

            if (flag3)
            {
                for (int num15 = 0; num15 < 10; num15++)
                {
                    array5[m, num15] = false;
                }
            }
        }

        int num16 = genRand.Next(10);
        if (num16 < num4)
        {
            num4 = num16;
        }

        num16 = genRand.Next(10);
        if (num16 > num5)
        {
            num5 = num16;
        }

        if (!flag && !flag2)
        {
            while (num5 - num4 < 5)
            {
                num16 = genRand.Next(10);
                if (num16 < num4)
                {
                    num4 = num16;
                }

                num16 = genRand.Next(10);
                if (num16 > num5)
                {
                    num5 = num16;
                }
            }
        }

        for (int num17 = num4; num17 <= num5; num17++)
        {
            array5[2, num17] = true;
        }

        for (int num18 = 0; num18 < 5; num18++)
        {
            for (int num19 = 0; num19 < 10; num19++)
            {
                if (array5[num18, num19] &&
                    (array3[num19] < Main.maxTilesY - 200 || array4[num19] > Main.maxTilesY - 20))
                {
                    array5[num18, num19] = false;
                }
            }
        }

        for (int num20 = 0; num20 < 5; num20++)
        {
            for (int num21 = 0; num21 < 10; num21++)
            {
                if (array5[num20, num21])
                {
                    for (int num22 = array[num20]; num22 <= array2[num20]; num22++)
                    {
                        for (int num23 = array3[num21]; num23 <= array4[num21]; num23++)
                        {
                            Main.tile[num22, num23].liquid = 0;
                            if (num22 == array[num20] || num22 == array2[num20] || num23 == array3[num21] ||
                                num23 == array4[num21])
                            {
                                Main.tile[num22, num23].active(true);
                                Main.tile[num22, num23].type = tileType;
                                Main.tile[num22, num23].halfBrick(false);
                                Main.tile[num22, num23].slope(0);
                            }
                            else
                            {
                                Main.tile[num22, num23].wall = wallType;
                                Main.tile[num22, num23].active(false);
                            }
                        }
                    }
                }
            }
        }

        int style = 19;
        int style2 = 13;
        for (int num24 = 0; num24 < 4; num24++)
        {
            bool[] array6 = new bool[10];
            bool flag4 = false;
            for (int num25 = 0; num25 < 10; num25++)
            {
                if (array5[num24, num25] && array5[num24 + 1, num25])
                {
                    array6[num25] = true;
                    flag4 = true;
                }
            }

            while (flag4)
            {
                int num26 = genRand.Next(10);
                if (array6[num26])
                {
                    flag4 = false;
                    Main.tile[array2[num24], array4[num26] - 1].active(false);
                    Main.tile[array2[num24], array4[num26] - 2].active(false);
                    Main.tile[array2[num24], array4[num26] - 3].active(false);
                    Main.tile[array2[num24], array4[num26] - 1].wall = wallType;
                    Main.tile[array2[num24], array4[num26] - 2].wall = wallType;
                    Main.tile[array2[num24], array4[num26] - 3].wall = wallType;
                    PlaceTile(array2[num24], array4[num26] - 1, 10, true, false, -1, style);
                }
            }
        }

        for (int num27 = 0; num27 < 5; num27++)
        {
            for (int num28 = 0; num28 < 10; num28++)
            {
                if (array5[num27, num28])
                {
                    if (num28 > 0 && array5[num27, num28 - 1])
                    {
                        int num29 = genRand.Next(array[num27] + 2, array2[num27] - 1);
                        int num30 = genRand.Next(array[num27] + 2, array2[num27] - 1);
                        while (num30 - num29 < 2 || num30 - num29 > 5)
                        {
                            num29 = genRand.Next(array[num27] + 2, array2[num27] - 1);
                            num30 = genRand.Next(array[num27] + 2, array2[num27] - 1);
                        }

                        for (int num31 = num29; num31 <= num30; num31++)
                        {
                            Main.tile[num31, array3[num28]].active(false);
                            PlaceTile(num31, array3[num28], 19, true, true, -1, style2);
                            Main.tile[num31, array3[num28]].wall = wallType;
                        }
                    }

                    if (num27 < 4 && array5[num27 + 1, num28] && genRand.Next(3) == 0)
                    {
                        Main.tile[array2[num27], array4[num28] - 1].active(false);
                        Main.tile[array2[num27], array4[num28] - 2].active(false);
                        Main.tile[array2[num27], array4[num28] - 3].active(false);
                        Main.tile[array2[num27], array4[num28] - 1].wall = wallType;
                        Main.tile[array2[num27], array4[num28] - 2].wall = wallType;
                        Main.tile[array2[num27], array4[num28] - 3].wall = wallType;
                        PlaceTile(array2[num27], array4[num28] - 1, 10, true, false, -1, style);
                    }
                }
            }
        }

        bool flag5 = false;
        for (int num32 = 0; num32 < 5; num32++)
        {
            bool[] array7 = new bool[10];
            for (int num33 = 0; num33 < 10; num33++)
            {
                if (array5[num32, num33])
                {
                    flag5 = true;
                    array7[num33] = true;
                }
            }

            if (flag5)
            {
                bool flag6 = false;
                for (int num34 = 0; num34 < 10; num34++)
                {
                    if (array7[num34])
                    {
                        if (!Main.tile[array[num32] - 1, array4[num34] - 1].active() &&
                            !Main.tile[array[num32] - 1, array4[num34] - 2].active() &&
                            !Main.tile[array[num32] - 1, array4[num34] - 3].active() &&
                            Main.tile[array[num32] - 1, array4[num34] - 1].liquid == 0 &&
                            Main.tile[array[num32] - 1, array4[num34] - 2].liquid == 0 &&
                            Main.tile[array[num32] - 1, array4[num34] - 3].liquid == 0)
                        {
                            flag6 = true;
                        }
                        else
                        {
                            array7[num34] = false;
                        }
                    }
                }

                while (flag6)
                {
                    int num35 = genRand.Next(10);
                    if (array7[num35])
                    {
                        flag6 = false;
                        Main.tile[array[num32], array4[num35] - 1].active(false);
                        Main.tile[array[num32], array4[num35] - 2].active(false);
                        Main.tile[array[num32], array4[num35] - 3].active(false);
                        PlaceTile(array[num32], array4[num35] - 1, 10, true, false, -1, style);
                    }
                }

                break;
            }
        }

        bool flag7 = false;
        for (int num36 = 4; num36 >= 0; num36--)
        {
            bool[] array8 = new bool[10];
            for (int num37 = 0; num37 < 10; num37++)
            {
                if (array5[num36, num37])
                {
                    flag7 = true;
                    array8[num37] = true;
                }
            }

            if (flag7)
            {
                bool flag8 = false;
                for (int num38 = 0; num38 < 10; num38++)
                {
                    if (array8[num38])
                    {
                        if (!Main.tile[array2[num36] + 1, array4[num38] - 1].active() &&
                            !Main.tile[array2[num36] + 1, array4[num38] - 2].active() &&
                            !Main.tile[array2[num36] + 1, array4[num38] - 3].active() &&
                            Main.tile[array2[num36] + 1, array4[num38] - 1].liquid == 0 &&
                            Main.tile[array2[num36] + 1, array4[num38] - 2].liquid == 0 &&
                            Main.tile[array2[num36] + 1, array4[num38] - 3].liquid == 0)
                        {
                            flag8 = true;
                        }
                        else
                        {
                            array8[num38] = false;
                        }
                    }
                }

                while (flag8)
                {
                    int num39 = genRand.Next(10);
                    if (array8[num39])
                    {
                        flag8 = false;
                        Main.tile[array2[num36], array4[num39] - 1].active(false);
                        Main.tile[array2[num36], array4[num39] - 2].active(false);
                        Main.tile[array2[num36], array4[num39] - 3].active(false);
                        PlaceTile(array2[num36], array4[num39] - 1, 10, true, false, -1, style);
                    }
                }

                break;
            }
        }

        bool flag9 = false;
        int num40 = 0;
        bool[] array9;
        while (true)
        {
            if (num40 >= 10)
            {
                return;
            }

            array9 = new bool[10];
            for (int num41 = 0; num41 < 5; num41++)
            {
                if (array5[num41, num40])
                {
                    flag9 = true;
                    array9[num41] = true;
                }
            }

            if (flag9)
            {
                break;
            }

            num40++;
        }

        bool flag10 = true;
        while (flag10)
        {
            int num42 = genRand.Next(5);
            if (array9[num42])
            {
                int num43 = genRand.Next(array[num42] + 2, array2[num42] - 1);
                int num44 = genRand.Next(array[num42] + 2, array2[num42] - 1);
                while (num44 - num43 < 2 || num44 - num43 > 5)
                {
                    num43 = genRand.Next(array[num42] + 2, array2[num42] - 1);
                    num44 = genRand.Next(array[num42] + 2, array2[num42] - 1);
                }

                for (int num45 = num43; num45 <= num44; num45++)
                {
                    if (Main.tile[num45, array3[num40] - 1].active() || Main.tile[num45, array3[num40] - 1].liquid > 0)
                    {
                        flag10 = false;
                    }
                }

                if (flag10)
                {
                    for (int num46 = num43; num46 <= num44; num46++)
                    {
                        Main.tile[num46, array3[num40]].active(false);
                        PlaceTile(num46, array3[num40], 19, true, true, -1, style2);
                    }
                }

                flag10 = false;
            }
        }
    }

    public static void HellHouse(int i, int j, byte type = 76, byte wall = 13)
    {
        int num = genRand.Next(8, 20);
        int num2 = genRand.Next(1, 3);
        int num3 = genRand.Next(4, 13);
        int num4 = j;
        for (int k = 0; k < num2; k++)
        {
            int num5 = genRand.Next(5, 9);
            HellRoom(i, num4, num, num5, type, wall);
            num4 -= num5;
        }

        num4 = j;
        for (int l = 0; l < num3; l++)
        {
            int num6 = genRand.Next(5, 9);
            num4 += num6;
            HellRoom(i, num4, num, num6, type, wall);
        }

        for (int m = i - num / 2; m <= i + num / 2; m++)
        {
            for (num4 = j;
                num4 < Main.maxTilesY &&
                ((Main.tile[m, num4].active() && (Main.tile[m, num4].type == 76 || Main.tile[m, num4].type == 75)) ||
                 Main.tile[i, num4].wall == 13 || Main.tile[i, num4].wall == 14);
                num4++)
            {
            }

            int num7 = 6 + genRand.Next(3);
            while (num4 < Main.maxTilesY && !Main.tile[m, num4].active())
            {
                num7--;
                Main.tile[m, num4].active(true);
                Main.tile[m, num4].type = 57;
                num4++;
                if (num7 <= 0)
                {
                    break;
                }
            }
        }

        int num8 = 0;
        int num9 = 0;
        for (num4 = j;
            num4 < Main.maxTilesY &&
            ((Main.tile[i, num4].active() && (Main.tile[i, num4].type == 76 || Main.tile[i, num4].type == 75)) ||
             Main.tile[i, num4].wall == 13 || Main.tile[i, num4].wall == 14);
            num4++)
        {
        }

        num4--;
        num9 = num4;
        while ((Main.tile[i, num4].active() && (Main.tile[i, num4].type == 76 || Main.tile[i, num4].type == 75)) ||
               Main.tile[i, num4].wall == 13 || Main.tile[i, num4].wall == 14)
        {
            num4--;
            if (Main.tile[i, num4].active() && (Main.tile[i, num4].type == 76 || Main.tile[i, num4].type == 75))
            {
                int num10 = genRand.Next(i - num / 2 + 1, i + num / 2 - 1);
                int num11 = genRand.Next(i - num / 2 + 1, i + num / 2 - 1);
                if (num10 > num11)
                {
                    int num12 = num10;
                    num10 = num11;
                    num11 = num12;
                }

                if (num10 == num11)
                {
                    if (num10 < i)
                    {
                        num11++;
                    }
                    else
                    {
                        num10--;
                    }
                }

                for (int n = num10; n <= num11; n++)
                {
                    if (Main.tile[n, num4 - 1].wall == 13)
                    {
                        Main.tile[n, num4].wall = 13;
                    }

                    if (Main.tile[n, num4 - 1].wall == 14)
                    {
                        Main.tile[n, num4].wall = 14;
                    }

                    Main.tile[n, num4].type = 19;
                    Main.tile[n, num4].active(true);
                }

                num4--;
            }
        }

        num8 = num4;
        float num13 = (float) ((num9 - num8) * num);
        float num14 = num13 * 0.02f;
        for (int num15 = 0; (float) num15 < num14; num15++)
        {
            int num16 = genRand.Next(i - num / 2, i + num / 2 + 1);
            int num17 = genRand.Next(num8, num9);
            int num18 = genRand.Next(3, 8);
            for (int num19 = num16 - num18; num19 <= num16 + num18; num19++)
            {
                for (int num20 = num17 - num18; num20 <= num17 + num18; num20++)
                {
                    float num21 = (float) Math.Abs(num19 - num16);
                    float num22 = (float) Math.Abs(num20 - num17);
                    double num23 = Math.Sqrt((double) (num21 * num21 + num22 * num22));
                    if (num23 < (double) num18 * 0.4)
                    {
                        try
                        {
                            if (Main.tile[num19, num20].type == 76 || Main.tile[num19, num20].type == 19)
                            {
                                Main.tile[num19, num20].active(false);
                            }

                            Main.tile[num19, num20].wall = 0;
                        }
                        catch
                        {
                        }
                    }
                }
            }
        }
    }

    public static void HellRoom(int i, int j, int width, int height, byte type = 76, byte wall = 13)
    {
        if (j <= Main.maxTilesY - 40)
        {
            for (int k = i - width / 2; k <= i + width / 2; k++)
            {
                for (int l = j - height; l <= j; l++)
                {
                    try
                    {
                        Main.tile[k, l].active(true);
                        Main.tile[k, l].type = type;
                        Main.tile[k, l].liquid = 0;
                        Main.tile[k, l].lava(false);
                    }
                    catch
                    {
                    }
                }
            }

            for (int m = i - width / 2 + 1; m <= i + width / 2 - 1; m++)
            {
                for (int n = j - height + 1; n <= j - 1; n++)
                {
                    try
                    {
                        Main.tile[m, n].active(false);
                        Main.tile[m, n].wall = wall;
                        Main.tile[m, n].liquid = 0;
                        Main.tile[m, n].lava(false);
                    }
                    catch
                    {
                    }
                }
            }
        }
    }

    public static void templeCleaner(int x, int y)
    {
        int num = 0;
        if (Main.tile[x + 1, y].active() && Main.tile[x + 1, y].type == 226)
        {
            num++;
        }

        if (Main.tile[x - 1, y].active() && Main.tile[x - 1, y].type == 226)
        {
            num++;
        }

        if (Main.tile[x, y + 1].active() && Main.tile[x, y + 1].type == 226)
        {
            num++;
        }

        if (Main.tile[x, y - 1].active() && Main.tile[x, y - 1].type == 226)
        {
            num++;
        }

        if (Main.tile[x, y].active() && Main.tile[x, y].type == 226)
        {
            if (num <= 1)
            {
                Main.tile[x, y].active(false);
                Main.tile[x, y].wall = 87;
            }
        }
        else if (!Main.tile[x, y].active() && num == 3)
        {
            Main.tile[x, y].active(true);
            Main.tile[x, y].type = 226;
            Main.tile[x, y].liquid = 0;
            Main.tile[x, y].slope(0);
            Main.tile[x, y].halfBrick(false);
        }
    }

    public static Vector2 templePather(Vector2 templePath, int destX, int destY)
    {
        int num = (int) templePath.X;
        int num2 = (int) templePath.Y;
        int num3 = genRand.Next(5, 20);
        int num4 = genRand.Next(2, 5);
        while (num3 > 0 && (num != destX || num2 != destY))
        {
            num3--;
            if (num > destX)
            {
                num--;
            }

            if (num < destX)
            {
                num++;
            }

            if (num2 > destY)
            {
                num2--;
            }

            if (num2 < destY)
            {
                num2++;
            }

            for (int i = num - num4; i < num + num4; i++)
            {
                for (int j = num2 - num4; j < num2 + num4; j++)
                {
                    Main.tile[i, j].active(false);
                    Main.tile[i, j].wall = 87;
                }
            }
        }

        return new Vector2((float) num, (float) num2);
    }

    public static void outerTempled(int x, int y)
    {
        if (!(Main.tile[x, y].active() & (Main.tile[x, y].type == 226)) && Main.tile[x, y].wall != 87)
        {
            int num = 6;
            for (int i = x - num; i <= x + num; i++)
            {
                for (int j = y - num; j <= y + num; j++)
                {
                    if (!Main.tile[i, j].active() && Main.tile[i, j].wall == 87)
                    {
                        Main.tile[x, y].active(true);
                        Main.tile[x, y].type = 226;
                        Main.tile[x, y].liquid = 0;
                        Main.tile[x, y].slope(0);
                        Main.tile[x, y].halfBrick(false);
                        return;
                    }
                }
            }
        }
    }

    public static void makeTemple(int x, int y)
    {
        Rectangle[] array = new Rectangle[40];
        float num = (float) (Main.maxTilesX / 4200);
        int num2 = genRand.Next((int) (num * 10f), (int) (num * 16f));
        int num3 = 1;
        if (genRand.Next(2) == 0)
        {
            num3 = -1;
        }

        int num4 = num3;
        int num5 = x;
        int num6 = y;
        int num7 = x;
        int num8 = y;
        int num9 = genRand.Next(1, 3);
        int num10 = 0;
        for (int i = 0; i < num2; i++)
        {
            num10++;
            int num11 = num3;
            int num12 = num7;
            int num13 = num8;
            bool flag = true;
            int num14 = 0;
            int num15 = 0;
            int num16 = -10;
            Rectangle rectangle = new Rectangle(num12 - num14 / 2, num13 - num15 / 2, num14, num15);
            while (flag)
            {
                num12 = num7;
                num13 = num8;
                num14 = genRand.Next(25, 50);
                num15 = genRand.Next(20, 35);
                if (num15 > num14)
                {
                    num15 = num14;
                }

                if (i == num2 - 1)
                {
                    num14 = genRand.Next(55, 65);
                    num15 = genRand.Next(45, 50);
                    if (num15 > num14)
                    {
                        num15 = num14;
                    }

                    num14 = (int) ((double) (float) num14 * 1.6);
                    num15 = (int) ((double) (float) num15 * 1.35);
                    num13 += genRand.Next(5, 10);
                }

                if (num10 > num9)
                {
                    num13 += genRand.Next(num15 + 1, num15 + 3) + num16;
                    num12 += genRand.Next(-5, 6);
                    num11 = num3 * -1;
                }
                else
                {
                    num12 += (genRand.Next(num14 + 1, num14 + 3) + num16) * num11;
                    num13 += genRand.Next(-5, 6);
                }

                flag = false;
                rectangle = new Rectangle(num12 - num14 / 2, num13 - num15 / 2, num14, num15);
                for (int j = 0; j < i; j++)
                {
                    if (rectangle.Intersects(array[j]))
                    {
                        flag = true;
                    }

                    if (genRand.Next(100) == 0)
                    {
                        num16++;
                    }
                }
            }

            if (num10 > num9)
            {
                num9++;
                num10 = 1;
            }

            array[i] = rectangle;
            num3 = num11;
            num7 = num12;
            num8 = num13;
        }

        for (int k = 0; k < num2; k++)
        {
            for (int l = 0; l < 2; l++)
            {
                for (int m = 0; m < num2; m++)
                {
                    for (int n = 0; n < 2; n++)
                    {
                        int num17 = array[k].X;
                        if (l == 1)
                        {
                            num17 += array[k].Width - 1;
                        }

                        int num18 = array[k].Y;
                        int num19 = num18 + array[k].Height;
                        int num20 = array[m].X;
                        if (n == 1)
                        {
                            num20 += array[m].Width - 1;
                        }

                        int y2 = array[m].Y;
                        int num21 = y2 + array[m].Height;
                        while (num17 != num20 || num18 != y2 || num19 != num21)
                        {
                            if (num17 < num20)
                            {
                                num17++;
                            }

                            if (num17 > num20)
                            {
                                num17--;
                            }

                            if (num18 < y2)
                            {
                                num18++;
                            }

                            if (num18 > y2)
                            {
                                num18--;
                            }

                            if (num19 < num21)
                            {
                                num19++;
                            }

                            if (num19 > num21)
                            {
                                num19--;
                            }

                            int num22 = num17;
                            for (int num23 = num18; num23 < num19; num23++)
                            {
                                Main.tile[num22, num23].active(true);
                                Main.tile[num22, num23].type = 226;
                                Main.tile[num22, num23].liquid = 0;
                                Main.tile[num22, num23].slope(0);
                                Main.tile[num22, num23].halfBrick(false);
                            }
                        }
                    }
                }
            }
        }

        for (int num24 = 0; num24 < num2; num24++)
        {
            if (genRand.Next(1) == 0)
            {
                for (int num25 = array[num24].X; num25 < array[num24].X + array[num24].Width; num25++)
                {
                    for (int num26 = array[num24].Y; num26 < array[num24].Y + array[num24].Height; num26++)
                    {
                        Main.tile[num25, num26].active(true);
                        Main.tile[num25, num26].type = 226;
                        Main.tile[num25, num26].liquid = 0;
                        Main.tile[num25, num26].slope(0);
                        Main.tile[num25, num26].halfBrick(false);
                    }
                }

                int x2 = array[num24].X;
                int num27 = x2 + array[num24].Width;
                int y3 = array[num24].Y;
                int num28 = y3 + array[num24].Height;
                x2 += genRand.Next(3, 8);
                num27 -= genRand.Next(3, 8);
                y3 += genRand.Next(3, 8);
                num28 -= genRand.Next(3, 8);
                int num29 = x2;
                int num30 = num27;
                int num31 = y3;
                int num32 = num28;
                int num33 = (x2 + num27) / 2;
                int num34 = (y3 + num28) / 2;
                for (int num35 = x2; num35 < num27; num35++)
                {
                    for (int num36 = y3; num36 < num28; num36++)
                    {
                        if (genRand.Next(20) == 0)
                        {
                            num31 += genRand.Next(-1, 2);
                        }

                        if (genRand.Next(20) == 0)
                        {
                            num32 += genRand.Next(-1, 2);
                        }

                        if (genRand.Next(20) == 0)
                        {
                            num29 += genRand.Next(-1, 2);
                        }

                        if (genRand.Next(20) == 0)
                        {
                            num30 += genRand.Next(-1, 2);
                        }

                        if (num29 < x2)
                        {
                            num29 = x2;
                        }

                        if (num30 > num27)
                        {
                            num30 = num27;
                        }

                        if (num31 < y3)
                        {
                            num31 = y3;
                        }

                        if (num32 > num28)
                        {
                            num32 = num28;
                        }

                        if (num29 > num33)
                        {
                            num29 = num33;
                        }

                        if (num30 < num33)
                        {
                            num30 = num33;
                        }

                        if (num31 > num34)
                        {
                            num31 = num34;
                        }

                        if (num32 < num34)
                        {
                            num32 = num34;
                        }

                        if (num35 >= num29 && ((num35 < num30) & (num36 >= num31)) && num36 <= num32)
                        {
                            Main.tile[num35, num36].active(false);
                            Main.tile[num35, num36].wall = 87;
                        }
                    }
                }

                for (int num37 = num28; num37 > y3; num37--)
                {
                    for (int num38 = num27; num38 > x2; num38--)
                    {
                        if (genRand.Next(20) == 0)
                        {
                            num31 += genRand.Next(-1, 2);
                        }

                        if (genRand.Next(20) == 0)
                        {
                            num32 += genRand.Next(-1, 2);
                        }

                        if (genRand.Next(20) == 0)
                        {
                            num29 += genRand.Next(-1, 2);
                        }

                        if (genRand.Next(20) == 0)
                        {
                            num30 += genRand.Next(-1, 2);
                        }

                        if (num29 < x2)
                        {
                            num29 = x2;
                        }

                        if (num30 > num27)
                        {
                            num30 = num27;
                        }

                        if (num31 < y3)
                        {
                            num31 = y3;
                        }

                        if (num32 > num28)
                        {
                            num32 = num28;
                        }

                        if (num29 > num33)
                        {
                            num29 = num33;
                        }

                        if (num30 < num33)
                        {
                            num30 = num33;
                        }

                        if (num31 > num34)
                        {
                            num31 = num34;
                        }

                        if (num32 < num34)
                        {
                            num32 = num34;
                        }

                        if (num38 >= num29 && ((num38 < num30) & (num37 >= num31)) && num37 <= num32)
                        {
                            Main.tile[num38, num37].active(false);
                            Main.tile[num38, num37].wall = 87;
                        }
                    }
                }
            }
        }

        Vector2 templePath = new Vector2((float) num5, (float) num6);
        for (int num39 = 0; num39 < num2; num39++)
        {
            Rectangle rectangle2 = array[num39];
            rectangle2.X += 8;
            rectangle2.Y += 8;
            rectangle2.Width -= 16;
            rectangle2.Height -= 16;
            bool flag2 = true;
            while (flag2)
            {
                int num40 = genRand.Next(rectangle2.X, rectangle2.X + rectangle2.Width);
                int num41 = genRand.Next(rectangle2.Y, rectangle2.Y + rectangle2.Height);
                templePath = templePather(templePath, num40, num41);
                if (templePath.X == (float) num40 && templePath.Y == (float) num41)
                {
                    flag2 = false;
                }
            }

            if (num39 < num2 - 1)
            {
                if (genRand.Next(3) != 0)
                {
                    int num42 = num39 + 1;
                    if (array[num42].Y >= array[num39].Y + array[num39].Height)
                    {
                        rectangle2.X = array[num42].X;
                        if (array[num42].X < array[num39].X)
                        {
                            rectangle2.X += (int) ((double) (float) array[num42].Width * 0.2);
                        }
                        else
                        {
                            rectangle2.X += (int) ((double) (float) array[num42].Width * 0.8);
                        }

                        rectangle2.Y = array[num42].Y;
                    }
                    else
                    {
                        rectangle2.X = (array[num39].X + array[num39].Width / 2 +
                                        (array[num42].X + array[num42].Width / 2)) / 2;
                        rectangle2.Y = (int) ((double) array[num42].Y + (double) array[num42].Height * 0.8);
                    }

                    int x3 = rectangle2.X;
                    int y4 = rectangle2.Y;
                    flag2 = true;
                    while (flag2)
                    {
                        int num43 = genRand.Next(x3 - 6, x3 + 7);
                        int num44 = genRand.Next(y4 - 6, y4 + 7);
                        templePath = templePather(templePath, num43, num44);
                        if (templePath.X == (float) num43 && templePath.Y == (float) num44)
                        {
                            flag2 = false;
                        }
                    }
                }
                else
                {
                    int num45 = num39 + 1;
                    int num46 = (array[num39].X + array[num39].Width / 2 + (array[num45].X + array[num45].Width / 2)) /
                                2;
                    int num47 =
                        (array[num39].Y + array[num39].Height / 2 + (array[num45].Y + array[num45].Height / 2)) / 2;
                    flag2 = true;
                    while (flag2)
                    {
                        int num48 = genRand.Next(num46 - 6, num46 + 7);
                        int num49 = genRand.Next(num47 - 6, num47 + 7);
                        templePath = templePather(templePath, num48, num49);
                        if (templePath.X == (float) num48 && templePath.Y == (float) num49)
                        {
                            flag2 = false;
                        }
                    }
                }
            }
        }

        int num50 = Main.maxTilesX - 20;
        int num51 = 20;
        int num52 = Main.maxTilesY - 20;
        int num53 = 20;
        for (int num54 = 0; num54 < num2; num54++)
        {
            if (array[num54].X < num50)
            {
                num50 = array[num54].X;
            }

            if (array[num54].X + array[num54].Width > num51)
            {
                num51 = array[num54].X + array[num54].Width;
            }

            if (array[num54].Y < num52)
            {
                num52 = array[num54].Y;
            }

            if (array[num54].Y + array[num54].Height > num53)
            {
                num53 = array[num54].Y + array[num54].Height;
            }
        }

        num50 -= 10;
        num51 += 10;
        num52 -= 10;
        num53 += 10;
        for (int num55 = num50; num55 < num51; num55++)
        {
            for (int num56 = num52; num56 < num53; num56++)
            {
                outerTempled(num55, num56);
            }
        }

        for (int num57 = num51; num57 >= num50; num57--)
        {
            for (int num58 = num52; num58 < num53 / 2; num58++)
            {
                outerTempled(num57, num58);
            }
        }

        for (int num59 = num52; num59 < num53; num59++)
        {
            for (int num60 = num50; num60 < num51; num60++)
            {
                outerTempled(num60, num59);
            }
        }

        for (int num61 = num53; num61 >= num52; num61--)
        {
            for (int num62 = num50; num62 < num51; num62++)
            {
                outerTempled(num62, num61);
            }
        }

        num3 = -num4;
        Vector2 vector = new Vector2((float) num5, (float) num6);
        int num63 = genRand.Next(2, 5);
        bool flag3 = true;
        int num64 = 0;
        int num65 = genRand.Next(9, 14);
        while (flag3)
        {
            num64++;
            if (num64 >= num65)
            {
                num64 = 0;
                vector.Y -= 1f;
            }

            vector.X += (float) num3;
            int num66 = (int) vector.X;
            flag3 = false;
            for (int num67 = (int) vector.Y - num63; (float) num67 < vector.Y + (float) num63; num67++)
            {
                if (Main.tile[num66, num67].wall == 87 ||
                    (Main.tile[num66, num67].active() && Main.tile[num66, num67].type == 226))
                {
                    flag3 = true;
                }

                if (Main.tile[num66, num67].active() && Main.tile[num66, num67].type == 226)
                {
                    Main.tile[num66, num67].active(false);
                    Main.tile[num66, num67].wall = 87;
                }
            }
        }

        int num68 = num5;
        int num69;
        for (num69 = num6; !Main.tile[num68, num69].active(); num69++)
        {
        }

        num69 -= 4;
        int num70 = num69;
        while ((Main.tile[num68, num70].active() && Main.tile[num68, num70].type == 226) ||
               Main.tile[num68, num70].wall == 87)
        {
            num70--;
        }

        num70 += 2;
        for (int num71 = num68 - 1; num71 <= num68 + 1; num71++)
        {
            for (int num72 = num70; num72 <= num69; num72++)
            {
                Main.tile[num71, num72].active(true);
                Main.tile[num71, num72].type = 226;
                Main.tile[num71, num72].liquid = 0;
                Main.tile[num71, num72].slope(0);
                Main.tile[num71, num72].halfBrick(false);
            }
        }

        for (int num73 = num68 - 4; num73 <= num68 + 4; num73++)
        {
            for (int num74 = num69 - 1; num74 < num69 + 3; num74++)
            {
                Main.tile[num73, num74].active(false);
                Main.tile[num73, num74].wall = 87;
            }
        }

        for (int num75 = num68 - 1; num75 <= num68 + 1; num75++)
        {
            for (int num76 = num69 - 5; num76 <= num69 + 8; num76++)
            {
                Main.tile[num75, num76].active(true);
                Main.tile[num75, num76].type = 226;
                Main.tile[num75, num76].liquid = 0;
                Main.tile[num75, num76].slope(0);
                Main.tile[num75, num76].halfBrick(false);
            }
        }

        for (int num77 = num68 - 1; num77 <= num68 + 1; num77++)
        {
            for (int num78 = num69; num78 < num69 + 3; num78++)
            {
                Main.tile[num77, num78].active(false);
                Main.tile[num77, num78].wall = 87;
            }
        }

        PlaceTile(num68, num69, 10, true, false, -1, 11);
        for (int num79 = num50; num79 < num51; num79++)
        {
            for (int num80 = num52; num80 < num53; num80++)
            {
                templeCleaner(num79, num80);
            }
        }

        for (int num81 = num53; num81 >= num52; num81--)
        {
            for (int num82 = num51; num82 >= num50; num82--)
            {
                templeCleaner(num82, num81);
            }
        }

        for (int num83 = num50; num83 < num51; num83++)
        {
            for (int num84 = num52; num84 < num53; num84++)
            {
                bool flag4 = true;
                for (int num85 = num83 - 1; num85 <= num83 + 1; num85++)
                {
                    for (int num86 = num84 - 1; num86 <= num84 + 1; num86++)
                    {
                        if ((!Main.tile[num85, num86].active() || Main.tile[num85, num86].type != 226) &&
                            Main.tile[num85, num86].wall != 87)
                        {
                            flag4 = false;
                            break;
                        }
                    }
                }

                if (flag4)
                {
                    Main.tile[num83, num84].wall = 87;
                }
            }
        }

        int num87 = 0;
        while (true)
        {
            num87++;
            Rectangle rectangle3 = array[num2 - 1];
            int num88 = rectangle3.X + genRand.Next(rectangle3.Width);
            int num89 = rectangle3.Y + genRand.Next(rectangle3.Height);
            PlaceTile(num88, num89, 237, false, false, -1, 0);
            if (Main.tile[num88, num89].type == 237)
            {
                lAltarX = num88 - Main.tile[num88, num89].frameX / 18;
                lAltarY = num89 - Main.tile[num88, num89].frameY / 18;
                break;
            }

            if (num87 >= 1000)
            {
                num88 = rectangle3.X + rectangle3.Width / 2;
                num89 = rectangle3.Y + rectangle3.Height / 2;
                num88 += genRand.Next(-10, 11);
                for (num89 += genRand.Next(-10, 11); !Main.tile[num88, num89].active(); num89++)
                {
                }

                Main.tile[num88 - 1, num89].active(true);
                Main.tile[num88 - 1, num89].slope(0);
                Main.tile[num88 - 1, num89].halfBrick(false);
                Main.tile[num88 - 1, num89].type = 226;
                Main.tile[num88, num89].active(true);
                Main.tile[num88, num89].slope(0);
                Main.tile[num88, num89].halfBrick(false);
                Main.tile[num88, num89].type = 226;
                Main.tile[num88 + 1, num89].active(true);
                Main.tile[num88 + 1, num89].slope(0);
                Main.tile[num88 + 1, num89].halfBrick(false);
                Main.tile[num88 + 1, num89].type = 226;
                num89 -= 2;
                num88--;
                for (int num90 = -1; num90 <= 3; num90++)
                {
                    for (int num91 = -1; num91 <= 1; num91++)
                    {
                        x = num88 + num90;
                        y = num89 + num91;
                        Main.tile[x, y].active(false);
                    }
                }

                lAltarX = num88;
                lAltarY = num89;
                for (int num92 = 0; num92 <= 2; num92++)
                {
                    for (int num93 = 0; num93 <= 1; num93++)
                    {
                        x = num88 + num92;
                        y = num89 + num93;
                        Main.tile[x, y].active(true);
                        Main.tile[x, y].type = 237;
                        Main.tile[x, y].frameX = (short) (num92 * 18);
                        Main.tile[x, y].frameY = (short) (num93 * 18);
                    }
                }

                break;
            }
        }

        float num94 = (float) num2 * 1.1f;
        num94 *= 1f + (float) genRand.Next(-25, 26) * 0.01f;
        int num95 = 0;
        while (num94 > 0f)
        {
            num95++;
            int num96 = genRand.Next(num2);
            int num97 = genRand.Next(array[num96].X, array[num96].X + array[num96].Width);
            int num98 = genRand.Next(array[num96].Y, array[num96].Y + array[num96].Height);
            if (Main.tile[num97, num98].wall == 87 && !Main.tile[num97, num98].active())
            {
                bool flag5 = false;
                if (genRand.Next(2) == 0)
                {
                    int num99 = 1;
                    if (genRand.Next(2) == 0)
                    {
                        num99 = -1;
                    }

                    for (; !Main.tile[num97, num98].active(); num98 += num99)
                    {
                    }

                    num98 -= num99;
                    int num100 = genRand.Next(2);
                    int num101 = genRand.Next(3, 10);
                    bool flag6 = true;
                    for (int num102 = num97 - num101; num102 < num97 + num101; num102++)
                    {
                        for (int num103 = num98 - num101; num103 < num98 + num101; num103++)
                        {
                            if (Main.tile[num102, num103].active() && Main.tile[num102, num103].type == 10)
                            {
                                flag6 = false;
                                break;
                            }
                        }
                    }

                    if (flag6)
                    {
                        for (int num104 = num97 - num101; num104 < num97 + num101; num104++)
                        {
                            for (int num105 = num98 - num101; num105 < num98 + num101; num105++)
                            {
                                if (SolidTile(num104, num105) && Main.tile[num104, num105].type != 232 &&
                                    !SolidTile(num104, num105 - num99))
                                {
                                    Main.tile[num104, num105].type = 232;
                                    flag5 = true;
                                    if (num100 == 0)
                                    {
                                        Main.tile[num104, num105 - 1].type = 232;
                                        Main.tile[num104, num105 - 1].active(true);
                                    }
                                    else
                                    {
                                        Main.tile[num104, num105 + 1].type = 232;
                                        Main.tile[num104, num105 + 1].active(true);
                                    }

                                    num100++;
                                    if (num100 > 1)
                                    {
                                        num100 = 0;
                                    }
                                }
                            }
                        }
                    }

                    if (flag5)
                    {
                        num95 = 0;
                        num94 -= 1f;
                    }
                }
                else
                {
                    int num106 = 1;
                    if (genRand.Next(2) == 0)
                    {
                        num106 = -1;
                    }

                    for (; !Main.tile[num97, num98].active(); num97 += num106)
                    {
                    }

                    num97 -= num106;
                    int num107 = genRand.Next(2);
                    int num108 = genRand.Next(3, 10);
                    bool flag7 = true;
                    for (int num109 = num97 - num108; num109 < num97 + num108; num109++)
                    {
                        for (int num110 = num98 - num108; num110 < num98 + num108; num110++)
                        {
                            if (Main.tile[num109, num110].active() && Main.tile[num109, num110].type == 10)
                            {
                                flag7 = false;
                                break;
                            }
                        }
                    }

                    if (flag7)
                    {
                        for (int num111 = num97 - num108; num111 < num97 + num108; num111++)
                        {
                            for (int num112 = num98 - num108; num112 < num98 + num108; num112++)
                            {
                                if (SolidTile(num111, num112) && Main.tile[num111, num112].type != 232 &&
                                    !SolidTile(num111 - num106, num112))
                                {
                                    Main.tile[num111, num112].type = 232;
                                    flag5 = true;
                                    if (num107 == 0)
                                    {
                                        Main.tile[num111 - 1, num112].type = 232;
                                        Main.tile[num111 - 1, num112].active(true);
                                    }
                                    else
                                    {
                                        Main.tile[num111 + 1, num112].type = 232;
                                        Main.tile[num111 + 1, num112].active(true);
                                    }

                                    num107++;
                                    if (num107 > 1)
                                    {
                                        num107 = 0;
                                    }
                                }
                            }
                        }
                    }

                    if (flag5)
                    {
                        num95 = 0;
                        num94 -= 1f;
                    }
                }
            }

            if (num95 > 1000)
            {
                num95 = 0;
                num94 -= 1f;
            }
        }

        tLeft = num50;
        tRight = num51;
        tTop = num52;
        tBottom = num53;
        tRooms = num2;
    }

    public static void templePart2()
    {
        int minValue = tLeft;
        int maxValue = tRight;
        int minValue2 = tTop;
        int num = tBottom;
        int num2 = tRooms;
        float num3 = (float) num2 * 1.9f;
        num3 *= 1f + (float) genRand.Next(-15, 16) * 0.01f;
        int num4 = 0;
        while (num3 > 0f)
        {
            int num5 = genRand.Next(minValue, maxValue);
            int num6 = genRand.Next(minValue2, num);
            if (Main.tile[num5, num6].wall == 87 && !Main.tile[num5, num6].active())
            {
                if (mayanTrap(num5, num6))
                {
                    num3 -= 1f;
                    num4 = 0;
                }
                else
                {
                    num4++;
                }
            }
            else
            {
                num4++;
            }

            if (num4 > 100)
            {
                num4 = 0;
                num3 -= 1f;
            }
        }

        Main.tileSolid[232] = false;
        float num7 = (float) num2 * 0.35f;
        num7 *= 1f + (float) genRand.Next(-15, 16) * 0.01f;
        int contain = 1293;
        num4 = 0;
        while (num7 > 0f)
        {
            int num8 = genRand.Next(minValue, maxValue);
            int num9 = genRand.Next(minValue2, num);
            if (Main.tile[num8, num9].wall == 87 && !Main.tile[num8, num9].active() &&
                AddBuriedChest(num8, num9, contain, true, 16))
            {
                num7 -= 1f;
                num4 = 0;
            }

            num4++;
            if (num4 > 10000)
            {
                break;
            }
        }

        float num10 = (float) num2 * 1.25f;
        num10 *= 1f + (float) genRand.Next(-25, 36) * 0.01f;
        num4 = 0;
        while (num10 > 0f)
        {
            num4++;
            int num11 = genRand.Next(minValue, maxValue);
            int num12 = genRand.Next(minValue2, num);
            if (Main.tile[num11, num12].wall == 87 && !Main.tile[num11, num12].active())
            {
                int num13 = num11;
                int num14 = num12;
                while (!Main.tile[num13, num14].active())
                {
                    num14++;
                    if (num14 > num)
                    {
                        break;
                    }
                }

                num14--;
                if (num14 <= num)
                {
                    PlaceTile(num13, num14, 105, true, false, -1, genRand.Next(43, 46));
                    if (Main.tile[num13, num14].type == 105)
                    {
                        num10 -= 1f;
                    }
                }
            }
        }

        float num15 = (float) num2 * 1.35f;
        num15 *= 1f + (float) genRand.Next(-15, 26) * 0.01f;
        num4 = 0;
        while (num15 > 0f)
        {
            num4++;
            int num16 = genRand.Next(minValue, maxValue);
            int num17 = genRand.Next(minValue2, num);
            if (Main.tile[num16, num17].wall == 87 && !Main.tile[num16, num17].active())
            {
                int num18 = num16;
                int num19 = num17;
                while (!Main.tile[num18, num19].active())
                {
                    num19++;
                    if (num19 > num)
                    {
                        break;
                    }
                }

                num19--;
                if (num19 <= num)
                {
                    switch (genRand.Next(3))
                    {
                        case 0:
                            PlaceTile(num18, num19, 18, true, false, -1, 10);
                            if (Main.tile[num18, num19].type == 18)
                            {
                                num15 -= 1f;
                            }

                            break;
                        case 1:
                            PlaceTile(num18, num19, 14, true, false, -1, 9);
                            if (Main.tile[num18, num19].type == 14)
                            {
                                num15 -= 1f;
                            }

                            break;
                        case 2:
                            PlaceTile(num18, num19, 15, true, false, -1, 12);
                            if (Main.tile[num18, num19].type == 15)
                            {
                                num15 -= 1f;
                            }

                            break;
                    }
                }
            }

            if (num4 > 10000)
            {
                break;
            }
        }

        Main.tileSolid[232] = true;
    }

    public static bool nearPicture(int x, int y)
    {
        for (int i = x - 4; i <= x + 3; i++)
        {
            for (int j = y - 3; j <= y + 2; j++)
            {
                if (Main.tile[i, j].active())
                {
                    return true;
                }
            }
        }

        return false;
    }

    public static bool nearPicture2(int x, int y)
    {
        if (Main.tile[x, y].wall != 7 && Main.tile[x, y].wall != 8 && Main.tile[x, y].wall != 9)
        {
            for (int i = x - 8; i <= x + 8; i++)
            {
                for (int j = y - 5; j <= y + 5; j++)
                {
                    if (Main.tile[i, j].active() && (Main.tile[i, j].type == 240 || Main.tile[i, j].type == 241 ||
                                                     Main.tile[i, j].type == 242))
                    {
                        return true;
                    }
                }
            }
        }
        else
        {
            for (int k = x - 15; k <= x + 15; k++)
            {
                for (int l = y - 10; l <= y + 10; l++)
                {
                    if (Main.tile[k, l].active() && (Main.tile[k, l].type == 240 || Main.tile[k, l].type == 241 ||
                                                     Main.tile[k, l].type == 242))
                    {
                        return true;
                    }
                }
            }
        }

        return false;
    }

    public static void MakeDungeon(int x, int y)
    {
        int num = genRand.Next(3);
        genRand.Next(3);
        ushort num2;
        int num3;
        switch (num)
        {
            case 0:
                num2 = 41;
                num3 = 7;
                break;
            case 1:
                num2 = 43;
                num3 = 8;
                break;
            default:
                num2 = 44;
                num3 = 9;
                break;
        }

        numDDoors = 0;
        numDPlats = 0;
        numDRooms = 0;
        dungeonX = x;
        dungeonY = y;
        dMinX = x;
        dMaxX = x;
        dMinY = y;
        dMaxY = y;
        dxStrength1 = (double) genRand.Next(25, 30);
        dyStrength1 = (double) genRand.Next(20, 25);
        dxStrength2 = (double) genRand.Next(35, 50);
        dyStrength2 = (double) genRand.Next(10, 15);
        float num4 = (float) (Main.maxTilesX / 60);
        num4 += (float) genRand.Next(0, (int) (num4 / 3f));
        float num5 = num4;
        int num6 = 5;
        DungeonRoom(dungeonX, dungeonY, num2, num3);
        while (num4 > 0f)
        {
            if (dungeonX < dMinX)
            {
                dMinX = dungeonX;
            }

            if (dungeonX > dMaxX)
            {
                dMaxX = dungeonX;
            }

            if (dungeonY > dMaxY)
            {
                dMaxY = dungeonY;
            }

            num4 -= 1f;
            Main.statusText = Lang.gen[58].Value + " " + (int) ((num5 - num4) / num5 * 60f) + "%";
            if (num6 > 0)
            {
                num6--;
            }

            if ((num6 == 0) & (genRand.Next(3) == 0))
            {
                num6 = 5;
                if (genRand.Next(2) == 0)
                {
                    int num7 = dungeonX;
                    int num8 = dungeonY;
                    DungeonHalls(dungeonX, dungeonY, num2, num3, false);
                    if (genRand.Next(2) == 0)
                    {
                        DungeonHalls(dungeonX, dungeonY, num2, num3, false);
                    }

                    DungeonRoom(dungeonX, dungeonY, num2, num3);
                    dungeonX = num7;
                    dungeonY = num8;
                }
                else
                {
                    DungeonRoom(dungeonX, dungeonY, num2, num3);
                }
            }
            else
            {
                DungeonHalls(dungeonX, dungeonY, num2, num3, false);
            }
        }

        DungeonRoom(dungeonX, dungeonY, num2, num3);
        int num9 = dRoomX[0];
        int num10 = dRoomY[0];
        for (int i = 0; i < numDRooms; i++)
        {
            if (dRoomY[i] < num10)
            {
                num9 = dRoomX[i];
                num10 = dRoomY[i];
            }
        }

        dungeonX = num9;
        dungeonY = num10;
        dEnteranceX = num9;
        dSurface = false;
        num6 = 5;
        while (!dSurface)
        {
            if (num6 > 0)
            {
                num6--;
            }

            if (num6 == 0 && genRand.Next(5) == 0 && (double) dungeonY > Main.worldSurface + 100.0)
            {
                num6 = 10;
                int num11 = dungeonX;
                int num12 = dungeonY;
                DungeonHalls(dungeonX, dungeonY, num2, num3, true);
                DungeonRoom(dungeonX, dungeonY, num2, num3);
                dungeonX = num11;
                dungeonY = num12;
            }

            DungeonStairs(dungeonX, dungeonY, num2, num3);
        }

        DungeonEnt(dungeonX, dungeonY, num2, num3);
        Main.statusText = Lang.gen[58].Value + " 65%";
        for (int j = 0; j < numDRooms; j++)
        {
            for (int k = dRoomL[j]; k <= dRoomR[j]; k++)
            {
                if (!Main.tile[k, dRoomT[j] - 1].active())
                {
                    DPlatX[numDPlats] = k;
                    DPlatY[numDPlats] = dRoomT[j] - 1;
                    numDPlats++;
                    break;
                }
            }

            for (int l = dRoomL[j]; l <= dRoomR[j]; l++)
            {
                if (!Main.tile[l, dRoomB[j] + 1].active())
                {
                    DPlatX[numDPlats] = l;
                    DPlatY[numDPlats] = dRoomB[j] + 1;
                    numDPlats++;
                    break;
                }
            }

            for (int m = dRoomT[j]; m <= dRoomB[j]; m++)
            {
                if (!Main.tile[dRoomL[j] - 1, m].active())
                {
                    DDoorX[numDDoors] = dRoomL[j] - 1;
                    DDoorY[numDDoors] = m;
                    DDoorPos[numDDoors] = -1;
                    numDDoors++;
                    break;
                }
            }

            for (int n = dRoomT[j]; n <= dRoomB[j]; n++)
            {
                if (!Main.tile[dRoomR[j] + 1, n].active())
                {
                    DDoorX[numDDoors] = dRoomR[j] + 1;
                    DDoorY[numDDoors] = n;
                    DDoorPos[numDDoors] = 1;
                    numDDoors++;
                    break;
                }
            }
        }

        Main.statusText = Lang.gen[58].Value + " 70%";
        int failCount = 0;
        int num13 = 1000;
        int numAdd = 0;
        while (numAdd < Main.maxTilesX / 100)
        {
            failCount++;
            int num14 = genRand.Next(dMinX, dMaxX);
            int num15 = genRand.Next((int) Main.worldSurface + 25, dMaxY);
            int num16 = num14;
            if (Main.tile[num14, num15].wall == num3 && !Main.tile[num14, num15].active())
            {
                int num17 = 1;
                if (genRand.Next(2) == 0)
                {
                    num17 = -1;
                }

                for (; !Main.tile[num14, num15].active(); num15 += num17)
                {
                }

                if (Main.tile[num14 - 1, num15].active() && Main.tile[num14 + 1, num15].active() &&
                    !Main.tile[num14 - 1, num15 - num17].active() && !Main.tile[num14 + 1, num15 - num17].active())
                {
                    numAdd++;
                    int num18 = genRand.Next(5, 13);
                    while (Main.tile[num14 - 1, num15].active() && Main.tile[num14, num15 + num17].active() &&
                           Main.tile[num14, num15].active() && !Main.tile[num14, num15 - num17].active() && num18 > 0)
                    {
                        Main.tile[num14, num15].type = 48;
                        if (!Main.tile[num14 - 1, num15 - num17].active() &&
                            !Main.tile[num14 + 1, num15 - num17].active())
                        {
                            Main.tile[num14, num15 - num17].type = 48;
                            Main.tile[num14, num15 - num17].active(true);
                        }

                        num14--;
                        num18--;
                    }

                    num18 = genRand.Next(5, 13);
                    num14 = num16 + 1;
                    while (Main.tile[num14 + 1, num15].active() && Main.tile[num14, num15 + num17].active() &&
                           Main.tile[num14, num15].active() && !Main.tile[num14, num15 - num17].active() && num18 > 0)
                    {
                        Main.tile[num14, num15].type = 48;
                        if (!Main.tile[num14 - 1, num15 - num17].active() &&
                            !Main.tile[num14 + 1, num15 - num17].active())
                        {
                            Main.tile[num14, num15 - num17].type = 48;
                            Main.tile[num14, num15 - num17].active(true);
                        }

                        num14++;
                        num18--;
                    }
                }
            }

            if (failCount > num13)
            {
                failCount = 0;
                numAdd++;
            }
        }

        failCount = 0;
        num13 = 1000;
        numAdd = 0;
        Main.statusText = Lang.gen[58].Value + " 75%";
        while (numAdd < Main.maxTilesX / 100)
        {
            failCount++;
            int num19 = genRand.Next(dMinX, dMaxX);
            int num20 = genRand.Next((int) Main.worldSurface + 25, dMaxY);
            int num21 = num20;
            if (Main.tile[num19, num20].wall == num3 && !Main.tile[num19, num20].active())
            {
                int num22 = 1;
                if (genRand.Next(2) == 0)
                {
                    num22 = -1;
                }

                for (; num19 > 5 && num19 < Main.maxTilesX - 5 && !Main.tile[num19, num20].active(); num19 += num22)
                {
                }

                if (Main.tile[num19, num20 - 1].active() && Main.tile[num19, num20 + 1].active() &&
                    !Main.tile[num19 - num22, num20 - 1].active() && !Main.tile[num19 - num22, num20 + 1].active())
                {
                    numAdd++;
                    int num23 = genRand.Next(5, 13);
                    while (Main.tile[num19, num20 - 1].active() && Main.tile[num19 + num22, num20].active() &&
                           Main.tile[num19, num20].active() && !Main.tile[num19 - num22, num20].active() && num23 > 0)
                    {
                        Main.tile[num19, num20].type = 48;
                        if (!Main.tile[num19 - num22, num20 - 1].active() &&
                            !Main.tile[num19 - num22, num20 + 1].active())
                        {
                            Main.tile[num19 - num22, num20].type = 48;
                            Main.tile[num19 - num22, num20].active(true);
                        }

                        num20--;
                        num23--;
                    }

                    num23 = genRand.Next(5, 13);
                    num20 = num21 + 1;
                    while (Main.tile[num19, num20 + 1].active() && Main.tile[num19 + num22, num20].active() &&
                           Main.tile[num19, num20].active() && !Main.tile[num19 - num22, num20].active() && num23 > 0)
                    {
                        Main.tile[num19, num20].type = 48;
                        if (!Main.tile[num19 - num22, num20 - 1].active() &&
                            !Main.tile[num19 - num22, num20 + 1].active())
                        {
                            Main.tile[num19 - num22, num20].type = 48;
                            Main.tile[num19 - num22, num20].active(true);
                        }

                        num20++;
                        num23--;
                    }
                }
            }

            if (failCount > num13)
            {
                failCount = 0;
                numAdd++;
            }
        }

        Main.statusText = Lang.gen[58].Value + " 80%";
        for (int num24 = 0; num24 < numDDoors; num24++)
        {
            int num25 = DDoorX[num24] - 10;
            int num26 = DDoorX[num24] + 10;
            int num27 = 100;
            int num28 = 0;
            int num29 = 0;
            int num30 = 0;
            for (int num31 = num25; num31 < num26; num31++)
            {
                bool flag = true;
                int num32 = DDoorY[num24];
                while (num32 > 10 && !Main.tile[num31, num32].active())
                {
                    num32--;
                }

                if (!Main.tileDungeon[Main.tile[num31, num32].type])
                {
                    flag = false;
                }

                num29 = num32;
                for (num32 = DDoorY[num24]; !Main.tile[num31, num32].active(); num32++)
                {
                }

                if (!Main.tileDungeon[Main.tile[num31, num32].type])
                {
                    flag = false;
                }

                num30 = num32;
                if (num30 - num29 >= 3)
                {
                    int num33 = num31 - 20;
                    int num34 = num31 + 20;
                    int num35 = num30 - 10;
                    int num36 = num30 + 10;
                    for (int num37 = num33; num37 < num34; num37++)
                    {
                        for (int num38 = num35; num38 < num36; num38++)
                        {
                            if (Main.tile[num37, num38].active() && Main.tile[num37, num38].type == 10)
                            {
                                flag = false;
                                break;
                            }
                        }
                    }

                    if (flag)
                    {
                        for (int num39 = num30 - 3; num39 < num30; num39++)
                        {
                            for (int num40 = num31 - 3; num40 <= num31 + 3; num40++)
                            {
                                if (Main.tile[num40, num39].active())
                                {
                                    flag = false;
                                    break;
                                }
                            }
                        }
                    }

                    if (flag && num30 - num29 < 20)
                    {
                        bool flag2 = false;
                        if (DDoorPos[num24] == 0 && num30 - num29 < num27)
                        {
                            flag2 = true;
                        }

                        if (DDoorPos[num24] == -1 && num31 > num28)
                        {
                            flag2 = true;
                        }

                        if (DDoorPos[num24] == 1 && (num31 < num28 || num28 == 0))
                        {
                            flag2 = true;
                        }

                        if (flag2)
                        {
                            num28 = num31;
                            num27 = num30 - num29;
                        }
                    }
                }
            }

            if (num27 < 20)
            {
                int num41 = num28;
                int num42 = DDoorY[num24];
                int num43 = num42;
                for (; !Main.tile[num41, num42].active(); num42++)
                {
                    Main.tile[num41, num42].active(false);
                }

                while (!Main.tile[num41, num43].active())
                {
                    num43--;
                }

                num42--;
                num43++;
                for (int num44 = num43; num44 < num42 - 2; num44++)
                {
                    Main.tile[num41, num44].active(true);
                    Main.tile[num41, num44].type = num2;
                }

                int style = 13;
                if (genRand.Next(3) == 0)
                {
                    switch (num3)
                    {
                        case 7:
                            style = 16;
                            break;
                        case 8:
                            style = 17;
                            break;
                        case 9:
                            style = 18;
                            break;
                    }
                }

                PlaceTile(num41, num42, 10, true, false, -1, style);
                num41--;
                int num45 = num42 - 3;
                while (!Main.tile[num41, num45].active())
                {
                    num45--;
                }

                if (num42 - num45 < num42 - num43 + 5 && Main.tileDungeon[Main.tile[num41, num45].type])
                {
                    for (int num46 = num42 - 4 - genRand.Next(3); num46 > num45; num46--)
                    {
                        Main.tile[num41, num46].active(true);
                        Main.tile[num41, num46].type = num2;
                    }
                }

                num41 += 2;
                num45 = num42 - 3;
                while (!Main.tile[num41, num45].active())
                {
                    num45--;
                }

                if (num42 - num45 < num42 - num43 + 5 && Main.tileDungeon[Main.tile[num41, num45].type])
                {
                    for (int num47 = num42 - 4 - genRand.Next(3); num47 > num45; num47--)
                    {
                        Main.tile[num41, num47].active(true);
                        Main.tile[num41, num47].type = num2;
                    }
                }

                num42++;
                num41--;
                Main.tile[num41 - 1, num42].active(true);
                Main.tile[num41 - 1, num42].type = num2;
                Main.tile[num41 + 1, num42].active(true);
                Main.tile[num41 + 1, num42].type = num2;
            }
        }

        int[] array = new int[3];
        switch (num3)
        {
            case 7:
                array[0] = 7;
                array[1] = 94;
                array[2] = 95;
                break;
            case 9:
                array[0] = 9;
                array[1] = 96;
                array[2] = 97;
                break;
            default:
                array[0] = 8;
                array[1] = 98;
                array[2] = 99;
                break;
        }

        for (int num48 = 0; num48 < 5; num48++)
        {
            for (int num49 = 0; num49 < 3; num49++)
            {
                int num50 = genRand.Next(40, 240);
                int num51 = genRand.Next(dMinX, dMaxX);
                int num52 = genRand.Next(dMinY, dMaxY);
                for (int num53 = num51 - num50; num53 < num51 + num50; num53++)
                {
                    for (int num54 = num52 - num50; num54 < num52 + num50; num54++)
                    {
                        if ((double) num54 > Main.worldSurface)
                        {
                            float num55 = (float) Math.Abs(num51 - num53);
                            float num56 = (float) Math.Abs(num52 - num54);
                            double num57 = Math.Sqrt((double) (num55 * num55 + num56 * num56));
                            if (num57 < (double) num50 * 0.4 && Main.wallDungeon[Main.tile[num53, num54].wall])
                            {
                                Spread.WallDungeon(num53, num54, array[num49]);
                            }
                        }
                    }
                }
            }
        }

        Main.statusText = Lang.gen[58].Value + " 85%";
        for (int num58 = 0; num58 < numDPlats; num58++)
        {
            int num59 = DPlatX[num58];
            int num60 = DPlatY[num58];
            int num61 = Main.maxTilesX;
            int num62 = 10;
            if ((double) num60 < Main.worldSurface + 50.0)
            {
                num62 = 20;
            }

            for (int num63 = num60 - 5; num63 <= num60 + 5; num63++)
            {
                int num64 = num59;
                int num65 = num59;
                bool flag3 = false;
                if (!Main.tile[num64, num63].active())
                {
                    while (!Main.tile[num64, num63].active())
                    {
                        num64--;
                        if (!Main.tileDungeon[Main.tile[num64, num63].type])
                        {
                            flag3 = true;
                        }
                    }

                    while (!Main.tile[num65, num63].active())
                    {
                        num65++;
                        if (!Main.tileDungeon[Main.tile[num65, num63].type])
                        {
                            flag3 = true;
                        }
                    }
                }
                else
                {
                    flag3 = true;
                }

                if (!flag3 && num65 - num64 <= num62)
                {
                    bool flag4 = true;
                    int num66 = num59 - num62 / 2 - 2;
                    int num67 = num59 + num62 / 2 + 2;
                    int num68 = num63 - 5;
                    int num69 = num63 + 5;
                    for (int num70 = num66; num70 <= num67; num70++)
                    {
                        for (int num71 = num68; num71 <= num69; num71++)
                        {
                            if (Main.tile[num70, num71].active() && Main.tile[num70, num71].type == 19)
                            {
                                flag4 = false;
                                break;
                            }
                        }
                    }

                    for (int num72 = num63 + 3; num72 >= num63 - 5; num72--)
                    {
                        if (Main.tile[num59, num72].active())
                        {
                            flag4 = false;
                            break;
                        }
                    }

                    if (flag4)
                    {
                        num61 = num63;
                        break;
                    }
                }
            }

            if (num61 > num60 - 10 && num61 < num60 + 10)
            {
                int num73 = num59;
                int num74 = num61;
                int num75 = num59 + 1;
                while (!Main.tile[num73, num74].active())
                {
                    Main.tile[num73, num74].active(true);
                    Main.tile[num73, num74].type = 19;
                    if (num3 == 7)
                    {
                        Main.tile[num73, num74].frameY = 108;
                    }

                    if (num3 == 8)
                    {
                        Main.tile[num73, num74].frameY = 144;
                    }

                    if (num3 == 9)
                    {
                        Main.tile[num73, num74].frameY = 126;
                    }

                    num73--;
                }

                for (; !Main.tile[num75, num74].active(); num75++)
                {
                    Main.tile[num75, num74].active(true);
                    Main.tile[num75, num74].type = 19;
                    if (num3 == 7)
                    {
                        Main.tile[num75, num74].frameY = 108;
                    }

                    if (num3 == 8)
                    {
                        Main.tile[num75, num74].frameY = 144;
                    }

                    if (num3 == 9)
                    {
                        Main.tile[num75, num74].frameY = 126;
                    }
                }
            }
        }

        for (int num76 = 0; num76 < 4; num76++)
        {
            bool flag5 = false;
            while (!flag5)
            {
                int num77 = genRand.Next(dMinX, dMaxX);
                int num78 = genRand.Next((int) Main.worldSurface, dMaxY);
                if (Main.wallDungeon[Main.tile[num77, num78].wall] && !Main.tile[num77, num78].active())
                {
                    int contain = 0;
                    int style2 = 0;
                    switch (num76)
                    {
                        case 0:
                            style2 = 23;
                            contain = 1156;
                            break;
                        case 1:
                            if (!crimson)
                            {
                                style2 = 24;
                                contain = 1571;
                            }
                            else
                            {
                                style2 = 25;
                                contain = 1569;
                            }

                            break;
                        case 2:
                            style2 = 26;
                            contain = 1260;
                            break;
                        case 3:
                            style2 = 27;
                            contain = 1572;
                            break;
                    }

                    flag5 = AddBuriedChest(num77, num78, contain, false, style2);
                }
            }
        }

        int[] array2 = new int[3]
        {
            genRand.Next(9, 13),
            genRand.Next(9, 13),
            0
        };
        while (array2[1] == array2[0])
        {
            array2[1] = genRand.Next(9, 13);
        }

        array2[2] = genRand.Next(9, 13);
        while (array2[2] == array2[0] || array2[2] == array2[1])
        {
            array2[2] = genRand.Next(9, 13);
        }

        Main.statusText = Lang.gen[58].Value + " 90%";
        failCount = 0;
        num13 = 1000;
        numAdd = 0;
        while (numAdd < Main.maxTilesX / 20)
        {
            failCount++;
            int num79 = genRand.Next(dMinX, dMaxX);
            int num80 = genRand.Next(dMinY, dMaxY);
            bool flag6 = true;
            if (Main.wallDungeon[Main.tile[num79, num80].wall] && !Main.tile[num79, num80].active())
            {
                int num81 = 1;
                if (genRand.Next(2) == 0)
                {
                    num81 = -1;
                }

                while (flag6 && !Main.tile[num79, num80].active())
                {
                    num79 -= num81;
                    if (num79 < 5 || num79 > Main.maxTilesX - 5)
                    {
                        flag6 = false;
                    }
                    else if (Main.tile[num79, num80].active() && !Main.tileDungeon[Main.tile[num79, num80].type])
                    {
                        flag6 = false;
                    }
                }

                if (flag6 && Main.tile[num79, num80].active() && Main.tileDungeon[Main.tile[num79, num80].type] &&
                    Main.tile[num79, num80 - 1].active() && Main.tileDungeon[Main.tile[num79, num80 - 1].type] &&
                    Main.tile[num79, num80 + 1].active() && Main.tileDungeon[Main.tile[num79, num80 + 1].type])
                {
                    num79 += num81;
                    for (int num82 = num79 - 3; num82 <= num79 + 3; num82++)
                    {
                        for (int num83 = num80 - 3; num83 <= num80 + 3; num83++)
                        {
                            if (Main.tile[num82, num83].active() && Main.tile[num82, num83].type == 19)
                            {
                                flag6 = false;
                                break;
                            }
                        }
                    }

                    if (flag6 && (!Main.tile[num79, num80 - 1].active() & !Main.tile[num79, num80 - 2].active() &
                                  !Main.tile[num79, num80 - 3].active()))
                    {
                        int num84 = num79;
                        int num85 = num79;
                        for (;
                            num84 > dMinX && num84 < dMaxX && !Main.tile[num84, num80].active() &&
                            !Main.tile[num84, num80 - 1].active() && !Main.tile[num84, num80 + 1].active();
                            num84 += num81)
                        {
                        }

                        num84 = Math.Abs(num79 - num84);
                        bool flag7 = false;
                        if (genRand.Next(2) == 0)
                        {
                            flag7 = true;
                        }

                        if (num84 > 5)
                        {
                            for (int num86 = genRand.Next(1, 4); num86 > 0; num86--)
                            {
                                Main.tile[num79, num80].active(true);
                                Main.tile[num79, num80].type = 19;
                                if (Main.tile[num79, num80].wall == array[0])
                                {
                                    Main.tile[num79, num80].frameY = (short) (18 * array2[0]);
                                }

                                if (Main.tile[num79, num80].wall == array[1])
                                {
                                    Main.tile[num79, num80].frameY = (short) (18 * array2[1]);
                                }

                                if (Main.tile[num79, num80].wall == array[2])
                                {
                                    Main.tile[num79, num80].frameY = (short) (18 * array2[2]);
                                }

                                if (flag7)
                                {
                                    PlaceTile(num79, num80 - 1, 50, true, false, -1, 0);
                                    if (genRand.Next(50) == 0 && Main.tile[num79, num80 - 1].type == 50)
                                    {
                                        Main.tile[num79, num80 - 1].frameX = 90;
                                    }
                                }

                                num79 += num81;
                            }

                            failCount = 0;
                            numAdd++;
                            if (!flag7 && genRand.Next(2) == 0)
                            {
                                num79 = num85;
                                num80--;
                                int num87 = 0;
                                if (genRand.Next(4) == 0)
                                {
                                    num87 = 1;
                                }

                                switch (num87)
                                {
                                    case 0:
                                        num87 = 13;
                                        break;
                                    case 1:
                                        num87 = 49;
                                        break;
                                }

                                PlaceTile(num79, num80, num87, true, false, -1, 0);
                                if (Main.tile[num79, num80].type == 13)
                                {
                                    if (genRand.Next(2) == 0)
                                    {
                                        Main.tile[num79, num80].frameX = 18;
                                    }
                                    else
                                    {
                                        Main.tile[num79, num80].frameX = 36;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            if (failCount > num13)
            {
                failCount = 0;
                numAdd++;
            }
        }

        Main.statusText = Lang.gen[58].Value + " 95%";
        int num88 = 1;
        for (int num89 = 0; num89 < numDRooms; num89++)
        {
            int num90 = 0;
            while (num90 < 1000)
            {
                int num91 = (int) ((double) dRoomSize[num89] * 0.4);
                int i2 = dRoomX[num89] + genRand.Next(-num91, num91 + 1);
                int num92 = dRoomY[num89] + genRand.Next(-num91, num91 + 1);
                int num93 = 0;
                int style3 = 2;
                switch (num88)
                {
                    case 1:
                        num93 = 329;
                        break;
                    case 2:
                        num93 = 155;
                        break;
                    case 3:
                        num93 = 156;
                        break;
                    case 4:
                        num93 = 157;
                        break;
                    case 5:
                        num93 = 163;
                        break;
                    case 6:
                        num93 = 113;
                        break;
                    case 7:
                        num93 = 3317;
                        break;
                    case 8:
                        num93 = 327;
                        style3 = 0;
                        break;
                    default:
                        num93 = 164;
                        num88 = 0;
                        break;
                }

                if ((double) num92 < Main.worldSurface + 50.0)
                {
                    num93 = 327;
                    style3 = 0;
                }

                if (num93 == 0 && genRand.Next(2) == 0)
                {
                    num90 = 1000;
                }
                else
                {
                    if (AddBuriedChest(i2, num92, num93, false, style3))
                    {
                        num90 += 1000;
                        num88++;
                    }

                    num90++;
                }
            }
        }

        dMinX -= 25;
        dMaxX += 25;
        dMinY -= 25;
        dMaxY += 25;
        if (dMinX < 0)
        {
            dMinX = 0;
        }

        if (dMaxX > Main.maxTilesX)
        {
            dMaxX = Main.maxTilesX;
        }

        if (dMinY < 0)
        {
            dMinY = 0;
        }

        if (dMaxY > Main.maxTilesY)
        {
            dMaxY = Main.maxTilesY;
        }

        failCount = 0;
        num13 = 1000;
        numAdd = 0;
        MakeDungeon_Lights(num2, ref failCount, num13, ref numAdd, array);
        failCount = 0;
        num13 = 1000;
        numAdd = 0;
        MakeDungeon_Traps(ref failCount, num13, ref numAdd);
        float count = MakeDungeon_GroundFurniture(num3);
        count = MakeDungeon_Pictures(array, count);
        count = MakeDungeon_Banners(array, count);
    }

    private static void MakeDungeon_Traps(ref int failCount, int failMax, ref int numAdd)
    {
        while (numAdd < Main.maxTilesX / 500)
        {
            failCount++;
            int num = genRand.Next(dMinX, dMaxX);
            int num2 = genRand.Next(dMinY, dMaxY);
            while ((double) num2 < Main.worldSurface)
            {
                num2 = genRand.Next(dMinY, dMaxY);
            }

            if (Main.wallDungeon[Main.tile[num, num2].wall] && placeTrap(num, num2, 0))
            {
                failCount = failMax;
            }

            if (failCount > failMax)
            {
                numAdd++;
                failCount = 0;
            }
        }
    }

    private static void MakeDungeon_Lights(ushort tileType, ref int failCount, int failMax, ref int numAdd,
        int[] roomWall)
    {
        int[] array = new int[3]
        {
            genRand.Next(7),
            genRand.Next(7),
            0
        };
        while (array[1] == array[0])
        {
            array[1] = genRand.Next(7);
        }

        array[2] = genRand.Next(7);
        while (array[2] == array[0] || array[2] == array[1])
        {
            array[2] = genRand.Next(7);
        }

        while (numAdd < Main.maxTilesX / 150)
        {
            failCount++;
            int num = genRand.Next(dMinX, dMaxX);
            int num2 = genRand.Next(dMinY, dMaxY);
            if (Main.wallDungeon[Main.tile[num, num2].wall])
            {
                for (int num3 = num2; num3 > dMinY; num3--)
                {
                    if (Main.tile[num, num3 - 1].active() && Main.tile[num, num3 - 1].type == tileType)
                    {
                        bool flag = false;
                        for (int i = num - 15; i < num + 15; i++)
                        {
                            for (int j = num3 - 15; j < num3 + 15; j++)
                            {
                                if (i > 0 && i < Main.maxTilesX && j > 0 && j < Main.maxTilesY &&
                                    (Main.tile[i, j].type == 42 || Main.tile[i, j].type == 34))
                                {
                                    flag = true;
                                    break;
                                }
                            }
                        }

                        if (Main.tile[num - 1, num3].active() || Main.tile[num + 1, num3].active() ||
                            Main.tile[num - 1, num3 + 1].active() || Main.tile[num + 1, num3 + 1].active() ||
                            Main.tile[num, num3 + 2].active())
                        {
                            flag = true;
                        }

                        if (!flag)
                        {
                            bool flag2 = false;
                            if (!flag2 && genRand.Next(7) == 0)
                            {
                                int style = 27;
                                switch (roomWall[0])
                                {
                                    case 7:
                                        style = 27;
                                        break;
                                    case 8:
                                        style = 28;
                                        break;
                                    case 9:
                                        style = 29;
                                        break;
                                }

                                bool flag3 = false;
                                for (int k = 0; k < 15; k++)
                                {
                                    if (SolidTile(num, num3 + k))
                                    {
                                        flag3 = true;
                                        break;
                                    }
                                }

                                if (!flag3)
                                {
                                    PlaceChand(num, num3, 34, style);
                                }

                                if (Main.tile[num, num3].type == 34)
                                {
                                    flag2 = true;
                                    failCount = 0;
                                    numAdd++;
                                    for (int l = 0; l < 1000; l++)
                                    {
                                        int num4 = num + genRand.Next(-12, 13);
                                        int num5 = num3 + genRand.Next(3, 21);
                                        if (!Main.tile[num4, num5].active() && !Main.tile[num4, num5 + 1].active() &&
                                            Main.tile[num4 - 1, num5].type != 48 &&
                                            Main.tile[num4 + 1, num5].type != 48 &&
                                            Collision.CanHit(new Vector2((float) (num4 * 16), (float) (num5 * 16)), 16,
                                                16, new Vector2((float) (num * 16), (float) (num3 * 16 + 1)), 16, 16))
                                        {
                                            if ((SolidTile(num4 - 1, num5) && Main.tile[num4 - 1, num5].type != 10) ||
                                                (SolidTile(num4 + 1, num5) && Main.tile[num4 + 1, num5].type != 10) ||
                                                SolidTile(num4, num5 + 1))
                                            {
                                                PlaceTile(num4, num5, 136, true, false, -1, 0);
                                            }

                                            if (Main.tile[num4, num5].active())
                                            {
                                                while (num4 != num || num5 != num3)
                                                {
                                                    Main.tile[num4, num5].wire(true);
                                                    if (num4 > num)
                                                    {
                                                        num4--;
                                                    }

                                                    if (num4 < num)
                                                    {
                                                        num4++;
                                                    }

                                                    Main.tile[num4, num5].wire(true);
                                                    if (num5 > num3)
                                                    {
                                                        num5--;
                                                    }

                                                    if (num5 < num3)
                                                    {
                                                        num5++;
                                                    }

                                                    Main.tile[num4, num5].wire(true);
                                                }

                                                if (genRand.Next(3) > 0)
                                                {
                                                    Main.tile[num, num3].frameX = 18;
                                                    Main.tile[num, num3 + 1].frameX = 18;
                                                }

                                                break;
                                            }
                                        }
                                    }
                                }
                            }

                            if (!flag2)
                            {
                                int style2 = array[0];
                                if (Main.tile[num, num3].wall == roomWall[1])
                                {
                                    style2 = array[1];
                                }

                                if (Main.tile[num, num3].wall == roomWall[2])
                                {
                                    style2 = array[2];
                                }

                                Place1x2Top(num, num3, 42, style2);
                                if (Main.tile[num, num3].type == 42)
                                {
                                    flag2 = true;
                                    failCount = 0;
                                    numAdd++;
                                    for (int m = 0; m < 1000; m++)
                                    {
                                        int num6 = num + genRand.Next(-12, 13);
                                        int num7 = num3 + genRand.Next(3, 21);
                                        if (!Main.tile[num6, num7].active() && !Main.tile[num6, num7 + 1].active() &&
                                            Main.tile[num6 - 1, num7].type != 48 &&
                                            Main.tile[num6 + 1, num7].type != 48 &&
                                            Collision.CanHit(new Vector2((float) (num6 * 16), (float) (num7 * 16)), 16,
                                                16, new Vector2((float) (num * 16), (float) (num3 * 16 + 1)), 16, 16))
                                        {
                                            if ((SolidTile(num6 - 1, num7) && Main.tile[num6 - 1, num7].type != 10) ||
                                                (SolidTile(num6 + 1, num7) && Main.tile[num6 + 1, num7].type != 10) ||
                                                SolidTile(num6, num7 + 1))
                                            {
                                                PlaceTile(num6, num7, 136, true, false, -1, 0);
                                            }

                                            if (Main.tile[num6, num7].active())
                                            {
                                                while (num6 != num || num7 != num3)
                                                {
                                                    Main.tile[num6, num7].wire(true);
                                                    if (num6 > num)
                                                    {
                                                        num6--;
                                                    }

                                                    if (num6 < num)
                                                    {
                                                        num6++;
                                                    }

                                                    Main.tile[num6, num7].wire(true);
                                                    if (num7 > num3)
                                                    {
                                                        num7--;
                                                    }

                                                    if (num7 < num3)
                                                    {
                                                        num7++;
                                                    }

                                                    Main.tile[num6, num7].wire(true);
                                                }

                                                if (genRand.Next(3) > 0)
                                                {
                                                    Main.tile[num, num3].frameX = 18;
                                                    Main.tile[num, num3 + 1].frameX = 18;
                                                }

                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        break;
                    }
                }
            }

            if (failCount > failMax)
            {
                numAdd++;
                failCount = 0;
            }
        }
    }

    private static float MakeDungeon_Banners(int[] roomWall, float count)
    {
        count = 840000f / (float) Main.maxTilesX;
        for (int i = 0; (float) i < count; i++)
        {
            int num = genRand.Next(dMinX, dMaxX);
            int num2 = genRand.Next(dMinY, dMaxY);
            while (!Main.wallDungeon[Main.tile[num, num2].wall] || Main.tile[num, num2].active())
            {
                num = genRand.Next(dMinX, dMaxX);
                num2 = genRand.Next(dMinY, dMaxY);
            }

            while (!SolidTile(num, num2) && num2 > 10)
            {
                num2--;
            }

            num2++;
            if (Main.wallDungeon[Main.tile[num, num2].wall] && Main.tile[num, num2 - 1].type != 48 &&
                !Main.tile[num, num2].active() && !Main.tile[num, num2 + 1].active() &&
                !Main.tile[num, num2 + 2].active() && !Main.tile[num, num2 + 3].active())
            {
                bool flag = true;
                for (int j = num - 1; j <= num + 1; j++)
                {
                    for (int k = num2; k <= num2 + 3; k++)
                    {
                        if (Main.tile[j, k].active() &&
                            (Main.tile[j, k].type == 10 || Main.tile[j, k].type == 11 || Main.tile[j, k].type == 91))
                        {
                            flag = false;
                        }
                    }
                }

                if (flag)
                {
                    int num3 = 10;
                    if (Main.tile[num, num2].wall == roomWall[1])
                    {
                        num3 = 12;
                    }

                    if (Main.tile[num, num2].wall == roomWall[2])
                    {
                        num3 = 14;
                    }

                    num3 += genRand.Next(2);
                    PlaceTile(num, num2, 91, true, false, -1, num3);
                }
            }
        }

        return count;
    }

    private static float MakeDungeon_Pictures(int[] roomWall, float count)
    {
        count = 420000f / (float) Main.maxTilesX;
        for (int i = 0; (float) i < count; i++)
        {
            int num = genRand.Next(dMinX, dMaxX);
            int num2 = genRand.Next((int) Main.worldSurface, dMaxY);
            while (!Main.wallDungeon[Main.tile[num, num2].wall] || Main.tile[num, num2].active())
            {
                num = genRand.Next(dMinX, dMaxX);
                num2 = genRand.Next((int) Main.worldSurface, dMaxY);
            }

            int num3 = num;
            int num4 = num;
            int num5 = num2;
            int num6 = num2;
            int num7 = 0;
            int num8 = 0;
            for (int j = 0; j < 2; j++)
            {
                num3 = num;
                num4 = num;
                while (!Main.tile[num3, num2].active() && Main.wallDungeon[Main.tile[num3, num2].wall])
                {
                    num3--;
                }

                num3++;
                for (; !Main.tile[num4, num2].active() && Main.wallDungeon[Main.tile[num4, num2].wall]; num4++)
                {
                }

                num4--;
                num = (num3 + num4) / 2;
                num5 = num2;
                num6 = num2;
                while (!Main.tile[num, num5].active() && Main.wallDungeon[Main.tile[num, num5].wall])
                {
                    num5--;
                }

                num5++;
                for (; !Main.tile[num, num6].active() && Main.wallDungeon[Main.tile[num, num6].wall]; num6++)
                {
                }

                num6--;
                num2 = (num5 + num6) / 2;
            }

            num3 = num;
            num4 = num;
            while (!Main.tile[num3, num2].active() && !Main.tile[num3, num2 - 1].active() &&
                   !Main.tile[num3, num2 + 1].active())
            {
                num3--;
            }

            num3++;
            for (;
                !Main.tile[num4, num2].active() && !Main.tile[num4, num2 - 1].active() &&
                !Main.tile[num4, num2 + 1].active();
                num4++)
            {
            }

            num4--;
            num5 = num2;
            num6 = num2;
            while (!Main.tile[num, num5].active() && !Main.tile[num - 1, num5].active() &&
                   !Main.tile[num + 1, num5].active())
            {
                num5--;
            }

            num5++;
            for (;
                !Main.tile[num, num6].active() && !Main.tile[num - 1, num6].active() &&
                !Main.tile[num + 1, num6].active();
                num6++)
            {
            }

            num6--;
            num = (num3 + num4) / 2;
            num2 = (num5 + num6) / 2;
            num7 = num4 - num3;
            num8 = num6 - num5;
            if (num7 > 7 && num8 > 5)
            {
                bool[] array = new bool[3]
                {
                    true,
                    false,
                    false
                };
                if (num7 > num8 * 3 && num7 > 21)
                {
                    array[1] = true;
                }

                if (num8 > num7 * 3 && num8 > 21)
                {
                    array[2] = true;
                }

                int num9 = genRand.Next(3);
                if (Main.tile[num, num2].wall == roomWall[0])
                {
                    num9 = 0;
                }

                while (!array[num9])
                {
                    num9 = genRand.Next(3);
                }

                if (nearPicture2(num, num2))
                {
                    num9 = -1;
                }

                switch (num9)
                {
                    case 0:
                    {
                        Vector2 vector2 = randPictureTile();
                        if (Main.tile[num, num2].wall != roomWall[0])
                        {
                            vector2 = randBoneTile();
                        }

                        int type2 = (int) vector2.X;
                        int style2 = (int) vector2.Y;
                        if (!nearPicture(num, num2))
                        {
                            PlaceTile(num, num2, type2, true, false, -1, style2);
                        }

                        break;
                    }
                    case 1:
                    {
                        Vector2 vector3 = randPictureTile();
                        if (Main.tile[num, num2].wall != roomWall[0])
                        {
                            vector3 = randBoneTile();
                        }

                        int type3 = (int) vector3.X;
                        int style3 = (int) vector3.Y;
                        if (!Main.tile[num, num2].active())
                        {
                            PlaceTile(num, num2, type3, true, false, -1, style3);
                        }

                        int num13 = num;
                        int num14 = num2;
                        int num15 = num2;
                        for (int m = 0; m < 2; m++)
                        {
                            num += 7;
                            num5 = num15;
                            num6 = num15;
                            while (!Main.tile[num, num5].active() && !Main.tile[num - 1, num5].active() &&
                                   !Main.tile[num + 1, num5].active())
                            {
                                num5--;
                            }

                            num5++;
                            for (;
                                !Main.tile[num, num6].active() && !Main.tile[num - 1, num6].active() &&
                                !Main.tile[num + 1, num6].active();
                                num6++)
                            {
                            }

                            num6--;
                            num15 = (num5 + num6) / 2;
                            vector3 = randPictureTile();
                            if (Main.tile[num, num15].wall != roomWall[0])
                            {
                                vector3 = randBoneTile();
                            }

                            type3 = (int) vector3.X;
                            style3 = (int) vector3.Y;
                            if (Math.Abs(num14 - num15) >= 4 || nearPicture(num, num15))
                            {
                                break;
                            }

                            PlaceTile(num, num15, type3, true, false, -1, style3);
                        }

                        num15 = num2;
                        num = num13;
                        for (int n = 0; n < 2; n++)
                        {
                            num -= 7;
                            num5 = num15;
                            num6 = num15;
                            while (!Main.tile[num, num5].active() && !Main.tile[num - 1, num5].active() &&
                                   !Main.tile[num + 1, num5].active())
                            {
                                num5--;
                            }

                            num5++;
                            for (;
                                !Main.tile[num, num6].active() && !Main.tile[num - 1, num6].active() &&
                                !Main.tile[num + 1, num6].active();
                                num6++)
                            {
                            }

                            num6--;
                            num15 = (num5 + num6) / 2;
                            vector3 = randPictureTile();
                            if (Main.tile[num, num15].wall != roomWall[0])
                            {
                                vector3 = randBoneTile();
                            }

                            type3 = (int) vector3.X;
                            style3 = (int) vector3.Y;
                            if (Math.Abs(num14 - num15) >= 4 || nearPicture(num, num15))
                            {
                                break;
                            }

                            PlaceTile(num, num15, type3, true, false, -1, style3);
                        }

                        break;
                    }
                    case 2:
                    {
                        Vector2 vector = randPictureTile();
                        if (Main.tile[num, num2].wall != roomWall[0])
                        {
                            vector = randBoneTile();
                        }

                        int type = (int) vector.X;
                        int style = (int) vector.Y;
                        if (!Main.tile[num, num2].active())
                        {
                            PlaceTile(num, num2, type, true, false, -1, style);
                        }

                        int num10 = num2;
                        int num11 = num;
                        int num12 = num;
                        for (int k = 0; k < 3; k++)
                        {
                            num2 += 7;
                            num3 = num12;
                            num4 = num12;
                            while (!Main.tile[num3, num2].active() && !Main.tile[num3, num2 - 1].active() &&
                                   !Main.tile[num3, num2 + 1].active())
                            {
                                num3--;
                            }

                            num3++;
                            for (;
                                !Main.tile[num4, num2].active() && !Main.tile[num4, num2 - 1].active() &&
                                !Main.tile[num4, num2 + 1].active();
                                num4++)
                            {
                            }

                            num4--;
                            num12 = (num3 + num4) / 2;
                            vector = randPictureTile();
                            if (Main.tile[num12, num2].wall != roomWall[0])
                            {
                                vector = randBoneTile();
                            }

                            type = (int) vector.X;
                            style = (int) vector.Y;
                            if (Math.Abs(num11 - num12) >= 4 || nearPicture(num12, num2))
                            {
                                break;
                            }

                            PlaceTile(num12, num2, type, true, false, -1, style);
                        }

                        num12 = num;
                        num2 = num10;
                        for (int l = 0; l < 3; l++)
                        {
                            num2 -= 7;
                            num3 = num12;
                            num4 = num12;
                            while (!Main.tile[num3, num2].active() && !Main.tile[num3, num2 - 1].active() &&
                                   !Main.tile[num3, num2 + 1].active())
                            {
                                num3--;
                            }

                            num3++;
                            for (;
                                !Main.tile[num4, num2].active() && !Main.tile[num4, num2 - 1].active() &&
                                !Main.tile[num4, num2 + 1].active();
                                num4++)
                            {
                            }

                            num4--;
                            num12 = (num3 + num4) / 2;
                            vector = randPictureTile();
                            if (Main.tile[num12, num2].wall != roomWall[0])
                            {
                                vector = randBoneTile();
                            }

                            type = (int) vector.X;
                            style = (int) vector.Y;
                            if (Math.Abs(num11 - num12) >= 4 || nearPicture(num12, num2))
                            {
                                break;
                            }

                            PlaceTile(num12, num2, type, true, false, -1, style);
                        }

                        break;
                    }
                }
            }
        }

        return count;
    }

    private static float MakeDungeon_GroundFurniture(int wallType)
    {
        float num = 2000f * (float) Main.maxTilesX / 4200f;
        int num2 = 1 + Main.maxTilesX / 4200;
        int num3 = 1 + Main.maxTilesX / 4200;
        for (int i = 0; (float) i < num; i++)
        {
            if (num2 > 0 || num3 > 0)
            {
                i--;
            }

            int num4 = genRand.Next(dMinX, dMaxX);
            int j = genRand.Next((int) Main.worldSurface + 10, dMaxY);
            while (!Main.wallDungeon[Main.tile[num4, j].wall] || Main.tile[num4, j].active())
            {
                num4 = genRand.Next(dMinX, dMaxX);
                j = genRand.Next((int) Main.worldSurface + 10, dMaxY);
            }

            if (Main.wallDungeon[Main.tile[num4, j].wall] && !Main.tile[num4, j].active())
            {
                for (; !SolidTile(num4, j) && j < Main.maxTilesY - 200; j++)
                {
                }

                j--;
                int num5 = num4;
                int k = num4;
                while (!Main.tile[num5, j].active() && SolidTile(num5, j + 1))
                {
                    num5--;
                }

                num5++;
                for (; !Main.tile[k, j].active() && SolidTile(k, j + 1); k++)
                {
                }

                k--;
                int num6 = k - num5;
                int num7 = (k + num5) / 2;
                if (!Main.tile[num7, j].active() && Main.wallDungeon[Main.tile[num7, j].wall] &&
                    SolidTile(num7, j + 1) && Main.tile[num7, j + 1].type != 48)
                {
                    int style = 13;
                    int style2 = 10;
                    int style3 = 11;
                    int num8 = 1;
                    int num9 = 46;
                    int style4 = 1;
                    int num10 = 5;
                    int num11 = 11;
                    int num12 = 5;
                    int num13 = 6;
                    int num14 = 21;
                    int num15 = 22;
                    int num16 = 24;
                    int num17 = 30;
                    switch (wallType)
                    {
                        case 8:
                            style = 14;
                            style2 = 11;
                            style3 = 12;
                            num8 = 2;
                            num9 = 47;
                            style4 = 2;
                            num10 = 6;
                            num11 = 12;
                            num12 = 6;
                            num13 = 7;
                            num14 = 22;
                            num15 = 23;
                            num16 = 25;
                            num17 = 31;
                            break;
                        case 9:
                            style = 15;
                            style2 = 12;
                            style3 = 13;
                            num8 = 3;
                            num9 = 48;
                            style4 = 3;
                            num10 = 7;
                            num11 = 13;
                            num12 = 7;
                            num13 = 8;
                            num14 = 23;
                            num15 = 24;
                            num16 = 26;
                            num17 = 32;
                            break;
                    }

                    if (Main.tile[num7, j].wall >= 94 && Main.tile[num7, j].wall <= 105)
                    {
                        style = 17;
                        style2 = 14;
                        style3 = 15;
                        num8 = -1;
                        num9 = -1;
                        style4 = 5;
                        num10 = -1;
                        num11 = -1;
                        num12 = -1;
                        num13 = -1;
                        num14 = -1;
                        num15 = -1;
                        num16 = -1;
                        num17 = -1;
                    }

                    int num18 = genRand.Next(13);
                    if ((num18 == 10 || num18 == 11 || num18 == 12) && genRand.Next(4) != 0)
                    {
                        num18 = genRand.Next(13);
                    }

                    while ((num18 == 2 && num9 == -1) || (num18 == 5 && num10 == -1) || (num18 == 6 && num11 == -1) ||
                           (num18 == 7 && num12 == -1) || (num18 == 8 && num13 == -1) || (num18 == 9 && num14 == -1) ||
                           (num18 == 10 && num15 == -1) || (num18 == 11 && num16 == -1) || (num18 == 12 && num17 == -1))
                    {
                        num18 = genRand.Next(13);
                    }

                    int num19 = 0;
                    int num20 = 0;
                    if (num18 == 0)
                    {
                        num19 = 5;
                        num20 = 4;
                    }

                    if (num18 == 1)
                    {
                        num19 = 4;
                        num20 = 3;
                    }

                    if (num18 == 2)
                    {
                        num19 = 3;
                        num20 = 5;
                    }

                    if (num18 == 3)
                    {
                        num19 = 4;
                        num20 = 6;
                    }

                    if (num18 == 4)
                    {
                        num19 = 3;
                        num20 = 3;
                    }

                    if (num18 == 5)
                    {
                        num19 = 5;
                        num20 = 3;
                    }

                    if (num18 == 6)
                    {
                        num19 = 5;
                        num20 = 4;
                    }

                    if (num18 == 7)
                    {
                        num19 = 5;
                        num20 = 4;
                    }

                    if (num18 == 8)
                    {
                        num19 = 5;
                        num20 = 4;
                    }

                    if (num18 == 9)
                    {
                        num19 = 5;
                        num20 = 3;
                    }

                    if (num18 == 10)
                    {
                        num19 = 2;
                        num20 = 4;
                    }

                    if (num18 == 11)
                    {
                        num19 = 3;
                        num20 = 3;
                    }

                    if (num18 == 12)
                    {
                        num19 = 2;
                        num20 = 5;
                    }

                    for (int l = num7 - num19; l <= num7 + num19; l++)
                    {
                        for (int m = j - num20; m <= j; m++)
                        {
                            if (Main.tile[l, m].active())
                            {
                                num18 = -1;
                                break;
                            }
                        }
                    }

                    if ((double) num6 < (double) num19 * 1.75)
                    {
                        num18 = -1;
                    }

                    if (num2 > 0 || num3 > 0)
                    {
                        if (num2 > 0)
                        {
                            PlaceTile(num7, j, 355, true, false, -1, 0);
                            if (Main.tile[num7, j].type == 355)
                            {
                                num2--;
                            }
                        }
                        else if (num3 > 0)
                        {
                            PlaceTile(num7, j, 354, true, false, -1, 0);
                            if (Main.tile[num7, j].type == 354)
                            {
                                num3--;
                            }
                        }
                    }
                    else
                    {
                        switch (num18)
                        {
                            case 0:
                                PlaceTile(num7, j, 14, true, false, -1, style2);
                                if (Main.tile[num7, j].active())
                                {
                                    if (!Main.tile[num7 - 2, j].active())
                                    {
                                        PlaceTile(num7 - 2, j, 15, true, false, -1, style);
                                        if (Main.tile[num7 - 2, j].active())
                                        {
                                            Main.tile[num7 - 2, j].frameX += 18;
                                            Main.tile[num7 - 2, j - 1].frameX += 18;
                                        }
                                    }

                                    if (!Main.tile[num7 + 2, j].active())
                                    {
                                        PlaceTile(num7 + 2, j, 15, true, false, -1, style);
                                    }
                                }

                                for (int num22 = num7 - 1; num22 <= num7 + 1; num22++)
                                {
                                    if (genRand.Next(2) == 0 && !Main.tile[num22, j - 2].active())
                                    {
                                        int num23 = genRand.Next(5);
                                        if (num8 != -1 && num23 <= 1 &&
                                            !Main.tileLighted[Main.tile[num22 - 1, j - 2].type])
                                        {
                                            PlaceTile(num22, j - 2, 33, true, false, -1, num8);
                                        }

                                        if (num23 == 2 && !Main.tileLighted[Main.tile[num22 - 1, j - 2].type])
                                        {
                                            PlaceTile(num22, j - 2, 49, true, false, -1, 0);
                                        }

                                        if (num23 == 3)
                                        {
                                            PlaceTile(num22, j - 2, 50, true, false, -1, 0);
                                        }

                                        if (num23 == 4)
                                        {
                                            PlaceTile(num22, j - 2, 103, true, false, -1, 0);
                                        }
                                    }
                                }

                                break;
                            case 1:
                                PlaceTile(num7, j, 18, true, false, -1, style3);
                                if (Main.tile[num7, j].active())
                                {
                                    if (genRand.Next(2) == 0)
                                    {
                                        if (!Main.tile[num7 - 1, j].active())
                                        {
                                            PlaceTile(num7 - 1, j, 15, true, false, -1, style);
                                            if (Main.tile[num7 - 1, j].active())
                                            {
                                                Main.tile[num7 - 1, j].frameX += 18;
                                                Main.tile[num7 - 1, j - 1].frameX += 18;
                                            }
                                        }
                                    }
                                    else if (!Main.tile[num7 + 2, j].active())
                                    {
                                        PlaceTile(num7 + 2, j, 15, true, false, -1, style);
                                    }

                                    for (int n = num7; n <= num7 + 1; n++)
                                    {
                                        if (genRand.Next(2) == 0 && !Main.tile[n, j - 1].active())
                                        {
                                            int num21 = genRand.Next(5);
                                            if (num8 != -1 && num21 <= 1 &&
                                                !Main.tileLighted[Main.tile[n - 1, j - 1].type])
                                            {
                                                PlaceTile(n, j - 1, 33, true, false, -1, num8);
                                            }

                                            if (num21 == 2 && !Main.tileLighted[Main.tile[n - 1, j - 1].type])
                                            {
                                                PlaceTile(n, j - 1, 49, true, false, -1, 0);
                                            }

                                            if (num21 == 3)
                                            {
                                                PlaceTile(n, j - 1, 50, true, false, -1, 0);
                                            }

                                            if (num21 == 4)
                                            {
                                                PlaceTile(n, j - 1, 103, true, false, -1, 0);
                                            }
                                        }
                                    }
                                }

                                break;
                            case 2:
                                PlaceTile(num7, j, 105, true, false, -1, num9);
                                break;
                            case 3:
                                PlaceTile(num7, j, 101, true, false, -1, style4);
                                break;
                            case 4:
                                if (genRand.Next(2) == 0)
                                {
                                    PlaceTile(num7, j, 15, true, false, -1, style);
                                    Main.tile[num7, j].frameX += 18;
                                    Main.tile[num7, j - 1].frameX += 18;
                                }
                                else
                                {
                                    PlaceTile(num7, j, 15, true, false, -1, style);
                                }

                                break;
                            case 5:
                                if (genRand.Next(2) == 0)
                                {
                                    Place4x2(num7, j, 79, 1, num10);
                                }
                                else
                                {
                                    Place4x2(num7, j, 79, -1, num10);
                                }

                                break;
                            case 6:
                                PlaceTile(num7, j, 87, true, false, -1, num11);
                                break;
                            case 7:
                                PlaceTile(num7, j, 88, true, false, -1, num12);
                                break;
                            case 8:
                                PlaceTile(num7, j, 89, true, false, -1, num13);
                                break;
                            case 9:
                                if (genRand.Next(2) == 0)
                                {
                                    Place4x2(num7, j, 90, 1, num14);
                                }
                                else
                                {
                                    Place4x2(num7, j, 90, -1, num14);
                                }

                                break;
                            case 10:
                                PlaceTile(num7, j, 93, true, false, -1, num16);
                                break;
                            case 11:
                                PlaceTile(num7, j, 100, true, false, -1, num15);
                                break;
                            case 12:
                                PlaceTile(num7, j, 104, true, false, -1, num17);
                                break;
                        }
                    }
                }
            }
        }

        return num;
    }

    public static Vector2 randBoneTile()
    {
        int num = genRand.Next(2);
        int num2 = 0;
        switch (num)
        {
            case 0:
                num = 240;
                num2 = genRand.Next(2);
                switch (num2)
                {
                    case 0:
                        num2 = 16;
                        break;
                    case 1:
                        num2 = 17;
                        break;
                }

                break;
            case 1:
                num = 241;
                num2 = genRand.Next(9);
                break;
        }

        return new Vector2((float) num, (float) num2);
    }

    public static Vector2 randHellPicture()
    {
        int num = genRand.Next(4);
        int num2 = 0;
        if (num == 1)
        {
            num = genRand.Next(4);
        }

        switch (num)
        {
            case 0:
                num = 240;
                num2 = genRand.Next(5);
                switch (num2)
                {
                    case 0:
                        num2 = 27;
                        break;
                    case 1:
                        num2 = 29;
                        break;
                    case 2:
                        num2 = 30;
                        break;
                    case 3:
                        num2 = 31;
                        break;
                    case 4:
                        num2 = 32;
                        break;
                }

                break;
            case 1:
                num = 242;
                num2 = 14;
                break;
            case 2:
                num = 245;
                num2 = genRand.Next(3);
                switch (num2)
                {
                    case 0:
                        num2 = 1;
                        break;
                    case 1:
                        num2 = 2;
                        break;
                    case 2:
                        num2 = 4;
                        break;
                }

                break;
            default:
                num = 246;
                num2 = genRand.Next(3);
                switch (num2)
                {
                    case 0:
                        num2 = 0;
                        break;
                    case 1:
                        num2 = 16;
                        break;
                    case 2:
                        num2 = 17;
                        break;
                }

                break;
        }

        return new Vector2((float) num, (float) num2);
    }

    public static Vector2 randHousePicture()
    {
        int num = genRand.Next(4);
        int num2 = 0;
        if (num <= 1)
        {
            num = 240;
            int maxValue = 10;
            num2 = genRand.Next(maxValue);
            if (num2 == 9)
            {
                num2 = genRand.Next(maxValue);
            }

            if (num2 == 5)
            {
                num2 = genRand.Next(maxValue);
            }

            if (num2 == 6)
            {
                num2 = genRand.Next(maxValue);
            }

            switch (num2)
            {
                case 0:
                    num2 = 26;
                    break;
                case 1:
                    num2 = 28;
                    break;
                case 2:
                    num2 = 20;
                    break;
                case 3:
                    num2 = 21;
                    break;
                case 4:
                    num2 = 22;
                    break;
                case 5:
                    num2 = 24;
                    break;
                case 6:
                    num2 = 25;
                    break;
                case 7:
                    num2 = 33;
                    break;
                case 8:
                    num2 = 34;
                    break;
                case 9:
                    num2 = 35;
                    break;
            }
        }
        else if (num == 2)
        {
            int maxValue2 = 4;
            num = 245;
            num2 = genRand.Next(maxValue2);
            if (num2 == 2)
            {
                num2 = genRand.Next(maxValue2);
            }

            if (num2 == 0)
            {
                num2 = genRand.Next(maxValue2);
            }

            if (num2 == 0)
            {
                num2 = genRand.Next(maxValue2);
            }

            if (num2 == 0)
            {
                num2 = genRand.Next(maxValue2);
            }

            switch (num2)
            {
                case 0:
                    num2 = 0;
                    break;
                case 1:
                    num2 = 3;
                    break;
                case 2:
                    num2 = 5;
                    break;
                case 3:
                    num2 = 6;
                    break;
            }
        }
        else
        {
            num = 246;
            num2 = 1;
        }

        return new Vector2((float) num, (float) num2);
    }

    public static Vector2 randPictureTile()
    {
        int num = genRand.Next(3);
        int num2 = 0;
        if (num <= 1)
        {
            int maxValue = 7;
            num = 240;
            num2 = genRand.Next(maxValue);
            if (num2 == 6)
            {
                num2 = genRand.Next(maxValue);
            }

            switch (num2)
            {
                case 0:
                    num2 = 12;
                    break;
                case 1:
                    num2 = 13;
                    break;
                case 2:
                    num2 = 14;
                    break;
                case 3:
                    num2 = 15;
                    break;
                case 4:
                    num2 = 18;
                    break;
                case 5:
                    num2 = 19;
                    break;
                case 6:
                    num2 = 23;
                    break;
            }
        }
        else if (num == 2)
        {
            num = 242;
            int maxValue2 = 17;
            num2 = genRand.Next(maxValue2);
            switch (num2)
            {
                case 14:
                    num2 = 15;
                    break;
                case 15:
                    num2 = 16;
                    break;
                case 16:
                    num2 = 30;
                    break;
            }
        }

        return new Vector2((float) num, (float) num2);
    }

    public static void DungeonStairs(int i, int j, ushort tileType, int wallType)
    {
        Vector2 zero = Vector2.Zero;
        double num = (double) genRand.Next(5, 9);
        int num2 = 1;
        Vector2 value = default(Vector2);
        value.X = (float) i;
        value.Y = (float) j;
        int num3 = genRand.Next(10, 30);
        num2 = ((i <= dEnteranceX) ? 1 : (-1));
        if (i > Main.maxTilesX - 400)
        {
            num2 = -1;
        }
        else if (i < 400)
        {
            num2 = 1;
        }

        zero.Y = -1f;
        zero.X = (float) num2;
        if (genRand.Next(3) != 0)
        {
            zero.X *= 1f + (float) genRand.Next(0, 200) * 0.01f;
        }
        else if (genRand.Next(3) == 0)
        {
            zero.X *= (float) genRand.Next(50, 76) * 0.01f;
        }
        else if (genRand.Next(6) == 0)
        {
            zero.Y *= 2f;
        }

        if (dungeonX < Main.maxTilesX / 2 && zero.X < 0f && (double) zero.X < 0.5)
        {
            zero.X = -0.5f;
        }

        if (dungeonX > Main.maxTilesX / 2 && zero.X > 0f && (double) zero.X > 0.5)
        {
            zero.X = -0.5f;
        }

        while (num3 > 0)
        {
            num3--;
            int num4 = (int) ((double) value.X - num - 4.0 - (double) genRand.Next(6));
            int num5 = (int) ((double) value.X + num + 4.0 + (double) genRand.Next(6));
            int num6 = (int) ((double) value.Y - num - 4.0);
            int num7 = (int) ((double) value.Y + num + 4.0 + (double) genRand.Next(6));
            if (num4 < 0)
            {
                num4 = 0;
            }

            if (num5 > Main.maxTilesX)
            {
                num5 = Main.maxTilesX;
            }

            if (num6 < 0)
            {
                num6 = 0;
            }

            if (num7 > Main.maxTilesY)
            {
                num7 = Main.maxTilesY;
            }

            int num8 = 1;
            if (value.X > (float) (Main.maxTilesX / 2))
            {
                num8 = -1;
            }

            int num9 = (int) (value.X + (float) dxStrength1 * 0.6f * (float) num8 + (float) dxStrength2 * (float) num8);
            int num10 = (int) (dyStrength2 * 0.5);
            if ((double) value.Y < Main.worldSurface - 5.0 &&
                Main.tile[num9, (int) ((double) value.Y - num - 6.0 + (double) num10)].wall == 0 &&
                Main.tile[num9, (int) ((double) value.Y - num - 7.0 + (double) num10)].wall == 0 &&
                Main.tile[num9, (int) ((double) value.Y - num - 8.0 + (double) num10)].wall == 0)
            {
                dSurface = true;
                TileRunner(num9, (int) ((double) value.Y - num - 6.0 + (double) num10), (double) genRand.Next(25, 35),
                    genRand.Next(10, 20), -1, false, 0f, -1f, false, true);
            }

            for (int k = num4; k < num5; k++)
            {
                for (int l = num6; l < num7; l++)
                {
                    Main.tile[k, l].liquid = 0;
                    if (!Main.wallDungeon[Main.tile[k, l].wall])
                    {
                        Main.tile[k, l].wall = 0;
                        Main.tile[k, l].active(true);
                        Main.tile[k, l].type = tileType;
                    }
                }
            }

            for (int m = num4 + 1; m < num5 - 1; m++)
            {
                for (int n = num6 + 1; n < num7 - 1; n++)
                {
                    Main.tile[m, n].wall = (byte) wallType;
                }
            }

            int num11 = 0;
            if (genRand.Next((int) num) == 0)
            {
                num11 = genRand.Next(1, 3);
            }

            num4 = (int) ((double) value.X - num * 0.5 - (double) num11);
            num5 = (int) ((double) value.X + num * 0.5 + (double) num11);
            num6 = (int) ((double) value.Y - num * 0.5 - (double) num11);
            num7 = (int) ((double) value.Y + num * 0.5 + (double) num11);
            if (num4 < 0)
            {
                num4 = 0;
            }

            if (num5 > Main.maxTilesX)
            {
                num5 = Main.maxTilesX;
            }

            if (num6 < 0)
            {
                num6 = 0;
            }

            if (num7 > Main.maxTilesY)
            {
                num7 = Main.maxTilesY;
            }

            for (int num12 = num4; num12 < num5; num12++)
            {
                for (int num13 = num6; num13 < num7; num13++)
                {
                    Main.tile[num12, num13].active(false);
                    PlaceWall(num12, num13, wallType, true);
                }
            }

            if (dSurface)
            {
                num3 = 0;
            }

            value += zero;
            if ((double) value.Y < Main.worldSurface)
            {
                zero.Y *= 0.98f;
            }
        }

        dungeonX = (int) value.X;
        dungeonY = (int) value.Y;
    }

    public static void DungeonHalls(int i, int j, ushort tileType, int wallType, bool forceX = false)
    {
        Vector2 zero = Vector2.Zero;
        double num = (double) genRand.Next(4, 6);
        double num2 = num;
        Vector2 zero2 = Vector2.Zero;
        Vector2 zero3 = Vector2.Zero;
        int num3 = 1;
        Vector2 value = default(Vector2);
        value.X = (float) i;
        value.Y = (float) j;
        int num4 = genRand.Next(35, 80);
        if (forceX)
        {
            num4 += 20;
            lastDungeonHall = Vector2.Zero;
        }
        else if (genRand.Next(5) == 0)
        {
            num *= 2.0;
            num4 /= 2;
        }

        bool flag = false;
        bool flag2 = false;
        bool flag3 = true;
        bool flag4 = false;
        while (!flag)
        {
            flag4 = false;
            if (flag3 && !forceX)
            {
                bool flag5 = true;
                bool flag6 = true;
                bool flag7 = true;
                bool flag8 = true;
                int num5 = num4;
                bool flag9 = false;
                for (int num6 = j; num6 > j - num5; num6--)
                {
                    if (Main.tile[i, num6].wall == wallType)
                    {
                        if (flag9)
                        {
                            flag5 = false;
                            break;
                        }
                    }
                    else
                    {
                        flag9 = true;
                    }
                }

                flag9 = false;
                for (int k = j; k < j + num5; k++)
                {
                    if (Main.tile[i, k].wall == wallType)
                    {
                        if (flag9)
                        {
                            flag6 = false;
                            break;
                        }
                    }
                    else
                    {
                        flag9 = true;
                    }
                }

                flag9 = false;
                for (int num7 = i; num7 > i - num5; num7--)
                {
                    if (Main.tile[num7, j].wall == wallType)
                    {
                        if (flag9)
                        {
                            flag7 = false;
                            break;
                        }
                    }
                    else
                    {
                        flag9 = true;
                    }
                }

                flag9 = false;
                for (int l = i; l < i + num5; l++)
                {
                    if (Main.tile[l, j].wall == wallType)
                    {
                        if (flag9)
                        {
                            flag8 = false;
                            break;
                        }
                    }
                    else
                    {
                        flag9 = true;
                    }
                }

                if (!flag7 && !flag8 && !flag5 && !flag6)
                {
                    num3 = ((genRand.Next(2) != 0) ? 1 : (-1));
                    if (genRand.Next(2) == 0)
                    {
                        flag4 = true;
                    }
                }
                else
                {
                    int num8 = genRand.Next(4);
                    do
                    {
                        num8 = genRand.Next(4);
                    } while ((num8 != 0 || !flag5) && (num8 != 1 || !flag6) && (num8 != 2 || !flag7) &&
                             (num8 != 3 || !flag8));

                    switch (num8)
                    {
                        case 0:
                            num3 = -1;
                            break;
                        case 1:
                            num3 = 1;
                            break;
                        default:
                            flag4 = true;
                            num3 = ((num8 != 2) ? 1 : (-1));
                            break;
                    }
                }
            }
            else
            {
                num3 = ((genRand.Next(2) != 0) ? 1 : (-1));
                if (genRand.Next(2) == 0)
                {
                    flag4 = true;
                }
            }

            flag3 = false;
            if (forceX)
            {
                flag4 = true;
            }

            if (flag4)
            {
                zero2.Y = 0f;
                zero2.X = (float) num3;
                zero3.Y = 0f;
                zero3.X = (float) (-num3);
                zero.Y = 0f;
                zero.X = (float) num3;
                if (genRand.Next(3) == 0)
                {
                    if (genRand.Next(2) == 0)
                    {
                        zero.Y = -0.2f;
                    }
                    else
                    {
                        zero.Y = 0.2f;
                    }
                }
            }
            else
            {
                num += 1.0;
                zero.Y = (float) num3;
                zero.X = 0f;
                zero2.X = 0f;
                zero2.Y = (float) num3;
                zero3.X = 0f;
                zero3.Y = (float) (-num3);
                if (genRand.Next(3) != 0)
                {
                    flag2 = true;
                    if (genRand.Next(2) == 0)
                    {
                        zero.X = (float) genRand.Next(10, 20) * 0.1f;
                    }
                    else
                    {
                        zero.X = (float) (-genRand.Next(10, 20)) * 0.1f;
                    }
                }
                else if (genRand.Next(2) == 0)
                {
                    if (genRand.Next(2) == 0)
                    {
                        zero.X = (float) genRand.Next(20, 40) * 0.01f;
                    }
                    else
                    {
                        zero.X = (float) (-genRand.Next(20, 40)) * 0.01f;
                    }
                }
                else
                {
                    num4 /= 2;
                }
            }

            if (lastDungeonHall != zero3)
            {
                flag = true;
            }
        }

        int num9 = 0;
        if (!forceX)
        {
            if (value.X > (float) (lastMaxTilesX - 200))
            {
                num3 = -1;
                zero2.Y = 0f;
                zero2.X = (float) num3;
                zero.Y = 0f;
                zero.X = (float) num3;
                if (genRand.Next(3) == 0)
                {
                    if (genRand.Next(2) == 0)
                    {
                        zero.Y = -0.2f;
                    }
                    else
                    {
                        zero.Y = 0.2f;
                    }
                }
            }
            else if (value.X < 200f)
            {
                num3 = 1;
                zero2.Y = 0f;
                zero2.X = (float) num3;
                zero.Y = 0f;
                zero.X = (float) num3;
                if (genRand.Next(3) == 0)
                {
                    if (genRand.Next(2) == 0)
                    {
                        zero.Y = -0.2f;
                    }
                    else
                    {
                        zero.Y = 0.2f;
                    }
                }
            }
            else if (value.Y > (float) (lastMaxTilesY - 300))
            {
                num3 = -1;
                num += 1.0;
                zero.Y = (float) num3;
                zero.X = 0f;
                zero2.X = 0f;
                zero2.Y = (float) num3;
                if (genRand.Next(2) == 0)
                {
                    if (genRand.Next(2) == 0)
                    {
                        zero.X = (float) genRand.Next(20, 50) * 0.01f;
                    }
                    else
                    {
                        zero.X = (float) (-genRand.Next(20, 50)) * 0.01f;
                    }
                }
            }
            else if ((double) value.Y < Main.rockLayer + 100.0)
            {
                num3 = 1;
                num += 1.0;
                zero.Y = (float) num3;
                zero.X = 0f;
                zero2.X = 0f;
                zero2.Y = (float) num3;
                if (genRand.Next(3) != 0)
                {
                    flag2 = true;
                    if (genRand.Next(2) == 0)
                    {
                        zero.X = (float) genRand.Next(10, 20) * 0.1f;
                    }
                    else
                    {
                        zero.X = (float) (-genRand.Next(10, 20)) * 0.1f;
                    }
                }
                else if (genRand.Next(2) == 0)
                {
                    if (genRand.Next(2) == 0)
                    {
                        zero.X = (float) genRand.Next(20, 50) * 0.01f;
                    }
                    else
                    {
                        zero.X = (float) genRand.Next(20, 50) * 0.01f;
                    }
                }
            }
            else if (value.X < (float) (Main.maxTilesX / 2) && (double) value.X > (double) Main.maxTilesX * 0.25)
            {
                num3 = -1;
                zero2.Y = 0f;
                zero2.X = (float) num3;
                zero.Y = 0f;
                zero.X = (float) num3;
                if (genRand.Next(3) == 0)
                {
                    if (genRand.Next(2) == 0)
                    {
                        zero.Y = -0.2f;
                    }
                    else
                    {
                        zero.Y = 0.2f;
                    }
                }
            }
            else if (value.X > (float) (Main.maxTilesX / 2) && (double) value.X < (double) Main.maxTilesX * 0.75)
            {
                num3 = 1;
                zero2.Y = 0f;
                zero2.X = (float) num3;
                zero.Y = 0f;
                zero.X = (float) num3;
                if (genRand.Next(3) == 0)
                {
                    if (genRand.Next(2) == 0)
                    {
                        zero.Y = -0.2f;
                    }
                    else
                    {
                        zero.Y = 0.2f;
                    }
                }
            }
        }

        if (zero2.Y == 0f)
        {
            DDoorX[numDDoors] = (int) value.X;
            DDoorY[numDDoors] = (int) value.Y;
            DDoorPos[numDDoors] = 0;
            numDDoors++;
        }
        else
        {
            DPlatX[numDPlats] = (int) value.X;
            DPlatY[numDPlats] = (int) value.Y;
            numDPlats++;
        }

        lastDungeonHall = zero2;
        if (Math.Abs(zero.X) > Math.Abs(zero.Y) && genRand.Next(3) != 0)
        {
            num = (double) (int) ((double) (float) num2 * ((double) genRand.Next(110, 150) * 0.01));
        }

        while (num4 > 0)
        {
            num9++;
            if (zero2.X > 0f && value.X > (float) (Main.maxTilesX - 100))
            {
                num4 = 0;
            }
            else if (zero2.X < 0f && value.X < 100f)
            {
                num4 = 0;
            }
            else if (zero2.Y > 0f && value.Y > (float) (Main.maxTilesY - 100))
            {
                num4 = 0;
            }
            else if (zero2.Y < 0f && (double) value.Y < Main.rockLayer + 50.0)
            {
                num4 = 0;
            }

            num4--;
            int num10 = (int) ((double) value.X - num - 4.0 - (double) genRand.Next(6));
            int num11 = (int) ((double) value.X + num + 4.0 + (double) genRand.Next(6));
            int num12 = (int) ((double) value.Y - num - 4.0 - (double) genRand.Next(6));
            int num13 = (int) ((double) value.Y + num + 4.0 + (double) genRand.Next(6));
            if (num10 < 0)
            {
                num10 = 0;
            }

            if (num11 > Main.maxTilesX)
            {
                num11 = Main.maxTilesX;
            }

            if (num12 < 0)
            {
                num12 = 0;
            }

            if (num13 > Main.maxTilesY)
            {
                num13 = Main.maxTilesY;
            }

            for (int m = num10; m < num11; m++)
            {
                for (int n = num12; n < num13; n++)
                {
                    if (m < dMinX)
                    {
                        dMinX = m;
                    }

                    if (m > dMaxX)
                    {
                        dMaxX = m;
                    }

                    if (n > dMaxY)
                    {
                        dMaxY = n;
                    }

                    Main.tile[m, n].liquid = 0;
                    if (!Main.wallDungeon[Main.tile[m, n].wall])
                    {
                        Main.tile[m, n].active(true);
                        Main.tile[m, n].type = tileType;
                    }
                }
            }

            for (int num14 = num10 + 1; num14 < num11 - 1; num14++)
            {
                for (int num15 = num12 + 1; num15 < num13 - 1; num15++)
                {
                    Main.tile[num14, num15].wall = (byte) wallType;
                }
            }

            int num16 = 0;
            if (zero.Y == 0f && genRand.Next((int) num + 1) == 0)
            {
                num16 = genRand.Next(1, 3);
            }
            else if (zero.X == 0f && genRand.Next((int) num - 1) == 0)
            {
                num16 = genRand.Next(1, 3);
            }
            else if (genRand.Next((int) num * 3) == 0)
            {
                num16 = genRand.Next(1, 3);
            }

            num10 = (int) ((double) value.X - num * 0.5 - (double) num16);
            num11 = (int) ((double) value.X + num * 0.5 + (double) num16);
            num12 = (int) ((double) value.Y - num * 0.5 - (double) num16);
            num13 = (int) ((double) value.Y + num * 0.5 + (double) num16);
            if (num10 < 0)
            {
                num10 = 0;
            }

            if (num11 > Main.maxTilesX)
            {
                num11 = Main.maxTilesX;
            }

            if (num12 < 0)
            {
                num12 = 0;
            }

            if (num13 > Main.maxTilesY)
            {
                num13 = Main.maxTilesY;
            }

            for (int num17 = num10; num17 < num11; num17++)
            {
                for (int num18 = num12; num18 < num13; num18++)
                {
                    Main.tile[num17, num18].active(false);
                    Main.tile[num17, num18].wall = (byte) wallType;
                }
            }

            value += zero;
            if (flag2 && num9 > genRand.Next(10, 20))
            {
                num9 = 0;
                zero.X *= -1f;
            }
        }

        dungeonX = (int) value.X;
        dungeonY = (int) value.Y;
        if (zero2.Y == 0f)
        {
            DDoorX[numDDoors] = (int) value.X;
            DDoorY[numDDoors] = (int) value.Y;
            DDoorPos[numDDoors] = 0;
            numDDoors++;
        }
        else
        {
            DPlatX[numDPlats] = (int) value.X;
            DPlatY[numDPlats] = (int) value.Y;
            numDPlats++;
        }
    }

    public static void DungeonRoom(int i, int j, ushort tileType, int wallType)
    {
        double num = (double) genRand.Next(15, 30);
        Vector2 value = default(Vector2);
        value.X = (float) genRand.Next(-10, 11) * 0.1f;
        value.Y = (float) genRand.Next(-10, 11) * 0.1f;
        Vector2 value2 = default(Vector2);
        value2.X = (float) i;
        value2.Y = (float) j - (float) num / 2f;
        int num2 = genRand.Next(10, 20);
        double num3 = (double) value2.X;
        double num4 = (double) value2.X;
        double num5 = (double) value2.Y;
        double num6 = (double) value2.Y;
        while (num2 > 0)
        {
            num2--;
            int num7 = (int) ((double) value2.X - num * 0.800000011920929 - 5.0);
            int num8 = (int) ((double) value2.X + num * 0.800000011920929 + 5.0);
            int num9 = (int) ((double) value2.Y - num * 0.800000011920929 - 5.0);
            int num10 = (int) ((double) value2.Y + num * 0.800000011920929 + 5.0);
            if (num7 < 0)
            {
                num7 = 0;
            }

            if (num8 > Main.maxTilesX)
            {
                num8 = Main.maxTilesX;
            }

            if (num9 < 0)
            {
                num9 = 0;
            }

            if (num10 > Main.maxTilesY)
            {
                num10 = Main.maxTilesY;
            }

            for (int k = num7; k < num8; k++)
            {
                for (int l = num9; l < num10; l++)
                {
                    if (k < dMinX)
                    {
                        dMinX = k;
                    }

                    if (k > dMaxX)
                    {
                        dMaxX = k;
                    }

                    if (l > dMaxY)
                    {
                        dMaxY = l;
                    }

                    Main.tile[k, l].liquid = 0;
                    if (!Main.wallDungeon[Main.tile[k, l].wall])
                    {
                        Main.tile[k, l].active(true);
                        Main.tile[k, l].type = tileType;
                    }
                }
            }

            for (int m = num7 + 1; m < num8 - 1; m++)
            {
                for (int n = num9 + 1; n < num10 - 1; n++)
                {
                    Main.tile[m, n].wall = (byte) wallType;
                }
            }

            num7 = (int) ((double) value2.X - num * 0.5);
            num8 = (int) ((double) value2.X + num * 0.5);
            num9 = (int) ((double) value2.Y - num * 0.5);
            num10 = (int) ((double) value2.Y + num * 0.5);
            if (num7 < 0)
            {
                num7 = 0;
            }

            if (num8 > Main.maxTilesX)
            {
                num8 = Main.maxTilesX;
            }

            if (num9 < 0)
            {
                num9 = 0;
            }

            if (num10 > Main.maxTilesY)
            {
                num10 = Main.maxTilesY;
            }

            if ((double) num7 < num3)
            {
                num3 = (double) num7;
            }

            if ((double) num8 > num4)
            {
                num4 = (double) num8;
            }

            if ((double) num9 < num5)
            {
                num5 = (double) num9;
            }

            if ((double) num10 > num6)
            {
                num6 = (double) num10;
            }

            for (int num11 = num7; num11 < num8; num11++)
            {
                for (int num12 = num9; num12 < num10; num12++)
                {
                    Main.tile[num11, num12].active(false);
                    Main.tile[num11, num12].wall = (byte) wallType;
                }
            }

            value2 += value;
            value.X += (float) genRand.Next(-10, 11) * 0.05f;
            value.Y += (float) genRand.Next(-10, 11) * 0.05f;
            if (value.X > 1f)
            {
                value.X = 1f;
            }

            if (value.X < -1f)
            {
                value.X = -1f;
            }

            if (value.Y > 1f)
            {
                value.Y = 1f;
            }

            if (value.Y < -1f)
            {
                value.Y = -1f;
            }
        }

        dRoomX[numDRooms] = (int) value2.X;
        dRoomY[numDRooms] = (int) value2.Y;
        dRoomSize[numDRooms] = (int) num;
        dRoomL[numDRooms] = (int) num3;
        dRoomR[numDRooms] = (int) num4;
        dRoomT[numDRooms] = (int) num5;
        dRoomB[numDRooms] = (int) num6;
        dRoomTreasure[numDRooms] = false;
        numDRooms++;
    }

    public static void DungeonEnt(int i, int j, ushort tileType, int wallType)
    {
        int num = 60;
        for (int k = i - num; k < i + num; k++)
        {
            for (int l = j - num; l < j + num; l++)
            {
                Main.tile[k, l].liquid = 0;
                Main.tile[k, l].lava(false);
            }
        }

        double num2 = dxStrength1;
        double num3 = dyStrength1;
        Vector2 vector = default(Vector2);
        vector.X = (float) i;
        vector.Y = (float) j - (float) num3 / 2f;
        dMinY = (int) vector.Y;
        int num4 = 1;
        if (i > Main.maxTilesX / 2)
        {
            num4 = -1;
        }

        int num5 = (int) ((double) vector.X - num2 * 0.60000002384185791 - (double) genRand.Next(2, 5));
        int num6 = (int) ((double) vector.X + num2 * 0.60000002384185791 + (double) genRand.Next(2, 5));
        int num7 = (int) ((double) vector.Y - num3 * 0.60000002384185791 - (double) genRand.Next(2, 5));
        int num8 = (int) ((double) vector.Y + num3 * 0.60000002384185791 + (double) genRand.Next(8, 16));
        if (num5 < 0)
        {
            num5 = 0;
        }

        if (num6 > Main.maxTilesX)
        {
            num6 = Main.maxTilesX;
        }

        if (num7 < 0)
        {
            num7 = 0;
        }

        if (num8 > Main.maxTilesY)
        {
            num8 = Main.maxTilesY;
        }

        for (int m = num5; m < num6; m++)
        {
            for (int n = num7; n < num8; n++)
            {
                Main.tile[m, n].liquid = 0;
                if (Main.tile[m, n].wall != wallType)
                {
                    Main.tile[m, n].wall = 0;
                    if (m > num5 + 1 && m < num6 - 2 && n > num7 + 1 && n < num8 - 2)
                    {
                        Main.tile[m, n].wall = (byte) wallType;
                    }

                    Main.tile[m, n].active(true);
                    Main.tile[m, n].type = tileType;
                }
            }
        }

        int num9 = num5;
        int num10 = num5 + 5 + genRand.Next(4);
        int num11 = num7 - 3 - genRand.Next(3);
        int num12 = num7;
        for (int num13 = num9; num13 < num10; num13++)
        {
            for (int num14 = num11; num14 < num12; num14++)
            {
                if (Main.tile[num13, num14].wall != wallType)
                {
                    Main.tile[num13, num14].active(true);
                    Main.tile[num13, num14].type = tileType;
                }
            }
        }

        num9 = num6 - 5 - genRand.Next(4);
        num10 = num6;
        num11 = num7 - 3 - genRand.Next(3);
        num12 = num7;
        for (int num15 = num9; num15 < num10; num15++)
        {
            for (int num16 = num11; num16 < num12; num16++)
            {
                if (Main.tile[num15, num16].wall != wallType)
                {
                    Main.tile[num15, num16].active(true);
                    Main.tile[num15, num16].type = tileType;
                }
            }
        }

        int num17 = 1 + genRand.Next(2);
        int num18 = 2 + genRand.Next(4);
        int num19 = 0;
        for (int num20 = num5; num20 < num6; num20++)
        {
            for (int num21 = num7 - num17; num21 < num7; num21++)
            {
                if (Main.tile[num20, num21].wall != wallType)
                {
                    Main.tile[num20, num21].active(true);
                    Main.tile[num20, num21].type = tileType;
                }
            }

            num19++;
            if (num19 >= num18)
            {
                num20 += num18;
                num19 = 0;
            }
        }

        for (int num22 = num5; num22 < num6; num22++)
        {
            for (int num23 = num8; (double) num23 < Main.worldSurface; num23++)
            {
                if (!Main.wallDungeon[Main.tile[num22, num23].wall])
                {
                    Main.tile[num22, num23].active(true);
                    Main.tile[num22, num23].type = tileType;
                }

                Main.tile[num22, num23].wall = (byte) wallType;
            }
        }

        num5 = (int) ((double) vector.X - num2 * 0.60000002384185791);
        num6 = (int) ((double) vector.X + num2 * 0.60000002384185791);
        num7 = (int) ((double) vector.Y - num3 * 0.60000002384185791);
        num8 = (int) ((double) vector.Y + num3 * 0.60000002384185791);
        if (num5 < 0)
        {
            num5 = 0;
        }

        if (num6 > Main.maxTilesX)
        {
            num6 = Main.maxTilesX;
        }

        if (num7 < 0)
        {
            num7 = 0;
        }

        if (num8 > Main.maxTilesY)
        {
            num8 = Main.maxTilesY;
        }

        for (int num24 = num5; num24 < num6; num24++)
        {
            for (int num25 = num7; num25 < num8; num25++)
            {
                Main.tile[num24, num25].wall = (byte) wallType;
            }
        }

        num5 = (int) ((double) vector.X - num2 * 0.6 - 1.0);
        num6 = (int) ((double) vector.X + num2 * 0.6 + 1.0);
        num7 = (int) ((double) vector.Y - num3 * 0.6 - 1.0);
        num8 = (int) ((double) vector.Y + num3 * 0.6 + 1.0);
        if (num5 < 0)
        {
            num5 = 0;
        }

        if (num6 > Main.maxTilesX)
        {
            num6 = Main.maxTilesX;
        }

        if (num7 < 0)
        {
            num7 = 0;
        }

        if (num8 > Main.maxTilesY)
        {
            num8 = Main.maxTilesY;
        }

        for (int num26 = num5; num26 < num6; num26++)
        {
            for (int num27 = num7; num27 < num8; num27++)
            {
                Main.tile[num26, num27].wall = (byte) wallType;
            }
        }

        num5 = (int) ((double) vector.X - num2 * 0.5);
        num6 = (int) ((double) vector.X + num2 * 0.5);
        num7 = (int) ((double) vector.Y - num3 * 0.5);
        num8 = (int) ((double) vector.Y + num3 * 0.5);
        if (num5 < 0)
        {
            num5 = 0;
        }

        if (num6 > Main.maxTilesX)
        {
            num6 = Main.maxTilesX;
        }

        if (num7 < 0)
        {
            num7 = 0;
        }

        if (num8 > Main.maxTilesY)
        {
            num8 = Main.maxTilesY;
        }

        for (int num28 = num5; num28 < num6; num28++)
        {
            for (int num29 = num7; num29 < num8; num29++)
            {
                Main.tile[num28, num29].active(false);
                Main.tile[num28, num29].wall = (byte) wallType;
            }
        }

        int num30 = (int) vector.X;
        int num31 = num8;
        for (int num32 = 0; num32 < 20; num32++)
        {
            num30 = (int) vector.X - num32;
            if (!Main.tile[num30, num31].active() && Main.wallDungeon[Main.tile[num30, num31].wall])
            {
                DPlatX[numDPlats] = num30;
                DPlatY[numDPlats] = num31;
                numDPlats++;
                break;
            }

            num30 = (int) vector.X + num32;
            if (!Main.tile[num30, num31].active() && Main.wallDungeon[Main.tile[num30, num31].wall])
            {
                DPlatX[numDPlats] = num30;
                DPlatY[numDPlats] = num31;
                numDPlats++;
                break;
            }
        }

        vector.X += (float) num2 * 0.6f * (float) num4;
        vector.Y += (float) num3 * 0.5f;
        num2 = dxStrength2;
        num3 = dyStrength2;
        vector.X += (float) num2 * 0.55f * (float) num4;
        vector.Y -= (float) num3 * 0.5f;
        num5 = (int) ((double) vector.X - num2 * 0.60000002384185791 - (double) genRand.Next(1, 3));
        num6 = (int) ((double) vector.X + num2 * 0.60000002384185791 + (double) genRand.Next(1, 3));
        num7 = (int) ((double) vector.Y - num3 * 0.60000002384185791 - (double) genRand.Next(1, 3));
        num8 = (int) ((double) vector.Y + num3 * 0.60000002384185791 + (double) genRand.Next(6, 16));
        if (num5 < 0)
        {
            num5 = 0;
        }

        if (num6 > Main.maxTilesX)
        {
            num6 = Main.maxTilesX;
        }

        if (num7 < 0)
        {
            num7 = 0;
        }

        if (num8 > Main.maxTilesY)
        {
            num8 = Main.maxTilesY;
        }

        for (int num33 = num5; num33 < num6; num33++)
        {
            for (int num34 = num7; num34 < num8; num34++)
            {
                if (Main.tile[num33, num34].wall != wallType)
                {
                    bool flag = true;
                    if (num4 < 0)
                    {
                        if ((double) num33 < (double) vector.X - num2 * 0.5)
                        {
                            flag = false;
                        }
                    }
                    else if ((double) num33 > (double) vector.X + num2 * 0.5 - 1.0)
                    {
                        flag = false;
                    }

                    if (flag)
                    {
                        Main.tile[num33, num34].wall = 0;
                        Main.tile[num33, num34].active(true);
                        Main.tile[num33, num34].type = tileType;
                    }
                }
            }
        }

        for (int num35 = num5; num35 < num6; num35++)
        {
            for (int num36 = num8; (double) num36 < Main.worldSurface; num36++)
            {
                if (!Main.wallDungeon[Main.tile[num35, num36].wall])
                {
                    Main.tile[num35, num36].active(true);
                    Main.tile[num35, num36].type = tileType;
                }

                Main.tile[num35, num36].wall = (byte) wallType;
            }
        }

        num5 = (int) ((double) vector.X - num2 * 0.5);
        num6 = (int) ((double) vector.X + num2 * 0.5);
        num9 = num5;
        if (num4 < 0)
        {
            num9++;
        }

        num10 = num9 + 5 + genRand.Next(4);
        num11 = num7 - 3 - genRand.Next(3);
        num12 = num7;
        for (int num37 = num9; num37 < num10; num37++)
        {
            for (int num38 = num11; num38 < num12; num38++)
            {
                if (Main.tile[num37, num38].wall != wallType)
                {
                    Main.tile[num37, num38].active(true);
                    Main.tile[num37, num38].type = tileType;
                }
            }
        }

        num9 = num6 - 5 - genRand.Next(4);
        num10 = num6;
        num11 = num7 - 3 - genRand.Next(3);
        num12 = num7;
        for (int num39 = num9; num39 < num10; num39++)
        {
            for (int num40 = num11; num40 < num12; num40++)
            {
                if (Main.tile[num39, num40].wall != wallType)
                {
                    Main.tile[num39, num40].active(true);
                    Main.tile[num39, num40].type = tileType;
                }
            }
        }

        num17 = 1 + genRand.Next(2);
        num18 = 2 + genRand.Next(4);
        num19 = 0;
        if (num4 < 0)
        {
            num6++;
        }

        for (int num41 = num5 + 1; num41 < num6 - 1; num41++)
        {
            for (int num42 = num7 - num17; num42 < num7; num42++)
            {
                if (Main.tile[num41, num42].wall != wallType)
                {
                    Main.tile[num41, num42].active(true);
                    Main.tile[num41, num42].type = tileType;
                }
            }

            num19++;
            if (num19 >= num18)
            {
                num41 += num18;
                num19 = 0;
            }
        }

        num5 = (int) ((double) vector.X - num2 * 0.6);
        num6 = (int) ((double) vector.X + num2 * 0.6);
        num7 = (int) ((double) vector.Y - num3 * 0.6);
        num8 = (int) ((double) vector.Y + num3 * 0.6);
        if (num5 < 0)
        {
            num5 = 0;
        }

        if (num6 > Main.maxTilesX)
        {
            num6 = Main.maxTilesX;
        }

        if (num7 < 0)
        {
            num7 = 0;
        }

        if (num8 > Main.maxTilesY)
        {
            num8 = Main.maxTilesY;
        }

        for (int num43 = num5; num43 < num6; num43++)
        {
            for (int num44 = num7; num44 < num8; num44++)
            {
                Main.tile[num43, num44].wall = 0;
            }
        }

        num5 = (int) ((double) vector.X - num2 * 0.5);
        num6 = (int) ((double) vector.X + num2 * 0.5);
        num7 = (int) ((double) vector.Y - num3 * 0.5);
        num8 = (int) ((double) vector.Y + num3 * 0.5);
        if (num5 < 0)
        {
            num5 = 0;
        }

        if (num6 > Main.maxTilesX)
        {
            num6 = Main.maxTilesX;
        }

        if (num7 < 0)
        {
            num7 = 0;
        }

        if (num8 > Main.maxTilesY)
        {
            num8 = Main.maxTilesY;
        }

        for (int num45 = num5; num45 < num6; num45++)
        {
            for (int num46 = num7; num46 < num8; num46++)
            {
                Main.tile[num45, num46].active(false);
                Main.tile[num45, num46].wall = 0;
            }
        }

        for (int num47 = num5; num47 < num6; num47++)
        {
            if (!Main.tile[num47, num8].active())
            {
                Main.tile[num47, num8].active(true);
                Main.tile[num47, num8].type = 19;
                if (wallType == 7)
                {
                    Main.tile[num47, num8].frameY = 108;
                }

                if (wallType == 8)
                {
                    Main.tile[num47, num8].frameY = 144;
                }

                if (wallType == 9)
                {
                    Main.tile[num47, num8].frameY = 126;
                }
            }
        }

        Main.dungeonX = (int) vector.X;
        Main.dungeonY = num8;
        int num48 = NPC.NewNPC(Main.dungeonX * 16 + 8, Main.dungeonY * 16, 37, 0, 0f, 0f, 0f, 0f, 255);
        Main.npc[num48].homeless = false;
        Main.npc[num48].homeTileX = Main.dungeonX;
        Main.npc[num48].homeTileY = Main.dungeonY;
        if (num4 == 1)
        {
            int num49 = 0;
            for (int num50 = num6; num50 < num6 + 50; num50++)
            {
                num49++;
                for (int num51 = num8 + num49; num51 < num8 + 50; num51++)
                {
                    if (!Main.wallDungeon[Main.tile[num50, num51].wall])
                    {
                        Main.tile[num50, num51].active(true);
                        Main.tile[num50, num51].type = tileType;
                    }
                }
            }
        }
        else
        {
            int num52 = 0;
            for (int num53 = num5; num53 > num5 - 50; num53--)
            {
                num52++;
                for (int num54 = num8 + num52; num54 < num8 + 50; num54++)
                {
                    if (!Main.wallDungeon[Main.tile[num53, num54].wall])
                    {
                        Main.tile[num53, num54].active(true);
                        Main.tile[num53, num54].type = tileType;
                    }
                }
            }
        }

        num17 = 1 + genRand.Next(2);
        num18 = 2 + genRand.Next(4);
        num19 = 0;
        num5 = (int) ((double) vector.X - num2 * 0.5);
        num6 = (int) ((double) vector.X + num2 * 0.5);
        num5 += 2;
        num6 -= 2;
        for (int num55 = num5; num55 < num6; num55++)
        {
            for (int num56 = num7; num56 < num8; num56++)
            {
                PlaceWall(num55, num56, wallType, true);
            }

            num19++;
            if (num19 >= num18)
            {
                num55 += num18 * 2;
                num19 = 0;
            }
        }

        vector.X -= (float) num2 * 0.6f * (float) num4;
        vector.Y += (float) num3 * 0.5f;
        num2 = 15.0;
        num3 = 3.0;
        vector.Y -= (float) num3 * 0.5f;
        num5 = (int) ((double) vector.X - num2 * 0.5);
        num6 = (int) ((double) vector.X + num2 * 0.5);
        num7 = (int) ((double) vector.Y - num3 * 0.5);
        num8 = (int) ((double) vector.Y + num3 * 0.5);
        if (num5 < 0)
        {
            num5 = 0;
        }

        if (num6 > Main.maxTilesX)
        {
            num6 = Main.maxTilesX;
        }

        if (num7 < 0)
        {
            num7 = 0;
        }

        if (num8 > Main.maxTilesY)
        {
            num8 = Main.maxTilesY;
        }

        for (int num57 = num5; num57 < num6; num57++)
        {
            for (int num58 = num7; num58 < num8; num58++)
            {
                Main.tile[num57, num58].active(false);
            }
        }

        if (num4 < 0)
        {
            vector.X -= 1f;
        }

        PlaceTile((int) vector.X, (int) vector.Y + 1, 10, true, false, -1, 13);
    }

    public static bool AddBuriedChest(Point point, int contain = 0, bool notNearOtherChests = false, int Style = -1)
    {
        return AddBuriedChest(point.X, point.Y, contain, notNearOtherChests, Style);
    }

    public static bool AddBuriedChest(int i, int j, int contain = 0, bool notNearOtherChests = false, int Style = -1)
    {
        bool flag = false;
        bool flag2 = false;
        for (int k = j; k < Main.maxTilesY; k++)
        {
            if (SolidTile(i, k))
            {
                bool flag3 = false;
                int num = k;
                int num2 = -1;
                int num3 = 0;
                if ((double) num >= Main.worldSurface + 25.0 || contain > 0)
                {
                    num3 = 1;
                    if (Style == 10 || contain == 211 || contain == 212 || contain == 213 || contain == 753)
                    {
                        num3 = 10;
                        flag2 = true;
                    }
                }

                if (Style >= 0)
                {
                    num3 = Style;
                }

                if (num3 == 11 || (contain == 0 && (double) num >= Main.worldSurface + 25.0 &&
                                   num <= Main.maxTilesY - 205 &&
                                   (Main.tile[i, k].type == 147 || Main.tile[i, k].type == 161 ||
                                    Main.tile[i, k].type == 162)))
                {
                    flag = true;
                    num3 = 11;
                    switch (genRand.Next(6))
                    {
                        case 0:
                            contain = 670;
                            break;
                        case 1:
                            contain = 724;
                            break;
                        case 2:
                            contain = 950;
                            break;
                        case 3:
                            contain = 1319;
                            break;
                        case 4:
                            contain = 987;
                            break;
                        default:
                            contain = 1579;
                            break;
                    }

                    if (genRand.Next(20) == 0)
                    {
                        contain = 997;
                    }

                    if (genRand.Next(50) == 0)
                    {
                        contain = 669;
                    }
                }

                if (num > Main.maxTilesY - 205 && contain == 0)
                {
                    if (hellChest == hellChestItem[0])
                    {
                        contain = 274;
                        num3 = 4;
                        flag3 = true;
                    }
                    else if (hellChest == hellChestItem[1])
                    {
                        contain = 220;
                        num3 = 4;
                        flag3 = true;
                    }
                    else if (hellChest == hellChestItem[2])
                    {
                        contain = 112;
                        num3 = 4;
                        flag3 = true;
                    }
                    else if (hellChest == hellChestItem[3])
                    {
                        contain = 218;
                        num3 = 4;
                        flag3 = true;
                    }
                    else
                    {
                        contain = 3019;
                        num3 = 4;
                        flag3 = true;
                    }
                }

                num2 = PlaceChest(i - 1, num - 1, 21, notNearOtherChests, num3);
                if (num2 >= 0)
                {
                    if (flag3)
                    {
                        hellChest++;
                        if (hellChest > 4)
                        {
                            hellChest = 0;
                        }
                    }

                    int num4 = 0;
                    while (num4 == 0)
                    {
                        if ((num3 == 0 && (double) num < Main.worldSurface + 25.0) || contain == 848)
                        {
                            if (contain > 0)
                            {
                                Main.chest[num2].item[num4].SetDefaults(contain, false);
                                Main.chest[num2].item[num4].Prefix(-1);
                                switch (contain)
                                {
                                    case 848:
                                        num4++;
                                        Main.chest[num2].item[num4].SetDefaults(866, false);
                                        break;
                                    case 832:
                                        num4++;
                                        Main.chest[num2].item[num4].SetDefaults(933, false);
                                        break;
                                }

                                num4++;
                            }
                            else
                            {
                                int num5 = genRand.Next(11);
                                if (num5 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(280, false);
                                    Main.chest[num2].item[num4].Prefix(-1);
                                }

                                if (num5 == 1)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(281, false);
                                    Main.chest[num2].item[num4].Prefix(-1);
                                }

                                if (num5 == 2)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(284, false);
                                    Main.chest[num2].item[num4].Prefix(-1);
                                }

                                if (num5 == 3)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(282, false);
                                    Main.chest[num2].item[num4].stack = genRand.Next(40, 75);
                                }

                                if (num5 == 4)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(279, false);
                                    Main.chest[num2].item[num4].stack = genRand.Next(70, 150);
                                }

                                if (num5 == 5)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(285, false);
                                    Main.chest[num2].item[num4].Prefix(-1);
                                }

                                if (num5 == 6)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(953, false);
                                    Main.chest[num2].item[num4].Prefix(-1);
                                }

                                if (num5 == 7)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(946, false);
                                    Main.chest[num2].item[num4].Prefix(-1);
                                }

                                if (num5 == 8)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(3068, false);
                                    Main.chest[num2].item[num4].Prefix(-1);
                                }

                                if (num5 == 9)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(3069, false);
                                    Main.chest[num2].item[num4].Prefix(-1);
                                }

                                if (num5 == 10)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(3084, false);
                                    Main.chest[num2].item[num4].Prefix(-1);
                                }

                                num4++;
                            }

                            if (genRand.Next(6) == 0)
                            {
                                Main.chest[num2].item[num4].SetDefaults(3093, false);
                                Main.chest[num2].item[num4].stack = 1;
                                if (genRand.Next(5) == 0)
                                {
                                    Main.chest[num2].item[num4].stack += genRand.Next(2);
                                }

                                if (genRand.Next(10) == 0)
                                {
                                    Main.chest[num2].item[num4].stack += genRand.Next(3);
                                }

                                num4++;
                            }

                            if (genRand.Next(3) == 0)
                            {
                                Main.chest[num2].item[num4].SetDefaults(168, false);
                                Main.chest[num2].item[num4].stack = genRand.Next(3, 6);
                                num4++;
                            }

                            if (genRand.Next(2) == 0)
                            {
                                int num6 = genRand.Next(2);
                                int stack = genRand.Next(8) + 3;
                                if (num6 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(copperBar, false);
                                }

                                if (num6 == 1)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(ironBar, false);
                                }

                                Main.chest[num2].item[num4].stack = stack;
                                num4++;
                            }

                            if (genRand.Next(2) == 0)
                            {
                                int stack2 = genRand.Next(50, 101);
                                Main.chest[num2].item[num4].SetDefaults(965, false);
                                Main.chest[num2].item[num4].stack = stack2;
                                num4++;
                            }

                            if (genRand.Next(3) != 0)
                            {
                                int num7 = genRand.Next(2);
                                int stack3 = genRand.Next(26) + 25;
                                if (num7 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(40, false);
                                }

                                if (num7 == 1)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(42, false);
                                }

                                Main.chest[num2].item[num4].stack = stack3;
                                num4++;
                            }

                            if (genRand.Next(2) == 0)
                            {
                                int num8 = genRand.Next(1);
                                int stack4 = genRand.Next(3) + 3;
                                if (num8 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(28, false);
                                }

                                Main.chest[num2].item[num4].stack = stack4;
                                num4++;
                            }

                            if (genRand.Next(3) != 0)
                            {
                                Main.chest[num2].item[num4].SetDefaults(2350, false);
                                Main.chest[num2].item[num4].stack = genRand.Next(2, 5);
                                num4++;
                            }

                            if (genRand.Next(3) > 0)
                            {
                                int num9 = genRand.Next(6);
                                int stack5 = genRand.Next(1, 3);
                                if (num9 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(292, false);
                                }

                                if (num9 == 1)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(298, false);
                                }

                                if (num9 == 2)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(299, false);
                                }

                                if (num9 == 3)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(290, false);
                                }

                                if (num9 == 4)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(2322, false);
                                }

                                if (num9 == 5)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(2325, false);
                                }

                                Main.chest[num2].item[num4].stack = stack5;
                                num4++;
                            }

                            if (genRand.Next(2) == 0)
                            {
                                int num10 = genRand.Next(2);
                                int stack6 = genRand.Next(11) + 10;
                                if (num10 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(8, false);
                                }

                                if (num10 == 1)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(31, false);
                                }

                                Main.chest[num2].item[num4].stack = stack6;
                                num4++;
                            }

                            if (genRand.Next(2) == 0)
                            {
                                Main.chest[num2].item[num4].SetDefaults(72, false);
                                Main.chest[num2].item[num4].stack = genRand.Next(10, 30);
                                num4++;
                            }
                        }
                        else if ((double) num < Main.rockLayer)
                        {
                            if (contain > 0)
                            {
                                if (contain == 832)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(933, false);
                                    num4++;
                                }

                                Main.chest[num2].item[num4].SetDefaults(contain, false);
                                Main.chest[num2].item[num4].Prefix(-1);
                                num4++;
                            }
                            else
                            {
                                int num11 = genRand.Next(7);
                                if (genRand.Next(20) == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(997, false);
                                    Main.chest[num2].item[num4].Prefix(-1);
                                }
                                else
                                {
                                    if (num11 == 0)
                                    {
                                        Main.chest[num2].item[num4].SetDefaults(49, false);
                                        Main.chest[num2].item[num4].Prefix(-1);
                                    }

                                    if (num11 == 1)
                                    {
                                        Main.chest[num2].item[num4].SetDefaults(50, false);
                                        Main.chest[num2].item[num4].Prefix(-1);
                                    }

                                    if (num11 == 2)
                                    {
                                        Main.chest[num2].item[num4].SetDefaults(53, false);
                                        Main.chest[num2].item[num4].Prefix(-1);
                                    }

                                    if (num11 == 3)
                                    {
                                        Main.chest[num2].item[num4].SetDefaults(54, false);
                                        Main.chest[num2].item[num4].Prefix(-1);
                                    }

                                    if (num11 == 4)
                                    {
                                        Main.chest[num2].item[num4].SetDefaults(55, false);
                                        Main.chest[num2].item[num4].Prefix(-1);
                                    }

                                    if (num11 == 5)
                                    {
                                        Main.chest[num2].item[num4].SetDefaults(975, false);
                                        Main.chest[num2].item[num4].Prefix(-1);
                                    }

                                    if (num11 == 6)
                                    {
                                        Main.chest[num2].item[num4].SetDefaults(930, false);
                                        Main.chest[num2].item[num4].Prefix(-1);
                                        num4++;
                                        Main.chest[num2].item[num4].SetDefaults(931, false);
                                        Main.chest[num2].item[num4].stack = genRand.Next(26) + 25;
                                    }
                                }

                                num4++;
                            }

                            if (genRand.Next(3) == 0)
                            {
                                Main.chest[num2].item[num4].SetDefaults(166, false);
                                Main.chest[num2].item[num4].stack = genRand.Next(10, 20);
                                num4++;
                            }

                            if (genRand.Next(5) == 0)
                            {
                                Main.chest[num2].item[num4].SetDefaults(52, false);
                                num4++;
                            }

                            if (genRand.Next(3) == 0)
                            {
                                int stack7 = genRand.Next(50, 101);
                                Main.chest[num2].item[num4].SetDefaults(965, false);
                                Main.chest[num2].item[num4].stack = stack7;
                                num4++;
                            }

                            if (genRand.Next(2) == 0)
                            {
                                int num12 = genRand.Next(2);
                                int stack8 = genRand.Next(10) + 5;
                                if (num12 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(ironBar, false);
                                }

                                if (num12 == 1)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(silverBar, false);
                                }

                                Main.chest[num2].item[num4].stack = stack8;
                                num4++;
                            }

                            if (genRand.Next(2) == 0)
                            {
                                int num13 = genRand.Next(2);
                                int stack9 = genRand.Next(25) + 25;
                                if (num13 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(40, false);
                                }

                                if (num13 == 1)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(42, false);
                                }

                                Main.chest[num2].item[num4].stack = stack9;
                                num4++;
                            }

                            if (genRand.Next(2) == 0)
                            {
                                int num14 = genRand.Next(1);
                                int stack10 = genRand.Next(3) + 3;
                                if (num14 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(28, false);
                                }

                                Main.chest[num2].item[num4].stack = stack10;
                                num4++;
                            }

                            if (genRand.Next(3) > 0)
                            {
                                int num15 = genRand.Next(9);
                                int stack11 = genRand.Next(1, 3);
                                if (num15 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(289, false);
                                }

                                if (num15 == 1)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(298, false);
                                }

                                if (num15 == 2)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(299, false);
                                }

                                if (num15 == 3)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(290, false);
                                }

                                if (num15 == 4)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(303, false);
                                }

                                if (num15 == 5)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(291, false);
                                }

                                if (num15 == 6)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(304, false);
                                }

                                if (num15 == 7)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(2322, false);
                                }

                                if (num15 == 8)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(2329, false);
                                }

                                Main.chest[num2].item[num4].stack = stack11;
                                num4++;
                            }

                            if (genRand.Next(3) != 0)
                            {
                                int stack12 = genRand.Next(1, 3);
                                Main.chest[num2].item[num4].SetDefaults(2350, false);
                                Main.chest[num2].item[num4].stack = stack12;
                                num4++;
                            }

                            if (genRand.Next(2) == 0)
                            {
                                int stack13 = genRand.Next(11) + 10;
                                if (num3 == 11)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(974, false);
                                }
                                else
                                {
                                    Main.chest[num2].item[num4].SetDefaults(8, false);
                                }

                                Main.chest[num2].item[num4].stack = stack13;
                                num4++;
                            }

                            if (genRand.Next(2) == 0)
                            {
                                Main.chest[num2].item[num4].SetDefaults(72, false);
                                Main.chest[num2].item[num4].stack = genRand.Next(50, 90);
                                num4++;
                            }
                        }
                        else if (num < Main.maxTilesY - 250)
                        {
                            if (contain > 0)
                            {
                                Main.chest[num2].item[num4].SetDefaults(contain, false);
                                Main.chest[num2].item[num4].Prefix(-1);
                                num4++;
                                if (flag && genRand.Next(5) == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(3199, false);
                                    num4++;
                                }

                                if (flag2 && genRand.Next(6) == 0)
                                {
                                    Main.chest[num2].item[num4++].SetDefaults(3360, false);
                                    Main.chest[num2].item[num4++].SetDefaults(3361, false);
                                }
                            }
                            else
                            {
                                int num18 = genRand.Next(7);
                                if (genRand.Next(40) == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(906, false);
                                    Main.chest[num2].item[num4].Prefix(-1);
                                }
                                else if (genRand.Next(15) == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(997, false);
                                    Main.chest[num2].item[num4].Prefix(-1);
                                }
                                else
                                {
                                    if (num18 == 0)
                                    {
                                        Main.chest[num2].item[num4].SetDefaults(49, false);
                                        Main.chest[num2].item[num4].Prefix(-1);
                                    }

                                    if (num18 == 1)
                                    {
                                        Main.chest[num2].item[num4].SetDefaults(50, false);
                                        Main.chest[num2].item[num4].Prefix(-1);
                                    }

                                    if (num18 == 2)
                                    {
                                        Main.chest[num2].item[num4].SetDefaults(53, false);
                                        Main.chest[num2].item[num4].Prefix(-1);
                                    }

                                    if (num18 == 3)
                                    {
                                        Main.chest[num2].item[num4].SetDefaults(54, false);
                                        Main.chest[num2].item[num4].Prefix(-1);
                                    }

                                    if (num18 == 4)
                                    {
                                        Main.chest[num2].item[num4].SetDefaults(55, false);
                                        Main.chest[num2].item[num4].Prefix(-1);
                                    }

                                    if (num18 == 5)
                                    {
                                        Main.chest[num2].item[num4].SetDefaults(975, false);
                                        Main.chest[num2].item[num4].Prefix(-1);
                                    }

                                    if (num18 == 6)
                                    {
                                        Main.chest[num2].item[num4].SetDefaults(930, false);
                                        Main.chest[num2].item[num4].Prefix(-1);
                                        num4++;
                                        Main.chest[num2].item[num4].SetDefaults(931, false);
                                        Main.chest[num2].item[num4].stack = genRand.Next(26) + 25;
                                    }
                                }

                                num4++;
                            }

                            if (genRand.Next(5) == 0)
                            {
                                Main.chest[num2].item[num4].SetDefaults(43, false);
                                num4++;
                            }

                            if (genRand.Next(3) == 0)
                            {
                                Main.chest[num2].item[num4].SetDefaults(167, false);
                                num4++;
                            }

                            if (genRand.Next(4) == 0)
                            {
                                Main.chest[num2].item[num4].SetDefaults(51, false);
                                Main.chest[num2].item[num4].stack = genRand.Next(26) + 25;
                                num4++;
                            }

                            if (genRand.Next(2) == 0)
                            {
                                int num19 = genRand.Next(2);
                                int stack14 = genRand.Next(8) + 3;
                                if (num19 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(goldBar, false);
                                }

                                if (num19 == 1)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(silverBar, false);
                                }

                                Main.chest[num2].item[num4].stack = stack14;
                                num4++;
                            }

                            if (genRand.Next(2) == 0)
                            {
                                int num20 = genRand.Next(2);
                                int stack15 = genRand.Next(26) + 25;
                                if (num20 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(41, false);
                                }

                                if (num20 == 1)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(279, false);
                                }

                                Main.chest[num2].item[num4].stack = stack15;
                                num4++;
                            }

                            if (genRand.Next(2) == 0)
                            {
                                int num21 = genRand.Next(1);
                                int stack16 = genRand.Next(3) + 3;
                                if (num21 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(188, false);
                                }

                                Main.chest[num2].item[num4].stack = stack16;
                                num4++;
                            }

                            if (genRand.Next(3) > 0)
                            {
                                int num22 = genRand.Next(6);
                                int stack17 = genRand.Next(1, 3);
                                if (num22 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(296, false);
                                }

                                if (num22 == 1)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(295, false);
                                }

                                if (num22 == 2)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(299, false);
                                }

                                if (num22 == 3)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(302, false);
                                }

                                if (num22 == 4)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(303, false);
                                }

                                if (num22 == 5)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(305, false);
                                }

                                Main.chest[num2].item[num4].stack = stack17;
                                num4++;
                            }

                            if (genRand.Next(3) > 1)
                            {
                                int num23 = genRand.Next(7);
                                int stack18 = genRand.Next(1, 3);
                                if (num23 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(301, false);
                                }

                                if (num23 == 1)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(302, false);
                                }

                                if (num23 == 2)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(297, false);
                                }

                                if (num23 == 3)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(304, false);
                                }

                                if (num23 == 4)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(2329, false);
                                }

                                if (num23 == 5)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(2351, false);
                                }

                                if (num23 == 6)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(2329, false);
                                }

                                Main.chest[num2].item[num4].stack = stack18;
                                num4++;
                            }

                            if (genRand.Next(2) == 0)
                            {
                                int stack19 = genRand.Next(1, 3);
                                Main.chest[num2].item[num4].SetDefaults(2350, false);
                                Main.chest[num2].item[num4].stack = stack19;
                                num4++;
                            }

                            if (genRand.Next(2) == 0)
                            {
                                int num24 = genRand.Next(2);
                                int stack20 = genRand.Next(15) + 15;
                                if (num24 == 0)
                                {
                                    if (num3 == 11)
                                    {
                                        Main.chest[num2].item[num4].SetDefaults(974, false);
                                    }
                                    else
                                    {
                                        Main.chest[num2].item[num4].SetDefaults(8, false);
                                    }
                                }

                                if (num24 == 1)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(282, false);
                                }

                                Main.chest[num2].item[num4].stack = stack20;
                                num4++;
                            }

                            if (genRand.Next(2) == 0)
                            {
                                Main.chest[num2].item[num4].SetDefaults(73, false);
                                Main.chest[num2].item[num4].stack = genRand.Next(1, 3);
                                num4++;
                            }
                        }
                        else
                        {
                            if (contain > 0)
                            {
                                Main.chest[num2].item[num4].SetDefaults(contain, false);
                                Main.chest[num2].item[num4].Prefix(-1);
                                num4++;
                            }
                            else
                            {
                                int num25 = genRand.Next(4);
                                if (num25 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(49, false);
                                    Main.chest[num2].item[num4].Prefix(-1);
                                }

                                if (num25 == 1)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(50, false);
                                    Main.chest[num2].item[num4].Prefix(-1);
                                }

                                if (num25 == 2)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(53, false);
                                    Main.chest[num2].item[num4].Prefix(-1);
                                }

                                if (num25 == 3)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(54, false);
                                    Main.chest[num2].item[num4].Prefix(-1);
                                }

                                num4++;
                            }

                            if (genRand.Next(3) == 0)
                            {
                                Main.chest[num2].item[num4].SetDefaults(167, false);
                                num4++;
                            }

                            if (genRand.Next(2) == 0)
                            {
                                int num26 = genRand.Next(2);
                                int stack21 = genRand.Next(15) + 15;
                                if (num26 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(117, false);
                                }

                                if (num26 == 1)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(goldBar, false);
                                }

                                Main.chest[num2].item[num4].stack = stack21;
                                num4++;
                            }

                            if (genRand.Next(2) == 0)
                            {
                                int num27 = genRand.Next(2);
                                int stack22 = genRand.Next(25) + 50;
                                if (num27 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(265, false);
                                }

                                if (num27 == 1)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(278, false);
                                }

                                Main.chest[num2].item[num4].stack = stack22;
                                num4++;
                            }

                            if (genRand.Next(2) == 0)
                            {
                                int num28 = genRand.Next(2);
                                int stack23 = genRand.Next(6) + 15;
                                if (num28 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(226, false);
                                }

                                if (num28 == 1)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(227, false);
                                }

                                Main.chest[num2].item[num4].stack = stack23;
                                num4++;
                            }

                            if (genRand.Next(4) > 0)
                            {
                                int num29 = genRand.Next(8);
                                int stack24 = genRand.Next(1, 3);
                                if (num29 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(296, false);
                                }

                                if (num29 == 1)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(295, false);
                                }

                                if (num29 == 2)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(293, false);
                                }

                                if (num29 == 3)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(288, false);
                                }

                                if (num29 == 4)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(294, false);
                                }

                                if (num29 == 5)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(297, false);
                                }

                                if (num29 == 6)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(304, false);
                                }

                                if (num29 == 7)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(2323, false);
                                }

                                Main.chest[num2].item[num4].stack = stack24;
                                num4++;
                            }

                            if (genRand.Next(3) > 0)
                            {
                                int num30 = genRand.Next(8);
                                int stack25 = genRand.Next(1, 3);
                                if (num30 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(305, false);
                                }

                                if (num30 == 1)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(301, false);
                                }

                                if (num30 == 2)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(302, false);
                                }

                                if (num30 == 3)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(288, false);
                                }

                                if (num30 == 4)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(300, false);
                                }

                                if (num30 == 5)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(2351, false);
                                }

                                if (num30 == 6)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(2348, false);
                                }

                                if (num30 == 7)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(2345, false);
                                }

                                Main.chest[num2].item[num4].stack = stack25;
                                num4++;
                            }

                            if (genRand.Next(3) == 0)
                            {
                                int stack26 = genRand.Next(1, 3);
                                Main.chest[num2].item[num4].SetDefaults(2350, false);
                                Main.chest[num2].item[num4].stack = stack26;
                                num4++;
                            }

                            if (genRand.Next(2) == 0)
                            {
                                int num31 = genRand.Next(2);
                                int stack27 = genRand.Next(15) + 15;
                                if (num31 == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(8, false);
                                }

                                if (num31 == 1)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(282, false);
                                }

                                Main.chest[num2].item[num4].stack = stack27;
                                num4++;
                            }

                            if (genRand.Next(2) == 0)
                            {
                                Main.chest[num2].item[num4].SetDefaults(73, false);
                                Main.chest[num2].item[num4].stack = genRand.Next(2, 5);
                                num4++;
                            }
                        }

                        if (num4 > 0)
                        {
                            if (num3 == 10 && genRand.Next(4) == 0)
                            {
                                Main.chest[num2].item[num4].SetDefaults(2204, false);
                                num4++;
                            }

                            if (num3 == 11 && genRand.Next(7) == 0)
                            {
                                Main.chest[num2].item[num4].SetDefaults(2198, false);
                                num4++;
                            }

                            if (num3 == 12 && genRand.Next(2) == 0)
                            {
                                Main.chest[num2].item[num4].SetDefaults(2196, false);
                                num4++;
                            }

                            if (num3 == 13 && genRand.Next(3) == 0)
                            {
                                Main.chest[num2].item[num4].SetDefaults(2197, false);
                                num4++;
                            }

                            if (num3 == 16)
                            {
                                Main.chest[num2].item[num4].SetDefaults(2195, false);
                                num4++;
                            }

                            if (Main.wallDungeon[Main.tile[i, k].wall] && genRand.Next(8) == 0)
                            {
                                Main.chest[num2].item[num4].SetDefaults(2192, false);
                                num4++;
                            }

                            if (num3 == 16)
                            {
                                if (genRand.Next(5) == 0)
                                {
                                    Main.chest[num2].item[num4].SetDefaults(2767, false);
                                    num4++;
                                }
                                else
                                {
                                    Main.chest[num2].item[num4].SetDefaults(2766, false);
                                    Main.chest[num2].item[num4].stack = genRand.Next(3, 8);
                                    num4++;
                                }
                            }
                        }
                    }

                    return true;
                }

                return false;
            }
        }

        return false;
    }

    public static void UnlockDoor(int i, int j)
    {
        int num = j;
        if (Main.tile[i, num] != null)
        {
            while (Main.tile[i, num].frameY != 594)
            {
                num--;
                if (Main.tile[i, num].frameY < 594 || num <= 0)
                {
                    return;
                }
            }

            Main.PlaySound(22, i * 16, num * 16 + 16, 1, 1f, 0f);
            for (int k = num; k <= num + 2; k++)
            {
                if (Main.tile[i, k] == null)
                {
                    Tile[,] tile = Main.tile;
                    int num2 = i;
                    int num3 = k;
                    Tile tile2 = new Tile();
                    tile[num2, num3] = tile2;
                }

                Main.tile[i, k].frameY += 54;
                for (int l = 0; l < 4; l++)
                {
                    Dust.NewDust(new Vector2((float) (i * 16), (float) (k * 16)), 16, 16, 11, 0f, 0f, 0, default(Color),
                        1f);
                }
            }
        }
    }

    public static bool OpenDoor(int i, int j, int direction)
    {
        int num = 0;
        if (Main.tile[i, j - 1] == null)
        {
            Tile[,] tile = Main.tile;
            int num2 = j - 1;
            Tile tile2 = new Tile();
            tile[i, num2] = tile2;
        }

        if (Main.tile[i, j - 2] == null)
        {
            Tile[,] tile3 = Main.tile;
            int num3 = j - 2;
            Tile tile4 = new Tile();
            tile3[i, num3] = tile4;
        }

        if (Main.tile[i, j + 1] == null)
        {
            Tile[,] tile5 = Main.tile;
            int num4 = j + 1;
            Tile tile6 = new Tile();
            tile5[i, num4] = tile6;
        }

        if (Main.tile[i, j] == null)
        {
            Tile[,] tile7 = Main.tile;
            Tile tile8 = new Tile();
            tile7[i, j] = tile8;
        }

        Tile tile9 = Main.tile[i, j];
        if (tile9.type != 10)
        {
            return false;
        }

        if (tile9.frameY >= 594 && tile9.frameY <= 646 && tile9.frameX < 54)
        {
            return false;
        }

        short num5 = 0;
        int num6 = tile9.frameY;
        int num7 = 0;
        while (num6 >= 54)
        {
            num6 -= 54;
            num7++;
        }

        if (tile9.frameX >= 54)
        {
            int num8 = tile9.frameX / 54;
            num7 += 36 * num8;
            num5 = (short) (num5 + (short) (72 * num8));
        }

        num = j - num6 / 18;
        byte color = Main.tile[i, num].color();
        if (Main.tile[i, num + 1] == null)
        {
            Tile[,] tile10 = Main.tile;
            int num9 = i;
            int num10 = num + 1;
            Tile tile11 = new Tile();
            tile10[num9, num10] = tile11;
        }

        byte color2 = Main.tile[i, num + 1].color();
        if (Main.tile[i, num + 2] == null)
        {
            Tile[,] tile12 = Main.tile;
            int num11 = i;
            int num12 = num + 2;
            Tile tile13 = new Tile();
            tile12[num11, num12] = tile13;
        }

        byte color3 = Main.tile[i, num + 2].color();
        int num13;
        int num14;
        if (direction == -1)
        {
            num13 = i - 1;
            num5 = (short) (num5 + 36);
            num14 = i - 1;
        }
        else
        {
            num13 = i;
            num14 = i + 1;
        }

        for (int k = num; k < num + 3; k++)
        {
            if (Main.tile[num14, k] == null)
            {
                Tile[,] tile14 = Main.tile;
                int num15 = num14;
                int num16 = k;
                Tile tile15 = new Tile();
                tile14[num15, num16] = tile15;
            }

            if (Main.tile[num14, k].active())
            {
                if (!Main.tileCut[Main.tile[num14, k].type] && Main.tile[num14, k].type != 3 &&
                    Main.tile[num14, k].type != 24 && Main.tile[num14, k].type != 52 &&
                    Main.tile[num14, k].type != 61 && Main.tile[num14, k].type != 62 &&
                    Main.tile[num14, k].type != 69 && Main.tile[num14, k].type != 71 &&
                    Main.tile[num14, k].type != 73 && Main.tile[num14, k].type != 74 &&
                    Main.tile[num14, k].type != 110 && Main.tile[num14, k].type != 113 &&
                    Main.tile[num14, k].type != 115)
                {
                    return false;
                }

                KillTile(num14, k, false, false, false);
            }
        }

        if (Main.netMode != 1 && Wiring.running)
        {
            Wiring.SkipWire(num13, num);
            Wiring.SkipWire(num13, num + 1);
            Wiring.SkipWire(num13, num + 2);
            Wiring.SkipWire(num13 + 1, num);
            Wiring.SkipWire(num13 + 1, num + 1);
            Wiring.SkipWire(num13 + 1, num + 2);
        }

        int num17 = num7 % 36 * 54;
        Main.PlaySound(8, i * 16, j * 16, 1, 1f, 0f);
        Main.tile[num13, num].active(true);
        Main.tile[num13, num].type = 11;
        Main.tile[num13, num].frameY = (short) num17;
        Main.tile[num13, num].frameX = num5;
        Main.tile[num13, num].color(color);
        if (Main.tile[num13 + 1, num] == null)
        {
            Tile[,] tile16 = Main.tile;
            int num18 = num13 + 1;
            int num19 = num;
            Tile tile17 = new Tile();
            tile16[num18, num19] = tile17;
        }

        Main.tile[num13 + 1, num].active(true);
        Main.tile[num13 + 1, num].type = 11;
        Main.tile[num13 + 1, num].frameY = (short) num17;
        Main.tile[num13 + 1, num].frameX = (short) (num5 + 18);
        Main.tile[num13 + 1, num].color(color);
        if (Main.tile[num13, num + 1] == null)
        {
            Tile[,] tile18 = Main.tile;
            int num20 = num13;
            int num21 = num + 1;
            Tile tile19 = new Tile();
            tile18[num20, num21] = tile19;
        }

        Main.tile[num13, num + 1].active(true);
        Main.tile[num13, num + 1].type = 11;
        Main.tile[num13, num + 1].frameY = (short) (num17 + 18);
        Main.tile[num13, num + 1].frameX = num5;
        Main.tile[num13, num + 1].color(color2);
        if (Main.tile[num13 + 1, num + 1] == null)
        {
            Tile[,] tile20 = Main.tile;
            int num22 = num13 + 1;
            int num23 = num + 1;
            Tile tile21 = new Tile();
            tile20[num22, num23] = tile21;
        }

        Main.tile[num13 + 1, num + 1].active(true);
        Main.tile[num13 + 1, num + 1].type = 11;
        Main.tile[num13 + 1, num + 1].frameY = (short) (num17 + 18);
        Main.tile[num13 + 1, num + 1].frameX = (short) (num5 + 18);
        Main.tile[num13 + 1, num + 1].color(color2);
        if (Main.tile[num13, num + 2] == null)
        {
            Tile[,] tile22 = Main.tile;
            int num24 = num13;
            int num25 = num + 2;
            Tile tile23 = new Tile();
            tile22[num24, num25] = tile23;
        }

        Main.tile[num13, num + 2].active(true);
        Main.tile[num13, num + 2].type = 11;
        Main.tile[num13, num + 2].frameY = (short) (num17 + 36);
        Main.tile[num13, num + 2].frameX = num5;
        Main.tile[num13, num + 2].color(color3);
        if (Main.tile[num13 + 1, num + 2] == null)
        {
            Tile[,] tile24 = Main.tile;
            int num26 = num13 + 1;
            int num27 = num + 2;
            Tile tile25 = new Tile();
            tile24[num26, num27] = tile25;
        }

        Main.tile[num13 + 1, num + 2].active(true);
        Main.tile[num13 + 1, num + 2].type = 11;
        Main.tile[num13 + 1, num + 2].frameY = (short) (num17 + 36);
        Main.tile[num13 + 1, num + 2].frameX = (short) (num5 + 18);
        Main.tile[num13 + 1, num + 2].color(color3);
        for (int l = num13 - 1; l <= num13 + 2; l++)
        {
            for (int m = num - 1; m <= num + 2; m++)
            {
                TileFrame(l, m, false, false);
            }
        }

        return true;
    }

    public static void Check1xX(int x, int j, short type)
    {
        if (!destroyObject)
        {
            int frameX = Main.tile[x, j].frameX;
            int num = 3;
            if (type == 92)
            {
                num = 6;
            }

            int num2 = Main.tile[x, j].frameY;
            int num3 = 0;
            while (num2 >= 18 * num)
            {
                num2 -= 18 * num;
                num3++;
            }

            int num4 = Main.tile[x, j].frameX / 18;
            int num5 = j - num2 / 18;
            bool flag = false;
            for (int i = 0; i < num; i++)
            {
                if (Main.tile[x, num5 + i] == null)
                {
                    Tile[,] tile = Main.tile;
                    int num6 = num5 + i;
                    Tile tile2 = new Tile();
                    tile[x, num6] = tile2;
                }

                if (!Main.tile[x, num5 + i].active())
                {
                    flag = true;
                }
                else if (Main.tile[x, num5 + i].type != type)
                {
                    flag = true;
                }
                else if (Main.tile[x, num5 + i].frameY != i * 18 + num3 * num * 18)
                {
                    flag = true;
                }
                else if (Main.tile[x, num5 + i].frameX != frameX)
                {
                    flag = true;
                }
            }

            if (Main.tile[x, num5 + num] == null)
            {
                Tile[,] tile3 = Main.tile;
                int num7 = num5 + num;
                Tile tile4 = new Tile();
                tile3[x, num7] = tile4;
            }

            if (!SolidTileAllowBottomSlope(x, num5 + num))
            {
                flag = true;
            }

            if (flag)
            {
                destroyObject = true;
                for (int k = 0; k < num; k++)
                {
                    if (Main.tile[x, num5 + k].type == type)
                    {
                        KillTile(x, num5 + k, false, false, false);
                    }
                }

                if (type == 92)
                {
                    Item.NewItem(x * 16, j * 16, 32, 32, 341, 1, false, 0, false, false);
                }

                if (type == 453)
                {
                    int num8 = 0;
                    num8 = ((num4 < 2) ? 3744 : ((num4 >= 4) ? 3743 : 3745));
                    Item.NewItem(x * 16, j * 16, 16, 32, num8, 1, false, 0, false, false);
                }

                if (type == 93)
                {
                    int type2 = 0;
                    if (num3 == 0)
                    {
                        type2 = 342;
                    }
                    else if (num3 >= 1 && num3 <= 10)
                    {
                        type2 = 2082 + num3 - 1;
                    }
                    else if (num3 < 11 || num3 > 16)
                    {
                        switch (num3)
                        {
                            case 17:
                                type2 = 2225;
                                break;
                            case 18:
                                type2 = 2533;
                                break;
                            case 19:
                                type2 = 2547;
                                break;
                            case 20:
                                type2 = 2563;
                                break;
                            case 21:
                                type2 = 2578;
                                break;
                            case 22:
                                type2 = 2643;
                                break;
                            case 23:
                                type2 = 2644;
                                break;
                            case 24:
                                type2 = 2645;
                                break;
                            case 25:
                                type2 = 2646;
                                break;
                            case 26:
                                type2 = 2647;
                                break;
                            case 27:
                                type2 = 2819;
                                break;
                            case 28:
                                type2 = 3135;
                                break;
                            case 29:
                                type2 = 3137;
                                break;
                            case 30:
                                type2 = 3136;
                                break;
                            case 31:
                                type2 = 3892;
                                break;
                        }
                    }
                    else
                    {
                        type2 = 2129 + num3 - 11;
                    }

                    Item.NewItem(x * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
                }

                destroyObject = false;
            }
        }
    }

    public static void Check2xX(int i, int j, ushort type)
    {
        if (!destroyObject)
        {
            int num = i;
            int num2;
            for (num2 = Main.tile[i, j].frameX; num2 >= 36; num2 -= 36)
            {
            }

            if (num2 == 18)
            {
                num--;
            }

            if (Main.tile[num, j] == null)
            {
                Tile[,] tile = Main.tile;
                int num3 = num;
                Tile tile2 = new Tile();
                tile[num3, j] = tile2;
            }

            int num4 = Main.tile[num, j].frameY / 18;
            int num5 = 3;
            if (type == 104)
            {
                num5 = 5;
            }

            if (type == 207)
            {
                num5 = 4;
            }

            int num6 = 0;
            while (num4 >= num5)
            {
                num4 -= num5;
                num6 += num5 * 18;
            }

            int num7 = j - num4;
            if (type == 410 && num6 != 0)
            {
                num6 += 2;
            }

            if (Main.tile[num, num7] == null)
            {
                Tile[,] tile3 = Main.tile;
                int num8 = num;
                int num9 = num7;
                Tile tile4 = new Tile();
                tile3[num8, num9] = tile4;
            }

            int frameX = Main.tile[num, j].frameX;
            int frameY = Main.tile[num, j].frameY;
            bool flag = false;
            for (int k = 0; k < num5; k++)
            {
                if (Main.tile[num, num7 + k] == null)
                {
                    Tile[,] tile5 = Main.tile;
                    int num10 = num;
                    int num11 = num7 + k;
                    Tile tile6 = new Tile();
                    tile5[num10, num11] = tile6;
                }

                if (!Main.tile[num, num7 + k].active())
                {
                    flag = true;
                }
                else if (Main.tile[num, num7 + k].type != type)
                {
                    flag = true;
                }
                else if (Main.tile[num, num7 + k].frameY != k * 18 + num6)
                {
                    flag = true;
                }
                else if (Main.tile[num, num7 + k].frameX != frameX)
                {
                    flag = true;
                }

                if (Main.tile[num + 1, num7 + k] == null)
                {
                    Tile[,] tile7 = Main.tile;
                    int num12 = num + 1;
                    int num13 = num7 + k;
                    Tile tile8 = new Tile();
                    tile7[num12, num13] = tile8;
                }

                if (!Main.tile[num + 1, num7 + k].active())
                {
                    flag = true;
                }
                else if (Main.tile[num + 1, num7 + k].type != type)
                {
                    flag = true;
                }
                else if (Main.tile[num + 1, num7 + k].frameY != k * 18 + num6)
                {
                    flag = true;
                }
                else if (Main.tile[num + 1, num7 + k].frameX != frameX + 18)
                {
                    flag = true;
                }
            }

            if (type == 465)
            {
                for (int l = 0; l < 2; l++)
                {
                    if (Main.tile[num + l, num7 - 1] == null)
                    {
                        Tile[,] tile9 = Main.tile;
                        int num14 = num + l;
                        int num15 = num7 - 1;
                        Tile tile10 = new Tile();
                        tile9[num14, num15] = tile10;
                    }

                    if (!Main.tile[num + l, num7 - 1].nactive() || !Main.tileSolid[Main.tile[num + l, num7 - 1].type] ||
                        Main.tileSolidTop[Main.tile[num + l, num7 - 1].type])
                    {
                        flag = true;
                        break;
                    }
                }
            }
            else
            {
                if (!SolidTileAllowBottomSlope(num, num7 + num5))
                {
                    flag = true;
                }

                if (!SolidTileAllowBottomSlope(num + 1, num7 + num5))
                {
                    flag = true;
                }
            }

            if (flag)
            {
                destroyObject = true;
                for (int m = 0; m < num5; m++)
                {
                    if (Main.tile[num, num7 + m].type == type)
                    {
                        KillTile(num, num7 + m, false, false, false);
                    }

                    if (Main.tile[num + 1, num7 + m].type == type)
                    {
                        KillTile(num + 1, num7 + m, false, false, false);
                    }
                }

                if (type == 104)
                {
                    int num16 = frameX / 36;
                    int num17 = 0;
                    if (num16 >= 1 && num16 <= 5)
                    {
                        num17 = 2237 + num16 - 1;
                    }
                    else if (num16 == 6)
                    {
                        num17 = 2560;
                    }
                    else if (num16 == 7)
                    {
                        num17 = 2575;
                    }
                    else if (num16 < 8 || num16 > 23)
                    {
                        switch (num16)
                        {
                            case 24:
                                num17 = 2809;
                                break;
                            case 25:
                                num17 = 3126;
                                break;
                            case 26:
                                num17 = 3128;
                                break;
                            case 27:
                                num17 = 3127;
                                break;
                            case 28:
                                num17 = 3898;
                                break;
                            case 29:
                                num17 = 3899;
                                break;
                            case 30:
                                num17 = 3900;
                                break;
                            case 31:
                                num17 = 3901;
                                break;
                            case 32:
                                num17 = 3902;
                                break;
                            default:
                                num17 = 359;
                                break;
                        }
                    }
                    else
                    {
                        num17 = 2591 + num16 - 8;
                    }

                    Item.NewItem(num * 16, j * 16, 32, 32, num17, 1, false, 0, false, false);
                }

                if (type == 105)
                {
                    int num18 = frameX / 36;
                    num18 += frameY / 54 * 55;
                    num18 = ((num18 == 0)
                        ? 360
                        : ((num18 == 1)
                            ? 52
                            : ((num18 == 43)
                                ? 1152
                                : ((num18 == 44)
                                    ? 1153
                                    : ((num18 == 45)
                                        ? 1154
                                        : ((num18 == 46)
                                            ? 1408
                                            : ((num18 == 47)
                                                ? 1409
                                                : ((num18 == 48)
                                                    ? 1410
                                                    : ((num18 == 49)
                                                        ? 1462
                                                        : ((num18 == 50)
                                                            ? 2672
                                                            : ((num18 >= 51 && num18 <= 62)
                                                                ? (3651 + num18 - 51)
                                                                : ((num18 < 63 || num18 > 75)
                                                                    ? (438 + num18 - 2)
                                                                    : (3708 + num18 - 63)))))))))))));
                    Item.NewItem(num * 16, j * 16, 32, 32, num18, 1, false, 0, false, false);
                }

                if (type == 356)
                {
                    Item.NewItem(num * 16, j * 16, 32, 32, 3064, 1, false, 0, false, false);
                }

                if (type == 456)
                {
                    Item.NewItem(num * 16, j * 16, 32, 32, 3748, 1, false, 0, false, false);
                }

                if (type == 337)
                {
                    int num19 = frameX / 36;
                    Item.NewItem(num * 16, j * 16, 32, 32, 2702 + num19, 1, false, 0, false, false);
                }

                if (type == 207)
                {
                    int num20 = frameX / 36;
                    if (num20 == 0)
                    {
                        num20 = 909;
                    }
                    else if (num20 == 1)
                    {
                        num20 = 910;
                    }
                    else if (num20 >= 2 && num20 <= 7)
                    {
                        num20 = 938 + num20;
                    }

                    Item.NewItem(num * 16, j * 16, 32, 32, num20, 1, false, 0, false, false);
                }

                if (type == 410)
                {
                    int num21 = frameX / 36;
                    Item.NewItem(num * 16, j * 16, 32, 32, num21 + 3536, 1, false, 0, false, false);
                }

                if (type == 320)
                {
                    Item.NewItem(num * 16, j * 16, 32, 32, 2496, 1, false, 0, false, false);
                }

                if (type == 349)
                {
                    Item.NewItem(num * 16, j * 16, 32, 32, 470, 1, false, 0, false, false);
                }

                if (type == 465)
                {
                    Item.NewItem(num * 16, j * 16, 32, 32, 3815, 1, false, 0, false, false);
                }

                if (type == 378)
                {
                    Item.NewItem(num * 16, j * 16, 32, 48, 3202, 1, false, 0, false, false);
                    TETrainingDummy.Kill(num, num7);
                }

                destroyObject = false;
            }
        }
    }

    public static void PlaceTight(int x, int y, ushort type = 165, bool spiders = false)
    {
        if (Main.tile[x, y - 1] == null)
        {
            Tile[,] tile = Main.tile;
            int num = y - 1;
            Tile tile2 = new Tile();
            tile[x, num] = tile2;
        }

        if (Main.tile[x, y] == null)
        {
            Tile[,] tile3 = Main.tile;
            Tile tile4 = new Tile();
            tile3[x, y] = tile4;
        }

        if (Main.tile[x, y + 1] == null)
        {
            Tile[,] tile5 = Main.tile;
            int num2 = y + 1;
            Tile tile6 = new Tile();
            tile5[x, num2] = tile6;
        }

        if (SolidTile(x, y - 1) && !Main.tile[x, y].active() && !Main.tile[x, y + 1].active())
        {
            if (spiders)
            {
                int num3 = 108 + genRand.Next(3) * 18;
                Main.tile[x, y].type = type;
                Main.tile[x, y].active(true);
                Main.tile[x, y].frameX = (short) num3;
                Main.tile[x, y].frameY = 0;
                Main.tile[x, y + 1].type = type;
                Main.tile[x, y + 1].active(true);
                Main.tile[x, y + 1].frameX = (short) num3;
                Main.tile[x, y + 1].frameY = 18;
            }
            else
            {
                if (Main.tile[x, y - 1].type == 147 || Main.tile[x, y - 1].type == 161 ||
                    Main.tile[x, y - 1].type == 163 || Main.tile[x, y - 1].type == 164 ||
                    Main.tile[x, y - 1].type == 200)
                {
                    if (genRand.Next(2) == 0)
                    {
                        int num4 = genRand.Next(3) * 18;
                        Main.tile[x, y].type = type;
                        Main.tile[x, y].active(true);
                        Main.tile[x, y].frameX = (short) num4;
                        Main.tile[x, y].frameY = 72;
                    }
                    else
                    {
                        int num5 = genRand.Next(3) * 18;
                        Main.tile[x, y].type = type;
                        Main.tile[x, y].active(true);
                        Main.tile[x, y].frameX = (short) num5;
                        Main.tile[x, y].frameY = 0;
                        Main.tile[x, y + 1].type = type;
                        Main.tile[x, y + 1].active(true);
                        Main.tile[x, y + 1].frameX = (short) num5;
                        Main.tile[x, y + 1].frameY = 18;
                    }
                }

                if (Main.tile[x, y - 1].type == 1 || Main.tileMoss[Main.tile[x, y - 1].type] ||
                    Main.tile[x, y - 1].type == 117 || Main.tile[x, y - 1].type == 25 ||
                    Main.tile[x, y - 1].type == 203)
                {
                    if (genRand.Next(2) == 0)
                    {
                        int num6 = 54 + genRand.Next(3) * 18;
                        Main.tile[x, y].type = type;
                        Main.tile[x, y].active(true);
                        Main.tile[x, y].frameX = (short) num6;
                        Main.tile[x, y].frameY = 72;
                    }
                    else
                    {
                        int num7 = 54 + genRand.Next(3) * 18;
                        Main.tile[x, y].type = type;
                        Main.tile[x, y].active(true);
                        Main.tile[x, y].frameX = (short) num7;
                        Main.tile[x, y].frameY = 0;
                        Main.tile[x, y + 1].type = type;
                        Main.tile[x, y + 1].active(true);
                        Main.tile[x, y + 1].frameX = (short) num7;
                        Main.tile[x, y + 1].frameY = 18;
                    }
                }

                if (Main.tile[x, y - 1].type == 225)
                {
                    int num8 = 162 + genRand.Next(3) * 18;
                    Main.tile[x, y].type = type;
                    Main.tile[x, y].active(true);
                    Main.tile[x, y].frameX = (short) num8;
                    Main.tile[x, y].frameY = 72;
                }

                if (Main.tile[x, y - 1].type == 396 || Main.tile[x, y - 1].type == 397)
                {
                    if (genRand.Next(2) == 0)
                    {
                        int num9 = 378 + genRand.Next(3) * 18;
                        Main.tile[x, y].type = type;
                        Main.tile[x, y].active(true);
                        Main.tile[x, y].frameX = (short) num9;
                        Main.tile[x, y].frameY = 72;
                    }
                    else
                    {
                        int num10 = 378 + genRand.Next(3) * 18;
                        Main.tile[x, y].type = type;
                        Main.tile[x, y].active(true);
                        Main.tile[x, y].frameX = (short) num10;
                        Main.tile[x, y].frameY = 0;
                        Main.tile[x, y + 1].type = type;
                        Main.tile[x, y + 1].active(true);
                        Main.tile[x, y + 1].frameX = (short) num10;
                        Main.tile[x, y + 1].frameY = 18;
                    }
                }

                if (Main.tile[x, y - 1].type == 368)
                {
                    if (genRand.Next(2) == 0)
                    {
                        int num11 = 432 + genRand.Next(3) * 18;
                        Main.tile[x, y].type = type;
                        Main.tile[x, y].active(true);
                        Main.tile[x, y].frameX = (short) num11;
                        Main.tile[x, y].frameY = 72;
                    }
                    else
                    {
                        int num12 = 432 + genRand.Next(3) * 18;
                        Main.tile[x, y].type = type;
                        Main.tile[x, y].active(true);
                        Main.tile[x, y].frameX = (short) num12;
                        Main.tile[x, y].frameY = 0;
                        Main.tile[x, y + 1].type = type;
                        Main.tile[x, y + 1].active(true);
                        Main.tile[x, y + 1].frameX = (short) num12;
                        Main.tile[x, y + 1].frameY = 18;
                    }
                }

                if (Main.tile[x, y - 1].type == 367)
                {
                    if (genRand.Next(2) == 0)
                    {
                        int num13 = 486 + genRand.Next(3) * 18;
                        Main.tile[x, y].type = type;
                        Main.tile[x, y].active(true);
                        Main.tile[x, y].frameX = (short) num13;
                        Main.tile[x, y].frameY = 72;
                    }
                    else
                    {
                        int num14 = 486 + genRand.Next(3) * 18;
                        Main.tile[x, y].type = type;
                        Main.tile[x, y].active(true);
                        Main.tile[x, y].frameX = (short) num14;
                        Main.tile[x, y].frameY = 0;
                        Main.tile[x, y + 1].type = type;
                        Main.tile[x, y + 1].active(true);
                        Main.tile[x, y + 1].frameX = (short) num14;
                        Main.tile[x, y + 1].frameY = 18;
                    }
                }
            }
        }
        else
        {
            if (spiders)
            {
                return;
            }

            if (SolidTile(x, y + 1) && !Main.tile[x, y].active() && !Main.tile[x, y - 1].active())
            {
                if (Main.tile[x, y + 1].type == 1 || Main.tileMoss[Main.tile[x, y + 1].type] ||
                    Main.tile[x, y - 1].type == 117 || Main.tile[x, y - 1].type == 25 ||
                    Main.tile[x, y - 1].type == 203)
                {
                    if (genRand.Next(2) == 0)
                    {
                        int num15 = 54 + genRand.Next(3) * 18;
                        Main.tile[x, y].type = type;
                        Main.tile[x, y].active(true);
                        Main.tile[x, y].frameX = (short) num15;
                        Main.tile[x, y].frameY = 90;
                    }
                    else
                    {
                        int num16 = 54 + genRand.Next(3) * 18;
                        Main.tile[x, y - 1].type = type;
                        Main.tile[x, y - 1].active(true);
                        Main.tile[x, y - 1].frameX = (short) num16;
                        Main.tile[x, y - 1].frameY = 36;
                        Main.tile[x, y].type = type;
                        Main.tile[x, y].active(true);
                        Main.tile[x, y].frameX = (short) num16;
                        Main.tile[x, y].frameY = 54;
                    }
                }

                if (Main.tile[x, y + 1].type == 225)
                {
                    int num17 = 162 + genRand.Next(3) * 18;
                    Main.tile[x, y].type = type;
                    Main.tile[x, y].active(true);
                    Main.tile[x, y].frameX = (short) num17;
                    Main.tile[x, y].frameY = 90;
                }

                if (Main.tile[x, y + 1].type == 396 || Main.tile[x, y + 1].type == 397)
                {
                    if (genRand.Next(2) == 0)
                    {
                        int num18 = 378 + genRand.Next(3) * 18;
                        Main.tile[x, y].type = type;
                        Main.tile[x, y].active(true);
                        Main.tile[x, y].frameX = (short) num18;
                        Main.tile[x, y].frameY = 90;
                    }
                    else
                    {
                        int num19 = 378 + genRand.Next(3) * 18;
                        Main.tile[x, y - 1].type = type;
                        Main.tile[x, y - 1].active(true);
                        Main.tile[x, y - 1].frameX = (short) num19;
                        Main.tile[x, y - 1].frameY = 36;
                        Main.tile[x, y].type = type;
                        Main.tile[x, y].active(true);
                        Main.tile[x, y].frameX = (short) num19;
                        Main.tile[x, y].frameY = 54;
                    }
                }

                if (Main.tile[x, y + 1].type == 368)
                {
                    if (genRand.Next(2) == 0)
                    {
                        int num20 = 432 + genRand.Next(3) * 18;
                        Main.tile[x, y].type = type;
                        Main.tile[x, y].active(true);
                        Main.tile[x, y].frameX = (short) num20;
                        Main.tile[x, y].frameY = 90;
                    }
                    else
                    {
                        int num21 = 432 + genRand.Next(3) * 18;
                        Main.tile[x, y - 1].type = type;
                        Main.tile[x, y - 1].active(true);
                        Main.tile[x, y - 1].frameX = (short) num21;
                        Main.tile[x, y - 1].frameY = 36;
                        Main.tile[x, y].type = type;
                        Main.tile[x, y].active(true);
                        Main.tile[x, y].frameX = (short) num21;
                        Main.tile[x, y].frameY = 54;
                    }
                }

                if (Main.tile[x, y + 1].type == 367)
                {
                    if (genRand.Next(2) == 0)
                    {
                        int num22 = 486 + genRand.Next(3) * 18;
                        Main.tile[x, y].type = type;
                        Main.tile[x, y].active(true);
                        Main.tile[x, y].frameX = (short) num22;
                        Main.tile[x, y].frameY = 90;
                    }
                    else
                    {
                        int num23 = 486 + genRand.Next(3) * 18;
                        Main.tile[x, y - 1].type = type;
                        Main.tile[x, y - 1].active(true);
                        Main.tile[x, y - 1].frameX = (short) num23;
                        Main.tile[x, y - 1].frameY = 36;
                        Main.tile[x, y].type = type;
                        Main.tile[x, y].active(true);
                        Main.tile[x, y].frameX = (short) num23;
                        Main.tile[x, y].frameY = 54;
                    }
                }
            }
        }

        if (Main.tile[x, y].type == 165)
        {
            CheckTight(x, y);
        }
    }

    public static void TightBiome(int x, int j)
    {
        if (Main.netMode != 1 && Main.tile[x, j] != null)
        {
            int num = j;
            int num2 = 0;
            int num3 = 0;
            int num4 = 1;
            if (Main.tile[x, num].frameX >= 0 && Main.tile[x, num].frameX <= 36)
            {
                num2 = 7;
            }
            else if (Main.tile[x, num].frameX >= 54 && Main.tile[x, num].frameX <= 90)
            {
                num2 = 0;
            }
            else if (Main.tile[x, num].frameX >= 216 && Main.tile[x, num].frameX <= 252)
            {
                num2 = 1;
            }
            else if (Main.tile[x, num].frameX >= 270 && Main.tile[x, num].frameX <= 306)
            {
                num2 = 2;
            }
            else if (Main.tile[x, num].frameX >= 324 && Main.tile[x, num].frameX <= 360)
            {
                num2 = 3;
            }
            else if (Main.tile[x, num].frameX >= 378 && Main.tile[x, num].frameX <= 414)
            {
                num2 = 4;
            }
            else if (Main.tile[x, num].frameX >= 432 && Main.tile[x, num].frameX <= 468)
            {
                num2 = 5;
            }
            else
            {
                if (Main.tile[x, num].frameX < 486 || Main.tile[x, num].frameX > 522)
                {
                    return;
                }

                num2 = 6;
            }

            if (Main.tile[x, num].frameY == 72)
            {
                num3 = Main.tile[x, num - 1].type;
            }
            else if (Main.tile[x, num].frameY == 90)
            {
                num3 = Main.tile[x, num + 1].type;
            }
            else if (Main.tile[x, num].frameY >= 36)
            {
                if (Main.tile[x, num].frameY == 54)
                {
                    num--;
                }

                num4 = 2;
                num3 = Main.tile[x, num + 2].type;
            }
            else
            {
                if (Main.tile[x, num].frameY == 18)
                {
                    num--;
                }

                num4 = 2;
                num3 = Main.tile[x, num - 1].type;
            }

            switch (num3)
            {
                default:
                    return;
                case 1:
                    num3 = 0;
                    break;
                case 117:
                case 164:
                case 402:
                case 403:
                    num3 = 1;
                    break;
                case 25:
                case 163:
                case 398:
                case 400:
                    num3 = 2;
                    break;
                case 200:
                case 203:
                case 399:
                case 401:
                    num3 = 3;
                    break;
                case 396:
                case 397:
                    num3 = 4;
                    break;
                case 367:
                    num3 = 6;
                    break;
                case 368:
                    num3 = 5;
                    break;
                case 161:
                    num3 = 7;
                    break;
            }

            if (num2 != num3)
            {
                int num5 = genRand.Next(3) * 18;
                switch (num3)
                {
                    case 0:
                        num5 += 54;
                        break;
                    case 1:
                        num5 += 216;
                        break;
                    case 2:
                        num5 += 270;
                        break;
                    case 3:
                        num5 += 324;
                        break;
                    case 4:
                        num5 += 378;
                        break;
                    case 5:
                        num5 += 432;
                        break;
                    case 6:
                        num5 += 486;
                        break;
                    case 7:
                        num5 = num5;
                        break;
                }

                for (int i = num; i < num + num4; i++)
                {
                    Main.tile[x, i].frameX = (short) num5;
                }

                if (Main.netMode == 2)
                {
                    NetMessage.SendTileSquare(-1, x, num, 2, TileChangeType.None);
                }
            }
        }
    }

    public static void CheckTight(int x, int j)
    {
        if (Main.tile[x, j] != null)
        {
            int num = j;
            if (Main.tile[x, num].frameY == 72)
            {
                if (Main.tile[x, num - 1] == null)
                {
                    Tile[,] tile = Main.tile;
                    int num2 = num - 1;
                    Tile tile2 = new Tile();
                    tile[x, num2] = tile2;
                }

                if (Main.tile[x, num] == null)
                {
                    Tile[,] tile3 = Main.tile;
                    int num3 = num;
                    Tile tile4 = new Tile();
                    tile3[x, num3] = tile4;
                }

                if (Main.tile[x, num + 1] == null)
                {
                    Tile[,] tile5 = Main.tile;
                    int num4 = num + 1;
                    Tile tile6 = new Tile();
                    tile5[x, num4] = tile6;
                }

                bool flag = false;
                if (!SolidTile(x, num - 1))
                {
                    flag = true;
                }

                if (flag)
                {
                    if (Main.tile[x, num].type == Main.tile[x, j].type)
                    {
                        KillTile(x, num, false, false, false);
                    }
                }
                else
                {
                    TightBiome(x, num);
                }
            }
            else if (Main.tile[x, num].frameY == 90)
            {
                if (Main.tile[x, num - 1] == null)
                {
                    Tile[,] tile7 = Main.tile;
                    int num5 = num - 1;
                    Tile tile8 = new Tile();
                    tile7[x, num5] = tile8;
                }

                if (Main.tile[x, num] == null)
                {
                    Tile[,] tile9 = Main.tile;
                    int num6 = num;
                    Tile tile10 = new Tile();
                    tile9[x, num6] = tile10;
                }

                if (Main.tile[x, num + 1] == null)
                {
                    Tile[,] tile11 = Main.tile;
                    int num7 = num + 1;
                    Tile tile12 = new Tile();
                    tile11[x, num7] = tile12;
                }

                bool flag2 = false;
                if (!SolidTile(x, num + 1))
                {
                    flag2 = true;
                }

                if (flag2)
                {
                    if (Main.tile[x, num].type == Main.tile[x, j].type)
                    {
                        KillTile(x, num, false, false, false);
                    }
                }
                else
                {
                    TightBiome(x, num);
                }
            }
            else if (Main.tile[x, num].frameY >= 36)
            {
                if (Main.tile[x, num].frameY == 54)
                {
                    num--;
                }

                if (Main.tile[x, num] == null)
                {
                    Tile[,] tile13 = Main.tile;
                    int num8 = num;
                    Tile tile14 = new Tile();
                    tile13[x, num8] = tile14;
                }

                if (Main.tile[x, num + 1] == null)
                {
                    Tile[,] tile15 = Main.tile;
                    int num9 = num + 1;
                    Tile tile16 = new Tile();
                    tile15[x, num9] = tile16;
                }

                if (Main.tile[x, num + 2] == null)
                {
                    Tile[,] tile17 = Main.tile;
                    int num10 = num + 2;
                    Tile tile18 = new Tile();
                    tile17[x, num10] = tile18;
                }

                bool flag3 = false;
                if (!SolidTile(x, num + 2))
                {
                    flag3 = true;
                }

                if (Main.tile[x, num + 1].type != Main.tile[x, num].type)
                {
                    flag3 = true;
                }

                if (Main.tile[x, num + 1].frameX != Main.tile[x, num].frameX)
                {
                    flag3 = true;
                }

                if (flag3)
                {
                    if (Main.tile[x, num].type == Main.tile[x, j].type)
                    {
                        KillTile(x, num, false, false, false);
                    }

                    if (Main.tile[x, num + 1].type == Main.tile[x, j].type)
                    {
                        KillTile(x, num + 1, false, false, false);
                    }
                }
                else
                {
                    TightBiome(x, num);
                }
            }
            else
            {
                if (Main.tile[x, num].frameY == 18)
                {
                    num--;
                }

                if (Main.tile[x, num - 1] == null)
                {
                    Tile[,] tile19 = Main.tile;
                    int num11 = num - 1;
                    Tile tile20 = new Tile();
                    tile19[x, num11] = tile20;
                }

                if (Main.tile[x, num] == null)
                {
                    Tile[,] tile21 = Main.tile;
                    int num12 = num;
                    Tile tile22 = new Tile();
                    tile21[x, num12] = tile22;
                }

                if (Main.tile[x, num + 1] == null)
                {
                    Tile[,] tile23 = Main.tile;
                    int num13 = num + 1;
                    Tile tile24 = new Tile();
                    tile23[x, num13] = tile24;
                }

                bool flag4 = false;
                if (!SolidTile(x, num - 1))
                {
                    flag4 = true;
                }

                if (Main.tile[x, num + 1].type != Main.tile[x, num].type)
                {
                    flag4 = true;
                }

                if (Main.tile[x, num + 1].frameX != Main.tile[x, num].frameX)
                {
                    flag4 = true;
                }

                if (flag4)
                {
                    if (Main.tile[x, num].type == Main.tile[x, j].type)
                    {
                        KillTile(x, num, false, false, false);
                    }

                    if (Main.tile[x, num + 1].type == Main.tile[x, j].type)
                    {
                        KillTile(x, num + 1, false, false, false);
                    }
                }
                else
                {
                    TightBiome(x, num);
                }
            }
        }
    }

    public static void Place1xX(int x, int y, ushort type, int style = 0)
    {
        int num = style * 18;
        int num2 = 3;
        if (type == 92)
        {
            num2 = 6;
        }

        bool flag = true;
        for (int i = y - num2 + 1; i < y + 1; i++)
        {
            if (Main.tile[x, i] == null)
            {
                Tile[,] tile = Main.tile;
                int num3 = i;
                Tile tile2 = new Tile();
                tile[x, num3] = tile2;
            }

            if (Main.tile[x, i].active())
            {
                flag = false;
            }

            if (type == 93 && Main.tile[x, i].liquid > 0)
            {
                flag = false;
            }
        }

        if (flag && SolidTile2(x, y + 1))
        {
            for (int j = 0; j < num2; j++)
            {
                Main.tile[x, y - num2 + 1 + j].active(true);
                Main.tile[x, y - num2 + 1 + j].frameY = (short) (j * 18 + num2 * num);
                Main.tile[x, y - num2 + 1 + j].frameX = 0;
                Main.tile[x, y - num2 + 1 + j].type = type;
            }
        }
    }

    public static int checkXmasTreeDrop(int x, int y, int obj)
    {
        int num = x;
        int num2 = y;
        if (Main.tile[x, y].frameX < 10)
        {
            num -= Main.tile[x, y].frameX;
            num2 -= Main.tile[x, y].frameY;
        }

        int num3 = 0;
        if ((Main.tile[num, num2].frameY & 1) == 1)
        {
            num3++;
        }

        if ((Main.tile[num, num2].frameY & 2) == 2)
        {
            num3 += 2;
        }

        if ((Main.tile[num, num2].frameY & 4) == 4)
        {
            num3 += 4;
        }

        int num4 = 0;
        if ((Main.tile[num, num2].frameY & 8) == 8)
        {
            num4++;
        }

        if ((Main.tile[num, num2].frameY & 0x10) == 16)
        {
            num4 += 2;
        }

        if ((Main.tile[num, num2].frameY & 0x20) == 32)
        {
            num4 += 4;
        }

        int num5 = 0;
        if ((Main.tile[num, num2].frameY & 0x40) == 64)
        {
            num5++;
        }

        if ((Main.tile[num, num2].frameY & 0x80) == 128)
        {
            num5 += 2;
        }

        if ((Main.tile[num, num2].frameY & 0x100) == 256)
        {
            num5 += 4;
        }

        if ((Main.tile[num, num2].frameY & 0x200) == 512)
        {
            num5 += 8;
        }

        int num6 = 0;
        if ((Main.tile[num, num2].frameY & 0x400) == 1024)
        {
            num6++;
        }

        if ((Main.tile[num, num2].frameY & 0x800) == 2048)
        {
            num6 += 2;
        }

        if ((Main.tile[num, num2].frameY & 0x1000) == 4096)
        {
            num6 += 4;
        }

        if ((Main.tile[num, num2].frameY & 0x2000) == 8192)
        {
            num6 += 8;
        }

        if (obj == 0 && num3 > 0)
        {
            return num3;
        }

        if (obj == 1 && num4 > 0)
        {
            return num4;
        }

        if (obj == 2 && num5 > 0)
        {
            return num5;
        }

        if (obj == 3 && num6 > 0)
        {
            return num6;
        }

        return -1;
    }

    public static void dropXmasTree(int x, int y, int obj)
    {
        int num = x;
        int num2 = y;
        if (Main.tile[x, y].frameX < 10)
        {
            num -= Main.tile[x, y].frameX;
            num2 -= Main.tile[x, y].frameY;
        }

        int num3 = 0;
        if ((Main.tile[num, num2].frameY & 1) == 1)
        {
            num3++;
        }

        if ((Main.tile[num, num2].frameY & 2) == 2)
        {
            num3 += 2;
        }

        if ((Main.tile[num, num2].frameY & 4) == 4)
        {
            num3 += 4;
        }

        int num4 = 0;
        if ((Main.tile[num, num2].frameY & 8) == 8)
        {
            num4++;
        }

        if ((Main.tile[num, num2].frameY & 0x10) == 16)
        {
            num4 += 2;
        }

        if ((Main.tile[num, num2].frameY & 0x20) == 32)
        {
            num4 += 4;
        }

        int num5 = 0;
        if ((Main.tile[num, num2].frameY & 0x40) == 64)
        {
            num5++;
        }

        if ((Main.tile[num, num2].frameY & 0x80) == 128)
        {
            num5 += 2;
        }

        if ((Main.tile[num, num2].frameY & 0x100) == 256)
        {
            num5 += 4;
        }

        if ((Main.tile[num, num2].frameY & 0x200) == 512)
        {
            num5 += 8;
        }

        int num6 = 0;
        if ((Main.tile[num, num2].frameY & 0x400) == 1024)
        {
            num6++;
        }

        if ((Main.tile[num, num2].frameY & 0x800) == 2048)
        {
            num6 += 2;
        }

        if ((Main.tile[num, num2].frameY & 0x1000) == 4096)
        {
            num6 += 4;
        }

        if ((Main.tile[num, num2].frameY & 0x2000) == 8192)
        {
            num6 += 8;
        }

        if (obj == 0 && num3 > 0)
        {
            int number = Item.NewItem(x * 16, y * 16, 16, 16, 1874 + num3 - 1, 1, false, 0, false, false);
            if (Main.netMode == 1)
            {
                NetMessage.SendData(21, -1, -1, null, number, 1f, 0f, 0f, 0, 0, 0);
            }
        }
        else if (obj == 1 && num4 > 0)
        {
            int number2 = Item.NewItem(x * 16, y * 16, 16, 16, 1878 + num4 - 1, 1, false, 0, false, false);
            if (Main.netMode == 1)
            {
                NetMessage.SendData(21, -1, -1, null, number2, 1f, 0f, 0f, 0, 0, 0);
            }
        }
        else if (obj == 2 && num5 > 0)
        {
            int number3 = Item.NewItem(x * 16, y * 16, 16, 16, 1884 + num5 - 1, 1, false, 0, false, false);
            if (Main.netMode == 1)
            {
                NetMessage.SendData(21, -1, -1, null, number3, 1f, 0f, 0f, 0, 0, 0);
            }
        }
        else if (obj == 3 && num6 > 0)
        {
            int number4 = Item.NewItem(x * 16, y * 16, 16, 16, 1895 + num6 - 1, 1, false, 0, false, false);
            if (Main.netMode == 1)
            {
                NetMessage.SendData(21, -1, -1, null, number4, 1f, 0f, 0f, 0, 0, 0);
            }
        }
    }

    public static void setXmasTree(int x, int y, int obj, int style)
    {
        int num = x;
        int num2 = y;
        if (Main.tile[x, y].frameX < 10)
        {
            num -= Main.tile[x, y].frameX;
            num2 -= Main.tile[x, y].frameY;
        }

        if (obj == 0)
        {
            if ((style & 1) == 1)
            {
                Main.tile[num, num2].frameY |= 1;
            }
            else
            {
                Main.tile[num, num2].frameY = (short) (Main.tile[num, num2].frameY & -2);
            }

            if ((style & 2) == 2)
            {
                Main.tile[num, num2].frameY |= 2;
            }
            else
            {
                Main.tile[num, num2].frameY = (short) (Main.tile[num, num2].frameY & -3);
            }

            if ((style & 4) == 4)
            {
                Main.tile[num, num2].frameY |= 4;
            }
            else
            {
                Main.tile[num, num2].frameY = (short) (Main.tile[num, num2].frameY & -5);
            }
        }

        if (obj == 1)
        {
            if ((style & 1) == 1)
            {
                Main.tile[num, num2].frameY |= 8;
            }
            else
            {
                Main.tile[num, num2].frameY = (short) (Main.tile[num, num2].frameY & -9);
            }

            if ((style & 2) == 2)
            {
                Main.tile[num, num2].frameY |= 16;
            }
            else
            {
                Main.tile[num, num2].frameY = (short) (Main.tile[num, num2].frameY & -17);
            }

            if ((style & 4) == 4)
            {
                Main.tile[num, num2].frameY |= 32;
            }
            else
            {
                Main.tile[num, num2].frameY = (short) (Main.tile[num, num2].frameY & -33);
            }
        }

        if (obj == 2)
        {
            if ((style & 1) == 1)
            {
                Main.tile[num, num2].frameY |= 64;
            }
            else
            {
                Main.tile[num, num2].frameY = (short) (Main.tile[num, num2].frameY & -65);
            }

            if ((style & 2) == 2)
            {
                Main.tile[num, num2].frameY |= 128;
            }
            else
            {
                Main.tile[num, num2].frameY = (short) (Main.tile[num, num2].frameY & -129);
            }

            if ((style & 4) == 4)
            {
                Main.tile[num, num2].frameY |= 256;
            }
            else
            {
                Main.tile[num, num2].frameY = (short) (Main.tile[num, num2].frameY & -257);
            }

            if ((style & 8) == 8)
            {
                Main.tile[num, num2].frameY |= 512;
            }
            else
            {
                Main.tile[num, num2].frameY = (short) (Main.tile[num, num2].frameY & -513);
            }
        }

        if (obj == 3)
        {
            if ((style & 1) == 1)
            {
                Main.tile[num, num2].frameY |= 1024;
            }
            else
            {
                Main.tile[num, num2].frameY = (short) (Main.tile[num, num2].frameY & -1025);
            }

            if ((style & 2) == 2)
            {
                Main.tile[num, num2].frameY |= 2048;
            }
            else
            {
                Main.tile[num, num2].frameY = (short) (Main.tile[num, num2].frameY & -2049);
            }

            if ((style & 4) == 4)
            {
                Main.tile[num, num2].frameY |= 4096;
            }
            else
            {
                Main.tile[num, num2].frameY = (short) (Main.tile[num, num2].frameY & -4097);
            }

            if ((style & 8) == 8)
            {
                Main.tile[num, num2].frameY |= 8192;
            }
            else
            {
                Main.tile[num, num2].frameY = (short) (Main.tile[num, num2].frameY & -8193);
            }
        }
    }

    public static int PlaceXmasTree_Direct(int x, int y, int type, int style, int dir)
    {
        for (short num = 0; num < 4; num = (short) (num + 1))
        {
            for (short num2 = 0; num2 < 8; num2 = (short) (num2 + 1))
            {
                Tile tile = Main.tile[x + num, y + num2];
                tile.active(true);
                tile.type = (ushort) type;
                if (num == 0 && num2 == 0)
                {
                    tile.frameX = 10;
                    tile.frameY = 0;
                }
                else
                {
                    tile.frameX = num;
                    tile.frameY = num2;
                }
            }
        }

        return 0;
    }

    public static void PlaceXmasTree(int x, int y, ushort type = 171)
    {
        bool flag = true;
        int num = x - 1;
        int num2 = y - 7;
        for (int i = num; i < num + 4; i++)
        {
            for (int j = num2; j < num2 + 8; j++)
            {
                if (Main.tile[i, j].active())
                {
                    flag = false;
                }
            }

            if (i > num && i < num + 3 && !SolidTile(i, num2 + 8))
            {
                flag = false;
            }
        }

        if (flag)
        {
            int num3 = 0;
            for (int k = num; k < num + 4; k++)
            {
                int num4 = 0;
                for (int l = num2; l < num2 + 8; l++)
                {
                    Main.tile[k, l].active(true);
                    if (num3 == 0 && num4 == 0)
                    {
                        Main.tile[k, l].frameX = 10;
                        Main.tile[k, l].frameY = 0;
                    }
                    else
                    {
                        Main.tile[k, l].frameX = (short) num3;
                        Main.tile[k, l].frameY = (short) num4;
                    }

                    Main.tile[k, l].type = type;
                    Main.tile[k, l].active(true);
                    num4++;
                }

                num3++;
            }
        }
    }

    public static void CheckXmasTree(int x, int y)
    {
        if (!destroyObject)
        {
            int num = x;
            int num2 = y;
            if (Main.tile[x, y].frameX < 10)
            {
                num -= Main.tile[x, y].frameX;
                num2 -= Main.tile[x, y].frameY;
            }

            bool flag = false;
            int num3 = 0;
            for (int i = num; i < num + 4; i++)
            {
                int num4 = 0;
                for (int j = num2; j < num2 + 8; j++)
                {
                    if (Main.tile[i, j].active() && Main.tile[i, j].type == 171)
                    {
                        if (num3 != 0 && num4 != 0 && Main.tile[i, j].frameX != num3 && Main.tile[i, j].frameY != num4)
                        {
                            flag = true;
                        }
                    }
                    else
                    {
                        flag = true;
                    }

                    num4++;
                }

                num3++;
                if (i > num && i < num + 3 && !SolidTile2(i, num2 + 8))
                {
                    flag = true;
                }
            }

            if (flag)
            {
                destroyObject = true;
                for (int k = num; k < num + 4; k++)
                {
                    for (int l = num2; l < num2 + 8; l++)
                    {
                        if (Main.tile[k, l].type == 171)
                        {
                            KillTile(k, l, false, false, false);
                        }
                    }
                }

                Item.NewItem(x * 16, y * 16, 32, 32, 1873, 1, false, 0, false, false);
                destroyObject = false;
            }
        }
    }

    public static void Place2xX(int x, int y, ushort type, int style = 0)
    {
        int num = style * 36;
        int num2 = 0;
        int num3 = 3;
        if (type == 105 && style == 34)
        {
            type = 349;
            style = 0;
            num = 0;
        }

        if (type == 105)
        {
            int num4 = style / 55;
            num -= 1980 * num4;
            num2 += 54 * num4;
        }

        if (type == 104)
        {
            num3 = 5;
        }

        if (type == 207)
        {
            num3 = 4;
        }

        bool flag = true;
        for (int i = y - num3 + 1; i < y + 1; i++)
        {
            if (Main.tile[x, i] == null)
            {
                Tile[,] tile = Main.tile;
                int num5 = i;
                Tile tile2 = new Tile();
                tile[x, num5] = tile2;
            }

            if (Main.tile[x, i].active())
            {
                flag = false;
            }

            if (Main.tile[x + 1, i] == null)
            {
                Tile[,] tile3 = Main.tile;
                int num6 = x + 1;
                int num7 = i;
                Tile tile4 = new Tile();
                tile3[num6, num7] = tile4;
            }

            if (Main.tile[x + 1, i].active())
            {
                flag = false;
            }
        }

        if (flag && SolidTile2(x, y + 1) && SolidTile2(x + 1, y + 1))
        {
            for (int j = 0; j < num3; j++)
            {
                Main.tile[x, y - num3 + 1 + j].active(true);
                Main.tile[x, y - num3 + 1 + j].frameY = (short) (num2 + j * 18);
                Main.tile[x, y - num3 + 1 + j].frameX = (short) num;
                Main.tile[x, y - num3 + 1 + j].type = type;
                Main.tile[x + 1, y - num3 + 1 + j].active(true);
                Main.tile[x + 1, y - num3 + 1 + j].frameY = (short) (num2 + j * 18);
                Main.tile[x + 1, y - num3 + 1 + j].frameX = (short) (num + 18);
                Main.tile[x + 1, y - num3 + 1 + j].type = type;
            }
        }
    }

    public static void Check1x2(int x, int j, ushort type)
    {
        if (!destroyObject)
        {
            int num = j;
            bool flag = true;
            if (Main.tile[x, num] == null)
            {
                Tile[,] tile = Main.tile;
                int num2 = num;
                Tile tile2 = new Tile();
                tile[x, num2] = tile2;
            }

            if (Main.tile[x, num + 1] == null)
            {
                Tile[,] tile3 = Main.tile;
                int num3 = num + 1;
                Tile tile4 = new Tile();
                tile3[x, num3] = tile4;
            }

            int num4 = Main.tile[x, num].frameY;
            int num5 = 0;
            while (num4 >= 40)
            {
                num4 -= 40;
                num5++;
            }

            if (num4 == 18)
            {
                num--;
            }

            if (Main.tile[x, num] == null)
            {
                Tile[,] tile5 = Main.tile;
                int num6 = num;
                Tile tile6 = new Tile();
                tile5[x, num6] = tile6;
            }

            if (Main.tile[x, num].frameY == 40 * num5 && Main.tile[x, num + 1].frameY == 40 * num5 + 18 &&
                Main.tile[x, num].type == type && Main.tile[x, num + 1].type == type)
            {
                flag = false;
            }

            if (Main.tile[x, num + 2] == null)
            {
                Tile[,] tile7 = Main.tile;
                int num7 = num + 2;
                Tile tile8 = new Tile();
                tile7[x, num7] = tile8;
            }

            if (!SolidTileAllowBottomSlope(x, num + 2) && !TileID.Sets.Platforms[Main.tile[x, num + 2].type])
            {
                flag = true;
            }

            if (Main.tile[x, num].type == 20)
            {
                int num8 = Main.tile[x, num].frameX / 54;
                int type2 = Main.tile[x, num + 2].type;
                int num9 = -1;
                switch (type2)
                {
                    case 2:
                        num9 = 0;
                        break;
                    case 147:
                        num9 = 1;
                        break;
                    case 60:
                        num9 = 2;
                        break;
                    case 23:
                        num9 = 3;
                        break;
                    case 199:
                        num9 = 4;
                        break;
                    case 109:
                        num9 = 5;
                        break;
                    case 53:
                        num9 = 6;
                        break;
                    case 116:
                        num9 = 7;
                        break;
                    case 234:
                        num9 = 8;
                        break;
                    case 112:
                        num9 = 9;
                        break;
                    default:
                        flag = true;
                        break;
                }

                if (!flag && num8 != num9)
                {
                    int num10 = 54 * num9;
                    num10 += genRand.Next(3) * 18;
                    Main.tile[x, num].frameX = (short) num10;
                    Main.tile[x, num + 1].frameX = (short) num10;
                }
            }

            if (flag)
            {
                destroyObject = true;
                if (Main.tile[x, num].type == type)
                {
                    KillTile(x, num, false, false, false);
                }

                if (Main.tile[x, num + 1].type == type)
                {
                    KillTile(x, num + 1, false, false, false);
                }

                if (type == 216)
                {
                    Item.NewItem(x * 16, num * 16, 32, 32, 970 + num5, 1, false, 0, false, false);
                }

                if (type == 338)
                {
                    Item.NewItem(x * 16, num * 16, 32, 32, 2738, 1, false, 0, false, false);
                }

                if (type == 390)
                {
                    Item.NewItem(x * 16, num * 16, 16, 32, 3253, 1, false, 0, false, false);
                }

                switch (type)
                {
                    case 15:
                    {
                        int type3;
                        if (num5 < 18 || num5 > 23)
                        {
                            switch (num5)
                            {
                                case 5:
                                    type3 = 806;
                                    break;
                                case 6:
                                    type3 = 807;
                                    break;
                                case 7:
                                    type3 = 808;
                                    break;
                                case 8:
                                    type3 = 809;
                                    break;
                                case 9:
                                    type3 = 810;
                                    break;
                                case 10:
                                    type3 = 826;
                                    break;
                                case 11:
                                    type3 = 915;
                                    break;
                                case 13:
                                    type3 = 1396;
                                    break;
                                case 14:
                                    type3 = 1399;
                                    break;
                                case 15:
                                    type3 = 1402;
                                    break;
                                case 12:
                                    type3 = 1143;
                                    break;
                                case 4:
                                    type3 = 630;
                                    break;
                                case 3:
                                    type3 = 629;
                                    break;
                                case 2:
                                    type3 = 628;
                                    break;
                                case 17:
                                    type3 = 1509;
                                    break;
                                case 1:
                                    type3 = 358;
                                    break;
                                case 24:
                                    type3 = 1792;
                                    break;
                                case 25:
                                    type3 = 1814;
                                    break;
                                case 16:
                                    type3 = 1459;
                                    break;
                                case 26:
                                    type3 = 1925;
                                    break;
                                case 27:
                                    type3 = 2228;
                                    break;
                                case 28:
                                    type3 = 2288;
                                    break;
                                case 29:
                                    type3 = 2524;
                                    break;
                                case 30:
                                    type3 = 2557;
                                    break;
                                case 31:
                                    type3 = 2572;
                                    break;
                                case 32:
                                    type3 = 2812;
                                    break;
                                case 33:
                                    type3 = 3174;
                                    break;
                                case 34:
                                    type3 = 3176;
                                    break;
                                case 35:
                                    type3 = 3175;
                                    break;
                                case 36:
                                    type3 = 3889;
                                    break;
                                default:
                                    type3 = 34;
                                    break;
                            }
                        }
                        else
                        {
                            type3 = 1703 + num5 - 18;
                        }

                        Item.NewItem(x * 16, num * 16, 32, 32, type3, 1, false, 0, false, false);
                        break;
                    }
                    case 134:
                        if (num5 == 1)
                        {
                            Item.NewItem(x * 16, num * 16, 32, 32, 1220, 1, false, 0, false, false);
                        }
                        else
                        {
                            Item.NewItem(x * 16, num * 16, 32, 32, 525, 1, false, 0, false, false);
                        }

                        break;
                }

                destroyObject = false;
            }
        }
    }

    public static void CheckOnTable1x1(int x, int y, int type)
    {
        if (Main.tile[x, y + 1] != null && (!Main.tile[x, y + 1].active() ||
                                            !Main.tileTable[Main.tile[x, y + 1].type] ||
                                            Main.tile[x, y + 1].topSlope() || Main.tile[x, y + 1].halfBrick()))
        {
            if (type == 78)
            {
                if (!SolidTile2(x, y + 1))
                {
                    KillTile(x, y, false, false, false);
                }
            }
            else
            {
                KillTile(x, y, false, false, false);
            }
        }
    }

    public static void CheckSign(int x, int y, ushort type)
    {
        if (!destroyObject)
        {
            int num = x - 2;
            int num2 = x + 3;
            int num3 = y - 2;
            int num4 = y + 3;
            if (num >= 0 && num2 <= Main.maxTilesX && num3 >= 0 && num4 <= Main.maxTilesY)
            {
                bool flag = false;
                for (int i = num; i < num2; i++)
                {
                    for (int j = num3; j < num4; j++)
                    {
                        if (Main.tile[i, j] == null)
                        {
                            Tile[,] tile = Main.tile;
                            int num5 = i;
                            int num6 = j;
                            Tile tile2 = new Tile();
                            tile[num5, num6] = tile2;
                        }
                    }
                }

                int num7 = Main.tile[x, y].frameX / 18;
                int num8 = Main.tile[x, y].frameY / 18;
                num7 %= 2;
                int num9 = x - num7;
                int num10 = y - num8;
                int num11 = Main.tile[num9, num10].frameX / 18 / 2;
                int num12 = Main.tile[x, y].frameX / 18;
                int num13 = 0;
                while (num12 > 1)
                {
                    num12 -= 2;
                    num13++;
                }

                num = num9;
                num2 = num9 + 2;
                num3 = num10;
                num4 = num10 + 2;
                num7 = 0;
                for (int k = num; k < num2; k++)
                {
                    num8 = 0;
                    for (int l = num3; l < num4; l++)
                    {
                        if (!Main.tile[k, l].active() || Main.tile[k, l].type != type)
                        {
                            flag = true;
                            break;
                        }

                        if (Main.tile[k, l].frameX / 18 != num7 + num11 * 2 || Main.tile[k, l].frameY / 18 != num8)
                        {
                            flag = true;
                            break;
                        }

                        num8++;
                    }

                    num7++;
                }

                if (!flag)
                {
                    if (type == 85)
                    {
                        if (Main.tile[num9, num10 + 2].active() &&
                            (Main.tileSolid[Main.tile[num9, num10 + 2].type] ||
                             Main.tileSolidTop[Main.tile[num9, num10 + 2].type]) &&
                            Main.tile[num9 + 1, num10 + 2].active() &&
                            (Main.tileSolid[Main.tile[num9 + 1, num10 + 2].type] ||
                             Main.tileSolidTop[Main.tile[num9 + 1, num10 + 2].type]))
                        {
                            num11 = num13;
                        }
                        else
                        {
                            flag = true;
                        }
                    }
                    else if (Main.tile[num9, num10 + 2].active() &&
                             (Main.tileSolid[Main.tile[num9, num10 + 2].type] ||
                              (Main.tileSolidTop[Main.tile[num9, num10 + 2].type] &&
                               !Main.tileNoAttach[Main.tile[num9, num10 + 2].type])) &&
                             Main.tile[num9 + 1, num10 + 2].active() &&
                             (Main.tileSolid[Main.tile[num9 + 1, num10 + 2].type] ||
                              (Main.tileSolidTop[Main.tile[num9 + 1, num10 + 2].type] &&
                               !Main.tileNoAttach[Main.tile[num9 + 1, num10 + 2].type])))
                    {
                        num11 = 0;
                    }
                    else if (Main.tile[num9, num10 - 1].nactive() && Main.tileSolid[Main.tile[num9, num10 - 1].type] &&
                             !Main.tileSolidTop[Main.tile[num9, num10 - 1].type] &&
                             !Main.tileNoAttach[Main.tile[num9, num10 - 1].type] &&
                             Main.tile[num9 + 1, num10 - 1].nactive() &&
                             Main.tileSolid[Main.tile[num9 + 1, num10 - 1].type] &&
                             !Main.tileSolidTop[Main.tile[num9 + 1, num10 - 1].type] &&
                             !Main.tileNoAttach[Main.tile[num9 + 1, num10 - 1].type])
                    {
                        num11 = 1;
                    }
                    else if (Main.tile[num9 - 1, num10].nactive() && Main.tileSolid[Main.tile[num9 - 1, num10].type] &&
                             !Main.tileSolidTop[Main.tile[num9 - 1, num10].type] &&
                             !Main.tileNoAttach[Main.tile[num9 - 1, num10].type] &&
                             Main.tile[num9 - 1, num10 + 1].nactive() &&
                             Main.tileSolid[Main.tile[num9 - 1, num10 + 1].type] &&
                             !Main.tileSolidTop[Main.tile[num9 - 1, num10 + 1].type] &&
                             !Main.tileNoAttach[Main.tile[num9 - 1, num10 + 1].type])
                    {
                        num11 = 2;
                    }
                    else if (Main.tile[num9 + 2, num10].nactive() && Main.tileSolid[Main.tile[num9 + 2, num10].type] &&
                             !Main.tileSolidTop[Main.tile[num9 + 2, num10].type] &&
                             !Main.tileNoAttach[Main.tile[num9 + 2, num10].type] &&
                             Main.tile[num9 + 2, num10 + 1].nactive() &&
                             Main.tileSolid[Main.tile[num9 + 2, num10 + 1].type] &&
                             !Main.tileSolidTop[Main.tile[num9 + 2, num10 + 1].type] &&
                             !Main.tileNoAttach[Main.tile[num9 + 2, num10 + 1].type])
                    {
                        num11 = 3;
                    }
                    else if (Main.tile[num9, num10].wall > 0 && Main.tile[num9 + 1, num10].wall > 0 &&
                             Main.tile[num9, num10 + 1].wall > 0 && Main.tile[num9 + 1, num10 + 1].wall > 0)
                    {
                        num11 = 4;
                    }
                    else
                    {
                        flag = true;
                    }
                }

                if (flag)
                {
                    if (type == 395)
                    {
                        int num14 = TEItemFrame.Find(num9, num10);
                        if (num14 != -1 && ((TEItemFrame) TileEntity.ByID[num14]).item.stack > 0)
                        {
                            ((TEItemFrame) TileEntity.ByID[num14]).DropItem();
                            if (Main.netMode != 2)
                            {
                                Main.blockMouse = true;
                            }

                            return;
                        }
                    }

                    destroyObject = true;
                    for (int m = num; m < num2; m++)
                    {
                        for (int n = num3; n < num4; n++)
                        {
                            if (Main.tile[m, n].type == type)
                            {
                                KillTile(m, n, false, false, false);
                            }
                        }
                    }

                    if (type != 395)
                    {
                        Sign.KillSign(num9, num10);
                    }

                    switch (type)
                    {
                        case 85:
                        {
                            int type2 = 321;
                            if (num13 >= 6 && num13 <= 10)
                            {
                                type2 = 3229 + num13 - 6;
                            }
                            else if (num13 >= 1 && num13 <= 5)
                            {
                                type2 = 1173 + num13 - 1;
                            }

                            Item.NewItem(x * 16, y * 16, 32, 32, type2, 1, false, 0, false, false);
                            break;
                        }
                        case 395:
                            Item.NewItem(num9 * 16, num10 * 16, 32, 32, 3270, 1, false, 0, false, false);
                            TEItemFrame.Kill(num9, num10);
                            break;
                        case 425:
                            Item.NewItem(num9 * 16, num10 * 16, 32, 32, 3617, 1, false, 0, false, false);
                            break;
                        default:
                            Item.NewItem(x * 16, y * 16, 32, 32, 171, 1, false, 0, false, false);
                            break;
                    }

                    destroyObject = false;
                }
                else
                {
                    int num15 = 36 * num11;
                    for (int num16 = 0; num16 < 2; num16++)
                    {
                        for (int num17 = 0; num17 < 2; num17++)
                        {
                            Main.tile[num9 + num16, num10 + num17].active(true);
                            Main.tile[num9 + num16, num10 + num17].type = type;
                            Main.tile[num9 + num16, num10 + num17].frameX = (short) (num15 + 18 * num16);
                            Main.tile[num9 + num16, num10 + num17].frameY = (short) (18 * num17);
                        }
                    }
                }
            }
        }
    }

    public static bool PlaceSign(int x, int y, ushort type, int Style = 0)
    {
        int num = x - 2;
        int num2 = x + 3;
        int num3 = y - 2;
        int num4 = y + 3;
        if (num < 0)
        {
            return false;
        }

        if (num2 > Main.maxTilesX)
        {
            return false;
        }

        if (num3 < 0)
        {
            return false;
        }

        if (num4 > Main.maxTilesY)
        {
            return false;
        }

        for (int i = num; i < num2; i++)
        {
            for (int j = num3; j < num4; j++)
            {
                if (Main.tile[i, j] == null)
                {
                    Tile[,] tile = Main.tile;
                    int num5 = i;
                    int num6 = j;
                    Tile tile2 = new Tile();
                    tile[num5, num6] = tile2;
                }
            }
        }

        int num7 = x;
        int num8 = y;
        int num9 = 0;
        if (type == 55 || type == 425)
        {
            if (SolidTile2(x, y + 1) && SolidTile2(x + 1, y + 1))
            {
                num8--;
                num9 = 0;
            }
            else if (Main.tile[x, y - 1].nactive() && Main.tileSolid[Main.tile[x, y - 1].type] &&
                     !Main.tileSolidTop[Main.tile[x, y - 1].type] && Main.tile[x + 1, y - 1].nactive() &&
                     Main.tileSolid[Main.tile[x + 1, y - 1].type] && !Main.tileSolidTop[Main.tile[x + 1, y - 1].type])
            {
                num9 = 1;
            }
            else if (Main.tile[x - 1, y].nactive() && Main.tileSolid[Main.tile[x - 1, y].type] &&
                     !Main.tileSolidTop[Main.tile[x - 1, y].type] && !Main.tileNoAttach[Main.tile[x - 1, y].type] &&
                     Main.tile[x - 1, y + 1].nactive() && Main.tileSolid[Main.tile[x - 1, y + 1].type] &&
                     !Main.tileSolidTop[Main.tile[x - 1, y + 1].type] &&
                     !Main.tileNoAttach[Main.tile[x - 1, y + 1].type])
            {
                num9 = 2;
            }
            else if (Main.tile[x + 1, y].nactive() && Main.tileSolid[Main.tile[x + 1, y].type] &&
                     !Main.tileSolidTop[Main.tile[x + 1, y].type] && !Main.tileNoAttach[Main.tile[x + 1, y].type] &&
                     Main.tile[x + 1, y + 1].nactive() && Main.tileSolid[Main.tile[x + 1, y + 1].type] &&
                     !Main.tileSolidTop[Main.tile[x + 1, y + 1].type] &&
                     !Main.tileNoAttach[Main.tile[x + 1, y + 1].type])
            {
                num7--;
                num9 = 3;
            }
            else
            {
                if (Main.tile[num7, num8].wall <= 0 || Main.tile[num7 + 1, num8].wall <= 0 ||
                    Main.tile[num7, num8 + 1].wall <= 0 || Main.tile[num7 + 1, num8 + 1].wall <= 0)
                {
                    return false;
                }

                num9 = 4;
            }
        }

        if (Main.tile[num7, num8].active() || Main.tile[num7 + 1, num8].active() ||
            Main.tile[num7, num8 + 1].active() || Main.tile[num7 + 1, num8 + 1].active())
        {
            return false;
        }

        int num10 = 36 * num9;
        for (int k = 0; k < 2; k++)
        {
            for (int l = 0; l < 2; l++)
            {
                Main.tile[num7 + k, num8 + l].active(true);
                Main.tile[num7 + k, num8 + l].type = type;
                Main.tile[num7 + k, num8 + l].frameX = (short) (num10 + 18 * k);
                Main.tile[num7 + k, num8 + l].frameY = (short) (18 * l);
            }
        }

        return true;
    }

    public static bool Place2x2Horizontal(int x, int y, ushort type, int Style = 0)
    {
        int num = x - 2;
        int num2 = x + 3;
        int num3 = y - 2;
        int num4 = y + 3;
        if (num < 0)
        {
            return false;
        }

        if (num2 > Main.maxTilesX)
        {
            return false;
        }

        if (num3 < 0)
        {
            return false;
        }

        if (num4 > Main.maxTilesY)
        {
            return false;
        }

        for (int i = num; i < num2; i++)
        {
            for (int j = num3; j < num4; j++)
            {
                if (Main.tile[i, j] == null)
                {
                    Tile[,] tile = Main.tile;
                    int num5 = i;
                    int num6 = j;
                    Tile tile2 = new Tile();
                    tile[num5, num6] = tile2;
                }
            }
        }

        int num7 = 0;
        if (!SolidTile2(x, y + 1) || !SolidTile2(x + 1, y + 1))
        {
            return false;
        }

        int num8 = y - 1;
        if (Main.tile[x, num8].active() || Main.tile[x + 1, num8].active() || Main.tile[x, num8 + 1].active() ||
            Main.tile[x + 1, num8 + 1].active())
        {
            return false;
        }

        int num9 = 36 * Style;
        for (int k = 0; k < 2; k++)
        {
            for (int l = 0; l < 2; l++)
            {
                Main.tile[x + k, num8 + l].active(true);
                Main.tile[x + k, num8 + l].type = type;
                Main.tile[x + k, num8 + l].frameX = (short) (num9 + 18 * k);
                Main.tile[x + k, num8 + l].frameY = (short) (18 * l);
            }
        }

        return true;
    }

    public static Color paintColor(int color)
    {
        Color white = Color.White;
        if (color == 1 || color == 13)
        {
            white.R = byte.MaxValue;
            white.G = 0;
            white.B = 0;
        }

        if (color == 2 || color == 14)
        {
            white.R = byte.MaxValue;
            white.G = 127;
            white.B = 0;
        }

        if (color == 3 || color == 15)
        {
            white.R = byte.MaxValue;
            white.G = byte.MaxValue;
            white.B = 0;
        }

        if (color == 4 || color == 16)
        {
            white.R = 127;
            white.G = byte.MaxValue;
            white.B = 0;
        }

        if (color == 5 || color == 17)
        {
            white.R = 0;
            white.G = byte.MaxValue;
            white.B = 0;
        }

        if (color == 6 || color == 18)
        {
            white.R = 0;
            white.G = byte.MaxValue;
            white.B = 127;
        }

        if (color == 7 || color == 19)
        {
            white.R = 0;
            white.G = byte.MaxValue;
            white.B = byte.MaxValue;
        }

        if (color == 8 || color == 20)
        {
            white.R = 0;
            white.G = 127;
            white.B = byte.MaxValue;
        }

        if (color == 9 || color == 21)
        {
            white.R = 0;
            white.G = 0;
            white.B = byte.MaxValue;
        }

        if (color == 10 || color == 22)
        {
            white.R = 127;
            white.G = 0;
            white.B = byte.MaxValue;
        }

        if (color == 11 || color == 23)
        {
            white.R = byte.MaxValue;
            white.G = 0;
            white.B = byte.MaxValue;
        }

        if (color == 12 || color == 24)
        {
            white.R = byte.MaxValue;
            white.G = 0;
            white.B = 127;
        }

        if (color == 25)
        {
            white.R = 75;
            white.G = 75;
            white.B = 75;
        }

        if (color == 26)
        {
            white.R = byte.MaxValue;
            white.G = byte.MaxValue;
            white.B = byte.MaxValue;
        }

        if (color == 27)
        {
            white.R = 175;
            white.G = 175;
            white.B = 175;
        }

        if (color == 28)
        {
            white.R = byte.MaxValue;
            white.G = 178;
            white.B = 125;
        }

        if (color == 29)
        {
            white.R = 25;
            white.G = 25;
            white.B = 25;
        }

        if (color == 30)
        {
            white.R = 200;
            white.G = 200;
            white.B = 200;
            white.A = 150;
        }

        return white;
    }

    public static void paintEffect(int x, int y, byte color, byte oldColor)
    {
        int color2 = color;
        if (color == 0)
        {
            color2 = oldColor;
        }

        Color newColor = paintColor(color2);
        for (int i = 0; i < 10; i++)
        {
            int num = Dust.NewDust(new Vector2((float) (x * 16), (float) (y * 16)), 16, 16, 143, 0f, 0f, 50, newColor,
                1f);
            if (genRand.Next(2) == 0)
            {
                Main.dust[num].noGravity = true;
                Main.dust[num].scale *= 1.2f;
            }
            else
            {
                Main.dust[num].scale *= 0.5f;
            }
        }
    }

    public static bool paintTile(int x, int y, byte color, bool broadCast = false)
    {
        if (Main.tile[x, y] == null || !Main.tile[x, y].active())
        {
            return false;
        }

        byte oldColor = Main.tile[x, y].color();
        Main.tile[x, y].color(color);
        if (broadCast)
        {
            NetMessage.SendData(63, -1, -1, null, x, (float) y, (float) (int) color, 0f, 0, 0, 0);
        }

        paintEffect(x, y, color, oldColor);
        return true;
    }

    public static bool paintWall(int x, int y, byte color, bool broadCast = false)
    {
        if (Main.tile[x, y] == null || Main.tile[x, y].wall == 0)
        {
            return false;
        }

        byte oldColor = Main.tile[x, y].wallColor();
        Main.tile[x, y].wallColor(color);
        if (broadCast)
        {
            NetMessage.SendData(64, -1, -1, null, x, (float) y, (float) (int) color, 0f, 0, 0, 0);
        }

        paintEffect(x, y, color, oldColor);
        return true;
    }

    public static void Place3x3Wall(int x, int y, ushort type, int style)
    {
        int num = x - 1;
        int num2 = y - 1;
        bool flag = true;
        for (int i = num; i < num + 3; i++)
        {
            for (int j = num2; j < num2 + 3; j++)
            {
                if (Main.tile[i, j].active() || Main.tile[i, j].wall == 0)
                {
                    flag = false;
                    break;
                }
            }
        }

        if (flag)
        {
            int num3 = 0;
            while (style > 35)
            {
                num3++;
                style -= 36;
            }

            int num4 = style * 54;
            int num5 = num3 * 54;
            for (int k = num; k < num + 3; k++)
            {
                for (int l = num2; l < num2 + 3; l++)
                {
                    Main.tile[k, l].active(true);
                    Main.tile[k, l].type = type;
                    Main.tile[k, l].frameX = (short) (num4 + 18 * (k - num));
                    Main.tile[k, l].frameY = (short) (num5 + 18 * (l - num2));
                }
            }
        }
    }

    public static void Check3x3Wall(int x, int y)
    {
        if (!destroyObject)
        {
            bool flag = false;
            int type = Main.tile[x, y].type;
            int num = 0;
            int num2 = 0;
            int num3 = Main.tile[x, y].frameX / 18;
            while (num3 >= 3)
            {
                num3 -= 3;
                num++;
            }

            int num4 = x - num3;
            int num5 = Main.tile[x, y].frameY / 18;
            while (num5 >= 3)
            {
                num5 -= 3;
                num2++;
            }

            int num6 = y - num5;
            num5 = num2 * 54;
            num3 = num * 54;
            for (int i = num4; i < num4 + 3; i++)
            {
                for (int j = num6; j < num6 + 3; j++)
                {
                    if (Main.tile[i, j].type != type || !Main.tile[i, j].active() || Main.tile[i, j].wall <= 0 ||
                        Main.tile[i, j].frameX != num3 + (i - num4) * 18 ||
                        Main.tile[i, j].frameY != num5 + (j - num6) * 18)
                    {
                        flag = true;
                        break;
                    }
                }
            }

            if (flag)
            {
                destroyObject = true;
                for (int k = num4; k < num4 + 3; k++)
                {
                    for (int l = num6; l < num6 + 3; l++)
                    {
                        if (Main.tile[k, l].type == type && Main.tile[k, l].active())
                        {
                            KillTile(k, l, false, false, false);
                        }
                    }
                }

                switch (type)
                {
                    case 240:
                        num += num2 * 36;
                        switch (num)
                        {
                            case 37:
                                Item.NewItem(x * 16, y * 16, 32, 32, 1856, 1, false, 0, false, false);
                                break;
                            case 36:
                                Item.NewItem(x * 16, y * 16, 32, 32, 1855, 1, false, 0, false, false);
                                break;
                            case 38:
                                Item.NewItem(x * 16, y * 16, 32, 32, 1960, 1, false, 0, false, false);
                                break;
                            case 39:
                                Item.NewItem(x * 16, y * 16, 32, 32, 1961, 1, false, 0, false, false);
                                break;
                            case 40:
                                Item.NewItem(x * 16, y * 16, 32, 32, 1962, 1, false, 0, false, false);
                                break;
                            case 33:
                                Item.NewItem(x * 16, y * 16, 32, 32, 1574, 1, false, 0, false, false);
                                break;
                            case 34:
                                Item.NewItem(x * 16, y * 16, 32, 32, 1575, 1, false, 0, false, false);
                                break;
                            case 35:
                                Item.NewItem(x * 16, y * 16, 32, 32, 1576, 1, false, 0, false, false);
                                break;
                            case 18:
                                Item.NewItem(x * 16, y * 16, 32, 32, 1419, 1, false, 0, false, false);
                                break;
                            case 19:
                                Item.NewItem(x * 16, y * 16, 32, 32, 1420, 1, false, 0, false, false);
                                break;
                            case 20:
                                Item.NewItem(x * 16, y * 16, 32, 32, 1427, 1, false, 0, false, false);
                                break;
                            case 21:
                                Item.NewItem(x * 16, y * 16, 32, 32, 1428, 1, false, 0, false, false);
                                break;
                            case 54:
                                Item.NewItem(x * 16, y * 16, 32, 32, 2489, 1, false, 0, false, false);
                                break;
                            case 55:
                                Item.NewItem(x * 16, y * 16, 32, 32, 2589, 1, false, 0, false, false);
                                break;
                            case 56:
                                Item.NewItem(x * 16, y * 16, 32, 32, 3357, 1, false, 0, false, false);
                                break;
                            case 57:
                                Item.NewItem(x * 16, y * 16, 32, 32, 3358, 1, false, 0, false, false);
                                break;
                            case 58:
                                Item.NewItem(x * 16, y * 16, 32, 32, 3359, 1, false, 0, false, false);
                                break;
                            case 59:
                                Item.NewItem(x * 16, y * 16, 32, 32, 3595, 1, false, 0, false, false);
                                break;
                            case 60:
                                Item.NewItem(x * 16, y * 16, 32, 32, 3867, 1, false, 0, false, false);
                                break;
                            case 61:
                                Item.NewItem(x * 16, y * 16, 32, 32, 3866, 1, false, 0, false, false);
                                break;
                            case 62:
                                Item.NewItem(x * 16, y * 16, 32, 32, 3868, 1, false, 0, false, false);
                                break;
                            case 41:
                            case 42:
                            case 43:
                            case 44:
                            case 45:
                                Item.NewItem(x * 16, y * 16, 32, 32, 2114 + num - 41, 1, false, 0, false, false);
                                break;
                            default:
                                if (num >= 46 && num <= 53)
                                {
                                    Item.NewItem(x * 16, y * 16, 32, 32, 2442 + num - 46, 1, false, 0, false, false);
                                }
                                else if (num >= 22 && num <= 25)
                                {
                                    Item.NewItem(x * 16, y * 16, 32, 32, 1440 + num - 22, 1, false, 0, false, false);
                                }
                                else if (num >= 26 && num <= 29)
                                {
                                    Item.NewItem(x * 16, y * 16, 32, 32, 1496 + num - 26, 1, false, 0, false, false);
                                }
                                else if (num >= 30 && num <= 32)
                                {
                                    Item.NewItem(x * 16, y * 16, 32, 32, 1538 + num - 30, 1, false, 0, false, false);
                                }
                                else
                                {
                                    Item.NewItem(x * 16, y * 16, 32, 32, 1360 + num, 1, false, 0, false, false);
                                }

                                break;
                        }

                        break;
                    case 440:
                    {
                        int num7 = -1;
                        int num8 = -1;
                        switch (num)
                        {
                            case 0:
                                num7 = 3644;
                                num8 = 1526;
                                break;
                            case 1:
                                num7 = 3645;
                                num8 = 1524;
                                break;
                            case 2:
                                num7 = 3646;
                                num8 = 1525;
                                break;
                            case 3:
                                num7 = 3647;
                                num8 = 1523;
                                break;
                            case 4:
                                num7 = 3648;
                                num8 = 1522;
                                break;
                            case 5:
                                num7 = 3649;
                                num8 = 1527;
                                break;
                            case 6:
                                num7 = 3650;
                                num8 = 3643;
                                break;
                        }

                        if (num7 != -1)
                        {
                            Item.NewItem(x * 16, y * 16, 32, 32, num7, 1, false, 0, false, false);
                        }

                        if (num8 != -1 && num2 == 1)
                        {
                            Item.NewItem(x * 16, y * 16, 32, 32, num8, 1, false, 0, false, false);
                        }

                        break;
                    }
                }

                destroyObject = false;
            }
        }
    }

    public static void Place2x3Wall(int x, int y, ushort type, int style)
    {
        int num = y - 1;
        bool flag = true;
        for (int i = x; i < x + 2; i++)
        {
            for (int j = num; j < num + 3; j++)
            {
                if (Main.tile[i, j].active() || Main.tile[i, j].wall == 0)
                {
                    flag = false;
                    break;
                }
            }
        }

        if (flag)
        {
            int num2 = style * 36;
            int num3 = 0;
            for (int k = x; k < x + 2; k++)
            {
                for (int l = num; l < num + 3; l++)
                {
                    Main.tile[k, l].active(true);
                    Main.tile[k, l].type = type;
                    Main.tile[k, l].frameX = (short) (num2 + 18 * (k - x));
                    Main.tile[k, l].frameY = (short) (num3 + 18 * (l - num));
                }
            }
        }
    }

    public static void Check2x3Wall(int x, int y)
    {
        if (!destroyObject)
        {
            bool flag = false;
            int type = Main.tile[x, y].type;
            int num = 0;
            int num2 = Main.tile[x, y].frameX / 18;
            while (num2 >= 2)
            {
                num2 -= 2;
                num++;
            }

            int num3 = x - num2;
            int num4 = y - Main.tile[x, y].frameY / 18;
            num2 = num * 36;
            for (int i = num3; i < num3 + 2; i++)
            {
                for (int j = num4; j < num4 + 3; j++)
                {
                    if (Main.tile[i, j].type != type || !Main.tile[i, j].active() || Main.tile[i, j].wall <= 0 ||
                        Main.tile[i, j].frameX != num2 + (i - num3) * 18 || Main.tile[i, j].frameY != (j - num4) * 18)
                    {
                        flag = true;
                        break;
                    }
                }
            }

            if (flag)
            {
                destroyObject = true;
                for (int k = num3; k < num3 + 2; k++)
                {
                    for (int l = num4; l < num4 + 3; l++)
                    {
                        if (Main.tile[k, l].type == type && Main.tile[k, l].active())
                        {
                            KillTile(k, l, false, false, false);
                        }
                    }
                }

                if (type == 245)
                {
                    switch (num)
                    {
                        case 6:
                            Item.NewItem(x * 16, y * 16, 32, 32, 1577, 1, false, 0, false, false);
                            break;
                        case 5:
                            Item.NewItem(x * 16, y * 16, 32, 32, 1495, 1, false, 0, false, false);
                            break;
                        default:
                            Item.NewItem(x * 16, y * 16, 32, 32, 1474 + num, 1, false, 0, false, false);
                            break;
                    }
                }

                destroyObject = false;
            }
        }
    }

    public static void Place3x2Wall(int x, int y, ushort type, int style)
    {
        int num = x - 1;
        bool flag = true;
        for (int i = num; i < num + 3; i++)
        {
            for (int j = y; j < y + 2; j++)
            {
                if (Main.tile[i, j].active() || Main.tile[i, j].wall == 0)
                {
                    flag = false;
                    break;
                }
            }
        }

        if (flag)
        {
            int num2 = 0;
            int num3 = style * 36;
            for (int k = num; k < num + 3; k++)
            {
                for (int l = y; l < y + 2; l++)
                {
                    Main.tile[k, l].active(true);
                    Main.tile[k, l].type = type;
                    Main.tile[k, l].frameX = (short) (num2 + 18 * (k - num));
                    Main.tile[k, l].frameY = (short) (num3 + 18 * (l - y));
                }
            }
        }
    }

    public static void Check3x2Wall(int x, int y)
    {
        if (!destroyObject)
        {
            bool flag = false;
            int type = Main.tile[x, y].type;
            int num = 0;
            int num2 = Main.tile[x, y].frameY / 18;
            while (num2 >= 2)
            {
                num2 -= 2;
                num++;
            }

            int num3 = y - num2;
            int num4 = x - Main.tile[x, y].frameX / 18;
            num2 = num * 36;
            for (int i = num4; i < num4 + 3; i++)
            {
                for (int j = num3; j < num3 + 2; j++)
                {
                    if (Main.tile[i, j].type != type || !Main.tile[i, j].active() || Main.tile[i, j].wall <= 0 ||
                        Main.tile[i, j].frameY != num2 + (j - num3) * 18 || Main.tile[i, j].frameX != (i - num4) * 18)
                    {
                        flag = true;
                        break;
                    }
                }
            }

            if (flag)
            {
                destroyObject = true;
                for (int k = num4; k < num4 + 3; k++)
                {
                    for (int l = num3; l < num3 + 2; l++)
                    {
                        if (Main.tile[k, l].type == type && Main.tile[k, l].active())
                        {
                            KillTile(k, l, false, false, false);
                        }
                    }
                }

                if (type == 246)
                {
                    switch (num)
                    {
                        case 16:
                            Item.NewItem(x * 16, y * 16, 32, 32, 1541, 1, false, 0, false, false);
                            break;
                        case 17:
                            Item.NewItem(x * 16, y * 16, 32, 32, 1542, 1, false, 0, false, false);
                            break;
                        case 18:
                            Item.NewItem(x * 16, y * 16, 32, 32, 1908, 1, false, 0, false, false);
                            break;
                        default:
                            Item.NewItem(x * 16, y * 16, 32, 32, 1479 + num, 1, false, 0, false, false);
                            break;
                    }
                }

                destroyObject = false;
            }
        }
    }

    public static void Place4x3Wall(int x, int y, ushort type, int style)
    {
        int num = x - 1;
        int num2 = y - 1;
        bool flag = true;
        for (int i = num; i < num + 4; i++)
        {
            for (int j = num2; j < num2 + 3; j++)
            {
                if (Main.tile[i, j].active() || Main.tile[i, j].wall == 0)
                {
                    flag = false;
                    break;
                }
            }
        }

        if (flag)
        {
            int num3 = 0;
            int num4 = style * 54;
            for (int k = num; k < num + 4; k++)
            {
                for (int l = num2; l < num2 + 3; l++)
                {
                    Main.tile[k, l].active(true);
                    Main.tile[k, l].type = type;
                    Main.tile[k, l].frameX = (short) (num3 + 18 * (k - num));
                    Main.tile[k, l].frameY = (short) (num4 + 18 * (l - num2));
                }
            }
        }
    }

    public static void Check4x3Wall(int x, int y)
    {
        if (!destroyObject)
        {
            bool flag = false;
            int type = Main.tile[x, y].type;
            int num = 0;
            int num2 = Main.tile[x, y].frameY / 18;
            while (num2 >= 3)
            {
                num2 -= 3;
                num++;
            }

            int num3 = y - num2;
            int num4 = x - Main.tile[x, y].frameX / 18;
            num2 = num * 54;
            for (int i = num4; i < num4 + 4; i++)
            {
                for (int j = num3; j < num3 + 3; j++)
                {
                    if (Main.tile[i, j].type != type || !Main.tile[i, j].active() || Main.tile[i, j].wall <= 0 ||
                        Main.tile[i, j].frameY != num2 + (j - num3) * 18 || Main.tile[i, j].frameX != (i - num4) * 18)
                    {
                        flag = true;
                        break;
                    }
                }
            }

            if (flag)
            {
                destroyObject = true;
                for (int k = num4; k < num4 + 4; k++)
                {
                    for (int l = num3; l < num3 + 3; l++)
                    {
                        if (Main.tile[k, l].type == type && Main.tile[k, l].active())
                        {
                            KillTile(k, l, false, false, false);
                        }
                    }
                }

                if (type == 241)
                {
                    Item.NewItem(x * 16, y * 16, 32, 32, 1417, 1, false, 0, false, false);
                }

                destroyObject = false;
            }
        }
    }

    public static void Place6x4Wall(int x, int y, ushort type, int style)
    {
        int num = x - 2;
        int num2 = y - 2;
        bool flag = true;
        for (int i = num; i < num + 6; i++)
        {
            for (int j = num2; j < num2 + 4; j++)
            {
                if (Main.tile[i, j].active() || Main.tile[i, j].wall == 0)
                {
                    flag = false;
                    break;
                }
            }
        }

        if (flag)
        {
            int num3 = 27;
            int num4 = style / num3;
            int num5 = num4 * 108;
            int num6 = style % num3 * 72;
            for (int k = num; k < num + 6; k++)
            {
                for (int l = num2; l < num2 + 4; l++)
                {
                    Main.tile[k, l].active(true);
                    Main.tile[k, l].type = type;
                    Main.tile[k, l].frameX = (short) (num5 + 18 * (k - num));
                    Main.tile[k, l].frameY = (short) (num6 + 18 * (l - num2));
                }
            }
        }
    }

    public static void Check6x4Wall(int x, int y)
    {
        if (!destroyObject)
        {
            bool flag = false;
            int type = Main.tile[x, y].type;
            int num = 0;
            int num2 = Main.tile[x, y].frameY / 18;
            int num3 = Main.tile[x, y].frameX / 18;
            num = 27 * (num3 / 6) + (num2 >> 2);
            num2 %= 4;
            num3 %= 6;
            int num4 = y - num2;
            int num5 = x - Main.tile[x, y].frameX / 18 % 6;
            num2 = num % 27 * 72;
            num3 = num / 27 * 108;
            for (int i = num5; i < num5 + 6; i++)
            {
                for (int j = num4; j < num4 + 4; j++)
                {
                    if (Main.tile[i, j].type != type || !Main.tile[i, j].active() || Main.tile[i, j].wall <= 0 ||
                        Main.tile[i, j].frameY != num2 + (j - num4) * 18 ||
                        Main.tile[i, j].frameX != num3 + (i - num5) * 18)
                    {
                        flag = true;
                        break;
                    }
                }
            }

            if (flag)
            {
                destroyObject = true;
                for (int k = num5; k < num5 + 6; k++)
                {
                    for (int l = num4; l < num4 + 4; l++)
                    {
                        if (Main.tile[k, l].type == type && Main.tile[k, l].active())
                        {
                            KillTile(k, l, false, false, false);
                        }
                    }
                }

                if (type == 242)
                {
                    if (num == 30)
                    {
                        Item.NewItem(x * 16, y * 16, 32, 32, 2995, 1, false, 0, false, false);
                    }
                    else if (num >= 31 && num <= 35)
                    {
                        Item.NewItem(x * 16, y * 16, 32, 32, 3055 + num - 31, 1, false, 0, false, false);
                    }
                    else if (num >= 27 && num <= 29)
                    {
                        Item.NewItem(x * 16, y * 16, 32, 32, 2865 + num - 27, 1, false, 0, false, false);
                    }
                    else if (num == 36)
                    {
                        Item.NewItem(x * 16, y * 16, 32, 32, 3596, 1, false, 0, false, false);
                    }
                    else if (num == 26)
                    {
                        Item.NewItem(x * 16, y * 16, 32, 32, 2497, 1, false, 0, false, false);
                    }
                    else if (num == 25)
                    {
                        Item.NewItem(x * 16, y * 16, 32, 32, 2495, 1, false, 0, false, false);
                    }
                    else if (num >= 22)
                    {
                        Item.NewItem(x * 16, y * 16, 32, 32, 2281 + num - 22, 1, false, 0, false, false);
                    }
                    else if (num >= 17)
                    {
                        Item.NewItem(x * 16, y * 16, 32, 32, 1846 + num - 17, 1, false, 0, false, false);
                    }
                    else if (num == 16)
                    {
                        Item.NewItem(x * 16, y * 16, 32, 32, 1573, 1, false, 0, false, false);
                    }
                    else if (num >= 13)
                    {
                        Item.NewItem(x * 16, y * 16, 32, 32, 1500 + num - 13, 1, false, 0, false, false);
                    }
                    else if (num >= 6)
                    {
                        Item.NewItem(x * 16, y * 16, 32, 32, 1433 + num - 6, 1, false, 0, false, false);
                    }
                    else
                    {
                        Item.NewItem(x * 16, y * 16, 32, 32, 1421 + num, 1, false, 0, false, false);
                    }
                }

                destroyObject = false;
            }
        }
    }

    public static void Place1x1(int x, int y, int type, int style = 0)
    {
        Tile tile = Main.tile[x, y];
        if (Main.tile[x, y] == null)
        {
            tile = new Tile();
            Main.tile[x, y] = tile;
        }

        if (Main.tile[x, y + 1] == null)
        {
            Tile[,] tile2 = Main.tile;
            int num = y + 1;
            Tile tile3 = new Tile();
            tile2[x, num] = tile3;
        }

        if (type == 324)
        {
            if (SolidTile2(x, y + 1) || (Main.tile[x, y + 1].nactive() && Main.tileTable[Main.tile[x, y + 1].type]))
            {
                tile.active(true);
                tile.type = (ushort) type;
                tile.frameX = (short) (22 * genRand.Next(2));
                tile.frameY = (short) (22 * style);
            }
        }
        else if (SolidTile2(x, y + 1) && !tile.active())
        {
            tile.active(true);
            tile.type = (ushort) type;
            switch (type)
            {
                case 324:
                    tile.frameX = (short) (22 * genRand.Next(2));
                    tile.frameY = (short) (22 * style);
                    break;
                case 36:
                case 144:
                case 239:
                    tile.frameX = (short) (style * 18);
                    tile.frameY = 0;
                    break;
                default:
                    tile.frameY = (short) (style * 18);
                    break;
            }
        }
    }

    public static void Check1x1(int x, int y, int type)
    {
        if (Main.tile[x, y + 1] != null && !SolidTileAllowBottomSlope(x, y + 1))
        {
            KillTile(x, y, false, false, false);
        }
    }

    public static void CheckLogicTiles(int x, int y, int type)
    {
        if (type == 419)
        {
            Tile tile = Main.tile[x, y + 1];
            if (tile != null && (!tile.active() || (tile.type != 420 && tile.type != 419)))
            {
                KillTile(x, y, false, false, false);
                return;
            }
        }

        Tile tile2 = Main.tile[x, y];
        bool flag = false;
        if (tile2.frameX % 18 != 0)
        {
            flag = true;
        }

        if (tile2.frameY % 18 != 0)
        {
            flag = true;
        }

        if (flag)
        {
            KillTile(x, y, false, false, false);
        }
    }

    public static void PlaceLogicTiles(int x, int y, int type, int style = 0)
    {
        Tile tile = Main.tile[x, y];
        if (Main.tile[x, y] == null)
        {
            tile = new Tile();
            Main.tile[x, y] = tile;
        }

        if (Main.tile[x, y + 1] == null)
        {
            Tile[,] tile2 = Main.tile;
            int num = y + 1;
            Tile tile3 = new Tile();
            tile2[x, num] = tile3;
        }

        if (type == 419)
        {
            if (Main.tile[x, y + 1].active() && (Main.tile[x, y + 1].type == 419 || Main.tile[x, y + 1].type == 420))
            {
                tile.active(true);
                tile.type = (ushort) type;
                tile.frameX = (short) (style * 18);
                tile.frameY = 0;
            }
        }
        else if (!tile.active())
        {
            tile.active(true);
            tile.type = (ushort) type;
            tile.frameX = 0;
            tile.frameY = (short) (18 * style);
        }
    }

    public static void PlaceOnTable1x1(int x, int y, int type, int style = 0)
    {
        bool flag = false;
        if (Main.tile[x, y] == null)
        {
            Tile[,] tile = Main.tile;
            Tile tile2 = new Tile();
            tile[x, y] = tile2;
        }

        if (Main.tile[x, y + 1] == null)
        {
            Tile[,] tile3 = Main.tile;
            int num = y + 1;
            Tile tile4 = new Tile();
            tile3[x, num] = tile4;
        }

        if (!Main.tile[x, y].active() && Main.tile[x, y + 1].nactive() && Main.tileTable[Main.tile[x, y + 1].type])
        {
            flag = true;
        }

        if (type == 78 && !Main.tile[x, y].active() && Main.tile[x, y + 1].nactive() &&
            Main.tileSolid[Main.tile[x, y + 1].type] && !Main.tile[x, y + 1].halfBrick() &&
            Main.tile[x, y + 1].slope() == 0)
        {
            flag = true;
        }

        if (flag)
        {
            Main.tile[x, y].active(true);
            Main.tile[x, y].type = (ushort) type;
            if (type == 33)
            {
                Main.tile[x, y].frameX = 0;
                Main.tile[x, y].frameY = (short) (style * 22);
            }
            else
            {
                Main.tile[x, y].frameX = (short) (style * 18);
                Main.tile[x, y].frameY = 0;
            }

            if (type == 50)
            {
                Main.tile[x, y].frameX = (short) (18 * genRand.Next(5));
            }
        }
    }

    public static bool PlaceAlch(int x, int y, int style)
    {
        if (Main.tile[x, y] == null)
        {
            Tile[,] tile = Main.tile;
            Tile tile2 = new Tile();
            tile[x, y] = tile2;
        }

        if (Main.tile[x, y + 1] == null)
        {
            Tile[,] tile3 = Main.tile;
            int num = y + 1;
            Tile tile4 = new Tile();
            tile3[x, num] = tile4;
        }

        if (!Main.tile[x, y].active() && Main.tile[x, y + 1].nactive() && !Main.tile[x, y + 1].halfBrick() &&
            Main.tile[x, y + 1].slope() == 0)
        {
            bool flag = false;
            switch (style)
            {
                case 0:
                    if (Main.tile[x, y + 1].type != 2 && Main.tile[x, y + 1].type != 78 &&
                        Main.tile[x, y + 1].type != 380 && Main.tile[x, y + 1].type != 109)
                    {
                        flag = true;
                    }

                    if (Main.tile[x, y].liquid > 0)
                    {
                        flag = true;
                    }

                    break;
                case 1:
                    if (Main.tile[x, y + 1].type != 60 && Main.tile[x, y + 1].type != 78 &&
                        Main.tile[x, y + 1].type != 380)
                    {
                        flag = true;
                    }

                    if (Main.tile[x, y].liquid > 0)
                    {
                        flag = true;
                    }

                    break;
                case 2:
                    if (Main.tile[x, y + 1].type != 0 && Main.tile[x, y + 1].type != 59 &&
                        Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380)
                    {
                        flag = true;
                    }

                    if (Main.tile[x, y].liquid > 0)
                    {
                        flag = true;
                    }

                    break;
                case 3:
                    if (Main.tile[x, y + 1].type != 203 && Main.tile[x, y + 1].type != 199 &&
                        Main.tile[x, y + 1].type != 23 && Main.tile[x, y + 1].type != 25 &&
                        Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380)
                    {
                        flag = true;
                    }

                    if (Main.tile[x, y].liquid > 0)
                    {
                        flag = true;
                    }

                    break;
                case 4:
                    if (Main.tile[x, y + 1].type != 53 && Main.tile[x, y + 1].type != 78 &&
                        Main.tile[x, y + 1].type != 380 && Main.tile[x, y + 1].type != 116)
                    {
                        flag = true;
                    }

                    if (Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
                    {
                        flag = true;
                    }

                    break;
                case 5:
                    if (Main.tile[x, y + 1].type != 57 && Main.tile[x, y + 1].type != 78 &&
                        Main.tile[x, y + 1].type != 380)
                    {
                        flag = true;
                    }

                    if (Main.tile[x, y].liquid > 0 && !Main.tile[x, y].lava())
                    {
                        flag = true;
                    }

                    break;
                case 6:
                    if (Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380 &&
                        Main.tile[x, y + 1].type != 147 && Main.tile[x, y + 1].type != 161 &&
                        Main.tile[x, y + 1].type != 163 && Main.tile[x, y + 1].type != 164 &&
                        Main.tile[x, y + 1].type != 200)
                    {
                        flag = true;
                    }

                    if (Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
                    {
                        flag = true;
                    }

                    break;
            }

            if (!flag)
            {
                Main.tile[x, y].active(true);
                Main.tile[x, y].type = 82;
                Main.tile[x, y].frameX = (short) (18 * style);
                Main.tile[x, y].frameY = 0;
                return true;
            }
        }

        return false;
    }

    public static void GrowSpike(int i, int j, ushort spikeType, ushort landType)
    {
        int num = i;
        int num2 = j;
        int num3 = 0;
        if (Main.tile[num + 1, num2].active() && Main.tile[num + 1, num2].type == spikeType)
        {
            num3++;
        }

        if (Main.tile[num - 1, num2].active() && Main.tile[num - 1, num2].type == spikeType)
        {
            num3++;
        }

        if (Main.tile[num, num2 + 1].active() && Main.tile[num, num2 + 1].type == spikeType)
        {
            num3++;
        }

        if (Main.tile[num, num2 - 1].active() && Main.tile[num, num2 - 1].type == spikeType)
        {
            num3++;
        }

        if (num3 < 3 || Main.tile[i, j].type == landType)
        {
            switch (genRand.Next(4))
            {
                case 0:
                    num2--;
                    break;
                case 1:
                    num2++;
                    break;
                case 2:
                    num--;
                    break;
                case 3:
                    num++;
                    break;
            }

            if (!Main.tile[num, num2].active())
            {
                num3 = 0;
                if (Main.tile[num + 1, num2].active() && Main.tile[num + 1, num2].type == spikeType)
                {
                    num3++;
                }

                if (Main.tile[num - 1, num2].active() && Main.tile[num - 1, num2].type == spikeType)
                {
                    num3++;
                }

                if (Main.tile[num, num2 + 1].active() && Main.tile[num, num2 + 1].type == spikeType)
                {
                    num3++;
                }

                if (Main.tile[num, num2 - 1].active() && Main.tile[num, num2 - 1].type == spikeType)
                {
                    num3++;
                }

                if (num3 < 2)
                {
                    int num4 = 7;
                    int num5 = num - num4;
                    int num6 = num + num4;
                    int num7 = num2 - num4;
                    int num8 = num2 + num4;
                    bool flag = false;
                    for (int k = num5; k < num6; k++)
                    {
                        for (int l = num7; l < num8; l++)
                        {
                            if (Math.Abs(k - num) * 2 + Math.Abs(l - num2) < 9 && Main.tile[k, l].active() &&
                                Main.tile[k, l].type == landType && Main.tile[k, l - 1].active() &&
                                Main.tile[k, l - 1].type == spikeType && Main.tile[k, l - 1].liquid == 0)
                            {
                                flag = true;
                                break;
                            }
                        }
                    }

                    if (flag)
                    {
                        Main.tile[num, num2].type = spikeType;
                        Main.tile[num, num2].active(true);
                        SquareTileFrame(num, num2, true);
                        if (Main.netMode == 2)
                        {
                            NetMessage.SendTileSquare(-1, num, num2, 3, TileChangeType.None);
                        }
                    }
                }
            }
        }
    }

    public static void GrowAlch(int x, int y)
    {
        if (Main.tile[x, y].active())
        {
            if (Main.tile[x, y].type == 82 && genRand.Next(50) == 0)
            {
                bool flag = false;
                if (Main.tile[x, y].frameX == 108)
                {
                    if (genRand.Next(3) != 0)
                    {
                        flag = true;
                    }
                }
                else
                {
                    flag = true;
                }

                if (flag)
                {
                    Main.tile[x, y].type = 83;
                    if (Main.netMode == 2)
                    {
                        NetMessage.SendTileSquare(-1, x, y, 1, TileChangeType.None);
                    }

                    SquareTileFrame(x, y, true);
                }
            }
            else if (Main.dayTime && Main.tile[x, y].type == 82 && Main.tile[x, y].frameX == 0 && genRand.Next(50) == 0)
            {
                Main.tile[x, y].type = 83;
                if (Main.netMode == 2)
                {
                    NetMessage.SendTileSquare(-1, x, y, 1, TileChangeType.None);
                }

                SquareTileFrame(x, y, true);
            }
            else if (!Main.dayTime && Main.tile[x, y].type == 82 && Main.tile[x, y].frameX == 18 &&
                     genRand.Next(50) == 0)
            {
                Main.tile[x, y].type = 83;
                if (Main.netMode == 2)
                {
                    NetMessage.SendTileSquare(-1, x, y, 1, TileChangeType.None);
                }

                SquareTileFrame(x, y, true);
            }
            else if (Main.tile[x, y].frameX == 36 && genRand.Next(3) != 0)
            {
                if (Main.tile[x, y].type == 83)
                {
                    if (genRand.Next(2) == 0)
                    {
                        Main.tile[x, y].type = 84;
                        if (Main.netMode == 2)
                        {
                            NetMessage.SendTileSquare(-1, x, y, 1, TileChangeType.None);
                        }
                    }
                }
                else if (genRand.Next(5) == 0 || Main.tile[x, y].type == 84)
                {
                    Main.tile[x, y].type = 83;
                    if (Main.netMode == 2)
                    {
                        NetMessage.SendTileSquare(-1, x, y, 1, TileChangeType.None);
                    }
                }
            }
            else if (Main.tile[x, y].frameX == 108 && Main.tile[x, y].type == 83 && genRand.Next(80) == 0)
            {
                Main.tile[x, y].type = 84;
                if (Main.netMode == 2)
                {
                    NetMessage.SendTileSquare(-1, x, y, 1, TileChangeType.None);
                }

                SquareTileFrame(x, y, true);
            }
        }
    }

    public static void PlantAlch()
    {
        int num = genRand.Next(20, Main.maxTilesX - 20);
        int num2 = 0;
        for (num2 = ((genRand.Next(40) == 0)
                ? genRand.Next((int) (Main.rockLayer + (double) Main.maxTilesY) / 2, Main.maxTilesY - 20)
                : ((genRand.Next(10) != 0)
                    ? genRand.Next((int) Main.worldSurface, Main.maxTilesY - 20)
                    : genRand.Next(0, Main.maxTilesY - 20)));
            num2 < Main.maxTilesY - 20 && !Main.tile[num, num2].active();
            num2++)
        {
        }

        if (Main.tile[num, num2].nactive() && !Main.tile[num, num2 - 1].active() &&
            Main.tile[num, num2 - 1].liquid == 0)
        {
            int num3 = 15;
            int num4 = 5;
            int num5 = 0;
            num3 = (int) ((float) num3 * ((float) Main.maxTilesX / 4200f));
            int num6 = Utils.Clamp(num - num3, 4, Main.maxTilesX - 4);
            int num7 = Utils.Clamp(num + num3, 4, Main.maxTilesX - 4);
            int num8 = Utils.Clamp(num2 - num3, 4, Main.maxTilesY - 4);
            int num9 = Utils.Clamp(num2 + num3, 4, Main.maxTilesY - 4);
            for (int i = num6; i <= num7; i++)
            {
                for (int j = num8; j <= num9; j++)
                {
                    if (Main.tileAlch[Main.tile[i, j].type])
                    {
                        num5++;
                    }
                }
            }

            if (num5 < num4)
            {
                if (Main.tile[num, num2].type == 2 || Main.tile[num, num2].type == 109)
                {
                    PlaceAlch(num, num2 - 1, 0);
                }

                if (Main.tile[num, num2].type == 60)
                {
                    PlaceAlch(num, num2 - 1, 1);
                }

                if (Main.tile[num, num2].type == 0 || Main.tile[num, num2].type == 59)
                {
                    PlaceAlch(num, num2 - 1, 2);
                }

                if (Main.tile[num, num2].type == 23 || Main.tile[num, num2].type == 25 ||
                    Main.tile[num, num2].type == 203 || Main.tile[num, num2].type == 199)
                {
                    PlaceAlch(num, num2 - 1, 3);
                }

                if (Main.tile[num, num2].type == 53 || Main.tile[num, num2].type == 116)
                {
                    PlaceAlch(num, num2 - 1, 4);
                }

                if (Main.tile[num, num2].type == 57)
                {
                    PlaceAlch(num, num2 - 1, 5);
                }

                if (Main.tile[num, num2].type == 147 || Main.tile[num, num2].type == 163 ||
                    Main.tile[num, num2].type == 164 || Main.tile[num, num2].type == 161 ||
                    Main.tile[num, num2].type == 200)
                {
                    PlaceAlch(num, num2 - 1, 6);
                }

                if (Main.tile[num, num2 - 1].active() && Main.netMode == 2)
                {
                    NetMessage.SendTileSquare(-1, num, num2 - 1, 1, TileChangeType.None);
                }
            }
        }
    }

    public static void CheckAlch(int x, int y)
    {
        if (Main.tile[x, y] == null)
        {
            Tile[,] tile = Main.tile;
            Tile tile2 = new Tile();
            tile[x, y] = tile2;
        }

        if (Main.tile[x, y + 1] == null)
        {
            Tile[,] tile3 = Main.tile;
            int num = y + 1;
            Tile tile4 = new Tile();
            tile3[x, num] = tile4;
        }

        bool flag = false;
        if (!Main.tile[x, y + 1].active())
        {
            flag = true;
        }

        if (Main.tile[x, y + 1].halfBrick())
        {
            flag = true;
        }

        int num2 = Main.tile[x, y].frameX / 18;
        Main.tile[x, y].frameY = 0;
        if (!flag)
        {
            switch (num2)
            {
                case 0:
                    if (Main.tile[x, y + 1].type != 109 && Main.tile[x, y + 1].type != 2 &&
                        Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380)
                    {
                        flag = true;
                    }

                    if (Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
                    {
                        flag = true;
                    }

                    break;
                case 1:
                    if (Main.tile[x, y + 1].type != 60 && Main.tile[x, y + 1].type != 78 &&
                        Main.tile[x, y + 1].type != 380)
                    {
                        flag = true;
                    }

                    if (Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
                    {
                        flag = true;
                    }

                    break;
                case 2:
                    if (Main.tile[x, y + 1].type != 0 && Main.tile[x, y + 1].type != 59 &&
                        Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380)
                    {
                        flag = true;
                    }

                    if (Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
                    {
                        flag = true;
                    }

                    break;
                case 3:
                    if (Main.tile[x, y + 1].type != 199 && Main.tile[x, y + 1].type != 203 &&
                        Main.tile[x, y + 1].type != 23 && Main.tile[x, y + 1].type != 25 &&
                        Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380)
                    {
                        flag = true;
                    }

                    if (Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
                    {
                        flag = true;
                    }

                    break;
                case 4:
                    if (Main.tile[x, y + 1].type != 53 && Main.tile[x, y + 1].type != 78 &&
                        Main.tile[x, y + 1].type != 380 && Main.tile[x, y + 1].type != 116)
                    {
                        flag = true;
                    }

                    if (Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
                    {
                        flag = true;
                    }

                    break;
                case 5:
                    if (Main.tile[x, y + 1].type != 57 && Main.tile[x, y + 1].type != 78 &&
                        Main.tile[x, y + 1].type != 380)
                    {
                        flag = true;
                    }

                    if (Main.tile[x, y].liquid > 0 && !Main.tile[x, y].lava())
                    {
                        flag = true;
                    }

                    if (Main.tile[x, y].type != 82 && Main.tile[x, y].lava() && Main.tile[x, y].type != 82 &&
                        Main.tile[x, y].lava() && Main.netMode != 1)
                    {
                        if (Main.tile[x, y].liquid > 16)
                        {
                            if (Main.tile[x, y].type == 83)
                            {
                                Main.tile[x, y].type = 84;
                                if (Main.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, x, y, 1, TileChangeType.None);
                                }
                            }
                        }
                        else if (Main.tile[x, y].type == 84)
                        {
                            Main.tile[x, y].type = 83;
                            if (Main.netMode == 2)
                            {
                                NetMessage.SendTileSquare(-1, x, y, 1, TileChangeType.None);
                            }
                        }
                    }

                    break;
                case 6:
                    if (Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380 &&
                        Main.tile[x, y + 1].type != 147 && Main.tile[x, y + 1].type != 161 &&
                        Main.tile[x, y + 1].type != 163 && Main.tile[x, y + 1].type != 164 &&
                        Main.tile[x, y + 1].type != 200)
                    {
                        flag = true;
                    }

                    if (Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
                    {
                        flag = true;
                    }

                    break;
            }
        }

        if (flag)
        {
            KillTile(x, y, false, false, false);
        }
    }

    public static void CheckBanner(int x, int j, byte type)
    {
        if (!destroyObject)
        {
            int num = Main.tile[x, j].frameY / 18;
            int num2 = 0;
            while (num >= 3)
            {
                num -= 3;
                num2++;
            }

            num = j - num;
            int frameX = Main.tile[x, j].frameX;
            bool flag = false;
            for (int i = 0; i < 3; i++)
            {
                if (Main.tile[x, num + i] == null)
                {
                    Tile[,] tile = Main.tile;
                    int num3 = num + i;
                    Tile tile2 = new Tile();
                    tile[x, num3] = tile2;
                }

                if (!Main.tile[x, num + i].active())
                {
                    flag = true;
                }
                else if (Main.tile[x, num + i].type != type)
                {
                    flag = true;
                }
                else if (Main.tile[x, num + i].frameY != i * 18 + num2 * 18 * 3)
                {
                    flag = true;
                }
                else if (Main.tile[x, num + i].frameX != frameX)
                {
                    flag = true;
                }
            }

            if (Main.tile[x, num - 1] == null)
            {
                Tile[,] tile3 = Main.tile;
                int num4 = num - 1;
                Tile tile4 = new Tile();
                tile3[x, num4] = tile4;
            }

            if (!Main.tile[x, num - 1].nactive())
            {
                flag = true;
            }

            if ((!Main.tile[x, num - 1].topSlope() && !Main.tile[x, num - 1].halfBrick() &&
                 !Main.tileSolid[Main.tile[x, num - 1].type]) ||
                (Main.tileSolidTop[Main.tile[x, num - 1].type] &&
                 (!TileID.Sets.Platforms[Main.tile[x, num - 1].type] ||
                  (!Main.tile[x, num - 1].halfBrick() && !Main.tile[x, num - 1].topSlope()))) ||
                TileID.Sets.NotReallySolid[Main.tile[x, num - 1].type] || Main.tile[x, num - 1].bottomSlope())
            {
                flag = true;
            }

            if (flag)
            {
                destroyObject = true;
                for (int k = 0; k < 3; k++)
                {
                    if (Main.tile[x, num + k].type == type)
                    {
                        KillTile(x, num + k, false, false, false);
                    }
                }

                if (type == 91)
                {
                    int num5 = frameX / 18;
                    num5 += num2 * 111;
                    if (num5 >= 278)
                    {
                        Item.NewItem(x * 16, (num + 1) * 16, 32, 32, 3559 + num5, 1, false, 0, false, false);
                    }
                    else if (num5 >= 273)
                    {
                        Item.NewItem(x * 16, (num + 1) * 16, 32, 32, 3516 + num5, 1, false, 0, false, false);
                    }
                    else if (num5 >= 272)
                    {
                        Item.NewItem(x * 16, (num + 1) * 16, 32, 32, 3780, 1, false, 0, false, false);
                    }
                    else if (num5 >= 270)
                    {
                        Item.NewItem(x * 16, (num + 1) * 16, 32, 32, 3323 + num5, 1, false, 0, false, false);
                    }
                    else if (num5 >= 207)
                    {
                        Item.NewItem(x * 16, (num + 1) * 16, 32, 32, 3183 + num5, 1, false, 0, false, false);
                    }
                    else if (num5 >= 109)
                    {
                        Item.NewItem(x * 16, (num + 1) * 16, 32, 32, 2788 + num5, 1, false, 0, false, false);
                    }
                    else if (num5 >= 22)
                    {
                        Item.NewItem(x * 16, (num + 1) * 16, 32, 32, 1593 + num5, 1, false, 0, false, false);
                    }
                    else if (num5 >= 10 && num5 <= 15)
                    {
                        Item.NewItem(x * 16, (num + 1) * 16, 32, 32, 1441 + num5, 1, false, 0, false, false);
                    }
                    else if (num5 >= 16 && num5 <= 21)
                    {
                        Item.NewItem(x * 16, (num + 1) * 16, 32, 32, 1448 + num5, 1, false, 0, false, false);
                    }
                    else if (num5 >= 7 && num5 <= 9)
                    {
                        Item.NewItem(x * 16, (num + 1) * 16, 32, 32, 838 + num5, 1, false, 0, false, false);
                    }
                    else if (num5 >= 4 && num5 <= 6)
                    {
                        Item.NewItem(x * 16, (num + 1) * 16, 32, 32, 785 + num5, 1, false, 0, false, false);
                    }
                    else
                    {
                        Item.NewItem(x * 16, (num + 1) * 16, 32, 32, 337 + num5, 1, false, 0, false, false);
                    }
                }

                destroyObject = false;
            }
        }
    }

    public static void PlaceBanner(int x, int y, ushort type, int style = 0)
    {
        int num = style * 18;
        int num2 = 0;
        if (style >= 90)
        {
            num -= 1620;
            num2 += 54;
        }

        if (Main.tile[x, y - 1] == null)
        {
            Tile[,] tile = Main.tile;
            int num3 = y - 1;
            Tile tile2 = new Tile();
            tile[x, num3] = tile2;
        }

        if (Main.tile[x, y] == null)
        {
            Tile[,] tile3 = Main.tile;
            Tile tile4 = new Tile();
            tile3[x, y] = tile4;
        }

        if (Main.tile[x, y + 1] == null)
        {
            Tile[,] tile5 = Main.tile;
            int num4 = y + 1;
            Tile tile6 = new Tile();
            tile5[x, num4] = tile6;
        }

        if (Main.tile[x, y + 2] == null)
        {
            Tile[,] tile7 = Main.tile;
            int num5 = y + 2;
            Tile tile8 = new Tile();
            tile7[x, num5] = tile8;
        }

        if (Main.tile[x, y - 1].nactive() && Main.tileSolid[Main.tile[x, y - 1].type] &&
            !Main.tileSolidTop[Main.tile[x, y - 1].type] && !Main.tile[x, y].active() &&
            !Main.tile[x, y + 1].active() && !Main.tile[x, y + 2].active())
        {
            Main.tile[x, y].active(true);
            Main.tile[x, y].frameY = (short) num2;
            Main.tile[x, y].frameX = (short) num;
            Main.tile[x, y].type = type;
            Main.tile[x, y + 1].active(true);
            Main.tile[x, y + 1].frameY = (short) (num2 + 18);
            Main.tile[x, y + 1].frameX = (short) num;
            Main.tile[x, y + 1].type = type;
            Main.tile[x, y + 2].active(true);
            Main.tile[x, y + 2].frameY = (short) (num2 + 36);
            Main.tile[x, y + 2].frameX = (short) num;
            Main.tile[x, y + 2].type = type;
        }
    }

    public static void PlaceMan(int i, int j, int dir)
    {
        for (int k = i; k <= i + 1; k++)
        {
            for (int l = j - 2; l <= j; l++)
            {
                if (Main.tile[k, l].active())
                {
                    return;
                }
            }
        }

        if (SolidTile2(i, j + 1) && SolidTile2(i + 1, j + 1))
        {
            byte b = 0;
            if (dir == 1)
            {
                b = 36;
            }

            Main.tile[i, j - 2].active(true);
            Main.tile[i, j - 2].frameY = 0;
            Main.tile[i, j - 2].frameX = b;
            Main.tile[i, j - 2].type = 128;
            Main.tile[i, j - 1].active(true);
            Main.tile[i, j - 1].frameY = 18;
            Main.tile[i, j - 1].frameX = b;
            Main.tile[i, j - 1].type = 128;
            Main.tile[i, j].active(true);
            Main.tile[i, j].frameY = 36;
            Main.tile[i, j].frameX = b;
            Main.tile[i, j].type = 128;
            Main.tile[i + 1, j - 2].active(true);
            Main.tile[i + 1, j - 2].frameY = 0;
            Main.tile[i + 1, j - 2].frameX = (byte) (18 + b);
            Main.tile[i + 1, j - 2].type = 128;
            Main.tile[i + 1, j - 1].active(true);
            Main.tile[i + 1, j - 1].frameY = 18;
            Main.tile[i + 1, j - 1].frameX = (byte) (18 + b);
            Main.tile[i + 1, j - 1].type = 128;
            Main.tile[i + 1, j].active(true);
            Main.tile[i + 1, j].frameY = 36;
            Main.tile[i + 1, j].frameX = (byte) (18 + b);
            Main.tile[i + 1, j].type = 128;
        }
    }

    public static void PlaceWoman(int i, int j, int dir)
    {
        for (int k = i; k <= i + 1; k++)
        {
            for (int l = j - 2; l <= j; l++)
            {
                if (Main.tile[k, l].active())
                {
                    return;
                }
            }
        }

        if (SolidTile2(i, j + 1) && SolidTile2(i + 1, j + 1))
        {
            byte b = 0;
            if (dir == 1)
            {
                b = 36;
            }

            Main.tile[i, j - 2].active(true);
            Main.tile[i, j - 2].frameY = 0;
            Main.tile[i, j - 2].frameX = b;
            Main.tile[i, j - 2].type = 269;
            Main.tile[i, j - 1].active(true);
            Main.tile[i, j - 1].frameY = 18;
            Main.tile[i, j - 1].frameX = b;
            Main.tile[i, j - 1].type = 269;
            Main.tile[i, j].active(true);
            Main.tile[i, j].frameY = 36;
            Main.tile[i, j].frameX = b;
            Main.tile[i, j].type = 269;
            Main.tile[i + 1, j - 2].active(true);
            Main.tile[i + 1, j - 2].frameY = 0;
            Main.tile[i + 1, j - 2].frameX = (byte) (18 + b);
            Main.tile[i + 1, j - 2].type = 269;
            Main.tile[i + 1, j - 1].active(true);
            Main.tile[i + 1, j - 1].frameY = 18;
            Main.tile[i + 1, j - 1].frameX = (byte) (18 + b);
            Main.tile[i + 1, j - 1].type = 269;
            Main.tile[i + 1, j].active(true);
            Main.tile[i + 1, j].frameY = 36;
            Main.tile[i + 1, j].frameX = (byte) (18 + b);
            Main.tile[i + 1, j].type = 269;
        }
    }

    public static void CheckWeaponsRack(int i, int j)
    {
        if (!destroyObject)
        {
            int num = j - Main.tile[i, j].frameY / 18;
            int num2 = Main.tile[i, j].frameX;
            int num3 = 0;
            while (num2 >= 5000)
            {
                num2 -= 5000;
                num3++;
            }

            if (num3 != 0)
            {
                num2 = (num3 - 1) * 18;
            }

            num2 %= 54;
            int num4 = i - num2 / 18;
            bool flag = false;
            for (int k = 0; k < 3; k++)
            {
                for (int l = 0; l < 3; l++)
                {
                    int num5 = num4 + k;
                    int num6 = num + l;
                    int num7 = Main.tile[num5, num6].frameX;
                    int num8 = 0;
                    while (num7 >= 5000)
                    {
                        num7 -= 5000;
                        num8++;
                    }

                    if (num8 != 0)
                    {
                        num7 = (num8 - 1) * 18;
                    }

                    num7 %= 54;
                    if (!Main.tile[num5, num6].active() || Main.tile[num5, num6].type != 334 ||
                        Main.tile[num5, num6].wall <= 0 || Main.tile[num5, num6].frameY != l * 18 || num7 != k * 18)
                    {
                        flag = true;
                    }
                }
            }

            if (flag)
            {
                destroyObject = true;
                Item.NewItem(i * 16, j * 16, 48, 48, 2699, 1, false, 0, false, false);
                for (int m = 0; m < 3; m++)
                {
                    for (int n = 0; n < 3; n++)
                    {
                        int num9 = num4 + m;
                        int num10 = num + n;
                        if (Main.tile[num9, num10].active() && Main.tile[num9, num10].type == 334)
                        {
                            KillTile(num9, num10, false, false, false);
                        }
                    }
                }

                destroyObject = false;
            }
        }
    }

    public static void ToggleGemLock(int i, int j, bool on)
    {
        Tile tileSafely = Framing.GetTileSafely(i, j);
        if (tileSafely.active() && tileSafely.type == 440 && (tileSafely.frameY >= 54 || on))
        {
            bool flag = false;
            int num = -1;
            if (tileSafely.frameY >= 54)
            {
                flag = true;
            }

            int num2 = Main.tile[i, j].frameX / 54;
            int num3 = Main.tile[i, j].frameX % 54 / 18;
            int num4 = Main.tile[i, j].frameY % 54 / 18;
            switch (num2)
            {
                case 0:
                    num = 1526;
                    break;
                case 1:
                    num = 1524;
                    break;
                case 2:
                    num = 1525;
                    break;
                case 3:
                    num = 1523;
                    break;
                case 4:
                    num = 1522;
                    break;
                case 5:
                    num = 1527;
                    break;
                case 6:
                    num = 3643;
                    break;
            }

            for (int k = i - num3; k < i - num3 + 3; k++)
            {
                for (int l = j - num4; l < j - num4 + 3; l++)
                {
                    Main.tile[k, l].frameY = (short) ((on ? 54 : 0) + (l - j + num4) * 18);
                }
            }

            if (num != -1 && flag)
            {
                Item.NewItem(i * 16, j * 16, 32, 32, num, 1, false, 0, false, false);
            }

            SquareTileFrame(i, j, true);
            NetMessage.SendTileSquare(-1, i - num3 + 1, j - num4 + 1, 3, TileChangeType.None);
            Wiring.HitSwitch(i - num3, j - num4);
            NetMessage.SendData(59, -1, -1, null, i - num3, (float) (j - num4), 0f, 0f, 0, 0, 0);
        }
    }

    public static void CheckMan(int i, int j)
    {
        if (!destroyObject)
        {
            int num = j - Main.tile[i, j].frameY / 18;
            int num2;
            for (num2 = Main.tile[i, j].frameX; num2 >= 100; num2 -= 100)
            {
            }

            while (num2 >= 36)
            {
                num2 -= 36;
            }

            int num3 = i - num2 / 18;
            bool flag = false;
            for (int k = 0; k <= 1; k++)
            {
                for (int l = 0; l <= 2; l++)
                {
                    int num4 = num3 + k;
                    int num5 = num + l;
                    int num6;
                    for (num6 = Main.tile[num4, num5].frameX; num6 >= 100; num6 -= 100)
                    {
                    }

                    if (num6 >= 36)
                    {
                        num6 -= 36;
                    }

                    if (!Main.tile[num4, num5].active() || Main.tile[num4, num5].type != 128 ||
                        Main.tile[num4, num5].frameY != l * 18 || num6 != k * 18)
                    {
                        flag = true;
                    }
                }
            }

            if (!SolidTileAllowBottomSlope(num3, num + 3) || !SolidTileAllowBottomSlope(num3 + 1, num + 3))
            {
                flag = true;
            }

            if (flag)
            {
                destroyObject = true;
                Item.NewItem(i * 16, j * 16, 32, 32, 498, 1, false, 0, false, false);
                for (int m = 0; m <= 1; m++)
                {
                    for (int n = 0; n <= 2; n++)
                    {
                        int num7 = num3 + m;
                        int num8 = num + n;
                        if (Main.tile[num7, num8].active() && Main.tile[num7, num8].type == 128)
                        {
                            KillTile(num7, num8, false, false, false);
                        }
                    }
                }

                destroyObject = false;
            }
        }
    }

    public static void CheckWoman(int i, int j)
    {
        if (!destroyObject)
        {
            int num = j - Main.tile[i, j].frameY / 18;
            int num2;
            for (num2 = Main.tile[i, j].frameX; num2 >= 100; num2 -= 100)
            {
            }

            while (num2 >= 36)
            {
                num2 -= 36;
            }

            int num3 = i - num2 / 18;
            bool flag = false;
            for (int k = 0; k <= 1; k++)
            {
                for (int l = 0; l <= 2; l++)
                {
                    int num4 = num3 + k;
                    int num5 = num + l;
                    int num6;
                    for (num6 = Main.tile[num4, num5].frameX; num6 >= 100; num6 -= 100)
                    {
                    }

                    if (num6 >= 36)
                    {
                        num6 -= 36;
                    }

                    if (!Main.tile[num4, num5].active() || Main.tile[num4, num5].type != 269 ||
                        Main.tile[num4, num5].frameY != l * 18 || num6 != k * 18)
                    {
                        flag = true;
                    }
                }
            }

            if (!SolidTileAllowBottomSlope(num3, num + 3) || !SolidTileAllowBottomSlope(num3 + 1, num + 3))
            {
                flag = true;
            }

            if (flag)
            {
                destroyObject = true;
                Item.NewItem(i * 16, j * 16, 32, 32, 1989, 1, false, 0, false, false);
                for (int m = 0; m <= 1; m++)
                {
                    for (int n = 0; n <= 2; n++)
                    {
                        int num7 = num3 + m;
                        int num8 = num + n;
                        if (Main.tile[num7, num8].active() && Main.tile[num7, num8].type == 269)
                        {
                            KillTile(num7, num8, false, false, false);
                        }
                    }
                }

                destroyObject = false;
            }
        }
    }

    public static void Place1x2(int x, int y, ushort type, int style)
    {
        short frameX = 0;
        if (type == 20)
        {
            frameX = (short) (genRand.Next(3) * 18);
        }

        if (Main.tile[x, y - 1] == null)
        {
            Tile[,] tile = Main.tile;
            int num = y - 1;
            Tile tile2 = new Tile();
            tile[x, num] = tile2;
        }

        if (Main.tile[x, y + 1] == null)
        {
            Tile[,] tile3 = Main.tile;
            int num2 = y + 1;
            Tile tile4 = new Tile();
            tile3[x, num2] = tile4;
        }

        if (SolidTile2(x, y + 1) & !Main.tile[x, y - 1].active())
        {
            short num3 = (short) (style * 40);
            Main.tile[x, y - 1].active(true);
            Main.tile[x, y - 1].frameY = num3;
            Main.tile[x, y - 1].frameX = frameX;
            Main.tile[x, y - 1].type = type;
            Main.tile[x, y].active(true);
            Main.tile[x, y].frameY = (short) (num3 + 18);
            Main.tile[x, y].frameX = frameX;
            Main.tile[x, y].type = type;
        }
    }

    public static void Place1x2Top(int x, int y, ushort type, int style)
    {
        short frameX = 0;
        if (Main.tile[x, y - 1] == null)
        {
            Tile[,] tile = Main.tile;
            int num = y - 1;
            Tile tile2 = new Tile();
            tile[x, num] = tile2;
        }

        if (Main.tile[x, y + 1] == null)
        {
            Tile[,] tile3 = Main.tile;
            int num2 = y + 1;
            Tile tile4 = new Tile();
            tile3[x, num2] = tile4;
        }

        if (Main.tile[x, y - 1].nactive() && Main.tileSolid[Main.tile[x, y - 1].type] &&
            !Main.tileSolidTop[Main.tile[x, y - 1].type] && !Main.tile[x, y + 1].active())
        {
            short num3 = (short) (style * 36);
            Main.tile[x, y].active(true);
            Main.tile[x, y].frameY = num3;
            Main.tile[x, y].frameX = frameX;
            Main.tile[x, y].type = type;
            Main.tile[x, y + 1].active(true);
            Main.tile[x, y + 1].frameY = (short) (num3 + 18);
            Main.tile[x, y + 1].frameX = frameX;
            Main.tile[x, y + 1].type = type;
        }
    }

    public static void Check1x2Top(int x, int j, ushort type)
    {
        if (!destroyObject)
        {
            bool flag = true;
            int num = Main.tile[x, j].frameY / 18;
            int num2 = 0;
            while (num >= 2)
            {
                num -= 2;
                num2++;
            }

            int num3 = j - num;
            num = num2 * 36;
            if (Main.tile[x, num3] == null)
            {
                Tile[,] tile = Main.tile;
                int num4 = num3;
                Tile tile2 = new Tile();
                tile[x, num4] = tile2;
            }

            if (Main.tile[x, num3 + 1] == null)
            {
                Tile[,] tile3 = Main.tile;
                int num5 = num3 + 1;
                Tile tile4 = new Tile();
                tile3[x, num5] = tile4;
            }

            if (Main.tile[x, num3] == null)
            {
                Tile[,] tile5 = Main.tile;
                int num6 = num3;
                Tile tile6 = new Tile();
                tile5[x, num6] = tile6;
            }

            if (Main.tile[x, num3].frameY == num && Main.tile[x, num3 + 1].frameY == num + 18 &&
                Main.tile[x, num3].type == type && Main.tile[x, num3 + 1].type == type)
            {
                flag = false;
            }

            if (Main.tile[x, num3 - 1] == null)
            {
                Tile[,] tile7 = Main.tile;
                int num7 = num3 - 1;
                Tile tile8 = new Tile();
                tile7[x, num7] = tile8;
            }

            if (!Main.tile[x, num3 - 1].nactive() || !Main.tileSolid[Main.tile[x, num3 - 1].type] ||
                Main.tileSolidTop[Main.tile[x, num3 - 1].type])
            {
                flag = true;
            }

            if (flag)
            {
                destroyObject = true;
                if (Main.tile[x, num3].type == type)
                {
                    KillTile(x, num3, false, false, false);
                }

                if (Main.tile[x, num3 + 1].type == type)
                {
                    KillTile(x, num3 + 1, false, false, false);
                }

                switch (type)
                {
                    case 42:
                    {
                        int type2 = 0;
                        if (num2 == 0)
                        {
                            type2 = 136;
                        }
                        else if (num2 == 7)
                        {
                            type2 = 1431;
                        }
                        else if (num2 == 8)
                        {
                            type2 = 1808;
                        }
                        else if (num2 == 9)
                        {
                            type2 = 1859;
                        }
                        else if (num2 >= 10)
                        {
                            switch (num2)
                            {
                                case 10:
                                    type2 = 2032;
                                    break;
                                case 11:
                                    type2 = 2033;
                                    break;
                                case 12:
                                    type2 = 2034;
                                    break;
                                case 13:
                                    type2 = 2035;
                                    break;
                                case 14:
                                    type2 = 2036;
                                    break;
                                case 15:
                                    type2 = 2037;
                                    break;
                                case 16:
                                    type2 = 2038;
                                    break;
                                case 17:
                                    type2 = 2039;
                                    break;
                                case 18:
                                    type2 = 2040;
                                    break;
                                case 19:
                                    type2 = 2041;
                                    break;
                                case 20:
                                    type2 = 2042;
                                    break;
                                case 21:
                                    type2 = 2043;
                                    break;
                                case 22:
                                case 23:
                                case 24:
                                case 25:
                                    type2 = 2145 + num2 - 22;
                                    break;
                                default:
                                    switch (num2)
                                    {
                                        case 26:
                                            type2 = 2226;
                                            break;
                                        case 27:
                                            type2 = 2530;
                                            break;
                                        case 28:
                                            type2 = 2546;
                                            break;
                                        case 29:
                                            type2 = 2564;
                                            break;
                                        case 30:
                                            type2 = 2579;
                                            break;
                                        case 31:
                                            type2 = 2641;
                                            break;
                                        case 32:
                                            type2 = 2642;
                                            break;
                                        case 33:
                                            type2 = 2820;
                                            break;
                                        case 34:
                                            type2 = 3138;
                                            break;
                                        case 35:
                                            type2 = 3140;
                                            break;
                                        case 36:
                                            type2 = 3139;
                                            break;
                                        case 37:
                                            type2 = 3891;
                                            break;
                                    }

                                    break;
                            }
                        }
                        else
                        {
                            type2 = 1389 + num2;
                        }

                        Item.NewItem(x * 16, num3 * 16, 32, 32, type2, 1, false, 0, false, false);
                        break;
                    }
                    case 270:
                        Item.NewItem(x * 16, num3 * 16, 32, 32, 1993, 1, false, 0, false, false);
                        break;
                    case 271:
                        Item.NewItem(x * 16, num3 * 16, 32, 32, 2005, 1, false, 0, false, false);
                        break;
                }

                destroyObject = false;
            }
        }
    }

    public static bool PlaceSmallPile(int i, int j, int X, int Y, ushort type = 185)
    {
        short frameY = (short) (Y * 18);
        short frameX = (short) (X * 18);
        if (Main.tile[i, j] == null)
        {
            Tile[,] tile = Main.tile;
            int num = i;
            int num2 = j;
            Tile tile2 = new Tile();
            tile[num, num2] = tile2;
        }

        if (Main.tile[i + 1, j] == null)
        {
            Tile[,] tile3 = Main.tile;
            int num3 = i + 1;
            int num4 = j;
            Tile tile4 = new Tile();
            tile3[num3, num4] = tile4;
        }

        if (Main.tile[i, j + 1] == null)
        {
            Tile[,] tile5 = Main.tile;
            int num5 = i;
            int num6 = j + 1;
            Tile tile6 = new Tile();
            tile5[num5, num6] = tile6;
        }

        if (Main.tile[i + 1, j + 1] == null)
        {
            Tile[,] tile7 = Main.tile;
            int num7 = i + 1;
            int num8 = j + 1;
            Tile tile8 = new Tile();
            tile7[num7, num8] = tile8;
        }

        if (Main.tile[i, j].lava())
        {
            return false;
        }

        if (Y == 1)
        {
            frameX = (short) (X * 36);
            bool flag = false;
            if (SolidTile2(i, j + 1) && SolidTile2(i + 1, j + 1) && !Main.tile[i, j].active() &&
                !Main.tile[i + 1, j].active())
            {
                flag = true;
            }

            if (flag)
            {
                Main.tile[i, j].active(true);
                Main.tile[i, j].frameY = frameY;
                Main.tile[i, j].frameX = frameX;
                Main.tile[i, j].type = type;
                Main.tile[i + 1, j].active(true);
                Main.tile[i + 1, j].frameY = frameY;
                Main.tile[i + 1, j].frameX = (short) (frameX + 18);
                Main.tile[i + 1, j].type = type;
                return true;
            }
        }
        else if (SolidTile2(i, j + 1) && !Main.tile[i, j].active())
        {
            Main.tile[i, j].active(true);
            Main.tile[i, j].frameY = frameY;
            Main.tile[i, j].frameX = frameX;
            Main.tile[i, j].type = type;
            return true;
        }

        return false;
    }

    public static void CheckPile(int i, int y)
    {
        if (Main.tile[i, y] == null)
        {
            Tile[,] tile = Main.tile;
            int num = i;
            Tile tile2 = new Tile();
            tile[num, y] = tile2;
        }

        if (Main.tile[i + 1, y] == null)
        {
            Tile[,] tile3 = Main.tile;
            int num2 = i + 1;
            Tile tile4 = new Tile();
            tile3[num2, y] = tile4;
        }

        if (Main.tile[i, y + 1] == null)
        {
            Tile[,] tile5 = Main.tile;
            int num3 = i;
            int num4 = y + 1;
            Tile tile6 = new Tile();
            tile5[num3, num4] = tile6;
        }

        if (Main.tile[i + 1, y + 1] == null)
        {
            Tile[,] tile7 = Main.tile;
            int num5 = i + 1;
            int num6 = y + 1;
            Tile tile8 = new Tile();
            tile7[num5, num6] = tile8;
        }

        if (Main.tile[i, y].frameY == 18)
        {
            Check2x1(i, y, Main.tile[i, y].type);
        }
        else if (!SolidTile(i, y + 1))
        {
            KillTile(i, y, false, false, false);
        }
    }

    public static void Check2x1(int i, int y, ushort type)
    {
        if (!destroyObject)
        {
            bool flag = true;
            if (Main.tile[i, y] == null)
            {
                Tile[,] tile = Main.tile;
                int num = i;
                Tile tile2 = new Tile();
                tile[num, y] = tile2;
            }

            int num2 = Main.tile[i, y].frameX / 18;
            int num3 = num2 >> 1;
            num2 %= 2;
            int num4 = i - num2;
            if (Main.tile[num4, y] == null)
            {
                Tile[,] tile3 = Main.tile;
                int num5 = num4;
                Tile tile4 = new Tile();
                tile3[num5, y] = tile4;
            }

            if (Main.tile[num4 + 1, y] == null)
            {
                Tile[,] tile5 = Main.tile;
                int num6 = num4 + 1;
                Tile tile6 = new Tile();
                tile5[num6, y] = tile6;
            }

            if (Main.tile[num4, y + 1] == null)
            {
                Tile[,] tile7 = Main.tile;
                int num7 = num4;
                int num8 = y + 1;
                Tile tile8 = new Tile();
                tile7[num7, num8] = tile8;
            }

            if (Main.tile[num4 + 1, y + 1] == null)
            {
                Tile[,] tile9 = Main.tile;
                int num9 = num4 + 1;
                int num10 = y + 1;
                Tile tile10 = new Tile();
                tile9[num9, num10] = tile10;
            }

            if (Main.tile[num4 + 1, y].frameX == Main.tile[num4, y].frameX + 18 && Main.tile[num4, y].type == type &&
                Main.tile[num4 + 1, y].type == type)
            {
                flag = false;
            }

            if (type == 29 || type == 103 || type == 462)
            {
                if (!Main.tile[num4, y + 1].active() || !Main.tileTable[Main.tile[num4, y + 1].type])
                {
                    flag = true;
                }

                if (!Main.tile[num4 + 1, y + 1].active() || !Main.tileTable[Main.tile[num4 + 1, y + 1].type])
                {
                    flag = true;
                }
            }
            else
            {
                if (!SolidTileAllowBottomSlope(num4, y + 1))
                {
                    flag = true;
                }

                if (!SolidTileAllowBottomSlope(num4 + 1, y + 1))
                {
                    flag = true;
                }
            }

            if (type == 185 && Main.tile[num4, y].frameX >= 1368 && Main.tile[num4, y].frameX <= 1458 &&
                Main.tile[num4, y + 1].type != 2 && Main.tile[num4 + 1, y + 1].type != 2)
            {
                Main.tile[num4, y].frameX -= 1368;
                Main.tile[num4 + 1, y].frameX -= 1368;
            }

            if (flag)
            {
                int frameX = Main.tile[num4, y].frameX;
                if (!Main.tile[num4, y].active())
                {
                    frameX = Main.tile[num4 + 1, y].frameX;
                }

                destroyObject = true;
                if (Main.tile[num4, y].type == type)
                {
                    KillTile(num4, y, false, false, false);
                }

                if (Main.tile[num4 + 1, y].type == type)
                {
                    KillTile(num4 + 1, y, false, false, false);
                }

                if (type == 16)
                {
                    if (num3 == 1)
                    {
                        Item.NewItem(num4 * 16, y * 16, 32, 32, 716, 1, false, 0, false, false);
                    }
                    else
                    {
                        Item.NewItem(num4 * 16, y * 16, 32, 32, 35, 1, false, 0, false, false);
                    }
                }

                if (type == 18)
                {
                    int type2 = 36;
                    if (num3 >= 1 && num3 <= 3)
                    {
                        type2 = 634 + num3;
                    }
                    else if (num3 < 4 || num3 > 8)
                    {
                        switch (num3)
                        {
                            case 9:
                                type2 = 916;
                                break;
                            case 10:
                                type2 = 1145;
                                break;
                            case 11:
                                type2 = 1398;
                                break;
                            case 12:
                                type2 = 1401;
                                break;
                            case 13:
                                type2 = 1404;
                                break;
                            case 14:
                                type2 = 1461;
                                break;
                            case 15:
                                type2 = 1511;
                                break;
                            case 16:
                                type2 = 1795;
                                break;
                            case 17:
                                type2 = 1817;
                                break;
                            case 18:
                                type2 = 2229;
                                break;
                            case 19:
                                type2 = 2251;
                                break;
                            case 20:
                                type2 = 2252;
                                break;
                            case 21:
                                type2 = 2253;
                                break;
                            case 22:
                                type2 = 2534;
                                break;
                            case 23:
                                type2 = 673;
                                break;
                            case 24:
                                type2 = 2631;
                                break;
                            case 25:
                                type2 = 2632;
                                break;
                            case 26:
                                type2 = 2633;
                                break;
                            case 27:
                                type2 = 2826;
                                break;
                            case 28:
                                type2 = 3156;
                                break;
                            case 29:
                                type2 = 3158;
                                break;
                            case 30:
                                type2 = 3157;
                                break;
                            case 31:
                                type2 = 3909;
                                break;
                            case 32:
                                type2 = 3910;
                                break;
                        }
                    }
                    else
                    {
                        type2 = 807 + num3;
                    }

                    Item.NewItem(num4 * 16, y * 16, 32, 32, type2, 1, false, 0, false, false);
                }

                if (type == 185)
                {
                    if (frameX >= 576 && frameX <= 610)
                    {
                        Item.NewItem(num4 * 16, y * 16, 32, 32, 71, genRand.Next(10, 100), false, 0, false, false);
                        Item.NewItem(num4 * 16, y * 16, 32, 32, 71, genRand.Next(20, 100), false, 0, false, false);
                        if (genRand.Next(3) != 0)
                        {
                            Item.NewItem(num4 * 16, y * 16, 32, 32, 71, genRand.Next(10, 100), false, 0, false, false);
                        }

                        if (genRand.Next(3) != 0)
                        {
                            Item.NewItem(num4 * 16, y * 16, 32, 32, 71, genRand.Next(20, 100), false, 0, false, false);
                        }

                        if (genRand.Next(2) == 0)
                        {
                            Item.NewItem(num4 * 16, y * 16, 32, 32, 71, genRand.Next(10, 100), false, 0, false, false);
                        }

                        if (genRand.Next(2) == 0)
                        {
                            Item.NewItem(num4 * 16, y * 16, 32, 32, 71, genRand.Next(20, 100), false, 0, false, false);
                        }

                        if (genRand.Next(3) == 0)
                        {
                            Item.NewItem(num4 * 16, y * 16, 32, 32, 71, genRand.Next(10, 100), false, 0, false, false);
                        }

                        if (genRand.Next(3) == 0)
                        {
                            Item.NewItem(num4 * 16, y * 16, 32, 32, 71, genRand.Next(20, 100), false, 0, false, false);
                        }

                        if (genRand.Next(4) == 0)
                        {
                            Item.NewItem(num4 * 16, y * 16, 32, 32, 71, genRand.Next(10, 100), false, 0, false, false);
                        }

                        if (genRand.Next(4) == 0)
                        {
                            Item.NewItem(num4 * 16, y * 16, 32, 32, 71, genRand.Next(20, 100), false, 0, false, false);
                        }

                        if (genRand.Next(5) == 0)
                        {
                            Item.NewItem(num4 * 16, y * 16, 32, 32, 71, genRand.Next(10, 100), false, 0, false, false);
                        }

                        if (genRand.Next(5) == 0)
                        {
                            Item.NewItem(num4 * 16, y * 16, 32, 32, 71, genRand.Next(20, 100), false, 0, false, false);
                        }
                    }

                    if (frameX >= 612 && frameX <= 646)
                    {
                        Item.NewItem(num4 * 16, y * 16, 32, 32, 72, genRand.Next(10, 100), false, 0, false, false);
                        if (genRand.Next(2) == 0)
                        {
                            Item.NewItem(num4 * 16, y * 16, 32, 32, 72, genRand.Next(20, 100), false, 0, false, false);
                        }

                        if (genRand.Next(3) == 0)
                        {
                            Item.NewItem(num4 * 16, y * 16, 32, 32, 72, genRand.Next(30, 100), false, 0, false, false);
                        }
                    }

                    if (frameX >= 648 && frameX <= 682)
                    {
                        Item.NewItem(num4 * 16, y * 16, 32, 32, 73, genRand.Next(1, 6), false, 0, false, false);
                        if (genRand.Next(2) == 0)
                        {
                            Item.NewItem(num4 * 16, y * 16, 32, 32, 73, genRand.Next(2, 6), false, 0, false, false);
                        }

                        if (genRand.Next(3) == 0)
                        {
                            Item.NewItem(num4 * 16, y * 16, 32, 32, 73, genRand.Next(3, 6), false, 0, false, false);
                        }
                    }

                    if (frameX >= 684 && frameX <= 718)
                    {
                        Item.NewItem(num4 * 16, y * 16, 32, 32, 181, genRand.Next(1, 4), false, 0, false, false);
                    }

                    if (frameX >= 720 && frameX <= 754)
                    {
                        Item.NewItem(num4 * 16, y * 16, 32, 32, 180, genRand.Next(1, 4), false, 0, false, false);
                    }

                    if (frameX >= 756 && frameX <= 790)
                    {
                        Item.NewItem(num4 * 16, y * 16, 32, 32, 177, genRand.Next(1, 4), false, 0, false, false);
                    }

                    if (frameX >= 792 && frameX <= 826)
                    {
                        Item.NewItem(num4 * 16, y * 16, 32, 32, 179, genRand.Next(1, 4), false, 0, false, false);
                    }

                    if (frameX >= 828 && frameX <= 862)
                    {
                        Item.NewItem(num4 * 16, y * 16, 32, 32, 178, genRand.Next(1, 4), false, 0, false, false);
                    }

                    if (frameX >= 864 && frameX <= 898)
                    {
                        Item.NewItem(num4 * 16, y * 16, 32, 32, 182, genRand.Next(1, 4), false, 0, false, false);
                    }
                }

                if (type == 462)
                {
                    Item.NewItem(num4 * 16, y * 16, 32, 32, 3795, 1, false, 0, false, false);
                }

                if (type == 29)
                {
                    Item.NewItem(num4 * 16, y * 16, 32, 32, 87, 1, false, 0, false, false);
                    Main.PlaySound(13, i * 16, y * 16, 1, 1f, 0f);
                }

                switch (type)
                {
                    case 103:
                    {
                        int type3 = 356;
                        if (num3 == 1)
                        {
                            type3 = 2235;
                        }

                        if (num3 == 2)
                        {
                            type3 = 2242;
                        }

                        if (num3 == 3)
                        {
                            type3 = 2243;
                        }

                        Item.NewItem(num4 * 16, y * 16, 32, 32, type3, 1, false, 0, false, false);
                        Main.PlaySound(13, i * 16, y * 16, 1, 1f, 0f);
                        break;
                    }
                    case 134:
                        if (num3 == 1)
                        {
                            Item.NewItem(num4 * 16, y * 16, 32, 32, 1220, 1, false, 0, false, false);
                        }
                        else
                        {
                            Item.NewItem(num4 * 16, y * 16, 32, 32, 525, 1, false, 0, false, false);
                        }

                        break;
                }

                destroyObject = false;
                SquareTileFrame(num4, y, true);
                SquareTileFrame(num4 + 1, y, true);
            }
        }
    }

    public static void Place2x1(int x, int y, ushort type, int style = 0)
    {
        if (Main.tile[x, y] == null)
        {
            Tile[,] tile = Main.tile;
            Tile tile2 = new Tile();
            tile[x, y] = tile2;
        }

        if (Main.tile[x + 1, y] == null)
        {
            Tile[,] tile3 = Main.tile;
            int num = x + 1;
            Tile tile4 = new Tile();
            tile3[num, y] = tile4;
        }

        if (Main.tile[x, y + 1] == null)
        {
            Tile[,] tile5 = Main.tile;
            int num2 = y + 1;
            Tile tile6 = new Tile();
            tile5[x, num2] = tile6;
        }

        if (Main.tile[x + 1, y + 1] == null)
        {
            Tile[,] tile7 = Main.tile;
            int num3 = x + 1;
            int num4 = y + 1;
            Tile tile8 = new Tile();
            tile7[num3, num4] = tile8;
        }

        bool flag = false;
        if (type != 29 && type != 103 && SolidTile2(x, y + 1) && SolidTile2(x + 1, y + 1) &&
            !Main.tile[x, y].active() && !Main.tile[x + 1, y].active())
        {
            flag = true;
        }
        else if ((type == 29 || type == 103) && Main.tile[x, y + 1].active() && Main.tile[x + 1, y + 1].active() &&
                 Main.tileTable[Main.tile[x, y + 1].type] && Main.tileTable[Main.tile[x + 1, y + 1].type] &&
                 !Main.tile[x, y].active() && !Main.tile[x + 1, y].active())
        {
            flag = true;
        }

        if (flag)
        {
            Main.tile[x, y].active(true);
            Main.tile[x, y].frameY = 0;
            Main.tile[x, y].frameX = (short) (36 * style);
            Main.tile[x, y].type = type;
            Main.tile[x + 1, y].active(true);
            Main.tile[x + 1, y].frameY = 0;
            Main.tile[x + 1, y].frameX = (short) (36 * style + 18);
            Main.tile[x + 1, y].type = type;
        }
    }

    public static void Check4x2(int i, int j, int type)
    {
        if (!destroyObject)
        {
            bool flag = false;
            int num = i + Main.tile[i, j].frameX / 18 * -1;
            if ((type == 79 || type == 90) && Main.tile[i, j].frameX >= 72)
            {
                num += 4;
            }

            int num2 = Main.tile[i, j].frameY / 18;
            int num3 = 0;
            while (num2 > 1)
            {
                num2 -= 2;
                num3++;
            }

            num2 = j - num2;
            for (int k = num; k < num + 4; k++)
            {
                for (int l = num2; l < num2 + 2; l++)
                {
                    int num4 = (k - num) * 18;
                    if ((type == 79 || type == 90) && Main.tile[i, j].frameX >= 72)
                    {
                        num4 = (k - num + 4) * 18;
                    }

                    if (Main.tile[k, l] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num5 = k;
                        int num6 = l;
                        Tile tile2 = new Tile();
                        tile[num5, num6] = tile2;
                    }

                    if (!Main.tile[k, l].active() || Main.tile[k, l].type != type || Main.tile[k, l].frameX != num4 ||
                        Main.tile[k, l].frameY != (l - num2) * 18 + num3 * 36)
                    {
                        flag = true;
                    }
                }

                if (Main.tile[k, num2 + 2] == null)
                {
                    Tile[,] tile3 = Main.tile;
                    int num7 = k;
                    int num8 = num2 + 2;
                    Tile tile4 = new Tile();
                    tile3[num7, num8] = tile4;
                }

                if (!SolidTileAllowBottomSlope(k, num2 + 2) &&
                    (!Main.tile[k, num2 + 2].active() || !TileID.Sets.Platforms[Main.tile[k, num2 + 2].type]))
                {
                    flag = true;
                }
            }

            if (flag)
            {
                destroyObject = true;
                for (int m = num; m < num + 4; m++)
                {
                    for (int n = num2; n < num2 + 3; n++)
                    {
                        if (Main.tile[m, n].type == type && Main.tile[m, n].active())
                        {
                            KillTile(m, n, false, false, false);
                        }
                    }
                }

                if (type == 79)
                {
                    int num9 = 0;
                    if (num3 == 0)
                    {
                        num9 = 224;
                    }
                    else if (num3 == 4)
                    {
                        num9 = 920;
                    }
                    else if (num3 >= 9 && num3 <= 12)
                    {
                        num9 = 1710 + num3;
                    }
                    else if (num3 >= 5 && num3 <= 8)
                    {
                        num9 = 1465 + num3;
                    }
                    else if (num3 < 13 || num3 > 18)
                    {
                        switch (num3)
                        {
                            case 19:
                                num9 = 2139;
                                break;
                            case 20:
                                num9 = 2140;
                                break;
                            case 21:
                                num9 = 2231;
                                break;
                            case 22:
                                num9 = 2520;
                                break;
                            case 23:
                                num9 = 2538;
                                break;
                            case 24:
                                num9 = 2553;
                                break;
                            case 25:
                                num9 = 2568;
                                break;
                            case 26:
                                num9 = 2669;
                                break;
                            case 27:
                                num9 = 2811;
                                break;
                            case 28:
                                num9 = 3162;
                                break;
                            case 29:
                                num9 = 3164;
                                break;
                            case 30:
                                num9 = 3163;
                                break;
                            case 31:
                                num9 = 3897;
                                break;
                            default:
                                num9 = num3 + 643;
                                break;
                        }
                    }
                    else
                    {
                        num9 = 2066 + num3 - 13;
                    }

                    Item.NewItem(i * 16, j * 16, 32, 32, num9, 1, false, 0, false, false);
                }

                if (type == 90)
                {
                    int type2 = 0;
                    if (num3 == 0)
                    {
                        type2 = 336;
                    }
                    else if (num3 >= 1 && num3 <= 10)
                    {
                        type2 = 2072 + num3 - 1;
                    }
                    else if (num3 < 11 || num3 > 15)
                    {
                        switch (num3)
                        {
                            case 16:
                                type2 = 2232;
                                break;
                            case 17:
                                type2 = 2519;
                                break;
                            case 18:
                                type2 = 2537;
                                break;
                            case 19:
                                type2 = 2552;
                                break;
                            case 20:
                                type2 = 2567;
                                break;
                            case 21:
                                type2 = 2658;
                                break;
                            case 22:
                                type2 = 2659;
                                break;
                            case 23:
                                type2 = 2660;
                                break;
                            case 24:
                                type2 = 2661;
                                break;
                            case 25:
                                type2 = 2662;
                                break;
                            case 26:
                                type2 = 2663;
                                break;
                            case 27:
                                type2 = 2810;
                                break;
                            case 28:
                                type2 = 3159;
                                break;
                            case 29:
                                type2 = 3161;
                                break;
                            case 30:
                                type2 = 3160;
                                break;
                            case 31:
                                type2 = 3895;
                                break;
                        }
                    }
                    else
                    {
                        type2 = 2124 + num3 - 11;
                    }

                    Item.NewItem(i * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
                }

                destroyObject = false;
                for (int num10 = num - 1; num10 < num + 4; num10++)
                {
                    for (int num11 = num2 - 1; num11 < num2 + 4; num11++)
                    {
                        TileFrame(num10, num11, false, false);
                    }
                }
            }
        }
    }

    public static void PlaceJunglePlant(int X2, int Y2, ushort type, int styleX, int styleY)
    {
        if (styleY > 0 || type == 236 || type == 238)
        {
            int num = Y2;
            if (type == 95 || type == 126)
            {
                num++;
            }

            if (X2 >= 5 && X2 <= Main.maxTilesX - 5 && num >= 5 && num <= Main.maxTilesY - 5)
            {
                bool flag = true;
                for (int i = X2 - 1; i < X2 + 1; i++)
                {
                    for (int j = num - 1; j < num + 1; j++)
                    {
                        if (Main.tile[i, j] == null)
                        {
                            Tile[,] tile = Main.tile;
                            int num2 = i;
                            int num3 = j;
                            Tile tile2 = new Tile();
                            tile[num2, num3] = tile2;
                        }

                        if (Main.tile[i, j].active() && Main.tile[i, j].type != 61 && Main.tile[i, j].type != 62 &&
                            Main.tile[i, j].type != 69 && Main.tile[i, j].type != 74 &&
                            (type != 236 || Main.tile[i, j].type != 233) &&
                            (type != 238 || Main.tile[i, j].type != 233) &&
                            (Main.tile[i, j].type != 185 || Main.tile[i, j].frameY != 0))
                        {
                            flag = false;
                        }

                        if (type == 98 && Main.tile[i, j].liquid > 0)
                        {
                            flag = false;
                        }
                    }

                    if (Main.tile[i, num + 1] == null)
                    {
                        Tile[,] tile3 = Main.tile;
                        int num4 = i;
                        int num5 = num + 1;
                        Tile tile4 = new Tile();
                        tile3[num4, num5] = tile4;
                    }

                    if (!SolidTile(i, num + 1) || Main.tile[i, num + 1].type != 60)
                    {
                        flag = false;
                    }
                }

                if (flag)
                {
                    short num6 = 36;
                    if (type == 236 || type == 238)
                    {
                        num6 = 0;
                    }

                    short num7 = (short) (36 * styleX);
                    Main.tile[X2 - 1, num - 1].active(true);
                    Main.tile[X2 - 1, num - 1].frameY = num6;
                    Main.tile[X2 - 1, num - 1].frameX = num7;
                    Main.tile[X2 - 1, num - 1].type = type;
                    Main.tile[X2, num - 1].active(true);
                    Main.tile[X2, num - 1].frameY = num6;
                    Main.tile[X2, num - 1].frameX = (short) (18 + num7);
                    Main.tile[X2, num - 1].type = type;
                    Main.tile[X2 - 1, num].active(true);
                    Main.tile[X2 - 1, num].frameY = (short) (num6 + 18);
                    Main.tile[X2 - 1, num].frameX = num7;
                    Main.tile[X2 - 1, num].type = type;
                    Main.tile[X2, num].active(true);
                    Main.tile[X2, num].frameY = (short) (num6 + 18);
                    Main.tile[X2, num].frameX = (short) (18 + num7);
                    Main.tile[X2, num].type = type;
                }
            }
        }
        else if (X2 >= 5 && X2 <= Main.maxTilesX - 5 && Y2 >= 5 && Y2 <= Main.maxTilesY - 5)
        {
            bool flag2 = true;
            for (int k = X2 - 1; k < X2 + 2; k++)
            {
                for (int l = Y2 - 1; l < Y2 + 1; l++)
                {
                    if (Main.tile[k, l] == null)
                    {
                        Tile[,] tile5 = Main.tile;
                        int num8 = k;
                        int num9 = l;
                        Tile tile6 = new Tile();
                        tile5[num8, num9] = tile6;
                    }

                    if (Main.tile[k, l].active() && Main.tile[k, l].type != 61 && Main.tile[k, l].type != 62 &&
                        Main.tile[k, l].type != 69 && Main.tile[k, l].type != 74 &&
                        (Main.tile[k, l].type != 185 || Main.tile[k, l].frameY != 0))
                    {
                        flag2 = false;
                    }
                }

                if (Main.tile[k, Y2 + 1] == null)
                {
                    Tile[,] tile7 = Main.tile;
                    int num10 = k;
                    int num11 = Y2 + 1;
                    Tile tile8 = new Tile();
                    tile7[num10, num11] = tile8;
                }

                if (!SolidTile(k, Y2 + 1) || Main.tile[k, Y2 + 1].type != 60)
                {
                    flag2 = false;
                }
            }

            if (flag2)
            {
                short num12 = (short) (54 * styleX);
                Main.tile[X2 - 1, Y2 - 1].active(true);
                Main.tile[X2 - 1, Y2 - 1].frameY = 0;
                Main.tile[X2 - 1, Y2 - 1].frameX = num12;
                Main.tile[X2 - 1, Y2 - 1].type = type;
                Main.tile[X2, Y2 - 1].active(true);
                Main.tile[X2, Y2 - 1].frameY = 0;
                Main.tile[X2, Y2 - 1].frameX = (short) (num12 + 18);
                Main.tile[X2, Y2 - 1].type = type;
                Main.tile[X2 + 1, Y2 - 1].active(true);
                Main.tile[X2 + 1, Y2 - 1].frameY = 0;
                Main.tile[X2 + 1, Y2 - 1].frameX = (short) (num12 + 36);
                Main.tile[X2 + 1, Y2 - 1].type = type;
                Main.tile[X2 - 1, Y2].active(true);
                Main.tile[X2 - 1, Y2].frameY = 18;
                Main.tile[X2 - 1, Y2].frameX = num12;
                Main.tile[X2 - 1, Y2].type = type;
                Main.tile[X2, Y2].active(true);
                Main.tile[X2, Y2].frameY = 18;
                Main.tile[X2, Y2].frameX = (short) (num12 + 18);
                Main.tile[X2, Y2].type = type;
                Main.tile[X2 + 1, Y2].active(true);
                Main.tile[X2 + 1, Y2].frameY = 18;
                Main.tile[X2 + 1, Y2].frameX = (short) (num12 + 36);
                Main.tile[X2 + 1, Y2].type = type;
            }
        }
    }

    public static void CheckJunglePlant(int i, int j, int type)
    {
        if (!destroyObject)
        {
            if (Main.tile[i, j].frameY >= 36 || Main.tile[i, j].type == 236 || Main.tile[i, j].type == 238)
            {
                bool flag = false;
                int num = Main.tile[i, j].frameX / 18;
                int num2 = 0;
                while (num > 1)
                {
                    num -= 2;
                    num2++;
                }

                num = i - num;
                int num3 = 36;
                if (type == 236 || type == 238)
                {
                    num3 = 0;
                }

                int num4;
                for (num4 = Main.tile[i, j].frameY / 18; num4 > 1; num4 -= 2)
                {
                }

                num4 = j - num4;
                int num5 = num2 * 36;
                for (int k = num; k < num + 2; k++)
                {
                    for (int l = num4; l < num4 + 2; l++)
                    {
                        if (Main.tile[k, l] == null)
                        {
                            Tile[,] tile = Main.tile;
                            int num6 = k;
                            int num7 = l;
                            Tile tile2 = new Tile();
                            tile[num6, num7] = tile2;
                        }

                        if (!Main.tile[k, l].active() || Main.tile[k, l].type != type ||
                            Main.tile[k, l].frameX != (k - num) * 18 + num5 ||
                            Main.tile[k, l].frameY != (l - num4) * 18 + num3)
                        {
                            flag = true;
                        }
                    }

                    if (Main.tile[k, num4 + 2] == null)
                    {
                        Tile[,] tile3 = Main.tile;
                        int num8 = k;
                        int num9 = num4 + 2;
                        Tile tile4 = new Tile();
                        tile3[num8, num9] = tile4;
                    }

                    if (!SolidTile(k, num4 + 2) || Main.tile[k, num4 + 2].type != 60)
                    {
                        flag = true;
                    }
                }

                if (flag)
                {
                    if (type == 238)
                    {
                        float num10 = (float) (i * 16);
                        float num11 = (float) (j * 16);
                        float num12 = -1f;
                        int plr = 0;
                        for (int m = 0; m < 255; m++)
                        {
                            float num13 = Math.Abs(Main.player[m].position.X - num10) +
                                          Math.Abs(Main.player[m].position.Y - num11);
                            if (num13 < num12 || num12 == -1f)
                            {
                                plr = m;
                                num12 = num13;
                            }
                        }

                        if (num12 / 16f < 50f)
                        {
                            NPC.SpawnOnPlayer(plr, 262);
                        }
                    }

                    if (type == 236)
                    {
                        Item.NewItem(i * 16, j * 16, 32, 32, 1291, 1, false, 0, false, false);
                    }

                    short frameX = Main.tile[i, j].frameX;
                    destroyObject = true;
                    for (int n = num; n < num + 2; n++)
                    {
                        for (int num14 = num4; num14 < num4 + 2; num14++)
                        {
                            if (Main.tile[n, num14] == null)
                            {
                                Tile[,] tile5 = Main.tile;
                                int num15 = n;
                                int num16 = num14;
                                Tile tile6 = new Tile();
                                tile5[num15, num16] = tile6;
                            }

                            if (Main.tile[n, num14].type == type && Main.tile[n, num14].active())
                            {
                                KillTile(n, num14, false, false, false);
                            }
                        }
                    }
                }
            }
            else
            {
                bool flag2 = false;
                int num17 = j + Main.tile[i, j].frameY / 18 * -1;
                int num18 = Main.tile[i, j].frameX / 18;
                int num19 = 0;
                while (num18 > 2)
                {
                    num18 -= 3;
                    num19++;
                }

                num18 = i - num18;
                int num20 = num19 * 54;
                for (int num21 = num18; num21 < num18 + 3; num21++)
                {
                    for (int num22 = num17; num22 < num17 + 2; num22++)
                    {
                        if (Main.tile[num21, num22] == null)
                        {
                            Tile[,] tile7 = Main.tile;
                            int num23 = num21;
                            int num24 = num22;
                            Tile tile8 = new Tile();
                            tile7[num23, num24] = tile8;
                        }

                        if (!Main.tile[num21, num22].active() || Main.tile[num21, num22].type != type ||
                            Main.tile[num21, num22].frameX != (num21 - num18) * 18 + num20 ||
                            Main.tile[num21, num22].frameY != (num22 - num17) * 18)
                        {
                            flag2 = true;
                        }
                    }

                    if (Main.tile[num21, num17 + 2] == null)
                    {
                        Tile[,] tile9 = Main.tile;
                        int num25 = num21;
                        int num26 = num17 + 2;
                        Tile tile10 = new Tile();
                        tile9[num25, num26] = tile10;
                    }

                    if (!SolidTile(num21, num17 + 2) || Main.tile[num21, num17 + 2].type != 60)
                    {
                        flag2 = true;
                    }
                }

                if (flag2)
                {
                    short frameX2 = Main.tile[i, j].frameX;
                    destroyObject = true;
                    for (int num27 = num18; num27 < num18 + 3; num27++)
                    {
                        for (int num28 = num17; num28 < num17 + 3; num28++)
                        {
                            if (Main.tile[num27, num28] == null)
                            {
                                Tile[,] tile11 = Main.tile;
                                int num29 = num27;
                                int num30 = num28;
                                Tile tile12 = new Tile();
                                tile11[num29, num30] = tile12;
                            }

                            if (Main.tile[num27, num28].type == type && Main.tile[num27, num28].active())
                            {
                                KillTile(num27, num28, false, false, false);
                            }
                        }
                    }
                }
            }
        }
    }

    public static void CheckSuper(int x, int y, int type)
    {
        if (!destroyObject)
        {
            Tile tile = Main.tile[x, y];
            int num = 0;
            if (type == 376)
            {
                num = tile.frameX / 36;
            }

            if (type == 443)
            {
                num = tile.frameX / 36;
            }

            bool flag = type == 376;
            bool flag2 = type == 443;
            bool flag3 = type == 444;
            TileObjectData tileData = TileObjectData.GetTileData(type, num, 0);
            bool styleHorizontal = tileData.StyleHorizontal;
            int width = tileData.Width;
            int height = tileData.Height;
            int num2 = x - tile.frameX / 18 % width;
            int num3 = y - tile.frameY / 18 % height;
            int num4 = 0;
            int num5 = 0;
            if (styleHorizontal)
            {
                num4 = tile.frameX / tileData.CoordinateFullWidth;
            }
            else
            {
                num5 = tile.frameY / tileData.CoordinateFullHeight;
            }

            bool flag4 = false;
            bool flag5 = false;
            for (int i = 0; i < width; i++)
            {
                for (int j = 0; j < height; j++)
                {
                    Tile tileSafely = Framing.GetTileSafely(num2 + i, num3 + j);
                    if (!tileSafely.active() || tileSafely.type != type ||
                        tileSafely.frameX != num4 * tileData.CoordinateFullWidth + i * (tileData.CoordinateWidth + 2) ||
                        tileSafely.frameY != num5 * tileData.CoordinateFullHeight +
                        j * (tileData.CoordinateHeights[0] + 2))
                    {
                        flag4 = true;
                    }
                }
            }

            if (flag)
            {
                for (int k = 0; k < width; k++)
                {
                    Tile tileSafely = Framing.GetTileSafely(num2 + k, num3 + height);
                    if (!tileSafely.active() || (!Main.tileSolid[tileSafely.type] && !Main.tileTable[tileSafely.type]))
                    {
                        flag4 = true;
                    }

                    if (tileSafely.halfBrick())
                    {
                        flag4 = true;
                    }
                }
            }

            if (flag2)
            {
                bool flag6 = true;
                bool flag7 = true;
                for (int l = 0; l < width; l++)
                {
                    if (!AnchorValid(Framing.GetTileSafely(num2 + l, num3 + height),
                        AnchorType.SolidTile | AnchorType.SolidWithTop | AnchorType.SolidSide))
                    {
                        flag7 = false;
                    }

                    if (!AnchorValid(Framing.GetTileSafely(num2 + l, num3 - 1), AnchorType.SolidBottom))
                    {
                        flag6 = false;
                    }
                }

                if (!flag6 && !flag7)
                {
                    flag4 = true;
                }

                if (!flag4)
                {
                    int num6 = 0;
                    if (Main.netMode != 1)
                    {
                        if (flag7)
                        {
                            for (int m = 0; m < width; m++)
                            {
                                Framing.GetTileSafely(num2 + m, num3).frameX =
                                    (short) (m * 18 + num / 2 * 36 + num6 * 36);
                            }
                        }
                        else
                        {
                            for (int n = 0; n < width; n++)
                            {
                                Framing.GetTileSafely(num2 + n, num3).frameX =
                                    (short) (n * 18 + (num - 2) / 2 * 36 + 72 + num6 * 36);
                            }
                        }
                    }
                }
            }

            if (flag3)
            {
                bool flag8 = true;
                for (int num7 = 0; num7 < width; num7++)
                {
                    if (!AnchorValid(Framing.GetTileSafely(num2 + num7, num3 - 1), AnchorType.SolidTile))
                    {
                        flag8 = false;
                    }
                }

                if (!flag8)
                {
                    flag4 = true;
                }

                for (int num8 = 0; num8 < width; num8++)
                {
                    for (int num9 = 0; num9 < height; num9++)
                    {
                        Tile tileSafely = Framing.GetTileSafely(num2 + num8, num3 + num9);
                        if (tileSafely.liquid > 0)
                        {
                            flag4 = true;
                            flag5 = true;
                        }
                    }
                }
            }

            if (flag4)
            {
                destroyObject = true;
                for (int num10 = 0; num10 < width; num10++)
                {
                    for (int num11 = 0; num11 < height; num11++)
                    {
                        if (Main.tile[num2 + num10, num3 + num11].type == type &&
                            Main.tile[num2 + num10, num3 + num11].active())
                        {
                            KillTile(num2 + num10, num3 + num11, false, false, false);
                        }
                    }
                }

                int num12 = 0;
                if (type == 376)
                {
                    num12 = ((num <= 2) ? (2334 + num) : (3203 + num - 3));
                }

                if (type == 443)
                {
                    num12 = 3722;
                }

                if (type == 444 && Main.netMode != 1 && !flag5)
                {
                    Projectile.NewProjectile((float) (num2 * 16 + 16), (float) (num3 * 16 + 16), 0f, 0f, 655, 0, 0f,
                        Main.myPlayer, 0f, 0f);
                }

                if (num12 != 0)
                {
                    Item.NewItem(num2 * 16, num3 * 16, tileData.CoordinateFullWidth, tileData.CoordinateFullHeight,
                        num12, 1, false, 0, false, false);
                }

                destroyObject = false;
                for (int num13 = -1; num13 < width + 1; num13++)
                {
                    for (int num14 = -1; num14 < height + 1; num14++)
                    {
                        TileFrame(num2 + num13, num3 + num14, false, false);
                    }
                }
            }
        }
    }

    public static void Check2x2(int i, int j, int type)
    {
        if (!destroyObject)
        {
            bool flag = false;
            int num = 0;
            int num2 = Main.tile[i, j].frameX / 18 * -1;
            if (num2 < -1)
            {
                num2 += 2;
                num = 36;
            }

            num2 += i;
            int num3 = (type == 172) ? 38 : 36;
            int num4 = Main.tile[i, j].frameY;
            int num5 = 0;
            while (num4 >= num3)
            {
                num4 -= num3;
                num5++;
            }

            int num6 = j - num4 / 18;
            for (int k = num2; k < num2 + 2; k++)
            {
                for (int l = num6; l < num6 + 2; l++)
                {
                    Tile tileSafely = Framing.GetTileSafely(k, l);
                    if (!tileSafely.active() || tileSafely.type != type || tileSafely.frameX != (k - num2) * 18 + num ||
                        tileSafely.frameY != (l - num6) * 18 + num5 * num3)
                    {
                        flag = true;
                    }
                }

                switch (type)
                {
                    case 95:
                    case 126:
                        Framing.GetTileSafely(k, num6 - 1);
                        if (!Main.tile[k, num6 - 1].active() || !Main.tileSolid[Main.tile[k, num6 - 1].type] ||
                            Main.tileSolidTop[Main.tile[k, num6 - 1].type])
                        {
                            flag = true;
                        }

                        break;
                    default:
                    {
                        Tile tileSafely2 = Framing.GetTileSafely(k, num6 + 2);
                        if (!tileSafely2.active() ||
                            (!Main.tileSolid[tileSafely2.type] && !Main.tileTable[tileSafely2.type]))
                        {
                            flag = true;
                        }

                        if (tileSafely2.halfBrick())
                        {
                            flag = true;
                        }

                        break;
                    }
                    case 132:
                    case 138:
                        break;
                }
            }

            switch (type)
            {
                case 138:
                {
                    ushort type4 = Main.tile[num2, num6 - 1].type;
                    ushort type5 = Main.tile[num2 + 1, num6 - 1].type;
                    if (!TileID.Sets.BasicChest[type4] && !TileID.Sets.BasicChest[type5] && type4 != 88 &&
                        type5 != 88 && !TileID.Sets.BasicChestFake[type4] && !TileID.Sets.BasicChestFake[type5] &&
                        !SolidTileAllowBottomSlope(num2, num6 + 2) && !SolidTileAllowBottomSlope(num2 + 1, num6 + 2))
                    {
                        flag = true;
                    }

                    break;
                }
                case 132:
                {
                    flag = false;
                    num6 = Main.tile[i, j].frameY / 18 * -1;
                    num6 += j;
                    num = 0;
                    num2 = Main.tile[i, j].frameX / 18 * -1;
                    while (num2 < -1)
                    {
                        num2 += 2;
                        num += 36;
                    }

                    num2 += i;
                    for (int m = num2; m < num2 + 2; m++)
                    {
                        for (int n = num6; n < num6 + 2; n++)
                        {
                            if (Main.tile[m, n] == null)
                            {
                                Tile[,] tile = Main.tile;
                                int num7 = m;
                                int num8 = n;
                                Tile tile2 = new Tile();
                                tile[num7, num8] = tile2;
                            }

                            if (!Main.tile[m, n].active() || Main.tile[m, n].type != type ||
                                Main.tile[m, n].frameX != (m - num2) * 18 + num ||
                                Main.tile[m, n].frameY != (n - num6) * 18)
                            {
                                flag = true;
                            }
                        }
                    }

                    if (Main.tile[num2, num6 + 2] == null)
                    {
                        Tile[,] tile3 = Main.tile;
                        int num9 = num2;
                        int num10 = num6 + 2;
                        Tile tile4 = new Tile();
                        tile3[num9, num10] = tile4;
                    }

                    if (Main.tile[num2 + 1, num6 + 2] == null)
                    {
                        Tile[,] tile5 = Main.tile;
                        int num11 = num2 + 1;
                        int num12 = num6 + 2;
                        Tile tile6 = new Tile();
                        tile5[num11, num12] = tile6;
                    }

                    bool flag2 = false;
                    ushort type2 = Main.tile[num2, num6 + 2].type;
                    ushort type3 = Main.tile[num2 + 1, num6 + 2].type;
                    if (!Main.tile[num2, num6 + 2].active() || (!Main.tileSolid[type2] && !Main.tileSolidTop[type2]) ||
                        Main.tile[num2, num6 + 2].halfBrick() ||
                        (Main.tile[num2, num6 + 2].slope() != 0 && !Main.tile[num2, num6 + 2].bottomSlope()))
                    {
                        flag2 = true;
                    }

                    if (!Main.tile[num2 + 1, num6 + 2].active() ||
                        (!Main.tileSolid[type3] && !Main.tileSolidTop[type3]) ||
                        Main.tile[num2 + 1, num6 + 2].halfBrick() ||
                        (Main.tile[num2 + 1, num6 + 2].slope() != 0 && !Main.tile[num2 + 1, num6 + 2].bottomSlope()))
                    {
                        flag2 = true;
                    }

                    if (flag2)
                    {
                        if (Main.tile[num2, num6].wall < 1 || Main.tile[num2 + 1, num6].wall < 1 ||
                            Main.tile[num2, num6 + 1].wall < 1 || Main.tile[num2 + 1, num6 + 1].wall < 1)
                        {
                            flag = true;
                        }
                        else if (num < 72)
                        {
                            for (int num13 = num2; num13 < num2 + 2; num13++)
                            {
                                for (int num14 = num6; num14 < num6 + 2; num14++)
                                {
                                    Main.tile[num13, num14].frameX += 72;
                                }
                            }
                        }
                    }
                    else if (num >= 72)
                    {
                        for (int num15 = num2; num15 < num2 + 2; num15++)
                        {
                            for (int num16 = num6; num16 < num6 + 2; num16++)
                            {
                                Main.tile[num15, num16].frameX -= 72;
                            }
                        }
                    }

                    break;
                }
            }

            if (flag)
            {
                destroyObject = true;
                for (int num17 = num2; num17 < num2 + 2; num17++)
                {
                    for (int num18 = num6; num18 < num6 + 2; num18++)
                    {
                        if (Main.tile[num17, num18].type == type && Main.tile[num17, num18].active())
                        {
                            KillTile(num17, num18, false, false, false);
                        }
                    }
                }

                int num19 = 0;
                if (type == 360)
                {
                    num19 = 3072;
                }

                if (type >= 288 && type <= 295)
                {
                    num19 = 2178 + type - 288;
                }

                if (type >= 316 && type <= 318)
                {
                    num19 = 2439 + type - 316;
                }

                if (type == 85)
                {
                    num19 = 321;
                }

                if (type == 94)
                {
                    num19 = 352;
                }

                if (type == 95)
                {
                    num19 = 344;
                }

                if (type == 96)
                {
                    num19 = 345;
                }

                if (type == 97)
                {
                    num19 = 346;
                }

                if (type == 98)
                {
                    num19 = 347;
                }

                if (type == 99)
                {
                    num19 = 348;
                }

                if (type == 335)
                {
                    num19 = 2700;
                }

                if (type == 411)
                {
                    num19 = 3545;
                }

                if (type == 100)
                {
                    if (num5 == 0)
                    {
                        num19 = 349;
                    }
                    else if (num5 >= 1 && num5 <= 12)
                    {
                        num19 = 2092 + num5 - 1;
                    }
                    else if (num5 < 13 || num5 > 16)
                    {
                        switch (num5)
                        {
                            case 17:
                                num19 = 2227;
                                break;
                            case 18:
                                num19 = 2522;
                                break;
                            case 19:
                                num19 = 2541;
                                break;
                            case 20:
                                num19 = 2555;
                                break;
                            case 21:
                                num19 = 2570;
                                break;
                            case 22:
                                num19 = 2664;
                                break;
                            case 23:
                                num19 = 2665;
                                break;
                            case 24:
                                num19 = 2666;
                                break;
                            case 25:
                                num19 = 2667;
                                break;
                            case 26:
                                num19 = 2668;
                                break;
                            case 27:
                                num19 = 2825;
                                break;
                            case 28:
                                num19 = 3168;
                                break;
                            case 29:
                                num19 = 3170;
                                break;
                            case 30:
                                num19 = 3169;
                                break;
                            case 31:
                                num19 = 3893;
                                break;
                        }
                    }
                    else
                    {
                        num19 = 2149 + num5 - 13;
                    }
                }

                if (type == 173)
                {
                    num19 = 714;
                }

                if (type == 125)
                {
                    num19 = 487;
                }

                if (type == 287)
                {
                    num19 = 2177;
                }

                if (type == 126)
                {
                    num19 = 488;
                }

                if (type == 132)
                {
                    num19 = 513;
                }

                if (type == 142)
                {
                    num19 = 581;
                }

                if (type == 143)
                {
                    num19 = 582;
                }

                if (type == 282)
                {
                    num19 = 250;
                }

                if (type == 319)
                {
                    num19 = 2490;
                }

                if (type == 172)
                {
                    num19 = 2827 + num5;
                    switch (num5)
                    {
                        case 29:
                            num19 = 3147;
                            break;
                        case 30:
                            num19 = 3149;
                            break;
                        case 31:
                            num19 = 3148;
                            break;
                        case 32:
                            num19 = 3896;
                            break;
                    }
                }

                if (num19 != 0)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, num19, 1, false, 0, false, false);
                }

                if (type == 138 && !gen && Main.netMode != 1)
                {
                    Projectile.NewProjectile((float) (num2 * 16) + 15.5f, (float) (num6 * 16 + 16), 0f, 0f, 99, 70, 10f,
                        Main.myPlayer, 0f, 0f);
                }

                destroyObject = false;
                for (int num20 = num2 - 1; num20 < num2 + 3; num20++)
                {
                    for (int num21 = num6 - 1; num21 < num6 + 3; num21++)
                    {
                        TileFrame(num20, num21, false, false);
                    }
                }
            }
        }
    }

    public static bool CheckBoulderChest(int i, int j)
    {
        int num = Main.tile[i, j].frameX / 18 * -1;
        if (num < -1)
        {
            num += 2;
        }

        num += i;
        int num2;
        for (num2 = Main.tile[i, j].frameY; num2 >= 36; num2 -= 36)
        {
        }

        num2 = j - num2 / 18;
        if (TileID.Sets.BasicChest[Main.tile[num, num2 - 1].type] ||
            TileID.Sets.BasicChest[Main.tile[num + 1, num2 - 1].type] ||
            TileID.Sets.BasicChestFake[Main.tile[num, num2 - 1].type] ||
            TileID.Sets.BasicChestFake[Main.tile[num + 1, num2 - 1].type] || Main.tile[num, num2 - 1].type == 88 ||
            Main.tile[num + 1, num2 - 1].type == 88)
        {
            return true;
        }

        return false;
    }

    public static void OreRunner(int i, int j, double strength, int steps, ushort type)
    {
        double num = strength;
        float num2 = (float) steps;
        Vector2 value = default(Vector2);
        value.X = (float) i;
        value.Y = (float) j;
        Vector2 value2 = default(Vector2);
        value2.X = (float) genRand.Next(-10, 11) * 0.1f;
        value2.Y = (float) genRand.Next(-10, 11) * 0.1f;
        while (num > 0.0 && num2 > 0f)
        {
            if (value.Y < 0f && num2 > 0f && type == 59)
            {
                num2 = 0f;
            }

            num = strength * (double) (num2 / (float) steps);
            num2 -= 1f;
            int num3 = (int) ((double) value.X - num * 0.5);
            int num4 = (int) ((double) value.X + num * 0.5);
            int num5 = (int) ((double) value.Y - num * 0.5);
            int num6 = (int) ((double) value.Y + num * 0.5);
            if (num3 < 0)
            {
                num3 = 0;
            }

            if (num4 > Main.maxTilesX)
            {
                num4 = Main.maxTilesX;
            }

            if (num5 < 0)
            {
                num5 = 0;
            }

            if (num6 > Main.maxTilesY)
            {
                num6 = Main.maxTilesY;
            }

            for (int k = num3; k < num4; k++)
            {
                for (int l = num5; l < num6; l++)
                {
                    if (
                        (double) (Math.Abs((float) k - value.X) + Math.Abs((float) l - value.Y)) <
                        strength * 0.5 * (1.0 + (double) genRand.Next(-10, 11) * 0.015) && Main.tile[k, l].active() &&
                        (Main.tile[k, l].type == 0 || Main.tile[k, l].type == 1 || Main.tile[k, l].type == 23 ||
                         Main.tile[k, l].type == 25 || Main.tile[k, l].type == 40 || Main.tile[k, l].type == 53 ||
                         Main.tile[k, l].type == 57 || Main.tile[k, l].type == 59 || Main.tile[k, l].type == 60 ||
                         Main.tile[k, l].type == 70 || Main.tile[k, l].type == 109 || Main.tile[k, l].type == 112 ||
                         Main.tile[k, l].type == 116 || Main.tile[k, l].type == 117 || Main.tile[k, l].type == 147 ||
                         Main.tile[k, l].type == 161 || Main.tile[k, l].type == 163 || Main.tile[k, l].type == 164 ||
                         Main.tileMoss[Main.tile[k, l].type] || Main.tile[k, l].type == 199 ||
                         Main.tile[k, l].type == 200 || Main.tile[k, l].type == 203 || Main.tile[k, l].type == 234))
                    {
                        Main.tile[k, l].type = type;
                        SquareTileFrame(k, l, true);
                        if (Main.netMode == 2)
                        {
                            NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                        }
                    }
                }
            }

            value += value2;
            value2.X += (float) genRand.Next(-10, 11) * 0.05f;
            if (value2.X > 1f)
            {
                value2.X = 1f;
            }

            if (value2.X < -1f)
            {
                value2.X = -1f;
            }
        }
    }

    public static void SmashAltar(int i, int j)
    {
        if (Main.netMode != 1 && Main.hardMode && !noTileActions && !gen)
        {
            int num = altarCount % 3;
            int num2 = altarCount / 3 + 1;
            float num3 = (float) (Main.maxTilesX / 4200);
            int num4 = 1 - num;
            num3 = num3 * 310f - (float) (85 * num);
            num3 *= 0.85f;
            num3 /= (float) num2;
            switch (num)
            {
                case 0:
                {
                    if (oreTier1 == -1)
                    {
                        oreTier1 = 107;
                        if (genRand.Next(2) == 0)
                        {
                            oreTier1 = 221;
                        }
                    }

                    int num7 = 12;
                    if (oreTier1 == 221)
                    {
                        num7 += 9;
                        num3 *= 0.9f;
                    }

                    if (Main.netMode == 0)
                    {
                        Main.NewText(Lang.misc[num7].Value, 50, byte.MaxValue, 130, false);
                    }
                    else if (Main.netMode == 2)
                    {
                        NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[num7].Key),
                            new Color(50, 255, 130), -1);
                    }

                    num = oreTier1;
                    num3 *= 1.05f;
                    break;
                }
                case 1:
                {
                    if (oreTier2 == -1)
                    {
                        oreTier2 = 108;
                        if (genRand.Next(2) == 0)
                        {
                            oreTier2 = 222;
                        }
                    }

                    int num6 = 13;
                    if (oreTier2 == 222)
                    {
                        num6 += 9;
                        num3 *= 0.9f;
                    }

                    if (Main.netMode == 0)
                    {
                        Main.NewText(Lang.misc[num6].Value, 50, byte.MaxValue, 130, false);
                    }
                    else if (Main.netMode == 2)
                    {
                        NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[num6].Key),
                            new Color(50, 255, 130), -1);
                    }

                    num = oreTier2;
                    break;
                }
                default:
                {
                    if (oreTier3 == -1)
                    {
                        oreTier3 = 111;
                        if (genRand.Next(2) == 0)
                        {
                            oreTier3 = 223;
                        }
                    }

                    int num5 = 14;
                    if (oreTier3 == 223)
                    {
                        num5 += 9;
                        num3 *= 0.9f;
                    }

                    if (Main.netMode == 0)
                    {
                        Main.NewText(Lang.misc[num5].Value, 50, byte.MaxValue, 130, false);
                    }
                    else if (Main.netMode == 2)
                    {
                        NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[num5].Key),
                            new Color(50, 255, 130), -1);
                    }

                    num = oreTier3;
                    break;
                }
            }

            for (int k = 0; (float) k < num3; k++)
            {
                int i2 = genRand.Next(100, Main.maxTilesX - 100);
                double num8 = Main.worldSurface;
                if (num == 108 || num == 222)
                {
                    num8 = Main.rockLayer;
                }

                if (num == 111 || num == 223)
                {
                    num8 = (Main.rockLayer + Main.rockLayer + (double) Main.maxTilesY) / 3.0;
                }

                int j2 = genRand.Next((int) num8, Main.maxTilesY - 150);
                OreRunner(i2, j2, (double) genRand.Next(5, 9 + num4), genRand.Next(5, 9 + num4), (ushort) num);
            }

            int num9 = genRand.Next(3);
            int num10 = 0;
            while (num9 != 2)
            {
                if (num10++ >= 1000)
                {
                    break;
                }

                int num12 = genRand.Next(100, Main.maxTilesX - 100);
                int num13 = genRand.Next((int) Main.rockLayer + 50, Main.maxTilesY - 300);
                if (Main.tile[num12, num13].active() && Main.tile[num12, num13].type == 1)
                {
                    if (num9 == 0)
                    {
                        if (crimson)
                        {
                            Main.tile[num12, num13].type = 203;
                        }
                        else
                        {
                            Main.tile[num12, num13].type = 25;
                        }
                    }
                    else
                    {
                        Main.tile[num12, num13].type = 117;
                    }

                    if (Main.netMode == 2)
                    {
                        NetMessage.SendTileSquare(-1, num12, num13, 1, TileChangeType.None);
                    }

                    break;
                }
            }

            if (Main.netMode != 1)
            {
                int num14 = Main.rand.Next(2) + 1;
                for (int l = 0; l < num14; l++)
                {
                    NPC.SpawnOnPlayer(Player.FindClosest(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16), 82);
                }
            }

            altarCount++;
            AchievementsHelper.NotifyProgressionEvent(6);
        }
    }

    public static void Check3x1(int i, int j, int type)
    {
        if (!destroyObject)
        {
            bool flag = false;
            int num = Main.tile[i, j].frameX / 18;
            int num2 = 0;
            while (num > 2)
            {
                num -= 3;
                num2++;
            }

            num = i - num;
            int num3 = num2 * 54;
            for (int k = num; k < num + 3; k++)
            {
                if (Main.tile[k, j] == null)
                {
                    Tile[,] tile = Main.tile;
                    int num4 = k;
                    int num5 = j;
                    Tile tile2 = new Tile();
                    tile[num4, num5] = tile2;
                }

                if (!Main.tile[k, j].active() || Main.tile[k, j].type != type ||
                    Main.tile[k, j].frameX != (k - num) * 18 + num3 || Main.tile[k, j].frameY != 0)
                {
                    flag = true;
                }

                if (Main.tile[k, j - 1].active() && (TileID.Sets.BasicChest[Main.tile[k, j - 1].type] ||
                                                     TileID.Sets.BasicChestFake[Main.tile[k, j - 1].type] ||
                                                     Main.tile[k, j - 1].type == 88))
                {
                    return;
                }

                if (!SolidTileAllowBottomSlope(k, j + 1))
                {
                    flag = true;
                }
            }

            if (flag)
            {
                short frameX = Main.tile[i, j].frameX;
                destroyObject = true;
                if (type == 235)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 1263, 1, false, 0, false, false);
                }

                for (int l = num; l < num + 3; l++)
                {
                    if (Main.tile[l, j] == null)
                    {
                        Tile[,] tile3 = Main.tile;
                        int num6 = l;
                        int num7 = j;
                        Tile tile4 = new Tile();
                        tile3[num6, num7] = tile4;
                    }

                    if (Main.tile[l, j].type == type && Main.tile[l, j].active())
                    {
                        KillTile(l, j, false, false, false);
                    }
                }

                destroyObject = false;
                for (int m = num - 1; m < num + 4; m++)
                {
                    TileFrame(m, j, false, false);
                }
            }
        }
    }

    public static void Check3x2(int i, int j, int type)
    {
        if (!destroyObject)
        {
            bool flag = false;
            bool flag2 = false;
            int num = 36;
            int num2 = Main.tile[i, j].frameY / num;
            int num3 = Main.tile[i, j].frameY % num;
            int num4 = j - num3 / 18;
            int num5 = Main.tile[i, j].frameX / 18;
            int num6 = 0;
            while (num5 > 2)
            {
                num5 -= 3;
                num6++;
            }

            num5 = i - num5;
            int num7 = num6 * 54;
            if (type == 14 && num6 == 25)
            {
                flag2 = true;
            }

            int num8 = num4 + 2;
            if (flag2)
            {
                num8--;
            }

            for (int k = num5; k < num5 + 3; k++)
            {
                for (int l = num4; l < num8; l++)
                {
                    if (Main.tile[k, l] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num9 = k;
                        int num10 = l;
                        Tile tile2 = new Tile();
                        tile[num9, num10] = tile2;
                    }

                    if (!Main.tile[k, l].active() || Main.tile[k, l].type != type ||
                        Main.tile[k, l].frameX != (k - num5) * 18 + num7 ||
                        Main.tile[k, l].frameY != (l - num4) * 18 + num2 * 36)
                    {
                        flag = true;
                    }
                }

                if (type == 285 || type == 286 || type == 298 || type == 299 || type == 310 || type == 339 ||
                    (type >= 361 && type <= 364))
                {
                    if (!SolidTileAllowBottomSlope(k, num8) &&
                        (!Main.tile[k, num8].nactive() || !Main.tileSolidTop[Main.tile[k, num8].type] ||
                         Main.tile[k, num8].frameY != 0) &&
                        (!Main.tile[k, num8].active() || !TileID.Sets.Platforms[Main.tile[k, num8].type]))
                    {
                        flag = true;
                    }
                }
                else if (!SolidTileAllowBottomSlope(k, num8))
                {
                    flag = true;
                }
            }

            if (type == 187 && Main.tile[num5, num4].frameX >= 756 && Main.tile[num5, num4].frameX <= 900 &&
                Main.tile[num5, num4 + 2].type != 2 && Main.tile[num5 + 1, num4 + 2].type != 2 &&
                Main.tile[num5 + 2, num4 + 2].type != 2)
            {
                Main.tile[num5, num4].frameX -= 378;
                Main.tile[num5 + 1, num4].frameX -= 378;
                Main.tile[num5 + 2, num4].frameX -= 378;
                Main.tile[num5, num4 + 1].frameX -= 378;
                Main.tile[num5 + 1, num4 + 1].frameX -= 378;
                Main.tile[num5 + 2, num4 + 1].frameX -= 378;
                Main.tile[num5, num4].type = 186;
                Main.tile[num5 + 1, num4].type = 186;
                Main.tile[num5 + 2, num4].type = 186;
                Main.tile[num5, num4 + 1].type = 186;
                Main.tile[num5 + 1, num4 + 1].type = 186;
                Main.tile[num5 + 2, num4 + 1].type = 186;
            }

            if (flag)
            {
                int frameX = Main.tile[i, j].frameX;
                destroyObject = true;
                num8 = num4 + 3;
                if (flag2)
                {
                    num8--;
                }

                for (int m = num5; m < num5 + 3; m++)
                {
                    for (int n = num4; n < num4 + 3; n++)
                    {
                        if (Main.tile[m, n] == null)
                        {
                            Tile[,] tile3 = Main.tile;
                            int num11 = m;
                            int num12 = n;
                            Tile tile4 = new Tile();
                            tile3[num11, num12] = tile4;
                        }

                        if (Main.tile[m, n].type == type && Main.tile[m, n].active())
                        {
                            KillTile(m, n, false, false, false);
                        }
                    }
                }

                if (type == 14)
                {
                    int type2;
                    if (num6 >= 1 && num6 <= 3)
                    {
                        type2 = 637 + num6;
                    }
                    else if (num6 >= 15 && num6 <= 20)
                    {
                        type2 = 1698 + num6;
                    }
                    else if (num6 < 4 || num6 > 7)
                    {
                        switch (num6)
                        {
                            case 8:
                                type2 = 917;
                                break;
                            case 9:
                                type2 = 1144;
                                break;
                            case 10:
                                type2 = 1397;
                                break;
                            case 11:
                                type2 = 1400;
                                break;
                            case 12:
                                type2 = 1403;
                                break;
                            case 13:
                                type2 = 1460;
                                break;
                            case 14:
                                type2 = 1510;
                                break;
                            case 23:
                                type2 = 1926;
                                break;
                            case 21:
                                type2 = 1794;
                                break;
                            case 22:
                                type2 = 1816;
                                break;
                            case 24:
                                type2 = 2248;
                                break;
                            case 25:
                                type2 = 2259;
                                break;
                            case 26:
                                type2 = 2532;
                                break;
                            case 27:
                                type2 = 2550;
                                break;
                            case 28:
                                type2 = 677;
                                break;
                            case 29:
                                type2 = 2583;
                                break;
                            case 30:
                                type2 = 2743;
                                break;
                            case 31:
                                type2 = 2824;
                                break;
                            case 32:
                                type2 = 3153;
                                break;
                            case 33:
                                type2 = 3155;
                                break;
                            case 34:
                                type2 = 3154;
                                break;
                            default:
                                type2 = 32;
                                break;
                        }
                    }
                    else
                    {
                        type2 = 823 + num6;
                    }

                    Item.NewItem(i * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
                }

                switch (type)
                {
                    case 469:
                    {
                        int type6 = 3920;
                        Item.NewItem(i * 16, j * 16, 32, 32, type6, 1, false, 0, false, false);
                        break;
                    }
                    case 114:
                        Item.NewItem(i * 16, j * 16, 32, 32, 398, 1, false, 0, false, false);
                        break;
                    case 26:
                        if (!noTileActions && !IsGeneratingHardMode)
                        {
                            SmashAltar(i, j);
                        }

                        break;
                    case 298:
                        Item.NewItem(i * 16, j * 16, 32, 32, 2190, 1, false, 0, false, false);
                        break;
                    case 299:
                        Item.NewItem(i * 16, j * 16, 32, 32, 2191, 1, false, 0, false, false);
                        break;
                    case 361:
                    case 362:
                    case 363:
                    case 364:
                        Item.NewItem(i * 16, j * 16, 32, 32, 3073 + type - 361, 1, false, 0, false, false);
                        break;
                    default:
                        if (type < 391 || type > 394)
                        {
                            switch (type)
                            {
                                case 285:
                                    Item.NewItem(i * 16, j * 16, 32, 32, 2174, 1, false, 0, false, false);
                                    break;
                                case 286:
                                    Item.NewItem(i * 16, j * 16, 32, 32, 2175, 1, false, 0, false, false);
                                    break;
                                case 310:
                                    Item.NewItem(i * 16, j * 16, 32, 32, 2207, 1, false, 0, false, false);
                                    break;
                                case 339:
                                    Item.NewItem(i * 16, j * 16, 32, 32, 2741, 1, false, 0, false, false);
                                    break;
                                case 217:
                                    Item.NewItem(i * 16, j * 16, 32, 32, 995, 1, false, 0, false, false);
                                    break;
                                case 218:
                                    Item.NewItem(i * 16, j * 16, 32, 32, 996, 1, false, 0, false, false);
                                    break;
                                case 219:
                                    Item.NewItem(i * 16, j * 16, 32, 32, 997, 1, false, 0, false, false);
                                    break;
                                case 220:
                                    Item.NewItem(i * 16, j * 16, 32, 32, 998, 1, false, 0, false, false);
                                    break;
                                case 377:
                                    Item.NewItem(i * 16, j * 16, 32, 32, 3198, 1, false, 0, false, false);
                                    break;
                                case 228:
                                    Item.NewItem(i * 16, j * 16, 32, 32, 1120, 1, false, 0, false, false);
                                    break;
                                case 405:
                                    Item.NewItem(i * 16, j * 16, 32, 32, 3364, 1, false, 0, false, false);
                                    break;
                                case 215:
                                    switch (num6)
                                    {
                                        case 0:
                                            Item.NewItem(i * 16, j * 16, 32, 32, 966, 1, false, 0, false, false);
                                            break;
                                        case 6:
                                            Item.NewItem(i * 16, j * 16, 32, 32, 3723, 1, false, 0, false, false);
                                            break;
                                        case 7:
                                            Item.NewItem(i * 16, j * 16, 32, 32, 3724, 1, false, 0, false, false);
                                            break;
                                        default:
                                            Item.NewItem(i * 16, j * 16, 32, 32, 3046 + num6 - 1, 1, false, 0, false,
                                                false);
                                            break;
                                    }

                                    break;
                                case 244:
                                    Item.NewItem(i * 16, j * 16, 32, 32, 1449, 1, false, 0, false, false);
                                    break;
                                case 17:
                                    Item.NewItem(i * 16, j * 16, 32, 32, 33, 1, false, 0, false, false);
                                    break;
                                case 77:
                                    Item.NewItem(i * 16, j * 16, 32, 32, 221, 1, false, 0, false, false);
                                    break;
                                case 86:
                                    Item.NewItem(i * 16, j * 16, 32, 32, 332, 1, false, 0, false, false);
                                    break;
                                case 237:
                                    Item.NewItem(i * 16, j * 16, 32, 32, 1292, 1, false, 0, false, false);
                                    break;
                                case 87:
                                {
                                    int type3;
                                    if (num6 >= 1 && num6 <= 3)
                                    {
                                        type3 = 640 + num6;
                                    }
                                    else if (num6 == 4)
                                    {
                                        type3 = 919;
                                    }
                                    else if (num6 >= 5 && num6 <= 7)
                                    {
                                        type3 = 2245 + num6 - 5;
                                    }
                                    else if (num6 >= 8 && num6 <= 10)
                                    {
                                        type3 = 2254 + num6 - 8;
                                    }
                                    else if (num6 < 11 || num6 > 20)
                                    {
                                        switch (num6)
                                        {
                                            case 21:
                                                type3 = 2531;
                                                break;
                                            case 22:
                                                type3 = 2548;
                                                break;
                                            case 23:
                                                type3 = 2565;
                                                break;
                                            case 24:
                                                type3 = 2580;
                                                break;
                                            case 25:
                                                type3 = 2671;
                                                break;
                                            case 26:
                                                type3 = 2821;
                                                break;
                                            case 27:
                                                type3 = 3141;
                                                break;
                                            case 28:
                                                type3 = 3143;
                                                break;
                                            case 29:
                                                type3 = 3142;
                                                break;
                                            case 30:
                                                type3 = 3915;
                                                break;
                                            case 31:
                                                type3 = 3916;
                                                break;
                                            default:
                                                type3 = 333;
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        type3 = 2376 + num6 - 11;
                                    }

                                    Item.NewItem(i * 16, j * 16, 32, 32, type3, 1, false, 0, false, false);
                                    break;
                                }
                                case 88:
                                {
                                    int type5;
                                    if (num6 >= 1 && num6 <= 3)
                                    {
                                        type5 = 646 + num6;
                                    }
                                    else if (num6 == 4)
                                    {
                                        type5 = 918;
                                    }
                                    else if (num6 < 5 || num6 > 15)
                                    {
                                        switch (num6)
                                        {
                                            case 16:
                                                type5 = 2529;
                                                break;
                                            case 17:
                                                type5 = 2545;
                                                break;
                                            case 18:
                                                type5 = 2562;
                                                break;
                                            case 19:
                                                type5 = 2577;
                                                break;
                                            case 20:
                                                type5 = 2637;
                                                break;
                                            case 21:
                                                type5 = 2638;
                                                break;
                                            case 22:
                                                type5 = 2639;
                                                break;
                                            case 23:
                                                type5 = 2640;
                                                break;
                                            case 24:
                                                type5 = 2816;
                                                break;
                                            case 25:
                                                type5 = 3132;
                                                break;
                                            case 26:
                                                type5 = 3134;
                                                break;
                                            case 27:
                                                type5 = 3133;
                                                break;
                                            case 28:
                                                type5 = 3911;
                                                break;
                                            case 29:
                                                type5 = 3912;
                                                break;
                                            case 30:
                                                type5 = 3913;
                                                break;
                                            case 31:
                                                type5 = 3914;
                                                break;
                                            default:
                                                type5 = 334;
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        type5 = 2386 + num6 - 5;
                                    }

                                    Item.NewItem(i * 16, j * 16, 32, 32, type5, 1, false, 0, false, false);
                                    break;
                                }
                                case 89:
                                {
                                    int type4;
                                    if (num6 < 1 || num6 > 20)
                                    {
                                        switch (num6)
                                        {
                                            case 21:
                                                type4 = 2521;
                                                break;
                                            case 22:
                                                type4 = 2527;
                                                break;
                                            case 23:
                                                type4 = 2539;
                                                break;
                                            case 24:
                                                type4 = 858;
                                                break;
                                            case 25:
                                                type4 = 2582;
                                                break;
                                            case 26:
                                                type4 = 2634;
                                                break;
                                            case 27:
                                                type4 = 2635;
                                                break;
                                            case 28:
                                                type4 = 2636;
                                                break;
                                            case 29:
                                                type4 = 2823;
                                                break;
                                            case 30:
                                                type4 = 3150;
                                                break;
                                            case 31:
                                                type4 = 3152;
                                                break;
                                            case 32:
                                                type4 = 3151;
                                                break;
                                            case 33:
                                                type4 = 3918;
                                                break;
                                            case 34:
                                                type4 = 3919;
                                                break;
                                            default:
                                                type4 = 335;
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        type4 = 2397 + num6 - 1;
                                    }

                                    Item.NewItem(i * 16, j * 16, 32, 32, type4, 1, false, 0, false, false);
                                    break;
                                }
                                case 133:
                                    if (frameX >= 54)
                                    {
                                        Item.NewItem(i * 16, j * 16, 32, 32, 1221, 1, false, 0, false, false);
                                    }
                                    else
                                    {
                                        Item.NewItem(i * 16, j * 16, 32, 32, 524, 1, false, 0, false, false);
                                    }

                                    break;
                                case 186:
                                    if (frameX >= 864)
                                    {
                                        if (frameX <= 954)
                                        {
                                            Item.NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(20, 100), false, 0,
                                                false, false);
                                            Item.NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(30, 100), false, 0,
                                                false, false);
                                            Item.NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(40, 100), false, 0,
                                                false, false);
                                            if (genRand.Next(3) != 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(20, 100), false,
                                                    0, false, false);
                                            }

                                            if (genRand.Next(3) != 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(30, 100), false,
                                                    0, false, false);
                                            }

                                            if (genRand.Next(3) != 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(40, 100), false,
                                                    0, false, false);
                                            }

                                            if (genRand.Next(2) == 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(20, 100), false,
                                                    0, false, false);
                                            }

                                            if (genRand.Next(2) == 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(30, 100), false,
                                                    0, false, false);
                                            }

                                            if (genRand.Next(2) == 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(40, 100), false,
                                                    0, false, false);
                                            }

                                            if (genRand.Next(3) == 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(20, 100), false,
                                                    0, false, false);
                                            }

                                            if (genRand.Next(3) == 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(30, 100), false,
                                                    0, false, false);
                                            }

                                            if (genRand.Next(3) == 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(40, 100), false,
                                                    0, false, false);
                                            }

                                            if (genRand.Next(4) == 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(20, 100), false,
                                                    0, false, false);
                                            }

                                            if (genRand.Next(4) == 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(30, 100), false,
                                                    0, false, false);
                                            }

                                            if (genRand.Next(4) == 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(40, 100), false,
                                                    0, false, false);
                                            }

                                            if (genRand.Next(5) == 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(20, 100), false,
                                                    0, false, false);
                                            }

                                            if (genRand.Next(5) == 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(30, 100), false,
                                                    0, false, false);
                                            }

                                            if (genRand.Next(5) == 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 71, genRand.Next(40, 100), false,
                                                    0, false, false);
                                            }
                                        }
                                        else if (frameX <= 1062)
                                        {
                                            Item.NewItem(i * 16, j * 16, 32, 32, 72, genRand.Next(10, 100), false, 0,
                                                false, false);
                                            if (genRand.Next(2) == 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 72, genRand.Next(20, 100), false,
                                                    0, false, false);
                                            }

                                            if (genRand.Next(3) == 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 72, genRand.Next(30, 100), false,
                                                    0, false, false);
                                            }

                                            if (genRand.Next(4) == 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 72, genRand.Next(40, 100), false,
                                                    0, false, false);
                                            }

                                            if (genRand.Next(5) == 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 72, genRand.Next(50, 100), false,
                                                    0, false, false);
                                            }
                                        }
                                        else if (frameX <= 1170)
                                        {
                                            Item.NewItem(i * 16, j * 16, 32, 32, 73, genRand.Next(1, 7), false, 0,
                                                false, false);
                                            if (genRand.Next(2) == 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 73, genRand.Next(2, 7), false, 0,
                                                    false, false);
                                            }

                                            if (genRand.Next(3) == 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 73, genRand.Next(3, 7), false, 0,
                                                    false, false);
                                            }

                                            if (genRand.Next(4) == 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 73, genRand.Next(4, 7), false, 0,
                                                    false, false);
                                            }

                                            if (genRand.Next(5) == 0)
                                            {
                                                Item.NewItem(i * 16, j * 16, 32, 32, 73, genRand.Next(5, 7), false, 0,
                                                    false, false);
                                            }
                                        }
                                    }

                                    break;
                                case 187:
                                    if (frameX >= 918 && frameX <= 970)
                                    {
                                        if (Main.rand.Next(10) == 0)
                                        {
                                            Item.NewItem(i * 16, j * 16, 32, 32, 3368, 1, false, 0, false, false);
                                        }
                                        else
                                        {
                                            Item.NewItem(i * 16, j * 16, 32, 32, 989, 1, false, 0, false, false);
                                        }
                                    }

                                    break;
                            }
                        }
                        else
                        {
                            Item.NewItem(i * 16, j * 16, 48, 32, 3254 + type - 391, 1, false, 0, false, false);
                        }

                        break;
                }

                destroyObject = false;
                for (int num13 = num5 - 1; num13 < num5 + 4; num13++)
                {
                    for (int num14 = num4 - 1; num14 < num4 + 4; num14++)
                    {
                        TileFrame(num13, num14, false, false);
                    }
                }
            }
        }
    }

    public static void Check3x4(int i, int j, int type)
    {
        if (!destroyObject)
        {
            bool flag = false;
            int num = 0;
            int num2;
            for (num2 = Main.tile[i, j].frameX / 18; num2 >= 3; num2 -= 3)
            {
                num++;
            }

            int num3 = i - num2;
            int num4 = j + Main.tile[i, j].frameY / 18 * -1;
            for (int k = num3; k < num3 + 3; k++)
            {
                for (int l = num4; l < num4 + 4; l++)
                {
                    if (Main.tile[k, l] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num5 = k;
                        int num6 = l;
                        Tile tile2 = new Tile();
                        tile[num5, num6] = tile2;
                    }

                    if (!Main.tile[k, l].active() || Main.tile[k, l].type != type ||
                        Main.tile[k, l].frameX != num * 54 + (k - num3) * 18 ||
                        Main.tile[k, l].frameY != (l - num4) * 18)
                    {
                        flag = true;
                    }
                }

                if (Main.tile[k, num4 + 4] == null)
                {
                    Tile[,] tile3 = Main.tile;
                    int num7 = k;
                    int num8 = num4 + 4;
                    Tile tile4 = new Tile();
                    tile3[num7, num8] = tile4;
                }

                if (!SolidTileAllowBottomSlope(k, num4 + 4))
                {
                    flag = true;
                }
            }

            if (flag)
            {
                destroyObject = true;
                for (int m = num3; m < num3 + 3; m++)
                {
                    for (int n = num4; n < num4 + 4; n++)
                    {
                        if (Main.tile[m, n].type == type && Main.tile[m, n].active())
                        {
                            KillTile(m, n, false, false, false);
                        }
                    }
                }

                switch (type)
                {
                    case 101:
                    {
                        int type2;
                        switch (num)
                        {
                            case 1:
                                type2 = 1414;
                                break;
                            case 2:
                                type2 = 1415;
                                break;
                            case 3:
                                type2 = 1416;
                                break;
                            case 4:
                                type2 = 1463;
                                break;
                            case 5:
                                type2 = 1512;
                                break;
                            case 6:
                                type2 = 2020;
                                break;
                            case 7:
                                type2 = 2021;
                                break;
                            case 8:
                                type2 = 2022;
                                break;
                            case 9:
                                type2 = 2023;
                                break;
                            case 10:
                                type2 = 2024;
                                break;
                            case 11:
                                type2 = 2025;
                                break;
                            case 12:
                                type2 = 2026;
                                break;
                            case 13:
                                type2 = 2027;
                                break;
                            case 14:
                                type2 = 2028;
                                break;
                            case 15:
                                type2 = 2029;
                                break;
                            case 16:
                                type2 = 2030;
                                break;
                            case 17:
                                type2 = 2031;
                                break;
                            case 18:
                            case 19:
                            case 20:
                            case 21:
                                type2 = 2135 + num - 18;
                                break;
                            default:
                                switch (num)
                                {
                                    case 22:
                                        type2 = 2233;
                                        break;
                                    case 23:
                                        type2 = 2536;
                                        break;
                                    case 24:
                                        type2 = 2540;
                                        break;
                                    case 25:
                                        type2 = 2554;
                                        break;
                                    case 26:
                                        type2 = 2569;
                                        break;
                                    case 27:
                                        type2 = 2670;
                                        break;
                                    case 28:
                                        type2 = 2817;
                                        break;
                                    case 29:
                                        type2 = 3165;
                                        break;
                                    case 30:
                                        type2 = 3167;
                                        break;
                                    case 31:
                                        type2 = 3166;
                                        break;
                                    case 32:
                                        type2 = 3917;
                                        break;
                                    default:
                                        type2 = 354;
                                        break;
                                }

                                break;
                        }

                        Item.NewItem(i * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
                        break;
                    }
                    case 102:
                        Item.NewItem(i * 16, j * 16, 32, 32, 355, 1, false, 0, false, false);
                        break;
                    case 463:
                        Item.NewItem(i * 16, j * 16, 32, 32, 3813, 1, false, 0, false, false);
                        break;
                }

                destroyObject = false;
                for (int num9 = num3 - 1; num9 < num3 + 4; num9++)
                {
                    for (int num10 = num4 - 1; num10 < num4 + 4; num10++)
                    {
                        TileFrame(num9, num10, false, false);
                    }
                }
            }
        }
    }

    public static void Check5x4(int i, int j, int type)
    {
        if (!destroyObject)
        {
            bool flag = false;
            int num = 0;
            int num2;
            for (num2 = Main.tile[i, j].frameX / 18; num2 >= 5; num2 -= 5)
            {
                num++;
            }

            int num3 = i - num2;
            int num4 = j + Main.tile[i, j].frameY / 18 * -1;
            for (int k = num3; k < num3 + 5; k++)
            {
                for (int l = num4; l < num4 + 4; l++)
                {
                    if (Main.tile[k, l] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num5 = k;
                        int num6 = l;
                        Tile tile2 = new Tile();
                        tile[num5, num6] = tile2;
                    }

                    if (!Main.tile[k, l].active() || Main.tile[k, l].type != type ||
                        Main.tile[k, l].frameX != num * 90 + (k - num3) * 18 ||
                        Main.tile[k, l].frameY != (l - num4) * 18)
                    {
                        flag = true;
                    }
                }

                if (Main.tile[k, num4 + 4] == null)
                {
                    Tile[,] tile3 = Main.tile;
                    int num7 = k;
                    int num8 = num4 + 4;
                    Tile tile4 = new Tile();
                    tile3[num7, num8] = tile4;
                }

                if (!SolidTileAllowBottomSlope(k, num4 + 4))
                {
                    flag = true;
                }
            }

            if (flag)
            {
                destroyObject = true;
                for (int m = num3; m < num3 + 5; m++)
                {
                    for (int n = num4; n < num4 + 4; n++)
                    {
                        if (Main.tile[m, n].type == type && Main.tile[m, n].active())
                        {
                            KillTile(m, n, false, false, false);
                        }
                    }
                }

                if (type == 464)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 3814, 1, false, 0, false, false);
                }

                if (type == 466)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 3816, 1, false, 0, false, false);
                }

                destroyObject = false;
                for (int num9 = num3 - 1; num9 < num3 + 6; num9++)
                {
                    for (int num10 = num4 - 1; num10 < num4 + 5; num10++)
                    {
                        TileFrame(num9, num10, false, false);
                    }
                }
            }
        }
    }

    public static void Check6x3(int i, int j, int type)
    {
        if (!destroyObject)
        {
            bool flag = false;
            int num = i + Main.tile[i, j].frameX / 18 * -1;
            int num2 = j + Main.tile[i, j].frameY / 18 * -1;
            for (int k = num; k < num + 6; k++)
            {
                for (int l = num2; l < num2 + 3; l++)
                {
                    int num3 = (k - num) * 18;
                    if (Main.tile[k, l] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num4 = k;
                        int num5 = l;
                        Tile tile2 = new Tile();
                        tile[num4, num5] = tile2;
                    }

                    if (!Main.tile[k, l].active() || Main.tile[k, l].type != type || Main.tile[k, l].frameX != num3 ||
                        Main.tile[k, l].frameY != (l - num2) * 18)
                    {
                        flag = true;
                    }
                }

                if (Main.tile[k, num2 + 3] == null)
                {
                    Tile[,] tile3 = Main.tile;
                    int num6 = k;
                    int num7 = num2 + 3;
                    Tile tile4 = new Tile();
                    tile3[num6, num7] = tile4;
                }

                if (!SolidTileAllowBottomSlope(k, num2 + 3) &&
                    (!Main.tile[k, num2 + 3].nactive() || !Main.tileSolidTop[Main.tile[k, num2 + 3].type] ||
                     Main.tile[k, num2 + 3].frameY != 0))
                {
                    flag = true;
                }
            }

            if (flag)
            {
                destroyObject = true;
                for (int m = num; m < num + 6; m++)
                {
                    for (int n = num2; n < num2 + 3; n++)
                    {
                        if (Main.tile[m, n].type == type && Main.tile[m, n].active())
                        {
                            KillTile(m, n, false, false, false);
                        }
                    }
                }

                if (type == 275)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 2162, 1, false, 0, false, false);
                }

                if (type == 413)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 3565, 1, false, 0, false, false);
                }

                if (type == 414)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 3566, 1, false, 0, false, false);
                }

                if (type == 276)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 2163, 1, false, 0, false, false);
                }

                if (type == 277)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 2164, 1, false, 0, false, false);
                }

                if (type == 278)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 2165, 1, false, 0, false, false);
                }

                if (type == 279)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 2166, 1, false, 0, false, false);
                }

                if (type == 280)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 2167, 1, false, 0, false, false);
                }

                if (type == 281)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 2168, 1, false, 0, false, false);
                }

                if (type == 296)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 2186, 1, false, 0, false, false);
                }

                if (type == 297)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 2187, 1, false, 0, false, false);
                }

                if (type == 309)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 2206, 1, false, 0, false, false);
                }

                if (type == 358)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 3070, 1, false, 0, false, false);
                }

                if (type == 359)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 3071, 1, false, 0, false, false);
                }

                destroyObject = false;
                for (int num8 = num - 1; num8 < num + 7; num8++)
                {
                    for (int num9 = num2 - 1; num9 < num2 + 4; num9++)
                    {
                        TileFrame(num8, num9, false, false);
                    }
                }
            }
        }
    }

    public static void Place6x3(int x, int y, ushort type, int direction = -1, int style = 0)
    {
        if (x >= 5 && x <= Main.maxTilesX - 5 && y >= 5 && y <= Main.maxTilesY - 5)
        {
            bool flag = true;
            for (int i = x - 3; i < x + 3; i++)
            {
                for (int j = y - 2; j <= y; j++)
                {
                    if (Main.tile[i, j] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num = i;
                        int num2 = j;
                        Tile tile2 = new Tile();
                        tile[num, num2] = tile2;
                    }

                    if (Main.tile[i, j].active())
                    {
                        flag = false;
                    }
                }

                if (Main.tile[i, y + 1] == null)
                {
                    Tile[,] tile3 = Main.tile;
                    int num3 = i;
                    int num4 = y + 1;
                    Tile tile4 = new Tile();
                    tile3[num3, num4] = tile4;
                }

                if (!SolidTile2(i, y + 1) && (!Main.tile[i, y + 1].nactive() ||
                                              !Main.tileSolidTop[Main.tile[i, y + 1].type] ||
                                              Main.tile[i, y + 1].frameY != 0))
                {
                    flag = false;
                }
            }

            if (flag)
            {
                int num5 = 0;
                for (int k = x - 3; k < x + 3; k++)
                {
                    int num6 = 0;
                    for (int l = y - 2; l <= y; l++)
                    {
                        Main.tile[k, l].active(true);
                        Main.tile[k, l].frameY = (short) num6;
                        Main.tile[k, l].frameX = (short) num5;
                        Main.tile[k, l].type = type;
                        num6 += 18;
                    }

                    num5 += 18;
                }
            }
        }
    }

    public static void Place4x2(int x, int y, ushort type, int direction = -1, int style = 0)
    {
        if (x >= 5 && x <= Main.maxTilesX - 5 && y >= 5 && y <= Main.maxTilesY - 5)
        {
            bool flag = true;
            for (int i = x - 1; i < x + 3; i++)
            {
                for (int j = y - 1; j < y + 1; j++)
                {
                    if (Main.tile[i, j] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num = i;
                        int num2 = j;
                        Tile tile2 = new Tile();
                        tile[num, num2] = tile2;
                    }

                    if (Main.tile[i, j].active())
                    {
                        flag = false;
                    }
                }

                if (Main.tile[i, y + 1] == null)
                {
                    Tile[,] tile3 = Main.tile;
                    int num3 = i;
                    int num4 = y + 1;
                    Tile tile4 = new Tile();
                    tile3[num3, num4] = tile4;
                }

                if (!SolidTile2(i, y + 1))
                {
                    flag = false;
                }
            }

            short num5 = 0;
            if (direction == 1)
            {
                num5 = 72;
            }

            int num6 = 36 * style;
            if (flag)
            {
                Main.tile[x - 1, y - 1].active(true);
                Main.tile[x - 1, y - 1].frameY = (short) num6;
                Main.tile[x - 1, y - 1].frameX = num5;
                Main.tile[x - 1, y - 1].type = type;
                Main.tile[x, y - 1].active(true);
                Main.tile[x, y - 1].frameY = (short) num6;
                Main.tile[x, y - 1].frameX = (short) (18 + num5);
                Main.tile[x, y - 1].type = type;
                Main.tile[x + 1, y - 1].active(true);
                Main.tile[x + 1, y - 1].frameY = (short) num6;
                Main.tile[x + 1, y - 1].frameX = (short) (36 + num5);
                Main.tile[x + 1, y - 1].type = type;
                Main.tile[x + 2, y - 1].active(true);
                Main.tile[x + 2, y - 1].frameY = (short) num6;
                Main.tile[x + 2, y - 1].frameX = (short) (54 + num5);
                Main.tile[x + 2, y - 1].type = type;
                Main.tile[x - 1, y].active(true);
                Main.tile[x - 1, y].frameY = (short) (num6 + 18);
                Main.tile[x - 1, y].frameX = num5;
                Main.tile[x - 1, y].type = type;
                Main.tile[x, y].active(true);
                Main.tile[x, y].frameY = (short) (num6 + 18);
                Main.tile[x, y].frameX = (short) (18 + num5);
                Main.tile[x, y].type = type;
                Main.tile[x + 1, y].active(true);
                Main.tile[x + 1, y].frameY = (short) (num6 + 18);
                Main.tile[x + 1, y].frameX = (short) (36 + num5);
                Main.tile[x + 1, y].type = type;
                Main.tile[x + 2, y].active(true);
                Main.tile[x + 2, y].frameY = (short) (num6 + 18);
                Main.tile[x + 2, y].frameX = (short) (54 + num5);
                Main.tile[x + 2, y].type = type;
            }
        }
    }

    public static void ShootFromCannon(int x, int y, int angle, int ammo, int Damage, float KnockBack, int owner)
    {
        float num = 14f;
        float num2 = 0f;
        float num3 = 0f;
        int type = 162;
        if (ammo == 2)
        {
            type = 281;
        }

        if (ammo == 3)
        {
            type = 178;
        }

        if (ammo == 4)
        {
            type = 601;
            num = 3f;
        }

        if (ammo == 5)
        {
            type = 601;
            num = 3f;
        }

        int num4 = 0;
        if (ammo == 5)
        {
            num4 = 1;
        }

        if (angle == 0)
        {
            num2 = 10f;
            num3 = 0f;
        }

        if (angle == 1)
        {
            num2 = 7.5f;
            num3 = -2.5f;
        }

        if (angle == 2)
        {
            num2 = 5f;
            num3 = -5f;
        }

        if (angle == 3)
        {
            num2 = 2.75f;
            num3 = -6f;
        }

        if (angle == 4)
        {
            num2 = 0f;
            num3 = -10f;
        }

        if (angle == 5)
        {
            num2 = -2.75f;
            num3 = -6f;
        }

        if (angle == 6)
        {
            num2 = -5f;
            num3 = -5f;
        }

        if (angle == 7)
        {
            num2 = -7.5f;
            num3 = -2.5f;
        }

        if (angle == 8)
        {
            num2 = -10f;
            num3 = 0f;
        }

        Vector2 vector = new Vector2((float) ((x + 2) * 16), (float) ((y + 2) * 16));
        float num5 = num2;
        float num6 = num3;
        float num7 = (float) Math.Sqrt((double) (num5 * num5 + num6 * num6));
        if (ammo == 4 || ammo == 5)
        {
            if (angle == 4)
            {
                vector.X += 5f;
            }

            vector.Y += 5f;
        }

        num7 = num / num7;
        num5 *= num7;
        num6 *= num7;
        if (Main.myPlayer != owner && Main.netMode == 2 && (ammo == 4 || ammo == 5))
        {
            NetMessage.SendData(108, owner, -1, null, Damage, KnockBack, (float) x, (float) y, angle, ammo, owner);
        }
        else
        {
            if (Main.netMode == 2)
            {
                owner = Main.myPlayer;
            }

            Projectile.NewProjectile(vector.X, vector.Y, num5, num6, type, Damage, KnockBack, owner, (float) num4, 0f);
        }
    }

    public static void SwitchCannon(int i, int j)
    {
        int num;
        for (num = Main.tile[i, j].frameX / 18; num >= 4; num -= 4)
        {
        }

        int num2;
        for (num2 = Main.tile[i, j].frameY / 18; num2 >= 3; num2 -= 3)
        {
        }

        int num3 = 1;
        if (num < 2)
        {
            num3 = -1;
        }

        num = i - num;
        num2 = j - num2;
        if ((num3 != 1 || Main.tile[num, num2].frameY > 52) && (num3 != -1 || Main.tile[num, num2].frameY < 432))
        {
            num3 *= -54;
            for (int k = num; k < num + 4; k++)
            {
                for (int l = num2; l < num2 + 3; l++)
                {
                    if (Main.tile[k, l] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num4 = k;
                        int num5 = l;
                        Tile tile2 = new Tile();
                        tile[num4, num5] = tile2;
                    }

                    if (Main.tile[k, l].active() && Main.tile[k, l].type == 209)
                    {
                        Main.tile[k, l].frameY = (short) (Main.tile[k, l].frameY + num3);
                    }
                }
            }

            NetMessage.SendTileSquare(-1, num + 1, num2 + 1, 4, TileChangeType.None);
        }
    }

    public static void CheckCannon(int i, int j, int type)
    {
        if (!destroyObject)
        {
            bool flag = false;
            int num = Main.tile[i, j].frameX / 18;
            int num2 = 0;
            while (num >= 4)
            {
                num2++;
                num -= 4;
            }

            num = i - num;
            int num3 = Main.tile[i, j].frameY / 18;
            int num4 = 0;
            while (num3 >= 3)
            {
                num4 += 54;
                num3 -= 3;
            }

            num3 = j - num3;
            int num5 = 72 * num2;
            for (int k = num; k < num + 4; k++)
            {
                int num6 = num4;
                for (int l = num3; l < num3 + 3; l++)
                {
                    if (Main.tile[k, l] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num7 = k;
                        int num8 = l;
                        Tile tile2 = new Tile();
                        tile[num7, num8] = tile2;
                    }

                    if (!Main.tile[k, l].active() || Main.tile[k, l].type != type || Main.tile[k, l].frameX != num5 ||
                        Main.tile[k, l].frameY != num6)
                    {
                        flag = true;
                    }

                    num6 += 18;
                }

                if (Main.tile[k, num3 + 3] == null)
                {
                    Tile[,] tile3 = Main.tile;
                    int num9 = k;
                    int num10 = num3 + 3;
                    Tile tile4 = new Tile();
                    tile3[num9, num10] = tile4;
                }

                if (!SolidTileAllowBottomSlope(k, num3 + 3) && k != num && k != num + 3)
                {
                    flag = true;
                }

                num5 += 18;
            }

            if (flag)
            {
                destroyObject = true;
                for (int m = num; m < num + 4; m++)
                {
                    for (int n = num3; n < num3 + 3; n++)
                    {
                        if (Main.tile[m, n].type == type && Main.tile[m, n].active())
                        {
                            KillTile(m, n, false, false, false);
                        }
                    }
                }

                int type2 = 928;
                switch (num2)
                {
                    case 1:
                        type2 = 1337;
                        break;
                    case 2:
                        type2 = 3369;
                        break;
                    case 3:
                    case 4:
                        type2 = 3664;
                        break;
                }

                Item.NewItem(i * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
                destroyObject = false;
                for (int num11 = num; num11 < num + 4; num11++)
                {
                    for (int num12 = num3; num12 < num3 + 3; num12++)
                    {
                        TileFrame(num11, num12, false, false);
                    }
                }
            }
        }
    }

    public static void PlaceCannon(int x, int y, ushort type, int style = 0)
    {
        if (x >= 5 && x <= Main.maxTilesX - 5 && y >= 5 && y <= Main.maxTilesY - 5)
        {
            bool flag = true;
            for (int i = x - 1; i < x + 3; i++)
            {
                for (int j = y - 2; j < y + 1; j++)
                {
                    if (Main.tile[i, j] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num = i;
                        int num2 = j;
                        Tile tile2 = new Tile();
                        tile[num, num2] = tile2;
                    }

                    if (Main.tile[i, j].active())
                    {
                        flag = false;
                    }
                }

                if (Main.tile[i, y + 1] == null)
                {
                    Tile[,] tile3 = Main.tile;
                    int num3 = i;
                    int num4 = y + 1;
                    Tile tile4 = new Tile();
                    tile3[num3, num4] = tile4;
                }

                if (!SolidTile2(i, y + 1) && i != x - 1 && i != x + 2)
                {
                    flag = false;
                }
            }

            int num5 = 72 * style;
            int num6 = 0;
            if (flag)
            {
                Main.tile[x - 1, y - 2].active(true);
                Main.tile[x - 1, y - 2].frameY = (short) num6;
                Main.tile[x - 1, y - 2].frameX = (short) num5;
                Main.tile[x - 1, y - 2].type = type;
                Main.tile[x, y - 2].active(true);
                Main.tile[x, y - 2].frameY = (short) num6;
                Main.tile[x, y - 2].frameX = (short) (18 + num5);
                Main.tile[x, y - 2].type = type;
                Main.tile[x + 1, y - 2].active(true);
                Main.tile[x + 1, y - 2].frameY = (short) num6;
                Main.tile[x + 1, y - 2].frameX = (short) (36 + num5);
                Main.tile[x + 1, y - 2].type = type;
                Main.tile[x + 2, y - 2].active(true);
                Main.tile[x + 2, y - 2].frameY = (short) num6;
                Main.tile[x + 2, y - 2].frameX = (short) (54 + num5);
                Main.tile[x + 2, y - 2].type = type;
                Main.tile[x - 1, y - 1].active(true);
                Main.tile[x - 1, y - 1].frameY = (short) (num6 + 18);
                Main.tile[x - 1, y - 1].frameX = (short) num5;
                Main.tile[x - 1, y - 1].type = type;
                Main.tile[x, y - 1].active(true);
                Main.tile[x, y - 1].frameY = (short) (num6 + 18);
                Main.tile[x, y - 1].frameX = (short) (18 + num5);
                Main.tile[x, y - 1].type = type;
                Main.tile[x + 1, y - 1].active(true);
                Main.tile[x + 1, y - 1].frameY = (short) (num6 + 18);
                Main.tile[x + 1, y - 1].frameX = (short) (36 + num5);
                Main.tile[x + 1, y - 1].type = type;
                Main.tile[x + 2, y - 1].active(true);
                Main.tile[x + 2, y - 1].frameY = (short) (num6 + 18);
                Main.tile[x + 2, y - 1].frameX = (short) (54 + num5);
                Main.tile[x + 2, y - 1].type = type;
                Main.tile[x - 1, y].active(true);
                Main.tile[x - 1, y].frameY = (short) (num6 + 36);
                Main.tile[x - 1, y].frameX = (short) num5;
                Main.tile[x - 1, y].type = type;
                Main.tile[x, y].active(true);
                Main.tile[x, y].frameY = (short) (num6 + 36);
                Main.tile[x, y].frameX = (short) (18 + num5);
                Main.tile[x, y].type = type;
                Main.tile[x + 1, y].active(true);
                Main.tile[x + 1, y].frameY = (short) (num6 + 36);
                Main.tile[x + 1, y].frameX = (short) (36 + num5);
                Main.tile[x + 1, y].type = type;
                Main.tile[x + 2, y].active(true);
                Main.tile[x + 2, y].frameY = (short) (num6 + 36);
                Main.tile[x + 2, y].frameX = (short) (54 + num5);
                Main.tile[x + 2, y].type = type;
            }
        }
    }

    public static void SwitchMB(int i, int j)
    {
        int num;
        for (num = Main.tile[i, j].frameY / 18; num >= 2; num -= 2)
        {
        }

        int num2 = Main.tile[i, j].frameX / 18;
        if (num2 >= 2)
        {
            num2 -= 2;
        }

        int num3 = i - num2;
        int num4 = j - num;
        for (int k = num3; k < num3 + 2; k++)
        {
            for (int l = num4; l < num4 + 2; l++)
            {
                if (Main.tile[k, l] == null)
                {
                    Tile[,] tile = Main.tile;
                    int num5 = k;
                    int num6 = l;
                    Tile tile2 = new Tile();
                    tile[num5, num6] = tile2;
                }

                if (Main.tile[k, l].active() && (Main.tile[k, l].type == 139 || Main.tile[k, l].type == 35))
                {
                    if (Main.tile[k, l].frameX < 36)
                    {
                        Main.tile[k, l].frameX += 36;
                    }
                    else
                    {
                        Main.tile[k, l].frameX -= 36;
                    }
                }
            }
        }

        if (Wiring.running)
        {
            Wiring.SkipWire(num3, num4);
            Wiring.SkipWire(num3 + 1, num4);
            Wiring.SkipWire(num3, num4 + 1);
            Wiring.SkipWire(num3 + 1, num4 + 1);
        }

        NetMessage.SendTileSquare(-1, num3, num4, 3, TileChangeType.None);
    }

    public static void SwitchMonolith(int i, int j)
    {
        int num;
        for (num = Main.tile[i, j].frameX / 18; num >= 2; num -= 2)
        {
        }

        int num2 = Main.tile[i, j].frameY / 18;
        if (num2 >= 3)
        {
            num2 -= 3;
        }

        int num3 = i - num;
        int num4 = j - num2;
        for (int k = num3; k < num3 + 2; k++)
        {
            for (int l = num4; l < num4 + 3; l++)
            {
                if (Main.tile[k, l] == null)
                {
                    Tile[,] tile = Main.tile;
                    int num5 = k;
                    int num6 = l;
                    Tile tile2 = new Tile();
                    tile[num5, num6] = tile2;
                }

                if (Main.tile[k, l].active() && Main.tile[k, l].type == 410)
                {
                    if (Main.tile[k, l].frameY < 56)
                    {
                        Main.tile[k, l].frameY += 56;
                    }
                    else
                    {
                        Main.tile[k, l].frameY -= 56;
                    }
                }
            }
        }

        if (Wiring.running)
        {
            Wiring.SkipWire(num3, num4);
            Wiring.SkipWire(num3, num4 + 1);
            Wiring.SkipWire(num3, num4 + 2);
            Wiring.SkipWire(num3 + 1, num4);
            Wiring.SkipWire(num3 + 1, num4 + 1);
            Wiring.SkipWire(num3 + 1, num4 + 2);
        }

        NetMessage.SendTileSquare(-1, num3, num4 + 1, 3, TileChangeType.None);
    }

    public static void SwitchFountain(int i, int j)
    {
        int num;
        for (num = Main.tile[i, j].frameX / 18; num >= 2; num -= 2)
        {
        }

        int num2 = Main.tile[i, j].frameY / 18;
        if (num2 >= 4)
        {
            num2 -= 4;
        }

        int num3 = i - num;
        int num4 = j - num2;
        for (int k = num3; k < num3 + 2; k++)
        {
            for (int l = num4; l < num4 + 4; l++)
            {
                if (Main.tile[k, l] == null)
                {
                    Tile[,] tile = Main.tile;
                    int num5 = k;
                    int num6 = l;
                    Tile tile2 = new Tile();
                    tile[num5, num6] = tile2;
                }

                if (Main.tile[k, l].active() && Main.tile[k, l].type == 207)
                {
                    if (Main.tile[k, l].frameY < 72)
                    {
                        Main.tile[k, l].frameY += 72;
                    }
                    else
                    {
                        Main.tile[k, l].frameY -= 72;
                    }
                }
            }
        }

        if (Wiring.running)
        {
            Wiring.SkipWire(num3, num4);
            Wiring.SkipWire(num3, num4 + 1);
            Wiring.SkipWire(num3, num4 + 2);
            Wiring.SkipWire(num3, num4 + 3);
            Wiring.SkipWire(num3 + 1, num4);
            Wiring.SkipWire(num3 + 1, num4 + 1);
            Wiring.SkipWire(num3 + 1, num4 + 2);
            Wiring.SkipWire(num3 + 1, num4 + 3);
        }

        NetMessage.SendTileSquare(-1, num3, num4 + 1, 4, TileChangeType.None);
    }

    public static void CheckMB(int i, int j, int type)
    {
        if (!destroyObject)
        {
            bool flag = false;
            int num = 0;
            int num2;
            for (num2 = Main.tile[i, j].frameY / 18; num2 >= 2; num2 -= 2)
            {
                num++;
            }

            int num3 = Main.tile[i, j].frameX / 18;
            int num4 = 0;
            if (num3 >= 2)
            {
                num3 -= 2;
                num4++;
            }

            int num5 = i - num3;
            int num6 = j - num2;
            for (int k = num5; k < num5 + 2; k++)
            {
                for (int l = num6; l < num6 + 2; l++)
                {
                    if (Main.tile[k, l] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num7 = k;
                        int num8 = l;
                        Tile tile2 = new Tile();
                        tile[num7, num8] = tile2;
                    }

                    if (!Main.tile[k, l].active() || Main.tile[k, l].type != type ||
                        Main.tile[k, l].frameX != (k - num5) * 18 + num4 * 36 ||
                        Main.tile[k, l].frameY != (l - num6) * 18 + num * 36)
                    {
                        flag = true;
                    }
                }

                if (!Main.tile[k, num6 + 2].nactive())
                {
                    flag = true;
                }
                else if (!Main.tileSolid[Main.tile[k, num6 + 2].type] && !Main.tileTable[Main.tile[k, num6 + 2].type])
                {
                    flag = true;
                }
            }

            if (flag)
            {
                destroyObject = true;
                for (int m = num5; m < num5 + 2; m++)
                {
                    for (int n = num6; n < num6 + 3; n++)
                    {
                        if (Main.tile[m, n].type == type && Main.tile[m, n].active())
                        {
                            KillTile(m, n, false, false, false);
                        }
                    }
                }

                if (type == 35)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 1813, 1, false, 0, false, false);
                }
                else if (num == 28)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 1963, 1, false, 0, false, false);
                }
                else if (num == 29)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 1964, 1, false, 0, false, false);
                }
                else if (num == 30)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 1965, 1, false, 0, false, false);
                }
                else if (num == 31)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 2742, 1, false, 0, false, false);
                }
                else if (num == 32)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 3044, 1, false, 0, false, false);
                }
                else if (num == 33)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 3235, 1, false, 0, false, false);
                }
                else if (num == 34)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 3236, 1, false, 0, false, false);
                }
                else if (num == 35)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 3237, 1, false, 0, false, false);
                }
                else if (num == 36)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 3370, 1, false, 0, false, false);
                }
                else if (num == 37)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 3371, 1, false, 0, false, false);
                }
                else if (num == 38)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 3796, 1, false, 0, false, false);
                }
                else if (num == 39)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 3869, 1, false, 0, false, false);
                }
                else if (num >= 13)
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 1596 + num - 13, 1, false, 0, false, false);
                }
                else
                {
                    Item.NewItem(i * 16, j * 16, 32, 32, 562 + num, 1, false, 0, false, false);
                }

                for (int num9 = num5 - 1; num9 < num5 + 3; num9++)
                {
                    for (int num10 = num6 - 1; num10 < num6 + 3; num10++)
                    {
                        TileFrame(num9, num10, false, false);
                    }
                }

                destroyObject = false;
            }
        }
    }

    public static void PlaceMB(int X, int y, ushort type, int style)
    {
        int num = X + 1;
        if (num >= 5 && num <= Main.maxTilesX - 5 && y >= 5 && y <= Main.maxTilesY - 5)
        {
            bool flag = true;
            for (int i = num - 1; i < num + 1; i++)
            {
                for (int j = y - 1; j < y + 1; j++)
                {
                    if (Main.tile[i, j] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num2 = i;
                        int num3 = j;
                        Tile tile2 = new Tile();
                        tile[num2, num3] = tile2;
                    }

                    if (Main.tile[i, j].active())
                    {
                        flag = false;
                    }
                }

                if (Main.tile[i, y + 1] == null)
                {
                    Tile[,] tile3 = Main.tile;
                    int num4 = i;
                    int num5 = y + 1;
                    Tile tile4 = new Tile();
                    tile3[num4, num5] = tile4;
                }

                if (!Main.tile[i, y + 1].active() || Main.tile[i, y + 1].halfBrick() ||
                    (!Main.tileSolid[Main.tile[i, y + 1].type] && !Main.tileTable[Main.tile[i, y + 1].type]))
                {
                    flag = false;
                }
            }

            if (flag)
            {
                Main.tile[num - 1, y - 1].active(true);
                Main.tile[num - 1, y - 1].frameY = (short) (style * 36);
                Main.tile[num - 1, y - 1].frameX = 0;
                Main.tile[num - 1, y - 1].type = type;
                Main.tile[num, y - 1].active(true);
                Main.tile[num, y - 1].frameY = (short) (style * 36);
                Main.tile[num, y - 1].frameX = 18;
                Main.tile[num, y - 1].type = type;
                Main.tile[num - 1, y].active(true);
                Main.tile[num - 1, y].frameY = (short) (style * 36 + 18);
                Main.tile[num - 1, y].frameX = 0;
                Main.tile[num - 1, y].type = type;
                Main.tile[num, y].active(true);
                Main.tile[num, y].frameY = (short) (style * 36 + 18);
                Main.tile[num, y].frameX = 18;
                Main.tile[num, y].type = type;
            }
        }
    }

    public static void Place2x2(int x, int y, ushort type, int style)
    {
        if (type == 95 || type == 126)
        {
            y++;
        }

        if (x >= 5 && x <= Main.maxTilesX - 5 && y >= 5 && y <= Main.maxTilesY - 5)
        {
            if (type == 172)
            {
                if (!CanPlaceSink(x, y, type, style))
                {
                    return;
                }
            }
            else
            {
                for (int i = x - 1; i < x + 1; i++)
                {
                    for (int j = y - 1; j < y + 1; j++)
                    {
                        Tile tileSafely = Framing.GetTileSafely(i, j);
                        if (tileSafely.active() || (type == 98 && tileSafely.liquid > 0))
                        {
                            return;
                        }
                    }

                    switch (type)
                    {
                        case 95:
                        case 126:
                        {
                            Tile tileSafely = Framing.GetTileSafely(i, y - 2);
                            if (!tileSafely.nactive() || !Main.tileSolid[tileSafely.type] ||
                                Main.tileSolidTop[tileSafely.type])
                            {
                                return;
                            }

                            break;
                        }
                        default:
                        {
                            Tile tileSafely = Framing.GetTileSafely(i, y + 1);
                            if (!tileSafely.nactive() || (!SolidTile2(tileSafely) && !Main.tileTable[tileSafely.type]))
                            {
                                return;
                            }

                            break;
                        }
                        case 132:
                            break;
                    }
                }
            }

            if (type == 132)
            {
                bool flag = true;
                if (Main.tile[x - 1, y + 1] == null)
                {
                    Tile[,] tile = Main.tile;
                    int num = x - 1;
                    int num2 = y + 1;
                    Tile tile2 = new Tile();
                    tile[num, num2] = tile2;
                }

                if (Main.tile[x, y + 1] == null)
                {
                    Tile[,] tile3 = Main.tile;
                    int num3 = x;
                    int num4 = y + 1;
                    Tile tile4 = new Tile();
                    tile3[num3, num4] = tile4;
                }

                if (!Main.tile[x - 1, y + 1].nactive() ||
                    (!SolidTile2(x - 1, y + 1) && !Main.tileTable[Main.tile[x - 1, y + 1].type]))
                {
                    flag = false;
                }

                if (!Main.tile[x, y + 1].nactive() ||
                    (!SolidTile2(x, y + 1) && !Main.tileTable[Main.tile[x, y + 1].type]))
                {
                    flag = false;
                }

                if (!flag && (Main.tile[x - 1, y - 1].wall < 1 || Main.tile[x, y - 1].wall < 1 ||
                              Main.tile[x - 1, y].wall < 1 || Main.tile[x - 1, y].wall < 1))
                {
                    return;
                }
            }

            x--;
            y--;
            int num5 = (type == 172) ? 38 : 36;
            for (int k = 0; k < 2; k++)
            {
                for (int l = 0; l < 2; l++)
                {
                    Tile tileSafely = Main.tile[x + k, y + l];
                    tileSafely.active(true);
                    tileSafely.frameX = (short) (k * 18);
                    tileSafely.frameY = (short) (style * num5 + l * 18);
                    tileSafely.type = type;
                }
            }
        }
    }

    public static bool PlaceObject(int x, int y, int type, bool mute = false, int style = 0, int alternate = 0,
        int random = -1, int direction = -1)
    {
        if (type >= 470)
        {
            return false;
        }

        if (!TileObject.CanPlace(x, y, type, style, direction, out TileObject objectData, false))
        {
            return false;
        }

        objectData.random = random;
        if (TileObject.Place(objectData) && !mute)
        {
            SquareTileFrame(x, y, true);
            Main.PlaySound(0, x * 16, y * 16, 1, 1f, 0f);
        }

        return false;
    }

    public static bool ShiftTrapdoor(int x, int y, bool playerAbove, int onlyCloseOrOpen = -1)
    {
        Tile tileSafely = Framing.GetTileSafely(x, y);
        if (tileSafely.type == 386 && onlyCloseOrOpen != 1)
        {
            Point topLeftAndStyles = GetTopLeftAndStyles(ref x, ref y, 2, 2, 18, 18);
            if (topLeftAndStyles.X == 0)
            {
                if (Main.netMode != 1 && Wiring.running)
                {
                    Wiring.SkipWire(x, y);
                    Wiring.SkipWire(x, y + 1);
                    Wiring.SkipWire(x + 1, y);
                    Wiring.SkipWire(x + 1, y + 1);
                }

                if (!Collision.EmptyTile(x, y + 1, true) || !Collision.EmptyTile(x + 1, y + 1, true))
                {
                    return false;
                }

                Main.PlaySound(8, x * 16 + 16, y * 16 + 16, 1, 1f, 0f);
                for (int i = 0; i < 2; i++)
                {
                    tileSafely = Framing.GetTileSafely(x + i, y);
                    tileSafely.ClearTile();
                }

                for (int j = 0; j < 2; j++)
                {
                    tileSafely = Framing.GetTileSafely(x + j, y + 1);
                    tileSafely.type = 387;
                    tileSafely.frameX = (short) (j * 18);
                    tileSafely.frameY = (short) (topLeftAndStyles.Y * 18);
                }

                for (int k = -1; k < 3; k++)
                {
                    for (int l = 0; l < 3; l++)
                    {
                        TileFrame(x + k, y + l, false, false);
                    }
                }

                return true;
            }

            if (topLeftAndStyles.X == 1)
            {
                if (Main.netMode != 1 && Wiring.running)
                {
                    Wiring.SkipWire(x, y - 1);
                    Wiring.SkipWire(x, y);
                    Wiring.SkipWire(x + 1, y - 1);
                    Wiring.SkipWire(x + 1, y);
                }

                if (!Collision.EmptyTile(x, y, true) || !Collision.EmptyTile(x + 1, y, true))
                {
                    return false;
                }

                Main.PlaySound(8, x * 16 + 16, y * 16, 1, 1f, 0f);
                for (int m = 0; m < 2; m++)
                {
                    tileSafely = Framing.GetTileSafely(x + m, y + 1);
                    tileSafely.ClearTile();
                }

                for (int n = 0; n < 2; n++)
                {
                    tileSafely = Framing.GetTileSafely(x + n, y);
                    tileSafely.type = 387;
                    tileSafely.frameX = (short) (n * 18);
                    tileSafely.frameY = (short) (topLeftAndStyles.Y * 18);
                }

                for (int num = -1; num < 3; num++)
                {
                    for (int num2 = -1; num2 < 2; num2++)
                    {
                        TileFrame(x + num, y + num2, false, false);
                    }
                }

                return true;
            }
        }

        if (tileSafely.type == 387 && onlyCloseOrOpen != 0)
        {
            GetTopLeftAndStyles(ref x, ref y, 2, 1, 18, 18);
            int num3 = playerAbove.ToDirectionInt();
            for (int num4 = 0; num4 < 2; num4++)
            {
                tileSafely = Framing.GetTileSafely(x + num4, y + num3);
                if (tileSafely.active() && !Main.tileCut[tileSafely.type])
                {
                    return false;
                }
            }

            if (Main.netMode != 1 && Wiring.running)
            {
                Wiring.SkipWire(x, y);
                Wiring.SkipWire(x, y + num3);
                Wiring.SkipWire(x + 1, y);
                Wiring.SkipWire(x + 1, y + num3);
            }

            Main.PlaySound(8, x * 16 + 16, y * 16, 1, 1f, 0f);
            for (int num5 = 0; num5 < 2; num5++)
            {
                tileSafely = Framing.GetTileSafely(x + num5, y + num3);
                if (tileSafely.active() && Main.tileCut[tileSafely.type])
                {
                    KillTile(x + num5, y + num3, false, false, false);
                }
            }

            for (int num6 = 0; num6 < 2; num6++)
            {
                tileSafely = Framing.GetTileSafely(x + num6, y);
                byte color = tileSafely.color();
                for (int num7 = 0; num7 < 2; num7++)
                {
                    tileSafely = Framing.GetTileSafely(x + num6, y + num7 - (!playerAbove).ToInt());
                    tileSafely.type = 386;
                    tileSafely.frameX = (short) (num6 * 18 + playerAbove.ToInt() * 36);
                    tileSafely.frameY = (short) (num7 * 18);
                    tileSafely.color(color);
                    tileSafely.active(true);
                }
            }

            for (int num8 = -1; num8 < 3; num8++)
            {
                for (int num9 = -1; num9 < 3; num9++)
                {
                    TileFrame(x + num8, y + num9 - (!playerAbove).ToInt() * 2, false, false);
                }
            }

            return true;
        }

        Main.PlaySound(9, x * 16, y * 16, 1, 1f, 0f);
        return false;
    }

    public static void CheckTrapDoor(int x, int y, int type)
    {
        if (!destroyObject)
        {
            bool flag = false;
            int num = 0;
            int num2 = 0;
            Point point = default(Point);
            if (type == 387)
            {
                num = 2;
                num2 = 1;
                point = GetTopLeftAndStyles(ref x, ref y, num, num2, 18, 18);
                flag = (flag || !CheckTileFrames(type, x, y, num, num2, point.X, 18, point.Y, 18) ||
                        !CheckTileAnchors(x, y, num, num2, 1, AnchorType.SolidTile));
            }

            if (type == 386)
            {
                num = 2;
                num2 = 2;
                point = GetTopLeftAndStyles(ref x, ref y, num, num2, 18, 18);
                flag = (flag || !CheckTileFrames(type, x, y, num, num2, point.X, 18, point.Y, 18));
                if (point.X == 0)
                {
                    flag = (flag || !CheckTileAnchors(x, y + 1, num, 1, 1, AnchorType.SolidTile));
                }
                else if (point.X == 1)
                {
                    flag = (flag || !CheckTileAnchors(x, y, num, 1, 1, AnchorType.SolidTile));
                }
            }

            if (flag)
            {
                destroyObject = true;
                for (int i = x; i < x + num; i++)
                {
                    for (int j = y; j < y + num2; j++)
                    {
                        KillTile(i, j, false, false, false);
                    }
                }

                int type2 = 3239;
                if (point.Y == 0)
                {
                    type2 = 3239;
                }

                Item.NewItem(x * 16, y * 16, num * 16, num2 * 16, type2, 1, false, 0, false, false);
                for (int k = x - 1; k < x + num + 1; k++)
                {
                    for (int l = y - 1; l < y + num2 + 1; l++)
                    {
                        TileFrame(k, l, false, false);
                    }
                }

                destroyObject = false;
            }
        }
    }

    public static void CheckTallGate(int x, int y, int type)
    {
        if (!destroyObject)
        {
            bool flag = false;
            Tile tileSafely = Framing.GetTileSafely(x, y);
            Point point = new Point(tileSafely.frameX / 18, 0);
            TileObjectData tileData = TileObjectData.GetTileData(type, point.X, 0);
            point.Y = tileSafely.frameY / tileData.CoordinateFullHeight;
            int width = tileData.Width;
            int height = tileData.Height;
            int i = 0;
            for (int num = tileSafely.frameY % tileData.CoordinateFullHeight;
                i < height && num - tileData.CoordinateHeights[i] >= 0;
                i++)
            {
                num -= tileData.CoordinateHeights[i];
            }

            int coordinateFullHeight = tileData.CoordinateFullHeight;
            y -= i;
            int num2 = point.Y * tileData.CoordinateFullHeight;
            for (int j = 0; j < height; j++)
            {
                tileSafely = Framing.GetTileSafely(x, y + j);
                if (tileSafely.frameX != point.X * tileData.CoordinateFullWidth || tileSafely.frameY != num2)
                {
                    flag = true;
                    break;
                }

                num2 += tileData.CoordinateHeights[j] + tileData.CoordinatePadding;
            }

            if (flag || !CheckTileAnchors(x, y, width, height, 2, AnchorType.SolidTile))
            {
                destroyObject = true;
                for (int k = x; k < x + width; k++)
                {
                    for (int l = y; l < y + height; l++)
                    {
                        KillTile(k, l, false, false, false);
                    }
                }

                int type2 = 3240;
                if (point.Y == 0)
                {
                    type2 = 3240;
                }

                Item.NewItem(x * 16, y * 16, width * 16, height * 16, type2, 1, false, 0, false, false);
                for (int m = x - 1; m < x + width + 1; m++)
                {
                    for (int n = y - 1; n < y + height + 1; n++)
                    {
                        TileFrame(m, n, false, false);
                    }
                }

                destroyObject = false;
            }
        }
    }

    public static bool ShiftTallGate(int x, int y, bool closing)
    {
        ushort type = (ushort) (closing ? 388 : 389);
        ushort num = (ushort) (closing ? 389 : 388);
        Tile tileSafely = Framing.GetTileSafely(x, y);
        if (tileSafely.type != num)
        {
            return false;
        }

        Point point = new Point(tileSafely.frameX / 18, 0);
        TileObjectData tileData = TileObjectData.GetTileData(388, point.X, 0);
        point.Y = tileSafely.frameY / tileData.CoordinateFullHeight;
        int width = tileData.Width;
        int height = tileData.Height;
        int i = 0;
        for (int num2 = tileSafely.frameY % tileData.CoordinateFullHeight;
            i < height && num2 - tileData.CoordinateHeights[i] >= 0;
            i++)
        {
            num2 -= tileData.CoordinateHeights[i];
        }

        int coordinateFullHeight = tileData.CoordinateFullHeight;
        y -= i;
        if (Main.netMode != 1 && Wiring.running)
        {
            for (int j = 0; j < height; j++)
            {
                Wiring.SkipWire(x, y + j);
            }
        }

        for (int k = 0; k < height; k++)
        {
            if (!Collision.EmptyTile(x, y + k, true))
            {
                return false;
            }
        }

        Main.PlaySound(8, x * 16 + 16, y * 16 + 16, 1, 1f, 0f);
        for (int l = 0; l < height; l++)
        {
            tileSafely = Framing.GetTileSafely(x, y + l);
            tileSafely.type = type;
        }

        for (int m = -1; m < 2; m++)
        {
            for (int n = -1; n < height + 1; n++)
            {
                TileFrame(x + m, y + n, false, false);
            }
        }

        return true;
    }

    public static Point GetTopLeftAndStyles(ref int x, ref int y, int w, int h, int frameXinc, int frameYinc)
    {
        Tile tileSafely = Framing.GetTileSafely(x, y);
        Point result = new Point(tileSafely.frameX / (w * frameXinc), tileSafely.frameY / (h * frameYinc));
        if (frameXinc != 0)
        {
            x -= tileSafely.frameX / frameXinc % w;
        }

        if (frameYinc != 0)
        {
            y -= tileSafely.frameY / frameYinc % h;
        }

        return result;
    }

    public static bool CheckTileFrames(int type, int sx, int sy, int w, int h, int styleX, int frameXinc, int styleY,
        int frameYinc)
    {
        for (int i = 0; i < w; i++)
        {
            for (int j = 0; j < h; j++)
            {
                Tile tileSafely = Framing.GetTileSafely(sx + i, sy + j);
                if (!tileSafely.active() || tileSafely.type != type ||
                    tileSafely.frameX != styleX * w * frameXinc + i * frameXinc ||
                    tileSafely.frameY != styleY * h * frameYinc + j * frameYinc)
                {
                    return false;
                }
            }
        }

        return true;
    }

    public static bool CheckTileAnchors(int sx, int sy, int w, int h, int mode, AnchorType anchor)
    {
        if ((mode & 1) == 1)
        {
            for (int i = sy; i < sy + h; i++)
            {
                if (!AnchorValid(Framing.GetTileSafely(sx - 1, i), anchor))
                {
                    return false;
                }

                if (!AnchorValid(Framing.GetTileSafely(sx + w, i), anchor))
                {
                    return false;
                }
            }
        }

        if ((mode & 2) == 2)
        {
            for (int j = sx; j < sx + w; j++)
            {
                if (!AnchorValid(Framing.GetTileSafely(j, sy - 1), anchor))
                {
                    return false;
                }

                if (!AnchorValid(Framing.GetTileSafely(j, sy + h), anchor))
                {
                    return false;
                }
            }
        }

        return true;
    }

    public static bool AnchorValid(Tile tileCache, AnchorType anchor)
    {
        bool flag = false;
        if (tileCache.nactive())
        {
            if ((anchor & AnchorType.SolidTile) == AnchorType.SolidTile && Main.tileSolid[tileCache.type] &&
                !Main.tileSolidTop[tileCache.type] && !Main.tileNoAttach[tileCache.type] && tileCache.blockType() == 0)
            {
                flag = true;
            }

            if ((anchor & AnchorType.SolidBottom) == AnchorType.SolidBottom &&
                ((Main.tileSolid[tileCache.type] && (!Main.tileSolidTop[tileCache.type] ||
                                                     (TileID.Sets.Platforms[tileCache.type] &&
                                                      (tileCache.halfBrick() || tileCache.topSlope())))) ||
                 tileCache.topSlope() || tileCache.halfBrick()) && !TileID.Sets.NotReallySolid[tileCache.type] &&
                !tileCache.bottomSlope())
            {
                flag = true;
            }

            if (!flag && ((anchor & AnchorType.SolidWithTop) == AnchorType.SolidWithTop ||
                          (anchor & AnchorType.Table) == AnchorType.Table))
            {
                if (TileID.Sets.Platforms[tileCache.type])
                {
                    int num = tileCache.frameX / TileObjectData.PlatformFrameWidth();
                    if ((!tileCache.halfBrick() && num >= 0 && num <= 7) || (num >= 12 && num <= 16) ||
                        (num >= 25 && num <= 26))
                    {
                        flag = true;
                    }
                }
                else if (Main.tileSolid[tileCache.type] && Main.tileSolidTop[tileCache.type])
                {
                    flag = true;
                }
            }

            if (!flag && (anchor & AnchorType.Table) == AnchorType.Table && !TileID.Sets.Platforms[tileCache.type] &&
                Main.tileTable[tileCache.type] && tileCache.blockType() == 0)
            {
                flag = true;
            }

            if (!flag && (anchor & AnchorType.SolidSide) == AnchorType.SolidSide && Main.tileSolid[tileCache.type] &&
                !Main.tileSolidTop[tileCache.type])
            {
                switch (tileCache.blockType())
                {
                    case 4:
                    case 5:
                        flag = true;
                        break;
                }
            }
        }
        else if (!flag && (anchor & AnchorType.EmptyTile) == AnchorType.EmptyTile)
        {
            flag = true;
        }

        return flag;
    }

    public static bool CanPlaceSink(int x, int y, ushort type, int style)
    {
        if (x < 5 || x > Main.maxTilesX - 5 || y < 5 || y > Main.maxTilesY - 5)
        {
            return false;
        }

        bool result = true;
        x--;
        y--;
        for (int i = 0; i < 2; i++)
        {
            Tile tileSafely;
            for (int j = 0; j < 2; j++)
            {
                tileSafely = Framing.GetTileSafely(x + i, y + j);
                if (tileSafely.active())
                {
                    result = false;
                }
            }

            tileSafely = Framing.GetTileSafely(x + i, y + 2);
            if (!tileSafely.nactive() || !SolidTile(tileSafely))
            {
                result = false;
            }
        }

        return result;
    }

    public static void Place3x4(int x, int y, ushort type, int style)
    {
        if (x >= 5 && x <= Main.maxTilesX - 5 && y >= 5 && y <= Main.maxTilesY - 5)
        {
            bool flag = true;
            for (int i = x - 1; i < x + 2; i++)
            {
                for (int j = y - 3; j < y + 1; j++)
                {
                    if (Main.tile[i, j] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num = i;
                        int num2 = j;
                        Tile tile2 = new Tile();
                        tile[num, num2] = tile2;
                    }

                    if (Main.tile[i, j].active())
                    {
                        flag = false;
                    }
                }

                if (Main.tile[i, y + 1] == null)
                {
                    Tile[,] tile3 = Main.tile;
                    int num3 = i;
                    int num4 = y + 1;
                    Tile tile4 = new Tile();
                    tile3[num3, num4] = tile4;
                }

                if (!SolidTile2(i, y + 1))
                {
                    flag = false;
                }
            }

            if (flag)
            {
                int num5 = style * 54;
                for (int k = -3; k <= 0; k++)
                {
                    short frameY = (short) ((3 + k) * 18);
                    Main.tile[x - 1, y + k].active(true);
                    Main.tile[x - 1, y + k].frameY = frameY;
                    Main.tile[x - 1, y + k].frameX = (short) num5;
                    Main.tile[x - 1, y + k].type = type;
                    Main.tile[x, y + k].active(true);
                    Main.tile[x, y + k].frameY = frameY;
                    Main.tile[x, y + k].frameX = (short) (num5 + 18);
                    Main.tile[x, y + k].type = type;
                    Main.tile[x + 1, y + k].active(true);
                    Main.tile[x + 1, y + k].frameY = frameY;
                    Main.tile[x + 1, y + k].frameX = (short) (num5 + 36);
                    Main.tile[x + 1, y + k].type = type;
                }
            }
        }
    }

    public static void Place5x4(int x, int y, ushort type, int style)
    {
        if (x >= 5 && x <= Main.maxTilesX - 5 && y >= 5 && y <= Main.maxTilesY - 5)
        {
            bool flag = true;
            for (int i = x - 2; i < x + 3; i++)
            {
                for (int j = y - 3; j < y + 1; j++)
                {
                    if (Main.tile[i, j] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num = i;
                        int num2 = j;
                        Tile tile2 = new Tile();
                        tile[num, num2] = tile2;
                    }

                    if (Main.tile[i, j].active())
                    {
                        flag = false;
                    }
                }

                if (Main.tile[i, y + 1] == null)
                {
                    Tile[,] tile3 = Main.tile;
                    int num3 = i;
                    int num4 = y + 1;
                    Tile tile4 = new Tile();
                    tile3[num3, num4] = tile4;
                }

                if (!SolidTile2(i, y + 1))
                {
                    flag = false;
                }
            }

            if (flag)
            {
                int num5 = style * 54;
                for (int k = -3; k <= 0; k++)
                {
                    short frameY = (short) ((3 + k) * 18);
                    Main.tile[x - 2, y + k].active(true);
                    Main.tile[x - 2, y + k].frameY = frameY;
                    Main.tile[x - 2, y + k].frameX = (short) (num5 - 36);
                    Main.tile[x - 2, y + k].type = type;
                    Main.tile[x - 1, y + k].active(true);
                    Main.tile[x - 1, y + k].frameY = frameY;
                    Main.tile[x - 1, y + k].frameX = (short) (num5 - 18);
                    Main.tile[x - 1, y + k].type = type;
                    Main.tile[x, y + k].active(true);
                    Main.tile[x, y + k].frameY = frameY;
                    Main.tile[x, y + k].frameX = (short) num5;
                    Main.tile[x, y + k].type = type;
                    Main.tile[x + 1, y + k].active(true);
                    Main.tile[x + 1, y + k].frameY = frameY;
                    Main.tile[x + 1, y + k].frameX = (short) (num5 + 18);
                    Main.tile[x + 1, y + k].type = type;
                    Main.tile[x + 1, y + k].active(true);
                    Main.tile[x + 1, y + k].frameY = frameY;
                    Main.tile[x + 1, y + k].frameX = (short) (num5 + 36);
                    Main.tile[x + 1, y + k].type = type;
                }
            }
        }
    }

    public static void Place3x1(int x, int y, ushort type, int style = 0)
    {
        if (x >= 5 && x <= Main.maxTilesX - 5 && y >= 5 && y <= Main.maxTilesY - 5)
        {
            bool flag = true;
            for (int i = x - 1; i < x + 2; i++)
            {
                if (Main.tile[i, y] == null)
                {
                    Tile[,] tile = Main.tile;
                    int num = i;
                    int num2 = y;
                    Tile tile2 = new Tile();
                    tile[num, num2] = tile2;
                }

                if (Main.tile[i, y].active())
                {
                    flag = false;
                }

                if (Main.tile[i, y + 1] == null)
                {
                    Tile[,] tile3 = Main.tile;
                    int num3 = i;
                    int num4 = y + 1;
                    Tile tile4 = new Tile();
                    tile3[num3, num4] = tile4;
                }

                if (!SolidTile2(i, y + 1))
                {
                    flag = false;
                }
            }

            if (flag)
            {
                short num5 = (short) (54 * style);
                Main.tile[x - 1, y].active(true);
                Main.tile[x - 1, y].frameY = 0;
                Main.tile[x - 1, y].frameX = num5;
                Main.tile[x - 1, y].type = type;
                Main.tile[x, y].active(true);
                Main.tile[x, y].frameY = 0;
                Main.tile[x, y].frameX = (short) (num5 + 18);
                Main.tile[x, y].type = type;
                Main.tile[x + 1, y].active(true);
                Main.tile[x + 1, y].frameY = 0;
                Main.tile[x + 1, y].frameX = (short) (num5 + 36);
                Main.tile[x + 1, y].type = type;
            }
        }
    }

    public static void Place3x2(int x, int y, ushort type, int style = 0)
    {
        if (x >= 5 && x <= Main.maxTilesX - 5 && y >= 5 && y <= Main.maxTilesY - 5)
        {
            bool flag = false;
            bool flag2 = true;
            if (type == 14 && style == 25)
            {
                flag = true;
            }

            int num = y - 1;
            if (flag)
            {
                num = y;
            }

            for (int i = x - 1; i < x + 2; i++)
            {
                for (int j = num; j < y + 1; j++)
                {
                    if (Main.tile[i, j] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num2 = i;
                        int num3 = j;
                        Tile tile2 = new Tile();
                        tile[num2, num3] = tile2;
                    }

                    if (Main.tile[i, j].active())
                    {
                        flag2 = false;
                    }

                    if (type == 215 && Main.tile[i, j].liquid > 0)
                    {
                        flag2 = false;
                    }
                }

                if (Main.tile[i, y + 1] == null)
                {
                    Tile[,] tile3 = Main.tile;
                    int num4 = i;
                    int num5 = y + 1;
                    Tile tile4 = new Tile();
                    tile3[num4, num5] = tile4;
                }

                if (type == 285 || type == 286 || type == 298 || type == 299 || type == 310 ||
                    (type >= 361 && type <= 364))
                {
                    if (!SolidTile2(i, y + 1) && (!Main.tile[i, y + 1].nactive() ||
                                                  !Main.tileSolidTop[Main.tile[i, y + 1].type] ||
                                                  Main.tile[i, y + 1].frameY != 0))
                    {
                        flag2 = false;
                    }
                }
                else if (!SolidTile2(i, y + 1))
                {
                    flag2 = false;
                }
            }

            if (type == 88)
            {
                int num6 = Chest.CreateChest(x - 1, y - 1, -1);
                if (num6 == -1)
                {
                    flag2 = false;
                }
                else if (Main.netMode == 1)
                {
                    NetMessage.SendData(34, -1, -1, null, 2, (float) x, (float) y, (float) style, 0, 0, 0);
                }
            }

            if (flag2)
            {
                short num7 = (short) (54 * style);
                if (flag)
                {
                    Main.tile[x - 1, y].active(true);
                    Main.tile[x - 1, y].frameY = 0;
                    Main.tile[x - 1, y].frameX = num7;
                    Main.tile[x - 1, y].type = type;
                    Main.tile[x, y].active(true);
                    Main.tile[x, y].frameY = 0;
                    Main.tile[x, y].frameX = (short) (num7 + 18);
                    Main.tile[x, y].type = type;
                    Main.tile[x + 1, y].active(true);
                    Main.tile[x + 1, y].frameY = 0;
                    Main.tile[x + 1, y].frameX = (short) (num7 + 36);
                    Main.tile[x + 1, y].type = type;
                }
                else
                {
                    Main.tile[x - 1, y - 1].active(true);
                    Main.tile[x - 1, y - 1].frameY = 0;
                    Main.tile[x - 1, y - 1].frameX = num7;
                    Main.tile[x - 1, y - 1].type = type;
                    Main.tile[x, y - 1].active(true);
                    Main.tile[x, y - 1].frameY = 0;
                    Main.tile[x, y - 1].frameX = (short) (num7 + 18);
                    Main.tile[x, y - 1].type = type;
                    Main.tile[x + 1, y - 1].active(true);
                    Main.tile[x + 1, y - 1].frameY = 0;
                    Main.tile[x + 1, y - 1].frameX = (short) (num7 + 36);
                    Main.tile[x + 1, y - 1].type = type;
                    Main.tile[x - 1, y].active(true);
                    Main.tile[x - 1, y].frameY = 18;
                    Main.tile[x - 1, y].frameX = num7;
                    Main.tile[x - 1, y].type = type;
                    Main.tile[x, y].active(true);
                    Main.tile[x, y].frameY = 18;
                    Main.tile[x, y].frameX = (short) (num7 + 18);
                    Main.tile[x, y].type = type;
                    Main.tile[x + 1, y].active(true);
                    Main.tile[x + 1, y].frameY = 18;
                    Main.tile[x + 1, y].frameX = (short) (num7 + 36);
                    Main.tile[x + 1, y].type = type;
                }
            }
        }
    }

    public static void Place2x2Style(int x, int y, ushort type, int style = 0)
    {
        if (x >= 5 && x <= Main.maxTilesX - 5 && y >= 5 && y <= Main.maxTilesY - 5)
        {
            short num = 0;
            if (type == 254)
            {
                num = (short) (x % 12 / 2);
                num = (short) (num * 36);
            }

            bool flag = true;
            for (int i = x - 1; i < x + 1; i++)
            {
                for (int j = y - 1; j < y + 1; j++)
                {
                    if (Main.tile[i, j] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num2 = i;
                        int num3 = j;
                        Tile tile2 = new Tile();
                        tile[num2, num3] = tile2;
                    }

                    if (Main.tile[i, j].active())
                    {
                        flag = false;
                    }
                }

                if (Main.tile[i, y + 1] == null)
                {
                    Tile[,] tile3 = Main.tile;
                    int num4 = i;
                    int num5 = y + 1;
                    Tile tile4 = new Tile();
                    tile3[num4, num5] = tile4;
                }

                if (!SolidTile(i, y + 1))
                {
                    flag = false;
                }

                if (type == 254 && Main.tile[i, y + 1].type != 2 && Main.tile[i, y + 1].type != 109)
                {
                    flag = false;
                }
            }

            if (flag)
            {
                short num6 = (short) (36 * style);
                Main.tile[x - 1, y - 1].active(true);
                Main.tile[x - 1, y - 1].frameY = num;
                Main.tile[x - 1, y - 1].frameX = num6;
                Main.tile[x - 1, y - 1].type = type;
                Main.tile[x, y - 1].active(true);
                Main.tile[x, y - 1].frameY = num;
                Main.tile[x, y - 1].frameX = (short) (num6 + 18);
                Main.tile[x, y - 1].type = type;
                Main.tile[x - 1, y].active(true);
                Main.tile[x - 1, y].frameY = (short) (num + 18);
                Main.tile[x - 1, y].frameX = num6;
                Main.tile[x - 1, y].type = type;
                Main.tile[x, y].active(true);
                Main.tile[x, y].frameY = (short) (num + 18);
                Main.tile[x, y].frameX = (short) (num6 + 18);
                Main.tile[x, y].type = type;
            }
        }
    }

    public static bool NearFriendlyWall(int x, int y)
    {
        try
        {
            if (x < 2 || x >= Main.maxTilesX - 2 || y < 2 || y >= Main.maxTilesY - 2)
            {
                return true;
            }

            if (Main.tile[x, y].wall == 0 || Main.wallHouse[Main.tile[x, y].wall])
            {
                return true;
            }

            if (Main.tile[x - 1, y].wall == 0 || Main.wallHouse[Main.tile[x - 1, y].wall])
            {
                return true;
            }

            if (Main.tile[x + 1, y].wall == 0 || Main.wallHouse[Main.tile[x + 1, y].wall])
            {
                return true;
            }

            if (Main.tile[x, y - 1].wall == 0 || Main.wallHouse[Main.tile[x, y - 1].wall])
            {
                return true;
            }

            if (Main.tile[x, y + 1].wall == 0 || Main.wallHouse[Main.tile[x, y + 1].wall])
            {
                return true;
            }
        }
        catch
        {
        }

        return false;
    }

    public static void Check2x2Style(int i, int j, int type)
    {
        if (!destroyObject)
        {
            bool flag = false;
            int num;
            for (num = Main.tile[i, j].frameY / 18; num > 1; num -= 2)
            {
            }

            int num2 = j - num;
            int num3 = Main.tile[i, j].frameX / 18;
            int num4 = 0;
            while (num3 > 1)
            {
                num3 -= 2;
                num4++;
            }

            num3 = i - num3;
            int num5 = num4 * 36;
            for (int k = num3; k < num3 + 2; k++)
            {
                for (int l = num2; l < num2 + 2; l++)
                {
                    if (Main.tile[k, l] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num6 = k;
                        int num7 = l;
                        Tile tile2 = new Tile();
                        tile[num6, num7] = tile2;
                    }

                    if (!Main.tile[k, l].active() || Main.tile[k, l].type != type ||
                        Main.tile[k, l].frameX != (k - num3) * 18 + num5)
                    {
                        flag = true;
                    }
                }

                if (!SolidTileAllowBottomSlope(k, num2 + 2))
                {
                    flag = true;
                }
            }

            if (flag)
            {
                int frameX = Main.tile[i, j].frameX;
                destroyObject = true;
                for (int m = num3; m < num3 + 2; m++)
                {
                    for (int n = num2; n < num2 + 2; n++)
                    {
                        if (Main.tile[m, n] == null)
                        {
                            Tile[,] tile3 = Main.tile;
                            int num8 = m;
                            int num9 = n;
                            Tile tile4 = new Tile();
                            tile3[num8, num9] = tile4;
                        }

                        if (Main.tile[m, n].type == type && Main.tile[m, n].active())
                        {
                            KillTile(m, n, false, false, false);
                        }
                    }
                }

                switch (type)
                {
                    case 254:
                        if (frameX >= 72)
                        {
                            if (frameX < 108)
                            {
                                if (genRand.Next(2) == 0)
                                {
                                    Item.NewItem(i * 16, j * 16, 32, 32, 1725, genRand.Next(1, 3), false, 0, false,
                                        false);
                                }
                            }
                            else if (frameX < 144)
                            {
                                Item.NewItem(i * 16, j * 16, 32, 32, 1725, genRand.Next(2, 6), false, 0, false, false);
                            }
                            else
                            {
                                Item.NewItem(i * 16, j * 16, 32, 32, 1725, genRand.Next(5, 11), false, 0, false, false);
                                if (Main.halloween && genRand.Next(200) == 0)
                                {
                                    Item.NewItem(i * 16, j * 16, 32, 32, 1799, 1, false, 0, false, false);
                                }
                            }
                        }

                        break;
                    case 457:
                        Item.NewItem(i * 16, j * 16, 32, 32, 3749, 1, false, 0, false, false);
                        break;
                    case 96:
                        if (num4 == 0)
                        {
                            Item.NewItem(i * 16, j * 16, 32, 32, 345, 1, false, 0, false, false);
                        }

                        if (num4 == 1)
                        {
                            Item.NewItem(i * 16, j * 16, 32, 32, 1791, 1, false, 0, false, false);
                        }

                        break;
                    case 441:
                    {
                        int num11 = -1;
                        switch (num4)
                        {
                            case 0:
                                num11 = 3665;
                                break;
                            case 1:
                                num11 = 3666;
                                break;
                            case 3:
                                num11 = 3667;
                                break;
                            case 7:
                                num11 = 3668;
                                break;
                            case 8:
                                num11 = 3669;
                                break;
                            case 9:
                                num11 = 3670;
                                break;
                            case 10:
                                num11 = 3671;
                                break;
                            case 11:
                                num11 = 3672;
                                break;
                            case 12:
                                num11 = 3673;
                                break;
                            case 13:
                                num11 = 3674;
                                break;
                            case 14:
                                num11 = 3675;
                                break;
                            case 15:
                                num11 = 3676;
                                break;
                            case 16:
                                num11 = 3677;
                                break;
                            case 17:
                                num11 = 3678;
                                break;
                            case 18:
                                num11 = 3679;
                                break;
                            case 19:
                                num11 = 3680;
                                break;
                            case 20:
                                num11 = 3681;
                                break;
                            case 21:
                                num11 = 3682;
                                break;
                            case 22:
                                num11 = 3683;
                                break;
                            case 28:
                                num11 = 3684;
                                break;
                            case 29:
                                num11 = 3685;
                                break;
                            case 30:
                                num11 = 3686;
                                break;
                            case 31:
                                num11 = 3687;
                                break;
                            case 32:
                                num11 = 3688;
                                break;
                            case 33:
                                num11 = 3689;
                                break;
                            case 34:
                                num11 = 3690;
                                break;
                            case 35:
                                num11 = 3691;
                                break;
                            case 37:
                                num11 = 3692;
                                break;
                            case 39:
                                num11 = 3693;
                                break;
                            case 41:
                                num11 = 3694;
                                break;
                            case 42:
                                num11 = 3695;
                                break;
                            case 43:
                                num11 = 3696;
                                break;
                            case 44:
                                num11 = 3697;
                                break;
                            case 45:
                                num11 = 3698;
                                break;
                            case 46:
                                num11 = 3699;
                                break;
                            case 47:
                                num11 = 3700;
                                break;
                            case 48:
                                num11 = 3701;
                                break;
                            case 49:
                                num11 = 3702;
                                break;
                            case 50:
                                num11 = 3703;
                                break;
                            case 51:
                                num11 = 3704;
                                break;
                        }

                        if (num11 != -1)
                        {
                            Item.NewItem(i * 16, j * 16, 32, 32, num11, 1, false, 0, false, false);
                        }

                        break;
                    }
                    case 468:
                    {
                        int num10 = -1;
                        switch (num4)
                        {
                            case 0:
                                num10 = 3886;
                                break;
                            case 1:
                                num10 = 3887;
                                break;
                        }

                        if (num10 != -1)
                        {
                            Item.NewItem(i * 16, j * 16, 32, 32, num10, 1, false, 0, false, false);
                        }

                        break;
                    }
                }

                destroyObject = false;
                for (int num12 = num3 - 1; num12 < num3 + 3; num12++)
                {
                    for (int num13 = num2 - 1; num13 < num2 + 3; num13++)
                    {
                        TileFrame(num12, num13, false, false);
                    }
                }
            }
        }
    }

    public static void PlacePumpkin(int x, int superY)
    {
        ushort type = 254;
        int num = genRand.Next(6) * 36;
        if (x >= 5 && x <= Main.maxTilesX - 5 && superY >= 5 && superY <= Main.maxTilesY - 5)
        {
            bool flag = true;
            for (int i = x - 1; i < x + 1; i++)
            {
                for (int j = superY - 1; j < superY + 1; j++)
                {
                    if (Main.tile[i, j] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num2 = i;
                        int num3 = j;
                        Tile tile2 = new Tile();
                        tile[num2, num3] = tile2;
                    }

                    if (Main.tile[i, j].active() && Main.tile[i, j].type != 3 && Main.tile[i, j].type != 73 &&
                        Main.tile[i, j].type != 113 && Main.tile[i, j].type != 110 &&
                        (Main.tile[i, j].type != 185 || Main.tile[i, j].frameY != 0))
                    {
                        flag = false;
                    }

                    if (Main.tile[i, j].liquid > 0)
                    {
                        flag = false;
                    }
                }

                if (!SolidTile(i, superY + 1) ||
                    (Main.tile[i, superY + 1].type != 2 && Main.tile[i, superY + 1].type != 109))
                {
                    flag = false;
                }
            }

            if (flag)
            {
                Main.tile[x - 1, superY - 1].active(true);
                Main.tile[x - 1, superY - 1].frameY = (short) num;
                Main.tile[x - 1, superY - 1].frameX = 0;
                Main.tile[x - 1, superY - 1].type = type;
                Main.tile[x, superY - 1].active(true);
                Main.tile[x, superY - 1].frameY = (short) num;
                Main.tile[x, superY - 1].frameX = 18;
                Main.tile[x, superY - 1].type = type;
                Main.tile[x - 1, superY].active(true);
                Main.tile[x - 1, superY].frameY = (short) (num + 18);
                Main.tile[x - 1, superY].frameX = 0;
                Main.tile[x - 1, superY].type = type;
                Main.tile[x, superY].active(true);
                Main.tile[x, superY].frameY = (short) (num + 18);
                Main.tile[x, superY].frameX = 18;
                Main.tile[x, superY].type = type;
            }
        }
    }

    public static void GrowPumpkin(int i, int j, int type)
    {
        if (!destroyObject)
        {
            bool flag = false;
            int num;
            for (num = Main.tile[i, j].frameY / 18; num > 1; num -= 2)
            {
            }

            int num2 = j - num;
            int num3 = Main.tile[i, j].frameX / 18;
            int num4 = 0;
            while (num3 > 1)
            {
                num3 -= 2;
                num4++;
            }

            num3 = i - num3;
            int num5 = num4 * 36;
            if (num4 < 4)
            {
                for (int k = num3; k < num3 + 2; k++)
                {
                    for (int l = num2; l < num2 + 2; l++)
                    {
                        if (Main.tile[k, l] == null)
                        {
                            Tile[,] tile = Main.tile;
                            int num6 = k;
                            int num7 = l;
                            Tile tile2 = new Tile();
                            tile[num6, num7] = tile2;
                        }

                        if (!Main.tile[k, l].active() || Main.tile[k, l].type != type ||
                            Main.tile[k, l].frameX != (k - num3) * 18 + num5)
                        {
                            flag = true;
                        }
                    }

                    if (!SolidTile(k, num2 + 2) ||
                        (Main.tile[k, num2 + 2].type != 2 && Main.tile[k, num2 + 2].type != 109))
                    {
                        flag = true;
                    }
                }

                if (!flag)
                {
                    for (int m = num3; m < num3 + 2; m++)
                    {
                        for (int n = num2; n < num2 + 2; n++)
                        {
                            if (Main.tile[m, n] == null)
                            {
                                Tile[,] tile3 = Main.tile;
                                int num8 = m;
                                int num9 = n;
                                Tile tile4 = new Tile();
                                tile3[num8, num9] = tile4;
                            }

                            if (Main.tile[m, n].type == type && Main.tile[m, n].active())
                            {
                                Main.tile[m, n].frameX += 36;
                            }
                        }
                    }
                }

                if (Main.netMode == 2)
                {
                    NetMessage.SendTileSquare(-1, num3, num2, 4, TileChangeType.None);
                }
            }
        }
    }

    public static void FixHearts()
    {
        for (int i = 0; i < Main.maxTilesX; i++)
        {
            for (int j = 0; j < Main.maxTilesY; j++)
            {
                Tile tile = Main.tile[i, j];
                if (tile.active() && tile.type == 12 && tile.frameX == 0 && tile.frameY == 0)
                {
                    FixHeart(i, j);
                }
            }
        }
    }

    public static void DestroyHeart(int i, int j)
    {
        destroyObject = true;
        for (int k = i; k < i + 2; k++)
        {
            for (int l = j; l < j + 2; l++)
            {
                if (k < Main.maxTilesX && l < Main.maxTilesY)
                {
                    Tile tile = Main.tile[k, l];
                    if (tile.active() && tile.type == 12)
                    {
                        KillTile(k, l, false, false, false);
                    }
                }
            }
        }

        destroyObject = false;
    }

    public static void FixHeart(int i, int j)
    {
        if (i < 40 || i >= Main.maxTilesX - 40 || j < 40 || j >= Main.maxTilesY - 40)
        {
            DestroyHeart(i, j);
        }
        else
        {
            Tile tile = Main.tile[i, j + 2];
            Tile tile2 = Main.tile[i + 1, j + 2];
            if (tile.active() && !Main.tileSolid[tile.type] && Main.tileCut[tile.type])
            {
                KillTile(i, j + 2, false, false, false);
            }

            if (tile2.active() && !Main.tileSolid[tile2.type] && Main.tileCut[tile2.type])
            {
                KillTile(i + 1, j + 2, false, false, false);
            }

            if (!tile.active())
            {
                if (!tile2.active())
                {
                    DestroyHeart(i, j);
                    return;
                }

                if (Main.tileSolid[tile2.type])
                {
                    tile.type = tile2.type;
                    tile.active(true);
                }
            }

            if (!tile2.active() && Main.tileSolid[tile.type])
            {
                tile2.type = tile.type;
                tile2.active(true);
            }

            if (!tile.nactive() || !Main.tileSolid[tile.type] || !tile2.nactive() || !Main.tileSolid[tile2.type])
            {
                DestroyHeart(i, j);
            }
            else
            {
                if (tile.blockType() != 0)
                {
                    tile.slope(0);
                    tile.halfBrick(false);
                }

                if (tile2.blockType() != 0)
                {
                    tile2.slope(0);
                    tile2.halfBrick(false);
                }
            }
        }
    }

    public static void FixChands()
    {
        for (int i = 5; i < Main.maxTilesX - 5; i++)
        {
            for (int j = 5; j < Main.maxTilesY - 5; j++)
            {
                if (Main.tile[i, j].active())
                {
                    int type = Main.tile[i, j].type;
                    if (Main.tile[i, j].active() &&
                        (type == 35 || type == 36 || type == 170 || type == 171 || type == 172))
                    {
                        FixChand(i, j);
                    }
                }
            }
        }
    }

    public static void FixChand(int i, int j)
    {
        int num = 0;
        int type = Main.tile[i, j].type;
        if (Main.tile[i, j].active())
        {
            if (type == 35)
            {
                num = 1;
            }

            if (type == 36)
            {
                num = 2;
            }

            if (type == 170)
            {
                num = 3;
            }

            if (type == 171)
            {
                num = 4;
            }

            if (type == 172)
            {
                num = 5;
            }
        }

        if (num > 0)
        {
            int num2;
            for (num2 = Main.tile[i, j].frameX / 18; num2 >= 3; num2 -= 3)
            {
            }

            if (num2 >= 3)
            {
                num2 -= 3;
            }

            num2 = i - num2;
            int num3 = j + Main.tile[i, j].frameY / 18 * -1;
            for (int k = num2; k < num2 + 3; k++)
            {
                for (int l = num3; l < num3 + 3; l++)
                {
                    if (Main.tile[k, l] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num4 = k;
                        int num5 = l;
                        Tile tile2 = new Tile();
                        tile[num4, num5] = tile2;
                    }

                    if (Main.tile[k, l].active() && Main.tile[k, l].type == type)
                    {
                        Main.tile[k, l].type = 34;
                        Main.tile[k, l].frameY = (short) (Main.tile[k, l].frameY + num * 54);
                    }
                }
            }
        }
    }

    public static void PlaceChand(int x, int y, ushort type, int style = 0)
    {
        bool flag = true;
        int num = 0;
        for (int i = x - 1; i < x + 2; i++)
        {
            for (int j = y; j < y + 3; j++)
            {
                if (Main.tile[i, j] == null)
                {
                    Tile[,] tile = Main.tile;
                    int num2 = i;
                    int num3 = j;
                    Tile tile2 = new Tile();
                    tile[num2, num3] = tile2;
                }

                if (Main.tile[i, j].active())
                {
                    flag = false;
                }
            }
        }

        if (Main.tile[x, y - 1] == null)
        {
            Tile[,] tile3 = Main.tile;
            int num4 = y - 1;
            Tile tile4 = new Tile();
            tile3[x, num4] = tile4;
        }

        if (!Main.tile[x, y - 1].nactive() || !Main.tileSolid[Main.tile[x, y - 1].type] ||
            Main.tileSolidTop[Main.tile[x, y - 1].type])
        {
            flag = false;
        }

        if (flag)
        {
            int num5 = style / 36 * 108;
            int num6 = style * 18 * 3;
            Main.tile[x - 1, y + num].active(true);
            Main.tile[x - 1, y + num].frameY = (short) num6;
            Main.tile[x - 1, y + num].frameX = (short) num5;
            Main.tile[x - 1, y + num].type = type;
            Main.tile[x, y + num].active(true);
            Main.tile[x, y + num].frameY = (short) num6;
            Main.tile[x, y + num].frameX = (short) (num5 + 18);
            Main.tile[x, y + num].type = type;
            Main.tile[x + 1, y + num].active(true);
            Main.tile[x + 1, y + num].frameY = (short) num6;
            Main.tile[x + 1, y + num].frameX = (short) (num5 + 36);
            Main.tile[x + 1, y + num].type = type;
            Main.tile[x - 1, y + 1 + num].active(true);
            Main.tile[x - 1, y + 1 + num].frameY = (short) (num6 + 18);
            Main.tile[x - 1, y + 1 + num].frameX = (short) num5;
            Main.tile[x - 1, y + 1 + num].type = type;
            Main.tile[x, y + 1 + num].active(true);
            Main.tile[x, y + 1 + num].frameY = (short) (num6 + 18);
            Main.tile[x, y + 1 + num].frameX = (short) (num5 + 18);
            Main.tile[x, y + 1 + num].type = type;
            Main.tile[x + 1, y + 1 + num].active(true);
            Main.tile[x + 1, y + 1 + num].frameY = (short) (num6 + 18);
            Main.tile[x + 1, y + 1 + num].frameX = (short) (num5 + 36);
            Main.tile[x + 1, y + 1 + num].type = type;
            Main.tile[x - 1, y + 2 + num].active(true);
            Main.tile[x - 1, y + 2 + num].frameY = (short) (num6 + 36);
            Main.tile[x - 1, y + 2 + num].frameX = (short) num5;
            Main.tile[x - 1, y + 2 + num].type = type;
            Main.tile[x, y + 2 + num].active(true);
            Main.tile[x, y + 2 + num].frameY = (short) (num6 + 36);
            Main.tile[x, y + 2 + num].frameX = (short) (num5 + 18);
            Main.tile[x, y + 2 + num].type = type;
            Main.tile[x + 1, y + 2 + num].active(true);
            Main.tile[x + 1, y + 2 + num].frameY = (short) (num6 + 36);
            Main.tile[x + 1, y + 2 + num].frameX = (short) (num5 + 36);
            Main.tile[x + 1, y + 2 + num].type = type;
        }
    }

    public static void CheckChand(int i, int j, int type)
    {
        if (!destroyObject)
        {
            bool flag = false;
            int num = 3;
            if (type == 454)
            {
                num = 4;
            }

            int num2 = Main.tile[i, j].frameX / 18;
            int num3 = 0;
            while (num2 >= num)
            {
                num3++;
                num2 -= num;
            }

            int num4 = i - num2;
            int num5 = 18 * num * num3;
            if (num2 >= num)
            {
                num2 -= num;
            }

            num2 = i - num2;
            int num6 = Main.tile[i, j].frameY / 18;
            int num7 = 0;
            while (num6 >= 3)
            {
                num7++;
                num6 -= 3;
            }

            if (num5 >= 108)
            {
                num7 += 37 * (num5 / 108);
            }

            int num8 = 54 * num7;
            if (num5 >= 108)
            {
                num8 -= 54 * (num5 / 108) * 37;
            }

            if (num6 >= 3)
            {
                num6 -= 3;
            }

            num6 = j - num6;
            for (int k = num2; k < num2 + num; k++)
            {
                for (int l = num6; l < num6 + 3; l++)
                {
                    if (Main.tile[k, l] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num9 = k;
                        int num10 = l;
                        Tile tile2 = new Tile();
                        tile[num9, num10] = tile2;
                    }

                    if (!Main.tile[k, l].active() || Main.tile[k, l].type != type ||
                        Main.tile[k, l].frameX != (k - num4) * 18 + num5 ||
                        Main.tile[k, l].frameY != (l - num6) * 18 + num8)
                    {
                        flag = true;
                    }
                }
            }

            if (Main.tile[num2 + 1, num6 - 1] == null)
            {
                Tile[,] tile3 = Main.tile;
                int num11 = num2 + 1;
                int num12 = num6 - 1;
                Tile tile4 = new Tile();
                tile3[num11, num12] = tile4;
            }

            if (!Main.tile[num2 + 1, num6 - 1].nactive() || !Main.tileSolid[Main.tile[num2 + 1, num6 - 1].type] ||
                Main.tileSolidTop[Main.tile[num2 + 1, num6 - 1].type])
            {
                flag = true;
            }

            if (flag)
            {
                destroyObject = true;
                for (int m = num2; m < num2 + num; m++)
                {
                    for (int n = num6; n < num6 + 3; n++)
                    {
                        if (Main.tile[m, n].type == type && Main.tile[m, n].active())
                        {
                            KillTile(m, n, false, false, false);
                        }
                    }
                }

                if (type == 454)
                {
                    switch (Main.rand.Next(9))
                    {
                        case 2:
                        case 3:
                        case 4:
                        {
                            int num17 = Main.rand.Next(10, 31);
                            while (num17 > 0)
                            {
                                int num18 = Main.rand.Next(2, 11);
                                if (num18 > num17)
                                {
                                    num18 = num17;
                                }

                                num17 -= num18;
                                Item.NewItem(i * 16, j * 16, 32, 32, 72, num18, false, 0, false, false);
                            }

                            break;
                        }
                        case 5:
                        case 6:
                        {
                            int num21 = Main.rand.Next(60, 80);
                            while (num21 > 0)
                            {
                                int num22 = Main.rand.Next(3, 16);
                                if (num22 > num21)
                                {
                                    num22 = num21;
                                }

                                num21 -= num22;
                                Item.NewItem(i * 16 - 10, j * 16 - 10, 52, 52, 72, num22, false, 0, false, false);
                            }

                            Item.NewItem(i * 16, j * 16, 32, 32, 1358, 1, false, 0, false, false);
                            break;
                        }
                        case 7:
                        {
                            int num19 = Main.rand.Next(10, 31);
                            while (num19 > 0)
                            {
                                int num20 = Main.rand.Next(2, 9);
                                if (num20 > num19)
                                {
                                    num20 = num19;
                                }

                                num19 -= num20;
                                Item.NewItem(i * 16 - 10, j * 16 - 10, 52, 52, 72, num20, false, 0, false, false);
                            }

                            if (Main.rand.Next(8) == 0)
                            {
                                Item.NewItem(i * 16, j * 16, 32, 32, 3532, 1, false, 0, false, false);
                            }

                            if (Main.rand.Next(8) == 0)
                            {
                                Item.NewItem(i * 16, j * 16, 32, 32, 3532, 1, false, 0, false, false);
                            }

                            Item.NewItem(i * 16, j * 16, 32, 32, 73, 1, false, 0, false, false);
                            break;
                        }
                        case 8:
                        {
                            int num13 = 100;
                            while (num13 > 0)
                            {
                                int num14 = Main.rand.Next(3, 16);
                                if (num14 > num13)
                                {
                                    num14 = num13;
                                }

                                num13 -= num14;
                                Item.NewItem(i * 16 - 10, j * 16 - 10, 52, 52, 72, num14, false, 0, false, false);
                            }

                            int num15 = Main.rand.Next(30, 91);
                            while (num15 > 0)
                            {
                                int num16 = Main.rand.Next(7, 14);
                                if (num16 > num15)
                                {
                                    num16 = num15;
                                }

                                num15 -= num16;
                                Item.NewItem(i * 16 - 10, j * 16 - 10, 52, 52, 1349, num16, false, 0, false, false);
                            }

                            Item.NewItem(i * 16, j * 16, 32, 32, 1358, 1, false, 0, false, false);
                            Item.NewItem(i * 16, j * 16, 32, 32, 73, 1, false, 0, false, false);
                            break;
                        }
                    }
                }

                if (type == 34)
                {
                    int type2;
                    if (num7 == 1)
                    {
                        type2 = 107;
                    }
                    else if (num7 == 2)
                    {
                        type2 = 108;
                    }
                    else if (num7 == 3)
                    {
                        type2 = 710;
                    }
                    else if (num7 == 4)
                    {
                        type2 = 711;
                    }
                    else if (num7 == 5)
                    {
                        type2 = 712;
                    }
                    else if (num7 == 6)
                    {
                        type2 = 1812;
                    }
                    else if (num7 >= 7 && num7 <= 17)
                    {
                        type2 = 2055 + num7 - 7;
                    }
                    else if (num7 < 18 || num7 > 21)
                    {
                        switch (num7)
                        {
                            case 22:
                                type2 = 2224;
                                break;
                            case 23:
                                type2 = 2525;
                                break;
                            case 24:
                                type2 = 2543;
                                break;
                            case 25:
                                type2 = 2558;
                                break;
                            case 26:
                                type2 = 2573;
                                break;
                            case 27:
                                type2 = 2652;
                                break;
                            case 28:
                                type2 = 2653;
                                break;
                            case 29:
                                type2 = 2654;
                                break;
                            case 30:
                                type2 = 2655;
                                break;
                            case 31:
                                type2 = 2656;
                                break;
                            case 32:
                                type2 = 2657;
                                break;
                            case 33:
                                type2 = 2813;
                                break;
                            case 34:
                                type2 = 3177;
                                break;
                            case 35:
                                type2 = 3179;
                                break;
                            case 36:
                                type2 = 3178;
                                break;
                            case 37:
                                type2 = 3894;
                                break;
                            default:
                                type2 = 106;
                                break;
                        }
                    }
                    else
                    {
                        type2 = 2141 + num7 - 18;
                    }

                    Item.NewItem(i * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
                }

                destroyObject = false;
                for (int num23 = num2 - 1; num23 < num2 + num + 1; num23++)
                {
                    for (int num24 = num6 - 1; num24 < num6 + 4; num24++)
                    {
                        TileFrame(num23, num24, false, false);
                    }
                }
            }
        }
    }

    public static void Check3x3(int i, int j, int type)
    {
        if (!destroyObject)
        {
            bool flag = false;
            int num = Main.tile[i, j].frameX / 18;
            int num2 = 0;
            while (num >= 3)
            {
                num2++;
                num -= 3;
            }

            int num3 = i - num;
            int num4 = 54 * num2;
            int num5 = Main.tile[i, j].frameY / 54;
            int num6 = Main.tile[i, j].frameY % 54 / 18;
            if (num >= 3)
            {
                num -= 3;
            }

            num = i - num;
            int num7 = j - num6;
            for (int k = num; k < num + 3; k++)
            {
                for (int l = num7; l < num7 + 3; l++)
                {
                    if (Main.tile[k, l] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num8 = k;
                        int num9 = l;
                        Tile tile2 = new Tile();
                        tile[num8, num9] = tile2;
                    }

                    if (!Main.tile[k, l].active() || Main.tile[k, l].type != type ||
                        Main.tile[k, l].frameX != (k - num3) * 18 + num4 ||
                        Main.tile[k, l].frameY != (l - num7) * 18 + num5 * 54)
                    {
                        flag = true;
                    }
                }
            }

            if (type == 106 || type == 212 || type == 219 || type == 220 || type == 228 || type == 231 || type == 243 ||
                type == 247 || type == 283 || (type >= 300 && type <= 308) || type == 354 || type == 355 ||
                type == 406 || type == 412 || type == 452 || type == 455)
            {
                for (int m = num; m < num + 3; m++)
                {
                    if (Main.tile[m, num7 + 3] == null)
                    {
                        Tile[,] tile3 = Main.tile;
                        int num10 = m;
                        int num11 = num7 + 3;
                        Tile tile4 = new Tile();
                        tile3[num10, num11] = tile4;
                    }

                    if (!SolidTileAllowBottomSlope(m, num7 + 3))
                    {
                        flag = true;
                        break;
                    }
                }
            }
            else
            {
                if (Main.tile[num + 1, num7 - 1] == null)
                {
                    Tile[,] tile5 = Main.tile;
                    int num12 = num + 1;
                    int num13 = num7 - 1;
                    Tile tile6 = new Tile();
                    tile5[num12, num13] = tile6;
                }

                if (!Main.tile[num + 1, num7 - 1].nactive() || !Main.tileSolid[Main.tile[num + 1, num7 - 1].type] ||
                    Main.tileSolidTop[Main.tile[num + 1, num7 - 1].type])
                {
                    flag = true;
                }
            }

            if (flag)
            {
                destroyObject = true;
                for (int n = num; n < num + 3; n++)
                {
                    for (int num14 = num7; num14 < num7 + 3; num14++)
                    {
                        if (Main.tile[n, num14].type == type && Main.tile[n, num14].active())
                        {
                            KillTile(n, num14, false, false, false);
                        }
                    }
                }

                switch (type)
                {
                    case 106:
                        Item.NewItem(i * 16, j * 16, 32, 32, 363, 1, false, 0, false, false);
                        break;
                    case 243:
                        Item.NewItem(i * 16, j * 16, 32, 32, 1430, 1, false, 0, false, false);
                        break;
                    case 212:
                        Item.NewItem(i * 16, j * 16, 32, 32, 951, 1, false, 0, false, false);
                        break;
                    case 219:
                        Item.NewItem(i * 16, j * 16, 32, 32, 997, 1, false, 0, false, false);
                        break;
                    case 220:
                        Item.NewItem(i * 16, j * 16, 32, 32, 998, 1, false, 0, false, false);
                        break;
                    case 228:
                        Item.NewItem(i * 16, j * 16, 32, 32, 1120, 1, false, 0, false, false);
                        break;
                    case 247:
                        Item.NewItem(i * 16, j * 16, 32, 32, 1551, 1, false, 0, false, false);
                        break;
                    case 283:
                        Item.NewItem(i * 16, j * 16, 32, 32, 2172, 1, false, 0, false, false);
                        break;
                    case 300:
                    case 301:
                    case 302:
                    case 303:
                    case 304:
                    case 305:
                    case 306:
                        Item.NewItem(i * 16, j * 16, 32, 32, 2192 + type - 300, 1, false, 0, false, false);
                        break;
                    default:
                        switch (type)
                        {
                            case 307:
                                Item.NewItem(i * 16, j * 16, 32, 32, 2203, 1, false, 0, false, false);
                                break;
                            case 308:
                                Item.NewItem(i * 16, j * 16, 32, 32, 2204, 1, false, 0, false, false);
                                break;
                            case 406:
                                Item.NewItem(i * 16, j * 16, 32, 32, 3365, 1, false, 0, false, false);
                                break;
                            case 452:
                                Item.NewItem(i * 16, j * 16, 32, 32, 3742, 1, false, 0, false, false);
                                break;
                            case 354:
                                Item.NewItem(i * 16, j * 16, 32, 32, 2999, 1, false, 0, false, false);
                                break;
                            case 355:
                                Item.NewItem(i * 16, j * 16, 32, 32, 3000, 1, false, 0, false, false);
                                break;
                            case 412:
                                Item.NewItem(i * 16, j * 16, 32, 32, 3549, 1, false, 0, false, false);
                                break;
                            case 455:
                                Item.NewItem(i * 16, j * 16, 32, 32, 3747, 1, false, 0, false, false);
                                break;
                            case 231:
                            {
                                int num15 = (i + 1) * 16 + 8;
                                int num16 = j * 16;
                                Gore.NewGore(new Vector2((float) num15, (float) num16), default(Vector2), 300, 1f);
                                Gore.NewGore(new Vector2((float) num15, (float) (num16 + 8)), default(Vector2), 301,
                                    1f);
                                Gore.NewGore(new Vector2((float) num15, (float) (num16 + 16)), default(Vector2), 302,
                                    1f);
                                float num17 = (float) (i * 16);
                                float num18 = (float) (j * 16);
                                float num19 = -1f;
                                int plr = 0;
                                for (int num20 = 0; num20 < 255; num20++)
                                {
                                    if (Main.player[num20].active && !Main.player[num20].dead)
                                    {
                                        float num21 = Math.Abs(Main.player[num20].position.X - num17) +
                                                      Math.Abs(Main.player[num20].position.Y - num18);
                                        if (num21 < num19 || num19 == -1f)
                                        {
                                            plr = num20;
                                            num19 = num21;
                                        }
                                    }
                                }

                                NPC.SpawnOnPlayer(plr, 222);
                                break;
                            }
                        }

                        break;
                }

                destroyObject = false;
                for (int num22 = num - 1; num22 < num + 4; num22++)
                {
                    for (int num23 = num7 - 1; num23 < num7 + 4; num23++)
                    {
                        TileFrame(num22, num23, false, false);
                    }
                }
            }
        }
    }

    public static void Place3x3(int x, int y, ushort type, int style = 0)
    {
        bool flag = true;
        int num = 0;
        if (type == 106 || type == 212 || type == 219 || type == 220 || type == 228 || type == 231 || type == 243 ||
            type == 247 || type == 283 || (type >= 300 && type <= 308) || type == 354 || type == 355)
        {
            num = -2;
            for (int i = x - 1; i < x + 2; i++)
            {
                for (int j = y - 2; j < y + 1; j++)
                {
                    if (Main.tile[i, j] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num2 = i;
                        int num3 = j;
                        Tile tile2 = new Tile();
                        tile[num2, num3] = tile2;
                    }

                    if (Main.tile[i, j].active())
                    {
                        flag = false;
                    }
                }
            }

            for (int k = x - 1; k < x + 2; k++)
            {
                if (Main.tile[k, y + 1] == null)
                {
                    Tile[,] tile3 = Main.tile;
                    int num4 = k;
                    int num5 = y + 1;
                    Tile tile4 = new Tile();
                    tile3[num4, num5] = tile4;
                }

                if (!SolidTile2(k, y + 1))
                {
                    flag = false;
                    break;
                }
            }
        }
        else
        {
            for (int l = x - 1; l < x + 2; l++)
            {
                for (int m = y; m < y + 3; m++)
                {
                    if (Main.tile[l, m] == null)
                    {
                        Tile[,] tile5 = Main.tile;
                        int num6 = l;
                        int num7 = m;
                        Tile tile6 = new Tile();
                        tile5[num6, num7] = tile6;
                    }

                    if (Main.tile[l, m].active())
                    {
                        flag = false;
                    }
                }
            }

            if (Main.tile[x, y - 1] == null)
            {
                Tile[,] tile7 = Main.tile;
                int num8 = y - 1;
                Tile tile8 = new Tile();
                tile7[x, num8] = tile8;
            }

            if (!Main.tile[x, y - 1].nactive() || !Main.tileSolid[Main.tile[x, y - 1].type] ||
                Main.tileSolidTop[Main.tile[x, y - 1].type])
            {
                flag = false;
            }
        }

        if (flag)
        {
            int num9 = style * 18 * 3;
            Main.tile[x - 1, y + num].active(true);
            Main.tile[x - 1, y + num].frameY = 0;
            Main.tile[x - 1, y + num].frameX = (short) num9;
            Main.tile[x - 1, y + num].type = type;
            Main.tile[x, y + num].active(true);
            Main.tile[x, y + num].frameY = 0;
            Main.tile[x, y + num].frameX = (short) (num9 + 18);
            Main.tile[x, y + num].type = type;
            Main.tile[x + 1, y + num].active(true);
            Main.tile[x + 1, y + num].frameY = 0;
            Main.tile[x + 1, y + num].frameX = (short) (num9 + 36);
            Main.tile[x + 1, y + num].type = type;
            Main.tile[x - 1, y + 1 + num].active(true);
            Main.tile[x - 1, y + 1 + num].frameY = 18;
            Main.tile[x - 1, y + 1 + num].frameX = (short) num9;
            Main.tile[x - 1, y + 1 + num].type = type;
            Main.tile[x, y + 1 + num].active(true);
            Main.tile[x, y + 1 + num].frameY = 18;
            Main.tile[x, y + 1 + num].frameX = (short) (num9 + 18);
            Main.tile[x, y + 1 + num].type = type;
            Main.tile[x + 1, y + 1 + num].active(true);
            Main.tile[x + 1, y + 1 + num].frameY = 18;
            Main.tile[x + 1, y + 1 + num].frameX = (short) (num9 + 36);
            Main.tile[x + 1, y + 1 + num].type = type;
            Main.tile[x - 1, y + 2 + num].active(true);
            Main.tile[x - 1, y + 2 + num].frameY = 36;
            Main.tile[x - 1, y + 2 + num].frameX = (short) num9;
            Main.tile[x - 1, y + 2 + num].type = type;
            Main.tile[x, y + 2 + num].active(true);
            Main.tile[x, y + 2 + num].frameY = 36;
            Main.tile[x, y + 2 + num].frameX = (short) (num9 + 18);
            Main.tile[x, y + 2 + num].type = type;
            Main.tile[x + 1, y + 2 + num].active(true);
            Main.tile[x + 1, y + 2 + num].frameY = 36;
            Main.tile[x + 1, y + 2 + num].frameX = (short) (num9 + 36);
            Main.tile[x + 1, y + 2 + num].type = type;
        }
    }

    public static void PlaceSunflower(int x, int y, ushort type = 27)
    {
        if (!((double) y > Main.worldSurface - 1.0))
        {
            bool flag = true;
            for (int i = x; i < x + 2; i++)
            {
                for (int j = y - 3; j < y + 1; j++)
                {
                    if (Main.tile[i, j] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num = i;
                        int num2 = j;
                        Tile tile2 = new Tile();
                        tile[num, num2] = tile2;
                    }

                    if (Main.tile[i, j].active() || Main.tile[i, j].wall > 0)
                    {
                        flag = false;
                    }
                }

                if (Main.tile[i, y + 1] == null)
                {
                    Tile[,] tile3 = Main.tile;
                    int num3 = i;
                    int num4 = y + 1;
                    Tile tile4 = new Tile();
                    tile3[num3, num4] = tile4;
                }

                if (!Main.tile[i, y + 1].nactive() || Main.tile[i, y + 1].halfBrick() ||
                    Main.tile[i, y + 1].slope() != 0 ||
                    (Main.tile[i, y + 1].type != 2 && Main.tile[i, y + 1].type != 109))
                {
                    flag = false;
                }
            }

            if (flag)
            {
                int num5 = genRand.Next(3);
                for (int k = 0; k < 2; k++)
                {
                    for (int l = -3; l < 1; l++)
                    {
                        int num6 = k * 18 + genRand.Next(3) * 36;
                        if (l <= -2)
                        {
                            num6 = k * 18 + num5 * 36;
                        }

                        int num7 = (l + 3) * 18;
                        Main.tile[x + k, y + l].active(true);
                        Main.tile[x + k, y + l].frameX = (short) num6;
                        Main.tile[x + k, y + l].frameY = (short) num7;
                        Main.tile[x + k, y + l].type = type;
                    }
                }
            }
        }
    }

    public static void FixSunflowers()
    {
        for (int i = 5; i < Main.maxTilesX - 5; i++)
        {
            for (int j = 5; (double) j < Main.worldSurface; j++)
            {
                if (Main.tile[i, j].active() && Main.tile[i, j].type == 27)
                {
                    FixSunflower(i, j);
                }
            }
        }
    }

    public static void FixSunflower(int i, int j)
    {
        if (Main.tile[i, j].type == 27)
        {
            int num = 0;
            num += Main.tile[i, j].frameX / 18;
            int num2 = j + Main.tile[i, j].frameY / 18 * -1;
            while (num > 1)
            {
                num -= 2;
            }

            num *= -1;
            num += i;
            int num3 = genRand.Next(3) * 36;
            int num4 = 0;
            for (int k = num; k < num + 2; k++)
            {
                for (int l = num2; l < num2 + 4; l++)
                {
                    Main.tile[k, l].frameX = (short) (num4 + num3);
                }

                num4 += 18;
            }
        }
    }

    public static void CheckSunflower(int i, int j, int type = 27)
    {
        if (!destroyObject)
        {
            bool flag = false;
            int num = 0;
            num += Main.tile[i, j].frameX / 18;
            int num2 = j + Main.tile[i, j].frameY / 18 * -1;
            while (num > 1)
            {
                num -= 2;
            }

            num *= -1;
            num += i;
            for (int k = num; k < num + 2; k++)
            {
                for (int l = num2; l < num2 + 4; l++)
                {
                    if (Main.tile[k, l] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num3 = k;
                        int num4 = l;
                        Tile tile2 = new Tile();
                        tile[num3, num4] = tile2;
                    }

                    int num5;
                    for (num5 = Main.tile[k, l].frameX / 18; num5 > 1; num5 -= 2)
                    {
                    }

                    if (!Main.tile[k, l].nactive() || Main.tile[k, l].type != type || num5 != k - num ||
                        Main.tile[k, l].frameY != (l - num2) * 18)
                    {
                        flag = true;
                    }
                }

                if (Main.tile[k, num2 + 4] == null)
                {
                    Tile[,] tile3 = Main.tile;
                    int num6 = k;
                    int num7 = num2 + 4;
                    Tile tile4 = new Tile();
                    tile3[num6, num7] = tile4;
                }

                if (!Main.tile[k, num2 + 4].nactive() ||
                    (Main.tile[k, num2 + 4].type != 2 && Main.tile[k, num2 + 4].type != 109))
                {
                    flag = true;
                }

                if (!SolidTile(k, num2 + 4))
                {
                    flag = true;
                }
            }

            if (flag)
            {
                destroyObject = true;
                for (int m = num; m < num + 2; m++)
                {
                    for (int n = num2; n < num2 + 4; n++)
                    {
                        if (Main.tile[m, n].type == type && Main.tile[m, n].active())
                        {
                            KillTile(m, n, false, false, false);
                        }
                    }
                }

                Item.NewItem(i * 16, j * 16, 32, 32, 63, 1, false, 0, false, false);
                destroyObject = false;
            }
        }
    }

    public static void CheckDye(int x, int y)
    {
        switch (Main.tile[x, y].frameX / 34)
        {
            case 7:
                if (!SolidTile(x, y - 1))
                {
                    KillTile(x, y, false, false, false);
                }

                break;
            case 6:
                if (!Main.tile[x, y + 1].nactive() || Main.tile[x, y + 1].type != 80)
                {
                    KillTile(x, y, false, false, false);
                }

                break;
            default:
                if (!SolidTile(x, y + 1))
                {
                    KillTile(x, y, false, false, false);
                }

                break;
        }
    }

    public static void PlaceDye(int x, int y, int style)
    {
        bool flag = false;
        if (style == 7)
        {
            if (Main.tile[x, y + 1].active() && Main.tile[x, y + 1].type != 3 && Main.tile[x, y + 1].type != 51 &&
                Main.tile[x, y + 1].type != 61 && Main.tile[x, y + 1].type != 73 && Main.tile[x, y + 1].type != 74 &&
                Main.tile[x, y + 1].type != 184)
            {
                return;
            }

            if (SolidTile(x, y - 1) && !Main.tile[x, y + 1].active())
            {
                flag = true;
            }
        }
        else
        {
            if (Main.tile[x, y - 1].active() && Main.tile[x, y - 1].type != 3 && Main.tile[x, y - 1].type != 51 &&
                Main.tile[x, y - 1].type != 61 && Main.tile[x, y - 1].type != 73 && Main.tile[x, y - 1].type != 74 &&
                Main.tile[x, y - 1].type != 184)
            {
                return;
            }

            if (style == 6)
            {
                if (Main.tile[x, y + 1].nactive() && Main.tile[x, y + 1].type == 80 &&
                    !Main.tile[x - 1, y + 1].active() && !Main.tile[x + 1, y + 1].active())
                {
                    flag = true;
                }
            }
            else if (SolidTile(x, y + 1) && !Main.tile[x, y - 1].active())
            {
                if (style == 5)
                {
                    if (Main.tile[x, y].liquid == 255)
                    {
                        flag = true;
                    }
                }
                else if (style >= 8 && style <= 11)
                {
                    flag = true;
                }
                else if (Main.tile[x, y].liquid == 0)
                {
                    if (style == 3 || style == 4)
                    {
                        if (Main.tile[x, y].wall == 0)
                        {
                            flag = true;
                        }
                    }
                    else
                    {
                        flag = true;
                    }
                }
            }
        }

        if (flag)
        {
            Main.tile[x, y].type = 227;
            Main.tile[x, y].active(true);
            Main.tile[x, y].halfBrick(false);
            Main.tile[x, y].slope(0);
            Main.tile[x, y].frameY = 0;
            Main.tile[x, y].frameX = (short) (34 * style);
        }
    }

    public static bool PlacePot(int x, int y, ushort type = 28, int style = 0)
    {
        bool flag = true;
        for (int i = x; i < x + 2; i++)
        {
            for (int j = y - 1; j < y + 1; j++)
            {
                if (Main.tile[i, j] == null)
                {
                    Tile[,] tile = Main.tile;
                    int num = i;
                    int num2 = j;
                    Tile tile2 = new Tile();
                    tile[num, num2] = tile2;
                }

                if (Main.tile[i, j].active())
                {
                    flag = false;
                }
            }

            if (Main.tile[i, y + 1] == null)
            {
                Tile[,] tile3 = Main.tile;
                int num3 = i;
                int num4 = y + 1;
                Tile tile4 = new Tile();
                tile3[num3, num4] = tile4;
            }

            if (!Main.tile[i, y + 1].nactive() || Main.tile[i, y + 1].halfBrick() || Main.tile[i, y + 1].slope() != 0 ||
                !Main.tileSolid[Main.tile[i, y + 1].type])
            {
                flag = false;
            }
        }

        if (flag)
        {
            int num5 = genRand.Next(3) * 36;
            for (int k = 0; k < 2; k++)
            {
                for (int l = -1; l < 1; l++)
                {
                    int num6 = k * 18 + num5;
                    int num7 = (l + 1) * 18;
                    Main.tile[x + k, y + l].active(true);
                    Main.tile[x + k, y + l].frameX = (short) num6;
                    Main.tile[x + k, y + l].frameY = (short) (num7 + style * 36);
                    Main.tile[x + k, y + l].type = type;
                    Main.tile[x + k, y + l].halfBrick(false);
                }
            }

            return true;
        }

        return false;
    }

    public static bool CheckCactus(int i, int j)
    {
        int num = j;
        int num2 = i;
        while (Main.tile[num2, num] != null && Main.tile[num2, num].active() && Main.tile[num2, num].type == 80)
        {
            num++;
            if (Main.tile[num2, num] == null)
            {
                return false;
            }

            if (!Main.tile[num2, num].active() || Main.tile[num2, num].type != 80)
            {
                if (Main.tile[num2 - 1, num] != null && Main.tile[num2 - 1, num].active() &&
                    Main.tile[num2 - 1, num].type == 80 && Main.tile[num2 - 1, num - 1] != null &&
                    Main.tile[num2 - 1, num - 1].active() && Main.tile[num2 - 1, num - 1].type == 80 && num2 >= i)
                {
                    num2--;
                }

                if (Main.tile[num2 + 1, num] != null && Main.tile[num2 + 1, num].active() &&
                    Main.tile[num2 + 1, num].type == 80 && Main.tile[num2 + 1, num - 1] != null &&
                    Main.tile[num2 + 1, num - 1].active() && Main.tile[num2 + 1, num - 1].type == 80 && num2 <= i)
                {
                    num2++;
                }
            }
        }

        if (!Main.tile[num2, num].nactive() || Main.tile[num2, num].halfBrick() || Main.tile[num2, num].slope() != 0 ||
            (Main.tile[num2, num].type != 53 && Main.tile[num2, num].type != 112 && Main.tile[num2, num].type != 116 &&
             Main.tile[num2, num].type != 234))
        {
            KillTile(i, j, false, false, false);
            return true;
        }

        if (i != num2)
        {
            if ((!Main.tile[i, j + 1].active() || Main.tile[i, j + 1].type != 80) &&
                (!Main.tile[i - 1, j].active() || Main.tile[i - 1, j].type != 80) &&
                (!Main.tile[i + 1, j].active() || Main.tile[i + 1, j].type != 80))
            {
                KillTile(i, j, false, false, false);
                return true;
            }
        }
        else if (i == num2 && (!Main.tile[i, j + 1].active() ||
                               (Main.tile[i, j + 1].type != 80 && Main.tile[i, j + 1].type != 53 &&
                                Main.tile[i, j + 1].type != 112 && Main.tile[i, j + 1].type != 116 &&
                                Main.tile[i, j + 1].type != 234)))
        {
            KillTile(i, j, false, false, false);
            return true;
        }

        return false;
    }

    public static void PlantCactus(int i, int j)
    {
        GrowCactus(i, j);
        for (int k = 0; k < 150; k++)
        {
            int i2 = genRand.Next(i - 1, i + 2);
            int j2 = genRand.Next(j - 10, j + 2);
            GrowCactus(i2, j2);
        }
    }

    public static void CheckOrb(int i, int j, int type)
    {
        int frameX = Main.tile[i, j].frameX;
        bool flag = false;
        if (frameX >= 36)
        {
            flag = true;
        }

        if (!destroyObject)
        {
            int num = (Main.tile[i, j].frameX != 0 && Main.tile[i, j].frameX != 36) ? (i - 1) : i;
            int num2 = (Main.tile[i, j].frameY != 0) ? (j - 1) : j;
            for (int k = 0; k < 2; k++)
            {
                for (int l = 0; l < 2; l++)
                {
                    Tile tile = Main.tile[num + k, num2 + l];
                    if (tile != null && (!tile.nactive() || tile.type != type))
                    {
                        destroyObject = true;
                        break;
                    }
                }

                if (destroyObject)
                {
                    break;
                }

                if (type == 12)
                {
                    Tile tile = Main.tile[num + k, num2 + 2];
                    if (tile != null && (!tile.nactive() || !Main.tileSolid[tile.type] || tile.blockType() != 0))
                    {
                        destroyObject = true;
                        break;
                    }
                }
            }

            if (destroyObject)
            {
                for (int m = num; m < num + 2; m++)
                {
                    for (int n = num2; n < num2 + 2; n++)
                    {
                        if (Main.tile[m, n].type == type)
                        {
                            KillTile(m, n, false, false, false);
                        }
                    }
                }

                if (Main.netMode != 1 && !noTileActions)
                {
                    switch (type)
                    {
                        case 12:
                            Item.NewItem(num * 16, num2 * 16, 32, 32, 29, 1, false, 0, false, false);
                            break;
                        case 31:
                            if (genRand.Next(2) == 0)
                            {
                                spawnMeteor = true;
                            }

                            if (flag)
                            {
                                int num3 = Main.rand.Next(5);
                                if (!shadowOrbSmashed)
                                {
                                    num3 = 0;
                                }

                                switch (num3)
                                {
                                    case 0:
                                    {
                                        Item.NewItem(num * 16, num2 * 16, 32, 32, 800, 1, false, -1, false, false);
                                        int stack = genRand.Next(100, 101);
                                        Item.NewItem(num * 16, num2 * 16, 32, 32, 97, stack, false, 0, false, false);
                                        break;
                                    }
                                    case 1:
                                        Item.NewItem(num * 16, num2 * 16, 32, 32, 1256, 1, false, -1, false, false);
                                        break;
                                    case 2:
                                        Item.NewItem(num * 16, num2 * 16, 32, 32, 802, 1, false, -1, false, false);
                                        break;
                                    case 3:
                                        Item.NewItem(num * 16, num2 * 16, 32, 32, 3062, 1, false, -1, false, false);
                                        break;
                                    case 4:
                                        Item.NewItem(num * 16, num2 * 16, 32, 32, 1290, 1, false, -1, false, false);
                                        break;
                                }
                            }
                            else
                            {
                                int num4 = Main.rand.Next(5);
                                if (!shadowOrbSmashed)
                                {
                                    num4 = 0;
                                }

                                switch (num4)
                                {
                                    case 0:
                                    {
                                        Item.NewItem(num * 16, num2 * 16, 32, 32, 96, 1, false, -1, false, false);
                                        int stack2 = genRand.Next(100, 101);
                                        Item.NewItem(num * 16, num2 * 16, 32, 32, 97, stack2, false, 0, false, false);
                                        break;
                                    }
                                    case 1:
                                        Item.NewItem(num * 16, num2 * 16, 32, 32, 64, 1, false, -1, false, false);
                                        break;
                                    case 2:
                                        Item.NewItem(num * 16, num2 * 16, 32, 32, 162, 1, false, -1, false, false);
                                        break;
                                    case 3:
                                        Item.NewItem(num * 16, num2 * 16, 32, 32, 115, 1, false, -1, false, false);
                                        break;
                                    case 4:
                                        Item.NewItem(num * 16, num2 * 16, 32, 32, 111, 1, false, -1, false, false);
                                        break;
                                }
                            }

                            shadowOrbSmashed = true;
                            shadowOrbCount++;
                            if (shadowOrbCount >= 3)
                            {
                                shadowOrbCount = 0;
                                float num5 = (float) (num * 16);
                                float num6 = (float) (num2 * 16);
                                float num7 = -1f;
                                int plr = 0;
                                for (int num8 = 0; num8 < 255; num8++)
                                {
                                    float num9 = Math.Abs(Main.player[num8].position.X - num5) +
                                                 Math.Abs(Main.player[num8].position.Y - num6);
                                    if (num9 < num7 || num7 == -1f)
                                    {
                                        plr = num8;
                                        num7 = num9;
                                    }
                                }

                                if (flag)
                                {
                                    NPC.SpawnOnPlayer(plr, 266);
                                }
                                else
                                {
                                    NPC.SpawnOnPlayer(plr, 13);
                                }
                            }
                            else
                            {
                                LocalizedText localizedText = Lang.misc[10];
                                if (shadowOrbCount == 2)
                                {
                                    localizedText = Lang.misc[11];
                                }

                                if (Main.netMode == 0)
                                {
                                    Main.NewText(localizedText.ToString(), 50, byte.MaxValue, 130, false);
                                }
                                else if (Main.netMode == 2)
                                {
                                    NetMessage.BroadcastChatMessage(NetworkText.FromKey(localizedText.Key),
                                        new Color(50, 255, 130), -1);
                                }
                            }

                            AchievementsHelper.NotifyProgressionEvent(7);
                            break;
                    }
                }

                if (flag)
                {
                    Main.PlaySound(4, i * 16, j * 16, 1, 1f, 0f);
                }
                else
                {
                    Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
                }

                destroyObject = false;
            }
        }
    }

    public static void CheckPalmTree(int i, int j)
    {
        int num = -1;
        int num2 = -1;
        int type = Main.tile[i, j].type;
        int frameX = Main.tile[i, j].frameX;
        int frameY = Main.tile[i, j].frameY;
        if (Main.tile[i, j - 1] != null && Main.tile[i, j - 1].active())
        {
            num = Main.tile[i, j - 1].type;
        }

        if (Main.tile[i, j + 1] != null && Main.tile[i, j + 1].active())
        {
            num2 = Main.tile[i, j + 1].type;
        }

        if (num2 == 53)
        {
            num2 = 53;
        }

        if (num2 == 234)
        {
            num2 = 53;
        }

        if (num2 == 116)
        {
            num2 = 53;
        }

        if (num2 == 112)
        {
            num2 = 53;
        }

        if (num2 != 53 && num2 != type)
        {
            KillTile(i, j, false, false, false);
        }

        if ((Main.tile[i, j].frameX == 66 || Main.tile[i, j].frameX == 220) && num2 != 53)
        {
            KillTile(i, j, false, false, false);
        }

        if (num != type && Main.tile[i, j].frameX <= 44)
        {
            Main.tile[i, j].frameX = (short) (genRand.Next(7, 10) * 22);
        }
        else if (num != type && Main.tile[i, j].frameX == 66)
        {
            Main.tile[i, j].frameX = 220;
        }

        if (Main.tile[i, j].frameX != frameX && Main.tile[i, j].frameY != frameY && frameX >= 0 && frameY >= 0)
        {
            TileFrame(i - 1, j, false, false);
            TileFrame(i + 1, j, false, false);
            TileFrame(i, j - 1, false, false);
            TileFrame(i, j + 1, false, false);
        }
    }

    public static void CheckTree(int i, int j)
    {
        int num = -1;
        int num2 = -1;
        int num3 = -1;
        int num4 = -1;
        int type = Main.tile[i, j].type;
        int frameX = Main.tile[i, j].frameX;
        int frameY = Main.tile[i, j].frameY;
        if (Main.tile[i - 1, j] != null && Main.tile[i - 1, j].active())
        {
            num2 = Main.tile[i - 1, j].type;
        }

        if (Main.tile[i + 1, j] != null && Main.tile[i + 1, j].active())
        {
            num3 = Main.tile[i + 1, j].type;
        }

        if (Main.tile[i, j - 1] != null && Main.tile[i, j - 1].active())
        {
            num = Main.tile[i, j - 1].type;
        }

        if (Main.tile[i, j + 1] != null && Main.tile[i, j + 1].active())
        {
            num4 = Main.tile[i, j + 1].type;
        }

        if (Main.tile[i - 1, j - 1] != null && Main.tile[i - 1, j - 1].active())
        {
            ushort type2 = Main.tile[i - 1, j - 1].type;
        }

        if (Main.tile[i + 1, j - 1] != null && Main.tile[i + 1, j - 1].active())
        {
            ushort type3 = Main.tile[i + 1, j - 1].type;
        }

        if (Main.tile[i - 1, j + 1] != null && Main.tile[i - 1, j + 1].active())
        {
            ushort type4 = Main.tile[i - 1, j + 1].type;
        }

        if (Main.tile[i + 1, j + 1] != null && Main.tile[i + 1, j + 1].active())
        {
            ushort type5 = Main.tile[i + 1, j + 1].type;
        }

        if (num4 == 23)
        {
            num4 = 2;
        }

        if (num4 == 60)
        {
            num4 = 2;
        }

        if (num4 == 70)
        {
            num4 = 2;
        }

        if (num4 == 109)
        {
            num4 = 2;
        }

        if (num4 == 147)
        {
            num4 = 2;
        }

        if (num4 == 199)
        {
            num4 = 2;
        }

        if (num4 != 2 && num4 != type && ((Main.tile[i, j].frameX == 0 && Main.tile[i, j].frameY <= 130) ||
                                          (Main.tile[i, j].frameX == 22 && Main.tile[i, j].frameY <= 130) ||
                                          (Main.tile[i, j].frameX == 44 && Main.tile[i, j].frameY <= 130)))
        {
            KillTile(i, j, false, false, false);
        }

        if (Main.tile[i, j].frameX >= 22 && Main.tile[i, j].frameX <= 44 && Main.tile[i, j].frameY >= 132 &&
            Main.tile[i, j].frameY <= 176)
        {
            if (num4 != 2)
            {
                KillTile(i, j, false, false, false);
            }
            else if ((Main.tile[i, j].frameX != 22 || num2 != type) && (Main.tile[i, j].frameX != 44 || num3 != type))
            {
                KillTile(i, j, false, false, false);
            }
        }
        else if ((Main.tile[i, j].frameX == 88 && Main.tile[i, j].frameY >= 0 && Main.tile[i, j].frameY <= 44) ||
                 (Main.tile[i, j].frameX == 66 && Main.tile[i, j].frameY >= 66 && Main.tile[i, j].frameY <= 130) ||
                 (Main.tile[i, j].frameX == 110 && Main.tile[i, j].frameY >= 66 && Main.tile[i, j].frameY <= 110) ||
                 (Main.tile[i, j].frameX == 132 && Main.tile[i, j].frameY >= 0 && Main.tile[i, j].frameY <= 176))
        {
            if (num2 == type && num3 == type)
            {
                if (Main.tile[i, j].frameNumber() == 0)
                {
                    Main.tile[i, j].frameX = 110;
                    Main.tile[i, j].frameY = 66;
                }

                if (Main.tile[i, j].frameNumber() == 1)
                {
                    Main.tile[i, j].frameX = 110;
                    Main.tile[i, j].frameY = 88;
                }

                if (Main.tile[i, j].frameNumber() == 2)
                {
                    Main.tile[i, j].frameX = 110;
                    Main.tile[i, j].frameY = 110;
                }
            }
            else if (num2 == type)
            {
                if (Main.tile[i, j].frameNumber() == 0)
                {
                    Main.tile[i, j].frameX = 88;
                    Main.tile[i, j].frameY = 0;
                }

                if (Main.tile[i, j].frameNumber() == 1)
                {
                    Main.tile[i, j].frameX = 88;
                    Main.tile[i, j].frameY = 22;
                }

                if (Main.tile[i, j].frameNumber() == 2)
                {
                    Main.tile[i, j].frameX = 88;
                    Main.tile[i, j].frameY = 44;
                }
            }
            else if (num3 == type)
            {
                if (Main.tile[i, j].frameNumber() == 0)
                {
                    Main.tile[i, j].frameX = 66;
                    Main.tile[i, j].frameY = 66;
                }

                if (Main.tile[i, j].frameNumber() == 1)
                {
                    Main.tile[i, j].frameX = 66;
                    Main.tile[i, j].frameY = 88;
                }

                if (Main.tile[i, j].frameNumber() == 2)
                {
                    Main.tile[i, j].frameX = 66;
                    Main.tile[i, j].frameY = 110;
                }
            }
            else
            {
                if (Main.tile[i, j].frameNumber() == 0)
                {
                    Main.tile[i, j].frameX = 0;
                    Main.tile[i, j].frameY = 0;
                }

                if (Main.tile[i, j].frameNumber() == 1)
                {
                    Main.tile[i, j].frameX = 0;
                    Main.tile[i, j].frameY = 22;
                }

                if (Main.tile[i, j].frameNumber() == 2)
                {
                    Main.tile[i, j].frameX = 0;
                    Main.tile[i, j].frameY = 44;
                }
            }
        }

        if (Main.tile[i, j].frameY >= 132 && Main.tile[i, j].frameY <= 176 &&
            (Main.tile[i, j].frameX == 0 || Main.tile[i, j].frameX == 66 || Main.tile[i, j].frameX == 88))
        {
            if (num4 != 2)
            {
                KillTile(i, j, false, false, false);
            }

            if (num2 != type && num3 != type)
            {
                if (Main.tile[i, j].frameNumber() == 0)
                {
                    Main.tile[i, j].frameX = 0;
                    Main.tile[i, j].frameY = 0;
                }

                if (Main.tile[i, j].frameNumber() == 1)
                {
                    Main.tile[i, j].frameX = 0;
                    Main.tile[i, j].frameY = 22;
                }

                if (Main.tile[i, j].frameNumber() == 2)
                {
                    Main.tile[i, j].frameX = 0;
                    Main.tile[i, j].frameY = 44;
                }
            }
            else if (num2 != type)
            {
                if (Main.tile[i, j].frameNumber() == 0)
                {
                    Main.tile[i, j].frameX = 0;
                    Main.tile[i, j].frameY = 132;
                }

                if (Main.tile[i, j].frameNumber() == 1)
                {
                    Main.tile[i, j].frameX = 0;
                    Main.tile[i, j].frameY = 154;
                }

                if (Main.tile[i, j].frameNumber() == 2)
                {
                    Main.tile[i, j].frameX = 0;
                    Main.tile[i, j].frameY = 176;
                }
            }
            else if (num3 != type)
            {
                if (Main.tile[i, j].frameNumber() == 0)
                {
                    Main.tile[i, j].frameX = 66;
                    Main.tile[i, j].frameY = 132;
                }

                if (Main.tile[i, j].frameNumber() == 1)
                {
                    Main.tile[i, j].frameX = 66;
                    Main.tile[i, j].frameY = 154;
                }

                if (Main.tile[i, j].frameNumber() == 2)
                {
                    Main.tile[i, j].frameX = 66;
                    Main.tile[i, j].frameY = 176;
                }
            }
            else
            {
                if (Main.tile[i, j].frameNumber() == 0)
                {
                    Main.tile[i, j].frameX = 88;
                    Main.tile[i, j].frameY = 132;
                }

                if (Main.tile[i, j].frameNumber() == 1)
                {
                    Main.tile[i, j].frameX = 88;
                    Main.tile[i, j].frameY = 154;
                }

                if (Main.tile[i, j].frameNumber() == 2)
                {
                    Main.tile[i, j].frameX = 88;
                    Main.tile[i, j].frameY = 176;
                }
            }
        }

        if ((Main.tile[i, j].frameX == 66 &&
             (Main.tile[i, j].frameY == 0 || Main.tile[i, j].frameY == 22 || Main.tile[i, j].frameY == 44)) ||
            (Main.tile[i, j].frameX == 44 && (Main.tile[i, j].frameY == 198 || Main.tile[i, j].frameY == 220 ||
                                              Main.tile[i, j].frameY == 242)))
        {
            if (num3 != type)
            {
                KillTile(i, j, false, false, false);
            }
        }
        else if ((Main.tile[i, j].frameX == 88 &&
                  (Main.tile[i, j].frameY == 66 || Main.tile[i, j].frameY == 88 || Main.tile[i, j].frameY == 110)) ||
                 (Main.tile[i, j].frameX == 66 && (Main.tile[i, j].frameY == 198 || Main.tile[i, j].frameY == 220 ||
                                                   Main.tile[i, j].frameY == 242)))
        {
            if (num2 != type)
            {
                KillTile(i, j, false, false, false);
            }
        }
        else if (num4 == -1 || num4 == 23)
        {
            KillTile(i, j, false, false, false);
        }
        else if (num != type && Main.tile[i, j].frameY < 198 &&
                 ((Main.tile[i, j].frameX != 22 && Main.tile[i, j].frameX != 44) || Main.tile[i, j].frameY < 132))
        {
            if (num2 == type || num3 == type)
            {
                if (num4 == type)
                {
                    if (num2 == type && num3 == type)
                    {
                        if (Main.tile[i, j].frameNumber() == 0)
                        {
                            Main.tile[i, j].frameX = 132;
                            Main.tile[i, j].frameY = 132;
                        }

                        if (Main.tile[i, j].frameNumber() == 1)
                        {
                            Main.tile[i, j].frameX = 132;
                            Main.tile[i, j].frameY = 154;
                        }

                        if (Main.tile[i, j].frameNumber() == 2)
                        {
                            Main.tile[i, j].frameX = 132;
                            Main.tile[i, j].frameY = 176;
                        }
                    }
                    else if (num2 == type)
                    {
                        if (Main.tile[i, j].frameNumber() == 0)
                        {
                            Main.tile[i, j].frameX = 132;
                            Main.tile[i, j].frameY = 0;
                        }

                        if (Main.tile[i, j].frameNumber() == 1)
                        {
                            Main.tile[i, j].frameX = 132;
                            Main.tile[i, j].frameY = 22;
                        }

                        if (Main.tile[i, j].frameNumber() == 2)
                        {
                            Main.tile[i, j].frameX = 132;
                            Main.tile[i, j].frameY = 44;
                        }
                    }
                    else if (num3 == type)
                    {
                        if (Main.tile[i, j].frameNumber() == 0)
                        {
                            Main.tile[i, j].frameX = 132;
                            Main.tile[i, j].frameY = 66;
                        }

                        if (Main.tile[i, j].frameNumber() == 1)
                        {
                            Main.tile[i, j].frameX = 132;
                            Main.tile[i, j].frameY = 88;
                        }

                        if (Main.tile[i, j].frameNumber() == 2)
                        {
                            Main.tile[i, j].frameX = 132;
                            Main.tile[i, j].frameY = 110;
                        }
                    }
                }
                else if (num2 == type && num3 == type)
                {
                    if (Main.tile[i, j].frameNumber() == 0)
                    {
                        Main.tile[i, j].frameX = 154;
                        Main.tile[i, j].frameY = 132;
                    }

                    if (Main.tile[i, j].frameNumber() == 1)
                    {
                        Main.tile[i, j].frameX = 154;
                        Main.tile[i, j].frameY = 154;
                    }

                    if (Main.tile[i, j].frameNumber() == 2)
                    {
                        Main.tile[i, j].frameX = 154;
                        Main.tile[i, j].frameY = 176;
                    }
                }
                else if (num2 == type)
                {
                    if (Main.tile[i, j].frameNumber() == 0)
                    {
                        Main.tile[i, j].frameX = 154;
                        Main.tile[i, j].frameY = 0;
                    }

                    if (Main.tile[i, j].frameNumber() == 1)
                    {
                        Main.tile[i, j].frameX = 154;
                        Main.tile[i, j].frameY = 22;
                    }

                    if (Main.tile[i, j].frameNumber() == 2)
                    {
                        Main.tile[i, j].frameX = 154;
                        Main.tile[i, j].frameY = 44;
                    }
                }
                else if (num3 == type)
                {
                    if (Main.tile[i, j].frameNumber() == 0)
                    {
                        Main.tile[i, j].frameX = 154;
                        Main.tile[i, j].frameY = 66;
                    }

                    if (Main.tile[i, j].frameNumber() == 1)
                    {
                        Main.tile[i, j].frameX = 154;
                        Main.tile[i, j].frameY = 88;
                    }

                    if (Main.tile[i, j].frameNumber() == 2)
                    {
                        Main.tile[i, j].frameX = 154;
                        Main.tile[i, j].frameY = 110;
                    }
                }
            }
            else
            {
                if (Main.tile[i, j].frameNumber() == 0)
                {
                    Main.tile[i, j].frameX = 110;
                    Main.tile[i, j].frameY = 0;
                }

                if (Main.tile[i, j].frameNumber() == 1)
                {
                    Main.tile[i, j].frameX = 110;
                    Main.tile[i, j].frameY = 22;
                }

                if (Main.tile[i, j].frameNumber() == 2)
                {
                    Main.tile[i, j].frameX = 110;
                    Main.tile[i, j].frameY = 44;
                }
            }
        }

        if (Main.tile[i, j].frameX != frameX && Main.tile[i, j].frameY != frameY && frameX >= 0 && frameY >= 0)
        {
            TileFrame(i - 1, j, false, false);
            TileFrame(i + 1, j, false, false);
            TileFrame(i, j - 1, false, false);
            TileFrame(i, j + 1, false, false);
        }
    }

    public static void Convert(int i, int j, int conversionType, int size = 4)
    {
        for (int k = i - size; k <= i + size; k++)
        {
            for (int l = j - size; l <= j + size; l++)
            {
                if (InWorld(k, l, 1) && Math.Abs(k - i) + Math.Abs(l - j) < 6)
                {
                    int type = Main.tile[k, l].type;
                    int wall = Main.tile[k, l].wall;
                    switch (conversionType)
                    {
                        case 4:
                            if (type <= 470 && wall <= 231)
                            {
                                if (WallID.Sets.Conversion.Grass[wall] && wall != 81)
                                {
                                    Main.tile[k, l].wall = 81;
                                    SquareWallFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (WallID.Sets.Conversion.Stone[wall] && wall != 83)
                                {
                                    Main.tile[k, l].wall = 83;
                                    SquareWallFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (WallID.Sets.Conversion.HardenedSand[wall] && wall != 218)
                                {
                                    Main.tile[k, l].wall = 218;
                                    SquareWallFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (WallID.Sets.Conversion.Sandstone[wall] && wall != 221)
                                {
                                    Main.tile[k, l].wall = 221;
                                    SquareWallFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }

                                if ((Main.tileMoss[type] || TileID.Sets.Conversion.Stone[type]) && type != 203)
                                {
                                    Main.tile[k, l].type = 203;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (TileID.Sets.Conversion.Grass[type] && type != 199)
                                {
                                    Main.tile[k, l].type = 199;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (TileID.Sets.Conversion.Ice[type] && type != 200)
                                {
                                    Main.tile[k, l].type = 200;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (TileID.Sets.Conversion.Sand[type] && type != 234)
                                {
                                    Main.tile[k, l].type = 234;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (TileID.Sets.Conversion.HardenedSand[type] && type != 399)
                                {
                                    Main.tile[k, l].type = 399;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (TileID.Sets.Conversion.Sandstone[type] && type != 401)
                                {
                                    Main.tile[k, l].type = 401;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (TileID.Sets.Conversion.Thorn[type] && type != 352)
                                {
                                    Main.tile[k, l].type = 352;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }

                                if (type == 59 && (Main.tile[k - 1, l].type == 199 || Main.tile[k + 1, l].type == 199 ||
                                                   Main.tile[k, l - 1].type == 199 || Main.tile[k, l + 1].type == 199))
                                {
                                    Main.tile[k, l].type = 0;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                            }

                            break;
                        case 2:
                            if (type <= 470 && wall <= 231)
                            {
                                if (WallID.Sets.Conversion.Grass[wall] && wall != 70)
                                {
                                    Main.tile[k, l].wall = 70;
                                    SquareWallFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (WallID.Sets.Conversion.Stone[wall] && wall != 28)
                                {
                                    Main.tile[k, l].wall = 28;
                                    SquareWallFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (WallID.Sets.Conversion.HardenedSand[wall] && wall != 219)
                                {
                                    Main.tile[k, l].wall = 219;
                                    SquareWallFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (WallID.Sets.Conversion.Sandstone[wall] && wall != 222)
                                {
                                    Main.tile[k, l].wall = 222;
                                    SquareWallFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }

                                if ((Main.tileMoss[type] || TileID.Sets.Conversion.Stone[type]) && type != 117)
                                {
                                    Main.tile[k, l].type = 117;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (TileID.Sets.Conversion.Grass[type] && type != 109)
                                {
                                    Main.tile[k, l].type = 109;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (TileID.Sets.Conversion.Ice[type] && type != 164)
                                {
                                    Main.tile[k, l].type = 164;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (TileID.Sets.Conversion.Sand[type] && type != 116)
                                {
                                    Main.tile[k, l].type = 116;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (TileID.Sets.Conversion.HardenedSand[type] && type != 402)
                                {
                                    Main.tile[k, l].type = 402;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (TileID.Sets.Conversion.Sandstone[type] && type != 403)
                                {
                                    Main.tile[k, l].type = 403;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (TileID.Sets.Conversion.Thorn[type])
                                {
                                    KillTile(k, l, false, false, false);
                                    if (Main.netMode == 1)
                                    {
                                        NetMessage.SendData(17, -1, -1, null, 0, (float) k, (float) l, 0f, 0, 0, 0);
                                    }
                                }

                                if (type == 59 && (Main.tile[k - 1, l].type == 109 || Main.tile[k + 1, l].type == 109 ||
                                                   Main.tile[k, l - 1].type == 109 || Main.tile[k, l + 1].type == 109))
                                {
                                    Main.tile[k, l].type = 0;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                            }

                            break;
                        case 1:
                            if (type <= 470 && wall <= 231)
                            {
                                if (WallID.Sets.Conversion.Grass[wall] && wall != 69)
                                {
                                    Main.tile[k, l].wall = 69;
                                    SquareWallFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (WallID.Sets.Conversion.Stone[wall] && wall != 3)
                                {
                                    Main.tile[k, l].wall = 3;
                                    SquareWallFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (WallID.Sets.Conversion.HardenedSand[wall] && wall != 217)
                                {
                                    Main.tile[k, l].wall = 217;
                                    SquareWallFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (WallID.Sets.Conversion.Sandstone[wall] && wall != 220)
                                {
                                    Main.tile[k, l].wall = 220;
                                    SquareWallFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }

                                if ((Main.tileMoss[type] || TileID.Sets.Conversion.Stone[type]) && type != 25)
                                {
                                    Main.tile[k, l].type = 25;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (TileID.Sets.Conversion.Grass[type] && type != 23)
                                {
                                    Main.tile[k, l].type = 23;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (TileID.Sets.Conversion.Ice[type] && type != 163)
                                {
                                    Main.tile[k, l].type = 163;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (TileID.Sets.Conversion.Sand[type] && type != 112)
                                {
                                    Main.tile[k, l].type = 112;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (TileID.Sets.Conversion.HardenedSand[type] && type != 398)
                                {
                                    Main.tile[k, l].type = 398;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (TileID.Sets.Conversion.Sandstone[type] && type != 400)
                                {
                                    Main.tile[k, l].type = 400;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                                else if (TileID.Sets.Conversion.Thorn[type] && type != 32)
                                {
                                    Main.tile[k, l].type = 32;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }

                                if (type == 59 && (Main.tile[k - 1, l].type == 23 || Main.tile[k + 1, l].type == 23 ||
                                                   Main.tile[k, l - 1].type == 23 || Main.tile[k, l + 1].type == 23))
                                {
                                    Main.tile[k, l].type = 0;
                                    SquareTileFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                                }
                            }

                            break;
                        case 3:
                            if (Main.tile[k, l].wall == 64 || Main.tile[k, l].wall == 15)
                            {
                                Main.tile[k, l].wall = 80;
                                SquareWallFrame(k, l, true);
                                NetMessage.SendTileSquare(-1, k, l, 3, TileChangeType.None);
                            }

                            if (Main.tile[k, l].type == 60)
                            {
                                Main.tile[k, l].type = 70;
                                SquareTileFrame(k, l, true);
                                NetMessage.SendTileSquare(-1, k, l, 3, TileChangeType.None);
                            }
                            else if (TileID.Sets.Conversion.Thorn[type])
                            {
                                KillTile(k, l, false, false, false);
                                if (Main.netMode == 1)
                                {
                                    NetMessage.SendData(17, -1, -1, null, 0, (float) k, (float) l, 0f, 0, 0, 0);
                                }
                            }

                            break;
                        default:
                            if (Main.tile[k, l].wall == 69 || Main.tile[k, l].wall == 70 || Main.tile[k, l].wall == 81)
                            {
                                if ((double) l < Main.worldSurface)
                                {
                                    if (genRand.Next(10) == 0)
                                    {
                                        Main.tile[k, l].wall = 65;
                                    }
                                    else
                                    {
                                        Main.tile[k, l].wall = 63;
                                    }
                                }
                                else
                                {
                                    Main.tile[k, l].wall = 64;
                                }

                                SquareWallFrame(k, l, true);
                                NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                            }
                            else if (Main.tile[k, l].wall == 3 || Main.tile[k, l].wall == 28 ||
                                     Main.tile[k, l].wall == 83)
                            {
                                Main.tile[k, l].wall = 1;
                                SquareWallFrame(k, l, true);
                                NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                            }
                            else if (Main.tile[k, l].wall == 80)
                            {
                                if ((double) l < Main.worldSurface + 4.0 + (double) genRand.Next(3) || (double) l >
                                    ((double) Main.maxTilesY + Main.rockLayer) / 2.0 - 3.0 + (double) genRand.Next(3))
                                {
                                    Main.tile[k, l].wall = 15;
                                    SquareWallFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 3, TileChangeType.None);
                                }
                                else
                                {
                                    Main.tile[k, l].wall = 64;
                                    SquareWallFrame(k, l, true);
                                    NetMessage.SendTileSquare(-1, k, l, 3, TileChangeType.None);
                                }
                            }
                            else if (WallID.Sets.Conversion.HardenedSand[wall] && wall != 216)
                            {
                                Main.tile[k, l].wall = 216;
                                SquareWallFrame(k, l, true);
                                NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                            }
                            else if (WallID.Sets.Conversion.Sandstone[wall] && wall != 187)
                            {
                                Main.tile[k, l].wall = 187;
                                SquareWallFrame(k, l, true);
                                NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                            }

                            if (Main.tile[k, l].type == 23 || Main.tile[k, l].type == 109 ||
                                Main.tile[k, l].type == 199)
                            {
                                Main.tile[k, l].type = 2;
                                SquareTileFrame(k, l, true);
                                NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                            }
                            else if (Main.tile[k, l].type == 117 || Main.tile[k, l].type == 25 ||
                                     Main.tile[k, l].type == 203)
                            {
                                Main.tile[k, l].type = 1;
                                SquareTileFrame(k, l, true);
                                NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                            }
                            else if (Main.tile[k, l].type == 112 || Main.tile[k, l].type == 116 ||
                                     Main.tile[k, l].type == 234)
                            {
                                Main.tile[k, l].type = 53;
                                SquareTileFrame(k, l, true);
                                NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                            }
                            else if (Main.tile[k, l].type == 398 || Main.tile[k, l].type == 402 ||
                                     Main.tile[k, l].type == 399)
                            {
                                Main.tile[k, l].type = 397;
                                SquareTileFrame(k, l, true);
                                NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                            }
                            else if (Main.tile[k, l].type == 400 || Main.tile[k, l].type == 403 ||
                                     Main.tile[k, l].type == 401)
                            {
                                Main.tile[k, l].type = 396;
                                SquareTileFrame(k, l, true);
                                NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                            }
                            else if (Main.tile[k, l].type == 164 || Main.tile[k, l].type == 163 ||
                                     Main.tile[k, l].type == 200)
                            {
                                Main.tile[k, l].type = 161;
                                SquareTileFrame(k, l, true);
                                NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                            }
                            else if (Main.tile[k, l].type == 70)
                            {
                                Main.tile[k, l].type = 60;
                                SquareTileFrame(k, l, true);
                                NetMessage.SendTileSquare(-1, k, l, 1, TileChangeType.None);
                            }
                            else if (Main.tile[k, l].type == 32 || Main.tile[k, l].type == 352)
                            {
                                KillTile(k, l, false, false, false);
                                if (Main.netMode == 1)
                                {
                                    NetMessage.SendData(17, -1, -1, null, 0, (float) k, (float) l, 0f, 0, 0, 0);
                                }
                            }

                            break;
                    }
                }
            }
        }
    }

    public static void CactusFrame(int i, int j)
    {
        try
        {
            int num = j;
            int num2 = i;
            if (!CheckCactus(i, j))
            {
                while (Main.tile[num2, num].active() && Main.tile[num2, num].type == 80)
                {
                    num++;
                    if (Main.tile[num2, num] == null)
                    {
                        return;
                    }

                    if (!Main.tile[num2, num].active() || Main.tile[num2, num].type != 80)
                    {
                        if (Main.tile[num2 - 1, num] != null && Main.tile[num2 - 1, num].active() &&
                            Main.tile[num2 - 1, num].type == 80 && Main.tile[num2 - 1, num - 1].active() &&
                            Main.tile[num2 - 1, num - 1].type == 80 && num2 >= i)
                        {
                            num2--;
                        }

                        if (Main.tile[num2 + 1, num] != null && Main.tile[num2 + 1, num].active() &&
                            Main.tile[num2 + 1, num].type == 80 && Main.tile[num2 + 1, num - 1].active() &&
                            Main.tile[num2 + 1, num - 1].type == 80 && num2 <= i)
                        {
                            num2++;
                        }
                    }
                }

                num--;
                int num3 = i - num2;
                if (Main.tile[i - 2, j] != null)
                {
                    int type = Main.tile[i - 2, j].type;
                    if (Main.tile[i - 1, j] != null)
                    {
                        int num4 = Main.tile[i - 1, j].type;
                        if (Main.tile[i + 1, j] != null)
                        {
                            int num5 = Main.tile[i + 1, j].type;
                            int num6 = Main.tile[i, j - 1].type;
                            if (num6 == 227)
                            {
                                num6 = 80;
                            }

                            int num7 = Main.tile[i, j + 1].type;
                            int num8 = Main.tile[i - 1, j + 1].type;
                            int num9 = Main.tile[i + 1, j + 1].type;
                            if (!Main.tile[i - 1, j].active())
                            {
                                num4 = -1;
                            }

                            if (!Main.tile[i + 1, j].active())
                            {
                                num5 = -1;
                            }

                            if (!Main.tile[i, j - 1].active())
                            {
                                num6 = -1;
                            }

                            if (!Main.tile[i, j + 1].active())
                            {
                                num7 = -1;
                            }

                            if (!Main.tile[i - 1, j + 1].active())
                            {
                                num8 = -1;
                            }

                            if (!Main.tile[i + 1, j + 1].active())
                            {
                                num9 = -1;
                            }

                            short num10 = Main.tile[i, j].frameX;
                            short num11 = Main.tile[i, j].frameY;
                            switch (num3)
                            {
                                case 0:
                                    if (num6 != 80)
                                    {
                                        if (num4 == 80 && num5 == 80 && num8 != 80 && num9 != 80 && type != 80)
                                        {
                                            num10 = 90;
                                            num11 = 0;
                                        }
                                        else if (num4 == 80 && num8 != 80 && type != 80)
                                        {
                                            num10 = 72;
                                            num11 = 0;
                                        }
                                        else if (num5 == 80 && num9 != 80)
                                        {
                                            num10 = 18;
                                            num11 = 0;
                                        }
                                        else
                                        {
                                            num10 = 0;
                                            num11 = 0;
                                        }
                                    }
                                    else if (num4 == 80 && num5 == 80 && num8 != 80 && num9 != 80 && type != 80)
                                    {
                                        num10 = 90;
                                        num11 = 36;
                                    }
                                    else if (num4 == 80 && num8 != 80 && type != 80)
                                    {
                                        num10 = 72;
                                        num11 = 36;
                                    }
                                    else if (num5 == 80 && num9 != 80)
                                    {
                                        num10 = 18;
                                        num11 = 36;
                                    }
                                    else if (num7 >= 0 && Main.tileSolid[num7])
                                    {
                                        num10 = 0;
                                        num11 = 36;
                                    }
                                    else
                                    {
                                        num10 = 0;
                                        num11 = 18;
                                    }

                                    break;
                                case -1:
                                    if (num5 == 80)
                                    {
                                        if (num6 != 80 && num7 != 80)
                                        {
                                            num10 = 108;
                                            num11 = 36;
                                        }
                                        else if (num7 != 80)
                                        {
                                            num10 = 54;
                                            num11 = 36;
                                        }
                                        else if (num6 != 80)
                                        {
                                            num10 = 54;
                                            num11 = 0;
                                        }
                                        else
                                        {
                                            num10 = 54;
                                            num11 = 18;
                                        }
                                    }
                                    else if (num6 != 80)
                                    {
                                        num10 = 54;
                                        num11 = 0;
                                    }
                                    else
                                    {
                                        num10 = 54;
                                        num11 = 18;
                                    }

                                    break;
                                case 1:
                                    if (num4 == 80)
                                    {
                                        if (num6 != 80 && num7 != 80)
                                        {
                                            num10 = 108;
                                            num11 = 18;
                                        }
                                        else if (num7 != 80)
                                        {
                                            num10 = 36;
                                            num11 = 36;
                                        }
                                        else if (num6 != 80)
                                        {
                                            num10 = 36;
                                            num11 = 0;
                                        }
                                        else
                                        {
                                            num10 = 36;
                                            num11 = 18;
                                        }
                                    }
                                    else if (num6 != 80)
                                    {
                                        num10 = 36;
                                        num11 = 0;
                                    }
                                    else
                                    {
                                        num10 = 36;
                                        num11 = 18;
                                    }

                                    break;
                            }

                            if (num10 != Main.tile[i, j].frameX || num11 != Main.tile[i, j].frameY)
                            {
                                Main.tile[i, j].frameX = num10;
                                Main.tile[i, j].frameY = num11;
                                DiamondTileFrame(i, j);
                            }
                        }
                    }
                }
            }
        }
        catch
        {
            Main.tile[i, j].frameX = 0;
            Main.tile[i, j].frameY = 0;
        }
    }

    public static void GrowCactus(int i, int j)
    {
        int num = j;
        int num2 = i;
        if (Main.tile[i, j].nactive() && !Main.tile[i, j].halfBrick() && Main.tile[i, j].slope() == 0 &&
            Main.tile[i, j - 1].liquid <= 0 && (Main.tile[i, j].type == 53 || Main.tile[i, j].type == 80 ||
                                                Main.tile[i, j].type == 234 || Main.tile[i, j].type == 112 ||
                                                Main.tile[i, j].type == 116))
        {
            if (Main.tile[i, j].type == 53 || Main.tile[i, j].type == 112 || Main.tile[i, j].type == 116 ||
                Main.tile[i, j].type == 234)
            {
                if (!Main.tile[i, j - 1].active() && !Main.tile[i - 1, j - 1].active() &&
                    !Main.tile[i + 1, j - 1].active())
                {
                    int num3 = 0;
                    int num4 = 0;
                    for (int k = i - 6; k <= i + 6; k++)
                    {
                        for (int l = j - 3; l <= j + 1; l++)
                        {
                            try
                            {
                                if (Main.tile[k, l].active())
                                {
                                    if (Main.tile[k, l].type == 80)
                                    {
                                        num3++;
                                        if (num3 >= 4)
                                        {
                                            return;
                                        }
                                    }

                                    if (Main.tile[k, l].type == 53 || Main.tile[k, l].type == 112 ||
                                        Main.tile[k, l].type == 116 || Main.tile[k, l].type == 234)
                                    {
                                        num4++;
                                    }
                                }
                            }
                            catch
                            {
                            }
                        }
                    }

                    if (num4 > 10)
                    {
                        Main.tile[i, j - 1].active(true);
                        Main.tile[i, j - 1].type = 80;
                        if (Main.netMode == 2)
                        {
                            NetMessage.SendTileSquare(-1, i, j - 1, 1, TileChangeType.None);
                        }

                        SquareTileFrame(num2, num - 1, true);
                    }
                }
            }
            else if (Main.tile[i, j].type == 80)
            {
                while (Main.tile[num2, num].active() && Main.tile[num2, num].type == 80)
                {
                    num++;
                    if (!Main.tile[num2, num].active() || Main.tile[num2, num].type != 80)
                    {
                        if (Main.tile[num2 - 1, num].active() && Main.tile[num2 - 1, num].type == 80 &&
                            Main.tile[num2 - 1, num - 1].active() && Main.tile[num2 - 1, num - 1].type == 80 &&
                            num2 >= i)
                        {
                            num2--;
                        }

                        if (Main.tile[num2 + 1, num].active() && Main.tile[num2 + 1, num].type == 80 &&
                            Main.tile[num2 + 1, num - 1].active() && Main.tile[num2 + 1, num - 1].type == 80 &&
                            num2 <= i)
                        {
                            num2++;
                        }
                    }
                }

                num--;
                int num5 = num - j;
                int num6 = i - num2;
                num2 = i - num6;
                int num7 = 11 - num5;
                int num8 = 0;
                for (int m = num2 - 2; m <= num2 + 2; m++)
                {
                    for (int n = j - num7; n <= j + num5; n++)
                    {
                        if (Main.tile[m, n].active() && Main.tile[m, n].type == 80)
                        {
                            num8++;
                        }
                    }
                }

                if (num8 < genRand.Next(11, 13))
                {
                    if (num6 == 0)
                    {
                        if (num5 == 0)
                        {
                            if (!Main.tile[i, j - 1].active())
                            {
                                Main.tile[i, j - 1].active(true);
                                Main.tile[i, j - 1].type = 80;
                                SquareTileFrame(i, j - 1, true);
                                if (Main.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, i, j - 1, 1, TileChangeType.None);
                                }
                            }
                        }
                        else
                        {
                            bool flag = false;
                            bool flag2 = false;
                            if (Main.tile[i, j - 1].active() && Main.tile[i, j - 1].type == 80)
                            {
                                if (!Main.tile[i - 1, j].active() && !Main.tile[i - 2, j + 1].active() &&
                                    !Main.tile[i - 1, j - 1].active() && !Main.tile[i - 1, j + 1].active() &&
                                    !Main.tile[i - 2, j].active())
                                {
                                    flag = true;
                                }

                                if (!Main.tile[i + 1, j].active() && !Main.tile[i + 2, j + 1].active() &&
                                    !Main.tile[i + 1, j - 1].active() && !Main.tile[i + 1, j + 1].active() &&
                                    !Main.tile[i + 2, j].active())
                                {
                                    flag2 = true;
                                }
                            }

                            int num9 = genRand.Next(3);
                            if (num9 == 0 && flag)
                            {
                                Main.tile[i - 1, j].active(true);
                                Main.tile[i - 1, j].type = 80;
                                SquareTileFrame(i - 1, j, true);
                                if (Main.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, i - 1, j, 1, TileChangeType.None);
                                }
                            }
                            else if (num9 == 1 && flag2)
                            {
                                Main.tile[i + 1, j].active(true);
                                Main.tile[i + 1, j].type = 80;
                                SquareTileFrame(i + 1, j, true);
                                if (Main.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, i + 1, j, 1, TileChangeType.None);
                                }
                            }
                            else if (num5 < genRand.Next(2, 8))
                            {
                                if (Main.tile[i - 1, j - 1].active())
                                {
                                    ushort type = Main.tile[i - 1, j - 1].type;
                                }

                                if ((!Main.tile[i + 1, j - 1].active() || Main.tile[i + 1, j - 1].type != 80) &&
                                    !Main.tile[i, j - 1].active())
                                {
                                    Main.tile[i, j - 1].active(true);
                                    Main.tile[i, j - 1].type = 80;
                                    SquareTileFrame(i, j - 1, true);
                                    if (Main.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, i, j - 1, 1, TileChangeType.None);
                                    }
                                }
                            }
                        }
                    }
                    else if (!Main.tile[i, j - 1].active() && !Main.tile[i, j - 2].active() &&
                             !Main.tile[i + num6, j - 1].active() && Main.tile[i - num6, j - 1].active() &&
                             Main.tile[i - num6, j - 1].type == 80)
                    {
                        Main.tile[i, j - 1].active(true);
                        Main.tile[i, j - 1].type = 80;
                        SquareTileFrame(i, j - 1, true);
                        if (Main.netMode == 2)
                        {
                            NetMessage.SendTileSquare(-1, i, j - 1, 1, TileChangeType.None);
                        }
                    }
                }
            }
        }
    }

    public static void CheckPot(int i, int j, int type = 28)
    {
        if (!destroyObject)
        {
            bool flag = false;
            int num = 0;
            for (num += Main.tile[i, j].frameX / 18; num > 1; num -= 2)
            {
            }

            num *= -1;
            num += i;
            int num2 = Main.tile[i, j].frameY / 18;
            int num3 = 0;
            while (num2 > 1)
            {
                num2 -= 2;
                num3++;
            }

            int num4 = j - num2;
            for (int k = num; k < num + 2; k++)
            {
                for (int l = num4; l < num4 + 2; l++)
                {
                    if (Main.tile[k, l] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num5 = k;
                        int num6 = l;
                        Tile tile2 = new Tile();
                        tile[num5, num6] = tile2;
                    }

                    int num7;
                    for (num7 = Main.tile[k, l].frameX / 18; num7 > 1; num7 -= 2)
                    {
                    }

                    if (!Main.tile[k, l].active() || Main.tile[k, l].type != type || num7 != k - num ||
                        Main.tile[k, l].frameY != (l - num4) * 18 + num3 * 36)
                    {
                        flag = true;
                    }
                }

                if (Main.tile[k, num4 + 2] == null)
                {
                    Tile[,] tile3 = Main.tile;
                    int num8 = k;
                    int num9 = num4 + 2;
                    Tile tile4 = new Tile();
                    tile3[num8, num9] = tile4;
                }

                if (!SolidTile2(k, num4 + 2))
                {
                    flag = true;
                }
            }

            if (flag)
            {
                destroyObject = true;
                if (num3 >= 7 && num3 <= 9)
                {
                    Main.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
                }
                else if (num3 >= 16 && num3 <= 24)
                {
                    Main.PlaySound(4, i * 16, j * 16, 1, 1f, 0f);
                }
                else
                {
                    Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
                }

                for (int m = num; m < num + 2; m++)
                {
                    for (int n = num4; n < num4 + 2; n++)
                    {
                        if (Main.tile[m, n].type == type && Main.tile[m, n].active())
                        {
                            KillTile(m, n, false, false, false);
                        }
                    }
                }

                float num10 = 1f;
                switch (num3)
                {
                    case 0:
                        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2), 51, 1f);
                        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2), 52, 1f);
                        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2), 53, 1f);
                        break;
                    case 1:
                        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2), 166, 1f);
                        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2), 167, 1f);
                        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2), 168, 1f);
                        break;
                    case 2:
                        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2), 169, 1f);
                        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2), 170, 1f);
                        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2), 171, 1f);
                        break;
                    case 3:
                        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2), 172, 1f);
                        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2), 173, 1f);
                        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2), 174, 1f);
                        break;
                    case 4:
                    case 5:
                    case 6:
                        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2), 197, 1f);
                        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2), 198, 1f);
                        num10 = 1.25f;
                        break;
                    default:
                        if (num3 >= 7 && num3 <= 9)
                        {
                            Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2), 199, 1f);
                            Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2), 200, 1f);
                            num10 = 1.75f;
                        }
                        else if (num3 >= 10 && num3 <= 12)
                        {
                            Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2), 201, 1f);
                            Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2), 202, 1f);
                            num10 = 1.9f;
                        }
                        else if (num3 >= 13 && num3 <= 15)
                        {
                            Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2), 203, 1f);
                            Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2), 204, 1f);
                            num10 = 2.1f;
                        }
                        else if (num3 >= 16 && num3 <= 18)
                        {
                            num10 = 1.6f;
                        }
                        else if (num3 >= 19 && num3 <= 21)
                        {
                            num10 = 3.5f;
                        }
                        else if (num3 >= 22 && num3 <= 24)
                        {
                            num10 = 1.6f;
                        }
                        else if (num3 >= 25 && num3 <= 27)
                        {
                            num10 = 10f;
                            Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2),
                                genRand.Next(217, 220), 1f);
                            Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2),
                                genRand.Next(217, 220), 1f);
                        }
                        else if (num3 >= 28 && num3 <= 30)
                        {
                            Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2),
                                genRand.Next(315, 317), 1f);
                            Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2),
                                genRand.Next(315, 317), 1f);
                            if (Main.hardMode)
                            {
                                num10 = 4f;
                            }
                        }
                        else if (num3 >= 31 && num3 <= 33)
                        {
                            int num11 = genRand.Next(2, 5);
                            for (int num12 = 0; num12 < num11; num12++)
                            {
                                Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), default(Vector2),
                                    698 + genRand.Next(6), 1f);
                            }

                            num10 = 2f;
                        }

                        break;
                }

                num10 = (num10 * 2f + 1f) / 3f;
                int maxValue = (int) (250f / ((num10 + 1f) / 2f));
                if (!gen)
                {
                    if (Main.rand.Next(maxValue) == 0)
                    {
                        if (Main.netMode != 1)
                        {
                            Projectile.NewProjectile((float) (i * 16 + 16), (float) (j * 16 + 16), 0f, -12f, 518, 0, 0f,
                                Main.myPlayer, 0f, 0f);
                        }
                    }
                    else if (genRand.Next(40) == 0 && Main.wallDungeon[Main.tile[i, j].wall] &&
                             (double) j > Main.worldSurface)
                    {
                        Item.NewItem(i * 16, j * 16, 16, 16, 327, 1, false, 0, false, false);
                    }
                    else if (genRand.Next(45) == 0 || (Main.rand.Next(45) == 0 && Main.expertMode))
                    {
                        if ((double) j < Main.worldSurface)
                        {
                            int num13 = genRand.Next(10);
                            if (num13 == 0)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 292, 1, false, 0, false, false);
                            }

                            if (num13 == 1)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 298, 1, false, 0, false, false);
                            }

                            if (num13 == 2)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 299, 1, false, 0, false, false);
                            }

                            if (num13 == 3)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 290, 1, false, 0, false, false);
                            }

                            if (num13 == 4)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 2322, 1, false, 0, false, false);
                            }

                            if (num13 == 5)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 2324, 1, false, 0, false, false);
                            }

                            if (num13 == 6)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 2325, 1, false, 0, false, false);
                            }

                            if (num13 >= 7)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 2350, 1, false, 0, false, false);
                            }
                        }
                        else if ((double) j < Main.rockLayer)
                        {
                            int num14 = genRand.Next(11);
                            if (num14 == 0)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 289, 1, false, 0, false, false);
                            }

                            if (num14 == 1)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 298, 1, false, 0, false, false);
                            }

                            if (num14 == 2)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 299, 1, false, 0, false, false);
                            }

                            if (num14 == 3)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 290, 1, false, 0, false, false);
                            }

                            if (num14 == 4)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 303, 1, false, 0, false, false);
                            }

                            if (num14 == 5)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 291, 1, false, 0, false, false);
                            }

                            if (num14 == 6)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 304, 1, false, 0, false, false);
                            }

                            if (num14 == 7)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 2322, 1, false, 0, false, false);
                            }

                            if (num14 == 8)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 2329, 1, false, 0, false, false);
                            }

                            if (num14 >= 9)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 2350, 1, false, 0, false, false);
                            }
                        }
                        else if (j < Main.maxTilesY - 200)
                        {
                            int num15 = genRand.Next(15);
                            if (num15 == 0)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 296, 1, false, 0, false, false);
                            }

                            if (num15 == 1)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 295, 1, false, 0, false, false);
                            }

                            if (num15 == 2)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 299, 1, false, 0, false, false);
                            }

                            if (num15 == 3)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 302, 1, false, 0, false, false);
                            }

                            if (num15 == 4)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 303, 1, false, 0, false, false);
                            }

                            if (num15 == 5)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 305, 1, false, 0, false, false);
                            }

                            if (num15 == 6)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 301, 1, false, 0, false, false);
                            }

                            if (num15 == 7)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 302, 1, false, 0, false, false);
                            }

                            if (num15 == 8)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 297, 1, false, 0, false, false);
                            }

                            if (num15 == 9)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 304, 1, false, 0, false, false);
                            }

                            if (num15 == 10)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 2322, 1, false, 0, false, false);
                            }

                            if (num15 == 11)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 2323, 1, false, 0, false, false);
                            }

                            if (num15 == 12)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 2327, 1, false, 0, false, false);
                            }

                            if (num15 == 13)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 2329, 1, false, 0, false, false);
                            }

                            if (num15 == 14)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 2350, 1, false, 0, false, false);
                            }
                        }
                        else
                        {
                            int num16 = genRand.Next(14);
                            if (num16 == 0)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 296, 1, false, 0, false, false);
                            }

                            if (num16 == 1)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 295, 1, false, 0, false, false);
                            }

                            if (num16 == 2)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 293, 1, false, 0, false, false);
                            }

                            if (num16 == 3)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 288, 1, false, 0, false, false);
                            }

                            if (num16 == 4)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 294, 1, false, 0, false, false);
                            }

                            if (num16 == 5)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 297, 1, false, 0, false, false);
                            }

                            if (num16 == 6)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 304, 1, false, 0, false, false);
                            }

                            if (num16 == 7)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 305, 1, false, 0, false, false);
                            }

                            if (num16 == 8)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 301, 1, false, 0, false, false);
                            }

                            if (num16 == 9)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 302, 1, false, 0, false, false);
                            }

                            if (num16 == 10)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 288, 1, false, 0, false, false);
                            }

                            if (num16 == 11)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 300, 1, false, 0, false, false);
                            }

                            if (num16 == 12)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 2323, 1, false, 0, false, false);
                            }

                            if (num16 == 13)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 2326, 1, false, 0, false, false);
                            }
                        }
                    }
                    else if (Main.netMode == 2 && Main.rand.Next(30) == 0)
                    {
                        Item.NewItem(i * 16, j * 16, 16, 16, 2997, 1, false, 0, false, false);
                    }
                    else
                    {
                        int num17 = Main.rand.Next(8);
                        if (Main.expertMode)
                        {
                            num17--;
                        }

                        if (num17 == 0 &&
                            Main.player[Player.FindClosest(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16)]
                                .statLife < Main
                                .player[Player.FindClosest(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16)]
                                .statLifeMax2)
                        {
                            Item.NewItem(i * 16, j * 16, 16, 16, 58, 1, false, 0, false, false);
                            if (Main.rand.Next(2) == 0)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, 58, 1, false, 0, false, false);
                            }

                            if (Main.expertMode)
                            {
                                if (Main.rand.Next(2) == 0)
                                {
                                    Item.NewItem(i * 16, j * 16, 16, 16, 58, 1, false, 0, false, false);
                                }

                                if (Main.rand.Next(2) == 0)
                                {
                                    Item.NewItem(i * 16, j * 16, 16, 16, 58, 1, false, 0, false, false);
                                }
                            }
                        }
                        else if (num17 != 1 ||
                                 Main.player[
                                         Player.FindClosest(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16)]
                                     .statMana >=
                                 Main.player[
                                         Player.FindClosest(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16)]
                                     .statManaMax2)
                        {
                            switch (num17)
                            {
                                case 2:
                                {
                                    int num19 = Main.rand.Next(2, 6);
                                    if (Main.expertMode)
                                    {
                                        num19 += Main.rand.Next(1, 7);
                                    }

                                    if (Main.tile[i, j].liquid > 0)
                                    {
                                        Item.NewItem(i * 16, j * 16, 16, 16, 282, num19, false, 0, false, false);
                                    }
                                    else
                                    {
                                        Item.NewItem(i * 16, j * 16, 16, 16, 8, num19, false, 0, false, false);
                                    }

                                    break;
                                }
                                case 3:
                                {
                                    int stack = Main.rand.Next(10, 21);
                                    int type2 = 40;
                                    if ((double) j < Main.rockLayer && genRand.Next(2) == 0)
                                    {
                                        type2 = ((!Main.hardMode) ? 42 : 168);
                                    }

                                    if (j > Main.maxTilesY - 200)
                                    {
                                        type2 = 265;
                                    }
                                    else if (Main.hardMode)
                                    {
                                        type2 = ((Main.rand.Next(2) != 0) ? 47 : 278);
                                    }

                                    Item.NewItem(i * 16, j * 16, 16, 16, type2, stack, false, 0, false, false);
                                    break;
                                }
                                case 4:
                                {
                                    int type3 = 28;
                                    if (j > Main.maxTilesY - 200 || Main.hardMode)
                                    {
                                        type3 = 188;
                                    }

                                    int num20 = 1;
                                    if (Main.expertMode && Main.rand.Next(3) != 0)
                                    {
                                        num20++;
                                    }

                                    Item.NewItem(i * 16, j * 16, 16, 16, type3, num20, false, 0, false, false);
                                    break;
                                }
                                case 5:
                                    if ((double) j > Main.rockLayer)
                                    {
                                        int num18 = Main.rand.Next(4) + 1;
                                        if (Main.expertMode)
                                        {
                                            num18 += Main.rand.Next(4);
                                        }

                                        Item.NewItem(i * 16, j * 16, 16, 16, 166, num18, false, 0, false, false);
                                        break;
                                    }

                                    goto default;
                                default:
                                    if ((num17 == 5 || num17 == 6) && j < Main.maxTilesY - 200 && !Main.hardMode)
                                    {
                                        int stack2 = Main.rand.Next(20, 41);
                                        Item.NewItem(i * 16, j * 16, 16, 16, 965, stack2, false, 0, false, false);
                                    }
                                    else
                                    {
                                        float num21 = (float) (200 + genRand.Next(-100, 101));
                                        if ((double) j < Main.worldSurface)
                                        {
                                            num21 *= 0.5f;
                                        }
                                        else if ((double) j < Main.rockLayer)
                                        {
                                            num21 *= 0.75f;
                                        }
                                        else if (j > Main.maxTilesY - 250)
                                        {
                                            num21 *= 1.25f;
                                        }

                                        num21 *= 1f + (float) Main.rand.Next(-20, 21) * 0.01f;
                                        if (Main.rand.Next(4) == 0)
                                        {
                                            num21 *= 1f + (float) Main.rand.Next(5, 11) * 0.01f;
                                        }

                                        if (Main.rand.Next(8) == 0)
                                        {
                                            num21 *= 1f + (float) Main.rand.Next(10, 21) * 0.01f;
                                        }

                                        if (Main.rand.Next(12) == 0)
                                        {
                                            num21 *= 1f + (float) Main.rand.Next(20, 41) * 0.01f;
                                        }

                                        if (Main.rand.Next(16) == 0)
                                        {
                                            num21 *= 1f + (float) Main.rand.Next(40, 81) * 0.01f;
                                        }

                                        if (Main.rand.Next(20) == 0)
                                        {
                                            num21 *= 1f + (float) Main.rand.Next(50, 101) * 0.01f;
                                        }

                                        if (Main.expertMode)
                                        {
                                            num21 *= 2.5f;
                                        }

                                        if (Main.expertMode && Main.rand.Next(2) == 0)
                                        {
                                            num21 *= 1.25f;
                                        }

                                        if (Main.expertMode && Main.rand.Next(3) == 0)
                                        {
                                            num21 *= 1.5f;
                                        }

                                        if (Main.expertMode && Main.rand.Next(4) == 0)
                                        {
                                            num21 *= 1.75f;
                                        }

                                        num21 *= num10;
                                        if (NPC.downedBoss1)
                                        {
                                            num21 *= 1.1f;
                                        }

                                        if (NPC.downedBoss2)
                                        {
                                            num21 *= 1.1f;
                                        }

                                        if (NPC.downedBoss3)
                                        {
                                            num21 *= 1.1f;
                                        }

                                        if (NPC.downedMechBoss1)
                                        {
                                            num21 *= 1.1f;
                                        }

                                        if (NPC.downedMechBoss2)
                                        {
                                            num21 *= 1.1f;
                                        }

                                        if (NPC.downedMechBoss3)
                                        {
                                            num21 *= 1.1f;
                                        }

                                        if (NPC.downedPlantBoss)
                                        {
                                            num21 *= 1.1f;
                                        }

                                        if (NPC.downedQueenBee)
                                        {
                                            num21 *= 1.1f;
                                        }

                                        if (NPC.downedGolemBoss)
                                        {
                                            num21 *= 1.1f;
                                        }

                                        if (NPC.downedPirates)
                                        {
                                            num21 *= 1.1f;
                                        }

                                        if (NPC.downedGoblins)
                                        {
                                            num21 *= 1.1f;
                                        }

                                        if (NPC.downedFrost)
                                        {
                                            num21 *= 1.1f;
                                        }

                                        while ((int) num21 > 0)
                                        {
                                            if (num21 > 1000000f)
                                            {
                                                int num22 = (int) (num21 / 1000000f);
                                                if (num22 > 50 && Main.rand.Next(2) == 0)
                                                {
                                                    num22 /= Main.rand.Next(3) + 1;
                                                }

                                                if (Main.rand.Next(2) == 0)
                                                {
                                                    num22 /= Main.rand.Next(3) + 1;
                                                }

                                                num21 -= (float) (1000000 * num22);
                                                Item.NewItem(i * 16, j * 16, 16, 16, 74, num22, false, 0, false, false);
                                            }
                                            else if (num21 > 10000f)
                                            {
                                                int num23 = (int) (num21 / 10000f);
                                                if (num23 > 50 && Main.rand.Next(2) == 0)
                                                {
                                                    num23 /= Main.rand.Next(3) + 1;
                                                }

                                                if (Main.rand.Next(2) == 0)
                                                {
                                                    num23 /= Main.rand.Next(3) + 1;
                                                }

                                                num21 -= (float) (10000 * num23);
                                                Item.NewItem(i * 16, j * 16, 16, 16, 73, num23, false, 0, false, false);
                                            }
                                            else if (num21 > 100f)
                                            {
                                                int num24 = (int) (num21 / 100f);
                                                if (num24 > 50 && Main.rand.Next(2) == 0)
                                                {
                                                    num24 /= Main.rand.Next(3) + 1;
                                                }

                                                if (Main.rand.Next(2) == 0)
                                                {
                                                    num24 /= Main.rand.Next(3) + 1;
                                                }

                                                num21 -= (float) (100 * num24);
                                                Item.NewItem(i * 16, j * 16, 16, 16, 72, num24, false, 0, false, false);
                                            }
                                            else
                                            {
                                                int num25 = (int) num21;
                                                if (num25 > 50 && Main.rand.Next(2) == 0)
                                                {
                                                    num25 /= Main.rand.Next(3) + 1;
                                                }

                                                if (Main.rand.Next(2) == 0)
                                                {
                                                    num25 /= Main.rand.Next(4) + 1;
                                                }

                                                if (num25 < 1)
                                                {
                                                    num25 = 1;
                                                }

                                                num21 -= (float) num25;
                                                Item.NewItem(i * 16, j * 16, 16, 16, 71, num25, false, 0, false, false);
                                            }
                                        }
                                    }

                                    break;
                            }
                        }
                        else
                        {
                            Item.NewItem(i * 16, j * 16, 16, 16, 184, 1, false, 0, false, false);
                        }
                    }
                }

                destroyObject = false;
            }
        }
    }

    public static int PlaceChest(int x, int y, ushort type = 21, bool notNearOtherChests = false, int style = 0)
    {
        int num = -1;
        if (TileObject.CanPlace(x, y, type, style, 1, out TileObject objectData, false))
        {
            bool flag = true;
            if (notNearOtherChests && Chest.NearOtherChests(x - 1, y - 1))
            {
                flag = false;
            }

            if (flag)
            {
                TileObject.Place(objectData);
                num = Chest.CreateChest(objectData.xCoord, objectData.yCoord, -1);
            }
        }
        else
        {
            num = -1;
        }

        if (num != -1 && Main.netMode == 1 && type == 21)
        {
            NetMessage.SendData(34, -1, -1, null, 0, (float) x, (float) y, (float) style, 0, 0, 0);
        }

        if (num != -1 && Main.netMode == 1 && type == 467)
        {
            NetMessage.SendData(34, -1, -1, null, 4, (float) x, (float) y, (float) style, 0, 0, 0);
        }

        return num;
    }

    public static void PlaceChestDirect(int x, int y, ushort type, int style, int id)
    {
        Chest.CreateChest(x, y - 1, id);
        for (int i = 0; i <= 1; i++)
        {
            for (int j = -1; j <= 0; j++)
            {
                if (Main.tile[x + i, y + j] == null)
                {
                    Tile[,] tile = Main.tile;
                    int num = x + i;
                    int num2 = y + j;
                    Tile tile2 = new Tile();
                    tile[num, num2] = tile2;
                }
            }
        }

        Main.tile[x, y - 1].active(true);
        Main.tile[x, y - 1].frameY = 0;
        Main.tile[x, y - 1].frameX = (short) (36 * style);
        Main.tile[x, y - 1].type = type;
        Main.tile[x, y - 1].halfBrick(false);
        Main.tile[x + 1, y - 1].active(true);
        Main.tile[x + 1, y - 1].frameY = 0;
        Main.tile[x + 1, y - 1].frameX = (short) (18 + 36 * style);
        Main.tile[x + 1, y - 1].type = type;
        Main.tile[x + 1, y - 1].halfBrick(false);
        Main.tile[x, y].active(true);
        Main.tile[x, y].frameY = 18;
        Main.tile[x, y].frameX = (short) (36 * style);
        Main.tile[x, y].type = type;
        Main.tile[x, y].halfBrick(false);
        Main.tile[x + 1, y].active(true);
        Main.tile[x + 1, y].frameY = 18;
        Main.tile[x + 1, y].frameX = (short) (18 + 36 * style);
        Main.tile[x + 1, y].type = type;
        Main.tile[x + 1, y].halfBrick(false);
    }

    public static void PlaceDresserDirect(int x, int y, ushort type, int style, int id)
    {
        Chest.CreateChest(x - 1, y - 1, id);
        for (int i = -1; i <= 1; i++)
        {
            for (int j = -1; j <= 0; j++)
            {
                if (Main.tile[x + i, y + j] == null)
                {
                    Tile[,] tile = Main.tile;
                    int num = x + i;
                    int num2 = y + j;
                    Tile tile2 = new Tile();
                    tile[num, num2] = tile2;
                }
            }
        }

        short num3 = (short) (style * 54);
        Main.tile[x - 1, y - 1].active(true);
        Main.tile[x - 1, y - 1].frameY = 0;
        Main.tile[x - 1, y - 1].frameX = num3;
        Main.tile[x - 1, y - 1].type = type;
        Main.tile[x, y - 1].active(true);
        Main.tile[x, y - 1].frameY = 0;
        Main.tile[x, y - 1].frameX = (short) (num3 + 18);
        Main.tile[x, y - 1].type = type;
        Main.tile[x + 1, y - 1].active(true);
        Main.tile[x + 1, y - 1].frameY = 0;
        Main.tile[x + 1, y - 1].frameX = (short) (num3 + 36);
        Main.tile[x + 1, y - 1].type = type;
        Main.tile[x - 1, y].active(true);
        Main.tile[x - 1, y].frameY = 18;
        Main.tile[x - 1, y].frameX = num3;
        Main.tile[x - 1, y].type = type;
        Main.tile[x, y].active(true);
        Main.tile[x, y].frameY = 18;
        Main.tile[x, y].frameX = (short) (num3 + 18);
        Main.tile[x, y].type = type;
        Main.tile[x + 1, y].active(true);
        Main.tile[x + 1, y].frameY = 18;
        Main.tile[x + 1, y].frameX = (short) (num3 + 36);
        Main.tile[x + 1, y].type = type;
    }

    public static void CheckChest(int i, int j, int type)
    {
        if (!destroyObject)
        {
            bool flag = false;
            int num = 0;
            num += Main.tile[i, j].frameX / 18;
            int num2 = j + Main.tile[i, j].frameY / 18 * -1;
            while (num > 1)
            {
                num -= 2;
            }

            num *= -1;
            num += i;
            for (int k = num; k < num + 2; k++)
            {
                for (int l = num2; l < num2 + 2; l++)
                {
                    if (Main.tile[k, l] == null)
                    {
                        Tile[,] tile = Main.tile;
                        int num3 = k;
                        int num4 = l;
                        Tile tile2 = new Tile();
                        tile[num3, num4] = tile2;
                    }

                    int num5;
                    for (num5 = Main.tile[k, l].frameX / 18; num5 > 1; num5 -= 2)
                    {
                    }

                    if (!Main.tile[k, l].active() || Main.tile[k, l].type != type || num5 != k - num ||
                        Main.tile[k, l].frameY != (l - num2) * 18)
                    {
                        flag = true;
                    }
                }

                if (Main.tile[k, num2 + 2] == null)
                {
                    Tile[,] tile3 = Main.tile;
                    int num6 = k;
                    int num7 = num2 + 2;
                    Tile tile4 = new Tile();
                    tile3[num6, num7] = tile4;
                }

                if (!Main.tile[k, num2 + 2].active() || !Main.tileSolid[Main.tile[k, num2 + 2].type])
                {
                    flag = true;
                }
            }

            if (flag)
            {
                int num8 = Main.tile[i, j].frameX / 36;
                int type2 = (type != 467) ? Chest.chestItemSpawn[num8] : Chest.chestItemSpawn2[num8];
                destroyObject = true;
                for (int m = num; m < num + 2; m++)
                {
                    for (int n = num2; n < num2 + 3; n++)
                    {
                        if (Main.tile[m, n].type == type && Main.tile[m, n].active())
                        {
                            Chest.DestroyChest(m, n);
                            KillTile(m, n, false, false, false);
                        }
                    }
                }

                Item.NewItem(i * 16, j * 16, 32, 32, type2, 1, false, 0, false, false);
                destroyObject = false;
                if (Main.tile[num, num2 + 2].type == 138 || Main.tile[num + 1, num2 + 2].type == 138)
                {
                    SquareTileFrame(num, num2 + 2, true);
                }
            }
        }
    }

    public static bool PlaceActuator(int i, int j)
    {
        if (!Main.tile[i, j].actuator())
        {
            Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
            Main.tile[i, j].actuator(true);
            return true;
        }

        return false;
    }

    public static bool KillActuator(int i, int j)
    {
        if (Main.tile[i, j].actuator())
        {
            Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
            Main.tile[i, j].actuator(false);
            if (Main.netMode != 1)
            {
                Item.NewItem(i * 16, j * 16, 16, 16, 849, 1, false, 0, false, false);
            }

            for (int k = 0; k < 5; k++)
            {
                Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, 50, 0f, 0f, 0, default(Color),
                    1f);
            }

            return true;
        }

        return false;
    }

    public static bool PlaceWire(int i, int j)
    {
        if (!Main.tile[i, j].wire())
        {
            Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
            Main.tile[i, j].wire(true);
            return true;
        }

        return false;
    }

    public static bool KillWire(int i, int j)
    {
        if (Main.tile[i, j].wire())
        {
            Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
            Main.tile[i, j].wire(false);
            if (Main.netMode != 1)
            {
                Item.NewItem(i * 16, j * 16, 16, 16, 530, 1, false, 0, false, false);
            }

            for (int k = 0; k < 5; k++)
            {
                Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, 50, 0f, 0f, 0, default(Color),
                    1f);
            }

            return true;
        }

        return false;
    }

    public static bool PlaceWire2(int i, int j)
    {
        if (!Main.tile[i, j].wire2())
        {
            Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
            Main.tile[i, j].wire2(true);
            return true;
        }

        return false;
    }

    public static bool KillWire2(int i, int j)
    {
        if (Main.tile[i, j].wire2())
        {
            Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
            Main.tile[i, j].wire2(false);
            if (Main.netMode != 1)
            {
                Item.NewItem(i * 16, j * 16, 16, 16, 530, 1, false, 0, false, false);
            }

            for (int k = 0; k < 5; k++)
            {
                Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, 50, 0f, 0f, 0, default(Color),
                    1f);
            }

            return true;
        }

        return false;
    }

    public static bool PlaceWire3(int i, int j)
    {
        if (!Main.tile[i, j].wire3())
        {
            Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
            Main.tile[i, j].wire3(true);
            return true;
        }

        return false;
    }

    public static bool KillWire3(int i, int j)
    {
        if (Main.tile[i, j].wire3())
        {
            Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
            Main.tile[i, j].wire3(false);
            if (Main.netMode != 1)
            {
                Item.NewItem(i * 16, j * 16, 16, 16, 530, 1, false, 0, false, false);
            }

            for (int k = 0; k < 5; k++)
            {
                Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, 50, 0f, 0f, 0, default(Color),
                    1f);
            }

            return true;
        }

        return false;
    }

    public static bool PlaceWire4(int i, int j)
    {
        if (!Main.tile[i, j].wire4())
        {
            Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
            Main.tile[i, j].wire4(true);
            return true;
        }

        return false;
    }

    public static bool KillWire4(int i, int j)
    {
        if (Main.tile[i, j].wire4())
        {
            Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
            Main.tile[i, j].wire4(false);
            if (Main.netMode != 1)
            {
                Item.NewItem(i * 16, j * 16, 16, 16, 530, 1, false, 0, false, false);
            }

            for (int k = 0; k < 5; k++)
            {
                Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, 50, 0f, 0f, 0, default(Color),
                    1f);
            }

            return true;
        }

        return false;
    }

    public static bool PlaceTile(int i, int j, int type, bool mute = false, bool forced = false, int plr = -1,
        int style = 0)
    {
        if (type >= 470)
        {
            return false;
        }

        bool result = false;
        if (i >= 0 && j >= 0 && i < Main.maxTilesX && j < Main.maxTilesY)
        {
            Tile tile = Main.tile[i, j];
            if (tile == null)
            {
                tile = new Tile();
                Main.tile[i, j] = tile;
            }

            if (forced || Collision.EmptyTile(i, j, false) || !Main.tileSolid[type] ||
                (type == 23 && tile.type == 0 && tile.active()) || (type == 199 && tile.type == 0 && tile.active()) ||
                (type == 2 && tile.type == 0 && tile.active()) || (type == 109 && tile.type == 0 && tile.active()) ||
                (type == 60 && tile.type == 59 && tile.active()) || (type == 70 && tile.type == 59 && tile.active()))
            {
                if (type == 23 && (tile.type != 0 || !tile.active()))
                {
                    return false;
                }

                if (type == 2 && (tile.type != 0 || !tile.active()))
                {
                    return false;
                }

                if (type == 109 && (tile.type != 0 || !tile.active()))
                {
                    return false;
                }

                if (type == 60 && (tile.type != 59 || !tile.active()))
                {
                    return false;
                }

                if (type == 81)
                {
                    if (Main.tile[i, j - 1] == null)
                    {
                        Tile[,] tile2 = Main.tile;
                        int num = j - 1;
                        Tile tile3 = new Tile();
                        tile2[i, num] = tile3;
                    }

                    if (Main.tile[i, j + 1] == null)
                    {
                        Tile[,] tile4 = Main.tile;
                        int num2 = j + 1;
                        Tile tile5 = new Tile();
                        tile4[i, num2] = tile5;
                    }

                    if (Main.tile[i, j - 1].active())
                    {
                        return false;
                    }

                    if (!Main.tile[i, j + 1].active() || !Main.tileSolid[Main.tile[i, j + 1].type] ||
                        Main.tile[i, j + 1].halfBrick() || Main.tile[i, j + 1].slope() != 0)
                    {
                        return false;
                    }
                }

                if ((type == 373 || type == 375 || type == 374 || type == 461) &&
                    (Main.tile[i, j - 1] == null || Main.tile[i, j - 1].bottomSlope()))
                {
                    return false;
                }

                if (tile.liquid > 0)
                {
                    switch (type)
                    {
                        case 4:
                            if (style != 8 && style != 11)
                            {
                                return false;
                            }

                            break;
                        case 3:
                        case 20:
                        case 24:
                        case 27:
                        case 32:
                        case 51:
                        case 69:
                        case 72:
                        case 201:
                        case 352:
                            return false;
                    }
                }

                if (type != 2 || Main.tile[i, j].type != 0)
                {
                    tile.halfBrick(false);
                    tile.frameY = 0;
                    tile.frameX = 0;
                }

                switch (type)
                {
                    case 3:
                    case 24:
                    case 110:
                    case 201:
                        if (j + 1 < Main.maxTilesY && Main.tile[i, j + 1].active() &&
                            Main.tile[i, j + 1].slope() == 0 && !Main.tile[i, j + 1].halfBrick() &&
                            ((Main.tile[i, j + 1].type == 2 && type == 3) ||
                             (Main.tile[i, j + 1].type == 23 && type == 24) ||
                             (Main.tile[i, j + 1].type == 199 && type == 201) ||
                             ((Main.tile[i, j + 1].type == 78 || Main.tile[i, j + 1].type == 380) && type == 3) ||
                             (Main.tile[i, j + 1].type == 109 && type == 110)))
                        {
                            if (type == 24 && genRand.Next(13) == 0)
                            {
                                tile.active(true);
                                tile.type = 32;
                                SquareTileFrame(i, j, true);
                            }
                            else if (type == 201 && genRand.Next(13) == 0)
                            {
                                tile.active(true);
                                tile.type = 352;
                                SquareTileFrame(i, j, true);
                            }
                            else if (Main.tile[i, j + 1].type == 78 || Main.tile[i, j + 1].type == 380)
                            {
                                tile.active(true);
                                tile.type = (ushort) type;
                                tile.frameX = (short) (genRand.Next(2) * 18 + 108);
                            }
                            else if ((tile.wall == 0 || tile.wall == 106 || tile.wall == 107 ||
                                      (tile.wall >= 63 && tile.wall <= 70)) &&
                                     (Main.tile[i, j + 1].wall == 0 || Main.tile[i, j + 1].wall == 106 ||
                                      Main.tile[i, j + 1].wall == 107 ||
                                      (Main.tile[i, j + 1].wall >= 63 && Main.tile[i, j + 1].wall <= 70)))
                            {
                                if (type == 3 && genRand.Next(35) == 0)
                                {
                                    tile.active(true);
                                    tile.type = (ushort) type;
                                    tile.frameX = (short) (genRand.Next(2) * 18 + 162);
                                }
                                else if (genRand.Next(50) == 0 ||
                                         ((type == 24 || type == 201) && genRand.Next(40) == 0))
                                {
                                    tile.active(true);
                                    tile.type = (ushort) type;
                                    if (type == 201)
                                    {
                                        tile.frameX = 270;
                                    }
                                    else
                                    {
                                        tile.frameX = 144;
                                    }
                                }
                                else if (genRand.Next(35) == 0)
                                {
                                    tile.active(true);
                                    tile.type = (ushort) type;
                                    tile.frameX = (short) (genRand.Next(2) * 18 + 108);
                                }
                                else
                                {
                                    tile.active(true);
                                    tile.type = (ushort) type;
                                    tile.frameX = (short) (genRand.Next(6) * 18);
                                }
                            }
                        }

                        break;
                    case 61:
                        if (j + 1 < Main.maxTilesY && Main.tile[i, j + 1].active() &&
                            Main.tile[i, j + 1].slope() == 0 && !Main.tile[i, j + 1].halfBrick() &&
                            Main.tile[i, j + 1].type == 60)
                        {
                            if (genRand.Next(16) == 0 && (double) j > Main.worldSurface)
                            {
                                tile.active(true);
                                tile.type = 69;
                                SquareTileFrame(i, j, true);
                            }
                            else if (genRand.Next(60) == 0 && (double) j > Main.rockLayer)
                            {
                                tile.active(true);
                                tile.type = (ushort) type;
                                tile.frameX = 144;
                            }
                            else if (genRand.Next(300) == 0 && (double) j > Main.rockLayer)
                            {
                                tile.active(true);
                                tile.type = (ushort) type;
                                tile.frameX = 162;
                            }
                            else if (genRand.Next(15) == 0)
                            {
                                tile.active(true);
                                tile.type = (ushort) type;
                                if (genRand.Next(3) != 0)
                                {
                                    tile.frameX = (short) (genRand.Next(2) * 18 + 108);
                                }
                                else
                                {
                                    tile.frameX = (short) (genRand.Next(13) * 18 + 180);
                                }
                            }
                            else
                            {
                                tile.active(true);
                                tile.type = (ushort) type;
                                tile.frameX = (short) (genRand.Next(6) * 18);
                            }
                        }

                        break;
                    case 71:
                        if (j + 1 < Main.maxTilesY && Main.tile[i, j + 1].active() &&
                            Main.tile[i, j + 1].slope() == 0 && !Main.tile[i, j + 1].halfBrick() &&
                            Main.tile[i, j + 1].type == 70)
                        {
                            tile.active(true);
                            tile.type = (ushort) type;
                            tile.frameX = (short) (genRand.Next(5) * 18);
                        }

                        break;
                    case 129:
                        if (SolidTile(i - 1, j) || SolidTile(i + 1, j) || SolidTile(i, j - 1) || SolidTile(i, j + 1))
                        {
                            tile.active(true);
                            tile.type = (ushort) type;
                            tile.frameX = (short) (genRand.Next(18) * 18);
                            SquareTileFrame(i, j, true);
                        }

                        break;
                    case 178:
                        if (SolidTile(i - 1, j) || SolidTile(i + 1, j) || SolidTile(i, j - 1) || SolidTile(i, j + 1))
                        {
                            tile.active(true);
                            tile.type = (ushort) type;
                            tile.frameX = (short) (style * 18);
                            tile.frameY = (short) (genRand.Next(3) * 18);
                            SquareTileFrame(i, j, true);
                        }

                        break;
                    case 184:
                        if ((Main.tileMoss[Main.tile[i - 1, j].type] && SolidTile(i - 1, j)) ||
                            (Main.tileMoss[Main.tile[i + 1, j].type] && SolidTile(i + 1, j)) ||
                            (Main.tileMoss[Main.tile[i, j - 1].type] && SolidTile(i, j - 1)) ||
                            (Main.tileMoss[Main.tile[i, j + 1].type] && SolidTile(i, j + 1)))
                        {
                            tile.active(true);
                            tile.type = (ushort) type;
                            tile.frameX = (short) (style * 18);
                            tile.frameY = (short) (genRand.Next(3) * 18);
                            SquareTileFrame(i, j, true);
                        }

                        break;
                    case 171:
                        PlaceXmasTree(i, j, 171);
                        break;
                    case 254:
                        Place2x2Style(i, j, (ushort) type, style);
                        break;
                    case 335:
                        Place2x2(i, j, (ushort) type, 0);
                        break;
                    default:
                        if (type < 316 || type > 318)
                        {
                            int type2;
                            switch (type)
                            {
                                case 411:
                                    Place2x2(i, j, (ushort) type, 0);
                                    break;
                                case 457:
                                    Place2x2Horizontal(i, j, 457, style);
                                    break;
                                case 137:
                                    tile.active(true);
                                    tile.type = (ushort) type;
                                    tile.frameY = (short) (18 * style);
                                    break;
                                case 136:
                                    if (Main.tile[i - 1, j] == null)
                                    {
                                        Tile[,] tile24 = Main.tile;
                                        int num11 = i - 1;
                                        Tile tile25 = new Tile();
                                        tile24[num11, j] = tile25;
                                    }

                                    if (Main.tile[i + 1, j] == null)
                                    {
                                        Tile[,] tile26 = Main.tile;
                                        int num12 = i + 1;
                                        Tile tile27 = new Tile();
                                        tile26[num12, j] = tile27;
                                    }

                                    if (Main.tile[i, j + 1] == null)
                                    {
                                        Tile[,] tile28 = Main.tile;
                                        int num13 = j + 1;
                                        Tile tile29 = new Tile();
                                        tile28[i, num13] = tile29;
                                    }

                                    if ((Main.tile[i - 1, j].nactive() && !Main.tile[i - 1, j].halfBrick() &&
                                         !TileID.Sets.NotReallySolid[Main.tile[i - 1, j].type] &&
                                         Main.tile[i - 1, j].slope() == 0 &&
                                         (SolidTile(i - 1, j) || Main.tile[i - 1, j].type == 124 ||
                                          (Main.tile[i - 1, j].type == 5 && Main.tile[i - 1, j - 1].type == 5 &&
                                           Main.tile[i - 1, j + 1].type == 5))) ||
                                        (Main.tile[i + 1, j].nactive() && !Main.tile[i + 1, j].halfBrick() &&
                                         !TileID.Sets.NotReallySolid[Main.tile[i + 1, j].type] &&
                                         Main.tile[i + 1, j].slope() == 0 &&
                                         (SolidTile(i + 1, j) || Main.tile[i + 1, j].type == 124 ||
                                          (Main.tile[i + 1, j].type == 5 && Main.tile[i + 1, j - 1].type == 5 &&
                                           Main.tile[i + 1, j + 1].type == 5))) ||
                                        (Main.tile[i, j + 1].nactive() && !Main.tile[i, j + 1].halfBrick() &&
                                         SolidTile(i, j + 1) && Main.tile[i, j + 1].slope() == 0) || tile.wall > 0)
                                    {
                                        tile.active(true);
                                        tile.type = (ushort) type;
                                        SquareTileFrame(i, j, true);
                                    }

                                    break;
                                case 442:
                                    if (Main.tile[i - 1, j] == null)
                                    {
                                        Tile[,] tile30 = Main.tile;
                                        int num14 = i - 1;
                                        Tile tile31 = new Tile();
                                        tile30[num14, j] = tile31;
                                    }

                                    if (Main.tile[i + 1, j] == null)
                                    {
                                        Tile[,] tile32 = Main.tile;
                                        int num15 = i + 1;
                                        Tile tile33 = new Tile();
                                        tile32[num15, j] = tile33;
                                    }

                                    if (Main.tile[i, j + 1] == null)
                                    {
                                        Tile[,] tile34 = Main.tile;
                                        int num16 = j + 1;
                                        Tile tile35 = new Tile();
                                        tile34[i, num16] = tile35;
                                    }

                                    if ((Main.tile[i - 1, j].nactive() && !Main.tile[i - 1, j].halfBrick() &&
                                         !TileID.Sets.NotReallySolid[Main.tile[i - 1, j].type] &&
                                         Main.tile[i - 1, j].slope() == 0 &&
                                         (SolidTile(i - 1, j) || Main.tile[i - 1, j].type == 124 ||
                                          (Main.tile[i - 1, j].type == 5 && Main.tile[i - 1, j - 1].type == 5 &&
                                           Main.tile[i - 1, j + 1].type == 5))) ||
                                        (Main.tile[i + 1, j].nactive() && !Main.tile[i + 1, j].halfBrick() &&
                                         !TileID.Sets.NotReallySolid[Main.tile[i + 1, j].type] &&
                                         Main.tile[i + 1, j].slope() == 0 &&
                                         (SolidTile(i + 1, j) || Main.tile[i + 1, j].type == 124 ||
                                          (Main.tile[i + 1, j].type == 5 && Main.tile[i + 1, j - 1].type == 5 &&
                                           Main.tile[i + 1, j + 1].type == 5))) ||
                                        (Main.tile[i, j + 1].nactive() && !Main.tile[i, j + 1].halfBrick() &&
                                         SolidTile(i, j + 1) && Main.tile[i, j + 1].slope() == 0))
                                    {
                                        tile.active(true);
                                        tile.type = (ushort) type;
                                        SquareTileFrame(i, j, true);
                                    }

                                    break;
                                case 4:
                                {
                                    if (Main.tile[i - 1, j] == null)
                                    {
                                        Tile[,] tile36 = Main.tile;
                                        int num17 = i - 1;
                                        Tile tile37 = new Tile();
                                        tile36[num17, j] = tile37;
                                    }

                                    if (Main.tile[i + 1, j] == null)
                                    {
                                        Tile[,] tile38 = Main.tile;
                                        int num18 = i + 1;
                                        Tile tile39 = new Tile();
                                        tile38[num18, j] = tile39;
                                    }

                                    if (Main.tile[i, j + 1] == null)
                                    {
                                        Tile[,] tile40 = Main.tile;
                                        int num19 = j + 1;
                                        Tile tile41 = new Tile();
                                        tile40[i, num19] = tile41;
                                    }

                                    Tile tile42 = Main.tile[i - 1, j];
                                    Tile tile43 = Main.tile[i + 1, j];
                                    Tile tile44 = Main.tile[i, j + 1];
                                    if (tile.wall > 0 ||
                                        (tile42.active() && (tile42.slope() == 0 || (int) tile42.slope() % 2 != 1) &&
                                         ((Main.tileSolid[tile42.type] && !Main.tileSolidTop[tile42.type] &&
                                           !TileID.Sets.NotReallySolid[tile42.type]) || tile42.type == 124 ||
                                          (tile42.type == 5 && Main.tile[i - 1, j - 1].type == 5 &&
                                           Main.tile[i - 1, j + 1].type == 5))) ||
                                        (tile43.active() && (tile43.slope() == 0 || (int) tile43.slope() % 2 != 0) &&
                                         ((Main.tileSolid[tile43.type] && !Main.tileSolidTop[tile43.type] &&
                                           !TileID.Sets.NotReallySolid[tile43.type]) || tile43.type == 124 ||
                                          (tile43.type == 5 && Main.tile[i + 1, j - 1].type == 5 &&
                                           Main.tile[i + 1, j + 1].type == 5))) ||
                                        (tile44.active() && Main.tileSolid[tile44.type] &&
                                         (!Main.tileSolidTop[tile44.type] ||
                                          (TileID.Sets.Platforms[tile44.type] && tile44.slope() == 0)) &&
                                         !TileID.Sets.NotReallySolid[tile44.type] && !tile44.halfBrick() &&
                                         tile44.slope() == 0))
                                    {
                                        tile.active(true);
                                        tile.type = (ushort) type;
                                        tile.frameY = (short) (22 * style);
                                        SquareTileFrame(i, j, true);
                                    }

                                    break;
                                }
                                case 10:
                                    if (Main.tile[i, j - 1] == null)
                                    {
                                        Tile[,] tile12 = Main.tile;
                                        int num5 = j - 1;
                                        Tile tile13 = new Tile();
                                        tile12[i, num5] = tile13;
                                    }

                                    if (Main.tile[i, j - 2] == null)
                                    {
                                        Tile[,] tile14 = Main.tile;
                                        int num6 = j - 2;
                                        Tile tile15 = new Tile();
                                        tile14[i, num6] = tile15;
                                    }

                                    if (Main.tile[i, j - 3] == null)
                                    {
                                        Tile[,] tile16 = Main.tile;
                                        int num7 = j - 3;
                                        Tile tile17 = new Tile();
                                        tile16[i, num7] = tile17;
                                    }

                                    if (Main.tile[i, j + 1] == null)
                                    {
                                        Tile[,] tile18 = Main.tile;
                                        int num8 = j + 1;
                                        Tile tile19 = new Tile();
                                        tile18[i, num8] = tile19;
                                    }

                                    if (Main.tile[i, j + 2] == null)
                                    {
                                        Tile[,] tile20 = Main.tile;
                                        int num9 = j + 2;
                                        Tile tile21 = new Tile();
                                        tile20[i, num9] = tile21;
                                    }

                                    if (Main.tile[i, j + 3] == null)
                                    {
                                        Tile[,] tile22 = Main.tile;
                                        int num10 = j + 3;
                                        Tile tile23 = new Tile();
                                        tile22[i, num10] = tile23;
                                    }

                                    if (!Main.tile[i, j - 1].active() && !Main.tile[i, j - 2].active() &&
                                        Main.tile[i, j - 3].active() && Main.tileSolid[Main.tile[i, j - 3].type])
                                    {
                                        PlaceDoor(i, j - 1, type, style);
                                        SquareTileFrame(i, j, true);
                                    }
                                    else
                                    {
                                        if (Main.tile[i, j + 1].active() || Main.tile[i, j + 2].active() ||
                                            !Main.tile[i, j + 3].active() || !Main.tileSolid[Main.tile[i, j + 3].type])
                                        {
                                            return false;
                                        }

                                        PlaceDoor(i, j + 1, type, style);
                                        SquareTileFrame(i, j, true);
                                    }

                                    break;
                                default:
                                    switch (type)
                                    {
                                        case 296:
                                        case 297:
                                        case 309:
                                        case 358:
                                        case 359:
                                        case 413:
                                        case 414:
                                            break;
                                        case 237:
                                        case 244:
                                        case 285:
                                        case 286:
                                        case 298:
                                        case 299:
                                        case 310:
                                        case 339:
                                        case 361:
                                        case 362:
                                        case 363:
                                        case 364:
                                            goto IL_1572;
                                        default:
                                            goto IL_1581;
                                    }

                                    goto case 275;
                                case 275:
                                case 276:
                                case 277:
                                case 278:
                                case 279:
                                case 280:
                                case 281:
                                {
                                    Place6x3(i, j, (ushort) type, -1, 0);
                                    break;
                                }
                                    IL_1581:
                                    switch (type)
                                    {
                                        case 128:
                                            PlaceMan(i, j, style);
                                            SquareTileFrame(i, j, true);
                                            break;
                                        case 269:
                                            PlaceWoman(i, j, style);
                                            SquareTileFrame(i, j, true);
                                            break;
                                        case 334:
                                        {
                                            int style2 = 0;
                                            if (style == -1)
                                            {
                                                style2 = 1;
                                            }

                                            Place3x3Wall(i, j, 334, style2);
                                            SquareTileFrame(i, j, true);
                                            break;
                                        }
                                        case 149:
                                            if (SolidTile(i - 1, j) || SolidTile(i + 1, j) || SolidTile(i, j - 1) ||
                                                SolidTile(i, j + 1))
                                            {
                                                tile.frameX = (short) (18 * style);
                                                tile.active(true);
                                                tile.type = (ushort) type;
                                                SquareTileFrame(i, j, true);
                                            }

                                            break;
                                        case 35:
                                        case 139:
                                            PlaceMB(i, j, (ushort) type, style);
                                            SquareTileFrame(i, j, true);
                                            break;
                                        case 165:
                                            PlaceTight(i, j, (ushort) type, false);
                                            SquareTileFrame(i, j, true);
                                            break;
                                        case 235:
                                            Place3x1(i, j, (ushort) type, 0);
                                            SquareTileFrame(i, j, true);
                                            break;
                                        case 240:
                                            Place3x3Wall(i, j, (ushort) type, style);
                                            break;
                                        case 440:
                                            Place3x3Wall(i, j, (ushort) type, style);
                                            break;
                                        case 245:
                                            Place2x3Wall(i, j, (ushort) type, style);
                                            break;
                                        case 246:
                                            Place3x2Wall(i, j, (ushort) type, style);
                                            break;
                                        case 241:
                                            Place4x3Wall(i, j, (ushort) type, style);
                                            break;
                                        case 242:
                                            Place6x4Wall(i, j, (ushort) type, style);
                                            break;
                                        case 34:
                                            PlaceChand(i, j, (ushort) type, style);
                                            SquareTileFrame(i, j, true);
                                            break;
                                        default:
                                            switch (type)
                                            {
                                                case 354:
                                                case 355:
                                                    break;
                                                case 13:
                                                case 33:
                                                case 49:
                                                case 50:
                                                case 78:
                                                case 174:
                                                case 372:
                                                    goto IL_1800;
                                                case 14:
                                                case 26:
                                                case 86:
                                                case 87:
                                                case 88:
                                                case 89:
                                                case 114:
                                                case 186:
                                                case 187:
                                                case 215:
                                                case 217:
                                                case 218:
                                                case 377:
                                                    goto IL_186a;
                                                case 236:
                                                    goto IL_188a;
                                                case 238:
                                                    goto IL_18b4;
                                                case 20:
                                                    goto IL_18d4;
                                                case 15:
                                                case 216:
                                                case 338:
                                                case 390:
                                                    goto IL_19a0;
                                                case 227:
                                                    goto IL_1a02;
                                                case 16:
                                                case 18:
                                                case 29:
                                                case 103:
                                                case 134:
                                                case 462:
                                                    goto IL_1a3c;
                                                case 92:
                                                case 93:
                                                case 453:
                                                    goto IL_1a66;
                                                case 104:
                                                case 105:
                                                case 320:
                                                case 337:
                                                case 349:
                                                case 356:
                                                case 378:
                                                case 456:
                                                    goto IL_1ab8;
                                                case 17:
                                                case 77:
                                                case 133:
                                                    goto IL_1ae2;
                                                case 207:
                                                    goto IL_1b02;
                                                case 410:
                                                    goto IL_1b22;
                                                case 465:
                                                    goto IL_1b42;
                                                default:
                                                    goto IL_1b5a;
                                            }

                                            goto case 106;
                                        case 106:
                                        case 212:
                                        case 219:
                                        case 220:
                                        case 228:
                                        case 231:
                                        case 243:
                                        case 247:
                                        case 283:
                                        case 300:
                                        case 301:
                                        case 302:
                                        case 303:
                                        case 304:
                                        case 305:
                                        case 306:
                                        case 307:
                                        case 308:
                                        {
                                            Place3x3(i, j, (ushort) type, style);
                                            SquareTileFrame(i, j, true);
                                            break;
                                        }
                                            IL_1b5a:
                                            if (!TileID.Sets.BasicChest[type])
                                            {
                                                switch (type)
                                                {
                                                    case 91:
                                                        PlaceBanner(i, j, (ushort) type, style);
                                                        SquareTileFrame(i, j, true);
                                                        break;
                                                    case 419:
                                                    case 420:
                                                    case 423:
                                                    case 424:
                                                    case 429:
                                                    case 445:
                                                        PlaceLogicTiles(i, j, type, style);
                                                        SquareTileFrame(i, j, true);
                                                        break;
                                                    case 36:
                                                    case 135:
                                                    case 141:
                                                    case 144:
                                                    case 210:
                                                    case 239:
                                                    case 324:
                                                        Place1x1(i, j, type, style);
                                                        SquareTileFrame(i, j, true);
                                                        break;
                                                    case 101:
                                                    case 102:
                                                    case 463:
                                                        Place3x4(i, j, (ushort) type, style);
                                                        SquareTileFrame(i, j, true);
                                                        break;
                                                    case 464:
                                                    case 466:
                                                        Place5x4(i, j, (ushort) type, style);
                                                        SquareTileFrame(i, j, true);
                                                        break;
                                                    case 27:
                                                        PlaceSunflower(i, j, 27);
                                                        SquareTileFrame(i, j, true);
                                                        break;
                                                    case 28:
                                                        PlacePot(i, j, 28, genRand.Next(4));
                                                        SquareTileFrame(i, j, true);
                                                        break;
                                                    case 42:
                                                    case 270:
                                                    case 271:
                                                        Place1x2Top(i, j, (ushort) type, style);
                                                        SquareTileFrame(i, j, true);
                                                        break;
                                                    case 55:
                                                    case 425:
                                                        PlaceSign(i, j, (ushort) type, style);
                                                        break;
                                                    case 85:
                                                    case 376:
                                                        Place2x2Horizontal(i, j, (ushort) type, style);
                                                        break;
                                                    default:
                                                        if (Main.tileAlch[type])
                                                        {
                                                            PlaceAlch(i, j, style);
                                                        }
                                                        else
                                                        {
                                                            switch (type)
                                                            {
                                                                case 94:
                                                                case 95:
                                                                case 97:
                                                                case 98:
                                                                case 99:
                                                                case 100:
                                                                case 125:
                                                                case 126:
                                                                case 172:
                                                                case 173:
                                                                case 287:
                                                                    Place2x2(i, j, (ushort) type, style);
                                                                    break;
                                                                case 96:
                                                                    Place2x2Style(i, j, (ushort) type, style);
                                                                    break;
                                                                case 79:
                                                                case 90:
                                                                {
                                                                    int direction = 1;
                                                                    if (plr > -1)
                                                                    {
                                                                        direction = Main.player[plr].direction;
                                                                    }

                                                                    Place4x2(i, j, (ushort) type, direction, style);
                                                                    break;
                                                                }
                                                                case 209:
                                                                    PlaceCannon(i, j, (ushort) type, style);
                                                                    break;
                                                                case 81:
                                                                    tile.frameX = (short) (26 * genRand.Next(6));
                                                                    tile.active(true);
                                                                    tile.type = (ushort) type;
                                                                    break;
                                                                case 19:
                                                                    tile.frameY = (short) (18 * style);
                                                                    tile.active(true);
                                                                    tile.type = (ushort) type;
                                                                    break;
                                                                case 380:
                                                                    tile.frameY = (short) (18 * style);
                                                                    tile.active(true);
                                                                    tile.type = (ushort) type;
                                                                    break;
                                                                case 314:
                                                                    Minecart.PlaceTrack(tile, style);
                                                                    break;
                                                                default:
                                                                    tile.active(true);
                                                                    tile.type = (ushort) type;
                                                                    break;
                                                            }
                                                        }

                                                        break;
                                                }
                                            }
                                            else
                                            {
                                                PlaceChest(i, j, (ushort) type, false, style);
                                                SquareTileFrame(i, j, true);
                                            }

                                            break;
                                            IL_18b4:
                                            PlaceJunglePlant(i, j, (ushort) type, 0, 0);
                                            SquareTileFrame(i, j, true);
                                            break;
                                            IL_188a:
                                            PlaceJunglePlant(i, j, (ushort) type, genRand.Next(3), 0);
                                            SquareTileFrame(i, j, true);
                                            break;
                                            IL_1b42:
                                            Place2xX(i, j, (ushort) type, style);
                                            SquareTileFrame(i, j, true);
                                            break;
                                            IL_1b22:
                                            Place2xX(i, j, (ushort) type, style);
                                            SquareTileFrame(i, j, true);
                                            break;
                                            IL_1b02:
                                            Place2xX(i, j, (ushort) type, style);
                                            SquareTileFrame(i, j, true);
                                            break;
                                            IL_1ae2:
                                            Place3x2(i, j, (ushort) type, style);
                                            SquareTileFrame(i, j, true);
                                            break;
                                            IL_1ab8:
                                            Place2xX(i, j, (ushort) type, style);
                                            SquareTileFrame(i, j, true);
                                            break;
                                            IL_1a66:
                                            Place1xX(i, j, (ushort) type, style);
                                            SquareTileFrame(i, j, true);
                                            break;
                                            IL_1a3c:
                                            Place2x1(i, j, (ushort) type, style);
                                            SquareTileFrame(i, j, true);
                                            break;
                                            IL_1a02:
                                            PlaceDye(i, j, style);
                                            SquareTileFrame(i, j, true);
                                            break;
                                            IL_19a0:
                                            if (Main.tile[i, j - 1] == null)
                                            {
                                                Tile[,] tile6 = Main.tile;
                                                int num3 = j - 1;
                                                Tile tile7 = new Tile();
                                                tile6[i, num3] = tile7;
                                            }

                                            if (Main.tile[i, j] == null)
                                            {
                                                Tile[,] tile8 = Main.tile;
                                                Tile tile9 = new Tile();
                                                tile8[i, j] = tile9;
                                            }

                                            Place1x2(i, j, (ushort) type, style);
                                            SquareTileFrame(i, j, true);
                                            break;
                                            IL_1800:
                                            PlaceOnTable1x1(i, j, type, style);
                                            SquareTileFrame(i, j, true);
                                            break;
                                            IL_186a:
                                            Place3x2(i, j, (ushort) type, style);
                                            SquareTileFrame(i, j, true);
                                            break;
                                            IL_18d4:
                                            if (Main.tile[i, j + 1] == null)
                                            {
                                                Tile[,] tile10 = Main.tile;
                                                int num4 = j + 1;
                                                Tile tile11 = new Tile();
                                                tile10[i, num4] = tile11;
                                            }

                                            type2 = Main.tile[i, j + 1].type;
                                            if (Main.tile[i, j + 1].active() &&
                                                (type2 == 2 || type2 == 109 || type2 == 147 || type2 == 60 ||
                                                 type2 == 23 || type2 == 199 || type2 == 53 || type2 == 234 ||
                                                 type2 == 116 || type2 == 112))
                                            {
                                                Place1x2(i, j, (ushort) type, style);
                                                SquareTileFrame(i, j, true);
                                            }

                                            break;
                                    }

                                    break;
                                    IL_1572:
                                    Place3x2(i, j, (ushort) type, 0);
                                    break;
                            }

                            break;
                        }

                        goto case 132;
                    case 132:
                    case 138:
                    case 142:
                    case 143:
                    case 282:
                    case 288:
                    case 289:
                    case 290:
                    case 291:
                    case 292:
                    case 293:
                    case 294:
                    case 295:
                    case 319:
                        Place2x2(i, j, (ushort) type, 0);
                        break;
                }

                if (tile.active())
                {
                    if (tile.type == 54)
                    {
                        SquareWallFrame(i, j, true);
                    }

                    SquareTileFrame(i, j, true);
                    result = true;
                    if (!mute)
                    {
                        if (type == 127)
                        {
                            Main.PlaySound(SoundID.Item30, i * 16, j * 16);
                        }
                        else if (type == 314)
                        {
                            Main.PlaySound(SoundID.Item52, i * 16, j * 16);
                        }
                        else if (type >= 330 && type <= 333)
                        {
                            Main.PlaySound(18, i * 16, j * 16, 1, 1f, 0f);
                        }
                        else
                        {
                            Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
                        }

                        if (type == 22 || type == 140)
                        {
                            for (int k = 0; k < 3; k++)
                            {
                                Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, 14, 0f, 0f, 0,
                                    default(Color), 1f);
                            }
                        }
                    }
                }
            }
        }

        return result;
    }

    public static void KillWall(int i, int j, bool fail = false)
    {
        if (i >= 0 && j >= 0 && i < Main.maxTilesX && j < Main.maxTilesY)
        {
            Tile tile = Main.tile[i, j];
            if (tile == null)
            {
                tile = new Tile();
                Main.tile[i, j] = tile;
            }

            if (tile.wall > 0)
            {
                if (Main.wallDungeon[tile.wall] && !NPC.downedBoss3)
                {
                    fail = true;
                }

                if (tile.wall == 87 && !NPC.downedGolemBoss)
                {
                    fail = true;
                }

                if (tile.wall == 21 || tile.wall == 186 || tile.wall == 136 || tile.wall == 137 || tile.wall == 168 ||
                    tile.wall == 169 || tile.wall == 172 || tile.wall == 226 || tile.wall == 227)
                {
                    Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
                }
                else if (tile.wall >= 63 && tile.wall <= 70)
                {
                    Main.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
                }
                else
                {
                    Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
                }

                int num = 10;
                if (fail)
                {
                    num = 3;
                }

                for (int k = 0; k < num; k++)
                {
                    int num2 = 0;
                    if (tile.wall == 148)
                    {
                        num2 = -1;
                    }

                    if (tile.wall == 1 || tile.wall == 5 || tile.wall == 6 || tile.wall == 7 || tile.wall == 107 ||
                        tile.wall == 8 || tile.wall == 9 || (tile.wall >= 48 && tile.wall <= 53) ||
                        (tile.wall >= 54 && tile.wall <= 58) || tile.wall == 185)
                    {
                        num2 = 1;
                    }

                    if (tile.wall >= 94 && tile.wall <= 105)
                    {
                        num2 = 1;
                    }

                    if (tile.wall == 3)
                    {
                        num2 = ((genRand.Next(2) != 0) ? 1 : 14);
                    }

                    if (tile.wall == 35)
                    {
                        num2 = 37;
                    }

                    if (tile.wall == 4 || tile.wall == 106)
                    {
                        num2 = 7;
                    }

                    if (tile.wall == 12)
                    {
                        num2 = 9;
                    }

                    if (tile.wall == 10)
                    {
                        num2 = 10;
                    }

                    if (tile.wall == 11)
                    {
                        num2 = 11;
                    }

                    if (tile.wall == 21)
                    {
                        num2 = 13;
                    }

                    if (tile.wall == 34)
                    {
                        num2 = 32;
                    }

                    if (tile.wall == 225)
                    {
                        num2 = 1;
                    }

                    if (tile.wall == 145)
                    {
                        num2 = 8;
                    }

                    if (tile.wall == 22 || tile.wall == 28)
                    {
                        num2 = 51;
                    }

                    if (tile.wall == 23)
                    {
                        num2 = 38;
                    }

                    if (tile.wall == 24)
                    {
                        num2 = 36;
                    }

                    if (tile.wall == 25)
                    {
                        num2 = 48;
                    }

                    if (tile.wall == 179 || tile.wall == 178 || tile.wall == 183)
                    {
                        num2 = 236;
                    }

                    if (tile.wall == 181 || tile.wall == 180 || tile.wall == 184)
                    {
                        num2 = 240;
                    }

                    if (tile.wall == 113)
                    {
                        num2 = 189;
                    }

                    if (tile.wall == 114)
                    {
                        num2 = 190;
                    }

                    if (tile.wall == 115)
                    {
                        num2 = 191;
                    }

                    if (tile.wall == 177 || tile.wall == 13)
                    {
                        num2 = 25;
                    }

                    if (tile.wall == 186)
                    {
                        num2 = genRand.Next(68, 71);
                    }

                    if (tile.wall == 142)
                    {
                        num2 = 210;
                    }

                    if (tile.wall == 143)
                    {
                        num2 = 210;
                    }

                    if (tile.wall == 224)
                    {
                        num2 = 265;
                    }

                    if (tile.wall == 173)
                    {
                        num2 = 128;
                    }

                    if (tile.wall == 174)
                    {
                        num2 = 117;
                    }

                    if (tile.wall == 175)
                    {
                        num2 = 42;
                    }

                    if (tile.wall == 176)
                    {
                        num2 = 226;
                    }

                    if (tile.wall == 182)
                    {
                        num2 = ((genRand.Next(2) != 0) ? 23 : 6);
                    }

                    if (tile.wall >= 153 && tile.wall <= 166)
                    {
                        switch (tile.wall)
                        {
                            case 154:
                            case 158:
                                num2 = 86;
                                break;
                            case 163:
                            case 166:
                                num2 = 87;
                                break;
                            case 162:
                            case 165:
                                num2 = 88;
                                break;
                            case 156:
                            case 160:
                                num2 = 89;
                                break;
                            case 161:
                            case 164:
                                num2 = 90;
                                break;
                            case 155:
                            case 159:
                                num2 = 91;
                                break;
                            case 153:
                            case 157:
                                num2 = 138;
                                break;
                        }
                    }

                    if (tile.wall == 26 || tile.wall == 30)
                    {
                        num2 = 49;
                    }

                    if (tile.wall == 29 || tile.wall == 32)
                    {
                        num2 = 50;
                    }

                    if (tile.wall == 31)
                    {
                        num2 = 51;
                    }

                    if (tile.wall == 14 || tile.wall == 20)
                    {
                        num2 = 109;
                    }

                    if (tile.wall >= 88 && tile.wall <= 93)
                    {
                        num2 = 86 + tile.wall - 88;
                        if (tile.wall == 93)
                        {
                            num2 = genRand.Next(88, 94);
                        }
                    }

                    if (tile.wall == 33)
                    {
                        num2 = 14;
                    }

                    if (tile.wall == 41)
                    {
                        num2 = 77;
                    }

                    if (tile.wall == 42)
                    {
                        num2 = 78;
                    }

                    if (tile.wall == 43)
                    {
                        num2 = 78;
                    }

                    if (tile.wall == 43)
                    {
                        num2 = 78;
                    }

                    if (tile.wall == 36)
                    {
                        num2 = 26;
                    }

                    if (tile.wall == 37)
                    {
                        num2 = 32;
                    }

                    if (tile.wall == 38)
                    {
                        num2 = 2;
                    }

                    if (tile.wall == 39)
                    {
                        num2 = 1;
                    }

                    if (tile.wall == 40)
                    {
                        num2 = 51;
                    }

                    if (tile.wall == 45)
                    {
                        num2 = 81;
                    }

                    if (tile.wall == 46)
                    {
                        num2 = 83;
                    }

                    if (tile.wall == 47)
                    {
                        num2 = 84;
                    }

                    if (tile.wall == 85)
                    {
                        num2 = 126;
                    }

                    if (tile.wall == 59)
                    {
                        num2 = 0;
                    }

                    if (tile.wall == 61)
                    {
                        num2 = 0;
                    }

                    if (tile.wall == 62)
                    {
                        num2 = 0;
                    }

                    if (tile.wall == 63)
                    {
                        num2 = 3;
                    }

                    if (tile.wall == 65)
                    {
                        num2 = 3;
                    }

                    if (tile.wall == 66)
                    {
                        num2 = 3;
                    }

                    if (tile.wall == 68)
                    {
                        num2 = 3;
                    }

                    if (tile.wall == 64)
                    {
                        num2 = 40;
                    }

                    if (tile.wall == 67)
                    {
                        num2 = 40;
                    }

                    if (tile.wall == 84)
                    {
                        num2 = 80;
                    }

                    if (tile.wall == 71)
                    {
                        num2 = 80;
                    }

                    if (tile.wall == 60)
                    {
                        num2 = 3;
                    }

                    if (tile.wall == 71)
                    {
                        num2 = 80;
                    }

                    if (tile.wall == 167)
                    {
                        num2 = 81;
                    }

                    if (tile.wall == 147)
                    {
                        num2 = 51;
                    }

                    if (tile.wall == 146)
                    {
                        num2 = 9;
                    }

                    if (tile.wall == 109)
                    {
                        num2 = 144;
                    }

                    if (tile.wall == 110)
                    {
                        num2 = 145;
                    }

                    if (tile.wall == 111)
                    {
                        num2 = 146;
                    }

                    if (tile.wall == 86 || tile.wall == 108)
                    {
                        num2 = 147;
                    }

                    if (tile.wall == 87)
                    {
                        num2 = 148;
                    }

                    if (tile.wall == 83)
                    {
                        num2 = 117;
                        if (genRand.Next(2) == 0)
                        {
                            num2 = 1;
                        }
                    }

                    if (tile.wall == 81)
                    {
                        num2 = 123;
                    }

                    if (tile.wall == 136)
                    {
                        num2 = 13;
                    }

                    if (tile.wall == 137)
                    {
                        num2 = 13;
                    }

                    if (tile.wall == 168)
                    {
                        num2 = 13;
                    }

                    if (tile.wall == 169)
                    {
                        num2 = 13;
                    }

                    if (tile.wall == 172)
                    {
                        num2 = 13;
                    }

                    if (tile.wall == 226)
                    {
                        num2 = 13;
                    }

                    if (tile.wall == 227)
                    {
                        num2 = 13;
                    }

                    if (tile.wall == 72)
                    {
                        num2 = 40;
                    }

                    if (tile.wall == 73)
                    {
                        num2 = 16;
                    }

                    if (tile.wall == 74 || tile.wall == 80)
                    {
                        num2 = 26;
                    }

                    if (tile.wall == 144)
                    {
                        num2 = ((genRand.Next(2) != 0) ? 118 : 10);
                    }

                    if (tile.wall == 75)
                    {
                        num2 = 26;
                    }

                    if (tile.wall == 76)
                    {
                        num2 = 4;
                    }

                    if (tile.wall == 77 || tile.wall == 81)
                    {
                        num2 = 5;
                    }

                    if (tile.wall == 78)
                    {
                        num2 = 7;
                    }

                    if (tile.wall == 79)
                    {
                        num2 = 37;
                    }

                    if (tile.wall == 82)
                    {
                        num2 = 36;
                    }

                    if (tile.wall == 69)
                    {
                        num2 = ((genRand.Next(2) != 0) ? 17 : 14);
                    }

                    if (tile.wall == 70)
                    {
                        num2 = 47;
                    }

                    if (tile.wall == 27)
                    {
                        num2 = ((genRand.Next(2) != 0) ? 1 : 7);
                    }

                    if (tile.wall == 138)
                    {
                        num2 = 77;
                    }

                    if (tile.wall == 139)
                    {
                        num2 = 78;
                    }

                    if (tile.wall == 140)
                    {
                        num2 = 79;
                    }

                    if (tile.wall == 141)
                    {
                        num2 = 126;
                    }

                    if (tile.wall == 149 || tile.wall == 150)
                    {
                        num2 = 214;
                    }

                    if (tile.wall == 151 || tile.wall == 152)
                    {
                        num2 = 215;
                    }
                    else if (tile.wall == 17 || tile.wall == 18 || tile.wall == 19)
                    {
                        num2 = 1;
                    }

                    if (tile.wall == 44)
                    {
                        int num3 = Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, 66, 0f, 0f,
                            100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 0.75f);
                        Main.dust[num3].noGravity = true;
                    }
                    else if ((tile.wall < 133 || tile.wall > 135) && (tile.wall < 116 || tile.wall > 125) &&
                             (tile.wall < 126 || tile.wall > 132))
                    {
                        if (tile.wall == 76)
                        {
                            Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, num2, 0f, 0f, 75,
                                new Color(0, 80, 255, 100), 0.75f);
                        }
                        else if (num2 >= 0)
                        {
                            Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, num2, 0f, 0f, 0,
                                default(Color), 1f);
                        }
                    }
                }

                if (fail)
                {
                    SquareWallFrame(i, j, true);
                }
                else
                {
                    int num4 = 0;
                    if (tile.wall == 168)
                    {
                        num4 = 2696;
                    }

                    if (tile.wall == 169)
                    {
                        num4 = 2698;
                    }

                    if (tile.wall == 226)
                    {
                        num4 = 3752;
                    }

                    if (tile.wall == 227)
                    {
                        num4 = 3753;
                    }

                    if (tile.wall == 228)
                    {
                        num4 = 3760;
                    }

                    if (tile.wall == 229)
                    {
                        num4 = 3761;
                    }

                    if (tile.wall == 230)
                    {
                        num4 = 3762;
                    }

                    if (tile.wall == 142)
                    {
                        num4 = 2263;
                    }

                    if (tile.wall == 143)
                    {
                        num4 = 2264;
                    }

                    if (tile.wall == 144)
                    {
                        num4 = 2271;
                    }

                    if (tile.wall == 149)
                    {
                        num4 = 2505;
                    }

                    if (tile.wall == 150)
                    {
                        num4 = 2507;
                    }

                    if (tile.wall == 151)
                    {
                        num4 = 2506;
                    }

                    if (tile.wall == 152)
                    {
                        num4 = 2508;
                    }

                    if (tile.wall == 1)
                    {
                        num4 = 26;
                    }

                    if (tile.wall == 4)
                    {
                        num4 = 93;
                    }

                    if (tile.wall == 5)
                    {
                        num4 = 130;
                    }

                    if (tile.wall == 6)
                    {
                        num4 = 132;
                    }

                    if (tile.wall == 7)
                    {
                        num4 = 135;
                    }

                    if (tile.wall == 8)
                    {
                        num4 = 138;
                    }

                    if (tile.wall == 9)
                    {
                        num4 = 140;
                    }

                    if (tile.wall == 10)
                    {
                        num4 = 142;
                    }

                    if (tile.wall == 11)
                    {
                        num4 = 144;
                    }

                    if (tile.wall == 12)
                    {
                        num4 = 146;
                    }

                    if (tile.wall == 14)
                    {
                        num4 = 330;
                    }

                    if (tile.wall == 224)
                    {
                        num4 = 3472;
                    }

                    if (tile.wall == 177)
                    {
                        num4 = 3067;
                    }

                    if (tile.wall == 167)
                    {
                        num4 = 2691;
                    }

                    if (tile.wall == 60)
                    {
                        num4 = 3584;
                    }

                    if (tile.wall == 225)
                    {
                        num4 = 3751;
                    }

                    if (tile.wall == 179)
                    {
                        num4 = 3083;
                    }

                    if (tile.wall == 183)
                    {
                        num4 = 3082;
                    }

                    if (tile.wall == 181)
                    {
                        num4 = 3089;
                    }

                    if (tile.wall == 184)
                    {
                        num4 = 3088;
                    }

                    if (tile.wall == 186)
                    {
                        num4 = 3238;
                    }

                    if (tile.wall >= 153 && tile.wall <= 166)
                    {
                        switch (tile.wall)
                        {
                            case 154:
                                num4 = 2679;
                                break;
                            case 158:
                                num4 = 2680;
                                break;
                            case 166:
                                num4 = 2689;
                                break;
                            case 163:
                                num4 = 2690;
                                break;
                            case 165:
                                num4 = 2687;
                                break;
                            case 162:
                                num4 = 2688;
                                break;
                            case 156:
                                num4 = 2683;
                                break;
                            case 160:
                                num4 = 2684;
                                break;
                            case 164:
                                num4 = 2685;
                                break;
                            case 161:
                                num4 = 2686;
                                break;
                            case 155:
                                num4 = 2681;
                                break;
                            case 159:
                                num4 = 2682;
                                break;
                            case 153:
                                num4 = 2677;
                                break;
                            case 157:
                                num4 = 2678;
                                break;
                        }
                    }

                    if (tile.wall == 136)
                    {
                        num4 = 2169;
                    }

                    if (tile.wall == 137)
                    {
                        num4 = 2170;
                    }

                    if (tile.wall == 172)
                    {
                        num4 = 2788;
                    }

                    if (tile.wall == 145)
                    {
                        num4 = 2333;
                    }

                    if (tile.wall == 16)
                    {
                        num4 = 30;
                    }

                    if (tile.wall == 17)
                    {
                        num4 = 135;
                    }

                    if (tile.wall == 18)
                    {
                        num4 = 138;
                    }

                    if (tile.wall == 19)
                    {
                        num4 = 140;
                    }

                    if (tile.wall == 20)
                    {
                        num4 = 330;
                    }

                    if (tile.wall == 21)
                    {
                        num4 = 392;
                    }

                    if (tile.wall == 86 || tile.wall == 108)
                    {
                        num4 = 1126;
                    }

                    if (tile.wall == 173)
                    {
                        num4 = 2789;
                    }

                    if (tile.wall == 174)
                    {
                        num4 = 2790;
                    }

                    if (tile.wall == 175)
                    {
                        num4 = 2791;
                    }

                    if (tile.wall == 176)
                    {
                        num4 = 2861;
                    }

                    if (tile.wall == 182)
                    {
                        num4 = 3101;
                    }

                    if (tile.wall == 133)
                    {
                        num4 = 2158;
                    }

                    if (tile.wall == 134)
                    {
                        num4 = 2159;
                    }

                    if (tile.wall == 135)
                    {
                        num4 = 2160;
                    }
                    else if (tile.wall == 113)
                    {
                        num4 = 1726;
                    }
                    else if (tile.wall == 114)
                    {
                        num4 = 1728;
                    }
                    else if (tile.wall == 115)
                    {
                        num4 = 1730;
                    }
                    else if (tile.wall == 146)
                    {
                        num4 = 2432;
                    }
                    else if (tile.wall == 147)
                    {
                        num4 = 2433;
                    }
                    else if (tile.wall == 148)
                    {
                        num4 = 2434;
                    }

                    if (tile.wall >= 116 && tile.wall <= 125)
                    {
                        num4 = 1948 + tile.wall - 116;
                    }

                    if (tile.wall >= 126 && tile.wall <= 132)
                    {
                        num4 = 2008 + tile.wall - 126;
                    }

                    if (tile.wall == 22)
                    {
                        num4 = 417;
                    }

                    if (tile.wall == 23)
                    {
                        num4 = 418;
                    }

                    if (tile.wall == 24)
                    {
                        num4 = 419;
                    }

                    if (tile.wall == 25)
                    {
                        num4 = 420;
                    }

                    if (tile.wall == 26)
                    {
                        num4 = 421;
                    }

                    if (tile.wall == 29)
                    {
                        num4 = 587;
                    }

                    if (tile.wall == 30)
                    {
                        num4 = 592;
                    }

                    if (tile.wall == 31)
                    {
                        num4 = 595;
                    }

                    if (tile.wall == 32)
                    {
                        num4 = 605;
                    }

                    if (tile.wall == 33)
                    {
                        num4 = 606;
                    }

                    if (tile.wall == 34)
                    {
                        num4 = 608;
                    }

                    if (tile.wall == 35)
                    {
                        num4 = 610;
                    }

                    if (tile.wall == 36)
                    {
                        num4 = 615;
                    }

                    if (tile.wall == 37)
                    {
                        num4 = 616;
                    }

                    if (tile.wall == 38)
                    {
                        num4 = 617;
                    }

                    if (tile.wall == 39)
                    {
                        num4 = 618;
                    }

                    if (tile.wall == 41)
                    {
                        num4 = 622;
                    }

                    if (tile.wall == 42)
                    {
                        num4 = 623;
                    }

                    if (tile.wall == 43)
                    {
                        num4 = 624;
                    }

                    if (tile.wall == 44)
                    {
                        num4 = 663;
                    }

                    if (tile.wall == 45)
                    {
                        num4 = 720;
                    }

                    if (tile.wall == 46)
                    {
                        num4 = 721;
                    }

                    if (tile.wall == 47)
                    {
                        num4 = 722;
                    }

                    if (tile.wall == 66)
                    {
                        num4 = 745;
                    }

                    if (tile.wall == 67)
                    {
                        num4 = 746;
                    }

                    if (tile.wall == 68)
                    {
                        num4 = 747;
                    }

                    if (tile.wall == 84)
                    {
                        num4 = 884;
                    }

                    if (tile.wall == 72)
                    {
                        num4 = 750;
                    }

                    if (tile.wall == 73)
                    {
                        num4 = 752;
                    }

                    if (tile.wall == 74)
                    {
                        num4 = 764;
                    }

                    if (tile.wall == 85)
                    {
                        num4 = 927;
                    }

                    if (tile.wall == 75)
                    {
                        num4 = 768;
                    }

                    if (tile.wall == 76)
                    {
                        num4 = 769;
                    }

                    if (tile.wall == 77)
                    {
                        num4 = 770;
                    }

                    if (tile.wall == 82)
                    {
                        num4 = 825;
                    }

                    if (tile.wall == 27)
                    {
                        num4 = 479;
                    }

                    if (tile.wall == 106)
                    {
                        num4 = 1447;
                    }

                    if (tile.wall == 107)
                    {
                        num4 = 1448;
                    }

                    if (tile.wall == 109)
                    {
                        num4 = 1590;
                    }

                    if (tile.wall == 110)
                    {
                        num4 = 1592;
                    }

                    if (tile.wall == 111)
                    {
                        num4 = 1594;
                    }

                    if (tile.wall == 78)
                    {
                        num4 = 1723;
                    }

                    if (tile.wall == 87 || tile.wall == 112)
                    {
                        num4 = 1102;
                    }

                    if (tile.wall == 94 || tile.wall == 100)
                    {
                        num4 = 1378;
                    }

                    if (tile.wall == 95 || tile.wall == 101)
                    {
                        num4 = 1379;
                    }

                    if (tile.wall == 96 || tile.wall == 102)
                    {
                        num4 = 1380;
                    }

                    if (tile.wall == 97 || tile.wall == 103)
                    {
                        num4 = 1381;
                    }

                    if (tile.wall == 98 || tile.wall == 104)
                    {
                        num4 = 1382;
                    }

                    if (tile.wall == 99 || tile.wall == 105)
                    {
                        num4 = 1383;
                    }

                    if (tile.wall >= 88 && tile.wall <= 93)
                    {
                        num4 = 1267 + tile.wall - 88;
                    }

                    if (tile.wall >= 138 && tile.wall <= 141)
                    {
                        num4 = 2210 + tile.wall - 138;
                    }

                    if (num4 > 0)
                    {
                        Item.NewItem(i * 16, j * 16, 16, 16, num4, 1, false, 0, false, false);
                    }

                    tile.wall = 0;
                    tile.wallColor(0);
                    SquareWallFrame(i, j, true);
                    if (tile.type >= 0 && tile.type < 470 && TileID.Sets.FramesOnKillWall[tile.type])
                    {
                        TileFrame(i, j, false, false);
                    }
                }
            }
        }
    }

    public static void LaunchRocket(int x, int y)
    {
        int num = Main.tile[x, y].frameY;
        int num2 = 0;
        while (num >= 40)
        {
            num -= 40;
            num2++;
        }

        if (num == 18)
        {
            y--;
        }

        Vector2 vector = new Vector2((float) (x * 16 + 8), (float) (y * 16 + 4));
        int type = 167 + num2;
        int damage = 150;
        int num3 = 7;
        Projectile.NewProjectile(vector.X, vector.Y + 2f, 0f, -8f, type, damage, (float) num3, Main.myPlayer, 0f, 0f);
        Main.tile[x, y].active(false);
        Main.tile[x, y + 1].active(false);
        NetMessage.SendTileSquare(-1, x - 1, y, 3, TileChangeType.None);
    }

    public static void LaunchRocketSmall(int x, int y)
    {
        if (Main.tile[x, y].frameX == 18)
        {
            x--;
        }

        if (Main.tile[x, y].frameY == 18)
        {
            y--;
        }

        Vector2 vector = new Vector2((float) (x * 16 + 16), (float) (y * 16));
        int type = 415 + Main.rand.Next(4);
        int damage = 0;
        int num = 0;
        Projectile.NewProjectile(vector.X, vector.Y + 2f, 0f, -8f, type, damage, (float) num, Main.myPlayer, 0f, 0f);
    }

    public static bool CanKillTile(int i, int j)
    {
        bool blockDamaged;
        return CanKillTile(i, j, out blockDamaged);
    }

    public static bool CanKillTile(int i, int j, out bool blockDamaged)
    {
        blockDamaged = false;
        if (i < 0 || j < 0 || i >= Main.maxTilesX || j >= Main.maxTilesY)
        {
            return false;
        }

        Tile tile = Main.tile[i, j];
        Tile tile2 = null;
        if (tile == null)
        {
            return false;
        }

        if (!tile.active())
        {
            return false;
        }

        if (j >= 1)
        {
            tile2 = Main.tile[i, j - 1];
        }

        if (tile2 != null && tile2.active())
        {
            int type = tile2.type;
            switch (type)
            {
                case 5:
                    if (tile.type != type && (tile2.frameX != 66 || tile2.frameY < 0 || tile2.frameY > 44) &&
                        (tile2.frameX != 88 || tile2.frameY < 66 || tile2.frameY > 110) && tile2.frameY < 198)
                    {
                        return false;
                    }

                    break;
                case 323:
                    if (tile.type != type && (tile2.frameX == 66 || tile2.frameX == 220))
                    {
                        return false;
                    }

                    break;
                case 21:
                case 26:
                case 72:
                case 88:
                    if (tile.type != type)
                    {
                        return false;
                    }

                    break;
            }
        }

        switch (tile.type)
        {
            case 10:
                if (tile.type == 10 && tile.frameY >= 594 && tile.frameY <= 646)
                {
                    blockDamaged = true;
                    return false;
                }

                break;
            case 138:
                if (CheckBoulderChest(i, j))
                {
                    blockDamaged = true;
                    return false;
                }

                break;
            case 235:
            {
                int num = i - tile.frameX % 54 / 18;
                for (int k = 0; k < 3; k++)
                {
                    if (Main.tile[num + k, j - 1].active() &&
                        (TileID.Sets.BasicChest[Main.tile[num + k, j - 1].type] ||
                         TileID.Sets.BasicChestFake[Main.tile[num + k, j - 1].type]))
                    {
                        blockDamaged = true;
                        return false;
                    }
                }

                break;
            }
            case 21:
                if (!Chest.CanDestroyChest(i - tile.frameX / 18 % 2, j - tile.frameY / 18))
                {
                    return false;
                }

                break;
            case 88:
                if (!Chest.CanDestroyChest(i - tile.frameX / 18 % 3, j - tile.frameY / 18))
                {
                    return false;
                }

                break;
        }

        return true;
    }

    public static void KillTile(int i, int j, bool fail = false, bool effectOnly = false, bool noItem = false)
    {
        if (i >= 0 && j >= 0 && i < Main.maxTilesX && j < Main.maxTilesY)
        {
            Tile tile = Main.tile[i, j];
            if (tile == null)
            {
                tile = new Tile();
                Main.tile[i, j] = tile;
            }

            if (tile.active())
            {
                if (j >= 1 && Main.tile[i, j - 1] == null)
                {
                    Tile[,] tile2 = Main.tile;
                    int num = j - 1;
                    Tile tile3 = new Tile();
                    tile2[i, num] = tile3;
                }

                if (j >= 1 && Main.tile[i, j - 1].active() && ((Main.tile[i, j - 1].type == 5 && tile.type != 5) ||
                                                               (Main.tile[i, j - 1].type == 323 && tile.type != 323) ||
                                                               (TileID.Sets.BasicChest[Main.tile[i, j - 1].type] &&
                                                                !TileID.Sets.BasicChest[tile.type]) ||
                                                               (Main.tile[i, j - 1].type == 323 && tile.type != 323) ||
                                                               (Main.tile[i, j - 1].type == 88 && tile.type != 88) ||
                                                               (Main.tile[i, j - 1].type == 26 && tile.type != 26) ||
                                                               (Main.tile[i, j - 1].type == 72 && tile.type != 72)))
                {
                    if (Main.tile[i, j - 1].type == 5)
                    {
                        if ((Main.tile[i, j - 1].frameX != 66 || Main.tile[i, j - 1].frameY < 0 ||
                             Main.tile[i, j - 1].frameY > 44) &&
                            (Main.tile[i, j - 1].frameX != 88 || Main.tile[i, j - 1].frameY < 66 ||
                             Main.tile[i, j - 1].frameY > 110) && Main.tile[i, j - 1].frameY < 198)
                        {
                            return;
                        }
                    }
                    else if (Main.tile[i, j - 1].type != 323 || Main.tile[i, j - 1].frameX == 66 ||
                             Main.tile[i, j - 1].frameX == 220)
                    {
                        return;
                    }
                }

                if (tile.type == 10 && tile.frameY >= 594 && tile.frameY <= 646)
                {
                    fail = true;
                }

                if (tile.type == 138)
                {
                    fail = CheckBoulderChest(i, j);
                }

                if (tile.type == 235)
                {
                    int frameX = tile.frameX;
                    int num2 = i - frameX % 54 / 18;
                    for (int k = 0; k < 3; k++)
                    {
                        if (Main.tile[num2 + k, j - 1].active() &&
                            (TileID.Sets.BasicChest[Main.tile[num2 + k, j - 1].type] ||
                             TileID.Sets.BasicChestFake[Main.tile[num2 + k, j - 1].type] ||
                             Main.tile[num2 + k, j - 1].type == 88))
                        {
                            fail = true;
                            break;
                        }
                    }
                }

                if (!effectOnly && !stopDrops)
                {
                    if (!noItem && FixExploitManEaters.SpotProtected(i, j))
                    {
                        return;
                    }

                    if (tile.type == 127)
                    {
                        Main.PlaySound(SoundID.Item27, i * 16, j * 16);
                    }
                    else if (tile.type == 147 || tile.type == 224)
                    {
                        if (genRand.Next(2) == 0)
                        {
                            Main.PlaySound(SoundID.Item48, i * 16, j * 16);
                        }
                        else
                        {
                            Main.PlaySound(SoundID.Item49, i * 16, j * 16);
                        }
                    }
                    else if (tile.type == 161 || tile.type == 163 || tile.type == 164 || tile.type == 200)
                    {
                        Main.PlaySound(SoundID.Item50, i * 16, j * 16);
                    }
                    else if (tile.type == 3 || tile.type == 110)
                    {
                        Main.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
                        if (tile.frameX == 144)
                        {
                            Item.NewItem(i * 16, j * 16, 16, 16, 5, 1, false, 0, false, false);
                        }
                    }
                    else if (tile.type == 254)
                    {
                        Main.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
                    }
                    else if (tile.type == 24)
                    {
                        Main.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
                        if (tile.frameX == 144)
                        {
                            Item.NewItem(i * 16, j * 16, 16, 16, 60, 1, false, 0, false, false);
                        }
                    }
                    else if (Main.tileAlch[tile.type] || tile.type == 384 || tile.type == 227 || tile.type == 32 ||
                             tile.type == 51 || tile.type == 52 || tile.type == 61 || tile.type == 62 ||
                             tile.type == 69 || tile.type == 71 || tile.type == 73 || tile.type == 74 ||
                             tile.type == 113 || tile.type == 115 || tile.type == 184 || tile.type == 192 ||
                             tile.type == 205 || tile.type == 233 || tile.type == 352 || tile.type == 382)
                    {
                        Main.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
                    }
                    else if (tile.type == 201)
                    {
                        Main.PlaySound(6, i * 16, j * 16, 1, 1f, 0f);
                        if (tile.frameX == 270)
                        {
                            Item.NewItem(i * 16, j * 16, 16, 16, 2887, 1, false, 0, false, false);
                        }
                    }
                    else if (tile.type == 1 || tile.type == 6 || tile.type == 7 || tile.type == 8 || tile.type == 9 ||
                             tile.type == 22 || tile.type == 140 || tile.type == 25 || tile.type == 37 ||
                             tile.type == 38 || tile.type == 39 || tile.type == 41 || tile.type == 43 ||
                             tile.type == 44 || tile.type == 45 || tile.type == 46 || tile.type == 47 ||
                             tile.type == 48 || tile.type == 56 || tile.type == 58 || tile.type == 63 ||
                             tile.type == 64 || tile.type == 65 || tile.type == 66 || tile.type == 67 ||
                             tile.type == 68 || tile.type == 75 || tile.type == 76 || tile.type == 107 ||
                             tile.type == 108 || tile.type == 111 || tile.type == 117 || tile.type == 118 ||
                             tile.type == 119 || tile.type == 120 || tile.type == 121 || tile.type == 122 ||
                             tile.type == 150 || tile.type == 151 || tile.type == 152 || tile.type == 153 ||
                             tile.type == 154 || tile.type == 155 || tile.type == 156 || tile.type == 160 ||
                             tile.type == 161 || tile.type == 166 || tile.type == 167 || tile.type == 168 ||
                             tile.type == 169 || tile.type == 175 || tile.type == 176 || tile.type == 177 ||
                             tile.type == 203 || tile.type == 202 || tile.type == 204 || tile.type == 206 ||
                             tile.type == 211 || tile.type == 221 || tile.type == 222 || tile.type == 223 ||
                             tile.type == 226 || tile.type == 248 || tile.type == 249 || tile.type == 250 ||
                             tile.type == 272 || tile.type == 273 || tile.type == 274 || tile.type == 284 ||
                             tile.type == 325 || tile.type == 346 || tile.type == 347 || tile.type == 348 ||
                             tile.type == 350 || tile.type == 367 || tile.type == 357 || tile.type == 368 ||
                             tile.type == 369 || tile.type == 370 || tile.type == 407)
                    {
                        Main.PlaySound(21, i * 16, j * 16, 1, 1f, 0f);
                    }
                    else if (tile.type == 231 || tile.type == 195)
                    {
                        Main.PlaySound(4, i * 16, j * 16, 1, 1f, 0f);
                    }
                    else if (tile.type == 26 && tile.frameX >= 54)
                    {
                        Main.PlaySound(4, i * 16, j * 16, 1, 1f, 0f);
                    }
                    else if (tile.type == 314)
                    {
                        Main.PlaySound(SoundID.Item52, i * 16, j * 16);
                    }
                    else if (tile.type >= 330 && tile.type <= 333)
                    {
                        Main.PlaySound(18, i * 16, j * 16, 1, 1f, 0f);
                    }
                    else if (tile.type != 138)
                    {
                        Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
                    }

                    if ((tile.type == 162 || tile.type == 385 || tile.type == 129 ||
                         (tile.type == 165 && tile.frameX < 54)) && !fail)
                    {
                        Main.PlaySound(SoundID.Item27, i * 16, j * 16);
                    }
                }

                if (tile.type == 128 || tile.type == 269)
                {
                    int num3 = i;
                    int num4 = tile.frameX;
                    int num5;
                    for (num5 = tile.frameX; num5 >= 100; num5 -= 100)
                    {
                    }

                    while (num5 >= 36)
                    {
                        num5 -= 36;
                    }

                    if (num5 == 18)
                    {
                        num4 = Main.tile[i - 1, j].frameX;
                        num3--;
                    }

                    if (num4 >= 100)
                    {
                        int num6 = 0;
                        while (num4 >= 100)
                        {
                            num4 -= 100;
                            num6++;
                        }

                        int num7 = Main.tile[num3, j].frameY / 18;
                        if (num7 == 0)
                        {
                            Item.NewItem(i * 16, j * 16, 16, 16, Item.headType[num6], 1, false, 0, false, false);
                        }

                        if (num7 == 1)
                        {
                            Item.NewItem(i * 16, j * 16, 16, 16, Item.bodyType[num6], 1, false, 0, false, false);
                        }

                        if (num7 == 2)
                        {
                            Item.NewItem(i * 16, j * 16, 16, 16, Item.legType[num6], 1, false, 0, false, false);
                        }

                        for (num4 = Main.tile[num3, j].frameX; num4 >= 100; num4 -= 100)
                        {
                        }

                        Main.tile[num3, j].frameX = (short) num4;
                    }
                }

                if (tile.type == 334)
                {
                    int num8 = i;
                    int frameX2 = tile.frameX;
                    int num9 = tile.frameX;
                    int num10 = 0;
                    while (num9 >= 5000)
                    {
                        num9 -= 5000;
                        num10++;
                    }

                    if (num10 != 0)
                    {
                        num9 = (num10 - 1) * 18;
                    }

                    num9 %= 54;
                    if (num9 == 18)
                    {
                        frameX2 = Main.tile[i - 1, j].frameX;
                        num8--;
                    }

                    if (num9 == 36)
                    {
                        frameX2 = Main.tile[i - 2, j].frameX;
                        num8 -= 2;
                    }

                    if (frameX2 >= 5000)
                    {
                        int num11 = frameX2 % 5000;
                        num11 -= 100;
                        int frameX3 = Main.tile[num8 + 1, j].frameX;
                        frameX3 = ((frameX3 < 25000) ? (frameX3 - 10000) : (frameX3 - 25000));
                        if (Main.netMode != 1)
                        {
                            Item item = new Item();
                            item.netDefaults(num11);
                            item.Prefix(frameX3);
                            int num12 = Item.NewItem(i * 16, j * 16, 16, 16, num11, 1, true, 0, false, false);
                            item.position = Main.item[num12].position;
                            Main.item[num12] = item;
                            NetMessage.SendData(21, -1, -1, null, num12, 0f, 0f, 0f, 0, 0, 0);
                        }

                        frameX2 = Main.tile[num8, j].frameX;
                        int num13 = 0;
                        while (frameX2 >= 5000)
                        {
                            frameX2 -= 5000;
                            num13++;
                        }

                        if (num13 != 0)
                        {
                            frameX2 = (num13 - 1) * 18;
                        }

                        Main.tile[num8, j].frameX = (short) frameX2;
                        Main.tile[num8 + 1, j].frameX = (short) (frameX2 + 18);
                    }
                }

                if (tile.type == 395)
                {
                    int num14 = TEItemFrame.Find(i - tile.frameX % 36 / 18, j - tile.frameY % 36 / 18);
                    if (num14 != -1 && ((TEItemFrame) TileEntity.ByID[num14]).item.stack > 0)
                    {
                        ((TEItemFrame) TileEntity.ByID[num14]).DropItem();
                        if (Main.netMode != 2)
                        {
                            Main.blockMouse = true;
                        }

                        return;
                    }
                }

                int num15 = KillTile_GetTileDustAmount(fail, tile);
                for (int l = 0; l < num15; l++)
                {
                    KillTile_MakeTileDust(i, j, tile);
                }

                if (!effectOnly)
                {
                    if (fail)
                    {
                        if (tile.type == 2 || tile.type == 23 || tile.type == 109 || tile.type == 199)
                        {
                            tile.type = 0;
                        }

                        if (tile.type == 60 || tile.type == 70)
                        {
                            tile.type = 59;
                        }

                        if (Main.tileMoss[tile.type])
                        {
                            tile.type = 1;
                        }

                        SquareTileFrame(i, j, true);
                    }
                    else
                    {
                        if (TileID.Sets.BasicChest[tile.type] && Main.netMode != 1)
                        {
                            int num16 = tile.frameX / 18;
                            int y = j - tile.frameY / 18;
                            while (num16 > 1)
                            {
                                num16 -= 2;
                            }

                            num16 = i - num16;
                            if (!Chest.DestroyChest(num16, y))
                            {
                                return;
                            }
                        }

                        if (tile.type == 88 && Main.netMode != 1)
                        {
                            int num17 = tile.frameX / 18;
                            int y2 = j - tile.frameY / 18;
                            num17 %= 3;
                            num17 = i - num17;
                            if (!Chest.DestroyChest(num17, y2))
                            {
                                return;
                            }
                        }

                        if (tile.type == 51 && tile.wall == 62 && genRand.Next(4) != 0)
                        {
                            noItem = true;
                        }

                        if (!noItem && !stopDrops && Main.netMode != 1)
                        {
                            bool flag = false;
                            int num18 = -1;
                            int num19 = -1;
                            int num20 = -1;
                            if (tile.type == 3)
                            {
                                num18 = 400;
                                num19 = 100;
                                if (tile.frameX >= 108)
                                {
                                    num18 *= 3;
                                    num19 *= 3;
                                }
                            }

                            if (tile.type == 73)
                            {
                                num18 = 200;
                                num19 = 50;
                                if (tile.frameX >= 108)
                                {
                                    num18 *= 3;
                                    num19 *= 3;
                                }
                            }

                            if (tile.type == 61)
                            {
                                num20 = 80;
                                if (tile.frameX >= 108)
                                {
                                    num20 *= 3;
                                }
                            }

                            if (tile.type == 74)
                            {
                                num20 = 40;
                                if (tile.frameX >= 108)
                                {
                                    num20 *= 3;
                                }
                            }

                            if (tile.type == 62)
                            {
                                num20 = 250;
                            }

                            if (tile.type == 185)
                            {
                                if (tile.frameY == 0 && tile.frameX < 214)
                                {
                                    num18 = 6;
                                }

                                if (tile.frameY == 18 && (tile.frameX < 214 || tile.frameX >= 1368))
                                {
                                    num18 = 6;
                                }
                            }
                            else if (tile.type == 186)
                            {
                                if (tile.frameX >= 378 && tile.frameX <= 700)
                                {
                                    num18 = 6;
                                }
                            }
                            else if (tile.type == 187)
                            {
                                if (tile.frameX >= 756 && tile.frameX <= 916)
                                {
                                    num18 = 6;
                                }

                                if (tile.frameX <= 322)
                                {
                                    num18 = 6;
                                }
                            }
                            else if (tile.type == 233)
                            {
                                num20 = 10;
                            }

                            if (num18 > 0 && NPC.CountNPCS(357) < 5 && genRand.Next(num18) == 0)
                            {
                                int type = 357;
                                if (genRand.Next(NPC.goldCritterChance) == 0)
                                {
                                    type = 448;
                                }

                                int num21 = NPC.NewNPC(i * 16 + 10, j * 16, type, 0, 0f, 0f, 0f, 0f, 255);
                                Main.npc[num21].TargetClosest(true);
                                Main.npc[num21].velocity.Y = (float) genRand.Next(-50, -21) * 0.1f;
                                Main.npc[num21].velocity.X =
                                    (float) genRand.Next(0, 26) * 0.1f * (float) (-Main.npc[num21].direction);
                                Main.npc[num21].direction *= -1;
                                Main.npc[num21].netUpdate = true;
                            }

                            if (num19 > 0 && NPC.CountNPCS(377) < 5 && genRand.Next(num19) == 0)
                            {
                                int type2 = 377;
                                if (genRand.Next(NPC.goldCritterChance) == 0)
                                {
                                    type2 = 446;
                                }

                                int num22 = NPC.NewNPC(i * 16 + 10, j * 16, type2, 0, 0f, 0f, 0f, 0f, 255);
                                Main.npc[num22].TargetClosest(true);
                                Main.npc[num22].velocity.Y = (float) genRand.Next(-50, -21) * 0.1f;
                                Main.npc[num22].velocity.X =
                                    (float) genRand.Next(0, 26) * 0.1f * (float) (-Main.npc[num22].direction);
                                Main.npc[num22].direction *= -1;
                                Main.npc[num22].netUpdate = true;
                            }

                            if (num20 > 0 && NPC.CountNPCS(485) + NPC.CountNPCS(486) + NPC.CountNPCS(487) < 8 &&
                                genRand.Next(num20) == 0)
                            {
                                int type3 = 485;
                                if (genRand.Next(4) == 0)
                                {
                                    type3 = 486;
                                }

                                if (genRand.Next(12) == 0)
                                {
                                    type3 = 487;
                                }

                                int num23 = NPC.NewNPC(i * 16 + 10, j * 16, type3, 0, 0f, 0f, 0f, 0f, 255);
                                Main.npc[num23].TargetClosest(true);
                                Main.npc[num23].velocity.Y = (float) genRand.Next(-50, -21) * 0.1f;
                                Main.npc[num23].velocity.X =
                                    (float) genRand.Next(0, 26) * 0.1f * (float) (-Main.npc[num23].direction);
                                Main.npc[num23].direction *= -1;
                                Main.npc[num23].netUpdate = true;
                            }

                            int num24 = 0;
                            int num25 = 0;
                            if (tile.type == 0 || tile.type == 2 || tile.type == 109)
                            {
                                num24 = 2;
                            }
                            else if (tile.type == 426)
                            {
                                num24 = 3621;
                            }
                            else if (tile.type == 430)
                            {
                                num24 = 3633;
                            }
                            else if (tile.type == 431)
                            {
                                num24 = 3634;
                            }
                            else if (tile.type == 432)
                            {
                                num24 = 3635;
                            }
                            else if (tile.type == 433)
                            {
                                num24 = 3636;
                            }
                            else if (tile.type == 434)
                            {
                                num24 = 3637;
                            }
                            else if (tile.type == 427)
                            {
                                num24 = 3622;
                            }
                            else if (tile.type == 435)
                            {
                                num24 = 3638;
                            }
                            else if (tile.type == 436)
                            {
                                num24 = 3639;
                            }
                            else if (tile.type == 437)
                            {
                                num24 = 3640;
                            }
                            else if (tile.type == 438)
                            {
                                num24 = 3641;
                            }
                            else if (tile.type == 439)
                            {
                                num24 = 3642;
                            }
                            else if (tile.type == 446)
                            {
                                num24 = 3736;
                            }
                            else if (tile.type == 447)
                            {
                                num24 = 3737;
                            }
                            else if (tile.type == 448)
                            {
                                num24 = 3738;
                            }
                            else if (tile.type == 449)
                            {
                                num24 = 3739;
                            }
                            else if (tile.type == 450)
                            {
                                num24 = 3740;
                            }
                            else if (tile.type == 451)
                            {
                                num24 = 3741;
                            }
                            else if (tile.type == 368)
                            {
                                num24 = 3086;
                            }
                            else if (tile.type == 369)
                            {
                                num24 = 3087;
                            }
                            else if (tile.type == 367)
                            {
                                num24 = 3081;
                            }
                            else if (tile.type == 379)
                            {
                                num24 = 3214;
                            }
                            else if (tile.type == 353)
                            {
                                num24 = 2996;
                            }
                            else if (tile.type == 365)
                            {
                                num24 = 3077;
                            }
                            else if (tile.type == 366)
                            {
                                num24 = 3078;
                            }
                            else if ((tile.type == 52 || tile.type == 62) && genRand.Next(2) == 0 &&
                                     Main.player[
                                             Player.FindClosest(new Vector2((float) (i * 16), (float) (j * 16)), 16,
                                                 16)]
                                         .cordage)
                            {
                                num24 = 2996;
                            }
                            else if (tile.type == 357)
                            {
                                num24 = 3066;
                            }
                            else if (tile.type == 1)
                            {
                                num24 = 3;
                            }
                            else if (tile.type == 3 || tile.type == 73)
                            {
                                if (genRand.Next(2) == 0 &&
                                    (Main.player[
                                             Player.FindClosest(new Vector2((float) (i * 16), (float) (j * 16)), 16,
                                                 16)]
                                         .HasItem(281) ||
                                     Main.player[
                                             Player.FindClosest(new Vector2((float) (i * 16), (float) (j * 16)), 16,
                                                 16)]
                                         .HasItem(986)))
                                {
                                    num24 = 283;
                                }
                            }
                            else if (tile.type == 227)
                            {
                                int num26 = tile.frameX / 34;
                                num24 = 1107 + num26;
                                if (num26 >= 8 && num26 <= 11)
                                {
                                    num24 = 3385 + num26 - 8;
                                }
                            }
                            else if (tile.type == 4)
                            {
                                int num27 = tile.frameY / 22;
                                switch (num27)
                                {
                                    case 0:
                                        num24 = 8;
                                        break;
                                    case 8:
                                        num24 = 523;
                                        break;
                                    case 9:
                                        num24 = 974;
                                        break;
                                    case 10:
                                        num24 = 1245;
                                        break;
                                    case 11:
                                        num24 = 1333;
                                        break;
                                    case 12:
                                        num24 = 2274;
                                        break;
                                    case 13:
                                        num24 = 3004;
                                        break;
                                    case 14:
                                        num24 = 3045;
                                        break;
                                    case 15:
                                        num24 = 3114;
                                        break;
                                    default:
                                        num24 = 426 + num27;
                                        break;
                                }
                            }
                            else if (tile.type == 239)
                            {
                                int num28 = tile.frameX / 18;
                                if (num28 == 0)
                                {
                                    num24 = 20;
                                }

                                if (num28 == 1)
                                {
                                    num24 = 703;
                                }

                                if (num28 == 2)
                                {
                                    num24 = 22;
                                }

                                if (num28 == 3)
                                {
                                    num24 = 704;
                                }

                                if (num28 == 4)
                                {
                                    num24 = 21;
                                }

                                if (num28 == 5)
                                {
                                    num24 = 705;
                                }

                                if (num28 == 6)
                                {
                                    num24 = 19;
                                }

                                if (num28 == 7)
                                {
                                    num24 = 706;
                                }

                                if (num28 == 8)
                                {
                                    num24 = 57;
                                }

                                if (num28 == 9)
                                {
                                    num24 = 117;
                                }

                                if (num28 == 10)
                                {
                                    num24 = 175;
                                }

                                if (num28 == 11)
                                {
                                    num24 = 381;
                                }

                                if (num28 == 12)
                                {
                                    num24 = 1184;
                                }

                                if (num28 == 13)
                                {
                                    num24 = 382;
                                }

                                if (num28 == 14)
                                {
                                    num24 = 1191;
                                }

                                if (num28 == 15)
                                {
                                    num24 = 391;
                                }

                                if (num28 == 16)
                                {
                                    num24 = 1198;
                                }

                                if (num28 == 17)
                                {
                                    num24 = 1006;
                                }

                                if (num28 == 18)
                                {
                                    num24 = 1225;
                                }

                                if (num28 == 19)
                                {
                                    num24 = 1257;
                                }

                                if (num28 == 20)
                                {
                                    num24 = 1552;
                                }

                                if (num28 == 21)
                                {
                                    num24 = 3261;
                                }

                                if (num28 == 22)
                                {
                                    num24 = 3467;
                                }
                            }
                            else if (tile.type == 380)
                            {
                                int num29 = tile.frameY / 18;
                                num24 = 3215 + num29;
                            }
                            else if (tile.type == 442)
                            {
                                num24 = 3707;
                            }
                            else if (tile.type == 383)
                            {
                                num24 = 620;
                            }
                            else if (tile.type == 315)
                            {
                                num24 = 2435;
                            }
                            else if (tile.type == 330)
                            {
                                num24 = 71;
                            }
                            else if (tile.type == 331)
                            {
                                num24 = 72;
                            }
                            else if (tile.type == 332)
                            {
                                num24 = 73;
                            }
                            else if (tile.type == 333)
                            {
                                num24 = 74;
                            }
                            else if (tile.type == 5)
                            {
                                if (tile.frameX >= 22 && tile.frameY >= 198)
                                {
                                    if (Main.netMode != 1)
                                    {
                                        if (genRand.Next(2) == 0)
                                        {
                                            int m;
                                            for (m = j;
                                                Main.tile[i, m] != null &&
                                                (!Main.tile[i, m].active() || !Main.tileSolid[Main.tile[i, m].type] ||
                                                 Main.tileSolidTop[Main.tile[i, m].type]);
                                                m++)
                                            {
                                            }

                                            if (Main.tile[i, m] != null)
                                            {
                                                if (Main.tile[i, m].type == 2 || Main.tile[i, m].type == 109 ||
                                                    Main.tile[i, m].type == 147 || Main.tile[i, m].type == 199 ||
                                                    Main.tile[i, m].type == 23)
                                                {
                                                    num24 = 9;
                                                    num25 = 27;
                                                }
                                                else
                                                {
                                                    num24 = 9;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            num24 = 9;
                                        }
                                    }
                                }
                                else
                                {
                                    num24 = 9;
                                }

                                if (num24 == 9)
                                {
                                    int num30 = i;
                                    int n = j;
                                    if (tile.frameX == 66 && tile.frameY <= 45)
                                    {
                                        num30++;
                                    }

                                    if (tile.frameX == 88 && tile.frameY >= 66 && tile.frameY <= 110)
                                    {
                                        num30--;
                                    }

                                    if (tile.frameX == 22 && tile.frameY >= 132 && tile.frameY <= 176)
                                    {
                                        num30--;
                                    }

                                    if (tile.frameX == 44 && tile.frameY >= 132 && tile.frameY <= 176)
                                    {
                                        num30++;
                                    }

                                    if (tile.frameX == 44 && tile.frameY >= 198)
                                    {
                                        num30++;
                                    }

                                    if (tile.frameX == 66 && tile.frameY >= 198)
                                    {
                                        num30--;
                                    }

                                    for (;
                                        !Main.tile[num30, n].active() || !Main.tileSolid[Main.tile[num30, n].type];
                                        n++)
                                    {
                                    }

                                    if (Main.tile[num30, n].active())
                                    {
                                        switch (Main.tile[num30, n].type)
                                        {
                                            case 23:
                                                num24 = 619;
                                                break;
                                            case 60:
                                                num24 = 620;
                                                break;
                                            case 109:
                                                num24 = 621;
                                                break;
                                            case 199:
                                                num24 = 911;
                                                break;
                                            case 70:
                                                num24 = 183;
                                                break;
                                            case 147:
                                                num24 = 2503;
                                                break;
                                        }
                                    }

                                    int num31 = Player.FindClosest(new Vector2((float) (num30 * 16), (float) (n * 16)),
                                        16, 16);
                                    int axe = Main.player[num31].inventory[Main.player[num31].selectedItem].axe;
                                    if (genRand.Next(100) < axe || Main.rand.Next(3) == 0)
                                    {
                                        flag = true;
                                    }
                                }
                            }
                            else if (tile.type == 323)
                            {
                                num24 = 2504;
                                if (tile.frameX <= 132 && tile.frameX >= 88)
                                {
                                    num25 = 27;
                                }

                                int num32;
                                for (num32 = j;
                                    !Main.tile[i, num32].active() || !Main.tileSolid[Main.tile[i, num32].type];
                                    num32++)
                                {
                                }

                                if (Main.tile[i, num32].active())
                                {
                                    switch (Main.tile[i, num32].type)
                                    {
                                        case 234:
                                            num24 = 911;
                                            break;
                                        case 116:
                                            num24 = 621;
                                            break;
                                        case 112:
                                            num24 = 619;
                                            break;
                                    }
                                }
                            }
                            else if (tile.type == 408)
                            {
                                num24 = 3460;
                            }
                            else if (tile.type == 409)
                            {
                                num24 = 3461;
                            }
                            else if (tile.type == 415)
                            {
                                num24 = 3573;
                            }
                            else if (tile.type == 416)
                            {
                                num24 = 3574;
                            }
                            else if (tile.type == 417)
                            {
                                num24 = 3575;
                            }
                            else if (tile.type == 418)
                            {
                                num24 = 3576;
                            }
                            else if (tile.type >= 255 && tile.type <= 261)
                            {
                                num24 = 1970 + tile.type - 255;
                            }
                            else if (tile.type >= 262 && tile.type <= 268)
                            {
                                num24 = 1970 + tile.type - 262;
                            }
                            else if (tile.type == 171)
                            {
                                if (tile.frameX >= 10)
                                {
                                    dropXmasTree(i, j, 0);
                                    dropXmasTree(i, j, 1);
                                    dropXmasTree(i, j, 2);
                                    dropXmasTree(i, j, 3);
                                }
                            }
                            else if (tile.type == 324)
                            {
                                switch (tile.frameY / 22)
                                {
                                    case 0:
                                        num24 = 2625;
                                        break;
                                    case 1:
                                        num24 = 2626;
                                        break;
                                }
                            }
                            else if (tile.type == 421)
                            {
                                num24 = 3609;
                            }
                            else if (tile.type == 422)
                            {
                                num24 = 3610;
                            }
                            else if (tile.type == 419)
                            {
                                switch (tile.frameX / 18)
                                {
                                    case 0:
                                        num24 = 3602;
                                        break;
                                    case 1:
                                        num24 = 3618;
                                        break;
                                    case 2:
                                        num24 = 3663;
                                        break;
                                }
                            }
                            else if (tile.type == 428)
                            {
                                switch (tile.frameY / 18)
                                {
                                    case 0:
                                        num24 = 3630;
                                        break;
                                    case 1:
                                        num24 = 3632;
                                        break;
                                    case 2:
                                        num24 = 3631;
                                        break;
                                    case 3:
                                        num24 = 3626;
                                        break;
                                }

                                PressurePlateHelper.DestroyPlate(new Point(i, j));
                            }
                            else if (tile.type == 420)
                            {
                                switch (tile.frameY / 18)
                                {
                                    case 0:
                                        num24 = 3603;
                                        break;
                                    case 1:
                                        num24 = 3604;
                                        break;
                                    case 2:
                                        num24 = 3605;
                                        break;
                                    case 3:
                                        num24 = 3606;
                                        break;
                                    case 4:
                                        num24 = 3607;
                                        break;
                                    case 5:
                                        num24 = 3608;
                                        break;
                                }
                            }
                            else if (tile.type == 423)
                            {
                                TELogicSensor.Kill(i, j);
                                switch (tile.frameY / 18)
                                {
                                    case 0:
                                        num24 = 3613;
                                        break;
                                    case 1:
                                        num24 = 3614;
                                        break;
                                    case 2:
                                        num24 = 3615;
                                        break;
                                    case 3:
                                        num24 = 3726;
                                        break;
                                    case 4:
                                        num24 = 3727;
                                        break;
                                    case 5:
                                        num24 = 3728;
                                        break;
                                    case 6:
                                        num24 = 3729;
                                        break;
                                }
                            }
                            else if (tile.type == 424)
                            {
                                num24 = 3616;
                            }
                            else if (tile.type == 445)
                            {
                                num24 = 3725;
                            }
                            else if (tile.type == 429)
                            {
                                num24 = 3629;
                            }
                            else if (tile.type == 272)
                            {
                                num24 = 1344;
                            }
                            else if (tile.type == 273)
                            {
                                num24 = 2119;
                            }
                            else if (tile.type == 274)
                            {
                                num24 = 2120;
                            }
                            else if (tile.type == 460)
                            {
                                num24 = 3756;
                            }
                            else if (tile.type == 326)
                            {
                                num24 = 2693;
                                Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
                            }
                            else if (tile.type == 327)
                            {
                                num24 = 2694;
                                Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
                            }
                            else if (tile.type == 458)
                            {
                                num24 = 3754;
                                Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
                            }
                            else if (tile.type == 459)
                            {
                                num24 = 3755;
                                Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
                            }
                            else if (tile.type == 345)
                            {
                                num24 = 2787;
                                Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
                            }
                            else if (tile.type == 328)
                            {
                                num24 = 2695;
                                Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
                            }
                            else if (tile.type == 329)
                            {
                                num24 = 2697;
                                Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
                            }
                            else if (tile.type == 346)
                            {
                                num24 = 2792;
                            }
                            else if (tile.type == 347)
                            {
                                num24 = 2793;
                            }
                            else if (tile.type == 348)
                            {
                                num24 = 2794;
                            }
                            else if (tile.type == 350)
                            {
                                num24 = 2860;
                            }
                            else if (tile.type == 336)
                            {
                                num24 = 2701;
                            }
                            else if (tile.type == 340)
                            {
                                num24 = 2751;
                            }
                            else if (tile.type == 341)
                            {
                                num24 = 2752;
                            }
                            else if (tile.type == 342)
                            {
                                num24 = 2753;
                            }
                            else if (tile.type == 343)
                            {
                                num24 = 2754;
                            }
                            else if (tile.type == 344)
                            {
                                num24 = 2755;
                            }
                            else if (tile.type == 351)
                            {
                                num24 = 2868;
                            }
                            else if (tile.type == 251)
                            {
                                num24 = 1725;
                            }
                            else if (tile.type == 252)
                            {
                                num24 = 1727;
                            }
                            else if (tile.type == 253)
                            {
                                num24 = 1729;
                            }
                            else if (tile.type == 325)
                            {
                                num24 = 2692;
                            }
                            else if (tile.type == 370)
                            {
                                num24 = 3100;
                            }
                            else if (tile.type == 396)
                            {
                                num24 = 3271;
                            }
                            else if (tile.type == 400)
                            {
                                num24 = 3276;
                            }
                            else if (tile.type == 401)
                            {
                                num24 = 3277;
                            }
                            else if (tile.type == 403)
                            {
                                num24 = 3339;
                            }
                            else if (tile.type == 397)
                            {
                                num24 = 3272;
                            }
                            else if (tile.type == 398)
                            {
                                num24 = 3274;
                            }
                            else if (tile.type == 399)
                            {
                                num24 = 3275;
                            }
                            else if (tile.type == 402)
                            {
                                num24 = 3338;
                            }
                            else if (tile.type == 404)
                            {
                                num24 = 3347;
                            }
                            else if (tile.type == 407)
                            {
                                num24 = 3380;
                            }
                            else if (tile.type == 170)
                            {
                                num24 = 1872;
                            }
                            else if (tile.type == 284)
                            {
                                num24 = 2173;
                            }
                            else if (tile.type == 214)
                            {
                                num24 = 85;
                            }
                            else if (tile.type == 213)
                            {
                                num24 = 965;
                            }
                            else if (tile.type == 211)
                            {
                                num24 = 947;
                            }
                            else if (tile.type == 6)
                            {
                                num24 = 11;
                            }
                            else if (tile.type == 7)
                            {
                                num24 = 12;
                            }
                            else if (tile.type == 8)
                            {
                                num24 = 13;
                            }
                            else if (tile.type == 9)
                            {
                                num24 = 14;
                            }
                            else if (tile.type == 202)
                            {
                                num24 = 824;
                            }
                            else if (tile.type == 234)
                            {
                                num24 = 1246;
                            }
                            else if (tile.type == 226)
                            {
                                num24 = 1101;
                            }
                            else if (tile.type == 224)
                            {
                                num24 = 1103;
                            }
                            else if (tile.type == 36)
                            {
                                num24 = 1869;
                            }
                            else if (tile.type == 311)
                            {
                                num24 = 2260;
                            }
                            else if (tile.type == 312)
                            {
                                num24 = 2261;
                            }
                            else if (tile.type == 313)
                            {
                                num24 = 2262;
                            }
                            else if (tile.type == 229)
                            {
                                num24 = 1125;
                            }
                            else if (tile.type == 230)
                            {
                                num24 = 1127;
                            }
                            else if (tile.type == 225)
                            {
                                if (genRand.Next(3) == 0)
                                {
                                    tile.honey(true);
                                    tile.liquid = byte.MaxValue;
                                }
                                else
                                {
                                    num24 = 1124;
                                    if (Main.netMode != 1 && genRand.Next(2) == 0)
                                    {
                                        int num33 = 1;
                                        if (genRand.Next(3) == 0)
                                        {
                                            num33 = 2;
                                        }

                                        for (int num34 = 0; num34 < num33; num34++)
                                        {
                                            int type4 = genRand.Next(210, 212);
                                            int num35 = NPC.NewNPC(i * 16 + 8, j * 16 + 15, type4, 1, 0f, 0f, 0f, 0f,
                                                255);
                                            Main.npc[num35].velocity.X = (float) genRand.Next(-200, 201) * 0.002f;
                                            Main.npc[num35].velocity.Y = (float) genRand.Next(-200, 201) * 0.002f;
                                            Main.npc[num35].netUpdate = true;
                                        }
                                    }
                                }
                            }
                            else if (tile.type == 221)
                            {
                                num24 = 1104;
                            }
                            else if (tile.type == 222)
                            {
                                num24 = 1105;
                            }
                            else if (tile.type == 223)
                            {
                                num24 = 1106;
                            }
                            else if (tile.type == 248)
                            {
                                num24 = 1589;
                            }
                            else if (tile.type == 249)
                            {
                                num24 = 1591;
                            }
                            else if (tile.type == 250)
                            {
                                num24 = 1593;
                            }
                            else if (tile.type == 191)
                            {
                                num24 = 9;
                            }
                            else if (tile.type == 203)
                            {
                                num24 = 836;
                            }
                            else if (tile.type == 204)
                            {
                                num24 = 880;
                            }
                            else if (tile.type == 166)
                            {
                                num24 = 699;
                            }
                            else if (tile.type == 167)
                            {
                                num24 = 700;
                            }
                            else if (tile.type == 168)
                            {
                                num24 = 701;
                            }
                            else if (tile.type == 169)
                            {
                                num24 = 702;
                            }
                            else if (tile.type == 123)
                            {
                                num24 = 424;
                            }
                            else if (tile.type == 124)
                            {
                                num24 = 480;
                            }
                            else if (tile.type == 157)
                            {
                                num24 = 619;
                            }
                            else if (tile.type == 158)
                            {
                                num24 = 620;
                            }
                            else if (tile.type == 159)
                            {
                                num24 = 621;
                            }
                            else if (tile.type == 161)
                            {
                                num24 = 664;
                            }
                            else if (tile.type == 206)
                            {
                                num24 = 883;
                            }
                            else if (tile.type == 232)
                            {
                                num24 = 1150;
                            }
                            else if (tile.type == 198)
                            {
                                num24 = 775;
                            }
                            else if (tile.type == 314)
                            {
                                num24 = Minecart.GetTrackItem(tile);
                            }
                            else if (tile.type == 189)
                            {
                                num24 = 751;
                            }
                            else if (tile.type == 195)
                            {
                                num24 = 763;
                            }
                            else if (tile.type == 194)
                            {
                                num24 = 766;
                            }
                            else if (tile.type == 193)
                            {
                                num24 = 762;
                            }
                            else if (tile.type == 196)
                            {
                                num24 = 765;
                            }
                            else if (tile.type == 197)
                            {
                                num24 = 767;
                            }
                            else if (tile.type == 178)
                            {
                                switch (tile.frameX / 18)
                                {
                                    case 0:
                                        num24 = 181;
                                        break;
                                    case 1:
                                        num24 = 180;
                                        break;
                                    case 2:
                                        num24 = 177;
                                        break;
                                    case 3:
                                        num24 = 179;
                                        break;
                                    case 4:
                                        num24 = 178;
                                        break;
                                    case 5:
                                        num24 = 182;
                                        break;
                                    case 6:
                                        num24 = 999;
                                        break;
                                }
                            }
                            else if (tile.type == 149)
                            {
                                if (tile.frameX == 0 || tile.frameX == 54)
                                {
                                    num24 = 596;
                                }
                                else if (tile.frameX == 18 || tile.frameX == 72)
                                {
                                    num24 = 597;
                                }
                                else if (tile.frameX == 36 || tile.frameX == 90)
                                {
                                    num24 = 598;
                                }
                            }
                            else if (tile.type == 13)
                            {
                                Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
                                switch (tile.frameX / 18)
                                {
                                    case 1:
                                        num24 = 28;
                                        break;
                                    case 2:
                                        num24 = 110;
                                        break;
                                    case 3:
                                        num24 = 350;
                                        break;
                                    case 4:
                                        num24 = 351;
                                        break;
                                    case 5:
                                        num24 = 2234;
                                        break;
                                    case 6:
                                        num24 = 2244;
                                        break;
                                    case 7:
                                        num24 = 2257;
                                        break;
                                    case 8:
                                        num24 = 2258;
                                        break;
                                    default:
                                        num24 = 31;
                                        break;
                                }
                            }
                            else if (tile.type == 19)
                            {
                                int num36 = tile.frameY / 18;
                                switch (num36)
                                {
                                    case 0:
                                        num24 = 94;
                                        break;
                                    case 1:
                                        num24 = 631;
                                        break;
                                    case 2:
                                        num24 = 632;
                                        break;
                                    case 3:
                                        num24 = 633;
                                        break;
                                    case 4:
                                        num24 = 634;
                                        break;
                                    case 5:
                                        num24 = 913;
                                        break;
                                    case 6:
                                        num24 = 1384;
                                        break;
                                    case 7:
                                        num24 = 1385;
                                        break;
                                    case 8:
                                        num24 = 1386;
                                        break;
                                    case 9:
                                        num24 = 1387;
                                        break;
                                    case 10:
                                        num24 = 1388;
                                        break;
                                    case 11:
                                        num24 = 1389;
                                        break;
                                    case 12:
                                        num24 = 1418;
                                        break;
                                    case 13:
                                        num24 = 1457;
                                        break;
                                    case 14:
                                        num24 = 1702;
                                        break;
                                    case 15:
                                        num24 = 1796;
                                        break;
                                    case 16:
                                        num24 = 1818;
                                        break;
                                    case 17:
                                        num24 = 2518;
                                        break;
                                    case 18:
                                        num24 = 2549;
                                        break;
                                    case 19:
                                        num24 = 2566;
                                        break;
                                    case 20:
                                        num24 = 2581;
                                        break;
                                    case 21:
                                        num24 = 2627;
                                        break;
                                    case 22:
                                        num24 = 2628;
                                        break;
                                    case 23:
                                        num24 = 2629;
                                        break;
                                    case 24:
                                        num24 = 2630;
                                        break;
                                    case 25:
                                        num24 = 2744;
                                        break;
                                    case 26:
                                        num24 = 2822;
                                        break;
                                    case 27:
                                        num24 = 3144;
                                        break;
                                    case 28:
                                        num24 = 3146;
                                        break;
                                    case 29:
                                        num24 = 3145;
                                        break;
                                    case 30:
                                    case 31:
                                    case 32:
                                    case 33:
                                    case 34:
                                    case 35:
                                        num24 = 3903 + num36 - 30;
                                        break;
                                }
                            }
                            else if (tile.type == 22)
                            {
                                num24 = 56;
                            }
                            else if (tile.type == 140)
                            {
                                num24 = 577;
                            }
                            else if (tile.type == 23)
                            {
                                num24 = 2;
                            }
                            else if (tile.type == 25)
                            {
                                num24 = 61;
                            }
                            else if (tile.type == 30)
                            {
                                num24 = 9;
                            }
                            else if (tile.type == 191)
                            {
                                num24 = 9;
                            }
                            else if (tile.type == 208)
                            {
                                num24 = 911;
                            }
                            else if (tile.type == 33)
                            {
                                int num37 = tile.frameY / 22;
                                num24 = 105;
                                if (num37 == 1)
                                {
                                    num24 = 1405;
                                }
                                else if (num37 == 2)
                                {
                                    num24 = 1406;
                                }
                                else if (num37 == 3)
                                {
                                    num24 = 1407;
                                }
                                else if (num37 >= 4 && num37 <= 13)
                                {
                                    num24 = 2045 + num37 - 4;
                                }
                                else if (num37 < 14 || num37 > 16)
                                {
                                    switch (num37)
                                    {
                                        case 17:
                                            num24 = 2236;
                                            break;
                                        case 18:
                                            num24 = 2523;
                                            break;
                                        case 19:
                                            num24 = 2542;
                                            break;
                                        case 20:
                                            num24 = 2556;
                                            break;
                                        case 21:
                                            num24 = 2571;
                                            break;
                                        case 22:
                                            num24 = 2648;
                                            break;
                                        case 23:
                                            num24 = 2649;
                                            break;
                                        case 24:
                                            num24 = 2650;
                                            break;
                                        case 25:
                                            num24 = 2651;
                                            break;
                                        case 26:
                                            num24 = 2818;
                                            break;
                                        case 27:
                                            num24 = 3171;
                                            break;
                                        case 28:
                                            num24 = 3173;
                                            break;
                                        case 29:
                                            num24 = 3172;
                                            break;
                                        case 30:
                                            num24 = 3890;
                                            break;
                                    }
                                }
                                else
                                {
                                    num24 = 2153 + num37 - 14;
                                }
                            }
                            else if (tile.type == 372)
                            {
                                num24 = 3117;
                            }
                            else if (tile.type == 371)
                            {
                                num24 = 3113;
                            }
                            else if (tile.type == 174)
                            {
                                num24 = 713;
                            }
                            else if (tile.type == 37)
                            {
                                num24 = 116;
                            }
                            else if (tile.type == 38)
                            {
                                num24 = 129;
                            }
                            else if (tile.type == 39)
                            {
                                num24 = 131;
                            }
                            else if (tile.type == 40)
                            {
                                num24 = 133;
                            }
                            else if (tile.type == 41)
                            {
                                num24 = 134;
                            }
                            else if (tile.type == 43)
                            {
                                num24 = 137;
                            }
                            else if (tile.type == 44)
                            {
                                num24 = 139;
                            }
                            else if (tile.type == 45)
                            {
                                num24 = 141;
                            }
                            else if (tile.type == 46)
                            {
                                num24 = 143;
                            }
                            else if (tile.type == 47)
                            {
                                num24 = 145;
                            }
                            else if (tile.type == 48)
                            {
                                num24 = 147;
                            }
                            else if (tile.type == 49)
                            {
                                num24 = 148;
                            }
                            else if (tile.type == 51)
                            {
                                num24 = 150;
                            }
                            else if (tile.type == 53)
                            {
                                num24 = 169;
                            }
                            else if (tile.type == 151)
                            {
                                num24 = 607;
                            }
                            else if (tile.type == 152)
                            {
                                num24 = 609;
                            }
                            else if (tile.type == 54)
                            {
                                num24 = 170;
                                Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0f);
                            }
                            else if (tile.type == 56)
                            {
                                num24 = 173;
                            }
                            else if (tile.type == 57)
                            {
                                num24 = 172;
                            }
                            else if (tile.type == 58)
                            {
                                num24 = 174;
                            }
                            else if (tile.type == 60)
                            {
                                num24 = 176;
                            }
                            else if (tile.type == 70)
                            {
                                num24 = 176;
                            }
                            else if (tile.type == 75)
                            {
                                num24 = 192;
                            }
                            else if (tile.type == 76)
                            {
                                num24 = 214;
                            }
                            else if (tile.type == 78)
                            {
                                num24 = 222;
                            }
                            else if (tile.type == 81)
                            {
                                num24 = 275;
                            }
                            else if (tile.type == 80)
                            {
                                num24 = 276;
                            }
                            else if (tile.type == 188)
                            {
                                num24 = 276;
                            }
                            else if (tile.type == 107)
                            {
                                num24 = 364;
                            }
                            else if (tile.type == 108)
                            {
                                num24 = 365;
                            }
                            else if (tile.type == 111)
                            {
                                num24 = 366;
                            }
                            else if (tile.type == 150)
                            {
                                num24 = 604;
                            }
                            else if (tile.type == 112)
                            {
                                num24 = 370;
                            }
                            else if (tile.type == 116)
                            {
                                num24 = 408;
                            }
                            else if (tile.type == 117)
                            {
                                num24 = 409;
                            }
                            else if (tile.type == 129)
                            {
                                num24 = 502;
                            }
                            else if (tile.type == 118)
                            {
                                num24 = 412;
                            }
                            else if (tile.type == 119)
                            {
                                num24 = 413;
                            }
                            else if (tile.type == 120)
                            {
                                num24 = 414;
                            }
                            else if (tile.type == 121)
                            {
                                num24 = 415;
                            }
                            else if (tile.type == 122)
                            {
                                num24 = 416;
                            }
                            else if (tile.type == 136)
                            {
                                num24 = 538;
                            }
                            else if (tile.type == 385)
                            {
                                num24 = 3234;
                            }
                            else if (tile.type == 137)
                            {
                                int num38 = tile.frameY / 18;
                                if (num38 == 0)
                                {
                                    num24 = 539;
                                }

                                if (num38 == 1)
                                {
                                    num24 = 1146;
                                }

                                if (num38 == 2)
                                {
                                    num24 = 1147;
                                }

                                if (num38 == 3)
                                {
                                    num24 = 1148;
                                }

                                if (num38 == 4)
                                {
                                    num24 = 1149;
                                }
                            }
                            else if (tile.type == 141)
                            {
                                num24 = 580;
                            }
                            else if (tile.type == 145)
                            {
                                num24 = 586;
                            }
                            else if (tile.type == 146)
                            {
                                num24 = 591;
                            }
                            else if (tile.type == 147)
                            {
                                num24 = 593;
                            }
                            else if (tile.type == 148)
                            {
                                num24 = 594;
                            }
                            else if (tile.type == 153)
                            {
                                num24 = 611;
                            }
                            else if (tile.type == 154)
                            {
                                num24 = 612;
                            }
                            else if (tile.type == 155)
                            {
                                num24 = 613;
                            }
                            else if (tile.type == 156)
                            {
                                num24 = 614;
                            }
                            else if (tile.type == 160)
                            {
                                num24 = 662;
                            }
                            else if (tile.type == 175)
                            {
                                num24 = 717;
                            }
                            else if (tile.type == 176)
                            {
                                num24 = 718;
                            }
                            else if (tile.type == 177)
                            {
                                num24 = 719;
                            }
                            else if (tile.type == 163)
                            {
                                num24 = 833;
                            }
                            else if (tile.type == 164)
                            {
                                num24 = 834;
                            }
                            else if (tile.type == 200)
                            {
                                num24 = 835;
                            }
                            else if (tile.type == 210)
                            {
                                num24 = 937;
                            }
                            else if (tile.type == 135)
                            {
                                int num39 = tile.frameY / 18;
                                if (num39 == 0)
                                {
                                    num24 = 529;
                                }

                                if (num39 == 1)
                                {
                                    num24 = 541;
                                }

                                if (num39 == 2)
                                {
                                    num24 = 542;
                                }

                                if (num39 == 3)
                                {
                                    num24 = 543;
                                }

                                if (num39 == 4)
                                {
                                    num24 = 852;
                                }

                                if (num39 == 5)
                                {
                                    num24 = 853;
                                }

                                if (num39 == 6)
                                {
                                    num24 = 1151;
                                }
                            }
                            else if (tile.type == 144)
                            {
                                if (tile.frameX == 0)
                                {
                                    num24 = 583;
                                }

                                if (tile.frameX == 18)
                                {
                                    num24 = 584;
                                }

                                if (tile.frameX == 36)
                                {
                                    num24 = 585;
                                }
                            }
                            else if (tile.type == 130)
                            {
                                num24 = 511;
                            }
                            else if (tile.type == 131)
                            {
                                num24 = 512;
                            }
                            else if (tile.type == 61 || tile.type == 74)
                            {
                                if (tile.frameX == 144 && tile.type == 61)
                                {
                                    Item.NewItem(i * 16, j * 16, 16, 16, 331, genRand.Next(2, 4), false, 0, false,
                                        false);
                                }
                                else if (tile.frameX == 162 && tile.type == 61)
                                {
                                    num24 = 223;
                                }
                                else if (tile.frameX >= 108 && tile.frameX <= 126 && tile.type == 61 &&
                                         genRand.Next(20) == 0)
                                {
                                    num24 = 208;
                                }
                                else if (genRand.Next(100) == 0)
                                {
                                    num24 = 195;
                                }
                            }
                            else if (tile.type == 59 || tile.type == 60)
                            {
                                num24 = 176;
                            }
                            else if (tile.type == 190)
                            {
                                num24 = 183;
                            }
                            else if (tile.type == 71 || tile.type == 72)
                            {
                                if (genRand.Next(50) == 0)
                                {
                                    num24 = 194;
                                }
                                else if (genRand.Next(2) == 0)
                                {
                                    num24 = 183;
                                }
                            }
                            else if (tile.type >= 63 && tile.type <= 68)
                            {
                                num24 = tile.type - 63 + 177;
                            }
                            else if (tile.type == 50)
                            {
                                num24 = ((tile.frameX != 90) ? 149 : 165);
                            }
                            else if (Main.tileAlch[tile.type])
                            {
                                if (tile.type > 82)
                                {
                                    int num40 = tile.frameX / 18;
                                    bool flag2 = false;
                                    num24 = 313 + num40;
                                    int type5 = 307 + num40;
                                    if (tile.type == 84)
                                    {
                                        flag2 = true;
                                    }

                                    if (num40 == 0 && Main.dayTime)
                                    {
                                        flag2 = true;
                                    }

                                    if (num40 == 1 && !Main.dayTime)
                                    {
                                        flag2 = true;
                                    }

                                    if (num40 == 3 && !Main.dayTime && (Main.bloodMoon || Main.moonPhase == 0))
                                    {
                                        flag2 = true;
                                    }

                                    if (num40 == 4 && (Main.raining || Main.cloudAlpha > 0f))
                                    {
                                        flag2 = true;
                                    }

                                    if (num40 == 5 && !Main.raining && Main.dayTime && Main.time > 40500.0)
                                    {
                                        flag2 = true;
                                    }

                                    if (num40 == 6)
                                    {
                                        num24 = 2358;
                                        type5 = 2357;
                                    }

                                    int num41 = Player.FindClosest(new Vector2((float) (i * 16), (float) (j * 16)), 16,
                                        16);
                                    if (Main.player[num41].inventory[Main.player[num41].selectedItem].type == 213)
                                    {
                                        Item.NewItem(i * 16, j * 16, 16, 16, type5, genRand.Next(1, 6), false, 0, false,
                                            false);
                                        Item.NewItem(i * 16, j * 16, 16, 16, num24, genRand.Next(1, 3), false, 0, false,
                                            false);
                                        num24 = -1;
                                    }
                                    else if (flag2)
                                    {
                                        int stack = genRand.Next(1, 4);
                                        Item.NewItem(i * 16, j * 16, 16, 16, type5, stack, false, 0, false, false);
                                    }
                                }
                            }
                            else if (tile.type == 321)
                            {
                                num24 = 2503;
                            }
                            else if (tile.type == 322)
                            {
                                num24 = 2504;
                            }

                            if (num24 > 0)
                            {
                                int num42 = 1;
                                if (flag)
                                {
                                    num42++;
                                }

                                Item.NewItem(i * 16, j * 16, 16, 16, num24, num42, false, -1, false, false);
                            }

                            if (num25 > 0)
                            {
                                Item.NewItem(i * 16, j * 16, 16, 16, num25, 1, false, -1, false, false);
                            }
                        }

                        if (Main.netMode != 2)
                        {
                            AchievementsHelper.NotifyTileDestroyed(Main.player[Main.myPlayer], tile.type);
                        }

                        tile.active(false);
                        tile.halfBrick(false);
                        tile.frameX = -1;
                        tile.frameY = -1;
                        tile.color(0);
                        tile.frameNumber(0);
                        if (tile.type == 58 && j > Main.maxTilesY - 200)
                        {
                            tile.lava(true);
                            tile.liquid = 128;
                        }
                        else if (tile.type == 419)
                        {
                            Wiring.PokeLogicGate(i, j + 1);
                        }
                        else if (tile.type == 54)
                        {
                            SquareWallFrame(i, j, true);
                        }

                        tile.type = 0;
                        tile.inActive(false);
                        SquareTileFrame(i, j, true);
                    }
                }
            }
        }
    }

    public static int KillTile_GetTileDustAmount(bool fail, Tile tileCache)
    {
        int result = 10;
        if (tileCache.type == 231)
        {
            result = 6;
        }

        if (fail)
        {
            result = 3;
        }

        if (tileCache.type == 138)
        {
            result = 0;
        }

        if (tileCache.type == 373)
        {
            result = 0;
        }

        if (tileCache.type == 374)
        {
            result = 0;
        }

        if (tileCache.type == 375)
        {
            result = 0;
        }

        if (tileCache.type == 461)
        {
            result = 0;
        }

        if (tileCache.type >= 300 && tileCache.type <= 308)
        {
            result = 0;
        }

        if (tileCache.type == 125)
        {
            result = 0;
        }

        if (tileCache.type == 287)
        {
            result = 0;
        }

        if (tileCache.type == 354)
        {
            result = 0;
        }

        if (tileCache.type == 355)
        {
            result = 0;
        }

        if (tileCache.type == 376)
        {
            result = 0;
        }

        return result;
    }

    public static int KillTile_MakeTileDust(int i, int j, Tile tileCache)
    {
        int num = 0;
        if (tileCache.type == 216)
        {
            num = -1;
        }

        if (tileCache.type == 335)
        {
            num = -1;
        }

        if (tileCache.type == 338)
        {
            num = -1;
        }

        if (tileCache.type == 0)
        {
            num = 0;
        }

        if (tileCache.type == 192)
        {
            num = 3;
        }

        if (tileCache.type == 208)
        {
            num = 126;
        }
        else if (tileCache.type == 408 || tileCache.type == 409)
        {
            num = 265;
        }

        if (tileCache.type == 16)
        {
            num = 1;
            if (tileCache.frameX >= 36)
            {
                num = 82;
            }
        }
        else if (tileCache.type == 415)
        {
            num = 6;
        }
        else if (tileCache.type == 416)
        {
            num = 61;
        }
        else if (tileCache.type == 417)
        {
            num = 242;
        }
        else if (tileCache.type == 418)
        {
            num = 135;
        }

        if (tileCache.type == 1 || tileCache.type == 17 || tileCache.type == 38 || tileCache.type == 39 ||
            tileCache.type == 41 || tileCache.type == 43 || tileCache.type == 44 || tileCache.type == 48 ||
            Main.tileStone[tileCache.type] || tileCache.type == 85 || tileCache.type == 90 || tileCache.type == 92 ||
            tileCache.type == 96 || tileCache.type == 97 || tileCache.type == 99 || tileCache.type == 117 ||
            tileCache.type == 130 || tileCache.type == 131 || tileCache.type == 132 || tileCache.type == 135 ||
            tileCache.type == 135 || tileCache.type == 142 || tileCache.type == 143 || tileCache.type == 144 ||
            tileCache.type == 210 || tileCache.type == 207 || tileCache.type == 235 || tileCache.type == 247 ||
            tileCache.type == 272 || tileCache.type == 273 || tileCache.type == 283 || tileCache.type == 410)
        {
            num = 1;
        }

        if (tileCache.type == 379)
        {
            num = 257;
        }

        if (tileCache.type == 311)
        {
            num = 207;
        }

        if (tileCache.type == 312)
        {
            num = 208;
        }

        if (tileCache.type == 313)
        {
            num = 209;
        }

        if (tileCache.type == 104)
        {
            num = -1;
        }

        if (tileCache.type == 95 || tileCache.type == 98 || tileCache.type == 100 || tileCache.type == 174 ||
            tileCache.type == 173)
        {
            num = 6;
        }

        if (tileCache.type == 30 || tileCache.type == 86 || tileCache.type == 94 || tileCache.type == 106 ||
            tileCache.type == 114 || tileCache.type == 124 || tileCache.type == 128 || tileCache.type == 269)
        {
            num = 7;
        }

        if (tileCache.type == 372)
        {
            num = 242;
        }

        if (tileCache.type == 371)
        {
            num = 243;
        }

        if (tileCache.type == 334)
        {
            num = 7;
        }

        switch (tileCache.type)
        {
            case 10:
            case 11:
            case 87:
            case 89:
            case 93:
            case 139:
            case 209:
            case 319:
            case 320:
            case 386:
            case 387:
            case 390:
            case 405:
            case 406:
            case 411:
            case 412:
            case 419:
            case 420:
            case 421:
            case 422:
            case 423:
            case 424:
            case 425:
            case 428:
            case 429:
            case 441:
            case 442:
            case 445:
            case 446:
            case 447:
            case 448:
            case 449:
            case 450:
            case 451:
            case 452:
            case 453:
            case 455:
            case 456:
            case 457:
            case 462:
            case 463:
            case 464:
            case 465:
            case 466:
            case 468:
                num = -1;
                break;
            case 407:
                num = 10;
                break;
            case 454:
                num = 139;
                break;
        }

        if (tileCache.type == 240)
        {
            int num2 = tileCache.frameX / 54;
            if (tileCache.frameY >= 54)
            {
                num2 += 36;
            }

            num = 7;
            if (num2 == 16 || num2 == 17)
            {
                num = 26;
            }

            if (num2 >= 46 && num2 <= 49)
            {
                num = -1;
            }
        }

        if (tileCache.type == 241)
        {
            num = 1;
        }

        if (tileCache.type == 242)
        {
            num = -1;
        }

        if (tileCache.type == 356)
        {
            num = -1;
        }

        if (tileCache.type == 351)
        {
            num = -1;
        }

        if (tileCache.type == 246)
        {
            num = -1;
        }

        if (tileCache.type == 36)
        {
            num = -1;
        }

        if (tileCache.type == 365)
        {
            num = 239;
        }

        if (tileCache.type == 366)
        {
            num = 30;
        }

        if (tileCache.type == 357 || tileCache.type == 367)
        {
            num = 236;
        }

        if (tileCache.type == 368 || tileCache.type == 369)
        {
            num = 240;
        }

        if (tileCache.type == 170)
        {
            num = 196;
        }

        if (tileCache.type == 315)
        {
            num = 225;
        }

        if (tileCache.type == 346)
        {
            num = 128;
        }

        if (tileCache.type == 347)
        {
            num = 117;
        }

        if (tileCache.type == 348)
        {
            num = 42;
        }

        if (tileCache.type == 350)
        {
            num = 226;
        }

        if (tileCache.type == 370)
        {
            num = ((genRand.Next(2) != 0) ? 23 : 6);
        }

        if (tileCache.type == 171)
        {
            num = ((genRand.Next(2) != 0) ? (-1) : 196);
        }

        if (tileCache.type == 326)
        {
            num = 13;
        }

        if (tileCache.type == 327)
        {
            num = 13;
        }

        if (tileCache.type == 345)
        {
            num = 13;
        }

        if (tileCache.type == 458)
        {
            num = 13;
        }

        if (tileCache.type == 459)
        {
            num = 13;
        }

        if (tileCache.type == 336)
        {
            num = 6;
        }

        if (tileCache.type == 340)
        {
            num = 75;
        }

        if (tileCache.type == 341)
        {
            num = 65;
        }

        if (tileCache.type == 342)
        {
            num = 135;
        }

        if (tileCache.type == 343)
        {
            num = 169;
        }

        if (tileCache.type == 344)
        {
            num = 156;
        }

        if (tileCache.type == 328)
        {
            num = 13;
        }

        if (tileCache.type == 329)
        {
            num = 13;
        }

        if (tileCache.type == 330)
        {
            num = 9;
        }

        if (tileCache.type == 331)
        {
            num = 11;
        }

        if (tileCache.type == 332)
        {
            num = 19;
        }

        if (tileCache.type == 333)
        {
            num = 11;
        }

        if (tileCache.type == 101)
        {
            num = -1;
        }

        if (tileCache.type == 19)
        {
            int num3 = tileCache.frameY / 18;
            switch (num3)
            {
                case 0:
                case 9:
                case 10:
                case 11:
                case 12:
                    num = 7;
                    break;
                case 1:
                    num = 77;
                    break;
                case 2:
                    num = 78;
                    break;
                case 3:
                    num = 79;
                    break;
                case 4:
                    num = 26;
                    break;
                case 5:
                    num = 126;
                    break;
                case 13:
                    num = 109;
                    break;
                case 14:
                    num = 13;
                    break;
                case 15:
                case 16:
                    num = -1;
                    break;
                default:
                    switch (num3)
                    {
                        case 17:
                            num = 215;
                            break;
                        case 18:
                            num = 214;
                            break;
                        case 19:
                            num = 214;
                            break;
                        case 20:
                            num = 4;
                            break;
                        case 21:
                            num = 1;
                            break;
                        case 22:
                            num = 8;
                            break;
                        case 23:
                            num = 78;
                            break;
                        case 24:
                            num = 147;
                            break;
                        case 25:
                            num = 40;
                            break;
                        case 26:
                            num = 226;
                            break;
                        case 27:
                            num = 23;
                            break;
                        case 28:
                            num = 240;
                            break;
                        case 29:
                            num = 236;
                            break;
                        case 30:
                            num = 68 + Main.rand.Next(3);
                            break;
                        case 31:
                            num = 10;
                            break;
                        case 32:
                            num = 78;
                            break;
                        case 33:
                            num = 148;
                            break;
                        case 34:
                            num = 5;
                            break;
                        case 35:
                            num = 80;
                            break;
                        default:
                            num = 1;
                            break;
                    }

                    break;
            }
        }

        if (tileCache.type == 79)
        {
            int num4 = tileCache.frameY / 36;
            num = ((num4 == 0)
                ? 7
                : ((num4 == 1)
                    ? 77
                    : ((num4 == 2)
                        ? 78
                        : ((num4 == 3) ? 79 : ((num4 == 4) ? 126 : ((num4 == 8) ? 109 : ((num4 < 9) ? 1 : (-1))))))));
        }

        if (tileCache.type == 18)
        {
            switch (tileCache.frameX / 36)
            {
                case 0:
                    num = 7;
                    break;
                case 1:
                    num = 77;
                    break;
                case 2:
                    num = 78;
                    break;
                case 3:
                    num = 79;
                    break;
                case 4:
                    num = 26;
                    break;
                case 5:
                    num = 40;
                    break;
                case 6:
                    num = 5;
                    break;
                case 7:
                    num = 26;
                    break;
                case 8:
                    num = 4;
                    break;
                case 9:
                    num = 126;
                    break;
                case 10:
                    num = 148;
                    break;
                case 11:
                case 12:
                case 13:
                    num = 1;
                    break;
                case 14:
                    num = 109;
                    break;
                case 15:
                    num = 126;
                    break;
                default:
                    num = -1;
                    break;
            }
        }

        if (tileCache.type == 14 || tileCache.type == 87 || tileCache.type == 88)
        {
            num = -1;
        }

        if (tileCache.type >= 255 && tileCache.type <= 261)
        {
            int num5 = tileCache.type - 255;
            num = 86 + num5;
            if (num5 == 6)
            {
                num = 138;
            }
        }

        if (tileCache.type >= 262 && tileCache.type <= 268)
        {
            int num6 = tileCache.type - 262;
            num = 86 + num6;
            if (num6 == 6)
            {
                num = 138;
            }
        }

        if (tileCache.type == 178)
        {
            int num7 = tileCache.frameX / 18;
            num = 86 + num7;
            if (num7 == 6)
            {
                num = 138;
            }
        }

        if (tileCache.type == 440)
        {
            switch (tileCache.frameX / 54)
            {
                case 0:
                    num = 90;
                    break;
                case 1:
                    num = 88;
                    break;
                case 2:
                    num = 89;
                    break;
                case 3:
                    num = 87;
                    break;
                case 4:
                    num = 86;
                    break;
                case 5:
                    num = 91;
                    break;
                case 6:
                    num = 138;
                    break;
                default:
                    num = -1;
                    break;
            }

            if (tileCache.frameY < 54)
            {
                num = -1;
            }
        }

        switch (tileCache.type)
        {
            case 426:
            case 427:
                num = 90;
                break;
            case 430:
            case 435:
                num = 89;
                break;
            case 431:
            case 436:
                num = 88;
                break;
            case 432:
            case 437:
                num = 87;
                break;
            case 433:
            case 438:
                num = 86;
                break;
            case 434:
            case 439:
                num = 91;
                break;
        }

        if (tileCache.type == 186)
        {
            num = ((tileCache.frameX <= 360)
                ? 26
                : ((tileCache.frameX <= 846)
                    ? 1
                    : ((tileCache.frameX <= 954)
                        ? 9
                        : ((tileCache.frameX <= 1062)
                            ? 11
                            : ((tileCache.frameX <= 1170)
                                ? 10
                                : ((tileCache.frameX > 1332) ? ((tileCache.frameX > 1386) ? 80 : 10) : 0))))));
        }

        if (tileCache.type == 187)
        {
            if (tileCache.frameX <= 144)
            {
                num = 1;
            }
            else if (tileCache.frameX <= 306)
            {
                num = 38;
            }
            else if (tileCache.frameX <= 468)
            {
                num = 36;
            }
            else if (tileCache.frameX <= 738)
            {
                num = 30;
            }
            else if (tileCache.frameX <= 970)
            {
                num = 1;
            }
            else if (tileCache.frameX <= 1132)
            {
                num = 148;
            }
            else if (tileCache.frameX <= 1132)
            {
                num = 155;
            }
            else if (tileCache.frameX <= 1348)
            {
                num = 1;
            }
            else if (tileCache.frameX <= 1564)
            {
                num = 0;
            }
        }

        if (tileCache.type == 105)
        {
            num = 1;
            if (tileCache.frameX >= 1548 && tileCache.frameX <= 1654 && tileCache.frameY < 54)
            {
                num = 148;
            }
        }

        if (tileCache.type == 349)
        {
            num = 1;
        }

        if (tileCache.type == 337)
        {
            num = 1;
        }

        if (tileCache.type == 239)
        {
            int num8 = tileCache.frameX / 18;
            if (num8 == 0)
            {
                num = 9;
            }

            if (num8 == 1)
            {
                num = 81;
            }

            if (num8 == 2)
            {
                num = 8;
            }

            if (num8 == 3)
            {
                num = 82;
            }

            if (num8 == 4)
            {
                num = 11;
            }

            if (num8 == 5)
            {
                num = 83;
            }

            if (num8 == 6)
            {
                num = 10;
            }

            if (num8 == 7)
            {
                num = 84;
            }

            if (num8 == 8)
            {
                num = 14;
            }

            if (num8 == 9)
            {
                num = 23;
            }

            if (num8 == 10)
            {
                num = 25;
            }

            if (num8 == 11)
            {
                num = 48;
            }

            if (num8 == 12)
            {
                num = 144;
            }

            if (num8 == 13)
            {
                num = 49;
            }

            if (num8 == 14)
            {
                num = 145;
            }

            if (num8 == 15)
            {
                num = 50;
            }

            if (num8 == 16)
            {
                num = 146;
            }

            if (num8 == 17)
            {
                num = 128;
            }

            if (num8 == 18)
            {
                num = 84;
            }

            if (num8 == 19)
            {
                num = 117;
            }

            if (num8 == 20)
            {
                num = 42;
            }

            if (num8 == 21)
            {
                num = -1;
            }

            if (num8 == 22)
            {
                num = 265;
            }
        }

        if (tileCache.type == 185)
        {
            if (tileCache.frameY == 18)
            {
                int num9 = tileCache.frameX / 36;
                if (num9 < 6)
                {
                    num = 1;
                }
                else if (num9 < 16)
                {
                    num = 26;
                }
                else if (num9 == 16)
                {
                    num = 9;
                }
                else if (num9 == 17)
                {
                    num = 11;
                }
                else if (num9 == 18)
                {
                    num = 10;
                }
                else if (num9 == 19)
                {
                    num = 86;
                }
                else if (num9 == 20)
                {
                    num = 87;
                }
                else if (num9 == 21)
                {
                    num = 88;
                }
                else if (num9 == 22)
                {
                    num = 89;
                }
                else if (num9 == 23)
                {
                    num = 90;
                }
                else if (num9 == 24)
                {
                    num = 91;
                }
                else if (num9 < 31)
                {
                    num = 80;
                }
                else if (num9 < 33)
                {
                    num = 7;
                }
                else if (num9 < 34)
                {
                    num = 8;
                }
                else if (num9 < 39)
                {
                    num = 30;
                }
                else if (num9 < 42)
                {
                    num = 1;
                }
            }
            else
            {
                int num10 = tileCache.frameX / 18;
                if (num10 < 6)
                {
                    num = 1;
                }
                else if (num10 < 12)
                {
                    num = 0;
                }
                else if (num10 < 27)
                {
                    num = 26;
                }
                else if (num10 < 32)
                {
                    num = 1;
                }
                else if (num10 < 35)
                {
                    num = 0;
                }
                else if (num10 < 46)
                {
                    num = 80;
                }
                else if (num10 < 52)
                {
                    num = 30;
                }
            }
        }

        if (tileCache.type == 184)
        {
            int num11 = tileCache.frameX / 22;
            num = ((num11 != 5) ? (93 + num11) : 258);
        }

        if (tileCache.type == 237)
        {
            num = 148;
        }

        if (tileCache.type == 157)
        {
            num = 77;
        }

        if (tileCache.type == 158 || tileCache.type == 232 || tileCache.type == 383)
        {
            num = 78;
        }

        if (tileCache.type == 159)
        {
            num = 78;
        }

        if (tileCache.type == 15)
        {
            num = -1;
        }

        if (tileCache.type == 191)
        {
            num = 7;
        }

        if (tileCache.type == 5)
        {
            num = 7;
            if (i > 5 && i < Main.maxTilesX - 5)
            {
                int num12 = i;
                int k = j;
                if (tileCache.frameX == 66 && tileCache.frameY <= 45)
                {
                    num12++;
                }

                if (tileCache.frameX == 88 && tileCache.frameY >= 66 && tileCache.frameY <= 110)
                {
                    num12--;
                }

                if (tileCache.frameX == 22 && tileCache.frameY >= 132 && tileCache.frameY <= 176)
                {
                    num12--;
                }

                if (tileCache.frameX == 44 && tileCache.frameY >= 132 && tileCache.frameY <= 176)
                {
                    num12++;
                }

                if (tileCache.frameX == 44 && tileCache.frameY >= 132 && tileCache.frameY <= 176)
                {
                    num12++;
                }

                if (tileCache.frameX == 44 && tileCache.frameY >= 198)
                {
                    num12++;
                }

                if (tileCache.frameX == 66 && tileCache.frameY >= 198)
                {
                    num12--;
                }

                for (;
                    Main.tile[num12, k] != null &&
                    (!Main.tile[num12, k].active() || !Main.tileSolid[Main.tile[num12, k].type]);
                    k++)
                {
                }

                if (Main.tile[num12, k] != null)
                {
                    if (Main.tile[num12, k].active() && Main.tile[num12, k].type == 23)
                    {
                        num = 77;
                    }

                    if (Main.tile[num12, k].active() && Main.tile[num12, k].type == 60)
                    {
                        num = 78;
                    }

                    if (Main.tile[num12, k].active() && Main.tile[num12, k].type == 70)
                    {
                        num = 26;
                    }

                    if (Main.tile[num12, k].active() && Main.tile[num12, k].type == 109)
                    {
                        num = 79;
                    }

                    if (Main.tile[num12, k].active() && Main.tile[num12, k].type == 199)
                    {
                        num = 121;
                    }

                    if (Main.tile[num12, k].active() && Main.tile[num12, k].type == 147)
                    {
                        num = 122;
                    }
                }
            }
        }

        if (tileCache.type == 323)
        {
            num = 215;
            if (i > 5 && i < Main.maxTilesX - 5)
            {
                int l;
                for (l = j;
                    Main.tile[i, l] != null && (!Main.tile[i, l].active() || !Main.tileSolid[Main.tile[i, l].type]);
                    l++)
                {
                }

                if (Main.tile[i, l] != null)
                {
                    if (Main.tile[i, l].active() && Main.tile[i, l].type == 234)
                    {
                        num = 121;
                    }

                    if (Main.tile[i, l].active() && Main.tile[i, l].type == 116)
                    {
                        num = 79;
                    }

                    if (Main.tile[i, l].active() && Main.tile[i, l].type == 112)
                    {
                        num = 77;
                    }
                }
            }
        }

        if (tileCache.type == 137)
        {
            num = 1;
            int num13 = tileCache.frameY / 18;
            if (num13 > 0)
            {
                num = 148;
            }
        }

        if (tileCache.type == 443)
        {
            num = 1;
        }

        if (tileCache.type == 444)
        {
            num = -1;
        }

        if (tileCache.type == 212)
        {
            num = -1;
        }

        if (tileCache.type == 213)
        {
            num = 129;
        }

        if (tileCache.type == 214)
        {
            num = 1;
        }

        if (tileCache.type == 215)
        {
            num = -6;
        }

        if (tileCache.type == 325)
        {
            num = 81;
        }

        if (tileCache.type == 251)
        {
            num = 189;
        }

        if (tileCache.type == 252)
        {
            num = 190;
        }

        if (tileCache.type == 253)
        {
            num = 191;
        }

        if (tileCache.type == 254)
        {
            if (tileCache.frameX < 72)
            {
                num = 3;
            }
            else if (tileCache.frameX < 108)
            {
                num = 3;
                if (genRand.Next(3) == 0)
                {
                    num = 189;
                }
            }
            else if (tileCache.frameX < 144)
            {
                num = 3;
                if (genRand.Next(2) == 0)
                {
                    num = 189;
                }
            }
            else
            {
                num = 3;
                if (genRand.Next(4) != 0)
                {
                    num = 189;
                }
            }
        }

        if (tileCache.type == 467)
        {
            num = -1;
        }

        if (tileCache.type == 21)
        {
            num = ((tileCache.frameX >= 1008)
                ? (-1)
                : ((tileCache.frameX >= 612)
                    ? 11
                    : ((tileCache.frameX >= 576)
                        ? 148
                        : ((tileCache.frameX >= 540)
                            ? 26
                            : ((tileCache.frameX >= 504)
                                ? 126
                                : ((tileCache.frameX >= 468)
                                    ? 116
                                    : ((tileCache.frameX >= 432)
                                        ? 7
                                        : ((tileCache.frameX >= 396)
                                            ? 11
                                            : ((tileCache.frameX >= 360)
                                                ? 10
                                                : ((tileCache.frameX >= 324)
                                                    ? 79
                                                    : ((tileCache.frameX >= 288)
                                                        ? 78
                                                        : ((tileCache.frameX >= 252)
                                                            ? 77
                                                            : ((tileCache.frameX >= 216)
                                                                ? 1
                                                                : ((tileCache.frameX >= 180)
                                                                    ? 7
                                                                    : ((tileCache.frameX >= 108)
                                                                        ? 37
                                                                        : ((tileCache.frameX < 36) ? 7 : 10)))))))))))))
                    )));
        }

        if (tileCache.type == 2)
        {
            num = ((genRand.Next(2) != 0) ? 2 : 0);
        }

        if (Main.tileMoss[tileCache.type])
        {
            num = ((tileCache.type != 381) ? (tileCache.type - 179 + 93) : 258);
        }

        if (tileCache.type == 127)
        {
            num = 67;
        }

        if (tileCache.type == 91)
        {
            num = -1;
        }

        if (tileCache.type == 198)
        {
            num = 109;
        }

        if (tileCache.type == 26)
        {
            num = ((tileCache.frameX < 54) ? 8 : 5);
        }

        if (tileCache.type == 34)
        {
            num = -1;
        }

        if (tileCache.type == 6)
        {
            num = 8;
        }

        if (tileCache.type == 7 || tileCache.type == 47 || tileCache.type == 284)
        {
            num = 9;
        }

        if (tileCache.type == 8 || tileCache.type == 45 || tileCache.type == 102)
        {
            num = 10;
        }

        if (tileCache.type == 9 || tileCache.type == 42 || tileCache.type == 46 || tileCache.type == 126 ||
            tileCache.type == 136)
        {
            num = 11;
        }

        if (tileCache.type == 166 || tileCache.type == 175)
        {
            num = 81;
        }

        if (tileCache.type == 167)
        {
            num = 82;
        }

        if (tileCache.type == 168 || tileCache.type == 176)
        {
            num = 83;
        }

        if (tileCache.type == 169 || tileCache.type == 177)
        {
            num = 84;
        }

        if (tileCache.type == 199)
        {
            num = 117;
        }

        if (tileCache.type == 205)
        {
            num = 125;
        }

        if (tileCache.type == 201)
        {
            num = 125;
        }

        if (tileCache.type == 211)
        {
            num = 128;
        }

        if (tileCache.type == 227)
        {
            switch (tileCache.frameX / 34)
            {
                case 0:
                case 1:
                    num = 26;
                    break;
                case 3:
                    num = 3;
                    break;
                case 2:
                case 4:
                case 5:
                case 6:
                    num = 40;
                    break;
                case 7:
                    num = 117;
                    break;
                case 8:
                    num = 17;
                    break;
                case 9:
                    num = 6;
                    break;
                case 10:
                    num = 3;
                    break;
                case 11:
                    num = 26;
                    break;
            }
        }

        if (tileCache.type == 204)
        {
            num = 117;
            if (genRand.Next(2) == 0)
            {
                num = 1;
            }
        }

        if (tileCache.type == 203)
        {
            num = 117;
        }

        if (tileCache.type == 243)
        {
            num = ((genRand.Next(2) != 0) ? 13 : 7);
        }

        if (tileCache.type == 244)
        {
            num = ((genRand.Next(2) == 0) ? 1 : 13);
        }
        else if ((tileCache.type >= 358 && tileCache.type <= 364) || (tileCache.type >= 275 && tileCache.type <= 282) ||
                 tileCache.type == 285 || tileCache.type == 286 || (tileCache.type >= 288 && tileCache.type <= 297) ||
                 (tileCache.type >= 316 && tileCache.type <= 318) || tileCache.type == 298 || tileCache.type == 299 ||
                 tileCache.type == 309 || tileCache.type == 310 || tileCache.type == 339 || tileCache.type == 413 ||
                 tileCache.type == 414)
        {
            num = 13;
            if (genRand.Next(3) != 0)
            {
                num = -1;
            }
        }

        if (tileCache.type == 13)
        {
            num = ((tileCache.frameX < 90) ? 13 : (-1));
        }

        if (tileCache.type == 189)
        {
            num = 16;
        }

        if (tileCache.type == 460)
        {
            num = 16;
        }

        if (tileCache.type == 12)
        {
            num = 12;
        }

        if (tileCache.type == 3 || tileCache.type == 73)
        {
            num = 3;
        }

        if (tileCache.type == 54)
        {
            num = 13;
        }

        if (tileCache.type == 22 || tileCache.type == 140)
        {
            num = 14;
        }

        if (tileCache.type == 78)
        {
            num = 22;
        }

        if (tileCache.type == 28)
        {
            num = 22;
            if (tileCache.frameY >= 72 && tileCache.frameY <= 90)
            {
                num = 1;
            }

            if (tileCache.frameY >= 144 && tileCache.frameY <= 234)
            {
                num = 48;
            }

            if (tileCache.frameY >= 252 && tileCache.frameY <= 358)
            {
                num = 85;
            }

            if (tileCache.frameY >= 360 && tileCache.frameY <= 466)
            {
                num = 26;
            }

            if (tileCache.frameY >= 468 && tileCache.frameY <= 574)
            {
                num = 36;
            }

            if (tileCache.frameY >= 576 && tileCache.frameY <= 790)
            {
                num = 18;
            }

            if (tileCache.frameY >= 792 && tileCache.frameY <= 898)
            {
                num = 5;
            }

            if (tileCache.frameY >= 900 && tileCache.frameY <= 1006)
            {
                num = 0;
            }

            if (tileCache.frameY >= 1008 && tileCache.frameY <= 1114)
            {
                num = 148;
            }

            if (tileCache.frameY >= 1116 && tileCache.frameY <= 1222)
            {
                num = 241;
            }
        }

        if (tileCache.type == 163)
        {
            num = 118;
        }

        if (tileCache.type == 164)
        {
            num = 119;
        }

        if (tileCache.type == 200)
        {
            num = 120;
        }

        if (tileCache.type == 221 || tileCache.type == 248)
        {
            num = 144;
        }

        if (tileCache.type == 222 || tileCache.type == 249)
        {
            num = 145;
        }

        if (tileCache.type == 223 || tileCache.type == 250)
        {
            num = 146;
        }

        if (tileCache.type == 224)
        {
            num = 149;
        }

        if (tileCache.type == 225)
        {
            num = 147;
        }

        if (tileCache.type == 229)
        {
            num = 153;
        }

        if (tileCache.type == 231)
        {
            num = 153;
            if (genRand.Next(3) == 0)
            {
                num = 26;
            }
        }

        if (tileCache.type == 226)
        {
            num = 148;
        }

        if (tileCache.type == 103)
        {
            num = -1;
        }

        if (tileCache.type == 29)
        {
            num = 23;
        }

        if (tileCache.type == 40)
        {
            num = 28;
        }

        if (tileCache.type == 49)
        {
            num = 29;
        }

        if (tileCache.type == 50)
        {
            num = 22;
        }

        if (tileCache.type == 51)
        {
            num = 30;
        }

        if (tileCache.type == 52 || tileCache.type == 353)
        {
            num = 3;
        }

        if (tileCache.type == 53 || tileCache.type == 81 || tileCache.type == 151 || tileCache.type == 202 ||
            tileCache.type == 274)
        {
            num = 32;
        }

        if (tileCache.type == 56 || tileCache.type == 152)
        {
            num = 37;
        }

        if (tileCache.type == 75)
        {
            num = 109;
        }

        if (tileCache.type == 57 || tileCache.type == 119 || tileCache.type == 141 || tileCache.type == 234)
        {
            num = 36;
        }

        if (tileCache.type == 59 || tileCache.type == 120)
        {
            num = 38;
        }

        if (tileCache.type == 61 || tileCache.type == 62 || tileCache.type == 74 || tileCache.type == 80 ||
            tileCache.type == 188 || tileCache.type == 233 || tileCache.type == 236 || tileCache.type == 384)
        {
            num = 40;
        }

        if (tileCache.type == 238)
        {
            num = ((genRand.Next(3) != 0) ? 166 : 167);
        }

        if (tileCache.type == 69)
        {
            num = 7;
        }

        if (tileCache.type == 71 || tileCache.type == 72 || tileCache.type == 190)
        {
            num = 26;
        }

        if (tileCache.type == 70)
        {
            num = 17;
        }

        if (tileCache.type == 112)
        {
            num = 14;
        }

        if (tileCache.type == 123)
        {
            num = 53;
        }

        if (tileCache.type == 161)
        {
            num = 80;
        }

        if (tileCache.type == 206)
        {
            num = 80;
        }

        if (tileCache.type == 162)
        {
            num = 80;
        }

        if (tileCache.type == 165)
        {
            switch (tileCache.frameX / 54)
            {
                case 0:
                    num = 80;
                    break;
                case 1:
                    num = 1;
                    break;
                case 2:
                    num = 30;
                    break;
                case 3:
                    num = 147;
                    break;
                case 4:
                    num = 1;
                    break;
                case 5:
                    num = 14;
                    break;
                case 6:
                    num = 117;
                    break;
                case 7:
                    num = 250;
                    break;
                case 8:
                    num = 240;
                    break;
                case 9:
                    num = 236;
                    break;
                default:
                    num = 1;
                    break;
            }
        }

        if (tileCache.type == 193)
        {
            num = 4;
        }

        if (tileCache.type == 194)
        {
            num = 26;
        }

        if (tileCache.type == 195)
        {
            num = 5;
        }

        if (tileCache.type == 196)
        {
            num = 108;
        }

        if (tileCache.type == 197)
        {
            num = 4;
        }

        if (tileCache.type == 153)
        {
            num = 26;
        }

        if (tileCache.type == 154)
        {
            num = 32;
        }

        if (tileCache.type == 155)
        {
            num = 2;
        }

        if (tileCache.type == 156)
        {
            num = 1;
        }

        if (tileCache.type == 116 || tileCache.type == 118 || tileCache.type == 147 || tileCache.type == 148)
        {
            num = 51;
        }

        if (tileCache.type == 109)
        {
            num = ((genRand.Next(2) != 0) ? 47 : 0);
        }

        if (tileCache.type == 110 || tileCache.type == 113 || tileCache.type == 115)
        {
            num = 47;
        }

        if (tileCache.type == 107 || tileCache.type == 121)
        {
            num = 48;
        }

        if (tileCache.type == 108 || tileCache.type == 122 || tileCache.type == 146)
        {
            num = 49;
        }

        if (tileCache.type == 111 || tileCache.type == 145 || tileCache.type == 150)
        {
            num = 50;
        }

        if (tileCache.type == 133)
        {
            num = 50;
            if (tileCache.frameX >= 54)
            {
                num = 146;
            }
        }

        if (tileCache.type == 134)
        {
            num = 49;
            if (tileCache.frameX >= 36)
            {
                num = 145;
            }
        }

        if (tileCache.type == 149)
        {
            num = 49;
        }

        if (Main.tileAlch[tileCache.type])
        {
            int num14 = tileCache.frameX / 18;
            if (num14 == 0)
            {
                num = 3;
            }

            if (num14 == 1)
            {
                num = 3;
            }

            if (num14 == 2)
            {
                num = 7;
            }

            if (num14 == 3)
            {
                num = 17;
            }

            if (num14 == 4)
            {
                num = 3;
            }

            if (num14 == 5)
            {
                num = 6;
            }

            if (num14 == 6)
            {
                num = 224;
            }
        }

        if (tileCache.type == 58 || tileCache.type == 76 || tileCache.type == 77)
        {
            num = ((genRand.Next(2) != 0) ? 25 : 6);
        }

        if (tileCache.type == 37)
        {
            num = ((genRand.Next(2) != 0) ? 23 : 6);
        }

        if (tileCache.type == 32)
        {
            num = ((genRand.Next(2) != 0) ? 24 : 14);
        }

        if (tileCache.type == 352)
        {
            num = ((genRand.Next(3) != 0) ? 125 : 5);
        }

        if (tileCache.type == 23 || tileCache.type == 24)
        {
            num = ((genRand.Next(2) != 0) ? 17 : 14);
        }

        if (tileCache.type == 25 || tileCache.type == 31)
        {
            num = ((tileCache.type == 31 && tileCache.frameX >= 36) ? 5 : ((genRand.Next(2) != 0) ? 1 : 14));
        }

        if (tileCache.type == 20)
        {
            switch (tileCache.frameX / 54)
            {
                case 1:
                    num = 122;
                    break;
                case 2:
                    num = 78;
                    break;
                case 3:
                    num = 77;
                    break;
                case 4:
                    num = 121;
                    break;
                case 5:
                    num = 79;
                    break;
                default:
                    num = 7;
                    break;
            }
        }

        if (tileCache.type == 27)
        {
            num = ((genRand.Next(2) != 0) ? 19 : 3);
        }

        if (tileCache.type == 129)
        {
            num = ((tileCache.frameX != 0 && tileCache.frameX != 54 && tileCache.frameX != 108)
                ? ((tileCache.frameX != 18 && tileCache.frameX != 72 && tileCache.frameX != 126) ? 70 : 69)
                : 68);
        }

        if (tileCache.type == 385)
        {
            num = genRand.Next(68, 71);
        }

        if (tileCache.type == 4)
        {
            int num15 = tileCache.frameY / 22;
            switch (num15)
            {
                case 0:
                    num = 6;
                    break;
                case 8:
                    num = 75;
                    break;
                case 9:
                    num = 135;
                    break;
                case 10:
                    num = 158;
                    break;
                case 11:
                    num = 169;
                    break;
                case 12:
                    num = 156;
                    break;
                case 13:
                    num = 234;
                    break;
                case 14:
                    num = 66;
                    break;
                case 15:
                    num = 242;
                    break;
                default:
                    num = 58 + num15;
                    break;
            }
        }

        if (tileCache.type == 35)
        {
            num = 189;
            if (tileCache.frameX < 36 && genRand.Next(2) == 0)
            {
                num = 6;
            }
        }

        if ((tileCache.type == 34 || tileCache.type == 42) && genRand.Next(2) == 0)
        {
            num = 6;
        }

        if (tileCache.type == 270)
        {
            num = -1;
        }

        if (tileCache.type == 271)
        {
            num = -1;
        }

        if (tileCache.type == 79 || tileCache.type == 90 || tileCache.type == 101)
        {
            num = -1;
        }

        if (tileCache.type == 33 || tileCache.type == 34 || tileCache.type == 42 || tileCache.type == 93 ||
            tileCache.type == 100)
        {
            num = -1;
        }

        if (tileCache.type == 321)
        {
            num = 214;
        }

        if (tileCache.type == 322)
        {
            num = 215;
        }

        bool flag = tileCache.type == 178 || tileCache.type == 440;
        switch (tileCache.type)
        {
            case 178:
            case 426:
            case 427:
            case 430:
            case 431:
            case 432:
            case 433:
            case 434:
            case 435:
            case 436:
            case 437:
            case 438:
            case 439:
            case 440:
                flag = true;
                break;
        }

        if (num >= 0)
        {
            if (tileCache.type == 352 && num == 5)
            {
                int num16 = Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, 5, 0f, 0f, 100,
                    default(Color), 1f);
                Main.dust[num16].scale = 1.5f;
                Main.dust[num16].noGravity = true;
                Main.dust[num16].velocity *= 1.65f;
                Main.dust[num16].fadeIn = 1.6f;
                return num16;
            }

            if (tileCache.type == 160)
            {
                int num17 = Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, 66, 0f, 0f, 100,
                    new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 0.75f);
                Main.dust[num17].noGravity = true;
                return num17;
            }

            if (tileCache.type == 323)
            {
                int frameY = tileCache.frameY;
                return Dust.NewDust(new Vector2((float) (i * 16 + frameY), (float) (j * 16)), 16, 16, num, 0f, 0f, 0,
                    default(Color), 1f);
            }

            if (tileCache.type == 314)
            {
                int num18 = Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, 213,
                    (float) genRand.Next(-2, 3), (float) genRand.Next(-2, 3), 0, default(Color), 1f);
                Main.dust[num18].noGravity = true;
                Main.dust[num18].fadeIn = Main.dust[num18].scale + 1f + 0.01f * (float) genRand.Next(0, 51);
                Main.dust[num18].noGravity = true;
                return num18;
            }

            if (flag)
            {
                int num19 = Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, num, 0f, 0f, 75,
                    default(Color), 0.75f);
                Main.dust[num19].noLight = true;
                return num19;
            }

            if (tileCache.type == 193 || (tileCache.type == 18 && num == 4))
            {
                return Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, num, 0f, 0f, 75,
                    new Color(0, 80, 255, 100), 0.75f);
            }

            if (tileCache.type == 197)
            {
                return Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, num, 0f, 0f, 75,
                    new Color(97, 200, 255, 100), 0.75f);
            }

            if (tileCache.type == 185 && num >= 86 && num <= 91)
            {
                int num20 = Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, num, 0f, 0f, 75,
                    default(Color), 0.75f);
                Main.dust[num20].noLight = true;
                return num20;
            }

            if (tileCache.type == 4 && num == 66)
            {
                int num21 = Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, num, 0f, 0f, 0,
                    new Color((float) Main.DiscoR / 255f, (float) Main.DiscoG / 255f, (float) Main.DiscoB / 255f), 1f);
                Main.dust[num21].noGravity = true;
                return num21;
            }

            if (num == 139)
            {
                int type = num + Main.rand.Next(4);
                return Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, type, 0f, 0f, 0,
                    default(Color), 1f);
            }

            return Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, num, 0f, 0f, 0, default(Color),
                1f);
        }

        return 6000;
    }

    public static bool IsOpenDoorAnchorFrame(int x, int y)
    {
        Tile tile = Main.tile[x, y];
        if (!tile.active() || tile.type != 11)
        {
            return false;
        }

        int num = tile.frameX % 72;
        if (num >= 18)
        {
            return num < 54;
        }

        return false;
    }

    public static bool IsLockedDoor(int x, int y)
    {
        Tile tile = Main.tile[x, y];
        if (tile.type == 10 && tile.frameY >= 594 && tile.frameY <= 646)
        {
            return tile.frameX < 54;
        }

        return false;
    }

    public static void DropDoorItem(int x, int y, int doorStyle)
    {
        int num = 0;
        switch (doorStyle)
        {
            case 0:
                num = 25;
                break;
            case 9:
                num = 837;
                break;
            case 10:
                num = 912;
                break;
            case 12:
                num = 1137;
                break;
            case 13:
                num = 1138;
                break;
            case 14:
                num = 1139;
                break;
            case 15:
                num = 1140;
                break;
            case 16:
                num = 1411;
                break;
            case 17:
                num = 1412;
                break;
            case 18:
                num = 1413;
                break;
            case 19:
                num = 1458;
                break;
            case 20:
            case 21:
            case 22:
            case 23:
                num = 1709 + doorStyle - 20;
                break;
            default:
                switch (doorStyle)
                {
                    case 24:
                        num = 1793;
                        break;
                    case 25:
                        num = 1815;
                        break;
                    case 26:
                        num = 1924;
                        break;
                    case 27:
                        num = 2044;
                        break;
                    case 28:
                        num = 2265;
                        break;
                    case 29:
                        num = 2528;
                        break;
                    case 30:
                        num = 2561;
                        break;
                    case 31:
                        num = 2576;
                        break;
                    case 32:
                        num = 2815;
                        break;
                    case 33:
                        num = 3129;
                        break;
                    case 34:
                        num = 3131;
                        break;
                    case 35:
                        num = 3130;
                        break;
                    case 36:
                        num = 3888;
                        break;
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                        num = 812 + doorStyle;
                        break;
                    default:
                        if (doorStyle != 11)
                        {
                            num = 649 + doorStyle;
                        }

                        break;
                }

                break;
        }

        if (num != 0)
        {
            Item.NewItem(x * 16, y * 16, 16, 16, num, 1, false, 0, false, false);
        }
    }

    public static bool PlayerLOS(int x, int y)
    {
        Rectangle rectangle = new Rectangle(x * 16, y * 16, 16, 16);
        for (int i = 0; i < 255; i++)
        {
            if (Main.player[i].active)
            {
                Rectangle value = new Rectangle(
                    (int) ((double) Main.player[i].position.X + (double) Main.player[i].width * 0.5 -
                           (double) NPC.sWidth * 0.6),
                    (int) ((double) Main.player[i].position.Y + (double) Main.player[i].height * 0.5 -
                           (double) NPC.sHeight * 0.6), (int) ((double) NPC.sWidth * 1.2),
                    (int) ((double) NPC.sHeight * 1.2));
                if (rectangle.Intersects(value))
                {
                    return true;
                }
            }
        }

        return false;
    }

    public static bool Chlorophyte(int i, int j)
    {
        int num = 40;
        int num2 = 130;
        int num3 = 35;
        int num4 = 85;
        if ((double) j < Main.rockLayer)
        {
            num /= 2;
            num2 /= 2;
            num3 = (int) ((double) num3 * 1.5);
            num4 = (int) ((double) num4 * 1.5);
        }

        int num5 = 0;
        for (int k = i - num3; k < i + num3; k++)
        {
            for (int l = j - num3; l < j + num3; l++)
            {
                if (k < Main.maxTilesX - 10 && k > 10 && Main.tile[k, l].active() && Main.tile[k, l].type == 211)
                {
                    num5++;
                }
            }
        }

        if (num5 > num)
        {
            return false;
        }

        num5 = 0;
        for (int m = i - num4; m < i + num4; m++)
        {
            for (int n = j - num4; n < j + num4; n++)
            {
                if (m < Main.maxTilesX - 10 && m > 10 && Main.tile[m, n].active() && Main.tile[m, n].type == 211)
                {
                    num5++;
                }
            }
        }

        if (num5 > num2)
        {
            return false;
        }

        return true;
    }

    private static bool nearbyChlorophyte(int i, int j)
    {
        float num = 0f;
        int num2 = 10;
        if (i <= num2 + 5 || i >= Main.maxTilesX - num2 - 5)
        {
            return false;
        }

        if (j <= num2 + 5 || j >= Main.maxTilesY - num2 - 5)
        {
            return false;
        }

        for (int k = i - num2; k < i + num2; k++)
        {
            for (int l = j - num2; l < j + num2; l++)
            {
                if (Main.tile[k, l].active() && (Main.tile[k, l].type == 211 || Main.tile[k, l].type == 346))
                {
                    num += 1f;
                    if (num == 5f)
                    {
                        return true;
                    }
                }
            }
        }

        if (num > 0f && (float) genRand.Next(5) < num)
        {
            return true;
        }

        return false;
    }

    private static int CountNearBlocksTypes(int i, int j, int radius, int cap = 0, params int[] tiletypes)
    {
        if (tiletypes.Length == 0)
        {
            return 0;
        }

        int value = i - radius;
        int value2 = i + radius;
        int value3 = j - radius;
        int value4 = j + radius;
        value = Utils.Clamp(value, 0, Main.maxTilesX - 1);
        value2 = Utils.Clamp(value2, 0, Main.maxTilesX - 1);
        value3 = Utils.Clamp(value3, 0, Main.maxTilesY - 1);
        value4 = Utils.Clamp(value4, 0, Main.maxTilesY - 1);
        int num = 0;
        for (int k = value; k < value2; k++)
        {
            for (int l = value3; l < value4; l++)
            {
                if (Main.tile[k, l].active())
                {
                    foreach (int num2 in tiletypes)
                    {
                        if (num2 == Main.tile[k, l].type)
                        {
                            num++;
                            if (cap <= 0 || num < cap)
                            {
                                break;
                            }

                            return num;
                        }
                    }
                }
            }
        }

        return num;
    }

    public static void hardUpdateWorld(int i, int j)
    {
        if (!Main.hardMode || Main.tile[i, j].inActive())
        {
            return;
        }

        int type = Main.tile[i, j].type;
        int num2;
        int num3;
        if ((type == 117 || type == 164) && (double) j > Main.rockLayer && genRand.Next(110) == 0)
        {
            int num = genRand.Next(4);
            num2 = 0;
            num3 = 0;
            switch (num)
            {
                case 0:
                    num2 = -1;
                    break;
                case 1:
                    num2 = 1;
                    break;
                default:
                    num3 = 1;
                    break;
            }

            goto IL_0085;
        }

        goto IL_012e;
        IL_007f:
        num3 = -1;
        goto IL_0085;
        IL_012e:
        if ((double) j > (Main.worldSurface + Main.rockLayer) / 2.0)
        {
            if (type == 60 && genRand.Next(300) == 0)
            {
                int num4 = i + genRand.Next(-10, 11);
                int num5 = j + genRand.Next(-10, 11);
                if (InWorld(num4, num5, 2) && Main.tile[num4, num5].active() && Main.tile[num4, num5].type == 59 &&
                    (!Main.tile[num4, num5 - 1].active() ||
                     (Main.tile[num4, num5 - 1].type != 5 && Main.tile[num4, num5 - 1].type != 236 &&
                      Main.tile[num4, num5 - 1].type != 238)) && Chlorophyte(num4, num5))
                {
                    Main.tile[num4, num5].type = 211;
                    SquareTileFrame(num4, num5, true);
                    if (Main.netMode == 2)
                    {
                        NetMessage.SendTileSquare(-1, num4, num5, 1, TileChangeType.None);
                    }
                }
            }

            if (type == 211 && genRand.Next(3) != 0)
            {
                int num6 = i;
                int num7 = j;
                int num8 = genRand.Next(4);
                if (num8 == 0)
                {
                    num6++;
                }

                if (num8 == 1)
                {
                    num6--;
                }

                if (num8 == 2)
                {
                    num7++;
                }

                if (num8 == 3)
                {
                    num7--;
                }

                if (InWorld(num6, num7, 2) && Main.tile[num6, num7].active() &&
                    (Main.tile[num6, num7].type == 59 || Main.tile[num6, num7].type == 60) && Chlorophyte(num6, num7))
                {
                    Main.tile[num6, num7].type = 211;
                    SquareTileFrame(num6, num7, true);
                    if (Main.netMode == 2)
                    {
                        NetMessage.SendTileSquare(-1, num6, num7, 1, TileChangeType.None);
                    }
                }

                bool flag = true;
                while (flag)
                {
                    flag = false;
                    num6 = i + Main.rand.Next(-5, 6);
                    num7 = j + Main.rand.Next(-5, 6);
                    if (InWorld(num6, num7, 2) && Main.tile[num6, num7].active())
                    {
                        if (Main.tile[num6, num7].type == 23 || Main.tile[num6, num7].type == 199 ||
                            Main.tile[num6, num7].type == 2 || Main.tile[num6, num7].type == 109)
                        {
                            Main.tile[num6, num7].type = 60;
                            SquareTileFrame(num6, num7, true);
                            if (Main.netMode == 2)
                            {
                                NetMessage.SendTileSquare(-1, num6, num7, 1, TileChangeType.None);
                            }

                            flag = true;
                        }
                        else if (Main.tile[num6, num7].type == 0)
                        {
                            Main.tile[num6, num7].type = 59;
                            SquareTileFrame(num6, num7, true);
                            if (Main.netMode == 2)
                            {
                                NetMessage.SendTileSquare(-1, num6, num7, 1, TileChangeType.None);
                            }

                            flag = true;
                        }
                    }
                }
            }
        }

        if (!NPC.downedPlantBoss || genRand.Next(2) == 0)
        {
            if (type == 23 || type == 25 || type == 32 || type == 112 || type == 163 || type == 400 || type == 398)
            {
                bool flag2 = true;
                while (flag2)
                {
                    flag2 = false;
                    int num9 = i + genRand.Next(-3, 4);
                    int num10 = j + genRand.Next(-3, 4);
                    bool flag3 = false;
                    switch (Main.tile[num9, num10].type)
                    {
                        case 59:
                        case 60:
                            flag3 = nearbyChlorophyte(num9, num10);
                            break;
                        default:
                        {
                            bool flag4 = false;
                            int num11 = num9;
                            int num12 = num10;
                            for (int k = 0; k < 4; k++)
                            {
                                switch (k)
                                {
                                    case 0:
                                        num11 = num9 - 1;
                                        num12 = num10;
                                        break;
                                    case 1:
                                        num11 = num9 + 1;
                                        num12 = num10;
                                        break;
                                    case 2:
                                        num11 = num9;
                                        num12 = num10 - 1;
                                        break;
                                    case 3:
                                        num11 = num9;
                                        num12 = num10 + 1;
                                        break;
                                }

                                if (Main.tile[num11, num12].active() &&
                                    (Main.tile[num11, num12].type == 59 || Main.tile[num11, num12].type == 60))
                                {
                                    flag4 = true;
                                    break;
                                }
                            }

                            if (flag4)
                            {
                                flag3 = nearbyChlorophyte(num9, num10);
                            }

                            break;
                        }
                    }

                    if (Main.tile[num9, num10 - 1].type != 27 && !flag3)
                    {
                        if (Main.tile[num9, num10].type == 2)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                flag2 = true;
                            }

                            Main.tile[num9, num10].type = 23;
                            SquareTileFrame(num9, num10, true);
                            NetMessage.SendTileSquare(-1, num9, num10, 1, TileChangeType.None);
                        }
                        else if (Main.tile[num9, num10].type == 1 || Main.tileMoss[Main.tile[num9, num10].type])
                        {
                            if (genRand.Next(2) == 0)
                            {
                                flag2 = true;
                            }

                            Main.tile[num9, num10].type = 25;
                            SquareTileFrame(num9, num10, true);
                            NetMessage.SendTileSquare(-1, num9, num10, 1, TileChangeType.None);
                        }
                        else if (Main.tile[num9, num10].type == 53)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                flag2 = true;
                            }

                            Main.tile[num9, num10].type = 112;
                            SquareTileFrame(num9, num10, true);
                            NetMessage.SendTileSquare(-1, num9, num10, 1, TileChangeType.None);
                        }
                        else if (Main.tile[num9, num10].type == 396)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                flag2 = true;
                            }

                            Main.tile[num9, num10].type = 400;
                            SquareTileFrame(num9, num10, true);
                            NetMessage.SendTileSquare(-1, num9, num10, 1, TileChangeType.None);
                        }
                        else if (Main.tile[num9, num10].type == 397)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                flag2 = true;
                            }

                            Main.tile[num9, num10].type = 398;
                            SquareTileFrame(num9, num10, true);
                            NetMessage.SendTileSquare(-1, num9, num10, 1, TileChangeType.None);
                        }
                        else if (Main.tile[num9, num10].type == 59)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                flag2 = true;
                            }

                            Main.tile[num9, num10].type = 0;
                            SquareTileFrame(num9, num10, true);
                            NetMessage.SendTileSquare(-1, num9, num10, 1, TileChangeType.None);
                        }
                        else if (Main.tile[num9, num10].type == 60)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                flag2 = true;
                            }

                            Main.tile[num9, num10].type = 23;
                            SquareTileFrame(num9, num10, true);
                            NetMessage.SendTileSquare(-1, num9, num10, 1, TileChangeType.None);
                        }
                        else if (Main.tile[num9, num10].type == 69)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                flag2 = true;
                            }

                            Main.tile[num9, num10].type = 32;
                            SquareTileFrame(num9, num10, true);
                            NetMessage.SendTileSquare(-1, num9, num10, 1, TileChangeType.None);
                        }
                        else if (Main.tile[num9, num10].type == 161)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                flag2 = true;
                            }

                            Main.tile[num9, num10].type = 163;
                            SquareTileFrame(num9, num10, true);
                            NetMessage.SendTileSquare(-1, num9, num10, 1, TileChangeType.None);
                        }
                    }
                }
            }

            if (type == 199 || type == 200 || type == 201 || type == 203 || type == 205 || type == 234 || type == 352 ||
                type == 401 || type == 399)
            {
                bool flag5 = true;
                while (flag5)
                {
                    flag5 = false;
                    int num13 = i + genRand.Next(-3, 4);
                    int num14 = j + genRand.Next(-3, 4);
                    bool flag6 = nearbyChlorophyte(num13, num14);
                    if (Main.tile[num13, num14 - 1].type != 27 && !flag6)
                    {
                        if (Main.tile[num13, num14].type == 2)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                flag5 = true;
                            }

                            Main.tile[num13, num14].type = 199;
                            SquareTileFrame(num13, num14, true);
                            NetMessage.SendTileSquare(-1, num13, num14, 1, TileChangeType.None);
                        }
                        else if (Main.tile[num13, num14].type == 1 || Main.tileMoss[Main.tile[num13, num14].type])
                        {
                            if (genRand.Next(2) == 0)
                            {
                                flag5 = true;
                            }

                            Main.tile[num13, num14].type = 203;
                            SquareTileFrame(num13, num14, true);
                            NetMessage.SendTileSquare(-1, num13, num14, 1, TileChangeType.None);
                        }
                        else if (Main.tile[num13, num14].type == 53)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                flag5 = true;
                            }

                            Main.tile[num13, num14].type = 234;
                            SquareTileFrame(num13, num14, true);
                            NetMessage.SendTileSquare(-1, num13, num14, 1, TileChangeType.None);
                        }
                        else if (Main.tile[num13, num14].type == 396)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                flag5 = true;
                            }

                            Main.tile[num13, num14].type = 401;
                            SquareTileFrame(num13, num14, true);
                            NetMessage.SendTileSquare(-1, num13, num14, 1, TileChangeType.None);
                        }
                        else if (Main.tile[num13, num14].type == 397)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                flag5 = true;
                            }

                            Main.tile[num13, num14].type = 399;
                            SquareTileFrame(num13, num14, true);
                            NetMessage.SendTileSquare(-1, num13, num14, 1, TileChangeType.None);
                        }
                        else if (Main.tile[num13, num14].type == 59)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                flag5 = true;
                            }

                            Main.tile[num13, num14].type = 0;
                            SquareTileFrame(num13, num14, true);
                            NetMessage.SendTileSquare(-1, num13, num14, 1, TileChangeType.None);
                        }
                        else if (Main.tile[num13, num14].type == 60)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                flag5 = true;
                            }

                            Main.tile[num13, num14].type = 199;
                            SquareTileFrame(num13, num14, true);
                            NetMessage.SendTileSquare(-1, num13, num14, 1, TileChangeType.None);
                        }
                        else if (Main.tile[num13, num14].type == 69)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                flag5 = true;
                            }

                            Main.tile[num13, num14].type = 352;
                            SquareTileFrame(num13, num14, true);
                            NetMessage.SendTileSquare(-1, num13, num14, 1, TileChangeType.None);
                        }
                        else if (Main.tile[num13, num14].type == 161)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                flag5 = true;
                            }

                            Main.tile[num13, num14].type = 200;
                            SquareTileFrame(num13, num14, true);
                            NetMessage.SendTileSquare(-1, num13, num14, 1, TileChangeType.None);
                        }
                    }
                }
            }

            if (type == 109 || type == 110 || type == 113 || type == 115 || type == 116 || type == 117 || type == 164 ||
                type == 402 || type == 403)
            {
                bool flag7 = true;
                while (flag7)
                {
                    flag7 = false;
                    int num15 = i + genRand.Next(-3, 4);
                    int num16 = j + genRand.Next(-3, 4);
                    if (Main.tile[num15, num16].type == 2)
                    {
                        if (genRand.Next(2) == 0)
                        {
                            flag7 = true;
                        }

                        Main.tile[num15, num16].type = 109;
                        SquareTileFrame(num15, num16, true);
                        NetMessage.SendTileSquare(-1, num15, num16, 1, TileChangeType.None);
                    }
                    else if (Main.tile[num15, num16].type == 1 || Main.tileMoss[Main.tile[num15, num16].type])
                    {
                        if (genRand.Next(2) == 0)
                        {
                            flag7 = true;
                        }

                        Main.tile[num15, num16].type = 117;
                        SquareTileFrame(num15, num16, true);
                        NetMessage.SendTileSquare(-1, num15, num16, 1, TileChangeType.None);
                    }
                    else if (Main.tile[num15, num16].type == 53)
                    {
                        if (genRand.Next(2) == 0)
                        {
                            flag7 = true;
                        }

                        Main.tile[num15, num16].type = 116;
                        SquareTileFrame(num15, num16, true);
                        NetMessage.SendTileSquare(-1, num15, num16, 1, TileChangeType.None);
                    }
                    else if (Main.tile[num15, num16].type == 396)
                    {
                        if (genRand.Next(2) == 0)
                        {
                            flag7 = true;
                        }

                        Main.tile[num15, num16].type = 403;
                        SquareTileFrame(num15, num16, true);
                        NetMessage.SendTileSquare(-1, num15, num16, 1, TileChangeType.None);
                    }
                    else if (Main.tile[num15, num16].type == 397)
                    {
                        if (genRand.Next(2) == 0)
                        {
                            flag7 = true;
                        }

                        Main.tile[num15, num16].type = 402;
                        SquareTileFrame(num15, num16, true);
                        NetMessage.SendTileSquare(-1, num15, num16, 1, TileChangeType.None);
                    }
                    else if (Main.tile[num15, num16].type == 161)
                    {
                        if (genRand.Next(2) == 0)
                        {
                            flag7 = true;
                        }

                        Main.tile[num15, num16].type = 164;
                        SquareTileFrame(num15, num16, true);
                        NetMessage.SendTileSquare(-1, num15, num16, 1, TileChangeType.None);
                    }
                }
            }
        }

        return;
        IL_0085:
        if (!Main.tile[i + num2, j + num3].active())
        {
            int num17 = 0;
            int num18 = 6;
            for (int l = i - num18; l <= i + num18; l++)
            {
                for (int m = j - num18; m <= j + num18; m++)
                {
                    if (Main.tile[l, m].active() && Main.tile[l, m].type == 129)
                    {
                        num17++;
                    }
                }
            }

            if (num17 < 2)
            {
                PlaceTile(i + num2, j + num3, 129, true, false, -1, 0);
                NetMessage.SendTileSquare(-1, i + num2, j + num3, 1, TileChangeType.None);
            }
        }

        goto IL_012e;
    }

    public static bool SolidTile(Tile testTile)
    {
        try
        {
            if (testTile == null)
            {
                return true;
            }

            if (testTile.active() && Main.tileSolid[testTile.type] && !Main.tileSolidTop[testTile.type] &&
                !testTile.halfBrick() && testTile.slope() == 0 && !testTile.inActive())
            {
                return true;
            }
        }
        catch
        {
        }

        return false;
    }

    public static bool TileEmpty(int i, int j)
    {
        if (Main.tile[i, j] != null && Main.tile[i, j].active())
        {
            return Main.tile[i, j].inActive();
        }

        return true;
    }

    public static bool SolidOrSlopedTile(Tile tile)
    {
        if (tile != null && tile.active() && Main.tileSolid[tile.type] && !Main.tileSolidTop[tile.type])
        {
            return !tile.inActive();
        }

        return false;
    }

    public static bool SolidOrSlopedTile(int x, int y)
    {
        return SolidOrSlopedTile(Main.tile[x, y]);
    }

    public static bool SolidTile(int i, int j)
    {
        try
        {
            if (Main.tile[i, j] == null)
            {
                return true;
            }

            if (Main.tile[i, j].active() && Main.tileSolid[Main.tile[i, j].type] &&
                !Main.tileSolidTop[Main.tile[i, j].type] && !Main.tile[i, j].halfBrick() &&
                Main.tile[i, j].slope() == 0 && !Main.tile[i, j].inActive())
            {
                return true;
            }
        }
        catch
        {
        }

        return false;
    }

    public static bool SolidTile2(Tile testTile)
    {
        try
        {
            if (testTile == null)
            {
                return true;
            }

            if (testTile.active() && Main.tileSolid[testTile.type] && testTile.slope() == 0 && !testTile.halfBrick() &&
                !testTile.inActive())
            {
                return true;
            }
        }
        catch
        {
        }

        return false;
    }

    public static bool PlatformProperTopFrame(short frameX)
    {
        int num = frameX / TileObjectData.PlatformFrameWidth();
        if ((num < 0 || num > 7) && (num < 12 || num > 16))
        {
            if (num >= 25)
            {
                return num <= 26;
            }

            return false;
        }

        return true;
    }

    public static bool SolidTileAllowBottomSlope(int i, int j)
    {
        try
        {
            Tile tile = Main.tile[i, j];
            if (tile == null)
            {
                return true;
            }

            if (tile.active() && (Main.tileSolid[tile.type] || Main.tileSolidTop[tile.type]) &&
                (!tile.topSlope() || (TileID.Sets.Platforms[tile.type] && PlatformProperTopFrame(tile.frameX))) &&
                !tile.halfBrick() && !tile.inActive())
            {
                return true;
            }
        }
        catch
        {
        }

        return false;
    }

    public static bool SolidTile3(int i, int j)
    {
        if (!InWorld(i, j, 1))
        {
            return false;
        }

        return SolidTile3(Main.tile[i, j]);
    }

    public static bool SolidTile3(Tile t)
    {
        if (t == null)
        {
            return false;
        }

        if (t.active() && !t.inActive() && Main.tileSolid[t.type])
        {
            return !Main.tileSolidTop[t.type];
        }

        return false;
    }

    public static bool SolidTile2(int i, int j)
    {
        try
        {
            if (Main.tile[i, j] == null)
            {
                return true;
            }

            if (Main.tile[i, j].active() && Main.tileSolid[Main.tile[i, j].type] && Main.tile[i, j].slope() == 0 &&
                !Main.tile[i, j].halfBrick() && !Main.tile[i, j].inActive())
            {
                return true;
            }
        }
        catch
        {
        }

        return false;
    }

    public static bool SolidTileNoAttach(int i, int j)
    {
        try
        {
            if (Main.tile[i, j] == null)
            {
                return true;
            }

            if (Main.tile[i, j].active() && Main.tileSolid[Main.tile[i, j].type] &&
                !Main.tileNoAttach[Main.tile[i, j].type] && Main.tile[i, j].slope() == 0 &&
                !Main.tile[i, j].halfBrick() && !Main.tile[i, j].inActive())
            {
                return true;
            }
        }
        catch
        {
        }

        return false;
    }

    public static Vector2 Hive(int i, int j)
    {
        double num = (double) genRand.Next(12, 21);
        double num2 = num;
        float num3 = (float) genRand.Next(10, 21);
        Vector2 value = default(Vector2);
        value.X = (float) i;
        value.Y = (float) j;
        Vector2 value2 = default(Vector2);
        value2.X = (float) genRand.Next(-10, 11) * 0.2f;
        value2.Y = (float) genRand.Next(-10, 11) * 0.2f;
        while (num > 0.0 && num3 > 0f)
        {
            num = num2 * (double) (1f + (float) genRand.Next(-20, 20) * 0.01f);
            num3 -= 1f;
            int num4 = (int) ((double) value.X - num);
            int num5 = (int) ((double) value.X + num);
            int num6 = (int) ((double) value.Y - num);
            int num7 = (int) ((double) value.Y + num);
            if (num4 < 1)
            {
                num4 = 1;
            }

            if (num5 > Main.maxTilesX - 1)
            {
                num5 = Main.maxTilesX - 1;
            }

            if (num6 < 1)
            {
                num6 = 1;
            }

            if (num7 > Main.maxTilesY - 1)
            {
                num7 = Main.maxTilesY - 1;
            }

            for (int k = num4; k < num5; k++)
            {
                for (int l = num6; l < num7; l++)
                {
                    float num8 = Math.Abs((float) k - value.X);
                    float num9 = Math.Abs((float) l - value.Y);
                    double num10 = Math.Sqrt((double) (num8 * num8 + num9 * num9));
                    if (num10 < num2 * 0.4 * (1.0 + (double) genRand.Next(-10, 11) * 0.005))
                    {
                        if (genRand.Next(3) == 0)
                        {
                            Main.tile[k, l].liquid = byte.MaxValue;
                        }

                        Main.tile[k, l].honey(true);
                        Main.tile[k, l].wall = 86;
                        Main.tile[k, l].active(false);
                        Main.tile[k, l].halfBrick(false);
                        Main.tile[k, l].slope(0);
                        SquareWallFrame(k, l, true);
                    }
                    else if (num10 < num2 * 0.75 * (1.0 + (double) genRand.Next(-10, 11) * 0.005))
                    {
                        Main.tile[k, l].liquid = 0;
                        if (Main.tile[k, l].wall != 86)
                        {
                            Main.tile[k, l].active(true);
                            Main.tile[k, l].halfBrick(false);
                            Main.tile[k, l].slope(0);
                            Main.tile[k, l].type = 225;
                        }
                    }

                    if (num10 < num2 * 0.6 * (1.0 + (double) genRand.Next(-10, 11) * 0.005))
                    {
                        Main.tile[k, l].wall = 86;
                    }

                    SquareWallFrame(k, l, true);
                    SquareTileFrame(k, l, true);
                }
            }

            value += value2;
            num3 -= 1f;
            value2.Y += (float) genRand.Next(-10, 11) * 0.05f;
            value2.X += (float) genRand.Next(-10, 11) * 0.05f;
        }

        return new Vector2(value.X, value.Y);
    }

    public static void MineHouse(int i, int j)
    {
        if (i >= 50 && i <= Main.maxTilesX - 50 && j >= 50 && j <= Main.maxTilesY - 50)
        {
            int num = genRand.Next(6, 12);
            int num2 = genRand.Next(3, 6);
            int num3 = genRand.Next(15, 30);
            int num4 = genRand.Next(15, 30);
            if (!SolidTile(i, j) && Main.tile[i, j].wall <= 0)
            {
                int num5 = j - num;
                int num6 = j + num2;
                for (int k = 0; k < 2; k++)
                {
                    bool flag = true;
                    int num7 = i;
                    int num8 = j;
                    int num9 = -1;
                    int num10 = num3;
                    if (k == 1)
                    {
                        num9 = 1;
                        num10 = num4;
                        num7++;
                    }

                    while (flag)
                    {
                        if (num8 - num < num5)
                        {
                            num5 = num8 - num;
                        }

                        if (num8 + num2 > num6)
                        {
                            num6 = num8 + num2;
                        }

                        for (int l = 0; l < 2; l++)
                        {
                            int num11 = num8;
                            bool flag2 = true;
                            int num12 = num;
                            int num13 = -1;
                            if (l == 1)
                            {
                                num11++;
                                num12 = num2;
                                num13 = 1;
                            }

                            while (flag2)
                            {
                                if (num7 != i && Main.tile[num7 - num9, num11].wall != 27 &&
                                    (SolidTile(num7 - num9, num11) || !Main.tile[num7 - num9, num11].active() ||
                                     Main.tile[num7 - num9, num11].halfBrick() ||
                                     Main.tile[num7 - num9, num11].slope() != 0))
                                {
                                    Main.tile[num7 - num9, num11].active(true);
                                    Main.tile[num7 - num9, num11].type = 30;
                                }

                                if (SolidTile(num7 - 1, num11) || Main.tile[num7 - 1, num11].halfBrick() ||
                                    Main.tile[num7 - 1, num11].slope() != 0)
                                {
                                    Main.tile[num7 - 1, num11].type = 30;
                                }

                                if (SolidTile(num7 + 1, num11) || Main.tile[num7 + 1, num11].halfBrick() ||
                                    Main.tile[num7 + 1, num11].slope() != 0)
                                {
                                    Main.tile[num7 + 1, num11].type = 30;
                                }

                                if (SolidTile(num7, num11) || Main.tile[num7, num11].halfBrick() ||
                                    Main.tile[num7, num11].slope() != 0)
                                {
                                    int num14 = 0;
                                    if (SolidTile(num7 - 1, num11))
                                    {
                                        num14++;
                                    }

                                    if (SolidTile(num7 + 1, num11))
                                    {
                                        num14++;
                                    }

                                    if (SolidTile(num7, num11 - 1))
                                    {
                                        num14++;
                                    }

                                    if (SolidTile(num7, num11 + 1))
                                    {
                                        num14++;
                                    }

                                    if (num14 < 2)
                                    {
                                        Main.tile[num7, num11].active(false);
                                    }
                                    else
                                    {
                                        flag2 = false;
                                        Main.tile[num7, num11].type = 30;
                                    }
                                }
                                else
                                {
                                    Main.tile[num7, num11].wall = 27;
                                    Main.tile[num7, num11].liquid = 0;
                                    Main.tile[num7, num11].lava(false);
                                }

                                num11 += num13;
                                num12--;
                                if (num12 <= 0)
                                {
                                    if (!Main.tile[num7, num11].active())
                                    {
                                        Main.tile[num7, num11].active(true);
                                        Main.tile[num7, num11].type = 30;
                                    }

                                    flag2 = false;
                                }
                            }
                        }

                        num10--;
                        num7 += num9;
                        if (SolidTile(num7, num8))
                        {
                            int num15 = 0;
                            int num16 = 0;
                            int num17 = num8;
                            bool flag3 = true;
                            while (flag3)
                            {
                                num17--;
                                num15++;
                                if (SolidTile(num7 - num9, num17))
                                {
                                    num15 = 999;
                                    flag3 = false;
                                }
                                else if (!SolidTile(num7, num17))
                                {
                                    flag3 = false;
                                }
                            }

                            num17 = num8;
                            flag3 = true;
                            while (flag3)
                            {
                                num17++;
                                num16++;
                                if (SolidTile(num7 - num9, num17))
                                {
                                    num16 = 999;
                                    flag3 = false;
                                }
                                else if (!SolidTile(num7, num17))
                                {
                                    flag3 = false;
                                }
                            }

                            if (num16 <= num15)
                            {
                                if (num16 > num2)
                                {
                                    num10 = 0;
                                }
                                else
                                {
                                    num8 += num16 + 1;
                                }
                            }
                            else if (num15 > num)
                            {
                                num10 = 0;
                            }
                            else
                            {
                                num8 -= num15 + 1;
                            }
                        }

                        if (num10 <= 0)
                        {
                            flag = false;
                        }
                    }
                }

                int num18 = i - num3 - 1;
                int num19 = i + num4 + 2;
                int num20 = num5 - 1;
                int num21 = num6 + 2;
                for (int m = num18; m < num19; m++)
                {
                    for (int n = num20; n < num21; n++)
                    {
                        if (Main.tile[m, n].wall == 27 && !Main.tile[m, n].active())
                        {
                            if (Main.tile[m - 1, n].wall != 27 && m < i && !SolidTile(m - 1, n))
                            {
                                PlaceTile(m, n, 30, true, false, -1, 0);
                                Main.tile[m, n].wall = 0;
                            }

                            if (Main.tile[m + 1, n].wall != 27 && m > i && !SolidTile(m + 1, n))
                            {
                                PlaceTile(m, n, 30, true, false, -1, 0);
                                Main.tile[m, n].wall = 0;
                            }

                            for (int num22 = m - 1; num22 <= m + 1; num22++)
                            {
                                for (int num23 = n - 1; num23 <= n + 1; num23++)
                                {
                                    if (SolidTile(num22, num23))
                                    {
                                        Main.tile[num22, num23].type = 30;
                                    }
                                }
                            }
                        }

                        if (Main.tile[m, n].type == 30 && Main.tile[m - 1, n].wall == 27 &&
                            Main.tile[m + 1, n].wall == 27 &&
                            (Main.tile[m, n - 1].wall == 27 || Main.tile[m, n - 1].active()) &&
                            (Main.tile[m, n + 1].wall == 27 || Main.tile[m, n + 1].active()))
                        {
                            Main.tile[m, n].active(false);
                            Main.tile[m, n].wall = 27;
                        }
                    }
                }

                for (int num24 = num18; num24 < num19; num24++)
                {
                    for (int num25 = num20; num25 < num21; num25++)
                    {
                        if (Main.tile[num24, num25].type == 30)
                        {
                            if (Main.tile[num24 - 1, num25].wall == 27 && Main.tile[num24 + 1, num25].wall == 27 &&
                                !Main.tile[num24 - 1, num25].active() && !Main.tile[num24 + 1, num25].active())
                            {
                                Main.tile[num24, num25].active(false);
                                Main.tile[num24, num25].wall = 27;
                            }

                            if (!TileID.Sets.BasicChest[Main.tile[num24, num25 - 1].type] &&
                                Main.tile[num24 - 1, num25].wall == 27 && Main.tile[num24 + 1, num25].type == 30 &&
                                Main.tile[num24 + 2, num25].wall == 27 && !Main.tile[num24 - 1, num25].active() &&
                                !Main.tile[num24 + 2, num25].active())
                            {
                                Main.tile[num24, num25].active(false);
                                Main.tile[num24, num25].wall = 27;
                                Main.tile[num24 + 1, num25].active(false);
                                Main.tile[num24 + 1, num25].wall = 27;
                            }

                            if (Main.tile[num24, num25 - 1].wall == 27 && Main.tile[num24, num25 + 1].wall == 27 &&
                                !Main.tile[num24, num25 - 1].active() && !Main.tile[num24, num25 + 1].active())
                            {
                                Main.tile[num24, num25].active(false);
                                Main.tile[num24, num25].wall = 27;
                            }
                        }
                    }
                }

                for (int num26 = num18; num26 < num19; num26++)
                {
                    for (int num27 = num21; num27 > num20; num27--)
                    {
                        bool flag4 = false;
                        if (Main.tile[num26, num27].active() && Main.tile[num26, num27].type == 30)
                        {
                            int num28 = -1;
                            for (int num29 = 0; num29 < 2; num29++)
                            {
                                if (!SolidTile(num26 + num28, num27) && Main.tile[num26 + num28, num27].wall == 0)
                                {
                                    int num30 = 0;
                                    int num31 = num27;
                                    int num32 = num27;
                                    while (Main.tile[num26, num31].active() && Main.tile[num26, num31].type == 30 &&
                                           !SolidTile(num26 + num28, num31) &&
                                           Main.tile[num26 + num28, num31].wall == 0)
                                    {
                                        num31--;
                                        num30++;
                                    }

                                    num31++;
                                    int num33 = num31 + 1;
                                    if (num30 > 4)
                                    {
                                        if (genRand.Next(2) == 0)
                                        {
                                            num31 = num32 - 1;
                                            bool flag5 = true;
                                            for (int num34 = num26 - 2; num34 <= num26 + 2; num34++)
                                            {
                                                for (int num35 = num31 - 2; num35 <= num31; num35++)
                                                {
                                                    if (num34 != num26 && Main.tile[num34, num35].active())
                                                    {
                                                        flag5 = false;
                                                    }
                                                }
                                            }

                                            if (flag5)
                                            {
                                                Main.tile[num26, num31].active(false);
                                                Main.tile[num26, num31 - 1].active(false);
                                                Main.tile[num26, num31 - 2].active(false);
                                                PlaceTile(num26, num31, 10, true, false, -1, 0);
                                                flag4 = true;
                                            }
                                        }

                                        if (!flag4)
                                        {
                                            for (int num36 = num33; num36 < num32; num36++)
                                            {
                                                Main.tile[num26, num36].type = 124;
                                            }
                                        }
                                    }
                                }

                                num28 = 1;
                            }
                        }

                        if (flag4)
                        {
                            break;
                        }
                    }
                }

                int num37 = genRand.Next(1, 2);
                if (genRand.Next(4) == 0)
                {
                    num37 = 0;
                }

                if (genRand.Next(6) == 0)
                {
                    num37++;
                }

                if (genRand.Next(10) == 0)
                {
                    num37++;
                }

                for (int num38 = 0; num38 < num37; num38++)
                {
                    int num39 = 0;
                    int num40 = genRand.Next(num18, num19);
                    int num41 = genRand.Next(num20, num21);
                    while (!Main.wallHouse[Main.tile[num40, num41].wall] || Main.tile[num40, num41].active())
                    {
                        num39++;
                        if (num39 > 1000)
                        {
                            break;
                        }

                        num40 = genRand.Next(num18, num19);
                        num41 = genRand.Next(num20, num21);
                    }

                    if (num39 > 1000)
                    {
                        break;
                    }

                    int num42 = num40;
                    int num43 = num40;
                    int num44 = num41;
                    int num45 = num41;
                    int num46 = 0;
                    int num47 = 0;
                    for (int num48 = 0; num48 < 2; num48++)
                    {
                        num42 = num40;
                        num43 = num40;
                        while (!Main.tile[num42, num41].active() && Main.wallHouse[Main.tile[num42, num41].wall])
                        {
                            num42--;
                        }

                        num42++;
                        for (;
                            !Main.tile[num43, num41].active() && Main.wallHouse[Main.tile[num43, num41].wall];
                            num43++)
                        {
                        }

                        num43--;
                        i = (num42 + num43) / 2;
                        num44 = num41;
                        num45 = num41;
                        while (!Main.tile[num40, num44].active() && Main.wallHouse[Main.tile[num40, num44].wall])
                        {
                            num44--;
                        }

                        num44++;
                        for (;
                            !Main.tile[num40, num45].active() && Main.wallHouse[Main.tile[num40, num45].wall];
                            num45++)
                        {
                        }

                        num45--;
                        num41 = (num44 + num45) / 2;
                    }

                    num42 = num40;
                    num43 = num40;
                    while (!Main.tile[num42, num41].active() && !Main.tile[num42, num41 - 1].active() &&
                           !Main.tile[num42, num41 + 1].active())
                    {
                        num42--;
                    }

                    num42++;
                    for (;
                        !Main.tile[num43, num41].active() && !Main.tile[num43, num41 - 1].active() &&
                        !Main.tile[num43, num41 + 1].active();
                        num43++)
                    {
                    }

                    num43--;
                    num44 = num41;
                    num45 = num41;
                    while (!Main.tile[num40, num44].active() && !Main.tile[num40 - 1, num44].active() &&
                           !Main.tile[num40 + 1, num44].active())
                    {
                        num44--;
                    }

                    num44++;
                    for (;
                        !Main.tile[num40, num45].active() && !Main.tile[num40 - 1, num45].active() &&
                        !Main.tile[num40 + 1, num45].active();
                        num45++)
                    {
                    }

                    num45--;
                    num40 = (num42 + num43) / 2;
                    num41 = (num44 + num45) / 2;
                    num46 = num43 - num42;
                    num47 = num45 - num44;
                    if (num46 > 7 && num47 > 5)
                    {
                        int num49 = 0;
                        if (nearPicture2(i, num41))
                        {
                            num49 = -1;
                        }

                        if (num49 == 0)
                        {
                            Vector2 vector = randHousePicture();
                            int type = (int) vector.X;
                            int style = (int) vector.Y;
                            if (!nearPicture(num40, num41))
                            {
                                PlaceTile(num40, num41, type, true, false, -1, style);
                            }
                        }
                    }
                }

                int num50;
                for (num50 = num18; num50 < num19; num50++)
                {
                    bool flag6 = true;
                    for (int num51 = num20; num51 < num21; num51++)
                    {
                        for (int num52 = num50 - 3; num52 <= num50 + 3; num52++)
                        {
                            if (Main.tile[num52, num51].active() &&
                                (!SolidTile(num52, num51) || Main.tile[num52, num51].type == 10))
                            {
                                flag6 = false;
                            }
                        }
                    }

                    if (flag6)
                    {
                        for (int num53 = num20; num53 < num21; num53++)
                        {
                            if (Main.tile[num50, num53].wall == 27 && !Main.tile[num50, num53].active())
                            {
                                PlaceTile(num50, num53, 124, true, false, -1, 0);
                            }
                        }
                    }

                    num50 += genRand.Next(4);
                }

                for (int num54 = 0; num54 < 4; num54++)
                {
                    int num55 = genRand.Next(num18 + 2, num19 - 1);
                    int num56 = genRand.Next(num20 + 2, num21 - 1);
                    while (Main.tile[num55, num56].wall != 27)
                    {
                        num55 = genRand.Next(num18 + 2, num19 - 1);
                        num56 = genRand.Next(num20 + 2, num21 - 1);
                    }

                    while (Main.tile[num55, num56].active())
                    {
                        num56--;
                    }

                    for (; !Main.tile[num55, num56].active(); num56++)
                    {
                    }

                    num56--;
                    if (Main.tile[num55, num56].wall == 27)
                    {
                        if (genRand.Next(3) == 0)
                        {
                            int num57 = genRand.Next(9);
                            if (num57 == 0)
                            {
                                num57 = 14;
                            }

                            if (num57 == 1)
                            {
                                num57 = 16;
                            }

                            if (num57 == 2)
                            {
                                num57 = 18;
                            }

                            if (num57 == 3)
                            {
                                num57 = 86;
                            }

                            if (num57 == 4)
                            {
                                num57 = 87;
                            }

                            if (num57 == 5)
                            {
                                num57 = 94;
                            }

                            if (num57 == 6)
                            {
                                num57 = 101;
                            }

                            if (num57 == 7)
                            {
                                num57 = 104;
                            }

                            if (num57 == 8)
                            {
                                num57 = 106;
                            }

                            PlaceTile(num55, num56, num57, true, false, -1, 0);
                        }
                        else
                        {
                            int num58 = genRand.Next(2, statueList.Length);
                            PlaceTile(num55, num56, statueList[num58].X, true, true, -1, statueList[num58].Y);
                        }
                    }
                }

                for (int num59 = 0; num59 < 40; num59++)
                {
                    int num60 = genRand.Next(num18 + 2, num19 - 1);
                    int num61 = genRand.Next(num20 + 2, num21 - 1);
                    while (Main.tile[num60, num61].wall != 27)
                    {
                        num60 = genRand.Next(num18 + 2, num19 - 1);
                        num61 = genRand.Next(num20 + 2, num21 - 1);
                    }

                    while (Main.tile[num60, num61].active())
                    {
                        num61--;
                    }

                    for (; !Main.tile[num60, num61].active(); num61++)
                    {
                    }

                    num61--;
                    if (Main.tile[num60, num61].wall == 27 && genRand.Next(2) == 0)
                    {
                        int style2 = genRand.Next(22, 26);
                        PlaceTile(num60, num61, 186, true, false, -1, style2);
                    }
                }

                for (int num62 = 0; num62 < 20; num62++)
                {
                    int num63 = genRand.Next(num18 + 2, num19 - 1);
                    int num64 = genRand.Next(num20 + 2, num21 - 1);
                    while (Main.tile[num63, num64].wall != 27)
                    {
                        num63 = genRand.Next(num18 + 2, num19 - 1);
                        num64 = genRand.Next(num20 + 2, num21 - 1);
                    }

                    while (Main.tile[num63, num64].active())
                    {
                        num64--;
                    }

                    for (; !Main.tile[num63, num64].active(); num64++)
                    {
                    }

                    num64--;
                    if (Main.tile[num63, num64].wall == 27 && genRand.Next(2) == 0)
                    {
                        int x = genRand.Next(31, 34);
                        PlaceSmallPile(num63, num64, x, 1, 185);
                    }
                }

                for (int num65 = 0; num65 < 15; num65++)
                {
                    int num66 = genRand.Next(num18 + 2, num19 - 1);
                    int num67 = genRand.Next(num20 + 2, num21 - 1);
                    while (Main.tile[num66, num67].wall != 27)
                    {
                        num66 = genRand.Next(num18 + 2, num19 - 1);
                        num67 = genRand.Next(num20 + 2, num21 - 1);
                    }

                    while (Main.tile[num66, num67].active())
                    {
                        num67--;
                    }

                    while (num67 > 0 && !Main.tile[num66, num67 - 1].active())
                    {
                        num67--;
                    }

                    if (Main.tile[num66, num67].wall == 27)
                    {
                        int num68 = 4;
                        int style3 = 0;
                        int num69 = genRand.Next(10);
                        if (num69 < 9)
                        {
                            num68 = -1;
                        }
                        else
                        {
                            num68 = 34;
                            style3 = genRand.Next(6);
                        }

                        if (num68 > 0)
                        {
                            PlaceTile(num66, num67, num68, true, false, -1, style3);
                            if (Main.tile[num66, num67].type == num68)
                            {
                                if (num68 == 4)
                                {
                                    Main.tile[num66, num67].frameX += 54;
                                }
                                else
                                {
                                    int num70 = num66;
                                    int num71 = num67;
                                    num67 = num71 - Main.tile[num70, num71].frameY % 54 / 18;
                                    num66 = Main.tile[num70, num71].frameX / 18;
                                    if (num66 > 2)
                                    {
                                        num66 -= 3;
                                    }

                                    num66 = num70 - num66;
                                    short num72 = 54;
                                    if (Main.tile[num66, num67].frameX > 0)
                                    {
                                        num72 = -54;
                                    }

                                    for (int num73 = num66; num73 < num66 + 3; num73++)
                                    {
                                        for (int num74 = num67; num74 < num67 + 3; num74++)
                                        {
                                            Main.tile[num73, num74].frameX += num72;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public static void CountTiles(int X)
    {
        if (X == 0)
        {
            totalEvil = totalEvil2;
            totalBlood = totalBlood2;
            totalSolid = totalSolid2;
            totalGood = totalGood2;
            tGood = (byte) Math.Round((double) ((float) totalGood / (float) totalSolid * 100f));
            tEvil = (byte) Math.Round((double) ((float) totalEvil / (float) totalSolid * 100f));
            tBlood = (byte) Math.Round((double) ((float) totalBlood / (float) totalSolid * 100f));
            if (tGood == 0 && totalGood > 0)
            {
                tGood = 1;
            }

            if (tEvil == 0 && totalEvil > 0)
            {
                tEvil = 1;
            }

            if (tBlood == 0 && totalBlood > 0)
            {
                tBlood = 1;
            }

            if (Main.netMode == 2)
            {
                NetMessage.SendData(57, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
            }

            totalEvil2 = 0;
            totalSolid2 = 0;
            totalGood2 = 0;
            totalBlood2 = 0;
        }

        ushort num = 0;
        ushort num2 = 0;
        int num3 = 0;
        int num4 = 0;
        int num5 = 0;
        do
        {
            int num6;
            int num7;
            if (num4 == 0)
            {
                num6 = 0;
                num5 = (int) (Main.worldSurface + 1.0);
                num7 = 5;
            }
            else
            {
                num6 = num5;
                num5 = Main.maxTilesY;
                num7 = 1;
            }

            for (int i = num6; i < num5; i++)
            {
                Tile tile = Main.tile[X, i];
                if (tile == null)
                {
                    Tile[,] tile2 = Main.tile;
                    int num8 = i;
                    Tile tile3;
                    Tile tile4 = tile3 = new Tile();
                    tile2[X, num8] = tile4;
                    tile = tile3;
                }

                num = tile.type;
                if (num != 0 || tile.active())
                {
                    if (num == num2)
                    {
                        num3 += num7;
                    }
                    else
                    {
                        tileCounts[num2] += num3;
                        num2 = num;
                        num3 = num7;
                    }
                }
            }

            tileCounts[num2] += num3;
            num3 = 0;
            num4++;
        } while (num4 < 2);

        AddUpAlignmentCounts(false);
    }

    public static void AddUpAlignmentCounts(bool clearCounts = false)
    {
        if (clearCounts)
        {
            totalEvil2 = 0;
            totalSolid2 = 0;
            totalGood2 = 0;
            totalBlood2 = 0;
        }

        totalGood2 += tileCounts[164] + tileCounts[109] + tileCounts[117] + tileCounts[116];
        totalEvil2 += tileCounts[23] + tileCounts[163] + tileCounts[112] + tileCounts[25];
        totalBlood2 += tileCounts[199] + tileCounts[234] + tileCounts[203] + tileCounts[200];
        totalSolid2 += tileCounts[2] + tileCounts[1] + tileCounts[60] + tileCounts[53] + tileCounts[161];
        totalSolid2 += tileCounts[164] + tileCounts[109] + tileCounts[117] + tileCounts[116];
        totalSolid2 += tileCounts[23] + tileCounts[163] + tileCounts[112] + tileCounts[25];
        totalSolid2 += tileCounts[199] + tileCounts[234] + tileCounts[203] + tileCounts[200];
        Array.Clear(tileCounts, 0, tileCounts.Length);
    }

    public static void plantDye(int i, int j, bool exoticPlant = false)
    {
        UnifiedRandom unifiedRandom = gen ? genRand : Main.rand;
        if (Main.tile[i, j].active() && i >= 95 && i <= Main.maxTilesX - 95 && j >= 95 && j <= Main.maxTilesY - 95)
        {
            int num = 90;
            if (exoticPlant)
            {
                num = 240;
            }

            if ((double) j < Main.worldSurface)
            {
                if (!Main.tile[i, j - 1].active() || Main.tile[i, j - 1].type == 3 || Main.tile[i, j - 1].type == 51 ||
                    Main.tile[i, j - 1].type == 61 || Main.tile[i, j - 1].type == 73 ||
                    Main.tile[i, j - 1].type == 74 || Main.tile[i, j - 1].type == 184)
                {
                    int num2 = Utils.Clamp(i - num, 1, Main.maxTilesX - 1 - 1);
                    int num3 = Utils.Clamp(i + num, 1, Main.maxTilesX - 1 - 1);
                    int num4 = Utils.Clamp(j - num, 1, Main.maxTilesY - 1 - 1);
                    int num5 = Utils.Clamp(j + num, 1, Main.maxTilesY - 1 - 1);
                    for (int k = num2; k < num3; k++)
                    {
                        for (int l = num4; l < num5; l++)
                        {
                            if (Main.tile[k, l].active() && Main.tile[k, l].type == 227 &&
                                (!exoticPlant || Main.tile[k, l].frameX >= 272) &&
                                (exoticPlant || Main.tile[k, l].frameX < 272))
                            {
                                return;
                            }
                        }
                    }

                    if (exoticPlant)
                    {
                        int type = Main.tile[i, j].type;
                        bool flag = TileID.Sets.Conversion.Grass[type] || TileID.Sets.Conversion.Moss[type] ||
                                    type == 0;
                        if (Main.tile[i, j - 1].liquid > 0 && Main.tile[i, j - 1].lava())
                        {
                            flag = false;
                        }

                        if (flag)
                        {
                            PlaceTile(i, j - 1, 227, true, false, -1, genRand.Next(8, 12));
                        }
                    }
                    else if (Main.tile[i, j].type == 2 || Main.tile[i, j].type == 109)
                    {
                        if (unifiedRandom.Next(4) == 0)
                        {
                            PlaceTile(i, j - 1, 227, true, false, -1, 4);
                        }
                        else
                        {
                            PlaceTile(i, j - 1, 227, true, false, -1, 3);
                        }
                    }
                    else if (Main.tile[i, j].type == 60)
                    {
                        if (unifiedRandom.Next(2) == 0)
                        {
                            PlaceTile(i, j - 1, 227, true, false, -1, 2);
                        }
                        else
                        {
                            PlaceTile(i, j - 1, 227, true, false, -1, 4);
                        }
                    }
                    else if (Main.tile[i, j].type == 53 && Main.tile[i, j - 1].liquid == 255 &&
                             Main.tile[i, j - 2].liquid == 255)
                    {
                        PlaceTile(i, j - 1, 227, true, false, -1, 2);
                    }
                    else if (Main.tile[i, j].type == 80 && !Main.tile[i - 1, j - 1].active() &&
                             !Main.tile[i + 1, j - 1].active())
                    {
                        try
                        {
                            bool flag2 = true;
                            for (int m = i - 5; m <= i + 5; m++)
                            {
                                for (int n = j - 5; n <= j + 15; n++)
                                {
                                    if (Main.tile[m, n].active() &&
                                        (Main.tile[m, n].type == 112 || Main.tile[m, n].type == 234))
                                    {
                                        flag2 = false;
                                    }
                                }
                            }

                            if (flag2)
                            {
                                PlaceTile(i, j - 1, 227, true, false, -1, 6);
                            }
                        }
                        catch
                        {
                        }
                    }
                }
            }
            else if (j < Main.maxTilesY - 200)
            {
                if (!Main.tile[i, j - 1].active() || Main.tile[i, j - 1].type == 3 || Main.tile[i, j - 1].type == 51 ||
                    Main.tile[i, j - 1].type == 61 || Main.tile[i, j - 1].type == 73 ||
                    Main.tile[i, j - 1].type == 74 || Main.tile[i, j - 1].type == 184)
                {
                    int num6 = Utils.Clamp(i - num, 1, Main.maxTilesX - 1 - 1);
                    int num7 = Utils.Clamp(i + num, 1, Main.maxTilesX - 1 - 1);
                    int num8 = Utils.Clamp(j - num, 1, Main.maxTilesY - 1 - 1);
                    int num9 = Utils.Clamp(j + num, 1, Main.maxTilesY - 1 - 1);
                    for (int num10 = num6; num10 < num7; num10++)
                    {
                        for (int num11 = num8; num11 < num9; num11++)
                        {
                            if (Main.tile[num10, num11].active() && Main.tile[num10, num11].type == 227 &&
                                (!exoticPlant || Main.tile[num10, num11].frameX >= 272) &&
                                (exoticPlant || Main.tile[num10, num11].frameX < 272))
                            {
                                return;
                            }
                        }
                    }

                    if (exoticPlant)
                    {
                        int type2 = Main.tile[i, j].type;
                        if (TileID.Sets.Conversion.Grass[type2] || TileID.Sets.Conversion.Moss[type2] || type2 == 0)
                        {
                            PlaceTile(i, j - 1, 227, true, false, -1, genRand.Next(8, 12));
                        }
                    }
                    else if (Main.tile[i, j].type == 60)
                    {
                        if (unifiedRandom.Next(2) == 0)
                        {
                            PlaceTile(i, j - 1, 227, true, false, -1, 2);
                        }
                        else if (unifiedRandom.Next(2) == 0)
                        {
                            PlaceTile(i, j - 1, 227, true, false, -1, 0);
                        }
                        else
                        {
                            PlaceTile(i, j - 1, 227, true, false, -1, 1);
                        }
                    }
                    else if (Main.tile[i, j].type == 0 || Main.tile[i, j].type == 1 || Main.tile[i, j].type == 59)
                    {
                        if (unifiedRandom.Next(2) == 0)
                        {
                            PlaceTile(i, j - 1, 227, true, false, -1, 0);
                        }
                        else
                        {
                            PlaceTile(i, j - 1, 227, true, false, -1, 1);
                        }
                    }
                    else if (Main.tile[i, j - 1].liquid == 255 && Main.tile[i, j - 2].liquid == 255)
                    {
                        PlaceTile(i, j - 1, 227, true, false, -1, 5);
                    }
                }

                if (!Main.tile[i, j + 1].active() && !exoticPlant)
                {
                    for (int num12 = i - num; num12 < i + num; num12++)
                    {
                        for (int num13 = j - num; num13 < j + num; num13++)
                        {
                            if (Main.tile[num12, num13].active() && Main.tile[num12, num13].type == 227)
                            {
                                return;
                            }
                        }
                    }

                    if (Main.tile[i, j].type == 0)
                    {
                        PlaceTile(i, j + 1, 227, true, false, -1, 7);
                    }
                }
            }
        }
    }

    public static void UpdateWorld()
    {
        int num = 20;
        int maxValue = 40;
        if (Main.expertMode)
        {
            maxValue = 30;
        }

        Wiring.UpdateMech();
        TileEntity.UpdateStart();
        foreach (TileEntity value in TileEntity.ByID.Values)
        {
            value.Update();
        }

        TileEntity.UpdateEnd();
        UpdateLunarApocalypse();
        if (Main.netMode != 1)
        {
            totalD++;
            if (totalD >= 30)
            {
                totalD = 0;
                CountTiles(totalX);
                totalX++;
                if (totalX >= Main.maxTilesX)
                {
                    totalX = 0;
                }
            }
        }

        if (Main.worldRate != 0)
        {
            Liquid.skipCount++;
            if (Liquid.skipCount > 1)
            {
                Liquid.UpdateLiquid();
                Liquid.skipCount = 0;
            }

            float num2 = 3E-05f * (float) Main.worldRate;
            float num3 = 1.5E-05f * (float) Main.worldRate;
            bool flag = false;
            spawnDelay++;
            if (Main.invasionType > 0 || Main.eclipse)
            {
                spawnDelay = 0;
            }

            if (spawnDelay >= 20)
            {
                flag = true;
                spawnDelay = 0;
                if (prioritizedTownNPC != 37)
                {
                    for (int i = 0; i < 200; i++)
                    {
                        if (Main.npc[i].active && Main.npc[i].homeless && Main.npc[i].townNPC &&
                            Main.npc[i].type != 368)
                        {
                            prioritizedTownNPC = Main.npc[i].type;
                            break;
                        }
                    }
                }
            }

            float num4 = (float) (Main.maxTilesX * Main.maxTilesY) * num2;
            int num5 = 151;
            int maxValue2 = (int) MathHelper.Lerp((float) num5, (float) num5 * 2.8f,
                MathHelper.Clamp((float) Main.maxTilesX / 4200f - 1f, 0f, 1f));
            for (int j = 0; (float) j < num4; j++)
            {
                if (Main.rand.Next(100) == 0 && Main.rand.Next(maxValue2) == 0)
                {
                    PlantAlch();
                }

                int num6 = genRand.Next(10, Main.maxTilesX - 10);
                int num7 = genRand.Next(10, (int) Main.worldSurface - 1);
                int num8 = num6 - 1;
                int num9 = num6 + 2;
                int num10 = num7 - 1;
                int num11 = num7 + 2;
                if (num8 < 10)
                {
                    num8 = 10;
                }

                if (num9 > Main.maxTilesX - 10)
                {
                    num9 = Main.maxTilesX - 10;
                }

                if (num10 < 10)
                {
                    num10 = 10;
                }

                if (num11 > Main.maxTilesY - 10)
                {
                    num11 = Main.maxTilesY - 10;
                }

                if (Main.tile[num6, num7] != null)
                {
                    if (Main.tileAlch[Main.tile[num6, num7].type])
                    {
                        GrowAlch(num6, num7);
                    }

                    if (Main.tile[num6, num7].liquid > 32)
                    {
                        if (Main.tile[num6, num7].active() && (Main.tile[num6, num7].type == 3 ||
                                                               Main.tile[num6, num7].type == 20 ||
                                                               Main.tile[num6, num7].type == 24 ||
                                                               Main.tile[num6, num7].type == 27 ||
                                                               Main.tile[num6, num7].type == 73 ||
                                                               Main.tile[num6, num7].type == 201))
                        {
                            KillTile(num6, num7, false, false, false);
                            if (Main.netMode == 2)
                            {
                                NetMessage.SendData(17, -1, -1, null, 0, (float) num6, (float) num7, 0f, 0, 0, 0);
                            }
                        }
                    }
                    else if (Main.tile[num6, num7].nactive())
                    {
                        hardUpdateWorld(num6, num7);
                        if (Main.rand.Next(3000) == 0)
                        {
                            plantDye(num6, num7, false);
                        }

                        if (Main.rand.Next(9001) == 0)
                        {
                            plantDye(num6, num7, true);
                        }

                        if (Main.tile[num6, num7].type == 80)
                        {
                            if (genRand.Next(15) == 0)
                            {
                                GrowCactus(num6, num7);
                            }
                        }
                        else if (TileID.Sets.Conversion.Sand[Main.tile[num6, num7].type])
                        {
                            if (!Main.tile[num6, num10].active())
                            {
                                if (num6 < 250 || num6 > Main.maxTilesX - 250)
                                {
                                    if (genRand.Next(500) == 0)
                                    {
                                        int num12 = 7;
                                        int num13 = 6;
                                        int num14 = 0;
                                        for (int k = num6 - num12; k <= num6 + num12; k++)
                                        {
                                            for (int l = num10 - num12; l <= num10 + num12; l++)
                                            {
                                                if (Main.tile[k, l].active() && Main.tile[k, l].type == 81)
                                                {
                                                    num14++;
                                                }
                                            }
                                        }

                                        if (num14 < num13 && Main.tile[num6, num10].liquid == 255 &&
                                            Main.tile[num6, num10 - 1].liquid == 255 &&
                                            Main.tile[num6, num10 - 2].liquid == 255 &&
                                            Main.tile[num6, num10 - 3].liquid == 255 &&
                                            Main.tile[num6, num10 - 4].liquid == 255)
                                        {
                                            PlaceTile(num6, num10, 81, true, false, -1, 0);
                                            if (Main.netMode == 2 && Main.tile[num6, num10].active())
                                            {
                                                NetMessage.SendTileSquare(-1, num6, num10, 1, TileChangeType.None);
                                            }
                                        }
                                    }
                                }
                                else if (num6 > 400 && num6 < Main.maxTilesX - 400 && genRand.Next(300) == 0)
                                {
                                    GrowCactus(num6, num7);
                                }
                            }
                        }
                        else if (Main.tile[num6, num7].type == 116 || Main.tile[num6, num7].type == 112 ||
                                 Main.tile[num6, num7].type == 234)
                        {
                            if (!Main.tile[num6, num10].active() && num6 > 400 && num6 < Main.maxTilesX - 400 &&
                                genRand.Next(300) == 0)
                            {
                                GrowCactus(num6, num7);
                            }
                        }
                        else if (Main.tile[num6, num7].type == 147 || Main.tile[num6, num7].type == 161 ||
                                 Main.tile[num6, num7].type == 163 || Main.tile[num6, num7].type == 164 ||
                                 Main.tile[num6, num7].type == 200)
                        {
                            if (Main.rand.Next(10) == 0 && !Main.tile[num6, num7 + 1].active() &&
                                !Main.tile[num6, num7 + 2].active())
                            {
                                int num15 = num6 - 3;
                                int num16 = num6 + 4;
                                int num17 = 0;
                                for (int m = num15; m < num16; m++)
                                {
                                    if (Main.tile[m, num7].type == 165 && Main.tile[m, num7].active())
                                    {
                                        num17++;
                                    }

                                    if (Main.tile[m, num7 + 1].type == 165 && Main.tile[m, num7 + 1].active())
                                    {
                                        num17++;
                                    }

                                    if (Main.tile[m, num7 + 2].type == 165 && Main.tile[m, num7 + 2].active())
                                    {
                                        num17++;
                                    }

                                    if (Main.tile[m, num7 + 3].type == 165 && Main.tile[m, num7 + 3].active())
                                    {
                                        num17++;
                                    }
                                }

                                if (num17 < 2)
                                {
                                    PlaceTight(num6, num7 + 1, 165, false);
                                    SquareTileFrame(num6, num7 + 1, true);
                                    if (Main.netMode == 2 && Main.tile[num6, num7 + 1].active())
                                    {
                                        NetMessage.SendTileSquare(-1, num6, num7 + 1, 3, TileChangeType.None);
                                    }
                                }
                            }
                        }
                        else if (Main.tile[num6, num7].type == 254)
                        {
                            if (Main.rand.Next((Main.tile[num6, num7].frameX + 10) / 10) == 0)
                            {
                                GrowPumpkin(num6, num7, 254);
                            }
                        }
                        else if (Main.tile[num6, num7].type == 78 || Main.tile[num6, num7].type == 380)
                        {
                            if (!Main.tile[num6, num10].active() && genRand.Next(2) == 0)
                            {
                                PlaceTile(num6, num10, 3, true, false, -1, 0);
                                if (Main.netMode == 2 && Main.tile[num6, num10].active())
                                {
                                    NetMessage.SendTileSquare(-1, num6, num10, 1, TileChangeType.None);
                                }
                            }
                        }
                        else if (Main.tile[num6, num7].type == 2 || Main.tile[num6, num7].type == 23 ||
                                 Main.tile[num6, num7].type == 32 || Main.tile[num6, num7].type == 109 ||
                                 Main.tile[num6, num7].type == 199 || Main.tile[num6, num7].type == 352)
                        {
                            int num18 = Main.tile[num6, num7].type;
                            if (Main.halloween && genRand.Next(75) == 0 && (num18 == 2 || num18 == 109))
                            {
                                int num19 = 100;
                                int num20 = 0;
                                for (int n = num6 - num19; n < num6 + num19; n += 2)
                                {
                                    for (int num21 = num7 - num19; num21 < num7 + num19; num21 += 2)
                                    {
                                        if (n > 1 && n < Main.maxTilesX - 2 && num21 > 1 &&
                                            num21 < Main.maxTilesY - 2 && Main.tile[n, num21].active() &&
                                            Main.tile[n, num21].type == 254)
                                        {
                                            num20++;
                                        }
                                    }
                                }

                                if (num20 < 6)
                                {
                                    PlacePumpkin(num6, num10);
                                    if (Main.netMode == 2 && Main.tile[num6, num10].type == 254)
                                    {
                                        NetMessage.SendTileSquare(-1, num6, num10, 4, TileChangeType.None);
                                    }
                                }
                            }

                            if (!Main.tile[num6, num10].active() && genRand.Next(12) == 0 && num18 == 2 &&
                                PlaceTile(num6, num10, 3, true, false, -1, 0))
                            {
                                Main.tile[num6, num10].color(Main.tile[num6, num7].color());
                                if (Main.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, num6, num10, 1, TileChangeType.None);
                                }
                            }

                            if (!Main.tile[num6, num10].active() && genRand.Next(10) == 0 && num18 == 23 &&
                                PlaceTile(num6, num10, 24, true, false, -1, 0))
                            {
                                Main.tile[num6, num10].color(Main.tile[num6, num7].color());
                                if (Main.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, num6, num10, 1, TileChangeType.None);
                                }
                            }

                            if (!Main.tile[num6, num10].active() && genRand.Next(10) == 0 && num18 == 109 &&
                                PlaceTile(num6, num10, 110, true, false, -1, 0))
                            {
                                Main.tile[num6, num10].color(Main.tile[num6, num7].color());
                                if (Main.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, num6, num10, 1, TileChangeType.None);
                                }
                            }

                            if (!Main.tile[num6, num10].active() && genRand.Next(10) == 0 && num18 == 199 &&
                                PlaceTile(num6, num10, 201, true, false, -1, 0))
                            {
                                Main.tile[num6, num10].color(Main.tile[num6, num7].color());
                                if (Main.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, num6, num10, 1, TileChangeType.None);
                                }
                            }

                            bool flag2 = false;
                            for (int num22 = num8; num22 < num9; num22++)
                            {
                                for (int num23 = num10; num23 < num11; num23++)
                                {
                                    if ((num6 != num22 || num7 != num23) && Main.tile[num22, num23].active())
                                    {
                                        if (num18 == 32)
                                        {
                                            num18 = 23;
                                        }

                                        if (num18 == 352)
                                        {
                                            num18 = 199;
                                        }

                                        if (Main.tile[num22, num23].type == 0 ||
                                            (num18 == 23 && Main.tile[num22, num23].type == 2) ||
                                            (num18 == 199 && Main.tile[num22, num23].type == 2) ||
                                            (num18 == 23 && Main.tile[num22, num23].type == 109))
                                        {
                                            SpreadGrass(num22, num23, 0, num18, false, Main.tile[num6, num7].color());
                                            if (num18 == 23)
                                            {
                                                SpreadGrass(num22, num23, 2, num18, false,
                                                    Main.tile[num6, num7].color());
                                            }

                                            if (num18 == 23)
                                            {
                                                SpreadGrass(num22, num23, 109, num18, false,
                                                    Main.tile[num6, num7].color());
                                            }

                                            if (num18 == 199)
                                            {
                                                SpreadGrass(num22, num23, 2, num18, false,
                                                    Main.tile[num6, num7].color());
                                            }

                                            if (num18 == 199)
                                            {
                                                SpreadGrass(num22, num23, 109, num18, false,
                                                    Main.tile[num6, num7].color());
                                            }

                                            if (Main.tile[num22, num23].type == num18)
                                            {
                                                SquareTileFrame(num22, num23, true);
                                                flag2 = true;
                                            }
                                        }

                                        if (Main.tile[num22, num23].type == 0 ||
                                            (num18 == 109 && Main.tile[num22, num23].type == 2) ||
                                            (num18 == 109 && Main.tile[num22, num23].type == 23) ||
                                            (num18 == 109 && Main.tile[num22, num23].type == 199))
                                        {
                                            SpreadGrass(num22, num23, 0, num18, false, Main.tile[num6, num7].color());
                                            if (num18 == 109)
                                            {
                                                SpreadGrass(num22, num23, 2, num18, false,
                                                    Main.tile[num6, num7].color());
                                            }

                                            if (num18 == 109)
                                            {
                                                SpreadGrass(num22, num23, 23, num18, false,
                                                    Main.tile[num6, num7].color());
                                            }

                                            if (num18 == 109)
                                            {
                                                SpreadGrass(num22, num23, 199, num18, false,
                                                    Main.tile[num6, num7].color());
                                            }

                                            if (Main.tile[num22, num23].type == num18)
                                            {
                                                SquareTileFrame(num22, num23, true);
                                                flag2 = true;
                                            }
                                        }
                                    }
                                }
                            }

                            if (Main.netMode == 2 && flag2)
                            {
                                NetMessage.SendTileSquare(-1, num6, num7, 3, TileChangeType.None);
                            }
                        }
                        else if (Main.tile[num6, num7].type == 20 && genRand.Next(20) == 0)
                        {
                            bool flag3 = PlayerLOS(num6, num7);
                            bool flag4 = false;
                            flag4 = ((Main.tile[num6, num7].frameX < 324 || Main.tile[num6, num7].frameX >= 540)
                                ? GrowTree(num6, num7)
                                : GrowPalmTree(num6, num7));
                            if (flag4 && flag3)
                            {
                                TreeGrowFXCheck(num6, num7);
                            }
                        }

                        if (Main.tile[num6, num7].type == 3 && genRand.Next(20) == 0 &&
                            Main.tile[num6, num7].frameX != 144)
                        {
                            if ((Main.tile[num6, num7].frameX < 144 && Main.rand.Next(10) == 0) ||
                                ((Main.tile[num6, num7 + 1].type == 78 || Main.tile[num6, num7 + 1].type == 380) &&
                                 Main.rand.Next(2) == 0))
                            {
                                Main.tile[num6, num7].frameX = (short) (198 + genRand.Next(10) * 18);
                            }

                            Main.tile[num6, num7].type = 73;
                            if (Main.netMode == 2)
                            {
                                NetMessage.SendTileSquare(-1, num6, num7, 3, TileChangeType.None);
                            }
                        }

                        if (Main.tile[num6, num7].type == 110 && genRand.Next(20) == 0 &&
                            Main.tile[num6, num7].frameX < 144)
                        {
                            Main.tile[num6, num7].type = 113;
                            if (Main.netMode == 2)
                            {
                                NetMessage.SendTileSquare(-1, num6, num7, 3, TileChangeType.None);
                            }
                        }

                        if (Main.tile[num6, num7].type == 32 && genRand.Next(3) == 0)
                        {
                            int num24 = num6;
                            int num25 = num7;
                            int num26 = 0;
                            if (Main.tile[num24 + 1, num25].active() && Main.tile[num24 + 1, num25].type == 32)
                            {
                                num26++;
                            }

                            if (Main.tile[num24 - 1, num25].active() && Main.tile[num24 - 1, num25].type == 32)
                            {
                                num26++;
                            }

                            if (Main.tile[num24, num25 + 1].active() && Main.tile[num24, num25 + 1].type == 32)
                            {
                                num26++;
                            }

                            if (Main.tile[num24, num25 - 1].active() && Main.tile[num24, num25 - 1].type == 32)
                            {
                                num26++;
                            }

                            if (num26 < 3 || Main.tile[num6, num7].type == 23)
                            {
                                switch (genRand.Next(4))
                                {
                                    case 0:
                                        num25--;
                                        break;
                                    case 1:
                                        num25++;
                                        break;
                                    case 2:
                                        num24--;
                                        break;
                                    case 3:
                                        num24++;
                                        break;
                                }

                                if (!Main.tile[num24, num25].active())
                                {
                                    num26 = 0;
                                    if (Main.tile[num24 + 1, num25].active() && Main.tile[num24 + 1, num25].type == 32)
                                    {
                                        num26++;
                                    }

                                    if (Main.tile[num24 - 1, num25].active() && Main.tile[num24 - 1, num25].type == 32)
                                    {
                                        num26++;
                                    }

                                    if (Main.tile[num24, num25 + 1].active() && Main.tile[num24, num25 + 1].type == 32)
                                    {
                                        num26++;
                                    }

                                    if (Main.tile[num24, num25 - 1].active() && Main.tile[num24, num25 - 1].type == 32)
                                    {
                                        num26++;
                                    }

                                    if (num26 < 2)
                                    {
                                        int num27 = 7;
                                        int num28 = num24 - num27;
                                        int num29 = num24 + num27;
                                        int num30 = num25 - num27;
                                        int num31 = num25 + num27;
                                        bool flag5 = false;
                                        for (int num32 = num28; num32 < num29; num32++)
                                        {
                                            for (int num33 = num30; num33 < num31; num33++)
                                            {
                                                if (Math.Abs(num32 - num24) * 2 + Math.Abs(num33 - num25) < 9 &&
                                                    Main.tile[num32, num33].active() &&
                                                    Main.tile[num32, num33].type == 23 &&
                                                    Main.tile[num32, num33 - 1].active() &&
                                                    Main.tile[num32, num33 - 1].type == 32 &&
                                                    Main.tile[num32, num33 - 1].liquid == 0)
                                                {
                                                    flag5 = true;
                                                    break;
                                                }
                                            }
                                        }

                                        if (flag5)
                                        {
                                            Main.tile[num24, num25].type = 32;
                                            Main.tile[num24, num25].active(true);
                                            SquareTileFrame(num24, num25, true);
                                            if (Main.netMode == 2)
                                            {
                                                NetMessage.SendTileSquare(-1, num24, num25, 3, TileChangeType.None);
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        if (Main.tile[num6, num7].type == 352 && genRand.Next(3) == 0)
                        {
                            GrowSpike(num6, num7, 352, 199);
                        }
                    }
                    else if (flag)
                    {
                        TrySpawningTownNPC(num6, num7);
                    }

                    if (Main.tile[num6, num7].wall == 81 || Main.tile[num6, num7].wall == 83 ||
                        (Main.tile[num6, num7].type == 199 && Main.tile[num6, num7].active()))
                    {
                        int num34 = num6 + genRand.Next(-2, 3);
                        int num35 = num7 + genRand.Next(-2, 3);
                        if (Main.tile[num34, num35].wall >= 63 && Main.tile[num34, num35].wall <= 68)
                        {
                            bool flag6 = false;
                            for (int num36 = num6 - num; num36 < num6 + num; num36++)
                            {
                                for (int num37 = num7 - num; num37 < num7 + num; num37++)
                                {
                                    if (Main.tile[num6, num7].active())
                                    {
                                        int type = Main.tile[num6, num7].type;
                                        if (type == 199 || type == 200 || type == 201 || type == 203 || type == 205 ||
                                            type == 234 || type == 352)
                                        {
                                            flag6 = true;
                                            break;
                                        }
                                    }
                                }
                            }

                            if (flag6)
                            {
                                Main.tile[num34, num35].wall = 81;
                                if (Main.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, num34, num35, 3, TileChangeType.None);
                                }
                            }
                        }
                    }

                    if (Main.tile[num6, num7].wall == 69 || Main.tile[num6, num7].wall == 3 ||
                        (Main.tile[num6, num7].type == 23 && Main.tile[num6, num7].active()))
                    {
                        int num38 = num6 + genRand.Next(-2, 3);
                        int num39 = num7 + genRand.Next(-2, 3);
                        if (Main.tile[num38, num39].wall >= 63 && Main.tile[num38, num39].wall <= 68)
                        {
                            bool flag7 = false;
                            for (int num40 = num6 - num; num40 < num6 + num; num40++)
                            {
                                for (int num41 = num7 - num; num41 < num7 + num; num41++)
                                {
                                    if (Main.tile[num40, num41].active())
                                    {
                                        int type2 = Main.tile[num40, num41].type;
                                        if (type2 == 22 || type2 == 23 || type2 == 24 || type2 == 25 || type2 == 32 ||
                                            type2 == 112 || type2 == 163)
                                        {
                                            flag7 = true;
                                            break;
                                        }
                                    }
                                }
                            }

                            if (flag7)
                            {
                                Main.tile[num38, num39].wall = 69;
                                if (Main.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, num38, num39, 3, TileChangeType.None);
                                }
                            }
                        }
                    }

                    if (Main.tile[num6, num7].wall == 70 ||
                        (Main.tile[num6, num7].type == 109 && Main.tile[num6, num7].active()))
                    {
                        int num42 = num6 + genRand.Next(-2, 3);
                        int num43 = num7 + genRand.Next(-2, 3);
                        if (Main.tile[num42, num43].wall == 63 || Main.tile[num42, num43].wall == 65 ||
                            Main.tile[num42, num43].wall == 66 || Main.tile[num42, num43].wall == 68)
                        {
                            bool flag8 = false;
                            for (int num44 = num6 - num; num44 < num6 + num; num44++)
                            {
                                for (int num45 = num7 - num; num45 < num7 + num; num45++)
                                {
                                    if (Main.tile[num44, num45].active())
                                    {
                                        int type3 = Main.tile[num44, num45].type;
                                        if (type3 == 109 || type3 == 110 || type3 == 113 || type3 == 115 ||
                                            type3 == 116 || type3 == 117 || type3 == 164)
                                        {
                                            flag8 = true;
                                            break;
                                        }
                                    }
                                }
                            }

                            if (flag8)
                            {
                                Main.tile[num42, num43].wall = 70;
                                if (Main.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, num42, num43, 3, TileChangeType.None);
                                }
                            }
                        }
                    }

                    SpreadDesertWalls(num, num6, num7);
                    if (Main.tile[num6, num7].active())
                    {
                        if ((Main.tile[num6, num7].type == 2 || Main.tile[num6, num7].type == 52 ||
                             (Main.tile[num6, num7].type == 192 && genRand.Next(10) == 0)) && genRand.Next(40) == 0 &&
                            !Main.tile[num6, num7 + 1].active() && !Main.tile[num6, num7 + 1].lava())
                        {
                            bool flag9 = false;
                            for (int num46 = num7; num46 > num7 - 10; num46--)
                            {
                                if (Main.tile[num6, num46].bottomSlope())
                                {
                                    flag9 = false;
                                    break;
                                }

                                if (Main.tile[num6, num46].active() && Main.tile[num6, num46].type == 2 &&
                                    !Main.tile[num6, num46].bottomSlope())
                                {
                                    flag9 = true;
                                    break;
                                }
                            }

                            if (flag9)
                            {
                                int num47 = num6;
                                int num48 = num7 + 1;
                                Main.tile[num47, num48].type = 52;
                                Main.tile[num47, num48].active(true);
                                Main.tile[num47, num48].color(Main.tile[num6, num7].color());
                                SquareTileFrame(num47, num48, true);
                                if (Main.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, num47, num48, 3, TileChangeType.None);
                                }
                            }
                        }

                        if (Main.tile[num6, num7].type == 70)
                        {
                            int type4 = Main.tile[num6, num7].type;
                            if (!Main.tile[num6, num10].active() && genRand.Next(10) == 0)
                            {
                                PlaceTile(num6, num10, 71, true, false, -1, 0);
                                if (Main.tile[num6, num10].active())
                                {
                                    Main.tile[num6, num10].color(Main.tile[num6, num7].color());
                                }

                                if (Main.netMode == 2 && Main.tile[num6, num10].active())
                                {
                                    NetMessage.SendTileSquare(-1, num6, num10, 1, TileChangeType.None);
                                }
                            }

                            if (genRand.Next(100) == 0)
                            {
                                bool flag10 = PlayerLOS(num6, num7);
                                if (GrowTree(num6, num7) && flag10)
                                {
                                    TreeGrowFXCheck(num6, num7 - 1);
                                }
                            }

                            bool flag11 = false;
                            for (int num49 = num8; num49 < num9; num49++)
                            {
                                for (int num50 = num10; num50 < num11; num50++)
                                {
                                    if ((num6 != num49 || num7 != num50) && Main.tile[num49, num50].active() &&
                                        Main.tile[num49, num50].type == 59)
                                    {
                                        SpreadGrass(num49, num50, 59, type4, false, Main.tile[num6, num7].color());
                                        if (Main.tile[num49, num50].type == type4)
                                        {
                                            SquareTileFrame(num49, num50, true);
                                            flag11 = true;
                                        }
                                    }
                                }
                            }

                            if (Main.netMode == 2 && flag11)
                            {
                                NetMessage.SendTileSquare(-1, num6, num7, 3, TileChangeType.None);
                            }
                        }

                        if (Main.tile[num6, num7].type == 60)
                        {
                            int type5 = Main.tile[num6, num7].type;
                            if (!Main.tile[num6, num10].active() && genRand.Next(7) == 0)
                            {
                                PlaceTile(num6, num10, 61, true, false, -1, 0);
                                if (Main.tile[num6, num10].active())
                                {
                                    Main.tile[num6, num10].color(Main.tile[num6, num7].color());
                                }

                                if (Main.netMode == 2 && Main.tile[num6, num10].active())
                                {
                                    NetMessage.SendTileSquare(-1, num6, num10, 1, TileChangeType.None);
                                }
                            }
                            else if (genRand.Next(500) == 0 &&
                                     (!Main.tile[num6, num10].active() || Main.tile[num6, num10].type == 61 ||
                                      Main.tile[num6, num10].type == 74 || Main.tile[num6, num10].type == 69))
                            {
                                if (GrowTree(num6, num7) && PlayerLOS(num6, num7))
                                {
                                    TreeGrowFXCheck(num6, num7 - 1);
                                }
                            }
                            else if (genRand.Next(25) == 0 && Main.tile[num6, num10].liquid == 0)
                            {
                                PlaceJunglePlant(num6, num10, 233, genRand.Next(8), 0);
                                if (Main.tile[num6, num10].type == 233)
                                {
                                    if (Main.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, num6, num10, 4, TileChangeType.None);
                                    }
                                    else
                                    {
                                        PlaceJunglePlant(num6, num10, 233, genRand.Next(12), 1);
                                        if (Main.tile[num6, num10].type == 233 && Main.netMode == 2)
                                        {
                                            NetMessage.SendTileSquare(-1, num6, num10, 3, TileChangeType.None);
                                        }
                                    }
                                }
                            }

                            bool flag12 = false;
                            for (int num51 = num8; num51 < num9; num51++)
                            {
                                for (int num52 = num10; num52 < num11; num52++)
                                {
                                    if ((num6 != num51 || num7 != num52) && Main.tile[num51, num52].active() &&
                                        Main.tile[num51, num52].type == 59)
                                    {
                                        SpreadGrass(num51, num52, 59, type5, false, Main.tile[num6, num7].color());
                                        if (Main.tile[num51, num52].type == type5)
                                        {
                                            SquareTileFrame(num51, num52, true);
                                            flag12 = true;
                                        }
                                    }
                                }
                            }

                            if (Main.netMode == 2 && flag12)
                            {
                                NetMessage.SendTileSquare(-1, num6, num7, 3, TileChangeType.None);
                            }
                        }

                        if (Main.tile[num6, num7].type == 61 && genRand.Next(3) == 0 &&
                            Main.tile[num6, num7].frameX < 144)
                        {
                            if (Main.rand.Next(4) == 0)
                            {
                                Main.tile[num6, num7].frameX = (short) (162 + genRand.Next(8) * 18);
                            }

                            Main.tile[num6, num7].type = 74;
                            if (Main.netMode == 2)
                            {
                                NetMessage.SendTileSquare(-1, num6, num7, 3, TileChangeType.None);
                            }
                        }

                        if ((Main.tile[num6, num7].type == 60 || Main.tile[num6, num7].type == 62) &&
                            genRand.Next(15) == 0 && !Main.tile[num6, num7 + 1].active() &&
                            !Main.tile[num6, num7 + 1].lava())
                        {
                            bool flag13 = false;
                            for (int num53 = num7; num53 > num7 - 10; num53--)
                            {
                                if (Main.tile[num6, num53].bottomSlope())
                                {
                                    flag13 = false;
                                    break;
                                }

                                if (Main.tile[num6, num53].active() && Main.tile[num6, num53].type == 60 &&
                                    !Main.tile[num6, num53].bottomSlope())
                                {
                                    flag13 = true;
                                    break;
                                }
                            }

                            if (flag13)
                            {
                                int num54 = num6;
                                int num55 = num7 + 1;
                                Main.tile[num54, num55].type = 62;
                                Main.tile[num54, num55].active(true);
                                SquareTileFrame(num54, num55, true);
                                if (Main.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, num54, num55, 3, TileChangeType.None);
                                }
                            }
                        }

                        if ((Main.tile[num6, num7].type == 109 || Main.tile[num6, num7].type == 115) &&
                            genRand.Next(15) == 0 && !Main.tile[num6, num7 + 1].active() &&
                            !Main.tile[num6, num7 + 1].lava())
                        {
                            bool flag14 = false;
                            for (int num56 = num7; num56 > num7 - 10; num56--)
                            {
                                if (Main.tile[num6, num56].bottomSlope())
                                {
                                    flag14 = false;
                                    break;
                                }

                                if (Main.tile[num6, num56].active() && Main.tile[num6, num56].type == 109 &&
                                    !Main.tile[num6, num56].bottomSlope())
                                {
                                    flag14 = true;
                                    break;
                                }
                            }

                            if (flag14)
                            {
                                int num57 = num6;
                                int num58 = num7 + 1;
                                Main.tile[num57, num58].type = 115;
                                Main.tile[num57, num58].active(true);
                                SquareTileFrame(num57, num58, true);
                                if (Main.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, num57, num58, 3, TileChangeType.None);
                                }
                            }
                        }

                        if ((Main.tile[num6, num7].type == 199 || Main.tile[num6, num7].type == 205) &&
                            genRand.Next(15) == 0 && !Main.tile[num6, num7 + 1].active() &&
                            !Main.tile[num6, num7 + 1].lava())
                        {
                            bool flag15 = false;
                            for (int num59 = num7; num59 > num7 - 10; num59--)
                            {
                                if (Main.tile[num6, num59].bottomSlope())
                                {
                                    flag15 = false;
                                    break;
                                }

                                if (Main.tile[num6, num59].active() && Main.tile[num6, num59].type == 199 &&
                                    !Main.tile[num6, num59].bottomSlope())
                                {
                                    flag15 = true;
                                    break;
                                }
                            }

                            if (flag15)
                            {
                                int num60 = num6;
                                int num61 = num7 + 1;
                                Main.tile[num60, num61].type = 205;
                                Main.tile[num60, num61].active(true);
                                SquareTileFrame(num60, num61, true);
                                if (Main.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, num60, num61, 3, TileChangeType.None);
                                }
                            }
                        }
                    }
                }
            }

            for (int num62 = 0; (float) num62 < (float) (Main.maxTilesX * Main.maxTilesY) * num3; num62++)
            {
                int num63 = genRand.Next(10, Main.maxTilesX - 10);
                int num64 = genRand.Next((int) Main.worldSurface - 1, Main.maxTilesY - 20);
                int num65 = num63 - 1;
                int num66 = num63 + 2;
                int num67 = num64 - 1;
                int num68 = num64 + 2;
                if (num65 < 10)
                {
                    num65 = 10;
                }

                if (num66 > Main.maxTilesX - 10)
                {
                    num66 = Main.maxTilesX - 10;
                }

                if (num67 < 10)
                {
                    num67 = 10;
                }

                if (num68 > Main.maxTilesY - 10)
                {
                    num68 = Main.maxTilesY - 10;
                }

                if (Main.tile[num63, num64] != null)
                {
                    if (Main.tileAlch[Main.tile[num63, num64].type])
                    {
                        GrowAlch(num63, num64);
                    }

                    if (Main.tile[num63, num64].liquid <= 32)
                    {
                        if (Main.tile[num63, num64].nactive())
                        {
                            hardUpdateWorld(num63, num64);
                            if (Main.rand.Next(3000) == 0)
                            {
                                plantDye(num63, num64, false);
                            }

                            if (Main.rand.Next(4500) == 0)
                            {
                                plantDye(num63, num64, true);
                            }

                            if (Main.tile[num63, num64].type == 23 && !Main.tile[num63, num67].active() &&
                                genRand.Next(1) == 0)
                            {
                                PlaceTile(num63, num67, 24, true, false, -1, 0);
                                if (Main.netMode == 2 && Main.tile[num63, num67].active())
                                {
                                    NetMessage.SendTileSquare(-1, num63, num67, 1, TileChangeType.None);
                                }
                            }

                            if (Main.tile[num63, num64].type == 32 && genRand.Next(3) == 0)
                            {
                                int num69 = num63;
                                int num70 = num64;
                                int num71 = 0;
                                if (Main.tile[num69 + 1, num70].active() && Main.tile[num69 + 1, num70].type == 32)
                                {
                                    num71++;
                                }

                                if (Main.tile[num69 - 1, num70].active() && Main.tile[num69 - 1, num70].type == 32)
                                {
                                    num71++;
                                }

                                if (Main.tile[num69, num70 + 1].active() && Main.tile[num69, num70 + 1].type == 32)
                                {
                                    num71++;
                                }

                                if (Main.tile[num69, num70 - 1].active() && Main.tile[num69, num70 - 1].type == 32)
                                {
                                    num71++;
                                }

                                if (num71 < 3 || Main.tile[num63, num64].type == 23)
                                {
                                    switch (genRand.Next(4))
                                    {
                                        case 0:
                                            num70--;
                                            break;
                                        case 1:
                                            num70++;
                                            break;
                                        case 2:
                                            num69--;
                                            break;
                                        case 3:
                                            num69++;
                                            break;
                                    }

                                    if (!Main.tile[num69, num70].active())
                                    {
                                        num71 = 0;
                                        if (Main.tile[num69 + 1, num70].active() &&
                                            Main.tile[num69 + 1, num70].type == 32)
                                        {
                                            num71++;
                                        }

                                        if (Main.tile[num69 - 1, num70].active() &&
                                            Main.tile[num69 - 1, num70].type == 32)
                                        {
                                            num71++;
                                        }

                                        if (Main.tile[num69, num70 + 1].active() &&
                                            Main.tile[num69, num70 + 1].type == 32)
                                        {
                                            num71++;
                                        }

                                        if (Main.tile[num69, num70 - 1].active() &&
                                            Main.tile[num69, num70 - 1].type == 32)
                                        {
                                            num71++;
                                        }

                                        if (num71 < 2)
                                        {
                                            int num72 = 7;
                                            int num73 = num69 - num72;
                                            int num74 = num69 + num72;
                                            int num75 = num70 - num72;
                                            int num76 = num70 + num72;
                                            bool flag16 = false;
                                            for (int num77 = num73; num77 < num74; num77++)
                                            {
                                                for (int num78 = num75; num78 < num76; num78++)
                                                {
                                                    if (Math.Abs(num77 - num69) * 2 + Math.Abs(num78 - num70) < 9 &&
                                                        Main.tile[num77, num78].active() &&
                                                        Main.tile[num77, num78].type == 23 &&
                                                        Main.tile[num77, num78 - 1].active() &&
                                                        Main.tile[num77, num78 - 1].type == 32 &&
                                                        Main.tile[num77, num78 - 1].liquid == 0)
                                                    {
                                                        flag16 = true;
                                                        break;
                                                    }
                                                }
                                            }

                                            if (flag16)
                                            {
                                                Main.tile[num69, num70].type = 32;
                                                Main.tile[num69, num70].active(true);
                                                SquareTileFrame(num69, num70, true);
                                                if (Main.netMode == 2)
                                                {
                                                    NetMessage.SendTileSquare(-1, num69, num70, 3, TileChangeType.None);
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            if (Main.tile[num63, num64].type == 352 && genRand.Next(3) == 0)
                            {
                                GrowSpike(num63, num64, 352, 199);
                            }

                            if (Main.tile[num63, num64].type == 199)
                            {
                                int type6 = Main.tile[num63, num64].type;
                                bool flag17 = false;
                                for (int num79 = num65; num79 < num66; num79++)
                                {
                                    for (int num80 = num67; num80 < num68; num80++)
                                    {
                                        if ((num63 != num79 || num64 != num80) && Main.tile[num79, num80].active() &&
                                            Main.tile[num79, num80].type == 0)
                                        {
                                            SpreadGrass(num79, num80, 0, type6, false, Main.tile[num63, num64].color());
                                            if (Main.tile[num79, num80].type == type6)
                                            {
                                                SquareTileFrame(num79, num80, true);
                                                flag17 = true;
                                            }
                                        }
                                    }
                                }

                                if (Main.netMode == 2 && flag17)
                                {
                                    NetMessage.SendTileSquare(-1, num63, num64, 3, TileChangeType.None);
                                }
                            }

                            if (Main.tile[num63, num64].type == 60)
                            {
                                int type7 = Main.tile[num63, num64].type;
                                if (!Main.tile[num63, num67].active() && genRand.Next(10) == 0)
                                {
                                    PlaceTile(num63, num67, 61, true, false, -1, 0);
                                    if (Main.netMode == 2 && Main.tile[num63, num67].active())
                                    {
                                        NetMessage.SendTileSquare(-1, num63, num67, 1, TileChangeType.None);
                                    }
                                }
                                else if (genRand.Next(25) == 0 && Main.tile[num63, num67].liquid == 0)
                                {
                                    if (Main.hardMode && NPC.downedMechBoss1 && NPC.downedMechBoss2 &&
                                        NPC.downedMechBoss3 && genRand.Next(60) == 0)
                                    {
                                        bool flag18 = true;
                                        int num81 = 150;
                                        for (int num82 = num63 - num81; num82 < num63 + num81; num82 += 2)
                                        {
                                            for (int num83 = num64 - num81; num83 < num64 + num81; num83 += 2)
                                            {
                                                if (num82 > 1 && num82 < Main.maxTilesX - 2 && num83 > 1 &&
                                                    num83 < Main.maxTilesY - 2 && Main.tile[num82, num83].active() &&
                                                    Main.tile[num82, num83].type == 238)
                                                {
                                                    flag18 = false;
                                                    break;
                                                }
                                            }
                                        }

                                        if (flag18)
                                        {
                                            PlaceJunglePlant(num63, num67, 238, 0, 0);
                                            SquareTileFrame(num63, num67, true);
                                            SquareTileFrame(num63 + 1, num67 + 1, true);
                                            if (Main.tile[num63, num67].type == 238 && Main.netMode == 2)
                                            {
                                                NetMessage.SendTileSquare(-1, num63, num67, 4, TileChangeType.None);
                                            }
                                        }
                                    }

                                    if (Main.hardMode && NPC.downedMechBossAny && genRand.Next(maxValue) == 0)
                                    {
                                        bool flag19 = true;
                                        int num84 = 60;
                                        if (Main.expertMode)
                                        {
                                            num84 -= 10;
                                        }

                                        for (int num85 = num63 - num84; num85 < num63 + num84; num85 += 2)
                                        {
                                            for (int num86 = num64 - num84; num86 < num64 + num84; num86 += 2)
                                            {
                                                if (num85 > 1 && num85 < Main.maxTilesX - 2 && num86 > 1 &&
                                                    num86 < Main.maxTilesY - 2 && Main.tile[num85, num86].active() &&
                                                    Main.tile[num85, num86].type == 236)
                                                {
                                                    flag19 = false;
                                                    break;
                                                }
                                            }
                                        }

                                        if (flag19)
                                        {
                                            PlaceJunglePlant(num63, num67, 236, genRand.Next(3), 0);
                                            SquareTileFrame(num63, num67, true);
                                            SquareTileFrame(num63 + 1, num67 + 1, true);
                                            if (Main.tile[num63, num67].type == 236 && Main.netMode == 2)
                                            {
                                                NetMessage.SendTileSquare(-1, num63, num67, 4, TileChangeType.None);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        PlaceJunglePlant(num63, num67, 233, genRand.Next(8), 0);
                                        if (Main.tile[num63, num67].type == 233)
                                        {
                                            if (Main.netMode == 2)
                                            {
                                                NetMessage.SendTileSquare(-1, num63, num67, 4, TileChangeType.None);
                                            }
                                            else
                                            {
                                                PlaceJunglePlant(num63, num67, 233, genRand.Next(12), 1);
                                                if (Main.tile[num63, num67].type == 233 && Main.netMode == 2)
                                                {
                                                    NetMessage.SendTileSquare(-1, num63, num67, 3, TileChangeType.None);
                                                }
                                            }
                                        }
                                    }
                                }

                                bool flag20 = false;
                                for (int num87 = num65; num87 < num66; num87++)
                                {
                                    for (int num88 = num67; num88 < num68; num88++)
                                    {
                                        if ((num63 != num87 || num64 != num88) && Main.tile[num87, num88].active() &&
                                            Main.tile[num87, num88].type == 59)
                                        {
                                            SpreadGrass(num87, num88, 59, type7, false,
                                                Main.tile[num63, num64].color());
                                            if (Main.tile[num87, num88].type == type7)
                                            {
                                                SquareTileFrame(num87, num88, true);
                                                flag20 = true;
                                            }
                                        }
                                    }
                                }

                                if (Main.netMode == 2 && flag20)
                                {
                                    NetMessage.SendTileSquare(-1, num63, num64, 3, TileChangeType.None);
                                }
                            }

                            if (Main.tile[num63, num64].type == 61 && genRand.Next(3) == 0 &&
                                Main.tile[num63, num64].frameX < 144)
                            {
                                if (Main.rand.Next(4) == 0)
                                {
                                    Main.tile[num63, num64].frameX = (short) (162 + genRand.Next(8) * 18);
                                }

                                Main.tile[num63, num64].type = 74;
                                if (Main.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, num63, num64, 3, TileChangeType.None);
                                }
                            }

                            if ((Main.tile[num63, num64].type == 60 || Main.tile[num63, num64].type == 62) &&
                                genRand.Next(5) == 0 && !Main.tile[num63, num64 + 1].active() &&
                                !Main.tile[num63, num64 + 1].lava())
                            {
                                bool flag21 = false;
                                for (int num89 = num64; num89 > num64 - 10; num89--)
                                {
                                    if (Main.tile[num63, num89].bottomSlope())
                                    {
                                        flag21 = false;
                                        break;
                                    }

                                    if (Main.tile[num63, num89].active() && Main.tile[num63, num89].type == 60 &&
                                        !Main.tile[num63, num89].bottomSlope())
                                    {
                                        flag21 = true;
                                        break;
                                    }
                                }

                                if (flag21)
                                {
                                    int num90 = num63;
                                    int num91 = num64 + 1;
                                    Main.tile[num90, num91].type = 62;
                                    Main.tile[num90, num91].active(true);
                                    SquareTileFrame(num90, num91, true);
                                    if (Main.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, num90, num91, 3, TileChangeType.None);
                                    }
                                }
                            }

                            if ((Main.tile[num63, num64].type == 60 || Main.tile[num63, num64].type == 62) &&
                                genRand.Next(80) == 0 && !PlayerLOS(num63, num64))
                            {
                                bool flag22 = true;
                                int num92 = num64;
                                if (Main.tile[num63, num64].type == 60)
                                {
                                    num92++;
                                }

                                for (int num93 = num63; num93 < num63 + 2; num93++)
                                {
                                    int num94 = num92 - 1;
                                    if (!AnchorValid(Framing.GetTileSafely(num93, num94), AnchorType.SolidTile) ||
                                        Main.tile[num93, num94].bottomSlope())
                                    {
                                        flag22 = false;
                                    }

                                    if (Main.tile[num93, num94].liquid > 0 ||
                                        Main.wallHouse[Main.tile[num93, num94].wall])
                                    {
                                        flag22 = false;
                                    }

                                    if (!flag22)
                                    {
                                        break;
                                    }

                                    for (int num95 = num92; num95 < num92 + 2; num95++)
                                    {
                                        if ((Main.tile[num93, num95].active() &&
                                             (!Main.tileCut[Main.tile[num93, num95].type] ||
                                              Main.tile[num93, num95].type == 444)) || Main.tile[num93, num95].lava())
                                        {
                                            flag22 = false;
                                        }

                                        if (!flag22)
                                        {
                                            break;
                                        }
                                    }

                                    if (!flag22)
                                    {
                                        break;
                                    }
                                }

                                if (flag22 && CountNearBlocksTypes(num63, num64, 20, 1, 444) > 0)
                                {
                                    flag22 = false;
                                }

                                if (flag22)
                                {
                                    for (int num96 = num63; num96 < num63 + 2; num96++)
                                    {
                                        Main.tile[num96, num92 - 1].slope(0);
                                        Main.tile[num96, num92 - 1].halfBrick(false);
                                        for (int num97 = num92; num97 < num92 + 2; num97++)
                                        {
                                            if (Main.tile[num96, num97].active())
                                            {
                                                KillTile(num96, num97, false, false, false);
                                            }
                                        }
                                    }

                                    for (int num98 = num63; num98 < num63 + 2; num98++)
                                    {
                                        for (int num99 = num92; num99 < num92 + 2; num99++)
                                        {
                                            Main.tile[num98, num99].active(true);
                                            Main.tile[num98, num99].type = 444;
                                            Main.tile[num98, num99].frameX = (short) ((num98 - num63) * 18);
                                            Main.tile[num98, num99].frameY = (short) ((num99 - num92) * 18);
                                        }
                                    }

                                    if (Main.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, num63, num92, 3, TileChangeType.None);
                                    }
                                }
                            }

                            if (Main.tile[num63, num64].type == 69 && genRand.Next(3) == 0)
                            {
                                int num100 = num63;
                                int num101 = num64;
                                int num102 = 0;
                                if (Main.tile[num100 + 1, num101].active() && Main.tile[num100 + 1, num101].type == 69)
                                {
                                    num102++;
                                }

                                if (Main.tile[num100 - 1, num101].active() && Main.tile[num100 - 1, num101].type == 69)
                                {
                                    num102++;
                                }

                                if (Main.tile[num100, num101 + 1].active() && Main.tile[num100, num101 + 1].type == 69)
                                {
                                    num102++;
                                }

                                if (Main.tile[num100, num101 - 1].active() && Main.tile[num100, num101 - 1].type == 69)
                                {
                                    num102++;
                                }

                                if (num102 < 3 || Main.tile[num63, num64].type == 60)
                                {
                                    switch (genRand.Next(4))
                                    {
                                        case 0:
                                            num101--;
                                            break;
                                        case 1:
                                            num101++;
                                            break;
                                        case 2:
                                            num100--;
                                            break;
                                        case 3:
                                            num100++;
                                            break;
                                    }

                                    if (!Main.tile[num100, num101].active())
                                    {
                                        num102 = 0;
                                        if (Main.tile[num100 + 1, num101].active() &&
                                            Main.tile[num100 + 1, num101].type == 69)
                                        {
                                            num102++;
                                        }

                                        if (Main.tile[num100 - 1, num101].active() &&
                                            Main.tile[num100 - 1, num101].type == 69)
                                        {
                                            num102++;
                                        }

                                        if (Main.tile[num100, num101 + 1].active() &&
                                            Main.tile[num100, num101 + 1].type == 69)
                                        {
                                            num102++;
                                        }

                                        if (Main.tile[num100, num101 - 1].active() &&
                                            Main.tile[num100, num101 - 1].type == 69)
                                        {
                                            num102++;
                                        }

                                        if (num102 < 2)
                                        {
                                            int num103 = 7;
                                            int num104 = num100 - num103;
                                            int num105 = num100 + num103;
                                            int num106 = num101 - num103;
                                            int num107 = num101 + num103;
                                            bool flag23 = false;
                                            for (int num108 = num104; num108 < num105; num108++)
                                            {
                                                for (int num109 = num106; num109 < num107; num109++)
                                                {
                                                    if (Math.Abs(num108 - num100) * 2 + Math.Abs(num109 - num101) < 9 &&
                                                        Main.tile[num108, num109].active() &&
                                                        Main.tile[num108, num109].type == 60 &&
                                                        Main.tile[num108, num109 - 1].active() &&
                                                        Main.tile[num108, num109 - 1].type == 69 &&
                                                        Main.tile[num108, num109 - 1].liquid == 0)
                                                    {
                                                        flag23 = true;
                                                        break;
                                                    }
                                                }
                                            }

                                            if (flag23)
                                            {
                                                Main.tile[num100, num101].type = 69;
                                                Main.tile[num100, num101].active(true);
                                                SquareTileFrame(num100, num101, true);
                                                if (Main.netMode == 2)
                                                {
                                                    NetMessage.SendTileSquare(-1, num100, num101, 3,
                                                        TileChangeType.None);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else if (Main.tile[num63, num64].type == 147 || Main.tile[num63, num64].type == 161 ||
                                     Main.tile[num63, num64].type == 163 || Main.tile[num63, num64].type == 164 ||
                                     Main.tile[num63, num64].type == 200)
                            {
                                if (Main.rand.Next(10) == 0 && !Main.tile[num63, num64 + 1].active() &&
                                    !Main.tile[num63, num64 + 2].active())
                                {
                                    int num110 = num63 - 3;
                                    int num111 = num63 + 4;
                                    int num112 = 0;
                                    for (int num113 = num110; num113 < num111; num113++)
                                    {
                                        if (Main.tile[num113, num64].type == 165 && Main.tile[num113, num64].active())
                                        {
                                            num112++;
                                        }

                                        if (Main.tile[num113, num64 + 1].type == 165 &&
                                            Main.tile[num113, num64 + 1].active())
                                        {
                                            num112++;
                                        }

                                        if (Main.tile[num113, num64 + 2].type == 165 &&
                                            Main.tile[num113, num64 + 2].active())
                                        {
                                            num112++;
                                        }

                                        if (Main.tile[num113, num64 + 3].type == 165 &&
                                            Main.tile[num113, num64 + 3].active())
                                        {
                                            num112++;
                                        }
                                    }

                                    if (num112 < 2)
                                    {
                                        PlaceTight(num63, num64 + 1, 165, false);
                                        SquareTileFrame(num63, num64 + 1, true);
                                        if (Main.netMode == 2 && Main.tile[num63, num64 + 1].active())
                                        {
                                            NetMessage.SendTileSquare(-1, num63, num64 + 1, 3, TileChangeType.None);
                                        }
                                    }
                                }
                            }
                            else if (Main.tileMoss[Main.tile[num63, num64].type])
                            {
                                int type8 = Main.tile[num63, num64].type;
                                bool flag24 = false;
                                for (int num114 = num65; num114 < num66; num114++)
                                {
                                    for (int num115 = num67; num115 < num68; num115++)
                                    {
                                        if ((num63 != num114 || num64 != num115) &&
                                            Main.tile[num114, num115].active() && Main.tile[num114, num115].type == 1)
                                        {
                                            SpreadGrass(num114, num115, 1, type8, false,
                                                Main.tile[num63, num64].color());
                                            if (Main.tile[num114, num115].type == type8)
                                            {
                                                SquareTileFrame(num114, num115, true);
                                                flag24 = true;
                                            }
                                        }
                                    }
                                }

                                if (Main.netMode == 2 && flag24)
                                {
                                    NetMessage.SendTileSquare(-1, num63, num64, 3, TileChangeType.None);
                                }

                                if (genRand.Next(6) == 0)
                                {
                                    int num116 = num63;
                                    int num117 = num64;
                                    switch (genRand.Next(4))
                                    {
                                        case 0:
                                            num116--;
                                            break;
                                        case 1:
                                            num116++;
                                            break;
                                        case 2:
                                            num117--;
                                            break;
                                        default:
                                            num117++;
                                            break;
                                    }

                                    if (!Main.tile[num116, num117].active())
                                    {
                                        PlaceTile(num116, num117, 184, true, false, -1, 0);
                                        if (Main.netMode == 2 && Main.tile[num116, num117].active())
                                        {
                                            NetMessage.SendTileSquare(-1, num116, num117, 1, TileChangeType.None);
                                        }
                                    }
                                }
                            }

                            if (Main.tile[num63, num64].type == 70)
                            {
                                int type9 = Main.tile[num63, num64].type;
                                if (!Main.tile[num63, num67].active() && genRand.Next(10) == 0)
                                {
                                    PlaceTile(num63, num67, 71, true, false, -1, 0);
                                    if (Main.netMode == 2 && Main.tile[num63, num67].active())
                                    {
                                        NetMessage.SendTileSquare(-1, num63, num67, 1, TileChangeType.None);
                                    }
                                }

                                if (genRand.Next(200) == 0)
                                {
                                    bool flag25 = false;
                                    if (GrowShroom(num63, num64) && PlayerLOS(num63, num64))
                                    {
                                        TreeGrowFXCheck(num63, num64 - 1);
                                    }
                                }

                                bool flag26 = false;
                                for (int num118 = num65; num118 < num66; num118++)
                                {
                                    for (int num119 = num67; num119 < num68; num119++)
                                    {
                                        if ((num63 != num118 || num64 != num119) &&
                                            Main.tile[num118, num119].active() && Main.tile[num118, num119].type == 59)
                                        {
                                            SpreadGrass(num118, num119, 59, type9, false,
                                                Main.tile[num63, num64].color());
                                            if (Main.tile[num118, num119].type == type9)
                                            {
                                                SquareTileFrame(num118, num119, true);
                                                flag26 = true;
                                            }
                                        }
                                    }
                                }

                                if (Main.netMode == 2 && flag26)
                                {
                                    NetMessage.SendTileSquare(-1, num63, num64, 3, TileChangeType.None);
                                }
                            }
                        }
                        else
                        {
                            if (Main.tile[num63, num64].wall == 62 && Main.tile[num63, num64].liquid == 0 &&
                                genRand.Next(10) == 0)
                            {
                                int num120 = genRand.Next(2, 4);
                                int num121 = num63 - num120;
                                int num122 = num63 + num120;
                                int num123 = num64 - num120;
                                int num124 = num64 + num120;
                                bool flag27 = false;
                                for (int num125 = num121; num125 <= num122; num125++)
                                {
                                    for (int num126 = num123; num126 <= num124; num126++)
                                    {
                                        if (SolidTile(num125, num126))
                                        {
                                            flag27 = true;
                                            break;
                                        }
                                    }
                                }

                                if (flag27 && !Main.tile[num63, num64].active())
                                {
                                    PlaceTile(num63, num64, 51, true, false, -1, 0);
                                    TileFrame(num63, num64, true, false);
                                    if (Main.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, num63, num64, 3, TileChangeType.None);
                                    }
                                }
                            }

                            if (flag)
                            {
                                TrySpawningTownNPC(num63, num64);
                            }
                        }
                    }

                    if (Main.tile[num63, num64].wall == 81 || Main.tile[num63, num64].wall == 83 ||
                        (Main.tile[num63, num64].type == 199 && Main.tile[num63, num64].active()))
                    {
                        int num127 = num63 + genRand.Next(-2, 3);
                        int num128 = num64 + genRand.Next(-2, 3);
                        if (Main.tile[num127, num128].wall >= 63 && Main.tile[num127, num128].wall <= 68)
                        {
                            bool flag28 = false;
                            for (int num129 = num63 - num; num129 < num63 + num; num129++)
                            {
                                for (int num130 = num64 - num; num130 < num64 + num; num130++)
                                {
                                    if (Main.tile[num63, num64].active())
                                    {
                                        int type10 = Main.tile[num63, num64].type;
                                        if (type10 == 199 || type10 == 200 || type10 == 201 || type10 == 203 ||
                                            type10 == 205 || type10 == 234 || type10 == 352)
                                        {
                                            flag28 = true;
                                            break;
                                        }
                                    }
                                }
                            }

                            if (flag28)
                            {
                                Main.tile[num127, num128].wall = 81;
                                if (Main.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, num127, num128, 3, TileChangeType.None);
                                }
                            }
                        }
                    }

                    if (Main.tile[num63, num64].wall == 69 || Main.tile[num63, num64].wall == 3 ||
                        (Main.tile[num63, num64].type == 23 && Main.tile[num63, num64].active()))
                    {
                        int num131 = num63 + genRand.Next(-2, 3);
                        int num132 = num64 + genRand.Next(-2, 3);
                        if (Main.tile[num131, num132].wall >= 63 && Main.tile[num131, num132].wall <= 68)
                        {
                            bool flag29 = false;
                            for (int num133 = num63 - num; num133 < num63 + num; num133++)
                            {
                                for (int num134 = num64 - num; num134 < num64 + num; num134++)
                                {
                                    if (Main.tile[num63, num64].active())
                                    {
                                        int type11 = Main.tile[num63, num64].type;
                                        if (type11 == 22 || type11 == 23 || type11 == 24 || type11 == 25 ||
                                            type11 == 32 || type11 == 112 || type11 == 163)
                                        {
                                            flag29 = true;
                                            break;
                                        }
                                    }
                                }
                            }

                            if (flag29)
                            {
                                Main.tile[num131, num132].wall = 69;
                                if (Main.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, num131, num132, 3, TileChangeType.None);
                                }
                            }
                        }
                    }

                    if (Main.tile[num63, num64].wall == 70 ||
                        (Main.tile[num63, num64].type == 109 && Main.tile[num63, num64].active()))
                    {
                        int num135 = num63 + genRand.Next(-2, 3);
                        int num136 = num64 + genRand.Next(-2, 3);
                        if (Main.tile[num135, num136].wall == 63 || Main.tile[num135, num136].wall == 65 ||
                            Main.tile[num135, num136].wall == 66 || Main.tile[num135, num136].wall == 68)
                        {
                            bool flag30 = false;
                            for (int num137 = num63 - num; num137 < num63 + num; num137++)
                            {
                                for (int num138 = num64 - num; num138 < num64 + num; num138++)
                                {
                                    if (Main.tile[num63, num64].active())
                                    {
                                        int type12 = Main.tile[num63, num64].type;
                                        if (type12 == 109 || type12 == 110 || type12 == 113 || type12 == 115 ||
                                            type12 == 116 || type12 == 117 || type12 == 164)
                                        {
                                            flag30 = true;
                                            break;
                                        }
                                    }
                                }
                            }

                            if (flag30)
                            {
                                Main.tile[num135, num136].wall = 70;
                                if (Main.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, num135, num136, 3, TileChangeType.None);
                                }
                            }
                        }
                    }

                    SpreadDesertWalls(num, num63, num64);
                }
            }

            if (!Main.dayTime)
            {
                float num139 = (float) (Main.maxTilesX / 4200);
                if ((float) Main.rand.Next(8000) < 10f * num139)
                {
                    int num140 = 12;
                    int num141 = Main.rand.Next(Main.maxTilesX - 50) + 100;
                    num141 *= 16;
                    int num142 = Main.rand.Next((int) ((double) Main.maxTilesY * 0.05));
                    num142 *= 16;
                    Vector2 vector = new Vector2((float) num141, (float) num142);
                    float num143 = (float) Main.rand.Next(-100, 101);
                    float num144 = (float) (Main.rand.Next(200) + 100);
                    float num145 = (float) Math.Sqrt((double) (num143 * num143 + num144 * num144));
                    num145 = (float) num140 / num145;
                    num143 *= num145;
                    num144 *= num145;
                    Projectile.NewProjectile(vector.X, vector.Y, num143, num144, 12, 1000, 10f, Main.myPlayer, 0f, 0f);
                }
            }
        }
    }

    private static void TrySpawningTownNPC(int x, int y)
    {
        if (prioritizedTownNPC > 0)
        {
            if (Main.tile[x, y].wall == 34)
            {
                if (Main.rand.Next(4) == 0)
                {
                    SpawnTownNPC(x, y);
                }
            }
            else
            {
                SpawnTownNPC(x, y);
            }
        }
    }

    public static void SpreadDesertWalls(int wallDist, int i, int j)
    {
        if (WallID.Sets.Conversion.Sandstone[Main.tile[i, j].wall] ||
            (Main.tile[i, j].active() && TileID.Sets.Conversion.Sandstone[Main.tile[i, j].type]) ||
            WallID.Sets.Conversion.HardenedSand[Main.tile[i, j].wall])
        {
            int num = 0;
            int wall = Main.tile[i, j].wall;
            int type = Main.tile[i, j].type;
            if (WallID.Sets.Corrupt[wall] || TileID.Sets.Corrupt[type])
            {
                num = 1;
            }

            if (WallID.Sets.Hallow[wall] || TileID.Sets.Hallow[type])
            {
                num = 2;
            }

            if (WallID.Sets.Crimson[wall] || TileID.Sets.Crimson[type])
            {
                num = 3;
            }

            if (num != 0)
            {
                int num2 = i + genRand.Next(-2, 3);
                int num3 = j + genRand.Next(-2, 3);
                bool flag = false;
                if (WallID.Sets.Conversion.Sandstone[Main.tile[num2, num3].wall] ||
                    WallID.Sets.Conversion.HardenedSand[Main.tile[num2, num3].wall])
                {
                    switch (num)
                    {
                        case 3:
                            for (int m = i - wallDist; m < i + wallDist; m++)
                            {
                                for (int n = j - wallDist; n < j + wallDist; n++)
                                {
                                    if (Main.tile[m, n].active() && TileID.Sets.Crimson[Main.tile[m, n].type])
                                    {
                                        flag = true;
                                        break;
                                    }
                                }

                                if (flag)
                                {
                                    break;
                                }
                            }

                            break;
                        case 2:
                            for (int num4 = i - wallDist; num4 < i + wallDist; num4++)
                            {
                                for (int num5 = j - wallDist; num5 < j + wallDist; num5++)
                                {
                                    if (Main.tile[num4, num5].active() &&
                                        TileID.Sets.Hallow[Main.tile[num4, num5].type])
                                    {
                                        flag = true;
                                        break;
                                    }
                                }

                                if (flag)
                                {
                                    break;
                                }
                            }

                            break;
                        case 1:
                            for (int k = i - wallDist; k < i + wallDist; k++)
                            {
                                for (int l = j - wallDist; l < j + wallDist; l++)
                                {
                                    if (Main.tile[k, l].active() && TileID.Sets.Corrupt[Main.tile[k, l].type])
                                    {
                                        flag = true;
                                        break;
                                    }
                                }

                                if (flag)
                                {
                                    break;
                                }
                            }

                            break;
                    }
                }

                if (flag)
                {
                    byte? nullable = null;
                    if (WallID.Sets.Conversion.Sandstone[Main.tile[num2, num3].wall])
                    {
                        switch (num)
                        {
                            case 3:
                                nullable = 221;
                                break;
                            case 2:
                                nullable = 222;
                                break;
                            case 1:
                                nullable = 220;
                                break;
                        }
                    }

                    if (WallID.Sets.Conversion.HardenedSand[Main.tile[num2, num3].wall])
                    {
                        switch (num)
                        {
                            case 3:
                                nullable = 218;
                                break;
                            case 2:
                                nullable = 219;
                                break;
                            case 1:
                                nullable = 217;
                                break;
                        }
                    }

                    if (nullable.HasValue && Main.tile[num2, num3].wall != nullable.Value)
                    {
                        Main.tile[num2, num3].wall = nullable.Value;
                        if (Main.netMode == 2)
                        {
                            NetMessage.SendTileSquare(-1, num2, num3, 3, TileChangeType.None);
                        }
                    }
                }
            }
        }
    }

    public static void PlaceWall(int i, int j, int type, bool mute = false)
    {
        if (i > 1 && j > 1 && i < Main.maxTilesX - 2 && j < Main.maxTilesY - 2)
        {
            if (Main.tile[i, j] == null)
            {
                Tile[,] tile = Main.tile;
                Tile tile2 = new Tile();
                tile[i, j] = tile2;
            }

            if (Main.tile[i, j].wall == 0)
            {
                Main.tile[i, j].wall = (byte) type;
                SquareWallFrame(i, j, true);
                if (!mute)
                {
                    Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
                }
            }
        }
    }

    public static void AddPlants()
    {
        for (int i = 0; i < Main.maxTilesX; i++)
        {
            for (int j = 1; j < Main.maxTilesY; j++)
            {
                if (Main.tile[i, j].type == 2 && Main.tile[i, j].nactive())
                {
                    if (!Main.tile[i, j - 1].active())
                    {
                        PlaceTile(i, j - 1, 3, true, false, -1, 0);
                    }
                }
                else if (Main.tile[i, j].type == 23 && Main.tile[i, j].nactive())
                {
                    if (!Main.tile[i, j - 1].active())
                    {
                        PlaceTile(i, j - 1, 24, true, false, -1, 0);
                    }
                }
                else if (Main.tile[i, j].type == 199 && Main.tile[i, j].nactive() && !Main.tile[i, j - 1].active())
                {
                    PlaceTile(i, j - 1, 201, true, false, -1, 0);
                }
            }
        }
    }

    public static void SpreadGrass(int i, int j, int dirt = 0, int grass = 2, bool repeat = true, byte color = 0)
    {
        try
        {
            if (InWorld(i, j, 1) && Main.tile[i, j].type == dirt && Main.tile[i, j].active() &&
                (!((double) j >= Main.worldSurface) || dirt != 0))
            {
                int num = i - 1;
                int num2 = i + 2;
                int num3 = j - 1;
                int num4 = j + 2;
                if (num < 0)
                {
                    num = 0;
                }

                if (num2 > Main.maxTilesX)
                {
                    num2 = Main.maxTilesX;
                }

                if (num3 < 0)
                {
                    num3 = 0;
                }

                if (num4 > Main.maxTilesY)
                {
                    num4 = Main.maxTilesY;
                }

                bool flag = true;
                for (int k = num; k < num2; k++)
                {
                    for (int l = num3; l < num4; l++)
                    {
                        if (!Main.tile[k, l].active() || !Main.tileSolid[Main.tile[k, l].type])
                        {
                            flag = false;
                        }

                        if (Main.tile[k, l].lava() && Main.tile[k, l].liquid > 0)
                        {
                            flag = true;
                            break;
                        }
                    }
                }

                if (!flag && TileID.Sets.CanBeClearedDuringGeneration[Main.tile[i, j].type] &&
                    (grass != 23 || Main.tile[i, j - 1].type != 27) && (grass != 199 || Main.tile[i, j - 1].type != 27))
                {
                    Main.tile[i, j].type = (ushort) grass;
                    Main.tile[i, j].color(color);
                    for (int m = num; m < num2; m++)
                    {
                        for (int n = num3; n < num4; n++)
                        {
                            if (Main.tile[m, n].active() && Main.tile[m, n].type == dirt)
                            {
                                try
                                {
                                    if (repeat && grassSpread < 1000)
                                    {
                                        grassSpread++;
                                        SpreadGrass(m, n, dirt, grass, true, 0);
                                        grassSpread--;
                                    }
                                }
                                catch
                                {
                                }
                            }
                        }
                    }
                }
            }
        }
        catch
        {
        }
    }

    public static void ChasmRunnerSideways(int i, int j, int direction, int steps)
    {
        float num = (float) steps;
        Vector2 value = default(Vector2);
        value.X = (float) i;
        value.Y = (float) j;
        Vector2 value2 = default(Vector2);
        value2.X = (float) genRand.Next(10, 21) * 0.1f * (float) direction;
        value2.Y = (float) genRand.Next(-10, 10) * 0.01f;
        double num2 = (double) (genRand.Next(5) + 7);
        while (num2 > 0.0)
        {
            if (num > 0f)
            {
                num2 += (double) genRand.Next(3);
                num2 -= (double) genRand.Next(3);
                if (num2 < 7.0)
                {
                    num2 = 7.0;
                }

                if (num2 > 20.0)
                {
                    num2 = 20.0;
                }

                if (num == 1f && num2 < 10.0)
                {
                    num2 = 10.0;
                }
            }
            else
            {
                num2 -= (double) genRand.Next(4);
            }

            if ((double) value.Y > Main.rockLayer && num > 0f)
            {
                num = 0f;
            }

            num -= 1f;
            int num3 = (int) ((double) value.X - num2 * 0.5);
            int num4 = (int) ((double) value.X + num2 * 0.5);
            int num5 = (int) ((double) value.Y - num2 * 0.5);
            int num6 = (int) ((double) value.Y + num2 * 0.5);
            if (num3 < 0)
            {
                num3 = 0;
            }

            if (num4 > Main.maxTilesX - 1)
            {
                num4 = Main.maxTilesX - 1;
            }

            if (num5 < 0)
            {
                num5 = 0;
            }

            if (num6 > Main.maxTilesY)
            {
                num6 = Main.maxTilesY;
            }

            for (int k = num3; k < num4; k++)
            {
                for (int l = num5; l < num6; l++)
                {
                    if ((double) (Math.Abs((float) k - value.X) + Math.Abs((float) l - value.Y)) <
                        num2 * 0.5 * (1.0 + (double) genRand.Next(-10, 11) * 0.015) && Main.tile[k, l].type != 31 &&
                        Main.tile[k, l].type != 22)
                    {
                        Main.tile[k, l].active(false);
                    }
                }
            }

            value += value2;
            value2.Y += (float) genRand.Next(-10, 10) * 0.1f;
            if (value.Y < (float) (j - 20))
            {
                value2.Y += (float) genRand.Next(20) * 0.01f;
            }

            if (value.Y > (float) (j + 20))
            {
                value2.Y -= (float) genRand.Next(20) * 0.01f;
            }

            if ((double) value2.Y < -0.5)
            {
                value2.Y = -0.5f;
            }

            if ((double) value2.Y > 0.5)
            {
                value2.Y = 0.5f;
            }

            value2.X += (float) genRand.Next(-10, 11) * 0.01f;
            switch (direction)
            {
                case -1:
                    if ((double) value2.X > -0.5)
                    {
                        value2.X = -0.5f;
                    }

                    if (value2.X < -2f)
                    {
                        value2.X = -2f;
                    }

                    break;
                case 1:
                    if ((double) value2.X < 0.5)
                    {
                        value2.X = 0.5f;
                    }

                    if (value2.X > 2f)
                    {
                        value2.X = 2f;
                    }

                    break;
            }

            num3 = (int) ((double) value.X - num2 * 1.1);
            num4 = (int) ((double) value.X + num2 * 1.1);
            num5 = (int) ((double) value.Y - num2 * 1.1);
            num6 = (int) ((double) value.Y + num2 * 1.1);
            if (num3 < 1)
            {
                num3 = 1;
            }

            if (num4 > Main.maxTilesX - 1)
            {
                num4 = Main.maxTilesX - 1;
            }

            if (num5 < 0)
            {
                num5 = 0;
            }

            if (num6 > Main.maxTilesY)
            {
                num6 = Main.maxTilesY;
            }

            for (int m = num3; m < num4; m++)
            {
                for (int n = num5; n < num6; n++)
                {
                    if ((double) (Math.Abs((float) m - value.X) + Math.Abs((float) n - value.Y)) <
                        num2 * 1.1 * (1.0 + (double) genRand.Next(-10, 11) * 0.015) && Main.tile[m, n].wall != 3)
                    {
                        if (Main.tile[m, n].type != 25 && n > j + genRand.Next(3, 20))
                        {
                            Main.tile[m, n].active(true);
                        }

                        Main.tile[m, n].active(true);
                        if (Main.tile[m, n].type != 31 && Main.tile[m, n].type != 22)
                        {
                            Main.tile[m, n].type = 25;
                        }

                        if (Main.tile[m, n].wall == 2)
                        {
                            Main.tile[m, n].wall = 0;
                        }
                    }
                }
            }

            for (int num7 = num3; num7 < num4; num7++)
            {
                for (int num8 = num5; num8 < num6; num8++)
                {
                    if ((double) (Math.Abs((float) num7 - value.X) + Math.Abs((float) num8 - value.Y)) <
                        num2 * 1.1 * (1.0 + (double) genRand.Next(-10, 11) * 0.015) && Main.tile[num7, num8].wall != 3)
                    {
                        if (Main.tile[num7, num8].type != 31 && Main.tile[num7, num8].type != 22)
                        {
                            Main.tile[num7, num8].type = 25;
                        }

                        Main.tile[num7, num8].active(true);
                        PlaceWall(num7, num8, 3, true);
                    }
                }
            }
        }

        if (genRand.Next(3) == 0)
        {
            int num9 = (int) value.X;
            int num10;
            for (num10 = (int) value.Y; !Main.tile[num9, num10].active(); num10++)
            {
            }

            TileRunner(num9, num10, (double) genRand.Next(2, 6), genRand.Next(3, 7), 22, false, 0f, 0f, false, true);
        }
    }

    public static void CrimStart(int i, int j)
    {
        int crimDir = 1;
        heartCount = 0;
        crimson = true;
        int k = j;
        if ((double) k > Main.worldSurface)
        {
            k = (int) Main.worldSurface;
        }

        for (; !SolidTile(i, k); k++)
        {
        }

        int num = k;
        Vector2 vector = new Vector2((float) i, (float) k);
        Vector2 value = new Vector2((float) genRand.Next(-20, 21) * 0.1f, (float) genRand.Next(20, 201) * 0.01f);
        if (value.X < 0f)
        {
            crimDir = -1;
        }

        float num2 = (float) genRand.Next(15, 26);
        bool flag = true;
        int num3 = 0;
        while (flag)
        {
            num2 += (float) genRand.Next(-50, 51) * 0.01f;
            if (num2 < 15f)
            {
                num2 = 15f;
            }

            if (num2 > 25f)
            {
                num2 = 25f;
            }

            for (int l = (int) (vector.X - num2 / 2f); (float) l < vector.X + num2 / 2f; l++)
            {
                for (int m = (int) (vector.Y - num2 / 2f); (float) m < vector.Y + num2 / 2f; m++)
                {
                    if (m > num)
                    {
                        if ((double) (Math.Abs((float) l - vector.X) + Math.Abs((float) m - vector.Y)) <
                            (double) num2 * 0.3)
                        {
                            Main.tile[l, m].active(false);
                            Main.tile[l, m].wall = 83;
                        }
                        else if ((double) (Math.Abs((float) l - vector.X) + Math.Abs((float) m - vector.Y)) <
                                 (double) num2 * 0.8 && Main.tile[l, m].wall != 83)
                        {
                            Main.tile[l, m].active(true);
                            Main.tile[l, m].type = 203;
                            if ((double) (Math.Abs((float) l - vector.X) + Math.Abs((float) m - vector.Y)) <
                                (double) num2 * 0.6)
                            {
                                Main.tile[l, m].wall = 83;
                            }
                        }
                    }
                    else if ((double) (Math.Abs((float) l - vector.X) + Math.Abs((float) m - vector.Y)) <
                             (double) num2 * 0.3 && Main.tile[l, m].active())
                    {
                        Main.tile[l, m].active(false);
                        Main.tile[l, m].wall = 83;
                    }
                }
            }

            if (vector.X > (float) (i + 50))
            {
                num3 = -100;
            }

            if (vector.X < (float) (i - 50))
            {
                num3 = 100;
            }

            if (num3 < 0)
            {
                value.X -= (float) genRand.Next(20, 51) * 0.01f;
            }
            else if (num3 > 0)
            {
                value.X += (float) genRand.Next(20, 51) * 0.01f;
            }
            else
            {
                value.X += (float) genRand.Next(-50, 51) * 0.01f;
            }

            value.Y += (float) genRand.Next(-50, 51) * 0.01f;
            if ((double) value.Y < 0.25)
            {
                value.Y = 0.25f;
            }

            if (value.Y > 2f)
            {
                value.Y = 2f;
            }

            if (value.X < -2f)
            {
                value.X = -2f;
            }

            if (value.X > 2f)
            {
                value.X = 2f;
            }

            vector += value;
            if ((double) vector.Y > Main.worldSurface + 100.0)
            {
                flag = false;
            }
        }

        num2 = (float) genRand.Next(40, 55);
        for (int n = 0; n < 50; n++)
        {
            int num4 = (int) vector.X + genRand.Next(-20, 21);
            int num5 = (int) vector.Y + genRand.Next(-20, 21);
            for (int num6 = (int) ((float) num4 - num2 / 2f); (float) num6 < (float) num4 + num2 / 2f; num6++)
            {
                for (int num7 = (int) ((float) num5 - num2 / 2f); (float) num7 < (float) num5 + num2 / 2f; num7++)
                {
                    float num8 = (float) Math.Abs(num6 - num4);
                    float num9 = (float) Math.Abs(num7 - num5);
                    float num10 = 1f + (float) genRand.Next(-20, 21) * 0.01f;
                    float num11 = 1f + (float) genRand.Next(-20, 21) * 0.01f;
                    num8 *= num10;
                    num9 *= num11;
                    double num12 = Math.Sqrt((double) (num8 * num8 + num9 * num9));
                    if (num12 < (double) num2 * 0.25)
                    {
                        Main.tile[num6, num7].active(false);
                        Main.tile[num6, num7].wall = 83;
                    }
                    else if (num12 < (double) num2 * 0.4 && Main.tile[num6, num7].wall != 83)
                    {
                        Main.tile[num6, num7].active(true);
                        Main.tile[num6, num7].type = 203;
                        if (num12 < (double) num2 * 0.35)
                        {
                            Main.tile[num6, num7].wall = 83;
                        }
                    }
                }
            }
        }

        int num13 = genRand.Next(5, 9);
        Vector2[] array = new Vector2[num13];
        for (int num14 = 0; num14 < num13; num14++)
        {
            int num15 = (int) vector.X;
            int num16 = (int) vector.Y;
            int num17 = 0;
            bool flag2 = true;
            Vector2 vector2 = new Vector2((float) genRand.Next(-20, 21) * 0.15f, (float) genRand.Next(0, 21) * 0.15f);
            while (flag2)
            {
                vector2 = new Vector2((float) genRand.Next(-20, 21) * 0.15f, (float) genRand.Next(0, 21) * 0.15f);
                while ((double) (Math.Abs(vector2.X) + Math.Abs(vector2.Y)) < 1.5)
                {
                    vector2 = new Vector2((float) genRand.Next(-20, 21) * 0.15f, (float) genRand.Next(0, 21) * 0.15f);
                }

                flag2 = false;
                for (int num18 = 0; num18 < num14; num18++)
                {
                    if ((double) value.X > (double) array[num18].X - 0.75 &&
                        (double) value.X < (double) array[num18].X + 0.75 &&
                        (double) value.Y > (double) array[num18].Y - 0.75 &&
                        (double) value.Y < (double) array[num18].Y + 0.75)
                    {
                        flag2 = true;
                        num17++;
                        break;
                    }
                }

                if (num17 > 10000)
                {
                    break;
                }
            }

            array[num14] = vector2;
            CrimVein(new Vector2((float) num15, (float) num16), vector2);
        }

        for (int num19 = 0; num19 < heartCount; num19++)
        {
            num2 = (float) genRand.Next(16, 21);
            int num20 = (int) heartPos[num19].X;
            int num21 = (int) heartPos[num19].Y;
            for (int num22 = (int) ((float) num20 - num2 / 2f); (float) num22 < (float) num20 + num2 / 2f; num22++)
            {
                for (int num23 = (int) ((float) num21 - num2 / 2f); (float) num23 < (float) num21 + num2 / 2f; num23++)
                {
                    float num24 = (float) Math.Abs(num22 - num20);
                    float num25 = (float) Math.Abs(num23 - num21);
                    double num26 = Math.Sqrt((double) (num24 * num24 + num25 * num25));
                    if (num26 < (double) num2 * 0.4)
                    {
                        Main.tile[num22, num23].active(true);
                        Main.tile[num22, num23].type = 203;
                        Main.tile[num22, num23].wall = 83;
                    }
                }
            }
        }

        for (int num27 = 0; num27 < heartCount; num27++)
        {
            num2 = (float) genRand.Next(10, 14);
            int num28 = (int) heartPos[num27].X;
            int num29 = (int) heartPos[num27].Y;
            for (int num30 = (int) ((float) num28 - num2 / 2f); (float) num30 < (float) num28 + num2 / 2f; num30++)
            {
                for (int num31 = (int) ((float) num29 - num2 / 2f); (float) num31 < (float) num29 + num2 / 2f; num31++)
                {
                    float num32 = (float) Math.Abs(num30 - num28);
                    float num33 = (float) Math.Abs(num31 - num29);
                    double num34 = Math.Sqrt((double) (num32 * num32 + num33 * num33));
                    if (num34 < (double) num2 * 0.3)
                    {
                        Main.tile[num30, num31].active(false);
                        Main.tile[num30, num31].wall = 83;
                    }
                }
            }
        }

        for (int num35 = 0; num35 < heartCount; num35++)
        {
            AddShadowOrb((int) heartPos[num35].X, (int) heartPos[num35].Y);
        }

        int num36 = Main.maxTilesX;
        int num37 = 0;
        vector.X = (float) i;
        vector.Y = (float) num;
        num2 = (float) genRand.Next(25, 35);
        float num38 = (float) genRand.Next(0, 6);
        for (int num39 = 0; num39 < 50; num39++)
        {
            if (num38 > 0f)
            {
                float num40 = (float) genRand.Next(10, 30) * 0.01f;
                num38 -= num40;
                vector.Y -= num40;
            }

            int num41 = (int) vector.X + genRand.Next(-2, 3);
            int num42 = (int) vector.Y + genRand.Next(-2, 3);
            for (int num43 = (int) ((float) num41 - num2 / 2f); (float) num43 < (float) num41 + num2 / 2f; num43++)
            {
                for (int num44 = (int) ((float) num42 - num2 / 2f); (float) num44 < (float) num42 + num2 / 2f; num44++)
                {
                    float num45 = (float) Math.Abs(num43 - num41);
                    float num46 = (float) Math.Abs(num44 - num42);
                    float num47 = 1f + (float) genRand.Next(-20, 21) * 0.005f;
                    float num48 = 1f + (float) genRand.Next(-20, 21) * 0.005f;
                    num45 *= num47;
                    num46 *= num48;
                    double num49 = Math.Sqrt((double) (num45 * num45 + num46 * num46));
                    if (num49 < (double) num2 * 0.2 * ((double) genRand.Next(90, 111) * 0.01))
                    {
                        Main.tile[num43, num44].active(false);
                        Main.tile[num43, num44].wall = 83;
                    }
                    else if (num49 < (double) num2 * 0.45)
                    {
                        if (num43 < num36)
                        {
                            num36 = num43;
                        }

                        if (num43 > num37)
                        {
                            num37 = num43;
                        }

                        if (Main.tile[num43, num44].wall != 83)
                        {
                            Main.tile[num43, num44].active(true);
                            Main.tile[num43, num44].type = 203;
                            if (num49 < (double) num2 * 0.35)
                            {
                                Main.tile[num43, num44].wall = 83;
                            }
                        }
                    }
                }
            }
        }

        for (int num50 = num36; num50 <= num37; num50++)
        {
            int num51;
            for (num51 = num;
                (Main.tile[num50, num51].type == 203 && Main.tile[num50, num51].active()) ||
                Main.tile[num50, num51].wall == 83;
                num51++)
            {
            }

            int num52 = genRand.Next(15, 20);
            for (; !Main.tile[num50, num51].active(); num51++)
            {
                if (num52 <= 0)
                {
                    break;
                }

                if (Main.tile[num50, num51].wall == 83)
                {
                    break;
                }

                num52--;
                Main.tile[num50, num51].type = 203;
                Main.tile[num50, num51].active(true);
            }
        }

        CrimEnt(vector, crimDir);
    }

    public static void CrimEnt(Vector2 position, int crimDir)
    {
        float num = 0f;
        float num2 = (float) genRand.Next(6, 11);
        bool flag = true;
        Vector2 value = new Vector2(2f, (float) genRand.Next(-20, 0) * 0.01f);
        value.X *= (float) (-crimDir);
        while (flag)
        {
            num += 1f;
            if (num >= 20f)
            {
                flag = false;
            }

            num2 += (float) genRand.Next(-10, 11) * 0.02f;
            if (num2 < 6f)
            {
                num2 = 6f;
            }

            if (num2 > 10f)
            {
                num2 = 10f;
            }

            for (int i = (int) (position.X - num2 / 2f); (float) i < position.X + num2 / 2f; i++)
            {
                for (int j = (int) (position.Y - num2 / 2f); (float) j < position.Y + num2 / 2f; j++)
                {
                    float num3 = Math.Abs((float) i - position.X);
                    float num4 = Math.Abs((float) j - position.Y);
                    double num5 = Math.Sqrt((double) (num3 * num3 + num4 * num4));
                    if (num5 < (double) num2 * 0.5 && Main.tile[i, j].active() && Main.tile[i, j].type == 203)
                    {
                        Main.tile[i, j].active(false);
                        flag = true;
                        num = 0f;
                    }
                }
            }

            position += value;
        }
    }

    public static void CrimVein(Vector2 position, Vector2 velocity)
    {
        float num = (float) genRand.Next(15, 26);
        bool flag = true;
        Vector2 vector = velocity;
        Vector2 vector2 = position;
        int num2 = genRand.Next(100, 150);
        if (velocity.Y < 0f)
        {
            num2 -= 25;
        }

        while (flag)
        {
            num += (float) genRand.Next(-50, 51) * 0.02f;
            if (num < 15f)
            {
                num = 15f;
            }

            if (num > 25f)
            {
                num = 25f;
            }

            for (int i = (int) (position.X - num / 2f); (float) i < position.X + num / 2f; i++)
            {
                for (int j = (int) (position.Y - num / 2f); (float) j < position.Y + num / 2f; j++)
                {
                    float num3 = Math.Abs((float) i - position.X);
                    float num4 = Math.Abs((float) j - position.Y);
                    double num5 = Math.Sqrt((double) (num3 * num3 + num4 * num4));
                    if (num5 < (double) num * 0.2)
                    {
                        Main.tile[i, j].active(false);
                        Main.tile[i, j].wall = 83;
                    }
                    else if (num5 < (double) num * 0.5 && Main.tile[i, j].wall != 83)
                    {
                        Main.tile[i, j].active(true);
                        Main.tile[i, j].type = 203;
                        if (num5 < (double) num * 0.4)
                        {
                            Main.tile[i, j].wall = 83;
                        }
                    }
                }
            }

            velocity.X += (float) genRand.Next(-50, 51) * 0.05f;
            velocity.Y += (float) genRand.Next(-50, 51) * 0.05f;
            if ((double) velocity.Y < (double) vector.Y - 0.75)
            {
                velocity.Y = vector.Y - 0.75f;
            }

            if ((double) velocity.Y > (double) vector.Y + 0.75)
            {
                velocity.Y = vector.Y + 0.75f;
            }

            if ((double) velocity.X < (double) vector.X - 0.75)
            {
                velocity.X = vector.X - 0.75f;
            }

            if ((double) velocity.X > (double) vector.X + 0.75)
            {
                velocity.X = vector.X + 0.75f;
            }

            position += velocity;
            if (Math.Abs(position.X - vector2.X) + Math.Abs(position.Y - vector2.Y) > (float) num2)
            {
                flag = false;
            }
        }

        heartPos[heartCount] = position;
        heartCount++;
    }

    public static void ChasmRunner(int i, int j, int steps, bool makeOrb = false)
    {
        bool flag = false;
        bool flag2 = false;
        bool flag3 = false;
        if (!makeOrb)
        {
            flag2 = true;
        }

        float num = (float) steps;
        Vector2 value = default(Vector2);
        value.X = (float) i;
        value.Y = (float) j;
        Vector2 value2 = default(Vector2);
        value2.X = (float) genRand.Next(-10, 11) * 0.1f;
        value2.Y = (float) genRand.Next(11) * 0.2f + 0.5f;
        int num2 = 5;
        double num3 = (double) (genRand.Next(5) + 7);
        while (num3 > 0.0)
        {
            if (num > 0f)
            {
                num3 += (double) genRand.Next(3);
                num3 -= (double) genRand.Next(3);
                if (num3 < 7.0)
                {
                    num3 = 7.0;
                }

                if (num3 > 20.0)
                {
                    num3 = 20.0;
                }

                if (num == 1f && num3 < 10.0)
                {
                    num3 = 10.0;
                }
            }
            else if ((double) value.Y > Main.worldSurface + 45.0)
            {
                num3 -= (double) genRand.Next(4);
            }

            if ((double) value.Y > Main.rockLayer && num > 0f)
            {
                num = 0f;
            }

            num -= 1f;
            if (!flag && (double) value.Y > Main.worldSurface + 20.0)
            {
                flag = true;
                ChasmRunnerSideways((int) value.X, (int) value.Y, -1, genRand.Next(20, 40));
                ChasmRunnerSideways((int) value.X, (int) value.Y, 1, genRand.Next(20, 40));
            }

            int num4;
            int num5;
            int num6;
            int num7;
            if (num > (float) num2)
            {
                num4 = (int) ((double) value.X - num3 * 0.5);
                num5 = (int) ((double) value.X + num3 * 0.5);
                num6 = (int) ((double) value.Y - num3 * 0.5);
                num7 = (int) ((double) value.Y + num3 * 0.5);
                if (num4 < 0)
                {
                    num4 = 0;
                }

                if (num5 > Main.maxTilesX - 1)
                {
                    num5 = Main.maxTilesX - 1;
                }

                if (num6 < 0)
                {
                    num6 = 0;
                }

                if (num7 > Main.maxTilesY)
                {
                    num7 = Main.maxTilesY;
                }

                for (int k = num4; k < num5; k++)
                {
                    for (int l = num6; l < num7; l++)
                    {
                        if ((double) (Math.Abs((float) k - value.X) + Math.Abs((float) l - value.Y)) <
                            num3 * 0.5 * (1.0 + (double) genRand.Next(-10, 11) * 0.015) && Main.tile[k, l].type != 31 &&
                            Main.tile[k, l].type != 22)
                        {
                            Main.tile[k, l].active(false);
                        }
                    }
                }
            }

            if (num <= 2f && (double) value.Y < Main.worldSurface + 45.0)
            {
                num = 2f;
            }

            if (num <= 0f)
            {
                if (!flag2)
                {
                    flag2 = true;
                    AddShadowOrb((int) value.X, (int) value.Y);
                }
                else if (!flag3)
                {
                    flag3 = false;
                    bool flag4 = false;
                    int num8 = 0;
                    while (!flag4)
                    {
                        int num9 = genRand.Next((int) value.X - 25, (int) value.X + 25);
                        int num10 = genRand.Next((int) value.Y - 50, (int) value.Y);
                        if (num9 < 5)
                        {
                            num9 = 5;
                        }

                        if (num9 > Main.maxTilesX - 5)
                        {
                            num9 = Main.maxTilesX - 5;
                        }

                        if (num10 < 5)
                        {
                            num10 = 5;
                        }

                        if (num10 > Main.maxTilesY - 5)
                        {
                            num10 = Main.maxTilesY - 5;
                        }

                        if ((double) num10 > Main.worldSurface)
                        {
                            Place3x2(num9, num10, 26, 0);
                            if (Main.tile[num9, num10].type == 26)
                            {
                                flag4 = true;
                            }
                            else
                            {
                                num8++;
                                if (num8 >= 10000)
                                {
                                    flag4 = true;
                                }
                            }
                        }
                        else
                        {
                            flag4 = true;
                        }
                    }
                }
            }

            value += value2;
            value2.X += (float) genRand.Next(-10, 11) * 0.01f;
            if ((double) value2.X > 0.3)
            {
                value2.X = 0.3f;
            }

            if ((double) value2.X < -0.3)
            {
                value2.X = -0.3f;
            }

            num4 = (int) ((double) value.X - num3 * 1.1);
            num5 = (int) ((double) value.X + num3 * 1.1);
            num6 = (int) ((double) value.Y - num3 * 1.1);
            num7 = (int) ((double) value.Y + num3 * 1.1);
            if (num4 < 1)
            {
                num4 = 1;
            }

            if (num5 > Main.maxTilesX - 1)
            {
                num5 = Main.maxTilesX - 1;
            }

            if (num6 < 0)
            {
                num6 = 0;
            }

            if (num7 > Main.maxTilesY)
            {
                num7 = Main.maxTilesY;
            }

            for (int m = num4; m < num5; m++)
            {
                for (int n = num6; n < num7; n++)
                {
                    if ((double) (Math.Abs((float) m - value.X) + Math.Abs((float) n - value.Y)) <
                        num3 * 1.1 * (1.0 + (double) genRand.Next(-10, 11) * 0.015))
                    {
                        if (Main.tile[m, n].type != 25 && n > j + genRand.Next(3, 20))
                        {
                            Main.tile[m, n].active(true);
                        }

                        if (steps <= num2)
                        {
                            Main.tile[m, n].active(true);
                        }

                        if (Main.tile[m, n].type != 31)
                        {
                            Main.tile[m, n].type = 25;
                        }
                    }
                }
            }

            for (int num11 = num4; num11 < num5; num11++)
            {
                for (int num12 = num6; num12 < num7; num12++)
                {
                    if ((double) (Math.Abs((float) num11 - value.X) + Math.Abs((float) num12 - value.Y)) <
                        num3 * 1.1 * (1.0 + (double) genRand.Next(-10, 11) * 0.015))
                    {
                        if (Main.tile[num11, num12].type != 31)
                        {
                            Main.tile[num11, num12].type = 25;
                        }

                        if (steps <= num2)
                        {
                            Main.tile[num11, num12].active(true);
                        }

                        if (num12 > j + genRand.Next(3, 20))
                        {
                            Main.tile[num11, num12].wall = 3;
                        }
                    }
                }
            }
        }
    }

    public static void JungleRunner(int i, int j)
    {
        double num = (double) genRand.Next(5, 11);
        Vector2 value = default(Vector2);
        value.X = (float) i;
        value.Y = (float) j;
        Vector2 value2 = default(Vector2);
        value2.X = (float) genRand.Next(-10, 11) * 0.1f;
        value2.Y = (float) genRand.Next(10, 20) * 0.1f;
        int num2 = 0;
        bool flag = true;
        while (flag)
        {
            if ((double) value.Y < Main.worldSurface)
            {
                int value3 = (int) value.X;
                int value4 = (int) value.Y;
                value3 = Utils.Clamp(value3, 10, Main.maxTilesX - 10);
                value4 = Utils.Clamp(value4, 10, Main.maxTilesY - 10);
                if (value4 < 5)
                {
                    value4 = 5;
                }

                if (Main.tile[value3, value4].wall == 0 && !Main.tile[value3, value4].active() &&
                    Main.tile[value3, value4 - 3].wall == 0 && !Main.tile[value3, value4 - 3].active() &&
                    Main.tile[value3, value4 - 1].wall == 0 && !Main.tile[value3, value4 - 1].active() &&
                    Main.tile[value3, value4 - 4].wall == 0 && !Main.tile[value3, value4 - 4].active() &&
                    Main.tile[value3, value4 - 2].wall == 0 && !Main.tile[value3, value4 - 2].active() &&
                    Main.tile[value3, value4 - 5].wall == 0 && !Main.tile[value3, value4 - 5].active())
                {
                    flag = false;
                }
            }

            JungleX = (int) value.X;
            num += (double) ((float) genRand.Next(-20, 21) * 0.1f);
            if (num < 5.0)
            {
                num = 5.0;
            }

            if (num > 10.0)
            {
                num = 10.0;
            }

            int value5 = (int) ((double) value.X - num * 0.5);
            int value6 = (int) ((double) value.X + num * 0.5);
            int value7 = (int) ((double) value.Y - num * 0.5);
            int value8 = (int) ((double) value.Y + num * 0.5);
            value5 = Utils.Clamp(value5, 10, Main.maxTilesX - 10);
            value6 = Utils.Clamp(value6, 10, Main.maxTilesX - 10);
            value7 = Utils.Clamp(value7, 10, Main.maxTilesY - 10);
            value8 = Utils.Clamp(value8, 10, Main.maxTilesY - 10);
            for (int k = value5; k < value6; k++)
            {
                for (int l = value7; l < value8; l++)
                {
                    if ((double) (Math.Abs((float) k - value.X) + Math.Abs((float) l - value.Y)) <
                        num * 0.5 * (1.0 + (double) genRand.Next(-10, 11) * 0.015))
                    {
                        KillTile(k, l, false, false, false);
                    }
                }
            }

            num2++;
            if (num2 > 10 && genRand.Next(50) < num2)
            {
                num2 = 0;
                int num3 = -2;
                if (genRand.Next(2) == 0)
                {
                    num3 = 2;
                }

                TileRunner((int) value.X, (int) value.Y, (double) genRand.Next(3, 20), genRand.Next(10, 100), -1, false,
                    (float) num3, 0f, false, true);
            }

            value += value2;
            value2.Y += (float) genRand.Next(-10, 11) * 0.01f;
            if (value2.Y > 0f)
            {
                value2.Y = 0f;
            }

            if (value2.Y < -2f)
            {
                value2.Y = -2f;
            }

            value2.X += (float) genRand.Next(-10, 11) * 0.1f;
            if (value.X < (float) (i - 200))
            {
                value2.X += (float) genRand.Next(5, 21) * 0.1f;
            }

            if (value.X > (float) (i + 200))
            {
                value2.X -= (float) genRand.Next(5, 21) * 0.1f;
            }

            if ((double) value2.X > 1.5)
            {
                value2.X = 1.5f;
            }

            if ((double) value2.X < -1.5)
            {
                value2.X = -1.5f;
            }
        }
    }

    public static void GERunner(int i, int j, float speedX = 0f, float speedY = 0f, bool good = true)
    {
        int num = genRand.Next(200, 250);
        float num2 = (float) (Main.maxTilesX / 4200);
        num = (int) ((float) num * num2);
        double num3 = (double) num;
        Vector2 value = default(Vector2);
        value.X = (float) i;
        value.Y = (float) j;
        Vector2 value2 = default(Vector2);
        value2.X = (float) genRand.Next(-10, 11) * 0.1f;
        value2.Y = (float) genRand.Next(-10, 11) * 0.1f;
        if (speedX != 0f || speedY != 0f)
        {
            value2.X = speedX;
            value2.Y = speedY;
        }

        bool flag = true;
        while (flag)
        {
            int num4 = (int) ((double) value.X - num3 * 0.5);
            int num5 = (int) ((double) value.X + num3 * 0.5);
            int num6 = (int) ((double) value.Y - num3 * 0.5);
            int num7 = (int) ((double) value.Y + num3 * 0.5);
            if (num4 < 0)
            {
                num4 = 0;
            }

            if (num5 > Main.maxTilesX)
            {
                num5 = Main.maxTilesX;
            }

            if (num6 < 0)
            {
                num6 = 0;
            }

            if (num7 > Main.maxTilesY)
            {
                num7 = Main.maxTilesY;
            }

            for (int k = num4; k < num5; k++)
            {
                for (int l = num6; l < num7; l++)
                {
                    if ((double) (Math.Abs((float) k - value.X) + Math.Abs((float) l - value.Y)) <
                        (double) num * 0.5 * (1.0 + (double) genRand.Next(-10, 11) * 0.015))
                    {
                        if (good)
                        {
                            if (Main.tile[k, l].wall == 63 || Main.tile[k, l].wall == 65 ||
                                Main.tile[k, l].wall == 66 || Main.tile[k, l].wall == 68 ||
                                Main.tile[k, l].wall == 69 || Main.tile[k, l].wall == 81)
                            {
                                Main.tile[k, l].wall = 70;
                            }
                            else if (Main.tile[k, l].wall == 216)
                            {
                                Main.tile[k, l].wall = 219;
                            }
                            else if (Main.tile[k, l].wall == 187)
                            {
                                Main.tile[k, l].wall = 222;
                            }

                            if (Main.tile[k, l].wall == 3 || Main.tile[k, l].wall == 83)
                            {
                                Main.tile[k, l].wall = 28;
                            }

                            if (Main.tile[k, l].type == 2)
                            {
                                Main.tile[k, l].type = 109;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 1)
                            {
                                Main.tile[k, l].type = 117;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 53 || Main.tile[k, l].type == 123)
                            {
                                Main.tile[k, l].type = 116;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 23 || Main.tile[k, l].type == 199)
                            {
                                Main.tile[k, l].type = 109;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 25 || Main.tile[k, l].type == 203)
                            {
                                Main.tile[k, l].type = 117;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 112 || Main.tile[k, l].type == 234)
                            {
                                Main.tile[k, l].type = 116;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 161 || Main.tile[k, l].type == 163 ||
                                     Main.tile[k, l].type == 200)
                            {
                                Main.tile[k, l].type = 164;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 396)
                            {
                                Main.tile[k, l].type = 403;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 397)
                            {
                                Main.tile[k, l].type = 402;
                                SquareTileFrame(k, l, true);
                            }
                        }
                        else if (crimson)
                        {
                            if (Main.tile[k, l].wall == 63 || Main.tile[k, l].wall == 65 ||
                                Main.tile[k, l].wall == 66 || Main.tile[k, l].wall == 68)
                            {
                                Main.tile[k, l].wall = 81;
                            }
                            else if (Main.tile[k, l].wall == 216)
                            {
                                Main.tile[k, l].wall = 218;
                            }
                            else if (Main.tile[k, l].wall == 187)
                            {
                                Main.tile[k, l].wall = 221;
                            }

                            if (Main.tile[k, l].type == 2)
                            {
                                Main.tile[k, l].type = 199;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 1)
                            {
                                Main.tile[k, l].type = 203;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 53 || Main.tile[k, l].type == 123)
                            {
                                Main.tile[k, l].type = 234;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 109)
                            {
                                Main.tile[k, l].type = 199;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 117)
                            {
                                Main.tile[k, l].type = 203;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 116)
                            {
                                Main.tile[k, l].type = 234;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 161 || Main.tile[k, l].type == 164)
                            {
                                Main.tile[k, l].type = 200;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 396)
                            {
                                Main.tile[k, l].type = 401;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 397)
                            {
                                Main.tile[k, l].type = 399;
                                SquareTileFrame(k, l, true);
                            }
                        }
                        else
                        {
                            if (Main.tile[k, l].wall == 63 || Main.tile[k, l].wall == 65 ||
                                Main.tile[k, l].wall == 66 || Main.tile[k, l].wall == 68)
                            {
                                Main.tile[k, l].wall = 69;
                            }
                            else if (Main.tile[k, l].wall == 216)
                            {
                                Main.tile[k, l].wall = 217;
                            }
                            else if (Main.tile[k, l].wall == 187)
                            {
                                Main.tile[k, l].wall = 220;
                            }

                            if (Main.tile[k, l].type == 2)
                            {
                                Main.tile[k, l].type = 23;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 1)
                            {
                                Main.tile[k, l].type = 25;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 53 || Main.tile[k, l].type == 123)
                            {
                                Main.tile[k, l].type = 112;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 109)
                            {
                                Main.tile[k, l].type = 23;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 117)
                            {
                                Main.tile[k, l].type = 25;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 116)
                            {
                                Main.tile[k, l].type = 112;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 161 || Main.tile[k, l].type == 164)
                            {
                                Main.tile[k, l].type = 163;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 396)
                            {
                                Main.tile[k, l].type = 400;
                                SquareTileFrame(k, l, true);
                            }
                            else if (Main.tile[k, l].type == 397)
                            {
                                Main.tile[k, l].type = 398;
                                SquareTileFrame(k, l, true);
                            }
                        }
                    }
                }
            }

            value += value2;
            value2.X += (float) genRand.Next(-10, 11) * 0.05f;
            if (value2.X > speedX + 1f)
            {
                value2.X = speedX + 1f;
            }

            if (value2.X < speedX - 1f)
            {
                value2.X = speedX - 1f;
            }

            if (value.X < (float) (-num) || value.Y < (float) (-num) || value.X > (float) (Main.maxTilesX + num) ||
                value.Y > (float) (Main.maxTilesX + num))
            {
                flag = false;
            }
        }
    }

    public static void TileRunner(int i, int j, double strength, int steps, int type, bool addTile = false,
        float speedX = 0f, float speedY = 0f, bool noYChange = false, bool overRide = true)
    {
        double num = strength;
        float num2 = (float) steps;
        Vector2 value = default(Vector2);
        value.X = (float) i;
        value.Y = (float) j;
        Vector2 value2 = default(Vector2);
        value2.X = (float) genRand.Next(-10, 11) * 0.1f;
        value2.Y = (float) genRand.Next(-10, 11) * 0.1f;
        if (speedX != 0f || speedY != 0f)
        {
            value2.X = speedX;
            value2.Y = speedY;
        }

        bool flag = type == 368;
        bool flag2 = type == 367;
        while (num > 0.0 && num2 > 0f)
        {
            if (value.Y < 0f && num2 > 0f && type == 59)
            {
                num2 = 0f;
            }

            num = strength * (double) (num2 / (float) steps);
            num2 -= 1f;
            int num3 = (int) ((double) value.X - num * 0.5);
            int num4 = (int) ((double) value.X + num * 0.5);
            int num5 = (int) ((double) value.Y - num * 0.5);
            int num6 = (int) ((double) value.Y + num * 0.5);
            if (num3 < 1)
            {
                num3 = 1;
            }

            if (num4 > Main.maxTilesX - 1)
            {
                num4 = Main.maxTilesX - 1;
            }

            if (num5 < 1)
            {
                num5 = 1;
            }

            if (num6 > Main.maxTilesY - 1)
            {
                num6 = Main.maxTilesY - 1;
            }

            for (int k = num3; k < num4; k++)
            {
                for (int l = num5; l < num6; l++)
                {
                    if ((double) (Math.Abs((float) k - value.X) + Math.Abs((float) l - value.Y)) <
                        strength * 0.5 * (1.0 + (double) genRand.Next(-10, 11) * 0.015))
                    {
                        if (mudWall && (double) l > Main.worldSurface && Main.tile[k, l - 1].wall != 2 &&
                            l < Main.maxTilesY - 210 - genRand.Next(3))
                        {
                            if (l > lavaLine - genRand.Next(0, 4) - 50)
                            {
                                if (Main.tile[k, l - 1].wall != 64 && Main.tile[k, l + 1].wall != 64 &&
                                    Main.tile[k - 1, l].wall != 64 && Main.tile[k, l + 1].wall != 64)
                                {
                                    PlaceWall(k, l, 15, true);
                                }
                            }
                            else if (Main.tile[k, l - 1].wall != 15 && Main.tile[k, l + 1].wall != 15 &&
                                     Main.tile[k - 1, l].wall != 15 && Main.tile[k, l + 1].wall != 15)
                            {
                                PlaceWall(k, l, 64, true);
                            }
                        }

                        if (type < 0)
                        {
                            if (type == -2 && Main.tile[k, l].active() && (l < waterLine || l > lavaLine))
                            {
                                Main.tile[k, l].liquid = byte.MaxValue;
                                if (l > lavaLine)
                                {
                                    Main.tile[k, l].lava(true);
                                }
                            }

                            Main.tile[k, l].active(false);
                        }
                        else
                        {
                            if (flag && (double) (Math.Abs((float) k - value.X) + Math.Abs((float) l - value.Y)) <
                                strength * 0.3 * (1.0 + (double) genRand.Next(-10, 11) * 0.01))
                            {
                                PlaceWall(k, l, 180, true);
                            }

                            if (flag2 && (double) (Math.Abs((float) k - value.X) + Math.Abs((float) l - value.Y)) <
                                strength * 0.3 * (1.0 + (double) genRand.Next(-10, 11) * 0.01))
                            {
                                PlaceWall(k, l, 178, true);
                            }

                            if (overRide || !Main.tile[k, l].active())
                            {
                                Tile tile = Main.tile[k, l];
                                bool flag3 = false;
                                flag3 = (Main.tileStone[type] && tile.type != 1);
                                if (!TileID.Sets.CanBeClearedDuringGeneration[tile.type])
                                {
                                    flag3 = true;
                                }

                                switch (tile.type)
                                {
                                    case 53:
                                        if (type == 40)
                                        {
                                            flag3 = true;
                                        }

                                        if ((double) l < Main.worldSurface && type != 59)
                                        {
                                            flag3 = true;
                                        }

                                        break;
                                    case 45:
                                    case 147:
                                    case 189:
                                    case 190:
                                    case 196:
                                        flag3 = true;
                                        break;
                                    case 396:
                                    case 397:
                                        flag3 = !TileID.Sets.Ore[type];
                                        break;
                                    case 1:
                                        if (type == 59 &&
                                            (double) l < Main.worldSurface + (double) genRand.Next(-50, 50))
                                        {
                                            flag3 = true;
                                        }

                                        break;
                                    case 367:
                                    case 368:
                                        if (type == 59)
                                        {
                                            flag3 = true;
                                        }

                                        break;
                                }

                                if (!flag3)
                                {
                                    tile.type = (ushort) type;
                                }
                            }

                            if (addTile)
                            {
                                Main.tile[k, l].active(true);
                                Main.tile[k, l].liquid = 0;
                                Main.tile[k, l].lava(false);
                            }

                            if (noYChange && (double) l < Main.worldSurface && type != 59)
                            {
                                Main.tile[k, l].wall = 2;
                            }

                            if (type == 59 && l > waterLine && Main.tile[k, l].liquid > 0)
                            {
                                Main.tile[k, l].lava(false);
                                Main.tile[k, l].liquid = 0;
                            }
                        }
                    }
                }
            }

            value += value2;
            if (num > 50.0)
            {
                value += value2;
                num2 -= 1f;
                value2.Y += (float) genRand.Next(-10, 11) * 0.05f;
                value2.X += (float) genRand.Next(-10, 11) * 0.05f;
                if (num > 100.0)
                {
                    value += value2;
                    num2 -= 1f;
                    value2.Y += (float) genRand.Next(-10, 11) * 0.05f;
                    value2.X += (float) genRand.Next(-10, 11) * 0.05f;
                    if (num > 150.0)
                    {
                        value += value2;
                        num2 -= 1f;
                        value2.Y += (float) genRand.Next(-10, 11) * 0.05f;
                        value2.X += (float) genRand.Next(-10, 11) * 0.05f;
                        if (num > 200.0)
                        {
                            value += value2;
                            num2 -= 1f;
                            value2.Y += (float) genRand.Next(-10, 11) * 0.05f;
                            value2.X += (float) genRand.Next(-10, 11) * 0.05f;
                            if (num > 250.0)
                            {
                                value += value2;
                                num2 -= 1f;
                                value2.Y += (float) genRand.Next(-10, 11) * 0.05f;
                                value2.X += (float) genRand.Next(-10, 11) * 0.05f;
                                if (num > 300.0)
                                {
                                    value += value2;
                                    num2 -= 1f;
                                    value2.Y += (float) genRand.Next(-10, 11) * 0.05f;
                                    value2.X += (float) genRand.Next(-10, 11) * 0.05f;
                                    if (num > 400.0)
                                    {
                                        value += value2;
                                        num2 -= 1f;
                                        value2.Y += (float) genRand.Next(-10, 11) * 0.05f;
                                        value2.X += (float) genRand.Next(-10, 11) * 0.05f;
                                        if (num > 500.0)
                                        {
                                            value += value2;
                                            num2 -= 1f;
                                            value2.Y += (float) genRand.Next(-10, 11) * 0.05f;
                                            value2.X += (float) genRand.Next(-10, 11) * 0.05f;
                                            if (num > 600.0)
                                            {
                                                value += value2;
                                                num2 -= 1f;
                                                value2.Y += (float) genRand.Next(-10, 11) * 0.05f;
                                                value2.X += (float) genRand.Next(-10, 11) * 0.05f;
                                                if (num > 700.0)
                                                {
                                                    value += value2;
                                                    num2 -= 1f;
                                                    value2.Y += (float) genRand.Next(-10, 11) * 0.05f;
                                                    value2.X += (float) genRand.Next(-10, 11) * 0.05f;
                                                    if (num > 800.0)
                                                    {
                                                        value += value2;
                                                        num2 -= 1f;
                                                        value2.Y += (float) genRand.Next(-10, 11) * 0.05f;
                                                        value2.X += (float) genRand.Next(-10, 11) * 0.05f;
                                                        if (num > 900.0)
                                                        {
                                                            value += value2;
                                                            num2 -= 1f;
                                                            value2.Y += (float) genRand.Next(-10, 11) * 0.05f;
                                                            value2.X += (float) genRand.Next(-10, 11) * 0.05f;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            value2.X += (float) genRand.Next(-10, 11) * 0.05f;
            if (value2.X > 1f)
            {
                value2.X = 1f;
            }

            if (value2.X < -1f)
            {
                value2.X = -1f;
            }

            if (!noYChange)
            {
                value2.Y += (float) genRand.Next(-10, 11) * 0.05f;
                if (value2.Y > 1f)
                {
                    value2.Y = 1f;
                }

                if (value2.Y < -1f)
                {
                    value2.Y = -1f;
                }
            }
            else if (type != 59 && num < 3.0)
            {
                if (value2.Y > 1f)
                {
                    value2.Y = 1f;
                }

                if (value2.Y < -1f)
                {
                    value2.Y = -1f;
                }
            }

            if (type == 59 && !noYChange)
            {
                if ((double) value2.Y > 0.5)
                {
                    value2.Y = 0.5f;
                }

                if ((double) value2.Y < -0.5)
                {
                    value2.Y = -0.5f;
                }

                if ((double) value.Y < Main.rockLayer + 100.0)
                {
                    value2.Y = 1f;
                }

                if (value.Y > (float) (Main.maxTilesY - 300))
                {
                    value2.Y = -1f;
                }
            }
        }
    }

    public static void DirtyRockRunner(int i, int j)
    {
        double num = (double) genRand.Next(2, 6);
        float num2 = (float) genRand.Next(5, 50);
        float num3 = num2;
        Vector2 value = default(Vector2);
        value.X = (float) i;
        value.Y = (float) j;
        Vector2 value2 = default(Vector2);
        value2.X = (float) genRand.Next(-10, 11) * 0.1f;
        value2.Y = (float) genRand.Next(-10, 11) * 0.1f;
        while (num > 0.0 && num3 > 0f)
        {
            double num4 = num * (double) (num3 / num2);
            num3 -= 1f;
            int num5 = (int) ((double) value.X - num4 * 0.5);
            int num6 = (int) ((double) value.X + num4 * 0.5);
            int num7 = (int) ((double) value.Y - num4 * 0.5);
            int num8 = (int) ((double) value.Y + num4 * 0.5);
            if (num5 < 0)
            {
                num5 = 0;
            }

            if (num6 > Main.maxTilesX)
            {
                num6 = Main.maxTilesX;
            }

            if (num7 < 0)
            {
                num7 = 0;
            }

            if (num8 > Main.maxTilesY)
            {
                num8 = Main.maxTilesY;
            }

            for (int k = num5; k < num6; k++)
            {
                for (int l = num7; l < num8; l++)
                {
                    if ((double) (Math.Abs((float) k - value.X) + Math.Abs((float) l - value.Y)) <
                        num * 0.5 * (1.0 + (double) genRand.Next(-10, 11) * 0.015) && Main.tile[k, l].wall == 2)
                    {
                        Main.tile[k, l].wall = 59;
                    }
                }
            }

            value += value2;
            value2.X += (float) genRand.Next(-10, 11) * 0.05f;
            if (value2.X > 1f)
            {
                value2.X = 1f;
            }

            if (value2.X < -1f)
            {
                value2.X = -1f;
            }

            value2.Y += (float) genRand.Next(-10, 11) * 0.05f;
            if (value2.Y > 1f)
            {
                value2.Y = 1f;
            }

            if (value2.Y < -1f)
            {
                value2.Y = -1f;
            }
        }
    }

    public static void MudWallRunner(int i, int j)
    {
        double num = (double) genRand.Next(8, 21);
        float num2 = (float) genRand.Next(8, 33);
        float num3 = num2;
        Vector2 value = default(Vector2);
        value.X = (float) i;
        value.Y = (float) j;
        Vector2 value2 = default(Vector2);
        value2.X = (float) genRand.Next(-10, 11) * 0.1f;
        value2.Y = (float) genRand.Next(-10, 11) * 0.1f;
        while (num > 0.0 && num3 > 0f)
        {
            double num4 = num * (double) (num3 / num2);
            num3 -= 1f;
            int num5 = (int) ((double) value.X - num4 * 0.5);
            int num6 = (int) ((double) value.X + num4 * 0.5);
            int num7 = (int) ((double) value.Y - num4 * 0.5);
            int num8 = (int) ((double) value.Y + num4 * 0.5);
            if (num5 < 0)
            {
                num5 = 0;
            }

            if (num6 > Main.maxTilesX)
            {
                num6 = Main.maxTilesX;
            }

            if (num7 < 0)
            {
                num7 = 0;
            }

            if (num8 > Main.maxTilesY)
            {
                num8 = Main.maxTilesY;
            }

            for (int k = num5; k < num6; k++)
            {
                for (int l = num7; l < num8; l++)
                {
                    if ((double) (Math.Abs((float) k - value.X) + Math.Abs((float) l - value.Y)) <
                        num * 0.5 * (1.0 + (double) genRand.Next(-10, 11) * 0.015) && (double) l > Main.worldSurface)
                    {
                        Main.tile[k, l].wall = 0;
                    }
                }
            }

            value += value2;
            value2.X += (float) genRand.Next(-10, 11) * 0.05f;
            if (value2.X > 1f)
            {
                value2.X = 1f;
            }

            if (value2.X < -1f)
            {
                value2.X = -1f;
            }

            value2.Y += (float) genRand.Next(-10, 11) * 0.05f;
            if (value2.Y > 1f)
            {
                value2.Y = 1f;
            }

            if (value2.Y < -1f)
            {
                value2.Y = -1f;
            }
        }
    }

    public static void CloudIsland(int i, int j)
    {
        double num = (double) genRand.Next(100, 150);
        double num2 = num;
        float num3 = (float) genRand.Next(20, 30);
        int num4 = i;
        int num5 = i;
        int num6 = i;
        int num7 = j;
        Vector2 value = default(Vector2);
        value.X = (float) i;
        value.Y = (float) j;
        Vector2 value2 = default(Vector2);
        value2.X = (float) genRand.Next(-20, 21) * 0.2f;
        while (value2.X > -2f && value2.X < 2f)
        {
            value2.X = (float) genRand.Next(-20, 21) * 0.2f;
        }

        value2.Y = (float) genRand.Next(-20, -10) * 0.02f;
        while (num > 0.0 && num3 > 0f)
        {
            num -= (double) genRand.Next(4);
            num3 -= 1f;
            int num8 = (int) ((double) value.X - num * 0.5);
            int num9 = (int) ((double) value.X + num * 0.5);
            int num10 = (int) ((double) value.Y - num * 0.5);
            int num11 = (int) ((double) value.Y + num * 0.5);
            if (num8 < 0)
            {
                num8 = 0;
            }

            if (num9 > Main.maxTilesX)
            {
                num9 = Main.maxTilesX;
            }

            if (num10 < 0)
            {
                num10 = 0;
            }

            if (num11 > Main.maxTilesY)
            {
                num11 = Main.maxTilesY;
            }

            num2 = num * (double) genRand.Next(80, 120) * 0.01;
            float num12 = value.Y + 1f;
            for (int k = num8; k < num9; k++)
            {
                if (genRand.Next(2) == 0)
                {
                    num12 += (float) genRand.Next(-1, 2);
                }

                if (num12 < value.Y)
                {
                    num12 = value.Y;
                }

                if (num12 > value.Y + 2f)
                {
                    num12 = value.Y + 2f;
                }

                for (int l = num10; l < num11; l++)
                {
                    if ((float) l > num12)
                    {
                        float num13 = Math.Abs((float) k - value.X);
                        float num14 = Math.Abs((float) l - value.Y) * 3f;
                        double num15 = Math.Sqrt((double) (num13 * num13 + num14 * num14));
                        if (num15 < num2 * 0.4)
                        {
                            if (k < num4)
                            {
                                num4 = k;
                            }

                            if (k > num5)
                            {
                                num5 = k;
                            }

                            if (l < num6)
                            {
                                num6 = l;
                            }

                            if (l > num7)
                            {
                                num7 = l;
                            }

                            Main.tile[k, l].active(true);
                            Main.tile[k, l].type = 189;
                            SquareTileFrame(k, l, true);
                        }
                    }
                }
            }

            value += value2;
            value2.X += (float) genRand.Next(-20, 21) * 0.05f;
            if (value2.X > 1f)
            {
                value2.X = 1f;
            }

            if (value2.X < -1f)
            {
                value2.X = -1f;
            }

            if ((double) value2.Y > 0.2)
            {
                value2.Y = -0.2f;
            }

            if ((double) value2.Y < -0.2)
            {
                value2.Y = -0.2f;
            }
        }

        int num16 = num4;
        int num18;
        for (num16 += genRand.Next(5); num16 < num5; num16 += genRand.Next(num18, (int) ((double) num18 * 1.5)))
        {
            int num17 = num7;
            while (!Main.tile[num16, num17].active())
            {
                num17--;
            }

            num17 += genRand.Next(-3, 4);
            num18 = genRand.Next(4, 8);
            int num19 = 189;
            if (genRand.Next(4) == 0)
            {
                num19 = 196;
            }

            for (int m = num16 - num18; m <= num16 + num18; m++)
            {
                for (int n = num17 - num18; n <= num17 + num18; n++)
                {
                    if (n > num6)
                    {
                        float num20 = (float) Math.Abs(m - num16);
                        float num21 = (float) (Math.Abs(n - num17) * 2);
                        double num22 = Math.Sqrt((double) (num20 * num20 + num21 * num21));
                        if (num22 < (double) (num18 + genRand.Next(2)))
                        {
                            Main.tile[m, n].active(true);
                            Main.tile[m, n].type = (ushort) num19;
                            SquareTileFrame(m, n, true);
                        }
                    }
                }
            }
        }

        num = (double) genRand.Next(80, 95);
        num2 = num;
        num3 = (float) genRand.Next(10, 15);
        value.X = (float) i;
        value.Y = (float) num6;
        value2.X = (float) genRand.Next(-20, 21) * 0.2f;
        while (value2.X > -2f && value2.X < 2f)
        {
            value2.X = (float) genRand.Next(-20, 21) * 0.2f;
        }

        value2.Y = (float) genRand.Next(-20, -10) * 0.02f;
        while (num > 0.0 && num3 > 0f)
        {
            num -= (double) genRand.Next(4);
            num3 -= 1f;
            int num8 = (int) ((double) value.X - num * 0.5);
            int num9 = (int) ((double) value.X + num * 0.5);
            int num10 = num6 - 1;
            int num11 = (int) ((double) value.Y + num * 0.5);
            if (num8 < 0)
            {
                num8 = 0;
            }

            if (num9 > Main.maxTilesX)
            {
                num9 = Main.maxTilesX;
            }

            if (num10 < 0)
            {
                num10 = 0;
            }

            if (num11 > Main.maxTilesY)
            {
                num11 = Main.maxTilesY;
            }

            num2 = num * (double) genRand.Next(80, 120) * 0.01;
            float num23 = value.Y + 1f;
            for (int num24 = num8; num24 < num9; num24++)
            {
                if (genRand.Next(2) == 0)
                {
                    num23 += (float) genRand.Next(-1, 2);
                }

                if (num23 < value.Y)
                {
                    num23 = value.Y;
                }

                if (num23 > value.Y + 2f)
                {
                    num23 = value.Y + 2f;
                }

                for (int num25 = num10; num25 < num11; num25++)
                {
                    if ((float) num25 > num23)
                    {
                        float num26 = Math.Abs((float) num24 - value.X);
                        float num27 = Math.Abs((float) num25 - value.Y) * 3f;
                        double num28 = Math.Sqrt((double) (num26 * num26 + num27 * num27));
                        if (num28 < num2 * 0.4 && Main.tile[num24, num25].type == 189)
                        {
                            Main.tile[num24, num25].type = 0;
                            SquareTileFrame(num24, num25, true);
                        }
                    }
                }
            }

            value += value2;
            value2.X += (float) genRand.Next(-20, 21) * 0.05f;
            if (value2.X > 1f)
            {
                value2.X = 1f;
            }

            if (value2.X < -1f)
            {
                value2.X = -1f;
            }

            if ((double) value2.Y > 0.2)
            {
                value2.Y = -0.2f;
            }

            if ((double) value2.Y < -0.2)
            {
                value2.Y = -0.2f;
            }
        }

        int num29 = num4;
        num29 += genRand.Next(5);
        while (num29 < num5)
        {
            int num30 = num7;
            while ((!Main.tile[num29, num30].active() || Main.tile[num29, num30].type != 0) && num29 < num5)
            {
                num30--;
                if (num30 < num6)
                {
                    num30 = num7;
                    num29 += genRand.Next(1, 4);
                }
            }

            if (num29 < num5)
            {
                num30 += genRand.Next(0, 4);
                int num31 = genRand.Next(2, 5);
                int num32 = 189;
                for (int num33 = num29 - num31; num33 <= num29 + num31; num33++)
                {
                    for (int num34 = num30 - num31; num34 <= num30 + num31; num34++)
                    {
                        if (num34 > num6)
                        {
                            float num35 = (float) Math.Abs(num33 - num29);
                            float num36 = (float) (Math.Abs(num34 - num30) * 2);
                            double num37 = Math.Sqrt((double) (num35 * num35 + num36 * num36));
                            if (num37 < (double) num31)
                            {
                                Main.tile[num33, num34].type = (ushort) num32;
                                SquareTileFrame(num33, num34, true);
                            }
                        }
                    }
                }

                num29 += genRand.Next(num31, (int) ((double) num31 * 1.5));
            }
        }

        for (int num38 = num4 - 20; num38 <= num5 + 20; num38++)
        {
            for (int num39 = num6 - 20; num39 <= num7 + 20; num39++)
            {
                bool flag = true;
                for (int num40 = num38 - 1; num40 <= num38 + 1; num40++)
                {
                    for (int num41 = num39 - 1; num41 <= num39 + 1; num41++)
                    {
                        if (!Main.tile[num40, num41].active())
                        {
                            flag = false;
                        }
                    }
                }

                if (flag)
                {
                    Main.tile[num38, num39].wall = 73;
                    SquareWallFrame(num38, num39, true);
                }
            }
        }

        for (int num42 = num4; num42 <= num5; num42++)
        {
            int num43;
            for (num43 = num6 - 10; !Main.tile[num42, num43 + 1].active(); num43++)
            {
            }

            if (num43 < num7 && Main.tile[num42, num43 + 1].type == 189)
            {
                if (genRand.Next(10) == 0)
                {
                    int num44 = genRand.Next(1, 3);
                    for (int num45 = num42 - num44; num45 <= num42 + num44; num45++)
                    {
                        if (Main.tile[num45, num43].type == 189)
                        {
                            Main.tile[num45, num43].active(false);
                            Main.tile[num45, num43].liquid = byte.MaxValue;
                            Main.tile[num45, num43].lava(false);
                            SquareTileFrame(num42, num43, true);
                        }

                        if (Main.tile[num45, num43 + 1].type == 189)
                        {
                            Main.tile[num45, num43 + 1].active(false);
                            Main.tile[num45, num43 + 1].liquid = byte.MaxValue;
                            Main.tile[num45, num43 + 1].lava(false);
                            SquareTileFrame(num42, num43 + 1, true);
                        }

                        if (num45 > num42 - num44 && num45 < num42 + 2 && Main.tile[num45, num43 + 2].type == 189)
                        {
                            Main.tile[num45, num43 + 2].active(false);
                            Main.tile[num45, num43 + 2].liquid = byte.MaxValue;
                            Main.tile[num45, num43 + 2].lava(false);
                            SquareTileFrame(num42, num43 + 2, true);
                        }
                    }
                }

                if (genRand.Next(5) == 0)
                {
                    Main.tile[num42, num43].liquid = byte.MaxValue;
                }

                Main.tile[num42, num43].lava(false);
                SquareTileFrame(num42, num43, true);
            }
        }

        int num46 = genRand.Next(4);
        for (int num47 = 0; num47 <= num46; num47++)
        {
            int num48 = genRand.Next(num4 - 5, num5 + 5);
            int num49 = num6 - genRand.Next(20, 40);
            int num50 = genRand.Next(4, 8);
            int num51 = 189;
            if (genRand.Next(2) == 0)
            {
                num51 = 196;
            }

            for (int num52 = num48 - num50; num52 <= num48 + num50; num52++)
            {
                for (int num53 = num49 - num50; num53 <= num49 + num50; num53++)
                {
                    float num54 = (float) Math.Abs(num52 - num48);
                    float num55 = (float) (Math.Abs(num53 - num49) * 2);
                    double num56 = Math.Sqrt((double) (num54 * num54 + num55 * num55));
                    if (num56 < (double) (num50 + genRand.Next(-1, 2)))
                    {
                        Main.tile[num52, num53].active(true);
                        Main.tile[num52, num53].type = (ushort) num51;
                        SquareTileFrame(num52, num53, true);
                    }
                }
            }

            for (int num57 = num48 - num50 + 2; num57 <= num48 + num50 - 2; num57++)
            {
                int num58;
                for (num58 = num49 - num50; !Main.tile[num57, num58].active(); num58++)
                {
                }

                Main.tile[num57, num58].active(false);
                Main.tile[num57, num58].liquid = byte.MaxValue;
                SquareTileFrame(num57, num58, true);
            }
        }
    }

    public static void CloudLake(int i, int j)
    {
        double num = (double) genRand.Next(100, 150);
        double num2 = num;
        float num3 = (float) genRand.Next(20, 30);
        int num4 = i;
        int num5 = i;
        int num6 = i;
        int num7 = j;
        Vector2 value = default(Vector2);
        value.X = (float) i;
        value.Y = (float) j;
        Vector2 value2 = default(Vector2);
        value2.X = (float) genRand.Next(-20, 21) * 0.2f;
        while (value2.X > -2f && value2.X < 2f)
        {
            value2.X = (float) genRand.Next(-20, 21) * 0.2f;
        }

        value2.Y = (float) genRand.Next(-20, -10) * 0.02f;
        while (num > 0.0 && num3 > 0f)
        {
            num -= (double) genRand.Next(4);
            num3 -= 1f;
            int num8 = (int) ((double) value.X - num * 0.5);
            int num9 = (int) ((double) value.X + num * 0.5);
            int num10 = (int) ((double) value.Y - num * 0.5);
            int num11 = (int) ((double) value.Y + num * 0.5);
            if (num8 < 0)
            {
                num8 = 0;
            }

            if (num9 > Main.maxTilesX)
            {
                num9 = Main.maxTilesX;
            }

            if (num10 < 0)
            {
                num10 = 0;
            }

            if (num11 > Main.maxTilesY)
            {
                num11 = Main.maxTilesY;
            }

            num2 = num * (double) genRand.Next(80, 120) * 0.01;
            float num12 = value.Y + 1f;
            for (int k = num8; k < num9; k++)
            {
                if (genRand.Next(2) == 0)
                {
                    num12 += (float) genRand.Next(-1, 2);
                }

                if (num12 < value.Y)
                {
                    num12 = value.Y;
                }

                if (num12 > value.Y + 2f)
                {
                    num12 = value.Y + 2f;
                }

                for (int l = num10; l < num11; l++)
                {
                    if ((float) l > num12)
                    {
                        float num13 = Math.Abs((float) k - value.X);
                        float num14 = Math.Abs((float) l - value.Y) * 3f;
                        double num15 = Math.Sqrt((double) (num13 * num13 + num14 * num14));
                        if (num15 < num2 * 0.4)
                        {
                            if (k < num4)
                            {
                                num4 = k;
                            }

                            if (k > num5)
                            {
                                num5 = k;
                            }

                            if (l < num6)
                            {
                                num6 = l;
                            }

                            if (l > num7)
                            {
                                num7 = l;
                            }

                            Main.tile[k, l].active(true);
                            Main.tile[k, l].type = 189;
                            SquareTileFrame(k, l, true);
                        }
                    }
                }
            }

            value += value2;
            value2.X += (float) genRand.Next(-20, 21) * 0.05f;
            if (value2.X > 1f)
            {
                value2.X = 1f;
            }

            if (value2.X < -1f)
            {
                value2.X = -1f;
            }

            if ((double) value2.Y > 0.2)
            {
                value2.Y = -0.2f;
            }

            if ((double) value2.Y < -0.2)
            {
                value2.Y = -0.2f;
            }
        }

        int num16 = num4;
        int num18;
        for (num16 += genRand.Next(5); num16 < num5; num16 += genRand.Next(num18, (int) ((double) num18 * 1.5)))
        {
            int num17 = num7;
            while (!Main.tile[num16, num17].active())
            {
                num17--;
            }

            num17 += genRand.Next(-3, 4);
            num18 = genRand.Next(4, 8);
            int num19 = 189;
            if (genRand.Next(4) == 0)
            {
                num19 = 196;
            }

            for (int m = num16 - num18; m <= num16 + num18; m++)
            {
                for (int n = num17 - num18; n <= num17 + num18; n++)
                {
                    if (n > num6)
                    {
                        float num20 = (float) Math.Abs(m - num16);
                        float num21 = (float) (Math.Abs(n - num17) * 2);
                        double num22 = Math.Sqrt((double) (num20 * num20 + num21 * num21));
                        if (num22 < (double) (num18 + genRand.Next(2)))
                        {
                            Main.tile[m, n].active(true);
                            Main.tile[m, n].type = (ushort) num19;
                            SquareTileFrame(m, n, true);
                        }
                    }
                }
            }
        }

        num = (double) genRand.Next(80, 95);
        num2 = num;
        num3 = (float) genRand.Next(10, 15);
        value.X = (float) i;
        value.Y = (float) num6;
        value2.X = (float) genRand.Next(-20, 21) * 0.2f;
        while (value2.X > -2f && value2.X < 2f)
        {
            value2.X = (float) genRand.Next(-20, 21) * 0.2f;
        }

        value2.Y = (float) genRand.Next(-20, -10) * 0.02f;
        while (num > 0.0 && num3 > 0f)
        {
            num -= (double) genRand.Next(4);
            num3 -= 1f;
            int num8 = (int) ((double) value.X - num * 0.5);
            int num9 = (int) ((double) value.X + num * 0.5);
            int num10 = num6 - 1;
            int num11 = (int) ((double) value.Y + num * 0.5);
            if (num8 < 0)
            {
                num8 = 0;
            }

            if (num9 > Main.maxTilesX)
            {
                num9 = Main.maxTilesX;
            }

            if (num10 < 0)
            {
                num10 = 0;
            }

            if (num11 > Main.maxTilesY)
            {
                num11 = Main.maxTilesY;
            }

            num2 = num * (double) genRand.Next(80, 120) * 0.01;
            float num23 = value.Y + 1f;
            for (int num24 = num8; num24 < num9; num24++)
            {
                if (genRand.Next(2) == 0)
                {
                    num23 += (float) genRand.Next(-1, 2);
                }

                if (num23 < value.Y)
                {
                    num23 = value.Y;
                }

                if (num23 > value.Y + 2f)
                {
                    num23 = value.Y + 2f;
                }

                for (int num25 = num10; num25 < num11; num25++)
                {
                    if ((float) num25 > num23)
                    {
                        float num26 = Math.Abs((float) num24 - value.X);
                        float num27 = Math.Abs((float) num25 - value.Y) * 3f;
                        double num28 = Math.Sqrt((double) (num26 * num26 + num27 * num27));
                        if (num28 < num2 * 0.4 && Main.tile[num24, num25].type == 189)
                        {
                            Main.tile[num24, num25].active(false);
                            Main.tile[num24, num25].liquid = byte.MaxValue;
                            Main.tile[num24, num25].honey(false);
                            Main.tile[num24, num25].lava(false);
                        }
                    }
                }
            }

            value += value2;
            value2.X += (float) genRand.Next(-20, 21) * 0.05f;
            if (value2.X > 1f)
            {
                value2.X = 1f;
            }

            if (value2.X < -1f)
            {
                value2.X = -1f;
            }

            if ((double) value2.Y > 0.2)
            {
                value2.Y = -0.2f;
            }

            if ((double) value2.Y < -0.2)
            {
                value2.Y = -0.2f;
            }
        }

        for (int num29 = num4 - 20; num29 <= num5 + 20; num29++)
        {
            for (int num30 = num6 - 20; num30 <= num7 + 20; num30++)
            {
                bool flag = true;
                for (int num31 = num29 - 1; num31 <= num29 + 1; num31++)
                {
                    for (int num32 = num30 - 1; num32 <= num30 + 1; num32++)
                    {
                        if (!Main.tile[num31, num32].active())
                        {
                            flag = false;
                        }
                    }
                }

                if (flag)
                {
                    Main.tile[num29, num30].wall = 73;
                }
            }
        }

        for (int num33 = num4; num33 <= num5; num33++)
        {
            int num34;
            for (num34 = num6 - 10; !Main.tile[num33, num34 + 1].active(); num34++)
            {
            }

            if (num34 < num7 && Main.tile[num33, num34 + 1].type == 189)
            {
                if (genRand.Next(10) == 0)
                {
                    int num35 = genRand.Next(1, 3);
                    for (int num36 = num33 - num35; num36 <= num33 + num35; num36++)
                    {
                        if (Main.tile[num36, num34].type == 189)
                        {
                            Main.tile[num36, num34].active(false);
                            Main.tile[num36, num34].liquid = byte.MaxValue;
                            Main.tile[num36, num34].lava(false);
                            SquareTileFrame(num33, num34, true);
                        }

                        if (Main.tile[num36, num34 + 1].type == 189)
                        {
                            Main.tile[num36, num34 + 1].active(false);
                            Main.tile[num36, num34 + 1].liquid = byte.MaxValue;
                            Main.tile[num36, num34 + 1].lava(false);
                            SquareTileFrame(num33, num34 + 1, true);
                        }

                        if (num36 > num33 - num35 && num36 < num33 + 2 && Main.tile[num36, num34 + 2].type == 189)
                        {
                            Main.tile[num36, num34 + 2].active(false);
                            Main.tile[num36, num34 + 2].liquid = byte.MaxValue;
                            Main.tile[num36, num34 + 2].lava(false);
                            SquareTileFrame(num33, num34 + 2, true);
                        }
                    }
                }

                if (genRand.Next(5) == 0)
                {
                    Main.tile[num33, num34].liquid = byte.MaxValue;
                }

                Main.tile[num33, num34].lava(false);
                SquareTileFrame(num33, num34, true);
            }
        }

        int num37 = genRand.Next(1, 4);
        for (int num38 = 0; num38 <= num37; num38++)
        {
            int num39 = genRand.Next(num4 - 5, num5 + 5);
            int num40 = num6 - genRand.Next(20, 40);
            int num41 = genRand.Next(4, 8);
            int num42 = 189;
            if (genRand.Next(4) != 0)
            {
                num42 = 196;
            }

            for (int num43 = num39 - num41; num43 <= num39 + num41; num43++)
            {
                for (int num44 = num40 - num41; num44 <= num40 + num41; num44++)
                {
                    float num45 = (float) Math.Abs(num43 - num39);
                    float num46 = (float) (Math.Abs(num44 - num40) * 2);
                    double num47 = Math.Sqrt((double) (num45 * num45 + num46 * num46));
                    if (num47 < (double) (num41 + genRand.Next(-1, 2)))
                    {
                        Main.tile[num43, num44].active(true);
                        Main.tile[num43, num44].type = (ushort) num42;
                        SquareTileFrame(num43, num44, true);
                    }
                }
            }

            for (int num48 = num39 - num41 + 2; num48 <= num39 + num41 - 2; num48++)
            {
                int num49;
                for (num49 = num40 - num41; !Main.tile[num48, num49].active(); num49++)
                {
                }

                Main.tile[num48, num49].active(false);
                Main.tile[num48, num49].liquid = byte.MaxValue;
                SquareTileFrame(num48, num49, true);
            }
        }
    }

    public static void FloatingIsland(int i, int j)
    {
        double num = (double) genRand.Next(80, 120);
        double num2 = num;
        float num3 = (float) genRand.Next(20, 25);
        Vector2 value = default(Vector2);
        value.X = (float) i;
        value.Y = (float) j;
        Vector2 value2 = default(Vector2);
        value2.X = (float) genRand.Next(-20, 21) * 0.2f;
        while (value2.X > -2f && value2.X < 2f)
        {
            value2.X = (float) genRand.Next(-20, 21) * 0.2f;
        }

        value2.Y = (float) genRand.Next(-20, -10) * 0.02f;
        while (num > 0.0 && num3 > 0f)
        {
            num -= (double) genRand.Next(4);
            num3 -= 1f;
            int num4 = (int) ((double) value.X - num * 0.5);
            int num5 = (int) ((double) value.X + num * 0.5);
            int num6 = (int) ((double) value.Y - num * 0.5);
            int num7 = (int) ((double) value.Y + num * 0.5);
            if (num4 < 0)
            {
                num4 = 0;
            }

            if (num5 > Main.maxTilesX)
            {
                num5 = Main.maxTilesX;
            }

            if (num6 < 0)
            {
                num6 = 0;
            }

            if (num7 > Main.maxTilesY)
            {
                num7 = Main.maxTilesY;
            }

            num2 = num * (double) genRand.Next(80, 120) * 0.01;
            float num8 = value.Y + 1f;
            for (int k = num4; k < num5; k++)
            {
                if (genRand.Next(2) == 0)
                {
                    num8 += (float) genRand.Next(-1, 2);
                }

                if (num8 < value.Y)
                {
                    num8 = value.Y;
                }

                if (num8 > value.Y + 2f)
                {
                    num8 = value.Y + 2f;
                }

                for (int l = num6; l < num7; l++)
                {
                    if ((float) l > num8)
                    {
                        float num9 = Math.Abs((float) k - value.X);
                        float num10 = Math.Abs((float) l - value.Y) * 2f;
                        double num11 = Math.Sqrt((double) (num9 * num9 + num10 * num10));
                        if (num11 < num2 * 0.4)
                        {
                            Main.tile[k, l].active(true);
                            if (Main.tile[k, l].type == 59)
                            {
                                Main.tile[k, l].type = 0;
                            }
                        }
                    }
                }
            }

            num4 = (int) ((double) value.X - num * 0.4);
            num5 = (int) ((double) value.X + num * 0.4);
            num6 = (int) ((double) value.Y - num * 0.4);
            num7 = (int) ((double) value.Y + num * 0.4);
            if (num4 < 0)
            {
                num4 = 0;
            }

            if (num5 > Main.maxTilesX)
            {
                num5 = Main.maxTilesX;
            }

            if (num6 < 0)
            {
                num6 = 0;
            }

            if (num7 > Main.maxTilesY)
            {
                num7 = Main.maxTilesY;
            }

            num2 = num * (double) genRand.Next(80, 120) * 0.01;
            for (int m = num4; m < num5; m++)
            {
                for (int n = num6; n < num7; n++)
                {
                    if ((float) n > value.Y + 2f)
                    {
                        float num12 = Math.Abs((float) m - value.X);
                        float num13 = Math.Abs((float) n - value.Y) * 2f;
                        double num14 = Math.Sqrt((double) (num12 * num12 + num13 * num13));
                        if (num14 < num2 * 0.4)
                        {
                            Main.tile[m, n].wall = 2;
                        }
                    }
                }
            }

            value += value2;
            value2.Y += (float) genRand.Next(-10, 11) * 0.05f;
            if (value2.X > 1f)
            {
                value2.X = 1f;
            }

            if (value2.X < -1f)
            {
                value2.X = -1f;
            }

            if ((double) value2.Y > 0.2)
            {
                value2.Y = -0.2f;
            }

            if ((double) value2.Y < -0.2)
            {
                value2.Y = -0.2f;
            }
        }
    }

    public static void Caverer(int X, int Y)
    {
        switch (genRand.Next(2))
        {
            case 0:
            {
                int num4 = genRand.Next(7, 9);
                float num5 = (float) genRand.Next(100) * 0.01f;
                float num6 = 1f - num5;
                if (genRand.Next(2) == 0)
                {
                    num5 = 0f - num5;
                }

                if (genRand.Next(2) == 0)
                {
                    num6 = 0f - num6;
                }

                Vector2 vector2 = new Vector2((float) X, (float) Y);
                for (int j = 0; j < num4; j++)
                {
                    vector2 = digTunnel(vector2.X, vector2.Y, num5, num6, genRand.Next(6, 20), genRand.Next(4, 9),
                        false);
                    num5 += (float) genRand.Next(-20, 21) * 0.1f;
                    num6 += (float) genRand.Next(-20, 21) * 0.1f;
                    if ((double) num5 < -1.5)
                    {
                        num5 = -1.5f;
                    }

                    if ((double) num5 > 1.5)
                    {
                        num5 = 1.5f;
                    }

                    if ((double) num6 < -1.5)
                    {
                        num6 = -1.5f;
                    }

                    if ((double) num6 > 1.5)
                    {
                        num6 = 1.5f;
                    }

                    float num7 = (float) genRand.Next(100) * 0.01f;
                    float num8 = 1f - num7;
                    if (genRand.Next(2) == 0)
                    {
                        num7 = 0f - num7;
                    }

                    if (genRand.Next(2) == 0)
                    {
                        num8 = 0f - num8;
                    }

                    Vector2 vector3 = digTunnel(vector2.X, vector2.Y, num7, num8, genRand.Next(30, 50),
                        genRand.Next(3, 6), false);
                    TileRunner((int) vector3.X, (int) vector3.Y, (double) genRand.Next(10, 20), genRand.Next(5, 10), -1,
                        false, 0f, 0f, false, true);
                }

                break;
            }
            case 1:
            {
                int num = genRand.Next(15, 30);
                float num2 = (float) genRand.Next(100) * 0.01f;
                float num3 = 1f - num2;
                if (genRand.Next(2) == 0)
                {
                    num2 = 0f - num2;
                }

                if (genRand.Next(2) == 0)
                {
                    num3 = 0f - num3;
                }

                Vector2 vector = new Vector2((float) X, (float) Y);
                for (int i = 0; i < num; i++)
                {
                    vector = digTunnel(vector.X, vector.Y, num2, num3, genRand.Next(5, 15), genRand.Next(2, 6), true);
                    num2 += (float) genRand.Next(-20, 21) * 0.1f;
                    num3 += (float) genRand.Next(-20, 21) * 0.1f;
                    if ((double) num2 < -1.5)
                    {
                        num2 = -1.5f;
                    }

                    if ((double) num2 > 1.5)
                    {
                        num2 = 1.5f;
                    }

                    if ((double) num3 < -1.5)
                    {
                        num3 = -1.5f;
                    }

                    if ((double) num3 > 1.5)
                    {
                        num3 = 1.5f;
                    }
                }

                break;
            }
        }
    }

    public static Vector2 digTunnel(float X, float Y, float xDir, float yDir, int Steps, int Size, bool Wet = false)
    {
        float num = X;
        float num2 = Y;
        try
        {
            float num3 = 0f;
            float num4 = 0f;
            float num5 = (float) Size;
            num = MathHelper.Clamp(num, num5 + 1f, (float) Main.maxTilesX - num5 - 1f);
            num2 = MathHelper.Clamp(num2, num5 + 1f, (float) Main.maxTilesY - num5 - 1f);
            for (int i = 0; i < Steps; i++)
            {
                for (int j = (int) (num - num5); (float) j <= num + num5; j++)
                {
                    for (int k = (int) (num2 - num5); (float) k <= num2 + num5; k++)
                    {
                        if ((double) (Math.Abs((float) j - num) + Math.Abs((float) k - num2)) <
                            (double) num5 * (1.0 + (double) genRand.Next(-10, 11) * 0.005) && j >= 0 &&
                            j < Main.maxTilesX && k >= 0 && k < Main.maxTilesY)
                        {
                            Main.tile[j, k].active(false);
                            if (Wet)
                            {
                                Main.tile[j, k].liquid = byte.MaxValue;
                            }
                        }
                    }
                }

                num5 += (float) genRand.Next(-50, 51) * 0.03f;
                if ((double) num5 < (double) Size * 0.6)
                {
                    num5 = (float) Size * 0.6f;
                }

                if (num5 > (float) (Size * 2))
                {
                    num5 = (float) Size * 2f;
                }

                num3 += (float) genRand.Next(-20, 21) * 0.01f;
                num4 += (float) genRand.Next(-20, 21) * 0.01f;
                if (num3 < -1f)
                {
                    num3 = -1f;
                }

                if (num3 > 1f)
                {
                    num3 = 1f;
                }

                if (num4 < -1f)
                {
                    num4 = -1f;
                }

                if (num4 > 1f)
                {
                    num4 = 1f;
                }

                num += (xDir + num3) * 0.6f;
                num2 += (yDir + num4) * 0.6f;
            }
        }
        catch
        {
        }

        return new Vector2(num, num2);
    }

    public static void IslandHouse(int i, int j)
    {
        byte type = 202;
        byte wall = 82;
        Vector2 vector = new Vector2((float) i, (float) j);
        int num = 1;
        if (genRand.Next(2) == 0)
        {
            num = -1;
        }

        int num2 = genRand.Next(7, 12);
        int num3 = genRand.Next(5, 7);
        vector.X = (float) (i + (num2 + 2) * num);
        for (int k = j - 15; k < j + 30; k++)
        {
            if (Main.tile[(int) vector.X, k].active())
            {
                vector.Y = (float) (k - 1);
                break;
            }
        }

        vector.X = (float) i;
        int num4 = (int) (vector.X - (float) num2 - 1f);
        int num5 = (int) (vector.X + (float) num2 + 1f);
        int num6 = (int) (vector.Y - (float) num3 - 1f);
        int num7 = (int) (vector.Y + 2f);
        if (num4 < 0)
        {
            num4 = 0;
        }

        if (num5 > Main.maxTilesX)
        {
            num5 = Main.maxTilesX;
        }

        if (num6 < 0)
        {
            num6 = 0;
        }

        if (num7 > Main.maxTilesY)
        {
            num7 = Main.maxTilesY;
        }

        for (int l = num4; l <= num5; l++)
        {
            for (int m = num6 - 1; m < num7 + 1; m++)
            {
                if (m != num6 - 1 || (l != num4 && l != num5))
                {
                    Main.tile[l, m].active(true);
                    Main.tile[l, m].liquid = 0;
                    Main.tile[l, m].type = type;
                    Main.tile[l, m].wall = 0;
                    Main.tile[l, m].halfBrick(false);
                    Main.tile[l, m].slope(0);
                }
            }
        }

        num4 = (int) (vector.X - (float) num2);
        num5 = (int) (vector.X + (float) num2);
        num6 = (int) (vector.Y - (float) num3);
        num7 = (int) (vector.Y + 1f);
        if (num4 < 0)
        {
            num4 = 0;
        }

        if (num5 > Main.maxTilesX)
        {
            num5 = Main.maxTilesX;
        }

        if (num6 < 0)
        {
            num6 = 0;
        }

        if (num7 > Main.maxTilesY)
        {
            num7 = Main.maxTilesY;
        }

        for (int n = num4; n <= num5; n++)
        {
            for (int num8 = num6; num8 < num7; num8++)
            {
                if ((num8 != num6 || (n != num4 && n != num5)) && Main.tile[n, num8].wall == 0)
                {
                    Main.tile[n, num8].active(false);
                    Main.tile[n, num8].wall = wall;
                }
            }
        }

        int num9 = i + (num2 + 1) * num;
        int num10 = (int) vector.Y;
        for (int num11 = num9 - 2; num11 <= num9 + 2; num11++)
        {
            Main.tile[num11, num10].active(false);
            Main.tile[num11, num10 - 1].active(false);
            Main.tile[num11, num10 - 2].active(false);
        }

        PlaceTile(num9, num10, 10, true, false, -1, 9);
        num9 = i + (num2 + 1) * -num - num;
        for (int num12 = num6; num12 <= num7 + 1; num12++)
        {
            Main.tile[num9, num12].active(true);
            Main.tile[num9, num12].liquid = 0;
            Main.tile[num9, num12].type = type;
            Main.tile[num9, num12].wall = 0;
            Main.tile[num9, num12].halfBrick(false);
            Main.tile[num9, num12].slope(0);
        }

        int contain = 0;
        int num13 = houseCount;
        if (num13 > 2)
        {
            num13 = genRand.Next(3);
        }

        switch (num13)
        {
            case 0:
                contain = 159;
                break;
            case 1:
                contain = 65;
                break;
            case 2:
                contain = 158;
                break;
        }

        AddBuriedChest(i, num10 - 3, contain, false, 13);
        houseCount++;
        int num14 = i - num2 / 2 + 1;
        int num15 = i + num2 / 2 - 1;
        int num16 = 1;
        if (num2 > 10)
        {
            num16 = 2;
        }

        int num17 = (num6 + num7) / 2 - 1;
        for (int num18 = num14 - num16; num18 <= num14 + num16; num18++)
        {
            for (int num19 = num17 - 1; num19 <= num17 + 1; num19++)
            {
                Main.tile[num18, num19].wall = 21;
            }
        }

        for (int num20 = num15 - num16; num20 <= num15 + num16; num20++)
        {
            for (int num21 = num17 - 1; num21 <= num17 + 1; num21++)
            {
                Main.tile[num20, num21].wall = 21;
            }
        }

        int num22 = i + (num2 / 2 + 1) * -num;
        PlaceTile(num22, num7 - 1, 14, true, false, -1, 7);
        PlaceTile(num22 - 2, num7 - 1, 15, true, false, 0, 10);
        Main.tile[num22 - 2, num7 - 1].frameX += 18;
        Main.tile[num22 - 2, num7 - 2].frameX += 18;
        PlaceTile(num22 + 2, num7 - 1, 15, true, false, 0, 10);
        int i2 = num4 + 1;
        int j2 = num6;
        PlaceTile(i2, j2, 91, true, false, -1, genRand.Next(7, 10));
        i2 = num5 - 1;
        j2 = num6;
        PlaceTile(i2, j2, 91, true, false, -1, genRand.Next(7, 10));
        if (num > 0)
        {
            i2 = num4;
            j2 = num6 + 1;
        }
        else
        {
            i2 = num5;
            j2 = num6 + 1;
        }

        PlaceTile(i2, j2, 91, true, false, -1, genRand.Next(7, 10));
    }

    public static void Mountinater(int i, int j)
    {
        double num = (double) genRand.Next(80, 120);
        double num2 = num;
        float num3 = (float) genRand.Next(40, 55);
        Vector2 value = default(Vector2);
        value.X = (float) i;
        value.Y = (float) j + num3 / 2f;
        Vector2 value2 = default(Vector2);
        value2.X = (float) genRand.Next(-10, 11) * 0.1f;
        value2.Y = (float) genRand.Next(-20, -10) * 0.1f;
        while (num > 0.0 && num3 > 0f)
        {
            num -= (double) genRand.Next(4);
            num3 -= 1f;
            int num4 = (int) ((double) value.X - num * 0.5);
            int num5 = (int) ((double) value.X + num * 0.5);
            int num6 = (int) ((double) value.Y - num * 0.5);
            int num7 = (int) ((double) value.Y + num * 0.5);
            if (num4 < 0)
            {
                num4 = 0;
            }

            if (num5 > Main.maxTilesX)
            {
                num5 = Main.maxTilesX;
            }

            if (num6 < 0)
            {
                num6 = 0;
            }

            if (num7 > Main.maxTilesY)
            {
                num7 = Main.maxTilesY;
            }

            num2 = num * (double) genRand.Next(80, 120) * 0.01;
            for (int k = num4; k < num5; k++)
            {
                for (int l = num6; l < num7; l++)
                {
                    float num8 = Math.Abs((float) k - value.X);
                    float num9 = Math.Abs((float) l - value.Y);
                    double num10 = Math.Sqrt((double) (num8 * num8 + num9 * num9));
                    if (num10 < num2 * 0.4 && !Main.tile[k, l].active())
                    {
                        Main.tile[k, l].active(true);
                        Main.tile[k, l].type = 0;
                    }
                }
            }

            value += value2;
            value2.X += (float) genRand.Next(-10, 11) * 0.05f;
            value2.Y += (float) genRand.Next(-10, 11) * 0.05f;
            if ((double) value2.X > 0.5)
            {
                value2.X = 0.5f;
            }

            if ((double) value2.X < -0.5)
            {
                value2.X = -0.5f;
            }

            if ((double) value2.Y > -0.5)
            {
                value2.Y = -0.5f;
            }

            if ((double) value2.Y < -1.5)
            {
                value2.Y = -1.5f;
            }
        }
    }

    public static void MakeWateryIceThing(int i, int j)
    {
        if (Main.tile[i, j].liquid > 0 && !Main.tile[i, j].active() && !Main.tile[i, j].lava())
        {
            int num = j;
            while (!Main.tile[i, num].active() && Main.tile[i, num].liquid > 0)
            {
                num++;
                if (num > Main.maxTilesY - 50)
                {
                    return;
                }
            }

            if (Main.tile[i, num].type == 147 || Main.tile[i, num].type == 161)
            {
                num--;
                while (Main.tile[i, num].liquid > 0)
                {
                    num--;
                    if (num < 10)
                    {
                        return;
                    }
                }

                if (!Main.tile[i, num].active())
                {
                    num++;
                    if (!Main.tile[i, num].active())
                    {
                        int num2 = i;
                        while (!Main.tile[num2, num].active() && Main.tile[num2, num].liquid > 0 &&
                               Main.tile[num2, num - 1].liquid == 0 && !Main.tile[num2, num - 1].active() &&
                               !Main.tile[num2 - 1, num].halfBrick())
                        {
                            PlaceTile(num2, num, 162, true, false, -1, 0);
                            num2--;
                        }

                        for (num2 = i + 1;
                            !Main.tile[num2, num].active() && Main.tile[num2, num].liquid > 0 &&
                            Main.tile[num2, num - 1].liquid == 0 && !Main.tile[num2, num - 1].active() &&
                            !Main.tile[num2 + 1, num].halfBrick();
                            num2++)
                        {
                            PlaceTile(num2, num, 162, true, false, -1, 0);
                        }
                    }
                }
            }
        }
    }

    public static void Lakinater(int i, int j)
    {
        double num = (double) genRand.Next(25, 50);
        double num2 = num;
        float num3 = (float) genRand.Next(30, 80);
        if (genRand.Next(5) == 0)
        {
            num *= 1.5;
            num2 *= 1.5;
            num3 *= 1.2f;
        }

        Vector2 value = default(Vector2);
        value.X = (float) i;
        value.Y = (float) j - num3 * 0.3f;
        Vector2 value2 = default(Vector2);
        value2.X = (float) genRand.Next(-10, 11) * 0.1f;
        value2.Y = (float) genRand.Next(-20, -10) * 0.1f;
        while (num > 0.0 && num3 > 0f)
        {
            if ((double) value.Y + num2 * 0.5 > Main.worldSurface)
            {
                num3 = 0f;
            }

            num -= (double) genRand.Next(3);
            num3 -= 1f;
            int num4 = (int) ((double) value.X - num * 0.5);
            int num5 = (int) ((double) value.X + num * 0.5);
            int num6 = (int) ((double) value.Y - num * 0.5);
            int num7 = (int) ((double) value.Y + num * 0.5);
            if (num4 < 0)
            {
                num4 = 0;
            }

            if (num5 > Main.maxTilesX)
            {
                num5 = Main.maxTilesX;
            }

            if (num6 < 0)
            {
                num6 = 0;
            }

            if (num7 > Main.maxTilesY)
            {
                num7 = Main.maxTilesY;
            }

            num2 = num * (double) genRand.Next(80, 120) * 0.01;
            for (int k = num4; k < num5; k++)
            {
                for (int l = num6; l < num7; l++)
                {
                    float num8 = Math.Abs((float) k - value.X);
                    float num9 = Math.Abs((float) l - value.Y);
                    double num10 = Math.Sqrt((double) (num8 * num8 + num9 * num9));
                    if (num10 < num2 * 0.4)
                    {
                        if (Main.tile[k, l].active())
                        {
                            Main.tile[k, l].liquid = byte.MaxValue;
                        }

                        Main.tile[k, l].active(false);
                    }
                }
            }

            value += value2;
            value2.X += (float) genRand.Next(-10, 11) * 0.05f;
            value2.Y += (float) genRand.Next(-10, 11) * 0.05f;
            if ((double) value2.X > 0.5)
            {
                value2.X = 0.5f;
            }

            if ((double) value2.X < -0.5)
            {
                value2.X = -0.5f;
            }

            if ((double) value2.Y > 1.5)
            {
                value2.Y = 1.5f;
            }

            if ((double) value2.Y < 0.5)
            {
                value2.Y = 0.5f;
            }
        }
    }

    public static void ShroomPatch(int i, int j)
    {
        double num = (double) genRand.Next(40, 70);
        double num2 = num;
        float num3 = (float) genRand.Next(20, 30);
        if (genRand.Next(5) == 0)
        {
            num *= 1.5;
            num2 *= 1.5;
            num3 *= 1.2f;
        }

        Vector2 value = default(Vector2);
        value.X = (float) i;
        value.Y = (float) j - num3 * 0.3f;
        Vector2 value2 = default(Vector2);
        value2.X = (float) genRand.Next(-10, 11) * 0.1f;
        value2.Y = (float) genRand.Next(-20, -10) * 0.1f;
        while (num > 0.0 && num3 > 0f)
        {
            num -= (double) genRand.Next(3);
            num3 -= 1f;
            int num4 = (int) ((double) value.X - num * 0.5);
            int num5 = (int) ((double) value.X + num * 0.5);
            int num6 = (int) ((double) value.Y - num * 0.5);
            int num7 = (int) ((double) value.Y + num * 0.5);
            if (num4 < 0)
            {
                num4 = 0;
            }

            if (num5 > Main.maxTilesX)
            {
                num5 = Main.maxTilesX;
            }

            if (num6 < 0)
            {
                num6 = 0;
            }

            if (num7 > Main.maxTilesY)
            {
                num7 = Main.maxTilesY;
            }

            num2 = num * (double) genRand.Next(80, 120) * 0.01;
            for (int k = num4; k < num5; k++)
            {
                for (int l = num6; l < num7; l++)
                {
                    float num8 = Math.Abs((float) k - value.X);
                    float num9 = Math.Abs(((float) l - value.Y) * 2.3f);
                    double num10 = Math.Sqrt((double) (num8 * num8 + num9 * num9));
                    if (num10 < num2 * 0.4)
                    {
                        if ((double) l < (double) value.Y + num2 * 0.02)
                        {
                            if (Main.tile[k, l].type != 59)
                            {
                                Main.tile[k, l].active(false);
                            }
                        }
                        else
                        {
                            Main.tile[k, l].type = 59;
                        }

                        Main.tile[k, l].liquid = 0;
                        Main.tile[k, l].lava(false);
                    }
                }
            }

            value += value2;
            value.X += value2.X;
            value2.X += (float) genRand.Next(-10, 11) * 0.05f;
            value2.Y -= (float) genRand.Next(11) * 0.05f;
            if ((double) value2.X > -0.5 && (double) value2.X < 0.5)
            {
                if (value2.X < 0f)
                {
                    value2.X = -0.5f;
                }
                else
                {
                    value2.X = 0.5f;
                }
            }

            if (value2.X > 2f)
            {
                value2.X = 1f;
            }

            if (value2.X < -2f)
            {
                value2.X = -1f;
            }

            if (value2.Y > 1f)
            {
                value2.Y = 1f;
            }

            if (value2.Y < -1f)
            {
                value2.Y = -1f;
            }

            for (int m = 0; m < 2; m++)
            {
                int num11 = (int) value.X + genRand.Next(-20, 20);
                int num12 = (int) value.Y + genRand.Next(0, 20);
                while (!Main.tile[num11, num12].active() && Main.tile[num11, num12].type != 59)
                {
                    num11 = (int) value.X + genRand.Next(-20, 20);
                    num12 = (int) value.Y + genRand.Next(0, 20);
                }

                int num13 = genRand.Next(7, 10);
                int num14 = genRand.Next(7, 10);
                TileRunner(num11, num12, (double) num13, num14, 59, false, 0f, 2f, true, true);
                if (genRand.Next(3) == 0)
                {
                    TileRunner(num11, num12, (double) (num13 - 3), num14 - 3, -1, false, 0f, 2f, true, true);
                }
            }
        }
    }

    public static void Cavinator(int i, int j, int steps)
    {
        double num = (double) genRand.Next(7, 15);
        double num2 = num;
        int num3 = 1;
        if (genRand.Next(2) == 0)
        {
            num3 = -1;
        }

        Vector2 value = default(Vector2);
        value.X = (float) i;
        value.Y = (float) j;
        int num4 = genRand.Next(20, 40);
        Vector2 value2 = default(Vector2);
        value2.Y = (float) genRand.Next(10, 20) * 0.01f;
        value2.X = (float) num3;
        while (num4 > 0)
        {
            num4--;
            int num5 = (int) ((double) value.X - num * 0.5);
            int num6 = (int) ((double) value.X + num * 0.5);
            int num7 = (int) ((double) value.Y - num * 0.5);
            int num8 = (int) ((double) value.Y + num * 0.5);
            if (num5 < 0)
            {
                num5 = 0;
            }

            if (num6 > Main.maxTilesX)
            {
                num6 = Main.maxTilesX;
            }

            if (num7 < 0)
            {
                num7 = 0;
            }

            if (num8 > Main.maxTilesY)
            {
                num8 = Main.maxTilesY;
            }

            num2 = num * (double) genRand.Next(80, 120) * 0.01;
            for (int k = num5; k < num6; k++)
            {
                for (int l = num7; l < num8; l++)
                {
                    float num9 = Math.Abs((float) k - value.X);
                    float num10 = Math.Abs((float) l - value.Y);
                    double num11 = Math.Sqrt((double) (num9 * num9 + num10 * num10));
                    if (num11 < num2 * 0.4 && TileID.Sets.CanBeClearedDuringGeneration[Main.tile[k, l].type])
                    {
                        Main.tile[k, l].active(false);
                    }
                }
            }

            value += value2;
            value2.X += (float) genRand.Next(-10, 11) * 0.05f;
            value2.Y += (float) genRand.Next(-10, 11) * 0.05f;
            if (value2.X > (float) num3 + 0.5f)
            {
                value2.X = (float) num3 + 0.5f;
            }

            if (value2.X < (float) num3 - 0.5f)
            {
                value2.X = (float) num3 - 0.5f;
            }

            if (value2.Y > 2f)
            {
                value2.Y = 2f;
            }

            if (value2.Y < 0f)
            {
                value2.Y = 0f;
            }
        }

        if (steps > 0 && (double) (int) value.Y < Main.rockLayer + 50.0)
        {
            Cavinator((int) value.X, (int) value.Y, steps - 1);
        }
    }

    public static void CaveOpenater(int i, int j)
    {
        double num = (double) genRand.Next(7, 12);
        double num2 = num;
        int num3 = 1;
        if (genRand.Next(2) == 0)
        {
            num3 = -1;
        }

        Vector2 value = default(Vector2);
        value.X = (float) i;
        value.Y = (float) j;
        int num4 = 100;
        Vector2 value2 = default(Vector2);
        value2.Y = 0f;
        value2.X = (float) num3;
        while (num4 > 0)
        {
            if (Main.tile[(int) value.X, (int) value.Y].wall == 0)
            {
                num4 = 0;
            }

            num4--;
            int num5 = (int) ((double) value.X - num * 0.5);
            int num6 = (int) ((double) value.X + num * 0.5);
            int num7 = (int) ((double) value.Y - num * 0.5);
            int num8 = (int) ((double) value.Y + num * 0.5);
            if (num5 < 0)
            {
                num5 = 0;
            }

            if (num6 > Main.maxTilesX)
            {
                num6 = Main.maxTilesX;
            }

            if (num7 < 0)
            {
                num7 = 0;
            }

            if (num8 > Main.maxTilesY)
            {
                num8 = Main.maxTilesY;
            }

            num2 = num * (double) genRand.Next(80, 120) * 0.01;
            for (int k = num5; k < num6; k++)
            {
                for (int l = num7; l < num8; l++)
                {
                    float num9 = Math.Abs((float) k - value.X);
                    float num10 = Math.Abs((float) l - value.Y);
                    double num11 = Math.Sqrt((double) (num9 * num9 + num10 * num10));
                    if (num11 < num2 * 0.4)
                    {
                        Main.tile[k, l].active(false);
                    }
                }
            }

            value += value2;
            value2.X += (float) genRand.Next(-10, 11) * 0.05f;
            value2.Y += (float) genRand.Next(-10, 11) * 0.05f;
            if (value2.X > (float) num3 + 0.5f)
            {
                value2.X = (float) num3 + 0.5f;
            }

            if (value2.X < (float) num3 - 0.5f)
            {
                value2.X = (float) num3 - 0.5f;
            }

            if (value2.Y > 0f)
            {
                value2.Y = 0f;
            }

            if ((double) value2.Y < -0.5)
            {
                value2.Y = -0.5f;
            }
        }
    }

    public static void DiamondTileFrame(int i, int j)
    {
        TileFrame(i - 1, j, false, false);
        TileFrame(i, j - 1, false, false);
        TileFrame(i, j + 1, false, false);
        TileFrame(i + 1, j, false, false);
    }

    public static void SquareTileFrame(int i, int j, bool resetFrame = true)
    {
        TileFrame(i - 1, j - 1, false, false);
        TileFrame(i - 1, j, false, false);
        TileFrame(i - 1, j + 1, false, false);
        TileFrame(i, j - 1, false, false);
        TileFrame(i, j, resetFrame, false);
        TileFrame(i, j + 1, false, false);
        TileFrame(i + 1, j - 1, false, false);
        TileFrame(i + 1, j, false, false);
        TileFrame(i + 1, j + 1, false, false);
    }

    public static void SquareWallFrame(int i, int j, bool resetFrame = true)
    {
        Framing.WallFrame(i - 1, j - 1, false);
        Framing.WallFrame(i - 1, j, false);
        Framing.WallFrame(i - 1, j + 1, false);
        Framing.WallFrame(i, j - 1, false);
        Framing.WallFrame(i, j, resetFrame);
        Framing.WallFrame(i, j + 1, false);
        Framing.WallFrame(i + 1, j - 1, false);
        Framing.WallFrame(i + 1, j, false);
        Framing.WallFrame(i + 1, j + 1, false);
    }

    public static void SectionTileFrameWithCheck(int startX, int startY, int endX, int endY)
    {
        int sectionX = Netplay.GetSectionX(startX);
        int sectionY = Netplay.GetSectionY(startY);
        int sectionX2 = Netplay.GetSectionX(endX);
        int sectionY2 = Netplay.GetSectionY(endY);
        for (int i = sectionX; i <= sectionX2; i++)
        {
            for (int j = sectionY; j <= sectionY2; j++)
            {
                if (Main.sectionManager.SectionLoaded(i, j) && !Main.sectionManager.SectionFramed(i, j))
                {
                    SectionTileFrame(i, j, i, j);
                    if (Main.sectionManager.FrameSectionsLeft == 0)
                    {
                        return;
                    }
                }
            }
        }
    }

    public static void SectionTileFrame(int startX, int startY, int endX, int endY)
    {
        Main.mapTime = Main.mapTimeMax + 10;
        noMapUpdate = true;
        int num = startX * 200;
        int num2 = (endX + 1) * 200;
        int num3 = startY * 150;
        int num4 = (endY + 1) * 150;
        if (num < 1)
        {
            num = 1;
        }

        if (num3 < 1)
        {
            num3 = 1;
        }

        if (num > Main.maxTilesX - 2)
        {
            num = Main.maxTilesX - 2;
        }

        if (num3 > Main.maxTilesY - 2)
        {
            num3 = Main.maxTilesY - 2;
        }

        if (num2 > Main.maxTilesX - 2)
        {
            num2 = Main.maxTilesX - 2;
        }

        if (num4 > Main.maxTilesY - 2)
        {
            num4 = Main.maxTilesY - 2;
        }

        for (int i = num - 1; i < num2 + 1; i++)
        {
            for (int j = num3 - 1; j < num4 + 1; j++)
            {
                if (Main.tile[i, j] == null)
                {
                    Tile[,] tile = Main.tile;
                    int num5 = i;
                    int num6 = j;
                    Tile tile2 = new Tile();
                    tile[num5, num6] = tile2;
                }

                TileFrame(i, j, true, true);
                Framing.WallFrame(i, j, true);
            }
        }

        for (int k = startX; k <= endX; k++)
        {
            for (int l = startY; l <= endY; l++)
            {
                Main.sectionManager.SetSectionFramed(k, l);
            }
        }

        noMapUpdate = false;
    }

    public static void RangeFrame(int startX, int startY, int endX, int endY)
    {
        int num = endX + 1;
        int num2 = endY + 1;
        for (int i = startX - 1; i < num + 1; i++)
        {
            for (int j = startY - 1; j < num2 + 1; j++)
            {
                TileFrame(i, j, false, false);
                Framing.WallFrame(i, j, false);
            }
        }
    }

    public static void WaterCheck()
    {
        Liquid.numLiquid = 0;
        LiquidBuffer.numLiquidBuffer = 0;
        for (int i = 1; i < Main.maxTilesX - 1; i++)
        {
            for (int num = Main.maxTilesY - 2; num > 0; num--)
            {
                Tile tile = Main.tile[i, num];
                tile.checkingLiquid(false);
                if (tile.liquid > 0 && tile.nactive() && Main.tileSolid[tile.type] && !Main.tileSolidTop[tile.type])
                {
                    tile.liquid = 0;
                }
                else if (tile.liquid > 0)
                {
                    if (tile.active())
                    {
                        if (tile.lava())
                        {
                            if (TileObjectData.CheckLavaDeath(tile))
                            {
                                KillTile(i, num, false, false, false);
                            }
                        }
                        else if (TileObjectData.CheckWaterDeath(tile))
                        {
                            KillTile(i, num, false, false, false);
                        }
                    }

                    Tile tile2 = Main.tile[i, num + 1];
                    if ((!tile2.nactive() || !Main.tileSolid[tile2.type] || Main.tileSolidTop[tile2.type]) &&
                        tile2.liquid < 255)
                    {
                        if (tile2.liquid > 250)
                        {
                            tile2.liquid = byte.MaxValue;
                        }
                        else
                        {
                            Liquid.AddWater(i, num);
                        }
                    }

                    Tile tile3 = Main.tile[i - 1, num];
                    Tile tile4 = Main.tile[i + 1, num];
                    if ((!tile3.nactive() || !Main.tileSolid[tile3.type] || Main.tileSolidTop[tile3.type]) &&
                        tile3.liquid != tile.liquid)
                    {
                        Liquid.AddWater(i, num);
                    }
                    else if ((!tile4.nactive() || !Main.tileSolid[tile4.type] || Main.tileSolidTop[tile4.type]) &&
                             tile4.liquid != tile.liquid)
                    {
                        Liquid.AddWater(i, num);
                    }

                    if (tile.lava())
                    {
                        if (tile3.liquid > 0 && !tile3.lava())
                        {
                            Liquid.AddWater(i, num);
                        }
                        else if (tile4.liquid > 0 && !tile4.lava())
                        {
                            Liquid.AddWater(i, num);
                        }
                        else if (Main.tile[i, num - 1].liquid > 0 && !Main.tile[i, num - 1].lava())
                        {
                            Liquid.AddWater(i, num);
                        }
                        else if (tile2.liquid > 0 && !tile2.lava())
                        {
                            Liquid.AddWater(i, num);
                        }
                    }
                }
            }
        }
    }

    public static void EveryTileFrame()
    {
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.Start();
        noLiquidCheck = true;
        noTileActions = true;
        for (int i = 0; i < Main.maxTilesX; i++)
        {
            float num = (float) i / (float) Main.maxTilesX;
            Main.statusText = Lang.gen[55].Value + " " + (int) (num * 100f + 1f) + "%";
            for (int j = 0; j < Main.maxTilesY; j++)
            {
                if (Main.tile[i, j].active())
                {
                    TileFrame(i, j, true, false);
                }

                if (Main.tile[i, j].wall > 0)
                {
                    Framing.WallFrame(i, j, true);
                }
            }
        }

        noLiquidCheck = false;
        noTileActions = false;
        long elapsedMillisecond = stopwatch.ElapsedMilliseconds;
    }

    public static void PlantCheck(int i, int j)
    {
        int num = -1;
        int num2 = Main.tile[i, j].type;
        int maxTilesX = Main.maxTilesX;
        if (j + 1 >= Main.maxTilesY)
        {
            num = num2;
        }

        if (i - 1 >= 0 && Main.tile[i - 1, j] != null && Main.tile[i - 1, j].nactive())
        {
            ushort type = Main.tile[i - 1, j].type;
        }

        if (i + 1 < Main.maxTilesX && Main.tile[i + 1, j] != null && Main.tile[i + 1, j].nactive())
        {
            ushort type2 = Main.tile[i + 1, j].type;
        }

        if (j - 1 >= 0 && Main.tile[i, j - 1] != null && Main.tile[i, j - 1].nactive())
        {
            ushort type3 = Main.tile[i, j - 1].type;
        }

        if (j + 1 < Main.maxTilesY && Main.tile[i, j + 1] != null && Main.tile[i, j + 1].nactive() &&
            !Main.tile[i, j + 1].halfBrick() && Main.tile[i, j + 1].slope() == 0)
        {
            num = Main.tile[i, j + 1].type;
        }

        if (i - 1 >= 0 && j - 1 >= 0 && Main.tile[i - 1, j - 1] != null && Main.tile[i - 1, j - 1].nactive())
        {
            ushort type4 = Main.tile[i - 1, j - 1].type;
        }

        if (i + 1 < Main.maxTilesX && j - 1 >= 0 && Main.tile[i + 1, j - 1] != null &&
            Main.tile[i + 1, j - 1].nactive())
        {
            ushort type5 = Main.tile[i + 1, j - 1].type;
        }

        if (i - 1 >= 0 && j + 1 < Main.maxTilesY && Main.tile[i - 1, j + 1] != null &&
            Main.tile[i - 1, j + 1].nactive())
        {
            ushort type6 = Main.tile[i - 1, j + 1].type;
        }

        if (i + 1 < Main.maxTilesX && j + 1 < Main.maxTilesY && Main.tile[i + 1, j + 1] != null &&
            Main.tile[i + 1, j + 1].nactive())
        {
            ushort type7 = Main.tile[i + 1, j + 1].type;
        }

        if ((num2 == 3 && num != 2 && num != 78 && num != 380) || (num2 == 24 && num != 23) ||
            (num2 == 61 && num != 60) || (num2 == 71 && num != 70) ||
            (num2 == 73 && num != 2 && num != 78 && num != 380) || (num2 == 74 && num != 60) ||
            (num2 == 110 && num != 109) || (num2 == 113 && num != 109) || (num2 == 201 && num != 199))
        {
            if ((num2 == 3 || num2 == 73) && num != 2 && Main.tile[i, j].frameX >= 162)
            {
                Main.tile[i, j].frameX = 126;
            }

            if (num2 == 74 && num != 60 && Main.tile[i, j].frameX >= 162)
            {
                Main.tile[i, j].frameX = 126;
            }

            switch (num)
            {
                case 23:
                    num2 = 24;
                    if (Main.tile[i, j].frameX >= 162)
                    {
                        Main.tile[i, j].frameX = 126;
                    }

                    break;
                case 2:
                    num2 = ((num2 != 113) ? 3 : 73);
                    break;
                case 109:
                    num2 = ((num2 != 73) ? 110 : 113);
                    break;
                case 199:
                    num2 = 201;
                    break;
                case 70:
                    num2 = 71;
                    while (Main.tile[i, j].frameX > 72)
                    {
                        Main.tile[i, j].frameX -= 72;
                    }

                    break;
            }

            if (num2 != Main.tile[i, j].type)
            {
                Main.tile[i, j].type = (ushort) num2;
            }
            else
            {
                KillTile(i, j, false, false, false);
            }
        }
    }

    public static bool CheckPound(int i, int j)
    {
        if (Main.tile[i, j] == null)
        {
            Tile[,] tile = Main.tile;
            Tile tile2 = new Tile();
            tile[i, j] = tile2;
        }

        if (Main.tile[i, j - 1] == null)
        {
            Tile[,] tile3 = Main.tile;
            int num = j - 1;
            Tile tile4 = new Tile();
            tile3[i, num] = tile4;
        }

        if (Main.tile[i, j + 1] == null)
        {
            Tile[,] tile5 = Main.tile;
            int num2 = j + 1;
            Tile tile6 = new Tile();
            tile5[i, num2] = tile6;
        }

        switch (Main.tile[i, j].type)
        {
            case 10:
            case 48:
            case 137:
            case 138:
            case 232:
            case 380:
            case 387:
            case 388:
                return false;
            default:
                if (gen)
                {
                    if (Main.tile[i, j].type == 190)
                    {
                        return false;
                    }

                    if (Main.tile[i, j].type == 30)
                    {
                        return false;
                    }
                }

                if (Main.tile[i, j - 1].active())
                {
                    switch (Main.tile[i, j - 1].type)
                    {
                        case 5:
                        case 21:
                        case 26:
                        case 72:
                        case 77:
                        case 88:
                        case 235:
                        case 237:
                        case 323:
                        case 441:
                        case 467:
                        case 468:
                            return false;
                    }
                }

                return true;
        }
    }

    public static bool SlopeTile(int i, int j, int slope = 0)
    {
        if (!CheckPound(i, j))
        {
            return false;
        }

        Main.tile[i, j].halfBrick(false);
        Main.tile[i, j].slope((byte) slope);
        if (!gen)
        {
            KillTile(i, j, true, true, false);
            Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
            SquareTileFrame(i, j, true);
            if (Main.tile[i, j].slope() == 0)
            {
                Rectangle rectangle = new Rectangle(i * 16, j * 16, 16, 16);
                for (int k = 0; k < 255; k++)
                {
                    if (Main.player[k].active && !Main.player[k].dead && rectangle.Intersects(
                            new Rectangle((int) Main.player[k].position.X, (int) Main.player[k].position.Y,
                                Main.player[k].width, Main.player[k].height)))
                    {
                        Main.player[k].gfxOffY += Main.player[k].position.Y + (float) Main.player[k].height -
                                                  (float) rectangle.Y;
                        Main.player[k].position.Y = (float) (rectangle.Y - Main.player[k].height);
                    }
                }
            }
        }

        return true;
    }

    public static bool PoundTile(int i, int j)
    {
        if (!CheckPound(i, j))
        {
            return false;
        }

        if (!Main.tile[i, j].halfBrick())
        {
            Main.tile[i, j].halfBrick(true);
        }
        else
        {
            Main.tile[i, j].halfBrick(false);
        }

        if (!gen)
        {
            KillTile(i, j, true, true, false);
            Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0f);
            SquareTileFrame(i, j, true);
            if (!Main.tile[i, j].halfBrick())
            {
                Rectangle rectangle = new Rectangle(i * 16, j * 16, 16, 16);
                for (int k = 0; k < 255; k++)
                {
                    if (Main.player[k].active && !Main.player[k].dead && rectangle.Intersects(
                            new Rectangle((int) Main.player[k].position.X, (int) Main.player[k].position.Y,
                                Main.player[k].width, Main.player[k].height)))
                    {
                        Main.player[k].gfxOffY += Main.player[k].position.Y + (float) Main.player[k].height -
                                                  (float) rectangle.Y;
                        Main.player[k].position.Y = (float) (rectangle.Y - Main.player[k].height);
                    }
                }
            }
        }

        return true;
    }

    public static void PoundPlatform(int x, int y)
    {
        if (Main.tile[x, y].halfBrick())
        {
            PoundTile(x, y);
            if (Main.netMode == 1)
            {
                NetMessage.SendData(17, -1, -1, null, 7, (float) x, (float) y, 1f, 0, 0, 0);
            }
        }
        else
        {
            int num = 1;
            int slope = 2;
            if (TileID.Sets.Platforms[Main.tile[x + 1, y - 1].type] ||
                TileID.Sets.Platforms[Main.tile[x - 1, y + 1].type] || (SolidTile(x + 1, y) && !SolidTile(x - 1, y)))
            {
                num = 2;
                slope = 1;
            }

            if (Main.tile[x, y].slope() == 0)
            {
                SlopeTile(x, y, num);
                int num2 = Main.tile[x, y].slope();
                if (Main.netMode == 1)
                {
                    NetMessage.SendData(17, -1, -1, null, 14, (float) x, (float) y, (float) num2, 0, 0, 0);
                }
            }
            else if (Main.tile[x, y].slope() == num)
            {
                SlopeTile(x, y, slope);
                int num3 = Main.tile[x, y].slope();
                if (Main.netMode == 1)
                {
                    NetMessage.SendData(17, -1, -1, null, 14, (float) x, (float) y, (float) num3, 0, 0, 0);
                }
            }
            else
            {
                SlopeTile(x, y, 0);
                int num4 = Main.tile[x, y].slope();
                if (Main.netMode == 1)
                {
                    NetMessage.SendData(17, -1, -1, null, 14, (float) x, (float) y, (float) num4, 0, 0, 0);
                }

                PoundTile(x, y);
                if (Main.netMode == 1)
                {
                    NetMessage.SendData(17, -1, -1, null, 7, (float) x, (float) y, 1f, 0, 0, 0);
                }
            }
        }
    }

    public static int PlatformProperSides(int x, int y, bool acceptNonOpposing = false)
    {
        Tile tile = Main.tile[x, y];
        if (!tile.active() || !TileID.Sets.Platforms[tile.type])
        {
            return 0;
        }

        int num = tile.slope();
        int num2 = -1;
        if (num == 1)
        {
            num2 = 2;
        }

        if (num == 2)
        {
            num2 = 1;
        }

        int num3 = 0;
        int num4 = 1;
        int num5 = 0;
        if (num == 1)
        {
            num5 = 1;
        }

        if (num == 2)
        {
            num5 = -1;
        }

        if (acceptNonOpposing)
        {
            if (Main.tile[x + num4, y + num5].active() && TileID.Sets.Platforms[Main.tile[x + num4, y + num5].type] &&
                Main.tile[x + num4, y + num5].slope() != num2)
            {
                num3++;
            }
        }
        else if (Main.tile[x + num4, y + num5].active() && TileID.Sets.Platforms[Main.tile[x + num4, y + num5].type] &&
                 Main.tile[x + num4, y + num5].slope() == num)
        {
            num3++;
        }

        num4 *= -1;
        num5 *= -1;
        if (acceptNonOpposing)
        {
            if (Main.tile[x + num4, y + num5].active() && TileID.Sets.Platforms[Main.tile[x + num4, y + num5].type] &&
                Main.tile[x + num4, y + num5].slope() != num2)
            {
                num3++;
            }
        }
        else if (Main.tile[x + num4, y + num5].active() && TileID.Sets.Platforms[Main.tile[x + num4, y + num5].type] &&
                 Main.tile[x + num4, y + num5].slope() == num)
        {
            num3++;
        }

        return num3;
    }

    public static bool UpdateMapTile(int i, int j, bool addToList = true)
    {
        bool result = false;
        if (Main.mapEnabled && !noMapUpdate && !gen && Main.Map[i, j].Light > 0 && Main.Map.UpdateType(i, j) &&
            addToList)
        {
            result = true;
            if (MapHelper.numUpdateTile < MapHelper.maxUpdateTile - 1)
            {
                MapHelper.updateTileX[MapHelper.numUpdateTile] = (short) i;
                MapHelper.updateTileY[MapHelper.numUpdateTile] = (short) j;
                MapHelper.numUpdateTile++;
            }
            else
            {
                Main.refreshMap = true;
            }
        }

        return result;
    }

    public static void TileMergeAttemptFrametest(int i, int j, int myType, int lookfor, ref int up, ref int down,
        ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
    {
        if (up == lookfor)
        {
            TileFrame(i, j - 1, false, false);
            if (mergeDown)
            {
                up = myType;
            }
        }

        if (down == lookfor)
        {
            TileFrame(i, j + 1, false, false);
            if (mergeUp)
            {
                down = myType;
            }
        }

        if (left == lookfor)
        {
            TileFrame(i - 1, j, false, false);
            if (mergeRight)
            {
                left = myType;
            }
        }

        if (right == lookfor)
        {
            TileFrame(i + 1, j, false, false);
            if (mergeLeft)
            {
                right = myType;
            }
        }

        if (upLeft == lookfor)
        {
            upLeft = myType;
        }

        if (upRight == lookfor)
        {
            upRight = myType;
        }

        if (downLeft == lookfor)
        {
            downLeft = myType;
        }

        if (downRight == lookfor)
        {
            downRight = myType;
        }
    }

    public static void TileMergeAttemptFrametest(int i, int j, int myType, bool[] lookfor, ref int up, ref int down,
        ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
    {
        if (up > -1 && lookfor[up])
        {
            TileFrame(i, j - 1, false, false);
            if (mergeDown)
            {
                up = myType;
            }
        }

        if (down > -1 && lookfor[down])
        {
            TileFrame(i, j + 1, false, false);
            if (mergeUp)
            {
                down = myType;
            }
        }

        if (left > -1 && lookfor[left])
        {
            TileFrame(i - 1, j, false, false);
            if (mergeRight)
            {
                left = myType;
            }
        }

        if (right > -1 && lookfor[right])
        {
            TileFrame(i + 1, j, false, false);
            if (mergeLeft)
            {
                right = myType;
            }
        }

        if (upLeft > -1 && lookfor[upLeft])
        {
            upLeft = myType;
        }

        if (upRight > -1 && lookfor[upRight])
        {
            upRight = myType;
        }

        if (downLeft > -1 && lookfor[downLeft])
        {
            downLeft = myType;
        }

        if (downRight > -1 && lookfor[downRight])
        {
            downRight = myType;
        }
    }

    public static void TileMergeAttempt(int myType, int lookfor, ref int up, ref int down, ref int left, ref int right)
    {
        if (lookfor == up)
        {
            up = myType;
        }

        if (lookfor == down)
        {
            down = myType;
        }

        if (lookfor == left)
        {
            left = myType;
        }

        if (lookfor == right)
        {
            right = myType;
        }
    }

    public static void TileMergeAttempt(int myType, int lookfor, ref int up, ref int down, ref int left, ref int right,
        ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
    {
        if (lookfor == up)
        {
            up = myType;
        }

        if (lookfor == down)
        {
            down = myType;
        }

        if (lookfor == left)
        {
            left = myType;
        }

        if (lookfor == right)
        {
            right = myType;
        }

        if (lookfor == upLeft)
        {
            upLeft = myType;
        }

        if (lookfor == upRight)
        {
            upRight = myType;
        }

        if (lookfor == downLeft)
        {
            downLeft = myType;
        }

        if (lookfor == downRight)
        {
            downRight = myType;
        }
    }

    public static void TileMergeAttempt(int myType, bool[] lookfor, ref int up, ref int down, ref int left,
        ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
    {
        if (up > -1 && lookfor[up])
        {
            up = myType;
        }

        if (down > -1 && lookfor[down])
        {
            down = myType;
        }

        if (left > -1 && lookfor[left])
        {
            left = myType;
        }

        if (right > -1 && lookfor[right])
        {
            right = myType;
        }

        if (upLeft > -1 && lookfor[upLeft])
        {
            upLeft = myType;
        }

        if (upRight > -1 && lookfor[upRight])
        {
            upRight = myType;
        }

        if (downLeft > -1 && lookfor[downLeft])
        {
            downLeft = myType;
        }

        if (downRight > -1 && lookfor[downRight])
        {
            downRight = myType;
        }
    }

    public static void TileMergeAttempt(int myType, bool[] lookfor, bool[] exclude, ref int up, ref int down,
        ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
    {
        if (up > -1 && !exclude[up] && lookfor[up])
        {
            up = myType;
        }

        if (down > -1 && !exclude[down] && lookfor[down])
        {
            down = myType;
        }

        if (left > -1 && !exclude[left] && lookfor[left])
        {
            left = myType;
        }

        if (right > -1 && !exclude[right] && lookfor[right])
        {
            right = myType;
        }

        if (upLeft > -1 && !exclude[upLeft] && lookfor[upLeft])
        {
            upLeft = myType;
        }

        if (upRight > -1 && !exclude[upRight] && lookfor[upRight])
        {
            upRight = myType;
        }

        if (downLeft > -1 && !exclude[downLeft] && lookfor[downLeft])
        {
            downLeft = myType;
        }

        if (downRight > -1 && !exclude[downRight] && lookfor[downRight])
        {
            downRight = myType;
        }
    }

    public static void TileMergeAttemptWeird(int myType, int changeTo, bool[] exclude, ref int up, ref int down,
        ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
    {
        if (up > -1 && !exclude[up] && up != myType)
        {
            up = changeTo;
        }

        if (down > -1 && !exclude[down] && down != myType)
        {
            down = changeTo;
        }

        if (left > -1 && !exclude[left] && left != myType)
        {
            left = changeTo;
        }

        if (right > -1 && !exclude[right] && right != myType)
        {
            right = changeTo;
        }

        if (upLeft > -1 && !exclude[upLeft] && upLeft != myType)
        {
            upLeft = changeTo;
        }

        if (upRight > -1 && !exclude[upRight] && upRight != myType)
        {
            upRight = changeTo;
        }

        if (downLeft > -1 && !exclude[downLeft] && downLeft != myType)
        {
            downLeft = changeTo;
        }

        if (downRight > -1 && !exclude[downRight] && downRight != myType)
        {
            downRight = changeTo;
        }
    }

    public static void TileFrame(int i, int j, bool resetFrame = false, bool noBreak = false)
    {
        bool addToList = false;
        try
        {
            if (i > 5 && j > 5 && i < Main.maxTilesX - 5 && j < Main.maxTilesY - 5 && Main.tile[i, j] != null)
            {
                addToList = UpdateMapTile(i, j, true);
                Tile tile = Main.tile[i, j];
                if (!tile.active())
                {
                    tile.halfBrick(false);
                    tile.color(0);
                    tile.slope(0);
                }

                if (tile.liquid > 0 && Main.netMode != 1 && !noLiquidCheck)
                {
                    Liquid.AddWater(i, j);
                }

                if (tile.active())
                {
                    if (noBreak && Main.tileFrameImportant[tile.type] && tile.type != 4)
                    {
                        return;
                    }

                    int num = tile.type;
                    if (Main.tileStone[num])
                    {
                        num = 1;
                    }

                    int frameX = tile.frameX;
                    int frameY = tile.frameY;
                    Rectangle rectangle = new Rectangle(-1, -1, 0, 0);
                    Tile tile16;
                    Tile tile17;
                    Tile tile10;
                    Tile tile11;
                    Tile tile12;
                    Tile tile13;
                    Tile tile14;
                    Tile tile15;
                    if (Main.tileFrameImportant[tile.type])
                    {
                        int num46;
                        int num48;
                        int num47;
                        bool flag6;
                        bool flag5;
                        bool flag3;
                        bool flag7;
                        int num49;
                        bool flag4;
                        switch (num)
                        {
                            case 4:
                            {
                                tile16 = Main.tile[i, j - 1];
                                tile17 = Main.tile[i, j + 1];
                                tile10 = Main.tile[i - 1, j];
                                tile11 = Main.tile[i + 1, j];
                                tile12 = Main.tile[i - 1, j + 1];
                                tile13 = Main.tile[i + 1, j + 1];
                                tile14 = Main.tile[i - 1, j - 1];
                                tile15 = Main.tile[i + 1, j - 1];
                                short num31 = 0;
                                if (tile.frameX >= 66)
                                {
                                    num31 = 66;
                                }

                                int num32 = -1;
                                int num33 = -1;
                                int num34 = -1;
                                int num35 = -1;
                                int num36 = -1;
                                int num37 = -1;
                                int num38 = -1;
                                if (tile16 != null && tile16.active() && !tile16.bottomSlope())
                                {
                                    ushort type2 = tile16.type;
                                }

                                if (tile17 != null && tile17.active() && !tile17.halfBrick() && !tile17.topSlope())
                                {
                                    num32 = tile17.type;
                                }

                                if (tile10 != null && tile10.active() &&
                                    (tile10.slope() == 0 || (int) tile10.slope() % 2 != 1))
                                {
                                    num33 = tile10.type;
                                }

                                if (tile11 != null && tile11.active() &&
                                    (tile11.slope() == 0 || (int) tile11.slope() % 2 != 0))
                                {
                                    num34 = tile11.type;
                                }

                                if (tile12 != null && tile12.active())
                                {
                                    num35 = tile12.type;
                                }

                                if (tile13 != null && tile13.active())
                                {
                                    num36 = tile13.type;
                                }

                                if (tile14 != null && tile14.active())
                                {
                                    num37 = tile14.type;
                                }

                                if (tile15 != null && tile15.active())
                                {
                                    num38 = tile15.type;
                                }

                                if (num32 >= 0 && Main.tileSolid[num32] &&
                                    (!Main.tileNoAttach[num32] || TileID.Sets.Platforms[num32]))
                                {
                                    tile.frameX = num31;
                                }
                                else
                                {
                                    if (num33 < 0 || !Main.tileSolid[num33] || Main.tileNoAttach[num33])
                                    {
                                        switch (num33)
                                        {
                                            case 5:
                                                if (num37 == 5 && num35 == 5)
                                                {
                                                    break;
                                                }

                                                goto default;
                                            case 124:
                                                break;
                                            default:
                                                if (num34 < 0 || !Main.tileSolid[num34] || Main.tileNoAttach[num34])
                                                {
                                                    switch (num34)
                                                    {
                                                        case 5:
                                                            if (num38 == 5 && num36 == 5)
                                                            {
                                                                break;
                                                            }

                                                            goto default;
                                                        case 124:
                                                            break;
                                                        default:
                                                            if (tile.wall > 0)
                                                            {
                                                                tile.frameX = num31;
                                                            }
                                                            else
                                                            {
                                                                KillTile(i, j, false, false, false);
                                                            }

                                                            return;
                                                    }
                                                }

                                                tile.frameX = (short) (44 + num31);
                                                return;
                                        }
                                    }

                                    tile.frameX = (short) (22 + num31);
                                }

                                return;
                            }
                            case 442:
                            {
                                tile16 = Main.tile[i, j - 1];
                                tile17 = Main.tile[i, j + 1];
                                tile10 = Main.tile[i - 1, j];
                                tile11 = Main.tile[i + 1, j];
                                tile12 = Main.tile[i - 1, j + 1];
                                tile13 = Main.tile[i + 1, j + 1];
                                tile14 = Main.tile[i - 1, j - 1];
                                tile15 = Main.tile[i + 1, j - 1];
                                int num50 = -1;
                                int num51 = -1;
                                int num52 = -1;
                                num46 = -1;
                                int num53 = -1;
                                num48 = -1;
                                int num54 = -1;
                                num47 = -1;
                                if (tile16 != null && tile16.nactive() && !tile16.bottomSlope())
                                {
                                    num51 = tile16.type;
                                }

                                if (tile17 != null && tile17.nactive() && !tile17.halfBrick() && !tile17.topSlope())
                                {
                                    num50 = tile17.type;
                                }

                                if (tile10 != null && tile10.nactive() &&
                                    (tile10.slope() == 0 || (int) tile10.slope() % 2 != 1))
                                {
                                    num52 = tile10.type;
                                }

                                if (tile11 != null && tile11.nactive() &&
                                    (tile11.slope() == 0 || (int) tile11.slope() % 2 != 0))
                                {
                                    num46 = tile11.type;
                                }

                                if (tile12 != null && tile12.nactive())
                                {
                                    num53 = tile12.type;
                                }

                                if (tile13 != null && tile13.nactive())
                                {
                                    num48 = tile13.type;
                                }

                                if (tile14 != null && tile14.nactive())
                                {
                                    num54 = tile14.type;
                                }

                                if (tile15 != null && tile15.nactive())
                                {
                                    num47 = tile15.type;
                                }

                                flag6 = false;
                                flag5 = false;
                                flag3 = false;
                                flag7 = false;
                                if (num50 >= 0 && Main.tileSolid[num50] &&
                                    (!Main.tileNoAttach[num50] || TileID.Sets.Platforms[num50]) &&
                                    (tile17.bottomSlope() || tile17.slope() == 0) && !tile17.halfBrick())
                                {
                                    flag7 = true;
                                }

                                if (num51 >= 0 && Main.tileSolid[num51] &&
                                    (!Main.tileNoAttach[num51] ||
                                     (TileID.Sets.Platforms[num51] && tile16.halfBrick())) &&
                                    (tile16.topSlope() || tile16.slope() == 0 || tile16.halfBrick()))
                                {
                                    flag6 = true;
                                }

                                if (num52 < 0 || !Main.tileSolid[num52] || Main.tileNoAttach[num52] ||
                                    (!tile10.leftSlope() && tile10.slope() != 0) || tile10.halfBrick())
                                {
                                    switch (num52)
                                    {
                                        case 5:
                                            if (num54 == 5 && num53 == 5)
                                            {
                                                break;
                                            }

                                            goto IL_05d3;
                                        case 124:
                                            break;
                                        default:
                                            goto IL_05d3;
                                    }
                                }

                                flag5 = true;
                                goto IL_05d3;
                            }
                            case 136:
                            {
                                tile16 = Main.tile[i, j - 1];
                                tile17 = Main.tile[i, j + 1];
                                tile10 = Main.tile[i - 1, j];
                                tile11 = Main.tile[i + 1, j];
                                tile12 = Main.tile[i - 1, j + 1];
                                tile13 = Main.tile[i + 1, j + 1];
                                tile14 = Main.tile[i - 1, j - 1];
                                tile15 = Main.tile[i + 1, j - 1];
                                int num39 = -1;
                                int num40 = -1;
                                int num41 = -1;
                                int num42 = -1;
                                int num43 = -1;
                                int num44 = -1;
                                int num45 = -1;
                                if (tile16 != null && tile16.nactive())
                                {
                                    ushort type3 = tile16.type;
                                }

                                if (tile17 != null && tile17.nactive() && !tile17.halfBrick() && !tile17.topSlope())
                                {
                                    num39 = tile17.type;
                                }

                                if (tile10 != null && tile10.nactive())
                                {
                                    num40 = tile10.type;
                                }

                                if (tile11 != null && tile11.nactive())
                                {
                                    num41 = tile11.type;
                                }

                                if (tile12 != null && tile12.nactive())
                                {
                                    num42 = tile12.type;
                                }

                                if (tile13 != null && tile13.nactive())
                                {
                                    num43 = tile13.type;
                                }

                                if (tile14 != null && tile14.nactive())
                                {
                                    num44 = tile14.type;
                                }

                                if (tile15 != null && tile15.nactive())
                                {
                                    num45 = tile15.type;
                                }

                                if (num39 >= 0 && Main.tileSolid[num39] && !Main.tileNoAttach[num39] &&
                                    !tile17.halfBrick() && (tile17.slope() == 0 || tile17.bottomSlope()))
                                {
                                    tile.frameX = 0;
                                }
                                else
                                {
                                    if (num40 < 0 || !Main.tileSolid[num40] || Main.tileNoAttach[num40] ||
                                        (!tile10.leftSlope() && tile10.slope() != 0) || tile10.halfBrick())
                                    {
                                        switch (num40)
                                        {
                                            case 5:
                                                if (num44 == 5 && num42 == 5)
                                                {
                                                    break;
                                                }

                                                goto default;
                                            case 124:
                                                break;
                                            default:
                                                if (num41 < 0 || !Main.tileSolid[num41] || Main.tileNoAttach[num41] ||
                                                    (!tile11.rightSlope() && tile11.slope() != 0) || tile11.halfBrick())
                                                {
                                                    switch (num41)
                                                    {
                                                        case 5:
                                                            if (num45 == 5 && num43 == 5)
                                                            {
                                                                break;
                                                            }

                                                            goto default;
                                                        case 124:
                                                            break;
                                                        default:
                                                            if (tile.wall > 0)
                                                            {
                                                                tile.frameX = 54;
                                                            }
                                                            else
                                                            {
                                                                KillTile(i, j, false, false, false);
                                                            }

                                                            return;
                                                    }
                                                }

                                                tile.frameX = 36;
                                                return;
                                        }
                                    }

                                    tile.frameX = 18;
                                }

                                return;
                            }
                            case 129:
                            case 149:
                            {
                                tile16 = Main.tile[i, j - 1];
                                tile17 = Main.tile[i, j + 1];
                                tile10 = Main.tile[i - 1, j];
                                tile11 = Main.tile[i + 1, j];
                                int num27 = -1;
                                int num28 = -1;
                                int num29 = -1;
                                int num30 = -1;
                                if (tile16 != null && tile16.nactive() && !tile16.bottomSlope())
                                {
                                    num28 = tile16.type;
                                }

                                if (tile17 != null && tile17.nactive() && !tile17.halfBrick() && !tile17.topSlope())
                                {
                                    num27 = tile17.type;
                                }

                                if (tile10 != null && tile10.nactive())
                                {
                                    num29 = tile10.type;
                                }

                                if (tile11 != null && tile11.nactive())
                                {
                                    num30 = tile11.type;
                                }

                                if (num27 >= 0 && Main.tileSolid[num27] && !Main.tileSolidTop[num27])
                                {
                                    tile.frameY = 0;
                                }
                                else if (num29 >= 0 && Main.tileSolid[num29] && !Main.tileSolidTop[num29])
                                {
                                    tile.frameY = 54;
                                }
                                else if (num30 >= 0 && Main.tileSolid[num30] && !Main.tileSolidTop[num30])
                                {
                                    tile.frameY = 36;
                                }
                                else if (num28 >= 0 && Main.tileSolid[num28] && !Main.tileSolidTop[num28])
                                {
                                    tile.frameY = 18;
                                }
                                else
                                {
                                    KillTile(i, j, false, false, false);
                                }

                                return;
                            }
                            default:
                                switch (num)
                                {
                                    case 461:
                                        break;
                                    case 178:
                                    {
                                        tile16 = Main.tile[i, j - 1];
                                        tile17 = Main.tile[i, j + 1];
                                        tile10 = Main.tile[i - 1, j];
                                        tile11 = Main.tile[i + 1, j];
                                        int num22 = -1;
                                        int num23 = -1;
                                        int num24 = -1;
                                        int num25 = -1;
                                        if (tile16 != null && tile16.active() && !tile16.bottomSlope())
                                        {
                                            num23 = tile16.type;
                                        }

                                        if (tile17 != null && tile17.active() && !tile17.halfBrick() &&
                                            !tile17.topSlope())
                                        {
                                            num22 = tile17.type;
                                        }

                                        if (tile10 != null && tile10.active())
                                        {
                                            num24 = tile10.type;
                                        }

                                        if (tile11 != null && tile11.active())
                                        {
                                            num25 = tile11.type;
                                        }

                                        short num26 = (short) (genRand.Next(3) * 18);
                                        if (num22 >= 0 && Main.tileSolid[num22] && !Main.tileSolidTop[num22])
                                        {
                                            if (tile.frameY < 0 || tile.frameY > 36)
                                            {
                                                tile.frameY = num26;
                                            }
                                        }
                                        else if (num24 >= 0 && Main.tileSolid[num24] && !Main.tileSolidTop[num24])
                                        {
                                            if (tile.frameY < 108 || tile.frameY > 54)
                                            {
                                                tile.frameY = (short) (108 + num26);
                                            }
                                        }
                                        else if (num25 >= 0 && Main.tileSolid[num25] && !Main.tileSolidTop[num25])
                                        {
                                            if (tile.frameY < 162 || tile.frameY > 198)
                                            {
                                                tile.frameY = (short) (162 + num26);
                                            }
                                        }
                                        else if (num23 >= 0 && Main.tileSolid[num23] && !Main.tileSolidTop[num23])
                                        {
                                            if (tile.frameY < 54 || tile.frameY > 90)
                                            {
                                                tile.frameY = (short) (54 + num26);
                                            }
                                        }
                                        else
                                        {
                                            KillTile(i, j, false, false, false);
                                        }

                                        return;
                                    }
                                    case 184:
                                    {
                                        tile16 = Main.tile[i, j - 1];
                                        tile17 = Main.tile[i, j + 1];
                                        tile10 = Main.tile[i - 1, j];
                                        tile11 = Main.tile[i + 1, j];
                                        int num17 = -1;
                                        int num18 = -1;
                                        int num19 = -1;
                                        int num20 = -1;
                                        if (tile16 != null && tile16.active() && !tile16.bottomSlope())
                                        {
                                            num18 = tile16.type;
                                        }

                                        if (tile17 != null && tile17.active() && !tile17.halfBrick() &&
                                            !tile17.topSlope())
                                        {
                                            num17 = tile17.type;
                                        }

                                        if (tile10 != null && tile10.active())
                                        {
                                            num19 = tile10.type;
                                        }

                                        if (tile11 != null && tile11.active())
                                        {
                                            num20 = tile11.type;
                                        }

                                        short num21 = (short) (genRand.Next(3) * 18);
                                        if (num17 >= 0 && Main.tileMoss[num17])
                                        {
                                            if (num17 == 381)
                                            {
                                                tile.frameX = 110;
                                            }
                                            else
                                            {
                                                tile.frameX = (short) (22 * (num17 - 179));
                                            }

                                            if (tile.frameY < 0 || tile.frameY > 36)
                                            {
                                                tile.frameY = num21;
                                            }
                                        }
                                        else if (num18 >= 0 && Main.tileMoss[num18])
                                        {
                                            if (num18 == 381)
                                            {
                                                tile.frameX = 110;
                                            }
                                            else
                                            {
                                                tile.frameX = (short) (22 * (num18 - 179));
                                            }

                                            if (tile.frameY < 54 || tile.frameY > 90)
                                            {
                                                tile.frameY = (short) (54 + num21);
                                            }
                                        }
                                        else if (num19 >= 0 && Main.tileMoss[num19])
                                        {
                                            if (num19 == 381)
                                            {
                                                tile.frameX = 110;
                                            }
                                            else
                                            {
                                                tile.frameX = (short) (22 * (num19 - 179));
                                            }

                                            if (tile.frameY < 108 || tile.frameY > 54)
                                            {
                                                tile.frameY = (short) (108 + num21);
                                            }
                                        }
                                        else if (num20 >= 0 && Main.tileMoss[num20])
                                        {
                                            if (num20 == 381)
                                            {
                                                tile.frameX = 110;
                                            }
                                            else
                                            {
                                                tile.frameX = (short) (22 * (num20 - 179));
                                            }

                                            if (tile.frameY < 162 || tile.frameY > 198)
                                            {
                                                tile.frameY = (short) (162 + num21);
                                            }
                                        }
                                        else
                                        {
                                            KillTile(i, j, false, false, false);
                                        }

                                        return;
                                    }
                                    case 3:
                                    case 24:
                                    case 61:
                                    case 71:
                                    case 73:
                                    case 74:
                                    case 110:
                                    case 113:
                                    case 201:
                                        PlantCheck(i, j);
                                        return;
                                    case 227:
                                        CheckDye(i, j);
                                        return;
                                    case 12:
                                    case 31:
                                        CheckOrb(i, j, num);
                                        return;
                                    case 165:
                                        CheckTight(i, j);
                                        return;
                                    case 324:
                                        tile17 = Main.tile[i, j + 1];
                                        if (tile17 == null)
                                        {
                                            tile17 = new Tile();
                                            Main.tile[i, j + 1] = tile17;
                                        }

                                        if (!tile17.nactive() ||
                                            (!Main.tileSolid[tile17.type] && !Main.tileSolidTop[tile17.type]))
                                        {
                                            KillTile(i, j, false, false, false);
                                        }

                                        return;
                                    case 235:
                                        Check3x1(i, j, num);
                                        return;
                                    case 185:
                                        CheckPile(i, j);
                                        return;
                                    default:
                                        if (num != 296 && num != 297 && num != 309 && num != 358 && num != 359 &&
                                            num != 413 && num != 414)
                                        {
                                            if (num == 10)
                                            {
                                                if (!destroyObject)
                                                {
                                                    bool flag = false;
                                                    int frameY2 = tile.frameY;
                                                    int num2 = frameY2 / 54;
                                                    num2 += tile.frameX / 54 * 36;
                                                    int num3 = j - frameY2 % 54 / 18;
                                                    Tile tile2 = Main.tile[i, num3 - 1];
                                                    Tile tile3 = Main.tile[i, num3];
                                                    Tile tile4 = Main.tile[i, num3 + 1];
                                                    Tile tile5 = Main.tile[i, num3 + 2];
                                                    Tile tile6 = Main.tile[i, num3 + 3];
                                                    if (tile2 == null)
                                                    {
                                                        tile2 = new Tile();
                                                        Main.tile[i, num3 - 1] = tile2;
                                                    }

                                                    if (tile3 == null)
                                                    {
                                                        tile3 = new Tile();
                                                        Main.tile[i, num3] = tile3;
                                                    }

                                                    if (tile4 == null)
                                                    {
                                                        tile4 = new Tile();
                                                        Main.tile[i, num3 + 1] = tile4;
                                                    }

                                                    if (tile5 == null)
                                                    {
                                                        tile5 = new Tile();
                                                        Main.tile[i, num3 + 2] = tile5;
                                                    }

                                                    if (tile6 == null)
                                                    {
                                                        tile6 = new Tile();
                                                        Main.tile[i, num3 + 3] = tile6;
                                                    }

                                                    if (!tile2.active() || !Main.tileSolid[tile2.type])
                                                    {
                                                        flag = true;
                                                    }

                                                    if (!SolidTile(tile6))
                                                    {
                                                        flag = true;
                                                    }

                                                    if (!tile3.active() || tile3.type != num)
                                                    {
                                                        flag = true;
                                                    }

                                                    if (!tile4.active() || tile4.type != num)
                                                    {
                                                        flag = true;
                                                    }

                                                    if (!tile5.active() || tile5.type != num)
                                                    {
                                                        flag = true;
                                                    }

                                                    if (flag)
                                                    {
                                                        destroyObject = true;
                                                        KillTile(i, num3, false, false, false);
                                                        KillTile(i, num3 + 1, false, false, false);
                                                        KillTile(i, num3 + 2, false, false, false);
                                                        DropDoorItem(i, j, num2);
                                                    }

                                                    destroyObject = false;
                                                }
                                            }
                                            else if (num == 11)
                                            {
                                                if (!destroyObject)
                                                {
                                                    int num4 = 0;
                                                    int num5 = i;
                                                    int frameX2 = tile.frameX;
                                                    int frameY3 = tile.frameY;
                                                    int num6 = frameY3 / 54;
                                                    num6 += tile.frameX / 72 * 36;
                                                    int num7 = j - frameY3 % 54 / 18;
                                                    bool flag2 = false;
                                                    switch (frameX2 % 72)
                                                    {
                                                        case 0:
                                                            num5 = i;
                                                            num4 = 1;
                                                            break;
                                                        case 18:
                                                            num5 = i - 1;
                                                            num4 = 1;
                                                            break;
                                                        case 36:
                                                            num5 = i + 1;
                                                            num4 = -1;
                                                            break;
                                                        case 54:
                                                            num5 = i;
                                                            num4 = -1;
                                                            break;
                                                    }

                                                    Tile tile7 = Main.tile[num5, num7 - 1];
                                                    Tile tile8 = Main.tile[num5, num7 + 3];
                                                    if (tile7 == null)
                                                    {
                                                        tile7 = new Tile();
                                                        Main.tile[num5, num7 - 1] = tile7;
                                                    }

                                                    if (tile8 == null)
                                                    {
                                                        tile8 = new Tile();
                                                        Main.tile[num5, num7 + 3] = tile8;
                                                    }

                                                    if (!tile7.active() || !Main.tileSolid[tile7.type] ||
                                                        !SolidTile(tile8))
                                                    {
                                                        flag2 = true;
                                                        destroyObject = true;
                                                        DropDoorItem(i, j, num6);
                                                    }

                                                    int num8 = num5;
                                                    if (num4 == -1)
                                                    {
                                                        num8 = num5 - 1;
                                                    }

                                                    for (int k = num8; k < num8 + 2; k++)
                                                    {
                                                        for (int l = num7; l < num7 + 3; l++)
                                                        {
                                                            if (!flag2)
                                                            {
                                                                Tile tile9 = Main.tile[k, l];
                                                                if (!tile9.active() || tile9.type != 11)
                                                                {
                                                                    destroyObject = true;
                                                                    DropDoorItem(i, j, num6);
                                                                    flag2 = true;
                                                                    k = num8;
                                                                    l = num7;
                                                                }
                                                            }

                                                            if (flag2)
                                                            {
                                                                KillTile(k, l, false, false, false);
                                                            }
                                                        }
                                                    }

                                                    destroyObject = false;
                                                }
                                            }
                                            else if (num == 314)
                                            {
                                                Minecart.FrameTrack(i, j, false, false);
                                            }
                                            else if (num == 380)
                                            {
                                                tile10 = Main.tile[i - 1, j];
                                                if (tile10 != null)
                                                {
                                                    tile11 = Main.tile[i + 1, j];
                                                    if (tile11 != null)
                                                    {
                                                        tile12 = Main.tile[i - 1, j + 1];
                                                        if (tile12 != null)
                                                        {
                                                            tile13 = Main.tile[i + 1, j + 1];
                                                            if (tile13 != null)
                                                            {
                                                                tile14 = Main.tile[i - 1, j - 1];
                                                                if (tile14 != null)
                                                                {
                                                                    tile15 = Main.tile[i + 1, j - 1];
                                                                    if (tile15 != null)
                                                                    {
                                                                        int num9 = -1;
                                                                        int num10 = -1;
                                                                        if (tile10 != null && tile10.active())
                                                                        {
                                                                            num10 = (Main.tileStone[tile10.type]
                                                                                ? 1
                                                                                : tile10.type);
                                                                        }

                                                                        if (tile11 != null && tile11.active())
                                                                        {
                                                                            num9 = (Main.tileStone[tile11.type]
                                                                                ? 1
                                                                                : tile11.type);
                                                                        }

                                                                        if (num9 >= 0 && !Main.tileSolid[num9])
                                                                        {
                                                                            num9 = -1;
                                                                        }

                                                                        if (num10 >= 0 && !Main.tileSolid[num10])
                                                                        {
                                                                            num10 = -1;
                                                                        }

                                                                        if (num10 == num && num9 == num)
                                                                        {
                                                                            rectangle.X = 18;
                                                                        }
                                                                        else if (num10 == num && num9 != num)
                                                                        {
                                                                            rectangle.X = 36;
                                                                        }
                                                                        else if (num10 != num && num9 == num)
                                                                        {
                                                                            rectangle.X = 0;
                                                                        }
                                                                        else
                                                                        {
                                                                            rectangle.X = 54;
                                                                        }

                                                                        tile.frameX = (short) rectangle.X;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else if (num >= 0 && TileID.Sets.Platforms[num])
                                            {
                                                tile10 = Main.tile[i - 1, j];
                                                if (tile10 != null)
                                                {
                                                    tile11 = Main.tile[i + 1, j];
                                                    if (tile11 != null)
                                                    {
                                                        tile12 = Main.tile[i - 1, j + 1];
                                                        if (tile12 != null)
                                                        {
                                                            tile13 = Main.tile[i + 1, j + 1];
                                                            if (tile13 != null)
                                                            {
                                                                tile14 = Main.tile[i - 1, j - 1];
                                                                if (tile14 != null)
                                                                {
                                                                    tile15 = Main.tile[i + 1, j - 1];
                                                                    if (tile15 != null)
                                                                    {
                                                                        int num11 = -1;
                                                                        int num12 = -1;
                                                                        if (tile10 != null && tile10.active())
                                                                        {
                                                                            num12 = (Main.tileStone[tile10.type]
                                                                                ? 1
                                                                                : ((!TileID.Sets.Platforms[tile10.type])
                                                                                    ? tile10.type
                                                                                    : num));
                                                                        }

                                                                        if (tile11 != null && tile11.active())
                                                                        {
                                                                            num11 = (Main.tileStone[tile11.type]
                                                                                ? 1
                                                                                : ((!TileID.Sets.Platforms[tile11.type])
                                                                                    ? tile11.type
                                                                                    : num));
                                                                        }

                                                                        if (num11 >= 0 && !Main.tileSolid[num11])
                                                                        {
                                                                            num11 = -1;
                                                                        }

                                                                        if (num12 >= 0 && !Main.tileSolid[num12])
                                                                        {
                                                                            num12 = -1;
                                                                        }

                                                                        if (num12 == num && tile10.halfBrick() !=
                                                                            tile.halfBrick())
                                                                        {
                                                                            num12 = -1;
                                                                        }

                                                                        if (num11 == num && tile11.halfBrick() !=
                                                                            tile.halfBrick())
                                                                        {
                                                                            num11 = -1;
                                                                        }

                                                                        if (num12 != -1 && num12 != num &&
                                                                            tile.halfBrick())
                                                                        {
                                                                            num12 = -1;
                                                                        }

                                                                        if (num11 != -1 && num11 != num &&
                                                                            tile.halfBrick())
                                                                        {
                                                                            num11 = -1;
                                                                        }

                                                                        if (num12 == -1 && tile14.active() &&
                                                                            tile14.type == num && tile14.slope() == 1)
                                                                        {
                                                                            num12 = num;
                                                                        }

                                                                        if (num11 == -1 && tile15.active() &&
                                                                            tile15.type == num && tile15.slope() == 2)
                                                                        {
                                                                            num11 = num;
                                                                        }

                                                                        if (num12 == num && tile10.slope() == 2 &&
                                                                            num11 != num)
                                                                        {
                                                                            num11 = -1;
                                                                        }

                                                                        if (num11 == num && tile11.slope() == 1 &&
                                                                            num12 != num)
                                                                        {
                                                                            num12 = -1;
                                                                        }

                                                                        if (tile.slope() == 1)
                                                                        {
                                                                            if (TileID.Sets.Platforms[tile11.type] &&
                                                                                tile11.slope() == 0)
                                                                            {
                                                                                rectangle.X = 468;
                                                                            }
                                                                            else if (!tile13.active() &&
                                                                                     (!TileID.Sets.Platforms[
                                                                                          tile13.type] ||
                                                                                      tile13.slope() == 2))
                                                                            {
                                                                                if (!tile10.active() &&
                                                                                    (!TileID.Sets
                                                                                         .Platforms[tile14.type] ||
                                                                                     tile14.slope() != 1))
                                                                                {
                                                                                    rectangle.X = 432;
                                                                                }
                                                                                else
                                                                                {
                                                                                    rectangle.X = 360;
                                                                                }
                                                                            }
                                                                            else if (!tile10.active() &&
                                                                                     (!TileID.Sets.Platforms[
                                                                                          tile14.type] ||
                                                                                      tile14.slope() != 1))
                                                                            {
                                                                                rectangle.X = 396;
                                                                            }
                                                                            else
                                                                            {
                                                                                rectangle.X = 180;
                                                                            }
                                                                        }
                                                                        else if (tile.slope() == 2)
                                                                        {
                                                                            if (TileID.Sets.Platforms[tile10.type] &&
                                                                                tile10.slope() == 0)
                                                                            {
                                                                                rectangle.X = 450;
                                                                            }
                                                                            else if (!tile12.active() &&
                                                                                     (!TileID.Sets.Platforms[
                                                                                          tile12.type] ||
                                                                                      tile12.slope() == 1))
                                                                            {
                                                                                if (!tile11.active() &&
                                                                                    (!TileID.Sets
                                                                                         .Platforms[tile15.type] ||
                                                                                     tile15.slope() != 2))
                                                                                {
                                                                                    rectangle.X = 414;
                                                                                }
                                                                                else
                                                                                {
                                                                                    rectangle.X = 342;
                                                                                }
                                                                            }
                                                                            else if (!tile11.active() &&
                                                                                     (!TileID.Sets.Platforms[
                                                                                          tile15.type] ||
                                                                                      tile15.slope() != 2))
                                                                            {
                                                                                rectangle.X = 378;
                                                                            }
                                                                            else
                                                                            {
                                                                                rectangle.X = 144;
                                                                            }
                                                                        }
                                                                        else if (num12 == num && num11 == num)
                                                                        {
                                                                            if (tile10.slope() == 2 &&
                                                                                tile11.slope() == 1)
                                                                            {
                                                                                rectangle.X = 252;
                                                                            }
                                                                            else if (tile10.slope() == 2)
                                                                            {
                                                                                rectangle.X = 216;
                                                                            }
                                                                            else if (tile11.slope() == 1)
                                                                            {
                                                                                rectangle.X = 234;
                                                                            }
                                                                            else
                                                                            {
                                                                                rectangle.X = 0;
                                                                            }
                                                                        }
                                                                        else if (num12 == num && num11 == -1)
                                                                        {
                                                                            if (tile10.slope() == 2)
                                                                            {
                                                                                rectangle.X = 270;
                                                                            }
                                                                            else
                                                                            {
                                                                                rectangle.X = 18;
                                                                            }
                                                                        }
                                                                        else if (num12 == -1 && num11 == num)
                                                                        {
                                                                            if (tile11.slope() == 1)
                                                                            {
                                                                                rectangle.X = 288;
                                                                            }
                                                                            else
                                                                            {
                                                                                rectangle.X = 36;
                                                                            }
                                                                        }
                                                                        else if (num12 != num && num11 == num)
                                                                        {
                                                                            rectangle.X = 54;
                                                                        }
                                                                        else if (num12 == num && num11 != num)
                                                                        {
                                                                            rectangle.X = 72;
                                                                        }
                                                                        else if (num12 != num && num12 != -1 &&
                                                                                 num11 == -1)
                                                                        {
                                                                            rectangle.X = 108;
                                                                        }
                                                                        else if (num12 == -1 && num11 != num &&
                                                                                 num11 != -1)
                                                                        {
                                                                            rectangle.X = 126;
                                                                        }
                                                                        else
                                                                        {
                                                                            rectangle.X = 90;
                                                                        }

                                                                        tile.frameX = (short) rectangle.X;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                switch (num)
                                                {
                                                    case 233:
                                                    case 236:
                                                    case 238:
                                                        CheckJunglePlant(i, j, num);
                                                        return;
                                                    case 240:
                                                    case 440:
                                                        Check3x3Wall(i, j);
                                                        return;
                                                    case 245:
                                                        Check2x3Wall(i, j);
                                                        return;
                                                    case 246:
                                                        Check3x2Wall(i, j);
                                                        return;
                                                    case 241:
                                                        Check4x3Wall(i, j);
                                                        return;
                                                    case 242:
                                                        Check6x4Wall(i, j);
                                                        return;
                                                    case 464:
                                                    case 466:
                                                        Check5x4(i, j, num);
                                                        return;
                                                    case 334:
                                                        CheckWeaponsRack(i, j);
                                                        return;
                                                    case 34:
                                                    case 454:
                                                        CheckChand(i, j, num);
                                                        return;
                                                    default:
                                                        switch (num)
                                                        {
                                                            case 354:
                                                            case 355:
                                                            case 406:
                                                            case 412:
                                                            case 452:
                                                            case 455:
                                                                break;
                                                            case 15:
                                                            case 20:
                                                            case 216:
                                                            case 338:
                                                            case 390:
                                                                Check1x2(i, j, (ushort) num);
                                                                return;
                                                            default:
                                                                if (num < 391 || num > 394)
                                                                {
                                                                    switch (num)
                                                                    {
                                                                        case 405:
                                                                            break;
                                                                        case 36:
                                                                        case 135:
                                                                        case 141:
                                                                        case 144:
                                                                        case 210:
                                                                        case 239:
                                                                        case 428:
                                                                            Check1x1(i, j, num);
                                                                            return;
                                                                        case 419:
                                                                        case 420:
                                                                        case 423:
                                                                        case 424:
                                                                        case 429:
                                                                        case 445:
                                                                            CheckLogicTiles(i, j, num);
                                                                            return;
                                                                        case 16:
                                                                        case 18:
                                                                        case 29:
                                                                        case 103:
                                                                        case 134:
                                                                        case 462:
                                                                            Check2x1(i, j, (ushort) num);
                                                                            return;
                                                                        case 13:
                                                                        case 33:
                                                                        case 50:
                                                                        case 78:
                                                                        case 174:
                                                                        case 372:
                                                                            CheckOnTable1x1(i, j, (byte) num);
                                                                            return;
                                                                        default:
                                                                            if (TileID.Sets.BasicChest[num])
                                                                            {
                                                                                CheckChest(i, j, num);
                                                                            }
                                                                            else
                                                                            {
                                                                                switch (num)
                                                                                {
                                                                                    case 128:
                                                                                        CheckMan(i, j);
                                                                                        break;
                                                                                    case 269:
                                                                                        CheckWoman(i, j);
                                                                                        break;
                                                                                    case 27:
                                                                                        CheckSunflower(i, j, 27);
                                                                                        break;
                                                                                    case 28:
                                                                                        CheckPot(i, j, 28);
                                                                                        break;
                                                                                    case 171:
                                                                                        CheckXmasTree(i, j);
                                                                                        break;
                                                                                    default:
                                                                                        if (!TileID.Sets.BasicChestFake[
                                                                                                num] && num != 457)
                                                                                        {
                                                                                            if (num == 335 || num == 411
                                                                                            )
                                                                                            {
                                                                                                Check2x2(i, j, num);
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if (num != 132 &&
                                                                                                    num != 138 &&
                                                                                                    num != 142 &&
                                                                                                    num != 143 &&
                                                                                                    (num < 288 ||
                                                                                                     num > 295) &&
                                                                                                    (num < 316 ||
                                                                                                     num > 318))
                                                                                                {
                                                                                                    switch (num)
                                                                                                    {
                                                                                                        case 172:
                                                                                                        case 360:
                                                                                                            break;
                                                                                                        case 376:
                                                                                                        case 443:
                                                                                                        case 444:
                                                                                                            CheckSuper(
                                                                                                                i, j,
                                                                                                                num);
                                                                                                            return;
                                                                                                        case 91:
                                                                                                            CheckBanner(
                                                                                                                i, j,
                                                                                                                (byte)
                                                                                                                num);
                                                                                                            return;
                                                                                                        case 35:
                                                                                                        case 139:
                                                                                                            CheckMB(i,
                                                                                                                j,
                                                                                                                (byte)
                                                                                                                num);
                                                                                                            return;
                                                                                                        case 386:
                                                                                                        case 387:
                                                                                                            CheckTrapDoor(
                                                                                                                i, j,
                                                                                                                num);
                                                                                                            return;
                                                                                                        case 388:
                                                                                                        case 389:
                                                                                                            CheckTallGate(
                                                                                                                i, j,
                                                                                                                num);
                                                                                                            return;
                                                                                                        case 92:
                                                                                                        case 93:
                                                                                                        case 453:
                                                                                                            Check1xX(i,
                                                                                                                j,
                                                                                                                (short)
                                                                                                                num);
                                                                                                            return;
                                                                                                        case 104:
                                                                                                        case 105:
                                                                                                        case 207:
                                                                                                        case 320:
                                                                                                        case 337:
                                                                                                        case 349:
                                                                                                        case 356:
                                                                                                        case 378:
                                                                                                        case 410:
                                                                                                        case 456:
                                                                                                        case 465:
                                                                                                            Check2xX(i,
                                                                                                                j,
                                                                                                                (ushort)
                                                                                                                num);
                                                                                                            return;
                                                                                                        case 101:
                                                                                                        case 102:
                                                                                                        case 463:
                                                                                                            Check3x4(i,
                                                                                                                j, num);
                                                                                                            return;
                                                                                                        case 42:
                                                                                                        case 270:
                                                                                                        case 271:
                                                                                                            Check1x2Top(
                                                                                                                i, j,
                                                                                                                (ushort)
                                                                                                                num);
                                                                                                            return;
                                                                                                        case 55:
                                                                                                        case 85:
                                                                                                        case 395:
                                                                                                        case 425:
                                                                                                            CheckSign(i,
                                                                                                                j,
                                                                                                                (ushort)
                                                                                                                num);
                                                                                                            return;
                                                                                                        case 209:
                                                                                                            CheckCannon(
                                                                                                                i, j,
                                                                                                                num);
                                                                                                            return;
                                                                                                        case 79:
                                                                                                        case 90:
                                                                                                            Check4x2(i,
                                                                                                                j, num);
                                                                                                            return;
                                                                                                        case 94:
                                                                                                        case 95:
                                                                                                        case 97:
                                                                                                        case 98:
                                                                                                        case 99:
                                                                                                        case 100:
                                                                                                        case 125:
                                                                                                        case 126:
                                                                                                        case 173:
                                                                                                        case 282:
                                                                                                        case 287:
                                                                                                        case 319:
                                                                                                            Check2x2(i,
                                                                                                                j, num);
                                                                                                            return;
                                                                                                        case 96:
                                                                                                            Check2x2Style(
                                                                                                                i, j,
                                                                                                                num);
                                                                                                            return;
                                                                                                        case 81:
                                                                                                        {
                                                                                                            tile16 =
                                                                                                                Main
                                                                                                                    .tile
                                                                                                                    [i,
                                                                                                                        j -
                                                                                                                        1];
                                                                                                            tile17 =
                                                                                                                Main
                                                                                                                    .tile
                                                                                                                    [i,
                                                                                                                        j +
                                                                                                                        1];
                                                                                                            tile10 =
                                                                                                                Main
                                                                                                                    .tile
                                                                                                                    [i - 1,
                                                                                                                        j];
                                                                                                            tile11 =
                                                                                                                Main
                                                                                                                    .tile
                                                                                                                    [i + 1,
                                                                                                                        j];
                                                                                                            int num15 =
                                                                                                                -1;
                                                                                                            int num16 =
                                                                                                                -1;
                                                                                                            if (
                                                                                                                tile16 !=
                                                                                                                null &&
                                                                                                                tile16
                                                                                                                    .active()
                                                                                                            )
                                                                                                            {
                                                                                                                num16 =
                                                                                                                    tile16
                                                                                                                        .type;
                                                                                                            }

                                                                                                            if (
                                                                                                                tile17 !=
                                                                                                                null &&
                                                                                                                tile17
                                                                                                                    .active()
                                                                                                            )
                                                                                                            {
                                                                                                                num15 =
                                                                                                                    tile17
                                                                                                                        .type;
                                                                                                            }

                                                                                                            if (num16 !=
                                                                                                                -1)
                                                                                                            {
                                                                                                                KillTile(
                                                                                                                    i,
                                                                                                                    j,
                                                                                                                    false,
                                                                                                                    false,
                                                                                                                    false);
                                                                                                            }
                                                                                                            else if (
                                                                                                                num15 <
                                                                                                                0 ||
                                                                                                                !Main
                                                                                                                    .tileSolid
                                                                                                                        [num15] ||
                                                                                                                tile17
                                                                                                                    .halfBrick() ||
                                                                                                                tile17
                                                                                                                    .topSlope()
                                                                                                            )
                                                                                                            {
                                                                                                                KillTile(
                                                                                                                    i,
                                                                                                                    j,
                                                                                                                    false,
                                                                                                                    false,
                                                                                                                    false);
                                                                                                            }

                                                                                                            return;
                                                                                                        }
                                                                                                        default:
                                                                                                            if (Main
                                                                                                                .tileAlch
                                                                                                                    [num]
                                                                                                            )
                                                                                                            {
                                                                                                                CheckAlch(
                                                                                                                    i,
                                                                                                                    j);
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                switch (
                                                                                                                    num)
                                                                                                                {
                                                                                                                    case
                                                                                                                        72
                                                                                                                        :
                                                                                                                    {
                                                                                                                        tile16
                                                                                                                            = Main
                                                                                                                                .tile
                                                                                                                                [i,
                                                                                                                                    j -
                                                                                                                                    1];
                                                                                                                        tile17
                                                                                                                            = Main
                                                                                                                                .tile
                                                                                                                                [i,
                                                                                                                                    j +
                                                                                                                                    1];
                                                                                                                        int
                                                                                                                            num13
                                                                                                                                = -
                                                                                                                                    1;
                                                                                                                        int
                                                                                                                            num14
                                                                                                                                = -
                                                                                                                                    1;
                                                                                                                        if
                                                                                                                        (tile16 !=
                                                                                                                         null &&
                                                                                                                         tile16
                                                                                                                             .active()
                                                                                                                        )
                                                                                                                        {
                                                                                                                            num14
                                                                                                                                = tile16
                                                                                                                                    .type;
                                                                                                                        }

                                                                                                                        if
                                                                                                                        (tile17 !=
                                                                                                                         null &&
                                                                                                                         tile17
                                                                                                                             .active()
                                                                                                                        )
                                                                                                                        {
                                                                                                                            num13
                                                                                                                                = tile17
                                                                                                                                    .type;
                                                                                                                        }

                                                                                                                        if
                                                                                                                        (num13 !=
                                                                                                                         num &&
                                                                                                                         num13 !=
                                                                                                                         70
                                                                                                                        )
                                                                                                                        {
                                                                                                                            KillTile(
                                                                                                                                i,
                                                                                                                                j,
                                                                                                                                false,
                                                                                                                                false,
                                                                                                                                false);
                                                                                                                        }
                                                                                                                        else if
                                                                                                                        (num14 !=
                                                                                                                         num &&
                                                                                                                         tile
                                                                                                                             .frameX ==
                                                                                                                         0)
                                                                                                                        {
                                                                                                                            tile
                                                                                                                                .frameNumber(
                                                                                                                                    (byte
                                                                                                                                    ) genRand
                                                                                                                                        .Next(
                                                                                                                                            3));
                                                                                                                            if
                                                                                                                            (tile
                                                                                                                                 .frameNumber() ==
                                                                                                                             0)
                                                                                                                            {
                                                                                                                                tile
                                                                                                                                        .frameX
                                                                                                                                    = 18;
                                                                                                                                tile
                                                                                                                                        .frameY
                                                                                                                                    = 0;
                                                                                                                            }

                                                                                                                            if
                                                                                                                            (tile
                                                                                                                                 .frameNumber() ==
                                                                                                                             1)
                                                                                                                            {
                                                                                                                                tile
                                                                                                                                        .frameX
                                                                                                                                    = 18;
                                                                                                                                tile
                                                                                                                                        .frameY
                                                                                                                                    = 18;
                                                                                                                            }

                                                                                                                            if
                                                                                                                            (tile
                                                                                                                                 .frameNumber() ==
                                                                                                                             2)
                                                                                                                            {
                                                                                                                                tile
                                                                                                                                        .frameX
                                                                                                                                    = 18;
                                                                                                                                tile
                                                                                                                                        .frameY
                                                                                                                                    = 36;
                                                                                                                            }
                                                                                                                        }

                                                                                                                        break;
                                                                                                                    }
                                                                                                                    case
                                                                                                                        5:
                                                                                                                        CheckTree(
                                                                                                                            i,
                                                                                                                            j);
                                                                                                                        break;
                                                                                                                    case
                                                                                                                        323
                                                                                                                        :
                                                                                                                        CheckPalmTree(
                                                                                                                            i,
                                                                                                                            j);
                                                                                                                        break;
                                                                                                                }
                                                                                                            }

                                                                                                            return;
                                                                                                    }
                                                                                                }

                                                                                                Check2x2(i, j, num);
                                                                                            }

                                                                                            break;
                                                                                        }

                                                                                        goto case 254;
                                                                                    case 254:
                                                                                        Check2x2Style(i, j, num);
                                                                                        break;
                                                                                }
                                                                            }

                                                                            return;
                                                                    }
                                                                }

                                                                goto case 14;
                                                            case 14:
                                                            case 17:
                                                            case 26:
                                                            case 77:
                                                            case 86:
                                                            case 87:
                                                            case 88:
                                                            case 89:
                                                            case 114:
                                                            case 133:
                                                            case 186:
                                                            case 187:
                                                            case 215:
                                                            case 217:
                                                            case 218:
                                                            case 237:
                                                            case 244:
                                                            case 285:
                                                            case 286:
                                                            case 298:
                                                            case 299:
                                                            case 310:
                                                            case 339:
                                                            case 361:
                                                            case 362:
                                                            case 363:
                                                            case 364:
                                                            case 377:
                                                            case 469:
                                                                Check3x2(i, j, (ushort) num);
                                                                return;
                                                        }

                                                        break;
                                                    case 106:
                                                    case 212:
                                                    case 219:
                                                    case 220:
                                                    case 228:
                                                    case 231:
                                                    case 243:
                                                    case 247:
                                                    case 283:
                                                    case 300:
                                                    case 301:
                                                    case 302:
                                                    case 303:
                                                    case 304:
                                                    case 305:
                                                    case 306:
                                                    case 307:
                                                    case 308:
                                                        break;
                                                }

                                                Check3x3(i, j, (ushort) num);
                                            }

                                            return;
                                        }

                                        goto case 275;
                                    case 275:
                                    case 276:
                                    case 277:
                                    case 278:
                                    case 279:
                                    case 280:
                                    case 281:
                                        Check6x3(i, j, num);
                                        return;
                                }

                                break;
                            case 373:
                            case 374:
                            case 375:
                                break;
                                IL_05d3:
                                if (num46 < 0 || !Main.tileSolid[num46] || Main.tileNoAttach[num46] ||
                                    (!tile11.rightSlope() && tile11.slope() != 0) || tile11.halfBrick())
                                {
                                    switch (num46)
                                    {
                                        case 5:
                                            if (num47 == 5 && num48 == 5)
                                            {
                                                break;
                                            }

                                            goto IL_061f;
                                        case 124:
                                            break;
                                        default:
                                            goto IL_061f;
                                    }
                                }

                                flag3 = true;
                                goto IL_061f;
                                IL_061f:
                                num49 = tile.frameX / 22;
                                flag4 = false;
                                switch (num49)
                                {
                                    case 0:
                                        flag4 = !flag7;
                                        break;
                                    case 1:
                                        flag4 = !flag6;
                                        break;
                                    case 2:
                                        flag4 = !flag5;
                                        break;
                                    case 3:
                                        flag4 = !flag3;
                                        break;
                                    default:
                                        flag4 = true;
                                        break;
                                }

                                if (flag4)
                                {
                                    if (flag7)
                                    {
                                        tile.frameX = 0;
                                    }
                                    else if (flag6)
                                    {
                                        tile.frameX = 22;
                                    }
                                    else if (flag5)
                                    {
                                        tile.frameX = 44;
                                    }
                                    else if (flag3)
                                    {
                                        tile.frameX = 66;
                                    }
                                    else
                                    {
                                        KillTile(i, j, false, false, false);
                                    }
                                }

                                return;
                        }

                        tile16 = Main.tile[i, j - 1];
                        if (tile16 == null || !tile16.active() || tile16.bottomSlope() ||
                            !Main.tileSolid[tile16.type] || Main.tileSolidTop[tile16.type])
                        {
                            KillTile(i, j, false, false, false);
                        }

                        return;
                    }

                    if ((num >= 255 && num <= 268) || num == 385 || (num >= 446 && num <= 448))
                    {
                        Framing.SelfFrame8Way(i, j, tile, resetFrame);
                        return;
                    }

                    tile16 = Main.tile[i, j - 1];
                    tile17 = Main.tile[i, j + 1];
                    tile10 = Main.tile[i - 1, j];
                    tile11 = Main.tile[i + 1, j];
                    tile12 = Main.tile[i - 1, j + 1];
                    tile13 = Main.tile[i + 1, j + 1];
                    tile14 = Main.tile[i - 1, j - 1];
                    tile15 = Main.tile[i + 1, j - 1];
                    int upLeft = -1;
                    int up = -1;
                    int upRight = -1;
                    int left = -1;
                    int right = -1;
                    int downLeft = -1;
                    int down = -1;
                    int downRight = -1;
                    if (tile10 != null && tile10.active())
                    {
                        left = (Main.tileStone[tile10.type] ? 1 : tile10.type);
                        if (tile10.slope() == 1 || tile10.slope() == 3)
                        {
                            left = -1;
                        }
                    }

                    if (tile11 != null && tile11.active())
                    {
                        right = (Main.tileStone[tile11.type] ? 1 : tile11.type);
                        if (tile11.slope() == 2 || tile11.slope() == 4)
                        {
                            right = -1;
                        }
                    }

                    if (tile16 != null && tile16.active())
                    {
                        up = (Main.tileStone[tile16.type] ? 1 : tile16.type);
                        if (tile16.slope() == 3 || tile16.slope() == 4)
                        {
                            up = -1;
                        }
                    }

                    if (tile17 != null && tile17.active())
                    {
                        down = (Main.tileStone[tile17.type] ? 1 : tile17.type);
                        if (tile17.slope() == 1 || tile17.slope() == 2)
                        {
                            down = -1;
                        }
                    }

                    if (tile14 != null && tile14.active())
                    {
                        upLeft = (Main.tileStone[tile14.type] ? 1 : tile14.type);
                    }

                    if (tile15 != null && tile15.active())
                    {
                        upRight = (Main.tileStone[tile15.type] ? 1 : tile15.type);
                    }

                    if (tile12 != null && tile12.active())
                    {
                        downLeft = (Main.tileStone[tile12.type] ? 1 : tile12.type);
                    }

                    if (tile13 != null && tile13.active())
                    {
                        downRight = (Main.tileStone[tile13.type] ? 1 : tile13.type);
                    }

                    if (tile.slope() == 2)
                    {
                        up = -1;
                        left = -1;
                    }

                    if (tile.slope() == 1)
                    {
                        up = -1;
                        right = -1;
                    }

                    if (tile.slope() == 4)
                    {
                        down = -1;
                        left = -1;
                    }

                    if (tile.slope() == 3)
                    {
                        down = -1;
                        right = -1;
                    }

                    switch (num)
                    {
                        case 147:
                            TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Ices, ref up, ref down, ref left,
                                ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                            break;
                        case 161:
                        case 163:
                        case 164:
                        case 200:
                            TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Snow, ref up, ref down, ref left,
                                ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                            break;
                        case 162:
                            TileMergeAttempt(num, Main.tileBrick, TileID.Sets.IcesSnow, ref up, ref down, ref left,
                                ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                            break;
                        default:
                            if (Main.tileBrick[num])
                            {
                                if (num == 60 || num == 70)
                                {
                                    TileMergeAttempt(num, Main.tileBrick, TileID.Sets.Mud, ref up, ref down, ref left,
                                        ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                }
                                else
                                {
                                    TileMergeAttempt(num, Main.tileBrick, ref up, ref down, ref left, ref right,
                                        ref upLeft, ref upRight, ref downLeft, ref downRight);
                                }
                            }
                            else if (Main.tilePile[num])
                            {
                                TileMergeAttempt(num, Main.tilePile, ref up, ref down, ref left, ref right, ref upLeft,
                                    ref upRight, ref downLeft, ref downRight);
                            }

                            break;
                    }

                    if ((num == 1 || Main.tileMoss[num] || num == 117 || num == 25 || num == 203) && down == 165)
                    {
                        if (tile17.frameY == 72)
                        {
                            down = num;
                        }
                        else if (tile17.frameY == 0)
                        {
                            down = num;
                        }
                    }

                    if ((num == 1 || Main.tileMoss[num] || num == 117 || num == 25 || num == 203) && up == 165)
                    {
                        if (tile16.frameY == 90)
                        {
                            up = num;
                        }
                        else if (tile16.frameY == 54)
                        {
                            up = num;
                        }
                    }

                    if (num == 225)
                    {
                        if (down == 165)
                        {
                            down = num;
                        }

                        if (up == 165)
                        {
                            up = num;
                        }
                    }

                    if ((num == 200 || num == 161 || num == 163 || num == 164) && down == 165)
                    {
                        down = num;
                    }

                    if ((tile.slope() == 1 || tile.slope() == 2) && down > -1 && !TileID.Sets.Platforms[down])
                    {
                        down = num;
                    }

                    if (up > -1 && (tile16.slope() == 1 || tile16.slope() == 2) && !TileID.Sets.Platforms[up])
                    {
                        up = num;
                    }

                    if ((tile.slope() == 3 || tile.slope() == 4) && up > -1 && !TileID.Sets.Platforms[up])
                    {
                        up = num;
                    }

                    if (down > -1 && (tile17.slope() == 3 || tile17.slope() == 4) && !TileID.Sets.Platforms[down])
                    {
                        down = num;
                    }

                    if (num == 124)
                    {
                        if (up > -1 && Main.tileSolid[up])
                        {
                            up = num;
                        }

                        if (down > -1 && Main.tileSolid[down])
                        {
                            down = num;
                        }
                    }

                    if (up > -1 && tile16.halfBrick() && !TileID.Sets.Platforms[up])
                    {
                        up = num;
                    }

                    if (left > -1 && tile10.halfBrick())
                    {
                        if (tile.halfBrick())
                        {
                            left = num;
                        }
                        else if (tile10.type != num)
                        {
                            left = -1;
                        }
                    }

                    if (right > -1 && tile11.halfBrick())
                    {
                        if (tile.halfBrick())
                        {
                            right = num;
                        }
                        else if (tile11.type != num)
                        {
                            right = -1;
                        }
                    }

                    if (tile.halfBrick())
                    {
                        if (left != num)
                        {
                            left = -1;
                        }

                        if (right != num)
                        {
                            right = -1;
                        }

                        up = -1;
                    }

                    if (tile17 != null && tile17.halfBrick())
                    {
                        down = -1;
                    }

                    if (!Main.tileSolid[num])
                    {
                        switch (num)
                        {
                            case 49:
                                CheckOnTable1x1(i, j, (byte) num);
                                return;
                            case 80:
                                CactusFrame(i, j);
                                return;
                        }
                    }

                    mergeUp = false;
                    mergeDown = false;
                    mergeLeft = false;
                    mergeRight = false;
                    int num55 = 0;
                    if (resetFrame)
                    {
                        num55 = genRand.Next(0, 3);
                        tile.frameNumber((byte) num55);
                    }
                    else
                    {
                        num55 = tile.frameNumber();
                    }

                    if (Main.tileLargeFrames[num] == 1)
                    {
                        int num56 = j % 4;
                        int num57 = i % 3;
                        int[,] array = new int[4, 3]
                        {
                            {
                                2,
                                4,
                                2
                            },
                            {
                                1,
                                3,
                                1
                            },
                            {
                                2,
                                2,
                                4
                            },
                            {
                                1,
                                1,
                                3
                            }
                        };
                        num55 = array[num56, num57] - 1;
                    }

                    TileMergeAttempt(num, Main.tileBlendAll, ref up, ref down, ref left, ref right, ref upLeft,
                        ref upRight, ref downLeft, ref downRight);
                    if (Main.tileBlendAll[num])
                    {
                        TileMergeAttempt(num, Main.tileSolid, Main.tileSolidTop, ref up, ref down, ref left, ref right,
                            ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }

                    switch (num)
                    {
                        case 0:
                            if (up > -1 && Main.tileMergeDirt[up])
                            {
                                TileFrame(i, j - 1, false, false);
                                if (mergeDown)
                                {
                                    up = num;
                                }
                            }
                            else if (up == 147)
                            {
                                TileFrame(i, j - 1, false, false);
                                if (mergeDown)
                                {
                                    up = num;
                                }
                            }

                            if (down > -1 && Main.tileMergeDirt[down])
                            {
                                TileFrame(i, j + 1, false, false);
                                if (mergeUp)
                                {
                                    down = num;
                                }
                            }
                            else if (down == 147)
                            {
                                TileFrame(i, j + 1, false, false);
                                if (mergeUp)
                                {
                                    down = num;
                                }
                            }

                            if (left > -1 && Main.tileMergeDirt[left])
                            {
                                TileFrame(i - 1, j, false, false);
                                if (mergeRight)
                                {
                                    left = num;
                                }
                            }
                            else if (left == 147)
                            {
                                TileFrame(i - 1, j, false, false);
                                if (mergeRight)
                                {
                                    left = num;
                                }
                            }

                            if (right > -1 && Main.tileMergeDirt[right])
                            {
                                TileFrame(i + 1, j, false, false);
                                if (mergeLeft)
                                {
                                    right = num;
                                }
                            }
                            else if (right == 147)
                            {
                                TileFrame(i + 1, j, false, false);
                                if (mergeLeft)
                                {
                                    right = num;
                                }
                            }

                            if (up == 2 || up == 23 || up == 109 || up == 199)
                            {
                                up = num;
                            }

                            if (down == 2 || down == 23 || down == 109 || down == 199)
                            {
                                down = num;
                            }

                            if (left == 2 || left == 23 || left == 109 || left == 199)
                            {
                                left = num;
                            }

                            if (right == 2 || right == 23 || right == 109 || right == 199)
                            {
                                right = num;
                            }

                            if (upLeft > -1 && Main.tileMergeDirt[upLeft])
                            {
                                upLeft = num;
                            }
                            else if (upLeft == 2 || upLeft == 23 || upLeft == 109 || upLeft == 199)
                            {
                                upLeft = num;
                            }

                            if (upRight > -1 && Main.tileMergeDirt[upRight])
                            {
                                upRight = num;
                            }
                            else if (upRight == 2 || upRight == 23 || upRight == 109 || upRight == 199)
                            {
                                upRight = num;
                            }

                            if (downLeft > -1 && Main.tileMergeDirt[downLeft])
                            {
                                downLeft = num;
                            }
                            else if (downLeft == 2 || downLeft == 23 || downLeft == 109 || downLeft == 199)
                            {
                                downLeft = num;
                            }

                            if (downRight > -1 && Main.tileMergeDirt[downRight])
                            {
                                downRight = num;
                            }
                            else if (downRight == 2 || downRight == 23 || downRight == 109 || downRight == 199)
                            {
                                downRight = num;
                            }

                            TileMergeAttempt(-2, 59, ref up, ref down, ref left, ref right, ref upLeft, ref upRight,
                                ref downLeft, ref downRight);
                            TileMergeAttempt(num, 191, ref up, ref down, ref left, ref right, ref upLeft, ref upRight,
                                ref downLeft, ref downRight);
                            break;
                        case 213:
                            if (up > -1 && Main.tileSolid[up] && !Main.tileSolidTop[up])
                            {
                                up = num;
                            }

                            if (down > -1 && Main.tileSolid[down])
                            {
                                down = num;
                            }

                            if (up != num)
                            {
                                if (left > -1 && Main.tileSolid[left])
                                {
                                    left = num;
                                }

                                if (right > -1 && Main.tileSolid[right])
                                {
                                    right = num;
                                }
                            }

                            break;
                        case 53:
                            TileMergeAttemptFrametest(i, j, num, 397, ref up, ref down, ref left, ref right, ref upLeft,
                                ref upRight, ref downLeft, ref downRight);
                            TileMergeAttemptFrametest(i, j, num, 396, ref up, ref down, ref left, ref right, ref upLeft,
                                ref upRight, ref downLeft, ref downRight);
                            break;
                        case 234:
                            TileMergeAttemptFrametest(i, j, num, 399, ref up, ref down, ref left, ref right, ref upLeft,
                                ref upRight, ref downLeft, ref downRight);
                            TileMergeAttemptFrametest(i, j, num, 401, ref up, ref down, ref left, ref right, ref upLeft,
                                ref upRight, ref downLeft, ref downRight);
                            break;
                        case 112:
                            TileMergeAttemptFrametest(i, j, num, 398, ref up, ref down, ref left, ref right, ref upLeft,
                                ref upRight, ref downLeft, ref downRight);
                            TileMergeAttemptFrametest(i, j, num, 400, ref up, ref down, ref left, ref right, ref upLeft,
                                ref upRight, ref downLeft, ref downRight);
                            break;
                        case 116:
                            TileMergeAttemptFrametest(i, j, num, 402, ref up, ref down, ref left, ref right, ref upLeft,
                                ref upRight, ref downLeft, ref downRight);
                            TileMergeAttemptFrametest(i, j, num, 403, ref up, ref down, ref left, ref right, ref upLeft,
                                ref upRight, ref downLeft, ref downRight);
                            break;
                    }

                    if (!Main.tileMergeDirt[num])
                    {
                        switch (num)
                        {
                            case 58:
                            case 75:
                            case 76:
                                TileMergeAttempt(-2, 57, ref up, ref down, ref left, ref right, ref upLeft, ref upRight,
                                    ref downLeft, ref downRight);
                                break;
                            case 57:
                                TileMergeAttempt(-2, 1, ref up, ref down, ref left, ref right, ref upLeft, ref upRight,
                                    ref downLeft, ref downRight);
                                TileMergeAttemptFrametest(i, j, num, TileID.Sets.HellSpecial, ref up, ref down,
                                    ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;
                            case 59:
                                if ((double) j > Main.rockLayer)
                                {
                                    TileMergeAttempt(-2, 1, ref up, ref down, ref left, ref right, ref upLeft,
                                        ref upRight, ref downLeft, ref downRight);
                                }

                                TileMergeAttempt(num, TileID.Sets.GrassSpecial, ref up, ref down, ref left, ref right,
                                    ref upLeft, ref upRight, ref downLeft, ref downRight);
                                TileMergeAttemptFrametest(i, j, num, TileID.Sets.JungleSpecial, ref up, ref down,
                                    ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                if ((double) j < Main.rockLayer)
                                {
                                    TileMergeAttemptFrametest(i, j, num, 0, ref up, ref down, ref left, ref right,
                                        ref upLeft, ref upRight, ref downLeft, ref downRight);
                                }
                                else
                                {
                                    TileMergeAttempt(num, 0, ref up, ref down, ref left, ref right);
                                }

                                break;
                            case 211:
                                TileMergeAttempt(59, 60, ref up, ref down, ref left, ref right);
                                TileMergeAttempt(-2, 59, ref up, ref down, ref left, ref right, ref upLeft, ref upRight,
                                    ref downLeft, ref downRight);
                                break;
                            case 225:
                            case 226:
                                TileMergeAttempt(-2, 59, ref up, ref down, ref left, ref right, ref upLeft, ref upRight,
                                    ref downLeft, ref downRight);
                                break;
                            case 60:
                                TileMergeAttempt(59, 211, ref up, ref down, ref left, ref right);
                                break;
                            case 189:
                                TileMergeAttemptFrametest(i, j, num, 196, ref up, ref down, ref left, ref right,
                                    ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;
                            case 196:
                                TileMergeAttempt(-2, 189, ref up, ref down, ref left, ref right, ref upLeft,
                                    ref upRight, ref downLeft, ref downRight);
                                break;
                            case 147:
                                TileMergeAttemptFrametest(i, j, num, TileID.Sets.IcesSlush, ref up, ref down, ref left,
                                    ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;
                            case 161:
                            case 163:
                            case 164:
                            case 200:
                            case 224:
                                TileMergeAttempt(-2, 147, ref up, ref down, ref left, ref right, ref upLeft,
                                    ref upRight, ref downLeft, ref downRight);
                                break;
                            case 162:
                                TileMergeAttempt(-2, TileID.Sets.IcesSnow, ref up, ref down, ref left, ref right,
                                    ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;
                            case 32:
                                if (down == 23)
                                {
                                    down = num;
                                }

                                break;
                            case 352:
                                if (down == 199)
                                {
                                    down = num;
                                }

                                break;
                            case 69:
                                if (down == 60)
                                {
                                    down = num;
                                }

                                break;
                            case 51:
                                TileMergeAttempt(num, TileID.Sets.AllTiles, Main.tileNoAttach, ref up, ref down,
                                    ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;
                            case 192:
                                TileMergeAttemptFrametest(i, j, num, 191, ref up, ref down, ref left, ref right,
                                    ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;
                            case 191:
                                TileMergeAttempt(-2, 192, ref up, ref down, ref left, ref right, ref upLeft,
                                    ref upRight, ref downLeft, ref downRight);
                                TileMergeAttempt(num, 0, ref up, ref down, ref left, ref right, ref upLeft, ref upRight,
                                    ref downLeft, ref downRight);
                                break;
                            case 384:
                                TileMergeAttemptFrametest(i, j, num, 383, ref up, ref down, ref left, ref right,
                                    ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;
                            case 383:
                                TileMergeAttempt(-2, 384, ref up, ref down, ref left, ref right, ref upLeft,
                                    ref upRight, ref downLeft, ref downRight);
                                TileMergeAttempt(num, 59, ref up, ref down, ref left, ref right, ref upLeft,
                                    ref upRight, ref downLeft, ref downRight);
                                break;
                            case 407:
                                TileMergeAttempt(-2, 404, ref up, ref down, ref left, ref right, ref upLeft,
                                    ref upRight, ref downLeft, ref downRight);
                                break;
                            case 404:
                                TileMergeAttempt(-2, 396, ref up, ref down, ref left, ref right, ref upLeft,
                                    ref upRight, ref downLeft, ref downRight);
                                TileMergeAttemptFrametest(i, j, num, 407, ref up, ref down, ref left, ref right,
                                    ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;
                            case 397:
                                TileMergeAttempt(-2, 53, ref up, ref down, ref left, ref right, ref upLeft, ref upRight,
                                    ref downLeft, ref downRight);
                                TileMergeAttemptFrametest(i, j, num, 396, ref up, ref down, ref left, ref right,
                                    ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;
                            case 396:
                                TileMergeAttempt(-2, 397, ref up, ref down, ref left, ref right, ref upLeft,
                                    ref upRight, ref downLeft, ref downRight);
                                TileMergeAttempt(-2, 53, ref up, ref down, ref left, ref right, ref upLeft, ref upRight,
                                    ref downLeft, ref downRight);
                                TileMergeAttemptFrametest(i, j, num, 404, ref up, ref down, ref left, ref right,
                                    ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;
                            case 398:
                                TileMergeAttempt(-2, 112, ref up, ref down, ref left, ref right, ref upLeft,
                                    ref upRight, ref downLeft, ref downRight);
                                TileMergeAttemptFrametest(i, j, num, 400, ref up, ref down, ref left, ref right,
                                    ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;
                            case 400:
                                TileMergeAttempt(-2, 398, ref up, ref down, ref left, ref right, ref upLeft,
                                    ref upRight, ref downLeft, ref downRight);
                                TileMergeAttempt(-2, 112, ref up, ref down, ref left, ref right, ref upLeft,
                                    ref upRight, ref downLeft, ref downRight);
                                break;
                            case 399:
                                TileMergeAttempt(-2, 234, ref up, ref down, ref left, ref right, ref upLeft,
                                    ref upRight, ref downLeft, ref downRight);
                                TileMergeAttemptFrametest(i, j, num, 401, ref up, ref down, ref left, ref right,
                                    ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;
                            case 401:
                                TileMergeAttempt(-2, 399, ref up, ref down, ref left, ref right, ref upLeft,
                                    ref upRight, ref downLeft, ref downRight);
                                TileMergeAttempt(-2, 234, ref up, ref down, ref left, ref right, ref upLeft,
                                    ref upRight, ref downLeft, ref downRight);
                                break;
                            case 402:
                                TileMergeAttempt(-2, 116, ref up, ref down, ref left, ref right, ref upLeft,
                                    ref upRight, ref downLeft, ref downRight);
                                TileMergeAttemptFrametest(i, j, num, 403, ref up, ref down, ref left, ref right,
                                    ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;
                            case 403:
                                TileMergeAttempt(-2, 402, ref up, ref down, ref left, ref right, ref upLeft,
                                    ref upRight, ref downLeft, ref downRight);
                                TileMergeAttempt(-2, 116, ref up, ref down, ref left, ref right, ref upLeft,
                                    ref upRight, ref downLeft, ref downRight);
                                break;
                        }
                    }
                    else
                    {
                        TileMergeAttempt(-2, 0, ref up, ref down, ref left, ref right, ref upLeft, ref upRight,
                            ref downLeft, ref downRight);
                        if (num == 1)
                        {
                            if ((double) j > Main.rockLayer)
                            {
                                TileMergeAttemptFrametest(i, j, num, 59, ref up, ref down, ref left, ref right,
                                    ref upLeft, ref upRight, ref downLeft, ref downRight);
                            }

                            TileMergeAttemptFrametest(i, j, num, 57, ref up, ref down, ref left, ref right, ref upLeft,
                                ref upRight, ref downLeft, ref downRight);
                        }
                    }

                    if (Main.tileStone[num] || num == 1)
                    {
                        TileMergeAttempt(num, Main.tileMoss, ref up, ref down, ref left, ref right, ref upLeft,
                            ref upRight, ref downLeft, ref downRight);
                    }

                    bool flag8 = false;
                    if (up == -2 && tile.color() != tile16.color())
                    {
                        up = num;
                        mergeUp = true;
                    }

                    if (down == -2 && tile.color() != tile17.color())
                    {
                        down = num;
                        mergeDown = true;
                    }

                    if (left == -2 && tile.color() != tile10.color())
                    {
                        left = num;
                        mergeLeft = true;
                    }

                    if (right == -2 && tile.color() != tile11.color())
                    {
                        right = num;
                        mergeRight = true;
                    }

                    if (num == 2 || num == 23 || num == 60 || num == 70 || num == 109 || num == 199 ||
                        Main.tileMoss[num] || TileID.Sets.NeedsGrassFraming[num])
                    {
                        flag8 = true;
                        TileMergeAttemptWeird(num, -1, Main.tileSolid, ref up, ref down, ref left, ref right,
                            ref upLeft, ref upRight, ref downLeft, ref downRight);
                        int num58 = TileID.Sets.NeedsGrassFramingDirt[num];
                        if (num == 60 || num == 70)
                        {
                            num58 = 59;
                        }
                        else if (!Main.tileMoss[num])
                        {
                            switch (num)
                            {
                                case 2:
                                    TileMergeAttempt(num58, 23, ref up, ref down, ref left, ref right, ref upLeft,
                                        ref upRight, ref downLeft, ref downRight);
                                    break;
                                case 23:
                                    TileMergeAttempt(num58, 2, ref up, ref down, ref left, ref right, ref upLeft,
                                        ref upRight, ref downLeft, ref downRight);
                                    break;
                            }
                        }
                        else
                        {
                            num58 = 1;
                        }

                        if (up != num && up != num58 && (down == num || down == num58))
                        {
                            if (left == num58 && right == num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 0;
                                        rectangle.Y = 198;
                                        break;
                                    case 1:
                                        rectangle.X = 18;
                                        rectangle.Y = 198;
                                        break;
                                    default:
                                        rectangle.X = 36;
                                        rectangle.Y = 198;
                                        break;
                                }
                            }
                            else if (left == num && right == num58)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 54;
                                        rectangle.Y = 198;
                                        break;
                                    case 1:
                                        rectangle.X = 72;
                                        rectangle.Y = 198;
                                        break;
                                    default:
                                        rectangle.X = 90;
                                        rectangle.Y = 198;
                                        break;
                                }
                            }
                        }
                        else if (down != num && down != num58 && (up == num || up == num58))
                        {
                            if (left == num58 && right == num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 0;
                                        rectangle.Y = 216;
                                        break;
                                    case 1:
                                        rectangle.X = 18;
                                        rectangle.Y = 216;
                                        break;
                                    default:
                                        rectangle.X = 36;
                                        rectangle.Y = 216;
                                        break;
                                }
                            }
                            else if (left == num && right == num58)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 54;
                                        rectangle.Y = 216;
                                        break;
                                    case 1:
                                        rectangle.X = 72;
                                        rectangle.Y = 216;
                                        break;
                                    default:
                                        rectangle.X = 90;
                                        rectangle.Y = 216;
                                        break;
                                }
                            }
                        }
                        else if (left != num && left != num58 && (right == num || right == num58))
                        {
                            if (up == num58 && down == num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 72;
                                        rectangle.Y = 144;
                                        break;
                                    case 1:
                                        rectangle.X = 72;
                                        rectangle.Y = 162;
                                        break;
                                    default:
                                        rectangle.X = 72;
                                        rectangle.Y = 180;
                                        break;
                                }
                            }
                            else if (down == num && up == num58)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 72;
                                        rectangle.Y = 90;
                                        break;
                                    case 1:
                                        rectangle.X = 72;
                                        rectangle.Y = 108;
                                        break;
                                    default:
                                        rectangle.X = 72;
                                        rectangle.Y = 126;
                                        break;
                                }
                            }
                        }
                        else if (right != num && right != num58 && (left == num || left == num58))
                        {
                            if (up == num58 && down == num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 90;
                                        rectangle.Y = 144;
                                        break;
                                    case 1:
                                        rectangle.X = 90;
                                        rectangle.Y = 162;
                                        break;
                                    default:
                                        rectangle.X = 90;
                                        rectangle.Y = 180;
                                        break;
                                }
                            }
                            else if (down == num && right == up)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 90;
                                        rectangle.Y = 90;
                                        break;
                                    case 1:
                                        rectangle.X = 90;
                                        rectangle.Y = 108;
                                        break;
                                    default:
                                        rectangle.X = 90;
                                        rectangle.Y = 126;
                                        break;
                                }
                            }
                        }
                        else if (up == num && down == num && left == num && right == num)
                        {
                            if (upLeft != num && upRight != num && downLeft != num && downRight != num)
                            {
                                if (downRight == num58)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 108;
                                            rectangle.Y = 324;
                                            break;
                                        case 1:
                                            rectangle.X = 126;
                                            rectangle.Y = 324;
                                            break;
                                        default:
                                            rectangle.X = 144;
                                            rectangle.Y = 324;
                                            break;
                                    }
                                }
                                else if (upRight == num58)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 108;
                                            rectangle.Y = 342;
                                            break;
                                        case 1:
                                            rectangle.X = 126;
                                            rectangle.Y = 342;
                                            break;
                                        default:
                                            rectangle.X = 144;
                                            rectangle.Y = 342;
                                            break;
                                    }
                                }
                                else if (downLeft == num58)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 108;
                                            rectangle.Y = 360;
                                            break;
                                        case 1:
                                            rectangle.X = 126;
                                            rectangle.Y = 360;
                                            break;
                                        default:
                                            rectangle.X = 144;
                                            rectangle.Y = 360;
                                            break;
                                    }
                                }
                                else if (upLeft != num58)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 144;
                                            rectangle.Y = 234;
                                            break;
                                        case 1:
                                            rectangle.X = 198;
                                            rectangle.Y = 234;
                                            break;
                                        default:
                                            rectangle.X = 252;
                                            rectangle.Y = 234;
                                            break;
                                    }
                                }
                                else
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 108;
                                            rectangle.Y = 378;
                                            break;
                                        case 1:
                                            rectangle.X = 126;
                                            rectangle.Y = 378;
                                            break;
                                        default:
                                            rectangle.X = 144;
                                            rectangle.Y = 378;
                                            break;
                                    }
                                }
                            }
                            else if (upLeft != num && downRight != num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 36;
                                        rectangle.Y = 306;
                                        break;
                                    case 1:
                                        rectangle.X = 54;
                                        rectangle.Y = 306;
                                        break;
                                    default:
                                        rectangle.X = 72;
                                        rectangle.Y = 306;
                                        break;
                                }
                            }
                            else if (upRight != num && downLeft != num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 90;
                                        rectangle.Y = 306;
                                        break;
                                    case 1:
                                        rectangle.X = 108;
                                        rectangle.Y = 306;
                                        break;
                                    default:
                                        rectangle.X = 126;
                                        rectangle.Y = 306;
                                        break;
                                }
                            }
                            else if (upLeft != num && upRight == num && downLeft == num && downRight == num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 54;
                                        rectangle.Y = 108;
                                        break;
                                    case 1:
                                        rectangle.X = 54;
                                        rectangle.Y = 144;
                                        break;
                                    default:
                                        rectangle.X = 54;
                                        rectangle.Y = 180;
                                        break;
                                }
                            }
                            else if (upLeft == num && upRight != num && downLeft == num && downRight == num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 36;
                                        rectangle.Y = 108;
                                        break;
                                    case 1:
                                        rectangle.X = 36;
                                        rectangle.Y = 144;
                                        break;
                                    default:
                                        rectangle.X = 36;
                                        rectangle.Y = 180;
                                        break;
                                }
                            }
                            else if (upLeft == num && upRight == num && downLeft != num && downRight == num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 54;
                                        rectangle.Y = 90;
                                        break;
                                    case 1:
                                        rectangle.X = 54;
                                        rectangle.Y = 126;
                                        break;
                                    default:
                                        rectangle.X = 54;
                                        rectangle.Y = 162;
                                        break;
                                }
                            }
                            else if (upLeft == num && upRight == num && downLeft == num && downRight != num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 36;
                                        rectangle.Y = 90;
                                        break;
                                    case 1:
                                        rectangle.X = 36;
                                        rectangle.Y = 126;
                                        break;
                                    default:
                                        rectangle.X = 36;
                                        rectangle.Y = 162;
                                        break;
                                }
                            }
                        }
                        else if (up == num && down == num58 && left == num && right == num && upLeft == -1 &&
                                 upRight == -1)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 108;
                                    rectangle.Y = 18;
                                    break;
                                case 1:
                                    rectangle.X = 126;
                                    rectangle.Y = 18;
                                    break;
                                default:
                                    rectangle.X = 144;
                                    rectangle.Y = 18;
                                    break;
                            }
                        }
                        else if (up == num58 && down == num && left == num && right == num && downLeft == -1 &&
                                 downRight == -1)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 108;
                                    rectangle.Y = 36;
                                    break;
                                case 1:
                                    rectangle.X = 126;
                                    rectangle.Y = 36;
                                    break;
                                default:
                                    rectangle.X = 144;
                                    rectangle.Y = 36;
                                    break;
                            }
                        }
                        else if (up == num && down == num && left == num58 && right == num && upRight == -1 &&
                                 downRight == -1)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 198;
                                    rectangle.Y = 0;
                                    break;
                                case 1:
                                    rectangle.X = 198;
                                    rectangle.Y = 18;
                                    break;
                                default:
                                    rectangle.X = 198;
                                    rectangle.Y = 36;
                                    break;
                            }
                        }
                        else if (up == num && down == num && left == num && right == num58 && upLeft == -1 &&
                                 downLeft == -1)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 180;
                                    rectangle.Y = 0;
                                    break;
                                case 1:
                                    rectangle.X = 180;
                                    rectangle.Y = 18;
                                    break;
                                default:
                                    rectangle.X = 180;
                                    rectangle.Y = 36;
                                    break;
                            }
                        }
                        else if (up == num && down == num58 && left == num && right == num)
                        {
                            if (upRight != -1)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 54;
                                        rectangle.Y = 108;
                                        break;
                                    case 1:
                                        rectangle.X = 54;
                                        rectangle.Y = 144;
                                        break;
                                    default:
                                        rectangle.X = 54;
                                        rectangle.Y = 180;
                                        break;
                                }
                            }
                            else if (upLeft != -1)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 36;
                                        rectangle.Y = 108;
                                        break;
                                    case 1:
                                        rectangle.X = 36;
                                        rectangle.Y = 144;
                                        break;
                                    default:
                                        rectangle.X = 36;
                                        rectangle.Y = 180;
                                        break;
                                }
                            }
                        }
                        else if (up == num58 && down == num && left == num && right == num)
                        {
                            if (downRight != -1)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 54;
                                        rectangle.Y = 90;
                                        break;
                                    case 1:
                                        rectangle.X = 54;
                                        rectangle.Y = 126;
                                        break;
                                    default:
                                        rectangle.X = 54;
                                        rectangle.Y = 162;
                                        break;
                                }
                            }
                            else if (downLeft != -1)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 36;
                                        rectangle.Y = 90;
                                        break;
                                    case 1:
                                        rectangle.X = 36;
                                        rectangle.Y = 126;
                                        break;
                                    default:
                                        rectangle.X = 36;
                                        rectangle.Y = 162;
                                        break;
                                }
                            }
                        }
                        else if (up == num && down == num && left == num && right == num58)
                        {
                            if (upLeft != -1)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 54;
                                        rectangle.Y = 90;
                                        break;
                                    case 1:
                                        rectangle.X = 54;
                                        rectangle.Y = 126;
                                        break;
                                    default:
                                        rectangle.X = 54;
                                        rectangle.Y = 162;
                                        break;
                                }
                            }
                            else if (downLeft != -1)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 54;
                                        rectangle.Y = 108;
                                        break;
                                    case 1:
                                        rectangle.X = 54;
                                        rectangle.Y = 144;
                                        break;
                                    default:
                                        rectangle.X = 54;
                                        rectangle.Y = 180;
                                        break;
                                }
                            }
                        }
                        else if (up == num && down == num && left == num58 && right == num)
                        {
                            if (upRight != -1)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 36;
                                        rectangle.Y = 90;
                                        break;
                                    case 1:
                                        rectangle.X = 36;
                                        rectangle.Y = 126;
                                        break;
                                    default:
                                        rectangle.X = 36;
                                        rectangle.Y = 162;
                                        break;
                                }
                            }
                            else if (downRight != -1)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 36;
                                        rectangle.Y = 108;
                                        break;
                                    case 1:
                                        rectangle.X = 36;
                                        rectangle.Y = 144;
                                        break;
                                    default:
                                        rectangle.X = 36;
                                        rectangle.Y = 180;
                                        break;
                                }
                            }
                        }
                        else if ((up == num58 && down == num && left == num && right == num) ||
                                 (up == num && down == num58 && left == num && right == num) ||
                                 (up == num && down == num && left == num58 && right == num) ||
                                 (up == num && down == num && left == num && right == num58))
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 18;
                                    rectangle.Y = 18;
                                    break;
                                case 1:
                                    rectangle.X = 36;
                                    rectangle.Y = 18;
                                    break;
                                default:
                                    rectangle.X = 54;
                                    rectangle.Y = 18;
                                    break;
                            }
                        }

                        if ((up == num || up == num58) && (down == num || down == num58) &&
                            (left == num || left == num58) && (right == num || right == num58))
                        {
                            if (upLeft != num && upLeft != num58 && (upRight == num || upRight == num58) &&
                                (downLeft == num || downLeft == num58) && (downRight == num || downRight == num58))
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 54;
                                        rectangle.Y = 108;
                                        break;
                                    case 1:
                                        rectangle.X = 54;
                                        rectangle.Y = 144;
                                        break;
                                    default:
                                        rectangle.X = 54;
                                        rectangle.Y = 180;
                                        break;
                                }
                            }
                            else if (upRight != num && upRight != num58 && (upLeft == num || upLeft == num58) &&
                                     (downLeft == num || downLeft == num58) && (downRight == num || downRight == num58))
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 36;
                                        rectangle.Y = 108;
                                        break;
                                    case 1:
                                        rectangle.X = 36;
                                        rectangle.Y = 144;
                                        break;
                                    default:
                                        rectangle.X = 36;
                                        rectangle.Y = 180;
                                        break;
                                }
                            }
                            else if (downLeft != num && downLeft != num58 && (upLeft == num || upLeft == num58) &&
                                     (upRight == num || upRight == num58) && (downRight == num || downRight == num58))
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 54;
                                        rectangle.Y = 90;
                                        break;
                                    case 1:
                                        rectangle.X = 54;
                                        rectangle.Y = 126;
                                        break;
                                    default:
                                        rectangle.X = 54;
                                        rectangle.Y = 162;
                                        break;
                                }
                            }
                            else if (downRight != num && downRight != num58 && (upLeft == num || upLeft == num58) &&
                                     (downLeft == num || downLeft == num58) && (upRight == num || upRight == num58))
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 36;
                                        rectangle.Y = 90;
                                        break;
                                    case 1:
                                        rectangle.X = 36;
                                        rectangle.Y = 126;
                                        break;
                                    default:
                                        rectangle.X = 36;
                                        rectangle.Y = 162;
                                        break;
                                }
                            }
                        }

                        if (up != num58 && up != num && down == num && left != num58 && left != num && right == num &&
                            downRight != num58 && downRight != num)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 90;
                                    rectangle.Y = 270;
                                    break;
                                case 1:
                                    rectangle.X = 108;
                                    rectangle.Y = 270;
                                    break;
                                default:
                                    rectangle.X = 126;
                                    rectangle.Y = 270;
                                    break;
                            }
                        }
                        else if (up != num58 && up != num && down == num && left == num && right != num58 &&
                                 right != num && downLeft != num58 && downLeft != num)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 144;
                                    rectangle.Y = 270;
                                    break;
                                case 1:
                                    rectangle.X = 162;
                                    rectangle.Y = 270;
                                    break;
                                default:
                                    rectangle.X = 180;
                                    rectangle.Y = 270;
                                    break;
                            }
                        }
                        else if (down != num58 && down != num && up == num && left != num58 && left != num &&
                                 right == num && upRight != num58 && upRight != num)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 90;
                                    rectangle.Y = 288;
                                    break;
                                case 1:
                                    rectangle.X = 108;
                                    rectangle.Y = 288;
                                    break;
                                default:
                                    rectangle.X = 126;
                                    rectangle.Y = 288;
                                    break;
                            }
                        }
                        else if (down != num58 && down != num && up == num && left == num && right != num58 &&
                                 right != num && upLeft != num58 && upLeft != num)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 144;
                                    rectangle.Y = 288;
                                    break;
                                case 1:
                                    rectangle.X = 162;
                                    rectangle.Y = 288;
                                    break;
                                default:
                                    rectangle.X = 180;
                                    rectangle.Y = 288;
                                    break;
                            }
                        }
                        else if (up != num && up != num58 && down == num && left == num && right == num &&
                                 downLeft != num && downLeft != num58 && downRight != num && downRight != num58)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 144;
                                    rectangle.Y = 216;
                                    break;
                                case 1:
                                    rectangle.X = 198;
                                    rectangle.Y = 216;
                                    break;
                                default:
                                    rectangle.X = 252;
                                    rectangle.Y = 216;
                                    break;
                            }
                        }
                        else if (down != num && down != num58 && up == num && left == num && right == num &&
                                 upLeft != num && upLeft != num58 && upRight != num && upRight != num58)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 144;
                                    rectangle.Y = 252;
                                    break;
                                case 1:
                                    rectangle.X = 198;
                                    rectangle.Y = 252;
                                    break;
                                default:
                                    rectangle.X = 252;
                                    rectangle.Y = 252;
                                    break;
                            }
                        }
                        else if (left != num && left != num58 && down == num && up == num && right == num &&
                                 upRight != num && upRight != num58 && downRight != num && downRight != num58)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 126;
                                    rectangle.Y = 234;
                                    break;
                                case 1:
                                    rectangle.X = 180;
                                    rectangle.Y = 234;
                                    break;
                                default:
                                    rectangle.X = 234;
                                    rectangle.Y = 234;
                                    break;
                            }
                        }
                        else if (right != num && right != num58 && down == num && up == num && left == num &&
                                 upLeft != num && upLeft != num58 && downLeft != num && downLeft != num58)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 162;
                                    rectangle.Y = 234;
                                    break;
                                case 1:
                                    rectangle.X = 216;
                                    rectangle.Y = 234;
                                    break;
                                default:
                                    rectangle.X = 270;
                                    rectangle.Y = 234;
                                    break;
                            }
                        }
                        else if (up != num58 && up != num && (down == num58 || down == num) && left == num58 &&
                                 right == num58)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 36;
                                    rectangle.Y = 270;
                                    break;
                                case 1:
                                    rectangle.X = 54;
                                    rectangle.Y = 270;
                                    break;
                                default:
                                    rectangle.X = 72;
                                    rectangle.Y = 270;
                                    break;
                            }
                        }
                        else if (down != num58 && down != num && (up == num58 || up == num) && left == num58 &&
                                 right == num58)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 36;
                                    rectangle.Y = 288;
                                    break;
                                case 1:
                                    rectangle.X = 54;
                                    rectangle.Y = 288;
                                    break;
                                default:
                                    rectangle.X = 72;
                                    rectangle.Y = 288;
                                    break;
                            }
                        }
                        else if (left != num58 && left != num && (right == num58 || right == num) && up == num58 &&
                                 down == num58)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 0;
                                    rectangle.Y = 270;
                                    break;
                                case 1:
                                    rectangle.X = 0;
                                    rectangle.Y = 288;
                                    break;
                                default:
                                    rectangle.X = 0;
                                    rectangle.Y = 306;
                                    break;
                            }
                        }
                        else if (right != num58 && right != num && (left == num58 || left == num) && up == num58 &&
                                 down == num58)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 18;
                                    rectangle.Y = 270;
                                    break;
                                case 1:
                                    rectangle.X = 18;
                                    rectangle.Y = 288;
                                    break;
                                default:
                                    rectangle.X = 18;
                                    rectangle.Y = 306;
                                    break;
                            }
                        }
                        else if (up == num && down == num58 && left == num58 && right == num58)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 198;
                                    rectangle.Y = 288;
                                    break;
                                case 1:
                                    rectangle.X = 216;
                                    rectangle.Y = 288;
                                    break;
                                default:
                                    rectangle.X = 234;
                                    rectangle.Y = 288;
                                    break;
                            }
                        }
                        else if (up == num58 && down == num && left == num58 && right == num58)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 198;
                                    rectangle.Y = 270;
                                    break;
                                case 1:
                                    rectangle.X = 216;
                                    rectangle.Y = 270;
                                    break;
                                default:
                                    rectangle.X = 234;
                                    rectangle.Y = 270;
                                    break;
                            }
                        }
                        else if (up == num58 && down == num58 && left == num && right == num58)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 198;
                                    rectangle.Y = 306;
                                    break;
                                case 1:
                                    rectangle.X = 216;
                                    rectangle.Y = 306;
                                    break;
                                default:
                                    rectangle.X = 234;
                                    rectangle.Y = 306;
                                    break;
                            }
                        }
                        else if (up == num58 && down == num58 && left == num58 && right == num)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 144;
                                    rectangle.Y = 306;
                                    break;
                                case 1:
                                    rectangle.X = 162;
                                    rectangle.Y = 306;
                                    break;
                                default:
                                    rectangle.X = 180;
                                    rectangle.Y = 306;
                                    break;
                            }
                        }

                        if (up != num && up != num58 && down == num && left == num && right == num)
                        {
                            if ((downLeft == num58 || downLeft == num) && downRight != num58 && downRight != num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 0;
                                        rectangle.Y = 324;
                                        break;
                                    case 1:
                                        rectangle.X = 18;
                                        rectangle.Y = 324;
                                        break;
                                    default:
                                        rectangle.X = 36;
                                        rectangle.Y = 324;
                                        break;
                                }
                            }
                            else if ((downRight == num58 || downRight == num) && downLeft != num58 && downLeft != num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 54;
                                        rectangle.Y = 324;
                                        break;
                                    case 1:
                                        rectangle.X = 72;
                                        rectangle.Y = 324;
                                        break;
                                    default:
                                        rectangle.X = 90;
                                        rectangle.Y = 324;
                                        break;
                                }
                            }
                        }
                        else if (down != num && down != num58 && up == num && left == num && right == num)
                        {
                            if ((upLeft == num58 || upLeft == num) && upRight != num58 && upRight != num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 0;
                                        rectangle.Y = 342;
                                        break;
                                    case 1:
                                        rectangle.X = 18;
                                        rectangle.Y = 342;
                                        break;
                                    default:
                                        rectangle.X = 36;
                                        rectangle.Y = 342;
                                        break;
                                }
                            }
                            else if ((upRight == num58 || upRight == num) && upLeft != num58 && upLeft != num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 54;
                                        rectangle.Y = 342;
                                        break;
                                    case 1:
                                        rectangle.X = 72;
                                        rectangle.Y = 342;
                                        break;
                                    default:
                                        rectangle.X = 90;
                                        rectangle.Y = 342;
                                        break;
                                }
                            }
                        }
                        else if (left != num && left != num58 && up == num && down == num && right == num)
                        {
                            if ((upRight == num58 || upRight == num) && downRight != num58 && downRight != num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 54;
                                        rectangle.Y = 360;
                                        break;
                                    case 1:
                                        rectangle.X = 72;
                                        rectangle.Y = 360;
                                        break;
                                    default:
                                        rectangle.X = 90;
                                        rectangle.Y = 360;
                                        break;
                                }
                            }
                            else if ((downRight == num58 || downRight == num) && upRight != num58 && upRight != num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 0;
                                        rectangle.Y = 360;
                                        break;
                                    case 1:
                                        rectangle.X = 18;
                                        rectangle.Y = 360;
                                        break;
                                    default:
                                        rectangle.X = 36;
                                        rectangle.Y = 360;
                                        break;
                                }
                            }
                        }
                        else if (right != num && right != num58 && up == num && down == num && left == num)
                        {
                            if ((upLeft == num58 || upLeft == num) && downLeft != num58 && downLeft != num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 0;
                                        rectangle.Y = 378;
                                        break;
                                    case 1:
                                        rectangle.X = 18;
                                        rectangle.Y = 378;
                                        break;
                                    default:
                                        rectangle.X = 36;
                                        rectangle.Y = 378;
                                        break;
                                }
                            }
                            else if ((downLeft == num58 || downLeft == num) && upLeft != num58 && upLeft != num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 54;
                                        rectangle.Y = 378;
                                        break;
                                    case 1:
                                        rectangle.X = 72;
                                        rectangle.Y = 378;
                                        break;
                                    default:
                                        rectangle.X = 90;
                                        rectangle.Y = 378;
                                        break;
                                }
                            }
                        }

                        if ((up == num || up == num58) && (down == num || down == num58) &&
                            (left == num || left == num58) && (right == num || right == num58) && upLeft != -1 &&
                            upRight != -1 && downLeft != -1 && downRight != -1)
                        {
                            if ((i + j) % 2 != 1)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 18;
                                        rectangle.Y = 18;
                                        break;
                                    case 1:
                                        rectangle.X = 36;
                                        rectangle.Y = 18;
                                        break;
                                    default:
                                        rectangle.X = 54;
                                        rectangle.Y = 18;
                                        break;
                                }
                            }
                            else
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 108;
                                        rectangle.Y = 198;
                                        break;
                                    case 1:
                                        rectangle.X = 126;
                                        rectangle.Y = 198;
                                        break;
                                    default:
                                        rectangle.X = 144;
                                        rectangle.Y = 198;
                                        break;
                                }
                            }
                        }

                        TileMergeAttempt(-2, num58, ref up, ref down, ref left, ref right, ref upLeft, ref upRight,
                            ref downLeft, ref downRight);
                    }

                    TileMergeAttempt(num, Main.tileMerge[num], ref up, ref down, ref left, ref right, ref upLeft,
                        ref upRight, ref downLeft, ref downRight);
                    if (rectangle.X == -1 && rectangle.Y == -1 &&
                        (Main.tileMergeDirt[num] || (num > -1 && TileID.Sets.ChecksForMerge[num])))
                    {
                        if (!flag8)
                        {
                            flag8 = true;
                            TileMergeAttemptWeird(num, -1, Main.tileSolid, ref up, ref down, ref left, ref right,
                                ref upLeft, ref upRight, ref downLeft, ref downRight);
                        }

                        if (up > -1 && up != num)
                        {
                            up = -1;
                        }

                        if (down > -1 && down != num)
                        {
                            down = -1;
                        }

                        if (left > -1 && left != num)
                        {
                            left = -1;
                        }

                        if (right > -1 && right != num)
                        {
                            right = -1;
                        }

                        if (up != -1 && down != -1 && left != -1 && right != -1)
                        {
                            if (up == -2 && down == num && left == num && right == num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 144;
                                        rectangle.Y = 108;
                                        break;
                                    case 1:
                                        rectangle.X = 162;
                                        rectangle.Y = 108;
                                        break;
                                    default:
                                        rectangle.X = 180;
                                        rectangle.Y = 108;
                                        break;
                                }

                                mergeUp = true;
                            }
                            else if (up == num && down == -2 && left == num && right == num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 144;
                                        rectangle.Y = 90;
                                        break;
                                    case 1:
                                        rectangle.X = 162;
                                        rectangle.Y = 90;
                                        break;
                                    default:
                                        rectangle.X = 180;
                                        rectangle.Y = 90;
                                        break;
                                }

                                mergeDown = true;
                            }
                            else if (up == num && down == num && left == -2 && right == num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 162;
                                        rectangle.Y = 126;
                                        break;
                                    case 1:
                                        rectangle.X = 162;
                                        rectangle.Y = 144;
                                        break;
                                    default:
                                        rectangle.X = 162;
                                        rectangle.Y = 162;
                                        break;
                                }

                                mergeLeft = true;
                            }
                            else if (up == num && down == num && left == num && right == -2)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 144;
                                        rectangle.Y = 126;
                                        break;
                                    case 1:
                                        rectangle.X = 144;
                                        rectangle.Y = 144;
                                        break;
                                    default:
                                        rectangle.X = 144;
                                        rectangle.Y = 162;
                                        break;
                                }

                                mergeRight = true;
                            }
                            else if (up == -2 && down == num && left == -2 && right == num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 36;
                                        rectangle.Y = 90;
                                        break;
                                    case 1:
                                        rectangle.X = 36;
                                        rectangle.Y = 126;
                                        break;
                                    default:
                                        rectangle.X = 36;
                                        rectangle.Y = 162;
                                        break;
                                }

                                mergeUp = true;
                                mergeLeft = true;
                            }
                            else if (up == -2 && down == num && left == num && right == -2)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 54;
                                        rectangle.Y = 90;
                                        break;
                                    case 1:
                                        rectangle.X = 54;
                                        rectangle.Y = 126;
                                        break;
                                    default:
                                        rectangle.X = 54;
                                        rectangle.Y = 162;
                                        break;
                                }

                                mergeUp = true;
                                mergeRight = true;
                            }
                            else if (up == num && down == -2 && left == -2 && right == num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 36;
                                        rectangle.Y = 108;
                                        break;
                                    case 1:
                                        rectangle.X = 36;
                                        rectangle.Y = 144;
                                        break;
                                    default:
                                        rectangle.X = 36;
                                        rectangle.Y = 180;
                                        break;
                                }

                                mergeDown = true;
                                mergeLeft = true;
                            }
                            else if (up == num && down == -2 && left == num && right == -2)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 54;
                                        rectangle.Y = 108;
                                        break;
                                    case 1:
                                        rectangle.X = 54;
                                        rectangle.Y = 144;
                                        break;
                                    default:
                                        rectangle.X = 54;
                                        rectangle.Y = 180;
                                        break;
                                }

                                mergeDown = true;
                                mergeRight = true;
                            }
                            else if (up == num && down == num && left == -2 && right == -2)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 180;
                                        rectangle.Y = 126;
                                        break;
                                    case 1:
                                        rectangle.X = 180;
                                        rectangle.Y = 144;
                                        break;
                                    default:
                                        rectangle.X = 180;
                                        rectangle.Y = 162;
                                        break;
                                }

                                mergeLeft = true;
                                mergeRight = true;
                            }
                            else if (up == -2 && down == -2 && left == num && right == num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 144;
                                        rectangle.Y = 180;
                                        break;
                                    case 1:
                                        rectangle.X = 162;
                                        rectangle.Y = 180;
                                        break;
                                    default:
                                        rectangle.X = 180;
                                        rectangle.Y = 180;
                                        break;
                                }

                                mergeUp = true;
                                mergeDown = true;
                            }
                            else if (up == -2 && down == num && left == -2 && right == -2)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 198;
                                        rectangle.Y = 90;
                                        break;
                                    case 1:
                                        rectangle.X = 198;
                                        rectangle.Y = 108;
                                        break;
                                    default:
                                        rectangle.X = 198;
                                        rectangle.Y = 126;
                                        break;
                                }

                                mergeUp = true;
                                mergeLeft = true;
                                mergeRight = true;
                            }
                            else if (up == num && down == -2 && left == -2 && right == -2)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 198;
                                        rectangle.Y = 144;
                                        break;
                                    case 1:
                                        rectangle.X = 198;
                                        rectangle.Y = 162;
                                        break;
                                    default:
                                        rectangle.X = 198;
                                        rectangle.Y = 180;
                                        break;
                                }

                                mergeDown = true;
                                mergeLeft = true;
                                mergeRight = true;
                            }
                            else if (up == -2 && down == -2 && left == num && right == -2)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 216;
                                        rectangle.Y = 144;
                                        break;
                                    case 1:
                                        rectangle.X = 216;
                                        rectangle.Y = 162;
                                        break;
                                    default:
                                        rectangle.X = 216;
                                        rectangle.Y = 180;
                                        break;
                                }

                                mergeUp = true;
                                mergeDown = true;
                                mergeRight = true;
                            }
                            else if (up == -2 && down == -2 && left == -2 && right == num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 216;
                                        rectangle.Y = 90;
                                        break;
                                    case 1:
                                        rectangle.X = 216;
                                        rectangle.Y = 108;
                                        break;
                                    default:
                                        rectangle.X = 216;
                                        rectangle.Y = 126;
                                        break;
                                }

                                mergeUp = true;
                                mergeDown = true;
                                mergeLeft = true;
                            }
                            else if (up == -2 && down == -2 && left == -2 && right == -2)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 108;
                                        rectangle.Y = 198;
                                        break;
                                    case 1:
                                        rectangle.X = 126;
                                        rectangle.Y = 198;
                                        break;
                                    default:
                                        rectangle.X = 144;
                                        rectangle.Y = 198;
                                        break;
                                }

                                mergeUp = true;
                                mergeDown = true;
                                mergeLeft = true;
                                mergeRight = true;
                            }
                            else if (up == num && down == num && left == num && right == num)
                            {
                                if (upLeft == -2)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 18;
                                            rectangle.Y = 108;
                                            break;
                                        case 1:
                                            rectangle.X = 18;
                                            rectangle.Y = 144;
                                            break;
                                        default:
                                            rectangle.X = 18;
                                            rectangle.Y = 180;
                                            break;
                                    }
                                }

                                if (upRight == -2)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 0;
                                            rectangle.Y = 108;
                                            break;
                                        case 1:
                                            rectangle.X = 0;
                                            rectangle.Y = 144;
                                            break;
                                        default:
                                            rectangle.X = 0;
                                            rectangle.Y = 180;
                                            break;
                                    }
                                }

                                if (downLeft == -2)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 18;
                                            rectangle.Y = 90;
                                            break;
                                        case 1:
                                            rectangle.X = 18;
                                            rectangle.Y = 126;
                                            break;
                                        default:
                                            rectangle.X = 18;
                                            rectangle.Y = 162;
                                            break;
                                    }
                                }

                                if (downRight == -2)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 0;
                                            rectangle.Y = 90;
                                            break;
                                        case 1:
                                            rectangle.X = 0;
                                            rectangle.Y = 126;
                                            break;
                                        default:
                                            rectangle.X = 0;
                                            rectangle.Y = 162;
                                            break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (num != 2 && num != 23 && num != 60 && num != 70 && num != 109 && num != 199)
                            {
                                if (up == -1 && down == -2 && left == num && right == num)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 234;
                                            rectangle.Y = 0;
                                            break;
                                        case 1:
                                            rectangle.X = 252;
                                            rectangle.Y = 0;
                                            break;
                                        default:
                                            rectangle.X = 270;
                                            rectangle.Y = 0;
                                            break;
                                    }

                                    mergeDown = true;
                                }
                                else if (up == -2 && down == -1 && left == num && right == num)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 234;
                                            rectangle.Y = 18;
                                            break;
                                        case 1:
                                            rectangle.X = 252;
                                            rectangle.Y = 18;
                                            break;
                                        default:
                                            rectangle.X = 270;
                                            rectangle.Y = 18;
                                            break;
                                    }

                                    mergeUp = true;
                                }
                                else if (up == num && down == num && left == -1 && right == -2)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 234;
                                            rectangle.Y = 36;
                                            break;
                                        case 1:
                                            rectangle.X = 252;
                                            rectangle.Y = 36;
                                            break;
                                        default:
                                            rectangle.X = 270;
                                            rectangle.Y = 36;
                                            break;
                                    }

                                    mergeRight = true;
                                }
                                else if (up == num && down == num && left == -2 && right == -1)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 234;
                                            rectangle.Y = 54;
                                            break;
                                        case 1:
                                            rectangle.X = 252;
                                            rectangle.Y = 54;
                                            break;
                                        default:
                                            rectangle.X = 270;
                                            rectangle.Y = 54;
                                            break;
                                    }

                                    mergeLeft = true;
                                }
                            }

                            if (up != -1 && down != -1 && left == -1 && right == num)
                            {
                                if (up == -2 && down == num)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 72;
                                            rectangle.Y = 144;
                                            break;
                                        case 1:
                                            rectangle.X = 72;
                                            rectangle.Y = 162;
                                            break;
                                        default:
                                            rectangle.X = 72;
                                            rectangle.Y = 180;
                                            break;
                                    }

                                    mergeUp = true;
                                }
                                else if (down == -2 && up == num)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 72;
                                            rectangle.Y = 90;
                                            break;
                                        case 1:
                                            rectangle.X = 72;
                                            rectangle.Y = 108;
                                            break;
                                        default:
                                            rectangle.X = 72;
                                            rectangle.Y = 126;
                                            break;
                                    }

                                    mergeDown = true;
                                }
                            }
                            else if (up != -1 && down != -1 && left == num && right == -1)
                            {
                                if (up == -2 && down == num)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 90;
                                            rectangle.Y = 144;
                                            break;
                                        case 1:
                                            rectangle.X = 90;
                                            rectangle.Y = 162;
                                            break;
                                        default:
                                            rectangle.X = 90;
                                            rectangle.Y = 180;
                                            break;
                                    }

                                    mergeUp = true;
                                }
                                else if (down == -2 && up == num)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 90;
                                            rectangle.Y = 90;
                                            break;
                                        case 1:
                                            rectangle.X = 90;
                                            rectangle.Y = 108;
                                            break;
                                        default:
                                            rectangle.X = 90;
                                            rectangle.Y = 126;
                                            break;
                                    }

                                    mergeDown = true;
                                }
                            }
                            else if (up == -1 && down == num && left != -1 && right != -1)
                            {
                                if (left == -2 && right == num)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 0;
                                            rectangle.Y = 198;
                                            break;
                                        case 1:
                                            rectangle.X = 18;
                                            rectangle.Y = 198;
                                            break;
                                        default:
                                            rectangle.X = 36;
                                            rectangle.Y = 198;
                                            break;
                                    }

                                    mergeLeft = true;
                                }
                                else if (right == -2 && left == num)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 54;
                                            rectangle.Y = 198;
                                            break;
                                        case 1:
                                            rectangle.X = 72;
                                            rectangle.Y = 198;
                                            break;
                                        default:
                                            rectangle.X = 90;
                                            rectangle.Y = 198;
                                            break;
                                    }

                                    mergeRight = true;
                                }
                            }
                            else if (up == num && down == -1 && left != -1 && right != -1)
                            {
                                if (left == -2 && right == num)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 0;
                                            rectangle.Y = 216;
                                            break;
                                        case 1:
                                            rectangle.X = 18;
                                            rectangle.Y = 216;
                                            break;
                                        default:
                                            rectangle.X = 36;
                                            rectangle.Y = 216;
                                            break;
                                    }

                                    mergeLeft = true;
                                }
                                else if (right == -2 && left == num)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 54;
                                            rectangle.Y = 216;
                                            break;
                                        case 1:
                                            rectangle.X = 72;
                                            rectangle.Y = 216;
                                            break;
                                        default:
                                            rectangle.X = 90;
                                            rectangle.Y = 216;
                                            break;
                                    }

                                    mergeRight = true;
                                }
                            }
                            else if (up != -1 && down != -1 && left == -1 && right == -1)
                            {
                                if (up == -2 && down == -2)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 108;
                                            rectangle.Y = 216;
                                            break;
                                        case 1:
                                            rectangle.X = 108;
                                            rectangle.Y = 234;
                                            break;
                                        default:
                                            rectangle.X = 108;
                                            rectangle.Y = 252;
                                            break;
                                    }

                                    mergeUp = true;
                                    mergeDown = true;
                                }
                                else if (up == -2)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 126;
                                            rectangle.Y = 144;
                                            break;
                                        case 1:
                                            rectangle.X = 126;
                                            rectangle.Y = 162;
                                            break;
                                        default:
                                            rectangle.X = 126;
                                            rectangle.Y = 180;
                                            break;
                                    }

                                    mergeUp = true;
                                }
                                else if (down == -2)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 126;
                                            rectangle.Y = 90;
                                            break;
                                        case 1:
                                            rectangle.X = 126;
                                            rectangle.Y = 108;
                                            break;
                                        default:
                                            rectangle.X = 126;
                                            rectangle.Y = 126;
                                            break;
                                    }

                                    mergeDown = true;
                                }
                            }
                            else if (up == -1 && down == -1 && left != -1 && right != -1)
                            {
                                if (left == -2 && right == -2)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 162;
                                            rectangle.Y = 198;
                                            break;
                                        case 1:
                                            rectangle.X = 180;
                                            rectangle.Y = 198;
                                            break;
                                        default:
                                            rectangle.X = 198;
                                            rectangle.Y = 198;
                                            break;
                                    }

                                    mergeLeft = true;
                                    mergeRight = true;
                                }
                                else if (left == -2)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 0;
                                            rectangle.Y = 252;
                                            break;
                                        case 1:
                                            rectangle.X = 18;
                                            rectangle.Y = 252;
                                            break;
                                        default:
                                            rectangle.X = 36;
                                            rectangle.Y = 252;
                                            break;
                                    }

                                    mergeLeft = true;
                                }
                                else if (right == -2)
                                {
                                    switch (num55)
                                    {
                                        case 0:
                                            rectangle.X = 54;
                                            rectangle.Y = 252;
                                            break;
                                        case 1:
                                            rectangle.X = 72;
                                            rectangle.Y = 252;
                                            break;
                                        default:
                                            rectangle.X = 90;
                                            rectangle.Y = 252;
                                            break;
                                    }

                                    mergeRight = true;
                                }
                            }
                            else if (up == -2 && down == -1 && left == -1 && right == -1)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 108;
                                        rectangle.Y = 144;
                                        break;
                                    case 1:
                                        rectangle.X = 108;
                                        rectangle.Y = 162;
                                        break;
                                    default:
                                        rectangle.X = 108;
                                        rectangle.Y = 180;
                                        break;
                                }

                                mergeUp = true;
                            }
                            else if (up == -1 && down == -2 && left == -1 && right == -1)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 108;
                                        rectangle.Y = 90;
                                        break;
                                    case 1:
                                        rectangle.X = 108;
                                        rectangle.Y = 108;
                                        break;
                                    default:
                                        rectangle.X = 108;
                                        rectangle.Y = 126;
                                        break;
                                }

                                mergeDown = true;
                            }
                            else if (up == -1 && down == -1 && left == -2 && right == -1)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 0;
                                        rectangle.Y = 234;
                                        break;
                                    case 1:
                                        rectangle.X = 18;
                                        rectangle.Y = 234;
                                        break;
                                    default:
                                        rectangle.X = 36;
                                        rectangle.Y = 234;
                                        break;
                                }

                                mergeLeft = true;
                            }
                            else if (up == -1 && down == -1 && left == -1 && right == -2)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 54;
                                        rectangle.Y = 234;
                                        break;
                                    case 1:
                                        rectangle.X = 72;
                                        rectangle.Y = 234;
                                        break;
                                    default:
                                        rectangle.X = 90;
                                        rectangle.Y = 234;
                                        break;
                                }

                                mergeRight = true;
                            }
                        }
                    }

                    int num59 = tile.blockType();
                    if (TileID.Sets.HasSlopeFrames[num])
                    {
                        if (num59 == 0)
                        {
                            bool flag9 = num == up && tile16.topSlope();
                            bool flag10 = num == left && tile10.leftSlope();
                            bool flag11 = num == right && tile11.rightSlope();
                            bool flag12 = num == down && tile17.bottomSlope();
                            int num60 = 0;
                            int num61 = 0;
                            if (flag9.ToInt() + flag10.ToInt() + flag11.ToInt() + flag12.ToInt() > 2)
                            {
                                int num62 = (tile16.slope() == 1).ToInt() + (tile11.slope() == 1).ToInt() +
                                            (tile17.slope() == 4).ToInt() + (tile10.slope() == 4).ToInt();
                                int num63 = (tile16.slope() == 2).ToInt() + (tile11.slope() == 3).ToInt() +
                                            (tile17.slope() == 3).ToInt() + (tile10.slope() == 2).ToInt();
                                if (num62 == num63)
                                {
                                    num60 = 2;
                                    num61 = 4;
                                }
                                else if (num62 > num63)
                                {
                                    bool flag13 = num == upLeft && tile14.slope() == 0;
                                    bool flag14 = num == downRight && tile13.slope() == 0;
                                    if (flag13 && flag14)
                                    {
                                        num61 = 4;
                                    }
                                    else if (flag14)
                                    {
                                        num60 = 6;
                                    }
                                    else
                                    {
                                        num60 = 7;
                                        num61 = 1;
                                    }
                                }
                                else
                                {
                                    bool flag15 = num == upRight && tile15.slope() == 0;
                                    bool flag16 = num == downLeft && tile12.slope() == 0;
                                    if (flag15 && flag16)
                                    {
                                        num61 = 4;
                                        num60 = 1;
                                    }
                                    else if (flag16)
                                    {
                                        num60 = 7;
                                    }
                                    else
                                    {
                                        num60 = 6;
                                        num61 = 1;
                                    }
                                }

                                rectangle.X = (18 + num60) * 18;
                                rectangle.Y = num61 * 18;
                            }
                            else
                            {
                                if (flag9 && flag10 && num == down && num == right)
                                {
                                    num61 = 2;
                                }
                                else if (flag9 && flag11 && num == down && num == left)
                                {
                                    num60 = 1;
                                    num61 = 2;
                                }
                                else if (flag11 && flag12 && num == up && num == left)
                                {
                                    num60 = 1;
                                    num61 = 3;
                                }
                                else if (flag12 && flag10 && num == up && num == right)
                                {
                                    num61 = 3;
                                }

                                if (num60 != 0 || num61 != 0)
                                {
                                    rectangle.X = (18 + num60) * 18;
                                    rectangle.Y = num61 * 18;
                                }
                            }
                        }

                        if (num59 >= 2 && (rectangle.X < 0 || rectangle.Y < 0))
                        {
                            int num64 = -1;
                            int num65 = -1;
                            int num66 = -1;
                            int num67 = 0;
                            int num68 = 0;
                            switch (num59)
                            {
                                case 2:
                                    num64 = left;
                                    num65 = down;
                                    num66 = downLeft;
                                    num67++;
                                    break;
                                case 3:
                                    num64 = right;
                                    num65 = down;
                                    num66 = downRight;
                                    break;
                                case 4:
                                    num64 = left;
                                    num65 = up;
                                    num66 = upLeft;
                                    num67++;
                                    num68++;
                                    break;
                                case 5:
                                    num64 = right;
                                    num65 = up;
                                    num66 = upRight;
                                    num68++;
                                    break;
                            }

                            if (num != num64 || num != num65 || num != num66)
                            {
                                if (num == num64 && num == num65)
                                {
                                    num67 += 2;
                                }
                                else if (num == num64)
                                {
                                    num67 += 4;
                                }
                                else if (num == num65)
                                {
                                    num67 += 4;
                                    num68 += 2;
                                }
                                else
                                {
                                    num67 += 2;
                                    num68 += 2;
                                }
                            }

                            rectangle.X = (18 + num67) * 18;
                            rectangle.Y = num68 * 18;
                        }
                    }

                    if (rectangle.X < 0 || rectangle.Y < 0)
                    {
                        if (!flag8)
                        {
                            flag8 = true;
                            TileMergeAttemptWeird(num, -1, Main.tileSolid, ref up, ref down, ref left, ref right,
                                ref upLeft, ref upRight, ref downLeft, ref downRight);
                        }

                        if (num == 2 || num == 23 || num == 60 || num == 70 || num == 109 || num == 199 ||
                            Main.tileMoss[num])
                        {
                            TileMergeAttempt(num, -2, ref up, ref down, ref left, ref right, ref upLeft, ref upRight,
                                ref downLeft, ref downRight);
                        }

                        if (up == num && down == num && left == num && right == num)
                        {
                            if (upLeft != num && upRight != num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 108;
                                        rectangle.Y = 18;
                                        break;
                                    case 1:
                                        rectangle.X = 126;
                                        rectangle.Y = 18;
                                        break;
                                    default:
                                        rectangle.X = 144;
                                        rectangle.Y = 18;
                                        break;
                                }
                            }
                            else if (downLeft != num && downRight != num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 108;
                                        rectangle.Y = 36;
                                        break;
                                    case 1:
                                        rectangle.X = 126;
                                        rectangle.Y = 36;
                                        break;
                                    default:
                                        rectangle.X = 144;
                                        rectangle.Y = 36;
                                        break;
                                }
                            }
                            else if (upLeft != num && downLeft != num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 180;
                                        rectangle.Y = 0;
                                        break;
                                    case 1:
                                        rectangle.X = 180;
                                        rectangle.Y = 18;
                                        break;
                                    default:
                                        rectangle.X = 180;
                                        rectangle.Y = 36;
                                        break;
                                }
                            }
                            else if (upRight == num || downRight == num)
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 18;
                                        rectangle.Y = 18;
                                        break;
                                    case 1:
                                        rectangle.X = 36;
                                        rectangle.Y = 18;
                                        break;
                                    default:
                                        rectangle.X = 54;
                                        rectangle.Y = 18;
                                        break;
                                }
                            }
                            else
                            {
                                switch (num55)
                                {
                                    case 0:
                                        rectangle.X = 198;
                                        rectangle.Y = 0;
                                        break;
                                    case 1:
                                        rectangle.X = 198;
                                        rectangle.Y = 18;
                                        break;
                                    default:
                                        rectangle.X = 198;
                                        rectangle.Y = 36;
                                        break;
                                }
                            }
                        }
                        else if (up != num && down == num && left == num && right == num)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 18;
                                    rectangle.Y = 0;
                                    break;
                                case 1:
                                    rectangle.X = 36;
                                    rectangle.Y = 0;
                                    break;
                                default:
                                    rectangle.X = 54;
                                    rectangle.Y = 0;
                                    break;
                            }
                        }
                        else if (up == num && down != num && left == num && right == num)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 18;
                                    rectangle.Y = 36;
                                    break;
                                case 1:
                                    rectangle.X = 36;
                                    rectangle.Y = 36;
                                    break;
                                default:
                                    rectangle.X = 54;
                                    rectangle.Y = 36;
                                    break;
                            }
                        }
                        else if (up == num && down == num && left != num && right == num)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 0;
                                    rectangle.Y = 0;
                                    break;
                                case 1:
                                    rectangle.X = 0;
                                    rectangle.Y = 18;
                                    break;
                                default:
                                    rectangle.X = 0;
                                    rectangle.Y = 36;
                                    break;
                            }
                        }
                        else if (up == num && down == num && left == num && right != num)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 72;
                                    rectangle.Y = 0;
                                    break;
                                case 1:
                                    rectangle.X = 72;
                                    rectangle.Y = 18;
                                    break;
                                default:
                                    rectangle.X = 72;
                                    rectangle.Y = 36;
                                    break;
                            }
                        }
                        else if (up != num && down == num && left != num && right == num)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 0;
                                    rectangle.Y = 54;
                                    break;
                                case 1:
                                    rectangle.X = 36;
                                    rectangle.Y = 54;
                                    break;
                                default:
                                    rectangle.X = 72;
                                    rectangle.Y = 54;
                                    break;
                            }
                        }
                        else if (up != num && down == num && left == num && right != num)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 18;
                                    rectangle.Y = 54;
                                    break;
                                case 1:
                                    rectangle.X = 54;
                                    rectangle.Y = 54;
                                    break;
                                default:
                                    rectangle.X = 90;
                                    rectangle.Y = 54;
                                    break;
                            }
                        }
                        else if (up == num && down != num && left != num && right == num)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 0;
                                    rectangle.Y = 72;
                                    break;
                                case 1:
                                    rectangle.X = 36;
                                    rectangle.Y = 72;
                                    break;
                                default:
                                    rectangle.X = 72;
                                    rectangle.Y = 72;
                                    break;
                            }
                        }
                        else if (up == num && down != num && left == num && right != num)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 18;
                                    rectangle.Y = 72;
                                    break;
                                case 1:
                                    rectangle.X = 54;
                                    rectangle.Y = 72;
                                    break;
                                default:
                                    rectangle.X = 90;
                                    rectangle.Y = 72;
                                    break;
                            }
                        }
                        else if (up == num && down == num && left != num && right != num)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 90;
                                    rectangle.Y = 0;
                                    break;
                                case 1:
                                    rectangle.X = 90;
                                    rectangle.Y = 18;
                                    break;
                                default:
                                    rectangle.X = 90;
                                    rectangle.Y = 36;
                                    break;
                            }
                        }
                        else if (up != num && down != num && left == num && right == num)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 108;
                                    rectangle.Y = 72;
                                    break;
                                case 1:
                                    rectangle.X = 126;
                                    rectangle.Y = 72;
                                    break;
                                default:
                                    rectangle.X = 144;
                                    rectangle.Y = 72;
                                    break;
                            }
                        }
                        else if (up != num && down == num && left != num && right != num)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 108;
                                    rectangle.Y = 0;
                                    break;
                                case 1:
                                    rectangle.X = 126;
                                    rectangle.Y = 0;
                                    break;
                                default:
                                    rectangle.X = 144;
                                    rectangle.Y = 0;
                                    break;
                            }
                        }
                        else if (up == num && down != num && left != num && right != num)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 108;
                                    rectangle.Y = 54;
                                    break;
                                case 1:
                                    rectangle.X = 126;
                                    rectangle.Y = 54;
                                    break;
                                default:
                                    rectangle.X = 144;
                                    rectangle.Y = 54;
                                    break;
                            }
                        }
                        else if (up != num && down != num && left != num && right == num)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 162;
                                    rectangle.Y = 0;
                                    break;
                                case 1:
                                    rectangle.X = 162;
                                    rectangle.Y = 18;
                                    break;
                                default:
                                    rectangle.X = 162;
                                    rectangle.Y = 36;
                                    break;
                            }
                        }
                        else if (up != num && down != num && left == num && right != num)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 216;
                                    rectangle.Y = 0;
                                    break;
                                case 1:
                                    rectangle.X = 216;
                                    rectangle.Y = 18;
                                    break;
                                default:
                                    rectangle.X = 216;
                                    rectangle.Y = 36;
                                    break;
                            }
                        }
                        else if (up != num && down != num && left != num && right != num)
                        {
                            switch (num55)
                            {
                                case 0:
                                    rectangle.X = 162;
                                    rectangle.Y = 54;
                                    break;
                                case 1:
                                    rectangle.X = 180;
                                    rectangle.Y = 54;
                                    break;
                                default:
                                    rectangle.X = 198;
                                    rectangle.Y = 54;
                                    break;
                            }
                        }
                    }

                    if (rectangle.X <= -1 || rectangle.Y <= -1)
                    {
                        if (num55 <= 0)
                        {
                            rectangle.X = 18;
                            rectangle.Y = 18;
                        }
                        else if (num55 == 1)
                        {
                            rectangle.X = 36;
                            rectangle.Y = 18;
                        }

                        if (num55 >= 2)
                        {
                            rectangle.X = 54;
                            rectangle.Y = 18;
                        }
                    }

                    if (Main.tileLargeFrames[num] == 1 && num55 == 3)
                    {
                        rectangle.Y += 90;
                    }

                    tile.frameX = (short) rectangle.X;
                    tile.frameY = (short) rectangle.Y;
                    if (num == 52 || num == 62 || num == 115 || num == 205)
                    {
                        up = ((tile16 == null)
                            ? num
                            : ((!tile16.active()) ? (-1) : ((!tile16.bottomSlope()) ? tile16.type : (-1))));
                        if ((num == 52 || num == 205) && (up == 109 || up == 115))
                        {
                            tile.type = 115;
                            SquareTileFrame(i, j, true);
                            return;
                        }

                        if ((num == 115 || num == 205) && (up == 2 || up == 52))
                        {
                            tile.type = 52;
                            SquareTileFrame(i, j, true);
                            return;
                        }

                        if ((num == 52 || num == 115) && (up == 199 || up == 205))
                        {
                            tile.type = 205;
                            SquareTileFrame(i, j, true);
                            return;
                        }

                        if (up != num)
                        {
                            bool flag17 = false;
                            if (up == -1)
                            {
                                flag17 = true;
                            }

                            if (num == 52 && up != 2 && up != 192)
                            {
                                flag17 = true;
                            }

                            if (num == 62 && up != 60)
                            {
                                flag17 = true;
                            }

                            if (num == 115 && up != 109)
                            {
                                flag17 = true;
                            }

                            if (num == 205 && up != 199)
                            {
                                flag17 = true;
                            }

                            if (flag17)
                            {
                                KillTile(i, j, false, false, false);
                            }
                        }
                    }

                    if (!noTileActions && tile.active() &&
                        (num == 53 || num == 112 || num == 116 || num == 123 || num == 234 || num == 224 ||
                         num == 330 || num == 331 || num == 332 || num == 333))
                    {
                        if (Main.netMode == 0)
                        {
                            if (tile17 != null && !tile17.active())
                            {
                                bool flag18 = true;
                                if (tile16.active() && (TileID.Sets.BasicChest[tile16.type] ||
                                                        TileID.Sets.BasicChestFake[tile16.type] || tile16.type == 323 ||
                                                        tile16.type == 88))
                                {
                                    flag18 = false;
                                }

                                if (flag18)
                                {
                                    int damage = 10;
                                    int type;
                                    switch (num)
                                    {
                                        case 112:
                                            type = 56;
                                            break;
                                        case 59:
                                            type = 39;
                                            break;
                                        case 116:
                                            type = 67;
                                            break;
                                        case 123:
                                            type = 71;
                                            break;
                                        case 224:
                                            type = 179;
                                            break;
                                        case 234:
                                            type = 241;
                                            break;
                                        case 330:
                                            type = 411;
                                            damage = 0;
                                            break;
                                        case 331:
                                            type = 412;
                                            damage = 0;
                                            break;
                                        case 332:
                                            type = 413;
                                            damage = 0;
                                            break;
                                        case 333:
                                            type = 414;
                                            damage = 0;
                                            break;
                                        default:
                                            type = 31;
                                            break;
                                    }

                                    tile.ClearTile();
                                    int num69 = Projectile.NewProjectile((float) (i * 16 + 8), (float) (j * 16 + 8), 0f,
                                        0.41f, type, damage, 0f, Main.myPlayer, 0f, 0f);
                                    Main.projectile[num69].ai[0] = 1f;
                                    SquareTileFrame(i, j, true);
                                }
                            }
                        }
                        else if (Main.netMode == 2 && tile17 != null && !tile17.active())
                        {
                            bool flag19 = true;
                            if (tile16.active() && (TileID.Sets.BasicChest[tile16.type] ||
                                                    TileID.Sets.BasicChestFake[tile16.type] || tile16.type == 323 ||
                                                    tile16.type == 88))
                            {
                                flag19 = false;
                            }

                            if (flag19)
                            {
                                int damage2 = 10;
                                int num70;
                                switch (num)
                                {
                                    case 112:
                                        num70 = 56;
                                        break;
                                    case 116:
                                        num70 = 67;
                                        break;
                                    case 59:
                                        num70 = 39;
                                        break;
                                    case 123:
                                        num70 = 71;
                                        break;
                                    case 224:
                                        num70 = 179;
                                        break;
                                    case 234:
                                        num70 = 241;
                                        break;
                                    case 330:
                                        num70 = 411;
                                        damage2 = 0;
                                        break;
                                    case 331:
                                        num70 = 412;
                                        damage2 = 0;
                                        break;
                                    case 332:
                                        num70 = 413;
                                        damage2 = 0;
                                        break;
                                    case 333:
                                        num70 = 414;
                                        damage2 = 0;
                                        break;
                                    default:
                                        num70 = 31;
                                        break;
                                }

                                tile.active(false);
                                bool flag20 = false;
                                for (int m = 0; m < 1000; m++)
                                {
                                    if (Main.projectile[m].active && Main.projectile[m].owner == Main.myPlayer &&
                                        Main.projectile[m].type == num70 &&
                                        Math.Abs(Main.projectile[m].timeLeft - 3600) < 60 && Main.projectile[m]
                                            .Distance(new Vector2((float) (i * 16 + 8), (float) (j * 16 + 10))) < 4f)
                                    {
                                        flag20 = true;
                                        break;
                                    }
                                }

                                if (!flag20)
                                {
                                    int num71 = Projectile.NewProjectile((float) (i * 16 + 8), (float) (j * 16 + 8), 0f,
                                        2.5f, num70, damage2, 0f, Main.myPlayer, 0f, 0f);
                                    Main.projectile[num71].velocity.Y = 0.5f;
                                    Main.projectile[num71].position.Y += 2f;
                                    Main.projectile[num71].netUpdate = true;
                                }

                                NetMessage.SendTileSquare(-1, i, j, 1, TileChangeType.None);
                                SquareTileFrame(i, j, true);
                            }
                        }
                    }

                    if (rectangle.X != frameX && rectangle.Y != frameY && frameX >= 0 && frameY >= 0)
                    {
                        tileReframeCount++;
                        if (tileReframeCount < 55)
                        {
                            bool flag21 = mergeUp;
                            bool flag22 = mergeDown;
                            bool flag23 = mergeLeft;
                            bool flag24 = mergeRight;
                            TileFrame(i - 1, j, false, false);
                            TileFrame(i + 1, j, false, false);
                            TileFrame(i, j - 1, false, false);
                            TileFrame(i, j + 1, false, false);
                            mergeUp = flag21;
                            mergeDown = flag22;
                            mergeLeft = flag23;
                            mergeRight = flag24;
                        }

                        tileReframeCount--;
                    }
                }
            }
        }
        catch
        {
        }

        if (i > 0 && j > 0)
        {
            UpdateMapTile(i, j, addToList);
        }
    }

    public static void TriggerLunarApocalypse()
    {
        List<int> list = new List<int>();
        list.Add(517);
        list.Add(422);
        list.Add(507);
        list.Add(493);
        List<int> list2 = list;
        int[] array = new int[4];
        for (int i = 0; i < 4; i++)
        {
            array[i] = list2[Main.rand.Next(list2.Count)];
            list2.Remove(array[i]);
        }

        int num = Main.maxTilesX / 5;
        int num2 = (int) Main.worldSurface;
        for (int j = 0; j < 4; j++)
        {
            int num3 = num * (1 + j);
            bool flag = false;
            for (int k = 0; k < 30; k++)
            {
                int num4 = Main.rand.Next(-100, 101);
                for (int num5 = num2; num5 > 100; num5--)
                {
                    if (!Collision.SolidTiles(num3 + num4 - 10, num3 + num4 + 10, num5 - 20, num5 + 15) &&
                        !PlayerLOS(num3 + num4 - 10, num5) && !PlayerLOS(num3 + num4 + 10, num5) &&
                        !PlayerLOS(num3 + num4 - 10, num5 - 20) && !PlayerLOS(num3 + num4 + 10, num5 - 20))
                    {
                        int num6 = NPC.NewNPC((num3 + num4) * 16, num5 * 16, array[j], 0, 0f, 0f, 0f, 0f, 255);
                        if (Main.netMode == 2 && num6 < 200)
                        {
                            NetMessage.SendData(23, -1, -1, null, num6, 0f, 0f, 0f, 0, 0, 0);
                        }

                        flag = true;
                        break;
                    }
                }

                if (flag)
                {
                    break;
                }
            }

            if (!flag)
            {
                NPC.NewNPC(num3 * 16, (num2 - 40) * 16, array[j], 0, 0f, 0f, 0f, 0f, 255);
            }
        }

        NPC.TowerActiveVortex = (NPC.TowerActiveNebula = (NPC.TowerActiveSolar = (NPC.TowerActiveStardust = true)));
        NPC.LunarApocalypseIsUp = true;
        NPC.ShieldStrengthTowerSolar = (NPC.ShieldStrengthTowerVortex = (NPC.ShieldStrengthTowerNebula =
            (NPC.ShieldStrengthTowerStardust = NPC.ShieldStrengthTowerMax)));
        NetMessage.SendData(101, -1, -1, null, 0, 0f, 0f, 0f, 0, 0, 0);
        MessageLunarApocalypse();
    }

    public static void UpdateLunarApocalypse()
    {
        if (NPC.LunarApocalypseIsUp)
        {
            bool flag = false;
            bool flag2 = false;
            bool flag3 = false;
            bool flag4 = false;
            bool flag5 = false;
            for (int i = 0; i < 200; i++)
            {
                if (Main.npc[i].active)
                {
                    switch (Main.npc[i].type)
                    {
                        case 398:
                            flag = true;
                            break;
                        case 517:
                            flag2 = true;
                            break;
                        case 422:
                            flag3 = true;
                            break;
                        case 507:
                            flag4 = true;
                            break;
                        case 493:
                            flag5 = true;
                            break;
                    }
                }
            }

            if (!flag2)
            {
                NPC.TowerActiveSolar = false;
            }

            if (!flag3)
            {
                NPC.TowerActiveVortex = false;
            }

            if (!flag4)
            {
                NPC.TowerActiveNebula = false;
            }

            if (!flag5)
            {
                NPC.TowerActiveStardust = false;
            }

            if (!NPC.TowerActiveSolar && !NPC.TowerActiveVortex && !NPC.TowerActiveNebula && !NPC.TowerActiveStardust &&
                !flag)
            {
                StartImpendingDoom();
            }
        }
    }

    public static void StartImpendingDoom()
    {
        NPC.LunarApocalypseIsUp = false;
        NPC.MoonLordCountdown = 3600;
        NetMessage.SendData(103, -1, -1, null, NPC.MoonLordCountdown, 0f, 0f, 0f, 0, 0, 0);
        BroadcastText(NetworkText.FromKey(Lang.misc[52].Key), 50, 255, 130);
        if (Main.netMode != 1)
        {
            GetRidOfCultists();
        }
    }

    public static void GetRidOfCultists()
    {
        for (int i = 0; i < 200; i++)
        {
            if (Main.npc[i].active && (Main.npc[i].type == 437 || Main.npc[i].type == 438 || Main.npc[i].type == 379))
            {
                Main.npc[i].active = false;
                if (Main.netMode != 1)
                {
                    NetMessage.SendData(23, -1, -1, null, i, 0f, 0f, 0f, 0, 0, 0);
                }
            }
        }
    }

    public static void MessageLunarApocalypse()
    {
        if (NPC.LunarApocalypseIsUp)
        {
            int num = 0;
            if (!NPC.TowerActiveSolar)
            {
                num++;
            }

            if (!NPC.TowerActiveVortex)
            {
                num++;
            }

            if (!NPC.TowerActiveNebula)
            {
                num++;
            }

            if (!NPC.TowerActiveStardust)
            {
                num++;
            }

            BroadcastText(NetworkText.FromKey(Lang.misc[43 + num].Key), 175, 75, 255);
        }
    }

    public static void BroadcastText(NetworkText text, Vector4 color)
    {
        BroadcastText(text, new Color(color));
    }

    public static void BroadcastText(NetworkText text, Vector3 color)
    {
        BroadcastText(text, new Color(color));
    }

    public static void BroadcastText(NetworkText text, int r, int g, int b)
    {
        BroadcastText(text, new Color(r, g, b));
    }

    public static void BroadcastText(NetworkText text, byte r, byte g, byte b)
    {
        BroadcastText(text, new Color(r, g, b));
    }

    public static void BroadcastText(NetworkText text, Color color)
    {
        if (Main.netMode == 0)
        {
            Main.NewText(text.ToString(), color.R, color.G, color.B, false);
        }
        else if (Main.netMode == 2)
        {
            NetMessage.BroadcastChatMessage(text, color, -1);
        }
    }

    public static bool CanCutTile(int x, int y, TileCuttingContext context)
    {
        if (Main.tile[x, y + 1] != null && Main.tile[x, y + 1].type != 78 && Main.tile[x, y + 1].type != 380)
        {
            if (Main.tile[x, y].type == 254)
            {
                return context == TileCuttingContext.TilePlacement;
            }

            return true;
        }

        return false;
    }
}